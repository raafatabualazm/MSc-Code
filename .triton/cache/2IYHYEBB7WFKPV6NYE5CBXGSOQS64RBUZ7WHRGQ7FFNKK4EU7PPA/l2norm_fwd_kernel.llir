; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 3, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 5, !dbg !11
  %11 = lshr i32 %9, 6, !dbg !11
  %12 = and i32 %11, 7, !dbg !11
  %13 = and i32 %9, 31, !dbg !11
  %14 = zext nneg i32 %12 to i64, !dbg !11
  %15 = or disjoint i64 %14, %8, !dbg !11
  %16 = shl nsw i64 %15, 7, !dbg !11
  %17 = shl nuw nsw i32 %9, 1, !dbg !11
  %18 = and i32 %17, 126, !dbg !11
  %19 = zext nneg i32 %18 to i64, !dbg !11
  %20 = or disjoint i64 %16, %19, !dbg !11
  %21 = getelementptr bfloat, ptr addrspace(1) %0, i64 %20, !dbg !11
  %22 = icmp sgt i32 %7, -1, !dbg !11
  %23 = icmp slt i64 %15, 49152, !dbg !11
  %24 = and i1 %22, %23, !dbg !11
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %24) #6, !dbg !11
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !11
  %27 = extractelement <2 x bfloat> %26, i64 0, !dbg !11
  %28 = extractelement <2 x bfloat> %26, i64 1, !dbg !11
  %29 = fpext bfloat %27 to float, !dbg !12
  %30 = fpext bfloat %28 to float, !dbg !12
  %31 = fmul float %29, %29, !dbg !13
  %32 = fmul float %30, %30, !dbg !13
  %33 = fadd float %31, %32, !dbg !14
  %34 = bitcast float %33 to i32, !dbg !18
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = fadd float %33, %36, !dbg !14
  %38 = bitcast float %37 to i32, !dbg !18
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !18
  %40 = bitcast i32 %39 to float, !dbg !18
  %41 = fadd float %37, %40, !dbg !14
  %42 = bitcast float %41 to i32, !dbg !18
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !18
  %44 = bitcast i32 %43 to float, !dbg !18
  %45 = fadd float %41, %44, !dbg !14
  %46 = bitcast float %45 to i32, !dbg !18
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !18
  %48 = bitcast i32 %47 to float, !dbg !18
  %49 = fadd float %45, %48, !dbg !14
  %50 = bitcast float %49 to i32, !dbg !18
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !18
  %52 = bitcast i32 %51 to float, !dbg !18
  %53 = fadd float %49, %52, !dbg !14
  %54 = and i32 %10, 1, !dbg !18
  %55 = icmp eq i32 %13, 0, !dbg !18
  %.idx = shl nuw nsw i32 %12, 3, !dbg !18
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !18
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %54, !dbg !18
  %58 = bitcast float %53 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %55) #6, !dbg !18
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %59 = icmp samesign ult i32 %9, 16, !dbg !18
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !18
  %61 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %59) #6, !dbg !18
  %62 = bitcast i32 %61 to float, !dbg !18
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !18
  %64 = bitcast i32 %63 to float, !dbg !18
  %65 = fadd float %62, %64, !dbg !14
  %66 = and i32 %9, 1009, !dbg !18
  %67 = icmp eq i32 %66, 0, !dbg !18
  %68 = bitcast float %65 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %68, i1 %67) #6, !dbg !18
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %69 = load float, ptr addrspace(3) %56, align 8, !dbg !18
  %70 = fadd float %3, %69, !dbg !19
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %71, 0, !dbg !20
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %72, 0, !dbg !20
  br i1 %.not.i, label %78, label %73, !dbg !20

73:                                               ; preds = %5
  br i1 %.not1.i, label %76, label %74, !dbg !20

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

78:                                               ; preds = %5
  br i1 %.not1.i, label %81, label %79, !dbg !20

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !20
  %83 = and i32 %9, 7, !dbg !11
  %84 = zext nneg i32 %83 to i64, !dbg !11
  %85 = or disjoint i64 %8, %84, !dbg !11
  %86 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %87 = fmul float %86, %29, !dbg !22
  %88 = fmul float %86, %30, !dbg !22
  %89 = fptrunc float %87 to bfloat, !dbg !23
  %90 = fptrunc float %88 to bfloat, !dbg !23
  %91 = getelementptr bfloat, ptr addrspace(1) %1, i64 %20, !dbg !24
  %92 = insertelement <2 x bfloat> poison, bfloat %89, i64 0, !dbg !24
  %93 = insertelement <2 x bfloat> %92, bfloat %90, i64 1, !dbg !24
  %94 = bitcast <2 x bfloat> %93 to i32, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %91, i1 %24) #6, !dbg !24
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !25
  %96 = icmp slt i64 %85, 49152, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %97 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %86, ptr addrspace(3) %97, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %98 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %83, !dbg !25
  %99 = load i32, ptr addrspace(3) %98, align 4, !dbg !25
  %100 = and i32 %9, 504, !dbg !25
  %101 = icmp eq i32 %100, 0, !dbg !25
  %102 = and i1 %101, %96, !dbg !25
  %103 = and i1 %22, %102, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %95, i1 %103) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
