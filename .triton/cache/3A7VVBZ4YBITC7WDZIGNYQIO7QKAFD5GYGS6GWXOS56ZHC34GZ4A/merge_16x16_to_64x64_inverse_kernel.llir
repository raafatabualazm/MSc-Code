; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @merge_16x16_to_64x64_inverse_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) %3) local_unnamed_addr #0 !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %7, 32, !dbg !10
  %11 = icmp eq i32 %10, 0, !dbg !10
  %12 = and i32 %7, 64, !dbg !10
  %13 = icmp eq i32 %12, 0, !dbg !10
  %14 = lshr i32 %7, 4, !dbg !10
  %15 = and i32 %14, 7, !dbg !10
  %16 = or disjoint i32 %15, 8, !dbg !10
  %17 = and i32 %7, 15, !dbg !10
  %18 = icmp samesign ugt i32 %15, %17, !dbg !11
  %19 = icmp samesign ugt i32 %16, %17, !dbg !11
  %20 = shl nuw nsw i32 %6, 6, !dbg !12
  %21 = and i32 %20, 4192256, !dbg !12
  %22 = mul i32 %21, %2, !dbg !13
  %23 = and i32 %20, 1984, !dbg !13
  %24 = or disjoint i32 %22, %23, !dbg !13
  %25 = sext i32 %24 to i64, !dbg !14
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !14
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !15
  %28 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !16
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !16
  %31 = mul nuw i32 %28, %30, !dbg !16
  %32 = add nuw i32 %31, %6, !dbg !16
  %33 = mul i32 %32, %29, !dbg !16
  %34 = add i32 %33, %5, !dbg !16
  %35 = shl i32 %34, 8, !dbg !16
  %36 = sext i32 %35 to i64, !dbg !16
  %37 = getelementptr i8, ptr addrspace(1) %3, i64 %36, !dbg !16
  %38 = icmp samesign ult i32 %7, 32, !dbg !16
  %39 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %7, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> zeroinitializer, i1 %38) #4, !dbg !16
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !16
  %40 = icmp eq i32 %7, 0, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %26, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %2, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 8192, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x7;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %37, ptr addrspace(3) @global_smem, i1 %38) #4, !dbg !16
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !16
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !16
  %41 = addrspacecast ptr addrspace(1) %37 to ptr, !dbg !16
  %42 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !17
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> zeroinitializer, i1 %38) #4, !dbg !17
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %27, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %2, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 4096, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %40) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %42, ptr addrspace(3) @global_smem, i1 %38) #4, !dbg !17
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %42, i1 %38) #4, !dbg !17
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !17
  %43 = shl i32 %5, 6, !dbg !18
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  %44 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !19
  %45 = extractvalue { i32, i1 } %44, 1, !dbg !19
  %46 = and i1 %38, %45, !dbg !19
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %46, ptr addrspace(3) @global_smem, ptr %41, i32 0, i32 %43, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  %47 = shl nuw nsw i32 %7, 2, !dbg !19
  %48 = and i32 %47, 28, !dbg !19
  %49 = shl nuw nsw i32 %7, 4, !dbg !19
  %50 = and i32 %49, 128, !dbg !19
  %51 = or disjoint i32 %48, %50, !dbg !19
  %52 = select i1 %11, i32 0, i32 36, !dbg !19
  %53 = xor i32 %51, %52, !dbg !19
  %54 = select i1 %13, i32 0, i32 72, !dbg !19
  %55 = xor i32 %53, %54, !dbg !19
  %56 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %55, !dbg !19
  %57 = ptrtoint ptr addrspace(3) %56 to i32, !dbg !19
  %58 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %57) #4, !dbg !19
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = extractvalue { i32, i32 } %58, 1, !dbg !19
  %62 = bitcast i32 %61 to float, !dbg !19
  %63 = or disjoint i32 %43, 16, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %64 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %65 = extractvalue { i32, i1 } %64, 1, !dbg !21
  %66 = and i1 %38, %65, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %66, ptr addrspace(3) @global_smem, ptr %41, i32 16, i32 %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  %67 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %57) #4, !dbg !21
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = extractvalue { i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to float, !dbg !21
  %72 = or disjoint i32 %43, 32, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %73 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %74 = extractvalue { i32, i1 } %73, 1, !dbg !23
  %75 = and i1 %38, %74, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %75, ptr addrspace(3) @global_smem, ptr %41, i32 32, i32 %72, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  %76 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %57) #4, !dbg !23
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !23
  %78 = bitcast i32 %77 to float, !dbg !23
  %79 = extractvalue { i32, i32 } %76, 1, !dbg !23
  %80 = bitcast i32 %79 to float, !dbg !23
  %81 = or disjoint i32 %43, 48, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %82 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !25
  %83 = extractvalue { i32, i1 } %82, 1, !dbg !25
  %84 = and i1 %38, %83, !dbg !25
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %84, ptr addrspace(3) @global_smem, ptr %41, i32 48, i32 %81, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  %85 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %57) #4, !dbg !25
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = extractvalue { i32, i32 } %85, 1, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fsub float 0.000000e+00, %60, !dbg !26
  %91 = select i1 %18, float %90, float 0.000000e+00, !dbg !27
  %92 = fsub float 0.000000e+00, %62, !dbg !26
  %93 = select i1 %19, float %92, float 0.000000e+00, !dbg !27
  %94 = fsub float 0.000000e+00, %69, !dbg !28
  %95 = select i1 %18, float %94, float 0.000000e+00, !dbg !29
  %96 = fsub float 0.000000e+00, %71, !dbg !28
  %97 = select i1 %19, float %96, float 0.000000e+00, !dbg !29
  %98 = fsub float 0.000000e+00, %78, !dbg !30
  %99 = select i1 %18, float %98, float 0.000000e+00, !dbg !31
  %100 = fsub float 0.000000e+00, %80, !dbg !30
  %101 = select i1 %19, float %100, float 0.000000e+00, !dbg !31
  %102 = fsub float 0.000000e+00, %87, !dbg !32
  %103 = select i1 %18, float %102, float 0.000000e+00, !dbg !33
  %104 = fsub float 0.000000e+00, %89, !dbg !32
  %105 = select i1 %19, float %104, float 0.000000e+00, !dbg !33
  %106 = sub i32 %2, %43, !dbg !34
  %107 = icmp sgt i32 %106, 2, !dbg !35
  br i1 %107, label %.lr.ph, label %._crit_edge44, !dbg !35

.lr.ph:                                           ; preds = %4
  %108 = zext nneg i32 %15 to i64
  %109 = zext nneg i32 %16 to i64
  %110 = zext nneg i32 %17 to i64
  %111 = and i32 %9, 3
  %112 = icmp samesign ult i32 %8, 16
  %.idx22 = shl nuw nsw i32 %17, 4
  %113 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx22
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111
  %115 = icmp samesign ult i32 %7, 64
  %116 = and i32 %7, 963
  %117 = icmp eq i32 %116, 0
  %118 = tail call i32 @llvm.umin.i32(i32 %106, i32 16), !dbg !35
  %wide.trip.count = zext nneg i32 %118 to i64, !dbg !35
  br label %119, !dbg !35

119:                                              ; preds = %.lr.ph, %119
  %indvars.iv = phi i64 [ 2, %.lr.ph ], [ %indvars.iv.next, %119 ]
  %.pn524 = phi float [ %93, %.lr.ph ], [ %160, %119 ]
  %.pn723 = phi float [ %91, %.lr.ph ], [ %159, %119 ]
  %120 = trunc i64 %indvars.iv to i32, !dbg !36
  %121 = add i32 %43, %120, !dbg !36
  %122 = shl i32 %121, 11, !dbg !36
  %123 = sext i32 %122 to i64, !dbg !37
  %124 = getelementptr float, ptr addrspace(1) %26, i64 %123, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %108, !dbg !38
  %126 = getelementptr float, ptr addrspace(1) %124, i64 %109, !dbg !38
  %127 = getelementptr float, ptr addrspace(1) %124, i64 %110, !dbg !38
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %125) #4, !dbg !39
  %129 = bitcast i32 %128 to float, !dbg !39
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %126) #4, !dbg !39
  %131 = bitcast i32 %130 to float, !dbg !39
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %127) #4, !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = fsub float 0.000000e+00, %129, !dbg !40
  %135 = fsub float 0.000000e+00, %131, !dbg !40
  %136 = fsub float 0.000000e+00, %133, !dbg !40
  %137 = fmul float %.pn723, %134, !dbg !41
  %138 = fmul float %.pn524, %135, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %139 = fadd float %137, %138, !dbg !46
  %140 = bitcast float %139 to i32, !dbg !42
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = fadd float %139, %142, !dbg !46
  %144 = bitcast float %143 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %144, i1 %112) #4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %145 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %39, i1 %115) #4, !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = fadd float %146, %148, !dbg !46
  %150 = bitcast float %149 to i32, !dbg !42
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !42
  %152 = bitcast i32 %151 to float, !dbg !42
  %153 = fadd float %149, %152, !dbg !46
  %154 = bitcast float %153 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %154, i1 %117) #4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %155 = load float, ptr addrspace(3) %113, align 16, !dbg !42
  %156 = fadd float %136, %155, !dbg !47
  %157 = icmp eq i64 %indvars.iv, %108, !dbg !48
  %158 = icmp eq i64 %indvars.iv, %109, !dbg !48
  %159 = select i1 %157, float %156, float %.pn723, !dbg !49
  %160 = select i1 %158, float %156, float %.pn524, !dbg !49
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !35
  br i1 %exitcond.not, label %._crit_edge, label %119, !dbg !35

._crit_edge:                                      ; preds = %119
  %161 = icmp samesign ugt i32 %106, 18, !dbg !50
  br i1 %161, label %.lr.ph29, label %._crit_edge44, !dbg !50

.lr.ph29:                                         ; preds = %._crit_edge
  %162 = zext nneg i32 %15 to i64
  %163 = zext nneg i32 %16 to i64
  %164 = zext nneg i32 %17 to i64
  %165 = and i32 %9, 3
  %166 = icmp samesign ult i32 %8, 16
  %.idx21 = shl nuw nsw i32 %17, 4
  %167 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx21
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165
  %169 = icmp samesign ult i32 %7, 64
  %170 = and i32 %7, 963
  %171 = icmp eq i32 %170, 0
  %172 = tail call i32 @llvm.umin.i32(i32 %106, i32 32), !dbg !50
  %wide.trip.count57 = zext nneg i32 %172 to i64, !dbg !50
  br label %173, !dbg !50

173:                                              ; preds = %.lr.ph29, %173
  %indvars.iv54 = phi i64 [ 18, %.lr.ph29 ], [ %indvars.iv.next55, %173 ]
  %.pn927 = phi float [ %97, %.lr.ph29 ], [ %218, %173 ]
  %.pn1126 = phi float [ %95, %.lr.ph29 ], [ %217, %173 ]
  %174 = trunc i64 %indvars.iv54 to i32, !dbg !51
  %175 = add i32 %43, %174, !dbg !51
  %176 = shl i32 %175, 11, !dbg !51
  %177 = sext i32 %176 to i64, !dbg !52
  %178 = getelementptr float, ptr addrspace(1) %26, i64 %177, !dbg !52
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %162, !dbg !53
  %180 = getelementptr float, ptr addrspace(1) %178, i64 %163, !dbg !53
  %181 = getelementptr float, ptr addrspace(1) %178, i64 %164, !dbg !53
  %182 = getelementptr i8, ptr addrspace(1) %179, i64 64, !dbg !54
  %183 = getelementptr i8, ptr addrspace(1) %180, i64 64, !dbg !54
  %184 = getelementptr i8, ptr addrspace(1) %181, i64 64, !dbg !54
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %182) #4, !dbg !55
  %186 = bitcast i32 %185 to float, !dbg !55
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %183) #4, !dbg !55
  %188 = bitcast i32 %187 to float, !dbg !55
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %184) #4, !dbg !55
  %190 = bitcast i32 %189 to float, !dbg !55
  %191 = fsub float 0.000000e+00, %186, !dbg !56
  %192 = fsub float 0.000000e+00, %188, !dbg !56
  %193 = fsub float 0.000000e+00, %190, !dbg !56
  %194 = fmul float %.pn1126, %191, !dbg !57
  %195 = fmul float %.pn927, %192, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %196 = fadd float %194, %195, !dbg !60
  %197 = bitcast float %196 to i32, !dbg !58
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !58
  %199 = bitcast i32 %198 to float, !dbg !58
  %200 = fadd float %196, %199, !dbg !60
  %201 = bitcast float %200 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %201, i1 %166) #4, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %202 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %39, i1 %169) #4, !dbg !58
  %203 = bitcast i32 %202 to float, !dbg !58
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !58
  %205 = bitcast i32 %204 to float, !dbg !58
  %206 = fadd float %203, %205, !dbg !60
  %207 = bitcast float %206 to i32, !dbg !58
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !58
  %209 = bitcast i32 %208 to float, !dbg !58
  %210 = fadd float %206, %209, !dbg !60
  %211 = bitcast float %210 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %211, i1 %171) #4, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %212 = load float, ptr addrspace(3) %167, align 16, !dbg !58
  %213 = fadd float %193, %212, !dbg !61
  %214 = add nsw i64 %indvars.iv54, -16, !dbg !62
  %215 = icmp eq i64 %214, %162, !dbg !63
  %216 = icmp eq i64 %214, %163, !dbg !63
  %217 = select i1 %215, float %213, float %.pn1126, !dbg !64
  %218 = select i1 %216, float %213, float %.pn927, !dbg !64
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1, !dbg !50
  %exitcond58.not = icmp eq i64 %indvars.iv.next55, %wide.trip.count57, !dbg !50
  br i1 %exitcond58.not, label %._crit_edge30, label %173, !dbg !50

._crit_edge30:                                    ; preds = %173
  %219 = icmp samesign ugt i32 %106, 34, !dbg !65
  br i1 %219, label %.lr.ph36, label %._crit_edge44, !dbg !65

.lr.ph36:                                         ; preds = %._crit_edge30
  %220 = zext nneg i32 %15 to i64
  %221 = zext nneg i32 %16 to i64
  %222 = zext nneg i32 %17 to i64
  %223 = and i32 %9, 3
  %224 = icmp samesign ult i32 %8, 16
  %.idx20 = shl nuw nsw i32 %17, 4
  %225 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx20
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223
  %227 = icmp samesign ult i32 %7, 64
  %228 = and i32 %7, 963
  %229 = icmp eq i32 %228, 0
  %230 = tail call i32 @llvm.umin.i32(i32 %106, i32 48), !dbg !65
  %wide.trip.count62 = zext nneg i32 %230 to i64, !dbg !65
  br label %231, !dbg !65

231:                                              ; preds = %.lr.ph36, %231
  %indvars.iv59 = phi i64 [ 34, %.lr.ph36 ], [ %indvars.iv.next60, %231 ]
  %.pn1334 = phi float [ %101, %.lr.ph36 ], [ %276, %231 ]
  %.pn1533 = phi float [ %99, %.lr.ph36 ], [ %275, %231 ]
  %232 = trunc i64 %indvars.iv59 to i32, !dbg !66
  %233 = add i32 %43, %232, !dbg !66
  %234 = shl i32 %233, 11, !dbg !66
  %235 = sext i32 %234 to i64, !dbg !67
  %236 = getelementptr float, ptr addrspace(1) %26, i64 %235, !dbg !67
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %220, !dbg !68
  %238 = getelementptr float, ptr addrspace(1) %236, i64 %221, !dbg !68
  %239 = getelementptr float, ptr addrspace(1) %236, i64 %222, !dbg !68
  %240 = getelementptr i8, ptr addrspace(1) %237, i64 128, !dbg !69
  %241 = getelementptr i8, ptr addrspace(1) %238, i64 128, !dbg !69
  %242 = getelementptr i8, ptr addrspace(1) %239, i64 128, !dbg !69
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %240) #4, !dbg !70
  %244 = bitcast i32 %243 to float, !dbg !70
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %241) #4, !dbg !70
  %246 = bitcast i32 %245 to float, !dbg !70
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %242) #4, !dbg !70
  %248 = bitcast i32 %247 to float, !dbg !70
  %249 = fsub float 0.000000e+00, %244, !dbg !71
  %250 = fsub float 0.000000e+00, %246, !dbg !71
  %251 = fsub float 0.000000e+00, %248, !dbg !71
  %252 = fmul float %.pn1533, %249, !dbg !72
  %253 = fmul float %.pn1334, %250, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %254 = fadd float %252, %253, !dbg !75
  %255 = bitcast float %254 to i32, !dbg !73
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !73
  %257 = bitcast i32 %256 to float, !dbg !73
  %258 = fadd float %254, %257, !dbg !75
  %259 = bitcast float %258 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %259, i1 %224) #4, !dbg !73
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %260 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %39, i1 %227) #4, !dbg !73
  %261 = bitcast i32 %260 to float, !dbg !73
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !73
  %263 = bitcast i32 %262 to float, !dbg !73
  %264 = fadd float %261, %263, !dbg !75
  %265 = bitcast float %264 to i32, !dbg !73
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !73
  %267 = bitcast i32 %266 to float, !dbg !73
  %268 = fadd float %264, %267, !dbg !75
  %269 = bitcast float %268 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %269, i1 %229) #4, !dbg !73
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %270 = load float, ptr addrspace(3) %225, align 16, !dbg !73
  %271 = fadd float %251, %270, !dbg !76
  %272 = add nsw i64 %indvars.iv59, -32, !dbg !77
  %273 = icmp eq i64 %272, %220, !dbg !78
  %274 = icmp eq i64 %272, %221, !dbg !78
  %275 = select i1 %273, float %271, float %.pn1533, !dbg !79
  %276 = select i1 %274, float %271, float %.pn1334, !dbg !79
  %indvars.iv.next60 = add nuw nsw i64 %indvars.iv59, 1, !dbg !65
  %exitcond63.not = icmp eq i64 %indvars.iv.next60, %wide.trip.count62, !dbg !65
  br i1 %exitcond63.not, label %._crit_edge37, label %231, !dbg !65

._crit_edge37:                                    ; preds = %231
  %277 = icmp samesign ugt i32 %106, 50, !dbg !80
  br i1 %277, label %.lr.ph43, label %._crit_edge44, !dbg !80

.lr.ph43:                                         ; preds = %._crit_edge37
  %278 = zext nneg i32 %15 to i64
  %279 = zext nneg i32 %16 to i64
  %280 = zext nneg i32 %17 to i64
  %281 = and i32 %9, 3
  %282 = icmp samesign ult i32 %8, 16
  %.idx = shl nuw nsw i32 %17, 4
  %283 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281
  %285 = icmp samesign ult i32 %7, 64
  %286 = and i32 %7, 963
  %287 = icmp eq i32 %286, 0
  %288 = tail call i32 @llvm.umin.i32(i32 %106, i32 64), !dbg !80
  %wide.trip.count67 = zext nneg i32 %288 to i64, !dbg !80
  br label %289, !dbg !80

289:                                              ; preds = %.lr.ph43, %289
  %indvars.iv64 = phi i64 [ 50, %.lr.ph43 ], [ %indvars.iv.next65, %289 ]
  %.pn1741 = phi float [ %105, %.lr.ph43 ], [ %334, %289 ]
  %.pn1940 = phi float [ %103, %.lr.ph43 ], [ %333, %289 ]
  %290 = trunc i64 %indvars.iv64 to i32, !dbg !81
  %291 = add i32 %43, %290, !dbg !81
  %292 = shl i32 %291, 11, !dbg !81
  %293 = sext i32 %292 to i64, !dbg !82
  %294 = getelementptr float, ptr addrspace(1) %26, i64 %293, !dbg !82
  %295 = getelementptr float, ptr addrspace(1) %294, i64 %278, !dbg !83
  %296 = getelementptr float, ptr addrspace(1) %294, i64 %279, !dbg !83
  %297 = getelementptr float, ptr addrspace(1) %294, i64 %280, !dbg !83
  %298 = getelementptr i8, ptr addrspace(1) %295, i64 192, !dbg !84
  %299 = getelementptr i8, ptr addrspace(1) %296, i64 192, !dbg !84
  %300 = getelementptr i8, ptr addrspace(1) %297, i64 192, !dbg !84
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %298) #4, !dbg !85
  %302 = bitcast i32 %301 to float, !dbg !85
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %299) #4, !dbg !85
  %304 = bitcast i32 %303 to float, !dbg !85
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %300) #4, !dbg !85
  %306 = bitcast i32 %305 to float, !dbg !85
  %307 = fsub float 0.000000e+00, %302, !dbg !86
  %308 = fsub float 0.000000e+00, %304, !dbg !86
  %309 = fsub float 0.000000e+00, %306, !dbg !86
  %310 = fmul float %.pn1940, %307, !dbg !87
  %311 = fmul float %.pn1741, %308, !dbg !87
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %312 = fadd float %310, %311, !dbg !90
  %313 = bitcast float %312 to i32, !dbg !88
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 16, i32 31), !dbg !88
  %315 = bitcast i32 %314 to float, !dbg !88
  %316 = fadd float %312, %315, !dbg !90
  %317 = bitcast float %316 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %317, i1 %282) #4, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %318 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %39, i1 %285) #4, !dbg !88
  %319 = bitcast i32 %318 to float, !dbg !88
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !88
  %321 = bitcast i32 %320 to float, !dbg !88
  %322 = fadd float %319, %321, !dbg !90
  %323 = bitcast float %322 to i32, !dbg !88
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !88
  %325 = bitcast i32 %324 to float, !dbg !88
  %326 = fadd float %322, %325, !dbg !90
  %327 = bitcast float %326 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %327, i1 %287) #4, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %328 = load float, ptr addrspace(3) %283, align 16, !dbg !88
  %329 = fadd float %309, %328, !dbg !91
  %330 = add nsw i64 %indvars.iv64, -48, !dbg !92
  %331 = icmp eq i64 %330, %278, !dbg !93
  %332 = icmp eq i64 %330, %279, !dbg !93
  %333 = select i1 %331, float %329, float %.pn1940, !dbg !94
  %334 = select i1 %332, float %329, float %.pn1741, !dbg !94
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1, !dbg !80
  %exitcond68.not = icmp eq i64 %indvars.iv.next65, %wide.trip.count67, !dbg !80
  br i1 %exitcond68.not, label %._crit_edge44, label %289, !dbg !80

._crit_edge44:                                    ; preds = %289, %4, %._crit_edge, %._crit_edge30, %._crit_edge37
  %.pn13.lcssa92 = phi float [ %276, %._crit_edge37 ], [ %101, %._crit_edge30 ], [ %101, %._crit_edge ], [ %101, %4 ], [ %276, %289 ]
  %.pn15.lcssa91 = phi float [ %275, %._crit_edge37 ], [ %99, %._crit_edge30 ], [ %99, %._crit_edge ], [ %99, %4 ], [ %275, %289 ]
  %.pn5.lcssa727790 = phi float [ %160, %._crit_edge37 ], [ %160, %._crit_edge30 ], [ %160, %._crit_edge ], [ %93, %4 ], [ %160, %289 ]
  %.pn7.lcssa717889 = phi float [ %159, %._crit_edge37 ], [ %159, %._crit_edge30 ], [ %159, %._crit_edge ], [ %91, %4 ], [ %159, %289 ]
  %.pn11.lcssa7988 = phi float [ %217, %._crit_edge37 ], [ %217, %._crit_edge30 ], [ %95, %._crit_edge ], [ %95, %4 ], [ %217, %289 ]
  %.pn9.lcssa8087 = phi float [ %218, %._crit_edge37 ], [ %218, %._crit_edge30 ], [ %97, %._crit_edge ], [ %97, %4 ], [ %218, %289 ]
  %.pn19.lcssa = phi float [ %103, %._crit_edge37 ], [ %103, %._crit_edge30 ], [ %103, %._crit_edge ], [ %103, %4 ], [ %333, %289 ]
  %.pn17.lcssa = phi float [ %105, %._crit_edge37 ], [ %105, %._crit_edge30 ], [ %105, %._crit_edge ], [ %105, %4 ], [ %334, %289 ]
  %335 = and i32 %47, 12, !dbg !19
  %336 = addrspacecast ptr addrspace(1) %42 to ptr, !dbg !17
  %337 = icmp eq i32 %16, %17, !dbg !95
  %338 = icmp eq i32 %15, %17, !dbg !95
  %339 = uitofp i1 %338 to float, !dbg !96
  %340 = uitofp i1 %337 to float, !dbg !96
  %341 = fadd float %.pn7.lcssa717889, %339, !dbg !96
  %342 = fadd float %.pn5.lcssa727790, %340, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %343 = and i32 %7, 96, !dbg !96
  %344 = or disjoint i32 %343, %51, !dbg !96
  %345 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %344, !dbg !96
  %346 = bitcast float %341 to i32, !dbg !96
  %347 = bitcast float %342 to i32, !dbg !96
  %348 = ptrtoint ptr addrspace(3) %345 to i32, !dbg !96
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %348, i32 %346, i32 %347) #4, !dbg !96
  %349 = fadd float %.pn11.lcssa7988, %339, !dbg !97
  %350 = fadd float %.pn9.lcssa8087, %340, !dbg !97
  %351 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %344, !dbg !97
  %352 = bitcast float %349 to i32, !dbg !97
  %353 = bitcast float %350 to i32, !dbg !97
  %354 = ptrtoint ptr addrspace(3) %351 to i32, !dbg !97
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %354, i32 %352, i32 %353) #4, !dbg !97
  %355 = fadd float %.pn15.lcssa91, %339, !dbg !98
  %356 = fadd float %.pn13.lcssa92, %340, !dbg !98
  %357 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %344, !dbg !98
  %358 = bitcast float %355 to i32, !dbg !98
  %359 = bitcast float %356 to i32, !dbg !98
  %360 = ptrtoint ptr addrspace(3) %357 to i32, !dbg !98
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %360, i32 %358, i32 %359) #4, !dbg !98
  %361 = fadd float %.pn19.lcssa, %339, !dbg !99
  %362 = fadd float %.pn17.lcssa, %340, !dbg !99
  %363 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5136), i32 %344, !dbg !99
  %364 = bitcast float %361 to i32, !dbg !99
  %365 = bitcast float %362 to i32, !dbg !99
  %366 = ptrtoint ptr addrspace(3) %363 to i32, !dbg !99
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %366, i32 %364, i32 %365) #4, !dbg !99
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %367 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !100
  %368 = extractvalue { i32, i1 } %367, 1, !dbg !100
  %369 = and i1 %38, %368, !dbg !100
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %369, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), ptr %41, i32 0, i32 %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 0) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  %370 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %55, !dbg !100
  %371 = ptrtoint ptr addrspace(3) %370 to i32, !dbg !100
  %372 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %371) #4, !dbg !100
  %373 = extractvalue { i32, i32 } %372, 0, !dbg !100
  %374 = extractvalue { i32, i32 } %372, 1, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %375 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %344, !dbg !100
  %376 = ptrtoint ptr addrspace(3) %375 to i32, !dbg !100
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %376, i32 %373, i32 %374) #4, !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %377 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !101
  %378 = extractvalue { i32, i1 } %377, 1, !dbg !101
  %379 = and i1 %38, %378, !dbg !101
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %379, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %41, i32 0, i32 %72, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  %380 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %55, !dbg !101
  %381 = ptrtoint ptr addrspace(3) %380 to i32, !dbg !101
  %382 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %381) #4, !dbg !101
  %383 = extractvalue { i32, i32 } %382, 0, !dbg !101
  %384 = extractvalue { i32, i32 } %382, 1, !dbg !101
  %385 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6160), i32 %344, !dbg !101
  %386 = ptrtoint ptr addrspace(3) %385 to i32, !dbg !101
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %386, i32 %383, i32 %384) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  %387 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !102
  %388 = extractvalue { i32, i1 } %387, 1, !dbg !102
  %389 = and i1 %38, %388, !dbg !102
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %389, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %41, i32 16, i32 %72, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  %390 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %381) #4, !dbg !102
  %391 = extractvalue { i32, i32 } %390, 0, !dbg !102
  %392 = extractvalue { i32, i32 } %390, 1, !dbg !102
  %393 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %344, !dbg !102
  %394 = ptrtoint ptr addrspace(3) %393 to i32, !dbg !102
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %394, i32 %391, i32 %392) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  %395 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !103
  %396 = extractvalue { i32, i1 } %395, 1, !dbg !103
  %397 = and i1 %38, %396, !dbg !103
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %397, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %41, i32 0, i32 %81, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  %398 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %381) #4, !dbg !103
  %399 = extractvalue { i32, i32 } %398, 0, !dbg !103
  %400 = extractvalue { i32, i32 } %398, 1, !dbg !103
  %401 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8208), i32 %344, !dbg !103
  %402 = ptrtoint ptr addrspace(3) %401 to i32, !dbg !103
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %402, i32 %399, i32 %400) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  %403 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !104
  %404 = extractvalue { i32, i1 } %403, 1, !dbg !104
  %405 = and i1 %38, %404, !dbg !104
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %405, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %41, i32 16, i32 %81, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  %406 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %381) #4, !dbg !104
  %407 = extractvalue { i32, i32 } %406, 0, !dbg !104
  %408 = extractvalue { i32, i32 } %406, 1, !dbg !104
  %409 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9232), i32 %344, !dbg !104
  %410 = ptrtoint ptr addrspace(3) %409 to i32, !dbg !104
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %410, i32 %407, i32 %408) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  %411 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !105
  %412 = extractvalue { i32, i1 } %411, 1, !dbg !105
  %413 = and i1 %38, %412, !dbg !105
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %413, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %41, i32 32, i32 %81, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %40, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  %414 = tail call { i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x2.shared.b16 {$0, $1}, [$2];", "=r,=r,r"(i32 %381) #4, !dbg !105
  %415 = extractvalue { i32, i32 } %414, 0, !dbg !105
  %416 = extractvalue { i32, i32 } %414, 1, !dbg !105
  %417 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %344, !dbg !105
  %418 = ptrtoint ptr addrspace(3) %417 to i32, !dbg !105
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %418, i32 %415, i32 %416) #4, !dbg !105
  %419 = shl nuw nsw i32 %15, 4, !dbg !97
  %420 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %419, !dbg !97
  %421 = load float, ptr addrspace(3) %420, align 64, !dbg !97
  %422 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 4, !dbg !97
  %423 = load float, ptr addrspace(3) %422, align 4, !dbg !97
  %424 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 8, !dbg !97
  %425 = load float, ptr addrspace(3) %424, align 8, !dbg !97
  %426 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 12, !dbg !97
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !97
  %428 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 16, !dbg !97
  %429 = load float, ptr addrspace(3) %428, align 16, !dbg !97
  %430 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 20, !dbg !97
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !97
  %432 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 24, !dbg !97
  %433 = load float, ptr addrspace(3) %432, align 8, !dbg !97
  %434 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 28, !dbg !97
  %435 = load float, ptr addrspace(3) %434, align 4, !dbg !97
  %436 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 32, !dbg !97
  %437 = load float, ptr addrspace(3) %436, align 32, !dbg !97
  %438 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 36, !dbg !97
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !97
  %440 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 40, !dbg !97
  %441 = load float, ptr addrspace(3) %440, align 8, !dbg !97
  %442 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 44, !dbg !97
  %443 = load float, ptr addrspace(3) %442, align 4, !dbg !97
  %444 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 48, !dbg !97
  %445 = load float, ptr addrspace(3) %444, align 16, !dbg !97
  %446 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 52, !dbg !97
  %447 = load float, ptr addrspace(3) %446, align 4, !dbg !97
  %448 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 56, !dbg !97
  %449 = load float, ptr addrspace(3) %448, align 8, !dbg !97
  %450 = getelementptr inbounds nuw i8, ptr addrspace(3) %420, i32 60, !dbg !97
  %451 = load float, ptr addrspace(3) %450, align 4, !dbg !97
  %452 = or disjoint i32 %419, 128, !dbg !97
  %453 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %452, !dbg !97
  %454 = load float, ptr addrspace(3) %453, align 64, !dbg !97
  %455 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 4, !dbg !97
  %456 = load float, ptr addrspace(3) %455, align 4, !dbg !97
  %457 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 8, !dbg !97
  %458 = load float, ptr addrspace(3) %457, align 8, !dbg !97
  %459 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 12, !dbg !97
  %460 = load float, ptr addrspace(3) %459, align 4, !dbg !97
  %461 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 16, !dbg !97
  %462 = load float, ptr addrspace(3) %461, align 16, !dbg !97
  %463 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 20, !dbg !97
  %464 = load float, ptr addrspace(3) %463, align 4, !dbg !97
  %465 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 24, !dbg !97
  %466 = load float, ptr addrspace(3) %465, align 8, !dbg !97
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 28, !dbg !97
  %468 = load float, ptr addrspace(3) %467, align 4, !dbg !97
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 32, !dbg !97
  %470 = load float, ptr addrspace(3) %469, align 32, !dbg !97
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 36, !dbg !97
  %472 = load float, ptr addrspace(3) %471, align 4, !dbg !97
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 40, !dbg !97
  %474 = load float, ptr addrspace(3) %473, align 8, !dbg !97
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 44, !dbg !97
  %476 = load float, ptr addrspace(3) %475, align 4, !dbg !97
  %477 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 48, !dbg !97
  %478 = load float, ptr addrspace(3) %477, align 16, !dbg !97
  %479 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 52, !dbg !97
  %480 = load float, ptr addrspace(3) %479, align 4, !dbg !97
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 56, !dbg !97
  %482 = load float, ptr addrspace(3) %481, align 8, !dbg !97
  %483 = getelementptr inbounds nuw i8, ptr addrspace(3) %453, i32 60, !dbg !97
  %484 = load float, ptr addrspace(3) %483, align 4, !dbg !97
  %485 = shl nuw nsw i32 %7, 1, !dbg !100
  %486 = and i32 %485, 48, !dbg !100
  %487 = or disjoint i32 %486, %335, !dbg !100
  %488 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %487, !dbg !100
  %489 = ptrtoint ptr addrspace(3) %488 to i32, !dbg !100
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #4, !dbg !100
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !100
  %492 = bitcast i32 %491 to float, !dbg !100
  %493 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !100
  %494 = bitcast i32 %493 to float, !dbg !100
  %495 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !100
  %496 = bitcast i32 %495 to float, !dbg !100
  %497 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !100
  %498 = bitcast i32 %497 to float, !dbg !100
  %499 = or disjoint i32 %487, 64, !dbg !100
  %500 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %499, !dbg !100
  %501 = ptrtoint ptr addrspace(3) %500 to i32, !dbg !100
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %501) #4, !dbg !100
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !100
  %504 = bitcast i32 %503 to float, !dbg !100
  %505 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !100
  %506 = bitcast i32 %505 to float, !dbg !100
  %507 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !100
  %508 = bitcast i32 %507 to float, !dbg !100
  %509 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !100
  %510 = bitcast i32 %509 to float, !dbg !100
  %511 = or disjoint i32 %487, 128, !dbg !100
  %512 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %511, !dbg !100
  %513 = ptrtoint ptr addrspace(3) %512 to i32, !dbg !100
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %513) #4, !dbg !100
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !100
  %516 = bitcast i32 %515 to float, !dbg !100
  %517 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !100
  %518 = bitcast i32 %517 to float, !dbg !100
  %519 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !100
  %520 = bitcast i32 %519 to float, !dbg !100
  %521 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !100
  %522 = bitcast i32 %521 to float, !dbg !100
  %523 = or disjoint i32 %487, 192, !dbg !100
  %524 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %523, !dbg !100
  %525 = ptrtoint ptr addrspace(3) %524 to i32, !dbg !100
  %526 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %525) #4, !dbg !100
  %527 = extractvalue { i32, i32, i32, i32 } %526, 0, !dbg !100
  %528 = bitcast i32 %527 to float, !dbg !100
  %529 = extractvalue { i32, i32, i32, i32 } %526, 1, !dbg !100
  %530 = bitcast i32 %529 to float, !dbg !100
  %531 = extractvalue { i32, i32, i32, i32 } %526, 2, !dbg !100
  %532 = bitcast i32 %531 to float, !dbg !100
  %533 = extractvalue { i32, i32, i32, i32 } %526, 3, !dbg !100
  %534 = bitcast i32 %533 to float, !dbg !100
  %535 = tail call float @llvm.fmuladd.f32(float %421, float %492, float 0.000000e+00), !dbg !106
  %536 = tail call float @llvm.fmuladd.f32(float %423, float %494, float %535), !dbg !106
  %537 = tail call float @llvm.fmuladd.f32(float %425, float %496, float %536), !dbg !106
  %538 = tail call float @llvm.fmuladd.f32(float %427, float %498, float %537), !dbg !106
  %539 = tail call float @llvm.fmuladd.f32(float %429, float %504, float %538), !dbg !106
  %540 = tail call float @llvm.fmuladd.f32(float %431, float %506, float %539), !dbg !106
  %541 = tail call float @llvm.fmuladd.f32(float %433, float %508, float %540), !dbg !106
  %542 = tail call float @llvm.fmuladd.f32(float %435, float %510, float %541), !dbg !106
  %543 = tail call float @llvm.fmuladd.f32(float %437, float %516, float %542), !dbg !106
  %544 = tail call float @llvm.fmuladd.f32(float %439, float %518, float %543), !dbg !106
  %545 = tail call float @llvm.fmuladd.f32(float %441, float %520, float %544), !dbg !106
  %546 = tail call float @llvm.fmuladd.f32(float %443, float %522, float %545), !dbg !106
  %547 = tail call float @llvm.fmuladd.f32(float %445, float %528, float %546), !dbg !106
  %548 = tail call float @llvm.fmuladd.f32(float %447, float %530, float %547), !dbg !106
  %549 = tail call float @llvm.fmuladd.f32(float %449, float %532, float %548), !dbg !106
  %550 = tail call float @llvm.fmuladd.f32(float %451, float %534, float %549), !dbg !106
  %551 = tail call float @llvm.fmuladd.f32(float %454, float %492, float 0.000000e+00), !dbg !106
  %552 = tail call float @llvm.fmuladd.f32(float %456, float %494, float %551), !dbg !106
  %553 = tail call float @llvm.fmuladd.f32(float %458, float %496, float %552), !dbg !106
  %554 = tail call float @llvm.fmuladd.f32(float %460, float %498, float %553), !dbg !106
  %555 = tail call float @llvm.fmuladd.f32(float %462, float %504, float %554), !dbg !106
  %556 = tail call float @llvm.fmuladd.f32(float %464, float %506, float %555), !dbg !106
  %557 = tail call float @llvm.fmuladd.f32(float %466, float %508, float %556), !dbg !106
  %558 = tail call float @llvm.fmuladd.f32(float %468, float %510, float %557), !dbg !106
  %559 = tail call float @llvm.fmuladd.f32(float %470, float %516, float %558), !dbg !106
  %560 = tail call float @llvm.fmuladd.f32(float %472, float %518, float %559), !dbg !106
  %561 = tail call float @llvm.fmuladd.f32(float %474, float %520, float %560), !dbg !106
  %562 = tail call float @llvm.fmuladd.f32(float %476, float %522, float %561), !dbg !106
  %563 = tail call float @llvm.fmuladd.f32(float %478, float %528, float %562), !dbg !106
  %564 = tail call float @llvm.fmuladd.f32(float %480, float %530, float %563), !dbg !106
  %565 = tail call float @llvm.fmuladd.f32(float %482, float %532, float %564), !dbg !106
  %566 = tail call float @llvm.fmuladd.f32(float %484, float %534, float %565), !dbg !106
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !106
  %567 = bitcast float %550 to i32, !dbg !106
  %568 = bitcast float %566 to i32, !dbg !106
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %376, i32 %567, i32 %568) #4, !dbg !106
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !106
  %569 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %419, !dbg !106
  %570 = load float, ptr addrspace(3) %569, align 64, !dbg !106
  %571 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 4, !dbg !106
  %572 = load float, ptr addrspace(3) %571, align 4, !dbg !106
  %573 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 8, !dbg !106
  %574 = load float, ptr addrspace(3) %573, align 8, !dbg !106
  %575 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 12, !dbg !106
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !106
  %577 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 16, !dbg !106
  %578 = load float, ptr addrspace(3) %577, align 16, !dbg !106
  %579 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 20, !dbg !106
  %580 = load float, ptr addrspace(3) %579, align 4, !dbg !106
  %581 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 24, !dbg !106
  %582 = load float, ptr addrspace(3) %581, align 8, !dbg !106
  %583 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 28, !dbg !106
  %584 = load float, ptr addrspace(3) %583, align 4, !dbg !106
  %585 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 32, !dbg !106
  %586 = load float, ptr addrspace(3) %585, align 32, !dbg !106
  %587 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 36, !dbg !106
  %588 = load float, ptr addrspace(3) %587, align 4, !dbg !106
  %589 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 40, !dbg !106
  %590 = load float, ptr addrspace(3) %589, align 8, !dbg !106
  %591 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 44, !dbg !106
  %592 = load float, ptr addrspace(3) %591, align 4, !dbg !106
  %593 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 48, !dbg !106
  %594 = load float, ptr addrspace(3) %593, align 16, !dbg !106
  %595 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 52, !dbg !106
  %596 = load float, ptr addrspace(3) %595, align 4, !dbg !106
  %597 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 56, !dbg !106
  %598 = load float, ptr addrspace(3) %597, align 8, !dbg !106
  %599 = getelementptr inbounds nuw i8, ptr addrspace(3) %569, i32 60, !dbg !106
  %600 = load float, ptr addrspace(3) %599, align 4, !dbg !106
  %601 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %452, !dbg !106
  %602 = load float, ptr addrspace(3) %601, align 64, !dbg !106
  %603 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 4, !dbg !106
  %604 = load float, ptr addrspace(3) %603, align 4, !dbg !106
  %605 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 8, !dbg !106
  %606 = load float, ptr addrspace(3) %605, align 8, !dbg !106
  %607 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 12, !dbg !106
  %608 = load float, ptr addrspace(3) %607, align 4, !dbg !106
  %609 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 16, !dbg !106
  %610 = load float, ptr addrspace(3) %609, align 16, !dbg !106
  %611 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 20, !dbg !106
  %612 = load float, ptr addrspace(3) %611, align 4, !dbg !106
  %613 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 24, !dbg !106
  %614 = load float, ptr addrspace(3) %613, align 8, !dbg !106
  %615 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 28, !dbg !106
  %616 = load float, ptr addrspace(3) %615, align 4, !dbg !106
  %617 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 32, !dbg !106
  %618 = load float, ptr addrspace(3) %617, align 32, !dbg !106
  %619 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 36, !dbg !106
  %620 = load float, ptr addrspace(3) %619, align 4, !dbg !106
  %621 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 40, !dbg !106
  %622 = load float, ptr addrspace(3) %621, align 8, !dbg !106
  %623 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 44, !dbg !106
  %624 = load float, ptr addrspace(3) %623, align 4, !dbg !106
  %625 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 48, !dbg !106
  %626 = load float, ptr addrspace(3) %625, align 16, !dbg !106
  %627 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 52, !dbg !106
  %628 = load float, ptr addrspace(3) %627, align 4, !dbg !106
  %629 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 56, !dbg !106
  %630 = load float, ptr addrspace(3) %629, align 8, !dbg !106
  %631 = getelementptr inbounds nuw i8, ptr addrspace(3) %601, i32 60, !dbg !106
  %632 = load float, ptr addrspace(3) %631, align 4, !dbg !106
  %633 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %487, !dbg !96
  %634 = ptrtoint ptr addrspace(3) %633 to i32, !dbg !96
  %635 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #4, !dbg !96
  %636 = extractvalue { i32, i32, i32, i32 } %635, 0, !dbg !96
  %637 = bitcast i32 %636 to float, !dbg !96
  %638 = extractvalue { i32, i32, i32, i32 } %635, 1, !dbg !96
  %639 = bitcast i32 %638 to float, !dbg !96
  %640 = extractvalue { i32, i32, i32, i32 } %635, 2, !dbg !96
  %641 = bitcast i32 %640 to float, !dbg !96
  %642 = extractvalue { i32, i32, i32, i32 } %635, 3, !dbg !96
  %643 = bitcast i32 %642 to float, !dbg !96
  %644 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %499, !dbg !96
  %645 = ptrtoint ptr addrspace(3) %644 to i32, !dbg !96
  %646 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %645) #4, !dbg !96
  %647 = extractvalue { i32, i32, i32, i32 } %646, 0, !dbg !96
  %648 = bitcast i32 %647 to float, !dbg !96
  %649 = extractvalue { i32, i32, i32, i32 } %646, 1, !dbg !96
  %650 = bitcast i32 %649 to float, !dbg !96
  %651 = extractvalue { i32, i32, i32, i32 } %646, 2, !dbg !96
  %652 = bitcast i32 %651 to float, !dbg !96
  %653 = extractvalue { i32, i32, i32, i32 } %646, 3, !dbg !96
  %654 = bitcast i32 %653 to float, !dbg !96
  %655 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %511, !dbg !96
  %656 = ptrtoint ptr addrspace(3) %655 to i32, !dbg !96
  %657 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #4, !dbg !96
  %658 = extractvalue { i32, i32, i32, i32 } %657, 0, !dbg !96
  %659 = bitcast i32 %658 to float, !dbg !96
  %660 = extractvalue { i32, i32, i32, i32 } %657, 1, !dbg !96
  %661 = bitcast i32 %660 to float, !dbg !96
  %662 = extractvalue { i32, i32, i32, i32 } %657, 2, !dbg !96
  %663 = bitcast i32 %662 to float, !dbg !96
  %664 = extractvalue { i32, i32, i32, i32 } %657, 3, !dbg !96
  %665 = bitcast i32 %664 to float, !dbg !96
  %666 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %523, !dbg !96
  %667 = ptrtoint ptr addrspace(3) %666 to i32, !dbg !96
  %668 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %667) #4, !dbg !96
  %669 = extractvalue { i32, i32, i32, i32 } %668, 0, !dbg !96
  %670 = bitcast i32 %669 to float, !dbg !96
  %671 = extractvalue { i32, i32, i32, i32 } %668, 1, !dbg !96
  %672 = bitcast i32 %671 to float, !dbg !96
  %673 = extractvalue { i32, i32, i32, i32 } %668, 2, !dbg !96
  %674 = bitcast i32 %673 to float, !dbg !96
  %675 = extractvalue { i32, i32, i32, i32 } %668, 3, !dbg !96
  %676 = bitcast i32 %675 to float, !dbg !96
  %677 = tail call float @llvm.fmuladd.f32(float %570, float %637, float 0.000000e+00), !dbg !107
  %678 = tail call float @llvm.fmuladd.f32(float %572, float %639, float %677), !dbg !107
  %679 = tail call float @llvm.fmuladd.f32(float %574, float %641, float %678), !dbg !107
  %680 = tail call float @llvm.fmuladd.f32(float %576, float %643, float %679), !dbg !107
  %681 = tail call float @llvm.fmuladd.f32(float %578, float %648, float %680), !dbg !107
  %682 = tail call float @llvm.fmuladd.f32(float %580, float %650, float %681), !dbg !107
  %683 = tail call float @llvm.fmuladd.f32(float %582, float %652, float %682), !dbg !107
  %684 = tail call float @llvm.fmuladd.f32(float %584, float %654, float %683), !dbg !107
  %685 = tail call float @llvm.fmuladd.f32(float %586, float %659, float %684), !dbg !107
  %686 = tail call float @llvm.fmuladd.f32(float %588, float %661, float %685), !dbg !107
  %687 = tail call float @llvm.fmuladd.f32(float %590, float %663, float %686), !dbg !107
  %688 = tail call float @llvm.fmuladd.f32(float %592, float %665, float %687), !dbg !107
  %689 = tail call float @llvm.fmuladd.f32(float %594, float %670, float %688), !dbg !107
  %690 = tail call float @llvm.fmuladd.f32(float %596, float %672, float %689), !dbg !107
  %691 = tail call float @llvm.fmuladd.f32(float %598, float %674, float %690), !dbg !107
  %692 = tail call float @llvm.fmuladd.f32(float %600, float %676, float %691), !dbg !107
  %693 = tail call float @llvm.fmuladd.f32(float %602, float %637, float 0.000000e+00), !dbg !107
  %694 = tail call float @llvm.fmuladd.f32(float %604, float %639, float %693), !dbg !107
  %695 = tail call float @llvm.fmuladd.f32(float %606, float %641, float %694), !dbg !107
  %696 = tail call float @llvm.fmuladd.f32(float %608, float %643, float %695), !dbg !107
  %697 = tail call float @llvm.fmuladd.f32(float %610, float %648, float %696), !dbg !107
  %698 = tail call float @llvm.fmuladd.f32(float %612, float %650, float %697), !dbg !107
  %699 = tail call float @llvm.fmuladd.f32(float %614, float %652, float %698), !dbg !107
  %700 = tail call float @llvm.fmuladd.f32(float %616, float %654, float %699), !dbg !107
  %701 = tail call float @llvm.fmuladd.f32(float %618, float %659, float %700), !dbg !107
  %702 = tail call float @llvm.fmuladd.f32(float %620, float %661, float %701), !dbg !107
  %703 = tail call float @llvm.fmuladd.f32(float %622, float %663, float %702), !dbg !107
  %704 = tail call float @llvm.fmuladd.f32(float %624, float %665, float %703), !dbg !107
  %705 = tail call float @llvm.fmuladd.f32(float %626, float %670, float %704), !dbg !107
  %706 = tail call float @llvm.fmuladd.f32(float %628, float %672, float %705), !dbg !107
  %707 = tail call float @llvm.fmuladd.f32(float %630, float %674, float %706), !dbg !107
  %708 = tail call float @llvm.fmuladd.f32(float %632, float %676, float %707), !dbg !107
  %709 = fsub float 0.000000e+00, %692, !dbg !108
  %710 = fsub float 0.000000e+00, %708, !dbg !108
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !108
  %711 = bitcast float %709 to i32, !dbg !108
  %712 = bitcast float %710 to i32, !dbg !108
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %348, i32 %711, i32 %712) #4, !dbg !108
  %713 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %419, !dbg !98
  %714 = load float, ptr addrspace(3) %713, align 64, !dbg !98
  %715 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 4, !dbg !98
  %716 = load float, ptr addrspace(3) %715, align 4, !dbg !98
  %717 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 8, !dbg !98
  %718 = load float, ptr addrspace(3) %717, align 8, !dbg !98
  %719 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 12, !dbg !98
  %720 = load float, ptr addrspace(3) %719, align 4, !dbg !98
  %721 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 16, !dbg !98
  %722 = load float, ptr addrspace(3) %721, align 16, !dbg !98
  %723 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 20, !dbg !98
  %724 = load float, ptr addrspace(3) %723, align 4, !dbg !98
  %725 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 24, !dbg !98
  %726 = load float, ptr addrspace(3) %725, align 8, !dbg !98
  %727 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 28, !dbg !98
  %728 = load float, ptr addrspace(3) %727, align 4, !dbg !98
  %729 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 32, !dbg !98
  %730 = load float, ptr addrspace(3) %729, align 32, !dbg !98
  %731 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 36, !dbg !98
  %732 = load float, ptr addrspace(3) %731, align 4, !dbg !98
  %733 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 40, !dbg !98
  %734 = load float, ptr addrspace(3) %733, align 8, !dbg !98
  %735 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 44, !dbg !98
  %736 = load float, ptr addrspace(3) %735, align 4, !dbg !98
  %737 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 48, !dbg !98
  %738 = load float, ptr addrspace(3) %737, align 16, !dbg !98
  %739 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 52, !dbg !98
  %740 = load float, ptr addrspace(3) %739, align 4, !dbg !98
  %741 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 56, !dbg !98
  %742 = load float, ptr addrspace(3) %741, align 8, !dbg !98
  %743 = getelementptr inbounds nuw i8, ptr addrspace(3) %713, i32 60, !dbg !98
  %744 = load float, ptr addrspace(3) %743, align 4, !dbg !98
  %745 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %452, !dbg !98
  %746 = load float, ptr addrspace(3) %745, align 64, !dbg !98
  %747 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 4, !dbg !98
  %748 = load float, ptr addrspace(3) %747, align 4, !dbg !98
  %749 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 8, !dbg !98
  %750 = load float, ptr addrspace(3) %749, align 8, !dbg !98
  %751 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 12, !dbg !98
  %752 = load float, ptr addrspace(3) %751, align 4, !dbg !98
  %753 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 16, !dbg !98
  %754 = load float, ptr addrspace(3) %753, align 16, !dbg !98
  %755 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 20, !dbg !98
  %756 = load float, ptr addrspace(3) %755, align 4, !dbg !98
  %757 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 24, !dbg !98
  %758 = load float, ptr addrspace(3) %757, align 8, !dbg !98
  %759 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 28, !dbg !98
  %760 = load float, ptr addrspace(3) %759, align 4, !dbg !98
  %761 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 32, !dbg !98
  %762 = load float, ptr addrspace(3) %761, align 32, !dbg !98
  %763 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 36, !dbg !98
  %764 = load float, ptr addrspace(3) %763, align 4, !dbg !98
  %765 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 40, !dbg !98
  %766 = load float, ptr addrspace(3) %765, align 8, !dbg !98
  %767 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 44, !dbg !98
  %768 = load float, ptr addrspace(3) %767, align 4, !dbg !98
  %769 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 48, !dbg !98
  %770 = load float, ptr addrspace(3) %769, align 16, !dbg !98
  %771 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 52, !dbg !98
  %772 = load float, ptr addrspace(3) %771, align 4, !dbg !98
  %773 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 56, !dbg !98
  %774 = load float, ptr addrspace(3) %773, align 8, !dbg !98
  %775 = getelementptr inbounds nuw i8, ptr addrspace(3) %745, i32 60, !dbg !98
  %776 = load float, ptr addrspace(3) %775, align 4, !dbg !98
  %777 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %487, !dbg !102
  %778 = ptrtoint ptr addrspace(3) %777 to i32, !dbg !102
  %779 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %778) #4, !dbg !102
  %780 = extractvalue { i32, i32, i32, i32 } %779, 0, !dbg !102
  %781 = bitcast i32 %780 to float, !dbg !102
  %782 = extractvalue { i32, i32, i32, i32 } %779, 1, !dbg !102
  %783 = bitcast i32 %782 to float, !dbg !102
  %784 = extractvalue { i32, i32, i32, i32 } %779, 2, !dbg !102
  %785 = bitcast i32 %784 to float, !dbg !102
  %786 = extractvalue { i32, i32, i32, i32 } %779, 3, !dbg !102
  %787 = bitcast i32 %786 to float, !dbg !102
  %788 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %499, !dbg !102
  %789 = ptrtoint ptr addrspace(3) %788 to i32, !dbg !102
  %790 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %789) #4, !dbg !102
  %791 = extractvalue { i32, i32, i32, i32 } %790, 0, !dbg !102
  %792 = bitcast i32 %791 to float, !dbg !102
  %793 = extractvalue { i32, i32, i32, i32 } %790, 1, !dbg !102
  %794 = bitcast i32 %793 to float, !dbg !102
  %795 = extractvalue { i32, i32, i32, i32 } %790, 2, !dbg !102
  %796 = bitcast i32 %795 to float, !dbg !102
  %797 = extractvalue { i32, i32, i32, i32 } %790, 3, !dbg !102
  %798 = bitcast i32 %797 to float, !dbg !102
  %799 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %511, !dbg !102
  %800 = ptrtoint ptr addrspace(3) %799 to i32, !dbg !102
  %801 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %800) #4, !dbg !102
  %802 = extractvalue { i32, i32, i32, i32 } %801, 0, !dbg !102
  %803 = bitcast i32 %802 to float, !dbg !102
  %804 = extractvalue { i32, i32, i32, i32 } %801, 1, !dbg !102
  %805 = bitcast i32 %804 to float, !dbg !102
  %806 = extractvalue { i32, i32, i32, i32 } %801, 2, !dbg !102
  %807 = bitcast i32 %806 to float, !dbg !102
  %808 = extractvalue { i32, i32, i32, i32 } %801, 3, !dbg !102
  %809 = bitcast i32 %808 to float, !dbg !102
  %810 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %523, !dbg !102
  %811 = ptrtoint ptr addrspace(3) %810 to i32, !dbg !102
  %812 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %811) #4, !dbg !102
  %813 = extractvalue { i32, i32, i32, i32 } %812, 0, !dbg !102
  %814 = bitcast i32 %813 to float, !dbg !102
  %815 = extractvalue { i32, i32, i32, i32 } %812, 1, !dbg !102
  %816 = bitcast i32 %815 to float, !dbg !102
  %817 = extractvalue { i32, i32, i32, i32 } %812, 2, !dbg !102
  %818 = bitcast i32 %817 to float, !dbg !102
  %819 = extractvalue { i32, i32, i32, i32 } %812, 3, !dbg !102
  %820 = bitcast i32 %819 to float, !dbg !102
  %821 = tail call float @llvm.fmuladd.f32(float %714, float %781, float 0.000000e+00), !dbg !109
  %822 = tail call float @llvm.fmuladd.f32(float %716, float %783, float %821), !dbg !109
  %823 = tail call float @llvm.fmuladd.f32(float %718, float %785, float %822), !dbg !109
  %824 = tail call float @llvm.fmuladd.f32(float %720, float %787, float %823), !dbg !109
  %825 = tail call float @llvm.fmuladd.f32(float %722, float %792, float %824), !dbg !109
  %826 = tail call float @llvm.fmuladd.f32(float %724, float %794, float %825), !dbg !109
  %827 = tail call float @llvm.fmuladd.f32(float %726, float %796, float %826), !dbg !109
  %828 = tail call float @llvm.fmuladd.f32(float %728, float %798, float %827), !dbg !109
  %829 = tail call float @llvm.fmuladd.f32(float %730, float %803, float %828), !dbg !109
  %830 = tail call float @llvm.fmuladd.f32(float %732, float %805, float %829), !dbg !109
  %831 = tail call float @llvm.fmuladd.f32(float %734, float %807, float %830), !dbg !109
  %832 = tail call float @llvm.fmuladd.f32(float %736, float %809, float %831), !dbg !109
  %833 = tail call float @llvm.fmuladd.f32(float %738, float %814, float %832), !dbg !109
  %834 = tail call float @llvm.fmuladd.f32(float %740, float %816, float %833), !dbg !109
  %835 = tail call float @llvm.fmuladd.f32(float %742, float %818, float %834), !dbg !109
  %836 = tail call float @llvm.fmuladd.f32(float %744, float %820, float %835), !dbg !109
  %837 = tail call float @llvm.fmuladd.f32(float %746, float %781, float 0.000000e+00), !dbg !109
  %838 = tail call float @llvm.fmuladd.f32(float %748, float %783, float %837), !dbg !109
  %839 = tail call float @llvm.fmuladd.f32(float %750, float %785, float %838), !dbg !109
  %840 = tail call float @llvm.fmuladd.f32(float %752, float %787, float %839), !dbg !109
  %841 = tail call float @llvm.fmuladd.f32(float %754, float %792, float %840), !dbg !109
  %842 = tail call float @llvm.fmuladd.f32(float %756, float %794, float %841), !dbg !109
  %843 = tail call float @llvm.fmuladd.f32(float %758, float %796, float %842), !dbg !109
  %844 = tail call float @llvm.fmuladd.f32(float %760, float %798, float %843), !dbg !109
  %845 = tail call float @llvm.fmuladd.f32(float %762, float %803, float %844), !dbg !109
  %846 = tail call float @llvm.fmuladd.f32(float %764, float %805, float %845), !dbg !109
  %847 = tail call float @llvm.fmuladd.f32(float %766, float %807, float %846), !dbg !109
  %848 = tail call float @llvm.fmuladd.f32(float %768, float %809, float %847), !dbg !109
  %849 = tail call float @llvm.fmuladd.f32(float %770, float %814, float %848), !dbg !109
  %850 = tail call float @llvm.fmuladd.f32(float %772, float %816, float %849), !dbg !109
  %851 = tail call float @llvm.fmuladd.f32(float %774, float %818, float %850), !dbg !109
  %852 = tail call float @llvm.fmuladd.f32(float %776, float %820, float %851), !dbg !109
  %853 = bitcast float %836 to i32, !dbg !109
  %854 = bitcast float %852 to i32, !dbg !109
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %376, i32 %853, i32 %854) #4, !dbg !109
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !109
  %855 = load float, ptr addrspace(3) %569, align 64, !dbg !109
  %856 = load float, ptr addrspace(3) %571, align 4, !dbg !109
  %857 = load float, ptr addrspace(3) %573, align 8, !dbg !109
  %858 = load float, ptr addrspace(3) %575, align 4, !dbg !109
  %859 = load float, ptr addrspace(3) %577, align 16, !dbg !109
  %860 = load float, ptr addrspace(3) %579, align 4, !dbg !109
  %861 = load float, ptr addrspace(3) %581, align 8, !dbg !109
  %862 = load float, ptr addrspace(3) %583, align 4, !dbg !109
  %863 = load float, ptr addrspace(3) %585, align 32, !dbg !109
  %864 = load float, ptr addrspace(3) %587, align 4, !dbg !109
  %865 = load float, ptr addrspace(3) %589, align 8, !dbg !109
  %866 = load float, ptr addrspace(3) %591, align 4, !dbg !109
  %867 = load float, ptr addrspace(3) %593, align 16, !dbg !109
  %868 = load float, ptr addrspace(3) %595, align 4, !dbg !109
  %869 = load float, ptr addrspace(3) %597, align 8, !dbg !109
  %870 = load float, ptr addrspace(3) %599, align 4, !dbg !109
  %871 = load float, ptr addrspace(3) %601, align 64, !dbg !109
  %872 = load float, ptr addrspace(3) %603, align 4, !dbg !109
  %873 = load float, ptr addrspace(3) %605, align 8, !dbg !109
  %874 = load float, ptr addrspace(3) %607, align 4, !dbg !109
  %875 = load float, ptr addrspace(3) %609, align 16, !dbg !109
  %876 = load float, ptr addrspace(3) %611, align 4, !dbg !109
  %877 = load float, ptr addrspace(3) %613, align 8, !dbg !109
  %878 = load float, ptr addrspace(3) %615, align 4, !dbg !109
  %879 = load float, ptr addrspace(3) %617, align 32, !dbg !109
  %880 = load float, ptr addrspace(3) %619, align 4, !dbg !109
  %881 = load float, ptr addrspace(3) %621, align 8, !dbg !109
  %882 = load float, ptr addrspace(3) %623, align 4, !dbg !109
  %883 = load float, ptr addrspace(3) %625, align 16, !dbg !109
  %884 = load float, ptr addrspace(3) %627, align 4, !dbg !109
  %885 = load float, ptr addrspace(3) %629, align 8, !dbg !109
  %886 = load float, ptr addrspace(3) %631, align 4, !dbg !109
  %887 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %487, !dbg !97
  %888 = ptrtoint ptr addrspace(3) %887 to i32, !dbg !97
  %889 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %888) #4, !dbg !97
  %890 = extractvalue { i32, i32, i32, i32 } %889, 0, !dbg !97
  %891 = bitcast i32 %890 to float, !dbg !97
  %892 = extractvalue { i32, i32, i32, i32 } %889, 1, !dbg !97
  %893 = bitcast i32 %892 to float, !dbg !97
  %894 = extractvalue { i32, i32, i32, i32 } %889, 2, !dbg !97
  %895 = bitcast i32 %894 to float, !dbg !97
  %896 = extractvalue { i32, i32, i32, i32 } %889, 3, !dbg !97
  %897 = bitcast i32 %896 to float, !dbg !97
  %898 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %499, !dbg !97
  %899 = ptrtoint ptr addrspace(3) %898 to i32, !dbg !97
  %900 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %899) #4, !dbg !97
  %901 = extractvalue { i32, i32, i32, i32 } %900, 0, !dbg !97
  %902 = bitcast i32 %901 to float, !dbg !97
  %903 = extractvalue { i32, i32, i32, i32 } %900, 1, !dbg !97
  %904 = bitcast i32 %903 to float, !dbg !97
  %905 = extractvalue { i32, i32, i32, i32 } %900, 2, !dbg !97
  %906 = bitcast i32 %905 to float, !dbg !97
  %907 = extractvalue { i32, i32, i32, i32 } %900, 3, !dbg !97
  %908 = bitcast i32 %907 to float, !dbg !97
  %909 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %511, !dbg !97
  %910 = ptrtoint ptr addrspace(3) %909 to i32, !dbg !97
  %911 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %910) #4, !dbg !97
  %912 = extractvalue { i32, i32, i32, i32 } %911, 0, !dbg !97
  %913 = bitcast i32 %912 to float, !dbg !97
  %914 = extractvalue { i32, i32, i32, i32 } %911, 1, !dbg !97
  %915 = bitcast i32 %914 to float, !dbg !97
  %916 = extractvalue { i32, i32, i32, i32 } %911, 2, !dbg !97
  %917 = bitcast i32 %916 to float, !dbg !97
  %918 = extractvalue { i32, i32, i32, i32 } %911, 3, !dbg !97
  %919 = bitcast i32 %918 to float, !dbg !97
  %920 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %523, !dbg !97
  %921 = ptrtoint ptr addrspace(3) %920 to i32, !dbg !97
  %922 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %921) #4, !dbg !97
  %923 = extractvalue { i32, i32, i32, i32 } %922, 0, !dbg !97
  %924 = bitcast i32 %923 to float, !dbg !97
  %925 = extractvalue { i32, i32, i32, i32 } %922, 1, !dbg !97
  %926 = bitcast i32 %925 to float, !dbg !97
  %927 = extractvalue { i32, i32, i32, i32 } %922, 2, !dbg !97
  %928 = bitcast i32 %927 to float, !dbg !97
  %929 = extractvalue { i32, i32, i32, i32 } %922, 3, !dbg !97
  %930 = bitcast i32 %929 to float, !dbg !97
  %931 = tail call float @llvm.fmuladd.f32(float %855, float %891, float 0.000000e+00), !dbg !110
  %932 = tail call float @llvm.fmuladd.f32(float %856, float %893, float %931), !dbg !110
  %933 = tail call float @llvm.fmuladd.f32(float %857, float %895, float %932), !dbg !110
  %934 = tail call float @llvm.fmuladd.f32(float %858, float %897, float %933), !dbg !110
  %935 = tail call float @llvm.fmuladd.f32(float %859, float %902, float %934), !dbg !110
  %936 = tail call float @llvm.fmuladd.f32(float %860, float %904, float %935), !dbg !110
  %937 = tail call float @llvm.fmuladd.f32(float %861, float %906, float %936), !dbg !110
  %938 = tail call float @llvm.fmuladd.f32(float %862, float %908, float %937), !dbg !110
  %939 = tail call float @llvm.fmuladd.f32(float %863, float %913, float %938), !dbg !110
  %940 = tail call float @llvm.fmuladd.f32(float %864, float %915, float %939), !dbg !110
  %941 = tail call float @llvm.fmuladd.f32(float %865, float %917, float %940), !dbg !110
  %942 = tail call float @llvm.fmuladd.f32(float %866, float %919, float %941), !dbg !110
  %943 = tail call float @llvm.fmuladd.f32(float %867, float %924, float %942), !dbg !110
  %944 = tail call float @llvm.fmuladd.f32(float %868, float %926, float %943), !dbg !110
  %945 = tail call float @llvm.fmuladd.f32(float %869, float %928, float %944), !dbg !110
  %946 = tail call float @llvm.fmuladd.f32(float %870, float %930, float %945), !dbg !110
  %947 = tail call float @llvm.fmuladd.f32(float %871, float %891, float 0.000000e+00), !dbg !110
  %948 = tail call float @llvm.fmuladd.f32(float %872, float %893, float %947), !dbg !110
  %949 = tail call float @llvm.fmuladd.f32(float %873, float %895, float %948), !dbg !110
  %950 = tail call float @llvm.fmuladd.f32(float %874, float %897, float %949), !dbg !110
  %951 = tail call float @llvm.fmuladd.f32(float %875, float %902, float %950), !dbg !110
  %952 = tail call float @llvm.fmuladd.f32(float %876, float %904, float %951), !dbg !110
  %953 = tail call float @llvm.fmuladd.f32(float %877, float %906, float %952), !dbg !110
  %954 = tail call float @llvm.fmuladd.f32(float %878, float %908, float %953), !dbg !110
  %955 = tail call float @llvm.fmuladd.f32(float %879, float %913, float %954), !dbg !110
  %956 = tail call float @llvm.fmuladd.f32(float %880, float %915, float %955), !dbg !110
  %957 = tail call float @llvm.fmuladd.f32(float %881, float %917, float %956), !dbg !110
  %958 = tail call float @llvm.fmuladd.f32(float %882, float %919, float %957), !dbg !110
  %959 = tail call float @llvm.fmuladd.f32(float %883, float %924, float %958), !dbg !110
  %960 = tail call float @llvm.fmuladd.f32(float %884, float %926, float %959), !dbg !110
  %961 = tail call float @llvm.fmuladd.f32(float %885, float %928, float %960), !dbg !110
  %962 = tail call float @llvm.fmuladd.f32(float %886, float %930, float %961), !dbg !110
  %963 = fsub float 0.000000e+00, %946, !dbg !111
  %964 = fsub float 0.000000e+00, %962, !dbg !111
  %965 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %344, !dbg !111
  %966 = bitcast float %963 to i32, !dbg !111
  %967 = bitcast float %964 to i32, !dbg !111
  %968 = ptrtoint ptr addrspace(3) %965 to i32, !dbg !111
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %968, i32 %966, i32 %967) #4, !dbg !111
  %969 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5136), i32 %419, !dbg !99
  %970 = load float, ptr addrspace(3) %969, align 64, !dbg !99
  %971 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 4, !dbg !99
  %972 = load float, ptr addrspace(3) %971, align 4, !dbg !99
  %973 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 8, !dbg !99
  %974 = load float, ptr addrspace(3) %973, align 8, !dbg !99
  %975 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 12, !dbg !99
  %976 = load float, ptr addrspace(3) %975, align 4, !dbg !99
  %977 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 16, !dbg !99
  %978 = load float, ptr addrspace(3) %977, align 16, !dbg !99
  %979 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 20, !dbg !99
  %980 = load float, ptr addrspace(3) %979, align 4, !dbg !99
  %981 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 24, !dbg !99
  %982 = load float, ptr addrspace(3) %981, align 8, !dbg !99
  %983 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 28, !dbg !99
  %984 = load float, ptr addrspace(3) %983, align 4, !dbg !99
  %985 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 32, !dbg !99
  %986 = load float, ptr addrspace(3) %985, align 32, !dbg !99
  %987 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 36, !dbg !99
  %988 = load float, ptr addrspace(3) %987, align 4, !dbg !99
  %989 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 40, !dbg !99
  %990 = load float, ptr addrspace(3) %989, align 8, !dbg !99
  %991 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 44, !dbg !99
  %992 = load float, ptr addrspace(3) %991, align 4, !dbg !99
  %993 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 48, !dbg !99
  %994 = load float, ptr addrspace(3) %993, align 16, !dbg !99
  %995 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 52, !dbg !99
  %996 = load float, ptr addrspace(3) %995, align 4, !dbg !99
  %997 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 56, !dbg !99
  %998 = load float, ptr addrspace(3) %997, align 8, !dbg !99
  %999 = getelementptr inbounds nuw i8, ptr addrspace(3) %969, i32 60, !dbg !99
  %1000 = load float, ptr addrspace(3) %999, align 4, !dbg !99
  %1001 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5136), i32 %452, !dbg !99
  %1002 = load float, ptr addrspace(3) %1001, align 64, !dbg !99
  %1003 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 4, !dbg !99
  %1004 = load float, ptr addrspace(3) %1003, align 4, !dbg !99
  %1005 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 8, !dbg !99
  %1006 = load float, ptr addrspace(3) %1005, align 8, !dbg !99
  %1007 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 12, !dbg !99
  %1008 = load float, ptr addrspace(3) %1007, align 4, !dbg !99
  %1009 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 16, !dbg !99
  %1010 = load float, ptr addrspace(3) %1009, align 16, !dbg !99
  %1011 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 20, !dbg !99
  %1012 = load float, ptr addrspace(3) %1011, align 4, !dbg !99
  %1013 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 24, !dbg !99
  %1014 = load float, ptr addrspace(3) %1013, align 8, !dbg !99
  %1015 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 28, !dbg !99
  %1016 = load float, ptr addrspace(3) %1015, align 4, !dbg !99
  %1017 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 32, !dbg !99
  %1018 = load float, ptr addrspace(3) %1017, align 32, !dbg !99
  %1019 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 36, !dbg !99
  %1020 = load float, ptr addrspace(3) %1019, align 4, !dbg !99
  %1021 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 40, !dbg !99
  %1022 = load float, ptr addrspace(3) %1021, align 8, !dbg !99
  %1023 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 44, !dbg !99
  %1024 = load float, ptr addrspace(3) %1023, align 4, !dbg !99
  %1025 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 48, !dbg !99
  %1026 = load float, ptr addrspace(3) %1025, align 16, !dbg !99
  %1027 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 52, !dbg !99
  %1028 = load float, ptr addrspace(3) %1027, align 4, !dbg !99
  %1029 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 56, !dbg !99
  %1030 = load float, ptr addrspace(3) %1029, align 8, !dbg !99
  %1031 = getelementptr inbounds nuw i8, ptr addrspace(3) %1001, i32 60, !dbg !99
  %1032 = load float, ptr addrspace(3) %1031, align 4, !dbg !99
  %1033 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %487, !dbg !105
  %1034 = ptrtoint ptr addrspace(3) %1033 to i32, !dbg !105
  %1035 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1034) #4, !dbg !105
  %1036 = extractvalue { i32, i32, i32, i32 } %1035, 0, !dbg !105
  %1037 = bitcast i32 %1036 to float, !dbg !105
  %1038 = extractvalue { i32, i32, i32, i32 } %1035, 1, !dbg !105
  %1039 = bitcast i32 %1038 to float, !dbg !105
  %1040 = extractvalue { i32, i32, i32, i32 } %1035, 2, !dbg !105
  %1041 = bitcast i32 %1040 to float, !dbg !105
  %1042 = extractvalue { i32, i32, i32, i32 } %1035, 3, !dbg !105
  %1043 = bitcast i32 %1042 to float, !dbg !105
  %1044 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %499, !dbg !105
  %1045 = ptrtoint ptr addrspace(3) %1044 to i32, !dbg !105
  %1046 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1045) #4, !dbg !105
  %1047 = extractvalue { i32, i32, i32, i32 } %1046, 0, !dbg !105
  %1048 = bitcast i32 %1047 to float, !dbg !105
  %1049 = extractvalue { i32, i32, i32, i32 } %1046, 1, !dbg !105
  %1050 = bitcast i32 %1049 to float, !dbg !105
  %1051 = extractvalue { i32, i32, i32, i32 } %1046, 2, !dbg !105
  %1052 = bitcast i32 %1051 to float, !dbg !105
  %1053 = extractvalue { i32, i32, i32, i32 } %1046, 3, !dbg !105
  %1054 = bitcast i32 %1053 to float, !dbg !105
  %1055 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %511, !dbg !105
  %1056 = ptrtoint ptr addrspace(3) %1055 to i32, !dbg !105
  %1057 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1056) #4, !dbg !105
  %1058 = extractvalue { i32, i32, i32, i32 } %1057, 0, !dbg !105
  %1059 = bitcast i32 %1058 to float, !dbg !105
  %1060 = extractvalue { i32, i32, i32, i32 } %1057, 1, !dbg !105
  %1061 = bitcast i32 %1060 to float, !dbg !105
  %1062 = extractvalue { i32, i32, i32, i32 } %1057, 2, !dbg !105
  %1063 = bitcast i32 %1062 to float, !dbg !105
  %1064 = extractvalue { i32, i32, i32, i32 } %1057, 3, !dbg !105
  %1065 = bitcast i32 %1064 to float, !dbg !105
  %1066 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %523, !dbg !105
  %1067 = ptrtoint ptr addrspace(3) %1066 to i32, !dbg !105
  %1068 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1067) #4, !dbg !105
  %1069 = extractvalue { i32, i32, i32, i32 } %1068, 0, !dbg !105
  %1070 = bitcast i32 %1069 to float, !dbg !105
  %1071 = extractvalue { i32, i32, i32, i32 } %1068, 1, !dbg !105
  %1072 = bitcast i32 %1071 to float, !dbg !105
  %1073 = extractvalue { i32, i32, i32, i32 } %1068, 2, !dbg !105
  %1074 = bitcast i32 %1073 to float, !dbg !105
  %1075 = extractvalue { i32, i32, i32, i32 } %1068, 3, !dbg !105
  %1076 = bitcast i32 %1075 to float, !dbg !105
  %1077 = tail call float @llvm.fmuladd.f32(float %970, float %1037, float 0.000000e+00), !dbg !112
  %1078 = tail call float @llvm.fmuladd.f32(float %972, float %1039, float %1077), !dbg !112
  %1079 = tail call float @llvm.fmuladd.f32(float %974, float %1041, float %1078), !dbg !112
  %1080 = tail call float @llvm.fmuladd.f32(float %976, float %1043, float %1079), !dbg !112
  %1081 = tail call float @llvm.fmuladd.f32(float %978, float %1048, float %1080), !dbg !112
  %1082 = tail call float @llvm.fmuladd.f32(float %980, float %1050, float %1081), !dbg !112
  %1083 = tail call float @llvm.fmuladd.f32(float %982, float %1052, float %1082), !dbg !112
  %1084 = tail call float @llvm.fmuladd.f32(float %984, float %1054, float %1083), !dbg !112
  %1085 = tail call float @llvm.fmuladd.f32(float %986, float %1059, float %1084), !dbg !112
  %1086 = tail call float @llvm.fmuladd.f32(float %988, float %1061, float %1085), !dbg !112
  %1087 = tail call float @llvm.fmuladd.f32(float %990, float %1063, float %1086), !dbg !112
  %1088 = tail call float @llvm.fmuladd.f32(float %992, float %1065, float %1087), !dbg !112
  %1089 = tail call float @llvm.fmuladd.f32(float %994, float %1070, float %1088), !dbg !112
  %1090 = tail call float @llvm.fmuladd.f32(float %996, float %1072, float %1089), !dbg !112
  %1091 = tail call float @llvm.fmuladd.f32(float %998, float %1074, float %1090), !dbg !112
  %1092 = tail call float @llvm.fmuladd.f32(float %1000, float %1076, float %1091), !dbg !112
  %1093 = tail call float @llvm.fmuladd.f32(float %1002, float %1037, float 0.000000e+00), !dbg !112
  %1094 = tail call float @llvm.fmuladd.f32(float %1004, float %1039, float %1093), !dbg !112
  %1095 = tail call float @llvm.fmuladd.f32(float %1006, float %1041, float %1094), !dbg !112
  %1096 = tail call float @llvm.fmuladd.f32(float %1008, float %1043, float %1095), !dbg !112
  %1097 = tail call float @llvm.fmuladd.f32(float %1010, float %1048, float %1096), !dbg !112
  %1098 = tail call float @llvm.fmuladd.f32(float %1012, float %1050, float %1097), !dbg !112
  %1099 = tail call float @llvm.fmuladd.f32(float %1014, float %1052, float %1098), !dbg !112
  %1100 = tail call float @llvm.fmuladd.f32(float %1016, float %1054, float %1099), !dbg !112
  %1101 = tail call float @llvm.fmuladd.f32(float %1018, float %1059, float %1100), !dbg !112
  %1102 = tail call float @llvm.fmuladd.f32(float %1020, float %1061, float %1101), !dbg !112
  %1103 = tail call float @llvm.fmuladd.f32(float %1022, float %1063, float %1102), !dbg !112
  %1104 = tail call float @llvm.fmuladd.f32(float %1024, float %1065, float %1103), !dbg !112
  %1105 = tail call float @llvm.fmuladd.f32(float %1026, float %1070, float %1104), !dbg !112
  %1106 = tail call float @llvm.fmuladd.f32(float %1028, float %1072, float %1105), !dbg !112
  %1107 = tail call float @llvm.fmuladd.f32(float %1030, float %1074, float %1106), !dbg !112
  %1108 = tail call float @llvm.fmuladd.f32(float %1032, float %1076, float %1107), !dbg !112
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !112
  %1109 = bitcast float %1092 to i32, !dbg !112
  %1110 = bitcast float %1108 to i32, !dbg !112
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %376, i32 %1109, i32 %1110) #4, !dbg !112
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !112
  %1111 = load float, ptr addrspace(3) %569, align 64, !dbg !112
  %1112 = load float, ptr addrspace(3) %571, align 4, !dbg !112
  %1113 = load float, ptr addrspace(3) %573, align 8, !dbg !112
  %1114 = load float, ptr addrspace(3) %575, align 4, !dbg !112
  %1115 = load float, ptr addrspace(3) %577, align 16, !dbg !112
  %1116 = load float, ptr addrspace(3) %579, align 4, !dbg !112
  %1117 = load float, ptr addrspace(3) %581, align 8, !dbg !112
  %1118 = load float, ptr addrspace(3) %583, align 4, !dbg !112
  %1119 = load float, ptr addrspace(3) %585, align 32, !dbg !112
  %1120 = load float, ptr addrspace(3) %587, align 4, !dbg !112
  %1121 = load float, ptr addrspace(3) %589, align 8, !dbg !112
  %1122 = load float, ptr addrspace(3) %591, align 4, !dbg !112
  %1123 = load float, ptr addrspace(3) %593, align 16, !dbg !112
  %1124 = load float, ptr addrspace(3) %595, align 4, !dbg !112
  %1125 = load float, ptr addrspace(3) %597, align 8, !dbg !112
  %1126 = load float, ptr addrspace(3) %599, align 4, !dbg !112
  %1127 = load float, ptr addrspace(3) %601, align 64, !dbg !112
  %1128 = load float, ptr addrspace(3) %603, align 4, !dbg !112
  %1129 = load float, ptr addrspace(3) %605, align 8, !dbg !112
  %1130 = load float, ptr addrspace(3) %607, align 4, !dbg !112
  %1131 = load float, ptr addrspace(3) %609, align 16, !dbg !112
  %1132 = load float, ptr addrspace(3) %611, align 4, !dbg !112
  %1133 = load float, ptr addrspace(3) %613, align 8, !dbg !112
  %1134 = load float, ptr addrspace(3) %615, align 4, !dbg !112
  %1135 = load float, ptr addrspace(3) %617, align 32, !dbg !112
  %1136 = load float, ptr addrspace(3) %619, align 4, !dbg !112
  %1137 = load float, ptr addrspace(3) %621, align 8, !dbg !112
  %1138 = load float, ptr addrspace(3) %623, align 4, !dbg !112
  %1139 = load float, ptr addrspace(3) %625, align 16, !dbg !112
  %1140 = load float, ptr addrspace(3) %627, align 4, !dbg !112
  %1141 = load float, ptr addrspace(3) %629, align 8, !dbg !112
  %1142 = load float, ptr addrspace(3) %631, align 4, !dbg !112
  %1143 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %487, !dbg !98
  %1144 = ptrtoint ptr addrspace(3) %1143 to i32, !dbg !98
  %1145 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1144) #4, !dbg !98
  %1146 = extractvalue { i32, i32, i32, i32 } %1145, 0, !dbg !98
  %1147 = bitcast i32 %1146 to float, !dbg !98
  %1148 = extractvalue { i32, i32, i32, i32 } %1145, 1, !dbg !98
  %1149 = bitcast i32 %1148 to float, !dbg !98
  %1150 = extractvalue { i32, i32, i32, i32 } %1145, 2, !dbg !98
  %1151 = bitcast i32 %1150 to float, !dbg !98
  %1152 = extractvalue { i32, i32, i32, i32 } %1145, 3, !dbg !98
  %1153 = bitcast i32 %1152 to float, !dbg !98
  %1154 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %499, !dbg !98
  %1155 = ptrtoint ptr addrspace(3) %1154 to i32, !dbg !98
  %1156 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1155) #4, !dbg !98
  %1157 = extractvalue { i32, i32, i32, i32 } %1156, 0, !dbg !98
  %1158 = bitcast i32 %1157 to float, !dbg !98
  %1159 = extractvalue { i32, i32, i32, i32 } %1156, 1, !dbg !98
  %1160 = bitcast i32 %1159 to float, !dbg !98
  %1161 = extractvalue { i32, i32, i32, i32 } %1156, 2, !dbg !98
  %1162 = bitcast i32 %1161 to float, !dbg !98
  %1163 = extractvalue { i32, i32, i32, i32 } %1156, 3, !dbg !98
  %1164 = bitcast i32 %1163 to float, !dbg !98
  %1165 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %511, !dbg !98
  %1166 = ptrtoint ptr addrspace(3) %1165 to i32, !dbg !98
  %1167 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1166) #4, !dbg !98
  %1168 = extractvalue { i32, i32, i32, i32 } %1167, 0, !dbg !98
  %1169 = bitcast i32 %1168 to float, !dbg !98
  %1170 = extractvalue { i32, i32, i32, i32 } %1167, 1, !dbg !98
  %1171 = bitcast i32 %1170 to float, !dbg !98
  %1172 = extractvalue { i32, i32, i32, i32 } %1167, 2, !dbg !98
  %1173 = bitcast i32 %1172 to float, !dbg !98
  %1174 = extractvalue { i32, i32, i32, i32 } %1167, 3, !dbg !98
  %1175 = bitcast i32 %1174 to float, !dbg !98
  %1176 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %523, !dbg !98
  %1177 = ptrtoint ptr addrspace(3) %1176 to i32, !dbg !98
  %1178 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1177) #4, !dbg !98
  %1179 = extractvalue { i32, i32, i32, i32 } %1178, 0, !dbg !98
  %1180 = bitcast i32 %1179 to float, !dbg !98
  %1181 = extractvalue { i32, i32, i32, i32 } %1178, 1, !dbg !98
  %1182 = bitcast i32 %1181 to float, !dbg !98
  %1183 = extractvalue { i32, i32, i32, i32 } %1178, 2, !dbg !98
  %1184 = bitcast i32 %1183 to float, !dbg !98
  %1185 = extractvalue { i32, i32, i32, i32 } %1178, 3, !dbg !98
  %1186 = bitcast i32 %1185 to float, !dbg !98
  %1187 = tail call float @llvm.fmuladd.f32(float %1111, float %1147, float 0.000000e+00), !dbg !113
  %1188 = tail call float @llvm.fmuladd.f32(float %1112, float %1149, float %1187), !dbg !113
  %1189 = tail call float @llvm.fmuladd.f32(float %1113, float %1151, float %1188), !dbg !113
  %1190 = tail call float @llvm.fmuladd.f32(float %1114, float %1153, float %1189), !dbg !113
  %1191 = tail call float @llvm.fmuladd.f32(float %1115, float %1158, float %1190), !dbg !113
  %1192 = tail call float @llvm.fmuladd.f32(float %1116, float %1160, float %1191), !dbg !113
  %1193 = tail call float @llvm.fmuladd.f32(float %1117, float %1162, float %1192), !dbg !113
  %1194 = tail call float @llvm.fmuladd.f32(float %1118, float %1164, float %1193), !dbg !113
  %1195 = tail call float @llvm.fmuladd.f32(float %1119, float %1169, float %1194), !dbg !113
  %1196 = tail call float @llvm.fmuladd.f32(float %1120, float %1171, float %1195), !dbg !113
  %1197 = tail call float @llvm.fmuladd.f32(float %1121, float %1173, float %1196), !dbg !113
  %1198 = tail call float @llvm.fmuladd.f32(float %1122, float %1175, float %1197), !dbg !113
  %1199 = tail call float @llvm.fmuladd.f32(float %1123, float %1180, float %1198), !dbg !113
  %1200 = tail call float @llvm.fmuladd.f32(float %1124, float %1182, float %1199), !dbg !113
  %1201 = tail call float @llvm.fmuladd.f32(float %1125, float %1184, float %1200), !dbg !113
  %1202 = tail call float @llvm.fmuladd.f32(float %1126, float %1186, float %1201), !dbg !113
  %1203 = tail call float @llvm.fmuladd.f32(float %1127, float %1147, float 0.000000e+00), !dbg !113
  %1204 = tail call float @llvm.fmuladd.f32(float %1128, float %1149, float %1203), !dbg !113
  %1205 = tail call float @llvm.fmuladd.f32(float %1129, float %1151, float %1204), !dbg !113
  %1206 = tail call float @llvm.fmuladd.f32(float %1130, float %1153, float %1205), !dbg !113
  %1207 = tail call float @llvm.fmuladd.f32(float %1131, float %1158, float %1206), !dbg !113
  %1208 = tail call float @llvm.fmuladd.f32(float %1132, float %1160, float %1207), !dbg !113
  %1209 = tail call float @llvm.fmuladd.f32(float %1133, float %1162, float %1208), !dbg !113
  %1210 = tail call float @llvm.fmuladd.f32(float %1134, float %1164, float %1209), !dbg !113
  %1211 = tail call float @llvm.fmuladd.f32(float %1135, float %1169, float %1210), !dbg !113
  %1212 = tail call float @llvm.fmuladd.f32(float %1136, float %1171, float %1211), !dbg !113
  %1213 = tail call float @llvm.fmuladd.f32(float %1137, float %1173, float %1212), !dbg !113
  %1214 = tail call float @llvm.fmuladd.f32(float %1138, float %1175, float %1213), !dbg !113
  %1215 = tail call float @llvm.fmuladd.f32(float %1139, float %1180, float %1214), !dbg !113
  %1216 = tail call float @llvm.fmuladd.f32(float %1140, float %1182, float %1215), !dbg !113
  %1217 = tail call float @llvm.fmuladd.f32(float %1141, float %1184, float %1216), !dbg !113
  %1218 = tail call float @llvm.fmuladd.f32(float %1142, float %1186, float %1217), !dbg !113
  %1219 = fsub float 0.000000e+00, %1202, !dbg !114
  %1220 = fsub float 0.000000e+00, %1218, !dbg !114
  %1221 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6160), i32 %419, !dbg !101
  %1222 = load float, ptr addrspace(3) %1221, align 64, !dbg !101
  %1223 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 4, !dbg !101
  %1224 = load float, ptr addrspace(3) %1223, align 4, !dbg !101
  %1225 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 8, !dbg !101
  %1226 = load float, ptr addrspace(3) %1225, align 8, !dbg !101
  %1227 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 12, !dbg !101
  %1228 = load float, ptr addrspace(3) %1227, align 4, !dbg !101
  %1229 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 16, !dbg !101
  %1230 = load float, ptr addrspace(3) %1229, align 16, !dbg !101
  %1231 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 20, !dbg !101
  %1232 = load float, ptr addrspace(3) %1231, align 4, !dbg !101
  %1233 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 24, !dbg !101
  %1234 = load float, ptr addrspace(3) %1233, align 8, !dbg !101
  %1235 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 28, !dbg !101
  %1236 = load float, ptr addrspace(3) %1235, align 4, !dbg !101
  %1237 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 32, !dbg !101
  %1238 = load float, ptr addrspace(3) %1237, align 32, !dbg !101
  %1239 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 36, !dbg !101
  %1240 = load float, ptr addrspace(3) %1239, align 4, !dbg !101
  %1241 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 40, !dbg !101
  %1242 = load float, ptr addrspace(3) %1241, align 8, !dbg !101
  %1243 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 44, !dbg !101
  %1244 = load float, ptr addrspace(3) %1243, align 4, !dbg !101
  %1245 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 48, !dbg !101
  %1246 = load float, ptr addrspace(3) %1245, align 16, !dbg !101
  %1247 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 52, !dbg !101
  %1248 = load float, ptr addrspace(3) %1247, align 4, !dbg !101
  %1249 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 56, !dbg !101
  %1250 = load float, ptr addrspace(3) %1249, align 8, !dbg !101
  %1251 = getelementptr inbounds nuw i8, ptr addrspace(3) %1221, i32 60, !dbg !101
  %1252 = load float, ptr addrspace(3) %1251, align 4, !dbg !101
  %1253 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6160), i32 %452, !dbg !101
  %1254 = load float, ptr addrspace(3) %1253, align 64, !dbg !101
  %1255 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 4, !dbg !101
  %1256 = load float, ptr addrspace(3) %1255, align 4, !dbg !101
  %1257 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 8, !dbg !101
  %1258 = load float, ptr addrspace(3) %1257, align 8, !dbg !101
  %1259 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 12, !dbg !101
  %1260 = load float, ptr addrspace(3) %1259, align 4, !dbg !101
  %1261 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 16, !dbg !101
  %1262 = load float, ptr addrspace(3) %1261, align 16, !dbg !101
  %1263 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 20, !dbg !101
  %1264 = load float, ptr addrspace(3) %1263, align 4, !dbg !101
  %1265 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 24, !dbg !101
  %1266 = load float, ptr addrspace(3) %1265, align 8, !dbg !101
  %1267 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 28, !dbg !101
  %1268 = load float, ptr addrspace(3) %1267, align 4, !dbg !101
  %1269 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 32, !dbg !101
  %1270 = load float, ptr addrspace(3) %1269, align 32, !dbg !101
  %1271 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 36, !dbg !101
  %1272 = load float, ptr addrspace(3) %1271, align 4, !dbg !101
  %1273 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 40, !dbg !101
  %1274 = load float, ptr addrspace(3) %1273, align 8, !dbg !101
  %1275 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 44, !dbg !101
  %1276 = load float, ptr addrspace(3) %1275, align 4, !dbg !101
  %1277 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 48, !dbg !101
  %1278 = load float, ptr addrspace(3) %1277, align 16, !dbg !101
  %1279 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 52, !dbg !101
  %1280 = load float, ptr addrspace(3) %1279, align 4, !dbg !101
  %1281 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 56, !dbg !101
  %1282 = load float, ptr addrspace(3) %1281, align 8, !dbg !101
  %1283 = getelementptr inbounds nuw i8, ptr addrspace(3) %1253, i32 60, !dbg !101
  %1284 = load float, ptr addrspace(3) %1283, align 4, !dbg !101
  %1285 = tail call float @llvm.fmuladd.f32(float %1222, float %637, float 0.000000e+00), !dbg !115
  %1286 = tail call float @llvm.fmuladd.f32(float %1224, float %639, float %1285), !dbg !115
  %1287 = tail call float @llvm.fmuladd.f32(float %1226, float %641, float %1286), !dbg !115
  %1288 = tail call float @llvm.fmuladd.f32(float %1228, float %643, float %1287), !dbg !115
  %1289 = tail call float @llvm.fmuladd.f32(float %1230, float %648, float %1288), !dbg !115
  %1290 = tail call float @llvm.fmuladd.f32(float %1232, float %650, float %1289), !dbg !115
  %1291 = tail call float @llvm.fmuladd.f32(float %1234, float %652, float %1290), !dbg !115
  %1292 = tail call float @llvm.fmuladd.f32(float %1236, float %654, float %1291), !dbg !115
  %1293 = tail call float @llvm.fmuladd.f32(float %1238, float %659, float %1292), !dbg !115
  %1294 = tail call float @llvm.fmuladd.f32(float %1240, float %661, float %1293), !dbg !115
  %1295 = tail call float @llvm.fmuladd.f32(float %1242, float %663, float %1294), !dbg !115
  %1296 = tail call float @llvm.fmuladd.f32(float %1244, float %665, float %1295), !dbg !115
  %1297 = tail call float @llvm.fmuladd.f32(float %1246, float %670, float %1296), !dbg !115
  %1298 = tail call float @llvm.fmuladd.f32(float %1248, float %672, float %1297), !dbg !115
  %1299 = tail call float @llvm.fmuladd.f32(float %1250, float %674, float %1298), !dbg !115
  %1300 = tail call float @llvm.fmuladd.f32(float %1252, float %676, float %1299), !dbg !115
  %1301 = tail call float @llvm.fmuladd.f32(float %1254, float %637, float 0.000000e+00), !dbg !115
  %1302 = tail call float @llvm.fmuladd.f32(float %1256, float %639, float %1301), !dbg !115
  %1303 = tail call float @llvm.fmuladd.f32(float %1258, float %641, float %1302), !dbg !115
  %1304 = tail call float @llvm.fmuladd.f32(float %1260, float %643, float %1303), !dbg !115
  %1305 = tail call float @llvm.fmuladd.f32(float %1262, float %648, float %1304), !dbg !115
  %1306 = tail call float @llvm.fmuladd.f32(float %1264, float %650, float %1305), !dbg !115
  %1307 = tail call float @llvm.fmuladd.f32(float %1266, float %652, float %1306), !dbg !115
  %1308 = tail call float @llvm.fmuladd.f32(float %1268, float %654, float %1307), !dbg !115
  %1309 = tail call float @llvm.fmuladd.f32(float %1270, float %659, float %1308), !dbg !115
  %1310 = tail call float @llvm.fmuladd.f32(float %1272, float %661, float %1309), !dbg !115
  %1311 = tail call float @llvm.fmuladd.f32(float %1274, float %663, float %1310), !dbg !115
  %1312 = tail call float @llvm.fmuladd.f32(float %1276, float %665, float %1311), !dbg !115
  %1313 = tail call float @llvm.fmuladd.f32(float %1278, float %670, float %1312), !dbg !115
  %1314 = tail call float @llvm.fmuladd.f32(float %1280, float %672, float %1313), !dbg !115
  %1315 = tail call float @llvm.fmuladd.f32(float %1282, float %674, float %1314), !dbg !115
  %1316 = tail call float @llvm.fmuladd.f32(float %1284, float %676, float %1315), !dbg !115
  %1317 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %419, !dbg !102
  %1318 = load float, ptr addrspace(3) %1317, align 64, !dbg !102
  %1319 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 4, !dbg !102
  %1320 = load float, ptr addrspace(3) %1319, align 4, !dbg !102
  %1321 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 8, !dbg !102
  %1322 = load float, ptr addrspace(3) %1321, align 8, !dbg !102
  %1323 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 12, !dbg !102
  %1324 = load float, ptr addrspace(3) %1323, align 4, !dbg !102
  %1325 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 16, !dbg !102
  %1326 = load float, ptr addrspace(3) %1325, align 16, !dbg !102
  %1327 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 20, !dbg !102
  %1328 = load float, ptr addrspace(3) %1327, align 4, !dbg !102
  %1329 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 24, !dbg !102
  %1330 = load float, ptr addrspace(3) %1329, align 8, !dbg !102
  %1331 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 28, !dbg !102
  %1332 = load float, ptr addrspace(3) %1331, align 4, !dbg !102
  %1333 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 32, !dbg !102
  %1334 = load float, ptr addrspace(3) %1333, align 32, !dbg !102
  %1335 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 36, !dbg !102
  %1336 = load float, ptr addrspace(3) %1335, align 4, !dbg !102
  %1337 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 40, !dbg !102
  %1338 = load float, ptr addrspace(3) %1337, align 8, !dbg !102
  %1339 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 44, !dbg !102
  %1340 = load float, ptr addrspace(3) %1339, align 4, !dbg !102
  %1341 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 48, !dbg !102
  %1342 = load float, ptr addrspace(3) %1341, align 16, !dbg !102
  %1343 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 52, !dbg !102
  %1344 = load float, ptr addrspace(3) %1343, align 4, !dbg !102
  %1345 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 56, !dbg !102
  %1346 = load float, ptr addrspace(3) %1345, align 8, !dbg !102
  %1347 = getelementptr inbounds nuw i8, ptr addrspace(3) %1317, i32 60, !dbg !102
  %1348 = load float, ptr addrspace(3) %1347, align 4, !dbg !102
  %1349 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %452, !dbg !102
  %1350 = load float, ptr addrspace(3) %1349, align 64, !dbg !102
  %1351 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 4, !dbg !102
  %1352 = load float, ptr addrspace(3) %1351, align 4, !dbg !102
  %1353 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 8, !dbg !102
  %1354 = load float, ptr addrspace(3) %1353, align 8, !dbg !102
  %1355 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 12, !dbg !102
  %1356 = load float, ptr addrspace(3) %1355, align 4, !dbg !102
  %1357 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 16, !dbg !102
  %1358 = load float, ptr addrspace(3) %1357, align 16, !dbg !102
  %1359 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 20, !dbg !102
  %1360 = load float, ptr addrspace(3) %1359, align 4, !dbg !102
  %1361 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 24, !dbg !102
  %1362 = load float, ptr addrspace(3) %1361, align 8, !dbg !102
  %1363 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 28, !dbg !102
  %1364 = load float, ptr addrspace(3) %1363, align 4, !dbg !102
  %1365 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 32, !dbg !102
  %1366 = load float, ptr addrspace(3) %1365, align 32, !dbg !102
  %1367 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 36, !dbg !102
  %1368 = load float, ptr addrspace(3) %1367, align 4, !dbg !102
  %1369 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 40, !dbg !102
  %1370 = load float, ptr addrspace(3) %1369, align 8, !dbg !102
  %1371 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 44, !dbg !102
  %1372 = load float, ptr addrspace(3) %1371, align 4, !dbg !102
  %1373 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 48, !dbg !102
  %1374 = load float, ptr addrspace(3) %1373, align 16, !dbg !102
  %1375 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 52, !dbg !102
  %1376 = load float, ptr addrspace(3) %1375, align 4, !dbg !102
  %1377 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 56, !dbg !102
  %1378 = load float, ptr addrspace(3) %1377, align 8, !dbg !102
  %1379 = getelementptr inbounds nuw i8, ptr addrspace(3) %1349, i32 60, !dbg !102
  %1380 = load float, ptr addrspace(3) %1379, align 4, !dbg !102
  %1381 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #4, !dbg !108
  %1382 = extractvalue { i32, i32, i32, i32 } %1381, 0, !dbg !108
  %1383 = bitcast i32 %1382 to float, !dbg !108
  %1384 = extractvalue { i32, i32, i32, i32 } %1381, 1, !dbg !108
  %1385 = bitcast i32 %1384 to float, !dbg !108
  %1386 = extractvalue { i32, i32, i32, i32 } %1381, 2, !dbg !108
  %1387 = bitcast i32 %1386 to float, !dbg !108
  %1388 = extractvalue { i32, i32, i32, i32 } %1381, 3, !dbg !108
  %1389 = bitcast i32 %1388 to float, !dbg !108
  %1390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %645) #4, !dbg !108
  %1391 = extractvalue { i32, i32, i32, i32 } %1390, 0, !dbg !108
  %1392 = bitcast i32 %1391 to float, !dbg !108
  %1393 = extractvalue { i32, i32, i32, i32 } %1390, 1, !dbg !108
  %1394 = bitcast i32 %1393 to float, !dbg !108
  %1395 = extractvalue { i32, i32, i32, i32 } %1390, 2, !dbg !108
  %1396 = bitcast i32 %1395 to float, !dbg !108
  %1397 = extractvalue { i32, i32, i32, i32 } %1390, 3, !dbg !108
  %1398 = bitcast i32 %1397 to float, !dbg !108
  %1399 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #4, !dbg !108
  %1400 = extractvalue { i32, i32, i32, i32 } %1399, 0, !dbg !108
  %1401 = bitcast i32 %1400 to float, !dbg !108
  %1402 = extractvalue { i32, i32, i32, i32 } %1399, 1, !dbg !108
  %1403 = bitcast i32 %1402 to float, !dbg !108
  %1404 = extractvalue { i32, i32, i32, i32 } %1399, 2, !dbg !108
  %1405 = bitcast i32 %1404 to float, !dbg !108
  %1406 = extractvalue { i32, i32, i32, i32 } %1399, 3, !dbg !108
  %1407 = bitcast i32 %1406 to float, !dbg !108
  %1408 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %667) #4, !dbg !108
  %1409 = extractvalue { i32, i32, i32, i32 } %1408, 0, !dbg !108
  %1410 = bitcast i32 %1409 to float, !dbg !108
  %1411 = extractvalue { i32, i32, i32, i32 } %1408, 1, !dbg !108
  %1412 = bitcast i32 %1411 to float, !dbg !108
  %1413 = extractvalue { i32, i32, i32, i32 } %1408, 2, !dbg !108
  %1414 = bitcast i32 %1413 to float, !dbg !108
  %1415 = extractvalue { i32, i32, i32, i32 } %1408, 3, !dbg !108
  %1416 = bitcast i32 %1415 to float, !dbg !108
  %1417 = tail call float @llvm.fmuladd.f32(float %1318, float %1383, float %1300), !dbg !116
  %1418 = tail call float @llvm.fmuladd.f32(float %1320, float %1385, float %1417), !dbg !116
  %1419 = tail call float @llvm.fmuladd.f32(float %1322, float %1387, float %1418), !dbg !116
  %1420 = tail call float @llvm.fmuladd.f32(float %1324, float %1389, float %1419), !dbg !116
  %1421 = tail call float @llvm.fmuladd.f32(float %1326, float %1392, float %1420), !dbg !116
  %1422 = tail call float @llvm.fmuladd.f32(float %1328, float %1394, float %1421), !dbg !116
  %1423 = tail call float @llvm.fmuladd.f32(float %1330, float %1396, float %1422), !dbg !116
  %1424 = tail call float @llvm.fmuladd.f32(float %1332, float %1398, float %1423), !dbg !116
  %1425 = tail call float @llvm.fmuladd.f32(float %1334, float %1401, float %1424), !dbg !116
  %1426 = tail call float @llvm.fmuladd.f32(float %1336, float %1403, float %1425), !dbg !116
  %1427 = tail call float @llvm.fmuladd.f32(float %1338, float %1405, float %1426), !dbg !116
  %1428 = tail call float @llvm.fmuladd.f32(float %1340, float %1407, float %1427), !dbg !116
  %1429 = tail call float @llvm.fmuladd.f32(float %1342, float %1410, float %1428), !dbg !116
  %1430 = tail call float @llvm.fmuladd.f32(float %1344, float %1412, float %1429), !dbg !116
  %1431 = tail call float @llvm.fmuladd.f32(float %1346, float %1414, float %1430), !dbg !116
  %1432 = tail call float @llvm.fmuladd.f32(float %1348, float %1416, float %1431), !dbg !116
  %1433 = tail call float @llvm.fmuladd.f32(float %1350, float %1383, float %1316), !dbg !116
  %1434 = tail call float @llvm.fmuladd.f32(float %1352, float %1385, float %1433), !dbg !116
  %1435 = tail call float @llvm.fmuladd.f32(float %1354, float %1387, float %1434), !dbg !116
  %1436 = tail call float @llvm.fmuladd.f32(float %1356, float %1389, float %1435), !dbg !116
  %1437 = tail call float @llvm.fmuladd.f32(float %1358, float %1392, float %1436), !dbg !116
  %1438 = tail call float @llvm.fmuladd.f32(float %1360, float %1394, float %1437), !dbg !116
  %1439 = tail call float @llvm.fmuladd.f32(float %1362, float %1396, float %1438), !dbg !116
  %1440 = tail call float @llvm.fmuladd.f32(float %1364, float %1398, float %1439), !dbg !116
  %1441 = tail call float @llvm.fmuladd.f32(float %1366, float %1401, float %1440), !dbg !116
  %1442 = tail call float @llvm.fmuladd.f32(float %1368, float %1403, float %1441), !dbg !116
  %1443 = tail call float @llvm.fmuladd.f32(float %1370, float %1405, float %1442), !dbg !116
  %1444 = tail call float @llvm.fmuladd.f32(float %1372, float %1407, float %1443), !dbg !116
  %1445 = tail call float @llvm.fmuladd.f32(float %1374, float %1410, float %1444), !dbg !116
  %1446 = tail call float @llvm.fmuladd.f32(float %1376, float %1412, float %1445), !dbg !116
  %1447 = tail call float @llvm.fmuladd.f32(float %1378, float %1414, float %1446), !dbg !116
  %1448 = tail call float @llvm.fmuladd.f32(float %1380, float %1416, float %1447), !dbg !116
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !116
  %1449 = bitcast float %1432 to i32, !dbg !116
  %1450 = bitcast float %1448 to i32, !dbg !116
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %348, i32 %1449, i32 %1450) #4, !dbg !116
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !116
  %1451 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #4, !dbg !116
  %1452 = extractvalue { i32, i32, i32, i32 } %1451, 0, !dbg !116
  %1453 = bitcast i32 %1452 to float, !dbg !116
  %1454 = extractvalue { i32, i32, i32, i32 } %1451, 1, !dbg !116
  %1455 = bitcast i32 %1454 to float, !dbg !116
  %1456 = extractvalue { i32, i32, i32, i32 } %1451, 2, !dbg !116
  %1457 = bitcast i32 %1456 to float, !dbg !116
  %1458 = extractvalue { i32, i32, i32, i32 } %1451, 3, !dbg !116
  %1459 = bitcast i32 %1458 to float, !dbg !116
  %1460 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %645) #4, !dbg !116
  %1461 = extractvalue { i32, i32, i32, i32 } %1460, 0, !dbg !116
  %1462 = bitcast i32 %1461 to float, !dbg !116
  %1463 = extractvalue { i32, i32, i32, i32 } %1460, 1, !dbg !116
  %1464 = bitcast i32 %1463 to float, !dbg !116
  %1465 = extractvalue { i32, i32, i32, i32 } %1460, 2, !dbg !116
  %1466 = bitcast i32 %1465 to float, !dbg !116
  %1467 = extractvalue { i32, i32, i32, i32 } %1460, 3, !dbg !116
  %1468 = bitcast i32 %1467 to float, !dbg !116
  %1469 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #4, !dbg !116
  %1470 = extractvalue { i32, i32, i32, i32 } %1469, 0, !dbg !116
  %1471 = bitcast i32 %1470 to float, !dbg !116
  %1472 = extractvalue { i32, i32, i32, i32 } %1469, 1, !dbg !116
  %1473 = bitcast i32 %1472 to float, !dbg !116
  %1474 = extractvalue { i32, i32, i32, i32 } %1469, 2, !dbg !116
  %1475 = bitcast i32 %1474 to float, !dbg !116
  %1476 = extractvalue { i32, i32, i32, i32 } %1469, 3, !dbg !116
  %1477 = bitcast i32 %1476 to float, !dbg !116
  %1478 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %667) #4, !dbg !116
  %1479 = extractvalue { i32, i32, i32, i32 } %1478, 0, !dbg !116
  %1480 = bitcast i32 %1479 to float, !dbg !116
  %1481 = extractvalue { i32, i32, i32, i32 } %1478, 1, !dbg !116
  %1482 = bitcast i32 %1481 to float, !dbg !116
  %1483 = extractvalue { i32, i32, i32, i32 } %1478, 2, !dbg !116
  %1484 = bitcast i32 %1483 to float, !dbg !116
  %1485 = extractvalue { i32, i32, i32, i32 } %1478, 3, !dbg !116
  %1486 = bitcast i32 %1485 to float, !dbg !116
  %1487 = tail call float @llvm.fmuladd.f32(float %714, float %1453, float 0.000000e+00), !dbg !117
  %1488 = tail call float @llvm.fmuladd.f32(float %716, float %1455, float %1487), !dbg !117
  %1489 = tail call float @llvm.fmuladd.f32(float %718, float %1457, float %1488), !dbg !117
  %1490 = tail call float @llvm.fmuladd.f32(float %720, float %1459, float %1489), !dbg !117
  %1491 = tail call float @llvm.fmuladd.f32(float %722, float %1462, float %1490), !dbg !117
  %1492 = tail call float @llvm.fmuladd.f32(float %724, float %1464, float %1491), !dbg !117
  %1493 = tail call float @llvm.fmuladd.f32(float %726, float %1466, float %1492), !dbg !117
  %1494 = tail call float @llvm.fmuladd.f32(float %728, float %1468, float %1493), !dbg !117
  %1495 = tail call float @llvm.fmuladd.f32(float %730, float %1471, float %1494), !dbg !117
  %1496 = tail call float @llvm.fmuladd.f32(float %732, float %1473, float %1495), !dbg !117
  %1497 = tail call float @llvm.fmuladd.f32(float %734, float %1475, float %1496), !dbg !117
  %1498 = tail call float @llvm.fmuladd.f32(float %736, float %1477, float %1497), !dbg !117
  %1499 = tail call float @llvm.fmuladd.f32(float %738, float %1480, float %1498), !dbg !117
  %1500 = tail call float @llvm.fmuladd.f32(float %740, float %1482, float %1499), !dbg !117
  %1501 = tail call float @llvm.fmuladd.f32(float %742, float %1484, float %1500), !dbg !117
  %1502 = tail call float @llvm.fmuladd.f32(float %744, float %1486, float %1501), !dbg !117
  %1503 = tail call float @llvm.fmuladd.f32(float %746, float %1453, float 0.000000e+00), !dbg !117
  %1504 = tail call float @llvm.fmuladd.f32(float %748, float %1455, float %1503), !dbg !117
  %1505 = tail call float @llvm.fmuladd.f32(float %750, float %1457, float %1504), !dbg !117
  %1506 = tail call float @llvm.fmuladd.f32(float %752, float %1459, float %1505), !dbg !117
  %1507 = tail call float @llvm.fmuladd.f32(float %754, float %1462, float %1506), !dbg !117
  %1508 = tail call float @llvm.fmuladd.f32(float %756, float %1464, float %1507), !dbg !117
  %1509 = tail call float @llvm.fmuladd.f32(float %758, float %1466, float %1508), !dbg !117
  %1510 = tail call float @llvm.fmuladd.f32(float %760, float %1468, float %1509), !dbg !117
  %1511 = tail call float @llvm.fmuladd.f32(float %762, float %1471, float %1510), !dbg !117
  %1512 = tail call float @llvm.fmuladd.f32(float %764, float %1473, float %1511), !dbg !117
  %1513 = tail call float @llvm.fmuladd.f32(float %766, float %1475, float %1512), !dbg !117
  %1514 = tail call float @llvm.fmuladd.f32(float %768, float %1477, float %1513), !dbg !117
  %1515 = tail call float @llvm.fmuladd.f32(float %770, float %1480, float %1514), !dbg !117
  %1516 = tail call float @llvm.fmuladd.f32(float %772, float %1482, float %1515), !dbg !117
  %1517 = tail call float @llvm.fmuladd.f32(float %774, float %1484, float %1516), !dbg !117
  %1518 = tail call float @llvm.fmuladd.f32(float %776, float %1486, float %1517), !dbg !117
  %1519 = fsub float 0.000000e+00, %1502, !dbg !118
  %1520 = fsub float 0.000000e+00, %1518, !dbg !118
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !118
  %1521 = bitcast float %1519 to i32, !dbg !118
  %1522 = bitcast float %1520 to i32, !dbg !118
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %348, i32 %1521, i32 %1522) #4, !dbg !118
  %1523 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9232), i32 %419, !dbg !104
  %1524 = load float, ptr addrspace(3) %1523, align 64, !dbg !104
  %1525 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 4, !dbg !104
  %1526 = load float, ptr addrspace(3) %1525, align 4, !dbg !104
  %1527 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 8, !dbg !104
  %1528 = load float, ptr addrspace(3) %1527, align 8, !dbg !104
  %1529 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 12, !dbg !104
  %1530 = load float, ptr addrspace(3) %1529, align 4, !dbg !104
  %1531 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 16, !dbg !104
  %1532 = load float, ptr addrspace(3) %1531, align 16, !dbg !104
  %1533 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 20, !dbg !104
  %1534 = load float, ptr addrspace(3) %1533, align 4, !dbg !104
  %1535 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 24, !dbg !104
  %1536 = load float, ptr addrspace(3) %1535, align 8, !dbg !104
  %1537 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 28, !dbg !104
  %1538 = load float, ptr addrspace(3) %1537, align 4, !dbg !104
  %1539 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 32, !dbg !104
  %1540 = load float, ptr addrspace(3) %1539, align 32, !dbg !104
  %1541 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 36, !dbg !104
  %1542 = load float, ptr addrspace(3) %1541, align 4, !dbg !104
  %1543 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 40, !dbg !104
  %1544 = load float, ptr addrspace(3) %1543, align 8, !dbg !104
  %1545 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 44, !dbg !104
  %1546 = load float, ptr addrspace(3) %1545, align 4, !dbg !104
  %1547 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 48, !dbg !104
  %1548 = load float, ptr addrspace(3) %1547, align 16, !dbg !104
  %1549 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 52, !dbg !104
  %1550 = load float, ptr addrspace(3) %1549, align 4, !dbg !104
  %1551 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 56, !dbg !104
  %1552 = load float, ptr addrspace(3) %1551, align 8, !dbg !104
  %1553 = getelementptr inbounds nuw i8, ptr addrspace(3) %1523, i32 60, !dbg !104
  %1554 = load float, ptr addrspace(3) %1553, align 4, !dbg !104
  %1555 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9232), i32 %452, !dbg !104
  %1556 = load float, ptr addrspace(3) %1555, align 64, !dbg !104
  %1557 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 4, !dbg !104
  %1558 = load float, ptr addrspace(3) %1557, align 4, !dbg !104
  %1559 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 8, !dbg !104
  %1560 = load float, ptr addrspace(3) %1559, align 8, !dbg !104
  %1561 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 12, !dbg !104
  %1562 = load float, ptr addrspace(3) %1561, align 4, !dbg !104
  %1563 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 16, !dbg !104
  %1564 = load float, ptr addrspace(3) %1563, align 16, !dbg !104
  %1565 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 20, !dbg !104
  %1566 = load float, ptr addrspace(3) %1565, align 4, !dbg !104
  %1567 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 24, !dbg !104
  %1568 = load float, ptr addrspace(3) %1567, align 8, !dbg !104
  %1569 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 28, !dbg !104
  %1570 = load float, ptr addrspace(3) %1569, align 4, !dbg !104
  %1571 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 32, !dbg !104
  %1572 = load float, ptr addrspace(3) %1571, align 32, !dbg !104
  %1573 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 36, !dbg !104
  %1574 = load float, ptr addrspace(3) %1573, align 4, !dbg !104
  %1575 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 40, !dbg !104
  %1576 = load float, ptr addrspace(3) %1575, align 8, !dbg !104
  %1577 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 44, !dbg !104
  %1578 = load float, ptr addrspace(3) %1577, align 4, !dbg !104
  %1579 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 48, !dbg !104
  %1580 = load float, ptr addrspace(3) %1579, align 16, !dbg !104
  %1581 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 52, !dbg !104
  %1582 = load float, ptr addrspace(3) %1581, align 4, !dbg !104
  %1583 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 56, !dbg !104
  %1584 = load float, ptr addrspace(3) %1583, align 8, !dbg !104
  %1585 = getelementptr inbounds nuw i8, ptr addrspace(3) %1555, i32 60, !dbg !104
  %1586 = load float, ptr addrspace(3) %1585, align 4, !dbg !104
  %1587 = tail call float @llvm.fmuladd.f32(float %1524, float %891, float 0.000000e+00), !dbg !119
  %1588 = tail call float @llvm.fmuladd.f32(float %1526, float %893, float %1587), !dbg !119
  %1589 = tail call float @llvm.fmuladd.f32(float %1528, float %895, float %1588), !dbg !119
  %1590 = tail call float @llvm.fmuladd.f32(float %1530, float %897, float %1589), !dbg !119
  %1591 = tail call float @llvm.fmuladd.f32(float %1532, float %902, float %1590), !dbg !119
  %1592 = tail call float @llvm.fmuladd.f32(float %1534, float %904, float %1591), !dbg !119
  %1593 = tail call float @llvm.fmuladd.f32(float %1536, float %906, float %1592), !dbg !119
  %1594 = tail call float @llvm.fmuladd.f32(float %1538, float %908, float %1593), !dbg !119
  %1595 = tail call float @llvm.fmuladd.f32(float %1540, float %913, float %1594), !dbg !119
  %1596 = tail call float @llvm.fmuladd.f32(float %1542, float %915, float %1595), !dbg !119
  %1597 = tail call float @llvm.fmuladd.f32(float %1544, float %917, float %1596), !dbg !119
  %1598 = tail call float @llvm.fmuladd.f32(float %1546, float %919, float %1597), !dbg !119
  %1599 = tail call float @llvm.fmuladd.f32(float %1548, float %924, float %1598), !dbg !119
  %1600 = tail call float @llvm.fmuladd.f32(float %1550, float %926, float %1599), !dbg !119
  %1601 = tail call float @llvm.fmuladd.f32(float %1552, float %928, float %1600), !dbg !119
  %1602 = tail call float @llvm.fmuladd.f32(float %1554, float %930, float %1601), !dbg !119
  %1603 = tail call float @llvm.fmuladd.f32(float %1556, float %891, float 0.000000e+00), !dbg !119
  %1604 = tail call float @llvm.fmuladd.f32(float %1558, float %893, float %1603), !dbg !119
  %1605 = tail call float @llvm.fmuladd.f32(float %1560, float %895, float %1604), !dbg !119
  %1606 = tail call float @llvm.fmuladd.f32(float %1562, float %897, float %1605), !dbg !119
  %1607 = tail call float @llvm.fmuladd.f32(float %1564, float %902, float %1606), !dbg !119
  %1608 = tail call float @llvm.fmuladd.f32(float %1566, float %904, float %1607), !dbg !119
  %1609 = tail call float @llvm.fmuladd.f32(float %1568, float %906, float %1608), !dbg !119
  %1610 = tail call float @llvm.fmuladd.f32(float %1570, float %908, float %1609), !dbg !119
  %1611 = tail call float @llvm.fmuladd.f32(float %1572, float %913, float %1610), !dbg !119
  %1612 = tail call float @llvm.fmuladd.f32(float %1574, float %915, float %1611), !dbg !119
  %1613 = tail call float @llvm.fmuladd.f32(float %1576, float %917, float %1612), !dbg !119
  %1614 = tail call float @llvm.fmuladd.f32(float %1578, float %919, float %1613), !dbg !119
  %1615 = tail call float @llvm.fmuladd.f32(float %1580, float %924, float %1614), !dbg !119
  %1616 = tail call float @llvm.fmuladd.f32(float %1582, float %926, float %1615), !dbg !119
  %1617 = tail call float @llvm.fmuladd.f32(float %1584, float %928, float %1616), !dbg !119
  %1618 = tail call float @llvm.fmuladd.f32(float %1586, float %930, float %1617), !dbg !119
  %1619 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %419, !dbg !105
  %1620 = load float, ptr addrspace(3) %1619, align 64, !dbg !105
  %1621 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 4, !dbg !105
  %1622 = load float, ptr addrspace(3) %1621, align 4, !dbg !105
  %1623 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 8, !dbg !105
  %1624 = load float, ptr addrspace(3) %1623, align 8, !dbg !105
  %1625 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 12, !dbg !105
  %1626 = load float, ptr addrspace(3) %1625, align 4, !dbg !105
  %1627 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 16, !dbg !105
  %1628 = load float, ptr addrspace(3) %1627, align 16, !dbg !105
  %1629 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 20, !dbg !105
  %1630 = load float, ptr addrspace(3) %1629, align 4, !dbg !105
  %1631 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 24, !dbg !105
  %1632 = load float, ptr addrspace(3) %1631, align 8, !dbg !105
  %1633 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 28, !dbg !105
  %1634 = load float, ptr addrspace(3) %1633, align 4, !dbg !105
  %1635 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 32, !dbg !105
  %1636 = load float, ptr addrspace(3) %1635, align 32, !dbg !105
  %1637 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 36, !dbg !105
  %1638 = load float, ptr addrspace(3) %1637, align 4, !dbg !105
  %1639 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 40, !dbg !105
  %1640 = load float, ptr addrspace(3) %1639, align 8, !dbg !105
  %1641 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 44, !dbg !105
  %1642 = load float, ptr addrspace(3) %1641, align 4, !dbg !105
  %1643 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 48, !dbg !105
  %1644 = load float, ptr addrspace(3) %1643, align 16, !dbg !105
  %1645 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 52, !dbg !105
  %1646 = load float, ptr addrspace(3) %1645, align 4, !dbg !105
  %1647 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 56, !dbg !105
  %1648 = load float, ptr addrspace(3) %1647, align 8, !dbg !105
  %1649 = getelementptr inbounds nuw i8, ptr addrspace(3) %1619, i32 60, !dbg !105
  %1650 = load float, ptr addrspace(3) %1649, align 4, !dbg !105
  %1651 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %452, !dbg !105
  %1652 = load float, ptr addrspace(3) %1651, align 64, !dbg !105
  %1653 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 4, !dbg !105
  %1654 = load float, ptr addrspace(3) %1653, align 4, !dbg !105
  %1655 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 8, !dbg !105
  %1656 = load float, ptr addrspace(3) %1655, align 8, !dbg !105
  %1657 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 12, !dbg !105
  %1658 = load float, ptr addrspace(3) %1657, align 4, !dbg !105
  %1659 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 16, !dbg !105
  %1660 = load float, ptr addrspace(3) %1659, align 16, !dbg !105
  %1661 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 20, !dbg !105
  %1662 = load float, ptr addrspace(3) %1661, align 4, !dbg !105
  %1663 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 24, !dbg !105
  %1664 = load float, ptr addrspace(3) %1663, align 8, !dbg !105
  %1665 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 28, !dbg !105
  %1666 = load float, ptr addrspace(3) %1665, align 4, !dbg !105
  %1667 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 32, !dbg !105
  %1668 = load float, ptr addrspace(3) %1667, align 32, !dbg !105
  %1669 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 36, !dbg !105
  %1670 = load float, ptr addrspace(3) %1669, align 4, !dbg !105
  %1671 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 40, !dbg !105
  %1672 = load float, ptr addrspace(3) %1671, align 8, !dbg !105
  %1673 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 44, !dbg !105
  %1674 = load float, ptr addrspace(3) %1673, align 4, !dbg !105
  %1675 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 48, !dbg !105
  %1676 = load float, ptr addrspace(3) %1675, align 16, !dbg !105
  %1677 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 52, !dbg !105
  %1678 = load float, ptr addrspace(3) %1677, align 4, !dbg !105
  %1679 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 56, !dbg !105
  %1680 = load float, ptr addrspace(3) %1679, align 8, !dbg !105
  %1681 = getelementptr inbounds nuw i8, ptr addrspace(3) %1651, i32 60, !dbg !105
  %1682 = load float, ptr addrspace(3) %1681, align 4, !dbg !105
  %1683 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %487, !dbg !111
  %1684 = ptrtoint ptr addrspace(3) %1683 to i32, !dbg !111
  %1685 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1684) #4, !dbg !111
  %1686 = extractvalue { i32, i32, i32, i32 } %1685, 0, !dbg !111
  %1687 = bitcast i32 %1686 to float, !dbg !111
  %1688 = extractvalue { i32, i32, i32, i32 } %1685, 1, !dbg !111
  %1689 = bitcast i32 %1688 to float, !dbg !111
  %1690 = extractvalue { i32, i32, i32, i32 } %1685, 2, !dbg !111
  %1691 = bitcast i32 %1690 to float, !dbg !111
  %1692 = extractvalue { i32, i32, i32, i32 } %1685, 3, !dbg !111
  %1693 = bitcast i32 %1692 to float, !dbg !111
  %1694 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %499, !dbg !111
  %1695 = ptrtoint ptr addrspace(3) %1694 to i32, !dbg !111
  %1696 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1695) #4, !dbg !111
  %1697 = extractvalue { i32, i32, i32, i32 } %1696, 0, !dbg !111
  %1698 = bitcast i32 %1697 to float, !dbg !111
  %1699 = extractvalue { i32, i32, i32, i32 } %1696, 1, !dbg !111
  %1700 = bitcast i32 %1699 to float, !dbg !111
  %1701 = extractvalue { i32, i32, i32, i32 } %1696, 2, !dbg !111
  %1702 = bitcast i32 %1701 to float, !dbg !111
  %1703 = extractvalue { i32, i32, i32, i32 } %1696, 3, !dbg !111
  %1704 = bitcast i32 %1703 to float, !dbg !111
  %1705 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %511, !dbg !111
  %1706 = ptrtoint ptr addrspace(3) %1705 to i32, !dbg !111
  %1707 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1706) #4, !dbg !111
  %1708 = extractvalue { i32, i32, i32, i32 } %1707, 0, !dbg !111
  %1709 = bitcast i32 %1708 to float, !dbg !111
  %1710 = extractvalue { i32, i32, i32, i32 } %1707, 1, !dbg !111
  %1711 = bitcast i32 %1710 to float, !dbg !111
  %1712 = extractvalue { i32, i32, i32, i32 } %1707, 2, !dbg !111
  %1713 = bitcast i32 %1712 to float, !dbg !111
  %1714 = extractvalue { i32, i32, i32, i32 } %1707, 3, !dbg !111
  %1715 = bitcast i32 %1714 to float, !dbg !111
  %1716 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %523, !dbg !111
  %1717 = ptrtoint ptr addrspace(3) %1716 to i32, !dbg !111
  %1718 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1717) #4, !dbg !111
  %1719 = extractvalue { i32, i32, i32, i32 } %1718, 0, !dbg !111
  %1720 = bitcast i32 %1719 to float, !dbg !111
  %1721 = extractvalue { i32, i32, i32, i32 } %1718, 1, !dbg !111
  %1722 = bitcast i32 %1721 to float, !dbg !111
  %1723 = extractvalue { i32, i32, i32, i32 } %1718, 2, !dbg !111
  %1724 = bitcast i32 %1723 to float, !dbg !111
  %1725 = extractvalue { i32, i32, i32, i32 } %1718, 3, !dbg !111
  %1726 = bitcast i32 %1725 to float, !dbg !111
  %1727 = tail call float @llvm.fmuladd.f32(float %1620, float %1687, float %1602), !dbg !120
  %1728 = tail call float @llvm.fmuladd.f32(float %1622, float %1689, float %1727), !dbg !120
  %1729 = tail call float @llvm.fmuladd.f32(float %1624, float %1691, float %1728), !dbg !120
  %1730 = tail call float @llvm.fmuladd.f32(float %1626, float %1693, float %1729), !dbg !120
  %1731 = tail call float @llvm.fmuladd.f32(float %1628, float %1698, float %1730), !dbg !120
  %1732 = tail call float @llvm.fmuladd.f32(float %1630, float %1700, float %1731), !dbg !120
  %1733 = tail call float @llvm.fmuladd.f32(float %1632, float %1702, float %1732), !dbg !120
  %1734 = tail call float @llvm.fmuladd.f32(float %1634, float %1704, float %1733), !dbg !120
  %1735 = tail call float @llvm.fmuladd.f32(float %1636, float %1709, float %1734), !dbg !120
  %1736 = tail call float @llvm.fmuladd.f32(float %1638, float %1711, float %1735), !dbg !120
  %1737 = tail call float @llvm.fmuladd.f32(float %1640, float %1713, float %1736), !dbg !120
  %1738 = tail call float @llvm.fmuladd.f32(float %1642, float %1715, float %1737), !dbg !120
  %1739 = tail call float @llvm.fmuladd.f32(float %1644, float %1720, float %1738), !dbg !120
  %1740 = tail call float @llvm.fmuladd.f32(float %1646, float %1722, float %1739), !dbg !120
  %1741 = tail call float @llvm.fmuladd.f32(float %1648, float %1724, float %1740), !dbg !120
  %1742 = tail call float @llvm.fmuladd.f32(float %1650, float %1726, float %1741), !dbg !120
  %1743 = tail call float @llvm.fmuladd.f32(float %1652, float %1687, float %1618), !dbg !120
  %1744 = tail call float @llvm.fmuladd.f32(float %1654, float %1689, float %1743), !dbg !120
  %1745 = tail call float @llvm.fmuladd.f32(float %1656, float %1691, float %1744), !dbg !120
  %1746 = tail call float @llvm.fmuladd.f32(float %1658, float %1693, float %1745), !dbg !120
  %1747 = tail call float @llvm.fmuladd.f32(float %1660, float %1698, float %1746), !dbg !120
  %1748 = tail call float @llvm.fmuladd.f32(float %1662, float %1700, float %1747), !dbg !120
  %1749 = tail call float @llvm.fmuladd.f32(float %1664, float %1702, float %1748), !dbg !120
  %1750 = tail call float @llvm.fmuladd.f32(float %1666, float %1704, float %1749), !dbg !120
  %1751 = tail call float @llvm.fmuladd.f32(float %1668, float %1709, float %1750), !dbg !120
  %1752 = tail call float @llvm.fmuladd.f32(float %1670, float %1711, float %1751), !dbg !120
  %1753 = tail call float @llvm.fmuladd.f32(float %1672, float %1713, float %1752), !dbg !120
  %1754 = tail call float @llvm.fmuladd.f32(float %1674, float %1715, float %1753), !dbg !120
  %1755 = tail call float @llvm.fmuladd.f32(float %1676, float %1720, float %1754), !dbg !120
  %1756 = tail call float @llvm.fmuladd.f32(float %1678, float %1722, float %1755), !dbg !120
  %1757 = tail call float @llvm.fmuladd.f32(float %1680, float %1724, float %1756), !dbg !120
  %1758 = tail call float @llvm.fmuladd.f32(float %1682, float %1726, float %1757), !dbg !120
  %1759 = bitcast float %1742 to i32, !dbg !120
  %1760 = bitcast float %1758 to i32, !dbg !120
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %376, i32 %1759, i32 %1760) #4, !dbg !120
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !120
  %1761 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #4, !dbg !120
  %1762 = extractvalue { i32, i32, i32, i32 } %1761, 0, !dbg !120
  %1763 = bitcast i32 %1762 to float, !dbg !120
  %1764 = extractvalue { i32, i32, i32, i32 } %1761, 1, !dbg !120
  %1765 = bitcast i32 %1764 to float, !dbg !120
  %1766 = extractvalue { i32, i32, i32, i32 } %1761, 2, !dbg !120
  %1767 = bitcast i32 %1766 to float, !dbg !120
  %1768 = extractvalue { i32, i32, i32, i32 } %1761, 3, !dbg !120
  %1769 = bitcast i32 %1768 to float, !dbg !120
  %1770 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %501) #4, !dbg !120
  %1771 = extractvalue { i32, i32, i32, i32 } %1770, 0, !dbg !120
  %1772 = bitcast i32 %1771 to float, !dbg !120
  %1773 = extractvalue { i32, i32, i32, i32 } %1770, 1, !dbg !120
  %1774 = bitcast i32 %1773 to float, !dbg !120
  %1775 = extractvalue { i32, i32, i32, i32 } %1770, 2, !dbg !120
  %1776 = bitcast i32 %1775 to float, !dbg !120
  %1777 = extractvalue { i32, i32, i32, i32 } %1770, 3, !dbg !120
  %1778 = bitcast i32 %1777 to float, !dbg !120
  %1779 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %513) #4, !dbg !120
  %1780 = extractvalue { i32, i32, i32, i32 } %1779, 0, !dbg !120
  %1781 = bitcast i32 %1780 to float, !dbg !120
  %1782 = extractvalue { i32, i32, i32, i32 } %1779, 1, !dbg !120
  %1783 = bitcast i32 %1782 to float, !dbg !120
  %1784 = extractvalue { i32, i32, i32, i32 } %1779, 2, !dbg !120
  %1785 = bitcast i32 %1784 to float, !dbg !120
  %1786 = extractvalue { i32, i32, i32, i32 } %1779, 3, !dbg !120
  %1787 = bitcast i32 %1786 to float, !dbg !120
  %1788 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %525) #4, !dbg !120
  %1789 = extractvalue { i32, i32, i32, i32 } %1788, 0, !dbg !120
  %1790 = bitcast i32 %1789 to float, !dbg !120
  %1791 = extractvalue { i32, i32, i32, i32 } %1788, 1, !dbg !120
  %1792 = bitcast i32 %1791 to float, !dbg !120
  %1793 = extractvalue { i32, i32, i32, i32 } %1788, 2, !dbg !120
  %1794 = bitcast i32 %1793 to float, !dbg !120
  %1795 = extractvalue { i32, i32, i32, i32 } %1788, 3, !dbg !120
  %1796 = bitcast i32 %1795 to float, !dbg !120
  %1797 = tail call float @llvm.fmuladd.f32(float %970, float %1763, float 0.000000e+00), !dbg !121
  %1798 = tail call float @llvm.fmuladd.f32(float %972, float %1765, float %1797), !dbg !121
  %1799 = tail call float @llvm.fmuladd.f32(float %974, float %1767, float %1798), !dbg !121
  %1800 = tail call float @llvm.fmuladd.f32(float %976, float %1769, float %1799), !dbg !121
  %1801 = tail call float @llvm.fmuladd.f32(float %978, float %1772, float %1800), !dbg !121
  %1802 = tail call float @llvm.fmuladd.f32(float %980, float %1774, float %1801), !dbg !121
  %1803 = tail call float @llvm.fmuladd.f32(float %982, float %1776, float %1802), !dbg !121
  %1804 = tail call float @llvm.fmuladd.f32(float %984, float %1778, float %1803), !dbg !121
  %1805 = tail call float @llvm.fmuladd.f32(float %986, float %1781, float %1804), !dbg !121
  %1806 = tail call float @llvm.fmuladd.f32(float %988, float %1783, float %1805), !dbg !121
  %1807 = tail call float @llvm.fmuladd.f32(float %990, float %1785, float %1806), !dbg !121
  %1808 = tail call float @llvm.fmuladd.f32(float %992, float %1787, float %1807), !dbg !121
  %1809 = tail call float @llvm.fmuladd.f32(float %994, float %1790, float %1808), !dbg !121
  %1810 = tail call float @llvm.fmuladd.f32(float %996, float %1792, float %1809), !dbg !121
  %1811 = tail call float @llvm.fmuladd.f32(float %998, float %1794, float %1810), !dbg !121
  %1812 = tail call float @llvm.fmuladd.f32(float %1000, float %1796, float %1811), !dbg !121
  %1813 = tail call float @llvm.fmuladd.f32(float %1002, float %1763, float 0.000000e+00), !dbg !121
  %1814 = tail call float @llvm.fmuladd.f32(float %1004, float %1765, float %1813), !dbg !121
  %1815 = tail call float @llvm.fmuladd.f32(float %1006, float %1767, float %1814), !dbg !121
  %1816 = tail call float @llvm.fmuladd.f32(float %1008, float %1769, float %1815), !dbg !121
  %1817 = tail call float @llvm.fmuladd.f32(float %1010, float %1772, float %1816), !dbg !121
  %1818 = tail call float @llvm.fmuladd.f32(float %1012, float %1774, float %1817), !dbg !121
  %1819 = tail call float @llvm.fmuladd.f32(float %1014, float %1776, float %1818), !dbg !121
  %1820 = tail call float @llvm.fmuladd.f32(float %1016, float %1778, float %1819), !dbg !121
  %1821 = tail call float @llvm.fmuladd.f32(float %1018, float %1781, float %1820), !dbg !121
  %1822 = tail call float @llvm.fmuladd.f32(float %1020, float %1783, float %1821), !dbg !121
  %1823 = tail call float @llvm.fmuladd.f32(float %1022, float %1785, float %1822), !dbg !121
  %1824 = tail call float @llvm.fmuladd.f32(float %1024, float %1787, float %1823), !dbg !121
  %1825 = tail call float @llvm.fmuladd.f32(float %1026, float %1790, float %1824), !dbg !121
  %1826 = tail call float @llvm.fmuladd.f32(float %1028, float %1792, float %1825), !dbg !121
  %1827 = tail call float @llvm.fmuladd.f32(float %1030, float %1794, float %1826), !dbg !121
  %1828 = tail call float @llvm.fmuladd.f32(float %1032, float %1796, float %1827), !dbg !121
  %1829 = fsub float 0.000000e+00, %1812, !dbg !122
  %1830 = fsub float 0.000000e+00, %1828, !dbg !122
  %1831 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8208), i32 %419, !dbg !103
  %1832 = load float, ptr addrspace(3) %1831, align 64, !dbg !103
  %1833 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 4, !dbg !103
  %1834 = load float, ptr addrspace(3) %1833, align 4, !dbg !103
  %1835 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 8, !dbg !103
  %1836 = load float, ptr addrspace(3) %1835, align 8, !dbg !103
  %1837 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 12, !dbg !103
  %1838 = load float, ptr addrspace(3) %1837, align 4, !dbg !103
  %1839 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 16, !dbg !103
  %1840 = load float, ptr addrspace(3) %1839, align 16, !dbg !103
  %1841 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 20, !dbg !103
  %1842 = load float, ptr addrspace(3) %1841, align 4, !dbg !103
  %1843 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 24, !dbg !103
  %1844 = load float, ptr addrspace(3) %1843, align 8, !dbg !103
  %1845 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 28, !dbg !103
  %1846 = load float, ptr addrspace(3) %1845, align 4, !dbg !103
  %1847 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 32, !dbg !103
  %1848 = load float, ptr addrspace(3) %1847, align 32, !dbg !103
  %1849 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 36, !dbg !103
  %1850 = load float, ptr addrspace(3) %1849, align 4, !dbg !103
  %1851 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 40, !dbg !103
  %1852 = load float, ptr addrspace(3) %1851, align 8, !dbg !103
  %1853 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 44, !dbg !103
  %1854 = load float, ptr addrspace(3) %1853, align 4, !dbg !103
  %1855 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 48, !dbg !103
  %1856 = load float, ptr addrspace(3) %1855, align 16, !dbg !103
  %1857 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 52, !dbg !103
  %1858 = load float, ptr addrspace(3) %1857, align 4, !dbg !103
  %1859 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 56, !dbg !103
  %1860 = load float, ptr addrspace(3) %1859, align 8, !dbg !103
  %1861 = getelementptr inbounds nuw i8, ptr addrspace(3) %1831, i32 60, !dbg !103
  %1862 = load float, ptr addrspace(3) %1861, align 4, !dbg !103
  %1863 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8208), i32 %452, !dbg !103
  %1864 = load float, ptr addrspace(3) %1863, align 64, !dbg !103
  %1865 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 4, !dbg !103
  %1866 = load float, ptr addrspace(3) %1865, align 4, !dbg !103
  %1867 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 8, !dbg !103
  %1868 = load float, ptr addrspace(3) %1867, align 8, !dbg !103
  %1869 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 12, !dbg !103
  %1870 = load float, ptr addrspace(3) %1869, align 4, !dbg !103
  %1871 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 16, !dbg !103
  %1872 = load float, ptr addrspace(3) %1871, align 16, !dbg !103
  %1873 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 20, !dbg !103
  %1874 = load float, ptr addrspace(3) %1873, align 4, !dbg !103
  %1875 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 24, !dbg !103
  %1876 = load float, ptr addrspace(3) %1875, align 8, !dbg !103
  %1877 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 28, !dbg !103
  %1878 = load float, ptr addrspace(3) %1877, align 4, !dbg !103
  %1879 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 32, !dbg !103
  %1880 = load float, ptr addrspace(3) %1879, align 32, !dbg !103
  %1881 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 36, !dbg !103
  %1882 = load float, ptr addrspace(3) %1881, align 4, !dbg !103
  %1883 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 40, !dbg !103
  %1884 = load float, ptr addrspace(3) %1883, align 8, !dbg !103
  %1885 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 44, !dbg !103
  %1886 = load float, ptr addrspace(3) %1885, align 4, !dbg !103
  %1887 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 48, !dbg !103
  %1888 = load float, ptr addrspace(3) %1887, align 16, !dbg !103
  %1889 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 52, !dbg !103
  %1890 = load float, ptr addrspace(3) %1889, align 4, !dbg !103
  %1891 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 56, !dbg !103
  %1892 = load float, ptr addrspace(3) %1891, align 8, !dbg !103
  %1893 = getelementptr inbounds nuw i8, ptr addrspace(3) %1863, i32 60, !dbg !103
  %1894 = load float, ptr addrspace(3) %1893, align 4, !dbg !103
  %1895 = tail call float @llvm.fmuladd.f32(float %1832, float %637, float 0.000000e+00), !dbg !123
  %1896 = tail call float @llvm.fmuladd.f32(float %1834, float %639, float %1895), !dbg !123
  %1897 = tail call float @llvm.fmuladd.f32(float %1836, float %641, float %1896), !dbg !123
  %1898 = tail call float @llvm.fmuladd.f32(float %1838, float %643, float %1897), !dbg !123
  %1899 = tail call float @llvm.fmuladd.f32(float %1840, float %648, float %1898), !dbg !123
  %1900 = tail call float @llvm.fmuladd.f32(float %1842, float %650, float %1899), !dbg !123
  %1901 = tail call float @llvm.fmuladd.f32(float %1844, float %652, float %1900), !dbg !123
  %1902 = tail call float @llvm.fmuladd.f32(float %1846, float %654, float %1901), !dbg !123
  %1903 = tail call float @llvm.fmuladd.f32(float %1848, float %659, float %1902), !dbg !123
  %1904 = tail call float @llvm.fmuladd.f32(float %1850, float %661, float %1903), !dbg !123
  %1905 = tail call float @llvm.fmuladd.f32(float %1852, float %663, float %1904), !dbg !123
  %1906 = tail call float @llvm.fmuladd.f32(float %1854, float %665, float %1905), !dbg !123
  %1907 = tail call float @llvm.fmuladd.f32(float %1856, float %670, float %1906), !dbg !123
  %1908 = tail call float @llvm.fmuladd.f32(float %1858, float %672, float %1907), !dbg !123
  %1909 = tail call float @llvm.fmuladd.f32(float %1860, float %674, float %1908), !dbg !123
  %1910 = tail call float @llvm.fmuladd.f32(float %1862, float %676, float %1909), !dbg !123
  %1911 = tail call float @llvm.fmuladd.f32(float %1864, float %637, float 0.000000e+00), !dbg !123
  %1912 = tail call float @llvm.fmuladd.f32(float %1866, float %639, float %1911), !dbg !123
  %1913 = tail call float @llvm.fmuladd.f32(float %1868, float %641, float %1912), !dbg !123
  %1914 = tail call float @llvm.fmuladd.f32(float %1870, float %643, float %1913), !dbg !123
  %1915 = tail call float @llvm.fmuladd.f32(float %1872, float %648, float %1914), !dbg !123
  %1916 = tail call float @llvm.fmuladd.f32(float %1874, float %650, float %1915), !dbg !123
  %1917 = tail call float @llvm.fmuladd.f32(float %1876, float %652, float %1916), !dbg !123
  %1918 = tail call float @llvm.fmuladd.f32(float %1878, float %654, float %1917), !dbg !123
  %1919 = tail call float @llvm.fmuladd.f32(float %1880, float %659, float %1918), !dbg !123
  %1920 = tail call float @llvm.fmuladd.f32(float %1882, float %661, float %1919), !dbg !123
  %1921 = tail call float @llvm.fmuladd.f32(float %1884, float %663, float %1920), !dbg !123
  %1922 = tail call float @llvm.fmuladd.f32(float %1886, float %665, float %1921), !dbg !123
  %1923 = tail call float @llvm.fmuladd.f32(float %1888, float %670, float %1922), !dbg !123
  %1924 = tail call float @llvm.fmuladd.f32(float %1890, float %672, float %1923), !dbg !123
  %1925 = tail call float @llvm.fmuladd.f32(float %1892, float %674, float %1924), !dbg !123
  %1926 = tail call float @llvm.fmuladd.f32(float %1894, float %676, float %1925), !dbg !123
  %1927 = tail call float @llvm.fmuladd.f32(float %1524, float %1383, float %1910), !dbg !124
  %1928 = tail call float @llvm.fmuladd.f32(float %1526, float %1385, float %1927), !dbg !124
  %1929 = tail call float @llvm.fmuladd.f32(float %1528, float %1387, float %1928), !dbg !124
  %1930 = tail call float @llvm.fmuladd.f32(float %1530, float %1389, float %1929), !dbg !124
  %1931 = tail call float @llvm.fmuladd.f32(float %1532, float %1392, float %1930), !dbg !124
  %1932 = tail call float @llvm.fmuladd.f32(float %1534, float %1394, float %1931), !dbg !124
  %1933 = tail call float @llvm.fmuladd.f32(float %1536, float %1396, float %1932), !dbg !124
  %1934 = tail call float @llvm.fmuladd.f32(float %1538, float %1398, float %1933), !dbg !124
  %1935 = tail call float @llvm.fmuladd.f32(float %1540, float %1401, float %1934), !dbg !124
  %1936 = tail call float @llvm.fmuladd.f32(float %1542, float %1403, float %1935), !dbg !124
  %1937 = tail call float @llvm.fmuladd.f32(float %1544, float %1405, float %1936), !dbg !124
  %1938 = tail call float @llvm.fmuladd.f32(float %1546, float %1407, float %1937), !dbg !124
  %1939 = tail call float @llvm.fmuladd.f32(float %1548, float %1410, float %1938), !dbg !124
  %1940 = tail call float @llvm.fmuladd.f32(float %1550, float %1412, float %1939), !dbg !124
  %1941 = tail call float @llvm.fmuladd.f32(float %1552, float %1414, float %1940), !dbg !124
  %1942 = tail call float @llvm.fmuladd.f32(float %1554, float %1416, float %1941), !dbg !124
  %1943 = tail call float @llvm.fmuladd.f32(float %1556, float %1383, float %1926), !dbg !124
  %1944 = tail call float @llvm.fmuladd.f32(float %1558, float %1385, float %1943), !dbg !124
  %1945 = tail call float @llvm.fmuladd.f32(float %1560, float %1387, float %1944), !dbg !124
  %1946 = tail call float @llvm.fmuladd.f32(float %1562, float %1389, float %1945), !dbg !124
  %1947 = tail call float @llvm.fmuladd.f32(float %1564, float %1392, float %1946), !dbg !124
  %1948 = tail call float @llvm.fmuladd.f32(float %1566, float %1394, float %1947), !dbg !124
  %1949 = tail call float @llvm.fmuladd.f32(float %1568, float %1396, float %1948), !dbg !124
  %1950 = tail call float @llvm.fmuladd.f32(float %1570, float %1398, float %1949), !dbg !124
  %1951 = tail call float @llvm.fmuladd.f32(float %1572, float %1401, float %1950), !dbg !124
  %1952 = tail call float @llvm.fmuladd.f32(float %1574, float %1403, float %1951), !dbg !124
  %1953 = tail call float @llvm.fmuladd.f32(float %1576, float %1405, float %1952), !dbg !124
  %1954 = tail call float @llvm.fmuladd.f32(float %1578, float %1407, float %1953), !dbg !124
  %1955 = tail call float @llvm.fmuladd.f32(float %1580, float %1410, float %1954), !dbg !124
  %1956 = tail call float @llvm.fmuladd.f32(float %1582, float %1412, float %1955), !dbg !124
  %1957 = tail call float @llvm.fmuladd.f32(float %1584, float %1414, float %1956), !dbg !124
  %1958 = tail call float @llvm.fmuladd.f32(float %1586, float %1416, float %1957), !dbg !124
  %1959 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #4, !dbg !118
  %1960 = extractvalue { i32, i32, i32, i32 } %1959, 0, !dbg !118
  %1961 = bitcast i32 %1960 to float, !dbg !118
  %1962 = extractvalue { i32, i32, i32, i32 } %1959, 1, !dbg !118
  %1963 = bitcast i32 %1962 to float, !dbg !118
  %1964 = extractvalue { i32, i32, i32, i32 } %1959, 2, !dbg !118
  %1965 = bitcast i32 %1964 to float, !dbg !118
  %1966 = extractvalue { i32, i32, i32, i32 } %1959, 3, !dbg !118
  %1967 = bitcast i32 %1966 to float, !dbg !118
  %1968 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %645) #4, !dbg !118
  %1969 = extractvalue { i32, i32, i32, i32 } %1968, 0, !dbg !118
  %1970 = bitcast i32 %1969 to float, !dbg !118
  %1971 = extractvalue { i32, i32, i32, i32 } %1968, 1, !dbg !118
  %1972 = bitcast i32 %1971 to float, !dbg !118
  %1973 = extractvalue { i32, i32, i32, i32 } %1968, 2, !dbg !118
  %1974 = bitcast i32 %1973 to float, !dbg !118
  %1975 = extractvalue { i32, i32, i32, i32 } %1968, 3, !dbg !118
  %1976 = bitcast i32 %1975 to float, !dbg !118
  %1977 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #4, !dbg !118
  %1978 = extractvalue { i32, i32, i32, i32 } %1977, 0, !dbg !118
  %1979 = bitcast i32 %1978 to float, !dbg !118
  %1980 = extractvalue { i32, i32, i32, i32 } %1977, 1, !dbg !118
  %1981 = bitcast i32 %1980 to float, !dbg !118
  %1982 = extractvalue { i32, i32, i32, i32 } %1977, 2, !dbg !118
  %1983 = bitcast i32 %1982 to float, !dbg !118
  %1984 = extractvalue { i32, i32, i32, i32 } %1977, 3, !dbg !118
  %1985 = bitcast i32 %1984 to float, !dbg !118
  %1986 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %667) #4, !dbg !118
  %1987 = extractvalue { i32, i32, i32, i32 } %1986, 0, !dbg !118
  %1988 = bitcast i32 %1987 to float, !dbg !118
  %1989 = extractvalue { i32, i32, i32, i32 } %1986, 1, !dbg !118
  %1990 = bitcast i32 %1989 to float, !dbg !118
  %1991 = extractvalue { i32, i32, i32, i32 } %1986, 2, !dbg !118
  %1992 = bitcast i32 %1991 to float, !dbg !118
  %1993 = extractvalue { i32, i32, i32, i32 } %1986, 3, !dbg !118
  %1994 = bitcast i32 %1993 to float, !dbg !118
  %1995 = tail call float @llvm.fmuladd.f32(float %1620, float %1961, float %1942), !dbg !125
  %1996 = tail call float @llvm.fmuladd.f32(float %1622, float %1963, float %1995), !dbg !125
  %1997 = tail call float @llvm.fmuladd.f32(float %1624, float %1965, float %1996), !dbg !125
  %1998 = tail call float @llvm.fmuladd.f32(float %1626, float %1967, float %1997), !dbg !125
  %1999 = tail call float @llvm.fmuladd.f32(float %1628, float %1970, float %1998), !dbg !125
  %2000 = tail call float @llvm.fmuladd.f32(float %1630, float %1972, float %1999), !dbg !125
  %2001 = tail call float @llvm.fmuladd.f32(float %1632, float %1974, float %2000), !dbg !125
  %2002 = tail call float @llvm.fmuladd.f32(float %1634, float %1976, float %2001), !dbg !125
  %2003 = tail call float @llvm.fmuladd.f32(float %1636, float %1979, float %2002), !dbg !125
  %2004 = tail call float @llvm.fmuladd.f32(float %1638, float %1981, float %2003), !dbg !125
  %2005 = tail call float @llvm.fmuladd.f32(float %1640, float %1983, float %2004), !dbg !125
  %2006 = tail call float @llvm.fmuladd.f32(float %1642, float %1985, float %2005), !dbg !125
  %2007 = tail call float @llvm.fmuladd.f32(float %1644, float %1988, float %2006), !dbg !125
  %2008 = tail call float @llvm.fmuladd.f32(float %1646, float %1990, float %2007), !dbg !125
  %2009 = tail call float @llvm.fmuladd.f32(float %1648, float %1992, float %2008), !dbg !125
  %2010 = tail call float @llvm.fmuladd.f32(float %1650, float %1994, float %2009), !dbg !125
  %2011 = tail call float @llvm.fmuladd.f32(float %1652, float %1961, float %1958), !dbg !125
  %2012 = tail call float @llvm.fmuladd.f32(float %1654, float %1963, float %2011), !dbg !125
  %2013 = tail call float @llvm.fmuladd.f32(float %1656, float %1965, float %2012), !dbg !125
  %2014 = tail call float @llvm.fmuladd.f32(float %1658, float %1967, float %2013), !dbg !125
  %2015 = tail call float @llvm.fmuladd.f32(float %1660, float %1970, float %2014), !dbg !125
  %2016 = tail call float @llvm.fmuladd.f32(float %1662, float %1972, float %2015), !dbg !125
  %2017 = tail call float @llvm.fmuladd.f32(float %1664, float %1974, float %2016), !dbg !125
  %2018 = tail call float @llvm.fmuladd.f32(float %1666, float %1976, float %2017), !dbg !125
  %2019 = tail call float @llvm.fmuladd.f32(float %1668, float %1979, float %2018), !dbg !125
  %2020 = tail call float @llvm.fmuladd.f32(float %1670, float %1981, float %2019), !dbg !125
  %2021 = tail call float @llvm.fmuladd.f32(float %1672, float %1983, float %2020), !dbg !125
  %2022 = tail call float @llvm.fmuladd.f32(float %1674, float %1985, float %2021), !dbg !125
  %2023 = tail call float @llvm.fmuladd.f32(float %1676, float %1988, float %2022), !dbg !125
  %2024 = tail call float @llvm.fmuladd.f32(float %1678, float %1990, float %2023), !dbg !125
  %2025 = tail call float @llvm.fmuladd.f32(float %1680, float %1992, float %2024), !dbg !125
  %2026 = tail call float @llvm.fmuladd.f32(float %1682, float %1994, float %2025), !dbg !125
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !125
  %2027 = bitcast float %2010 to i32, !dbg !125
  %2028 = bitcast float %2026 to i32, !dbg !125
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x2.shared.b16 [$0], {$1, $2};", "r,r,r"(i32 %348, i32 %2027, i32 %2028) #4, !dbg !125
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !125
  %2029 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %634) #4, !dbg !125
  %2030 = extractvalue { i32, i32, i32, i32 } %2029, 0, !dbg !125
  %2031 = bitcast i32 %2030 to float, !dbg !125
  %2032 = extractvalue { i32, i32, i32, i32 } %2029, 1, !dbg !125
  %2033 = bitcast i32 %2032 to float, !dbg !125
  %2034 = extractvalue { i32, i32, i32, i32 } %2029, 2, !dbg !125
  %2035 = bitcast i32 %2034 to float, !dbg !125
  %2036 = extractvalue { i32, i32, i32, i32 } %2029, 3, !dbg !125
  %2037 = bitcast i32 %2036 to float, !dbg !125
  %2038 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %645) #4, !dbg !125
  %2039 = extractvalue { i32, i32, i32, i32 } %2038, 0, !dbg !125
  %2040 = bitcast i32 %2039 to float, !dbg !125
  %2041 = extractvalue { i32, i32, i32, i32 } %2038, 1, !dbg !125
  %2042 = bitcast i32 %2041 to float, !dbg !125
  %2043 = extractvalue { i32, i32, i32, i32 } %2038, 2, !dbg !125
  %2044 = bitcast i32 %2043 to float, !dbg !125
  %2045 = extractvalue { i32, i32, i32, i32 } %2038, 3, !dbg !125
  %2046 = bitcast i32 %2045 to float, !dbg !125
  %2047 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #4, !dbg !125
  %2048 = extractvalue { i32, i32, i32, i32 } %2047, 0, !dbg !125
  %2049 = bitcast i32 %2048 to float, !dbg !125
  %2050 = extractvalue { i32, i32, i32, i32 } %2047, 1, !dbg !125
  %2051 = bitcast i32 %2050 to float, !dbg !125
  %2052 = extractvalue { i32, i32, i32, i32 } %2047, 2, !dbg !125
  %2053 = bitcast i32 %2052 to float, !dbg !125
  %2054 = extractvalue { i32, i32, i32, i32 } %2047, 3, !dbg !125
  %2055 = bitcast i32 %2054 to float, !dbg !125
  %2056 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %667) #4, !dbg !125
  %2057 = extractvalue { i32, i32, i32, i32 } %2056, 0, !dbg !125
  %2058 = bitcast i32 %2057 to float, !dbg !125
  %2059 = extractvalue { i32, i32, i32, i32 } %2056, 1, !dbg !125
  %2060 = bitcast i32 %2059 to float, !dbg !125
  %2061 = extractvalue { i32, i32, i32, i32 } %2056, 2, !dbg !125
  %2062 = bitcast i32 %2061 to float, !dbg !125
  %2063 = extractvalue { i32, i32, i32, i32 } %2056, 3, !dbg !125
  %2064 = bitcast i32 %2063 to float, !dbg !125
  %2065 = tail call float @llvm.fmuladd.f32(float %970, float %2031, float 0.000000e+00), !dbg !126
  %2066 = tail call float @llvm.fmuladd.f32(float %972, float %2033, float %2065), !dbg !126
  %2067 = tail call float @llvm.fmuladd.f32(float %974, float %2035, float %2066), !dbg !126
  %2068 = tail call float @llvm.fmuladd.f32(float %976, float %2037, float %2067), !dbg !126
  %2069 = tail call float @llvm.fmuladd.f32(float %978, float %2040, float %2068), !dbg !126
  %2070 = tail call float @llvm.fmuladd.f32(float %980, float %2042, float %2069), !dbg !126
  %2071 = tail call float @llvm.fmuladd.f32(float %982, float %2044, float %2070), !dbg !126
  %2072 = tail call float @llvm.fmuladd.f32(float %984, float %2046, float %2071), !dbg !126
  %2073 = tail call float @llvm.fmuladd.f32(float %986, float %2049, float %2072), !dbg !126
  %2074 = tail call float @llvm.fmuladd.f32(float %988, float %2051, float %2073), !dbg !126
  %2075 = tail call float @llvm.fmuladd.f32(float %990, float %2053, float %2074), !dbg !126
  %2076 = tail call float @llvm.fmuladd.f32(float %992, float %2055, float %2075), !dbg !126
  %2077 = tail call float @llvm.fmuladd.f32(float %994, float %2058, float %2076), !dbg !126
  %2078 = tail call float @llvm.fmuladd.f32(float %996, float %2060, float %2077), !dbg !126
  %2079 = tail call float @llvm.fmuladd.f32(float %998, float %2062, float %2078), !dbg !126
  %2080 = tail call float @llvm.fmuladd.f32(float %1000, float %2064, float %2079), !dbg !126
  %2081 = tail call float @llvm.fmuladd.f32(float %1002, float %2031, float 0.000000e+00), !dbg !126
  %2082 = tail call float @llvm.fmuladd.f32(float %1004, float %2033, float %2081), !dbg !126
  %2083 = tail call float @llvm.fmuladd.f32(float %1006, float %2035, float %2082), !dbg !126
  %2084 = tail call float @llvm.fmuladd.f32(float %1008, float %2037, float %2083), !dbg !126
  %2085 = tail call float @llvm.fmuladd.f32(float %1010, float %2040, float %2084), !dbg !126
  %2086 = tail call float @llvm.fmuladd.f32(float %1012, float %2042, float %2085), !dbg !126
  %2087 = tail call float @llvm.fmuladd.f32(float %1014, float %2044, float %2086), !dbg !126
  %2088 = tail call float @llvm.fmuladd.f32(float %1016, float %2046, float %2087), !dbg !126
  %2089 = tail call float @llvm.fmuladd.f32(float %1018, float %2049, float %2088), !dbg !126
  %2090 = tail call float @llvm.fmuladd.f32(float %1020, float %2051, float %2089), !dbg !126
  %2091 = tail call float @llvm.fmuladd.f32(float %1022, float %2053, float %2090), !dbg !126
  %2092 = tail call float @llvm.fmuladd.f32(float %1024, float %2055, float %2091), !dbg !126
  %2093 = tail call float @llvm.fmuladd.f32(float %1026, float %2058, float %2092), !dbg !126
  %2094 = tail call float @llvm.fmuladd.f32(float %1028, float %2060, float %2093), !dbg !126
  %2095 = tail call float @llvm.fmuladd.f32(float %1030, float %2062, float %2094), !dbg !126
  %2096 = tail call float @llvm.fmuladd.f32(float %1032, float %2064, float %2095), !dbg !126
  %2097 = fsub float 0.000000e+00, %2080, !dbg !127
  %2098 = fsub float 0.000000e+00, %2096, !dbg !127
  %2099 = fptrunc float %341 to bfloat, !dbg !128
  %2100 = fptrunc float %342 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %2101 = and i32 %7, 63, !dbg !129
  %2102 = xor i32 %54, %2101, !dbg !129
  %2103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %2102, !dbg !129
  %2104 = insertelement <1 x bfloat> poison, bfloat %2099, i64 0, !dbg !129
  store <1 x bfloat> %2104, ptr addrspace(3) %2103, align 2, !dbg !129
  %2105 = or disjoint i32 %2101, 128, !dbg !129
  %2106 = xor i32 %54, %2105, !dbg !129
  %2107 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %2106, !dbg !129
  %2108 = insertelement <1 x bfloat> poison, bfloat %2100, i64 0, !dbg !129
  store <1 x bfloat> %2108, ptr addrspace(3) %2107, align 2, !dbg !129
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !129
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %2109 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !129
  %2110 = extractvalue { i32, i1 } %2109, 1, !dbg !129
  %2111 = and i1 %38, %2110, !dbg !129
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2111, ptr %336, i32 0, i32 %43, ptr addrspace(3) @global_smem) #4, !dbg !129
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !129
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !129
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %2112 = fptrunc float %349 to bfloat, !dbg !130
  %2113 = fptrunc float %350 to bfloat, !dbg !130
  %2114 = insertelement <1 x bfloat> poison, bfloat %2112, i64 0, !dbg !131
  store <1 x bfloat> %2114, ptr addrspace(3) %2103, align 2, !dbg !131
  %2115 = insertelement <1 x bfloat> poison, bfloat %2113, i64 0, !dbg !131
  store <1 x bfloat> %2115, ptr addrspace(3) %2107, align 2, !dbg !131
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !131
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !131
  %2116 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !131
  %2117 = extractvalue { i32, i1 } %2116, 1, !dbg !131
  %2118 = and i1 %38, %2117, !dbg !131
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2118, ptr %336, i32 16, i32 %63, ptr addrspace(3) @global_smem) #4, !dbg !131
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !131
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !131
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !131
  %2119 = fptrunc float %355 to bfloat, !dbg !132
  %2120 = fptrunc float %356 to bfloat, !dbg !132
  %2121 = insertelement <1 x bfloat> poison, bfloat %2119, i64 0, !dbg !133
  store <1 x bfloat> %2121, ptr addrspace(3) %2103, align 2, !dbg !133
  %2122 = insertelement <1 x bfloat> poison, bfloat %2120, i64 0, !dbg !133
  store <1 x bfloat> %2122, ptr addrspace(3) %2107, align 2, !dbg !133
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !133
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !133
  %2123 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !133
  %2124 = extractvalue { i32, i1 } %2123, 1, !dbg !133
  %2125 = and i1 %38, %2124, !dbg !133
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2125, ptr %336, i32 32, i32 %72, ptr addrspace(3) @global_smem) #4, !dbg !133
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !133
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !133
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !133
  %2126 = fptrunc float %361 to bfloat, !dbg !134
  %2127 = fptrunc float %362 to bfloat, !dbg !134
  %2128 = insertelement <1 x bfloat> poison, bfloat %2126, i64 0, !dbg !135
  store <1 x bfloat> %2128, ptr addrspace(3) %2103, align 2, !dbg !135
  %2129 = insertelement <1 x bfloat> poison, bfloat %2127, i64 0, !dbg !135
  store <1 x bfloat> %2129, ptr addrspace(3) %2107, align 2, !dbg !135
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !135
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !135
  %2130 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !135
  %2131 = extractvalue { i32, i1 } %2130, 1, !dbg !135
  %2132 = and i1 %38, %2131, !dbg !135
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2132, ptr %336, i32 48, i32 %81, ptr addrspace(3) @global_smem) #4, !dbg !135
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !135
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !135
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !135
  %2133 = fptrunc float %709 to bfloat, !dbg !136
  %2134 = fptrunc float %710 to bfloat, !dbg !136
  %2135 = insertelement <1 x bfloat> poison, bfloat %2133, i64 0, !dbg !137
  store <1 x bfloat> %2135, ptr addrspace(3) %2103, align 2, !dbg !137
  %2136 = insertelement <1 x bfloat> poison, bfloat %2134, i64 0, !dbg !137
  store <1 x bfloat> %2136, ptr addrspace(3) %2107, align 2, !dbg !137
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !137
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !137
  %2137 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !137
  %2138 = extractvalue { i32, i1 } %2137, 1, !dbg !137
  %2139 = and i1 %38, %2138, !dbg !137
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2139, ptr %336, i32 0, i32 %63, ptr addrspace(3) @global_smem) #4, !dbg !137
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !137
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !137
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !137
  %2140 = fptrunc float %1519 to bfloat, !dbg !138
  %2141 = fptrunc float %1520 to bfloat, !dbg !138
  %2142 = insertelement <1 x bfloat> poison, bfloat %2140, i64 0, !dbg !139
  store <1 x bfloat> %2142, ptr addrspace(3) %2103, align 2, !dbg !139
  %2143 = insertelement <1 x bfloat> poison, bfloat %2141, i64 0, !dbg !139
  store <1 x bfloat> %2143, ptr addrspace(3) %2107, align 2, !dbg !139
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !139
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !139
  %2144 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !139
  %2145 = extractvalue { i32, i1 } %2144, 1, !dbg !139
  %2146 = and i1 %38, %2145, !dbg !139
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2146, ptr %336, i32 0, i32 %72, ptr addrspace(3) @global_smem) #4, !dbg !139
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !139
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !139
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !139
  %2147 = fptrunc float %963 to bfloat, !dbg !140
  %2148 = fptrunc float %964 to bfloat, !dbg !140
  %2149 = insertelement <1 x bfloat> poison, bfloat %2147, i64 0, !dbg !141
  store <1 x bfloat> %2149, ptr addrspace(3) %2103, align 2, !dbg !141
  %2150 = insertelement <1 x bfloat> poison, bfloat %2148, i64 0, !dbg !141
  store <1 x bfloat> %2150, ptr addrspace(3) %2107, align 2, !dbg !141
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !141
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !141
  %2151 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !141
  %2152 = extractvalue { i32, i1 } %2151, 1, !dbg !141
  %2153 = and i1 %38, %2152, !dbg !141
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2153, ptr %336, i32 16, i32 %72, ptr addrspace(3) @global_smem) #4, !dbg !141
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !141
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !141
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !141
  %2154 = fptrunc float %2097 to bfloat, !dbg !142
  %2155 = fptrunc float %2098 to bfloat, !dbg !142
  %2156 = insertelement <1 x bfloat> poison, bfloat %2154, i64 0, !dbg !143
  store <1 x bfloat> %2156, ptr addrspace(3) %2103, align 2, !dbg !143
  %2157 = insertelement <1 x bfloat> poison, bfloat %2155, i64 0, !dbg !143
  store <1 x bfloat> %2157, ptr addrspace(3) %2107, align 2, !dbg !143
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !143
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !143
  %2158 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !143
  %2159 = extractvalue { i32, i1 } %2158, 1, !dbg !143
  %2160 = and i1 %38, %2159, !dbg !143
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2160, ptr %336, i32 0, i32 %81, ptr addrspace(3) @global_smem) #4, !dbg !143
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !143
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !143
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !143
  %2161 = fptrunc float %1829 to bfloat, !dbg !144
  %2162 = fptrunc float %1830 to bfloat, !dbg !144
  %2163 = insertelement <1 x bfloat> poison, bfloat %2161, i64 0, !dbg !145
  store <1 x bfloat> %2163, ptr addrspace(3) %2103, align 2, !dbg !145
  %2164 = insertelement <1 x bfloat> poison, bfloat %2162, i64 0, !dbg !145
  store <1 x bfloat> %2164, ptr addrspace(3) %2107, align 2, !dbg !145
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !145
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !145
  %2165 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !145
  %2166 = extractvalue { i32, i1 } %2165, 1, !dbg !145
  %2167 = and i1 %38, %2166, !dbg !145
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2167, ptr %336, i32 16, i32 %81, ptr addrspace(3) @global_smem) #4, !dbg !145
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !145
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !145
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !145
  %2168 = fptrunc float %1219 to bfloat, !dbg !146
  %2169 = fptrunc float %1220 to bfloat, !dbg !146
  %2170 = insertelement <1 x bfloat> poison, bfloat %2168, i64 0, !dbg !147
  store <1 x bfloat> %2170, ptr addrspace(3) %2103, align 2, !dbg !147
  %2171 = insertelement <1 x bfloat> poison, bfloat %2169, i64 0, !dbg !147
  store <1 x bfloat> %2171, ptr addrspace(3) %2107, align 2, !dbg !147
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !147
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !147
  %2172 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !147
  %2173 = extractvalue { i32, i1 } %2172, 1, !dbg !147
  %2174 = and i1 %38, %2173, !dbg !147
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2174, ptr %336, i32 32, i32 %81, ptr addrspace(3) @global_smem) #4, !dbg !147
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !147
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !147
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, -2147483648) i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, 65536) i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #4

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #6

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "solve_tril.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/utils")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "merge_16x16_to_64x64_inverse_kernel", linkageName: "merge_16x16_to_64x64_inverse_kernel", scope: !1, file: !1, line: 183, type: !6, scopeLine: 183, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 195, column: 30, scope: !5)
!9 = !DILocation(line: 195, column: 48, scope: !5)
!10 = !DILocation(line: 204, column: 23, scope: !5)
!11 = !DILocation(line: 205, column: 25, scope: !5)
!12 = !DILocation(line: 202, column: 25, scope: !5)
!13 = !DILocation(line: 207, column: 27, scope: !5)
!14 = !DILocation(line: 207, column: 9, scope: !5)
!15 = !DILocation(line: 208, column: 10, scope: !5)
!16 = !DILocation(line: 220, column: 61, scope: !5)
!17 = !DILocation(line: 221, column: 64, scope: !5)
!18 = !DILocation(line: 222, column: 35, scope: !5)
!19 = !DILocation(line: 222, column: 28, scope: !5)
!20 = !DILocation(line: 223, column: 40, scope: !5)
!21 = !DILocation(line: 223, column: 28, scope: !5)
!22 = !DILocation(line: 224, column: 40, scope: !5)
!23 = !DILocation(line: 224, column: 28, scope: !5)
!24 = !DILocation(line: 225, column: 40, scope: !5)
!25 = !DILocation(line: 225, column: 28, scope: !5)
!26 = !DILocation(line: 228, column: 15, scope: !5)
!27 = !DILocation(line: 228, column: 38, scope: !5)
!28 = !DILocation(line: 229, column: 15, scope: !5)
!29 = !DILocation(line: 229, column: 38, scope: !5)
!30 = !DILocation(line: 230, column: 15, scope: !5)
!31 = !DILocation(line: 230, column: 38, scope: !5)
!32 = !DILocation(line: 231, column: 15, scope: !5)
!33 = !DILocation(line: 231, column: 38, scope: !5)
!34 = !DILocation(line: 233, column: 34, scope: !5)
!35 = !DILocation(line: 233, column: 22, scope: !5)
!36 = !DILocation(line: 234, column: 49, scope: !5)
!37 = !DILocation(line: 234, column: 30, scope: !5)
!38 = !DILocation(line: 234, column: 54, scope: !5)
!39 = !DILocation(line: 234, column: 26, scope: !5)
!40 = !DILocation(line: 234, column: 18, scope: !5)
!41 = !DILocation(line: 235, column: 43, scope: !5)
!42 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !5, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!45 = !DILocation(line: 235, column: 52, scope: !5)
!46 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 235, column: 18, scope: !5)
!48 = !DILocation(line: 236, column: 35, scope: !5)
!49 = !DILocation(line: 236, column: 56, scope: !5)
!50 = !DILocation(line: 237, column: 27, scope: !5)
!51 = !DILocation(line: 238, column: 49, scope: !5)
!52 = !DILocation(line: 238, column: 30, scope: !5)
!53 = !DILocation(line: 238, column: 54, scope: !5)
!54 = !DILocation(line: 238, column: 60, scope: !5)
!55 = !DILocation(line: 238, column: 26, scope: !5)
!56 = !DILocation(line: 238, column: 18, scope: !5)
!57 = !DILocation(line: 239, column: 43, scope: !5)
!58 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !59)
!59 = !DILocation(line: 239, column: 52, scope: !5)
!60 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !59)
!61 = !DILocation(line: 239, column: 18, scope: !5)
!62 = !DILocation(line: 240, column: 39, scope: !5)
!63 = !DILocation(line: 240, column: 35, scope: !5)
!64 = !DILocation(line: 240, column: 61, scope: !5)
!65 = !DILocation(line: 241, column: 27, scope: !5)
!66 = !DILocation(line: 242, column: 49, scope: !5)
!67 = !DILocation(line: 242, column: 30, scope: !5)
!68 = !DILocation(line: 242, column: 54, scope: !5)
!69 = !DILocation(line: 242, column: 60, scope: !5)
!70 = !DILocation(line: 242, column: 26, scope: !5)
!71 = !DILocation(line: 242, column: 18, scope: !5)
!72 = !DILocation(line: 243, column: 43, scope: !5)
!73 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !74)
!74 = !DILocation(line: 243, column: 52, scope: !5)
!75 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !74)
!76 = !DILocation(line: 243, column: 18, scope: !5)
!77 = !DILocation(line: 244, column: 39, scope: !5)
!78 = !DILocation(line: 244, column: 35, scope: !5)
!79 = !DILocation(line: 244, column: 61, scope: !5)
!80 = !DILocation(line: 245, column: 27, scope: !5)
!81 = !DILocation(line: 246, column: 49, scope: !5)
!82 = !DILocation(line: 246, column: 30, scope: !5)
!83 = !DILocation(line: 246, column: 54, scope: !5)
!84 = !DILocation(line: 246, column: 60, scope: !5)
!85 = !DILocation(line: 246, column: 26, scope: !5)
!86 = !DILocation(line: 246, column: 18, scope: !5)
!87 = !DILocation(line: 247, column: 43, scope: !5)
!88 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !89)
!89 = !DILocation(line: 247, column: 52, scope: !5)
!90 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !89)
!91 = !DILocation(line: 247, column: 18, scope: !5)
!92 = !DILocation(line: 248, column: 39, scope: !5)
!93 = !DILocation(line: 248, column: 35, scope: !5)
!94 = !DILocation(line: 248, column: 61, scope: !5)
!95 = !DILocation(line: 206, column: 26, scope: !5)
!96 = !DILocation(line: 249, column: 15, scope: !5)
!97 = !DILocation(line: 250, column: 15, scope: !5)
!98 = !DILocation(line: 251, column: 15, scope: !5)
!99 = !DILocation(line: 252, column: 15, scope: !5)
!100 = !DILocation(line: 268, column: 27, scope: !5)
!101 = !DILocation(line: 269, column: 27, scope: !5)
!102 = !DILocation(line: 270, column: 27, scope: !5)
!103 = !DILocation(line: 271, column: 27, scope: !5)
!104 = !DILocation(line: 272, column: 27, scope: !5)
!105 = !DILocation(line: 273, column: 27, scope: !5)
!106 = !DILocation(line: 275, column: 38, scope: !5)
!107 = !DILocation(line: 275, column: 78, scope: !5)
!108 = !DILocation(line: 275, column: 15, scope: !5)
!109 = !DILocation(line: 276, column: 38, scope: !5)
!110 = !DILocation(line: 276, column: 78, scope: !5)
!111 = !DILocation(line: 276, column: 15, scope: !5)
!112 = !DILocation(line: 277, column: 38, scope: !5)
!113 = !DILocation(line: 277, column: 78, scope: !5)
!114 = !DILocation(line: 277, column: 15, scope: !5)
!115 = !DILocation(line: 281, column: 23, scope: !5)
!116 = !DILocation(line: 282, column: 23, scope: !5)
!117 = !DILocation(line: 281, column: 8, scope: !5)
!118 = !DILocation(line: 279, column: 15, scope: !5)
!119 = !DILocation(line: 287, column: 23, scope: !5)
!120 = !DILocation(line: 288, column: 23, scope: !5)
!121 = !DILocation(line: 287, column: 8, scope: !5)
!122 = !DILocation(line: 285, column: 15, scope: !5)
!123 = !DILocation(line: 293, column: 23, scope: !5)
!124 = !DILocation(line: 294, column: 23, scope: !5)
!125 = !DILocation(line: 295, column: 23, scope: !5)
!126 = !DILocation(line: 293, column: 8, scope: !5)
!127 = !DILocation(line: 291, column: 15, scope: !5)
!128 = !DILocation(line: 321, column: 51, scope: !5)
!129 = !DILocation(line: 321, column: 40, scope: !5)
!130 = !DILocation(line: 322, column: 53, scope: !5)
!131 = !DILocation(line: 322, column: 42, scope: !5)
!132 = !DILocation(line: 323, column: 53, scope: !5)
!133 = !DILocation(line: 323, column: 42, scope: !5)
!134 = !DILocation(line: 324, column: 53, scope: !5)
!135 = !DILocation(line: 324, column: 42, scope: !5)
!136 = !DILocation(line: 325, column: 52, scope: !5)
!137 = !DILocation(line: 325, column: 41, scope: !5)
!138 = !DILocation(line: 326, column: 52, scope: !5)
!139 = !DILocation(line: 326, column: 41, scope: !5)
!140 = !DILocation(line: 327, column: 53, scope: !5)
!141 = !DILocation(line: 327, column: 42, scope: !5)
!142 = !DILocation(line: 328, column: 52, scope: !5)
!143 = !DILocation(line: 328, column: 41, scope: !5)
!144 = !DILocation(line: 329, column: 53, scope: !5)
!145 = !DILocation(line: 329, column: 42, scope: !5)
!146 = !DILocation(line: 330, column: 53, scope: !5)
!147 = !DILocation(line: 330, column: 42, scope: !5)
!148 = !DILocation(line: 299, column: 4, scope: !5)
