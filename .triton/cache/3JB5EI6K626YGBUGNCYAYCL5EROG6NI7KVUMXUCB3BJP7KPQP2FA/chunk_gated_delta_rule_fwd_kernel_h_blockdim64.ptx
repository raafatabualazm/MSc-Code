//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_gated_delta_rule_fwd_kernel_h_blockdim64 // -- Begin function chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.visible .entry chunk_gated_delta_rule_fwd_kernel_h_blockdim64(
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6,
	.param .u32 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_8
)
.reqntid 128
{
	.reg .pred 	%p<139>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<2538>;
	.reg .b64 	%rd<388>;
	.loc	1 36 0                          // chunk_delta_h.py:36:0
$L__func_begin0:
	.loc	1 36 0                          // chunk_delta_h.py:36:0

// %bb.0:
	ld.param.b32 	%r250, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7];
	ld.param.b64 	%rd73, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6];
	ld.param.b64 	%rd140, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0];
$L__tmp0:
	.loc	1 61 30                         // chunk_delta_h.py:61:30
	mov.u32 	%r384, %ctaid.x;
	ld.param.b64 	%rd141, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1];
	ld.param.b64 	%rd142, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2];
	.loc	1 61 48                         // chunk_delta_h.py:61:48
	mov.u32 	%r385, %ctaid.y;
	.loc	1 62 33                         // chunk_delta_h.py:62:33
	and.b32 	%r386, %r385, 31;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_delta_h.py:70:24 ]
	add.s32 	%r387, %r250, 63;
	ld.param.b64 	%rd144, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4];
$L__tmp2:
	.loc	1 71 20                         // chunk_delta_h.py:71:20
	shl.b32 	%r2, %r385, 14;
	.loc	1 69 25                         // chunk_delta_h.py:69:25
	and.b32 	%r395, %r385, 65504;
	.loc	1 84 16                         // chunk_delta_h.py:84:16
	mul.lo.s32 	%r396, %r395, %r250;
	.loc	1 84 20                         // chunk_delta_h.py:84:20
	or.b32 	%r397, %r396, %r386;
	.loc	1 84 27                         // chunk_delta_h.py:84:27
	shl.b32 	%r398, %r397, 7;
	.loc	1 84 9                          // chunk_delta_h.py:84:9
	mul.wide.s32 	%rd147, %r398, 2;
	add.s64 	%rd2, %rd141, %rd147;
	.loc	1 85 9                          // chunk_delta_h.py:85:9
	add.s64 	%rd3, %rd140, %rd147;
	.loc	1 86 9                          // chunk_delta_h.py:86:9
	add.s64 	%rd4, %rd142, %rd147;
	.loc	1 113 79                        // chunk_delta_h.py:113:79
	shl.b32 	%r399, %r384, 6;
	.loc	1 113 94                        // chunk_delta_h.py:113:94
	cvt.s64.s32 	%rd6, %r399;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	mov.u32 	%r3, %tid.x;
	bfe.s32 	%r400, %r3, 3, 1;
	and.b32 	%r6, %r3, 16;
	bfe.s32 	%r401, %r3, 4, 1;
	bfe.s32 	%r402, %r3, 5, 1;
	and.b32 	%r8, %r3, 64;
	bfe.u32 	%r403, %r3, 3, 4;
	or.b32 	%r404, %r403, 16;
	or.b32 	%r405, %r403, 32;
	or.b32 	%r406, %r403, 48;
	shl.b32 	%r9, %r3, 3;
	and.b32 	%r407, %r9, 24;
	and.b32 	%r10, %r3, 4;
	shl.b32 	%r408, %r10, 3;
	or.b32 	%r409, %r407, %r408;
	shr.u32 	%r11, %r3, 2;
	bfe.u32 	%r12, %r3, 2, 3;
	shr.u32 	%r410, %r3, 1;
	and.b32 	%r13, %r410, 48;
	or.b32 	%r411, %r13, %r12;
	or.b32 	%r412, %r411, 8;
	cvt.u64.u32 	%rd7, %r403;
	cvt.u64.u32 	%rd8, %r404;
	cvt.u64.u32 	%rd9, %r405;
	cvt.u64.u32 	%rd10, %r406;
	cvt.u64.u32 	%rd11, %r409;
	cvt.u64.u32 	%rd12, %r411;
	cvt.u64.u32 	%rd13, %r412;
	or.b64 	%rd14, %rd11, %rd6;
	setp.gt.s32 	%p36, %r399, -1;
	setp.lt.s64 	%p37, %rd14, 128;
	and.pred 	%p61, %p36, %p37;
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	or.b64 	%rd15, %rd7, 64;
	or.b64 	%rd16, %rd8, 64;
	or.b64 	%rd17, %rd9, 64;
	or.b64 	%rd18, %rd10, 64;
	.loc	1 125 83                        // chunk_delta_h.py:125:83
	cvt.s64.s32 	%rd19, %r250;
	.loc	1 150 35                        // chunk_delta_h.py:150:35
	mul.wide.s32 	%rd148, %r396, 4;
	add.s64 	%rd149, %rd144, %rd148;
	.loc	1 151 50                        // chunk_delta_h.py:151:50
	mul.wide.u32 	%rd150, %r386, 4;
	add.s64 	%rd20, %rd149, %rd150;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s32 	%p38, %r387, 64;
	setp.gt.s32 	%p39, %r387, 63;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	mul.wide.u32 	%rd151, %r403, 4096;
	mul.wide.u32 	%rd152, %r404, 4096;
	mul.wide.u32 	%rd153, %r405, 4096;
	mul.wide.u32 	%rd154, %r406, 4096;
	or.b64 	%rd155, %rd151, %rd11;
	or.b64 	%rd156, %rd152, %rd11;
	or.b64 	%rd157, %rd153, %rd11;
	or.b64 	%rd158, %rd154, %rd11;
	shl.b64 	%rd159, %rd155, 1;
	add.s64 	%rd74, %rd4, %rd159;
	shl.b64 	%rd160, %rd156, 1;
	add.s64 	%rd75, %rd4, %rd160;
	shl.b64 	%rd161, %rd157, 1;
	add.s64 	%rd76, %rd4, %rd161;
	shl.b64 	%rd162, %rd158, 1;
	add.s64 	%rd77, %rd4, %rd162;
	setp.lt.s32 	%p40, %r403, %r250;
	setp.lt.s32 	%p41, %r404, %r250;
	setp.lt.s32 	%p42, %r405, %r250;
	setp.lt.s32 	%p43, %r406, %r250;
	and.b32 	%r413, %r400, 72;
	and.b32 	%r414, %r401, 144;
	and.b32 	%r415, %r402, 288;
	shl.b32 	%r14, %r8, 3;
	or.b32 	%r416, %r413, %r14;
	xor.b32 	%r417, %r416, %r409;
	xor.b32 	%r418, %r417, %r414;
	xor.b32 	%r15, %r418, %r415;
	shl.b32 	%r419, %r15, 1;
	mov.b32 	%r420, global_smem;
	add.s32 	%r251, %r420, %r419;
	or.b32 	%r421, %r409, 1024;
	or.b32 	%r422, %r416, %r414;
	or.b32 	%r423, %r422, %r415;
	xor.b32 	%r16, %r423, %r421;
	shl.b32 	%r424, %r16, 1;
	add.s32 	%r253, %r420, %r424;
	or.b32 	%r425, %r409, 2048;
	xor.b32 	%r17, %r423, %r425;
	shl.b32 	%r426, %r17, 1;
	add.s32 	%r255, %r420, %r426;
	or.b32 	%r427, %r409, 3072;
	xor.b32 	%r18, %r423, %r427;
	shl.b32 	%r428, %r18, 1;
	add.s32 	%r257, %r420, %r428;
	selp.b32 	%r429, 16, 0, %p39;
	selp.b32 	%r260, %r429, 0, %p40;
	// begin inline asm
	cp.async.cg.shared.global [ %r251 + 0 ], [ %rd74 + 0 ], 0x10, %r260;
	// end inline asm
	selp.b32 	%r262, %r429, 0, %p41;
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd75 + 0 ], 0x10, %r262;
	// end inline asm
	selp.b32 	%r264, %r429, 0, %p42;
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd76 + 0 ], 0x10, %r264;
	// end inline asm
	selp.b32 	%r266, %r429, 0, %p43;
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd77 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd78, %rd74, 128;
	add.s64 	%rd79, %rd75, 128;
	add.s64 	%rd80, %rd76, 128;
	add.s64 	%rd81, %rd77, 128;
	add.s32 	%r430, %r420, 32768;
	add.s32 	%r259, %r430, %r419;
	add.s32 	%r261, %r430, %r424;
	add.s32 	%r263, %r430, %r426;
	add.s32 	%r265, %r430, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd78 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd79 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r263 + 0 ], [ %rd80 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r265 + 0 ], [ %rd81 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd387, %rd14, %rd151;
	add.s64 	%rd386, %rd152, %rd14;
	add.s64 	%rd385, %rd153, %rd14;
	add.s64 	%rd384, %rd154, %rd14;
	shl.b64 	%rd163, %rd387, 1;
	add.s64 	%rd82, %rd2, %rd163;
	shl.b64 	%rd164, %rd386, 1;
	add.s64 	%rd83, %rd2, %rd164;
	shl.b64 	%rd165, %rd385, 1;
	add.s64 	%rd84, %rd2, %rd165;
	shl.b64 	%rd166, %rd384, 1;
	add.s64 	%rd85, %rd2, %rd166;
	and.pred 	%p138, %p61, %p40;
	and.pred 	%p137, %p61, %p41;
	and.pred 	%p136, %p61, %p42;
	and.pred 	%p135, %p61, %p43;
	and.b32 	%r431, %r3, 56;
	xor.b32 	%r432, %r409, %r431;
	shl.b32 	%r433, %r403, 6;
	or.b32 	%r19, %r432, %r433;
	shl.b32 	%r434, %r19, 1;
	add.s32 	%r435, %r420, %r434;
	add.s32 	%r267, %r435, 131072;
	add.s32 	%r269, %r435, 133120;
	add.s32 	%r271, %r435, 135168;
	add.s32 	%r273, %r435, 137216;
	selp.b32 	%r436, 16, 0, %p138;
	selp.b32 	%r268, %r436, 0, %p39;
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd82 + 0 ], 0x10, %r268;
	// end inline asm
	selp.b32 	%r437, 16, 0, %p137;
	selp.b32 	%r270, %r437, 0, %p39;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd83 + 0 ], 0x10, %r270;
	// end inline asm
	selp.b32 	%r438, 16, 0, %p136;
	selp.b32 	%r272, %r438, 0, %p39;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd84 + 0 ], 0x10, %r272;
	// end inline asm
	selp.b32 	%r439, 16, 0, %p135;
	selp.b32 	%r274, %r439, 0, %p39;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd85 + 0 ], 0x10, %r274;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	mul.wide.u32 	%rd167, %r411, 128;
	add.s64 	%rd86, %rd20, %rd167;
	mul.wide.u32 	%rd168, %r412, 128;
	add.s64 	%rd87, %rd20, %rd168;
	setp.lt.s32 	%p44, %r411, %r250;
	setp.lt.s32 	%p45, %r412, %r250;
	shl.b32 	%r440, %r411, 2;
	add.s32 	%r441, %r420, %r440;
	add.s32 	%r275, %r441, 181248;
	add.s32 	%r277, %r441, 181280;
	and.b32 	%r20, %r3, 3;
	setp.eq.s32 	%p30, %r20, 0;
	selp.b32 	%r442, 4, 0, %p39;
	selp.b32 	%r276, %r442, 0, %p44;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r275 + 0 ], [ %rd86 + 0 ], 0x4, %r276;
	// end inline asm
	selp.b32 	%r278, %r442, 0, %p45;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r277 + 0 ], [ %rd87 + 0 ], 0x4, %r278;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd88, %rd3, %rd159;
	add.s64 	%rd89, %rd3, %rd160;
	add.s64 	%rd90, %rd3, %rd161;
	add.s64 	%rd91, %rd3, %rd162;
	add.s32 	%r443, %r420, 65536;
	add.s32 	%r279, %r443, %r419;
	add.s32 	%r281, %r443, %r424;
	add.s32 	%r283, %r443, %r426;
	add.s32 	%r285, %r443, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd88 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd89 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd90 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd91 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd92, %rd88, 128;
	add.s64 	%rd93, %rd89, 128;
	add.s64 	%rd94, %rd90, 128;
	add.s64 	%rd95, %rd91, 128;
	add.s32 	%r444, %r420, 98304;
	add.s32 	%r287, %r444, %r419;
	add.s32 	%r289, %r444, %r424;
	add.s32 	%r291, %r444, %r426;
	add.s32 	%r293, %r444, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd92 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd93 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd94 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd95 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.gt.s32 	%p46, %r387, 127;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	or.b64 	%rd169, %rd12, 64;
	or.b64 	%rd170, %rd13, 64;
	shl.b64 	%rd171, %rd15, 12;
	shl.b64 	%rd172, %rd16, 12;
	shl.b64 	%rd173, %rd17, 12;
	shl.b64 	%rd174, %rd18, 12;
	or.b64 	%rd175, %rd171, %rd11;
	or.b64 	%rd176, %rd172, %rd11;
	or.b64 	%rd177, %rd173, %rd11;
	or.b64 	%rd178, %rd174, %rd11;
	shl.b64 	%rd179, %rd175, 1;
	add.s64 	%rd96, %rd4, %rd179;
	shl.b64 	%rd180, %rd176, 1;
	add.s64 	%rd97, %rd4, %rd180;
	shl.b64 	%rd181, %rd177, 1;
	add.s64 	%rd98, %rd4, %rd181;
	shl.b64 	%rd182, %rd178, 1;
	add.s64 	%rd99, %rd4, %rd182;
	setp.lt.s64 	%p47, %rd15, %rd19;
	setp.lt.s64 	%p48, %rd16, %rd19;
	setp.lt.s64 	%p49, %rd17, %rd19;
	setp.lt.s64 	%p50, %rd18, %rd19;
	bar.sync 	0;
	add.s32 	%r445, %r420, 8192;
	add.s32 	%r295, %r445, %r419;
	add.s32 	%r297, %r445, %r424;
	add.s32 	%r299, %r445, %r426;
	add.s32 	%r301, %r445, %r428;
	selp.b32 	%r446, 16, 0, %p47;
	selp.b32 	%r304, %r446, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r295 + 0 ], [ %rd96 + 0 ], 0x10, %r304;
	// end inline asm
	selp.b32 	%r447, 16, 0, %p48;
	selp.b32 	%r306, %r447, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r297 + 0 ], [ %rd97 + 0 ], 0x10, %r306;
	// end inline asm
	selp.b32 	%r448, 16, 0, %p49;
	selp.b32 	%r308, %r448, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r299 + 0 ], [ %rd98 + 0 ], 0x10, %r308;
	// end inline asm
	selp.b32 	%r449, 16, 0, %p50;
	selp.b32 	%r310, %r449, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r301 + 0 ], [ %rd99 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd100, %rd96, 128;
	add.s64 	%rd101, %rd97, 128;
	add.s64 	%rd102, %rd98, 128;
	add.s64 	%rd103, %rd99, 128;
	add.s32 	%r450, %r420, 40960;
	add.s32 	%r303, %r450, %r419;
	add.s32 	%r305, %r450, %r424;
	add.s32 	%r307, %r450, %r426;
	add.s32 	%r309, %r450, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r303 + 0 ], [ %rd100 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r305 + 0 ], [ %rd101 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r307 + 0 ], [ %rd102 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r309 + 0 ], [ %rd103 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd383, %rd171, %rd14;
	add.s64 	%rd382, %rd172, %rd14;
	add.s64 	%rd381, %rd173, %rd14;
	add.s64 	%rd380, %rd174, %rd14;
	shl.b64 	%rd183, %rd383, 1;
	add.s64 	%rd104, %rd2, %rd183;
	shl.b64 	%rd184, %rd382, 1;
	add.s64 	%rd105, %rd2, %rd184;
	shl.b64 	%rd185, %rd381, 1;
	add.s64 	%rd106, %rd2, %rd185;
	shl.b64 	%rd186, %rd380, 1;
	add.s64 	%rd107, %rd2, %rd186;
	and.pred 	%p134, %p61, %p47;
	and.pred 	%p133, %p61, %p48;
	and.pred 	%p132, %p61, %p49;
	and.pred 	%p131, %p61, %p50;
	add.s32 	%r311, %r435, 139264;
	add.s32 	%r313, %r435, 141312;
	add.s32 	%r315, %r435, 143360;
	add.s32 	%r317, %r435, 145408;
	selp.b32 	%r451, 16, 0, %p134;
	selp.b32 	%r312, %r451, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r311 + 0 ], [ %rd104 + 0 ], 0x10, %r312;
	// end inline asm
	selp.b32 	%r452, 16, 0, %p133;
	selp.b32 	%r314, %r452, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r313 + 0 ], [ %rd105 + 0 ], 0x10, %r314;
	// end inline asm
	selp.b32 	%r453, 16, 0, %p132;
	selp.b32 	%r316, %r453, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r315 + 0 ], [ %rd106 + 0 ], 0x10, %r316;
	// end inline asm
	selp.b32 	%r454, 16, 0, %p131;
	selp.b32 	%r318, %r454, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r317 + 0 ], [ %rd107 + 0 ], 0x10, %r318;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b64 	%rd187, %rd169, 7;
	add.s64 	%rd108, %rd20, %rd187;
	shl.b64 	%rd188, %rd170, 7;
	add.s64 	%rd109, %rd20, %rd188;
	setp.lt.s64 	%p51, %rd169, %rd19;
	setp.lt.s64 	%p52, %rd170, %rd19;
	add.s32 	%r319, %r441, 181504;
	add.s32 	%r321, %r441, 181536;
	selp.b32 	%r455, 4, 0, %p51;
	selp.b32 	%r320, %r455, 0, %p46;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r319 + 0 ], [ %rd108 + 0 ], 0x4, %r320;
	// end inline asm
	selp.b32 	%r456, 4, 0, %p52;
	selp.b32 	%r322, %r456, 0, %p46;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r321 + 0 ], [ %rd109 + 0 ], 0x4, %r322;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd110, %rd3, %rd179;
	add.s64 	%rd111, %rd3, %rd180;
	add.s64 	%rd112, %rd3, %rd181;
	add.s64 	%rd113, %rd3, %rd182;
	add.s32 	%r457, %r420, 73728;
	add.s32 	%r323, %r457, %r419;
	add.s32 	%r325, %r457, %r424;
	add.s32 	%r327, %r457, %r426;
	add.s32 	%r329, %r457, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r323 + 0 ], [ %rd110 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r325 + 0 ], [ %rd111 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r327 + 0 ], [ %rd112 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r329 + 0 ], [ %rd113 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd114, %rd110, 128;
	add.s64 	%rd115, %rd111, 128;
	add.s64 	%rd116, %rd112, 128;
	add.s64 	%rd117, %rd113, 128;
	add.s32 	%r458, %r420, 106496;
	add.s32 	%r331, %r458, %r419;
	add.s32 	%r333, %r458, %r424;
	add.s32 	%r335, %r458, %r426;
	add.s32 	%r337, %r458, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r331 + 0 ], [ %rd114 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r333 + 0 ], [ %rd115 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r335 + 0 ], [ %rd116 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r337 + 0 ], [ %rd117 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.gt.s32 	%p53, %r387, 191;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	or.b64 	%rd189, %rd7, 128;
	or.b64 	%rd190, %rd8, 128;
	or.b64 	%rd191, %rd9, 128;
	or.b64 	%rd192, %rd10, 128;
	or.b64 	%rd193, %rd12, 128;
	or.b64 	%rd194, %rd13, 128;
	shl.b64 	%rd195, %rd189, 12;
	shl.b64 	%rd196, %rd190, 12;
	shl.b64 	%rd197, %rd191, 12;
	shl.b64 	%rd198, %rd192, 12;
	or.b64 	%rd199, %rd195, %rd11;
	or.b64 	%rd200, %rd196, %rd11;
	or.b64 	%rd201, %rd197, %rd11;
	or.b64 	%rd202, %rd198, %rd11;
	shl.b64 	%rd203, %rd199, 1;
	add.s64 	%rd118, %rd4, %rd203;
	shl.b64 	%rd204, %rd200, 1;
	add.s64 	%rd119, %rd4, %rd204;
	shl.b64 	%rd205, %rd201, 1;
	add.s64 	%rd120, %rd4, %rd205;
	shl.b64 	%rd206, %rd202, 1;
	add.s64 	%rd121, %rd4, %rd206;
	setp.lt.s64 	%p54, %rd189, %rd19;
	setp.lt.s64 	%p55, %rd190, %rd19;
	setp.lt.s64 	%p56, %rd191, %rd19;
	setp.lt.s64 	%p57, %rd192, %rd19;
	bar.sync 	0;
	add.s32 	%r459, %r420, 16384;
	add.s32 	%r339, %r459, %r419;
	add.s32 	%r341, %r459, %r424;
	add.s32 	%r343, %r459, %r426;
	add.s32 	%r345, %r459, %r428;
	selp.b32 	%r460, 16, 0, %p54;
	selp.b32 	%r348, %r460, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r339 + 0 ], [ %rd118 + 0 ], 0x10, %r348;
	// end inline asm
	selp.b32 	%r461, 16, 0, %p55;
	selp.b32 	%r350, %r461, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r341 + 0 ], [ %rd119 + 0 ], 0x10, %r350;
	// end inline asm
	selp.b32 	%r462, 16, 0, %p56;
	selp.b32 	%r352, %r462, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r343 + 0 ], [ %rd120 + 0 ], 0x10, %r352;
	// end inline asm
	selp.b32 	%r463, 16, 0, %p57;
	selp.b32 	%r354, %r463, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r345 + 0 ], [ %rd121 + 0 ], 0x10, %r354;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd122, %rd118, 128;
	add.s64 	%rd123, %rd119, 128;
	add.s64 	%rd124, %rd120, 128;
	add.s64 	%rd125, %rd121, 128;
	add.s32 	%r464, %r420, 49152;
	add.s32 	%r347, %r464, %r419;
	add.s32 	%r349, %r464, %r424;
	add.s32 	%r351, %r464, %r426;
	add.s32 	%r353, %r464, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r347 + 0 ], [ %rd122 + 0 ], 0x10, %r348;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r349 + 0 ], [ %rd123 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r351 + 0 ], [ %rd124 + 0 ], 0x10, %r352;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r353 + 0 ], [ %rd125 + 0 ], 0x10, %r354;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd379, %rd195, %rd14;
	add.s64 	%rd378, %rd196, %rd14;
	add.s64 	%rd377, %rd197, %rd14;
	add.s64 	%rd376, %rd198, %rd14;
	shl.b64 	%rd207, %rd379, 1;
	add.s64 	%rd126, %rd2, %rd207;
	shl.b64 	%rd208, %rd378, 1;
	add.s64 	%rd127, %rd2, %rd208;
	shl.b64 	%rd209, %rd377, 1;
	add.s64 	%rd128, %rd2, %rd209;
	shl.b64 	%rd210, %rd376, 1;
	add.s64 	%rd129, %rd2, %rd210;
	and.pred 	%p130, %p61, %p54;
	and.pred 	%p129, %p61, %p55;
	and.pred 	%p128, %p61, %p56;
	and.pred 	%p127, %p61, %p57;
	add.s32 	%r355, %r435, 147456;
	add.s32 	%r357, %r435, 149504;
	add.s32 	%r359, %r435, 151552;
	add.s32 	%r361, %r435, 153600;
	selp.b32 	%r465, 16, 0, %p130;
	selp.b32 	%r356, %r465, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r355 + 0 ], [ %rd126 + 0 ], 0x10, %r356;
	// end inline asm
	selp.b32 	%r466, 16, 0, %p129;
	selp.b32 	%r358, %r466, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r357 + 0 ], [ %rd127 + 0 ], 0x10, %r358;
	// end inline asm
	selp.b32 	%r467, 16, 0, %p128;
	selp.b32 	%r360, %r467, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r359 + 0 ], [ %rd128 + 0 ], 0x10, %r360;
	// end inline asm
	selp.b32 	%r468, 16, 0, %p127;
	selp.b32 	%r362, %r468, 0, %p53;
	// begin inline asm
	cp.async.cg.shared.global [ %r361 + 0 ], [ %rd129 + 0 ], 0x10, %r362;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b64 	%rd211, %rd193, 7;
	add.s64 	%rd130, %rd20, %rd211;
	shl.b64 	%rd212, %rd194, 7;
	add.s64 	%rd131, %rd20, %rd212;
	setp.lt.s64 	%p58, %rd193, %rd19;
	setp.lt.s64 	%p59, %rd194, %rd19;
	add.s32 	%r363, %r441, 181760;
	add.s32 	%r365, %r441, 181792;
	selp.b32 	%r469, 4, 0, %p58;
	selp.b32 	%r364, %r469, 0, %p53;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r363 + 0 ], [ %rd130 + 0 ], 0x4, %r364;
	// end inline asm
	selp.b32 	%r470, 4, 0, %p59;
	selp.b32 	%r366, %r470, 0, %p53;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r365 + 0 ], [ %rd131 + 0 ], 0x4, %r366;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd132, %rd3, %rd203;
	add.s64 	%rd133, %rd3, %rd204;
	add.s64 	%rd134, %rd3, %rd205;
	add.s64 	%rd135, %rd3, %rd206;
	add.s32 	%r471, %r420, 81920;
	add.s32 	%r367, %r471, %r419;
	add.s32 	%r369, %r471, %r424;
	add.s32 	%r371, %r471, %r426;
	add.s32 	%r373, %r471, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r367 + 0 ], [ %rd132 + 0 ], 0x10, %r348;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r369 + 0 ], [ %rd133 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r371 + 0 ], [ %rd134 + 0 ], 0x10, %r352;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r373 + 0 ], [ %rd135 + 0 ], 0x10, %r354;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd136, %rd132, 128;
	add.s64 	%rd137, %rd133, 128;
	add.s64 	%rd138, %rd134, 128;
	add.s64 	%rd139, %rd135, 128;
	add.s32 	%r472, %r420, 114688;
	add.s32 	%r375, %r472, %r419;
	add.s32 	%r377, %r472, %r424;
	add.s32 	%r379, %r472, %r426;
	add.s32 	%r381, %r472, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r375 + 0 ], [ %rd136 + 0 ], 0x10, %r348;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r377 + 0 ], [ %rd137 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r379 + 0 ], [ %rd138 + 0 ], 0x10, %r352;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r381 + 0 ], [ %rd139 + 0 ], 0x10, %r354;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1434, 0f00000000;
	mov.b32 	%r1435, %r1434;
	mov.b32 	%r1436, %r1434;
	mov.b32 	%r1437, %r1434;
	mov.b32 	%r1438, %r1434;
	mov.b32 	%r1439, %r1434;
	mov.b32 	%r1440, %r1434;
	mov.b32 	%r1441, %r1434;
	mov.b32 	%r1442, %r1434;
	mov.b32 	%r1443, %r1434;
	mov.b32 	%r1444, %r1434;
	mov.b32 	%r1445, %r1434;
	mov.b32 	%r1446, %r1434;
	mov.b32 	%r1447, %r1434;
	mov.b32 	%r1448, %r1434;
	mov.b32 	%r1449, %r1434;
	mov.b32 	%r1450, %r1434;
	mov.b32 	%r1451, %r1434;
	mov.b32 	%r1452, %r1434;
	mov.b32 	%r1453, %r1434;
	mov.b32 	%r1454, %r1434;
	mov.b32 	%r1455, %r1434;
	mov.b32 	%r1456, %r1434;
	mov.b32 	%r1457, %r1434;
	mov.b32 	%r1458, %r1434;
	mov.b32 	%r1459, %r1434;
	mov.b32 	%r1460, %r1434;
	mov.b32 	%r1461, %r1434;
	mov.b32 	%r1462, %r1434;
	mov.b32 	%r1463, %r1434;
	mov.b32 	%r1464, %r1434;
	mov.b32 	%r1465, %r1434;
	mov.b32 	%r1766, %r1434;
	mov.b32 	%r1767, %r1434;
	mov.b32 	%r1768, %r1434;
	mov.b32 	%r1769, %r1434;
	mov.b32 	%r1770, %r1434;
	mov.b32 	%r1771, %r1434;
	mov.b32 	%r1772, %r1434;
	mov.b32 	%r1773, %r1434;
	mov.b32 	%r1774, %r1434;
	mov.b32 	%r1775, %r1434;
	mov.b32 	%r1776, %r1434;
	mov.b32 	%r1777, %r1434;
	mov.b32 	%r1778, %r1434;
	mov.b32 	%r1779, %r1434;
	mov.b32 	%r1780, %r1434;
	mov.b32 	%r1781, %r1434;
	mov.b32 	%r1782, %r1434;
	mov.b32 	%r1783, %r1434;
	mov.b32 	%r1784, %r1434;
	mov.b32 	%r1785, %r1434;
	mov.b32 	%r1786, %r1434;
	mov.b32 	%r1787, %r1434;
	mov.b32 	%r1788, %r1434;
	mov.b32 	%r1789, %r1434;
	mov.b32 	%r1790, %r1434;
	mov.b32 	%r1791, %r1434;
	mov.b32 	%r1792, %r1434;
	mov.b32 	%r1793, %r1434;
	mov.b32 	%r1794, %r1434;
	mov.b32 	%r1795, %r1434;
	mov.b32 	%r1796, %r1434;
	mov.b32 	%r1797, %r1434;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	@%p38 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	ld.param.b64 	%rd143, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3];
	shr.s32 	%r388, %r387, 31;
	shr.u32 	%r389, %r388, 26;
	add.s32 	%r390, %r387, %r389;
	shr.s32 	%r1, %r390, 6;
	ld.param.b64 	%rd145, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5];
	and.b32 	%r391, %r2, 1073217536;
	mul.lo.s32 	%r392, %r391, %r1;
	shl.b32 	%r393, %r386, 14;
	or.b32 	%r394, %r392, %r393;
	mul.wide.s32 	%rd146, %r394, 2;
	add.s64 	%rd1, %rd145, %rd146;
	add.s64 	%rd5, %rd143, %rd147;
	shr.u32 	%r4, %r3, 5;
	and.b32 	%r5, %r3, 8;
	and.b32 	%r7, %r3, 32;
	cvt.u32.u64 	%r479, %rd11;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.eq.s32 	%p60, %r10, 0;
	add.s32 	%r480, %r1, -3;
	mul.lo.s32 	%r481, %r20, 72;
	selp.b32 	%r482, 0, 288, %p60;
	xor.b32 	%r483, %r482, %r481;
	shl.b32 	%r484, %r5, 6;
	or.b32 	%r485, %r483, %r484;
	shr.u32 	%r486, %r6, 1;
	xor.b32 	%r487, %r485, %r486;
	shl.b32 	%r488, %r7, 5;
	or.b32 	%r489, %r487, %r488;
	shl.b32 	%r490, %r8, 5;
	xor.b32 	%r21, %r489, %r490;
	shl.b32 	%r491, %r21, 1;
	add.s32 	%r493, %r420, 164864;
	add.s32 	%r549, %r493, %r491;
	xor.b32 	%r23, %r21, 16;
	shl.b32 	%r494, %r23, 1;
	add.s32 	%r554, %r493, %r494;
	xor.b32 	%r25, %r21, 32;
	shl.b32 	%r495, %r25, 1;
	add.s32 	%r559, %r493, %r495;
	xor.b32 	%r27, %r21, 48;
	shl.b32 	%r496, %r27, 1;
	add.s32 	%r564, %r493, %r496;
	shl.b64 	%rd33, %rd7, 8;
	shl.b64 	%rd34, %rd8, 8;
	shl.b64 	%rd35, %rd9, 8;
	shl.b64 	%rd36, %rd10, 8;
	shl.b32 	%r497, %r3, 6;
	and.b32 	%r498, %r497, 448;
	or.b32 	%r499, %r498, %r484;
	or.b32 	%r500, %r499, %r486;
	or.b32 	%r501, %r500, %r488;
	or.b32 	%r502, %r501, %r490;
	and.b32 	%r503, %r9, 448;
	or.b32 	%r504, %r479, %r503;
	or.b32 	%r505, %r504, %r14;
	shr.u32 	%r506, %r502, 2;
	and.b32 	%r507, %r506, 536870896;
	add.s32 	%r1699, %r420, 155648;
	add.s32 	%r509, %r1699, %r507;
	shl.b32 	%r510, %r502, 1;
	add.s32 	%r569, %r509, %r510;
	add.s32 	%r574, %r569, 32;
	add.s32 	%r579, %r569, 64;
	add.s32 	%r584, %r569, 96;
	shr.u32 	%r511, %r505, 2;
	and.b32 	%r512, %r511, 240;
	add.s32 	%r513, %r1699, %r512;
	shl.b32 	%r514, %r505, 1;
	add.s32 	%r33, %r513, %r514;
	or.b32 	%r515, %r505, 1024;
	shr.u32 	%r516, %r515, 2;
	and.b32 	%r517, %r516, 496;
	add.s32 	%r518, %r1699, %r517;
	add.s32 	%r34, %r518, %r514;
	or.b32 	%r519, %r505, 2048;
	shr.u32 	%r520, %r519, 2;
	and.b32 	%r521, %r520, 752;
	add.s32 	%r522, %r1699, %r521;
	add.s32 	%r35, %r522, %r514;
	or.b32 	%r523, %r505, 3072;
	shr.u32 	%r524, %r523, 2;
	and.b32 	%r525, %r524, 1008;
	add.s32 	%r526, %r1699, %r525;
	add.s32 	%r36, %r526, %r514;
	add.s32 	%r527, %r420, 173056;
	add.s32 	%r605, %r527, %r491;
	add.s32 	%r610, %r527, %r494;
	add.s32 	%r615, %r527, %r495;
	add.s32 	%r620, %r527, %r496;
	shl.b64 	%rd37, %rd15, 8;
	shl.b64 	%rd38, %rd16, 8;
	shl.b64 	%rd39, %rd17, 8;
	shl.b64 	%rd40, %rd18, 8;
	bfe.u32 	%r528, %r493, 4, 14;
	cvt.u64.u32 	%rd214, %r528;
	or.b64 	%rd235, %rd214, 4611686293338849280;
	add.s32 	%r529, %r420, 166912;
	bfe.u32 	%r530, %r529, 4, 14;
	cvt.u64.u32 	%rd215, %r530;
	or.b64 	%rd237, %rd215, 4611686293338849280;
	add.s32 	%r531, %r420, 168960;
	bfe.u32 	%r532, %r531, 4, 14;
	cvt.u64.u32 	%rd216, %r532;
	or.b64 	%rd239, %rd216, 4611686293338849280;
	add.s32 	%r533, %r420, 171008;
	bfe.u32 	%r534, %r533, 4, 14;
	cvt.u64.u32 	%rd217, %r534;
	or.b64 	%rd241, %rd217, 4611686293338849280;
	bfe.u32 	%r535, %r527, 4, 14;
	cvt.u64.u32 	%rd218, %r535;
	or.b64 	%rd243, %rd218, 4611686293338849280;
	add.s32 	%r536, %r420, 175104;
	bfe.u32 	%r537, %r536, 4, 14;
	cvt.u64.u32 	%rd219, %r537;
	or.b64 	%rd245, %rd219, 4611686293338849280;
	add.s32 	%r538, %r420, 177152;
	bfe.u32 	%r539, %r538, 4, 14;
	cvt.u64.u32 	%rd220, %r539;
	or.b64 	%rd247, %rd220, 4611686293338849280;
	add.s32 	%r540, %r420, 179200;
	bfe.u32 	%r541, %r540, 4, 14;
	cvt.u64.u32 	%rd221, %r541;
	or.b64 	%rd249, %rd221, 4611686293338849280;
	add.s32 	%r1350, %r1699, %r491;
	add.s32 	%r1355, %r1699, %r494;
	add.s32 	%r1360, %r1699, %r495;
	add.s32 	%r1365, %r1699, %r496;
	bfe.u32 	%r542, %r1699, 4, 14;
	cvt.u64.u32 	%rd222, %r542;
	or.b64 	%rd256, %rd222, 4611686293338849280;
	add.s32 	%r543, %r420, 157696;
	bfe.u32 	%r544, %r543, 4, 14;
	cvt.u64.u32 	%rd223, %r544;
	or.b64 	%rd258, %rd223, 4611686293338849280;
	add.s32 	%r545, %r420, 159744;
	bfe.u32 	%r546, %r545, 4, 14;
	cvt.u64.u32 	%rd224, %r546;
	or.b64 	%rd260, %rd224, 4611686293338849280;
	add.s32 	%r547, %r420, 161792;
	bfe.u32 	%r548, %r547, 4, 14;
	cvt.u64.u32 	%rd225, %r548;
	or.b64 	%rd262, %rd225, 4611686293338849280;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cvt.s64.s32 	%rd53, %r480;
	cvt.u64.u32 	%rd54, %r1;
	add.s32 	%r45, %r13, %r12;
	mov.b32 	%r2471, 2;
	mov.b32 	%r2470, -1;
	mov.b32 	%r1766, 0f00000000;
	mov.b64 	%rd375, 0;
	mov.b32 	%r956, 0;
	mov.b32 	%r2404, %r956;
	mov.b32 	%r2405, %r956;
	mov.b32 	%r1767, %r1766;
	mov.b32 	%r1768, %r1766;
	mov.b32 	%r1769, %r1766;
	mov.b32 	%r1770, %r1766;
	mov.b32 	%r1771, %r1766;
	mov.b32 	%r1772, %r1766;
	mov.b32 	%r1773, %r1766;
	mov.b32 	%r1774, %r1766;
	mov.b32 	%r1775, %r1766;
	mov.b32 	%r1776, %r1766;
	mov.b32 	%r1777, %r1766;
	mov.b32 	%r1778, %r1766;
	mov.b32 	%r1779, %r1766;
	mov.b32 	%r1780, %r1766;
	mov.b32 	%r1781, %r1766;
	mov.b32 	%r1782, %r1766;
	mov.b32 	%r1783, %r1766;
	mov.b32 	%r1784, %r1766;
	mov.b32 	%r1785, %r1766;
	mov.b32 	%r1786, %r1766;
	mov.b32 	%r1787, %r1766;
	mov.b32 	%r1788, %r1766;
	mov.b32 	%r1789, %r1766;
	mov.b32 	%r1790, %r1766;
	mov.b32 	%r1791, %r1766;
	mov.b32 	%r1792, %r1766;
	mov.b32 	%r1793, %r1766;
	mov.b32 	%r1794, %r1766;
	mov.b32 	%r1795, %r1766;
	mov.b32 	%r1796, %r1766;
	mov.b32 	%r1797, %r1766;
	mov.b32 	%r1434, %r1766;
	mov.b32 	%r1435, %r1766;
	mov.b32 	%r1436, %r1766;
	mov.b32 	%r1437, %r1766;
	mov.b32 	%r1438, %r1766;
	mov.b32 	%r1439, %r1766;
	mov.b32 	%r1440, %r1766;
	mov.b32 	%r1441, %r1766;
	mov.b32 	%r1442, %r1766;
	mov.b32 	%r1443, %r1766;
	mov.b32 	%r1444, %r1766;
	mov.b32 	%r1445, %r1766;
	mov.b32 	%r1446, %r1766;
	mov.b32 	%r1447, %r1766;
	mov.b32 	%r1448, %r1766;
	mov.b32 	%r1449, %r1766;
	mov.b32 	%r1450, %r1766;
	mov.b32 	%r1451, %r1766;
	mov.b32 	%r1452, %r1766;
	mov.b32 	%r1453, %r1766;
	mov.b32 	%r1454, %r1766;
	mov.b32 	%r1455, %r1766;
	mov.b32 	%r1456, %r1766;
	mov.b32 	%r1457, %r1766;
	mov.b32 	%r1458, %r1766;
	mov.b32 	%r1459, %r1766;
	mov.b32 	%r1460, %r1766;
	mov.b32 	%r1461, %r1766;
	mov.b32 	%r1462, %r1766;
	mov.b32 	%r1463, %r1766;
	mov.b32 	%r1464, %r1766;
	mov.b32 	%r1465, %r1766;
	mov.b32 	%r2472, %r2470;
	mov.b32 	%r2473, %r2471;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	mov.b64 	%rd63, %rd383;
	mov.b64 	%rd62, %rd382;
	mov.b64 	%rd61, %rd381;
	mov.b64 	%rd60, %rd380;
	mov.b64 	%rd383, %rd379;
	mov.b64 	%rd382, %rd378;
	mov.b64 	%rd381, %rd377;
	mov.b64 	%rd380, %rd376;
	mov.pred 	%p21, %p134;
	mov.pred 	%p20, %p133;
	mov.pred 	%p19, %p132;
	mov.pred 	%p18, %p131;
	mov.pred 	%p134, %p130;
	mov.pred 	%p133, %p129;
	mov.pred 	%p132, %p128;
	mov.pred 	%p131, %p127;
	cvt.u32.u64 	%r2078, %rd12;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s64 	%p90, %rd375, %rd53;
	add.s32 	%r2079, %r2471, 1;
	add.s32 	%r2080, %r2473, 1;
	add.s32 	%r2081, %r2470, 1;
	add.s32 	%r2082, %r2472, 1;
	.loc	1 113 37                        // chunk_delta_h.py:113:37
	mul.wide.s32 	%rd293, %r2404, 2;
	add.s64 	%rd294, %rd1, %rd293;
	.loc	1 114 31                        // chunk_delta_h.py:114:31
	cvt.rn.bf16x2.f32 	%r570, %r1435, %r1434;
	cvt.rn.bf16x2.f32 	%r571, %r1437, %r1436;
	cvt.rn.bf16x2.f32 	%r572, %r1439, %r1438;
	cvt.rn.bf16x2.f32 	%r573, %r1441, %r1440;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r549], {%r570, %r571, %r572, %r573};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r575, %r1443, %r1442;
	cvt.rn.bf16x2.f32 	%r576, %r1445, %r1444;
	cvt.rn.bf16x2.f32 	%r577, %r1447, %r1446;
	cvt.rn.bf16x2.f32 	%r578, %r1449, %r1448;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r554], {%r575, %r576, %r577, %r578};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r580, %r1451, %r1450;
	cvt.rn.bf16x2.f32 	%r581, %r1453, %r1452;
	cvt.rn.bf16x2.f32 	%r582, %r1455, %r1454;
	cvt.rn.bf16x2.f32 	%r583, %r1457, %r1456;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r559], {%r580, %r581, %r582, %r583};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r585, %r1459, %r1458;
	cvt.rn.bf16x2.f32 	%r586, %r1461, %r1460;
	cvt.rn.bf16x2.f32 	%r587, %r1463, %r1462;
	cvt.rn.bf16x2.f32 	%r588, %r1465, %r1464;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r564], {%r585, %r586, %r587, %r588};
	// end inline asm
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	add.s64 	%rd295, %rd294, %rd33;
	shl.b64 	%rd296, %rd14, 1;
	add.s64 	%rd226, %rd295, %rd296;
	add.s64 	%rd297, %rd294, %rd34;
	add.s64 	%rd227, %rd297, %rd296;
	add.s64 	%rd298, %rd294, %rd35;
	add.s64 	%rd228, %rd298, %rd296;
	add.s64 	%rd299, %rd294, %rd36;
	add.s64 	%rd229, %rd299, %rd296;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r569], {%r570, %r571, %r572, %r573};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r574], {%r575, %r576, %r577, %r578};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r579], {%r580, %r581, %r582, %r583};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r584], {%r585, %r586, %r587, %r588};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r593, %r594, %r595, %r596}, [%r34+2048];
	ld.shared.v4.b32 	{%r597, %r598, %r599, %r600}, [%r35+4096];
	ld.shared.v4.b32 	{%r601, %r602, %r603, %r604}, [%r36+6144];
	ld.shared.v4.b32 	{%r589, %r590, %r591, %r592}, [%r33];
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd226 + 0 ], { %r589, %r590, %r591, %r592 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd227 + 0 ], { %r593, %r594, %r595, %r596 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd228 + 0 ], { %r597, %r598, %r599, %r600 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd229 + 0 ], { %r601, %r602, %r603, %r604 };
	// end inline asm
	.loc	1 117 35                        // chunk_delta_h.py:117:35
	cvt.rn.bf16x2.f32 	%r626, %r1767, %r1766;
	cvt.rn.bf16x2.f32 	%r627, %r1769, %r1768;
	cvt.rn.bf16x2.f32 	%r628, %r1771, %r1770;
	cvt.rn.bf16x2.f32 	%r629, %r1773, %r1772;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r605], {%r626, %r627, %r628, %r629};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r631, %r1775, %r1774;
	cvt.rn.bf16x2.f32 	%r632, %r1777, %r1776;
	cvt.rn.bf16x2.f32 	%r633, %r1779, %r1778;
	cvt.rn.bf16x2.f32 	%r634, %r1781, %r1780;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r610], {%r631, %r632, %r633, %r634};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r636, %r1783, %r1782;
	cvt.rn.bf16x2.f32 	%r637, %r1785, %r1784;
	cvt.rn.bf16x2.f32 	%r638, %r1787, %r1786;
	cvt.rn.bf16x2.f32 	%r639, %r1789, %r1788;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r615], {%r636, %r637, %r638, %r639};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r641, %r1791, %r1790;
	cvt.rn.bf16x2.f32 	%r642, %r1793, %r1792;
	cvt.rn.bf16x2.f32 	%r643, %r1795, %r1794;
	cvt.rn.bf16x2.f32 	%r644, %r1797, %r1796;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r620], {%r641, %r642, %r643, %r644};
	// end inline asm
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	add.s64 	%rd300, %rd294, %rd37;
	add.s64 	%rd230, %rd300, %rd296;
	add.s64 	%rd301, %rd294, %rd38;
	add.s64 	%rd231, %rd301, %rd296;
	add.s64 	%rd302, %rd294, %rd39;
	add.s64 	%rd232, %rd302, %rd296;
	add.s64 	%rd303, %rd294, %rd40;
	add.s64 	%rd233, %rd303, %rd296;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r569], {%r626, %r627, %r628, %r629};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r574], {%r631, %r632, %r633, %r634};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r579], {%r636, %r637, %r638, %r639};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r584], {%r641, %r642, %r643, %r644};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r649, %r650, %r651, %r652}, [%r34+2048];
	ld.shared.v4.b32 	{%r653, %r654, %r655, %r656}, [%r35+4096];
	ld.shared.v4.b32 	{%r657, %r658, %r659, %r660}, [%r36+6144];
	ld.shared.v4.b32 	{%r645, %r646, %r647, %r648}, [%r33];
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd230 + 0 ], { %r645, %r646, %r647, %r648 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd231 + 0 ], { %r649, %r650, %r651, %r652 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd232 + 0 ], { %r653, %r654, %r655, %r656 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd233 + 0 ], { %r657, %r658, %r659, %r660 };
	// end inline asm
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	cp.async.wait_group 	12;
	bar.sync 	0;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	shfl.sync.idx.b32 	%r2083, %r4, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	shl.b64 	%rd304, %rd387, 1;
	add.s64 	%rd250, %rd5, %rd304;
	shl.b64 	%rd305, %rd386, 1;
	add.s64 	%rd251, %rd5, %rd305;
	shl.b64 	%rd306, %rd385, 1;
	add.s64 	%rd252, %rd5, %rd306;
	shl.b64 	%rd307, %rd384, 1;
	add.s64 	%rd253, %rd5, %rd307;
	.loc	1 147 30                        // chunk_delta_h.py:147:30
	add.s64 	%rd375, %rd375, 1;
	.loc	1 147 39                        // chunk_delta_h.py:147:39
	add.s32 	%r116, %r2405, 64;
	min.s32 	%r2084, %r116, %r250;
	.loc	1 149 30                        // chunk_delta_h.py:149:30
	add.s32 	%r2085, %r45, %r2405;
	.loc	1 149 50                        // chunk_delta_h.py:149:50
	add.s32 	%r2086, %r2085, 8;
	setp.lt.s32 	%p91, %r2085, %r250;
	setp.lt.s32 	%p92, %r2086, %r250;
	.loc	1 150 56                        // chunk_delta_h.py:150:56
	shl.b32 	%r2087, %r2084, 5;
	add.s32 	%r2088, %r2087, -32;
	.loc	1 150 60                        // chunk_delta_h.py:150:60
	mul.wide.s32 	%rd308, %r2088, 4;
	add.s64 	%rd254, %rd20, %rd308;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.gt.s32 	%p93, %r2082, 3;
	setp.gt.s32 	%p94, %r2081, 2;
	setp.gt.s32 	%p95, %r2080, 3;
	setp.gt.s32 	%p96, %r2079, 2;
	selp.b32 	%r2471, 0, %r2079, %p96;
	selp.b32 	%r2473, 0, %r2080, %p95;
	selp.b32 	%r2470, 0, %r2081, %p94;
	selp.b32 	%r2472, 0, %r2082, %p93;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	shl.b32 	%r2089, %r2472, 13;
	add.s32 	%r917, %r420, %r2089;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	bfe.u32 	%r2091, %r917, 4, 14;
	cvt.u64.u32 	%rd309, %r2091;
	or.b64 	%rd234, %rd309, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd234, %rd235, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2092, %r917, 32;
	bfe.u32 	%r2093, %r2092, 4, 14;
	cvt.u64.u32 	%rd310, %r2093;
	or.b64 	%rd236, %rd310, 4611686293338849280;
	mov.pred 	%p69, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd236, %rd237, %p69, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2094, %r917, 64;
	bfe.u32 	%r2095, %r2094, 4, 14;
	cvt.u64.u32 	%rd311, %r2095;
	or.b64 	%rd238, %rd311, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd238, %rd239, %p69, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2096, %r917, 96;
	bfe.u32 	%r2097, %r2096, 4, 14;
	cvt.u64.u32 	%rd312, %r2097;
	or.b64 	%rd240, %rd312, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd240, %rd241, %p69, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r920, %r493;
	mov.b32 	%r918, %r956;
	mov.b32 	%r919, %r956;
	mov.b32 	%r921, %r956;
	mov.b32 	%r922, %r956;
	// begin inline asm
	// wait for regs: %r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788,%r917,%r918,%r919,%r920,%r921,%r922
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s32 	%r1249, %r430, %r2089;
	.loc	1 131 31                        // chunk_delta_h.py:131:31
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2099, %r1249, 4, 14;
	cvt.u64.u32 	%rd313, %r2099;
	or.b64 	%rd242, %rd313, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd242, %rd243, %p69, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2100, %r1249, 32;
	bfe.u32 	%r2101, %r2100, 4, 14;
	cvt.u64.u32 	%rd314, %r2101;
	or.b64 	%rd244, %rd314, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd244, %rd245, %p69, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2102, %r1249, 64;
	bfe.u32 	%r2103, %r2102, 4, 14;
	cvt.u64.u32 	%rd315, %r2103;
	or.b64 	%rd246, %rd315, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd246, %rd247, %p69, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2104, %r1249, 96;
	bfe.u32 	%r2105, %r2104, 4, 14;
	cvt.u64.u32 	%rd316, %r2105;
	or.b64 	%rd248, %rd316, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788}, %rd248, %rd249, %p69, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1250, %r956;
	mov.b32 	%r1251, %r956;
	mov.b32 	%r1253, %r956;
	mov.b32 	%r1254, %r956;
	mov.b32 	%r1252, %r527;
	// begin inline asm
	// wait for regs: %r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r784,%r785,%r786,%r787,%r788,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	shl.b32 	%r2106, %r2470, 13;
	add.s32 	%r2107, %r420, 131072;
	add.s32 	%r2108, %r2107, %r2106;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	add.s32 	%r1297, %r2108, %r491;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1293, %r1294, %r1295, %r1296}, [%r1297];
	// end inline asm
	add.s32 	%r1302, %r2108, %r494;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1298, %r1299, %r1300, %r1301}, [%r1302];
	// end inline asm
	add.s32 	%r1307, %r2108, %r495;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1303, %r1304, %r1305, %r1306}, [%r1307];
	// end inline asm
	add.s32 	%r1312, %r2108, %r496;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1308, %r1309, %r1310, %r1311}, [%r1312];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r1293;
	cvt.f32.bf16 	%r2113, %rs2;
	cvt.f32.bf16 	%r2114, %rs1;
	sub.f32 	%r2115, %r2114, %r757;
	sub.f32 	%r2116, %r2113, %r758;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1314, %r2116, %r2115;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs3, %rs4}, %r1294;
	cvt.f32.bf16 	%r2117, %rs4;
	cvt.f32.bf16 	%r2118, %rs3;
	sub.f32 	%r2119, %r2118, %r759;
	sub.f32 	%r2120, %r2117, %r760;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1315, %r2120, %r2119;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs5, %rs6}, %r1295;
	cvt.f32.bf16 	%r2121, %rs6;
	cvt.f32.bf16 	%r2122, %rs5;
	sub.f32 	%r2123, %r2122, %r761;
	sub.f32 	%r2124, %r2121, %r762;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1316, %r2124, %r2123;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs7, %rs8}, %r1296;
	cvt.f32.bf16 	%r2125, %rs8;
	cvt.f32.bf16 	%r2126, %rs7;
	sub.f32 	%r2127, %r2126, %r763;
	sub.f32 	%r2128, %r2125, %r764;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1317, %r2128, %r2127;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs9, %rs10}, %r1298;
	cvt.f32.bf16 	%r2129, %rs10;
	cvt.f32.bf16 	%r2130, %rs9;
	sub.f32 	%r2131, %r2130, %r765;
	sub.f32 	%r2132, %r2129, %r766;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1319, %r2132, %r2131;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs11, %rs12}, %r1299;
	cvt.f32.bf16 	%r2133, %rs12;
	cvt.f32.bf16 	%r2134, %rs11;
	sub.f32 	%r2135, %r2134, %r767;
	sub.f32 	%r2136, %r2133, %r768;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1320, %r2136, %r2135;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs13, %rs14}, %r1300;
	cvt.f32.bf16 	%r2137, %rs14;
	cvt.f32.bf16 	%r2138, %rs13;
	sub.f32 	%r2139, %r2138, %r769;
	sub.f32 	%r2140, %r2137, %r770;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1321, %r2140, %r2139;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs15, %rs16}, %r1301;
	cvt.f32.bf16 	%r2141, %rs16;
	cvt.f32.bf16 	%r2142, %rs15;
	sub.f32 	%r2143, %r2142, %r771;
	sub.f32 	%r2144, %r2141, %r772;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1322, %r2144, %r2143;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs17, %rs18}, %r1303;
	cvt.f32.bf16 	%r2145, %rs18;
	cvt.f32.bf16 	%r2146, %rs17;
	sub.f32 	%r2147, %r2146, %r773;
	sub.f32 	%r2148, %r2145, %r774;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1324, %r2148, %r2147;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs19, %rs20}, %r1304;
	cvt.f32.bf16 	%r2149, %rs20;
	cvt.f32.bf16 	%r2150, %rs19;
	sub.f32 	%r2151, %r2150, %r775;
	sub.f32 	%r2152, %r2149, %r776;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1325, %r2152, %r2151;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs21, %rs22}, %r1305;
	cvt.f32.bf16 	%r2153, %rs22;
	cvt.f32.bf16 	%r2154, %rs21;
	sub.f32 	%r2155, %r2154, %r777;
	sub.f32 	%r2156, %r2153, %r778;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1326, %r2156, %r2155;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs23, %rs24}, %r1306;
	cvt.f32.bf16 	%r2157, %rs24;
	cvt.f32.bf16 	%r2158, %rs23;
	sub.f32 	%r2159, %r2158, %r779;
	sub.f32 	%r2160, %r2157, %r780;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1327, %r2160, %r2159;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs25, %rs26}, %r1308;
	cvt.f32.bf16 	%r2161, %rs26;
	cvt.f32.bf16 	%r2162, %rs25;
	sub.f32 	%r2163, %r2162, %r781;
	sub.f32 	%r2164, %r2161, %r782;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1329, %r2164, %r2163;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs27, %rs28}, %r1309;
	cvt.f32.bf16 	%r2165, %rs28;
	cvt.f32.bf16 	%r2166, %rs27;
	sub.f32 	%r2167, %r2166, %r783;
	sub.f32 	%r2168, %r2165, %r784;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1330, %r2168, %r2167;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs29, %rs30}, %r1310;
	cvt.f32.bf16 	%r2169, %rs30;
	cvt.f32.bf16 	%r2170, %rs29;
	sub.f32 	%r2171, %r2170, %r785;
	sub.f32 	%r2172, %r2169, %r786;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1331, %r2172, %r2171;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs31, %rs32}, %r1311;
	cvt.f32.bf16 	%r2173, %rs32;
	cvt.f32.bf16 	%r2174, %rs31;
	sub.f32 	%r2175, %r2174, %r787;
	sub.f32 	%r2176, %r2173, %r788;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1332, %r2176, %r2175;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r569], {%r1314, %r1315, %r1316, %r1317};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r574], {%r1319, %r1320, %r1321, %r1322};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r579], {%r1324, %r1325, %r1326, %r1327};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r584], {%r1329, %r1330, %r1331, %r1332};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1337, %r1338, %r1339, %r1340}, [%r34+2048];
	ld.shared.v4.b32 	{%r1341, %r1342, %r1343, %r1344}, [%r35+4096];
	ld.shared.v4.b32 	{%r1345, %r1346, %r1347, %r1348}, [%r36+6144];
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	ld.shared.v4.b32 	{%r1333, %r1334, %r1335, %r1336}, [%r33];
	// begin inline asm
	@%p138 st.global.v4.b32 [ %rd250 + 0 ], { %r1333, %r1334, %r1335, %r1336 };
	// end inline asm
	// begin inline asm
	@%p137 st.global.v4.b32 [ %rd251 + 0 ], { %r1337, %r1338, %r1339, %r1340 };
	// end inline asm
	// begin inline asm
	@%p136 st.global.v4.b32 [ %rd252 + 0 ], { %r1341, %r1342, %r1343, %r1344 };
	// end inline asm
	// begin inline asm
	@%p135 st.global.v4.b32 [ %rd253 + 0 ], { %r1345, %r1346, %r1347, %r1348 };
	// end inline asm
	.loc	1 150 31                        // chunk_delta_h.py:150:31
	// begin inline asm
	mov.u32 %r1349, 0x0;
	ld.global.b32 { %r1349 }, [ %rd254 + 0 ];
	// end inline asm
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b32 	%r2177, %r2470, 8;
	add.s32 	%r2178, %r420, 181248;
	add.s32 	%r2179, %r2178, %r2177;
	shl.b32 	%r2180, %r2078, 2;
	add.s32 	%r2181, %r2179, %r2180;
	ld.shared.b32 	%r2182, [%r2181];
	ld.shared.b32 	%r2183, [%r2181+32];
	.loc	1 153 53                        // chunk_delta_h.py:153:53
	sub.f32 	%r2184, %r1349, %r2182;
	sub.f32 	%r2185, %r1349, %r2183;
	.loc	1 153 42                        // chunk_delta_h.py:153:42
	mul.f32 	%r2186, %r2184, 0f3FB8AA3B;
	ex2.approx.f32 	%r2187, %r2186;
	mul.f32 	%r2188, %r2185, 0f3FB8AA3B;
	ex2.approx.f32 	%r2189, %r2188;
	.loc	1 153 59                        // chunk_delta_h.py:153:59
	selp.f32 	%r2190, %r2187, 0f00000000, %p91;
	selp.f32 	%r2191, %r2189, 0f00000000, %p92;
	.loc	1 153 24                        // chunk_delta_h.py:153:24
	mul.f32 	%r2192, %r2115, %r2190;
	mul.f32 	%r2193, %r2116, %r2190;
	mul.f32 	%r2194, %r2119, %r2191;
	mul.f32 	%r2195, %r2120, %r2191;
	mul.f32 	%r2196, %r2123, %r2190;
	mul.f32 	%r2197, %r2124, %r2190;
	mul.f32 	%r2198, %r2127, %r2191;
	mul.f32 	%r2199, %r2128, %r2191;
	mul.f32 	%r2200, %r2131, %r2190;
	mul.f32 	%r2201, %r2132, %r2190;
	mul.f32 	%r2202, %r2135, %r2191;
	mul.f32 	%r2203, %r2136, %r2191;
	mul.f32 	%r2204, %r2139, %r2190;
	mul.f32 	%r2205, %r2140, %r2190;
	mul.f32 	%r2206, %r2143, %r2191;
	mul.f32 	%r2207, %r2144, %r2191;
	mul.f32 	%r2208, %r2147, %r2190;
	mul.f32 	%r2209, %r2148, %r2190;
	mul.f32 	%r2210, %r2151, %r2191;
	mul.f32 	%r2211, %r2152, %r2191;
	mul.f32 	%r2212, %r2155, %r2190;
	mul.f32 	%r2213, %r2156, %r2190;
	mul.f32 	%r2214, %r2159, %r2191;
	mul.f32 	%r2215, %r2160, %r2191;
	mul.f32 	%r2216, %r2163, %r2190;
	mul.f32 	%r2217, %r2164, %r2190;
	mul.f32 	%r2218, %r2167, %r2191;
	mul.f32 	%r2219, %r2168, %r2191;
	mul.f32 	%r2220, %r2171, %r2190;
	mul.f32 	%r2221, %r2172, %r2190;
	mul.f32 	%r2222, %r2175, %r2191;
	mul.f32 	%r2223, %r2176, %r2191;
	.loc	1 154 27                        // chunk_delta_h.py:154:27
	mul.f32 	%r2224, %r1349, 0f3FB8AA3B;
	ex2.approx.f32 	%r2225, %r2224;
	.loc	1 155 20                        // chunk_delta_h.py:155:20
	mul.f32 	%r1434, %r1434, %r2225;
	mul.f32 	%r1435, %r1435, %r2225;
	mul.f32 	%r1436, %r1436, %r2225;
	mul.f32 	%r1437, %r1437, %r2225;
	mul.f32 	%r1438, %r1438, %r2225;
	mul.f32 	%r1439, %r1439, %r2225;
	mul.f32 	%r1440, %r1440, %r2225;
	mul.f32 	%r1441, %r1441, %r2225;
	mul.f32 	%r1442, %r1442, %r2225;
	mul.f32 	%r1443, %r1443, %r2225;
	mul.f32 	%r1444, %r1444, %r2225;
	mul.f32 	%r1445, %r1445, %r2225;
	mul.f32 	%r1446, %r1446, %r2225;
	mul.f32 	%r1447, %r1447, %r2225;
	mul.f32 	%r1448, %r1448, %r2225;
	mul.f32 	%r1449, %r1449, %r2225;
	mul.f32 	%r1450, %r1450, %r2225;
	mul.f32 	%r1451, %r1451, %r2225;
	mul.f32 	%r1452, %r1452, %r2225;
	mul.f32 	%r1453, %r1453, %r2225;
	mul.f32 	%r1454, %r1454, %r2225;
	mul.f32 	%r1455, %r1455, %r2225;
	mul.f32 	%r1456, %r1456, %r2225;
	mul.f32 	%r1457, %r1457, %r2225;
	mul.f32 	%r1458, %r1458, %r2225;
	mul.f32 	%r1459, %r1459, %r2225;
	mul.f32 	%r1460, %r1460, %r2225;
	mul.f32 	%r1461, %r1461, %r2225;
	mul.f32 	%r1462, %r1462, %r2225;
	mul.f32 	%r1463, %r1463, %r2225;
	mul.f32 	%r1464, %r1464, %r2225;
	mul.f32 	%r1465, %r1465, %r2225;
	.loc	1 157 24                        // chunk_delta_h.py:157:24
	mul.f32 	%r1766, %r1766, %r2225;
	mul.f32 	%r1767, %r1767, %r2225;
	mul.f32 	%r1768, %r1768, %r2225;
	mul.f32 	%r1769, %r1769, %r2225;
	mul.f32 	%r1770, %r1770, %r2225;
	mul.f32 	%r1771, %r1771, %r2225;
	mul.f32 	%r1772, %r1772, %r2225;
	mul.f32 	%r1773, %r1773, %r2225;
	mul.f32 	%r1774, %r1774, %r2225;
	mul.f32 	%r1775, %r1775, %r2225;
	mul.f32 	%r1776, %r1776, %r2225;
	mul.f32 	%r1777, %r1777, %r2225;
	mul.f32 	%r1778, %r1778, %r2225;
	mul.f32 	%r1779, %r1779, %r2225;
	mul.f32 	%r1780, %r1780, %r2225;
	mul.f32 	%r1781, %r1781, %r2225;
	mul.f32 	%r1782, %r1782, %r2225;
	mul.f32 	%r1783, %r1783, %r2225;
	mul.f32 	%r1784, %r1784, %r2225;
	mul.f32 	%r1785, %r1785, %r2225;
	mul.f32 	%r1786, %r1786, %r2225;
	mul.f32 	%r1787, %r1787, %r2225;
	mul.f32 	%r1788, %r1788, %r2225;
	mul.f32 	%r1789, %r1789, %r2225;
	mul.f32 	%r1790, %r1790, %r2225;
	mul.f32 	%r1791, %r1791, %r2225;
	mul.f32 	%r1792, %r1792, %r2225;
	mul.f32 	%r1793, %r1793, %r2225;
	mul.f32 	%r1794, %r1794, %r2225;
	mul.f32 	%r1795, %r1795, %r2225;
	mul.f32 	%r1796, %r1796, %r2225;
	mul.f32 	%r1797, %r1797, %r2225;
	.loc	1 179 21                        // chunk_delta_h.py:179:21
	bar.sync 	0;
	cvt.rn.bf16x2.f32 	%r1351, %r2193, %r2192;
	cvt.rn.bf16x2.f32 	%r1352, %r2195, %r2194;
	cvt.rn.bf16x2.f32 	%r1353, %r2197, %r2196;
	cvt.rn.bf16x2.f32 	%r1354, %r2199, %r2198;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1350], {%r1351, %r1352, %r1353, %r1354};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1356, %r2201, %r2200;
	cvt.rn.bf16x2.f32 	%r1357, %r2203, %r2202;
	cvt.rn.bf16x2.f32 	%r1358, %r2205, %r2204;
	cvt.rn.bf16x2.f32 	%r1359, %r2207, %r2206;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1355], {%r1356, %r1357, %r1358, %r1359};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1361, %r2209, %r2208;
	cvt.rn.bf16x2.f32 	%r1362, %r2211, %r2210;
	cvt.rn.bf16x2.f32 	%r1363, %r2213, %r2212;
	cvt.rn.bf16x2.f32 	%r1364, %r2215, %r2214;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1360], {%r1361, %r1362, %r1363, %r1364};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1366, %r2217, %r2216;
	cvt.rn.bf16x2.f32 	%r1367, %r2219, %r2218;
	cvt.rn.bf16x2.f32 	%r1368, %r2221, %r2220;
	cvt.rn.bf16x2.f32 	%r1369, %r2223, %r2222;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1365], {%r1366, %r1367, %r1368, %r1369};
	// end inline asm
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s32 	%r1658, %r443, %r2089;
	.loc	1 186 28                        // chunk_delta_h.py:186:28
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2227, %r1658, 4, 14;
	cvt.u64.u32 	%rd317, %r2227;
	or.b64 	%rd255, %rd317, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465}, %rd255, %rd256, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2228, %r1658, 2048;
	bfe.u32 	%r2229, %r2228, 4, 14;
	cvt.u64.u32 	%rd318, %r2229;
	or.b64 	%rd257, %rd318, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465}, %rd257, %rd258, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2230, %r1658, 4096;
	bfe.u32 	%r2231, %r2230, 4, 14;
	cvt.u64.u32 	%rd319, %r2231;
	or.b64 	%rd259, %rd319, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465}, %rd259, %rd260, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2232, %r1658, 6144;
	bfe.u32 	%r2233, %r2232, 4, 14;
	cvt.u64.u32 	%rd320, %r2233;
	or.b64 	%rd261, %rd320, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465}, %rd261, %rd262, %p69, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1661, %r1699;
	mov.b32 	%r1659, %r956;
	mov.b32 	%r1660, %r956;
	mov.b32 	%r1662, %r956;
	mov.b32 	%r1663, %r956;
	// begin inline asm
	// wait for regs: %r1434,%r1435,%r1436,%r1437,%r1438,%r1439,%r1440,%r1441,%r1442,%r1443,%r1444,%r1445,%r1446,%r1447,%r1448,%r1449,%r1450,%r1451,%r1452,%r1453,%r1454,%r1455,%r1456,%r1457,%r1458,%r1459,%r1460,%r1461,%r1462,%r1463,%r1464,%r1465,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s32 	%r1990, %r444, %r2089;
	.loc	1 193 32                        // chunk_delta_h.py:193:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2235, %r1990, 4, 14;
	cvt.u64.u32 	%rd321, %r2235;
	or.b64 	%rd263, %rd321, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1766,%r1767,%r1768,%r1769,%r1770,%r1771,%r1772,%r1773,%r1774,%r1775,%r1776,%r1777,%r1778,%r1779,%r1780,%r1781,%r1782,%r1783,%r1784,%r1785,%r1786,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797}, %rd263, %rd256, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2236, %r1990, 2048;
	bfe.u32 	%r2237, %r2236, 4, 14;
	cvt.u64.u32 	%rd322, %r2237;
	or.b64 	%rd265, %rd322, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1766,%r1767,%r1768,%r1769,%r1770,%r1771,%r1772,%r1773,%r1774,%r1775,%r1776,%r1777,%r1778,%r1779,%r1780,%r1781,%r1782,%r1783,%r1784,%r1785,%r1786,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797}, %rd265, %rd258, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2238, %r1990, 4096;
	bfe.u32 	%r2239, %r2238, 4, 14;
	cvt.u64.u32 	%rd323, %r2239;
	or.b64 	%rd267, %rd323, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1766,%r1767,%r1768,%r1769,%r1770,%r1771,%r1772,%r1773,%r1774,%r1775,%r1776,%r1777,%r1778,%r1779,%r1780,%r1781,%r1782,%r1783,%r1784,%r1785,%r1786,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797}, %rd267, %rd260, %p69, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2240, %r1990, 6144;
	bfe.u32 	%r2241, %r2240, 4, 14;
	cvt.u64.u32 	%rd324, %r2241;
	or.b64 	%rd269, %rd324, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1766,%r1767,%r1768,%r1769,%r1770,%r1771,%r1772,%r1773,%r1774,%r1775,%r1776,%r1777,%r1778,%r1779,%r1780,%r1781,%r1782,%r1783,%r1784,%r1785,%r1786,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797}, %rd269, %rd262, %p69, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1991, %r956;
	mov.b32 	%r1992, %r956;
	mov.b32 	%r1994, %r956;
	mov.b32 	%r1995, %r956;
	mov.b32 	%r1993, %r1699;
	// begin inline asm
	// wait for regs: %r1766,%r1767,%r1768,%r1769,%r1770,%r1771,%r1772,%r1773,%r1774,%r1775,%r1776,%r1777,%r1778,%r1779,%r1780,%r1781,%r1782,%r1783,%r1784,%r1785,%r1786,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1990,%r1991,%r1992,%r1993,%r1994,%r1995
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 125 83                        // chunk_delta_h.py:125:83
	add.s32 	%r2242, %r2405, 192;
	cvt.s64.s32 	%rd325, %r2242;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	or.b64 	%rd326, %rd325, %rd7;
	or.b64 	%rd327, %rd325, %rd8;
	or.b64 	%rd328, %rd325, %rd9;
	or.b64 	%rd329, %rd325, %rd10;
	or.b64 	%rd330, %rd325, %rd12;
	or.b64 	%rd331, %rd325, %rd13;
	shl.b64 	%rd332, %rd326, 12;
	shl.b64 	%rd333, %rd327, 12;
	shl.b64 	%rd334, %rd328, 12;
	shl.b64 	%rd335, %rd329, 12;
	or.b64 	%rd336, %rd332, %rd11;
	or.b64 	%rd337, %rd333, %rd11;
	or.b64 	%rd338, %rd334, %rd11;
	or.b64 	%rd339, %rd335, %rd11;
	shl.b64 	%rd340, %rd336, 1;
	add.s64 	%rd271, %rd4, %rd340;
	shl.b64 	%rd341, %rd337, 1;
	add.s64 	%rd272, %rd4, %rd341;
	shl.b64 	%rd342, %rd338, 1;
	add.s64 	%rd273, %rd4, %rd342;
	shl.b64 	%rd343, %rd339, 1;
	add.s64 	%rd274, %rd4, %rd343;
	setp.gt.s32 	%p97, %r2242, -1;
	setp.lt.s64 	%p98, %rd326, %rd19;
	setp.lt.s64 	%p99, %rd327, %rd19;
	setp.lt.s64 	%p100, %rd328, %rd19;
	setp.lt.s64 	%p101, %rd329, %rd19;
	and.pred 	%p102, %p97, %p98;
	and.pred 	%p103, %p97, %p99;
	and.pred 	%p104, %p97, %p100;
	and.pred 	%p105, %p97, %p101;
	shl.b32 	%r2243, %r2473, 13;
	add.s32 	%r2244, %r420, %r2243;
	add.s32 	%r2034, %r2244, %r419;
	add.s32 	%r2036, %r2244, %r424;
	add.s32 	%r2038, %r2244, %r426;
	add.s32 	%r2040, %r2244, %r428;
	selp.b32 	%r2249, 16, 0, %p102;
	selp.b32 	%r2043, %r2249, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2034 + 0 ], [ %rd271 + 0 ], 0x10, %r2043;
	// end inline asm
	selp.b32 	%r2250, 16, 0, %p103;
	selp.b32 	%r2045, %r2250, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2036 + 0 ], [ %rd272 + 0 ], 0x10, %r2045;
	// end inline asm
	selp.b32 	%r2251, 16, 0, %p104;
	selp.b32 	%r2047, %r2251, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2038 + 0 ], [ %rd273 + 0 ], 0x10, %r2047;
	// end inline asm
	selp.b32 	%r2252, 16, 0, %p105;
	selp.b32 	%r2049, %r2252, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2040 + 0 ], [ %rd274 + 0 ], 0x10, %r2049;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd275, %rd271, 128;
	add.s64 	%rd276, %rd272, 128;
	add.s64 	%rd277, %rd273, 128;
	add.s64 	%rd278, %rd274, 128;
	add.s32 	%r2253, %r430, %r2243;
	add.s32 	%r2042, %r2253, %r419;
	add.s32 	%r2044, %r2253, %r424;
	add.s32 	%r2046, %r2253, %r426;
	add.s32 	%r2048, %r2253, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r2042 + 0 ], [ %rd275 + 0 ], 0x10, %r2043;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2044 + 0 ], [ %rd276 + 0 ], 0x10, %r2045;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2046 + 0 ], [ %rd277 + 0 ], 0x10, %r2047;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2048 + 0 ], [ %rd278 + 0 ], 0x10, %r2049;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd379, %rd332, %rd14;
	add.s64 	%rd378, %rd333, %rd14;
	add.s64 	%rd377, %rd334, %rd14;
	add.s64 	%rd376, %rd335, %rd14;
	shl.b64 	%rd344, %rd379, 1;
	add.s64 	%rd279, %rd2, %rd344;
	shl.b64 	%rd345, %rd378, 1;
	add.s64 	%rd280, %rd2, %rd345;
	shl.b64 	%rd346, %rd377, 1;
	add.s64 	%rd281, %rd2, %rd346;
	shl.b64 	%rd347, %rd376, 1;
	add.s64 	%rd282, %rd2, %rd347;
	and.pred 	%p130, %p61, %p102;
	and.pred 	%p129, %p61, %p103;
	and.pred 	%p128, %p61, %p104;
	and.pred 	%p127, %p61, %p105;
	shl.b32 	%r2254, %r2471, 13;
	add.s32 	%r2255, %r2107, %r2254;
	add.s32 	%r2050, %r2255, %r434;
	add.s32 	%r2052, %r2050, 2048;
	add.s32 	%r2054, %r2050, 4096;
	add.s32 	%r2056, %r2050, 6144;
	selp.b32 	%r2257, 16, 0, %p130;
	selp.b32 	%r2051, %r2257, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2050 + 0 ], [ %rd279 + 0 ], 0x10, %r2051;
	// end inline asm
	selp.b32 	%r2258, 16, 0, %p129;
	selp.b32 	%r2053, %r2258, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2052 + 0 ], [ %rd280 + 0 ], 0x10, %r2053;
	// end inline asm
	selp.b32 	%r2259, 16, 0, %p128;
	selp.b32 	%r2055, %r2259, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2054 + 0 ], [ %rd281 + 0 ], 0x10, %r2055;
	// end inline asm
	selp.b32 	%r2260, 16, 0, %p127;
	selp.b32 	%r2057, %r2260, 0, %p90;
	// begin inline asm
	cp.async.cg.shared.global [ %r2056 + 0 ], [ %rd282 + 0 ], 0x10, %r2057;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b64 	%rd348, %rd330, 7;
	add.s64 	%rd283, %rd20, %rd348;
	shl.b64 	%rd349, %rd331, 7;
	add.s64 	%rd284, %rd20, %rd349;
	setp.lt.s64 	%p106, %rd330, %rd19;
	setp.lt.s64 	%p107, %rd331, %rd19;
	shl.b32 	%r2261, %r2471, 8;
	add.s32 	%r2262, %r2178, %r2261;
	add.s32 	%r2058, %r2262, %r2180;
	add.s32 	%r2060, %r2058, 32;
	selp.b32 	%r2263, 4, 0, %p106;
	selp.b32 	%r2264, %r2263, 0, %p97;
	selp.b32 	%r2059, %r2264, 0, %p90;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r2058 + 0 ], [ %rd283 + 0 ], 0x4, %r2059;
	// end inline asm
	selp.b32 	%r2265, 4, 0, %p107;
	selp.b32 	%r2266, %r2265, 0, %p97;
	selp.b32 	%r2061, %r2266, 0, %p90;
	// begin inline asm
	@%p30 cp.async.ca.shared.global [ %r2060 + 0 ], [ %rd284 + 0 ], 0x4, %r2061;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd285, %rd3, %rd340;
	add.s64 	%rd286, %rd3, %rd341;
	add.s64 	%rd287, %rd3, %rd342;
	add.s64 	%rd288, %rd3, %rd343;
	add.s32 	%r2267, %r443, %r2243;
	bar.sync 	0;
	add.s32 	%r2062, %r2267, %r419;
	add.s32 	%r2064, %r2267, %r424;
	add.s32 	%r2066, %r2267, %r426;
	add.s32 	%r2068, %r2267, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r2062 + 0 ], [ %rd285 + 0 ], 0x10, %r2043;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2064 + 0 ], [ %rd286 + 0 ], 0x10, %r2045;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2066 + 0 ], [ %rd287 + 0 ], 0x10, %r2047;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2068 + 0 ], [ %rd288 + 0 ], 0x10, %r2049;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd289, %rd285, 128;
	add.s64 	%rd290, %rd286, 128;
	add.s64 	%rd291, %rd287, 128;
	add.s64 	%rd292, %rd288, 128;
	add.s32 	%r2268, %r444, %r2243;
	add.s32 	%r2070, %r2268, %r419;
	add.s32 	%r2072, %r2268, %r424;
	add.s32 	%r2074, %r2268, %r426;
	add.s32 	%r2076, %r2268, %r428;
	// begin inline asm
	cp.async.cg.shared.global [ %r2070 + 0 ], [ %rd289 + 0 ], 0x10, %r2043;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2072 + 0 ], [ %rd290 + 0 ], 0x10, %r2045;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2074 + 0 ], [ %rd291 + 0 ], 0x10, %r2047;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2076 + 0 ], [ %rd292 + 0 ], 0x10, %r2049;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s32 	%r2404, %r2404, 524288;
	setp.ne.s64 	%p108, %rd54, %rd375;
	mov.b32 	%r2405, %r116;
	mov.pred 	%p135, %p18;
	mov.pred 	%p136, %p19;
	mov.pred 	%p137, %p20;
	mov.pred 	%p138, %p21;
	mov.b64 	%rd384, %rd60;
	mov.b64 	%rd385, %rd61;
	mov.b64 	%rd386, %rd62;
	mov.b64 	%rd387, %rd63;
	@%p108 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	cvt.u32.u64 	%r2333, %rd6;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.gt.s32 	%p125, %r2333, -1;
	.loc	1 95 18                         // chunk_delta_h.py:95:18
	mul.wide.u32 	%rd366, %r2, 4;
	add.s64 	%rd367, %rd73, %rd366;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 211 23                        // chunk_delta_h.py:211:23
	shl.b32 	%r2334, %r3, 2;
	and.b32 	%r2335, %r2334, 60;
	cvt.u64.u32 	%rd368, %r2335;
	or.b64 	%rd369, %rd368, %rd6;
	shl.b32 	%r2336, %r3, 5;
	and.b32 	%r2337, %r2336, 3584;
	cvt.u64.u32 	%rd370, %r2337;
	add.s64 	%rd371, %rd367, %rd370;
	shl.b64 	%rd372, %rd369, 2;
	add.s64 	%rd350, %rd371, %rd372;
	add.s64 	%rd351, %rd350, 4096;
	add.s64 	%rd352, %rd350, 8192;
	add.s64 	%rd353, %rd350, 12288;
	add.s64 	%rd354, %rd350, 16384;
	add.s64 	%rd355, %rd350, 20480;
	add.s64 	%rd356, %rd350, 24576;
	or.b32 	%r2338, %r2337, 28672;
	cvt.u64.u32 	%rd373, %r2338;
	add.s64 	%rd374, %rd367, %rd373;
	add.s64 	%rd357, %rd374, %rd372;
	setp.lt.s64 	%p126, %rd369, 128;
	and.pred 	%p109, %p125, %p126;
	shl.b32 	%r2339, %r3, 1;
	and.b32 	%r2340, %r2339, 6;
	shl.b32 	%r2341, %r3, 4;
	and.b32 	%r2342, %r2341, 192;
	or.b32 	%r2343, %r2342, %r2340;
	shl.b32 	%r2344, %r6, 4;
	or.b32 	%r2345, %r2343, %r2344;
	and.b32 	%r2346, %r2336, 3072;
	or.b32 	%r2347, %r2345, %r2346;
	and.b32 	%r2348, %r2334, 508;
	shr.u32 	%r2349, %r2347, 2;
	and.b32 	%r2350, %r2349, 892;
	add.s32 	%r2352, %r420, %r2350;
	shl.b32 	%r2353, %r2347, 2;
	add.s32 	%r2354, %r2352, %r2353;
	st.shared.v2.b32 	[%r2354], {%r1434, %r1435};
	or.b32 	%r2355, %r2347, 512;
	shr.u32 	%r2356, %r2355, 2;
	and.b32 	%r2357, %r2356, 1020;
	add.s32 	%r2358, %r420, %r2357;
	add.s32 	%r2359, %r2358, %r2353;
	st.shared.v2.b32 	[%r2359+2048], {%r1436, %r1437};
	st.shared.v2.b32 	[%r2354+32], {%r1438, %r1439};
	st.shared.v2.b32 	[%r2359+2080], {%r1440, %r1441};
	st.shared.v2.b32 	[%r2354+64], {%r1442, %r1443};
	and.b32 	%r2360, %r2356, 1008;
	add.s32 	%r2361, %r420, %r2360;
	add.s32 	%r2362, %r2361, %r2353;
	st.shared.v2.b32 	[%r2362+2112], {%r1444, %r1445};
	st.shared.v2.b32 	[%r2354+96], {%r1446, %r1447};
	st.shared.v2.b32 	[%r2362+2144], {%r1448, %r1449};
	st.shared.v2.b32 	[%r2354+128], {%r1450, %r1451};
	st.shared.v2.b32 	[%r2362+2176], {%r1452, %r1453};
	st.shared.v2.b32 	[%r2354+160], {%r1454, %r1455};
	st.shared.v2.b32 	[%r2362+2208], {%r1456, %r1457};
	st.shared.v2.b32 	[%r2354+192], {%r1458, %r1459};
	st.shared.v2.b32 	[%r2362+2240], {%r1460, %r1461};
	st.shared.v2.b32 	[%r2354+224], {%r1462, %r1463};
	st.shared.v2.b32 	[%r2362+2272], {%r1464, %r1465};
	bar.sync 	0;
	and.b32 	%r2363, %r11, 28;
	shl.b32 	%r2364, %r2363, 2;
	add.s32 	%r2365, %r420, %r2364;
	shl.b32 	%r2366, %r2348, 2;
	add.s32 	%r2367, %r2365, %r2366;
	ld.shared.v4.b32 	{%r2269, %r2270, %r2271, %r2272}, [%r2367];
	or.b32 	%r2368, %r2348, 512;
	shr.u32 	%r2369, %r2368, 2;
	and.b32 	%r2370, %r2369, 240;
	add.s32 	%r2371, %r420, %r2370;
	add.s32 	%r2372, %r2371, %r2366;
	ld.shared.v4.b32 	{%r2273, %r2274, %r2275, %r2276}, [%r2372+2048];
	or.b32 	%r2373, %r2348, 1024;
	shr.u32 	%r2374, %r2373, 2;
	and.b32 	%r2375, %r2374, 368;
	add.s32 	%r2376, %r420, %r2375;
	add.s32 	%r2377, %r2376, %r2366;
	ld.shared.v4.b32 	{%r2277, %r2278, %r2279, %r2280}, [%r2377+4096];
	or.b32 	%r2378, %r2348, 1536;
	shr.u32 	%r2379, %r2378, 2;
	and.b32 	%r2380, %r2379, 496;
	add.s32 	%r2381, %r420, %r2380;
	add.s32 	%r2382, %r2381, %r2366;
	ld.shared.v4.b32 	{%r2281, %r2282, %r2283, %r2284}, [%r2382+6144];
	or.b32 	%r2383, %r2348, 2048;
	shr.u32 	%r2384, %r2383, 2;
	and.b32 	%r2385, %r2384, 624;
	add.s32 	%r2386, %r420, %r2385;
	add.s32 	%r2387, %r2386, %r2366;
	ld.shared.v4.b32 	{%r2285, %r2286, %r2287, %r2288}, [%r2387+8192];
	or.b32 	%r2388, %r2348, 2560;
	shr.u32 	%r2389, %r2388, 2;
	and.b32 	%r2390, %r2389, 752;
	add.s32 	%r2391, %r420, %r2390;
	add.s32 	%r2392, %r2391, %r2366;
	ld.shared.v4.b32 	{%r2289, %r2290, %r2291, %r2292}, [%r2392+10240];
	or.b32 	%r2393, %r2348, 3072;
	shr.u32 	%r2394, %r2393, 2;
	and.b32 	%r2395, %r2394, 880;
	add.s32 	%r2396, %r420, %r2395;
	add.s32 	%r2397, %r2396, %r2366;
	ld.shared.v4.b32 	{%r2293, %r2294, %r2295, %r2296}, [%r2397+12288];
	or.b32 	%r2398, %r2334, 3584;
	shr.u32 	%r2399, %r2398, 2;
	and.b32 	%r2400, %r2399, 1008;
	add.s32 	%r2401, %r420, %r2400;
	shl.b32 	%r2402, %r2398, 2;
	add.s32 	%r2403, %r2401, %r2402;
	ld.shared.v4.b32 	{%r2297, %r2298, %r2299, %r2300}, [%r2403];
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd350 + 0 ], { %r2269, %r2270, %r2271, %r2272 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd351 + 0 ], { %r2273, %r2274, %r2275, %r2276 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd352 + 0 ], { %r2277, %r2278, %r2279, %r2280 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd353 + 0 ], { %r2281, %r2282, %r2283, %r2284 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd354 + 0 ], { %r2285, %r2286, %r2287, %r2288 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd355 + 0 ], { %r2289, %r2290, %r2291, %r2292 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd356 + 0 ], { %r2293, %r2294, %r2295, %r2296 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd357 + 0 ], { %r2297, %r2298, %r2299, %r2300 };
	// end inline asm
	.loc	1 214 27                        // chunk_delta_h.py:214:27
	add.s64 	%rd358, %rd350, 32768;
	add.s64 	%rd359, %rd350, 36864;
	add.s64 	%rd360, %rd350, 40960;
	add.s64 	%rd361, %rd350, 45056;
	add.s64 	%rd362, %rd350, 49152;
	add.s64 	%rd363, %rd350, 53248;
	add.s64 	%rd364, %rd350, 57344;
	add.s64 	%rd365, %rd357, 32768;
	bar.sync 	0;
	st.shared.v2.b32 	[%r2354], {%r1766, %r1767};
	st.shared.v2.b32 	[%r2359+2048], {%r1768, %r1769};
	st.shared.v2.b32 	[%r2354+32], {%r1770, %r1771};
	st.shared.v2.b32 	[%r2359+2080], {%r1772, %r1773};
	st.shared.v2.b32 	[%r2354+64], {%r1774, %r1775};
	st.shared.v2.b32 	[%r2362+2112], {%r1776, %r1777};
	st.shared.v2.b32 	[%r2354+96], {%r1778, %r1779};
	st.shared.v2.b32 	[%r2362+2144], {%r1780, %r1781};
	st.shared.v2.b32 	[%r2354+128], {%r1782, %r1783};
	st.shared.v2.b32 	[%r2362+2176], {%r1784, %r1785};
	st.shared.v2.b32 	[%r2354+160], {%r1786, %r1787};
	st.shared.v2.b32 	[%r2362+2208], {%r1788, %r1789};
	st.shared.v2.b32 	[%r2354+192], {%r1790, %r1791};
	st.shared.v2.b32 	[%r2362+2240], {%r1792, %r1793};
	st.shared.v2.b32 	[%r2354+224], {%r1794, %r1795};
	st.shared.v2.b32 	[%r2362+2272], {%r1796, %r1797};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r2305, %r2306, %r2307, %r2308}, [%r2372+2048];
	ld.shared.v4.b32 	{%r2309, %r2310, %r2311, %r2312}, [%r2377+4096];
	ld.shared.v4.b32 	{%r2313, %r2314, %r2315, %r2316}, [%r2382+6144];
	ld.shared.v4.b32 	{%r2317, %r2318, %r2319, %r2320}, [%r2387+8192];
	ld.shared.v4.b32 	{%r2321, %r2322, %r2323, %r2324}, [%r2392+10240];
	ld.shared.v4.b32 	{%r2325, %r2326, %r2327, %r2328}, [%r2397+12288];
	ld.shared.v4.b32 	{%r2329, %r2330, %r2331, %r2332}, [%r2403];
	ld.shared.v4.b32 	{%r2301, %r2302, %r2303, %r2304}, [%r2367];
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd358 + 0 ], { %r2301, %r2302, %r2303, %r2304 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd359 + 0 ], { %r2305, %r2306, %r2307, %r2308 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd360 + 0 ], { %r2309, %r2310, %r2311, %r2312 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd361 + 0 ], { %r2313, %r2314, %r2315, %r2316 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd362 + 0 ], { %r2317, %r2318, %r2319, %r2320 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd363 + 0 ], { %r2321, %r2322, %r2323, %r2324 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd364 + 0 ], { %r2325, %r2326, %r2327, %r2328 };
	// end inline asm
	// begin inline asm
	@%p109 st.global.v4.b32 [ %rd365 + 0 ], { %r2329, %r2330, %r2331, %r2332 };
	// end inline asm
	.loc	1 209 4                         // chunk_delta_h.py:209:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 216                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd1 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 104
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x7c:0x31 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 104
.b8 95
.b8 98
.b8 108
.b8 111
.b8 99
.b8 107
.b8 100
.b8 105
.b8 109
.b8 54
.b8 52
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0xad:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 124                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xc2:0x18 DW_TAG_inlined_subroutine
.b32 124                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
