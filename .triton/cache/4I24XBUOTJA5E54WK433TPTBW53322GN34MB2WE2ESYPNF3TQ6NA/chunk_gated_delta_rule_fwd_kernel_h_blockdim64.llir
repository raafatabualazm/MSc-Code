; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 5, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = lshr i32 %33, 5, !dbg !29
  %35 = lshr i32 %33, 2, !dbg !29
  %36 = and i32 %35, 7, !dbg !29
  %37 = and i32 %33, 32, !dbg !29
  %38 = icmp eq i32 %37, 0, !dbg !29
  %39 = and i32 %35, 15, !dbg !29
  %40 = and i32 %33, 64, !dbg !29
  %41 = lshr exact i32 %40, 2, !dbg !29
  %42 = or disjoint i32 %39, %41, !dbg !29
  %43 = or disjoint i32 %42, 32, !dbg !29
  %44 = lshr i32 %33, 3, !dbg !29
  %45 = and i32 %44, 15, !dbg !29
  %46 = or disjoint i32 %45, 16, !dbg !29
  %47 = or disjoint i32 %45, 32, !dbg !29
  %48 = or disjoint i32 %45, 48, !dbg !29
  %49 = and i32 %33, 1, !dbg !29
  %50 = shl nuw nsw i32 %49, 3, !dbg !29
  %51 = shl nuw nsw i32 %33, 3, !dbg !29
  %52 = and i32 %51, 16, !dbg !29
  %53 = or disjoint i32 %50, %52, !dbg !29
  %54 = and i32 %51, 32, !dbg !29
  %55 = or disjoint i32 %53, %54, !dbg !29
  %56 = lshr i32 %33, 1, !dbg !29
  %57 = and i32 %56, 48, !dbg !29
  %58 = or disjoint i32 %57, %36, !dbg !29
  %59 = or disjoint i32 %58, 8, !dbg !29
  %60 = zext nneg i32 %42 to i64, !dbg !29
  %61 = zext nneg i32 %43 to i64, !dbg !29
  %62 = zext nneg i32 %45 to i64, !dbg !29
  %63 = zext nneg i32 %46 to i64, !dbg !29
  %64 = zext nneg i32 %47 to i64, !dbg !29
  %65 = zext nneg i32 %48 to i64, !dbg !29
  %66 = zext nneg i32 %55 to i64, !dbg !29
  %67 = zext nneg i32 %58 to i64, !dbg !29
  %68 = zext nneg i32 %59 to i64, !dbg !29
  %69 = zext nneg i32 %53 to i64, !dbg !29
  %70 = or disjoint i64 %69, %32, !dbg !29
  %71 = icmp sgt i32 %31, -1, !dbg !29
  %72 = icmp slt i64 %70, 128, !dbg !29
  %73 = and i1 %71, %72, !dbg !29
  %74 = or disjoint i64 %66, 64, !dbg !30
  %75 = sext i32 %7 to i64, !dbg !31
  %76 = sext i32 %23 to i64, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !32
  %78 = zext nneg i32 %12 to i64, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %77, i64 %78, !dbg !33
  %80 = icmp sgt i32 %13, 63, !dbg !34
  %81 = shl nuw nsw i64 %62, 12, !dbg !35
  %82 = shl nuw nsw i64 %63, 12, !dbg !35
  %83 = shl nuw nsw i64 %64, 12, !dbg !35
  %84 = shl nuw nsw i64 %65, 12, !dbg !35
  %85 = shl nuw nsw i64 %60, 12, !dbg !35
  %86 = shl nuw nsw i64 %61, 12, !dbg !35
  %87 = or disjoint i64 %81, %66, !dbg !35
  %88 = or disjoint i64 %82, %66, !dbg !35
  %89 = or disjoint i64 %83, %66, !dbg !35
  %90 = or disjoint i64 %84, %66, !dbg !35
  %91 = getelementptr bfloat, ptr addrspace(1) %29, i64 %87, !dbg !35
  %92 = getelementptr bfloat, ptr addrspace(1) %29, i64 %88, !dbg !35
  %93 = getelementptr bfloat, ptr addrspace(1) %29, i64 %89, !dbg !35
  %94 = getelementptr bfloat, ptr addrspace(1) %29, i64 %90, !dbg !35
  %95 = icmp slt i32 %45, %7, !dbg !35
  %96 = icmp slt i32 %46, %7, !dbg !35
  %97 = icmp slt i32 %47, %7, !dbg !35
  %98 = icmp slt i32 %48, %7, !dbg !35
  %99 = icmp slt i32 %42, %7, !dbg !35
  %100 = icmp slt i32 %43, %7, !dbg !35
  %101 = and i1 %95, %80, !dbg !34
  %102 = and i1 %96, %80, !dbg !34
  %103 = and i1 %97, %80, !dbg !34
  %104 = and i1 %98, %80, !dbg !34
  %105 = select i1 %38, i32 0, i32 288, !dbg !35
  %106 = shl nuw nsw i32 %40, 3, !dbg !35
  %107 = and i32 %33, 24, !dbg !35
  %108 = mul nuw nsw i32 %107, 9, !dbg !35
  %109 = or i32 %108, %105, !dbg !35
  %110 = or disjoint i32 %109, %106, !dbg !35
  %111 = xor i32 %110, %55, !dbg !35
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %111, !dbg !35
  %113 = or disjoint i32 %55, 1024, !dbg !35
  %114 = xor i32 %110, %113, !dbg !35
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %114, !dbg !35
  %116 = or disjoint i32 %55, 2048, !dbg !35
  %117 = xor i32 %110, %116, !dbg !35
  %118 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %117, !dbg !35
  %119 = or disjoint i32 %55, 3072, !dbg !35
  %120 = xor i32 %110, %119, !dbg !35
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %120, !dbg !35
  %122 = select i1 %101, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %112, ptr addrspace(1) %91, i32 %122) #2, !dbg !35
  %123 = select i1 %102, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %115, ptr addrspace(1) %92, i32 %123) #2, !dbg !35
  %124 = select i1 %103, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %118, ptr addrspace(1) %93, i32 %124) #2, !dbg !35
  %125 = select i1 %104, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %121, ptr addrspace(1) %94, i32 %125) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %126 = or disjoint i64 %74, %81, !dbg !36
  %127 = or disjoint i64 %74, %82, !dbg !36
  %128 = or disjoint i64 %74, %83, !dbg !36
  %129 = or disjoint i64 %74, %84, !dbg !36
  %130 = getelementptr bfloat, ptr addrspace(1) %29, i64 %126, !dbg !36
  %131 = getelementptr bfloat, ptr addrspace(1) %29, i64 %127, !dbg !36
  %132 = getelementptr bfloat, ptr addrspace(1) %29, i64 %128, !dbg !36
  %133 = getelementptr bfloat, ptr addrspace(1) %29, i64 %129, !dbg !36
  %134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %111, !dbg !36
  %135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %114, !dbg !36
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %117, !dbg !36
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %120, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %134, ptr addrspace(1) %130, i32 %122) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %135, ptr addrspace(1) %131, i32 %123) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %136, ptr addrspace(1) %132, i32 %124) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %137, ptr addrspace(1) %133, i32 %125) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %138 = add nsw i64 %85, %70, !dbg !37
  %139 = add nsw i64 %86, %70, !dbg !37
  %140 = getelementptr bfloat, ptr addrspace(1) %27, i64 %138, !dbg !37
  %141 = getelementptr bfloat, ptr addrspace(1) %27, i64 %139, !dbg !37
  %142 = and i1 %73, %99, !dbg !37
  %143 = and i1 %73, %100, !dbg !37
  %144 = and i1 %80, %142, !dbg !34
  %145 = and i1 %80, %143, !dbg !34
  %and.ra = and i32 %33, 24, !dbg !37
  %146 = xor i32 %53, %and.ra, !dbg !37
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 74752), i32 %146, !dbg !37
  %.idx = shl nuw nsw i32 %42, 6, !dbg !37
  %148 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 %.idx, !dbg !37
  %149 = getelementptr inbounds nuw i8, ptr addrspace(3) %148, i32 2048, !dbg !37
  %150 = select i1 %144, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %148, ptr addrspace(1) %140, i32 %150) #2, !dbg !37
  %151 = select i1 %145, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %141, i32 %151) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx6 = shl nuw nsw i64 %67, 7, !dbg !38
  %152 = getelementptr i8, ptr addrspace(1) %79, i64 %.idx6, !dbg !38
  %.idx7 = shl nuw nsw i64 %68, 7, !dbg !38
  %153 = getelementptr i8, ptr addrspace(1) %79, i64 %.idx7, !dbg !38
  %154 = icmp slt i32 %58, %7, !dbg !38
  %155 = icmp slt i32 %59, %7, !dbg !38
  %156 = and i1 %154, %80, !dbg !34
  %157 = and i1 %155, %80, !dbg !34
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 82944), i32 %58, !dbg !38
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 82944), i32 %59, !dbg !38
  %160 = and i32 %33, 3, !dbg !38
  %161 = icmp eq i32 %160, 0, !dbg !38
  %162 = select i1 %156, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %152, i32 %162, i1 %161) #2, !dbg !38
  %163 = select i1 %157, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %153, i32 %163, i1 %161) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %164 = getelementptr bfloat, ptr addrspace(1) %28, i64 %87, !dbg !39
  %165 = getelementptr bfloat, ptr addrspace(1) %28, i64 %88, !dbg !39
  %166 = getelementptr bfloat, ptr addrspace(1) %28, i64 %89, !dbg !39
  %167 = getelementptr bfloat, ptr addrspace(1) %28, i64 %90, !dbg !39
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %111, !dbg !39
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %114, !dbg !39
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %117, !dbg !39
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %120, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %168, ptr addrspace(1) %164, i32 %122) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %169, ptr addrspace(1) %165, i32 %123) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %170, ptr addrspace(1) %166, i32 %124) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %171, ptr addrspace(1) %167, i32 %125) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %172 = getelementptr bfloat, ptr addrspace(1) %28, i64 %126, !dbg !40
  %173 = getelementptr bfloat, ptr addrspace(1) %28, i64 %127, !dbg !40
  %174 = getelementptr bfloat, ptr addrspace(1) %28, i64 %128, !dbg !40
  %175 = getelementptr bfloat, ptr addrspace(1) %28, i64 %129, !dbg !40
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %111, !dbg !40
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %114, !dbg !40
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %117, !dbg !40
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %120, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %176, ptr addrspace(1) %172, i32 %122) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %177, ptr addrspace(1) %173, i32 %123) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %178, ptr addrspace(1) %174, i32 %124) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %179, ptr addrspace(1) %175, i32 %125) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %80, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %180 = add nsw i32 %14, -1
  %181 = shl nuw nsw i32 %49, 5
  %182 = and i32 %33, 6
  %183 = mul nuw nsw i32 %182, 36
  %184 = or i32 %183, %181
  %185 = shl nuw nsw i32 %33, 5
  %186 = and i32 %185, 256
  %187 = or disjoint i32 %184, %186
  %188 = lshr i32 %33, 1
  %189 = and i32 %188, 8
  %190 = xor i32 %187, %189
  %191 = shl nuw nsw i32 %37, 4
  %192 = or disjoint i32 %190, %191
  %193 = shl nuw nsw i32 %40, 4
  %194 = xor i32 %192, %193
  %195 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656), i32 %194
  %196 = ptrtoint ptr addrspace(3) %195 to i32
  %197 = xor i32 %194, 16
  %198 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656), i32 %197
  %199 = ptrtoint ptr addrspace(3) %198 to i32
  %.idx154 = shl nuw nsw i64 %60, 8
  %.idx155 = shl nuw nsw i64 %61, 8
  %200 = shl nuw nsw i32 %33, 5
  %201 = and i32 %200, 224
  %202 = or disjoint i32 %201, %186
  %203 = or disjoint i32 %202, %189
  %204 = or disjoint i32 %203, %191
  %205 = or disjoint i32 %204, %193
  %206 = and i32 %51, 448
  %207 = or disjoint i32 %55, %206
  %.reass = or disjoint i32 %207, %106
  %208 = lshr exact i32 %205, 2
  %209 = and i32 %208, 1073741816
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %209
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %210, i32 %205
  %212 = ptrtoint ptr addrspace(3) %211 to i32
  %213 = getelementptr inbounds nuw i8, ptr addrspace(3) %211, i32 32
  %214 = ptrtoint ptr addrspace(3) %213 to i32
  %215 = lshr exact i32 %.reass, 2
  %216 = and i32 %215, 1073741816
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %216
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %217, i32 %.reass
  %219 = xor i32 %.reass, 1024
  %220 = lshr exact i32 %219, 2
  %221 = and i32 %220, 1073741816
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %221
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %222, i32 %219
  %224 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848), i32 %194
  %225 = ptrtoint ptr addrspace(3) %224 to i32
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848), i32 %197
  %227 = ptrtoint ptr addrspace(3) %226 to i32
  %228 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656) to i32), 4
  %229 = and i32 %228, 16383
  %230 = zext nneg i32 %229 to i64
  %231 = or disjoint i64 %230, -9223371899399045120
  %232 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656) to i32), i32 1024), 4
  %233 = and i32 %232, 16383
  %234 = zext nneg i32 %233 to i64
  %235 = or disjoint i64 %234, -9223371899399045120
  %236 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656) to i32), i32 2048), 4
  %237 = and i32 %236, 16383
  %238 = zext nneg i32 %237 to i64
  %239 = or disjoint i64 %238, -9223371899399045120
  %240 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656) to i32), i32 3072), 4
  %241 = and i32 %240, 16383
  %242 = zext nneg i32 %241 to i64
  %243 = or disjoint i64 %242, -9223371899399045120
  %244 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848) to i32), 4
  %245 = and i32 %244, 16383
  %246 = zext nneg i32 %245 to i64
  %247 = or disjoint i64 %246, -9223371899399045120
  %248 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848) to i32), i32 1024), 4
  %249 = and i32 %248, 16383
  %250 = zext nneg i32 %249 to i64
  %251 = or disjoint i64 %250, -9223371899399045120
  %252 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848) to i32), i32 2048), 4
  %253 = and i32 %252, 16383
  %254 = zext nneg i32 %253 to i64
  %255 = or disjoint i64 %254, -9223371899399045120
  %256 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848) to i32), i32 3072), 4
  %257 = and i32 %256, 16383
  %258 = zext nneg i32 %257 to i64
  %259 = or disjoint i64 %258, -9223371899399045120
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %194
  %261 = ptrtoint ptr addrspace(3) %260 to i32
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %197
  %263 = ptrtoint ptr addrspace(3) %262 to i32
  %264 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536) to i32), 4
  %265 = and i32 %264, 16383
  %266 = zext nneg i32 %265 to i64
  %267 = or disjoint i64 %266, -9223371899399045120
  %268 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536) to i32), i32 1024), 4
  %269 = and i32 %268, 16383
  %270 = zext nneg i32 %269 to i64
  %271 = or disjoint i64 %270, -9223371899399045120
  %272 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536) to i32), i32 2048), 4
  %273 = and i32 %272, 16383
  %274 = zext nneg i32 %273 to i64
  %275 = or disjoint i64 %274, -9223371899399045120
  %276 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536) to i32), i32 3072), 4
  %277 = and i32 %276, 16383
  %278 = zext nneg i32 %277 to i64
  %279 = or disjoint i64 %278, -9223371899399045120
  %280 = sext i32 %180 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 74752), i32 %194
  %282 = ptrtoint ptr addrspace(3) %281 to i32
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 74752), i32 %197
  %284 = ptrtoint ptr addrspace(3) %283 to i32
  %285 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 82944), i32 %58
  %286 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 82944), i32 %59
  %287 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 4
  %288 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 8
  %289 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 12
  %290 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 4
  %291 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 8
  %292 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 12
  %293 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 4
  %294 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 8
  %295 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 12
  br label %296, !dbg !34

296:                                              ; preds = %.lr.ph, %296
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %296 ]
  %297 = phi i32 [ 0, %.lr.ph ], [ %714, %296 ]
  %.pn54284 = phi i1 [ %143, %.lr.ph ], [ %1116, %296 ]
  %.pn70283 = phi i1 [ %142, %.lr.ph ], [ %1115, %296 ]
  %.pn22282 = phi i64 [ %139, %.lr.ph ], [ %1112, %296 ]
  %.pn38281 = phi i64 [ %138, %.lr.ph ], [ %1111, %296 ]
  %298 = phi i32 [ -1, %.lr.ph ], [ %335, %296 ]
  %299 = phi i32 [ 0, %.lr.ph ], [ %1055, %296 ]
  %300 = phi float [ 0.000000e+00, %.lr.ph ], [ %1037, %296 ]
  %301 = phi float [ 0.000000e+00, %.lr.ph ], [ %1038, %296 ]
  %302 = phi float [ 0.000000e+00, %.lr.ph ], [ %1039, %296 ]
  %303 = phi float [ 0.000000e+00, %.lr.ph ], [ %1040, %296 ]
  %304 = phi float [ 0.000000e+00, %.lr.ph ], [ %1041, %296 ]
  %305 = phi float [ 0.000000e+00, %.lr.ph ], [ %1042, %296 ]
  %306 = phi float [ 0.000000e+00, %.lr.ph ], [ %1043, %296 ]
  %307 = phi float [ 0.000000e+00, %.lr.ph ], [ %1044, %296 ]
  %308 = phi float [ 0.000000e+00, %.lr.ph ], [ %1045, %296 ]
  %309 = phi float [ 0.000000e+00, %.lr.ph ], [ %1046, %296 ]
  %310 = phi float [ 0.000000e+00, %.lr.ph ], [ %1047, %296 ]
  %311 = phi float [ 0.000000e+00, %.lr.ph ], [ %1048, %296 ]
  %312 = phi float [ 0.000000e+00, %.lr.ph ], [ %1049, %296 ]
  %313 = phi float [ 0.000000e+00, %.lr.ph ], [ %1050, %296 ]
  %314 = phi float [ 0.000000e+00, %.lr.ph ], [ %1051, %296 ]
  %315 = phi float [ 0.000000e+00, %.lr.ph ], [ %1052, %296 ]
  %316 = phi float [ 0.000000e+00, %.lr.ph ], [ %931, %296 ]
  %317 = phi float [ 0.000000e+00, %.lr.ph ], [ %932, %296 ]
  %318 = phi float [ 0.000000e+00, %.lr.ph ], [ %933, %296 ]
  %319 = phi float [ 0.000000e+00, %.lr.ph ], [ %934, %296 ]
  %320 = phi float [ 0.000000e+00, %.lr.ph ], [ %935, %296 ]
  %321 = phi float [ 0.000000e+00, %.lr.ph ], [ %936, %296 ]
  %322 = phi float [ 0.000000e+00, %.lr.ph ], [ %937, %296 ]
  %323 = phi float [ 0.000000e+00, %.lr.ph ], [ %938, %296 ]
  %324 = phi float [ 0.000000e+00, %.lr.ph ], [ %939, %296 ]
  %325 = phi float [ 0.000000e+00, %.lr.ph ], [ %940, %296 ]
  %326 = phi float [ 0.000000e+00, %.lr.ph ], [ %941, %296 ]
  %327 = phi float [ 0.000000e+00, %.lr.ph ], [ %942, %296 ]
  %328 = phi float [ 0.000000e+00, %.lr.ph ], [ %943, %296 ]
  %329 = phi float [ 0.000000e+00, %.lr.ph ], [ %944, %296 ]
  %330 = phi float [ 0.000000e+00, %.lr.ph ], [ %945, %296 ]
  %331 = phi float [ 0.000000e+00, %.lr.ph ], [ %946, %296 ]
  %332 = icmp slt i64 %indvars.iv, %280, !dbg !34
  %333 = add i32 %298, 1, !dbg !34
  %334 = icmp sgt i32 %333, 1, !dbg !34
  %335 = select i1 %334, i32 0, i32 %333, !dbg !34
  %336 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %337 = shl i32 %336, 19, !dbg !41
  %338 = sext i32 %337 to i64, !dbg !42
  %339 = getelementptr bfloat, ptr addrspace(1) %21, i64 %338, !dbg !42
  %340 = fptrunc float %316 to bfloat, !dbg !43
  %341 = fptrunc float %317 to bfloat, !dbg !43
  %342 = fptrunc float %318 to bfloat, !dbg !43
  %343 = fptrunc float %319 to bfloat, !dbg !43
  %344 = fptrunc float %320 to bfloat, !dbg !43
  %345 = fptrunc float %321 to bfloat, !dbg !43
  %346 = fptrunc float %322 to bfloat, !dbg !43
  %347 = fptrunc float %323 to bfloat, !dbg !43
  %348 = fptrunc float %324 to bfloat, !dbg !43
  %349 = fptrunc float %325 to bfloat, !dbg !43
  %350 = fptrunc float %326 to bfloat, !dbg !43
  %351 = fptrunc float %327 to bfloat, !dbg !43
  %352 = fptrunc float %328 to bfloat, !dbg !43
  %353 = fptrunc float %329 to bfloat, !dbg !43
  %354 = fptrunc float %330 to bfloat, !dbg !43
  %355 = fptrunc float %331 to bfloat, !dbg !43
  %356 = insertelement <2 x bfloat> poison, bfloat %340, i64 0, !dbg !43
  %357 = insertelement <2 x bfloat> %356, bfloat %341, i64 1, !dbg !43
  %358 = bitcast <2 x bfloat> %357 to i32, !dbg !43
  %359 = insertelement <2 x bfloat> poison, bfloat %342, i64 0, !dbg !43
  %360 = insertelement <2 x bfloat> %359, bfloat %343, i64 1, !dbg !43
  %361 = bitcast <2 x bfloat> %360 to i32, !dbg !43
  %362 = insertelement <2 x bfloat> poison, bfloat %344, i64 0, !dbg !43
  %363 = insertelement <2 x bfloat> %362, bfloat %345, i64 1, !dbg !43
  %364 = bitcast <2 x bfloat> %363 to i32, !dbg !43
  %365 = insertelement <2 x bfloat> poison, bfloat %346, i64 0, !dbg !43
  %366 = insertelement <2 x bfloat> %365, bfloat %347, i64 1, !dbg !43
  %367 = bitcast <2 x bfloat> %366 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %196, i32 %358, i32 %361, i32 %364, i32 %367) #2, !dbg !43
  %368 = insertelement <2 x bfloat> poison, bfloat %348, i64 0, !dbg !43
  %369 = insertelement <2 x bfloat> %368, bfloat %349, i64 1, !dbg !43
  %370 = bitcast <2 x bfloat> %369 to i32, !dbg !43
  %371 = insertelement <2 x bfloat> poison, bfloat %350, i64 0, !dbg !43
  %372 = insertelement <2 x bfloat> %371, bfloat %351, i64 1, !dbg !43
  %373 = bitcast <2 x bfloat> %372 to i32, !dbg !43
  %374 = insertelement <2 x bfloat> poison, bfloat %352, i64 0, !dbg !43
  %375 = insertelement <2 x bfloat> %374, bfloat %353, i64 1, !dbg !43
  %376 = bitcast <2 x bfloat> %375 to i32, !dbg !43
  %377 = insertelement <2 x bfloat> poison, bfloat %354, i64 0, !dbg !43
  %378 = insertelement <2 x bfloat> %377, bfloat %355, i64 1, !dbg !43
  %379 = bitcast <2 x bfloat> %378 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %199, i32 %370, i32 %373, i32 %376, i32 %379) #2, !dbg !43
  %380 = getelementptr i8, ptr addrspace(1) %339, i64 %.idx154, !dbg !29
  %381 = getelementptr bfloat, ptr addrspace(1) %380, i64 %70, !dbg !29
  %382 = getelementptr i8, ptr addrspace(1) %339, i64 %.idx155, !dbg !29
  %383 = getelementptr bfloat, ptr addrspace(1) %382, i64 %70, !dbg !29
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %212, i32 %358, i32 %361, i32 %364, i32 %367) #2, !dbg !29
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %214, i32 %370, i32 %373, i32 %376, i32 %379) #2, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %384 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !29
  %.extract233 = load i32, ptr addrspace(3) %218, align 16, !dbg !29
  %.extract235 = load i32, ptr addrspace(3) %287, align 4, !dbg !29
  %.extract237 = load i32, ptr addrspace(3) %288, align 8, !dbg !29
  %.extract239 = load i32, ptr addrspace(3) %289, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract233, i32 %.extract235, i32 %.extract237, i32 %.extract239, ptr addrspace(1) %381, i1 %73) #2, !dbg !29
  %.extract241 = extractelement <4 x i32> %384, i64 0, !dbg !29
  %.extract243 = extractelement <4 x i32> %384, i64 1, !dbg !29
  %.extract245 = extractelement <4 x i32> %384, i64 2, !dbg !29
  %.extract247 = extractelement <4 x i32> %384, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract241, i32 %.extract243, i32 %.extract245, i32 %.extract247, ptr addrspace(1) %383, i1 %73) #2, !dbg !29
  %385 = fptrunc float %300 to bfloat, !dbg !44
  %386 = fptrunc float %301 to bfloat, !dbg !44
  %387 = fptrunc float %302 to bfloat, !dbg !44
  %388 = fptrunc float %303 to bfloat, !dbg !44
  %389 = fptrunc float %304 to bfloat, !dbg !44
  %390 = fptrunc float %305 to bfloat, !dbg !44
  %391 = fptrunc float %306 to bfloat, !dbg !44
  %392 = fptrunc float %307 to bfloat, !dbg !44
  %393 = fptrunc float %308 to bfloat, !dbg !44
  %394 = fptrunc float %309 to bfloat, !dbg !44
  %395 = fptrunc float %310 to bfloat, !dbg !44
  %396 = fptrunc float %311 to bfloat, !dbg !44
  %397 = fptrunc float %312 to bfloat, !dbg !44
  %398 = fptrunc float %313 to bfloat, !dbg !44
  %399 = fptrunc float %314 to bfloat, !dbg !44
  %400 = fptrunc float %315 to bfloat, !dbg !44
  %401 = insertelement <2 x bfloat> poison, bfloat %385, i64 0, !dbg !44
  %402 = insertelement <2 x bfloat> %401, bfloat %386, i64 1, !dbg !44
  %403 = bitcast <2 x bfloat> %402 to i32, !dbg !44
  %404 = insertelement <2 x bfloat> poison, bfloat %387, i64 0, !dbg !44
  %405 = insertelement <2 x bfloat> %404, bfloat %388, i64 1, !dbg !44
  %406 = bitcast <2 x bfloat> %405 to i32, !dbg !44
  %407 = insertelement <2 x bfloat> poison, bfloat %389, i64 0, !dbg !44
  %408 = insertelement <2 x bfloat> %407, bfloat %390, i64 1, !dbg !44
  %409 = bitcast <2 x bfloat> %408 to i32, !dbg !44
  %410 = insertelement <2 x bfloat> poison, bfloat %391, i64 0, !dbg !44
  %411 = insertelement <2 x bfloat> %410, bfloat %392, i64 1, !dbg !44
  %412 = bitcast <2 x bfloat> %411 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %225, i32 %403, i32 %406, i32 %409, i32 %412) #2, !dbg !44
  %413 = insertelement <2 x bfloat> poison, bfloat %393, i64 0, !dbg !44
  %414 = insertelement <2 x bfloat> %413, bfloat %394, i64 1, !dbg !44
  %415 = bitcast <2 x bfloat> %414 to i32, !dbg !44
  %416 = insertelement <2 x bfloat> poison, bfloat %395, i64 0, !dbg !44
  %417 = insertelement <2 x bfloat> %416, bfloat %396, i64 1, !dbg !44
  %418 = bitcast <2 x bfloat> %417 to i32, !dbg !44
  %419 = insertelement <2 x bfloat> poison, bfloat %397, i64 0, !dbg !44
  %420 = insertelement <2 x bfloat> %419, bfloat %398, i64 1, !dbg !44
  %421 = bitcast <2 x bfloat> %420 to i32, !dbg !44
  %422 = insertelement <2 x bfloat> poison, bfloat %399, i64 0, !dbg !44
  %423 = insertelement <2 x bfloat> %422, bfloat %400, i64 1, !dbg !44
  %424 = bitcast <2 x bfloat> %423 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %227, i32 %415, i32 %418, i32 %421, i32 %424) #2, !dbg !44
  %425 = getelementptr i8, ptr addrspace(1) %380, i64 16384, !dbg !30
  %426 = getelementptr bfloat, ptr addrspace(1) %425, i64 %70, !dbg !30
  %427 = getelementptr i8, ptr addrspace(1) %382, i64 16384, !dbg !30
  %428 = getelementptr bfloat, ptr addrspace(1) %427, i64 %70, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %212, i32 %403, i32 %406, i32 %409, i32 %412) #2, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %214, i32 %415, i32 %418, i32 %421, i32 %424) #2, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %429 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !30
  %.extract249 = load i32, ptr addrspace(3) %218, align 16, !dbg !30
  %.extract251 = load i32, ptr addrspace(3) %290, align 4, !dbg !30
  %.extract253 = load i32, ptr addrspace(3) %291, align 8, !dbg !30
  %.extract255 = load i32, ptr addrspace(3) %292, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract249, i32 %.extract251, i32 %.extract253, i32 %.extract255, ptr addrspace(1) %426, i1 %73) #2, !dbg !30
  %.extract257 = extractelement <4 x i32> %429, i64 0, !dbg !30
  %.extract259 = extractelement <4 x i32> %429, i64 1, !dbg !30
  %.extract261 = extractelement <4 x i32> %429, i64 2, !dbg !30
  %.extract263 = extractelement <4 x i32> %429, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract257, i32 %.extract259, i32 %.extract261, i32 %.extract263, ptr addrspace(1) %428, i1 %73) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %430 = shl i32 %335, 12, !dbg !35
  %431 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %430, !dbg !35
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !45
  %432 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %34, i32 0, i32 31), !dbg !45
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !45
  %433 = ptrtoint ptr addrspace(3) %431 to i32, !dbg !45
  %434 = lshr exact i32 %433, 4, !dbg !45
  %435 = and i32 %434, 16383, !dbg !45
  %436 = zext nneg i32 %435 to i64, !dbg !45
  %437 = or disjoint i64 %436, 4611686293338849280, !dbg !45
  %438 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %437, i64 %231) #2, !dbg !45
  %439 = add i32 %433, 32, !dbg !45
  %440 = lshr exact i32 %439, 4, !dbg !45
  %441 = and i32 %440, 16383, !dbg !45
  %442 = zext nneg i32 %441 to i64, !dbg !45
  %443 = or disjoint i64 %442, 4611686293338849280, !dbg !45
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 0, !dbg !45
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 1, !dbg !45
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 2, !dbg !45
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 3, !dbg !45
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 4, !dbg !45
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 5, !dbg !45
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 6, !dbg !45
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 7, !dbg !45
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 8, !dbg !45
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 9, !dbg !45
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 10, !dbg !45
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 11, !dbg !45
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 12, !dbg !45
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 13, !dbg !45
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 14, !dbg !45
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %438, 15, !dbg !45
  %460 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458, float %459, i64 %443, i64 %235, i1 true) #2, !dbg !45
  %461 = add i32 %433, 64, !dbg !45
  %462 = lshr exact i32 %461, 4, !dbg !45
  %463 = and i32 %462, 16383, !dbg !45
  %464 = zext nneg i32 %463 to i64, !dbg !45
  %465 = or disjoint i64 %464, 4611686293338849280, !dbg !45
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 0, !dbg !45
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 1, !dbg !45
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 2, !dbg !45
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 3, !dbg !45
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 4, !dbg !45
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 5, !dbg !45
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 6, !dbg !45
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 7, !dbg !45
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 8, !dbg !45
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 9, !dbg !45
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 10, !dbg !45
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 11, !dbg !45
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 12, !dbg !45
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 13, !dbg !45
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 14, !dbg !45
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %460, 15, !dbg !45
  %482 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %466, float %467, float %468, float %469, float %470, float %471, float %472, float %473, float %474, float %475, float %476, float %477, float %478, float %479, float %480, float %481, i64 %465, i64 %239, i1 true) #2, !dbg !45
  %483 = add i32 %433, 96, !dbg !45
  %484 = lshr exact i32 %483, 4, !dbg !45
  %485 = and i32 %484, 16383, !dbg !45
  %486 = zext nneg i32 %485 to i64, !dbg !45
  %487 = or disjoint i64 %486, 4611686293338849280, !dbg !45
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 0, !dbg !45
  %489 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 1, !dbg !45
  %490 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 2, !dbg !45
  %491 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 3, !dbg !45
  %492 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 4, !dbg !45
  %493 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 5, !dbg !45
  %494 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 6, !dbg !45
  %495 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 7, !dbg !45
  %496 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 8, !dbg !45
  %497 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 9, !dbg !45
  %498 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 10, !dbg !45
  %499 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 11, !dbg !45
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 12, !dbg !45
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 13, !dbg !45
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 14, !dbg !45
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, 15, !dbg !45
  %504 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %488, float %489, float %490, float %491, float %492, float %493, float %494, float %495, float %496, float %497, float %498, float %499, float %500, float %501, float %502, float %503, i64 %487, i64 %243, i1 true) #2, !dbg !45
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 0, !dbg !45
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 1, !dbg !45
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 2, !dbg !45
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 3, !dbg !45
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 4, !dbg !45
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 5, !dbg !45
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 6, !dbg !45
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 7, !dbg !45
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 8, !dbg !45
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 9, !dbg !45
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 10, !dbg !45
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 11, !dbg !45
  %517 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 12, !dbg !45
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 13, !dbg !45
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 14, !dbg !45
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %504, 15, !dbg !45
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !45
  %521 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %505, float %506, float %507, float %508, float %509, float %510, float %511, float %512, float %513, float %514, float %515, float %516, float %517, float %518, float %519, float %520, ptr addrspace(3) %431, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 70656), i32 0, i32 0) #2, !dbg !45
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 0, !dbg !45
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 1, !dbg !45
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 2, !dbg !45
  %525 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 3, !dbg !45
  %526 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 4, !dbg !45
  %527 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 5, !dbg !45
  %528 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 6, !dbg !45
  %529 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 7, !dbg !45
  %530 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 8, !dbg !45
  %531 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 9, !dbg !45
  %532 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 10, !dbg !45
  %533 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 11, !dbg !45
  %534 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 12, !dbg !45
  %535 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 13, !dbg !45
  %536 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 14, !dbg !45
  %537 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %521, 15, !dbg !45
  %538 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %430, !dbg !36
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !46
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !46
  %539 = ptrtoint ptr addrspace(3) %538 to i32, !dbg !46
  %540 = lshr exact i32 %539, 4, !dbg !46
  %541 = and i32 %540, 16383, !dbg !46
  %542 = zext nneg i32 %541 to i64, !dbg !46
  %543 = or disjoint i64 %542, 4611686293338849280, !dbg !46
  %544 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %522, float %523, float %524, float %525, float %526, float %527, float %528, float %529, float %530, float %531, float %532, float %533, float %534, float %535, float %536, float %537, i64 %543, i64 %247, i1 true) #2, !dbg !46
  %545 = add i32 %539, 32, !dbg !46
  %546 = lshr exact i32 %545, 4, !dbg !46
  %547 = and i32 %546, 16383, !dbg !46
  %548 = zext nneg i32 %547 to i64, !dbg !46
  %549 = or disjoint i64 %548, 4611686293338849280, !dbg !46
  %550 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 0, !dbg !46
  %551 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 1, !dbg !46
  %552 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 2, !dbg !46
  %553 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 3, !dbg !46
  %554 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 4, !dbg !46
  %555 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 5, !dbg !46
  %556 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 6, !dbg !46
  %557 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 7, !dbg !46
  %558 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 8, !dbg !46
  %559 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 9, !dbg !46
  %560 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 10, !dbg !46
  %561 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 11, !dbg !46
  %562 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 12, !dbg !46
  %563 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 13, !dbg !46
  %564 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 14, !dbg !46
  %565 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %544, 15, !dbg !46
  %566 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %550, float %551, float %552, float %553, float %554, float %555, float %556, float %557, float %558, float %559, float %560, float %561, float %562, float %563, float %564, float %565, i64 %549, i64 %251, i1 true) #2, !dbg !46
  %567 = add i32 %539, 64, !dbg !46
  %568 = lshr exact i32 %567, 4, !dbg !46
  %569 = and i32 %568, 16383, !dbg !46
  %570 = zext nneg i32 %569 to i64, !dbg !46
  %571 = or disjoint i64 %570, 4611686293338849280, !dbg !46
  %572 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 0, !dbg !46
  %573 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 1, !dbg !46
  %574 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 2, !dbg !46
  %575 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 3, !dbg !46
  %576 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 4, !dbg !46
  %577 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 5, !dbg !46
  %578 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 6, !dbg !46
  %579 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 7, !dbg !46
  %580 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 8, !dbg !46
  %581 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 9, !dbg !46
  %582 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 10, !dbg !46
  %583 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 11, !dbg !46
  %584 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 12, !dbg !46
  %585 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 13, !dbg !46
  %586 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 14, !dbg !46
  %587 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, 15, !dbg !46
  %588 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %572, float %573, float %574, float %575, float %576, float %577, float %578, float %579, float %580, float %581, float %582, float %583, float %584, float %585, float %586, float %587, i64 %571, i64 %255, i1 true) #2, !dbg !46
  %589 = add i32 %539, 96, !dbg !46
  %590 = lshr exact i32 %589, 4, !dbg !46
  %591 = and i32 %590, 16383, !dbg !46
  %592 = zext nneg i32 %591 to i64, !dbg !46
  %593 = or disjoint i64 %592, 4611686293338849280, !dbg !46
  %594 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 0, !dbg !46
  %595 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 1, !dbg !46
  %596 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 2, !dbg !46
  %597 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 3, !dbg !46
  %598 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 4, !dbg !46
  %599 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 5, !dbg !46
  %600 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 6, !dbg !46
  %601 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 7, !dbg !46
  %602 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 8, !dbg !46
  %603 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 9, !dbg !46
  %604 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 10, !dbg !46
  %605 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 11, !dbg !46
  %606 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 12, !dbg !46
  %607 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 13, !dbg !46
  %608 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 14, !dbg !46
  %609 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %588, 15, !dbg !46
  %610 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %594, float %595, float %596, float %597, float %598, float %599, float %600, float %601, float %602, float %603, float %604, float %605, float %606, float %607, float %608, float %609, i64 %593, i64 %259, i1 true) #2, !dbg !46
  %611 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 0, !dbg !46
  %612 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 1, !dbg !46
  %613 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 2, !dbg !46
  %614 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 3, !dbg !46
  %615 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 4, !dbg !46
  %616 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 5, !dbg !46
  %617 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 6, !dbg !46
  %618 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 7, !dbg !46
  %619 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 8, !dbg !46
  %620 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 9, !dbg !46
  %621 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 10, !dbg !46
  %622 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 11, !dbg !46
  %623 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 12, !dbg !46
  %624 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 13, !dbg !46
  %625 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 14, !dbg !46
  %626 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 15, !dbg !46
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !46
  %627 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %611, float %612, float %613, float %614, float %615, float %616, float %617, float %618, float %619, float %620, float %621, float %622, float %623, float %624, float %625, float %626, ptr addrspace(3) %538, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 78848), i32 0, i32 0) #2, !dbg !46
  %628 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 0, !dbg !46
  %629 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 1, !dbg !46
  %630 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 2, !dbg !46
  %631 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 3, !dbg !46
  %632 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 4, !dbg !46
  %633 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 5, !dbg !46
  %634 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 6, !dbg !46
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 7, !dbg !46
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 8, !dbg !46
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 9, !dbg !46
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 10, !dbg !46
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 11, !dbg !46
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 12, !dbg !46
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 13, !dbg !46
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 14, !dbg !46
  %643 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %627, 15, !dbg !46
  %644 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %282) #2, !dbg !47
  %645 = extractvalue { i32, i32, i32, i32 } %644, 0, !dbg !47
  %646 = bitcast i32 %645 to <2 x bfloat>, !dbg !47
  %647 = extractvalue { i32, i32, i32, i32 } %644, 1, !dbg !47
  %648 = bitcast i32 %647 to <2 x bfloat>, !dbg !47
  %649 = extractvalue { i32, i32, i32, i32 } %644, 2, !dbg !47
  %650 = bitcast i32 %649 to <2 x bfloat>, !dbg !47
  %651 = extractvalue { i32, i32, i32, i32 } %644, 3, !dbg !47
  %652 = bitcast i32 %651 to <2 x bfloat>, !dbg !47
  %653 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %284) #2, !dbg !47
  %654 = extractvalue { i32, i32, i32, i32 } %653, 0, !dbg !47
  %655 = bitcast i32 %654 to <2 x bfloat>, !dbg !47
  %656 = extractvalue { i32, i32, i32, i32 } %653, 1, !dbg !47
  %657 = bitcast i32 %656 to <2 x bfloat>, !dbg !47
  %658 = extractvalue { i32, i32, i32, i32 } %653, 2, !dbg !47
  %659 = bitcast i32 %658 to <2 x bfloat>, !dbg !47
  %660 = extractvalue { i32, i32, i32, i32 } %653, 3, !dbg !47
  %661 = bitcast i32 %660 to <2 x bfloat>, !dbg !47
  %662 = fpext <2 x bfloat> %646 to <2 x float>, !dbg !47
  %663 = insertelement <2 x float> poison, float %628, i64 0, !dbg !47
  %664 = insertelement <2 x float> %663, float %629, i64 1, !dbg !47
  %665 = fsub <2 x float> %662, %664, !dbg !47
  %666 = fptrunc <2 x float> %665 to <2 x bfloat>, !dbg !48
  %667 = fpext <2 x bfloat> %648 to <2 x float>, !dbg !47
  %668 = insertelement <2 x float> poison, float %630, i64 0, !dbg !47
  %669 = insertelement <2 x float> %668, float %631, i64 1, !dbg !47
  %670 = fsub <2 x float> %667, %669, !dbg !47
  %671 = fptrunc <2 x float> %670 to <2 x bfloat>, !dbg !48
  %672 = fpext <2 x bfloat> %650 to <2 x float>, !dbg !47
  %673 = insertelement <2 x float> poison, float %632, i64 0, !dbg !47
  %674 = insertelement <2 x float> %673, float %633, i64 1, !dbg !47
  %675 = fsub <2 x float> %672, %674, !dbg !47
  %676 = fptrunc <2 x float> %675 to <2 x bfloat>, !dbg !48
  %677 = fpext <2 x bfloat> %652 to <2 x float>, !dbg !47
  %678 = insertelement <2 x float> poison, float %634, i64 0, !dbg !47
  %679 = insertelement <2 x float> %678, float %635, i64 1, !dbg !47
  %680 = fsub <2 x float> %677, %679, !dbg !47
  %681 = fptrunc <2 x float> %680 to <2 x bfloat>, !dbg !48
  %682 = fpext <2 x bfloat> %655 to <2 x float>, !dbg !47
  %683 = insertelement <2 x float> poison, float %636, i64 0, !dbg !47
  %684 = insertelement <2 x float> %683, float %637, i64 1, !dbg !47
  %685 = fsub <2 x float> %682, %684, !dbg !47
  %686 = fptrunc <2 x float> %685 to <2 x bfloat>, !dbg !48
  %687 = fpext <2 x bfloat> %657 to <2 x float>, !dbg !47
  %688 = insertelement <2 x float> poison, float %638, i64 0, !dbg !47
  %689 = insertelement <2 x float> %688, float %639, i64 1, !dbg !47
  %690 = fsub <2 x float> %687, %689, !dbg !47
  %691 = fptrunc <2 x float> %690 to <2 x bfloat>, !dbg !48
  %692 = fpext <2 x bfloat> %659 to <2 x float>, !dbg !47
  %693 = insertelement <2 x float> poison, float %640, i64 0, !dbg !47
  %694 = insertelement <2 x float> %693, float %641, i64 1, !dbg !47
  %695 = fsub <2 x float> %692, %694, !dbg !47
  %696 = fptrunc <2 x float> %695 to <2 x bfloat>, !dbg !48
  %697 = fpext <2 x bfloat> %661 to <2 x float>, !dbg !47
  %698 = insertelement <2 x float> poison, float %642, i64 0, !dbg !47
  %699 = insertelement <2 x float> %698, float %643, i64 1, !dbg !47
  %700 = fsub <2 x float> %697, %699, !dbg !47
  %701 = fptrunc <2 x float> %700 to <2 x bfloat>, !dbg !48
  %702 = bitcast <2 x bfloat> %666 to i32, !dbg !48
  %703 = bitcast <2 x bfloat> %671 to i32, !dbg !48
  %704 = bitcast <2 x bfloat> %676 to i32, !dbg !48
  %705 = bitcast <2 x bfloat> %681 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %212, i32 %702, i32 %703, i32 %704, i32 %705) #2, !dbg !48
  %706 = bitcast <2 x bfloat> %686 to i32, !dbg !48
  %707 = bitcast <2 x bfloat> %691 to i32, !dbg !48
  %708 = bitcast <2 x bfloat> %696 to i32, !dbg !48
  %709 = bitcast <2 x bfloat> %701 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %214, i32 %706, i32 %707, i32 %708, i32 %709) #2, !dbg !48
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !48
  %710 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !48
  %711 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn38281, !dbg !49
  %712 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn22282, !dbg !49
  %.extract265 = load i32, ptr addrspace(3) %218, align 16, !dbg !49
  %.extract267 = load i32, ptr addrspace(3) %293, align 4, !dbg !49
  %.extract269 = load i32, ptr addrspace(3) %294, align 8, !dbg !49
  %.extract271 = load i32, ptr addrspace(3) %295, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract265, i32 %.extract267, i32 %.extract269, i32 %.extract271, ptr addrspace(1) %711, i1 %.pn70283) #2, !dbg !49
  %.extract273 = extractelement <4 x i32> %710, i64 0, !dbg !49
  %.extract275 = extractelement <4 x i32> %710, i64 1, !dbg !49
  %.extract277 = extractelement <4 x i32> %710, i64 2, !dbg !49
  %.extract279 = extractelement <4 x i32> %710, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract273, i32 %.extract275, i32 %.extract277, i32 %.extract279, ptr addrspace(1) %712, i1 %.pn54284) #2, !dbg !49
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !50
  %713 = shl i64 %indvars.iv.next, 6, !dbg !51
  %714 = trunc nuw nsw i64 %713 to i32, !dbg !52
  %715 = tail call i32 @llvm.smin.i32(i32 %714, i32 %7), !dbg !52
  %716 = or disjoint i32 %297, %58, !dbg !53
  %717 = or disjoint i32 %297, %59, !dbg !53
  %718 = icmp slt i32 %716, %7, !dbg !54
  %719 = icmp slt i32 %717, %7, !dbg !54
  %720 = shl i32 %715, 5, !dbg !55
  %721 = add i32 %720, -32, !dbg !55
  %722 = sext i32 %721 to i64, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %79, i64 %722, !dbg !57
  %723 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !58
  %724 = bitcast i32 %723 to float, !dbg !58
  %725 = load float, ptr addrspace(3) %285, align 4, !dbg !38
  %726 = load float, ptr addrspace(3) %286, align 4, !dbg !38
  %727 = fsub float %724, %725, !dbg !59
  %728 = fsub float %724, %726, !dbg !59
  %729 = fmul float %727, 0x3FF7154760000000, !dbg !60
  %730 = tail call float @llvm.nvvm.ex2.approx.f(float %729), !dbg !60
  %731 = fmul float %728, 0x3FF7154760000000, !dbg !60
  %732 = tail call float @llvm.nvvm.ex2.approx.f(float %731), !dbg !60
  %733 = select i1 %718, float %730, float 0.000000e+00, !dbg !61
  %734 = select i1 %719, float %732, float 0.000000e+00, !dbg !61
  %735 = extractelement <2 x float> %665, i64 0, !dbg !62
  %736 = fmul float %735, %733, !dbg !62
  %737 = extractelement <2 x float> %665, i64 1, !dbg !62
  %738 = fmul float %737, %733, !dbg !62
  %739 = extractelement <2 x float> %670, i64 0, !dbg !62
  %740 = fmul float %739, %734, !dbg !62
  %741 = extractelement <2 x float> %670, i64 1, !dbg !62
  %742 = fmul float %741, %734, !dbg !62
  %743 = extractelement <2 x float> %675, i64 0, !dbg !62
  %744 = fmul float %743, %733, !dbg !62
  %745 = extractelement <2 x float> %675, i64 1, !dbg !62
  %746 = fmul float %745, %733, !dbg !62
  %747 = extractelement <2 x float> %680, i64 0, !dbg !62
  %748 = fmul float %747, %734, !dbg !62
  %749 = extractelement <2 x float> %680, i64 1, !dbg !62
  %750 = fmul float %749, %734, !dbg !62
  %751 = extractelement <2 x float> %685, i64 0, !dbg !62
  %752 = fmul float %751, %733, !dbg !62
  %753 = extractelement <2 x float> %685, i64 1, !dbg !62
  %754 = fmul float %753, %733, !dbg !62
  %755 = extractelement <2 x float> %690, i64 0, !dbg !62
  %756 = fmul float %755, %734, !dbg !62
  %757 = extractelement <2 x float> %690, i64 1, !dbg !62
  %758 = fmul float %757, %734, !dbg !62
  %759 = extractelement <2 x float> %695, i64 0, !dbg !62
  %760 = fmul float %759, %733, !dbg !62
  %761 = extractelement <2 x float> %695, i64 1, !dbg !62
  %762 = fmul float %761, %733, !dbg !62
  %763 = extractelement <2 x float> %700, i64 0, !dbg !62
  %764 = fmul float %763, %734, !dbg !62
  %765 = extractelement <2 x float> %700, i64 1, !dbg !62
  %766 = fmul float %765, %734, !dbg !62
  %767 = fmul float %724, 0x3FF7154760000000, !dbg !63
  %768 = tail call float @llvm.nvvm.ex2.approx.f(float %767), !dbg !63
  %769 = fmul float %316, %768, !dbg !64
  %770 = fmul float %317, %768, !dbg !64
  %771 = fmul float %318, %768, !dbg !64
  %772 = fmul float %319, %768, !dbg !64
  %773 = fmul float %320, %768, !dbg !64
  %774 = fmul float %321, %768, !dbg !64
  %775 = fmul float %322, %768, !dbg !64
  %776 = fmul float %323, %768, !dbg !64
  %777 = fmul float %324, %768, !dbg !64
  %778 = fmul float %325, %768, !dbg !64
  %779 = fmul float %326, %768, !dbg !64
  %780 = fmul float %327, %768, !dbg !64
  %781 = fmul float %328, %768, !dbg !64
  %782 = fmul float %329, %768, !dbg !64
  %783 = fmul float %330, %768, !dbg !64
  %784 = fmul float %331, %768, !dbg !64
  %785 = fmul float %300, %768, !dbg !65
  %786 = fmul float %301, %768, !dbg !65
  %787 = fmul float %302, %768, !dbg !65
  %788 = fmul float %303, %768, !dbg !65
  %789 = fmul float %304, %768, !dbg !65
  %790 = fmul float %305, %768, !dbg !65
  %791 = fmul float %306, %768, !dbg !65
  %792 = fmul float %307, %768, !dbg !65
  %793 = fmul float %308, %768, !dbg !65
  %794 = fmul float %309, %768, !dbg !65
  %795 = fmul float %310, %768, !dbg !65
  %796 = fmul float %311, %768, !dbg !65
  %797 = fmul float %312, %768, !dbg !65
  %798 = fmul float %313, %768, !dbg !65
  %799 = fmul float %314, %768, !dbg !65
  %800 = fmul float %315, %768, !dbg !65
  %801 = fptrunc float %736 to bfloat, !dbg !66
  %802 = fptrunc float %738 to bfloat, !dbg !66
  %803 = fptrunc float %740 to bfloat, !dbg !66
  %804 = fptrunc float %742 to bfloat, !dbg !66
  %805 = fptrunc float %744 to bfloat, !dbg !66
  %806 = fptrunc float %746 to bfloat, !dbg !66
  %807 = fptrunc float %748 to bfloat, !dbg !66
  %808 = fptrunc float %750 to bfloat, !dbg !66
  %809 = fptrunc float %752 to bfloat, !dbg !66
  %810 = fptrunc float %754 to bfloat, !dbg !66
  %811 = fptrunc float %756 to bfloat, !dbg !66
  %812 = fptrunc float %758 to bfloat, !dbg !66
  %813 = fptrunc float %760 to bfloat, !dbg !66
  %814 = fptrunc float %762 to bfloat, !dbg !66
  %815 = fptrunc float %764 to bfloat, !dbg !66
  %816 = fptrunc float %766 to bfloat, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %817 = insertelement <2 x bfloat> poison, bfloat %801, i64 0, !dbg !66
  %818 = insertelement <2 x bfloat> %817, bfloat %802, i64 1, !dbg !66
  %819 = bitcast <2 x bfloat> %818 to i32, !dbg !66
  %820 = insertelement <2 x bfloat> poison, bfloat %803, i64 0, !dbg !66
  %821 = insertelement <2 x bfloat> %820, bfloat %804, i64 1, !dbg !66
  %822 = bitcast <2 x bfloat> %821 to i32, !dbg !66
  %823 = insertelement <2 x bfloat> poison, bfloat %805, i64 0, !dbg !66
  %824 = insertelement <2 x bfloat> %823, bfloat %806, i64 1, !dbg !66
  %825 = bitcast <2 x bfloat> %824 to i32, !dbg !66
  %826 = insertelement <2 x bfloat> poison, bfloat %807, i64 0, !dbg !66
  %827 = insertelement <2 x bfloat> %826, bfloat %808, i64 1, !dbg !66
  %828 = bitcast <2 x bfloat> %827 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %261, i32 %819, i32 %822, i32 %825, i32 %828) #2, !dbg !66
  %829 = insertelement <2 x bfloat> poison, bfloat %809, i64 0, !dbg !66
  %830 = insertelement <2 x bfloat> %829, bfloat %810, i64 1, !dbg !66
  %831 = bitcast <2 x bfloat> %830 to i32, !dbg !66
  %832 = insertelement <2 x bfloat> poison, bfloat %811, i64 0, !dbg !66
  %833 = insertelement <2 x bfloat> %832, bfloat %812, i64 1, !dbg !66
  %834 = bitcast <2 x bfloat> %833 to i32, !dbg !66
  %835 = insertelement <2 x bfloat> poison, bfloat %813, i64 0, !dbg !66
  %836 = insertelement <2 x bfloat> %835, bfloat %814, i64 1, !dbg !66
  %837 = bitcast <2 x bfloat> %836 to i32, !dbg !66
  %838 = insertelement <2 x bfloat> poison, bfloat %815, i64 0, !dbg !66
  %839 = insertelement <2 x bfloat> %838, bfloat %816, i64 1, !dbg !66
  %840 = bitcast <2 x bfloat> %839 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %263, i32 %831, i32 %834, i32 %837, i32 %840) #2, !dbg !66
  %841 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %430, !dbg !39
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !67
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !67
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !67
  %842 = ptrtoint ptr addrspace(3) %841 to i32, !dbg !67
  %843 = lshr exact i32 %842, 4, !dbg !67
  %844 = and i32 %843, 16383, !dbg !67
  %845 = zext nneg i32 %844 to i64, !dbg !67
  %846 = or disjoint i64 %845, 4611686293338849280, !dbg !67
  %847 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %769, float %770, float %771, float %772, float %773, float %774, float %775, float %776, float %777, float %778, float %779, float %780, float %781, float %782, float %783, float %784, i64 %846, i64 %267, i1 true) #2, !dbg !67
  %848 = add i32 %842, 2048, !dbg !67
  %849 = lshr exact i32 %848, 4, !dbg !67
  %850 = and i32 %849, 16383, !dbg !67
  %851 = zext nneg i32 %850 to i64, !dbg !67
  %852 = or disjoint i64 %851, 4611686293338849280, !dbg !67
  %853 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 0, !dbg !67
  %854 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 1, !dbg !67
  %855 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 2, !dbg !67
  %856 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 3, !dbg !67
  %857 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 4, !dbg !67
  %858 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 5, !dbg !67
  %859 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 6, !dbg !67
  %860 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 7, !dbg !67
  %861 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 8, !dbg !67
  %862 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 9, !dbg !67
  %863 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 10, !dbg !67
  %864 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 11, !dbg !67
  %865 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 12, !dbg !67
  %866 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 13, !dbg !67
  %867 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 14, !dbg !67
  %868 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %847, 15, !dbg !67
  %869 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %853, float %854, float %855, float %856, float %857, float %858, float %859, float %860, float %861, float %862, float %863, float %864, float %865, float %866, float %867, float %868, i64 %852, i64 %271, i1 true) #2, !dbg !67
  %870 = add i32 %842, 4096, !dbg !67
  %871 = lshr exact i32 %870, 4, !dbg !67
  %872 = and i32 %871, 16383, !dbg !67
  %873 = zext nneg i32 %872 to i64, !dbg !67
  %874 = or disjoint i64 %873, 4611686293338849280, !dbg !67
  %875 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 0, !dbg !67
  %876 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 1, !dbg !67
  %877 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 2, !dbg !67
  %878 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 3, !dbg !67
  %879 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 4, !dbg !67
  %880 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 5, !dbg !67
  %881 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 6, !dbg !67
  %882 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 7, !dbg !67
  %883 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 8, !dbg !67
  %884 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 9, !dbg !67
  %885 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 10, !dbg !67
  %886 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 11, !dbg !67
  %887 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 12, !dbg !67
  %888 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 13, !dbg !67
  %889 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 14, !dbg !67
  %890 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %869, 15, !dbg !67
  %891 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %875, float %876, float %877, float %878, float %879, float %880, float %881, float %882, float %883, float %884, float %885, float %886, float %887, float %888, float %889, float %890, i64 %874, i64 %275, i1 true) #2, !dbg !67
  %892 = add i32 %842, 6144, !dbg !67
  %893 = lshr exact i32 %892, 4, !dbg !67
  %894 = and i32 %893, 16383, !dbg !67
  %895 = zext nneg i32 %894 to i64, !dbg !67
  %896 = or disjoint i64 %895, 4611686293338849280, !dbg !67
  %897 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 0, !dbg !67
  %898 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 1, !dbg !67
  %899 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 2, !dbg !67
  %900 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 3, !dbg !67
  %901 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 4, !dbg !67
  %902 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 5, !dbg !67
  %903 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 6, !dbg !67
  %904 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 7, !dbg !67
  %905 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 8, !dbg !67
  %906 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 9, !dbg !67
  %907 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 10, !dbg !67
  %908 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 11, !dbg !67
  %909 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 12, !dbg !67
  %910 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 13, !dbg !67
  %911 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 14, !dbg !67
  %912 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %891, 15, !dbg !67
  %913 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %897, float %898, float %899, float %900, float %901, float %902, float %903, float %904, float %905, float %906, float %907, float %908, float %909, float %910, float %911, float %912, i64 %896, i64 %279, i1 true) #2, !dbg !67
  %914 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 0, !dbg !67
  %915 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 1, !dbg !67
  %916 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 2, !dbg !67
  %917 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 3, !dbg !67
  %918 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 4, !dbg !67
  %919 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 5, !dbg !67
  %920 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 6, !dbg !67
  %921 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 7, !dbg !67
  %922 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 8, !dbg !67
  %923 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 9, !dbg !67
  %924 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 10, !dbg !67
  %925 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 11, !dbg !67
  %926 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 12, !dbg !67
  %927 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 13, !dbg !67
  %928 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 14, !dbg !67
  %929 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %913, 15, !dbg !67
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !67
  %930 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %914, float %915, float %916, float %917, float %918, float %919, float %920, float %921, float %922, float %923, float %924, float %925, float %926, float %927, float %928, float %929, ptr addrspace(3) %841, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 0, i32 0) #2, !dbg !67
  %931 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 0, !dbg !67
  %932 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 1, !dbg !67
  %933 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 2, !dbg !67
  %934 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 3, !dbg !67
  %935 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 4, !dbg !67
  %936 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 5, !dbg !67
  %937 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 6, !dbg !67
  %938 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 7, !dbg !67
  %939 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 8, !dbg !67
  %940 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 9, !dbg !67
  %941 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 10, !dbg !67
  %942 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 11, !dbg !67
  %943 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 12, !dbg !67
  %944 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 13, !dbg !67
  %945 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 14, !dbg !67
  %946 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %930, 15, !dbg !67
  %947 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %430, !dbg !40
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !68
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !68
  %948 = ptrtoint ptr addrspace(3) %947 to i32, !dbg !68
  %949 = lshr exact i32 %948, 4, !dbg !68
  %950 = and i32 %949, 16383, !dbg !68
  %951 = zext nneg i32 %950 to i64, !dbg !68
  %952 = or disjoint i64 %951, 4611686293338849280, !dbg !68
  %953 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %785, float %786, float %787, float %788, float %789, float %790, float %791, float %792, float %793, float %794, float %795, float %796, float %797, float %798, float %799, float %800, i64 %952, i64 %267, i1 true) #2, !dbg !68
  %954 = add i32 %948, 2048, !dbg !68
  %955 = lshr exact i32 %954, 4, !dbg !68
  %956 = and i32 %955, 16383, !dbg !68
  %957 = zext nneg i32 %956 to i64, !dbg !68
  %958 = or disjoint i64 %957, 4611686293338849280, !dbg !68
  %959 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 0, !dbg !68
  %960 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 1, !dbg !68
  %961 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 2, !dbg !68
  %962 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 3, !dbg !68
  %963 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 4, !dbg !68
  %964 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 5, !dbg !68
  %965 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 6, !dbg !68
  %966 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 7, !dbg !68
  %967 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 8, !dbg !68
  %968 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 9, !dbg !68
  %969 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 10, !dbg !68
  %970 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 11, !dbg !68
  %971 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 12, !dbg !68
  %972 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 13, !dbg !68
  %973 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 14, !dbg !68
  %974 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %953, 15, !dbg !68
  %975 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %959, float %960, float %961, float %962, float %963, float %964, float %965, float %966, float %967, float %968, float %969, float %970, float %971, float %972, float %973, float %974, i64 %958, i64 %271, i1 true) #2, !dbg !68
  %976 = add i32 %948, 4096, !dbg !68
  %977 = lshr exact i32 %976, 4, !dbg !68
  %978 = and i32 %977, 16383, !dbg !68
  %979 = zext nneg i32 %978 to i64, !dbg !68
  %980 = or disjoint i64 %979, 4611686293338849280, !dbg !68
  %981 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 0, !dbg !68
  %982 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 1, !dbg !68
  %983 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 2, !dbg !68
  %984 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 3, !dbg !68
  %985 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 4, !dbg !68
  %986 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 5, !dbg !68
  %987 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 6, !dbg !68
  %988 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 7, !dbg !68
  %989 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 8, !dbg !68
  %990 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 9, !dbg !68
  %991 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 10, !dbg !68
  %992 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 11, !dbg !68
  %993 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 12, !dbg !68
  %994 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 13, !dbg !68
  %995 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 14, !dbg !68
  %996 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %975, 15, !dbg !68
  %997 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %981, float %982, float %983, float %984, float %985, float %986, float %987, float %988, float %989, float %990, float %991, float %992, float %993, float %994, float %995, float %996, i64 %980, i64 %275, i1 true) #2, !dbg !68
  %998 = add i32 %948, 6144, !dbg !68
  %999 = lshr exact i32 %998, 4, !dbg !68
  %1000 = and i32 %999, 16383, !dbg !68
  %1001 = zext nneg i32 %1000 to i64, !dbg !68
  %1002 = or disjoint i64 %1001, 4611686293338849280, !dbg !68
  %1003 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 0, !dbg !68
  %1004 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 1, !dbg !68
  %1005 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 2, !dbg !68
  %1006 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 3, !dbg !68
  %1007 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 4, !dbg !68
  %1008 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 5, !dbg !68
  %1009 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 6, !dbg !68
  %1010 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 7, !dbg !68
  %1011 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 8, !dbg !68
  %1012 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 9, !dbg !68
  %1013 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 10, !dbg !68
  %1014 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 11, !dbg !68
  %1015 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 12, !dbg !68
  %1016 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 13, !dbg !68
  %1017 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 14, !dbg !68
  %1018 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %997, 15, !dbg !68
  %1019 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1003, float %1004, float %1005, float %1006, float %1007, float %1008, float %1009, float %1010, float %1011, float %1012, float %1013, float %1014, float %1015, float %1016, float %1017, float %1018, i64 %1002, i64 %279, i1 true) #2, !dbg !68
  %1020 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 0, !dbg !68
  %1021 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 1, !dbg !68
  %1022 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 2, !dbg !68
  %1023 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 3, !dbg !68
  %1024 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 4, !dbg !68
  %1025 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 5, !dbg !68
  %1026 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 6, !dbg !68
  %1027 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 7, !dbg !68
  %1028 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 8, !dbg !68
  %1029 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 9, !dbg !68
  %1030 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 10, !dbg !68
  %1031 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 11, !dbg !68
  %1032 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 12, !dbg !68
  %1033 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 13, !dbg !68
  %1034 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 14, !dbg !68
  %1035 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1019, 15, !dbg !68
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !68
  %1036 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %1020, float %1021, float %1022, float %1023, float %1024, float %1025, float %1026, float %1027, float %1028, float %1029, float %1030, float %1031, float %1032, float %1033, float %1034, float %1035, ptr addrspace(3) %947, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 0, i32 0) #2, !dbg !68
  %1037 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 0, !dbg !68
  %1038 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 1, !dbg !68
  %1039 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 2, !dbg !68
  %1040 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 3, !dbg !68
  %1041 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 4, !dbg !68
  %1042 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 5, !dbg !68
  %1043 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 6, !dbg !68
  %1044 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 7, !dbg !68
  %1045 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 8, !dbg !68
  %1046 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 9, !dbg !68
  %1047 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 10, !dbg !68
  %1048 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 11, !dbg !68
  %1049 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 12, !dbg !68
  %1050 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 13, !dbg !68
  %1051 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 14, !dbg !68
  %1052 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1036, 15, !dbg !68
  %1053 = add i32 %299, 1, !dbg !34
  %1054 = icmp sgt i32 %1053, 1, !dbg !34
  %1055 = select i1 %1054, i32 0, i32 %1053, !dbg !34
  %1056 = or disjoint i64 %713, %62, !dbg !35
  %1057 = or disjoint i64 %713, %63, !dbg !35
  %1058 = or disjoint i64 %713, %64, !dbg !35
  %1059 = or disjoint i64 %713, %65, !dbg !35
  %1060 = or disjoint i64 %713, %60, !dbg !35
  %1061 = or disjoint i64 %713, %61, !dbg !35
  %1062 = or disjoint i64 %713, %67, !dbg !35
  %1063 = or disjoint i64 %713, %68, !dbg !35
  %1064 = shl nsw i64 %1056, 12, !dbg !35
  %1065 = shl nsw i64 %1057, 12, !dbg !35
  %1066 = shl nsw i64 %1058, 12, !dbg !35
  %1067 = shl nsw i64 %1059, 12, !dbg !35
  %1068 = shl nsw i64 %1060, 12, !dbg !35
  %1069 = shl nsw i64 %1061, 12, !dbg !35
  %1070 = or disjoint i64 %1064, %66, !dbg !35
  %1071 = or disjoint i64 %1065, %66, !dbg !35
  %1072 = or disjoint i64 %1066, %66, !dbg !35
  %1073 = or disjoint i64 %1067, %66, !dbg !35
  %1074 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1070, !dbg !35
  %1075 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1071, !dbg !35
  %1076 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1072, !dbg !35
  %1077 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1073, !dbg !35
  %1078 = icmp slt i64 %1056, %75, !dbg !35
  %1079 = icmp slt i64 %1057, %75, !dbg !35
  %1080 = icmp slt i64 %1058, %75, !dbg !35
  %1081 = icmp slt i64 %1059, %75, !dbg !35
  %1082 = icmp slt i64 %1060, %75, !dbg !35
  %1083 = icmp slt i64 %1061, %75, !dbg !35
  %1084 = shl i32 %1055, 12, !dbg !35
  %1085 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1084, !dbg !35
  %1086 = and i1 %332, %1078, !dbg !34
  %1087 = and i1 %332, %1079, !dbg !34
  %1088 = and i1 %332, %1080, !dbg !34
  %1089 = and i1 %332, %1081, !dbg !34
  %1090 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1085, i32 %111, !dbg !35
  %1091 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1085, i32 %114, !dbg !35
  %1092 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1085, i32 %117, !dbg !35
  %1093 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1085, i32 %120, !dbg !35
  %1094 = select i1 %1086, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1090, ptr addrspace(1) %1074, i32 %1094) #2, !dbg !35
  %1095 = select i1 %1087, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1091, ptr addrspace(1) %1075, i32 %1095) #2, !dbg !35
  %1096 = select i1 %1088, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1092, ptr addrspace(1) %1076, i32 %1096) #2, !dbg !35
  %1097 = select i1 %1089, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1093, ptr addrspace(1) %1077, i32 %1097) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %1098 = or disjoint i64 %1064, %74, !dbg !36
  %1099 = or disjoint i64 %1065, %74, !dbg !36
  %1100 = or disjoint i64 %1066, %74, !dbg !36
  %1101 = or disjoint i64 %1067, %74, !dbg !36
  %1102 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1098, !dbg !36
  %1103 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1099, !dbg !36
  %1104 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1100, !dbg !36
  %1105 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1101, !dbg !36
  %1106 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %1084, !dbg !36
  %1107 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1106, i32 %111, !dbg !36
  %1108 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1106, i32 %114, !dbg !36
  %1109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1106, i32 %117, !dbg !36
  %1110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1106, i32 %120, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1107, ptr addrspace(1) %1102, i32 %1094) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1108, ptr addrspace(1) %1103, i32 %1095) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1109, ptr addrspace(1) %1104, i32 %1096) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1110, ptr addrspace(1) %1105, i32 %1097) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %1111 = add nsw i64 %1068, %70, !dbg !37
  %1112 = add nsw i64 %1069, %70, !dbg !37
  %1113 = getelementptr bfloat, ptr addrspace(1) %27, i64 %1111, !dbg !37
  %1114 = getelementptr bfloat, ptr addrspace(1) %27, i64 %1112, !dbg !37
  %1115 = and i1 %73, %1082, !dbg !37
  %1116 = and i1 %73, %1083, !dbg !37
  %1117 = and i1 %332, %1115, !dbg !34
  %1118 = and i1 %332, %1116, !dbg !34
  %1119 = select i1 %1117, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %148, ptr addrspace(1) %1113, i32 %1119) #2, !dbg !37
  %1120 = select i1 %1118, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %1114, i32 %1120) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx230 = shl nsw i64 %1062, 7, !dbg !38
  %1121 = getelementptr i8, ptr addrspace(1) %79, i64 %.idx230, !dbg !38
  %.idx231 = shl nsw i64 %1063, 7, !dbg !38
  %1122 = getelementptr i8, ptr addrspace(1) %79, i64 %.idx231, !dbg !38
  %1123 = icmp slt i64 %1062, %75, !dbg !38
  %1124 = icmp slt i64 %1063, %75, !dbg !38
  %1125 = and i1 %332, %1123, !dbg !34
  %1126 = and i1 %332, %1124, !dbg !34
  %1127 = select i1 %1125, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %1121, i32 %1127, i1 %161) #2, !dbg !38
  %1128 = select i1 %1126, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %1122, i32 %1128, i1 %161) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %1129 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1070, !dbg !39
  %1130 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1071, !dbg !39
  %1131 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1072, !dbg !39
  %1132 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1073, !dbg !39
  %1133 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %1084, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1133, i32 %111, !dbg !39
  %1135 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1133, i32 %114, !dbg !39
  %1136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1133, i32 %117, !dbg !39
  %1137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1133, i32 %120, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1134, ptr addrspace(1) %1129, i32 %1094) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1135, ptr addrspace(1) %1130, i32 %1095) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1136, ptr addrspace(1) %1131, i32 %1096) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1137, ptr addrspace(1) %1132, i32 %1097) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %1138 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1098, !dbg !40
  %1139 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1099, !dbg !40
  %1140 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1100, !dbg !40
  %1141 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1101, !dbg !40
  %1142 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1084, !dbg !40
  %1143 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1142, i32 %111, !dbg !40
  %1144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1142, i32 %114, !dbg !40
  %1145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1142, i32 %117, !dbg !40
  %1146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1142, i32 %120, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1143, ptr addrspace(1) %1138, i32 %1094) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1144, ptr addrspace(1) %1139, i32 %1095) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1145, ptr addrspace(1) %1140, i32 %1096) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1146, ptr addrspace(1) %1141, i32 %1097) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %296, !dbg !34

._crit_edge:                                      ; preds = %296, %9
  %1147 = phi float [ 0.000000e+00, %9 ], [ %931, %296 ]
  %1148 = phi float [ 0.000000e+00, %9 ], [ %932, %296 ]
  %1149 = phi float [ 0.000000e+00, %9 ], [ %933, %296 ]
  %1150 = phi float [ 0.000000e+00, %9 ], [ %934, %296 ]
  %1151 = phi float [ 0.000000e+00, %9 ], [ %935, %296 ]
  %1152 = phi float [ 0.000000e+00, %9 ], [ %936, %296 ]
  %1153 = phi float [ 0.000000e+00, %9 ], [ %937, %296 ]
  %1154 = phi float [ 0.000000e+00, %9 ], [ %938, %296 ]
  %1155 = phi float [ 0.000000e+00, %9 ], [ %939, %296 ]
  %1156 = phi float [ 0.000000e+00, %9 ], [ %940, %296 ]
  %1157 = phi float [ 0.000000e+00, %9 ], [ %941, %296 ]
  %1158 = phi float [ 0.000000e+00, %9 ], [ %942, %296 ]
  %1159 = phi float [ 0.000000e+00, %9 ], [ %943, %296 ]
  %1160 = phi float [ 0.000000e+00, %9 ], [ %944, %296 ]
  %1161 = phi float [ 0.000000e+00, %9 ], [ %945, %296 ]
  %1162 = phi float [ 0.000000e+00, %9 ], [ %946, %296 ]
  %1163 = phi float [ 0.000000e+00, %9 ], [ %1037, %296 ]
  %1164 = phi float [ 0.000000e+00, %9 ], [ %1038, %296 ]
  %1165 = phi float [ 0.000000e+00, %9 ], [ %1039, %296 ]
  %1166 = phi float [ 0.000000e+00, %9 ], [ %1040, %296 ]
  %1167 = phi float [ 0.000000e+00, %9 ], [ %1041, %296 ]
  %1168 = phi float [ 0.000000e+00, %9 ], [ %1042, %296 ]
  %1169 = phi float [ 0.000000e+00, %9 ], [ %1043, %296 ]
  %1170 = phi float [ 0.000000e+00, %9 ], [ %1044, %296 ]
  %1171 = phi float [ 0.000000e+00, %9 ], [ %1045, %296 ]
  %1172 = phi float [ 0.000000e+00, %9 ], [ %1046, %296 ]
  %1173 = phi float [ 0.000000e+00, %9 ], [ %1047, %296 ]
  %1174 = phi float [ 0.000000e+00, %9 ], [ %1048, %296 ]
  %1175 = phi float [ 0.000000e+00, %9 ], [ %1049, %296 ]
  %1176 = phi float [ 0.000000e+00, %9 ], [ %1050, %296 ]
  %1177 = phi float [ 0.000000e+00, %9 ], [ %1051, %296 ]
  %1178 = phi float [ 0.000000e+00, %9 ], [ %1052, %296 ]
  %1179 = zext nneg i32 %15 to i64, !dbg !69
  %1180 = getelementptr float, ptr addrspace(1) %6, i64 %1179, !dbg !69
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %1181 = shl nuw nsw i32 %33, 2, !dbg !70
  %1182 = and i32 %1181, 28, !dbg !70
  %1183 = zext nneg i32 %1182 to i64, !dbg !70
  %1184 = or disjoint i64 %1183, %32, !dbg !70
  %.idx85 = shl nuw nsw i64 %62, 9, !dbg !70
  %1185 = getelementptr i8, ptr addrspace(1) %1180, i64 %.idx85, !dbg !70
  %1186 = getelementptr float, ptr addrspace(1) %1185, i64 %1184, !dbg !70
  %.idx86 = shl nuw nsw i64 %63, 9, !dbg !70
  %1187 = getelementptr i8, ptr addrspace(1) %1180, i64 %.idx86, !dbg !70
  %1188 = getelementptr float, ptr addrspace(1) %1187, i64 %1184, !dbg !70
  %.idx87 = shl nuw nsw i64 %64, 9, !dbg !70
  %1189 = getelementptr i8, ptr addrspace(1) %1180, i64 %.idx87, !dbg !70
  %1190 = getelementptr float, ptr addrspace(1) %1189, i64 %1184, !dbg !70
  %.idx88 = shl nuw nsw i64 %65, 9, !dbg !70
  %1191 = getelementptr i8, ptr addrspace(1) %1180, i64 %.idx88, !dbg !70
  %1192 = getelementptr float, ptr addrspace(1) %1191, i64 %1184, !dbg !70
  %1193 = icmp slt i64 %1184, 128, !dbg !70
  %1194 = and i1 %71, %1193, !dbg !70
  %1195 = shl nuw nsw i32 %33, 1, !dbg !70
  %1196 = and i32 %1195, 6, !dbg !70
  %1197 = and i32 %51, 192, !dbg !70
  %1198 = or disjoint i32 %1197, %1196, !dbg !70
  %1199 = shl nuw nsw i32 %33, 4, !dbg !70
  %1200 = and i32 %1199, 1536, !dbg !70
  %1201 = or disjoint i32 %1198, %1200, !dbg !70
  %1202 = or disjoint i32 %1201, %54, !dbg !70
  %1203 = and i32 %1181, 508, !dbg !70
  %1204 = lshr i32 %1202, 3, !dbg !70
  %1205 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1204, !dbg !70
  %1206 = getelementptr inbounds nuw float, ptr addrspace(3) %1205, i32 %1202, !dbg !70
  %1207 = insertelement <2 x float> poison, float %1147, i64 0, !dbg !70
  %1208 = insertelement <2 x float> %1207, float %1148, i64 1, !dbg !70
  store <2 x float> %1208, ptr addrspace(3) %1206, align 8, !dbg !70
  %1209 = or disjoint i32 %1202, 256, !dbg !70
  %1210 = lshr i32 %1209, 3, !dbg !70
  %1211 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1210, !dbg !70
  %1212 = getelementptr inbounds nuw float, ptr addrspace(3) %1211, i32 %1209, !dbg !70
  %1213 = insertelement <2 x float> poison, float %1149, i64 0, !dbg !70
  %1214 = insertelement <2 x float> %1213, float %1150, i64 1, !dbg !70
  store <2 x float> %1214, ptr addrspace(3) %1212, align 8, !dbg !70
  %1215 = getelementptr inbounds nuw i8, ptr addrspace(3) %1206, i32 32, !dbg !70
  %1216 = insertelement <2 x float> poison, float %1151, i64 0, !dbg !70
  %1217 = insertelement <2 x float> %1216, float %1152, i64 1, !dbg !70
  store <2 x float> %1217, ptr addrspace(3) %1215, align 8, !dbg !70
  %1218 = or disjoint i32 %1202, 264, !dbg !70
  %1219 = lshr i32 %1218, 3, !dbg !70
  %1220 = and i32 %1219, 536870908, !dbg !70
  %1221 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1220, !dbg !70
  %1222 = getelementptr inbounds nuw float, ptr addrspace(3) %1221, i32 %1218, !dbg !70
  %1223 = insertelement <2 x float> poison, float %1153, i64 0, !dbg !70
  %1224 = insertelement <2 x float> %1223, float %1154, i64 1, !dbg !70
  store <2 x float> %1224, ptr addrspace(3) %1222, align 8, !dbg !70
  %1225 = getelementptr inbounds nuw i8, ptr addrspace(3) %1206, i32 64, !dbg !70
  %1226 = insertelement <2 x float> poison, float %1155, i64 0, !dbg !70
  %1227 = insertelement <2 x float> %1226, float %1156, i64 1, !dbg !70
  store <2 x float> %1227, ptr addrspace(3) %1225, align 8, !dbg !70
  %1228 = or disjoint i32 %1202, 272, !dbg !70
  %1229 = lshr i32 %1228, 3, !dbg !70
  %1230 = and i32 %1229, 536870908, !dbg !70
  %1231 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1230, !dbg !70
  %1232 = getelementptr inbounds nuw float, ptr addrspace(3) %1231, i32 %1228, !dbg !70
  %1233 = insertelement <2 x float> poison, float %1157, i64 0, !dbg !70
  %1234 = insertelement <2 x float> %1233, float %1158, i64 1, !dbg !70
  store <2 x float> %1234, ptr addrspace(3) %1232, align 8, !dbg !70
  %1235 = getelementptr inbounds nuw i8, ptr addrspace(3) %1206, i32 96, !dbg !70
  %1236 = insertelement <2 x float> poison, float %1159, i64 0, !dbg !70
  %1237 = insertelement <2 x float> %1236, float %1160, i64 1, !dbg !70
  store <2 x float> %1237, ptr addrspace(3) %1235, align 8, !dbg !70
  %1238 = or disjoint i32 %1202, 280, !dbg !70
  %1239 = lshr i32 %1238, 3, !dbg !70
  %1240 = and i32 %1239, 536870908, !dbg !70
  %1241 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1240, !dbg !70
  %1242 = getelementptr inbounds nuw float, ptr addrspace(3) %1241, i32 %1238, !dbg !70
  %1243 = insertelement <2 x float> poison, float %1161, i64 0, !dbg !70
  %1244 = insertelement <2 x float> %1243, float %1162, i64 1, !dbg !70
  store <2 x float> %1244, ptr addrspace(3) %1242, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %1245 = lshr i32 %33, 1, !dbg !70
  %1246 = and i32 %1245, 60, !dbg !70
  %1247 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1246, !dbg !70
  %1248 = getelementptr inbounds nuw float, ptr addrspace(3) %1247, i32 %1203, !dbg !70
  %1249 = or disjoint i32 %1203, 512, !dbg !70
  %1250 = lshr i32 %1249, 3, !dbg !70
  %1251 = and i32 %1250, 124, !dbg !70
  %1252 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1251, !dbg !70
  %1253 = getelementptr inbounds nuw float, ptr addrspace(3) %1252, i32 %1249, !dbg !70
  %1254 = load <4 x i32>, ptr addrspace(3) %1253, align 16, !dbg !70
  %1255 = or disjoint i32 %1203, 1024, !dbg !70
  %1256 = lshr i32 %1255, 3, !dbg !70
  %1257 = and i32 %1256, 188, !dbg !70
  %1258 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1257, !dbg !70
  %1259 = getelementptr inbounds nuw float, ptr addrspace(3) %1258, i32 %1255, !dbg !70
  %1260 = load <4 x i32>, ptr addrspace(3) %1259, align 16, !dbg !70
  %1261 = or disjoint i32 %1203, 1536, !dbg !70
  %1262 = lshr i32 %1261, 3, !dbg !70
  %1263 = and i32 %1262, 252, !dbg !70
  %1264 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1263, !dbg !70
  %1265 = getelementptr inbounds nuw float, ptr addrspace(3) %1264, i32 %1261, !dbg !70
  %1266 = load <4 x i32>, ptr addrspace(3) %1265, align 16, !dbg !70
  %.extract = load i32, ptr addrspace(3) %1248, align 16, !dbg !70
  %1267 = getelementptr inbounds nuw i8, ptr addrspace(3) %1248, i32 4, !dbg !70
  %.extract104 = load i32, ptr addrspace(3) %1267, align 4, !dbg !70
  %1268 = getelementptr inbounds nuw i8, ptr addrspace(3) %1248, i32 8, !dbg !70
  %.extract105 = load i32, ptr addrspace(3) %1268, align 8, !dbg !70
  %1269 = getelementptr inbounds nuw i8, ptr addrspace(3) %1248, i32 12, !dbg !70
  %.extract106 = load i32, ptr addrspace(3) %1269, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract104, i32 %.extract105, i32 %.extract106, ptr addrspace(1) %1186, i1 %1194) #2, !dbg !70
  %.extract107 = extractelement <4 x i32> %1254, i64 0, !dbg !70
  %.extract108 = extractelement <4 x i32> %1254, i64 1, !dbg !70
  %.extract109 = extractelement <4 x i32> %1254, i64 2, !dbg !70
  %.extract110 = extractelement <4 x i32> %1254, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract107, i32 %.extract108, i32 %.extract109, i32 %.extract110, ptr addrspace(1) %1188, i1 %1194) #2, !dbg !70
  %.extract111 = extractelement <4 x i32> %1260, i64 0, !dbg !70
  %.extract112 = extractelement <4 x i32> %1260, i64 1, !dbg !70
  %.extract113 = extractelement <4 x i32> %1260, i64 2, !dbg !70
  %.extract114 = extractelement <4 x i32> %1260, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract112, i32 %.extract113, i32 %.extract114, ptr addrspace(1) %1190, i1 %1194) #2, !dbg !70
  %.extract115 = extractelement <4 x i32> %1266, i64 0, !dbg !70
  %.extract116 = extractelement <4 x i32> %1266, i64 1, !dbg !70
  %.extract117 = extractelement <4 x i32> %1266, i64 2, !dbg !70
  %.extract118 = extractelement <4 x i32> %1266, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract116, i32 %.extract117, i32 %.extract118, ptr addrspace(1) %1192, i1 %1194) #2, !dbg !70
  %1270 = getelementptr i8, ptr addrspace(1) %1185, i64 32768, !dbg !71
  %1271 = getelementptr float, ptr addrspace(1) %1270, i64 %1184, !dbg !71
  %1272 = getelementptr i8, ptr addrspace(1) %1187, i64 32768, !dbg !71
  %1273 = getelementptr float, ptr addrspace(1) %1272, i64 %1184, !dbg !71
  %1274 = getelementptr i8, ptr addrspace(1) %1189, i64 32768, !dbg !71
  %1275 = getelementptr float, ptr addrspace(1) %1274, i64 %1184, !dbg !71
  %1276 = getelementptr i8, ptr addrspace(1) %1191, i64 32768, !dbg !71
  %1277 = getelementptr float, ptr addrspace(1) %1276, i64 %1184, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %1278 = insertelement <2 x float> poison, float %1163, i64 0, !dbg !71
  %1279 = insertelement <2 x float> %1278, float %1164, i64 1, !dbg !71
  store <2 x float> %1279, ptr addrspace(3) %1206, align 8, !dbg !71
  %1280 = insertelement <2 x float> poison, float %1165, i64 0, !dbg !71
  %1281 = insertelement <2 x float> %1280, float %1166, i64 1, !dbg !71
  store <2 x float> %1281, ptr addrspace(3) %1212, align 8, !dbg !71
  %1282 = insertelement <2 x float> poison, float %1167, i64 0, !dbg !71
  %1283 = insertelement <2 x float> %1282, float %1168, i64 1, !dbg !71
  store <2 x float> %1283, ptr addrspace(3) %1215, align 8, !dbg !71
  %1284 = insertelement <2 x float> poison, float %1169, i64 0, !dbg !71
  %1285 = insertelement <2 x float> %1284, float %1170, i64 1, !dbg !71
  store <2 x float> %1285, ptr addrspace(3) %1222, align 8, !dbg !71
  %1286 = insertelement <2 x float> poison, float %1171, i64 0, !dbg !71
  %1287 = insertelement <2 x float> %1286, float %1172, i64 1, !dbg !71
  store <2 x float> %1287, ptr addrspace(3) %1225, align 8, !dbg !71
  %1288 = insertelement <2 x float> poison, float %1173, i64 0, !dbg !71
  %1289 = insertelement <2 x float> %1288, float %1174, i64 1, !dbg !71
  store <2 x float> %1289, ptr addrspace(3) %1232, align 8, !dbg !71
  %1290 = insertelement <2 x float> poison, float %1175, i64 0, !dbg !71
  %1291 = insertelement <2 x float> %1290, float %1176, i64 1, !dbg !71
  store <2 x float> %1291, ptr addrspace(3) %1235, align 8, !dbg !71
  %1292 = insertelement <2 x float> poison, float %1177, i64 0, !dbg !71
  %1293 = insertelement <2 x float> %1292, float %1178, i64 1, !dbg !71
  store <2 x float> %1293, ptr addrspace(3) %1242, align 8, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %1294 = load <4 x i32>, ptr addrspace(3) %1253, align 16, !dbg !71
  %1295 = load <4 x i32>, ptr addrspace(3) %1259, align 16, !dbg !71
  %1296 = load <4 x i32>, ptr addrspace(3) %1265, align 16, !dbg !71
  %.extract138 = load i32, ptr addrspace(3) %1248, align 16, !dbg !71
  %.extract139 = load i32, ptr addrspace(3) %1267, align 4, !dbg !71
  %.extract140 = load i32, ptr addrspace(3) %1268, align 8, !dbg !71
  %.extract141 = load i32, ptr addrspace(3) %1269, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract138, i32 %.extract139, i32 %.extract140, i32 %.extract141, ptr addrspace(1) %1271, i1 %1194) #2, !dbg !71
  %.extract142 = extractelement <4 x i32> %1294, i64 0, !dbg !71
  %.extract143 = extractelement <4 x i32> %1294, i64 1, !dbg !71
  %.extract144 = extractelement <4 x i32> %1294, i64 2, !dbg !71
  %.extract145 = extractelement <4 x i32> %1294, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract142, i32 %.extract143, i32 %.extract144, i32 %.extract145, ptr addrspace(1) %1273, i1 %1194) #2, !dbg !71
  %.extract146 = extractelement <4 x i32> %1295, i64 0, !dbg !71
  %.extract147 = extractelement <4 x i32> %1295, i64 1, !dbg !71
  %.extract148 = extractelement <4 x i32> %1295, i64 2, !dbg !71
  %.extract149 = extractelement <4 x i32> %1295, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract146, i32 %.extract147, i32 %.extract148, i32 %.extract149, ptr addrspace(1) %1275, i1 %1194) #2, !dbg !71
  %.extract150 = extractelement <4 x i32> %1296, i64 0, !dbg !71
  %.extract151 = extractelement <4 x i32> %1296, i64 1, !dbg !71
  %.extract152 = extractelement <4 x i32> %1296, i64 2, !dbg !71
  %.extract153 = extractelement <4 x i32> %1296, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract150, i32 %.extract151, i32 %.extract152, i32 %.extract153, ptr addrspace(1) %1277, i1 %1194) #2, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 113, column: 43, scope: !5)
!42 = !DILocation(line: 113, column: 37, scope: !5)
!43 = !DILocation(line: 114, column: 31, scope: !5)
!44 = !DILocation(line: 117, column: 35, scope: !5)
!45 = !DILocation(line: 127, column: 26, scope: !5)
!46 = !DILocation(line: 131, column: 31, scope: !5)
!47 = !DILocation(line: 141, column: 52, scope: !5)
!48 = !DILocation(line: 145, column: 33, scope: !5)
!49 = !DILocation(line: 145, column: 26, scope: !5)
!50 = !DILocation(line: 147, column: 30, scope: !5)
!51 = !DILocation(line: 147, column: 35, scope: !5)
!52 = !DILocation(line: 147, column: 39, scope: !5)
!53 = !DILocation(line: 149, column: 30, scope: !5)
!54 = !DILocation(line: 149, column: 50, scope: !5)
!55 = !DILocation(line: 150, column: 56, scope: !5)
!56 = !DILocation(line: 150, column: 45, scope: !5)
!57 = !DILocation(line: 150, column: 60, scope: !5)
!58 = !DILocation(line: 150, column: 31, scope: !5)
!59 = !DILocation(line: 153, column: 53, scope: !5)
!60 = !DILocation(line: 153, column: 42, scope: !5)
!61 = !DILocation(line: 153, column: 59, scope: !5)
!62 = !DILocation(line: 153, column: 24, scope: !5)
!63 = !DILocation(line: 154, column: 27, scope: !5)
!64 = !DILocation(line: 155, column: 20, scope: !5)
!65 = !DILocation(line: 157, column: 24, scope: !5)
!66 = !DILocation(line: 179, column: 21, scope: !5)
!67 = !DILocation(line: 186, column: 28, scope: !5)
!68 = !DILocation(line: 193, column: 32, scope: !5)
!69 = !DILocation(line: 95, column: 18, scope: !5)
!70 = !DILocation(line: 211, column: 23, scope: !5)
!71 = !DILocation(line: 214, column: 27, scope: !5)
!72 = !DILocation(line: 209, column: 4, scope: !5)
