//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_gated_delta_rule_fwd_kernel_h_blockdim64 // -- Begin function chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.visible .entry chunk_gated_delta_rule_fwd_kernel_h_blockdim64(
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6,
	.param .u32 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_8
)
.reqntid 128
{
	.reg .pred 	%p<71>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<1384>;
	.reg .b64 	%rd<280>;
	.loc	1 36 0                          // chunk_delta_h.py:36:0
$L__func_begin0:
	.loc	1 36 0                          // chunk_delta_h.py:36:0

// %bb.0:
	ld.param.b32 	%r141, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7];
	ld.param.b64 	%rd57, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6];
	ld.param.b64 	%rd56, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4];
	ld.param.b64 	%rd54, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2];
	ld.param.b64 	%rd53, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1];
	ld.param.b64 	%rd52, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0];
$L__tmp0:
	.loc	1 61 30                         // chunk_delta_h.py:61:30
	mov.u32 	%r183, %ctaid.x;
	.loc	1 61 48                         // chunk_delta_h.py:61:48
	mov.u32 	%r1, %ctaid.y;
	.loc	1 62 33                         // chunk_delta_h.py:62:33
	and.b32 	%r184, %r1, 31;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_delta_h.py:70:24 ]
	add.s32 	%r185, %r141, 63;
$L__tmp2:
	.loc	1 71 20                         // chunk_delta_h.py:71:20
	shl.b32 	%r3, %r1, 14;
	.loc	1 69 25                         // chunk_delta_h.py:69:25
	and.b32 	%r193, %r1, 65504;
	.loc	1 84 16                         // chunk_delta_h.py:84:16
	mul.lo.s32 	%r194, %r193, %r141;
	.loc	1 84 20                         // chunk_delta_h.py:84:20
	or.b32 	%r195, %r194, %r184;
	.loc	1 84 27                         // chunk_delta_h.py:84:27
	shl.b32 	%r196, %r195, 7;
	.loc	1 84 9                          // chunk_delta_h.py:84:9
	mul.wide.s32 	%rd80, %r196, 2;
	add.s64 	%rd81, %rd53, %rd80;
	.loc	1 85 9                          // chunk_delta_h.py:85:9
	add.s64 	%rd82, %rd52, %rd80;
	.loc	1 86 9                          // chunk_delta_h.py:86:9
	add.s64 	%rd83, %rd54, %rd80;
	.loc	1 113 79                        // chunk_delta_h.py:113:79
	shl.b32 	%r197, %r183, 5;
	.loc	1 113 94                        // chunk_delta_h.py:113:94
	cvt.s64.s32 	%rd2, %r197;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	mov.u32 	%r4, %tid.x;
	bfe.u32 	%r6, %r4, 2, 3;
	bfe.s32 	%r198, %r4, 5, 1;
	bfe.u32 	%r8, %r4, 2, 4;
	and.b32 	%r9, %r4, 64;
	shr.u32 	%r10, %r9, 2;
	or.b32 	%r199, %r8, %r10;
	or.b32 	%r200, %r199, 32;
	bfe.u32 	%r201, %r4, 3, 4;
	or.b32 	%r202, %r201, 16;
	or.b32 	%r203, %r201, 32;
	or.b32 	%r204, %r201, 48;
	and.b32 	%r11, %r4, 1;
	shl.b32 	%r12, %r11, 3;
	shl.b32 	%r13, %r4, 3;
	and.b32 	%r14, %r13, 16;
	or.b32 	%r205, %r12, %r14;
	and.b32 	%r15, %r13, 32;
	or.b32 	%r16, %r205, %r15;
	shr.u32 	%r17, %r4, 1;
	and.b32 	%r18, %r17, 48;
	or.b32 	%r206, %r18, %r6;
	or.b32 	%r207, %r206, 8;
	cvt.u64.u32 	%rd5, %r201;
	cvt.u64.u32 	%rd6, %r202;
	cvt.u64.u32 	%rd7, %r203;
	cvt.u64.u32 	%rd8, %r204;
	cvt.u64.u32 	%rd84, %r16;
	cvt.u64.u32 	%rd85, %r205;
	or.b64 	%rd9, %rd85, %rd2;
	setp.gt.s32 	%p10, %r197, -1;
	setp.lt.s64 	%p11, %rd9, 128;
	and.pred 	%p22, %p10, %p11;
	.loc	1 150 35                        // chunk_delta_h.py:150:35
	mul.wide.s32 	%rd86, %r194, 4;
	add.s64 	%rd87, %rd56, %rd86;
	.loc	1 151 50                        // chunk_delta_h.py:151:50
	mul.wide.u32 	%rd88, %r184, 4;
	add.s64 	%rd13, %rd87, %rd88;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s32 	%p12, %r185, 64;
	setp.gt.s32 	%p13, %r185, 63;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	mul.wide.u32 	%rd89, %r201, 4096;
	mul.wide.u32 	%rd90, %r202, 4096;
	mul.wide.u32 	%rd91, %r203, 4096;
	mul.wide.u32 	%rd92, %r204, 4096;
	mul.wide.u32 	%rd93, %r199, 4096;
	mul.wide.u32 	%rd94, %r200, 4096;
	or.b64 	%rd95, %rd89, %rd84;
	or.b64 	%rd96, %rd90, %rd84;
	or.b64 	%rd97, %rd91, %rd84;
	or.b64 	%rd98, %rd92, %rd84;
	shl.b64 	%rd99, %rd95, 1;
	add.s64 	%rd58, %rd83, %rd99;
	shl.b64 	%rd100, %rd96, 1;
	add.s64 	%rd59, %rd83, %rd100;
	shl.b64 	%rd101, %rd97, 1;
	add.s64 	%rd60, %rd83, %rd101;
	shl.b64 	%rd102, %rd98, 1;
	add.s64 	%rd61, %rd83, %rd102;
	setp.lt.s32 	%p14, %r201, %r141;
	setp.lt.s32 	%p15, %r202, %r141;
	setp.lt.s32 	%p16, %r203, %r141;
	setp.lt.s32 	%p17, %r204, %r141;
	setp.lt.s32 	%p18, %r199, %r141;
	setp.lt.s32 	%p19, %r200, %r141;
	and.b32 	%r208, %r198, 288;
	shl.b32 	%r19, %r9, 3;
	and.b32 	%r209, %r4, 24;
	mul.lo.s32 	%r210, %r209, 9;
	or.b32 	%r211, %r210, %r208;
	or.b32 	%r212, %r211, %r19;
	xor.b32 	%r20, %r212, %r16;
	shl.b32 	%r213, %r20, 1;
	mov.b32 	%r214, global_smem;
	add.s32 	%r142, %r214, %r213;
	or.b32 	%r215, %r16, 1024;
	xor.b32 	%r21, %r212, %r215;
	shl.b32 	%r216, %r21, 1;
	add.s32 	%r144, %r214, %r216;
	or.b32 	%r217, %r16, 2048;
	xor.b32 	%r22, %r212, %r217;
	shl.b32 	%r218, %r22, 1;
	add.s32 	%r146, %r214, %r218;
	or.b32 	%r219, %r16, 3072;
	xor.b32 	%r23, %r212, %r219;
	shl.b32 	%r220, %r23, 1;
	add.s32 	%r148, %r214, %r220;
	selp.b32 	%r221, 16, 0, %p13;
	selp.b32 	%r151, %r221, 0, %p14;
	// begin inline asm
	cp.async.cg.shared.global [ %r142 + 0 ], [ %rd58 + 0 ], 0x10, %r151;
	// end inline asm
	selp.b32 	%r153, %r221, 0, %p15;
	// begin inline asm
	cp.async.cg.shared.global [ %r144 + 0 ], [ %rd59 + 0 ], 0x10, %r153;
	// end inline asm
	selp.b32 	%r155, %r221, 0, %p16;
	// begin inline asm
	cp.async.cg.shared.global [ %r146 + 0 ], [ %rd60 + 0 ], 0x10, %r155;
	// end inline asm
	selp.b32 	%r157, %r221, 0, %p17;
	// begin inline asm
	cp.async.cg.shared.global [ %r148 + 0 ], [ %rd61 + 0 ], 0x10, %r157;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd62, %rd58, 128;
	add.s64 	%rd63, %rd59, 128;
	add.s64 	%rd64, %rd60, 128;
	add.s64 	%rd65, %rd61, 128;
	add.s32 	%r222, %r214, 16384;
	add.s32 	%r150, %r222, %r213;
	add.s32 	%r152, %r222, %r216;
	add.s32 	%r154, %r222, %r218;
	add.s32 	%r156, %r222, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r150 + 0 ], [ %rd62 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r152 + 0 ], [ %rd63 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r154 + 0 ], [ %rd64 + 0 ], 0x10, %r155;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r156 + 0 ], [ %rd65 + 0 ], 0x10, %r157;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd103, %rd93, %rd9;
	add.s64 	%rd104, %rd94, %rd9;
	shl.b64 	%rd105, %rd103, 1;
	add.s64 	%rd66, %rd81, %rd105;
	shl.b64 	%rd106, %rd104, 1;
	add.s64 	%rd67, %rd81, %rd106;
	and.pred 	%p70, %p22, %p18;
	and.pred 	%p69, %p22, %p19;
	xor.b32 	%r223, %r205, %r209;
	shl.b32 	%r224, %r223, 1;
	add.s32 	%r225, %r214, %r224;
	shl.b32 	%r226, %r199, 6;
	add.s32 	%r227, %r225, %r226;
	add.s32 	%r158, %r227, 74752;
	add.s32 	%r160, %r227, 76800;
	selp.b32 	%r228, 16, 0, %p70;
	selp.b32 	%r159, %r228, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r158 + 0 ], [ %rd66 + 0 ], 0x10, %r159;
	// end inline asm
	selp.b32 	%r229, 16, 0, %p69;
	selp.b32 	%r161, %r229, 0, %p13;
	// begin inline asm
	cp.async.cg.shared.global [ %r160 + 0 ], [ %rd67 + 0 ], 0x10, %r161;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	mul.wide.u32 	%rd107, %r206, 128;
	add.s64 	%rd68, %rd13, %rd107;
	mul.wide.u32 	%rd108, %r207, 128;
	add.s64 	%rd69, %rd13, %rd108;
	setp.lt.s32 	%p20, %r206, %r141;
	setp.lt.s32 	%p21, %r207, %r141;
	shl.b32 	%r230, %r206, 2;
	add.s32 	%r231, %r214, %r230;
	add.s32 	%r162, %r231, 82944;
	add.s32 	%r164, %r231, 82976;
	and.b32 	%r28, %r4, 3;
	setp.eq.s32 	%p8, %r28, 0;
	selp.b32 	%r232, 4, 0, %p13;
	selp.b32 	%r163, %r232, 0, %p20;
	// begin inline asm
	@%p8 cp.async.ca.shared.global [ %r162 + 0 ], [ %rd68 + 0 ], 0x4, %r163;
	// end inline asm
	selp.b32 	%r165, %r232, 0, %p21;
	// begin inline asm
	@%p8 cp.async.ca.shared.global [ %r164 + 0 ], [ %rd69 + 0 ], 0x4, %r165;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd70, %rd82, %rd99;
	add.s64 	%rd71, %rd82, %rd100;
	add.s64 	%rd72, %rd82, %rd101;
	add.s64 	%rd73, %rd82, %rd102;
	add.s32 	%r233, %r214, 32768;
	add.s32 	%r166, %r233, %r213;
	add.s32 	%r168, %r233, %r216;
	add.s32 	%r170, %r233, %r218;
	add.s32 	%r172, %r233, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r166 + 0 ], [ %rd70 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r168 + 0 ], [ %rd71 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r170 + 0 ], [ %rd72 + 0 ], 0x10, %r155;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r172 + 0 ], [ %rd73 + 0 ], 0x10, %r157;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd74, %rd70, 128;
	add.s64 	%rd75, %rd71, 128;
	add.s64 	%rd76, %rd72, 128;
	add.s64 	%rd77, %rd73, 128;
	add.s32 	%r234, %r214, 49152;
	add.s32 	%r174, %r234, %r213;
	add.s32 	%r176, %r234, %r216;
	add.s32 	%r178, %r234, %r218;
	add.s32 	%r180, %r234, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r174 + 0 ], [ %rd74 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r176 + 0 ], [ %rd75 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r178 + 0 ], [ %rd76 + 0 ], 0x10, %r155;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r180 + 0 ], [ %rd77 + 0 ], 0x10, %r157;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r768, 0f00000000;
	mov.b32 	%r769, %r768;
	mov.b32 	%r770, %r768;
	mov.b32 	%r771, %r768;
	mov.b32 	%r772, %r768;
	mov.b32 	%r773, %r768;
	mov.b32 	%r774, %r768;
	mov.b32 	%r775, %r768;
	mov.b32 	%r776, %r768;
	mov.b32 	%r777, %r768;
	mov.b32 	%r778, %r768;
	mov.b32 	%r779, %r768;
	mov.b32 	%r780, %r768;
	mov.b32 	%r781, %r768;
	mov.b32 	%r782, %r768;
	mov.b32 	%r783, %r768;
	mov.b32 	%r940, %r768;
	mov.b32 	%r941, %r768;
	mov.b32 	%r942, %r768;
	mov.b32 	%r943, %r768;
	mov.b32 	%r944, %r768;
	mov.b32 	%r945, %r768;
	mov.b32 	%r946, %r768;
	mov.b32 	%r947, %r768;
	mov.b32 	%r948, %r768;
	mov.b32 	%r949, %r768;
	mov.b32 	%r950, %r768;
	mov.b32 	%r951, %r768;
	mov.b32 	%r952, %r768;
	mov.b32 	%r953, %r768;
	mov.b32 	%r954, %r768;
	mov.b32 	%r955, %r768;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	@%p12 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	ld.param.b64 	%rd55, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3];
	shr.s32 	%r186, %r185, 31;
	shr.u32 	%r187, %r186, 26;
	add.s32 	%r188, %r185, %r187;
	shr.s32 	%r2, %r188, 6;
	ld.param.b64 	%rd78, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5];
	and.b32 	%r189, %r3, 1073217536;
	mul.lo.s32 	%r190, %r189, %r2;
	shl.b32 	%r191, %r184, 14;
	or.b32 	%r192, %r190, %r191;
	mul.wide.s32 	%rd79, %r192, 2;
	add.s64 	%rd1, %rd78, %rd79;
	shr.u32 	%r5, %r4, 5;
	and.b32 	%r7, %r4, 32;
	cvt.u64.u32 	%rd3, %r199;
	cvt.u64.u32 	%rd4, %r200;
	cvt.s64.s32 	%rd10, %r141;
	cvt.s64.s32 	%rd11, %r194;
	cvt.u64.u32 	%rd12, %r184;
	cvt.u32.u64 	%r238, %rd12;
	add.s32 	%r239, %r2, -1;
	shl.b32 	%r240, %r11, 5;
	and.b32 	%r241, %r4, 6;
	mul.lo.s32 	%r242, %r241, 36;
	or.b32 	%r243, %r242, %r240;
	shl.b32 	%r244, %r4, 5;
	and.b32 	%r245, %r244, 256;
	or.b32 	%r246, %r243, %r245;
	and.b32 	%r247, %r17, 8;
	xor.b32 	%r248, %r246, %r247;
	shl.b32 	%r249, %r7, 4;
	or.b32 	%r250, %r248, %r249;
	shl.b32 	%r251, %r9, 4;
	xor.b32 	%r252, %r250, %r251;
	shl.b32 	%r253, %r252, 1;
	add.s32 	%r255, %r214, 70656;
	add.s32 	%r313, %r255, %r253;
	xor.b32 	%r256, %r252, 16;
	shl.b32 	%r257, %r256, 1;
	add.s32 	%r318, %r255, %r257;
	shl.b64 	%rd14, %rd3, 8;
	shl.b64 	%rd15, %rd4, 8;
	and.b32 	%r258, %r244, 480;
	or.b32 	%r259, %r258, %r247;
	or.b32 	%r260, %r259, %r249;
	or.b32 	%r261, %r260, %r251;
	and.b32 	%r262, %r13, 448;
	or.b32 	%r263, %r16, %r262;
	or.b32 	%r264, %r263, %r19;
	shr.u32 	%r265, %r261, 1;
	and.b32 	%r266, %r265, 1008;
	add.s32 	%r905, %r214, 65536;
	add.s32 	%r268, %r905, %r266;
	shl.b32 	%r269, %r261, 1;
	add.s32 	%r323, %r268, %r269;
	add.s32 	%r328, %r323, 32;
	shr.u32 	%r270, %r264, 1;
	and.b32 	%r271, %r270, 496;
	add.s32 	%r272, %r905, %r271;
	shl.b32 	%r273, %r264, 1;
	add.s32 	%r33, %r272, %r273;
	or.b32 	%r274, %r264, 1024;
	shr.u32 	%r275, %r274, 1;
	and.b32 	%r276, %r275, 1008;
	add.s32 	%r277, %r905, %r276;
	shl.b32 	%r278, %r274, 1;
	add.s32 	%r34, %r277, %r278;
	add.s32 	%r279, %r214, 78848;
	add.s32 	%r341, %r279, %r253;
	add.s32 	%r346, %r279, %r257;
	bfe.u32 	%r280, %r255, 4, 14;
	cvt.u64.u32 	%rd110, %r280;
	or.b64 	%rd166, %rd110, -9223371899399045120;
	add.s32 	%r281, %r214, 71680;
	bfe.u32 	%r282, %r281, 4, 14;
	cvt.u64.u32 	%rd111, %r282;
	or.b64 	%rd168, %rd111, -9223371899399045120;
	add.s32 	%r283, %r214, 72704;
	bfe.u32 	%r284, %r283, 4, 14;
	cvt.u64.u32 	%rd112, %r284;
	or.b64 	%rd170, %rd112, -9223371899399045120;
	add.s32 	%r285, %r214, 73728;
	bfe.u32 	%r286, %r285, 4, 14;
	cvt.u64.u32 	%rd113, %r286;
	or.b64 	%rd172, %rd113, -9223371899399045120;
	bfe.u32 	%r287, %r279, 4, 14;
	cvt.u64.u32 	%rd114, %r287;
	or.b64 	%rd174, %rd114, -9223371899399045120;
	add.s32 	%r288, %r214, 79872;
	bfe.u32 	%r289, %r288, 4, 14;
	cvt.u64.u32 	%rd115, %r289;
	or.b64 	%rd176, %rd115, -9223371899399045120;
	add.s32 	%r290, %r214, 80896;
	bfe.u32 	%r291, %r290, 4, 14;
	cvt.u64.u32 	%rd116, %r291;
	or.b64 	%rd178, %rd116, -9223371899399045120;
	add.s32 	%r292, %r214, 81920;
	bfe.u32 	%r293, %r292, 4, 14;
	cvt.u64.u32 	%rd117, %r293;
	or.b64 	%rd180, %rd117, -9223371899399045120;
	add.s32 	%r726, %r905, %r253;
	add.s32 	%r731, %r905, %r257;
	bfe.u32 	%r294, %r905, 4, 14;
	cvt.u64.u32 	%rd118, %r294;
	or.b64 	%rd185, %rd118, -9223371899399045120;
	add.s32 	%r295, %r214, 66560;
	bfe.u32 	%r296, %r295, 4, 14;
	cvt.u64.u32 	%rd119, %r296;
	or.b64 	%rd187, %rd119, -9223371899399045120;
	add.s32 	%r297, %r214, 67584;
	bfe.u32 	%r298, %r297, 4, 14;
	cvt.u64.u32 	%rd120, %r298;
	or.b64 	%rd189, %rd120, -9223371899399045120;
	add.s32 	%r299, %r214, 68608;
	bfe.u32 	%r300, %r299, 4, 14;
	cvt.u64.u32 	%rd121, %r300;
	or.b64 	%rd191, %rd121, -9223371899399045120;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cvt.s64.s32 	%rd28, %r239;
	cvt.u64.u32 	%rd29, %r2;
	add.s32 	%r301, %r214, 74752;
	add.s32 	%r701, %r301, %r253;
	add.s32 	%r706, %r301, %r257;
	add.s32 	%r302, %r18, %r6;
	add.s32 	%r303, %r302, 8;
	cvt.u64.u32 	%rd30, %r303;
	mul.wide.u32 	%rd122, %r303, 128;
	shl.b64 	%rd123, %rd11, 2;
	add.s64 	%rd124, %rd122, %rd123;
	shl.b64 	%rd125, %rd12, 2;
	add.s64 	%rd126, %rd124, %rd125;
	add.s64 	%rd127, %rd126, %rd56;
	add.s64 	%rd277, %rd127, 8192;
	cvt.u64.u32 	%rd32, %r302;
	mul.wide.u32 	%rd128, %r302, 128;
	add.s64 	%rd129, %rd128, %rd123;
	add.s64 	%rd130, %rd129, %rd125;
	add.s64 	%rd131, %rd130, %rd56;
	add.s64 	%rd276, %rd131, 8192;
	add.s32 	%r304, %r10, %r8;
	add.s32 	%r305, %r304, 32;
	cvt.u64.u32 	%rd132, %r305;
	add.s64 	%rd34, %rd132, 64;
	mul.wide.u32 	%rd133, %r305, 8192;
	shr.u32 	%r306, %r1, 5;
	mul.lo.s32 	%r307, %r141, %r306;
	shl.b32 	%r308, %r307, 12;
	shl.b32 	%r309, %r238, 7;
	or.b32 	%r310, %r308, %r309;
	cvt.s64.s32 	%rd134, %r310;
	add.s64 	%rd135, %rd2, %rd134;
	add.s32 	%r311, %r14, %r12;
	cvt.u64.u32 	%rd136, %r311;
	add.s64 	%rd137, %rd135, %rd136;
	shl.b64 	%rd138, %rd137, 1;
	add.s64 	%rd139, %rd133, %rd138;
	add.s64 	%rd140, %rd139, %rd53;
	add.s64 	%rd35, %rd140, 524288;
	mul.wide.u32 	%rd141, %r305, 4096;
	add.s64 	%rd142, %rd141, %rd2;
	add.s64 	%rd143, %rd142, %rd136;
	shl.b64 	%rd144, %rd143, 1;
	mul.wide.s32 	%rd145, %r310, 2;
	add.s64 	%rd146, %rd144, %rd145;
	add.s64 	%rd36, %rd55, %rd146;
	cvt.u64.u32 	%rd147, %r304;
	or.b64 	%rd37, %rd147, 64;
	mul.wide.u32 	%rd148, %r304, 8192;
	add.s64 	%rd149, %rd148, %rd138;
	add.s64 	%rd150, %rd149, %rd53;
	add.s64 	%rd38, %rd150, 524288;
	mul.wide.u32 	%rd151, %r304, 4096;
	add.s64 	%rd152, %rd151, %rd2;
	add.s64 	%rd153, %rd152, %rd136;
	shl.b64 	%rd154, %rd153, 1;
	add.s64 	%rd155, %rd154, %rd145;
	add.s64 	%rd39, %rd55, %rd155;
	shl.b64 	%rd156, %rd5, 13;
	add.s32 	%r312, %r311, %r15;
	cvt.u64.u32 	%rd157, %r312;
	or.b64 	%rd158, %rd134, %rd157;
	shl.b64 	%rd159, %rd158, 1;
	add.s64 	%rd160, %rd156, %rd159;
	add.s64 	%rd40, %rd52, %rd160;
	add.s64 	%rd41, %rd54, %rd160;
	mov.b32 	%r940, 0f00000000;
	mov.b32 	%r520, 0;
	mov.b32 	%r1318, -1;
	mov.b64 	%rd275, 0;
	mov.b64 	%rd278, %rd275;
	mov.b64 	%rd279, %rd275;
	mov.b32 	%r1319, %r520;
	mov.b32 	%r941, %r940;
	mov.b32 	%r942, %r940;
	mov.b32 	%r943, %r940;
	mov.b32 	%r944, %r940;
	mov.b32 	%r945, %r940;
	mov.b32 	%r946, %r940;
	mov.b32 	%r947, %r940;
	mov.b32 	%r948, %r940;
	mov.b32 	%r949, %r940;
	mov.b32 	%r950, %r940;
	mov.b32 	%r951, %r940;
	mov.b32 	%r952, %r940;
	mov.b32 	%r953, %r940;
	mov.b32 	%r954, %r940;
	mov.b32 	%r955, %r940;
	mov.b32 	%r768, %r940;
	mov.b32 	%r769, %r940;
	mov.b32 	%r770, %r940;
	mov.b32 	%r771, %r940;
	mov.b32 	%r772, %r940;
	mov.b32 	%r773, %r940;
	mov.b32 	%r774, %r940;
	mov.b32 	%r775, %r940;
	mov.b32 	%r776, %r940;
	mov.b32 	%r777, %r940;
	mov.b32 	%r778, %r940;
	mov.b32 	%r779, %r940;
	mov.b32 	%r780, %r940;
	mov.b32 	%r781, %r940;
	mov.b32 	%r782, %r940;
	mov.b32 	%r783, %r940;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s64 	%p45, %rd279, %rd28;
	add.s32 	%r1120, %r1318, 1;
	setp.gt.s32 	%p46, %r1120, 1;
	selp.b32 	%r1318, 0, %r1120, %p46;
	cvt.u32.u64 	%r1121, %rd275;
	.loc	1 113 37                        // chunk_delta_h.py:113:37
	mul.wide.s32 	%rd220, %r1121, 2;
	add.s64 	%rd221, %rd1, %rd220;
	.loc	1 114 31                        // chunk_delta_h.py:114:31
	cvt.rn.bf16x2.f32 	%r324, %r769, %r768;
	cvt.rn.bf16x2.f32 	%r325, %r771, %r770;
	cvt.rn.bf16x2.f32 	%r326, %r773, %r772;
	cvt.rn.bf16x2.f32 	%r327, %r775, %r774;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r313], {%r324, %r325, %r326, %r327};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r329, %r777, %r776;
	cvt.rn.bf16x2.f32 	%r330, %r779, %r778;
	cvt.rn.bf16x2.f32 	%r331, %r781, %r780;
	cvt.rn.bf16x2.f32 	%r332, %r783, %r782;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r318], {%r329, %r330, %r331, %r332};
	// end inline asm
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	add.s64 	%rd222, %rd221, %rd14;
	shl.b64 	%rd223, %rd9, 1;
	add.s64 	%rd161, %rd222, %rd223;
	add.s64 	%rd224, %rd221, %rd15;
	add.s64 	%rd162, %rd224, %rd223;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r323], {%r324, %r325, %r326, %r327};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r328], {%r329, %r330, %r331, %r332};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r337, %r338, %r339, %r340}, [%r34];
	ld.shared.v4.b32 	{%r333, %r334, %r335, %r336}, [%r33];
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd161 + 0 ], { %r333, %r334, %r335, %r336 };
	// end inline asm
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd162 + 0 ], { %r337, %r338, %r339, %r340 };
	// end inline asm
	.loc	1 117 35                        // chunk_delta_h.py:117:35
	cvt.rn.bf16x2.f32 	%r352, %r941, %r940;
	cvt.rn.bf16x2.f32 	%r353, %r943, %r942;
	cvt.rn.bf16x2.f32 	%r354, %r945, %r944;
	cvt.rn.bf16x2.f32 	%r355, %r947, %r946;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r341], {%r352, %r353, %r354, %r355};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r357, %r949, %r948;
	cvt.rn.bf16x2.f32 	%r358, %r951, %r950;
	cvt.rn.bf16x2.f32 	%r359, %r953, %r952;
	cvt.rn.bf16x2.f32 	%r360, %r955, %r954;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r346], {%r357, %r358, %r359, %r360};
	// end inline asm
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	add.s64 	%rd163, %rd161, 16384;
	add.s64 	%rd164, %rd162, 16384;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r323], {%r352, %r353, %r354, %r355};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r328], {%r357, %r358, %r359, %r360};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r365, %r366, %r367, %r368}, [%r34];
	ld.shared.v4.b32 	{%r361, %r362, %r363, %r364}, [%r33];
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd163 + 0 ], { %r361, %r362, %r363, %r364 };
	// end inline asm
	// begin inline asm
	@%p22 st.global.v4.b32 [ %rd164 + 0 ], { %r365, %r366, %r367, %r368 };
	// end inline asm
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	shl.b32 	%r1122, %r1318, 13;
	add.s32 	%r497, %r214, %r1122;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	shfl.sync.idx.b32 	%r1124, %r5, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1125, %r497, 4, 14;
	cvt.u64.u32 	%rd225, %r1125;
	or.b64 	%rd165, %rd225, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd165, %rd166, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1126, %r497, 32;
	bfe.u32 	%r1127, %r1126, 4, 14;
	cvt.u64.u32 	%rd226, %r1127;
	or.b64 	%rd167, %rd226, 4611686293338849280;
	mov.pred 	%p26, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd167, %rd168, %p26, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1128, %r497, 64;
	bfe.u32 	%r1129, %r1128, 4, 14;
	cvt.u64.u32 	%rd227, %r1129;
	or.b64 	%rd169, %rd227, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd169, %rd170, %p26, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1130, %r497, 96;
	bfe.u32 	%r1131, %r1130, 4, 14;
	cvt.u64.u32 	%rd228, %r1131;
	or.b64 	%rd171, %rd228, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd171, %rd172, %p26, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r500, %r255;
	mov.b32 	%r498, %r520;
	mov.b32 	%r499, %r520;
	mov.b32 	%r501, %r520;
	mov.b32 	%r502, %r520;
	// begin inline asm
	// wait for regs: %r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r497,%r498,%r499,%r500,%r501,%r502
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s32 	%r669, %r222, %r1122;
	.loc	1 131 31                        // chunk_delta_h.py:131:31
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1133, %r669, 4, 14;
	cvt.u64.u32 	%rd229, %r1133;
	or.b64 	%rd173, %rd229, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd173, %rd174, %p26, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1134, %r669, 32;
	bfe.u32 	%r1135, %r1134, 4, 14;
	cvt.u64.u32 	%rd230, %r1135;
	or.b64 	%rd175, %rd230, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd175, %rd176, %p26, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1136, %r669, 64;
	bfe.u32 	%r1137, %r1136, 4, 14;
	cvt.u64.u32 	%rd231, %r1137;
	or.b64 	%rd177, %rd231, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd177, %rd178, %p26, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1138, %r669, 96;
	bfe.u32 	%r1139, %r1138, 4, 14;
	cvt.u64.u32 	%rd232, %r1139;
	or.b64 	%rd179, %rd232, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432}, %rd179, %rd180, %p26, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r670, %r520;
	mov.b32 	%r671, %r520;
	mov.b32 	%r673, %r520;
	mov.b32 	%r674, %r520;
	mov.b32 	%r672, %r279;
	// begin inline asm
	// wait for regs: %r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r669,%r670,%r671,%r672,%r673,%r674
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r697, %r698, %r699, %r700}, [%r701];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r702, %r703, %r704, %r705}, [%r706];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r697;
	cvt.f32.bf16 	%r1140, %rs2;
	cvt.f32.bf16 	%r1141, %rs1;
	sub.f32 	%r1142, %r1141, %r417;
	sub.f32 	%r1143, %r1140, %r418;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r708, %r1143, %r1142;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs3, %rs4}, %r698;
	cvt.f32.bf16 	%r1144, %rs4;
	cvt.f32.bf16 	%r1145, %rs3;
	sub.f32 	%r1146, %r1145, %r419;
	sub.f32 	%r1147, %r1144, %r420;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r709, %r1147, %r1146;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs5, %rs6}, %r699;
	cvt.f32.bf16 	%r1148, %rs6;
	cvt.f32.bf16 	%r1149, %rs5;
	sub.f32 	%r1150, %r1149, %r421;
	sub.f32 	%r1151, %r1148, %r422;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r710, %r1151, %r1150;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs7, %rs8}, %r700;
	cvt.f32.bf16 	%r1152, %rs8;
	cvt.f32.bf16 	%r1153, %rs7;
	sub.f32 	%r1154, %r1153, %r423;
	sub.f32 	%r1155, %r1152, %r424;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r711, %r1155, %r1154;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs9, %rs10}, %r702;
	cvt.f32.bf16 	%r1156, %rs10;
	cvt.f32.bf16 	%r1157, %rs9;
	sub.f32 	%r1158, %r1157, %r425;
	sub.f32 	%r1159, %r1156, %r426;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r713, %r1159, %r1158;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs11, %rs12}, %r703;
	cvt.f32.bf16 	%r1160, %rs12;
	cvt.f32.bf16 	%r1161, %rs11;
	sub.f32 	%r1162, %r1161, %r427;
	sub.f32 	%r1163, %r1160, %r428;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r714, %r1163, %r1162;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs13, %rs14}, %r704;
	cvt.f32.bf16 	%r1164, %rs14;
	cvt.f32.bf16 	%r1165, %rs13;
	sub.f32 	%r1166, %r1165, %r429;
	sub.f32 	%r1167, %r1164, %r430;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r715, %r1167, %r1166;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs15, %rs16}, %r705;
	cvt.f32.bf16 	%r1168, %rs16;
	cvt.f32.bf16 	%r1169, %rs15;
	sub.f32 	%r1170, %r1169, %r431;
	sub.f32 	%r1171, %r1168, %r432;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r716, %r1171, %r1170;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r323], {%r708, %r709, %r710, %r711};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r328], {%r713, %r714, %r715, %r716};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r721, %r722, %r723, %r724}, [%r34];
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	add.s64 	%rd181, %rd39, %rd275;
	add.s64 	%rd182, %rd36, %rd275;
	ld.shared.v4.b32 	{%r717, %r718, %r719, %r720}, [%r33];
	// begin inline asm
	@%p70 st.global.v4.b32 [ %rd181 + 0 ], { %r717, %r718, %r719, %r720 };
	// end inline asm
	// begin inline asm
	@%p69 st.global.v4.b32 [ %rd182 + 0 ], { %r721, %r722, %r723, %r724 };
	// end inline asm
	.loc	1 147 30                        // chunk_delta_h.py:147:30
	add.s64 	%rd279, %rd279, 1;
	.loc	1 147 39                        // chunk_delta_h.py:147:39
	add.s64 	%rd48, %rd278, 64;
	cvt.u32.u64 	%r1172, %rd48;
	min.s32 	%r1173, %r1172, %r141;
	.loc	1 149 30                        // chunk_delta_h.py:149:30
	add.s64 	%rd233, %rd32, %rd278;
	cvt.u32.u64 	%r1174, %rd233;
	.loc	1 149 50                        // chunk_delta_h.py:149:50
	setp.lt.s32 	%p47, %r1174, %r141;
	add.s32 	%r1175, %r1174, 8;
	setp.lt.s32 	%p48, %r1175, %r141;
	.loc	1 150 56                        // chunk_delta_h.py:150:56
	shl.b32 	%r1176, %r1173, 5;
	add.s32 	%r1177, %r1176, -32;
	.loc	1 150 60                        // chunk_delta_h.py:150:60
	mul.wide.s32 	%rd234, %r1177, 4;
	add.s64 	%rd183, %rd13, %rd234;
	.loc	1 150 31                        // chunk_delta_h.py:150:31
	// begin inline asm
	mov.u32 %r725, 0x0;
	ld.global.b32 { %r725 }, [ %rd183 + 0 ];
	// end inline asm
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	ld.shared.b32 	%r1178, [%r162];
	ld.shared.b32 	%r1179, [%r162+32];
	.loc	1 153 53                        // chunk_delta_h.py:153:53
	sub.f32 	%r1180, %r725, %r1178;
	sub.f32 	%r1181, %r725, %r1179;
	.loc	1 153 42                        // chunk_delta_h.py:153:42
	mul.f32 	%r1182, %r1180, 0f3FB8AA3B;
	ex2.approx.f32 	%r1183, %r1182;
	mul.f32 	%r1184, %r1181, 0f3FB8AA3B;
	ex2.approx.f32 	%r1185, %r1184;
	.loc	1 153 59                        // chunk_delta_h.py:153:59
	selp.f32 	%r1186, %r1183, 0f00000000, %p47;
	selp.f32 	%r1187, %r1185, 0f00000000, %p48;
	.loc	1 153 24                        // chunk_delta_h.py:153:24
	mul.f32 	%r1188, %r1142, %r1186;
	mul.f32 	%r1189, %r1143, %r1186;
	mul.f32 	%r1190, %r1146, %r1187;
	mul.f32 	%r1191, %r1147, %r1187;
	mul.f32 	%r1192, %r1150, %r1186;
	mul.f32 	%r1193, %r1151, %r1186;
	mul.f32 	%r1194, %r1154, %r1187;
	mul.f32 	%r1195, %r1155, %r1187;
	mul.f32 	%r1196, %r1158, %r1186;
	mul.f32 	%r1197, %r1159, %r1186;
	mul.f32 	%r1198, %r1162, %r1187;
	mul.f32 	%r1199, %r1163, %r1187;
	mul.f32 	%r1200, %r1166, %r1186;
	mul.f32 	%r1201, %r1167, %r1186;
	mul.f32 	%r1202, %r1170, %r1187;
	mul.f32 	%r1203, %r1171, %r1187;
	.loc	1 154 27                        // chunk_delta_h.py:154:27
	mul.f32 	%r1204, %r725, 0f3FB8AA3B;
	ex2.approx.f32 	%r1205, %r1204;
	.loc	1 155 20                        // chunk_delta_h.py:155:20
	mul.f32 	%r768, %r768, %r1205;
	mul.f32 	%r769, %r769, %r1205;
	mul.f32 	%r770, %r770, %r1205;
	mul.f32 	%r771, %r771, %r1205;
	mul.f32 	%r772, %r772, %r1205;
	mul.f32 	%r773, %r773, %r1205;
	mul.f32 	%r774, %r774, %r1205;
	mul.f32 	%r775, %r775, %r1205;
	mul.f32 	%r776, %r776, %r1205;
	mul.f32 	%r777, %r777, %r1205;
	mul.f32 	%r778, %r778, %r1205;
	mul.f32 	%r779, %r779, %r1205;
	mul.f32 	%r780, %r780, %r1205;
	mul.f32 	%r781, %r781, %r1205;
	mul.f32 	%r782, %r782, %r1205;
	mul.f32 	%r783, %r783, %r1205;
	.loc	1 157 24                        // chunk_delta_h.py:157:24
	mul.f32 	%r940, %r940, %r1205;
	mul.f32 	%r941, %r941, %r1205;
	mul.f32 	%r942, %r942, %r1205;
	mul.f32 	%r943, %r943, %r1205;
	mul.f32 	%r944, %r944, %r1205;
	mul.f32 	%r945, %r945, %r1205;
	mul.f32 	%r946, %r946, %r1205;
	mul.f32 	%r947, %r947, %r1205;
	mul.f32 	%r948, %r948, %r1205;
	mul.f32 	%r949, %r949, %r1205;
	mul.f32 	%r950, %r950, %r1205;
	mul.f32 	%r951, %r951, %r1205;
	mul.f32 	%r952, %r952, %r1205;
	mul.f32 	%r953, %r953, %r1205;
	mul.f32 	%r954, %r954, %r1205;
	mul.f32 	%r955, %r955, %r1205;
	.loc	1 179 21                        // chunk_delta_h.py:179:21
	bar.sync 	0;
	cvt.rn.bf16x2.f32 	%r727, %r1189, %r1188;
	cvt.rn.bf16x2.f32 	%r728, %r1191, %r1190;
	cvt.rn.bf16x2.f32 	%r729, %r1193, %r1192;
	cvt.rn.bf16x2.f32 	%r730, %r1195, %r1194;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r726], {%r727, %r728, %r729, %r730};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r732, %r1197, %r1196;
	cvt.rn.bf16x2.f32 	%r733, %r1199, %r1198;
	cvt.rn.bf16x2.f32 	%r734, %r1201, %r1200;
	cvt.rn.bf16x2.f32 	%r735, %r1203, %r1202;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r731], {%r732, %r733, %r734, %r735};
	// end inline asm
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s32 	%r880, %r233, %r1122;
	.loc	1 186 28                        // chunk_delta_h.py:186:28
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1207, %r880, 4, 14;
	cvt.u64.u32 	%rd235, %r1207;
	or.b64 	%rd184, %rd235, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783}, %rd184, %rd185, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1208, %r880, 2048;
	bfe.u32 	%r1209, %r1208, 4, 14;
	cvt.u64.u32 	%rd236, %r1209;
	or.b64 	%rd186, %rd236, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783}, %rd186, %rd187, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1210, %r880, 4096;
	bfe.u32 	%r1211, %r1210, 4, 14;
	cvt.u64.u32 	%rd237, %r1211;
	or.b64 	%rd188, %rd237, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783}, %rd188, %rd189, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1212, %r880, 6144;
	bfe.u32 	%r1213, %r1212, 4, 14;
	cvt.u64.u32 	%rd238, %r1213;
	or.b64 	%rd190, %rd238, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783}, %rd190, %rd191, %p26, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r883, %r905;
	mov.b32 	%r881, %r520;
	mov.b32 	%r882, %r520;
	mov.b32 	%r884, %r520;
	mov.b32 	%r885, %r520;
	// begin inline asm
	// wait for regs: %r768,%r769,%r770,%r771,%r772,%r773,%r774,%r775,%r776,%r777,%r778,%r779,%r780,%r781,%r782,%r783,%r880,%r881,%r882,%r883,%r884,%r885
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s32 	%r1052, %r234, %r1122;
	.loc	1 193 32                        // chunk_delta_h.py:193:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1215, %r1052, 4, 14;
	cvt.u64.u32 	%rd239, %r1215;
	or.b64 	%rd192, %rd239, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r940,%r941,%r942,%r943,%r944,%r945,%r946,%r947,%r948,%r949,%r950,%r951,%r952,%r953,%r954,%r955}, %rd192, %rd185, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1216, %r1052, 2048;
	bfe.u32 	%r1217, %r1216, 4, 14;
	cvt.u64.u32 	%rd240, %r1217;
	or.b64 	%rd194, %rd240, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r940,%r941,%r942,%r943,%r944,%r945,%r946,%r947,%r948,%r949,%r950,%r951,%r952,%r953,%r954,%r955}, %rd194, %rd187, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1218, %r1052, 4096;
	bfe.u32 	%r1219, %r1218, 4, 14;
	cvt.u64.u32 	%rd241, %r1219;
	or.b64 	%rd196, %rd241, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r940,%r941,%r942,%r943,%r944,%r945,%r946,%r947,%r948,%r949,%r950,%r951,%r952,%r953,%r954,%r955}, %rd196, %rd189, %p26, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r1220, %r1052, 6144;
	bfe.u32 	%r1221, %r1220, 4, 14;
	cvt.u64.u32 	%rd242, %r1221;
	or.b64 	%rd198, %rd242, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r940,%r941,%r942,%r943,%r944,%r945,%r946,%r947,%r948,%r949,%r950,%r951,%r952,%r953,%r954,%r955}, %rd198, %rd191, %p26, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1057, %r520;
	mov.b32 	%r1053, %r520;
	mov.b32 	%r1054, %r520;
	mov.b32 	%r1056, %r520;
	mov.b32 	%r1055, %r905;
	// begin inline asm
	// wait for regs: %r940,%r941,%r942,%r943,%r944,%r945,%r946,%r947,%r948,%r949,%r950,%r951,%r952,%r953,%r954,%r955,%r1052,%r1053,%r1054,%r1055,%r1056,%r1057
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s32 	%r1222, %r1319, 1;
	setp.gt.s32 	%p49, %r1222, 1;
	selp.b32 	%r1319, 0, %r1222, %p49;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	add.s64 	%rd243, %rd5, %rd278;
	add.s64 	%rd244, %rd243, 64;
	add.s64 	%rd245, %rd243, 80;
	add.s64 	%rd246, %rd243, 96;
	add.s64 	%rd247, %rd243, 112;
	add.s64 	%rd248, %rd37, %rd278;
	add.s64 	%rd249, %rd34, %rd278;
	add.s64 	%rd250, %rd233, 64;
	add.s64 	%rd251, %rd48, %rd30;
	add.s64 	%rd252, %rd41, %rd275;
	add.s64 	%rd200, %rd252, 524288;
	add.s64 	%rd201, %rd252, 655360;
	add.s64 	%rd202, %rd252, 786432;
	add.s64 	%rd203, %rd252, 917504;
	setp.lt.s64 	%p50, %rd244, %rd10;
	setp.lt.s64 	%p51, %rd245, %rd10;
	setp.lt.s64 	%p52, %rd246, %rd10;
	setp.lt.s64 	%p53, %rd247, %rd10;
	setp.lt.s64 	%p54, %rd248, %rd10;
	setp.lt.s64 	%p55, %rd249, %rd10;
	shl.b32 	%r1223, %r1319, 13;
	add.s32 	%r1224, %r214, %r1223;
	add.s32 	%r1080, %r1224, %r213;
	add.s32 	%r1082, %r1224, %r216;
	add.s32 	%r1084, %r1224, %r218;
	add.s32 	%r1086, %r1224, %r220;
	selp.b32 	%r1229, 16, 0, %p50;
	selp.b32 	%r1089, %r1229, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r1080 + 0 ], [ %rd200 + 0 ], 0x10, %r1089;
	// end inline asm
	selp.b32 	%r1230, 16, 0, %p51;
	selp.b32 	%r1091, %r1230, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r1082 + 0 ], [ %rd201 + 0 ], 0x10, %r1091;
	// end inline asm
	selp.b32 	%r1231, 16, 0, %p52;
	selp.b32 	%r1093, %r1231, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r1084 + 0 ], [ %rd202 + 0 ], 0x10, %r1093;
	// end inline asm
	selp.b32 	%r1232, 16, 0, %p53;
	selp.b32 	%r1095, %r1232, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r1086 + 0 ], [ %rd203 + 0 ], 0x10, %r1095;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd204, %rd252, 524416;
	add.s64 	%rd205, %rd252, 655488;
	add.s64 	%rd206, %rd252, 786560;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd207, %rd252, 917632;
	add.s32 	%r1233, %r222, %r1223;
	add.s32 	%r1088, %r1233, %r213;
	add.s32 	%r1090, %r1233, %r216;
	add.s32 	%r1092, %r1233, %r218;
	add.s32 	%r1094, %r1233, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r1088 + 0 ], [ %rd204 + 0 ], 0x10, %r1089;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1090 + 0 ], [ %rd205 + 0 ], 0x10, %r1091;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1092 + 0 ], [ %rd206 + 0 ], 0x10, %r1093;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1094 + 0 ], [ %rd207 + 0 ], 0x10, %r1095;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd208, %rd38, %rd275;
	add.s64 	%rd209, %rd35, %rd275;
	and.pred 	%p70, %p22, %p54;
	and.pred 	%p69, %p22, %p55;
	selp.b32 	%r1234, 16, 0, %p70;
	selp.b32 	%r1097, %r1234, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r158 + 0 ], [ %rd208 + 0 ], 0x10, %r1097;
	// end inline asm
	selp.b32 	%r1235, 16, 0, %p69;
	selp.b32 	%r1099, %r1235, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r160 + 0 ], [ %rd209 + 0 ], 0x10, %r1099;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	setp.lt.s64 	%p56, %rd250, %rd10;
	setp.lt.s64 	%p57, %rd251, %rd10;
	selp.b32 	%r1236, 4, 0, %p56;
	selp.b32 	%r1101, %r1236, 0, %p45;
	// begin inline asm
	@%p8 cp.async.ca.shared.global [ %r162 + 0 ], [ %rd276 + 0 ], 0x4, %r1101;
	// end inline asm
	selp.b32 	%r1237, 4, 0, %p57;
	selp.b32 	%r1103, %r1237, 0, %p45;
	// begin inline asm
	@%p8 cp.async.ca.shared.global [ %r164 + 0 ], [ %rd277 + 0 ], 0x4, %r1103;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd253, %rd40, %rd275;
	add.s64 	%rd212, %rd253, 524288;
	add.s64 	%rd213, %rd253, 655360;
	add.s64 	%rd214, %rd253, 786432;
	add.s64 	%rd215, %rd253, 917504;
	add.s32 	%r1238, %r233, %r1223;
	bar.sync 	0;
	add.s32 	%r1104, %r1238, %r213;
	add.s32 	%r1106, %r1238, %r216;
	add.s32 	%r1108, %r1238, %r218;
	add.s32 	%r1110, %r1238, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r1104 + 0 ], [ %rd212 + 0 ], 0x10, %r1089;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1106 + 0 ], [ %rd213 + 0 ], 0x10, %r1091;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1108 + 0 ], [ %rd214 + 0 ], 0x10, %r1093;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1110 + 0 ], [ %rd215 + 0 ], 0x10, %r1095;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd216, %rd253, 524416;
	add.s64 	%rd217, %rd253, 655488;
	add.s64 	%rd218, %rd253, 786560;
	add.s64 	%rd219, %rd253, 917632;
	add.s32 	%r1239, %r234, %r1223;
	add.s32 	%r1112, %r1239, %r213;
	add.s32 	%r1114, %r1239, %r216;
	add.s32 	%r1116, %r1239, %r218;
	add.s32 	%r1118, %r1239, %r220;
	// begin inline asm
	cp.async.cg.shared.global [ %r1112 + 0 ], [ %rd216 + 0 ], 0x10, %r1089;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1114 + 0 ], [ %rd217 + 0 ], 0x10, %r1091;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1116 + 0 ], [ %rd218 + 0 ], 0x10, %r1093;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1118 + 0 ], [ %rd219 + 0 ], 0x10, %r1095;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s64 	%rd277, %rd277, 8192;
	add.s64 	%rd276, %rd276, 8192;
	add.s64 	%rd275, %rd275, 524288;
	setp.ne.s64 	%p58, %rd29, %rd279;
	mov.b64 	%rd278, %rd48;
	@%p58 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	cvt.u32.u64 	%r1272, %rd2;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.gt.s32 	%p67, %r1272, -1;
	.loc	1 95 18                         // chunk_delta_h.py:95:18
	mul.wide.u32 	%rd262, %r3, 4;
	add.s64 	%rd263, %rd57, %rd262;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 211 23                        // chunk_delta_h.py:211:23
	shl.b32 	%r1273, %r4, 2;
	and.b32 	%r1274, %r1273, 28;
	cvt.u64.u32 	%rd264, %r1274;
	or.b64 	%rd265, %rd264, %rd2;
	shl.b64 	%rd266, %rd5, 9;
	add.s64 	%rd267, %rd263, %rd266;
	shl.b64 	%rd268, %rd265, 2;
	add.s64 	%rd254, %rd267, %rd268;
	shl.b64 	%rd269, %rd6, 9;
	add.s64 	%rd270, %rd263, %rd269;
	add.s64 	%rd255, %rd270, %rd268;
	shl.b64 	%rd271, %rd7, 9;
	add.s64 	%rd272, %rd263, %rd271;
	add.s64 	%rd256, %rd272, %rd268;
	shl.b64 	%rd273, %rd8, 9;
	add.s64 	%rd274, %rd263, %rd273;
	add.s64 	%rd257, %rd274, %rd268;
	setp.lt.s64 	%p68, %rd265, 128;
	and.pred 	%p59, %p67, %p68;
	shl.b32 	%r1275, %r4, 1;
	and.b32 	%r1276, %r1275, 6;
	and.b32 	%r1277, %r13, 192;
	or.b32 	%r1278, %r1277, %r1276;
	shl.b32 	%r1279, %r4, 4;
	and.b32 	%r1280, %r1279, 1536;
	or.b32 	%r1281, %r1278, %r1280;
	or.b32 	%r1282, %r1281, %r15;
	and.b32 	%r1283, %r1273, 508;
	shr.u32 	%r1284, %r1282, 1;
	and.b32 	%r1285, %r1284, 892;
	add.s32 	%r1287, %r214, %r1285;
	shl.b32 	%r1288, %r1282, 2;
	add.s32 	%r1289, %r1287, %r1288;
	st.shared.v2.b32 	[%r1289], {%r768, %r769};
	or.b32 	%r1290, %r1282, 256;
	shr.u32 	%r1291, %r1290, 1;
	and.b32 	%r1292, %r1291, 1020;
	add.s32 	%r1293, %r214, %r1292;
	add.s32 	%r1294, %r1293, %r1288;
	st.shared.v2.b32 	[%r1294+1024], {%r770, %r771};
	st.shared.v2.b32 	[%r1289+32], {%r772, %r773};
	and.b32 	%r1295, %r1291, 1008;
	add.s32 	%r1296, %r214, %r1295;
	add.s32 	%r1297, %r1296, %r1288;
	st.shared.v2.b32 	[%r1297+1056], {%r774, %r775};
	st.shared.v2.b32 	[%r1289+64], {%r776, %r777};
	st.shared.v2.b32 	[%r1297+1088], {%r778, %r779};
	st.shared.v2.b32 	[%r1289+96], {%r780, %r781};
	st.shared.v2.b32 	[%r1297+1120], {%r782, %r783};
	bar.sync 	0;
	and.b32 	%r1298, %r17, 60;
	shl.b32 	%r1299, %r1298, 2;
	add.s32 	%r1300, %r214, %r1299;
	shl.b32 	%r1301, %r1283, 2;
	add.s32 	%r1302, %r1300, %r1301;
	or.b32 	%r1303, %r1283, 512;
	shr.u32 	%r1304, %r1303, 1;
	and.b32 	%r1305, %r1304, 496;
	add.s32 	%r1306, %r214, %r1305;
	add.s32 	%r1307, %r1306, %r1301;
	ld.shared.v4.b32 	{%r1244, %r1245, %r1246, %r1247}, [%r1307+2048];
	or.b32 	%r1308, %r1283, 1024;
	shr.u32 	%r1309, %r1308, 1;
	and.b32 	%r1310, %r1309, 752;
	add.s32 	%r1311, %r214, %r1310;
	add.s32 	%r1312, %r1311, %r1301;
	ld.shared.v4.b32 	{%r1248, %r1249, %r1250, %r1251}, [%r1312+4096];
	or.b32 	%r1313, %r1283, 1536;
	shr.u32 	%r1314, %r1313, 1;
	and.b32 	%r1315, %r1314, 1008;
	add.s32 	%r1316, %r214, %r1315;
	add.s32 	%r1317, %r1316, %r1301;
	ld.shared.v4.b32 	{%r1252, %r1253, %r1254, %r1255}, [%r1317+6144];
	ld.shared.v4.b32 	{%r1240, %r1241, %r1242, %r1243}, [%r1302];
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd254 + 0 ], { %r1240, %r1241, %r1242, %r1243 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd255 + 0 ], { %r1244, %r1245, %r1246, %r1247 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd256 + 0 ], { %r1248, %r1249, %r1250, %r1251 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd257 + 0 ], { %r1252, %r1253, %r1254, %r1255 };
	// end inline asm
	.loc	1 214 27                        // chunk_delta_h.py:214:27
	add.s64 	%rd258, %rd254, 32768;
	add.s64 	%rd259, %rd255, 32768;
	add.s64 	%rd260, %rd256, 32768;
	add.s64 	%rd261, %rd257, 32768;
	bar.sync 	0;
	st.shared.v2.b32 	[%r1289], {%r940, %r941};
	st.shared.v2.b32 	[%r1294+1024], {%r942, %r943};
	st.shared.v2.b32 	[%r1289+32], {%r944, %r945};
	st.shared.v2.b32 	[%r1297+1056], {%r946, %r947};
	st.shared.v2.b32 	[%r1289+64], {%r948, %r949};
	st.shared.v2.b32 	[%r1297+1088], {%r950, %r951};
	st.shared.v2.b32 	[%r1289+96], {%r952, %r953};
	st.shared.v2.b32 	[%r1297+1120], {%r954, %r955};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1260, %r1261, %r1262, %r1263}, [%r1307+2048];
	ld.shared.v4.b32 	{%r1264, %r1265, %r1266, %r1267}, [%r1312+4096];
	ld.shared.v4.b32 	{%r1268, %r1269, %r1270, %r1271}, [%r1317+6144];
	ld.shared.v4.b32 	{%r1256, %r1257, %r1258, %r1259}, [%r1302];
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd258 + 0 ], { %r1256, %r1257, %r1258, %r1259 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd259 + 0 ], { %r1260, %r1261, %r1262, %r1263 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd260 + 0 ], { %r1264, %r1265, %r1266, %r1267 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd261 + 0 ], { %r1268, %r1269, %r1270, %r1271 };
	// end inline asm
	.loc	1 209 4                         // chunk_delta_h.py:209:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 216                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd1 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 104
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x7c:0x31 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 104
.b8 95
.b8 98
.b8 108
.b8 111
.b8 99
.b8 107
.b8 100
.b8 105
.b8 109
.b8 54
.b8 52
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0xad:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 124                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xc2:0x18 DW_TAG_inlined_subroutine
.b32 124                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
