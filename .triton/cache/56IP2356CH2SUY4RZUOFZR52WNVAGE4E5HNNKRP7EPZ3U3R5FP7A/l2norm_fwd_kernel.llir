; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 7, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 4, !dbg !11
  %11 = and i32 %10, 15, !dbg !11
  %12 = or disjoint i32 %11, 16, !dbg !11
  %13 = or disjoint i32 %11, 32, !dbg !11
  %14 = or i32 %10, 48, !dbg !11
  %15 = or disjoint i32 %11, 64, !dbg !11
  %16 = or disjoint i32 %11, 80, !dbg !11
  %17 = or disjoint i32 %11, 96, !dbg !11
  %18 = or i32 %10, 112, !dbg !11
  %19 = shl nuw nsw i32 %9, 3, !dbg !11
  %20 = and i32 %19, 120, !dbg !11
  %21 = zext nneg i32 %11 to i64, !dbg !11
  %22 = zext nneg i32 %12 to i64, !dbg !11
  %23 = zext nneg i32 %13 to i64, !dbg !11
  %24 = zext nneg i32 %14 to i64, !dbg !11
  %25 = zext nneg i32 %15 to i64, !dbg !11
  %26 = zext nneg i32 %16 to i64, !dbg !11
  %27 = zext nneg i32 %17 to i64, !dbg !11
  %28 = zext nneg i32 %18 to i64, !dbg !11
  %29 = zext nneg i32 %20 to i64, !dbg !11
  %30 = or disjoint i64 %21, %8, !dbg !11
  %31 = or disjoint i64 %22, %8, !dbg !11
  %32 = or disjoint i64 %23, %8, !dbg !11
  %33 = or disjoint i64 %24, %8, !dbg !11
  %34 = or disjoint i64 %25, %8, !dbg !11
  %35 = or disjoint i64 %26, %8, !dbg !11
  %36 = or disjoint i64 %27, %8, !dbg !11
  %37 = or disjoint i64 %28, %8, !dbg !11
  %38 = shl nsw i64 %30, 7, !dbg !11
  %39 = shl nsw i64 %31, 7, !dbg !11
  %40 = shl nsw i64 %32, 7, !dbg !11
  %41 = shl nsw i64 %33, 7, !dbg !11
  %42 = shl nsw i64 %34, 7, !dbg !11
  %43 = shl nsw i64 %35, 7, !dbg !11
  %44 = shl nsw i64 %36, 7, !dbg !11
  %45 = shl nsw i64 %37, 7, !dbg !11
  %46 = or disjoint i64 %38, %29, !dbg !11
  %47 = or disjoint i64 %39, %29, !dbg !11
  %48 = or disjoint i64 %40, %29, !dbg !11
  %49 = or disjoint i64 %41, %29, !dbg !11
  %50 = or disjoint i64 %42, %29, !dbg !11
  %51 = or disjoint i64 %43, %29, !dbg !11
  %52 = or disjoint i64 %44, %29, !dbg !11
  %53 = or disjoint i64 %45, %29, !dbg !11
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !11
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !11
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !11
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !11
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !11
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !11
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !11
  %61 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !11
  %62 = icmp sgt i32 %7, -1, !dbg !11
  %63 = icmp slt i64 %30, 49152, !dbg !11
  %64 = icmp slt i64 %31, 49152, !dbg !11
  %65 = icmp slt i64 %32, 49152, !dbg !11
  %66 = icmp slt i64 %33, 49152, !dbg !11
  %67 = icmp slt i64 %34, 49152, !dbg !11
  %68 = icmp slt i64 %35, 49152, !dbg !11
  %69 = icmp slt i64 %36, 49152, !dbg !11
  %70 = icmp slt i64 %37, 49152, !dbg !11
  %71 = and i1 %62, %63, !dbg !11
  %72 = and i1 %62, %64, !dbg !11
  %73 = and i1 %62, %65, !dbg !11
  %74 = and i1 %62, %66, !dbg !11
  %75 = and i1 %62, %67, !dbg !11
  %76 = and i1 %62, %68, !dbg !11
  %77 = and i1 %62, %69, !dbg !11
  %78 = and i1 %62, %70, !dbg !11
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %71) #6, !dbg !11
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !11
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !11
  %82 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !11
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !11
  %84 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !11
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !11
  %86 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !11
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !11
  %88 = extractelement <2 x bfloat> %81, i64 0, !dbg !11
  %89 = extractelement <2 x bfloat> %81, i64 1, !dbg !11
  %90 = extractelement <2 x bfloat> %83, i64 0, !dbg !11
  %91 = extractelement <2 x bfloat> %83, i64 1, !dbg !11
  %92 = extractelement <2 x bfloat> %85, i64 0, !dbg !11
  %93 = extractelement <2 x bfloat> %85, i64 1, !dbg !11
  %94 = extractelement <2 x bfloat> %87, i64 0, !dbg !11
  %95 = extractelement <2 x bfloat> %87, i64 1, !dbg !11
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %72) #6, !dbg !11
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !11
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !11
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !11
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !11
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !11
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !11
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !11
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !11
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !11
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !11
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !11
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !11
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !11
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !11
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !11
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !11
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %73) #6, !dbg !11
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !11
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !11
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !11
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !11
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !11
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !11
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !11
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !11
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !11
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !11
  %124 = extractelement <2 x bfloat> %117, i64 0, !dbg !11
  %125 = extractelement <2 x bfloat> %117, i64 1, !dbg !11
  %126 = extractelement <2 x bfloat> %119, i64 0, !dbg !11
  %127 = extractelement <2 x bfloat> %119, i64 1, !dbg !11
  %128 = extractelement <2 x bfloat> %121, i64 0, !dbg !11
  %129 = extractelement <2 x bfloat> %121, i64 1, !dbg !11
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %74) #6, !dbg !11
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !11
  %132 = bitcast i32 %131 to <2 x bfloat>, !dbg !11
  %133 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !11
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !11
  %135 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !11
  %136 = bitcast i32 %135 to <2 x bfloat>, !dbg !11
  %137 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !11
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !11
  %139 = extractelement <2 x bfloat> %132, i64 0, !dbg !11
  %140 = extractelement <2 x bfloat> %132, i64 1, !dbg !11
  %141 = extractelement <2 x bfloat> %134, i64 0, !dbg !11
  %142 = extractelement <2 x bfloat> %134, i64 1, !dbg !11
  %143 = extractelement <2 x bfloat> %136, i64 0, !dbg !11
  %144 = extractelement <2 x bfloat> %136, i64 1, !dbg !11
  %145 = extractelement <2 x bfloat> %138, i64 0, !dbg !11
  %146 = extractelement <2 x bfloat> %138, i64 1, !dbg !11
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %75) #6, !dbg !11
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !11
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !11
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !11
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !11
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !11
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !11
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !11
  %155 = bitcast i32 %154 to <2 x bfloat>, !dbg !11
  %156 = extractelement <2 x bfloat> %149, i64 0, !dbg !11
  %157 = extractelement <2 x bfloat> %149, i64 1, !dbg !11
  %158 = extractelement <2 x bfloat> %151, i64 0, !dbg !11
  %159 = extractelement <2 x bfloat> %151, i64 1, !dbg !11
  %160 = extractelement <2 x bfloat> %153, i64 0, !dbg !11
  %161 = extractelement <2 x bfloat> %153, i64 1, !dbg !11
  %162 = extractelement <2 x bfloat> %155, i64 0, !dbg !11
  %163 = extractelement <2 x bfloat> %155, i64 1, !dbg !11
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %76) #6, !dbg !11
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !11
  %166 = bitcast i32 %165 to <2 x bfloat>, !dbg !11
  %167 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !11
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !11
  %169 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !11
  %170 = bitcast i32 %169 to <2 x bfloat>, !dbg !11
  %171 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !11
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !11
  %173 = extractelement <2 x bfloat> %166, i64 0, !dbg !11
  %174 = extractelement <2 x bfloat> %166, i64 1, !dbg !11
  %175 = extractelement <2 x bfloat> %168, i64 0, !dbg !11
  %176 = extractelement <2 x bfloat> %168, i64 1, !dbg !11
  %177 = extractelement <2 x bfloat> %170, i64 0, !dbg !11
  %178 = extractelement <2 x bfloat> %170, i64 1, !dbg !11
  %179 = extractelement <2 x bfloat> %172, i64 0, !dbg !11
  %180 = extractelement <2 x bfloat> %172, i64 1, !dbg !11
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %77) #6, !dbg !11
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !11
  %183 = bitcast i32 %182 to <2 x bfloat>, !dbg !11
  %184 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !11
  %185 = bitcast i32 %184 to <2 x bfloat>, !dbg !11
  %186 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !11
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !11
  %188 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !11
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !11
  %190 = extractelement <2 x bfloat> %183, i64 0, !dbg !11
  %191 = extractelement <2 x bfloat> %183, i64 1, !dbg !11
  %192 = extractelement <2 x bfloat> %185, i64 0, !dbg !11
  %193 = extractelement <2 x bfloat> %185, i64 1, !dbg !11
  %194 = extractelement <2 x bfloat> %187, i64 0, !dbg !11
  %195 = extractelement <2 x bfloat> %187, i64 1, !dbg !11
  %196 = extractelement <2 x bfloat> %189, i64 0, !dbg !11
  %197 = extractelement <2 x bfloat> %189, i64 1, !dbg !11
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %78) #6, !dbg !11
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !11
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !11
  %201 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !11
  %202 = bitcast i32 %201 to <2 x bfloat>, !dbg !11
  %203 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !11
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !11
  %205 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !11
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !11
  %207 = extractelement <2 x bfloat> %200, i64 0, !dbg !11
  %208 = extractelement <2 x bfloat> %200, i64 1, !dbg !11
  %209 = extractelement <2 x bfloat> %202, i64 0, !dbg !11
  %210 = extractelement <2 x bfloat> %202, i64 1, !dbg !11
  %211 = extractelement <2 x bfloat> %204, i64 0, !dbg !11
  %212 = extractelement <2 x bfloat> %204, i64 1, !dbg !11
  %213 = extractelement <2 x bfloat> %206, i64 0, !dbg !11
  %214 = extractelement <2 x bfloat> %206, i64 1, !dbg !11
  %215 = fpext bfloat %88 to float, !dbg !12
  %216 = fpext bfloat %89 to float, !dbg !12
  %217 = fpext bfloat %90 to float, !dbg !12
  %218 = fpext bfloat %91 to float, !dbg !12
  %219 = fpext bfloat %92 to float, !dbg !12
  %220 = fpext bfloat %93 to float, !dbg !12
  %221 = fpext bfloat %94 to float, !dbg !12
  %222 = fpext bfloat %95 to float, !dbg !12
  %223 = fpext bfloat %105 to float, !dbg !12
  %224 = fpext bfloat %106 to float, !dbg !12
  %225 = fpext bfloat %107 to float, !dbg !12
  %226 = fpext bfloat %108 to float, !dbg !12
  %227 = fpext bfloat %109 to float, !dbg !12
  %228 = fpext bfloat %110 to float, !dbg !12
  %229 = fpext bfloat %111 to float, !dbg !12
  %230 = fpext bfloat %112 to float, !dbg !12
  %231 = fpext bfloat %122 to float, !dbg !12
  %232 = fpext bfloat %123 to float, !dbg !12
  %233 = fpext bfloat %124 to float, !dbg !12
  %234 = fpext bfloat %125 to float, !dbg !12
  %235 = fpext bfloat %126 to float, !dbg !12
  %236 = fpext bfloat %127 to float, !dbg !12
  %237 = fpext bfloat %128 to float, !dbg !12
  %238 = fpext bfloat %129 to float, !dbg !12
  %239 = fpext bfloat %139 to float, !dbg !12
  %240 = fpext bfloat %140 to float, !dbg !12
  %241 = fpext bfloat %141 to float, !dbg !12
  %242 = fpext bfloat %142 to float, !dbg !12
  %243 = fpext bfloat %143 to float, !dbg !12
  %244 = fpext bfloat %144 to float, !dbg !12
  %245 = fpext bfloat %145 to float, !dbg !12
  %246 = fpext bfloat %146 to float, !dbg !12
  %247 = fpext bfloat %156 to float, !dbg !12
  %248 = fpext bfloat %157 to float, !dbg !12
  %249 = fpext bfloat %158 to float, !dbg !12
  %250 = fpext bfloat %159 to float, !dbg !12
  %251 = fpext bfloat %160 to float, !dbg !12
  %252 = fpext bfloat %161 to float, !dbg !12
  %253 = fpext bfloat %162 to float, !dbg !12
  %254 = fpext bfloat %163 to float, !dbg !12
  %255 = fpext bfloat %173 to float, !dbg !12
  %256 = fpext bfloat %174 to float, !dbg !12
  %257 = fpext bfloat %175 to float, !dbg !12
  %258 = fpext bfloat %176 to float, !dbg !12
  %259 = fpext bfloat %177 to float, !dbg !12
  %260 = fpext bfloat %178 to float, !dbg !12
  %261 = fpext bfloat %179 to float, !dbg !12
  %262 = fpext bfloat %180 to float, !dbg !12
  %263 = fpext bfloat %190 to float, !dbg !12
  %264 = fpext bfloat %191 to float, !dbg !12
  %265 = fpext bfloat %192 to float, !dbg !12
  %266 = fpext bfloat %193 to float, !dbg !12
  %267 = fpext bfloat %194 to float, !dbg !12
  %268 = fpext bfloat %195 to float, !dbg !12
  %269 = fpext bfloat %196 to float, !dbg !12
  %270 = fpext bfloat %197 to float, !dbg !12
  %271 = fpext bfloat %207 to float, !dbg !12
  %272 = fpext bfloat %208 to float, !dbg !12
  %273 = fpext bfloat %209 to float, !dbg !12
  %274 = fpext bfloat %210 to float, !dbg !12
  %275 = fpext bfloat %211 to float, !dbg !12
  %276 = fpext bfloat %212 to float, !dbg !12
  %277 = fpext bfloat %213 to float, !dbg !12
  %278 = fpext bfloat %214 to float, !dbg !12
  %279 = fmul float %215, %215, !dbg !13
  %280 = fmul float %216, %216, !dbg !13
  %281 = fmul float %217, %217, !dbg !13
  %282 = fmul float %218, %218, !dbg !13
  %283 = fmul float %219, %219, !dbg !13
  %284 = fmul float %220, %220, !dbg !13
  %285 = fmul float %221, %221, !dbg !13
  %286 = fmul float %222, %222, !dbg !13
  %287 = fmul float %223, %223, !dbg !13
  %288 = fmul float %224, %224, !dbg !13
  %289 = fmul float %225, %225, !dbg !13
  %290 = fmul float %226, %226, !dbg !13
  %291 = fmul float %227, %227, !dbg !13
  %292 = fmul float %228, %228, !dbg !13
  %293 = fmul float %229, %229, !dbg !13
  %294 = fmul float %230, %230, !dbg !13
  %295 = fmul float %231, %231, !dbg !13
  %296 = fmul float %232, %232, !dbg !13
  %297 = fmul float %233, %233, !dbg !13
  %298 = fmul float %234, %234, !dbg !13
  %299 = fmul float %235, %235, !dbg !13
  %300 = fmul float %236, %236, !dbg !13
  %301 = fmul float %237, %237, !dbg !13
  %302 = fmul float %238, %238, !dbg !13
  %303 = fmul float %239, %239, !dbg !13
  %304 = fmul float %240, %240, !dbg !13
  %305 = fmul float %241, %241, !dbg !13
  %306 = fmul float %242, %242, !dbg !13
  %307 = fmul float %243, %243, !dbg !13
  %308 = fmul float %244, %244, !dbg !13
  %309 = fmul float %245, %245, !dbg !13
  %310 = fmul float %246, %246, !dbg !13
  %311 = fmul float %247, %247, !dbg !13
  %312 = fmul float %248, %248, !dbg !13
  %313 = fmul float %249, %249, !dbg !13
  %314 = fmul float %250, %250, !dbg !13
  %315 = fmul float %251, %251, !dbg !13
  %316 = fmul float %252, %252, !dbg !13
  %317 = fmul float %253, %253, !dbg !13
  %318 = fmul float %254, %254, !dbg !13
  %319 = fmul float %255, %255, !dbg !13
  %320 = fmul float %256, %256, !dbg !13
  %321 = fmul float %257, %257, !dbg !13
  %322 = fmul float %258, %258, !dbg !13
  %323 = fmul float %259, %259, !dbg !13
  %324 = fmul float %260, %260, !dbg !13
  %325 = fmul float %261, %261, !dbg !13
  %326 = fmul float %262, %262, !dbg !13
  %327 = fmul float %263, %263, !dbg !13
  %328 = fmul float %264, %264, !dbg !13
  %329 = fmul float %265, %265, !dbg !13
  %330 = fmul float %266, %266, !dbg !13
  %331 = fmul float %267, %267, !dbg !13
  %332 = fmul float %268, %268, !dbg !13
  %333 = fmul float %269, %269, !dbg !13
  %334 = fmul float %270, %270, !dbg !13
  %335 = fmul float %271, %271, !dbg !13
  %336 = fmul float %272, %272, !dbg !13
  %337 = fmul float %273, %273, !dbg !13
  %338 = fmul float %274, %274, !dbg !13
  %339 = fmul float %275, %275, !dbg !13
  %340 = fmul float %276, %276, !dbg !13
  %341 = fmul float %277, %277, !dbg !13
  %342 = fmul float %278, %278, !dbg !13
  %343 = fadd float %279, %280, !dbg !14
  %344 = fadd float %281, %343, !dbg !14
  %345 = fadd float %282, %344, !dbg !14
  %346 = fadd float %283, %345, !dbg !14
  %347 = fadd float %284, %346, !dbg !14
  %348 = fadd float %285, %347, !dbg !14
  %349 = fadd float %286, %348, !dbg !14
  %350 = fadd float %287, %288, !dbg !14
  %351 = fadd float %289, %350, !dbg !14
  %352 = fadd float %290, %351, !dbg !14
  %353 = fadd float %291, %352, !dbg !14
  %354 = fadd float %292, %353, !dbg !14
  %355 = fadd float %293, %354, !dbg !14
  %356 = fadd float %294, %355, !dbg !14
  %357 = fadd float %295, %296, !dbg !14
  %358 = fadd float %297, %357, !dbg !14
  %359 = fadd float %298, %358, !dbg !14
  %360 = fadd float %299, %359, !dbg !14
  %361 = fadd float %300, %360, !dbg !14
  %362 = fadd float %301, %361, !dbg !14
  %363 = fadd float %302, %362, !dbg !14
  %364 = fadd float %303, %304, !dbg !14
  %365 = fadd float %305, %364, !dbg !14
  %366 = fadd float %306, %365, !dbg !14
  %367 = fadd float %307, %366, !dbg !14
  %368 = fadd float %308, %367, !dbg !14
  %369 = fadd float %309, %368, !dbg !14
  %370 = fadd float %310, %369, !dbg !14
  %371 = fadd float %311, %312, !dbg !14
  %372 = fadd float %313, %371, !dbg !14
  %373 = fadd float %314, %372, !dbg !14
  %374 = fadd float %315, %373, !dbg !14
  %375 = fadd float %316, %374, !dbg !14
  %376 = fadd float %317, %375, !dbg !14
  %377 = fadd float %318, %376, !dbg !14
  %378 = fadd float %319, %320, !dbg !14
  %379 = fadd float %321, %378, !dbg !14
  %380 = fadd float %322, %379, !dbg !14
  %381 = fadd float %323, %380, !dbg !14
  %382 = fadd float %324, %381, !dbg !14
  %383 = fadd float %325, %382, !dbg !14
  %384 = fadd float %326, %383, !dbg !14
  %385 = fadd float %327, %328, !dbg !14
  %386 = fadd float %329, %385, !dbg !14
  %387 = fadd float %330, %386, !dbg !14
  %388 = fadd float %331, %387, !dbg !14
  %389 = fadd float %332, %388, !dbg !14
  %390 = fadd float %333, %389, !dbg !14
  %391 = fadd float %334, %390, !dbg !14
  %392 = fadd float %335, %336, !dbg !14
  %393 = fadd float %337, %392, !dbg !14
  %394 = fadd float %338, %393, !dbg !14
  %395 = fadd float %339, %394, !dbg !14
  %396 = fadd float %340, %395, !dbg !14
  %397 = fadd float %341, %396, !dbg !14
  %398 = fadd float %342, %397, !dbg !14
  %399 = bitcast float %349 to i32, !dbg !18
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 8, i32 31), !dbg !18
  %401 = bitcast i32 %400 to float, !dbg !18
  %402 = fadd float %349, %401, !dbg !14
  %403 = bitcast float %402 to i32, !dbg !18
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 4, i32 31), !dbg !18
  %405 = bitcast i32 %404 to float, !dbg !18
  %406 = fadd float %402, %405, !dbg !14
  %407 = bitcast float %406 to i32, !dbg !18
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !18
  %409 = bitcast i32 %408 to float, !dbg !18
  %410 = fadd float %406, %409, !dbg !14
  %411 = bitcast float %410 to i32, !dbg !18
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !18
  %413 = bitcast i32 %412 to float, !dbg !18
  %414 = fadd float %410, %413, !dbg !14
  %415 = bitcast float %356 to i32, !dbg !18
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 8, i32 31), !dbg !18
  %417 = bitcast i32 %416 to float, !dbg !18
  %418 = fadd float %356, %417, !dbg !14
  %419 = bitcast float %418 to i32, !dbg !18
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 4, i32 31), !dbg !18
  %421 = bitcast i32 %420 to float, !dbg !18
  %422 = fadd float %418, %421, !dbg !14
  %423 = bitcast float %422 to i32, !dbg !18
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 2, i32 31), !dbg !18
  %425 = bitcast i32 %424 to float, !dbg !18
  %426 = fadd float %422, %425, !dbg !14
  %427 = bitcast float %426 to i32, !dbg !18
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !18
  %429 = bitcast i32 %428 to float, !dbg !18
  %430 = fadd float %426, %429, !dbg !14
  %431 = bitcast float %363 to i32, !dbg !18
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 8, i32 31), !dbg !18
  %433 = bitcast i32 %432 to float, !dbg !18
  %434 = fadd float %363, %433, !dbg !14
  %435 = bitcast float %434 to i32, !dbg !18
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 4, i32 31), !dbg !18
  %437 = bitcast i32 %436 to float, !dbg !18
  %438 = fadd float %434, %437, !dbg !14
  %439 = bitcast float %438 to i32, !dbg !18
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 2, i32 31), !dbg !18
  %441 = bitcast i32 %440 to float, !dbg !18
  %442 = fadd float %438, %441, !dbg !14
  %443 = bitcast float %442 to i32, !dbg !18
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !18
  %445 = bitcast i32 %444 to float, !dbg !18
  %446 = fadd float %442, %445, !dbg !14
  %447 = bitcast float %370 to i32, !dbg !18
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 8, i32 31), !dbg !18
  %449 = bitcast i32 %448 to float, !dbg !18
  %450 = fadd float %370, %449, !dbg !14
  %451 = bitcast float %450 to i32, !dbg !18
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 4, i32 31), !dbg !18
  %453 = bitcast i32 %452 to float, !dbg !18
  %454 = fadd float %450, %453, !dbg !14
  %455 = bitcast float %454 to i32, !dbg !18
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 2, i32 31), !dbg !18
  %457 = bitcast i32 %456 to float, !dbg !18
  %458 = fadd float %454, %457, !dbg !14
  %459 = bitcast float %458 to i32, !dbg !18
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 1, i32 31), !dbg !18
  %461 = bitcast i32 %460 to float, !dbg !18
  %462 = fadd float %458, %461, !dbg !14
  %463 = bitcast float %377 to i32, !dbg !18
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %463, i32 8, i32 31), !dbg !18
  %465 = bitcast i32 %464 to float, !dbg !18
  %466 = fadd float %377, %465, !dbg !14
  %467 = bitcast float %466 to i32, !dbg !18
  %468 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 4, i32 31), !dbg !18
  %469 = bitcast i32 %468 to float, !dbg !18
  %470 = fadd float %466, %469, !dbg !14
  %471 = bitcast float %470 to i32, !dbg !18
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 2, i32 31), !dbg !18
  %473 = bitcast i32 %472 to float, !dbg !18
  %474 = fadd float %470, %473, !dbg !14
  %475 = bitcast float %474 to i32, !dbg !18
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !18
  %477 = bitcast i32 %476 to float, !dbg !18
  %478 = fadd float %474, %477, !dbg !14
  %479 = bitcast float %384 to i32, !dbg !18
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !18
  %481 = bitcast i32 %480 to float, !dbg !18
  %482 = fadd float %384, %481, !dbg !14
  %483 = bitcast float %482 to i32, !dbg !18
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %483, i32 4, i32 31), !dbg !18
  %485 = bitcast i32 %484 to float, !dbg !18
  %486 = fadd float %482, %485, !dbg !14
  %487 = bitcast float %486 to i32, !dbg !18
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 2, i32 31), !dbg !18
  %489 = bitcast i32 %488 to float, !dbg !18
  %490 = fadd float %486, %489, !dbg !14
  %491 = bitcast float %490 to i32, !dbg !18
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 1, i32 31), !dbg !18
  %493 = bitcast i32 %492 to float, !dbg !18
  %494 = fadd float %490, %493, !dbg !14
  %495 = bitcast float %391 to i32, !dbg !18
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 8, i32 31), !dbg !18
  %497 = bitcast i32 %496 to float, !dbg !18
  %498 = fadd float %391, %497, !dbg !14
  %499 = bitcast float %498 to i32, !dbg !18
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 4, i32 31), !dbg !18
  %501 = bitcast i32 %500 to float, !dbg !18
  %502 = fadd float %498, %501, !dbg !14
  %503 = bitcast float %502 to i32, !dbg !18
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 2, i32 31), !dbg !18
  %505 = bitcast i32 %504 to float, !dbg !18
  %506 = fadd float %502, %505, !dbg !14
  %507 = bitcast float %506 to i32, !dbg !18
  %508 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %507, i32 1, i32 31), !dbg !18
  %509 = bitcast i32 %508 to float, !dbg !18
  %510 = fadd float %506, %509, !dbg !14
  %511 = bitcast float %398 to i32, !dbg !18
  %512 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %511, i32 8, i32 31), !dbg !18
  %513 = bitcast i32 %512 to float, !dbg !18
  %514 = fadd float %398, %513, !dbg !14
  %515 = bitcast float %514 to i32, !dbg !18
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 4, i32 31), !dbg !18
  %517 = bitcast i32 %516 to float, !dbg !18
  %518 = fadd float %514, %517, !dbg !14
  %519 = bitcast float %518 to i32, !dbg !18
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 2, i32 31), !dbg !18
  %521 = bitcast i32 %520 to float, !dbg !18
  %522 = fadd float %518, %521, !dbg !14
  %523 = bitcast float %522 to i32, !dbg !18
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 1, i32 31), !dbg !18
  %525 = bitcast i32 %524 to float, !dbg !18
  %526 = fadd float %522, %525, !dbg !14
  %527 = fadd float %3, %414, !dbg !19
  %528 = fadd float %3, %430, !dbg !19
  %529 = fadd float %3, %446, !dbg !19
  %530 = fadd float %3, %462, !dbg !19
  %531 = fadd float %3, %478, !dbg !19
  %532 = fadd float %3, %494, !dbg !19
  %533 = fadd float %3, %510, !dbg !19
  %534 = fadd float %3, %526, !dbg !19
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %535, 0, !dbg !20
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %536, 0, !dbg !20
  br i1 %.not.i, label %542, label %537, !dbg !20

537:                                              ; preds = %5
  br i1 %.not1.i, label %540, label %538, !dbg !20

538:                                              ; preds = %537
  %539 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

540:                                              ; preds = %537
  %541 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

542:                                              ; preds = %5
  br i1 %.not1.i, label %545, label %543, !dbg !20

543:                                              ; preds = %542
  %544 = tail call float @llvm.nvvm.sqrt.rn.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

545:                                              ; preds = %542
  %546 = tail call float @llvm.nvvm.sqrt.approx.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %538, %540, %543, %545
  %.0.i = phi float [ %539, %538 ], [ %541, %540 ], [ %544, %543 ], [ %546, %545 ], !dbg !20
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i2 = icmp eq i32 %547, 0, !dbg !20
  %548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i5 = icmp eq i32 %548, 0, !dbg !20
  br i1 %.not.i2, label %554, label %549, !dbg !20

549:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %552, label %550, !dbg !20

550:                                              ; preds = %549
  %551 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

552:                                              ; preds = %549
  %553 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

554:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %557, label %555, !dbg !20

555:                                              ; preds = %554
  %556 = tail call float @llvm.nvvm.sqrt.rn.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

557:                                              ; preds = %554
  %558 = tail call float @llvm.nvvm.sqrt.approx.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

__nv_sqrtf.exit6:                                 ; preds = %550, %552, %555, %557
  %.0.i4 = phi float [ %551, %550 ], [ %553, %552 ], [ %556, %555 ], [ %558, %557 ], !dbg !20
  %559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i7 = icmp eq i32 %559, 0, !dbg !20
  %560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i10 = icmp eq i32 %560, 0, !dbg !20
  br i1 %.not.i7, label %566, label %561, !dbg !20

561:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %564, label %562, !dbg !20

562:                                              ; preds = %561
  %563 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

564:                                              ; preds = %561
  %565 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

566:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %569, label %567, !dbg !20

567:                                              ; preds = %566
  %568 = tail call float @llvm.nvvm.sqrt.rn.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

569:                                              ; preds = %566
  %570 = tail call float @llvm.nvvm.sqrt.approx.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

__nv_sqrtf.exit11:                                ; preds = %562, %564, %567, %569
  %.0.i9 = phi float [ %563, %562 ], [ %565, %564 ], [ %568, %567 ], [ %570, %569 ], !dbg !20
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i12 = icmp eq i32 %571, 0, !dbg !20
  %572 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i15 = icmp eq i32 %572, 0, !dbg !20
  br i1 %.not.i12, label %578, label %573, !dbg !20

573:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %576, label %574, !dbg !20

574:                                              ; preds = %573
  %575 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

576:                                              ; preds = %573
  %577 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

578:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %581, label %579, !dbg !20

579:                                              ; preds = %578
  %580 = tail call float @llvm.nvvm.sqrt.rn.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

581:                                              ; preds = %578
  %582 = tail call float @llvm.nvvm.sqrt.approx.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

__nv_sqrtf.exit16:                                ; preds = %574, %576, %579, %581
  %.0.i14 = phi float [ %575, %574 ], [ %577, %576 ], [ %580, %579 ], [ %582, %581 ], !dbg !20
  %583 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i17 = icmp eq i32 %583, 0, !dbg !20
  %584 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i20 = icmp eq i32 %584, 0, !dbg !20
  br i1 %.not.i17, label %590, label %585, !dbg !20

585:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %588, label %586, !dbg !20

586:                                              ; preds = %585
  %587 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit21, !dbg !20

588:                                              ; preds = %585
  %589 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit21, !dbg !20

590:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %593, label %591, !dbg !20

591:                                              ; preds = %590
  %592 = tail call float @llvm.nvvm.sqrt.rn.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit21, !dbg !20

593:                                              ; preds = %590
  %594 = tail call float @llvm.nvvm.sqrt.approx.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit21, !dbg !20

__nv_sqrtf.exit21:                                ; preds = %586, %588, %591, %593
  %.0.i19 = phi float [ %587, %586 ], [ %589, %588 ], [ %592, %591 ], [ %594, %593 ], !dbg !20
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i22 = icmp eq i32 %595, 0, !dbg !20
  %596 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i25 = icmp eq i32 %596, 0, !dbg !20
  br i1 %.not.i22, label %602, label %597, !dbg !20

597:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %600, label %598, !dbg !20

598:                                              ; preds = %597
  %599 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit26, !dbg !20

600:                                              ; preds = %597
  %601 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit26, !dbg !20

602:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %605, label %603, !dbg !20

603:                                              ; preds = %602
  %604 = tail call float @llvm.nvvm.sqrt.rn.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit26, !dbg !20

605:                                              ; preds = %602
  %606 = tail call float @llvm.nvvm.sqrt.approx.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit26, !dbg !20

__nv_sqrtf.exit26:                                ; preds = %598, %600, %603, %605
  %.0.i24 = phi float [ %599, %598 ], [ %601, %600 ], [ %604, %603 ], [ %606, %605 ], !dbg !20
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i27 = icmp eq i32 %607, 0, !dbg !20
  %608 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i30 = icmp eq i32 %608, 0, !dbg !20
  br i1 %.not.i27, label %614, label %609, !dbg !20

609:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %612, label %610, !dbg !20

610:                                              ; preds = %609
  %611 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit31, !dbg !20

612:                                              ; preds = %609
  %613 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit31, !dbg !20

614:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %617, label %615, !dbg !20

615:                                              ; preds = %614
  %616 = tail call float @llvm.nvvm.sqrt.rn.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit31, !dbg !20

617:                                              ; preds = %614
  %618 = tail call float @llvm.nvvm.sqrt.approx.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit31, !dbg !20

__nv_sqrtf.exit31:                                ; preds = %610, %612, %615, %617
  %.0.i29 = phi float [ %611, %610 ], [ %613, %612 ], [ %616, %615 ], [ %618, %617 ], !dbg !20
  %619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i32 = icmp eq i32 %619, 0, !dbg !20
  %620 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i35 = icmp eq i32 %620, 0, !dbg !20
  br i1 %.not.i32, label %626, label %621, !dbg !20

621:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %624, label %622, !dbg !20

622:                                              ; preds = %621
  %623 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %534) #6, !dbg !20
  br label %__nv_sqrtf.exit36, !dbg !20

624:                                              ; preds = %621
  %625 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %534) #6, !dbg !20
  br label %__nv_sqrtf.exit36, !dbg !20

626:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %629, label %627, !dbg !20

627:                                              ; preds = %626
  %628 = tail call float @llvm.nvvm.sqrt.rn.f(float %534) #6, !dbg !20
  br label %__nv_sqrtf.exit36, !dbg !20

629:                                              ; preds = %626
  %630 = tail call float @llvm.nvvm.sqrt.approx.f(float %534) #6, !dbg !20
  br label %__nv_sqrtf.exit36, !dbg !20

__nv_sqrtf.exit36:                                ; preds = %622, %624, %627, %629
  %.0.i34 = phi float [ %623, %622 ], [ %625, %624 ], [ %628, %627 ], [ %630, %629 ], !dbg !20
  %631 = and i32 %9, 127, !dbg !11
  %632 = zext nneg i32 %631 to i64, !dbg !11
  %633 = or disjoint i64 %8, %632, !dbg !11
  %634 = and i32 %9, 128, !dbg !11
  %635 = icmp eq i32 %634, 0, !dbg !11
  %636 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %637 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i4), !dbg !21
  %638 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i9), !dbg !21
  %639 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i14), !dbg !21
  %640 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i19), !dbg !21
  %641 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i24), !dbg !21
  %642 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i29), !dbg !21
  %643 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i34), !dbg !21
  %644 = fmul float %636, %215, !dbg !22
  %645 = fmul float %636, %216, !dbg !22
  %646 = fmul float %636, %217, !dbg !22
  %647 = fmul float %636, %218, !dbg !22
  %648 = fmul float %636, %219, !dbg !22
  %649 = fmul float %636, %220, !dbg !22
  %650 = fmul float %636, %221, !dbg !22
  %651 = fmul float %636, %222, !dbg !22
  %652 = fmul float %637, %223, !dbg !22
  %653 = fmul float %637, %224, !dbg !22
  %654 = fmul float %637, %225, !dbg !22
  %655 = fmul float %637, %226, !dbg !22
  %656 = fmul float %637, %227, !dbg !22
  %657 = fmul float %637, %228, !dbg !22
  %658 = fmul float %637, %229, !dbg !22
  %659 = fmul float %637, %230, !dbg !22
  %660 = fmul float %638, %231, !dbg !22
  %661 = fmul float %638, %232, !dbg !22
  %662 = fmul float %638, %233, !dbg !22
  %663 = fmul float %638, %234, !dbg !22
  %664 = fmul float %638, %235, !dbg !22
  %665 = fmul float %638, %236, !dbg !22
  %666 = fmul float %638, %237, !dbg !22
  %667 = fmul float %638, %238, !dbg !22
  %668 = fmul float %639, %239, !dbg !22
  %669 = fmul float %639, %240, !dbg !22
  %670 = fmul float %639, %241, !dbg !22
  %671 = fmul float %639, %242, !dbg !22
  %672 = fmul float %639, %243, !dbg !22
  %673 = fmul float %639, %244, !dbg !22
  %674 = fmul float %639, %245, !dbg !22
  %675 = fmul float %639, %246, !dbg !22
  %676 = fmul float %640, %247, !dbg !22
  %677 = fmul float %640, %248, !dbg !22
  %678 = fmul float %640, %249, !dbg !22
  %679 = fmul float %640, %250, !dbg !22
  %680 = fmul float %640, %251, !dbg !22
  %681 = fmul float %640, %252, !dbg !22
  %682 = fmul float %640, %253, !dbg !22
  %683 = fmul float %640, %254, !dbg !22
  %684 = fmul float %641, %255, !dbg !22
  %685 = fmul float %641, %256, !dbg !22
  %686 = fmul float %641, %257, !dbg !22
  %687 = fmul float %641, %258, !dbg !22
  %688 = fmul float %641, %259, !dbg !22
  %689 = fmul float %641, %260, !dbg !22
  %690 = fmul float %641, %261, !dbg !22
  %691 = fmul float %641, %262, !dbg !22
  %692 = fmul float %642, %263, !dbg !22
  %693 = fmul float %642, %264, !dbg !22
  %694 = fmul float %642, %265, !dbg !22
  %695 = fmul float %642, %266, !dbg !22
  %696 = fmul float %642, %267, !dbg !22
  %697 = fmul float %642, %268, !dbg !22
  %698 = fmul float %642, %269, !dbg !22
  %699 = fmul float %642, %270, !dbg !22
  %700 = fmul float %643, %271, !dbg !22
  %701 = fmul float %643, %272, !dbg !22
  %702 = fmul float %643, %273, !dbg !22
  %703 = fmul float %643, %274, !dbg !22
  %704 = fmul float %643, %275, !dbg !22
  %705 = fmul float %643, %276, !dbg !22
  %706 = fmul float %643, %277, !dbg !22
  %707 = fmul float %643, %278, !dbg !22
  %708 = fptrunc float %644 to bfloat, !dbg !23
  %709 = fptrunc float %645 to bfloat, !dbg !23
  %710 = fptrunc float %646 to bfloat, !dbg !23
  %711 = fptrunc float %647 to bfloat, !dbg !23
  %712 = fptrunc float %648 to bfloat, !dbg !23
  %713 = fptrunc float %649 to bfloat, !dbg !23
  %714 = fptrunc float %650 to bfloat, !dbg !23
  %715 = fptrunc float %651 to bfloat, !dbg !23
  %716 = fptrunc float %652 to bfloat, !dbg !23
  %717 = fptrunc float %653 to bfloat, !dbg !23
  %718 = fptrunc float %654 to bfloat, !dbg !23
  %719 = fptrunc float %655 to bfloat, !dbg !23
  %720 = fptrunc float %656 to bfloat, !dbg !23
  %721 = fptrunc float %657 to bfloat, !dbg !23
  %722 = fptrunc float %658 to bfloat, !dbg !23
  %723 = fptrunc float %659 to bfloat, !dbg !23
  %724 = fptrunc float %660 to bfloat, !dbg !23
  %725 = fptrunc float %661 to bfloat, !dbg !23
  %726 = fptrunc float %662 to bfloat, !dbg !23
  %727 = fptrunc float %663 to bfloat, !dbg !23
  %728 = fptrunc float %664 to bfloat, !dbg !23
  %729 = fptrunc float %665 to bfloat, !dbg !23
  %730 = fptrunc float %666 to bfloat, !dbg !23
  %731 = fptrunc float %667 to bfloat, !dbg !23
  %732 = fptrunc float %668 to bfloat, !dbg !23
  %733 = fptrunc float %669 to bfloat, !dbg !23
  %734 = fptrunc float %670 to bfloat, !dbg !23
  %735 = fptrunc float %671 to bfloat, !dbg !23
  %736 = fptrunc float %672 to bfloat, !dbg !23
  %737 = fptrunc float %673 to bfloat, !dbg !23
  %738 = fptrunc float %674 to bfloat, !dbg !23
  %739 = fptrunc float %675 to bfloat, !dbg !23
  %740 = fptrunc float %676 to bfloat, !dbg !23
  %741 = fptrunc float %677 to bfloat, !dbg !23
  %742 = fptrunc float %678 to bfloat, !dbg !23
  %743 = fptrunc float %679 to bfloat, !dbg !23
  %744 = fptrunc float %680 to bfloat, !dbg !23
  %745 = fptrunc float %681 to bfloat, !dbg !23
  %746 = fptrunc float %682 to bfloat, !dbg !23
  %747 = fptrunc float %683 to bfloat, !dbg !23
  %748 = fptrunc float %684 to bfloat, !dbg !23
  %749 = fptrunc float %685 to bfloat, !dbg !23
  %750 = fptrunc float %686 to bfloat, !dbg !23
  %751 = fptrunc float %687 to bfloat, !dbg !23
  %752 = fptrunc float %688 to bfloat, !dbg !23
  %753 = fptrunc float %689 to bfloat, !dbg !23
  %754 = fptrunc float %690 to bfloat, !dbg !23
  %755 = fptrunc float %691 to bfloat, !dbg !23
  %756 = fptrunc float %692 to bfloat, !dbg !23
  %757 = fptrunc float %693 to bfloat, !dbg !23
  %758 = fptrunc float %694 to bfloat, !dbg !23
  %759 = fptrunc float %695 to bfloat, !dbg !23
  %760 = fptrunc float %696 to bfloat, !dbg !23
  %761 = fptrunc float %697 to bfloat, !dbg !23
  %762 = fptrunc float %698 to bfloat, !dbg !23
  %763 = fptrunc float %699 to bfloat, !dbg !23
  %764 = fptrunc float %700 to bfloat, !dbg !23
  %765 = fptrunc float %701 to bfloat, !dbg !23
  %766 = fptrunc float %702 to bfloat, !dbg !23
  %767 = fptrunc float %703 to bfloat, !dbg !23
  %768 = fptrunc float %704 to bfloat, !dbg !23
  %769 = fptrunc float %705 to bfloat, !dbg !23
  %770 = fptrunc float %706 to bfloat, !dbg !23
  %771 = fptrunc float %707 to bfloat, !dbg !23
  %772 = getelementptr bfloat, ptr addrspace(1) %1, i64 %46, !dbg !24
  %773 = getelementptr bfloat, ptr addrspace(1) %1, i64 %47, !dbg !24
  %774 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !24
  %775 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !24
  %776 = getelementptr bfloat, ptr addrspace(1) %1, i64 %50, !dbg !24
  %777 = getelementptr bfloat, ptr addrspace(1) %1, i64 %51, !dbg !24
  %778 = getelementptr bfloat, ptr addrspace(1) %1, i64 %52, !dbg !24
  %779 = getelementptr bfloat, ptr addrspace(1) %1, i64 %53, !dbg !24
  %780 = insertelement <2 x bfloat> poison, bfloat %708, i64 0, !dbg !24
  %781 = insertelement <2 x bfloat> %780, bfloat %709, i64 1, !dbg !24
  %782 = bitcast <2 x bfloat> %781 to i32, !dbg !24
  %783 = insertelement <2 x bfloat> poison, bfloat %710, i64 0, !dbg !24
  %784 = insertelement <2 x bfloat> %783, bfloat %711, i64 1, !dbg !24
  %785 = bitcast <2 x bfloat> %784 to i32, !dbg !24
  %786 = insertelement <2 x bfloat> poison, bfloat %712, i64 0, !dbg !24
  %787 = insertelement <2 x bfloat> %786, bfloat %713, i64 1, !dbg !24
  %788 = bitcast <2 x bfloat> %787 to i32, !dbg !24
  %789 = insertelement <2 x bfloat> poison, bfloat %714, i64 0, !dbg !24
  %790 = insertelement <2 x bfloat> %789, bfloat %715, i64 1, !dbg !24
  %791 = bitcast <2 x bfloat> %790 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %782, i32 %785, i32 %788, i32 %791, ptr addrspace(1) %772, i1 %71) #6, !dbg !24
  %792 = insertelement <2 x bfloat> poison, bfloat %716, i64 0, !dbg !24
  %793 = insertelement <2 x bfloat> %792, bfloat %717, i64 1, !dbg !24
  %794 = bitcast <2 x bfloat> %793 to i32, !dbg !24
  %795 = insertelement <2 x bfloat> poison, bfloat %718, i64 0, !dbg !24
  %796 = insertelement <2 x bfloat> %795, bfloat %719, i64 1, !dbg !24
  %797 = bitcast <2 x bfloat> %796 to i32, !dbg !24
  %798 = insertelement <2 x bfloat> poison, bfloat %720, i64 0, !dbg !24
  %799 = insertelement <2 x bfloat> %798, bfloat %721, i64 1, !dbg !24
  %800 = bitcast <2 x bfloat> %799 to i32, !dbg !24
  %801 = insertelement <2 x bfloat> poison, bfloat %722, i64 0, !dbg !24
  %802 = insertelement <2 x bfloat> %801, bfloat %723, i64 1, !dbg !24
  %803 = bitcast <2 x bfloat> %802 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %794, i32 %797, i32 %800, i32 %803, ptr addrspace(1) %773, i1 %72) #6, !dbg !24
  %804 = insertelement <2 x bfloat> poison, bfloat %724, i64 0, !dbg !24
  %805 = insertelement <2 x bfloat> %804, bfloat %725, i64 1, !dbg !24
  %806 = bitcast <2 x bfloat> %805 to i32, !dbg !24
  %807 = insertelement <2 x bfloat> poison, bfloat %726, i64 0, !dbg !24
  %808 = insertelement <2 x bfloat> %807, bfloat %727, i64 1, !dbg !24
  %809 = bitcast <2 x bfloat> %808 to i32, !dbg !24
  %810 = insertelement <2 x bfloat> poison, bfloat %728, i64 0, !dbg !24
  %811 = insertelement <2 x bfloat> %810, bfloat %729, i64 1, !dbg !24
  %812 = bitcast <2 x bfloat> %811 to i32, !dbg !24
  %813 = insertelement <2 x bfloat> poison, bfloat %730, i64 0, !dbg !24
  %814 = insertelement <2 x bfloat> %813, bfloat %731, i64 1, !dbg !24
  %815 = bitcast <2 x bfloat> %814 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %806, i32 %809, i32 %812, i32 %815, ptr addrspace(1) %774, i1 %73) #6, !dbg !24
  %816 = insertelement <2 x bfloat> poison, bfloat %732, i64 0, !dbg !24
  %817 = insertelement <2 x bfloat> %816, bfloat %733, i64 1, !dbg !24
  %818 = bitcast <2 x bfloat> %817 to i32, !dbg !24
  %819 = insertelement <2 x bfloat> poison, bfloat %734, i64 0, !dbg !24
  %820 = insertelement <2 x bfloat> %819, bfloat %735, i64 1, !dbg !24
  %821 = bitcast <2 x bfloat> %820 to i32, !dbg !24
  %822 = insertelement <2 x bfloat> poison, bfloat %736, i64 0, !dbg !24
  %823 = insertelement <2 x bfloat> %822, bfloat %737, i64 1, !dbg !24
  %824 = bitcast <2 x bfloat> %823 to i32, !dbg !24
  %825 = insertelement <2 x bfloat> poison, bfloat %738, i64 0, !dbg !24
  %826 = insertelement <2 x bfloat> %825, bfloat %739, i64 1, !dbg !24
  %827 = bitcast <2 x bfloat> %826 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %818, i32 %821, i32 %824, i32 %827, ptr addrspace(1) %775, i1 %74) #6, !dbg !24
  %828 = insertelement <2 x bfloat> poison, bfloat %740, i64 0, !dbg !24
  %829 = insertelement <2 x bfloat> %828, bfloat %741, i64 1, !dbg !24
  %830 = bitcast <2 x bfloat> %829 to i32, !dbg !24
  %831 = insertelement <2 x bfloat> poison, bfloat %742, i64 0, !dbg !24
  %832 = insertelement <2 x bfloat> %831, bfloat %743, i64 1, !dbg !24
  %833 = bitcast <2 x bfloat> %832 to i32, !dbg !24
  %834 = insertelement <2 x bfloat> poison, bfloat %744, i64 0, !dbg !24
  %835 = insertelement <2 x bfloat> %834, bfloat %745, i64 1, !dbg !24
  %836 = bitcast <2 x bfloat> %835 to i32, !dbg !24
  %837 = insertelement <2 x bfloat> poison, bfloat %746, i64 0, !dbg !24
  %838 = insertelement <2 x bfloat> %837, bfloat %747, i64 1, !dbg !24
  %839 = bitcast <2 x bfloat> %838 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %830, i32 %833, i32 %836, i32 %839, ptr addrspace(1) %776, i1 %75) #6, !dbg !24
  %840 = insertelement <2 x bfloat> poison, bfloat %748, i64 0, !dbg !24
  %841 = insertelement <2 x bfloat> %840, bfloat %749, i64 1, !dbg !24
  %842 = bitcast <2 x bfloat> %841 to i32, !dbg !24
  %843 = insertelement <2 x bfloat> poison, bfloat %750, i64 0, !dbg !24
  %844 = insertelement <2 x bfloat> %843, bfloat %751, i64 1, !dbg !24
  %845 = bitcast <2 x bfloat> %844 to i32, !dbg !24
  %846 = insertelement <2 x bfloat> poison, bfloat %752, i64 0, !dbg !24
  %847 = insertelement <2 x bfloat> %846, bfloat %753, i64 1, !dbg !24
  %848 = bitcast <2 x bfloat> %847 to i32, !dbg !24
  %849 = insertelement <2 x bfloat> poison, bfloat %754, i64 0, !dbg !24
  %850 = insertelement <2 x bfloat> %849, bfloat %755, i64 1, !dbg !24
  %851 = bitcast <2 x bfloat> %850 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %842, i32 %845, i32 %848, i32 %851, ptr addrspace(1) %777, i1 %76) #6, !dbg !24
  %852 = insertelement <2 x bfloat> poison, bfloat %756, i64 0, !dbg !24
  %853 = insertelement <2 x bfloat> %852, bfloat %757, i64 1, !dbg !24
  %854 = bitcast <2 x bfloat> %853 to i32, !dbg !24
  %855 = insertelement <2 x bfloat> poison, bfloat %758, i64 0, !dbg !24
  %856 = insertelement <2 x bfloat> %855, bfloat %759, i64 1, !dbg !24
  %857 = bitcast <2 x bfloat> %856 to i32, !dbg !24
  %858 = insertelement <2 x bfloat> poison, bfloat %760, i64 0, !dbg !24
  %859 = insertelement <2 x bfloat> %858, bfloat %761, i64 1, !dbg !24
  %860 = bitcast <2 x bfloat> %859 to i32, !dbg !24
  %861 = insertelement <2 x bfloat> poison, bfloat %762, i64 0, !dbg !24
  %862 = insertelement <2 x bfloat> %861, bfloat %763, i64 1, !dbg !24
  %863 = bitcast <2 x bfloat> %862 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %854, i32 %857, i32 %860, i32 %863, ptr addrspace(1) %778, i1 %77) #6, !dbg !24
  %864 = insertelement <2 x bfloat> poison, bfloat %764, i64 0, !dbg !24
  %865 = insertelement <2 x bfloat> %864, bfloat %765, i64 1, !dbg !24
  %866 = bitcast <2 x bfloat> %865 to i32, !dbg !24
  %867 = insertelement <2 x bfloat> poison, bfloat %766, i64 0, !dbg !24
  %868 = insertelement <2 x bfloat> %867, bfloat %767, i64 1, !dbg !24
  %869 = bitcast <2 x bfloat> %868 to i32, !dbg !24
  %870 = insertelement <2 x bfloat> poison, bfloat %768, i64 0, !dbg !24
  %871 = insertelement <2 x bfloat> %870, bfloat %769, i64 1, !dbg !24
  %872 = bitcast <2 x bfloat> %871 to i32, !dbg !24
  %873 = insertelement <2 x bfloat> poison, bfloat %770, i64 0, !dbg !24
  %874 = insertelement <2 x bfloat> %873, bfloat %771, i64 1, !dbg !24
  %875 = bitcast <2 x bfloat> %874 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %866, i32 %869, i32 %872, i32 %875, ptr addrspace(1) %779, i1 %78) #6, !dbg !24
  %876 = getelementptr float, ptr addrspace(1) %2, i64 %633, !dbg !25
  %877 = icmp slt i64 %633, 49152, !dbg !25
  %878 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %636, ptr addrspace(3) %878, align 4, !dbg !25
  %879 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %637, ptr addrspace(3) %879, align 4, !dbg !25
  %880 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  store float %638, ptr addrspace(3) %880, align 4, !dbg !25
  %881 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  store float %639, ptr addrspace(3) %881, align 4, !dbg !25
  %882 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  store float %640, ptr addrspace(3) %882, align 4, !dbg !25
  %883 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  store float %641, ptr addrspace(3) %883, align 4, !dbg !25
  %884 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  store float %642, ptr addrspace(3) %884, align 4, !dbg !25
  %885 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !25
  store float %643, ptr addrspace(3) %885, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %886 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %631, !dbg !25
  %887 = load i32, ptr addrspace(3) %886, align 4, !dbg !25
  %888 = and i1 %635, %877, !dbg !25
  %889 = and i1 %62, %888, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %887, ptr addrspace(1) %876, i1 %889) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
