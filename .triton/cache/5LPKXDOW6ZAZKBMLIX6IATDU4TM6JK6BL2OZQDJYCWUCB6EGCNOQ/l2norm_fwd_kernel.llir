; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 4, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 4, !dbg !11
  %11 = and i32 %10, 7, !dbg !11
  %12 = or disjoint i32 %11, 8, !dbg !11
  %13 = zext nneg i32 %11 to i64, !dbg !11
  %14 = zext nneg i32 %12 to i64, !dbg !11
  %15 = or disjoint i64 %13, %8, !dbg !11
  %16 = or disjoint i64 %14, %8, !dbg !11
  %17 = shl nsw i64 %15, 7, !dbg !11
  %18 = shl nsw i64 %16, 7, !dbg !11
  %19 = shl nuw nsw i32 %9, 3, !dbg !11
  %20 = and i32 %19, 120, !dbg !11
  %21 = zext nneg i32 %20 to i64, !dbg !11
  %22 = or disjoint i64 %17, %21, !dbg !11
  %23 = or disjoint i64 %18, %21, !dbg !11
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !11
  %25 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !11
  %26 = icmp sgt i32 %7, -1, !dbg !11
  %27 = icmp slt i64 %15, 49152, !dbg !11
  %28 = icmp slt i64 %16, 49152, !dbg !11
  %29 = and i1 %26, %27, !dbg !11
  %30 = and i1 %26, %28, !dbg !11
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %29) #6, !dbg !11
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !11
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !11
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !11
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !11
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !11
  %37 = bitcast i32 %36 to <2 x bfloat>, !dbg !11
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !11
  %39 = bitcast i32 %38 to <2 x bfloat>, !dbg !11
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !11
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !11
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !11
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !11
  %44 = extractelement <2 x bfloat> %37, i64 0, !dbg !11
  %45 = extractelement <2 x bfloat> %37, i64 1, !dbg !11
  %46 = extractelement <2 x bfloat> %39, i64 0, !dbg !11
  %47 = extractelement <2 x bfloat> %39, i64 1, !dbg !11
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %30) #6, !dbg !11
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !11
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !11
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !11
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !11
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !11
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !11
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !11
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !11
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !11
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !11
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !11
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !11
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !11
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !11
  %63 = extractelement <2 x bfloat> %56, i64 0, !dbg !11
  %64 = extractelement <2 x bfloat> %56, i64 1, !dbg !11
  %65 = fpext bfloat %40 to float, !dbg !12
  %66 = fpext bfloat %41 to float, !dbg !12
  %67 = fpext bfloat %42 to float, !dbg !12
  %68 = fpext bfloat %43 to float, !dbg !12
  %69 = fpext bfloat %44 to float, !dbg !12
  %70 = fpext bfloat %45 to float, !dbg !12
  %71 = fpext bfloat %46 to float, !dbg !12
  %72 = fpext bfloat %47 to float, !dbg !12
  %73 = fpext bfloat %57 to float, !dbg !12
  %74 = fpext bfloat %58 to float, !dbg !12
  %75 = fpext bfloat %59 to float, !dbg !12
  %76 = fpext bfloat %60 to float, !dbg !12
  %77 = fpext bfloat %61 to float, !dbg !12
  %78 = fpext bfloat %62 to float, !dbg !12
  %79 = fpext bfloat %63 to float, !dbg !12
  %80 = fpext bfloat %64 to float, !dbg !12
  %81 = fmul float %65, %65, !dbg !13
  %82 = fmul float %66, %66, !dbg !13
  %83 = fmul float %67, %67, !dbg !13
  %84 = fmul float %68, %68, !dbg !13
  %85 = fmul float %69, %69, !dbg !13
  %86 = fmul float %70, %70, !dbg !13
  %87 = fmul float %71, %71, !dbg !13
  %88 = fmul float %72, %72, !dbg !13
  %89 = fmul float %73, %73, !dbg !13
  %90 = fmul float %74, %74, !dbg !13
  %91 = fmul float %75, %75, !dbg !13
  %92 = fmul float %76, %76, !dbg !13
  %93 = fmul float %77, %77, !dbg !13
  %94 = fmul float %78, %78, !dbg !13
  %95 = fmul float %79, %79, !dbg !13
  %96 = fmul float %80, %80, !dbg !13
  %97 = fadd float %81, %82, !dbg !14
  %98 = fadd float %83, %97, !dbg !14
  %99 = fadd float %84, %98, !dbg !14
  %100 = fadd float %85, %99, !dbg !14
  %101 = fadd float %86, %100, !dbg !14
  %102 = fadd float %87, %101, !dbg !14
  %103 = fadd float %88, %102, !dbg !14
  %104 = fadd float %89, %90, !dbg !14
  %105 = fadd float %91, %104, !dbg !14
  %106 = fadd float %92, %105, !dbg !14
  %107 = fadd float %93, %106, !dbg !14
  %108 = fadd float %94, %107, !dbg !14
  %109 = fadd float %95, %108, !dbg !14
  %110 = fadd float %96, %109, !dbg !14
  %111 = bitcast float %103 to i32, !dbg !18
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !18
  %113 = bitcast i32 %112 to float, !dbg !18
  %114 = fadd float %103, %113, !dbg !14
  %115 = bitcast float %114 to i32, !dbg !18
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !18
  %117 = bitcast i32 %116 to float, !dbg !18
  %118 = fadd float %114, %117, !dbg !14
  %119 = bitcast float %118 to i32, !dbg !18
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !18
  %121 = bitcast i32 %120 to float, !dbg !18
  %122 = fadd float %118, %121, !dbg !14
  %123 = bitcast float %122 to i32, !dbg !18
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !18
  %125 = bitcast i32 %124 to float, !dbg !18
  %126 = fadd float %122, %125, !dbg !14
  %127 = bitcast float %110 to i32, !dbg !18
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !18
  %129 = bitcast i32 %128 to float, !dbg !18
  %130 = fadd float %110, %129, !dbg !14
  %131 = bitcast float %130 to i32, !dbg !18
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !18
  %133 = bitcast i32 %132 to float, !dbg !18
  %134 = fadd float %130, %133, !dbg !14
  %135 = bitcast float %134 to i32, !dbg !18
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !18
  %137 = bitcast i32 %136 to float, !dbg !18
  %138 = fadd float %134, %137, !dbg !14
  %139 = bitcast float %138 to i32, !dbg !18
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !18
  %141 = bitcast i32 %140 to float, !dbg !18
  %142 = fadd float %138, %141, !dbg !14
  %143 = fadd float %3, %126, !dbg !19
  %144 = fadd float %3, %142, !dbg !19
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %145, 0, !dbg !20
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %146, 0, !dbg !20
  br i1 %.not.i, label %152, label %147, !dbg !20

147:                                              ; preds = %5
  br i1 %.not1.i, label %150, label %148, !dbg !20

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

152:                                              ; preds = %5
  br i1 %.not1.i, label %155, label %153, !dbg !20

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %148, %150, %153, %155
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !20
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i2 = icmp eq i32 %157, 0, !dbg !20
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i5 = icmp eq i32 %158, 0, !dbg !20
  br i1 %.not.i2, label %164, label %159, !dbg !20

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %162, label %160, !dbg !20

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

164:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %167, label %165, !dbg !20

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

__nv_sqrtf.exit6:                                 ; preds = %160, %162, %165, %167
  %.0.i4 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !20
  %169 = and i32 %9, 15, !dbg !11
  %170 = zext nneg i32 %169 to i64, !dbg !11
  %171 = or disjoint i64 %8, %170, !dbg !11
  %172 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %173 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i4), !dbg !21
  %174 = fmul float %172, %65, !dbg !22
  %175 = fmul float %172, %66, !dbg !22
  %176 = fmul float %172, %67, !dbg !22
  %177 = fmul float %172, %68, !dbg !22
  %178 = fmul float %172, %69, !dbg !22
  %179 = fmul float %172, %70, !dbg !22
  %180 = fmul float %172, %71, !dbg !22
  %181 = fmul float %172, %72, !dbg !22
  %182 = fmul float %173, %73, !dbg !22
  %183 = fmul float %173, %74, !dbg !22
  %184 = fmul float %173, %75, !dbg !22
  %185 = fmul float %173, %76, !dbg !22
  %186 = fmul float %173, %77, !dbg !22
  %187 = fmul float %173, %78, !dbg !22
  %188 = fmul float %173, %79, !dbg !22
  %189 = fmul float %173, %80, !dbg !22
  %190 = fptrunc float %174 to bfloat, !dbg !23
  %191 = fptrunc float %175 to bfloat, !dbg !23
  %192 = fptrunc float %176 to bfloat, !dbg !23
  %193 = fptrunc float %177 to bfloat, !dbg !23
  %194 = fptrunc float %178 to bfloat, !dbg !23
  %195 = fptrunc float %179 to bfloat, !dbg !23
  %196 = fptrunc float %180 to bfloat, !dbg !23
  %197 = fptrunc float %181 to bfloat, !dbg !23
  %198 = fptrunc float %182 to bfloat, !dbg !23
  %199 = fptrunc float %183 to bfloat, !dbg !23
  %200 = fptrunc float %184 to bfloat, !dbg !23
  %201 = fptrunc float %185 to bfloat, !dbg !23
  %202 = fptrunc float %186 to bfloat, !dbg !23
  %203 = fptrunc float %187 to bfloat, !dbg !23
  %204 = fptrunc float %188 to bfloat, !dbg !23
  %205 = fptrunc float %189 to bfloat, !dbg !23
  %206 = getelementptr bfloat, ptr addrspace(1) %1, i64 %22, !dbg !24
  %207 = getelementptr bfloat, ptr addrspace(1) %1, i64 %23, !dbg !24
  %208 = insertelement <2 x bfloat> poison, bfloat %190, i64 0, !dbg !24
  %209 = insertelement <2 x bfloat> %208, bfloat %191, i64 1, !dbg !24
  %210 = bitcast <2 x bfloat> %209 to i32, !dbg !24
  %211 = insertelement <2 x bfloat> poison, bfloat %192, i64 0, !dbg !24
  %212 = insertelement <2 x bfloat> %211, bfloat %193, i64 1, !dbg !24
  %213 = bitcast <2 x bfloat> %212 to i32, !dbg !24
  %214 = insertelement <2 x bfloat> poison, bfloat %194, i64 0, !dbg !24
  %215 = insertelement <2 x bfloat> %214, bfloat %195, i64 1, !dbg !24
  %216 = bitcast <2 x bfloat> %215 to i32, !dbg !24
  %217 = insertelement <2 x bfloat> poison, bfloat %196, i64 0, !dbg !24
  %218 = insertelement <2 x bfloat> %217, bfloat %197, i64 1, !dbg !24
  %219 = bitcast <2 x bfloat> %218 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %213, i32 %216, i32 %219, ptr addrspace(1) %206, i1 %29) #6, !dbg !24
  %220 = insertelement <2 x bfloat> poison, bfloat %198, i64 0, !dbg !24
  %221 = insertelement <2 x bfloat> %220, bfloat %199, i64 1, !dbg !24
  %222 = bitcast <2 x bfloat> %221 to i32, !dbg !24
  %223 = insertelement <2 x bfloat> poison, bfloat %200, i64 0, !dbg !24
  %224 = insertelement <2 x bfloat> %223, bfloat %201, i64 1, !dbg !24
  %225 = bitcast <2 x bfloat> %224 to i32, !dbg !24
  %226 = insertelement <2 x bfloat> poison, bfloat %202, i64 0, !dbg !24
  %227 = insertelement <2 x bfloat> %226, bfloat %203, i64 1, !dbg !24
  %228 = bitcast <2 x bfloat> %227 to i32, !dbg !24
  %229 = insertelement <2 x bfloat> poison, bfloat %204, i64 0, !dbg !24
  %230 = insertelement <2 x bfloat> %229, bfloat %205, i64 1, !dbg !24
  %231 = bitcast <2 x bfloat> %230 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %225, i32 %228, i32 %231, ptr addrspace(1) %207, i1 %30) #6, !dbg !24
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !25
  %233 = icmp slt i64 %171, 49152, !dbg !25
  %234 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %172, ptr addrspace(3) %234, align 4, !dbg !25
  %235 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %173, ptr addrspace(3) %235, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %236 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %169, !dbg !25
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !25
  %238 = and i32 %9, 112, !dbg !25
  %239 = icmp eq i32 %238, 0, !dbg !25
  %240 = and i1 %239, %233, !dbg !25
  %241 = and i1 %26, %240, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %237, ptr addrspace(1) %232, i1 %241) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
