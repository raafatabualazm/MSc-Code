; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 5, !dbg !17
  %24 = and i32 %22, 32, !dbg !17
  %25 = icmp eq i32 %24, 0, !dbg !17
  %26 = and i32 %22, 128, !dbg !17
  %27 = lshr i32 %22, 3, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %28, 32, !dbg !17
  %30 = shl nuw nsw i32 %22, 3, !dbg !17
  %31 = and i32 %30, 56, !dbg !17
  %32 = zext nneg i32 %28 to i64, !dbg !17
  %33 = zext nneg i32 %29 to i64, !dbg !17
  %34 = zext nneg i32 %31 to i64, !dbg !17
  %35 = or disjoint i64 %32, %21, !dbg !17
  %36 = or disjoint i64 %33, %21, !dbg !17
  %37 = shl nsw i64 %35, 5, !dbg !17
  %38 = shl nsw i64 %36, 5, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %18, i64 %37, !dbg !17
  %40 = getelementptr bfloat, ptr addrspace(1) %18, i64 %38, !dbg !17
  %41 = icmp sgt i32 %19, -1, !dbg !17
  %42 = icmp slt i64 %35, %20, !dbg !17
  %43 = icmp slt i64 %36, %20, !dbg !17
  %44 = and i1 %41, %42, !dbg !17
  %45 = and i1 %41, %43, !dbg !17
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 %44) #2, !dbg !17
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %45) #2, !dbg !17
  %48 = or disjoint i32 %14, %13, !dbg !18
  %49 = shl i32 %48, 6, !dbg !19
  %50 = sext i32 %49 to i64, !dbg !20
  %51 = getelementptr bfloat, ptr addrspace(1) %5, i64 %50, !dbg !20
  %.idx = shl nsw i64 %35, 12, !dbg !21
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx, !dbg !21
  %53 = getelementptr bfloat, ptr addrspace(1) %52, i64 %34, !dbg !21
  %.idx2 = shl nsw i64 %36, 12, !dbg !21
  %54 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx2, !dbg !21
  %55 = getelementptr bfloat, ptr addrspace(1) %54, i64 %34, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %44) #2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !21
  %63 = shufflevector <2 x bfloat> %62, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %64 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !21
  %66 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %45) #2, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !21
  %74 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %75 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !21
  %77 = shufflevector <2 x bfloat> %76, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %78 = select i1 %25, i32 0, i32 288, !dbg !21
  %79 = and i32 %22, 24, !dbg !21
  %80 = mul nuw nsw i32 %79, 9, !dbg !21
  %81 = xor i32 %80, %31, !dbg !21
  %82 = xor i32 %81, %78, !dbg !21
  %83 = and i32 %30, 512, !dbg !21
  %84 = shl nuw nsw i32 %26, 3, !dbg !21
  %85 = or disjoint i32 %83, %82, !dbg !21
  %86 = or disjoint i32 %85, %84, !dbg !21
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408), i32 %86, !dbg !21
  %88 = shufflevector <2 x bfloat> %58, <2 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %89 = shufflevector <8 x bfloat> %88, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %90 = shufflevector <8 x bfloat> %89, <8 x bfloat> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %90, ptr addrspace(3) %87, align 16, !dbg !21
  %91 = or disjoint i32 %31, 2048, !dbg !21
  %92 = xor i32 %80, %91, !dbg !21
  %93 = xor i32 %92, %78, !dbg !21
  %94 = or disjoint i32 %93, %83, !dbg !21
  %95 = or disjoint i32 %94, %84, !dbg !21
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408), i32 %95, !dbg !21
  %97 = shufflevector <2 x bfloat> %69, <2 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %98 = shufflevector <8 x bfloat> %97, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %99 = shufflevector <8 x bfloat> %98, <8 x bfloat> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %99, ptr addrspace(3) %96, align 16, !dbg !21
  %100 = shl i32 %48, 7, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !23
  %102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %101, !dbg !23
  %103 = getelementptr bfloat, ptr addrspace(1) %4, i64 %101, !dbg !24
  %104 = or disjoint i64 %.idx, %34, !dbg !25
  %105 = or disjoint i64 %.idx2, %34, !dbg !25
  %106 = getelementptr bfloat, ptr addrspace(1) %102, i64 %104, !dbg !25
  %107 = getelementptr bfloat, ptr addrspace(1) %102, i64 %105, !dbg !25
  %108 = shl nuw nsw i32 %28, 6, !dbg !25
  %109 = or disjoint i32 %108, %31, !dbg !25
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %109, !dbg !25
  %111 = or disjoint i32 %109, 2048, !dbg !25
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %111, !dbg !25
  %113 = select i1 %44, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %106, i32 %113) #2, !dbg !25
  %114 = select i1 %45, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %107, i32 %114) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %95
  %117 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408) to i32), 4
  %118 = and i32 %117, 16383
  %119 = zext nneg i32 %118 to i64
  %120 = or disjoint i64 %119, 4611686293338849280
  %121 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408) to i32), i32 32), 4
  %122 = and i32 %121, 16383
  %123 = zext nneg i32 %122 to i64
  %124 = or disjoint i64 %123, 4611686293338849280
  %125 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408) to i32), i32 64), 4
  %126 = and i32 %125, 16383
  %127 = zext nneg i32 %126 to i64
  %128 = or disjoint i64 %127, 4611686293338849280
  %129 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408) to i32), i32 96), 4
  %130 = and i32 %129, 16383
  %131 = zext nneg i32 %130 to i64
  %132 = or disjoint i64 %131, 4611686293338849280
  %133 = shl nuw nsw i32 %22, 6
  %134 = and i32 %133, 960
  %135 = lshr i32 %22, 1
  %136 = and i32 %135, 8
  %137 = or disjoint i32 %134, %136
  %138 = shl nuw nsw i32 %22, 5
  %139 = and i32 %138, 3072
  %140 = or disjoint i32 %137, %139
  %141 = and i32 %30, 504
  %142 = or disjoint i32 %84, %141
  %.reass = or disjoint i32 %142, %83
  %143 = lshr exact i32 %140, 3
  %144 = and i32 %143, 504
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %144
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %145, i32 %140
  %147 = lshr exact i32 %26, 1
  %148 = getelementptr inbounds nuw i8, ptr addrspace(3) %146, i32 %147
  %149 = ptrtoint ptr addrspace(3) %148 to i32
  %150 = getelementptr inbounds nuw i8, ptr addrspace(3) %148, i32 32
  %151 = ptrtoint ptr addrspace(3) %150 to i32
  %152 = lshr exact i32 %.reass, 3
  %153 = and i32 %152, 248
  %154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %153
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %154, i32 %.reass
  %156 = or disjoint i32 %.reass, 2048
  %157 = lshr exact i32 %156, 3
  %158 = and i32 %157, 504
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %158
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %159, i32 %156
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %109
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %111
  %163 = insertelement <8 x i16> poison, i16 %46, i64 0, !dbg !26
  %164 = bitcast <8 x i16> %163 to <8 x bfloat>, !dbg !26
  %165 = shufflevector <8 x bfloat> %164, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %166 = insertelement <8 x i16> poison, i16 %47, i64 0, !dbg !26
  %167 = bitcast <8 x i16> %166 to <8 x bfloat>, !dbg !26
  %168 = shufflevector <8 x bfloat> %167, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %169 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 4
  %170 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8
  %171 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 12
  br label %172, !dbg !27

172:                                              ; preds = %9, %172
  %173 = phi i1 [ true, %9 ], [ false, %172 ]
  %indvars.iv = phi i64 [ 64, %9 ], [ 128, %172 ]
  %174 = phi i1 [ %44, %9 ], [ %327, %172 ]
  %175 = phi i1 [ %45, %9 ], [ %328, %172 ]
  %176 = phi i64 [ %104, %9 ], [ %.reass83, %172 ]
  %177 = phi i64 [ %105, %9 ], [ %.reass99, %172 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %178 = load <8 x bfloat>, ptr addrspace(3) %161, align 16, !dbg !25
  %179 = fmul <8 x bfloat> %178, %165, !dbg !26
  %180 = load <8 x bfloat>, ptr addrspace(3) %162, align 16, !dbg !25
  %181 = fmul <8 x bfloat> %180, %168, !dbg !26
  store <8 x bfloat> %179, ptr addrspace(3) %115, align 16, !dbg !26
  store <8 x bfloat> %181, ptr addrspace(3) %116, align 16, !dbg !26
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !28
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !28
  %182 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !28
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !28
  %183 = shl i32 %182, 4, !dbg !28
  %184 = and i32 %183, 64, !dbg !28
  %185 = add i32 %184, ptrtoint (ptr addrspace(3) @global_smem to i32), !dbg !28
  %186 = lshr exact i32 %185, 4, !dbg !28
  %187 = and i32 %186, 16383, !dbg !28
  %188 = zext nneg i32 %187 to i64, !dbg !28
  %189 = or disjoint i64 %188, 4611686293338849280, !dbg !28
  %190 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %120, i64 %189) #2, !dbg !28
  %191 = add i32 %184, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 2048), !dbg !28
  %192 = lshr exact i32 %191, 4, !dbg !28
  %193 = and i32 %192, 16383, !dbg !28
  %194 = zext nneg i32 %193 to i64, !dbg !28
  %195 = or disjoint i64 %194, 4611686293338849280, !dbg !28
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 0, !dbg !28
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 1, !dbg !28
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 2, !dbg !28
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 3, !dbg !28
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 4, !dbg !28
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 5, !dbg !28
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 6, !dbg !28
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 7, !dbg !28
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 8, !dbg !28
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 9, !dbg !28
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 10, !dbg !28
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 11, !dbg !28
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 12, !dbg !28
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 13, !dbg !28
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 14, !dbg !28
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 15, !dbg !28
  %212 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, i64 %124, i64 %195, i1 true) #2, !dbg !28
  %213 = add i32 %184, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 4096), !dbg !28
  %214 = lshr exact i32 %213, 4, !dbg !28
  %215 = and i32 %214, 16383, !dbg !28
  %216 = zext nneg i32 %215 to i64, !dbg !28
  %217 = or disjoint i64 %216, 4611686293338849280, !dbg !28
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 0, !dbg !28
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 1, !dbg !28
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 2, !dbg !28
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 3, !dbg !28
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 4, !dbg !28
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 5, !dbg !28
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 6, !dbg !28
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 7, !dbg !28
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 8, !dbg !28
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 9, !dbg !28
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 10, !dbg !28
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 11, !dbg !28
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 12, !dbg !28
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 13, !dbg !28
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 14, !dbg !28
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %212, 15, !dbg !28
  %234 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, i64 %128, i64 %217, i1 true) #2, !dbg !28
  %235 = add i32 %184, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 6144), !dbg !28
  %236 = lshr exact i32 %235, 4, !dbg !28
  %237 = and i32 %236, 16383, !dbg !28
  %238 = zext nneg i32 %237 to i64, !dbg !28
  %239 = or disjoint i64 %238, 4611686293338849280, !dbg !28
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 0, !dbg !28
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 1, !dbg !28
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 2, !dbg !28
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 3, !dbg !28
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 4, !dbg !28
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 5, !dbg !28
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 6, !dbg !28
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 7, !dbg !28
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 8, !dbg !28
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 9, !dbg !28
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 10, !dbg !28
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 11, !dbg !28
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 12, !dbg !28
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 13, !dbg !28
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 14, !dbg !28
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %234, 15, !dbg !28
  %256 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, i64 %132, i64 %239, i1 true) #2, !dbg !28
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 0, !dbg !28
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 1, !dbg !28
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 2, !dbg !28
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 3, !dbg !28
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 4, !dbg !28
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 5, !dbg !28
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 6, !dbg !28
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 7, !dbg !28
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 8, !dbg !28
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 9, !dbg !28
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 10, !dbg !28
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 11, !dbg !28
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 12, !dbg !28
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 13, !dbg !28
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 14, !dbg !28
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 15, !dbg !28
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !28
  %273 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %257, float %258, float %259, float %260, float %261, float %262, float %263, float %264, float %265, float %266, float %267, float %268, float %269, float %270, float %271, float %272, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408), i32 0, i32 0, ptr addrspace(3) @global_smem, i32 0, i32 0) #2, !dbg !28
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 0, !dbg !28
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 1, !dbg !28
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 2, !dbg !28
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 3, !dbg !28
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 4, !dbg !28
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 5, !dbg !28
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 6, !dbg !28
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 7, !dbg !28
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 8, !dbg !28
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 9, !dbg !28
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 10, !dbg !28
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 11, !dbg !28
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 12, !dbg !28
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 13, !dbg !28
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 14, !dbg !28
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %273, 15, !dbg !28
  %290 = insertelement <2 x float> poison, float %274, i64 0, !dbg !29
  %291 = insertelement <2 x float> %290, float %275, i64 1, !dbg !29
  %292 = fptrunc <2 x float> %291 to <2 x bfloat>, !dbg !29
  %293 = insertelement <2 x float> poison, float %276, i64 0, !dbg !29
  %294 = insertelement <2 x float> %293, float %277, i64 1, !dbg !29
  %295 = fptrunc <2 x float> %294 to <2 x bfloat>, !dbg !29
  %296 = insertelement <2 x float> poison, float %278, i64 0, !dbg !29
  %297 = insertelement <2 x float> %296, float %279, i64 1, !dbg !29
  %298 = fptrunc <2 x float> %297 to <2 x bfloat>, !dbg !29
  %299 = insertelement <2 x float> poison, float %280, i64 0, !dbg !29
  %300 = insertelement <2 x float> %299, float %281, i64 1, !dbg !29
  %301 = fptrunc <2 x float> %300 to <2 x bfloat>, !dbg !29
  %302 = insertelement <2 x float> poison, float %282, i64 0, !dbg !29
  %303 = insertelement <2 x float> %302, float %283, i64 1, !dbg !29
  %304 = fptrunc <2 x float> %303 to <2 x bfloat>, !dbg !29
  %305 = insertelement <2 x float> poison, float %284, i64 0, !dbg !29
  %306 = insertelement <2 x float> %305, float %285, i64 1, !dbg !29
  %307 = fptrunc <2 x float> %306 to <2 x bfloat>, !dbg !29
  %308 = insertelement <2 x float> poison, float %286, i64 0, !dbg !29
  %309 = insertelement <2 x float> %308, float %287, i64 1, !dbg !29
  %310 = fptrunc <2 x float> %309 to <2 x bfloat>, !dbg !29
  %311 = insertelement <2 x float> poison, float %288, i64 0, !dbg !29
  %312 = insertelement <2 x float> %311, float %289, i64 1, !dbg !29
  %313 = fptrunc <2 x float> %312 to <2 x bfloat>, !dbg !29
  %314 = getelementptr bfloat, ptr addrspace(1) %103, i64 %176, !dbg !30
  %315 = getelementptr bfloat, ptr addrspace(1) %103, i64 %177, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %316 = bitcast <2 x bfloat> %292 to i32, !dbg !30
  %317 = bitcast <2 x bfloat> %295 to i32, !dbg !30
  %318 = bitcast <2 x bfloat> %298 to i32, !dbg !30
  %319 = bitcast <2 x bfloat> %301 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %149, i32 %316, i32 %317, i32 %318, i32 %319) #2, !dbg !30
  %320 = bitcast <2 x bfloat> %304 to i32, !dbg !30
  %321 = bitcast <2 x bfloat> %307 to i32, !dbg !30
  %322 = bitcast <2 x bfloat> %310 to i32, !dbg !30
  %323 = bitcast <2 x bfloat> %313 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %151, i32 %320, i32 %321, i32 %322, i32 %323) #2, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %324 = load <4 x i32>, ptr addrspace(3) %160, align 16, !dbg !30
  %.extract67 = load i32, ptr addrspace(3) %155, align 16, !dbg !30
  %.extract69 = load i32, ptr addrspace(3) %169, align 4, !dbg !30
  %.extract71 = load i32, ptr addrspace(3) %170, align 8, !dbg !30
  %.extract73 = load i32, ptr addrspace(3) %171, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract69, i32 %.extract71, i32 %.extract73, ptr addrspace(1) %314, i1 %174) #2, !dbg !30
  %.extract75 = extractelement <4 x i32> %324, i64 0, !dbg !30
  %.extract77 = extractelement <4 x i32> %324, i64 1, !dbg !30
  %.extract79 = extractelement <4 x i32> %324, i64 2, !dbg !30
  %.extract81 = extractelement <4 x i32> %324, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract77, i32 %.extract79, i32 %.extract81, ptr addrspace(1) %315, i1 %175) #2, !dbg !30
  %.reass83 = or disjoint i64 %104, %indvars.iv
  %.reass99 = or disjoint i64 %105, %indvars.iv
  %325 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass83, !dbg !25
  %326 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass99, !dbg !25
  %327 = and i1 %44, %173, !dbg !25
  %328 = and i1 %45, %173, !dbg !25
  %329 = select i1 %327, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %325, i32 %329) #2, !dbg !25
  %330 = select i1 %328, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %326, i32 %330) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  br i1 %173, label %172, label %331, !dbg !27

331:                                              ; preds = %172
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %332 = sext i32 %48 to i64, !dbg !31
  %333 = getelementptr float, ptr addrspace(1) %6, i64 %332, !dbg !31
  %334 = getelementptr float, ptr addrspace(1) %333, i64 %37, !dbg !32
  %335 = getelementptr float, ptr addrspace(1) %333, i64 %38, !dbg !32
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %44) #2, !dbg !32
  %337 = bitcast i32 %336 to float, !dbg !32
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %45) #2, !dbg !32
  %339 = bitcast i32 %338 to float, !dbg !32
  %340 = fmul float %337, 0x3FF7154760000000, !dbg !33
  %341 = tail call float @llvm.nvvm.ex2.approx.f(float %340), !dbg !33
  %342 = fmul float %339, 0x3FF7154760000000, !dbg !33
  %343 = tail call float @llvm.nvvm.ex2.approx.f(float %342), !dbg !33
  %344 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !34
  %345 = getelementptr bfloat, ptr addrspace(1) %3, i64 %101, !dbg !35
  %346 = getelementptr bfloat, ptr addrspace(1) %344, i64 %104, !dbg !36
  %347 = getelementptr bfloat, ptr addrspace(1) %344, i64 %105, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %346, i32 %113) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %347, i32 %114) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %109
  %349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9216), i32 %111
  %350 = insertelement <8 x float> poison, float %341, i64 0, !dbg !37
  %351 = shufflevector <8 x float> %350, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %352 = insertelement <8 x float> poison, float %343, i64 0, !dbg !37
  %353 = shufflevector <8 x float> %352, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %354 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 4
  %355 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8
  %356 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 12
  br label %357, !dbg !38

357:                                              ; preds = %331, %357
  %358 = phi i1 [ true, %331 ], [ false, %357 ]
  %indvars.iv148 = phi i64 [ 64, %331 ], [ 128, %357 ]
  %359 = phi i1 [ %44, %331 ], [ %518, %357 ]
  %360 = phi i1 [ %45, %331 ], [ %519, %357 ]
  %361 = phi i64 [ %104, %331 ], [ %.reass117, %357 ]
  %362 = phi i64 [ %105, %331 ], [ %.reass133, %357 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %363 = load <8 x bfloat>, ptr addrspace(3) %348, align 16, !dbg !36
  %364 = fmul <8 x bfloat> %363, %165, !dbg !39
  %365 = fpext <8 x bfloat> %364 to <8 x float>, !dbg !37
  %366 = fmul <8 x float> %351, %365, !dbg !37
  %367 = fptrunc <8 x float> %366 to <8 x bfloat>, !dbg !40
  %368 = load <8 x bfloat>, ptr addrspace(3) %349, align 16, !dbg !36
  %369 = fmul <8 x bfloat> %368, %168, !dbg !39
  %370 = fpext <8 x bfloat> %369 to <8 x float>, !dbg !37
  %371 = fmul <8 x float> %353, %370, !dbg !37
  %372 = fptrunc <8 x float> %371 to <8 x bfloat>, !dbg !40
  store <8 x bfloat> %367, ptr addrspace(3) %115, align 16, !dbg !40
  store <8 x bfloat> %372, ptr addrspace(3) %116, align 16, !dbg !40
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %373 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !41
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !41
  %374 = shl i32 %373, 4, !dbg !41
  %375 = and i32 %374, 64, !dbg !41
  %376 = add i32 %375, ptrtoint (ptr addrspace(3) @global_smem to i32), !dbg !41
  %377 = lshr exact i32 %376, 4, !dbg !41
  %378 = and i32 %377, 16383, !dbg !41
  %379 = zext nneg i32 %378 to i64, !dbg !41
  %380 = or disjoint i64 %379, 4611686293338849280, !dbg !41
  %381 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %120, i64 %380) #2, !dbg !41
  %382 = add i32 %375, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 2048), !dbg !41
  %383 = lshr exact i32 %382, 4, !dbg !41
  %384 = and i32 %383, 16383, !dbg !41
  %385 = zext nneg i32 %384 to i64, !dbg !41
  %386 = or disjoint i64 %385, 4611686293338849280, !dbg !41
  %387 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 0, !dbg !41
  %388 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 1, !dbg !41
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 2, !dbg !41
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 3, !dbg !41
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 4, !dbg !41
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 5, !dbg !41
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 6, !dbg !41
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 7, !dbg !41
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 8, !dbg !41
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 9, !dbg !41
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 10, !dbg !41
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 11, !dbg !41
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 12, !dbg !41
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 13, !dbg !41
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 14, !dbg !41
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %381, 15, !dbg !41
  %403 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %387, float %388, float %389, float %390, float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, float %402, i64 %124, i64 %386, i1 true) #2, !dbg !41
  %404 = add i32 %375, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 4096), !dbg !41
  %405 = lshr exact i32 %404, 4, !dbg !41
  %406 = and i32 %405, 16383, !dbg !41
  %407 = zext nneg i32 %406 to i64, !dbg !41
  %408 = or disjoint i64 %407, 4611686293338849280, !dbg !41
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 0, !dbg !41
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 1, !dbg !41
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 2, !dbg !41
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 3, !dbg !41
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 4, !dbg !41
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 5, !dbg !41
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 6, !dbg !41
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 7, !dbg !41
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 8, !dbg !41
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 9, !dbg !41
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 10, !dbg !41
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 11, !dbg !41
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 12, !dbg !41
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 13, !dbg !41
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 14, !dbg !41
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %403, 15, !dbg !41
  %425 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %409, float %410, float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, i64 %128, i64 %408, i1 true) #2, !dbg !41
  %426 = add i32 %375, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 6144), !dbg !41
  %427 = lshr exact i32 %426, 4, !dbg !41
  %428 = and i32 %427, 16383, !dbg !41
  %429 = zext nneg i32 %428 to i64, !dbg !41
  %430 = or disjoint i64 %429, 4611686293338849280, !dbg !41
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 0, !dbg !41
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 1, !dbg !41
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 2, !dbg !41
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 3, !dbg !41
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 4, !dbg !41
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 5, !dbg !41
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 6, !dbg !41
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 7, !dbg !41
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 8, !dbg !41
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 9, !dbg !41
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 10, !dbg !41
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 11, !dbg !41
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 12, !dbg !41
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 13, !dbg !41
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 14, !dbg !41
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 15, !dbg !41
  %447 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, float %443, float %444, float %445, float %446, i64 %132, i64 %430, i1 true) #2, !dbg !41
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 0, !dbg !41
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 1, !dbg !41
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 2, !dbg !41
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 3, !dbg !41
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 4, !dbg !41
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 5, !dbg !41
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 6, !dbg !41
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 7, !dbg !41
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 8, !dbg !41
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 9, !dbg !41
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 10, !dbg !41
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 11, !dbg !41
  %460 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 12, !dbg !41
  %461 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 13, !dbg !41
  %462 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 14, !dbg !41
  %463 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 15, !dbg !41
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !41
  %464 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458, float %459, float %460, float %461, float %462, float %463, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 17408), i32 0, i32 0, ptr addrspace(3) @global_smem, i32 0, i32 0) #2, !dbg !41
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 0, !dbg !41
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 1, !dbg !41
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 2, !dbg !41
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 3, !dbg !41
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 4, !dbg !41
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 5, !dbg !41
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 6, !dbg !41
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 7, !dbg !41
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 8, !dbg !41
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 9, !dbg !41
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 10, !dbg !41
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 11, !dbg !41
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 12, !dbg !41
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 13, !dbg !41
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 14, !dbg !41
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %464, 15, !dbg !41
  %481 = insertelement <2 x float> poison, float %465, i64 0, !dbg !42
  %482 = insertelement <2 x float> %481, float %466, i64 1, !dbg !42
  %483 = fptrunc <2 x float> %482 to <2 x bfloat>, !dbg !42
  %484 = insertelement <2 x float> poison, float %467, i64 0, !dbg !42
  %485 = insertelement <2 x float> %484, float %468, i64 1, !dbg !42
  %486 = fptrunc <2 x float> %485 to <2 x bfloat>, !dbg !42
  %487 = insertelement <2 x float> poison, float %469, i64 0, !dbg !42
  %488 = insertelement <2 x float> %487, float %470, i64 1, !dbg !42
  %489 = fptrunc <2 x float> %488 to <2 x bfloat>, !dbg !42
  %490 = insertelement <2 x float> poison, float %471, i64 0, !dbg !42
  %491 = insertelement <2 x float> %490, float %472, i64 1, !dbg !42
  %492 = fptrunc <2 x float> %491 to <2 x bfloat>, !dbg !42
  %493 = insertelement <2 x float> poison, float %473, i64 0, !dbg !42
  %494 = insertelement <2 x float> %493, float %474, i64 1, !dbg !42
  %495 = fptrunc <2 x float> %494 to <2 x bfloat>, !dbg !42
  %496 = insertelement <2 x float> poison, float %475, i64 0, !dbg !42
  %497 = insertelement <2 x float> %496, float %476, i64 1, !dbg !42
  %498 = fptrunc <2 x float> %497 to <2 x bfloat>, !dbg !42
  %499 = insertelement <2 x float> poison, float %477, i64 0, !dbg !42
  %500 = insertelement <2 x float> %499, float %478, i64 1, !dbg !42
  %501 = fptrunc <2 x float> %500 to <2 x bfloat>, !dbg !42
  %502 = insertelement <2 x float> poison, float %479, i64 0, !dbg !42
  %503 = insertelement <2 x float> %502, float %480, i64 1, !dbg !42
  %504 = fptrunc <2 x float> %503 to <2 x bfloat>, !dbg !42
  %505 = getelementptr bfloat, ptr addrspace(1) %345, i64 %361, !dbg !43
  %506 = getelementptr bfloat, ptr addrspace(1) %345, i64 %362, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %507 = bitcast <2 x bfloat> %483 to i32, !dbg !43
  %508 = bitcast <2 x bfloat> %486 to i32, !dbg !43
  %509 = bitcast <2 x bfloat> %489 to i32, !dbg !43
  %510 = bitcast <2 x bfloat> %492 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %149, i32 %507, i32 %508, i32 %509, i32 %510) #2, !dbg !43
  %511 = bitcast <2 x bfloat> %495 to i32, !dbg !43
  %512 = bitcast <2 x bfloat> %498 to i32, !dbg !43
  %513 = bitcast <2 x bfloat> %501 to i32, !dbg !43
  %514 = bitcast <2 x bfloat> %504 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %151, i32 %511, i32 %512, i32 %513, i32 %514) #2, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %515 = load <4 x i32>, ptr addrspace(3) %160, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %155, align 16, !dbg !43
  %.extract53 = load i32, ptr addrspace(3) %354, align 4, !dbg !43
  %.extract55 = load i32, ptr addrspace(3) %355, align 8, !dbg !43
  %.extract57 = load i32, ptr addrspace(3) %356, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract53, i32 %.extract55, i32 %.extract57, ptr addrspace(1) %505, i1 %359) #2, !dbg !43
  %.extract59 = extractelement <4 x i32> %515, i64 0, !dbg !43
  %.extract61 = extractelement <4 x i32> %515, i64 1, !dbg !43
  %.extract63 = extractelement <4 x i32> %515, i64 2, !dbg !43
  %.extract65 = extractelement <4 x i32> %515, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract59, i32 %.extract61, i32 %.extract63, i32 %.extract65, ptr addrspace(1) %506, i1 %360) #2, !dbg !43
  %.reass117 = or disjoint i64 %104, %indvars.iv148
  %.reass133 = or disjoint i64 %105, %indvars.iv148
  %516 = getelementptr bfloat, ptr addrspace(1) %344, i64 %.reass117, !dbg !36
  %517 = getelementptr bfloat, ptr addrspace(1) %344, i64 %.reass133, !dbg !36
  %518 = and i1 %44, %358, !dbg !36
  %519 = and i1 %45, %358, !dbg !36
  %520 = select i1 %518, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %516, i32 %520) #2, !dbg !36
  %521 = select i1 %519, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %517, i32 %521) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  br i1 %358, label %357, label %522, !dbg !38

522:                                              ; preds = %357
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 177, column: 41, scope: !5)
!19 = !DILocation(line: 177, column: 48, scope: !5)
!20 = !DILocation(line: 177, column: 32, scope: !5)
!21 = !DILocation(line: 178, column: 18, scope: !5)
!22 = !DILocation(line: 181, column: 52, scope: !5)
!23 = !DILocation(line: 181, column: 36, scope: !5)
!24 = !DILocation(line: 182, column: 36, scope: !5)
!25 = !DILocation(line: 183, column: 22, scope: !5)
!26 = !DILocation(line: 184, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 185, column: 26, scope: !5)
!29 = !DILocation(line: 186, column: 29, scope: !5)
!30 = !DILocation(line: 186, column: 22, scope: !5)
!31 = !DILocation(line: 189, column: 37, scope: !5)
!32 = !DILocation(line: 190, column: 26, scope: !5)
!33 = !DILocation(line: 190, column: 18, scope: !5)
!34 = !DILocation(line: 193, column: 36, scope: !5)
!35 = !DILocation(line: 194, column: 36, scope: !5)
!36 = !DILocation(line: 195, column: 22, scope: !5)
!37 = !DILocation(line: 198, column: 20, scope: !5)
!38 = !DILocation(line: 192, column: 21, scope: !5)
!39 = !DILocation(line: 196, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
