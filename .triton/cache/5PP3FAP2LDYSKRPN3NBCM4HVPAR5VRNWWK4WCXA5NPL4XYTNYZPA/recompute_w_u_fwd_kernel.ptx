//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 256
{
	.reg .pred 	%p<42>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<579>;
	.reg .b64 	%rd<125>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd26, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd25, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd24, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd34, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r49, %ctaid.x;
	ld.param.b64 	%rd35, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r50, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r51, %r50, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r52, %r50, 31;
	ld.param.b64 	%rd36, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r53, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r54, %r51, %r53;
	ld.param.b64 	%rd37, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd38, %r54, 2;
	add.s64 	%rd39, %rd35, %rd38;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd40, %r52, 2;
	add.s64 	%rd41, %rd39, %rd40;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r55, %r49, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd42, %r53;
	cvt.s64.s32 	%rd43, %r55;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r56, %tid.x;
	shr.u32 	%r1, %r56, 5;
	bfe.s32 	%r57, %r56, 5, 1;
	and.b32 	%r58, %r56, 128;
	bfe.u32 	%r59, %r56, 3, 5;
	or.b32 	%r60, %r59, 32;
	shl.b32 	%r61, %r56, 3;
	and.b32 	%r62, %r61, 56;
	cvt.u64.u32 	%rd44, %r59;
	cvt.u64.u32 	%rd45, %r60;
	cvt.u64.u32 	%rd46, %r62;
	or.b64 	%rd47, %rd44, %rd43;
	or.b64 	%rd48, %rd45, %rd43;
	shl.b64 	%rd1, %rd47, 5;
	shl.b64 	%rd2, %rd48, 5;
	shl.b64 	%rd49, %rd47, 6;
	add.s64 	%rd27, %rd41, %rd49;
	shl.b64 	%rd50, %rd48, 6;
	add.s64 	%rd28, %rd41, %rd50;
	setp.gt.s32 	%p18, %r55, -1;
	setp.lt.s64 	%p19, %rd47, %rd42;
	setp.lt.s64 	%p20, %rd48, %rd42;
	and.pred 	%p27, %p18, %p19;
	mov.pred 	%p40, %p27;
	and.pred 	%p28, %p18, %p20;
	mov.pred 	%p41, %p28;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p40 ld.global.b16 { %rs1 }, [ %rd27 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p41 ld.global.b16 { %rs2 }, [ %rd28 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r54, %r52;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r63, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd51, %r63, 2;
	add.s64 	%rd52, %rd37, %rd51;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd53, %rd47, 12;
	add.s64 	%rd54, %rd52, %rd53;
	mul.wide.u32 	%rd55, %r62, 2;
	add.s64 	%rd29, %rd54, %rd55;
	shl.b64 	%rd56, %rd48, 12;
	add.s64 	%rd57, %rd52, %rd56;
	add.s64 	%rd30, %rd57, %rd55;
	// begin inline asm
	mov.u32 %r37, 0x0;
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	@%p27 ld.global.v4.b32 { %r37, %r38, %r39, %r40 }, [ %rd29 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r41, 0x0;
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	@%p28 ld.global.v4.b32 { %r41, %r42, %r43, %r44 }, [ %rd30 + 0 ];
	// end inline asm
	and.b32 	%r64, %r57, 288;
	and.b32 	%r65, %r56, 24;
	mul.lo.s32 	%r66, %r65, 9;
	xor.b32 	%r67, %r66, %r62;
	xor.b32 	%r68, %r67, %r64;
	and.b32 	%r69, %r61, 512;
	shl.b32 	%r70, %r58, 3;
	or.b32 	%r71, %r69, %r68;
	or.b32 	%r72, %r71, %r70;
	shl.b32 	%r73, %r72, 1;
	mov.b32 	%r74, global_smem;
	add.s32 	%r75, %r74, 17408;
	add.s32 	%r76, %r75, %r73;
	st.shared.v4.b32 	[%r76], {%r37, %r38, %r39, %r40};
	or.b32 	%r77, %r62, 2048;
	xor.b32 	%r78, %r66, %r77;
	xor.b32 	%r79, %r78, %r64;
	or.b32 	%r80, %r79, %r69;
	or.b32 	%r81, %r80, %r70;
	shl.b32 	%r82, %r81, 1;
	add.s32 	%r83, %r75, %r82;
	st.shared.v4.b32 	[%r83], {%r41, %r42, %r43, %r44};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r84, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd3, %r84;
	mul.wide.s32 	%rd58, %r84, 2;
	add.s64 	%rd4, %rd34, %rd58;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd5, %rd36, %rd58;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd6, %rd53, %rd46;
	or.b64 	%rd7, %rd56, %rd46;
	shl.b64 	%rd59, %rd6, 1;
	add.s64 	%rd31, %rd4, %rd59;
	shl.b64 	%rd60, %rd7, 1;
	add.s64 	%rd32, %rd4, %rd60;
	shl.b32 	%r85, %r59, 7;
	shl.b32 	%r86, %r62, 1;
	or.b32 	%r87, %r85, %r86;
	add.s32 	%r88, %r74, %r87;
	add.s32 	%r45, %r88, 9216;
	add.s32 	%r47, %r88, 13312;
	selp.b32 	%r329, 16, 0, %p27;
	// begin inline asm
	cp.async.cg.shared.global [ %r45 + 0 ], [ %rd31 + 0 ], 0x10, %r329;
	// end inline asm
	selp.b32 	%r331, 16, 0, %p28;
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd32 + 0 ], 0x10, %r331;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r7, %r74, %r73;
	add.s32 	%r8, %r74, %r82;
	bfe.u32 	%r89, %r75, 4, 14;
	cvt.u64.u32 	%rd61, %r89;
	or.b64 	%rd98, %rd61, 4611686293338849280;
	add.s32 	%r90, %r74, 17440;
	bfe.u32 	%r91, %r90, 4, 14;
	cvt.u64.u32 	%rd62, %r91;
	or.b64 	%rd100, %rd62, 4611686293338849280;
	add.s32 	%r92, %r74, 17472;
	bfe.u32 	%r93, %r92, 4, 14;
	cvt.u64.u32 	%rd63, %r93;
	or.b64 	%rd102, %rd63, 4611686293338849280;
	add.s32 	%r94, %r74, 17504;
	bfe.u32 	%r95, %r94, 4, 14;
	cvt.u64.u32 	%rd64, %r95;
	or.b64 	%rd104, %rd64, 4611686293338849280;
	shl.b32 	%r96, %r56, 6;
	and.b32 	%r97, %r96, 960;
	shr.u32 	%r98, %r56, 1;
	and.b32 	%r99, %r98, 8;
	or.b32 	%r100, %r97, %r99;
	shl.b32 	%r101, %r56, 5;
	and.b32 	%r102, %r101, 3072;
	or.b32 	%r103, %r100, %r102;
	and.b32 	%r104, %r61, 504;
	or.b32 	%r105, %r70, %r104;
	or.b32 	%r106, %r105, %r69;
	shr.u32 	%r107, %r103, 2;
	and.b32 	%r108, %r107, 1008;
	add.s32 	%r109, %r74, %r108;
	shl.b32 	%r110, %r103, 1;
	add.s32 	%r111, %r109, %r110;
	shr.u32 	%r112, %r58, 1;
	add.s32 	%r490, %r111, %r112;
	add.s32 	%r495, %r490, 32;
	shr.u32 	%r113, %r106, 2;
	and.b32 	%r114, %r113, 496;
	add.s32 	%r115, %r74, %r114;
	shl.b32 	%r116, %r106, 1;
	add.s32 	%r11, %r115, %r116;
	or.b32 	%r117, %r106, 2048;
	shr.u32 	%r118, %r117, 2;
	and.b32 	%r119, %r118, 1008;
	add.s32 	%r120, %r74, %r119;
	add.s32 	%r12, %r120, %r116;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r15, {%rs1, %rs1};
	mov.b32 	%r19, {%rs2, %rs2};
	mov.b64 	%rd119, 64;
	mov.pred 	%p21, -1;
	mov.pred 	%p36, %p21;
	mov.pred 	%p37, %p40;
	mov.pred 	%p38, %p41;
	mov.b64 	%rd120, %rd6;
	mov.b64 	%rd121, %rd7;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.pred 	%p3, %p36;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r299, %r300, %r301, %r302}, [%r45];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r303, %r301, %r15;
	mul.bf16x2 	%r304, %r300, %r15;
	mul.bf16x2 	%r305, %r299, %r15;
	mul.bf16x2 	%r306, %r302, %r15;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r307, %r308, %r309, %r310}, [%r45+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r311, %r309, %r19;
	mul.bf16x2 	%r312, %r308, %r19;
	mul.bf16x2 	%r313, %r307, %r19;
	mul.bf16x2 	%r314, %r310, %r19;
	st.shared.v4.b32 	[%r7], {%r305, %r304, %r303, %r306};
	st.shared.v4.b32 	[%r8], {%r313, %r312, %r311, %r314};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r315, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r316, %r315, 4;
	and.b32 	%r317, %r316, 64;
	add.s32 	%r318, %r317, %r74;
	bfe.u32 	%r319, %r318, 4, 14;
	cvt.u64.u32 	%rd78, %r319;
	or.b64 	%rd66, %rd78, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184}, %rd98, %rd66, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r320, %r318, 2048;
	bfe.u32 	%r321, %r320, 4, 14;
	cvt.u64.u32 	%rd79, %r321;
	or.b64 	%rd68, %rd79, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184}, %rd100, %rd68, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r322, %r318, 4096;
	bfe.u32 	%r323, %r322, 4, 14;
	cvt.u64.u32 	%rd80, %r323;
	or.b64 	%rd70, %rd80, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184}, %rd102, %rd70, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r324, %r318, 6144;
	bfe.u32 	%r325, %r324, 4, 14;
	cvt.u64.u32 	%rd81, %r325;
	or.b64 	%rd72, %rd81, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184}, %rd104, %rd72, %p21, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r254, 0;
	mov.b32 	%r249, %r75;
	mov.b32 	%r250, %r254;
	mov.b32 	%r251, %r254;
	mov.b32 	%r253, %r254;
	mov.b32 	%r252, %r74;
	// begin inline asm
	// wait for regs: %r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r249,%r250,%r251,%r252,%r253,%r254
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r278, %r170, %r169;
	cvt.rn.bf16x2.f32 	%r279, %r172, %r171;
	cvt.rn.bf16x2.f32 	%r280, %r174, %r173;
	cvt.rn.bf16x2.f32 	%r281, %r176, %r175;
	cvt.rn.bf16x2.f32 	%r283, %r178, %r177;
	cvt.rn.bf16x2.f32 	%r284, %r180, %r179;
	cvt.rn.bf16x2.f32 	%r285, %r182, %r181;
	cvt.rn.bf16x2.f32 	%r286, %r184, %r183;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd82, %rd120, 1;
	add.s64 	%rd73, %rd5, %rd82;
	shl.b64 	%rd83, %rd121, 1;
	add.s64 	%rd74, %rd5, %rd83;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r490], {%r278, %r279, %r280, %r281};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r495], {%r283, %r284, %r285, %r286};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r291, %r292, %r293, %r294}, [%r12+4096];
	ld.shared.v4.b32 	{%r287, %r288, %r289, %r290}, [%r11];
	// begin inline asm
	@%p37 st.global.v4.b32 [ %rd73 + 0 ], { %r287, %r288, %r289, %r290 };
	// end inline asm
	// begin inline asm
	@%p38 st.global.v4.b32 [ %rd74 + 0 ], { %r291, %r292, %r293, %r294 };
	// end inline asm
	or.b64 	%rd120, %rd6, %rd119;
	or.b64 	%rd121, %rd7, %rd119;
	.loc	1 183 22                        // wy_fast.py:183:22
	shl.b64 	%rd84, %rd120, 1;
	add.s64 	%rd75, %rd4, %rd84;
	shl.b64 	%rd85, %rd121, 1;
	add.s64 	%rd76, %rd4, %rd85;
	and.pred 	%p37, %p27, %p3;
	and.pred 	%p38, %p28, %p3;
	selp.b32 	%r296, 16, 0, %p37;
	// begin inline asm
	cp.async.cg.shared.global [ %r45 + 0 ], [ %rd75 + 0 ], 0x10, %r296;
	// end inline asm
	selp.b32 	%r298, 16, 0, %p38;
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd76 + 0 ], 0x10, %r298;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd119, 128;
	mov.pred 	%p36, 0;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p3 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd91, %r2, 4;
	add.s64 	%rd92, %rd26, %rd91;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd93, %rd1, 2;
	add.s64 	%rd86, %rd92, %rd93;
	shl.b64 	%rd94, %rd2, 2;
	add.s64 	%rd87, %rd92, %rd94;
	// begin inline asm
	mov.u32 %r326, 0x0;
	@%p27 ld.global.b32 { %r326 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r327, 0x0;
	@%p28 ld.global.b32 { %r327 }, [ %rd87 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r332, %r326, 0f3FB8AA3B;
	ex2.approx.f32 	%r21, %r332;
	mul.f32 	%r333, %r327, 0f3FB8AA3B;
	ex2.approx.f32 	%r29, %r333;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd95, %rd3, 1;
	add.s64 	%rd17, %rd24, %rd95;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd18, %rd25, %rd95;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd88, %rd17, %rd59;
	add.s64 	%rd89, %rd17, %rd60;
	// begin inline asm
	cp.async.cg.shared.global [ %r45 + 0 ], [ %rd88 + 0 ], 0x10, %r329;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd89 + 0 ], 0x10, %r331;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd122, 64;
	mov.pred 	%p30, -1;
	mov.pred 	%p39, %p30;
	mov.b64 	%rd123, %rd6;
	mov.b64 	%rd124, %rd7;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.pred 	%p8, %p39;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r512, %r513, %r514, %r515}, [%r45];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r516, %r515, %r15;
	mul.bf16x2 	%r517, %r512, %r15;
	mul.bf16x2 	%r518, %r513, %r15;
	mul.bf16x2 	%r519, %r514, %r15;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs3, %rs4}, %r519;
	cvt.f32.bf16 	%r520, %rs4;
	cvt.f32.bf16 	%r521, %rs3;
	mov.b32 	{%rs5, %rs6}, %r518;
	cvt.f32.bf16 	%r522, %rs6;
	cvt.f32.bf16 	%r523, %rs5;
	mov.b32 	{%rs7, %rs8}, %r517;
	cvt.f32.bf16 	%r524, %rs8;
	cvt.f32.bf16 	%r525, %rs7;
	mov.b32 	{%rs9, %rs10}, %r516;
	cvt.f32.bf16 	%r526, %rs10;
	cvt.f32.bf16 	%r527, %rs9;
	mul.f32 	%r528, %r21, %r527;
	mul.f32 	%r529, %r21, %r526;
	mul.f32 	%r530, %r21, %r525;
	mul.f32 	%r531, %r21, %r524;
	mul.f32 	%r532, %r21, %r523;
	mul.f32 	%r533, %r21, %r522;
	mul.f32 	%r534, %r21, %r521;
	mul.f32 	%r535, %r21, %r520;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r536, %r535, %r534;
	cvt.rn.bf16x2.f32 	%r537, %r533, %r532;
	cvt.rn.bf16x2.f32 	%r538, %r531, %r530;
	cvt.rn.bf16x2.f32 	%r539, %r529, %r528;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r540, %r541, %r542, %r543}, [%r45+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r544, %r543, %r19;
	mul.bf16x2 	%r545, %r540, %r19;
	mul.bf16x2 	%r546, %r541, %r19;
	mul.bf16x2 	%r547, %r542, %r19;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs11, %rs12}, %r547;
	cvt.f32.bf16 	%r548, %rs12;
	cvt.f32.bf16 	%r549, %rs11;
	mov.b32 	{%rs13, %rs14}, %r546;
	cvt.f32.bf16 	%r550, %rs14;
	cvt.f32.bf16 	%r551, %rs13;
	mov.b32 	{%rs15, %rs16}, %r545;
	cvt.f32.bf16 	%r552, %rs16;
	cvt.f32.bf16 	%r553, %rs15;
	mov.b32 	{%rs17, %rs18}, %r544;
	cvt.f32.bf16 	%r554, %rs18;
	cvt.f32.bf16 	%r555, %rs17;
	mul.f32 	%r556, %r29, %r555;
	mul.f32 	%r557, %r29, %r554;
	mul.f32 	%r558, %r29, %r553;
	mul.f32 	%r559, %r29, %r552;
	mul.f32 	%r560, %r29, %r551;
	mul.f32 	%r561, %r29, %r550;
	mul.f32 	%r562, %r29, %r549;
	mul.f32 	%r563, %r29, %r548;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r564, %r563, %r562;
	cvt.rn.bf16x2.f32 	%r565, %r561, %r560;
	cvt.rn.bf16x2.f32 	%r566, %r559, %r558;
	cvt.rn.bf16x2.f32 	%r567, %r557, %r556;
	st.shared.v4.b32 	[%r7], {%r538, %r537, %r536, %r539};
	st.shared.v4.b32 	[%r8], {%r566, %r565, %r564, %r567};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r568, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r569, %r568, 4;
	and.b32 	%r570, %r569, 64;
	add.s32 	%r571, %r570, %r74;
	bfe.u32 	%r572, %r571, 4, 14;
	cvt.u64.u32 	%rd111, %r572;
	or.b64 	%rd99, %rd111, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r382,%r383,%r384,%r385,%r386,%r387,%r388,%r389,%r390,%r391,%r392,%r393,%r394,%r395,%r396,%r397}, %rd98, %rd99, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r573, %r571, 2048;
	bfe.u32 	%r574, %r573, 4, 14;
	cvt.u64.u32 	%rd112, %r574;
	or.b64 	%rd101, %rd112, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r382,%r383,%r384,%r385,%r386,%r387,%r388,%r389,%r390,%r391,%r392,%r393,%r394,%r395,%r396,%r397}, %rd100, %rd101, %p30, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r575, %r571, 4096;
	bfe.u32 	%r576, %r575, 4, 14;
	cvt.u64.u32 	%rd113, %r576;
	or.b64 	%rd103, %rd113, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r382,%r383,%r384,%r385,%r386,%r387,%r388,%r389,%r390,%r391,%r392,%r393,%r394,%r395,%r396,%r397}, %rd102, %rd103, %p30, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r577, %r571, 6144;
	bfe.u32 	%r578, %r577, 4, 14;
	cvt.u64.u32 	%rd114, %r578;
	or.b64 	%rd105, %rd114, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r382,%r383,%r384,%r385,%r386,%r387,%r388,%r389,%r390,%r391,%r392,%r393,%r394,%r395,%r396,%r397}, %rd104, %rd105, %p30, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r463, 0;
	mov.b32 	%r464, %r463;
	mov.b32 	%r466, %r463;
	mov.b32 	%r462, %r75;
	mov.b32 	%r467, %r463;
	mov.b32 	%r465, %r74;
	// begin inline asm
	// wait for regs: %r382,%r383,%r384,%r385,%r386,%r387,%r388,%r389,%r390,%r391,%r392,%r393,%r394,%r395,%r396,%r397,%r462,%r463,%r464,%r465,%r466,%r467
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r491, %r383, %r382;
	cvt.rn.bf16x2.f32 	%r492, %r385, %r384;
	cvt.rn.bf16x2.f32 	%r493, %r387, %r386;
	cvt.rn.bf16x2.f32 	%r494, %r389, %r388;
	cvt.rn.bf16x2.f32 	%r496, %r391, %r390;
	cvt.rn.bf16x2.f32 	%r497, %r393, %r392;
	cvt.rn.bf16x2.f32 	%r498, %r395, %r394;
	cvt.rn.bf16x2.f32 	%r499, %r397, %r396;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd115, %rd123, 1;
	add.s64 	%rd106, %rd18, %rd115;
	shl.b64 	%rd116, %rd124, 1;
	add.s64 	%rd107, %rd18, %rd116;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r490], {%r491, %r492, %r493, %r494};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r495], {%r496, %r497, %r498, %r499};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r504, %r505, %r506, %r507}, [%r12+4096];
	ld.shared.v4.b32 	{%r500, %r501, %r502, %r503}, [%r11];
	// begin inline asm
	@%p40 st.global.v4.b32 [ %rd106 + 0 ], { %r500, %r501, %r502, %r503 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd107 + 0 ], { %r504, %r505, %r506, %r507 };
	// end inline asm
	or.b64 	%rd123, %rd6, %rd122;
	or.b64 	%rd124, %rd7, %rd122;
	.loc	1 195 22                        // wy_fast.py:195:22
	shl.b64 	%rd117, %rd123, 1;
	add.s64 	%rd108, %rd17, %rd117;
	shl.b64 	%rd118, %rd124, 1;
	add.s64 	%rd109, %rd17, %rd118;
	and.pred 	%p40, %p27, %p8;
	and.pred 	%p41, %p28, %p8;
	selp.b32 	%r509, 16, 0, %p40;
	// begin inline asm
	cp.async.cg.shared.global [ %r45 + 0 ], [ %rd108 + 0 ], 0x10, %r509;
	// end inline asm
	selp.b32 	%r511, 16, 0, %p41;
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd109 + 0 ], 0x10, %r511;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd122, 128;
	mov.pred 	%p39, 0;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p8 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
