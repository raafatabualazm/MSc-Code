; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 5, !dbg !17
  %24 = and i32 %22, 32, !dbg !17
  %25 = icmp eq i32 %24, 0, !dbg !17
  %26 = and i32 %22, 128, !dbg !17
  %27 = lshr i32 %22, 3, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %28, 32, !dbg !17
  %30 = shl nuw nsw i32 %22, 3, !dbg !17
  %31 = and i32 %30, 56, !dbg !17
  %32 = zext nneg i32 %28 to i64, !dbg !17
  %33 = zext nneg i32 %29 to i64, !dbg !17
  %34 = zext nneg i32 %31 to i64, !dbg !17
  %35 = or disjoint i64 %32, %21, !dbg !17
  %36 = or disjoint i64 %33, %21, !dbg !17
  %37 = shl nsw i64 %35, 5, !dbg !17
  %38 = shl nsw i64 %36, 5, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %18, i64 %37, !dbg !17
  %40 = getelementptr bfloat, ptr addrspace(1) %18, i64 %38, !dbg !17
  %41 = icmp sgt i32 %19, -1, !dbg !17
  %42 = icmp slt i64 %35, %20, !dbg !17
  %43 = icmp slt i64 %36, %20, !dbg !17
  %44 = and i1 %41, %42, !dbg !17
  %45 = and i1 %41, %43, !dbg !17
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 %44) #2, !dbg !17
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %45) #2, !dbg !17
  %48 = or disjoint i32 %14, %13, !dbg !18
  %49 = shl i32 %48, 6, !dbg !19
  %50 = sext i32 %49 to i64, !dbg !20
  %51 = getelementptr bfloat, ptr addrspace(1) %5, i64 %50, !dbg !20
  %.idx = shl nsw i64 %35, 12, !dbg !21
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx, !dbg !21
  %53 = getelementptr bfloat, ptr addrspace(1) %52, i64 %34, !dbg !21
  %.idx2 = shl nsw i64 %36, 12, !dbg !21
  %54 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx2, !dbg !21
  %55 = getelementptr bfloat, ptr addrspace(1) %54, i64 %34, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %44) #2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !21
  %63 = shufflevector <2 x bfloat> %62, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %64 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !21
  %66 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %45) #2, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !21
  %74 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %75 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !21
  %77 = shufflevector <2 x bfloat> %76, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %78 = select i1 %25, i32 0, i32 288, !dbg !21
  %79 = and i32 %22, 24, !dbg !21
  %80 = mul nuw nsw i32 %79, 9, !dbg !21
  %81 = xor i32 %80, %31, !dbg !21
  %82 = xor i32 %81, %78, !dbg !21
  %83 = and i32 %30, 512, !dbg !21
  %84 = shl nuw nsw i32 %26, 3, !dbg !21
  %85 = or disjoint i32 %83, %82, !dbg !21
  %86 = or disjoint i32 %85, %84, !dbg !21
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600), i32 %86, !dbg !21
  %88 = shufflevector <2 x bfloat> %58, <2 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %89 = shufflevector <8 x bfloat> %88, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %90 = shufflevector <8 x bfloat> %89, <8 x bfloat> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %90, ptr addrspace(3) %87, align 16, !dbg !21
  %91 = or disjoint i32 %31, 2048, !dbg !21
  %92 = xor i32 %80, %91, !dbg !21
  %93 = xor i32 %92, %78, !dbg !21
  %94 = or disjoint i32 %93, %83, !dbg !21
  %95 = or disjoint i32 %94, %84, !dbg !21
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600), i32 %95, !dbg !21
  %97 = shufflevector <2 x bfloat> %69, <2 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %98 = shufflevector <8 x bfloat> %97, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %99 = shufflevector <8 x bfloat> %98, <8 x bfloat> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %99, ptr addrspace(3) %96, align 16, !dbg !21
  %100 = shl i32 %48, 7, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !23
  %102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %101, !dbg !23
  %103 = getelementptr bfloat, ptr addrspace(1) %4, i64 %101, !dbg !24
  %104 = or disjoint i64 %.idx, %34, !dbg !25
  %105 = or disjoint i64 %.idx2, %34, !dbg !25
  %106 = getelementptr bfloat, ptr addrspace(1) %102, i64 %104, !dbg !25
  %107 = getelementptr bfloat, ptr addrspace(1) %102, i64 %105, !dbg !25
  %108 = shl nuw nsw i32 %28, 6, !dbg !25
  %109 = or disjoint i32 %108, %31, !dbg !25
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = or disjoint i32 %109, 2048, !dbg !25
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %111, !dbg !25
  %113 = select i1 %44, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %106, i32 %113) #2, !dbg !25
  %114 = select i1 %45, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %107, i32 %114) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %115 = or disjoint i64 %34, 64, !dbg !25
  %116 = or disjoint i64 %.idx, %115, !dbg !25
  %117 = or disjoint i64 %.idx2, %115, !dbg !25
  %118 = getelementptr bfloat, ptr addrspace(1) %102, i64 %116, !dbg !25
  %119 = getelementptr bfloat, ptr addrspace(1) %102, i64 %117, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %109, !dbg !25
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %111, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %120, ptr addrspace(1) %118, i32 %113) #2, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %119, i32 %114) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %86
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %95
  %124 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600) to i32), 4
  %125 = and i32 %124, 16383
  %126 = zext nneg i32 %125 to i64
  %127 = or disjoint i64 %126, 4611686293338849280
  %128 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600) to i32), i32 32), 4
  %129 = and i32 %128, 16383
  %130 = zext nneg i32 %129 to i64
  %131 = or disjoint i64 %130, 4611686293338849280
  %132 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600) to i32), i32 64), 4
  %133 = and i32 %132, 16383
  %134 = zext nneg i32 %133 to i64
  %135 = or disjoint i64 %134, 4611686293338849280
  %136 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600) to i32), i32 96), 4
  %137 = and i32 %136, 16383
  %138 = zext nneg i32 %137 to i64
  %139 = or disjoint i64 %138, 4611686293338849280
  %140 = shl nuw nsw i32 %22, 6
  %141 = and i32 %140, 960
  %142 = lshr i32 %22, 1
  %143 = and i32 %142, 8
  %144 = or disjoint i32 %141, %143
  %145 = shl nuw nsw i32 %22, 5
  %146 = and i32 %145, 3072
  %147 = or disjoint i32 %144, %146
  %148 = and i32 %30, 504
  %149 = or disjoint i32 %84, %148
  %.reass = or disjoint i32 %149, %83
  %150 = lshr exact i32 %147, 3
  %151 = and i32 %150, 504
  %152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %151
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %152, i32 %147
  %154 = lshr exact i32 %26, 1
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 %154
  %156 = ptrtoint ptr addrspace(3) %155 to i32
  %157 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 32
  %158 = ptrtoint ptr addrspace(3) %157 to i32
  %159 = lshr exact i32 %.reass, 3
  %160 = and i32 %159, 248
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %160
  %162 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %161, i32 %.reass
  %163 = or disjoint i32 %.reass, 2048
  %164 = lshr exact i32 %163, 3
  %165 = and i32 %164, 504
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %165
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %166, i32 %163
  %168 = insertelement <8 x i16> poison, i16 %46, i64 0, !dbg !26
  %169 = bitcast <8 x i16> %168 to <8 x bfloat>, !dbg !26
  %170 = shufflevector <8 x bfloat> %169, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %171 = insertelement <8 x i16> poison, i16 %47, i64 0, !dbg !26
  %172 = bitcast <8 x i16> %171 to <8 x bfloat>, !dbg !26
  %173 = shufflevector <8 x bfloat> %172, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %174 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 4
  %175 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 8
  %176 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 12
  br label %177, !dbg !27

177:                                              ; preds = %9, %177
  %178 = phi i1 [ true, %9 ], [ false, %177 ]
  %indvars.iv = phi i64 [ 128, %9 ], [ 192, %177 ]
  %179 = phi i1 [ %44, %9 ], [ false, %177 ]
  %180 = phi i1 [ %45, %9 ], [ false, %177 ]
  %181 = phi i1 [ %44, %9 ], [ %179, %177 ]
  %182 = phi i1 [ %45, %9 ], [ %180, %177 ]
  %183 = phi i64 [ %116, %9 ], [ %.reass85, %177 ]
  %184 = phi i64 [ %117, %9 ], [ %.reass101, %177 ]
  %185 = phi i64 [ %104, %9 ], [ %183, %177 ]
  %186 = phi i64 [ %105, %9 ], [ %184, %177 ]
  %187 = phi i32 [ -1, %9 ], [ %191, %177 ]
  %188 = phi i32 [ 1, %9 ], [ %344, %177 ]
  %189 = add i32 %187, 1, !dbg !27
  %190 = icmp sgt i32 %189, 1, !dbg !27
  %191 = select i1 %190, i32 0, i32 %189, !dbg !27
  tail call void @llvm.nvvm.cp.async.wait.group(i32 1), !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %.idx27 = shl i32 %191, 13, !dbg !25
  %192 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx27, !dbg !25
  %193 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %192, i32 %109, !dbg !25
  %194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %192, i32 %111, !dbg !25
  %195 = load <8 x bfloat>, ptr addrspace(3) %193, align 16, !dbg !25
  %196 = fmul <8 x bfloat> %195, %170, !dbg !26
  %197 = load <8 x bfloat>, ptr addrspace(3) %194, align 16, !dbg !25
  %198 = fmul <8 x bfloat> %197, %173, !dbg !26
  store <8 x bfloat> %196, ptr addrspace(3) %122, align 16, !dbg !26
  store <8 x bfloat> %198, ptr addrspace(3) %123, align 16, !dbg !26
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !28
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !28
  %199 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !28
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !28
  %200 = shl i32 %199, 4, !dbg !28
  %201 = and i32 %200, 64, !dbg !28
  %202 = add i32 %201, ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), !dbg !28
  %203 = lshr exact i32 %202, 4, !dbg !28
  %204 = and i32 %203, 16383, !dbg !28
  %205 = zext nneg i32 %204 to i64, !dbg !28
  %206 = or disjoint i64 %205, 4611686293338849280, !dbg !28
  %207 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %127, i64 %206) #2, !dbg !28
  %208 = add i32 %201, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 2048), !dbg !28
  %209 = lshr exact i32 %208, 4, !dbg !28
  %210 = and i32 %209, 16383, !dbg !28
  %211 = zext nneg i32 %210 to i64, !dbg !28
  %212 = or disjoint i64 %211, 4611686293338849280, !dbg !28
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 0, !dbg !28
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 1, !dbg !28
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 2, !dbg !28
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 3, !dbg !28
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 4, !dbg !28
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 5, !dbg !28
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 6, !dbg !28
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 7, !dbg !28
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 8, !dbg !28
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 9, !dbg !28
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 10, !dbg !28
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 11, !dbg !28
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 12, !dbg !28
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 13, !dbg !28
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 14, !dbg !28
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %207, 15, !dbg !28
  %229 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, i64 %131, i64 %212, i1 true) #2, !dbg !28
  %230 = add i32 %201, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 4096), !dbg !28
  %231 = lshr exact i32 %230, 4, !dbg !28
  %232 = and i32 %231, 16383, !dbg !28
  %233 = zext nneg i32 %232 to i64, !dbg !28
  %234 = or disjoint i64 %233, 4611686293338849280, !dbg !28
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 0, !dbg !28
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 1, !dbg !28
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 2, !dbg !28
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 3, !dbg !28
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 4, !dbg !28
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 5, !dbg !28
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 6, !dbg !28
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 7, !dbg !28
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 8, !dbg !28
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 9, !dbg !28
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 10, !dbg !28
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 11, !dbg !28
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 12, !dbg !28
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 13, !dbg !28
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 14, !dbg !28
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 15, !dbg !28
  %251 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, i64 %135, i64 %234, i1 true) #2, !dbg !28
  %252 = add i32 %201, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 6144), !dbg !28
  %253 = lshr exact i32 %252, 4, !dbg !28
  %254 = and i32 %253, 16383, !dbg !28
  %255 = zext nneg i32 %254 to i64, !dbg !28
  %256 = or disjoint i64 %255, 4611686293338849280, !dbg !28
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 0, !dbg !28
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 1, !dbg !28
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 2, !dbg !28
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 3, !dbg !28
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 4, !dbg !28
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 5, !dbg !28
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 6, !dbg !28
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 7, !dbg !28
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 8, !dbg !28
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 9, !dbg !28
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 10, !dbg !28
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 11, !dbg !28
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 12, !dbg !28
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 13, !dbg !28
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 14, !dbg !28
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %251, 15, !dbg !28
  %273 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %257, float %258, float %259, float %260, float %261, float %262, float %263, float %264, float %265, float %266, float %267, float %268, float %269, float %270, float %271, float %272, i64 %139, i64 %256, i1 true) #2, !dbg !28
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 0, !dbg !28
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 1, !dbg !28
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 2, !dbg !28
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 3, !dbg !28
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 4, !dbg !28
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 5, !dbg !28
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 6, !dbg !28
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 7, !dbg !28
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 8, !dbg !28
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 9, !dbg !28
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 10, !dbg !28
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 11, !dbg !28
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 12, !dbg !28
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 13, !dbg !28
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 14, !dbg !28
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, 15, !dbg !28
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !28
  %290 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %274, float %275, float %276, float %277, float %278, float %279, float %280, float %281, float %282, float %283, float %284, float %285, float %286, float %287, float %288, float %289, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600), i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 0, i32 0) #2, !dbg !28
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 0, !dbg !28
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 1, !dbg !28
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 2, !dbg !28
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 3, !dbg !28
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 4, !dbg !28
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 5, !dbg !28
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 6, !dbg !28
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 7, !dbg !28
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 8, !dbg !28
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 9, !dbg !28
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 10, !dbg !28
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 11, !dbg !28
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 12, !dbg !28
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 13, !dbg !28
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 14, !dbg !28
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %290, 15, !dbg !28
  %307 = insertelement <2 x float> poison, float %291, i64 0, !dbg !29
  %308 = insertelement <2 x float> %307, float %292, i64 1, !dbg !29
  %309 = fptrunc <2 x float> %308 to <2 x bfloat>, !dbg !29
  %310 = insertelement <2 x float> poison, float %293, i64 0, !dbg !29
  %311 = insertelement <2 x float> %310, float %294, i64 1, !dbg !29
  %312 = fptrunc <2 x float> %311 to <2 x bfloat>, !dbg !29
  %313 = insertelement <2 x float> poison, float %295, i64 0, !dbg !29
  %314 = insertelement <2 x float> %313, float %296, i64 1, !dbg !29
  %315 = fptrunc <2 x float> %314 to <2 x bfloat>, !dbg !29
  %316 = insertelement <2 x float> poison, float %297, i64 0, !dbg !29
  %317 = insertelement <2 x float> %316, float %298, i64 1, !dbg !29
  %318 = fptrunc <2 x float> %317 to <2 x bfloat>, !dbg !29
  %319 = insertelement <2 x float> poison, float %299, i64 0, !dbg !29
  %320 = insertelement <2 x float> %319, float %300, i64 1, !dbg !29
  %321 = fptrunc <2 x float> %320 to <2 x bfloat>, !dbg !29
  %322 = insertelement <2 x float> poison, float %301, i64 0, !dbg !29
  %323 = insertelement <2 x float> %322, float %302, i64 1, !dbg !29
  %324 = fptrunc <2 x float> %323 to <2 x bfloat>, !dbg !29
  %325 = insertelement <2 x float> poison, float %303, i64 0, !dbg !29
  %326 = insertelement <2 x float> %325, float %304, i64 1, !dbg !29
  %327 = fptrunc <2 x float> %326 to <2 x bfloat>, !dbg !29
  %328 = insertelement <2 x float> poison, float %305, i64 0, !dbg !29
  %329 = insertelement <2 x float> %328, float %306, i64 1, !dbg !29
  %330 = fptrunc <2 x float> %329 to <2 x bfloat>, !dbg !29
  %331 = getelementptr bfloat, ptr addrspace(1) %103, i64 %185, !dbg !30
  %332 = getelementptr bfloat, ptr addrspace(1) %103, i64 %186, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %333 = bitcast <2 x bfloat> %309 to i32, !dbg !30
  %334 = bitcast <2 x bfloat> %312 to i32, !dbg !30
  %335 = bitcast <2 x bfloat> %315 to i32, !dbg !30
  %336 = bitcast <2 x bfloat> %318 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %156, i32 %333, i32 %334, i32 %335, i32 %336) #2, !dbg !30
  %337 = bitcast <2 x bfloat> %321 to i32, !dbg !30
  %338 = bitcast <2 x bfloat> %324 to i32, !dbg !30
  %339 = bitcast <2 x bfloat> %327 to i32, !dbg !30
  %340 = bitcast <2 x bfloat> %330 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %158, i32 %337, i32 %338, i32 %339, i32 %340) #2, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %341 = load <4 x i32>, ptr addrspace(3) %167, align 16, !dbg !30
  %.extract69 = load i32, ptr addrspace(3) %162, align 16, !dbg !30
  %.extract71 = load i32, ptr addrspace(3) %174, align 4, !dbg !30
  %.extract73 = load i32, ptr addrspace(3) %175, align 8, !dbg !30
  %.extract75 = load i32, ptr addrspace(3) %176, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract71, i32 %.extract73, i32 %.extract75, ptr addrspace(1) %331, i1 %181) #2, !dbg !30
  %.extract77 = extractelement <4 x i32> %341, i64 0, !dbg !30
  %.extract79 = extractelement <4 x i32> %341, i64 1, !dbg !30
  %.extract81 = extractelement <4 x i32> %341, i64 2, !dbg !30
  %.extract83 = extractelement <4 x i32> %341, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract79, i32 %.extract81, i32 %.extract83, ptr addrspace(1) %332, i1 %182) #2, !dbg !30
  %342 = add i32 %188, 1, !dbg !27
  %343 = icmp sgt i32 %342, 1, !dbg !27
  %344 = select i1 %343, i32 0, i32 %342, !dbg !27
  %.reass85 = or disjoint i64 %104, %indvars.iv
  %.reass101 = or disjoint i64 %105, %indvars.iv
  %345 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass85, !dbg !25
  %346 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass101, !dbg !25
  %.idx52 = shl i32 %344, 13, !dbg !25
  %347 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx52, !dbg !25
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %109, !dbg !25
  %349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %347, i32 %111, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %348, ptr addrspace(1) %345, i32 0) #2, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %349, ptr addrspace(1) %346, i32 0) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  br i1 %178, label %177, label %350, !dbg !27

350:                                              ; preds = %177
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %351 = sext i32 %48 to i64, !dbg !31
  %352 = getelementptr float, ptr addrspace(1) %6, i64 %351, !dbg !31
  %353 = getelementptr float, ptr addrspace(1) %352, i64 %37, !dbg !32
  %354 = getelementptr float, ptr addrspace(1) %352, i64 %38, !dbg !32
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %44) #2, !dbg !32
  %356 = bitcast i32 %355 to float, !dbg !32
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %45) #2, !dbg !32
  %358 = bitcast i32 %357 to float, !dbg !32
  %359 = fmul float %356, 0x3FF7154760000000, !dbg !33
  %360 = tail call float @llvm.nvvm.ex2.approx.f(float %359), !dbg !33
  %361 = fmul float %358, 0x3FF7154760000000, !dbg !33
  %362 = tail call float @llvm.nvvm.ex2.approx.f(float %361), !dbg !33
  %363 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !34
  %364 = getelementptr bfloat, ptr addrspace(1) %3, i64 %101, !dbg !35
  %365 = getelementptr bfloat, ptr addrspace(1) %363, i64 %104, !dbg !36
  %366 = getelementptr bfloat, ptr addrspace(1) %363, i64 %105, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %365, i32 %113) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %366, i32 %114) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %367 = getelementptr bfloat, ptr addrspace(1) %363, i64 %116, !dbg !36
  %368 = getelementptr bfloat, ptr addrspace(1) %363, i64 %117, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %120, ptr addrspace(1) %367, i32 %113) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %368, i32 %114) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %369 = insertelement <8 x float> poison, float %360, i64 0, !dbg !37
  %370 = shufflevector <8 x float> %369, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %371 = insertelement <8 x float> poison, float %362, i64 0, !dbg !37
  %372 = shufflevector <8 x float> %371, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %373 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 4
  %374 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 8
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 12
  br label %376, !dbg !38

376:                                              ; preds = %350, %376
  %377 = phi i1 [ true, %350 ], [ false, %376 ]
  %indvars.iv150 = phi i64 [ 128, %350 ], [ 192, %376 ]
  %378 = phi i1 [ %44, %350 ], [ false, %376 ]
  %379 = phi i1 [ %45, %350 ], [ false, %376 ]
  %380 = phi i1 [ %44, %350 ], [ %378, %376 ]
  %381 = phi i1 [ %45, %350 ], [ %379, %376 ]
  %382 = phi i64 [ %116, %350 ], [ %.reass119, %376 ]
  %383 = phi i64 [ %117, %350 ], [ %.reass135, %376 ]
  %384 = phi i64 [ %104, %350 ], [ %382, %376 ]
  %385 = phi i64 [ %105, %350 ], [ %383, %376 ]
  %386 = phi i32 [ -1, %350 ], [ %390, %376 ]
  %387 = phi i32 [ 1, %350 ], [ %549, %376 ]
  %388 = add i32 %386, 1, !dbg !38
  %389 = icmp sgt i32 %388, 1, !dbg !38
  %390 = select i1 %389, i32 0, i32 %388, !dbg !38
  tail call void @llvm.nvvm.cp.async.wait.group(i32 1), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx3 = shl i32 %390, 13, !dbg !36
  %391 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !36
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %391, i32 %109, !dbg !36
  %393 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %391, i32 %111, !dbg !36
  %394 = load <8 x bfloat>, ptr addrspace(3) %392, align 16, !dbg !36
  %395 = fmul <8 x bfloat> %394, %170, !dbg !39
  %396 = fpext <8 x bfloat> %395 to <8 x float>, !dbg !37
  %397 = fmul <8 x float> %370, %396, !dbg !37
  %398 = fptrunc <8 x float> %397 to <8 x bfloat>, !dbg !40
  %399 = load <8 x bfloat>, ptr addrspace(3) %393, align 16, !dbg !36
  %400 = fmul <8 x bfloat> %399, %173, !dbg !39
  %401 = fpext <8 x bfloat> %400 to <8 x float>, !dbg !37
  %402 = fmul <8 x float> %372, %401, !dbg !37
  %403 = fptrunc <8 x float> %402 to <8 x bfloat>, !dbg !40
  store <8 x bfloat> %398, ptr addrspace(3) %122, align 16, !dbg !40
  store <8 x bfloat> %403, ptr addrspace(3) %123, align 16, !dbg !40
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %404 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !41
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !41
  %405 = shl i32 %404, 4, !dbg !41
  %406 = and i32 %405, 64, !dbg !41
  %407 = add i32 %406, ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), !dbg !41
  %408 = lshr exact i32 %407, 4, !dbg !41
  %409 = and i32 %408, 16383, !dbg !41
  %410 = zext nneg i32 %409 to i64, !dbg !41
  %411 = or disjoint i64 %410, 4611686293338849280, !dbg !41
  %412 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %127, i64 %411) #2, !dbg !41
  %413 = add i32 %406, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 2048), !dbg !41
  %414 = lshr exact i32 %413, 4, !dbg !41
  %415 = and i32 %414, 16383, !dbg !41
  %416 = zext nneg i32 %415 to i64, !dbg !41
  %417 = or disjoint i64 %416, 4611686293338849280, !dbg !41
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 0, !dbg !41
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 1, !dbg !41
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 2, !dbg !41
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 3, !dbg !41
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 4, !dbg !41
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 5, !dbg !41
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 6, !dbg !41
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 7, !dbg !41
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 8, !dbg !41
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 9, !dbg !41
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 10, !dbg !41
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 11, !dbg !41
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 12, !dbg !41
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 13, !dbg !41
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 14, !dbg !41
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %412, 15, !dbg !41
  %434 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, float %426, float %427, float %428, float %429, float %430, float %431, float %432, float %433, i64 %131, i64 %417, i1 true) #2, !dbg !41
  %435 = add i32 %406, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 4096), !dbg !41
  %436 = lshr exact i32 %435, 4, !dbg !41
  %437 = and i32 %436, 16383, !dbg !41
  %438 = zext nneg i32 %437 to i64, !dbg !41
  %439 = or disjoint i64 %438, 4611686293338849280, !dbg !41
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 0, !dbg !41
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 1, !dbg !41
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 2, !dbg !41
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 3, !dbg !41
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 4, !dbg !41
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 5, !dbg !41
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 6, !dbg !41
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 7, !dbg !41
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 8, !dbg !41
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 9, !dbg !41
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 10, !dbg !41
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 11, !dbg !41
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 12, !dbg !41
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 13, !dbg !41
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 14, !dbg !41
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %434, 15, !dbg !41
  %456 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %440, float %441, float %442, float %443, float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, i64 %135, i64 %439, i1 true) #2, !dbg !41
  %457 = add i32 %406, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384) to i32), i32 6144), !dbg !41
  %458 = lshr exact i32 %457, 4, !dbg !41
  %459 = and i32 %458, 16383, !dbg !41
  %460 = zext nneg i32 %459 to i64, !dbg !41
  %461 = or disjoint i64 %460, 4611686293338849280, !dbg !41
  %462 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 0, !dbg !41
  %463 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 1, !dbg !41
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 2, !dbg !41
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 3, !dbg !41
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 4, !dbg !41
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 5, !dbg !41
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 6, !dbg !41
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 7, !dbg !41
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 8, !dbg !41
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 9, !dbg !41
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 10, !dbg !41
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 11, !dbg !41
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 12, !dbg !41
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 13, !dbg !41
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 14, !dbg !41
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %456, 15, !dbg !41
  %478 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %462, float %463, float %464, float %465, float %466, float %467, float %468, float %469, float %470, float %471, float %472, float %473, float %474, float %475, float %476, float %477, i64 %139, i64 %461, i1 true) #2, !dbg !41
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 0, !dbg !41
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 1, !dbg !41
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 2, !dbg !41
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 3, !dbg !41
  %483 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 4, !dbg !41
  %484 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 5, !dbg !41
  %485 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 6, !dbg !41
  %486 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 7, !dbg !41
  %487 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 8, !dbg !41
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 9, !dbg !41
  %489 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 10, !dbg !41
  %490 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 11, !dbg !41
  %491 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 12, !dbg !41
  %492 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 13, !dbg !41
  %493 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 14, !dbg !41
  %494 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %478, 15, !dbg !41
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !41
  %495 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %479, float %480, float %481, float %482, float %483, float %484, float %485, float %486, float %487, float %488, float %489, float %490, float %491, float %492, float %493, float %494, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 25600), i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 0, i32 0) #2, !dbg !41
  %496 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 0, !dbg !41
  %497 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 1, !dbg !41
  %498 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 2, !dbg !41
  %499 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 3, !dbg !41
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 4, !dbg !41
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 5, !dbg !41
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 6, !dbg !41
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 7, !dbg !41
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 8, !dbg !41
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 9, !dbg !41
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 10, !dbg !41
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 11, !dbg !41
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 12, !dbg !41
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 13, !dbg !41
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 14, !dbg !41
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %495, 15, !dbg !41
  %512 = insertelement <2 x float> poison, float %496, i64 0, !dbg !42
  %513 = insertelement <2 x float> %512, float %497, i64 1, !dbg !42
  %514 = fptrunc <2 x float> %513 to <2 x bfloat>, !dbg !42
  %515 = insertelement <2 x float> poison, float %498, i64 0, !dbg !42
  %516 = insertelement <2 x float> %515, float %499, i64 1, !dbg !42
  %517 = fptrunc <2 x float> %516 to <2 x bfloat>, !dbg !42
  %518 = insertelement <2 x float> poison, float %500, i64 0, !dbg !42
  %519 = insertelement <2 x float> %518, float %501, i64 1, !dbg !42
  %520 = fptrunc <2 x float> %519 to <2 x bfloat>, !dbg !42
  %521 = insertelement <2 x float> poison, float %502, i64 0, !dbg !42
  %522 = insertelement <2 x float> %521, float %503, i64 1, !dbg !42
  %523 = fptrunc <2 x float> %522 to <2 x bfloat>, !dbg !42
  %524 = insertelement <2 x float> poison, float %504, i64 0, !dbg !42
  %525 = insertelement <2 x float> %524, float %505, i64 1, !dbg !42
  %526 = fptrunc <2 x float> %525 to <2 x bfloat>, !dbg !42
  %527 = insertelement <2 x float> poison, float %506, i64 0, !dbg !42
  %528 = insertelement <2 x float> %527, float %507, i64 1, !dbg !42
  %529 = fptrunc <2 x float> %528 to <2 x bfloat>, !dbg !42
  %530 = insertelement <2 x float> poison, float %508, i64 0, !dbg !42
  %531 = insertelement <2 x float> %530, float %509, i64 1, !dbg !42
  %532 = fptrunc <2 x float> %531 to <2 x bfloat>, !dbg !42
  %533 = insertelement <2 x float> poison, float %510, i64 0, !dbg !42
  %534 = insertelement <2 x float> %533, float %511, i64 1, !dbg !42
  %535 = fptrunc <2 x float> %534 to <2 x bfloat>, !dbg !42
  %536 = getelementptr bfloat, ptr addrspace(1) %364, i64 %384, !dbg !43
  %537 = getelementptr bfloat, ptr addrspace(1) %364, i64 %385, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %538 = bitcast <2 x bfloat> %514 to i32, !dbg !43
  %539 = bitcast <2 x bfloat> %517 to i32, !dbg !43
  %540 = bitcast <2 x bfloat> %520 to i32, !dbg !43
  %541 = bitcast <2 x bfloat> %523 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %156, i32 %538, i32 %539, i32 %540, i32 %541) #2, !dbg !43
  %542 = bitcast <2 x bfloat> %526 to i32, !dbg !43
  %543 = bitcast <2 x bfloat> %529 to i32, !dbg !43
  %544 = bitcast <2 x bfloat> %532 to i32, !dbg !43
  %545 = bitcast <2 x bfloat> %535 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %158, i32 %542, i32 %543, i32 %544, i32 %545) #2, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %546 = load <4 x i32>, ptr addrspace(3) %167, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %162, align 16, !dbg !43
  %.extract55 = load i32, ptr addrspace(3) %373, align 4, !dbg !43
  %.extract57 = load i32, ptr addrspace(3) %374, align 8, !dbg !43
  %.extract59 = load i32, ptr addrspace(3) %375, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract55, i32 %.extract57, i32 %.extract59, ptr addrspace(1) %536, i1 %380) #2, !dbg !43
  %.extract61 = extractelement <4 x i32> %546, i64 0, !dbg !43
  %.extract63 = extractelement <4 x i32> %546, i64 1, !dbg !43
  %.extract65 = extractelement <4 x i32> %546, i64 2, !dbg !43
  %.extract67 = extractelement <4 x i32> %546, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %537, i1 %381) #2, !dbg !43
  %547 = add i32 %387, 1, !dbg !38
  %548 = icmp sgt i32 %547, 1, !dbg !38
  %549 = select i1 %548, i32 0, i32 %547, !dbg !38
  %.reass119 = or disjoint i64 %104, %indvars.iv150
  %.reass135 = or disjoint i64 %105, %indvars.iv150
  %550 = getelementptr bfloat, ptr addrspace(1) %363, i64 %.reass119, !dbg !36
  %551 = getelementptr bfloat, ptr addrspace(1) %363, i64 %.reass135, !dbg !36
  %.idx26 = shl i32 %549, 13, !dbg !36
  %552 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !36
  %553 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %552, i32 %109, !dbg !36
  %554 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %552, i32 %111, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %553, ptr addrspace(1) %550, i32 0) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %554, ptr addrspace(1) %551, i32 0) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  br i1 %377, label %376, label %555, !dbg !38

555:                                              ; preds = %376
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 177, column: 41, scope: !5)
!19 = !DILocation(line: 177, column: 48, scope: !5)
!20 = !DILocation(line: 177, column: 32, scope: !5)
!21 = !DILocation(line: 178, column: 18, scope: !5)
!22 = !DILocation(line: 181, column: 52, scope: !5)
!23 = !DILocation(line: 181, column: 36, scope: !5)
!24 = !DILocation(line: 182, column: 36, scope: !5)
!25 = !DILocation(line: 183, column: 22, scope: !5)
!26 = !DILocation(line: 184, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 185, column: 26, scope: !5)
!29 = !DILocation(line: 186, column: 29, scope: !5)
!30 = !DILocation(line: 186, column: 22, scope: !5)
!31 = !DILocation(line: 189, column: 37, scope: !5)
!32 = !DILocation(line: 190, column: 26, scope: !5)
!33 = !DILocation(line: 190, column: 18, scope: !5)
!34 = !DILocation(line: 193, column: 36, scope: !5)
!35 = !DILocation(line: 194, column: 36, scope: !5)
!36 = !DILocation(line: 195, column: 22, scope: !5)
!37 = !DILocation(line: 198, column: 20, scope: !5)
!38 = !DILocation(line: 192, column: 21, scope: !5)
!39 = !DILocation(line: 196, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
