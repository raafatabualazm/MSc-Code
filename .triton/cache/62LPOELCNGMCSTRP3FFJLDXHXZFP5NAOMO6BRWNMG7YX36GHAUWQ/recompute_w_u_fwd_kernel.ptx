//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 256
{
	.reg .pred 	%p<50>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<623>;
	.reg .b64 	%rd<146>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd34, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd33, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd32, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd44, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r66, %ctaid.x;
	ld.param.b64 	%rd45, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r67, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r68, %r67, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r69, %r67, 31;
	ld.param.b64 	%rd46, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r70, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r71, %r68, %r70;
	ld.param.b64 	%rd47, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd48, %r71, 2;
	add.s64 	%rd49, %rd45, %rd48;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd50, %r69, 2;
	add.s64 	%rd51, %rd49, %rd50;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r72, %r66, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd52, %r70;
	cvt.s64.s32 	%rd53, %r72;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r73, %tid.x;
	shr.u32 	%r1, %r73, 5;
	bfe.s32 	%r74, %r73, 5, 1;
	and.b32 	%r75, %r73, 128;
	bfe.u32 	%r76, %r73, 3, 5;
	or.b32 	%r77, %r76, 32;
	shl.b32 	%r78, %r73, 3;
	and.b32 	%r79, %r78, 56;
	cvt.u64.u32 	%rd54, %r76;
	cvt.u64.u32 	%rd55, %r77;
	cvt.u64.u32 	%rd56, %r79;
	or.b64 	%rd57, %rd54, %rd53;
	or.b64 	%rd58, %rd55, %rd53;
	shl.b64 	%rd1, %rd57, 5;
	shl.b64 	%rd2, %rd58, 5;
	shl.b64 	%rd59, %rd57, 6;
	add.s64 	%rd35, %rd51, %rd59;
	shl.b64 	%rd60, %rd58, 6;
	add.s64 	%rd36, %rd51, %rd60;
	setp.gt.s32 	%p18, %r72, -1;
	setp.lt.s64 	%p19, %rd57, %rd52;
	setp.lt.s64 	%p20, %rd58, %rd52;
	and.pred 	%p46, %p18, %p19;
	and.pred 	%p47, %p18, %p20;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p46 ld.global.b16 { %rs1 }, [ %rd35 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p47 ld.global.b16 { %rs2 }, [ %rd36 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r71, %r69;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r80, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd61, %r80, 2;
	add.s64 	%rd62, %rd47, %rd61;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd63, %rd57, 12;
	add.s64 	%rd64, %rd62, %rd63;
	mul.wide.u32 	%rd65, %r79, 2;
	add.s64 	%rd37, %rd64, %rd65;
	shl.b64 	%rd66, %rd58, 12;
	add.s64 	%rd67, %rd62, %rd66;
	add.s64 	%rd38, %rd67, %rd65;
	// begin inline asm
	mov.u32 %r48, 0x0;
	mov.u32 %r49, 0x0;
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	@%p46 ld.global.v4.b32 { %r48, %r49, %r50, %r51 }, [ %rd37 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	@%p47 ld.global.v4.b32 { %r52, %r53, %r54, %r55 }, [ %rd38 + 0 ];
	// end inline asm
	and.b32 	%r81, %r74, 288;
	and.b32 	%r82, %r73, 24;
	mul.lo.s32 	%r83, %r82, 9;
	xor.b32 	%r84, %r83, %r79;
	xor.b32 	%r85, %r84, %r81;
	and.b32 	%r86, %r78, 512;
	shl.b32 	%r87, %r75, 3;
	or.b32 	%r88, %r86, %r85;
	or.b32 	%r89, %r88, %r87;
	shl.b32 	%r90, %r89, 1;
	mov.b32 	%r91, global_smem;
	add.s32 	%r92, %r91, 25600;
	add.s32 	%r93, %r92, %r90;
	st.shared.v4.b32 	[%r93], {%r48, %r49, %r50, %r51};
	or.b32 	%r94, %r79, 2048;
	xor.b32 	%r95, %r83, %r94;
	xor.b32 	%r96, %r95, %r81;
	or.b32 	%r97, %r96, %r86;
	or.b32 	%r98, %r97, %r87;
	shl.b32 	%r99, %r98, 1;
	add.s32 	%r100, %r92, %r99;
	st.shared.v4.b32 	[%r100], {%r52, %r53, %r54, %r55};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r101, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd3, %r101;
	mul.wide.s32 	%rd68, %r101, 2;
	add.s64 	%rd4, %rd44, %rd68;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd5, %rd46, %rd68;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd10, %rd63, %rd56;
	mov.b64 	%rd144, %rd10;
	or.b64 	%rd11, %rd66, %rd56;
	mov.b64 	%rd145, %rd11;
	shl.b64 	%rd69, %rd10, 1;
	add.s64 	%rd39, %rd4, %rd69;
	shl.b64 	%rd70, %rd11, 1;
	add.s64 	%rd40, %rd4, %rd70;
	shl.b32 	%r102, %r76, 6;
	or.b32 	%r3, %r102, %r79;
	shl.b32 	%r103, %r3, 1;
	add.s32 	%r353, %r91, %r103;
	add.s32 	%r355, %r353, 4096;
	selp.b32 	%r6, 16, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r353 + 0 ], [ %rd39 + 0 ], 0x10, %r6;
	// end inline asm
	selp.b32 	%r7, 16, 0, %p47;
	// begin inline asm
	cp.async.cg.shared.global [ %r355 + 0 ], [ %rd40 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd71, %rd56, 64;
	or.b64 	%rd142, %rd63, %rd71;
	or.b64 	%rd143, %rd66, %rd71;
	add.s64 	%rd41, %rd39, 128;
	add.s64 	%rd42, %rd40, 128;
	bar.sync 	0;
	add.s32 	%r60, %r353, 8192;
	add.s32 	%r62, %r353, 12288;
	// begin inline asm
	cp.async.cg.shared.global [ %r60 + 0 ], [ %rd41 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd42 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r104, %r91, 16384;
	add.s32 	%r10, %r104, %r90;
	add.s32 	%r11, %r104, %r99;
	bfe.u32 	%r105, %r92, 4, 14;
	cvt.u64.u32 	%rd72, %r105;
	or.b64 	%rd115, %rd72, 4611686293338849280;
	add.s32 	%r106, %r91, 25632;
	bfe.u32 	%r107, %r106, 4, 14;
	cvt.u64.u32 	%rd73, %r107;
	or.b64 	%rd117, %rd73, 4611686293338849280;
	add.s32 	%r108, %r91, 25664;
	bfe.u32 	%r109, %r108, 4, 14;
	cvt.u64.u32 	%rd74, %r109;
	or.b64 	%rd119, %rd74, 4611686293338849280;
	add.s32 	%r110, %r91, 25696;
	bfe.u32 	%r111, %r110, 4, 14;
	cvt.u64.u32 	%rd75, %r111;
	or.b64 	%rd121, %rd75, 4611686293338849280;
	shl.b32 	%r112, %r73, 6;
	and.b32 	%r113, %r112, 960;
	shr.u32 	%r114, %r73, 1;
	and.b32 	%r115, %r114, 8;
	or.b32 	%r116, %r113, %r115;
	shl.b32 	%r117, %r73, 5;
	and.b32 	%r118, %r117, 3072;
	or.b32 	%r119, %r116, %r118;
	and.b32 	%r120, %r78, 504;
	or.b32 	%r121, %r87, %r120;
	or.b32 	%r122, %r121, %r86;
	shr.u32 	%r123, %r119, 2;
	and.b32 	%r124, %r123, 1008;
	add.s32 	%r125, %r104, %r124;
	shl.b32 	%r126, %r119, 1;
	add.s32 	%r127, %r125, %r126;
	shr.u32 	%r128, %r75, 1;
	add.s32 	%r521, %r127, %r128;
	add.s32 	%r526, %r521, 32;
	shr.u32 	%r129, %r122, 2;
	and.b32 	%r130, %r129, 496;
	add.s32 	%r131, %r104, %r130;
	shl.b32 	%r132, %r122, 1;
	add.s32 	%r14, %r131, %r132;
	or.b32 	%r133, %r122, 2048;
	shr.u32 	%r134, %r133, 2;
	and.b32 	%r135, %r134, 1008;
	add.s32 	%r136, %r104, %r135;
	add.s32 	%r15, %r136, %r132;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r18, {%rs1, %rs1};
	mov.b32 	%r22, {%rs2, %rs2};
	mov.b32 	%r620, 1;
	mov.b32 	%r619, -1;
	mov.b64 	%rd136, 128;
	mov.pred 	%p21, -1;
	mov.pred 	%p40, %p21;
	mov.pred 	%p41, %p46;
	mov.pred 	%p42, %p47;
	mov.pred 	%p43, %p46;
	mov.pred 	%p44, %p47;
	mov.b64 	%rd137, %rd142;
	mov.b64 	%rd138, %rd143;
	mov.b64 	%rd139, %rd144;
	mov.b64 	%rd140, %rd145;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd18, %rd138;
	mov.b64 	%rd17, %rd137;
	mov.pred 	%p5, %p42;
	mov.pred 	%p4, %p41;
	mov.pred 	%p3, %p40;
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r315, %r619, 1;
	setp.gt.s32 	%p27, %r315, 1;
	selp.b32 	%r619, 0, %r315, %p27;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	1;
	bar.sync 	0;
	shl.b32 	%r316, %r619, 13;
	add.s32 	%r318, %r91, %r316;
	add.s32 	%r320, %r318, %r103;
	ld.shared.v4.b32 	{%r321, %r322, %r323, %r324}, [%r320];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r325, %r324, %r18;
	mul.bf16x2 	%r326, %r323, %r18;
	mul.bf16x2 	%r327, %r322, %r18;
	mul.bf16x2 	%r328, %r321, %r18;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r329, %r330, %r331, %r332}, [%r320+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r333, %r332, %r22;
	mul.bf16x2 	%r334, %r331, %r22;
	mul.bf16x2 	%r335, %r330, %r22;
	mul.bf16x2 	%r336, %r329, %r22;
	st.shared.v4.b32 	[%r10], {%r328, %r327, %r326, %r325};
	st.shared.v4.b32 	[%r11], {%r336, %r335, %r334, %r333};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r337, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r338, %r337, 4;
	and.b32 	%r339, %r338, 64;
	add.s32 	%r340, %r339, %r104;
	bfe.u32 	%r341, %r340, 4, 14;
	cvt.u64.u32 	%rd89, %r341;
	or.b64 	%rd77, %rd89, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200}, %rd115, %rd77, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r342, %r340, 2048;
	bfe.u32 	%r343, %r342, 4, 14;
	cvt.u64.u32 	%rd90, %r343;
	or.b64 	%rd79, %rd90, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200}, %rd117, %rd79, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r344, %r340, 4096;
	bfe.u32 	%r345, %r344, 4, 14;
	cvt.u64.u32 	%rd91, %r345;
	or.b64 	%rd81, %rd91, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200}, %rd119, %rd81, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r346, %r340, 6144;
	bfe.u32 	%r347, %r346, 4, 14;
	cvt.u64.u32 	%rd92, %r347;
	or.b64 	%rd83, %rd92, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200}, %rd121, %rd83, %p21, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r288, 0;
	mov.b32 	%r265, %r92;
	mov.b32 	%r268, %r104;
	mov.b32 	%r266, %r288;
	mov.b32 	%r267, %r288;
	mov.b32 	%r269, %r288;
	mov.b32 	%r270, %r288;
	// begin inline asm
	// wait for regs: %r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r265,%r266,%r267,%r268,%r269,%r270
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r294, %r186, %r185;
	cvt.rn.bf16x2.f32 	%r295, %r188, %r187;
	cvt.rn.bf16x2.f32 	%r296, %r190, %r189;
	cvt.rn.bf16x2.f32 	%r297, %r192, %r191;
	cvt.rn.bf16x2.f32 	%r299, %r194, %r193;
	cvt.rn.bf16x2.f32 	%r300, %r196, %r195;
	cvt.rn.bf16x2.f32 	%r301, %r198, %r197;
	cvt.rn.bf16x2.f32 	%r302, %r200, %r199;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd93, %rd139, 1;
	add.s64 	%rd84, %rd5, %rd93;
	shl.b64 	%rd94, %rd140, 1;
	add.s64 	%rd85, %rd5, %rd94;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r521], {%r294, %r295, %r296, %r297};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r526], {%r299, %r300, %r301, %r302};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r307, %r308, %r309, %r310}, [%r15+4096];
	ld.shared.v4.b32 	{%r303, %r304, %r305, %r306}, [%r14];
	// begin inline asm
	@%p43 st.global.v4.b32 [ %rd84 + 0 ], { %r303, %r304, %r305, %r306 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd85 + 0 ], { %r307, %r308, %r309, %r310 };
	// end inline asm
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r348, %r620, 1;
	setp.gt.s32 	%p28, %r348, 1;
	selp.b32 	%r620, 0, %r348, %p28;
	or.b64 	%rd137, %rd10, %rd136;
	or.b64 	%rd138, %rd11, %rd136;
	.loc	1 183 22                        // wy_fast.py:183:22
	shl.b64 	%rd95, %rd137, 1;
	add.s64 	%rd86, %rd4, %rd95;
	shl.b64 	%rd96, %rd138, 1;
	add.s64 	%rd87, %rd4, %rd96;
	shl.b32 	%r349, %r620, 13;
	add.s32 	%r350, %r91, %r349;
	add.s32 	%r311, %r350, %r103;
	add.s32 	%r313, %r311, 4096;
	// begin inline asm
	cp.async.cg.shared.global [ %r311 + 0 ], [ %rd86 + 0 ], 0x10, %r288;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r313 + 0 ], [ %rd87 + 0 ], 0x10, %r288;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd136, 192;
	mov.pred 	%p40, 0;
	mov.pred 	%p41, %p40;
	mov.pred 	%p42, %p40;
	mov.pred 	%p43, %p4;
	mov.pred 	%p44, %p5;
	mov.b64 	%rd139, %rd17;
	mov.b64 	%rd140, %rd18;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p3 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd104, %r2, 4;
	add.s64 	%rd105, %rd34, %rd104;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd106, %rd1, 2;
	add.s64 	%rd97, %rd105, %rd106;
	shl.b64 	%rd107, %rd2, 2;
	add.s64 	%rd98, %rd105, %rd107;
	// begin inline asm
	mov.u32 %r351, 0x0;
	@%p46 ld.global.b32 { %r351 }, [ %rd97 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r352, 0x0;
	@%p47 ld.global.b32 { %r352 }, [ %rd98 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r363, %r351, 0f3FB8AA3B;
	ex2.approx.f32 	%r28, %r363;
	mul.f32 	%r364, %r352, 0f3FB8AA3B;
	ex2.approx.f32 	%r36, %r364;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd108, %rd3, 1;
	add.s64 	%rd23, %rd32, %rd108;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd24, %rd33, %rd108;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd99, %rd23, %rd69;
	add.s64 	%rd100, %rd23, %rd70;
	// begin inline asm
	cp.async.cg.shared.global [ %r353 + 0 ], [ %rd99 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r355 + 0 ], [ %rd100 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd101, %rd99, 128;
	add.s64 	%rd102, %rd100, 128;
	bar.sync 	0;
	// begin inline asm
	cp.async.cg.shared.global [ %r60 + 0 ], [ %rd101 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd102 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r622, 1;
	mov.b32 	%r621, -1;
	mov.b64 	%rd141, 128;
	mov.pred 	%p32, -1;
	mov.pred 	%p45, %p32;
	mov.pred 	%p48, %p46;
	mov.pred 	%p49, %p47;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd27, %rd143;
	mov.b64 	%rd26, %rd142;
	mov.pred 	%p10, %p47;
	mov.pred 	%p9, %p46;
	mov.pred 	%p8, %p45;
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r543, %r621, 1;
	setp.gt.s32 	%p38, %r543, 1;
	selp.b32 	%r621, 0, %r543, %p38;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	1;
	bar.sync 	0;
	shl.b32 	%r544, %r621, 13;
	add.s32 	%r546, %r91, %r544;
	add.s32 	%r548, %r546, %r103;
	ld.shared.v4.b32 	{%r549, %r550, %r551, %r552}, [%r548];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r553, %r549, %r18;
	mul.bf16x2 	%r554, %r550, %r18;
	mul.bf16x2 	%r555, %r551, %r18;
	mul.bf16x2 	%r556, %r552, %r18;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs3, %rs4}, %r556;
	cvt.f32.bf16 	%r557, %rs4;
	cvt.f32.bf16 	%r558, %rs3;
	mov.b32 	{%rs5, %rs6}, %r555;
	cvt.f32.bf16 	%r559, %rs6;
	cvt.f32.bf16 	%r560, %rs5;
	mov.b32 	{%rs7, %rs8}, %r554;
	cvt.f32.bf16 	%r561, %rs8;
	cvt.f32.bf16 	%r562, %rs7;
	mov.b32 	{%rs9, %rs10}, %r553;
	cvt.f32.bf16 	%r563, %rs10;
	cvt.f32.bf16 	%r564, %rs9;
	mul.f32 	%r565, %r28, %r564;
	mul.f32 	%r566, %r28, %r563;
	mul.f32 	%r567, %r28, %r562;
	mul.f32 	%r568, %r28, %r561;
	mul.f32 	%r569, %r28, %r560;
	mul.f32 	%r570, %r28, %r559;
	mul.f32 	%r571, %r28, %r558;
	mul.f32 	%r572, %r28, %r557;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r573, %r572, %r571;
	cvt.rn.bf16x2.f32 	%r574, %r570, %r569;
	cvt.rn.bf16x2.f32 	%r575, %r568, %r567;
	cvt.rn.bf16x2.f32 	%r576, %r566, %r565;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r577, %r578, %r579, %r580}, [%r548+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r581, %r577, %r22;
	mul.bf16x2 	%r582, %r578, %r22;
	mul.bf16x2 	%r583, %r579, %r22;
	mul.bf16x2 	%r584, %r580, %r22;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs11, %rs12}, %r584;
	cvt.f32.bf16 	%r585, %rs12;
	cvt.f32.bf16 	%r586, %rs11;
	mov.b32 	{%rs13, %rs14}, %r583;
	cvt.f32.bf16 	%r587, %rs14;
	cvt.f32.bf16 	%r588, %rs13;
	mov.b32 	{%rs15, %rs16}, %r582;
	cvt.f32.bf16 	%r589, %rs16;
	cvt.f32.bf16 	%r590, %rs15;
	mov.b32 	{%rs17, %rs18}, %r581;
	cvt.f32.bf16 	%r591, %rs18;
	cvt.f32.bf16 	%r592, %rs17;
	mul.f32 	%r593, %r36, %r592;
	mul.f32 	%r594, %r36, %r591;
	mul.f32 	%r595, %r36, %r590;
	mul.f32 	%r596, %r36, %r589;
	mul.f32 	%r597, %r36, %r588;
	mul.f32 	%r598, %r36, %r587;
	mul.f32 	%r599, %r36, %r586;
	mul.f32 	%r600, %r36, %r585;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r601, %r600, %r599;
	cvt.rn.bf16x2.f32 	%r602, %r598, %r597;
	cvt.rn.bf16x2.f32 	%r603, %r596, %r595;
	cvt.rn.bf16x2.f32 	%r604, %r594, %r593;
	st.shared.v4.b32 	[%r10], {%r576, %r575, %r574, %r573};
	st.shared.v4.b32 	[%r11], {%r604, %r603, %r602, %r601};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r605, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r606, %r605, 4;
	and.b32 	%r607, %r606, 64;
	add.s32 	%r608, %r607, %r104;
	bfe.u32 	%r609, %r608, 4, 14;
	cvt.u64.u32 	%rd128, %r609;
	or.b64 	%rd116, %rd128, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r413,%r414,%r415,%r416,%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428}, %rd115, %rd116, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r610, %r608, 2048;
	bfe.u32 	%r611, %r610, 4, 14;
	cvt.u64.u32 	%rd129, %r611;
	or.b64 	%rd118, %rd129, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r413,%r414,%r415,%r416,%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428}, %rd117, %rd118, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r612, %r608, 4096;
	bfe.u32 	%r613, %r612, 4, 14;
	cvt.u64.u32 	%rd130, %r613;
	or.b64 	%rd120, %rd130, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r413,%r414,%r415,%r416,%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428}, %rd119, %rd120, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r614, %r608, 6144;
	bfe.u32 	%r615, %r614, 4, 14;
	cvt.u64.u32 	%rd131, %r615;
	or.b64 	%rd122, %rd131, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r413,%r414,%r415,%r416,%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428}, %rd121, %rd122, %p32, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r516, 0;
	mov.b32 	%r493, %r92;
	mov.b32 	%r494, %r516;
	mov.b32 	%r495, %r516;
	mov.b32 	%r497, %r516;
	mov.b32 	%r498, %r516;
	mov.b32 	%r496, %r104;
	// begin inline asm
	// wait for regs: %r413,%r414,%r415,%r416,%r417,%r418,%r419,%r420,%r421,%r422,%r423,%r424,%r425,%r426,%r427,%r428,%r493,%r494,%r495,%r496,%r497,%r498
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r522, %r414, %r413;
	cvt.rn.bf16x2.f32 	%r523, %r416, %r415;
	cvt.rn.bf16x2.f32 	%r524, %r418, %r417;
	cvt.rn.bf16x2.f32 	%r525, %r420, %r419;
	cvt.rn.bf16x2.f32 	%r527, %r422, %r421;
	cvt.rn.bf16x2.f32 	%r528, %r424, %r423;
	cvt.rn.bf16x2.f32 	%r529, %r426, %r425;
	cvt.rn.bf16x2.f32 	%r530, %r428, %r427;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd132, %rd144, 1;
	add.s64 	%rd123, %rd24, %rd132;
	shl.b64 	%rd133, %rd145, 1;
	add.s64 	%rd124, %rd24, %rd133;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r521], {%r522, %r523, %r524, %r525};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r526], {%r527, %r528, %r529, %r530};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r535, %r536, %r537, %r538}, [%r15+4096];
	ld.shared.v4.b32 	{%r531, %r532, %r533, %r534}, [%r14];
	// begin inline asm
	@%p48 st.global.v4.b32 [ %rd123 + 0 ], { %r531, %r532, %r533, %r534 };
	// end inline asm
	// begin inline asm
	@%p49 st.global.v4.b32 [ %rd124 + 0 ], { %r535, %r536, %r537, %r538 };
	// end inline asm
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r616, %r622, 1;
	setp.gt.s32 	%p39, %r616, 1;
	selp.b32 	%r622, 0, %r616, %p39;
	or.b64 	%rd142, %rd10, %rd141;
	or.b64 	%rd143, %rd11, %rd141;
	.loc	1 195 22                        // wy_fast.py:195:22
	shl.b64 	%rd134, %rd142, 1;
	add.s64 	%rd125, %rd23, %rd134;
	shl.b64 	%rd135, %rd143, 1;
	add.s64 	%rd126, %rd23, %rd135;
	shl.b32 	%r617, %r622, 13;
	add.s32 	%r618, %r91, %r617;
	add.s32 	%r539, %r618, %r103;
	add.s32 	%r541, %r539, 4096;
	// begin inline asm
	cp.async.cg.shared.global [ %r539 + 0 ], [ %rd125 + 0 ], 0x10, %r516;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r541 + 0 ], [ %rd126 + 0 ], 0x10, %r516;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd141, 192;
	mov.pred 	%p45, 0;
	mov.pred 	%p46, %p45;
	mov.pred 	%p47, %p45;
	mov.pred 	%p48, %p9;
	mov.pred 	%p49, %p10;
	mov.b64 	%rd144, %rd26;
	mov.b64 	%rd145, %rd27;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p8 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
