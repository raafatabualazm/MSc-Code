//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_fwd_kernel_o      // -- Begin function chunk_fwd_kernel_o
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_fwd_kernel_o
.visible .entry chunk_fwd_kernel_o(
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_0,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_1,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_2,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_3,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_4,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_5,
	.param .f32 chunk_fwd_kernel_o_param_6,
	.param .u32 chunk_fwd_kernel_o_param_7,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_8
)
.reqntid 256
{
	.reg .pred 	%p<98>;
	.reg .b16 	%rs<119>;
	.reg .b32 	%r<2037>;
	.reg .b64 	%rd<203>;
	.loc	1 32 0                          // chunk_o.py:32:0
$L__func_begin0:
	.loc	1 32 0                          // chunk_o.py:32:0

// %bb.0:
	ld.param.b64 	%rd97, [chunk_fwd_kernel_o_param_0];
$L__tmp0:
	.loc	1 54 35                         // chunk_o.py:54:35
	mov.u32 	%r1529, %ctaid.x;
	ld.param.b64 	%rd98, [chunk_fwd_kernel_o_param_1];
	ld.param.b64 	%rd99, [chunk_fwd_kernel_o_param_2];
	.loc	1 54 53                         // chunk_o.py:54:53
	mov.u32 	%r1530, %ctaid.y;
	ld.param.b64 	%rd100, [chunk_fwd_kernel_o_param_3];
	.loc	1 54 71                         // chunk_o.py:54:71
	mov.u32 	%r1531, %ctaid.z;
	.loc	1 55 23                         // chunk_o.py:55:23
	shr.u32 	%r1532, %r1531, 5;
	ld.param.b64 	%rd101, [chunk_fwd_kernel_o_param_4];
	.loc	1 55 33                         // chunk_o.py:55:33
	and.b32 	%r1533, %r1531, 31;
	ld.param.b64 	%rd102, [chunk_fwd_kernel_o_param_5];
	ld.param.b32 	%r1534, [chunk_fwd_kernel_o_param_7];
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_o.py:64:24 ]
	add.s32 	%r1535, %r1534, 63;
	ld.param.b32 	%r1536, [chunk_fwd_kernel_o_param_6];
	.loc	2 40 28                         // standard.py:40:28 @[ chunk_o.py:64:24 ]
	shr.s32 	%r1537, %r1535, 31;
	shr.u32 	%r1538, %r1537, 26;
	add.s32 	%r1539, %r1535, %r1538;
	shr.s32 	%r1540, %r1539, 6;
$L__tmp2:
	.loc	1 65 26                         // chunk_o.py:65:26
	mad.lo.s32 	%r1541, %r1540, %r1532, %r1530;
	.loc	1 66 25                         // chunk_o.py:66:25
	and.b32 	%r1542, %r1531, 65504;
	.loc	1 69 16                         // chunk_o.py:69:16
	mul.lo.s32 	%r1543, %r1542, %r1534;
	.loc	1 69 20                         // chunk_o.py:69:20
	or.b32 	%r1544, %r1543, %r1533;
	.loc	1 69 27                         // chunk_o.py:69:27
	shl.b32 	%r1545, %r1544, 7;
	.loc	1 69 9                          // chunk_o.py:69:9
	mul.wide.s32 	%rd103, %r1545, 2;
	add.s64 	%rd104, %rd97, %rd103;
	.loc	1 70 9                          // chunk_o.py:70:9
	add.s64 	%rd105, %rd98, %rd103;
	.loc	1 71 9                          // chunk_o.py:71:9
	add.s64 	%rd106, %rd99, %rd103;
	.loc	1 72 9                          // chunk_o.py:72:9
	add.s64 	%rd107, %rd102, %rd103;
	.loc	1 73 17                         // chunk_o.py:73:17
	shl.b32 	%r1546, %r1541, 5;
	.loc	1 73 21                         // chunk_o.py:73:21
	or.b32 	%r1547, %r1546, %r1533;
	.loc	1 73 9                          // chunk_o.py:73:9
	mul.wide.s32 	%rd108, %r1547, 32768;
	add.s64 	%rd109, %rd100, %rd108;
	.loc	1 79 60                         // chunk_o.py:79:60
	shl.b32 	%r1548, %r1530, 6;
	.loc	1 79 85                         // chunk_o.py:79:85
	cvt.s64.s32 	%rd110, %r1534;
	.loc	1 81 68                         // chunk_o.py:81:68
	shl.b32 	%r1549, %r1529, 7;
	.loc	1 81 83                         // chunk_o.py:81:83
	cvt.s64.s32 	%rd111, %r1549;
	.loc	1 83 22                         // chunk_o.py:83:22
	mov.u32 	%r1550, %tid.x;
	shr.u32 	%r1551, %r1550, 5;
	and.b32 	%r1552, %r1550, 16;
	bfe.s32 	%r1553, %r1550, 4, 1;
	bfe.s32 	%r1554, %r1550, 5, 1;
	bfe.s32 	%r1555, %r1550, 6, 1;
	and.b32 	%r1556, %r1550, 128;
	shr.u32 	%r1557, %r1550, 4;
	bfe.u32 	%r1558, %r1550, 4, 4;
	or.b32 	%r1559, %r1558, 16;
	or.b32 	%r1560, %r1558, 32;
	or.b32 	%r1561, %r1557, 48;
	and.b32 	%r1562, %r1550, 8;
	bfe.u32 	%r1563, %r1550, 2, 3;
	shr.u32 	%r1564, %r1550, 1;
	and.b32 	%r1565, %r1564, 48;
	or.b32 	%r1566, %r1565, %r1563;
	or.b32 	%r1567, %r1566, 8;
	shl.b32 	%r1568, %r1550, 1;
	and.b32 	%r1569, %r1568, 6;
	or.b32 	%r1570, %r1569, 8;
	or.b32 	%r1571, %r1569, 9;
	or.b32 	%r1572, %r1569, 16;
	or.b32 	%r1573, %r1569, 17;
	or.b32 	%r1574, %r1569, 24;
	or.b32 	%r1575, %r1569, 25;
	or.b32 	%r1576, %r1569, 32;
	or.b32 	%r1577, %r1569, 33;
	or.b32 	%r1578, %r1569, 40;
	or.b32 	%r1579, %r1569, 41;
	or.b32 	%r1580, %r1569, 48;
	or.b32 	%r1581, %r1569, 49;
	or.b32 	%r1582, %r1569, 56;
	or.b32 	%r1583, %r1569, 57;
	or.b32 	%r1584, %r1558, %r1548;
	cvt.u64.u32 	%rd112, %r1584;
	or.b32 	%r1585, %r1559, %r1548;
	cvt.u64.u32 	%rd113, %r1585;
	or.b32 	%r1586, %r1560, %r1548;
	cvt.u64.u32 	%rd114, %r1586;
	or.b32 	%r1587, %r1561, %r1548;
	cvt.u64.u32 	%rd115, %r1587;
	or.b32 	%r1588, %r1566, %r1548;
	or.b32 	%r1589, %r1567, %r1548;
	or.b32 	%r1590, %r1569, %r1548;
	or.b32 	%r1591, %r1590, 1;
	or.b32 	%r1592, %r1570, %r1548;
	or.b32 	%r1593, %r1571, %r1548;
	or.b32 	%r1594, %r1572, %r1548;
	or.b32 	%r1595, %r1573, %r1548;
	or.b32 	%r1596, %r1574, %r1548;
	or.b32 	%r1597, %r1575, %r1548;
	or.b32 	%r1598, %r1576, %r1548;
	or.b32 	%r1599, %r1577, %r1548;
	or.b32 	%r1600, %r1578, %r1548;
	or.b32 	%r1601, %r1579, %r1548;
	or.b32 	%r1602, %r1580, %r1548;
	or.b32 	%r1603, %r1581, %r1548;
	or.b32 	%r1604, %r1582, %r1548;
	or.b32 	%r1605, %r1583, %r1548;
	mul.wide.u32 	%rd116, %r1584, 4096;
	mul.wide.u32 	%rd117, %r1585, 4096;
	mul.wide.u32 	%rd118, %r1586, 4096;
	mul.wide.u32 	%rd119, %r1587, 4096;
	shl.b32 	%r1606, %r1550, 3;
	and.b32 	%r1607, %r1606, 56;
	shl.b32 	%r1608, %r1562, 3;
	or.b32 	%r1609, %r1607, %r1608;
	cvt.u64.u32 	%rd120, %r1609;
	or.b64 	%rd121, %rd116, %rd120;
	or.b64 	%rd122, %rd117, %rd120;
	or.b64 	%rd123, %rd118, %rd120;
	or.b64 	%rd124, %rd119, %rd120;
	shl.b64 	%rd125, %rd121, 1;
	add.s64 	%rd1, %rd104, %rd125;
	shl.b64 	%rd126, %rd122, 1;
	add.s64 	%rd2, %rd104, %rd126;
	shl.b64 	%rd127, %rd123, 1;
	add.s64 	%rd3, %rd104, %rd127;
	shl.b64 	%rd128, %rd124, 1;
	add.s64 	%rd4, %rd104, %rd128;
	setp.lt.s64 	%p1, %rd112, %rd110;
	setp.lt.s64 	%p2, %rd113, %rd110;
	setp.lt.s64 	%p3, %rd114, %rd110;
	setp.lt.s64 	%p4, %rd115, %rd110;
	// begin inline asm
	mov.u32 %r1, 0x0;
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	@%p1 ld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	@%p2 ld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	@%p3 ld.global.v4.b32 { %r9, %r10, %r11, %r12 }, [ %rd3 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	@%p4 ld.global.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd4 + 0 ];
	// end inline asm
	shl.b32 	%r1610, %r1562, 9;
	or.b32 	%r1611, %r1607, %r1610;
	and.b32 	%r1612, %r1553, 72;
	and.b32 	%r1613, %r1554, 144;
	and.b32 	%r1614, %r1555, 288;
	shl.b32 	%r1615, %r1556, 2;
	or.b32 	%r1616, %r1613, %r1612;
	or.b32 	%r1617, %r1616, %r1615;
	xor.b32 	%r1618, %r1617, %r1611;
	xor.b32 	%r1619, %r1618, %r1614;
	shl.b32 	%r1620, %r1619, 1;
	mov.b32 	%r1621, global_smem;
	add.s32 	%r1622, %r1621, 32768;
	add.s32 	%r1623, %r1622, %r1620;
	st.shared.v4.b32 	[%r1623], {%r1, %r2, %r3, %r4};
	or.b32 	%r1624, %r1607, 1024;
	or.b32 	%r1625, %r1624, %r1610;
	or.b32 	%r1626, %r1617, %r1614;
	xor.b32 	%r1627, %r1626, %r1625;
	shl.b32 	%r1628, %r1627, 1;
	add.s32 	%r1629, %r1622, %r1628;
	st.shared.v4.b32 	[%r1629], {%r5, %r6, %r7, %r8};
	or.b32 	%r1630, %r1607, 2048;
	or.b32 	%r1631, %r1630, %r1610;
	xor.b32 	%r1632, %r1626, %r1631;
	shl.b32 	%r1633, %r1632, 1;
	add.s32 	%r1634, %r1622, %r1633;
	st.shared.v4.b32 	[%r1634], {%r9, %r10, %r11, %r12};
	or.b32 	%r1635, %r1607, 3072;
	or.b32 	%r1636, %r1635, %r1610;
	xor.b32 	%r1637, %r1626, %r1636;
	shl.b32 	%r1638, %r1637, 1;
	add.s32 	%r1639, %r1622, %r1638;
	st.shared.v4.b32 	[%r1639], {%r13, %r14, %r15, %r16};
	.loc	1 85 22                         // chunk_o.py:85:22
	add.s64 	%rd5, %rd105, %rd125;
	add.s64 	%rd6, %rd105, %rd126;
	add.s64 	%rd7, %rd105, %rd127;
	add.s64 	%rd8, %rd105, %rd128;
	// begin inline asm
	mov.u32 %r17, 0x0;
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	@%p1 ld.global.v4.b32 { %r17, %r18, %r19, %r20 }, [ %rd5 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	mov.u32 %r23, 0x0;
	mov.u32 %r24, 0x0;
	@%p2 ld.global.v4.b32 { %r21, %r22, %r23, %r24 }, [ %rd6 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r25, 0x0;
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	@%p3 ld.global.v4.b32 { %r25, %r26, %r27, %r28 }, [ %rd7 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r29, 0x0;
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	mov.u32 %r32, 0x0;
	@%p4 ld.global.v4.b32 { %r29, %r30, %r31, %r32 }, [ %rd8 + 0 ];
	// end inline asm
	add.s32 	%r1640, %r1621, 49152;
	add.s32 	%r1641, %r1640, %r1620;
	st.shared.v4.b32 	[%r1641], {%r17, %r18, %r19, %r20};
	add.s32 	%r1642, %r1640, %r1628;
	st.shared.v4.b32 	[%r1642], {%r21, %r22, %r23, %r24};
	add.s32 	%r1643, %r1640, %r1633;
	st.shared.v4.b32 	[%r1643], {%r25, %r26, %r27, %r28};
	add.s32 	%r1644, %r1640, %r1638;
	st.shared.v4.b32 	[%r1644], {%r29, %r30, %r31, %r32};
	.loc	1 87 22                         // chunk_o.py:87:22
	shl.b32 	%r1645, %r1558, 7;
	shl.b32 	%r1646, %r1557, 7;
	or.b32 	%r1647, %r1646, 14336;
	or.b64 	%rd129, %rd120, %rd111;
	mul.wide.u32 	%rd130, %r1558, 256;
	shl.b64 	%rd131, %rd129, 1;
	add.s64 	%rd132, %rd109, %rd131;
	add.s64 	%rd9, %rd132, %rd130;
	mul.wide.u32 	%rd133, %r1559, 256;
	add.s64 	%rd10, %rd132, %rd133;
	mul.wide.u32 	%rd134, %r1560, 256;
	add.s64 	%rd11, %rd132, %rd134;
	mul.wide.u32 	%rd135, %r1561, 256;
	add.s64 	%rd12, %rd132, %rd135;
	mul.wide.u32 	%rd136, %r1645, 2;
	add.s64 	%rd137, %rd132, %rd136;
	add.s64 	%rd13, %rd137, 16384;
	add.s64 	%rd14, %rd137, 20480;
	add.s64 	%rd15, %rd137, 24576;
	mul.wide.u32 	%rd138, %r1647, 2;
	add.s64 	%rd16, %rd132, %rd138;
	setp.gt.s32 	%p69, %r1549, -1;
	setp.lt.s64 	%p70, %rd129, 128;
	and.pred 	%p9, %p69, %p70;
	// begin inline asm
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	mov.u32 %r36, 0x0;
	@%p9 ld.global.v4.b32 { %r33, %r34, %r35, %r36 }, [ %rd9 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r37, 0x0;
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	@%p9 ld.global.v4.b32 { %r37, %r38, %r39, %r40 }, [ %rd10 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r41, 0x0;
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	@%p9 ld.global.v4.b32 { %r41, %r42, %r43, %r44 }, [ %rd11 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r45, 0x0;
	mov.u32 %r46, 0x0;
	mov.u32 %r47, 0x0;
	mov.u32 %r48, 0x0;
	@%p9 ld.global.v4.b32 { %r45, %r46, %r47, %r48 }, [ %rd12 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r49, 0x0;
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	@%p9 ld.global.v4.b32 { %r49, %r50, %r51, %r52 }, [ %rd13 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r53, 0x0;
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	@%p9 ld.global.v4.b32 { %r53, %r54, %r55, %r56 }, [ %rd14 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	@%p9 ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd15 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	@%p9 ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd16 + 0 ];
	// end inline asm
	shl.b32 	%r1648, %r1562, 10;
	or.b32 	%r1649, %r1607, %r1648;
	xor.b32 	%r1650, %r1616, %r1649;
	xor.b32 	%r1651, %r1650, %r1614;
	shl.b32 	%r1652, %r1651, 1;
	add.s32 	%r1653, %r1621, %r1652;
	shl.b32 	%r1654, %r1556, 3;
	add.s32 	%r1655, %r1653, %r1654;
	st.shared.v4.b32 	[%r1655], {%r33, %r34, %r35, %r36};
	or.b32 	%r1656, %r1624, %r1648;
	xor.b32 	%r1657, %r1626, %r1656;
	shl.b32 	%r1658, %r1657, 1;
	add.s32 	%r1659, %r1621, %r1658;
	st.shared.v4.b32 	[%r1659], {%r37, %r38, %r39, %r40};
	or.b32 	%r1660, %r1630, %r1648;
	xor.b32 	%r1661, %r1626, %r1660;
	shl.b32 	%r1662, %r1661, 1;
	add.s32 	%r1663, %r1621, %r1662;
	st.shared.v4.b32 	[%r1663], {%r41, %r42, %r43, %r44};
	or.b32 	%r1664, %r1635, %r1648;
	xor.b32 	%r1665, %r1626, %r1664;
	shl.b32 	%r1666, %r1665, 1;
	add.s32 	%r1667, %r1621, %r1666;
	st.shared.v4.b32 	[%r1667], {%r45, %r46, %r47, %r48};
	or.b32 	%r1668, %r1649, 4096;
	xor.b32 	%r1669, %r1626, %r1668;
	shl.b32 	%r1670, %r1669, 1;
	add.s32 	%r1671, %r1621, %r1670;
	st.shared.v4.b32 	[%r1671], {%r49, %r50, %r51, %r52};
	or.b32 	%r1672, %r1649, 5120;
	xor.b32 	%r1673, %r1626, %r1672;
	shl.b32 	%r1674, %r1673, 1;
	add.s32 	%r1675, %r1621, %r1674;
	st.shared.v4.b32 	[%r1675], {%r53, %r54, %r55, %r56};
	or.b32 	%r1676, %r1649, 6144;
	xor.b32 	%r1677, %r1626, %r1676;
	shl.b32 	%r1678, %r1677, 1;
	add.s32 	%r1679, %r1621, %r1678;
	st.shared.v4.b32 	[%r1679], {%r57, %r58, %r59, %r60};
	or.b32 	%r1680, %r1649, 7168;
	xor.b32 	%r1681, %r1626, %r1680;
	shl.b32 	%r1682, %r1681, 1;
	add.s32 	%r1683, %r1621, %r1682;
	st.shared.v4.b32 	[%r1683], {%r61, %r62, %r63, %r64};
	.loc	1 90 27                         // chunk_o.py:90:27
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1684, %r1551, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1685, %r1622, 4, 14;
	cvt.u64.u32 	%rd139, %r1685;
	or.b64 	%rd17, %rd139, 4611686293338849280;
	shl.b32 	%r1686, %r1684, 4;
	and.b32 	%r1687, %r1686, 64;
	shl.b32 	%r1688, %r1687, 8;
	add.s32 	%r1689, %r1688, %r1621;
	bfe.u32 	%r1690, %r1689, 4, 14;
	cvt.u64.u32 	%rd140, %r1690;
	or.b64 	%rd18, %rd140, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd17, %rd18, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1691, %r1621, 32800;
	bfe.u32 	%r1692, %r1691, 4, 14;
	cvt.u64.u32 	%rd141, %r1692;
	or.b64 	%rd19, %rd141, 4611686293338849280;
	add.s32 	%r1693, %r1621, 2048;
	add.s32 	%r1694, %r1688, %r1693;
	bfe.u32 	%r1695, %r1694, 4, 14;
	cvt.u64.u32 	%rd142, %r1695;
	or.b64 	%rd20, %rd142, 4611686293372403712;
	mov.pred 	%p17, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd19, %rd20, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1696, %r1621, 32832;
	bfe.u32 	%r1697, %r1696, 4, 14;
	cvt.u64.u32 	%rd143, %r1697;
	or.b64 	%rd21, %rd143, 4611686293338849280;
	add.s32 	%r1698, %r1621, 4096;
	add.s32 	%r1699, %r1688, %r1698;
	bfe.u32 	%r1700, %r1699, 4, 14;
	cvt.u64.u32 	%rd144, %r1700;
	or.b64 	%rd22, %rd144, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd21, %rd22, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1701, %r1621, 32864;
	bfe.u32 	%r1702, %r1701, 4, 14;
	cvt.u64.u32 	%rd145, %r1702;
	or.b64 	%rd23, %rd145, 4611686293338849280;
	add.s32 	%r1703, %r1621, 6144;
	add.s32 	%r1704, %r1688, %r1703;
	bfe.u32 	%r1705, %r1704, 4, 14;
	cvt.u64.u32 	%rd146, %r1705;
	or.b64 	%rd24, %rd146, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd23, %rd24, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1706, %r1621, 40960;
	bfe.u32 	%r1707, %r1706, 4, 14;
	cvt.u64.u32 	%rd147, %r1707;
	or.b64 	%rd25, %rd147, 4611686293338849280;
	add.s32 	%r1708, %r1689, 8192;
	bfe.u32 	%r1709, %r1708, 4, 14;
	cvt.u64.u32 	%rd148, %r1709;
	or.b64 	%rd26, %rd148, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd25, %rd26, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1710, %r1621, 40992;
	bfe.u32 	%r1711, %r1710, 4, 14;
	cvt.u64.u32 	%rd149, %r1711;
	or.b64 	%rd27, %rd149, 4611686293338849280;
	add.s32 	%r1712, %r1689, 10240;
	bfe.u32 	%r1713, %r1712, 4, 14;
	cvt.u64.u32 	%rd150, %r1713;
	or.b64 	%rd28, %rd150, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd27, %rd28, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1714, %r1621, 41024;
	bfe.u32 	%r1715, %r1714, 4, 14;
	cvt.u64.u32 	%rd151, %r1715;
	or.b64 	%rd29, %rd151, 4611686293338849280;
	add.s32 	%r1716, %r1689, 12288;
	bfe.u32 	%r1717, %r1716, 4, 14;
	cvt.u64.u32 	%rd152, %r1717;
	or.b64 	%rd30, %rd152, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd29, %rd30, %p17, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1718, %r1621, 41056;
	bfe.u32 	%r1719, %r1718, 4, 14;
	cvt.u64.u32 	%rd153, %r1719;
	or.b64 	%rd31, %rd153, 4611686293338849280;
	add.s32 	%r1720, %r1689, 14336;
	bfe.u32 	%r1721, %r1720, 4, 14;
	cvt.u64.u32 	%rd154, %r1721;
	or.b64 	%rd32, %rd154, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192}, %rd31, %rd32, %p17, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %r161,%r162,%r163,%r164,%r165,%r166,%r167,%r168,%r169,%r170,%r171,%r172,%r173,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 92 27                         // chunk_o.py:92:27
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1722, %r1640, 4, 14;
	cvt.u64.u32 	%rd155, %r1722;
	or.b64 	%rd34, %rd155, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd17, %rd34, 0, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1723, %r1621, 49184;
	bfe.u32 	%r1724, %r1723, 4, 14;
	cvt.u64.u32 	%rd156, %r1724;
	or.b64 	%rd36, %rd156, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd19, %rd36, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1725, %r1621, 49216;
	bfe.u32 	%r1726, %r1725, 4, 14;
	cvt.u64.u32 	%rd157, %r1726;
	or.b64 	%rd38, %rd157, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd21, %rd38, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1727, %r1621, 49248;
	bfe.u32 	%r1728, %r1727, 4, 14;
	cvt.u64.u32 	%rd158, %r1728;
	or.b64 	%rd40, %rd158, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd23, %rd40, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1729, %r1621, 57344;
	bfe.u32 	%r1730, %r1729, 4, 14;
	cvt.u64.u32 	%rd159, %r1730;
	or.b64 	%rd42, %rd159, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd25, %rd42, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1731, %r1621, 57376;
	bfe.u32 	%r1732, %r1731, 4, 14;
	cvt.u64.u32 	%rd160, %r1732;
	or.b64 	%rd44, %rd160, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd27, %rd44, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1733, %r1621, 57408;
	bfe.u32 	%r1734, %r1733, 4, 14;
	cvt.u64.u32 	%rd161, %r1734;
	or.b64 	%rd46, %rd161, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd29, %rd46, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1735, %r1621, 57440;
	bfe.u32 	%r1736, %r1735, 4, 14;
	cvt.u64.u32 	%rd162, %r1736;
	or.b64 	%rd48, %rd162, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672}, %rd31, %rd48, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1737, %r1621, 53248;
	bfe.u32 	%r1738, %r1737, 4, 14;
	cvt.u64.u32 	%rd163, %r1738;
	or.b64 	%rd50, %rd163, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd17, %rd50, 0, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1739, %r1621, 53280;
	bfe.u32 	%r1740, %r1739, 4, 14;
	cvt.u64.u32 	%rd164, %r1740;
	or.b64 	%rd52, %rd164, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd19, %rd52, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1741, %r1621, 53312;
	bfe.u32 	%r1742, %r1741, 4, 14;
	cvt.u64.u32 	%rd165, %r1742;
	or.b64 	%rd54, %rd165, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd21, %rd54, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1743, %r1621, 53344;
	bfe.u32 	%r1744, %r1743, 4, 14;
	cvt.u64.u32 	%rd166, %r1744;
	or.b64 	%rd56, %rd166, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd23, %rd56, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1745, %r1621, 61440;
	bfe.u32 	%r1746, %r1745, 4, 14;
	cvt.u64.u32 	%rd167, %r1746;
	or.b64 	%rd58, %rd167, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd25, %rd58, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1747, %r1621, 61472;
	bfe.u32 	%r1748, %r1747, 4, 14;
	cvt.u64.u32 	%rd168, %r1748;
	or.b64 	%rd60, %rd168, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd27, %rd60, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1749, %r1621, 61504;
	bfe.u32 	%r1750, %r1749, 4, 14;
	cvt.u64.u32 	%rd169, %r1750;
	or.b64 	%rd62, %rd169, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd29, %rd62, %p17, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r1751, %r1621, 61536;
	bfe.u32 	%r1752, %r1751, 4, 14;
	cvt.u64.u32 	%rd170, %r1752;
	or.b64 	%rd64, %rd170, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912}, %rd31, %rd64, %p17, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r897,%r898,%r899,%r900,%r901,%r902,%r903,%r904,%r905,%r906,%r907,%r908,%r909,%r910,%r911,%r912
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 95 13                         // chunk_o.py:95:13
	mul.wide.s32 	%rd171, %r1544, 4;
	add.s64 	%rd172, %rd101, %rd171;
	.loc	1 97 22                         // chunk_o.py:97:22
	shl.b32 	%r1753, %r1588, 7;
	cvt.u64.u32 	%rd173, %r1753;
	add.s64 	%rd65, %rd172, %rd173;
	shl.b32 	%r1754, %r1589, 7;
	cvt.u64.u32 	%rd174, %r1754;
	add.s64 	%rd66, %rd172, %rd174;
	shl.b32 	%r1755, %r1590, 7;
	cvt.u64.u32 	%rd175, %r1755;
	add.s64 	%rd69, %rd172, %rd175;
	shl.b32 	%r1756, %r1591, 7;
	cvt.u64.u32 	%rd176, %r1756;
	add.s64 	%rd70, %rd172, %rd176;
	shl.b32 	%r1757, %r1592, 7;
	cvt.u64.u32 	%rd177, %r1757;
	add.s64 	%rd71, %rd172, %rd177;
	shl.b32 	%r1758, %r1593, 7;
	cvt.u64.u32 	%rd178, %r1758;
	add.s64 	%rd72, %rd172, %rd178;
	shl.b32 	%r1759, %r1594, 7;
	cvt.u64.u32 	%rd179, %r1759;
	add.s64 	%rd73, %rd172, %rd179;
	shl.b32 	%r1760, %r1595, 7;
	cvt.u64.u32 	%rd180, %r1760;
	add.s64 	%rd74, %rd172, %rd180;
	shl.b32 	%r1761, %r1596, 7;
	cvt.u64.u32 	%rd181, %r1761;
	add.s64 	%rd75, %rd172, %rd181;
	shl.b32 	%r1762, %r1597, 7;
	cvt.u64.u32 	%rd182, %r1762;
	add.s64 	%rd76, %rd172, %rd182;
	shl.b32 	%r1763, %r1598, 7;
	cvt.u64.u32 	%rd183, %r1763;
	add.s64 	%rd77, %rd172, %rd183;
	shl.b32 	%r1764, %r1599, 7;
	cvt.u64.u32 	%rd184, %r1764;
	add.s64 	%rd78, %rd172, %rd184;
	shl.b32 	%r1765, %r1600, 7;
	cvt.u64.u32 	%rd185, %r1765;
	add.s64 	%rd79, %rd172, %rd185;
	shl.b32 	%r1766, %r1601, 7;
	cvt.u64.u32 	%rd186, %r1766;
	add.s64 	%rd80, %rd172, %rd186;
	shl.b32 	%r1767, %r1602, 7;
	cvt.u64.u32 	%rd187, %r1767;
	add.s64 	%rd81, %rd172, %rd187;
	shl.b32 	%r1768, %r1603, 7;
	cvt.u64.u32 	%rd188, %r1768;
	add.s64 	%rd82, %rd172, %rd188;
	shl.b32 	%r1769, %r1604, 7;
	cvt.u64.u32 	%rd189, %r1769;
	add.s64 	%rd83, %rd172, %rd189;
	shl.b32 	%r1770, %r1605, 7;
	cvt.u64.u32 	%rd190, %r1770;
	add.s64 	%rd84, %rd172, %rd190;
	setp.lt.s32 	%p38, %r1588, %r1534;
	setp.lt.s32 	%p39, %r1589, %r1534;
	setp.lt.s32 	%p42, %r1590, %r1534;
	setp.lt.s32 	%p43, %r1591, %r1534;
	setp.lt.s32 	%p44, %r1592, %r1534;
	setp.lt.s32 	%p45, %r1593, %r1534;
	setp.lt.s32 	%p46, %r1594, %r1534;
	setp.lt.s32 	%p47, %r1595, %r1534;
	setp.lt.s32 	%p48, %r1596, %r1534;
	setp.lt.s32 	%p49, %r1597, %r1534;
	setp.lt.s32 	%p50, %r1598, %r1534;
	setp.lt.s32 	%p51, %r1599, %r1534;
	setp.lt.s32 	%p52, %r1600, %r1534;
	setp.lt.s32 	%p53, %r1601, %r1534;
	setp.lt.s32 	%p54, %r1602, %r1534;
	setp.lt.s32 	%p55, %r1603, %r1534;
	setp.lt.s32 	%p56, %r1604, %r1534;
	setp.lt.s32 	%p57, %r1605, %r1534;
	// begin inline asm
	mov.u32 %r1153, 0x0;
	@%p38 ld.global.b32 { %r1153 }, [ %rd65 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1154, 0x0;
	@%p39 ld.global.b32 { %r1154 }, [ %rd66 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1155, 0x0;
	@%p38 ld.global.b32 { %r1155 }, [ %rd65 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1156, 0x0;
	@%p39 ld.global.b32 { %r1156 }, [ %rd66 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1157, 0x0;
	@%p42 ld.global.b32 { %r1157 }, [ %rd69 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1158, 0x0;
	@%p43 ld.global.b32 { %r1158 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1159, 0x0;
	@%p44 ld.global.b32 { %r1159 }, [ %rd71 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1160, 0x0;
	@%p45 ld.global.b32 { %r1160 }, [ %rd72 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1161, 0x0;
	@%p46 ld.global.b32 { %r1161 }, [ %rd73 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1162, 0x0;
	@%p47 ld.global.b32 { %r1162 }, [ %rd74 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1163, 0x0;
	@%p48 ld.global.b32 { %r1163 }, [ %rd75 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1164, 0x0;
	@%p49 ld.global.b32 { %r1164 }, [ %rd76 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1165, 0x0;
	@%p50 ld.global.b32 { %r1165 }, [ %rd77 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1166, 0x0;
	@%p51 ld.global.b32 { %r1166 }, [ %rd78 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1167, 0x0;
	@%p52 ld.global.b32 { %r1167 }, [ %rd79 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1168, 0x0;
	@%p53 ld.global.b32 { %r1168 }, [ %rd80 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1169, 0x0;
	@%p54 ld.global.b32 { %r1169 }, [ %rd81 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1170, 0x0;
	@%p55 ld.global.b32 { %r1170 }, [ %rd82 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1171, 0x0;
	@%p56 ld.global.b32 { %r1171 }, [ %rd83 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1172, 0x0;
	@%p57 ld.global.b32 { %r1172 }, [ %rd84 + 0 ];
	// end inline asm
	.loc	1 98 24                         // chunk_o.py:98:24
	mul.f32 	%r1771, %r1153, 0f3FB8AA3B;
	ex2.approx.f32 	%r1772, %r1771;
	mul.f32 	%r1773, %r1154, 0f3FB8AA3B;
	ex2.approx.f32 	%r1774, %r1773;
	.loc	1 99 39                         // chunk_o.py:99:39
	sub.f32 	%r1775, %r1155, %r1157;
	sub.f32 	%r1776, %r1155, %r1158;
	sub.f32 	%r1777, %r1156, %r1157;
	sub.f32 	%r1778, %r1156, %r1158;
	sub.f32 	%r1779, %r1155, %r1159;
	sub.f32 	%r1780, %r1155, %r1160;
	sub.f32 	%r1781, %r1156, %r1159;
	sub.f32 	%r1782, %r1156, %r1160;
	sub.f32 	%r1783, %r1155, %r1161;
	sub.f32 	%r1784, %r1155, %r1162;
	sub.f32 	%r1785, %r1156, %r1161;
	sub.f32 	%r1786, %r1156, %r1162;
	sub.f32 	%r1787, %r1155, %r1163;
	sub.f32 	%r1788, %r1155, %r1164;
	sub.f32 	%r1789, %r1156, %r1163;
	sub.f32 	%r1790, %r1156, %r1164;
	sub.f32 	%r1791, %r1155, %r1165;
	sub.f32 	%r1792, %r1155, %r1166;
	sub.f32 	%r1793, %r1156, %r1165;
	sub.f32 	%r1794, %r1156, %r1166;
	sub.f32 	%r1795, %r1155, %r1167;
	sub.f32 	%r1796, %r1155, %r1168;
	sub.f32 	%r1797, %r1156, %r1167;
	sub.f32 	%r1798, %r1156, %r1168;
	sub.f32 	%r1799, %r1155, %r1169;
	sub.f32 	%r1800, %r1155, %r1170;
	sub.f32 	%r1801, %r1156, %r1169;
	sub.f32 	%r1802, %r1156, %r1170;
	sub.f32 	%r1803, %r1156, %r1171;
	sub.f32 	%r1804, %r1156, %r1172;
	.loc	1 99 24                         // chunk_o.py:99:24
	mul.f32 	%r1805, %r1775, 0f3FB8AA3B;
	ex2.approx.f32 	%r1806, %r1805;
	mul.f32 	%r1807, %r1776, 0f3FB8AA3B;
	ex2.approx.f32 	%r1808, %r1807;
	mul.f32 	%r1809, %r1777, 0f3FB8AA3B;
	ex2.approx.f32 	%r1810, %r1809;
	mul.f32 	%r1811, %r1778, 0f3FB8AA3B;
	ex2.approx.f32 	%r1812, %r1811;
	mul.f32 	%r1813, %r1779, 0f3FB8AA3B;
	ex2.approx.f32 	%r1814, %r1813;
	mul.f32 	%r1815, %r1780, 0f3FB8AA3B;
	ex2.approx.f32 	%r1816, %r1815;
	mul.f32 	%r1817, %r1781, 0f3FB8AA3B;
	ex2.approx.f32 	%r1818, %r1817;
	mul.f32 	%r1819, %r1782, 0f3FB8AA3B;
	ex2.approx.f32 	%r1820, %r1819;
	mul.f32 	%r1821, %r1783, 0f3FB8AA3B;
	ex2.approx.f32 	%r1822, %r1821;
	mul.f32 	%r1823, %r1784, 0f3FB8AA3B;
	ex2.approx.f32 	%r1824, %r1823;
	mul.f32 	%r1825, %r1785, 0f3FB8AA3B;
	ex2.approx.f32 	%r1826, %r1825;
	mul.f32 	%r1827, %r1786, 0f3FB8AA3B;
	ex2.approx.f32 	%r1828, %r1827;
	mul.f32 	%r1829, %r1787, 0f3FB8AA3B;
	ex2.approx.f32 	%r1830, %r1829;
	mul.f32 	%r1831, %r1788, 0f3FB8AA3B;
	ex2.approx.f32 	%r1832, %r1831;
	mul.f32 	%r1833, %r1789, 0f3FB8AA3B;
	ex2.approx.f32 	%r1834, %r1833;
	mul.f32 	%r1835, %r1790, 0f3FB8AA3B;
	ex2.approx.f32 	%r1836, %r1835;
	mul.f32 	%r1837, %r1791, 0f3FB8AA3B;
	ex2.approx.f32 	%r1838, %r1837;
	mul.f32 	%r1839, %r1792, 0f3FB8AA3B;
	ex2.approx.f32 	%r1840, %r1839;
	mul.f32 	%r1841, %r1793, 0f3FB8AA3B;
	ex2.approx.f32 	%r1842, %r1841;
	mul.f32 	%r1843, %r1794, 0f3FB8AA3B;
	ex2.approx.f32 	%r1844, %r1843;
	mul.f32 	%r1845, %r1795, 0f3FB8AA3B;
	ex2.approx.f32 	%r1846, %r1845;
	mul.f32 	%r1847, %r1796, 0f3FB8AA3B;
	ex2.approx.f32 	%r1848, %r1847;
	mul.f32 	%r1849, %r1797, 0f3FB8AA3B;
	ex2.approx.f32 	%r1850, %r1849;
	mul.f32 	%r1851, %r1798, 0f3FB8AA3B;
	ex2.approx.f32 	%r1852, %r1851;
	mul.f32 	%r1853, %r1799, 0f3FB8AA3B;
	ex2.approx.f32 	%r1854, %r1853;
	mul.f32 	%r1855, %r1800, 0f3FB8AA3B;
	ex2.approx.f32 	%r1856, %r1855;
	mul.f32 	%r1857, %r1801, 0f3FB8AA3B;
	ex2.approx.f32 	%r1858, %r1857;
	mul.f32 	%r1859, %r1802, 0f3FB8AA3B;
	ex2.approx.f32 	%r1860, %r1859;
	mul.f32 	%r1861, %r1803, 0f3FB8AA3B;
	ex2.approx.f32 	%r1862, %r1861;
	mul.f32 	%r1863, %r1804, 0f3FB8AA3B;
	ex2.approx.f32 	%r1864, %r1863;
	.loc	1 99 20                         // chunk_o.py:99:20
	mul.f32 	%r1865, %r657, %r1806;
	mul.f32 	%r1866, %r658, %r1808;
	mul.f32 	%r1867, %r659, %r1810;
	mul.f32 	%r1868, %r660, %r1812;
	mul.f32 	%r1869, %r661, %r1814;
	mul.f32 	%r1870, %r662, %r1816;
	mul.f32 	%r1871, %r663, %r1818;
	mul.f32 	%r1872, %r664, %r1820;
	mul.f32 	%r1873, %r665, %r1822;
	mul.f32 	%r1874, %r666, %r1824;
	mul.f32 	%r1875, %r667, %r1826;
	mul.f32 	%r1876, %r668, %r1828;
	mul.f32 	%r1877, %r669, %r1830;
	mul.f32 	%r1878, %r670, %r1832;
	mul.f32 	%r1879, %r671, %r1834;
	mul.f32 	%r1880, %r672, %r1836;
	mul.f32 	%r1881, %r897, %r1838;
	mul.f32 	%r1882, %r898, %r1840;
	mul.f32 	%r1883, %r899, %r1842;
	mul.f32 	%r1884, %r900, %r1844;
	mul.f32 	%r1885, %r901, %r1846;
	mul.f32 	%r1886, %r902, %r1848;
	mul.f32 	%r1887, %r903, %r1850;
	mul.f32 	%r1888, %r904, %r1852;
	mul.f32 	%r1889, %r905, %r1854;
	mul.f32 	%r1890, %r906, %r1856;
	mul.f32 	%r1891, %r907, %r1858;
	mul.f32 	%r1892, %r908, %r1860;
	mul.f32 	%r1893, %r911, %r1862;
	mul.f32 	%r1894, %r912, %r1864;
	.loc	1 109 27                        // chunk_o.py:109:27
	setp.ge.u32 	%p71, %r1566, %r1569;
	setp.gt.u32 	%p72, %r1566, %r1569;
	setp.ge.u32 	%p73, %r1566, %r1570;
	setp.ge.u32 	%p74, %r1566, %r1571;
	setp.ge.u32 	%p75, %r1567, %r1571;
	setp.ge.u32 	%p76, %r1566, %r1572;
	setp.ge.u32 	%p77, %r1566, %r1573;
	setp.ge.u32 	%p78, %r1567, %r1572;
	setp.ge.u32 	%p79, %r1567, %r1573;
	setp.ge.u32 	%p80, %r1566, %r1574;
	setp.ge.u32 	%p81, %r1566, %r1575;
	setp.ge.u32 	%p82, %r1567, %r1574;
	setp.ge.u32 	%p83, %r1567, %r1575;
	setp.ge.u32 	%p84, %r1566, %r1576;
	setp.ge.u32 	%p85, %r1566, %r1577;
	setp.ge.u32 	%p86, %r1567, %r1576;
	setp.ge.u32 	%p87, %r1567, %r1577;
	setp.ge.u32 	%p88, %r1566, %r1578;
	setp.ge.u32 	%p89, %r1566, %r1579;
	setp.ge.u32 	%p90, %r1567, %r1578;
	setp.ge.u32 	%p91, %r1567, %r1579;
	setp.ge.u32 	%p92, %r1566, %r1580;
	setp.ge.u32 	%p93, %r1566, %r1581;
	setp.ge.u32 	%p94, %r1567, %r1580;
	setp.ge.u32 	%p95, %r1567, %r1581;
	setp.ge.u32 	%p96, %r1567, %r1582;
	setp.ge.u32 	%p97, %r1567, %r1583;
	.loc	1 115 18                        // chunk_o.py:115:18
	add.s64 	%rd191, %rd116, %rd129;
	add.s64 	%rd192, %rd117, %rd129;
	add.s64 	%rd193, %rd118, %rd129;
	add.s64 	%rd194, %rd119, %rd129;
	shl.b64 	%rd195, %rd191, 1;
	add.s64 	%rd85, %rd106, %rd195;
	shl.b64 	%rd196, %rd192, 1;
	add.s64 	%rd86, %rd106, %rd196;
	shl.b64 	%rd197, %rd193, 1;
	add.s64 	%rd87, %rd106, %rd197;
	shl.b64 	%rd198, %rd194, 1;
	add.s64 	%rd88, %rd106, %rd198;
	and.pred 	%p58, %p9, %p1;
	and.pred 	%p59, %p9, %p2;
	and.pred 	%p60, %p9, %p3;
	and.pred 	%p61, %p9, %p4;
	// begin inline asm
	mov.u32 %r1173, 0x0;
	mov.u32 %r1174, 0x0;
	mov.u32 %r1175, 0x0;
	mov.u32 %r1176, 0x0;
	@%p58 ld.global.v4.b32 { %r1173, %r1174, %r1175, %r1176 }, [ %rd85 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1177, 0x0;
	mov.u32 %r1178, 0x0;
	mov.u32 %r1179, 0x0;
	mov.u32 %r1180, 0x0;
	@%p59 ld.global.v4.b32 { %r1177, %r1178, %r1179, %r1180 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1181, 0x0;
	mov.u32 %r1182, 0x0;
	mov.u32 %r1183, 0x0;
	mov.u32 %r1184, 0x0;
	@%p60 ld.global.v4.b32 { %r1181, %r1182, %r1183, %r1184 }, [ %rd87 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1185, 0x0;
	mov.u32 %r1186, 0x0;
	mov.u32 %r1187, 0x0;
	mov.u32 %r1188, 0x0;
	@%p61 ld.global.v4.b32 { %r1185, %r1186, %r1187, %r1188 }, [ %rd88 + 0 ];
	// end inline asm
	bar.sync 	0;
	add.s32 	%r1895, %r1621, %r1620;
	st.shared.v4.b32 	[%r1895], {%r1173, %r1174, %r1175, %r1176};
	add.s32 	%r1896, %r1621, %r1628;
	st.shared.v4.b32 	[%r1896], {%r1177, %r1178, %r1179, %r1180};
	add.s32 	%r1897, %r1621, %r1633;
	st.shared.v4.b32 	[%r1897], {%r1181, %r1182, %r1183, %r1184};
	add.s32 	%r1898, %r1621, %r1638;
	st.shared.v4.b32 	[%r1898], {%r1185, %r1186, %r1187, %r1188};
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs1, %r1865;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs2, %rs1, 0x0000, %p42;
	selp.b16 	%rs3, %rs2, 0x0000, %p71;
	selp.b16 	%rs4, %rs3, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs5, %r1866;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs6, %rs5, 0x0000, %p43;
	selp.b16 	%rs7, %rs6, 0x0000, %p72;
	selp.b16 	%rs8, %rs7, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs9, %r1867;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs10, %rs9, 0x0000, %p42;
	selp.b16 	%rs11, %rs10, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs12, %r1868;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs13, %rs12, 0x0000, %p43;
	selp.b16 	%rs14, %rs13, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs15, %r1869;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs16, %rs15, 0x0000, %p44;
	selp.b16 	%rs17, %rs16, 0x0000, %p73;
	selp.b16 	%rs18, %rs17, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs19, %r1870;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs20, %rs19, 0x0000, %p45;
	selp.b16 	%rs21, %rs20, 0x0000, %p74;
	selp.b16 	%rs22, %rs21, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs23, %r1871;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs24, %rs23, 0x0000, %p44;
	selp.b16 	%rs25, %rs24, 0x0000, %p71;
	selp.b16 	%rs26, %rs25, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs27, %r1872;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs28, %rs27, 0x0000, %p45;
	selp.b16 	%rs29, %rs28, 0x0000, %p75;
	selp.b16 	%rs30, %rs29, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs31, %r1873;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs32, %rs31, 0x0000, %p46;
	selp.b16 	%rs33, %rs32, 0x0000, %p76;
	selp.b16 	%rs34, %rs33, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs35, %r1874;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs36, %rs35, 0x0000, %p47;
	selp.b16 	%rs37, %rs36, 0x0000, %p77;
	selp.b16 	%rs38, %rs37, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs39, %r1875;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs40, %rs39, 0x0000, %p46;
	selp.b16 	%rs41, %rs40, 0x0000, %p78;
	selp.b16 	%rs42, %rs41, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs43, %r1876;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs44, %rs43, 0x0000, %p47;
	selp.b16 	%rs45, %rs44, 0x0000, %p79;
	selp.b16 	%rs46, %rs45, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs47, %r1877;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs48, %rs47, 0x0000, %p48;
	selp.b16 	%rs49, %rs48, 0x0000, %p80;
	selp.b16 	%rs50, %rs49, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs51, %r1878;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs52, %rs51, 0x0000, %p49;
	selp.b16 	%rs53, %rs52, 0x0000, %p81;
	selp.b16 	%rs54, %rs53, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs55, %r1879;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs56, %rs55, 0x0000, %p48;
	selp.b16 	%rs57, %rs56, 0x0000, %p82;
	selp.b16 	%rs58, %rs57, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs59, %r1880;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs60, %rs59, 0x0000, %p49;
	selp.b16 	%rs61, %rs60, 0x0000, %p83;
	selp.b16 	%rs62, %rs61, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs63, %r1881;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs64, %rs63, 0x0000, %p50;
	selp.b16 	%rs65, %rs64, 0x0000, %p84;
	selp.b16 	%rs66, %rs65, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs67, %r1882;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs68, %rs67, 0x0000, %p51;
	selp.b16 	%rs69, %rs68, 0x0000, %p85;
	selp.b16 	%rs70, %rs69, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs71, %r1883;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs72, %rs71, 0x0000, %p50;
	selp.b16 	%rs73, %rs72, 0x0000, %p86;
	selp.b16 	%rs74, %rs73, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs75, %r1884;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs76, %rs75, 0x0000, %p51;
	selp.b16 	%rs77, %rs76, 0x0000, %p87;
	selp.b16 	%rs78, %rs77, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs79, %r1885;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs80, %rs79, 0x0000, %p52;
	selp.b16 	%rs81, %rs80, 0x0000, %p88;
	selp.b16 	%rs82, %rs81, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs83, %r1886;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs84, %rs83, 0x0000, %p53;
	selp.b16 	%rs85, %rs84, 0x0000, %p89;
	selp.b16 	%rs86, %rs85, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs87, %r1887;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs88, %rs87, 0x0000, %p52;
	selp.b16 	%rs89, %rs88, 0x0000, %p90;
	selp.b16 	%rs90, %rs89, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs91, %r1888;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs92, %rs91, 0x0000, %p53;
	selp.b16 	%rs93, %rs92, 0x0000, %p91;
	selp.b16 	%rs94, %rs93, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs95, %r1889;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs96, %rs95, 0x0000, %p54;
	selp.b16 	%rs97, %rs96, 0x0000, %p92;
	selp.b16 	%rs98, %rs97, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs99, %r1890;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs100, %rs99, 0x0000, %p55;
	selp.b16 	%rs101, %rs100, 0x0000, %p93;
	selp.b16 	%rs102, %rs101, 0x0000, %p38;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs103, %r1891;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs104, %rs103, 0x0000, %p54;
	selp.b16 	%rs105, %rs104, 0x0000, %p94;
	selp.b16 	%rs106, %rs105, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs107, %r1892;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs108, %rs107, 0x0000, %p55;
	selp.b16 	%rs109, %rs108, 0x0000, %p95;
	selp.b16 	%rs110, %rs109, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs111, %r1893;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs112, %rs111, 0x0000, %p56;
	selp.b16 	%rs113, %rs112, 0x0000, %p96;
	selp.b16 	%rs114, %rs113, 0x0000, %p39;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs115, %r1894;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs116, %rs115, 0x0000, %p57;
	selp.b16 	%rs117, %rs116, 0x0000, %p97;
	selp.b16 	%rs118, %rs117, 0x0000, %p39;
	.loc	1 118 50                        // chunk_o.py:118:50
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	mov.b32 	%r1221, {%rs4, %rs8};
	mov.b32 	%r1222, {%rs11, %rs14};
	mov.b32 	%r1223, {%rs18, %rs22};
	mov.b32 	%r1224, {%rs26, %rs30};
	mov.b32 	%r1289, {%rs34, %rs38};
	mov.b32 	%r1290, {%rs42, %rs46};
	mov.b32 	%r1291, {%rs50, %rs54};
	mov.b32 	%r1292, {%rs58, %rs62};
	mov.b32 	%r1357, {%rs66, %rs70};
	mov.b32 	%r1358, {%rs74, %rs78};
	mov.b32 	%r1359, {%rs82, %rs86};
	mov.b32 	%r1360, {%rs90, %rs94};
	mov.b32 	%r1425, {%rs98, %rs102};
	mov.b32 	%r1426, {%rs106, %rs110};
	mov.b32 	%r1428, {%rs114, %rs118};
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r1899, %r1687, 7;
	add.s32 	%r1900, %r1899, %r1621;
	bfe.u32 	%r1901, %r1900, 4, 14;
	cvt.u64.u32 	%rd199, %r1901;
	or.b64 	%rd89, %rd199, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1293,%r1294,%r1295,%r1296,%r1297,%r1298,%r1299,%r1300,%r1301,%r1302,%r1303,%r1304,%r1305,%r1306,%r1307,%r1308,%r1309,%r1310,%r1311,%r1312,%r1313,%r1314,%r1315,%r1316,%r1317,%r1318,%r1319,%r1320,%r1321,%r1322,%r1323,%r1324}, {%r1221,%r1222,%r1223,%r1224}, %rd89, 0, 1, 1, 1;
	// end inline asm
	add.s32 	%r1902, %r1899, %r1693;
	bfe.u32 	%r1903, %r1902, 4, 14;
	cvt.u64.u32 	%rd200, %r1903;
	or.b64 	%rd90, %rd200, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1293,%r1294,%r1295,%r1296,%r1297,%r1298,%r1299,%r1300,%r1301,%r1302,%r1303,%r1304,%r1305,%r1306,%r1307,%r1308,%r1309,%r1310,%r1311,%r1312,%r1313,%r1314,%r1315,%r1316,%r1317,%r1318,%r1319,%r1320,%r1321,%r1322,%r1323,%r1324}, {%r1289,%r1290,%r1291,%r1292}, %rd90, %p17, 1, 1, 1;
	// end inline asm
	add.s32 	%r1904, %r1899, %r1698;
	bfe.u32 	%r1905, %r1904, 4, 14;
	cvt.u64.u32 	%rd201, %r1905;
	or.b64 	%rd91, %rd201, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1293,%r1294,%r1295,%r1296,%r1297,%r1298,%r1299,%r1300,%r1301,%r1302,%r1303,%r1304,%r1305,%r1306,%r1307,%r1308,%r1309,%r1310,%r1311,%r1312,%r1313,%r1314,%r1315,%r1316,%r1317,%r1318,%r1319,%r1320,%r1321,%r1322,%r1323,%r1324}, {%r1357,%r1358,%r1359,%r1360}, %rd91, %p17, 1, 1, 1;
	// end inline asm
	add.s32 	%r1906, %r1899, %r1703;
	bfe.u32 	%r1907, %r1906, 4, 14;
	cvt.u64.u32 	%rd202, %r1907;
	or.b64 	%rd92, %rd202, 4611686293338849280;
	mov.b32 	%r1427, 0;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1293,%r1294,%r1295,%r1296,%r1297,%r1298,%r1299,%r1300,%r1301,%r1302,%r1303,%r1304,%r1305,%r1306,%r1307,%r1308,%r1309,%r1310,%r1311,%r1312,%r1313,%r1314,%r1315,%r1316,%r1317,%r1318,%r1319,%r1320,%r1321,%r1322,%r1323,%r1324}, {%r1425,%r1426,%r1427,%r1428}, %rd92, %p17, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %r1293,%r1294,%r1295,%r1296,%r1297,%r1298,%r1299,%r1300,%r1301,%r1302,%r1303,%r1304,%r1305,%r1306,%r1307,%r1308,%r1309,%r1310,%r1311,%r1312,%r1313,%r1314,%r1315,%r1316,%r1317,%r1318,%r1319,%r1320,%r1321,%r1322,%r1323,%r1324
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1908, %r162, %r1772;
	mul.f32 	%r1909, %r161, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1910, %r1536, %r1294;
	mul.f32 	%r1911, %r1536, %r1293;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1912, %r1536, %r1909, %r1911;
	fma.rn.f32 	%r1913, %r1536, %r1908, %r1910;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1494, %r1913, %r1912;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1914, %r164, %r1774;
	mul.f32 	%r1915, %r163, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1916, %r1536, %r1296;
	mul.f32 	%r1917, %r1536, %r1295;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1918, %r1536, %r1915, %r1917;
	fma.rn.f32 	%r1919, %r1536, %r1914, %r1916;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1495, %r1919, %r1918;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1920, %r166, %r1772;
	mul.f32 	%r1921, %r165, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1922, %r1536, %r1298;
	mul.f32 	%r1923, %r1536, %r1297;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1924, %r1536, %r1921, %r1923;
	fma.rn.f32 	%r1925, %r1536, %r1920, %r1922;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1496, %r1925, %r1924;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1926, %r168, %r1774;
	mul.f32 	%r1927, %r167, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1928, %r1536, %r1300;
	mul.f32 	%r1929, %r1536, %r1299;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1930, %r1536, %r1927, %r1929;
	fma.rn.f32 	%r1931, %r1536, %r1926, %r1928;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1497, %r1931, %r1930;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1932, %r170, %r1772;
	mul.f32 	%r1933, %r169, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1934, %r1536, %r1302;
	mul.f32 	%r1935, %r1536, %r1301;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1936, %r1536, %r1933, %r1935;
	fma.rn.f32 	%r1937, %r1536, %r1932, %r1934;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1499, %r1937, %r1936;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1938, %r172, %r1774;
	mul.f32 	%r1939, %r171, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1940, %r1536, %r1304;
	mul.f32 	%r1941, %r1536, %r1303;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1942, %r1536, %r1939, %r1941;
	fma.rn.f32 	%r1943, %r1536, %r1938, %r1940;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1500, %r1943, %r1942;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1944, %r174, %r1772;
	mul.f32 	%r1945, %r173, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1946, %r1536, %r1306;
	mul.f32 	%r1947, %r1536, %r1305;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1948, %r1536, %r1945, %r1947;
	fma.rn.f32 	%r1949, %r1536, %r1944, %r1946;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1501, %r1949, %r1948;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1950, %r176, %r1774;
	mul.f32 	%r1951, %r175, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1952, %r1536, %r1308;
	mul.f32 	%r1953, %r1536, %r1307;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1954, %r1536, %r1951, %r1953;
	fma.rn.f32 	%r1955, %r1536, %r1950, %r1952;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1502, %r1955, %r1954;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1956, %r178, %r1772;
	mul.f32 	%r1957, %r177, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1958, %r1536, %r1310;
	mul.f32 	%r1959, %r1536, %r1309;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1960, %r1536, %r1957, %r1959;
	fma.rn.f32 	%r1961, %r1536, %r1956, %r1958;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1504, %r1961, %r1960;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1962, %r180, %r1774;
	mul.f32 	%r1963, %r179, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1964, %r1536, %r1312;
	mul.f32 	%r1965, %r1536, %r1311;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1966, %r1536, %r1963, %r1965;
	fma.rn.f32 	%r1967, %r1536, %r1962, %r1964;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1505, %r1967, %r1966;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1968, %r182, %r1772;
	mul.f32 	%r1969, %r181, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1970, %r1536, %r1314;
	mul.f32 	%r1971, %r1536, %r1313;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1972, %r1536, %r1969, %r1971;
	fma.rn.f32 	%r1973, %r1536, %r1968, %r1970;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1506, %r1973, %r1972;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1974, %r184, %r1774;
	mul.f32 	%r1975, %r183, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1976, %r1536, %r1316;
	mul.f32 	%r1977, %r1536, %r1315;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1978, %r1536, %r1975, %r1977;
	fma.rn.f32 	%r1979, %r1536, %r1974, %r1976;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1507, %r1979, %r1978;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1980, %r186, %r1772;
	mul.f32 	%r1981, %r185, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1982, %r1536, %r1318;
	mul.f32 	%r1983, %r1536, %r1317;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1984, %r1536, %r1981, %r1983;
	fma.rn.f32 	%r1985, %r1536, %r1980, %r1982;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1509, %r1985, %r1984;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1986, %r188, %r1774;
	mul.f32 	%r1987, %r187, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1988, %r1536, %r1320;
	mul.f32 	%r1989, %r1536, %r1319;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1990, %r1536, %r1987, %r1989;
	fma.rn.f32 	%r1991, %r1536, %r1986, %r1988;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1510, %r1991, %r1990;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1992, %r190, %r1772;
	mul.f32 	%r1993, %r189, %r1772;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1994, %r1536, %r1322;
	mul.f32 	%r1995, %r1536, %r1321;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1996, %r1536, %r1993, %r1995;
	fma.rn.f32 	%r1997, %r1536, %r1992, %r1994;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1511, %r1997, %r1996;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1998, %r192, %r1774;
	mul.f32 	%r1999, %r191, %r1774;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r2000, %r1536, %r1324;
	mul.f32 	%r2001, %r1536, %r1323;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r2002, %r1536, %r1999, %r2001;
	fma.rn.f32 	%r2003, %r1536, %r1998, %r2000;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1512, %r2003, %r2002;
	.loc	1 119 18                        // chunk_o.py:119:18
	add.s64 	%rd93, %rd107, %rd195;
	add.s64 	%rd94, %rd107, %rd196;
	add.s64 	%rd95, %rd107, %rd197;
	add.s64 	%rd96, %rd107, %rd198;
	bar.sync 	0;
	shl.b32 	%r2004, %r1550, 7;
	and.b32 	%r2005, %r2004, 1920;
	shr.u32 	%r2006, %r1552, 1;
	or.b32 	%r2007, %r2005, %r2006;
	shl.b32 	%r2008, %r1550, 6;
	and.b32 	%r2009, %r2008, 6144;
	or.b32 	%r2010, %r2007, %r2009;
	and.b32 	%r2011, %r1606, 2040;
	shr.u32 	%r2012, %r2010, 3;
	and.b32 	%r2013, %r2012, 1008;
	add.s32 	%r2014, %r1621, %r2013;
	shl.b32 	%r2015, %r2010, 1;
	add.s32 	%r2016, %r2014, %r2015;
	add.s32 	%r1493, %r2016, %r1556;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1493], {%r1494, %r1495, %r1496, %r1497};
	// end inline asm
	add.s32 	%r1498, %r1493, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1498], {%r1499, %r1500, %r1501, %r1502};
	// end inline asm
	add.s32 	%r1503, %r1493, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1503], {%r1504, %r1505, %r1506, %r1507};
	// end inline asm
	add.s32 	%r1508, %r1493, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1508], {%r1509, %r1510, %r1511, %r1512};
	// end inline asm
	bar.sync 	0;
	and.b32 	%r2017, %r1550, 240;
	add.s32 	%r2018, %r1621, %r2017;
	shl.b32 	%r2019, %r2011, 1;
	add.s32 	%r2020, %r2018, %r2019;
	ld.shared.v4.b32 	{%r1513, %r1514, %r1515, %r1516}, [%r2020];
	or.b32 	%r2021, %r2011, 2048;
	shr.u32 	%r2022, %r2021, 3;
	and.b32 	%r2023, %r2022, 496;
	add.s32 	%r2024, %r1621, %r2023;
	add.s32 	%r2025, %r2024, %r2019;
	ld.shared.v4.b32 	{%r1517, %r1518, %r1519, %r1520}, [%r2025+4096];
	or.b32 	%r2026, %r2011, 4096;
	shr.u32 	%r2027, %r2026, 3;
	and.b32 	%r2028, %r2027, 752;
	add.s32 	%r2029, %r1621, %r2028;
	add.s32 	%r2030, %r2029, %r2019;
	ld.shared.v4.b32 	{%r1521, %r1522, %r1523, %r1524}, [%r2030+8192];
	or.b32 	%r2031, %r1606, 6144;
	shr.u32 	%r2032, %r2031, 3;
	and.b32 	%r2033, %r2032, 1008;
	add.s32 	%r2034, %r1621, %r2033;
	shl.b32 	%r2035, %r2031, 1;
	add.s32 	%r2036, %r2034, %r2035;
	ld.shared.v4.b32 	{%r1525, %r1526, %r1527, %r1528}, [%r2036];
	// begin inline asm
	@%p58 st.global.v4.b32 [ %rd93 + 0 ], { %r1513, %r1514, %r1515, %r1516 };
	// end inline asm
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd94 + 0 ], { %r1517, %r1518, %r1519, %r1520 };
	// end inline asm
	// begin inline asm
	@%p60 st.global.v4.b32 [ %rd95 + 0 ], { %r1521, %r1522, %r1523, %r1524 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd96 + 0 ], { %r1525, %r1526, %r1527, %r1528 };
	// end inline asm
	.loc	1 119 4                         // chunk_o.py:119:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 182                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xaf DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 111
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x76:0x15 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 111
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8b:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 118                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa0:0x18 DW_TAG_inlined_subroutine
.b32 118                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 64                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
