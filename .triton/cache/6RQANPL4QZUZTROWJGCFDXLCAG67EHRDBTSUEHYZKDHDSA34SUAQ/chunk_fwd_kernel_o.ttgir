#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 2], instrShape = [16, 64, 16]}>
#mma1 = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [16, 32, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_fwd_kernel_o(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg6: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc1)
    %cst_4 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<128x1xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<128x1xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<4096> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<128> : tensor<1x128xi64, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<0> : tensor<1x128xi64, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<4096> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c16384_i64 = arith.constant 16384 : i64 loc(#loc1)
    %cst_16 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = tt.get_program_id z : i32 loc(#loc4)
    %3 = arith.divsi %2, %c32_i32 : i32 loc(#loc5)
    %4 = arith.remsi %2, %c32_i32 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc62)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc63)
    %7 = arith.muli %3, %6 : i32 loc(#loc10)
    %8 = arith.addi %7, %1 : i32 loc(#loc11)
    %9 = arith.muli %3, %arg7 : i32 loc(#loc12)
    %10 = arith.muli %9, %c32_i32 : i32 loc(#loc13)
    %11 = arith.addi %10, %4 : i32 loc(#loc14)
    %12 = arith.muli %11, %c128_i32 : i32 loc(#loc15)
    %13 = tt.addptr %arg0, %12 : !tt.ptr<bf16>, i32 loc(#loc16)
    %14 = tt.addptr %arg1, %12 : !tt.ptr<bf16>, i32 loc(#loc17)
    %15 = tt.addptr %arg2, %12 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg5, %12 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = arith.muli %8, %c32_i32 : i32 loc(#loc20)
    %18 = arith.addi %17, %4 : i32 loc(#loc21)
    %19 = arith.extsi %18 : i32 to i64 loc(#loc22)
    %20 = arith.muli %19, %c16384_i64 : i64 loc(#loc23)
    %21 = tt.addptr %arg3, %20 : !tt.ptr<bf16>, i64 loc(#loc24)
    %22 = arith.muli %1, %c64_i32 : i32 loc(#loc25)
    %23 = arith.extsi %arg7 : i32 to i64 loc(#loc26)
    %24 = arith.extsi %22 : i32 to i64 loc(#loc26)
    %25 = arith.muli %0, %c128_i32 : i32 loc(#loc27)
    %26 = arith.extsi %25 : i32 to i64 loc(#loc28)
    %27 = tt.splat %13 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %28 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %29 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %30 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc29)
    %31 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %32 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc29)
    %33 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %34 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %35 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc29)
    %36 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %37 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc29)
    %38 = arith.extsi %33 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %39 = arith.extsi %34 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %40 = arith.extsi %35 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc29)
    %41 = arith.extsi %36 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %42 = arith.extsi %37 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc29)
    %43 = arith.addi %28, %38 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %44 = arith.addi %29, %39 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %45 = arith.addi %30, %40 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc29)
    %46 = arith.addi %31, %41 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %47 = arith.addi %32, %42 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc29)
    %48 = tt.expand_dims %43 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc29)
    %49 = arith.muli %48, %cst_14 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %50 = tt.broadcast %49 : tensor<64x1xi64, #blocked1> -> tensor<64x128xi64, #blocked1> loc(#loc29)
    %51 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %52 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %53 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %54 = arith.extsi %51 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %55 = arith.extsi %52 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %56 = arith.extsi %53 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %57 = tt.expand_dims %54 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi64, #blocked1> loc(#loc29)
    %58 = tt.broadcast %57 : tensor<1x128xi64, #blocked1> -> tensor<64x128xi64, #blocked1> loc(#loc29)
    %59 = arith.addi %50, %58 : tensor<64x128xi64, #blocked1> loc(#loc29)
    %60 = tt.addptr %27, %59 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi64, #blocked1> loc(#loc29)
    %61 = arith.cmpi sge, %48, %cst_13 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %62 = tt.splat %23 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc29)
    %63 = arith.cmpi slt, %48, %62 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %64 = arith.andi %61, %63 : tensor<64x1xi1, #blocked1> loc(#loc29)
    %65 = tt.broadcast %64 : tensor<64x1xi1, #blocked1> -> tensor<64x128xi1, #blocked1> loc(#loc29)
    %66 = arith.cmpi sge, %57, %cst_12 : tensor<1x128xi64, #blocked1> loc(#loc29)
    %67 = arith.cmpi slt, %57, %cst_11 : tensor<1x128xi64, #blocked1> loc(#loc29)
    %68 = arith.andi %66, %67 : tensor<1x128xi1, #blocked1> loc(#loc29)
    %69 = tt.broadcast %68 : tensor<1x128xi1, #blocked1> -> tensor<64x128xi1, #blocked1> loc(#loc29)
    %70 = arith.andi %65, %69 : tensor<64x128xi1, #blocked1> loc(#loc29)
    %71 = tt.load %60, %70 : tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %72 = ttg.local_alloc %71 : (tensor<64x128xbf16, #blocked1>) -> !ttg.memdesc<64x128xbf16, #shared, #smem> loc(#loc29)
    %73 = tt.splat %14 : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc30)
    %74 = tt.expand_dims %55 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc30)
    %75 = tt.expand_dims %56 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi64, #blocked1> loc(#loc30)
    %76 = tt.broadcast %74 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc30)
    %77 = tt.expand_dims %46 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc30)
    %78 = arith.muli %77, %cst_10 : tensor<1x64xi64, #blocked> loc(#loc30)
    %79 = tt.broadcast %78 : tensor<1x64xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc30)
    %80 = arith.addi %76, %79 : tensor<128x64xi64, #blocked> loc(#loc30)
    %81 = tt.addptr %73, %80 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc30)
    %82 = arith.cmpi sge, %74, %cst_8 : tensor<128x1xi64, #blocked> loc(#loc30)
    %83 = arith.cmpi sge, %75, %cst_9 : tensor<128x1xi64, #blocked1> loc(#loc30)
    %84 = arith.cmpi slt, %74, %cst_6 : tensor<128x1xi64, #blocked> loc(#loc30)
    %85 = arith.cmpi slt, %75, %cst_7 : tensor<128x1xi64, #blocked1> loc(#loc30)
    %86 = arith.andi %82, %84 : tensor<128x1xi1, #blocked> loc(#loc30)
    %87 = arith.andi %83, %85 : tensor<128x1xi1, #blocked1> loc(#loc30)
    %88 = tt.broadcast %86 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc30)
    %89 = arith.cmpi sge, %77, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc30)
    %90 = tt.splat %23 : i64 -> tensor<1x64xi64, #blocked> loc(#loc30)
    %91 = arith.cmpi slt, %77, %90 : tensor<1x64xi64, #blocked> loc(#loc30)
    %92 = arith.andi %89, %91 : tensor<1x64xi1, #blocked> loc(#loc30)
    %93 = tt.broadcast %92 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc30)
    %94 = arith.andi %88, %93 : tensor<128x64xi1, #blocked> loc(#loc30)
    %95 = tt.load %81, %94 : tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc30)
    %96 = ttg.local_alloc %95 : (tensor<128x64xbf16, #blocked>) -> !ttg.memdesc<128x64xbf16, #shared1, #smem> loc(#loc30)
    %97 = tt.splat %21 : !tt.ptr<bf16> -> tensor<128x128x!tt.ptr<bf16>, #blocked1> loc(#loc31)
    %98 = arith.muli %75, %cst_7 : tensor<128x1xi64, #blocked1> loc(#loc31)
    %99 = tt.broadcast %98 : tensor<128x1xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc31)
    %100 = tt.splat %26 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc31)
    %101 = arith.addi %100, %54 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc31)
    %102 = tt.expand_dims %101 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi64, #blocked1> loc(#loc31)
    %103 = tt.broadcast %102 : tensor<1x128xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc31)
    %104 = arith.addi %99, %103 : tensor<128x128xi64, #blocked1> loc(#loc31)
    %105 = tt.addptr %97, %104 : tensor<128x128x!tt.ptr<bf16>, #blocked1>, tensor<128x128xi64, #blocked1> loc(#loc31)
    %106 = tt.broadcast %87 : tensor<128x1xi1, #blocked1> -> tensor<128x128xi1, #blocked1> loc(#loc31)
    %107 = arith.cmpi sge, %102, %cst_12 : tensor<1x128xi64, #blocked1> loc(#loc31)
    %108 = arith.cmpi slt, %102, %cst_11 : tensor<1x128xi64, #blocked1> loc(#loc31)
    %109 = arith.andi %107, %108 : tensor<1x128xi1, #blocked1> loc(#loc31)
    %110 = tt.broadcast %109 : tensor<1x128xi1, #blocked1> -> tensor<128x128xi1, #blocked1> loc(#loc31)
    %111 = arith.andi %106, %110 : tensor<128x128xi1, #blocked1> loc(#loc31)
    %112 = tt.load %105, %111 : tensor<128x128x!tt.ptr<bf16>, #blocked1> loc(#loc31)
    %113 = ttg.local_alloc %112 : (tensor<128x128xbf16, #blocked1>) -> !ttg.memdesc<128x128xbf16, #shared, #smem> loc(#loc31)
    ttng.fence_async_shared {bCluster = false} loc(#loc32)
    %114 = ttng.warp_group_dot %72, %113, %cst_15 {inputPrecision = 0 : i32} : !ttg.memdesc<64x128xbf16, #shared, #smem> * !ttg.memdesc<128x128xbf16, #shared, #smem> -> tensor<64x128xf32, #mma> loc(#loc32)
    ttng.fence_async_shared {bCluster = false} loc(#loc33)
    %115 = ttng.warp_group_dot %72, %96, %cst_16 {inputPrecision = 0 : i32} : !ttg.memdesc<64x128xbf16, #shared, #smem> * !ttg.memdesc<128x64xbf16, #shared1, #smem> -> tensor<64x64xf32, #mma1> loc(#loc33)
    %116 = tt.addptr %arg4, %11 : !tt.ptr<f32>, i32 loc(#loc34)
    %117 = tt.splat %116 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %118 = tt.splat %116 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %119 = tt.splat %116 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %120 = arith.muli %44, %cst_2 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %121 = arith.muli %45, %cst_3 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %122 = arith.muli %47, %cst_4 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %123 = tt.addptr %117, %120 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %124 = tt.addptr %118, %121 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma1}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %125 = tt.addptr %119, %122 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma1}>>, tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %126 = arith.cmpi sge, %44, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %127 = arith.cmpi sge, %45, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %128 = arith.cmpi sge, %47, %cst_1 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %129 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %130 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %131 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %132 = arith.cmpi slt, %44, %129 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %133 = arith.cmpi slt, %45, %130 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %134 = arith.cmpi slt, %47, %131 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %135 = arith.andi %126, %132 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %136 = arith.andi %127, %133 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %137 = arith.andi %128, %134 : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %138 = tt.load %123, %135 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc35)
    %139 = tt.load %124, %136 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc35)
    %140 = tt.load %125, %137 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc35)
    %141 = math.exp %138 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %142 = tt.expand_dims %141 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc37)
    %143 = tt.broadcast %142 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc38)
    %144 = arith.mulf %114, %143 : tensor<64x128xf32, #mma> loc(#loc38)
    %145 = tt.expand_dims %139 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma1}>> -> tensor<64x1xf32, #mma1> loc(#loc39)
    %146 = tt.expand_dims %140 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #mma1}>> -> tensor<1x64xf32, #mma1> loc(#loc40)
    %147 = tt.broadcast %145 : tensor<64x1xf32, #mma1> -> tensor<64x64xf32, #mma1> loc(#loc41)
    %148 = tt.broadcast %146 : tensor<1x64xf32, #mma1> -> tensor<64x64xf32, #mma1> loc(#loc41)
    %149 = arith.subf %147, %148 : tensor<64x64xf32, #mma1> loc(#loc41)
    %150 = math.exp %149 : tensor<64x64xf32, #mma1> loc(#loc42)
    %151 = arith.mulf %115, %150 : tensor<64x64xf32, #mma1> loc(#loc43)
    %152 = tt.splat %22 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc44)
    %153 = tt.splat %22 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc44)
    %154 = arith.addi %152, %35 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc44)
    %155 = arith.addi %153, %37 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc44)
    %156 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc45)
    %157 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc45)
    %158 = arith.cmpi slt, %154, %156 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> loc(#loc45)
    %159 = arith.cmpi slt, %155, %157 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> loc(#loc45)
    %160 = tt.expand_dims %154 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma1}>> -> tensor<64x1xi32, #mma1> loc(#loc46)
    %161 = tt.expand_dims %155 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma1}>> -> tensor<1x64xi32, #mma1> loc(#loc47)
    %162 = tt.broadcast %160 : tensor<64x1xi32, #mma1> -> tensor<64x64xi32, #mma1> loc(#loc48)
    %163 = tt.broadcast %161 : tensor<1x64xi32, #mma1> -> tensor<64x64xi32, #mma1> loc(#loc48)
    %164 = arith.cmpi sge, %162, %163 : tensor<64x64xi32, #mma1> loc(#loc48)
    %165 = tt.expand_dims %158 {axis = 1 : i32} : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma1}>> -> tensor<64x1xi1, #mma1> loc(#loc49)
    %166 = tt.expand_dims %159 {axis = 0 : i32} : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma1}>> -> tensor<1x64xi1, #mma1> loc(#loc50)
    %167 = tt.broadcast %165 : tensor<64x1xi1, #mma1> -> tensor<64x64xi1, #mma1> loc(#loc50)
    %168 = tt.broadcast %166 : tensor<1x64xi1, #mma1> -> tensor<64x64xi1, #mma1> loc(#loc50)
    %169 = arith.andi %167, %168 : tensor<64x64xi1, #mma1> loc(#loc50)
    %170 = arith.andi %164, %169 : tensor<64x64xi1, #mma1> loc(#loc51)
    %171 = arith.select %170, %151, %cst_16 : tensor<64x64xi1, #mma1>, tensor<64x64xf32, #mma1> loc(#loc52)
    %172 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc53)
    %173 = tt.broadcast %102 : tensor<1x128xi64, #blocked1> -> tensor<64x128xi64, #blocked1> loc(#loc53)
    %174 = arith.addi %50, %173 : tensor<64x128xi64, #blocked1> loc(#loc53)
    %175 = tt.addptr %172, %174 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi64, #blocked1> loc(#loc53)
    %176 = tt.broadcast %109 : tensor<1x128xi1, #blocked1> -> tensor<64x128xi1, #blocked1> loc(#loc53)
    %177 = arith.andi %65, %176 : tensor<64x128xi1, #blocked1> loc(#loc53)
    %178 = tt.load %175, %177 : tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc53)
    %179 = ttg.local_alloc %178 : (tensor<64x128xbf16, #blocked1>) -> !ttg.memdesc<64x128xbf16, #shared, #smem> loc(#loc53)
    %180 = tt.splat %arg6 : f32 -> tensor<64x128xf32, #mma> loc(#loc54)
    %181 = arith.mulf %144, %180 : tensor<64x128xf32, #mma> loc(#loc54)
    %182 = arith.truncf %171 : tensor<64x64xf32, #mma1> to tensor<64x64xbf16, #mma1> loc(#loc55)
    %183 = ttg.convert_layout %182 : tensor<64x64xbf16, #mma1> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc55)
    ttng.fence_async_shared {bCluster = false} loc(#loc56)
    %184 = ttng.warp_group_dot %183, %179, %cst_15 {inputPrecision = 0 : i32} : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<64x128xbf16, #shared, #smem> -> tensor<64x128xf32, #mma> loc(#loc56)
    %185 = arith.mulf %184, %180 : tensor<64x128xf32, #mma> loc(#loc57)
    %186 = arith.addf %181, %185 : tensor<64x128xf32, #mma> loc(#loc58)
    %187 = arith.truncf %186 : tensor<64x128xf32, #mma> to tensor<64x128xbf16, #mma> loc(#loc59)
    %188 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc60)
    %189 = tt.addptr %188, %174 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi64, #blocked1> loc(#loc60)
    %190 = ttg.convert_layout %187 : tensor<64x128xbf16, #mma> -> tensor<64x128xbf16, #blocked1> loc(#loc60)
    tt.store %189, %190, %177 : tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc60)
    tt.return loc(#loc61)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:35)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:53)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:71)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:23)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:33)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":64:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:21)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:26)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":66:25)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:16)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:20)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:27)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:9)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:9)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:17)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:21)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:29)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:43)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:9)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:60)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:85)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:68)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":83:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":85:22)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":87:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":90:27)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":92:27)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":95:13)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":97:22)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:24)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:29)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:20)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:28)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:39)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:24)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:20)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":107:21)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":108:16)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:15)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:31)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:27)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:48)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:59)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":110:29)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":115:18)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:16)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:38)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:50)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:57)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:24)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:25)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:18)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:4)
#loc62 = loc(callsite(#loc7 at #loc8))
#loc63 = loc(callsite(#loc9 at #loc8))
