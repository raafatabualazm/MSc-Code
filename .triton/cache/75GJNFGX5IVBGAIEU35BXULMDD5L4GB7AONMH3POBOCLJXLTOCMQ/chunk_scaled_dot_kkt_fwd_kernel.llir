; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = lshr i32 %12, 2, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = and i32 %14, 31, !dbg !13
  %17 = or disjoint i32 %16, 32, !dbg !13
  %18 = lshr i32 %12, 1, !dbg !13
  %19 = and i32 %18, 48, !dbg !13
  %20 = or disjoint i32 %19, %15, !dbg !13
  %21 = or disjoint i32 %20, 8, !dbg !13
  %22 = mul i32 %9, %4, !dbg !14
  %23 = sext i32 %22 to i64, !dbg !15
  %24 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !15
  %25 = zext nneg i32 %10 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %24, i64 %25, !dbg !16
  %27 = sext i32 %4 to i64, !dbg !17
  %28 = sext i32 %11 to i64, !dbg !17
  %29 = zext nneg i32 %16 to i64, !dbg !18
  %30 = zext nneg i32 %17 to i64, !dbg !18
  %31 = zext nneg i32 %20 to i64, !dbg !18
  %32 = zext nneg i32 %21 to i64, !dbg !18
  %33 = or disjoint i64 %29, %28, !dbg !18
  %34 = or disjoint i64 %30, %28, !dbg !18
  %35 = or disjoint i64 %31, %28, !dbg !18
  %36 = or disjoint i64 %32, %28, !dbg !18
  %37 = shl nsw i64 %35, 5, !dbg !18
  %38 = shl nsw i64 %36, 5, !dbg !18
  %39 = getelementptr bfloat, ptr addrspace(1) %26, i64 %37, !dbg !18
  %40 = getelementptr bfloat, ptr addrspace(1) %26, i64 %38, !dbg !18
  %41 = icmp sgt i32 %11, -1, !dbg !18
  %42 = icmp slt i64 %35, %27, !dbg !18
  %43 = icmp slt i64 %36, %27, !dbg !18
  %44 = and i1 %41, %42, !dbg !18
  %45 = and i1 %41, %43, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 %44) #2, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %45) #2, !dbg !18
  %48 = or disjoint i32 %22, %10, !dbg !19
  %49 = shl i32 %48, 7, !dbg !20
  %50 = sext i32 %49 to i64, !dbg !21
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = shl nuw nsw i32 %12, 3, !dbg !22
  %53 = and i32 %52, 24, !dbg !22
  %54 = zext nneg i32 %53 to i64, !dbg !22
  %55 = icmp slt i64 %33, %27, !dbg !22
  %56 = icmp slt i64 %34, %27, !dbg !22
  %57 = and i1 %41, %55, !dbg !22
  %58 = and i1 %41, %56, !dbg !22
  %.idx91 = shl nsw i64 %33, 13, !dbg !22
  %59 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx91, !dbg !22
  %60 = getelementptr bfloat, ptr addrspace(1) %59, i64 %54, !dbg !22
  %.idx92 = shl nsw i64 %34, 13, !dbg !22
  %61 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx92, !dbg !22
  %62 = getelementptr bfloat, ptr addrspace(1) %61, i64 %54, !dbg !22
  %63 = and i32 %52, 56, !dbg !22
  %64 = and i32 %12, 24, !dbg !22
  %65 = mul nuw nsw i32 %64, 9, !dbg !22
  %66 = xor i32 %65, %63, !dbg !22
  %67 = and i32 %52, 768, !dbg !22
  %68 = or disjoint i32 %67, %66, !dbg !22
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !22
  %70 = or disjoint i32 %63, 1024, !dbg !22
  %71 = xor i32 %65, %70, !dbg !22
  %72 = or disjoint i32 %67, %71, !dbg !22
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %72, !dbg !22
  %74 = select i1 %57, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %60, i32 %74) #2, !dbg !22
  %75 = select i1 %58, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %62, i32 %75) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %76 = or disjoint i64 %54, 32, !dbg !22
  %77 = getelementptr bfloat, ptr addrspace(1) %59, i64 %76, !dbg !22
  %78 = getelementptr bfloat, ptr addrspace(1) %61, i64 %76, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %79 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %68, !dbg !22
  %80 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %72, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %77, i32 %74) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %80, ptr addrspace(1) %78, i32 %75) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %81 = or disjoint i64 %54, 64, !dbg !22
  %82 = getelementptr bfloat, ptr addrspace(1) %59, i64 %81, !dbg !22
  %83 = getelementptr bfloat, ptr addrspace(1) %61, i64 %81, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %68, !dbg !22
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %72, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %84, ptr addrspace(1) %82, i32 %74) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %85, ptr addrspace(1) %83, i32 %75) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %invariant.op = or disjoint i32 %53, 96, !dbg !23
  %86 = zext nneg i32 %invariant.op to i64, !dbg !23
  br label %87, !dbg !23

87:                                               ; preds = %6, %87
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %87 ]
  %88 = phi i32 [ -1, %6 ], [ %124, %87 ]
  %89 = phi i32 [ 2, %6 ], [ %238, %87 ]
  %90 = phi float [ 0.000000e+00, %6 ], [ %204, %87 ]
  %91 = phi float [ 0.000000e+00, %6 ], [ %205, %87 ]
  %92 = phi float [ 0.000000e+00, %6 ], [ %206, %87 ]
  %93 = phi float [ 0.000000e+00, %6 ], [ %207, %87 ]
  %94 = phi float [ 0.000000e+00, %6 ], [ %208, %87 ]
  %95 = phi float [ 0.000000e+00, %6 ], [ %209, %87 ]
  %96 = phi float [ 0.000000e+00, %6 ], [ %210, %87 ]
  %97 = phi float [ 0.000000e+00, %6 ], [ %211, %87 ]
  %98 = phi float [ 0.000000e+00, %6 ], [ %212, %87 ]
  %99 = phi float [ 0.000000e+00, %6 ], [ %213, %87 ]
  %100 = phi float [ 0.000000e+00, %6 ], [ %214, %87 ]
  %101 = phi float [ 0.000000e+00, %6 ], [ %215, %87 ]
  %102 = phi float [ 0.000000e+00, %6 ], [ %216, %87 ]
  %103 = phi float [ 0.000000e+00, %6 ], [ %217, %87 ]
  %104 = phi float [ 0.000000e+00, %6 ], [ %218, %87 ]
  %105 = phi float [ 0.000000e+00, %6 ], [ %219, %87 ]
  %106 = phi float [ 0.000000e+00, %6 ], [ %220, %87 ]
  %107 = phi float [ 0.000000e+00, %6 ], [ %221, %87 ]
  %108 = phi float [ 0.000000e+00, %6 ], [ %222, %87 ]
  %109 = phi float [ 0.000000e+00, %6 ], [ %223, %87 ]
  %110 = phi float [ 0.000000e+00, %6 ], [ %224, %87 ]
  %111 = phi float [ 0.000000e+00, %6 ], [ %225, %87 ]
  %112 = phi float [ 0.000000e+00, %6 ], [ %226, %87 ]
  %113 = phi float [ 0.000000e+00, %6 ], [ %227, %87 ]
  %114 = phi float [ 0.000000e+00, %6 ], [ %228, %87 ]
  %115 = phi float [ 0.000000e+00, %6 ], [ %229, %87 ]
  %116 = phi float [ 0.000000e+00, %6 ], [ %230, %87 ]
  %117 = phi float [ 0.000000e+00, %6 ], [ %231, %87 ]
  %118 = phi float [ 0.000000e+00, %6 ], [ %232, %87 ]
  %119 = phi float [ 0.000000e+00, %6 ], [ %233, %87 ]
  %120 = phi float [ 0.000000e+00, %6 ], [ %234, %87 ]
  %121 = phi float [ 0.000000e+00, %6 ], [ %235, %87 ]
  %122 = add i32 %88, 1, !dbg !23
  %123 = icmp sgt i32 %122, 3, !dbg !23
  %124 = select i1 %123, i32 0, i32 %122, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx89 = shl i32 %124, 12, !dbg !22
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx89, !dbg !22
  %126 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %127 = ptrtoint ptr addrspace(3) %125 to i32, !dbg !24
  %128 = lshr exact i32 %127, 4, !dbg !24
  %129 = and i32 %128, 16383, !dbg !24
  %130 = zext nneg i32 %129 to i64, !dbg !24
  %131 = or disjoint i64 %130, -9223371899399045120, !dbg !24
  %132 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, i64 %131, i64 %131, i1 true) #2, !dbg !24
  %133 = add i32 %127, 32, !dbg !24
  %134 = lshr exact i32 %133, 4, !dbg !24
  %135 = and i32 %134, 16383, !dbg !24
  %136 = zext nneg i32 %135 to i64, !dbg !24
  %137 = or disjoint i64 %136, -9223371899399045120, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 0, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 1, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 2, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 3, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 4, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 5, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 6, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 7, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 8, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 9, !dbg !24
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 10, !dbg !24
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 11, !dbg !24
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 12, !dbg !24
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 13, !dbg !24
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 14, !dbg !24
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 15, !dbg !24
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 16, !dbg !24
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 17, !dbg !24
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 18, !dbg !24
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 19, !dbg !24
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 20, !dbg !24
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 21, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 22, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 23, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 24, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 25, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 26, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 27, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 28, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 29, !dbg !24
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 30, !dbg !24
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, 31, !dbg !24
  %170 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, i64 %137, i64 %137, i1 true) #2, !dbg !24
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 0, !dbg !24
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 1, !dbg !24
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 2, !dbg !24
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 3, !dbg !24
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 4, !dbg !24
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 5, !dbg !24
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 6, !dbg !24
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 7, !dbg !24
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 8, !dbg !24
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 9, !dbg !24
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 10, !dbg !24
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 11, !dbg !24
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 12, !dbg !24
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 13, !dbg !24
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 14, !dbg !24
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 15, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 16, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 17, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 18, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 19, !dbg !24
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 20, !dbg !24
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 21, !dbg !24
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 22, !dbg !24
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 23, !dbg !24
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 24, !dbg !24
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 25, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 26, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 27, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 28, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 29, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 30, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %170, 31, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %203 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"(float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, ptr addrspace(3) %125, i32 0, i32 0, ptr addrspace(3) %125, i32 0, i32 0) #2, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 0, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 1, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 2, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 3, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 4, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 5, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 6, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 7, !dbg !24
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 8, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 9, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 10, !dbg !24
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 11, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 12, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 13, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 14, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 15, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 16, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 17, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 18, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 19, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 20, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 21, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 22, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 23, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 24, !dbg !24
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 25, !dbg !24
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 26, !dbg !24
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 27, !dbg !24
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 28, !dbg !24
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 29, !dbg !24
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 30, !dbg !24
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %203, 31, !dbg !24
  %236 = add i32 %89, 1, !dbg !23
  %237 = icmp sgt i32 %236, 3, !dbg !23
  %238 = select i1 %237, i32 0, i32 %236, !dbg !23
  %239 = shl nuw nsw i64 %indvars.iv, 5, !dbg !25
  %240 = add nuw nsw i64 %239, %86
  %241 = getelementptr bfloat, ptr addrspace(1) %59, i64 %240, !dbg !22
  %242 = getelementptr bfloat, ptr addrspace(1) %61, i64 %240, !dbg !22
  %243 = icmp eq i64 %indvars.iv, 0, !dbg !22
  %244 = and i1 %57, %243, !dbg !22
  %245 = and i1 %58, %243, !dbg !22
  %.idx90 = shl i32 %238, 12, !dbg !22
  %246 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx90, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %246, i32 %68, !dbg !22
  %248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %246, i32 %72, !dbg !22
  %249 = select i1 %244, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %247, ptr addrspace(1) %241, i32 %249) #2, !dbg !22
  %250 = select i1 %245, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %248, ptr addrspace(1) %242, i32 %250) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !23
  br i1 %exitcond.not, label %251, label %87, !dbg !23

251:                                              ; preds = %87
  %252 = bitcast i16 %47 to bfloat, !dbg !18
  %253 = bitcast i16 %46 to bfloat, !dbg !18
  %254 = shl nuw nsw i32 %12, 1, !dbg !13
  %255 = and i32 %254, 6, !dbg !13
  %256 = or disjoint i32 %255, 57, !dbg !13
  %257 = zext nneg i32 %256 to i64, !dbg !18
  %258 = or disjoint i64 %257, %28, !dbg !18
  %259 = icmp slt i64 %258, %27, !dbg !18
  %260 = and i1 %41, %259, !dbg !18
  %261 = or disjoint i32 %255, 56, !dbg !13
  %262 = zext nneg i32 %261 to i64, !dbg !18
  %263 = or disjoint i64 %262, %28, !dbg !18
  %264 = icmp slt i64 %263, %27, !dbg !18
  %265 = and i1 %41, %264, !dbg !18
  %266 = or disjoint i32 %255, 1, !dbg !13
  %267 = lshr i32 %12, 4, !dbg !13
  %268 = and i32 %267, 7, !dbg !13
  %269 = or disjoint i32 %268, 8, !dbg !13
  %270 = shl nuw nsw i32 %12, 2, !dbg !13
  %271 = and i32 %270, 60, !dbg !13
  %272 = zext nneg i32 %271 to i64, !dbg !18
  %273 = or disjoint i32 %256, %11, !dbg !26
  %274 = icmp slt i32 %273, %4, !dbg !27
  %275 = or disjoint i32 %261, %11, !dbg !26
  %276 = icmp slt i32 %275, %4, !dbg !27
  %277 = insertelement <8 x i32> poison, i32 %255, i64 0, !dbg !13
  %278 = shufflevector <8 x i32> %277, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %279 = or disjoint <8 x i32> %278, <i32 24, i32 25, i32 32, i32 33, i32 40, i32 41, i32 48, i32 49>, !dbg !13
  %280 = extractelement <8 x i32> %279, i64 7, !dbg !28
  %281 = zext nneg i32 %280 to i64, !dbg !18
  %282 = or disjoint i64 %281, %28, !dbg !18
  %283 = icmp slt i64 %282, %27, !dbg !18
  %284 = and i1 %41, %283, !dbg !18
  %285 = extractelement <8 x i32> %279, i64 6, !dbg !28
  %286 = zext nneg i32 %285 to i64, !dbg !18
  %287 = or disjoint i64 %286, %28, !dbg !18
  %288 = icmp slt i64 %287, %27, !dbg !18
  %289 = and i1 %41, %288, !dbg !18
  %290 = extractelement <8 x i32> %279, i64 5, !dbg !28
  %291 = zext nneg i32 %290 to i64, !dbg !18
  %292 = or disjoint i64 %291, %28, !dbg !18
  %293 = icmp slt i64 %292, %27, !dbg !18
  %294 = and i1 %41, %293, !dbg !18
  %295 = extractelement <8 x i32> %279, i64 4, !dbg !28
  %296 = zext nneg i32 %295 to i64, !dbg !18
  %297 = or disjoint i64 %296, %28, !dbg !18
  %298 = icmp slt i64 %297, %27, !dbg !18
  %299 = and i1 %41, %298, !dbg !18
  %300 = extractelement <8 x i32> %279, i64 3, !dbg !28
  %301 = zext nneg i32 %300 to i64, !dbg !18
  %302 = or disjoint i64 %301, %28, !dbg !18
  %303 = icmp slt i64 %302, %27, !dbg !18
  %304 = and i1 %41, %303, !dbg !18
  %305 = extractelement <8 x i32> %279, i64 2, !dbg !28
  %306 = zext nneg i32 %305 to i64, !dbg !18
  %307 = or disjoint i64 %306, %28, !dbg !18
  %308 = icmp slt i64 %307, %27, !dbg !18
  %309 = and i1 %41, %308, !dbg !18
  %310 = extractelement <8 x i32> %279, i64 1, !dbg !28
  %311 = extractelement <8 x i32> %279, i64 0, !dbg !28
  %312 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !13
  %313 = shufflevector <4 x i32> %312, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %314 = or disjoint <4 x i32> %313, <i32 8, i32 9, i32 16, i32 17>, !dbg !13
  %315 = extractelement <4 x i32> %314, i64 3, !dbg !28
  %316 = extractelement <4 x i32> %314, i64 2, !dbg !28
  %317 = extractelement <4 x i32> %314, i64 1, !dbg !28
  %318 = extractelement <4 x i32> %314, i64 0, !dbg !28
  %319 = insertelement <16 x i32> poison, i32 %20, i64 0, !dbg !26
  %320 = insertelement <16 x i32> %319, i32 %21, i64 1, !dbg !26
  %321 = insertelement <16 x i32> %320, i32 %255, i64 2, !dbg !26
  %322 = insertelement <16 x i32> %321, i32 %266, i64 3, !dbg !26
  %323 = shufflevector <8 x i32> %279, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %324 = shufflevector <16 x i32> %322, <16 x i32> %323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !26
  %325 = shufflevector <4 x i32> %314, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %326 = shufflevector <16 x i32> %324, <16 x i32> %325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !26
  %327 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !26
  %328 = shufflevector <16 x i32> %327, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %329 = or disjoint <16 x i32> %326, %328, !dbg !26
  %330 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !27
  %331 = shufflevector <16 x i32> %330, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !27
  %332 = icmp slt <16 x i32> %329, %331, !dbg !27
  %333 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !29
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %25, !dbg !30
  %336 = getelementptr float, ptr addrspace(1) %335, i64 %37, !dbg !31
  %337 = getelementptr float, ptr addrspace(1) %335, i64 %38, !dbg !31
  %.idx11 = shl nsw i64 %307, 7, !dbg !31
  %338 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx11, !dbg !31
  %.idx12 = shl nsw i64 %302, 7, !dbg !31
  %339 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx12, !dbg !31
  %.idx13 = shl nsw i64 %297, 7, !dbg !31
  %340 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx13, !dbg !31
  %.idx14 = shl nsw i64 %292, 7, !dbg !31
  %341 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx14, !dbg !31
  %.idx15 = shl nsw i64 %287, 7, !dbg !31
  %342 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx15, !dbg !31
  %.idx16 = shl nsw i64 %282, 7, !dbg !31
  %343 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx16, !dbg !31
  %.idx17 = shl nsw i64 %263, 7, !dbg !31
  %344 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx17, !dbg !31
  %.idx18 = shl nsw i64 %258, 7, !dbg !31
  %345 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx18, !dbg !31
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %44) #2, !dbg !31
  %347 = bitcast i32 %346 to float, !dbg !31
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %45) #2, !dbg !31
  %349 = bitcast i32 %348 to float, !dbg !31
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 0, !dbg !32
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 1, !dbg !32
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 2, !dbg !32
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 3, !dbg !32
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 4, !dbg !32
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 5, !dbg !32
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 6, !dbg !32
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 7, !dbg !32
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 8, !dbg !32
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 9, !dbg !32
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 10, !dbg !32
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 11, !dbg !32
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 12, !dbg !32
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 13, !dbg !32
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 14, !dbg !32
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 15, !dbg !32
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 16, !dbg !32
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 17, !dbg !32
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 18, !dbg !32
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 19, !dbg !32
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 20, !dbg !32
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 21, !dbg !32
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 22, !dbg !32
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 23, !dbg !32
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 24, !dbg !32
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 25, !dbg !32
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 26, !dbg !32
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 27, !dbg !32
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 30, !dbg !32
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %333, 31, !dbg !32
  %380 = fpext bfloat %253 to float, !dbg !33
  %381 = fpext bfloat %252 to float, !dbg !33
  %382 = icmp samesign ugt i32 %20, %255, !dbg !28
  %383 = icmp samesign ugt i32 %20, %266, !dbg !28
  %384 = icmp samesign ugt i32 %20, %318, !dbg !28
  %385 = icmp samesign ugt i32 %20, %317, !dbg !28
  %386 = icmp samesign ugt i32 %21, %317, !dbg !28
  %387 = icmp samesign ugt i32 %20, %316, !dbg !28
  %388 = icmp samesign ugt i32 %20, %315, !dbg !28
  %389 = icmp samesign ugt i32 %21, %316, !dbg !28
  %390 = icmp samesign ugt i32 %21, %315, !dbg !28
  %391 = icmp samesign ugt i32 %20, %311, !dbg !28
  %392 = icmp samesign ugt i32 %20, %310, !dbg !28
  %393 = icmp samesign ugt i32 %21, %311, !dbg !28
  %394 = icmp samesign ugt i32 %21, %310, !dbg !28
  %395 = icmp samesign ugt i32 %20, %305, !dbg !28
  %396 = icmp samesign ugt i32 %20, %300, !dbg !28
  %397 = icmp samesign ugt i32 %21, %305, !dbg !28
  %398 = icmp samesign ugt i32 %21, %300, !dbg !28
  %399 = icmp samesign ugt i32 %20, %295, !dbg !28
  %400 = icmp samesign ugt i32 %20, %290, !dbg !28
  %401 = icmp samesign ugt i32 %21, %295, !dbg !28
  %402 = icmp samesign ugt i32 %21, %290, !dbg !28
  %403 = icmp samesign ugt i32 %20, %285, !dbg !28
  %404 = icmp samesign ugt i32 %20, %280, !dbg !28
  %405 = icmp samesign ugt i32 %21, %285, !dbg !28
  %406 = icmp samesign ugt i32 %21, %280, !dbg !28
  %407 = icmp samesign ugt i32 %21, %261, !dbg !28
  %408 = icmp samesign ugt i32 %21, %256, !dbg !28
  %409 = extractelement <16 x i1> %332, i64 1, !dbg !34
  %410 = extractelement <16 x i1> %332, i64 2, !dbg !34
  %411 = and i1 %409, %410, !dbg !35
  %412 = extractelement <16 x i1> %332, i64 3, !dbg !34
  %413 = and i1 %409, %412, !dbg !35
  %414 = and i1 %382, %410, !dbg !34
  %415 = extractelement <16 x i1> %332, i64 0, !dbg !34
  %416 = and i1 %415, %414, !dbg !34
  %417 = and i1 %383, %412, !dbg !34
  %418 = and i1 %415, %417, !dbg !34
  %419 = extractelement <16 x i1> %332, i64 4, !dbg !34
  %420 = and i1 %384, %419, !dbg !34
  %421 = and i1 %415, %420, !dbg !34
  %422 = extractelement <16 x i1> %332, i64 5, !dbg !34
  %423 = and i1 %385, %422, !dbg !34
  %424 = and i1 %415, %423, !dbg !34
  %425 = and i1 %382, %419, !dbg !34
  %426 = and i1 %409, %425, !dbg !34
  %427 = and i1 %386, %422, !dbg !34
  %428 = and i1 %409, %427, !dbg !34
  %429 = extractelement <16 x i1> %332, i64 6, !dbg !34
  %430 = and i1 %387, %429, !dbg !34
  %431 = and i1 %415, %430, !dbg !34
  %432 = extractelement <16 x i1> %332, i64 7, !dbg !34
  %433 = and i1 %388, %432, !dbg !34
  %434 = and i1 %415, %433, !dbg !34
  %435 = and i1 %389, %429, !dbg !34
  %436 = and i1 %409, %435, !dbg !34
  %437 = and i1 %390, %432, !dbg !34
  %438 = and i1 %409, %437, !dbg !34
  %439 = extractelement <16 x i1> %332, i64 8, !dbg !34
  %440 = and i1 %391, %439, !dbg !34
  %441 = and i1 %415, %440, !dbg !34
  %442 = extractelement <16 x i1> %332, i64 9, !dbg !34
  %443 = and i1 %392, %442, !dbg !34
  %444 = and i1 %415, %443, !dbg !34
  %445 = and i1 %393, %439, !dbg !34
  %446 = and i1 %409, %445, !dbg !34
  %447 = and i1 %394, %442, !dbg !34
  %448 = and i1 %409, %447, !dbg !34
  %449 = extractelement <16 x i1> %332, i64 10, !dbg !34
  %450 = and i1 %395, %449, !dbg !34
  %451 = and i1 %415, %450, !dbg !34
  %452 = extractelement <16 x i1> %332, i64 11, !dbg !34
  %453 = and i1 %396, %452, !dbg !34
  %454 = and i1 %415, %453, !dbg !34
  %455 = and i1 %397, %449, !dbg !34
  %456 = and i1 %409, %455, !dbg !34
  %457 = and i1 %398, %452, !dbg !34
  %458 = and i1 %409, %457, !dbg !34
  %459 = extractelement <16 x i1> %332, i64 12, !dbg !34
  %460 = and i1 %399, %459, !dbg !34
  %461 = and i1 %415, %460, !dbg !34
  %462 = extractelement <16 x i1> %332, i64 13, !dbg !34
  %463 = and i1 %400, %462, !dbg !34
  %464 = and i1 %415, %463, !dbg !34
  %465 = and i1 %401, %459, !dbg !34
  %466 = and i1 %409, %465, !dbg !34
  %467 = and i1 %402, %462, !dbg !34
  %468 = and i1 %409, %467, !dbg !34
  %469 = extractelement <16 x i1> %332, i64 14, !dbg !34
  %470 = and i1 %403, %469, !dbg !34
  %471 = and i1 %415, %470, !dbg !34
  %472 = extractelement <16 x i1> %332, i64 15, !dbg !34
  %473 = and i1 %404, %472, !dbg !34
  %474 = and i1 %415, %473, !dbg !34
  %475 = and i1 %405, %469, !dbg !34
  %476 = and i1 %409, %475, !dbg !34
  %477 = and i1 %406, %472, !dbg !34
  %478 = and i1 %409, %477, !dbg !34
  %479 = and i1 %407, %276, !dbg !34
  %480 = and i1 %409, %479, !dbg !34
  %481 = and i1 %408, %274, !dbg !34
  %482 = and i1 %409, %481, !dbg !34
  %483 = shl i32 %48, 6, !dbg !36
  %484 = sext i32 %483 to i64, !dbg !37
  %485 = getelementptr float, ptr addrspace(1) %3, i64 %484, !dbg !37
  %486 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !13
  %487 = insertelement <4 x i32> %486, i32 %268, i64 1, !dbg !13
  %488 = shufflevector <4 x i32> %487, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>, !dbg !13
  %489 = or <4 x i32> %488, <i32 56, i32 48, i32 40, i32 32>, !dbg !13
  %490 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !13
  %491 = shufflevector <2 x i32> %490, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %492 = or disjoint <2 x i32> %491, <i32 24, i32 16>, !dbg !13
  %493 = shufflevector <4 x i32> %314, <4 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %494 = shufflevector <8 x i32> %493, <8 x i32> %279, <4 x i32> <i32 2, i32 3, i32 8, i32 9>, !dbg !18
  %495 = shufflevector <4 x i32> %314, <4 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %496 = insertelement <16 x i32> %495, i32 %269, i64 6, !dbg !18
  %497 = insertelement <16 x i32> %496, i32 %268, i64 7, !dbg !18
  %498 = insertelement <16 x i32> %497, i32 %255, i64 8, !dbg !18
  %499 = insertelement <16 x i32> %498, i32 %266, i64 9, !dbg !18
  %500 = shufflevector <4 x i32> %489, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %501 = shufflevector <16 x i32> %500, <16 x i32> %499, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %502 = shufflevector <4 x i32> %494, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %503 = shufflevector <16 x i32> %501, <16 x i32> %502, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !18
  %504 = shufflevector <2 x i32> %492, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %505 = shufflevector <16 x i32> %503, <16 x i32> %504, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !18
  %506 = or disjoint <16 x i32> %505, %328, !dbg !18
  %507 = icmp slt <16 x i32> %506, %331, !dbg !38
  %508 = extractelement <16 x i1> %507, i64 9, !dbg !18
  %509 = and i1 %41, %508, !dbg !18
  %510 = extractelement <16 x i1> %507, i64 8, !dbg !18
  %511 = and i1 %41, %510, !dbg !18
  %512 = extractelement <16 x i1> %507, i64 15, !dbg !18
  %513 = and i1 %41, %512, !dbg !18
  %514 = extractelement <16 x i1> %507, i64 14, !dbg !18
  %515 = and i1 %41, %514, !dbg !18
  %516 = extractelement <16 x i1> %507, i64 13, !dbg !18
  %517 = and i1 %41, %516, !dbg !18
  %518 = extractelement <16 x i1> %507, i64 12, !dbg !18
  %519 = and i1 %41, %518, !dbg !18
  %520 = extractelement <16 x i1> %507, i64 11, !dbg !18
  %521 = and i1 %41, %520, !dbg !18
  %522 = extractelement <16 x i1> %507, i64 10, !dbg !18
  %523 = and i1 %41, %522, !dbg !18
  %524 = extractelement <16 x i32> %506, i64 8, !dbg !31
  %525 = sext i32 %524 to i64, !dbg !31
  %.idx = shl nsw i64 %525, 7, !dbg !31
  %526 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx, !dbg !31
  %527 = extractelement <16 x i32> %506, i64 9, !dbg !31
  %528 = sext i32 %527 to i64, !dbg !31
  %.idx4 = shl nsw i64 %528, 7, !dbg !31
  %529 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx4, !dbg !31
  %530 = extractelement <16 x i32> %506, i64 10, !dbg !31
  %531 = sext i32 %530 to i64, !dbg !31
  %.idx5 = shl nsw i64 %531, 7, !dbg !31
  %532 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx5, !dbg !31
  %533 = extractelement <16 x i32> %506, i64 11, !dbg !31
  %534 = sext i32 %533 to i64, !dbg !31
  %.idx6 = shl nsw i64 %534, 7, !dbg !31
  %535 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx6, !dbg !31
  %536 = extractelement <16 x i32> %506, i64 12, !dbg !31
  %537 = sext i32 %536 to i64, !dbg !31
  %.idx7 = shl nsw i64 %537, 7, !dbg !31
  %538 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx7, !dbg !31
  %539 = extractelement <16 x i32> %506, i64 13, !dbg !31
  %540 = sext i32 %539 to i64, !dbg !31
  %.idx8 = shl nsw i64 %540, 7, !dbg !31
  %541 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx8, !dbg !31
  %542 = extractelement <16 x i32> %506, i64 14, !dbg !31
  %543 = sext i32 %542 to i64, !dbg !31
  %.idx9 = shl nsw i64 %543, 7, !dbg !31
  %544 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx9, !dbg !31
  %545 = extractelement <16 x i32> %506, i64 15, !dbg !31
  %546 = sext i32 %545 to i64, !dbg !31
  %.idx10 = shl nsw i64 %546, 7, !dbg !31
  %547 = getelementptr i8, ptr addrspace(1) %335, i64 %.idx10, !dbg !31
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %526, i1 %511) #2, !dbg !31
  %549 = bitcast i32 %548 to float, !dbg !31
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %529, i1 %509) #2, !dbg !31
  %551 = bitcast i32 %550 to float, !dbg !31
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 %523) #2, !dbg !31
  %553 = bitcast i32 %552 to float, !dbg !31
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %535, i1 %521) #2, !dbg !31
  %555 = bitcast i32 %554 to float, !dbg !31
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %538, i1 %519) #2, !dbg !31
  %557 = bitcast i32 %556 to float, !dbg !31
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %541, i1 %517) #2, !dbg !31
  %559 = bitcast i32 %558 to float, !dbg !31
  %560 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %544, i1 %515) #2, !dbg !31
  %561 = bitcast i32 %560 to float, !dbg !31
  %562 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %547, i1 %513) #2, !dbg !31
  %563 = bitcast i32 %562 to float, !dbg !31
  %564 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %309) #2, !dbg !31
  %565 = bitcast i32 %564 to float, !dbg !31
  %566 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %304) #2, !dbg !31
  %567 = bitcast i32 %566 to float, !dbg !31
  %568 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %299) #2, !dbg !31
  %569 = bitcast i32 %568 to float, !dbg !31
  %570 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %294) #2, !dbg !31
  %571 = bitcast i32 %570 to float, !dbg !31
  %572 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %289) #2, !dbg !31
  %573 = bitcast i32 %572 to float, !dbg !31
  %574 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %284) #2, !dbg !31
  %575 = bitcast i32 %574 to float, !dbg !31
  %576 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %265) #2, !dbg !31
  %577 = bitcast i32 %576 to float, !dbg !31
  %578 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %260) #2, !dbg !31
  %579 = bitcast i32 %578 to float, !dbg !31
  %580 = fsub float %347, %549, !dbg !39
  %581 = fsub float %347, %551, !dbg !39
  %582 = fsub float %349, %549, !dbg !39
  %583 = fsub float %349, %551, !dbg !39
  %584 = fsub float %347, %553, !dbg !39
  %585 = fsub float %347, %555, !dbg !39
  %586 = fsub float %349, %553, !dbg !39
  %587 = fsub float %349, %555, !dbg !39
  %588 = fsub float %347, %557, !dbg !39
  %589 = fsub float %347, %559, !dbg !39
  %590 = fsub float %349, %557, !dbg !39
  %591 = fsub float %349, %559, !dbg !39
  %592 = fsub float %347, %561, !dbg !39
  %593 = fsub float %347, %563, !dbg !39
  %594 = fsub float %349, %561, !dbg !39
  %595 = fsub float %349, %563, !dbg !39
  %596 = fsub float %347, %565, !dbg !39
  %597 = fsub float %347, %567, !dbg !39
  %598 = fsub float %349, %565, !dbg !39
  %599 = fsub float %349, %567, !dbg !39
  %600 = fsub float %347, %569, !dbg !39
  %601 = fsub float %347, %571, !dbg !39
  %602 = fsub float %349, %569, !dbg !39
  %603 = fsub float %349, %571, !dbg !39
  %604 = fsub float %347, %573, !dbg !39
  %605 = fsub float %347, %575, !dbg !39
  %606 = fsub float %349, %573, !dbg !39
  %607 = fsub float %349, %575, !dbg !39
  %608 = fsub float %349, %577, !dbg !39
  %609 = fsub float %349, %579, !dbg !39
  %610 = fmul float %580, 0x3FF7154760000000, !dbg !40
  %611 = tail call float @llvm.nvvm.ex2.approx.f(float %610), !dbg !40
  %612 = fmul float %581, 0x3FF7154760000000, !dbg !40
  %613 = tail call float @llvm.nvvm.ex2.approx.f(float %612), !dbg !40
  %614 = fmul float %582, 0x3FF7154760000000, !dbg !40
  %615 = tail call float @llvm.nvvm.ex2.approx.f(float %614), !dbg !40
  %616 = fmul float %583, 0x3FF7154760000000, !dbg !40
  %617 = tail call float @llvm.nvvm.ex2.approx.f(float %616), !dbg !40
  %618 = fmul float %584, 0x3FF7154760000000, !dbg !40
  %619 = tail call float @llvm.nvvm.ex2.approx.f(float %618), !dbg !40
  %620 = fmul float %585, 0x3FF7154760000000, !dbg !40
  %621 = tail call float @llvm.nvvm.ex2.approx.f(float %620), !dbg !40
  %622 = fmul float %586, 0x3FF7154760000000, !dbg !40
  %623 = tail call float @llvm.nvvm.ex2.approx.f(float %622), !dbg !40
  %624 = fmul float %587, 0x3FF7154760000000, !dbg !40
  %625 = tail call float @llvm.nvvm.ex2.approx.f(float %624), !dbg !40
  %626 = fmul float %588, 0x3FF7154760000000, !dbg !40
  %627 = tail call float @llvm.nvvm.ex2.approx.f(float %626), !dbg !40
  %628 = fmul float %589, 0x3FF7154760000000, !dbg !40
  %629 = tail call float @llvm.nvvm.ex2.approx.f(float %628), !dbg !40
  %630 = fmul float %590, 0x3FF7154760000000, !dbg !40
  %631 = tail call float @llvm.nvvm.ex2.approx.f(float %630), !dbg !40
  %632 = fmul float %591, 0x3FF7154760000000, !dbg !40
  %633 = tail call float @llvm.nvvm.ex2.approx.f(float %632), !dbg !40
  %634 = fmul float %592, 0x3FF7154760000000, !dbg !40
  %635 = tail call float @llvm.nvvm.ex2.approx.f(float %634), !dbg !40
  %636 = fmul float %593, 0x3FF7154760000000, !dbg !40
  %637 = tail call float @llvm.nvvm.ex2.approx.f(float %636), !dbg !40
  %638 = fmul float %594, 0x3FF7154760000000, !dbg !40
  %639 = tail call float @llvm.nvvm.ex2.approx.f(float %638), !dbg !40
  %640 = fmul float %595, 0x3FF7154760000000, !dbg !40
  %641 = tail call float @llvm.nvvm.ex2.approx.f(float %640), !dbg !40
  %642 = fmul float %596, 0x3FF7154760000000, !dbg !40
  %643 = tail call float @llvm.nvvm.ex2.approx.f(float %642), !dbg !40
  %644 = fmul float %597, 0x3FF7154760000000, !dbg !40
  %645 = tail call float @llvm.nvvm.ex2.approx.f(float %644), !dbg !40
  %646 = fmul float %598, 0x3FF7154760000000, !dbg !40
  %647 = tail call float @llvm.nvvm.ex2.approx.f(float %646), !dbg !40
  %648 = fmul float %599, 0x3FF7154760000000, !dbg !40
  %649 = tail call float @llvm.nvvm.ex2.approx.f(float %648), !dbg !40
  %650 = fmul float %600, 0x3FF7154760000000, !dbg !40
  %651 = tail call float @llvm.nvvm.ex2.approx.f(float %650), !dbg !40
  %652 = fmul float %601, 0x3FF7154760000000, !dbg !40
  %653 = tail call float @llvm.nvvm.ex2.approx.f(float %652), !dbg !40
  %654 = fmul float %602, 0x3FF7154760000000, !dbg !40
  %655 = tail call float @llvm.nvvm.ex2.approx.f(float %654), !dbg !40
  %656 = fmul float %603, 0x3FF7154760000000, !dbg !40
  %657 = tail call float @llvm.nvvm.ex2.approx.f(float %656), !dbg !40
  %658 = fmul float %604, 0x3FF7154760000000, !dbg !40
  %659 = tail call float @llvm.nvvm.ex2.approx.f(float %658), !dbg !40
  %660 = fmul float %605, 0x3FF7154760000000, !dbg !40
  %661 = tail call float @llvm.nvvm.ex2.approx.f(float %660), !dbg !40
  %662 = fmul float %606, 0x3FF7154760000000, !dbg !40
  %663 = tail call float @llvm.nvvm.ex2.approx.f(float %662), !dbg !40
  %664 = fmul float %607, 0x3FF7154760000000, !dbg !40
  %665 = tail call float @llvm.nvvm.ex2.approx.f(float %664), !dbg !40
  %666 = fmul float %608, 0x3FF7154760000000, !dbg !40
  %667 = tail call float @llvm.nvvm.ex2.approx.f(float %666), !dbg !40
  %668 = fmul float %609, 0x3FF7154760000000, !dbg !40
  %669 = tail call float @llvm.nvvm.ex2.approx.f(float %668), !dbg !40
  %670 = fmul float %350, %611, !dbg !32
  %671 = fmul float %351, %613, !dbg !32
  %672 = fmul float %352, %615, !dbg !32
  %673 = fmul float %353, %617, !dbg !32
  %674 = fmul float %354, %619, !dbg !32
  %675 = fmul float %355, %621, !dbg !32
  %676 = fmul float %356, %623, !dbg !32
  %677 = fmul float %357, %625, !dbg !32
  %678 = fmul float %358, %627, !dbg !32
  %679 = fmul float %359, %629, !dbg !32
  %680 = fmul float %360, %631, !dbg !32
  %681 = fmul float %361, %633, !dbg !32
  %682 = fmul float %362, %635, !dbg !32
  %683 = fmul float %363, %637, !dbg !32
  %684 = fmul float %364, %639, !dbg !32
  %685 = fmul float %365, %641, !dbg !32
  %686 = fmul float %366, %643, !dbg !32
  %687 = fmul float %367, %645, !dbg !32
  %688 = fmul float %368, %647, !dbg !32
  %689 = fmul float %369, %649, !dbg !32
  %690 = fmul float %370, %651, !dbg !32
  %691 = fmul float %371, %653, !dbg !32
  %692 = fmul float %372, %655, !dbg !32
  %693 = fmul float %373, %657, !dbg !32
  %694 = fmul float %374, %659, !dbg !32
  %695 = fmul float %375, %661, !dbg !32
  %696 = fmul float %376, %663, !dbg !32
  %697 = fmul float %377, %665, !dbg !32
  %698 = fmul float %378, %667, !dbg !32
  %699 = fmul float %379, %669, !dbg !32
  %700 = fmul float %670, %380, !dbg !33
  %701 = fmul float %671, %380, !dbg !33
  %702 = fmul float %672, %381, !dbg !33
  %703 = fmul float %673, %381, !dbg !33
  %704 = fmul float %674, %380, !dbg !33
  %705 = fmul float %675, %380, !dbg !33
  %706 = fmul float %676, %381, !dbg !33
  %707 = fmul float %677, %381, !dbg !33
  %708 = fmul float %678, %380, !dbg !33
  %709 = fmul float %679, %380, !dbg !33
  %710 = fmul float %680, %381, !dbg !33
  %711 = fmul float %681, %381, !dbg !33
  %712 = fmul float %682, %380, !dbg !33
  %713 = fmul float %683, %380, !dbg !33
  %714 = fmul float %684, %381, !dbg !33
  %715 = fmul float %685, %381, !dbg !33
  %716 = fmul float %686, %380, !dbg !33
  %717 = fmul float %687, %380, !dbg !33
  %718 = fmul float %688, %381, !dbg !33
  %719 = fmul float %689, %381, !dbg !33
  %720 = fmul float %690, %380, !dbg !33
  %721 = fmul float %691, %380, !dbg !33
  %722 = fmul float %692, %381, !dbg !33
  %723 = fmul float %693, %381, !dbg !33
  %724 = fmul float %694, %380, !dbg !33
  %725 = fmul float %695, %380, !dbg !33
  %726 = fmul float %696, %381, !dbg !33
  %727 = fmul float %697, %381, !dbg !33
  %728 = fmul float %698, %381, !dbg !33
  %729 = fmul float %699, %381, !dbg !33
  %730 = extractelement <16 x i32> %506, i64 7, !dbg !38
  %731 = sext i32 %730 to i64, !dbg !38
  %.idx19 = shl nsw i64 %731, 13, !dbg !38
  %732 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx19, !dbg !38
  %733 = getelementptr float, ptr addrspace(1) %732, i64 %272, !dbg !38
  %734 = extractelement <16 x i32> %506, i64 6, !dbg !38
  %735 = sext i32 %734 to i64, !dbg !38
  %.idx20 = shl nsw i64 %735, 13, !dbg !38
  %736 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx20, !dbg !38
  %737 = getelementptr float, ptr addrspace(1) %736, i64 %272, !dbg !38
  %738 = extractelement <16 x i32> %506, i64 5, !dbg !38
  %739 = sext i32 %738 to i64, !dbg !38
  %.idx21 = shl nsw i64 %739, 13, !dbg !38
  %740 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx21, !dbg !38
  %741 = getelementptr float, ptr addrspace(1) %740, i64 %272, !dbg !38
  %742 = extractelement <16 x i32> %506, i64 4, !dbg !38
  %743 = sext i32 %742 to i64, !dbg !38
  %.idx22 = shl nsw i64 %743, 13, !dbg !38
  %744 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx22, !dbg !38
  %745 = getelementptr float, ptr addrspace(1) %744, i64 %272, !dbg !38
  %746 = extractelement <16 x i32> %506, i64 3, !dbg !38
  %747 = sext i32 %746 to i64, !dbg !38
  %.idx23 = shl nsw i64 %747, 13, !dbg !38
  %748 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx23, !dbg !38
  %749 = getelementptr float, ptr addrspace(1) %748, i64 %272, !dbg !38
  %750 = extractelement <16 x i32> %506, i64 2, !dbg !38
  %751 = sext i32 %750 to i64, !dbg !38
  %.idx24 = shl nsw i64 %751, 13, !dbg !38
  %752 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx24, !dbg !38
  %753 = getelementptr float, ptr addrspace(1) %752, i64 %272, !dbg !38
  %754 = extractelement <16 x i32> %506, i64 1, !dbg !38
  %755 = sext i32 %754 to i64, !dbg !38
  %.idx25 = shl nsw i64 %755, 13, !dbg !38
  %756 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx25, !dbg !38
  %757 = getelementptr float, ptr addrspace(1) %756, i64 %272, !dbg !38
  %758 = extractelement <16 x i32> %506, i64 0, !dbg !38
  %759 = sext i32 %758 to i64, !dbg !38
  %.idx26 = shl nsw i64 %759, 13, !dbg !38
  %760 = getelementptr i8, ptr addrspace(1) %485, i64 %.idx26, !dbg !38
  %761 = getelementptr float, ptr addrspace(1) %760, i64 %272, !dbg !38
  %762 = extractelement <16 x i1> %507, i64 7, !dbg !38
  %763 = and i1 %41, %762, !dbg !38
  %764 = extractelement <16 x i1> %507, i64 6, !dbg !38
  %765 = and i1 %41, %764, !dbg !38
  %766 = extractelement <16 x i1> %507, i64 5, !dbg !38
  %767 = and i1 %41, %766, !dbg !38
  %768 = extractelement <16 x i1> %507, i64 4, !dbg !38
  %769 = and i1 %41, %768, !dbg !38
  %770 = extractelement <16 x i1> %507, i64 3, !dbg !38
  %771 = and i1 %41, %770, !dbg !38
  %772 = extractelement <16 x i1> %507, i64 2, !dbg !38
  %773 = and i1 %41, %772, !dbg !38
  %774 = extractelement <16 x i1> %507, i64 1, !dbg !38
  %775 = and i1 %41, %774, !dbg !38
  %776 = extractelement <16 x i1> %507, i64 0, !dbg !38
  %777 = and i1 %41, %776, !dbg !38
  %778 = shl nuw nsw i32 %12, 4, !dbg !38
  %779 = and i32 %778, 448, !dbg !38
  %780 = shl nuw nsw i32 %12, 5, !dbg !38
  %781 = and i32 %780, 3072, !dbg !38
  %782 = or disjoint i32 %781, %779, !dbg !38
  %783 = or disjoint i32 %782, %255, !dbg !38
  %784 = and i32 %270, 508, !dbg !38
  %785 = lshr exact i32 %782, 2, !dbg !38
  %786 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %785, !dbg !38
  %787 = getelementptr inbounds nuw float, ptr addrspace(3) %786, i32 %783, !dbg !38
  %788 = bitcast float %700 to i32, !dbg !38
  %789 = select i1 %416, i32 %788, i32 0, !dbg !41
  %790 = bitcast float %701 to i32, !dbg !38
  %791 = select i1 %418, i32 %790, i32 0, !dbg !41
  %792 = insertelement <2 x i32> poison, i32 %789, i64 0, !dbg !38
  %793 = insertelement <2 x i32> %792, i32 %791, i64 1, !dbg !38
  store <2 x i32> %793, ptr addrspace(3) %787, align 8, !dbg !38
  %794 = or disjoint i32 %783, 512, !dbg !38
  %795 = lshr i32 %794, 4, !dbg !38
  %796 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %795, !dbg !38
  %797 = getelementptr inbounds nuw float, ptr addrspace(3) %796, i32 %794, !dbg !38
  %798 = bitcast float %702 to i32, !dbg !38
  %799 = select i1 %411, i32 %798, i32 0, !dbg !41
  %800 = bitcast float %703 to i32, !dbg !38
  %801 = select i1 %413, i32 %800, i32 0, !dbg !41
  %802 = insertelement <2 x i32> poison, i32 %799, i64 0, !dbg !38
  %803 = insertelement <2 x i32> %802, i32 %801, i64 1, !dbg !38
  store <2 x i32> %803, ptr addrspace(3) %797, align 8, !dbg !38
  %804 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 32, !dbg !38
  %805 = bitcast float %704 to i32, !dbg !38
  %806 = select i1 %421, i32 %805, i32 0, !dbg !41
  %807 = bitcast float %705 to i32, !dbg !38
  %808 = select i1 %424, i32 %807, i32 0, !dbg !41
  %809 = insertelement <2 x i32> poison, i32 %806, i64 0, !dbg !38
  %810 = insertelement <2 x i32> %809, i32 %808, i64 1, !dbg !38
  store <2 x i32> %810, ptr addrspace(3) %804, align 8, !dbg !38
  %811 = or disjoint i32 %783, 520, !dbg !38
  %812 = lshr i32 %811, 4, !dbg !38
  %813 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %812, !dbg !38
  %814 = getelementptr inbounds nuw float, ptr addrspace(3) %813, i32 %811, !dbg !38
  %815 = bitcast float %706 to i32, !dbg !38
  %816 = select i1 %426, i32 %815, i32 0, !dbg !41
  %817 = bitcast float %707 to i32, !dbg !38
  %818 = select i1 %428, i32 %817, i32 0, !dbg !41
  %819 = insertelement <2 x i32> poison, i32 %816, i64 0, !dbg !38
  %820 = insertelement <2 x i32> %819, i32 %818, i64 1, !dbg !38
  store <2 x i32> %820, ptr addrspace(3) %814, align 8, !dbg !38
  %821 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 64, !dbg !38
  %822 = bitcast float %708 to i32, !dbg !38
  %823 = select i1 %431, i32 %822, i32 0, !dbg !41
  %824 = bitcast float %709 to i32, !dbg !38
  %825 = select i1 %434, i32 %824, i32 0, !dbg !41
  %826 = insertelement <2 x i32> poison, i32 %823, i64 0, !dbg !38
  %827 = insertelement <2 x i32> %826, i32 %825, i64 1, !dbg !38
  store <2 x i32> %827, ptr addrspace(3) %821, align 8, !dbg !38
  %828 = or disjoint i32 %783, 528, !dbg !38
  %829 = lshr i32 %828, 4, !dbg !38
  %830 = and i32 %829, 252, !dbg !38
  %831 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %830, !dbg !38
  %832 = getelementptr inbounds nuw float, ptr addrspace(3) %831, i32 %828, !dbg !38
  %833 = bitcast float %710 to i32, !dbg !38
  %834 = select i1 %436, i32 %833, i32 0, !dbg !41
  %835 = bitcast float %711 to i32, !dbg !38
  %836 = select i1 %438, i32 %835, i32 0, !dbg !41
  %837 = insertelement <2 x i32> poison, i32 %834, i64 0, !dbg !38
  %838 = insertelement <2 x i32> %837, i32 %836, i64 1, !dbg !38
  store <2 x i32> %838, ptr addrspace(3) %832, align 8, !dbg !38
  %839 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 96, !dbg !38
  %840 = bitcast float %712 to i32, !dbg !38
  %841 = select i1 %441, i32 %840, i32 0, !dbg !41
  %842 = bitcast float %713 to i32, !dbg !38
  %843 = select i1 %444, i32 %842, i32 0, !dbg !41
  %844 = insertelement <2 x i32> poison, i32 %841, i64 0, !dbg !38
  %845 = insertelement <2 x i32> %844, i32 %843, i64 1, !dbg !38
  store <2 x i32> %845, ptr addrspace(3) %839, align 8, !dbg !38
  %846 = or disjoint i32 %783, 536, !dbg !38
  %847 = lshr i32 %846, 4, !dbg !38
  %848 = and i32 %847, 252, !dbg !38
  %849 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %848, !dbg !38
  %850 = getelementptr inbounds nuw float, ptr addrspace(3) %849, i32 %846, !dbg !38
  %851 = bitcast float %714 to i32, !dbg !38
  %852 = select i1 %446, i32 %851, i32 0, !dbg !41
  %853 = bitcast float %715 to i32, !dbg !38
  %854 = select i1 %448, i32 %853, i32 0, !dbg !41
  %855 = insertelement <2 x i32> poison, i32 %852, i64 0, !dbg !38
  %856 = insertelement <2 x i32> %855, i32 %854, i64 1, !dbg !38
  store <2 x i32> %856, ptr addrspace(3) %850, align 8, !dbg !38
  %857 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 128, !dbg !38
  %858 = bitcast float %716 to i32, !dbg !38
  %859 = select i1 %451, i32 %858, i32 0, !dbg !41
  %860 = bitcast float %717 to i32, !dbg !38
  %861 = select i1 %454, i32 %860, i32 0, !dbg !41
  %862 = insertelement <2 x i32> poison, i32 %859, i64 0, !dbg !38
  %863 = insertelement <2 x i32> %862, i32 %861, i64 1, !dbg !38
  store <2 x i32> %863, ptr addrspace(3) %857, align 8, !dbg !38
  %864 = or disjoint i32 %783, 544, !dbg !38
  %865 = lshr i32 %864, 4, !dbg !38
  %866 = and i32 %865, 252, !dbg !38
  %867 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %866, !dbg !38
  %868 = getelementptr inbounds nuw float, ptr addrspace(3) %867, i32 %864, !dbg !38
  %869 = bitcast float %718 to i32, !dbg !38
  %870 = select i1 %456, i32 %869, i32 0, !dbg !41
  %871 = bitcast float %719 to i32, !dbg !38
  %872 = select i1 %458, i32 %871, i32 0, !dbg !41
  %873 = insertelement <2 x i32> poison, i32 %870, i64 0, !dbg !38
  %874 = insertelement <2 x i32> %873, i32 %872, i64 1, !dbg !38
  store <2 x i32> %874, ptr addrspace(3) %868, align 8, !dbg !38
  %875 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 160, !dbg !38
  %876 = bitcast float %720 to i32, !dbg !38
  %877 = select i1 %461, i32 %876, i32 0, !dbg !41
  %878 = bitcast float %721 to i32, !dbg !38
  %879 = select i1 %464, i32 %878, i32 0, !dbg !41
  %880 = insertelement <2 x i32> poison, i32 %877, i64 0, !dbg !38
  %881 = insertelement <2 x i32> %880, i32 %879, i64 1, !dbg !38
  store <2 x i32> %881, ptr addrspace(3) %875, align 8, !dbg !38
  %882 = or disjoint i32 %783, 552, !dbg !38
  %883 = lshr i32 %882, 4, !dbg !38
  %884 = and i32 %883, 252, !dbg !38
  %885 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %884, !dbg !38
  %886 = getelementptr inbounds nuw float, ptr addrspace(3) %885, i32 %882, !dbg !38
  %887 = bitcast float %722 to i32, !dbg !38
  %888 = select i1 %466, i32 %887, i32 0, !dbg !41
  %889 = bitcast float %723 to i32, !dbg !38
  %890 = select i1 %468, i32 %889, i32 0, !dbg !41
  %891 = insertelement <2 x i32> poison, i32 %888, i64 0, !dbg !38
  %892 = insertelement <2 x i32> %891, i32 %890, i64 1, !dbg !38
  store <2 x i32> %892, ptr addrspace(3) %886, align 8, !dbg !38
  %893 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 192, !dbg !38
  %894 = bitcast float %724 to i32, !dbg !38
  %895 = select i1 %471, i32 %894, i32 0, !dbg !41
  %896 = bitcast float %725 to i32, !dbg !38
  %897 = select i1 %474, i32 %896, i32 0, !dbg !41
  %898 = insertelement <2 x i32> poison, i32 %895, i64 0, !dbg !38
  %899 = insertelement <2 x i32> %898, i32 %897, i64 1, !dbg !38
  store <2 x i32> %899, ptr addrspace(3) %893, align 8, !dbg !38
  %900 = or disjoint i32 %783, 560, !dbg !38
  %901 = lshr i32 %900, 4, !dbg !38
  %902 = and i32 %901, 252, !dbg !38
  %903 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %902, !dbg !38
  %904 = getelementptr inbounds nuw float, ptr addrspace(3) %903, i32 %900, !dbg !38
  %905 = bitcast float %726 to i32, !dbg !38
  %906 = select i1 %476, i32 %905, i32 0, !dbg !41
  %907 = bitcast float %727 to i32, !dbg !38
  %908 = select i1 %478, i32 %907, i32 0, !dbg !41
  %909 = insertelement <2 x i32> poison, i32 %906, i64 0, !dbg !38
  %910 = insertelement <2 x i32> %909, i32 %908, i64 1, !dbg !38
  store <2 x i32> %910, ptr addrspace(3) %904, align 8, !dbg !38
  %911 = getelementptr inbounds nuw i8, ptr addrspace(3) %787, i32 224, !dbg !38
  store <2 x i32> zeroinitializer, ptr addrspace(3) %911, align 8, !dbg !38
  %912 = or disjoint i32 %783, 568, !dbg !38
  %913 = lshr i32 %912, 4, !dbg !38
  %914 = and i32 %913, 252, !dbg !38
  %915 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %914, !dbg !38
  %916 = getelementptr inbounds nuw float, ptr addrspace(3) %915, i32 %912, !dbg !38
  %917 = bitcast float %728 to i32, !dbg !38
  %918 = select i1 %480, i32 %917, i32 0, !dbg !41
  %919 = bitcast float %729 to i32, !dbg !38
  %920 = select i1 %482, i32 %919, i32 0, !dbg !41
  %921 = insertelement <2 x i32> poison, i32 %918, i64 0, !dbg !38
  %922 = insertelement <2 x i32> %921, i32 %920, i64 1, !dbg !38
  store <2 x i32> %922, ptr addrspace(3) %916, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  %923 = and i32 %14, 28, !dbg !38
  %924 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %923, !dbg !38
  %925 = getelementptr inbounds nuw float, ptr addrspace(3) %924, i32 %784, !dbg !38
  %926 = load <4 x i32>, ptr addrspace(3) %925, align 16, !dbg !38
  %927 = or disjoint i32 %784, 512, !dbg !38
  %928 = lshr i32 %927, 4, !dbg !38
  %929 = and i32 %928, 60, !dbg !38
  %930 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %929, !dbg !38
  %931 = getelementptr inbounds nuw float, ptr addrspace(3) %930, i32 %927, !dbg !38
  %932 = load <4 x i32>, ptr addrspace(3) %931, align 16, !dbg !38
  %933 = or disjoint i32 %784, 1024, !dbg !38
  %934 = lshr i32 %933, 4, !dbg !38
  %935 = and i32 %934, 92, !dbg !38
  %936 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %935, !dbg !38
  %937 = getelementptr inbounds nuw float, ptr addrspace(3) %936, i32 %933, !dbg !38
  %938 = load <4 x i32>, ptr addrspace(3) %937, align 16, !dbg !38
  %939 = or disjoint i32 %784, 1536, !dbg !38
  %940 = lshr i32 %939, 4, !dbg !38
  %941 = and i32 %940, 124, !dbg !38
  %942 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %941, !dbg !38
  %943 = getelementptr inbounds nuw float, ptr addrspace(3) %942, i32 %939, !dbg !38
  %944 = load <4 x i32>, ptr addrspace(3) %943, align 16, !dbg !38
  %945 = or disjoint i32 %784, 2048, !dbg !38
  %946 = lshr i32 %945, 4, !dbg !38
  %947 = and i32 %946, 156, !dbg !38
  %948 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %947, !dbg !38
  %949 = getelementptr inbounds nuw float, ptr addrspace(3) %948, i32 %945, !dbg !38
  %950 = load <4 x i32>, ptr addrspace(3) %949, align 16, !dbg !38
  %951 = or disjoint i32 %784, 2560, !dbg !38
  %952 = lshr i32 %951, 4, !dbg !38
  %953 = and i32 %952, 188, !dbg !38
  %954 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %953, !dbg !38
  %955 = getelementptr inbounds nuw float, ptr addrspace(3) %954, i32 %951, !dbg !38
  %956 = load <4 x i32>, ptr addrspace(3) %955, align 16, !dbg !38
  %957 = or disjoint i32 %784, 3072, !dbg !38
  %958 = lshr i32 %957, 4, !dbg !38
  %959 = and i32 %958, 220, !dbg !38
  %960 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %959, !dbg !38
  %961 = getelementptr inbounds nuw float, ptr addrspace(3) %960, i32 %957, !dbg !38
  %962 = load <4 x i32>, ptr addrspace(3) %961, align 16, !dbg !38
  %963 = or i32 %270, 3584, !dbg !38
  %964 = lshr i32 %963, 4, !dbg !38
  %965 = and i32 %964, 252, !dbg !38
  %966 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %965, !dbg !38
  %967 = getelementptr inbounds nuw float, ptr addrspace(3) %966, i32 %963, !dbg !38
  %968 = load <4 x i32>, ptr addrspace(3) %967, align 16, !dbg !38
  %.extract = extractelement <4 x i32> %926, i64 0, !dbg !38
  %.extract58 = extractelement <4 x i32> %926, i64 1, !dbg !38
  %.extract59 = extractelement <4 x i32> %926, i64 2, !dbg !38
  %.extract60 = extractelement <4 x i32> %926, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract58, i32 %.extract59, i32 %.extract60, ptr addrspace(1) %733, i1 %763) #2, !dbg !38
  %.extract61 = extractelement <4 x i32> %932, i64 0, !dbg !38
  %.extract62 = extractelement <4 x i32> %932, i64 1, !dbg !38
  %.extract63 = extractelement <4 x i32> %932, i64 2, !dbg !38
  %.extract64 = extractelement <4 x i32> %932, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract62, i32 %.extract63, i32 %.extract64, ptr addrspace(1) %737, i1 %765) #2, !dbg !38
  %.extract65 = extractelement <4 x i32> %938, i64 0, !dbg !38
  %.extract66 = extractelement <4 x i32> %938, i64 1, !dbg !38
  %.extract67 = extractelement <4 x i32> %938, i64 2, !dbg !38
  %.extract68 = extractelement <4 x i32> %938, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract65, i32 %.extract66, i32 %.extract67, i32 %.extract68, ptr addrspace(1) %741, i1 %767) #2, !dbg !38
  %.extract69 = extractelement <4 x i32> %944, i64 0, !dbg !38
  %.extract70 = extractelement <4 x i32> %944, i64 1, !dbg !38
  %.extract71 = extractelement <4 x i32> %944, i64 2, !dbg !38
  %.extract72 = extractelement <4 x i32> %944, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract70, i32 %.extract71, i32 %.extract72, ptr addrspace(1) %745, i1 %769) #2, !dbg !38
  %.extract73 = extractelement <4 x i32> %950, i64 0, !dbg !38
  %.extract74 = extractelement <4 x i32> %950, i64 1, !dbg !38
  %.extract75 = extractelement <4 x i32> %950, i64 2, !dbg !38
  %.extract76 = extractelement <4 x i32> %950, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract73, i32 %.extract74, i32 %.extract75, i32 %.extract76, ptr addrspace(1) %749, i1 %771) #2, !dbg !38
  %.extract77 = extractelement <4 x i32> %956, i64 0, !dbg !38
  %.extract78 = extractelement <4 x i32> %956, i64 1, !dbg !38
  %.extract79 = extractelement <4 x i32> %956, i64 2, !dbg !38
  %.extract80 = extractelement <4 x i32> %956, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract78, i32 %.extract79, i32 %.extract80, ptr addrspace(1) %753, i1 %773) #2, !dbg !38
  %.extract81 = extractelement <4 x i32> %962, i64 0, !dbg !38
  %.extract82 = extractelement <4 x i32> %962, i64 1, !dbg !38
  %.extract83 = extractelement <4 x i32> %962, i64 2, !dbg !38
  %.extract84 = extractelement <4 x i32> %962, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract81, i32 %.extract82, i32 %.extract83, i32 %.extract84, ptr addrspace(1) %757, i1 %775) #2, !dbg !38
  %.extract85 = extractelement <4 x i32> %968, i64 0, !dbg !38
  %.extract86 = extractelement <4 x i32> %968, i64 1, !dbg !38
  %.extract87 = extractelement <4 x i32> %968, i64 2, !dbg !38
  %.extract88 = extractelement <4 x i32> %968, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract85, i32 %.extract86, i32 %.extract87, i32 %.extract88, ptr addrspace(1) %761, i1 %777) #2, !dbg !38
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 59, column: 90, scope: !5)
!26 = !DILocation(line: 51, column: 21, scope: !5)
!27 = !DILocation(line: 52, column: 16, scope: !5)
!28 = !DILocation(line: 70, column: 26, scope: !5)
!29 = !DILocation(line: 64, column: 36, scope: !5)
!30 = !DILocation(line: 64, column: 44, scope: !5)
!31 = !DILocation(line: 65, column: 22, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 70, column: 43, scope: !5)
!35 = !DILocation(line: 70, column: 58, scope: !5)
!36 = !DILocation(line: 72, column: 48, scope: !5)
!37 = !DILocation(line: 72, column: 32, scope: !5)
!38 = !DILocation(line: 73, column: 18, scope: !5)
!39 = !DILocation(line: 66, column: 34, scope: !5)
!40 = !DILocation(line: 67, column: 19, scope: !5)
!41 = !DILocation(line: 71, column: 29, scope: !5)
!42 = !DILocation(line: 73, column: 4, scope: !5)
