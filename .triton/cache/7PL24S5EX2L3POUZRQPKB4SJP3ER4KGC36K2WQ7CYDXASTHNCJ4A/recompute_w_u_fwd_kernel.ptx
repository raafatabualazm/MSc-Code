//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<68>;
	.reg .b16 	%rs<37>;
	.reg .b32 	%r<1038>;
	.reg .b64 	%rd<185>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd47, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd46, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd45, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd61, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r95, %ctaid.x;
	ld.param.b64 	%rd62, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r96, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r97, %r96, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r98, %r96, 31;
	ld.param.b64 	%rd63, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r99, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r100, %r97, %r99;
	ld.param.b64 	%rd64, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd65, %r100, 2;
	add.s64 	%rd66, %rd62, %rd65;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd67, %r98, 2;
	add.s64 	%rd68, %rd66, %rd67;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r101, %r95, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd69, %r99;
	cvt.s64.s32 	%rd70, %r101;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r102, %tid.x;
	shr.u32 	%r1, %r102, 5;
	bfe.s32 	%r103, %r102, 5, 1;
	bfe.u32 	%r104, %r102, 3, 4;
	or.b32 	%r105, %r104, 16;
	or.b32 	%r106, %r104, 32;
	or.b32 	%r107, %r104, 48;
	shl.b32 	%r108, %r102, 3;
	and.b32 	%r109, %r108, 56;
	cvt.u64.u32 	%rd71, %r104;
	cvt.u64.u32 	%rd72, %r105;
	cvt.u64.u32 	%rd73, %r106;
	cvt.u64.u32 	%rd74, %r107;
	cvt.u64.u32 	%rd1, %r109;
	or.b64 	%rd75, %rd71, %rd70;
	or.b64 	%rd76, %rd72, %rd70;
	or.b64 	%rd77, %rd73, %rd70;
	or.b64 	%rd78, %rd74, %rd70;
	shl.b64 	%rd2, %rd75, 5;
	shl.b64 	%rd3, %rd76, 5;
	shl.b64 	%rd4, %rd77, 5;
	shl.b64 	%rd5, %rd78, 5;
	shl.b64 	%rd79, %rd75, 6;
	add.s64 	%rd48, %rd68, %rd79;
	shl.b64 	%rd80, %rd76, 6;
	add.s64 	%rd49, %rd68, %rd80;
	shl.b64 	%rd81, %rd77, 6;
	add.s64 	%rd50, %rd68, %rd81;
	shl.b64 	%rd82, %rd78, 6;
	add.s64 	%rd51, %rd68, %rd82;
	setp.gt.s32 	%p32, %r101, -1;
	setp.lt.s64 	%p33, %rd75, %rd69;
	setp.lt.s64 	%p34, %rd76, %rd69;
	setp.lt.s64 	%p35, %rd77, %rd69;
	setp.lt.s64 	%p36, %rd78, %rd69;
	and.pred 	%p45, %p32, %p33;
	mov.pred 	%p64, %p45;
	and.pred 	%p46, %p32, %p34;
	mov.pred 	%p65, %p46;
	and.pred 	%p47, %p32, %p35;
	mov.pred 	%p66, %p47;
	and.pred 	%p48, %p32, %p36;
	mov.pred 	%p67, %p48;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p64 ld.global.b16 { %rs1 }, [ %rd48 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p65 ld.global.b16 { %rs2 }, [ %rd49 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs3, 0x0;
	@%p66 ld.global.b16 { %rs3 }, [ %rd50 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs4, 0x0;
	@%p67 ld.global.b16 { %rs4 }, [ %rd51 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r100, %r98;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r110, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd83, %r110, 2;
	add.s64 	%rd84, %rd64, %rd83;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd6, %rd75, 12;
	add.s64 	%rd85, %rd84, %rd6;
	mul.wide.u32 	%rd86, %r109, 2;
	add.s64 	%rd52, %rd85, %rd86;
	shl.b64 	%rd7, %rd76, 12;
	add.s64 	%rd87, %rd84, %rd7;
	add.s64 	%rd53, %rd87, %rd86;
	shl.b64 	%rd8, %rd77, 12;
	add.s64 	%rd88, %rd84, %rd8;
	add.s64 	%rd54, %rd88, %rd86;
	shl.b64 	%rd9, %rd78, 12;
	add.s64 	%rd89, %rd84, %rd9;
	add.s64 	%rd55, %rd89, %rd86;
	// begin inline asm
	mov.u32 %r71, 0x0;
	mov.u32 %r72, 0x0;
	mov.u32 %r73, 0x0;
	mov.u32 %r74, 0x0;
	@%p45 ld.global.v4.b32 { %r71, %r72, %r73, %r74 }, [ %rd52 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	mov.u32 %r77, 0x0;
	mov.u32 %r78, 0x0;
	@%p46 ld.global.v4.b32 { %r75, %r76, %r77, %r78 }, [ %rd53 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	mov.u32 %r81, 0x0;
	mov.u32 %r82, 0x0;
	@%p47 ld.global.v4.b32 { %r79, %r80, %r81, %r82 }, [ %rd54 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r83, 0x0;
	mov.u32 %r84, 0x0;
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	@%p48 ld.global.v4.b32 { %r83, %r84, %r85, %r86 }, [ %rd55 + 0 ];
	// end inline asm
	and.b32 	%r111, %r103, 288;
	and.b32 	%r112, %r102, 24;
	mul.lo.s32 	%r113, %r112, 9;
	xor.b32 	%r114, %r113, %r109;
	xor.b32 	%r115, %r114, %r111;
	and.b32 	%r116, %r108, 512;
	or.b32 	%r117, %r115, %r116;
	shl.b32 	%r118, %r117, 1;
	mov.b32 	%r119, global_smem;
	add.s32 	%r120, %r119, 17408;
	add.s32 	%r121, %r120, %r118;
	st.shared.v4.b32 	[%r121], {%r71, %r72, %r73, %r74};
	or.b32 	%r122, %r109, 1024;
	xor.b32 	%r123, %r113, %r122;
	xor.b32 	%r124, %r123, %r111;
	or.b32 	%r125, %r124, %r116;
	shl.b32 	%r126, %r125, 1;
	add.s32 	%r127, %r120, %r126;
	st.shared.v4.b32 	[%r127], {%r75, %r76, %r77, %r78};
	or.b32 	%r128, %r109, 2048;
	xor.b32 	%r129, %r113, %r128;
	xor.b32 	%r130, %r129, %r111;
	or.b32 	%r131, %r130, %r116;
	shl.b32 	%r132, %r131, 1;
	add.s32 	%r133, %r120, %r132;
	st.shared.v4.b32 	[%r133], {%r79, %r80, %r81, %r82};
	or.b32 	%r134, %r109, 3072;
	xor.b32 	%r135, %r113, %r134;
	xor.b32 	%r136, %r135, %r111;
	or.b32 	%r137, %r136, %r116;
	shl.b32 	%r138, %r137, 1;
	add.s32 	%r139, %r120, %r138;
	st.shared.v4.b32 	[%r139], {%r83, %r84, %r85, %r86};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r140, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd10, %r140;
	mul.wide.s32 	%rd90, %r140, 2;
	add.s64 	%rd11, %rd61, %rd90;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd12, %rd63, %rd90;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd181, %rd6, %rd1;
	or.b64 	%rd182, %rd7, %rd1;
	or.b64 	%rd183, %rd8, %rd1;
	or.b64 	%rd184, %rd9, %rd1;
	shl.b64 	%rd91, %rd181, 1;
	add.s64 	%rd56, %rd11, %rd91;
	shl.b64 	%rd92, %rd182, 1;
	add.s64 	%rd57, %rd11, %rd92;
	shl.b64 	%rd93, %rd183, 1;
	add.s64 	%rd58, %rd11, %rd93;
	shl.b64 	%rd94, %rd184, 1;
	add.s64 	%rd59, %rd11, %rd94;
	shl.b32 	%r141, %r104, 7;
	shl.b32 	%r142, %r109, 1;
	or.b32 	%r143, %r141, %r142;
	add.s32 	%r144, %r119, %r143;
	add.s32 	%r87, %r144, 9216;
	add.s32 	%r89, %r144, 11264;
	add.s32 	%r91, %r144, 13312;
	add.s32 	%r93, %r144, 15360;
	selp.b32 	%r570, 16, 0, %p45;
	// begin inline asm
	cp.async.cg.shared.global [ %r87 + 0 ], [ %rd56 + 0 ], 0x10, %r570;
	// end inline asm
	selp.b32 	%r572, 16, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r89 + 0 ], [ %rd57 + 0 ], 0x10, %r572;
	// end inline asm
	selp.b32 	%r574, 16, 0, %p47;
	// begin inline asm
	cp.async.cg.shared.global [ %r91 + 0 ], [ %rd58 + 0 ], 0x10, %r574;
	// end inline asm
	selp.b32 	%r576, 16, 0, %p48;
	// begin inline asm
	cp.async.cg.shared.global [ %r93 + 0 ], [ %rd59 + 0 ], 0x10, %r576;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r11, %r119, %r118;
	add.s32 	%r12, %r119, %r126;
	add.s32 	%r13, %r119, %r132;
	add.s32 	%r14, %r119, %r138;
	bfe.u32 	%r145, %r120, 4, 14;
	cvt.u64.u32 	%rd95, %r145;
	or.b64 	%rd149, %rd95, 4611686293338849280;
	bfe.u32 	%r146, %r119, 4, 14;
	cvt.u64.u32 	%rd96, %r146;
	or.b64 	%rd150, %rd96, 4611686293338849280;
	add.s32 	%r147, %r119, 17440;
	bfe.u32 	%r148, %r147, 4, 14;
	cvt.u64.u32 	%rd97, %r148;
	or.b64 	%rd151, %rd97, 4611686293338849280;
	add.s32 	%r149, %r119, 2048;
	bfe.u32 	%r150, %r149, 4, 14;
	cvt.u64.u32 	%rd98, %r150;
	or.b64 	%rd152, %rd98, 4611686293338849280;
	add.s32 	%r151, %r119, 17472;
	bfe.u32 	%r152, %r151, 4, 14;
	cvt.u64.u32 	%rd99, %r152;
	or.b64 	%rd153, %rd99, 4611686293338849280;
	add.s32 	%r153, %r119, 4096;
	bfe.u32 	%r154, %r153, 4, 14;
	cvt.u64.u32 	%rd100, %r154;
	or.b64 	%rd154, %rd100, 4611686293338849280;
	add.s32 	%r155, %r119, 17504;
	bfe.u32 	%r156, %r155, 4, 14;
	cvt.u64.u32 	%rd101, %r156;
	or.b64 	%rd155, %rd101, 4611686293338849280;
	add.s32 	%r157, %r119, 6144;
	bfe.u32 	%r158, %r157, 4, 14;
	cvt.u64.u32 	%rd102, %r158;
	or.b64 	%rd156, %rd102, 4611686293338849280;
	shl.b32 	%r159, %r102, 6;
	and.b32 	%r160, %r159, 960;
	shr.u32 	%r161, %r102, 1;
	and.b32 	%r162, %r161, 8;
	or.b32 	%r163, %r160, %r162;
	shl.b32 	%r164, %r102, 5;
	and.b32 	%r165, %r164, 3072;
	or.b32 	%r166, %r163, %r165;
	and.b32 	%r167, %r108, 1016;
	shr.u32 	%r168, %r166, 2;
	and.b32 	%r169, %r168, 1008;
	add.s32 	%r170, %r119, %r169;
	shl.b32 	%r171, %r166, 1;
	add.s32 	%r881, %r170, %r171;
	add.s32 	%r886, %r881, 32;
	add.s32 	%r891, %r881, 64;
	add.s32 	%r896, %r881, 96;
	and.b32 	%r172, %r102, 120;
	shl.b32 	%r173, %r172, 1;
	add.s32 	%r174, %r119, %r173;
	shl.b32 	%r175, %r167, 1;
	add.s32 	%r19, %r174, %r175;
	or.b32 	%r176, %r167, 1024;
	shr.u32 	%r177, %r176, 2;
	and.b32 	%r178, %r177, 496;
	add.s32 	%r179, %r119, %r178;
	add.s32 	%r20, %r179, %r175;
	or.b32 	%r180, %r167, 2048;
	shr.u32 	%r181, %r180, 2;
	and.b32 	%r182, %r181, 752;
	add.s32 	%r183, %r119, %r182;
	add.s32 	%r21, %r183, %r175;
	or.b32 	%r184, %r167, 3072;
	shr.u32 	%r185, %r184, 2;
	and.b32 	%r186, %r185, 1008;
	add.s32 	%r187, %r119, %r186;
	add.s32 	%r22, %r187, %r175;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r25, {%rs1, %rs1};
	mov.b32 	%r29, {%rs2, %rs2};
	mov.b32 	%r33, {%rs3, %rs3};
	mov.b32 	%r37, {%rs4, %rs4};
	mov.b64 	%rd175, 64;
	mov.pred 	%p37, -1;
	mov.pred 	%p58, %p37;
	mov.pred 	%p59, %p64;
	mov.pred 	%p60, %p65;
	mov.pred 	%p61, %p66;
	mov.pred 	%p62, %p67;
	mov.b64 	%rd176, %rd181;
	mov.b64 	%rd177, %rd182;
	mov.b64 	%rd178, %rd183;
	mov.b64 	%rd179, %rd184;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.pred 	%p5, %p58;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r532, %r533, %r534, %r535}, [%r87];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r536, %r534, %r25;
	mul.bf16x2 	%r537, %r533, %r25;
	mul.bf16x2 	%r538, %r532, %r25;
	mul.bf16x2 	%r539, %r535, %r25;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r540, %r541, %r542, %r543}, [%r87+2048];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r544, %r542, %r29;
	mul.bf16x2 	%r545, %r541, %r29;
	mul.bf16x2 	%r546, %r540, %r29;
	mul.bf16x2 	%r547, %r543, %r29;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r548, %r549, %r550, %r551}, [%r87+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r552, %r550, %r33;
	mul.bf16x2 	%r553, %r549, %r33;
	mul.bf16x2 	%r554, %r548, %r33;
	mul.bf16x2 	%r555, %r551, %r33;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r556, %r557, %r558, %r559}, [%r87+6144];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r560, %r558, %r37;
	mul.bf16x2 	%r561, %r557, %r37;
	mul.bf16x2 	%r562, %r556, %r37;
	mul.bf16x2 	%r563, %r559, %r37;
	st.shared.v4.b32 	[%r11], {%r538, %r537, %r536, %r539};
	st.shared.v4.b32 	[%r12], {%r546, %r545, %r544, %r547};
	st.shared.v4.b32 	[%r13], {%r554, %r553, %r552, %r555};
	st.shared.v4.b32 	[%r14], {%r562, %r561, %r560, %r563};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r564, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r284,%r285,%r286,%r287,%r288,%r289,%r290,%r291,%r292,%r293,%r294,%r295,%r296,%r297,%r298,%r299,%r300,%r301,%r302,%r303,%r304,%r305,%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315}, %rd149, %rd150, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r284,%r285,%r286,%r287,%r288,%r289,%r290,%r291,%r292,%r293,%r294,%r295,%r296,%r297,%r298,%r299,%r300,%r301,%r302,%r303,%r304,%r305,%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315}, %rd151, %rd152, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r284,%r285,%r286,%r287,%r288,%r289,%r290,%r291,%r292,%r293,%r294,%r295,%r296,%r297,%r298,%r299,%r300,%r301,%r302,%r303,%r304,%r305,%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315}, %rd153, %rd154, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r284,%r285,%r286,%r287,%r288,%r289,%r290,%r291,%r292,%r293,%r294,%r295,%r296,%r297,%r298,%r299,%r300,%r301,%r302,%r303,%r304,%r305,%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315}, %rd155, %rd156, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r445, 0;
	mov.b32 	%r446, %r445;
	mov.b32 	%r448, %r445;
	mov.b32 	%r444, %r120;
	mov.b32 	%r449, %r445;
	mov.b32 	%r447, %r119;
	// begin inline asm
	// wait for regs: %r284,%r285,%r286,%r287,%r288,%r289,%r290,%r291,%r292,%r293,%r294,%r295,%r296,%r297,%r298,%r299,%r300,%r301,%r302,%r303,%r304,%r305,%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r444,%r445,%r446,%r447,%r448,%r449
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r489, %r285, %r284;
	cvt.rn.bf16x2.f32 	%r490, %r287, %r286;
	cvt.rn.bf16x2.f32 	%r491, %r289, %r288;
	cvt.rn.bf16x2.f32 	%r492, %r291, %r290;
	cvt.rn.bf16x2.f32 	%r494, %r293, %r292;
	cvt.rn.bf16x2.f32 	%r495, %r295, %r294;
	cvt.rn.bf16x2.f32 	%r496, %r297, %r296;
	cvt.rn.bf16x2.f32 	%r497, %r299, %r298;
	cvt.rn.bf16x2.f32 	%r499, %r301, %r300;
	cvt.rn.bf16x2.f32 	%r500, %r303, %r302;
	cvt.rn.bf16x2.f32 	%r501, %r305, %r304;
	cvt.rn.bf16x2.f32 	%r502, %r307, %r306;
	cvt.rn.bf16x2.f32 	%r504, %r309, %r308;
	cvt.rn.bf16x2.f32 	%r505, %r311, %r310;
	cvt.rn.bf16x2.f32 	%r506, %r313, %r312;
	cvt.rn.bf16x2.f32 	%r507, %r315, %r314;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd120, %rd176, 1;
	add.s64 	%rd111, %rd12, %rd120;
	shl.b64 	%rd121, %rd177, 1;
	add.s64 	%rd112, %rd12, %rd121;
	shl.b64 	%rd122, %rd178, 1;
	add.s64 	%rd113, %rd12, %rd122;
	shl.b64 	%rd123, %rd179, 1;
	add.s64 	%rd114, %rd12, %rd123;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r881], {%r489, %r490, %r491, %r492};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r886], {%r494, %r495, %r496, %r497};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r891], {%r499, %r500, %r501, %r502};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r896], {%r504, %r505, %r506, %r507};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r512, %r513, %r514, %r515}, [%r20+2048];
	ld.shared.v4.b32 	{%r516, %r517, %r518, %r519}, [%r21+4096];
	ld.shared.v4.b32 	{%r520, %r521, %r522, %r523}, [%r22+6144];
	ld.shared.v4.b32 	{%r508, %r509, %r510, %r511}, [%r19];
	// begin inline asm
	@%p59 st.global.v4.b32 [ %rd111 + 0 ], { %r508, %r509, %r510, %r511 };
	// end inline asm
	// begin inline asm
	@%p60 st.global.v4.b32 [ %rd112 + 0 ], { %r512, %r513, %r514, %r515 };
	// end inline asm
	// begin inline asm
	@%p61 st.global.v4.b32 [ %rd113 + 0 ], { %r516, %r517, %r518, %r519 };
	// end inline asm
	// begin inline asm
	@%p62 st.global.v4.b32 [ %rd114 + 0 ], { %r520, %r521, %r522, %r523 };
	// end inline asm
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd124, %rd175, %rd1;
	or.b64 	%rd176, %rd124, %rd6;
	or.b64 	%rd177, %rd124, %rd7;
	or.b64 	%rd178, %rd124, %rd8;
	or.b64 	%rd179, %rd124, %rd9;
	shl.b64 	%rd125, %rd176, 1;
	add.s64 	%rd115, %rd11, %rd125;
	shl.b64 	%rd126, %rd177, 1;
	add.s64 	%rd116, %rd11, %rd126;
	shl.b64 	%rd127, %rd178, 1;
	add.s64 	%rd117, %rd11, %rd127;
	shl.b64 	%rd128, %rd179, 1;
	add.s64 	%rd118, %rd11, %rd128;
	and.pred 	%p59, %p45, %p5;
	and.pred 	%p60, %p46, %p5;
	and.pred 	%p61, %p47, %p5;
	and.pred 	%p62, %p48, %p5;
	selp.b32 	%r525, 16, 0, %p59;
	// begin inline asm
	cp.async.cg.shared.global [ %r87 + 0 ], [ %rd115 + 0 ], 0x10, %r525;
	// end inline asm
	selp.b32 	%r527, 16, 0, %p60;
	// begin inline asm
	cp.async.cg.shared.global [ %r89 + 0 ], [ %rd116 + 0 ], 0x10, %r527;
	// end inline asm
	selp.b32 	%r529, 16, 0, %p61;
	// begin inline asm
	cp.async.cg.shared.global [ %r91 + 0 ], [ %rd117 + 0 ], 0x10, %r529;
	// end inline asm
	selp.b32 	%r531, 16, 0, %p62;
	// begin inline asm
	cp.async.cg.shared.global [ %r93 + 0 ], [ %rd118 + 0 ], 0x10, %r531;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd175, 128;
	mov.pred 	%p58, 0;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p5 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd138, %r2, 4;
	add.s64 	%rd139, %rd47, %rd138;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd140, %rd2, 2;
	add.s64 	%rd129, %rd139, %rd140;
	shl.b64 	%rd141, %rd3, 2;
	add.s64 	%rd130, %rd139, %rd141;
	shl.b64 	%rd142, %rd4, 2;
	add.s64 	%rd131, %rd139, %rd142;
	shl.b64 	%rd143, %rd5, 2;
	add.s64 	%rd132, %rd139, %rd143;
	// begin inline asm
	mov.u32 %r565, 0x0;
	@%p45 ld.global.b32 { %r565 }, [ %rd129 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r566, 0x0;
	@%p46 ld.global.b32 { %r566 }, [ %rd130 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r567, 0x0;
	@%p47 ld.global.b32 { %r567 }, [ %rd131 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r568, 0x0;
	@%p48 ld.global.b32 { %r568 }, [ %rd132 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r577, %r565, 0f3FB8AA3B;
	ex2.approx.f32 	%r39, %r577;
	mul.f32 	%r578, %r566, 0f3FB8AA3B;
	ex2.approx.f32 	%r47, %r578;
	mul.f32 	%r579, %r567, 0f3FB8AA3B;
	ex2.approx.f32 	%r55, %r579;
	mul.f32 	%r580, %r568, 0f3FB8AA3B;
	ex2.approx.f32 	%r63, %r580;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd144, %rd10, 1;
	add.s64 	%rd34, %rd45, %rd144;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd35, %rd46, %rd144;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd133, %rd34, %rd91;
	add.s64 	%rd134, %rd34, %rd92;
	add.s64 	%rd135, %rd34, %rd93;
	add.s64 	%rd136, %rd34, %rd94;
	// begin inline asm
	cp.async.cg.shared.global [ %r87 + 0 ], [ %rd133 + 0 ], 0x10, %r570;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r89 + 0 ], [ %rd134 + 0 ], 0x10, %r572;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r91 + 0 ], [ %rd135 + 0 ], 0x10, %r574;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r93 + 0 ], [ %rd136 + 0 ], 0x10, %r576;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd180, 64;
	mov.pred 	%p50, -1;
	mov.pred 	%p63, %p50;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.pred 	%p14, %p63;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	ld.shared.v4.b32 	{%r925, %r926, %r927, %r928}, [%r87];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r929, %r928, %r25;
	mul.bf16x2 	%r930, %r925, %r25;
	mul.bf16x2 	%r931, %r926, %r25;
	mul.bf16x2 	%r932, %r927, %r25;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs5, %rs6}, %r932;
	cvt.f32.bf16 	%r933, %rs6;
	cvt.f32.bf16 	%r934, %rs5;
	mov.b32 	{%rs7, %rs8}, %r931;
	cvt.f32.bf16 	%r935, %rs8;
	cvt.f32.bf16 	%r936, %rs7;
	mov.b32 	{%rs9, %rs10}, %r930;
	cvt.f32.bf16 	%r937, %rs10;
	cvt.f32.bf16 	%r938, %rs9;
	mov.b32 	{%rs11, %rs12}, %r929;
	cvt.f32.bf16 	%r939, %rs12;
	cvt.f32.bf16 	%r940, %rs11;
	mul.f32 	%r941, %r39, %r940;
	mul.f32 	%r942, %r39, %r939;
	mul.f32 	%r943, %r39, %r938;
	mul.f32 	%r944, %r39, %r937;
	mul.f32 	%r945, %r39, %r936;
	mul.f32 	%r946, %r39, %r935;
	mul.f32 	%r947, %r39, %r934;
	mul.f32 	%r948, %r39, %r933;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r949, %r948, %r947;
	cvt.rn.bf16x2.f32 	%r950, %r946, %r945;
	cvt.rn.bf16x2.f32 	%r951, %r944, %r943;
	cvt.rn.bf16x2.f32 	%r952, %r942, %r941;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r953, %r954, %r955, %r956}, [%r87+2048];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r957, %r956, %r29;
	mul.bf16x2 	%r958, %r953, %r29;
	mul.bf16x2 	%r959, %r954, %r29;
	mul.bf16x2 	%r960, %r955, %r29;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs13, %rs14}, %r960;
	cvt.f32.bf16 	%r961, %rs14;
	cvt.f32.bf16 	%r962, %rs13;
	mov.b32 	{%rs15, %rs16}, %r959;
	cvt.f32.bf16 	%r963, %rs16;
	cvt.f32.bf16 	%r964, %rs15;
	mov.b32 	{%rs17, %rs18}, %r958;
	cvt.f32.bf16 	%r965, %rs18;
	cvt.f32.bf16 	%r966, %rs17;
	mov.b32 	{%rs19, %rs20}, %r957;
	cvt.f32.bf16 	%r967, %rs20;
	cvt.f32.bf16 	%r968, %rs19;
	mul.f32 	%r969, %r47, %r968;
	mul.f32 	%r970, %r47, %r967;
	mul.f32 	%r971, %r47, %r966;
	mul.f32 	%r972, %r47, %r965;
	mul.f32 	%r973, %r47, %r964;
	mul.f32 	%r974, %r47, %r963;
	mul.f32 	%r975, %r47, %r962;
	mul.f32 	%r976, %r47, %r961;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r977, %r976, %r975;
	cvt.rn.bf16x2.f32 	%r978, %r974, %r973;
	cvt.rn.bf16x2.f32 	%r979, %r972, %r971;
	cvt.rn.bf16x2.f32 	%r980, %r970, %r969;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r981, %r982, %r983, %r984}, [%r87+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r985, %r984, %r33;
	mul.bf16x2 	%r986, %r981, %r33;
	mul.bf16x2 	%r987, %r982, %r33;
	mul.bf16x2 	%r988, %r983, %r33;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs21, %rs22}, %r988;
	cvt.f32.bf16 	%r989, %rs22;
	cvt.f32.bf16 	%r990, %rs21;
	mov.b32 	{%rs23, %rs24}, %r987;
	cvt.f32.bf16 	%r991, %rs24;
	cvt.f32.bf16 	%r992, %rs23;
	mov.b32 	{%rs25, %rs26}, %r986;
	cvt.f32.bf16 	%r993, %rs26;
	cvt.f32.bf16 	%r994, %rs25;
	mov.b32 	{%rs27, %rs28}, %r985;
	cvt.f32.bf16 	%r995, %rs28;
	cvt.f32.bf16 	%r996, %rs27;
	mul.f32 	%r997, %r55, %r996;
	mul.f32 	%r998, %r55, %r995;
	mul.f32 	%r999, %r55, %r994;
	mul.f32 	%r1000, %r55, %r993;
	mul.f32 	%r1001, %r55, %r992;
	mul.f32 	%r1002, %r55, %r991;
	mul.f32 	%r1003, %r55, %r990;
	mul.f32 	%r1004, %r55, %r989;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1005, %r1004, %r1003;
	cvt.rn.bf16x2.f32 	%r1006, %r1002, %r1001;
	cvt.rn.bf16x2.f32 	%r1007, %r1000, %r999;
	cvt.rn.bf16x2.f32 	%r1008, %r998, %r997;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1009, %r1010, %r1011, %r1012}, [%r87+6144];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1013, %r1012, %r37;
	mul.bf16x2 	%r1014, %r1009, %r37;
	mul.bf16x2 	%r1015, %r1010, %r37;
	mul.bf16x2 	%r1016, %r1011, %r37;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs29, %rs30}, %r1016;
	cvt.f32.bf16 	%r1017, %rs30;
	cvt.f32.bf16 	%r1018, %rs29;
	mov.b32 	{%rs31, %rs32}, %r1015;
	cvt.f32.bf16 	%r1019, %rs32;
	cvt.f32.bf16 	%r1020, %rs31;
	mov.b32 	{%rs33, %rs34}, %r1014;
	cvt.f32.bf16 	%r1021, %rs34;
	cvt.f32.bf16 	%r1022, %rs33;
	mov.b32 	{%rs35, %rs36}, %r1013;
	cvt.f32.bf16 	%r1023, %rs36;
	cvt.f32.bf16 	%r1024, %rs35;
	mul.f32 	%r1025, %r63, %r1024;
	mul.f32 	%r1026, %r63, %r1023;
	mul.f32 	%r1027, %r63, %r1022;
	mul.f32 	%r1028, %r63, %r1021;
	mul.f32 	%r1029, %r63, %r1020;
	mul.f32 	%r1030, %r63, %r1019;
	mul.f32 	%r1031, %r63, %r1018;
	mul.f32 	%r1032, %r63, %r1017;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1033, %r1032, %r1031;
	cvt.rn.bf16x2.f32 	%r1034, %r1030, %r1029;
	cvt.rn.bf16x2.f32 	%r1035, %r1028, %r1027;
	cvt.rn.bf16x2.f32 	%r1036, %r1026, %r1025;
	st.shared.v4.b32 	[%r11], {%r951, %r950, %r949, %r952};
	st.shared.v4.b32 	[%r12], {%r979, %r978, %r977, %r980};
	st.shared.v4.b32 	[%r13], {%r1007, %r1006, %r1005, %r1008};
	st.shared.v4.b32 	[%r14], {%r1035, %r1034, %r1033, %r1036};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1037, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695,%r696,%r697,%r698,%r699,%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708}, %rd149, %rd150, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695,%r696,%r697,%r698,%r699,%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708}, %rd151, %rd152, %p50, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695,%r696,%r697,%r698,%r699,%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708}, %rd153, %rd154, %p50, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695,%r696,%r697,%r698,%r699,%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708}, %rd155, %rd156, %p50, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r838, 0;
	mov.b32 	%r837, %r120;
	mov.b32 	%r839, %r838;
	mov.b32 	%r841, %r838;
	mov.b32 	%r842, %r838;
	mov.b32 	%r840, %r119;
	// begin inline asm
	// wait for regs: %r677,%r678,%r679,%r680,%r681,%r682,%r683,%r684,%r685,%r686,%r687,%r688,%r689,%r690,%r691,%r692,%r693,%r694,%r695,%r696,%r697,%r698,%r699,%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r837,%r838,%r839,%r840,%r841,%r842
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r882, %r678, %r677;
	cvt.rn.bf16x2.f32 	%r883, %r680, %r679;
	cvt.rn.bf16x2.f32 	%r884, %r682, %r681;
	cvt.rn.bf16x2.f32 	%r885, %r684, %r683;
	cvt.rn.bf16x2.f32 	%r887, %r686, %r685;
	cvt.rn.bf16x2.f32 	%r888, %r688, %r687;
	cvt.rn.bf16x2.f32 	%r889, %r690, %r689;
	cvt.rn.bf16x2.f32 	%r890, %r692, %r691;
	cvt.rn.bf16x2.f32 	%r892, %r694, %r693;
	cvt.rn.bf16x2.f32 	%r893, %r696, %r695;
	cvt.rn.bf16x2.f32 	%r894, %r698, %r697;
	cvt.rn.bf16x2.f32 	%r895, %r700, %r699;
	cvt.rn.bf16x2.f32 	%r897, %r702, %r701;
	cvt.rn.bf16x2.f32 	%r898, %r704, %r703;
	cvt.rn.bf16x2.f32 	%r899, %r706, %r705;
	cvt.rn.bf16x2.f32 	%r900, %r708, %r707;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd166, %rd181, 1;
	add.s64 	%rd157, %rd35, %rd166;
	shl.b64 	%rd167, %rd182, 1;
	add.s64 	%rd158, %rd35, %rd167;
	shl.b64 	%rd168, %rd183, 1;
	add.s64 	%rd159, %rd35, %rd168;
	shl.b64 	%rd169, %rd184, 1;
	add.s64 	%rd160, %rd35, %rd169;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r881], {%r882, %r883, %r884, %r885};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r886], {%r887, %r888, %r889, %r890};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r891], {%r892, %r893, %r894, %r895};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r896], {%r897, %r898, %r899, %r900};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r905, %r906, %r907, %r908}, [%r20+2048];
	ld.shared.v4.b32 	{%r909, %r910, %r911, %r912}, [%r21+4096];
	ld.shared.v4.b32 	{%r913, %r914, %r915, %r916}, [%r22+6144];
	ld.shared.v4.b32 	{%r901, %r902, %r903, %r904}, [%r19];
	// begin inline asm
	@%p64 st.global.v4.b32 [ %rd157 + 0 ], { %r901, %r902, %r903, %r904 };
	// end inline asm
	// begin inline asm
	@%p65 st.global.v4.b32 [ %rd158 + 0 ], { %r905, %r906, %r907, %r908 };
	// end inline asm
	// begin inline asm
	@%p66 st.global.v4.b32 [ %rd159 + 0 ], { %r909, %r910, %r911, %r912 };
	// end inline asm
	// begin inline asm
	@%p67 st.global.v4.b32 [ %rd160 + 0 ], { %r913, %r914, %r915, %r916 };
	// end inline asm
	.loc	1 195 22                        // wy_fast.py:195:22
	or.b64 	%rd170, %rd180, %rd1;
	or.b64 	%rd181, %rd170, %rd6;
	or.b64 	%rd182, %rd170, %rd7;
	or.b64 	%rd183, %rd170, %rd8;
	or.b64 	%rd184, %rd170, %rd9;
	shl.b64 	%rd171, %rd181, 1;
	add.s64 	%rd161, %rd34, %rd171;
	shl.b64 	%rd172, %rd182, 1;
	add.s64 	%rd162, %rd34, %rd172;
	shl.b64 	%rd173, %rd183, 1;
	add.s64 	%rd163, %rd34, %rd173;
	shl.b64 	%rd174, %rd184, 1;
	add.s64 	%rd164, %rd34, %rd174;
	and.pred 	%p64, %p45, %p14;
	and.pred 	%p65, %p46, %p14;
	and.pred 	%p66, %p47, %p14;
	and.pred 	%p67, %p48, %p14;
	selp.b32 	%r918, 16, 0, %p64;
	// begin inline asm
	cp.async.cg.shared.global [ %r87 + 0 ], [ %rd161 + 0 ], 0x10, %r918;
	// end inline asm
	selp.b32 	%r920, 16, 0, %p65;
	// begin inline asm
	cp.async.cg.shared.global [ %r89 + 0 ], [ %rd162 + 0 ], 0x10, %r920;
	// end inline asm
	selp.b32 	%r922, 16, 0, %p66;
	// begin inline asm
	cp.async.cg.shared.global [ %r91 + 0 ], [ %rd163 + 0 ], 0x10, %r922;
	// end inline asm
	selp.b32 	%r924, 16, 0, %p67;
	// begin inline asm
	cp.async.cg.shared.global [ %r93 + 0 ], [ %rd164 + 0 ], 0x10, %r924;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd180, 128;
	mov.pred 	%p63, 0;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p14 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
