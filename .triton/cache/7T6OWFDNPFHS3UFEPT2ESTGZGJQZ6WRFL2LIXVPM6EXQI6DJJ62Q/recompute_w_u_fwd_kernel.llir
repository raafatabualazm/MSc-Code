; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 3, !dbg !17
  %24 = and i32 %23, 7, !dbg !17
  %25 = or disjoint i32 %24, 8, !dbg !17
  %26 = or disjoint i32 %24, 16, !dbg !17
  %27 = or disjoint i32 %24, 24, !dbg !17
  %28 = or disjoint i32 %24, 32, !dbg !17
  %29 = or disjoint i32 %24, 40, !dbg !17
  %30 = or disjoint i32 %24, 48, !dbg !17
  %31 = or disjoint i32 %24, 56, !dbg !17
  %32 = and i32 %22, 4, !dbg !17
  %33 = icmp eq i32 %32, 0, !dbg !17
  %34 = shl nuw nsw i32 %22, 3, !dbg !17
  %35 = and i32 %34, 56, !dbg !17
  %36 = and i32 %22, 63, !dbg !17
  %37 = zext nneg i32 %24 to i64, !dbg !17
  %38 = zext nneg i32 %25 to i64, !dbg !17
  %39 = zext nneg i32 %26 to i64, !dbg !17
  %40 = zext nneg i32 %27 to i64, !dbg !17
  %41 = zext nneg i32 %28 to i64, !dbg !17
  %42 = zext nneg i32 %29 to i64, !dbg !17
  %43 = zext nneg i32 %30 to i64, !dbg !17
  %44 = zext nneg i32 %31 to i64, !dbg !17
  %45 = zext nneg i32 %35 to i64, !dbg !17
  %46 = zext nneg i32 %36 to i64, !dbg !17
  %47 = or disjoint i64 %37, %21, !dbg !17
  %48 = or disjoint i64 %38, %21, !dbg !17
  %49 = or disjoint i64 %39, %21, !dbg !17
  %50 = or disjoint i64 %40, %21, !dbg !17
  %51 = or disjoint i64 %41, %21, !dbg !17
  %52 = or disjoint i64 %42, %21, !dbg !17
  %53 = or disjoint i64 %43, %21, !dbg !17
  %54 = or disjoint i64 %44, %21, !dbg !17
  %55 = or disjoint i64 %21, %46, !dbg !17
  %56 = shl nsw i64 %55, 5, !dbg !17
  %57 = getelementptr bfloat, ptr addrspace(1) %18, i64 %56, !dbg !17
  %58 = icmp sgt i32 %19, -1, !dbg !17
  %59 = icmp slt i64 %55, %20, !dbg !17
  %60 = and i1 %58, %59, !dbg !17
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %60) #3, !dbg !17
  %62 = shl nuw nsw i32 %22, 1, !dbg !18
  %63 = and i32 %62, 6, !dbg !18
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %36, !dbg !18
  %65 = insertelement <1 x i16> poison, i16 %61, i64 0, !dbg !18
  store <1 x i16> %65, ptr addrspace(3) %64, align 2, !dbg !18
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63, !dbg !18
  %67 = load <2 x bfloat>, ptr addrspace(3) %66, align 4, !dbg !18
  %68 = or disjoint i32 %63, 8, !dbg !18
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !18
  %70 = load <2 x bfloat>, ptr addrspace(3) %69, align 4, !dbg !18
  %71 = or disjoint i32 %63, 16, !dbg !18
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !18
  %73 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !18
  %74 = or disjoint i32 %63, 24, !dbg !18
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74, !dbg !18
  %76 = load <2 x bfloat>, ptr addrspace(3) %75, align 4, !dbg !18
  %77 = or disjoint i32 %63, 32, !dbg !18
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77, !dbg !18
  %79 = load <2 x bfloat>, ptr addrspace(3) %78, align 4, !dbg !18
  %80 = or disjoint i32 %63, 40, !dbg !18
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %80, !dbg !18
  %82 = load <2 x bfloat>, ptr addrspace(3) %81, align 4, !dbg !18
  %83 = or disjoint i32 %63, 48, !dbg !18
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %83, !dbg !18
  %85 = load <2 x bfloat>, ptr addrspace(3) %84, align 4, !dbg !18
  %86 = or disjoint i32 %63, 56, !dbg !18
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !18
  %88 = load <2 x bfloat>, ptr addrspace(3) %87, align 4, !dbg !18
  %89 = or disjoint i32 %14, %13, !dbg !19
  %90 = shl i32 %89, 6, !dbg !20
  %91 = sext i32 %90 to i64, !dbg !21
  %92 = getelementptr bfloat, ptr addrspace(1) %5, i64 %91, !dbg !21
  %.idx = shl nsw i64 %47, 12, !dbg !22
  %93 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx, !dbg !22
  %94 = getelementptr bfloat, ptr addrspace(1) %93, i64 %45, !dbg !22
  %.idx18 = shl nsw i64 %48, 12, !dbg !22
  %95 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx18, !dbg !22
  %96 = getelementptr bfloat, ptr addrspace(1) %95, i64 %45, !dbg !22
  %.idx19 = shl nsw i64 %49, 12, !dbg !22
  %97 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx19, !dbg !22
  %98 = getelementptr bfloat, ptr addrspace(1) %97, i64 %45, !dbg !22
  %.idx20 = shl nsw i64 %50, 12, !dbg !22
  %99 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx20, !dbg !22
  %100 = getelementptr bfloat, ptr addrspace(1) %99, i64 %45, !dbg !22
  %.idx21 = shl nsw i64 %51, 12, !dbg !22
  %101 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx21, !dbg !22
  %102 = getelementptr bfloat, ptr addrspace(1) %101, i64 %45, !dbg !22
  %.idx22 = shl nsw i64 %52, 12, !dbg !22
  %103 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx22, !dbg !22
  %104 = getelementptr bfloat, ptr addrspace(1) %103, i64 %45, !dbg !22
  %.idx23 = shl nsw i64 %53, 12, !dbg !22
  %105 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx23, !dbg !22
  %106 = getelementptr bfloat, ptr addrspace(1) %105, i64 %45, !dbg !22
  %.idx24 = shl nsw i64 %54, 12, !dbg !22
  %107 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx24, !dbg !22
  %108 = getelementptr bfloat, ptr addrspace(1) %107, i64 %45, !dbg !22
  %109 = icmp slt i64 %47, %20, !dbg !22
  %110 = icmp slt i64 %48, %20, !dbg !22
  %111 = icmp slt i64 %49, %20, !dbg !22
  %112 = icmp slt i64 %50, %20, !dbg !22
  %113 = icmp slt i64 %51, %20, !dbg !22
  %114 = icmp slt i64 %52, %20, !dbg !22
  %115 = icmp slt i64 %53, %20, !dbg !22
  %116 = icmp slt i64 %54, %20, !dbg !22
  %117 = and i1 %58, %109, !dbg !22
  %118 = and i1 %58, %110, !dbg !22
  %119 = and i1 %58, %111, !dbg !22
  %120 = and i1 %58, %112, !dbg !22
  %121 = and i1 %58, %113, !dbg !22
  %122 = and i1 %58, %114, !dbg !22
  %123 = and i1 %58, %115, !dbg !22
  %124 = and i1 %58, %116, !dbg !22
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %117) #3, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !22
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !22
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !22
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !22
  %132 = shufflevector <2 x bfloat> %131, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %133 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !22
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !22
  %135 = shufflevector <2 x bfloat> %134, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %118) #3, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !22
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !22
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !22
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !22
  %143 = shufflevector <2 x bfloat> %142, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %144 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !22
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !22
  %146 = shufflevector <2 x bfloat> %145, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %119) #3, !dbg !22
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !22
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !22
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !22
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !22
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !22
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !22
  %154 = shufflevector <2 x bfloat> %153, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %155 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !22
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !22
  %157 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %120) #3, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !22
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !22
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !22
  %163 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !22
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !22
  %165 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %166 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !22
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !22
  %168 = shufflevector <2 x bfloat> %167, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %121) #3, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !22
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !22
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = shufflevector <2 x bfloat> %175, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %177 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !22
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !22
  %179 = shufflevector <2 x bfloat> %178, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %122) #3, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !22
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = shufflevector <2 x bfloat> %186, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %188 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !22
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !22
  %190 = shufflevector <2 x bfloat> %189, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %123) #3, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !22
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !22
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !22
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !22
  %198 = shufflevector <2 x bfloat> %197, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %199 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !22
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !22
  %201 = shufflevector <2 x bfloat> %200, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %124) #3, !dbg !22
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !22
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !22
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !22
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !22
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !22
  %209 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %210 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !22
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !22
  %212 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %213 = xor i32 %34, %22, !dbg !22
  %214 = and i32 %213, 56, !dbg !22
  %215 = shl nuw nsw i32 %24, 6, !dbg !22
  %216 = or disjoint i32 %214, %215, !dbg !22
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %216, !dbg !22
  %218 = shufflevector <2 x bfloat> %127, <2 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %219 = shufflevector <8 x bfloat> %218, <8 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %220 = shufflevector <8 x bfloat> %219, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %220, ptr addrspace(3) %217, align 16, !dbg !22
  %221 = or disjoint i32 %216, 512, !dbg !22
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %221, !dbg !22
  %223 = shufflevector <2 x bfloat> %138, <2 x bfloat> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %224 = shufflevector <8 x bfloat> %223, <8 x bfloat> %143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %225 = shufflevector <8 x bfloat> %224, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %225, ptr addrspace(3) %222, align 16, !dbg !22
  %226 = or disjoint i32 %216, 1024, !dbg !22
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %226, !dbg !22
  %228 = shufflevector <2 x bfloat> %149, <2 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %229 = shufflevector <8 x bfloat> %228, <8 x bfloat> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %230 = shufflevector <8 x bfloat> %229, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %230, ptr addrspace(3) %227, align 16, !dbg !22
  %231 = or disjoint i32 %216, 1536, !dbg !22
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %231, !dbg !22
  %233 = shufflevector <2 x bfloat> %160, <2 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %234 = shufflevector <8 x bfloat> %233, <8 x bfloat> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %235 = shufflevector <8 x bfloat> %234, <8 x bfloat> %168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %235, ptr addrspace(3) %232, align 16, !dbg !22
  %236 = or disjoint i32 %216, 2048, !dbg !22
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %236, !dbg !22
  %238 = shufflevector <2 x bfloat> %171, <2 x bfloat> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %239 = shufflevector <8 x bfloat> %238, <8 x bfloat> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %240 = shufflevector <8 x bfloat> %239, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %240, ptr addrspace(3) %237, align 16, !dbg !22
  %241 = or disjoint i32 %216, 2560, !dbg !22
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %241, !dbg !22
  %243 = shufflevector <2 x bfloat> %182, <2 x bfloat> %184, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %244 = shufflevector <8 x bfloat> %243, <8 x bfloat> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %245 = shufflevector <8 x bfloat> %244, <8 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %245, ptr addrspace(3) %242, align 16, !dbg !22
  %246 = or disjoint i32 %216, 3072, !dbg !22
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %246, !dbg !22
  %248 = shufflevector <2 x bfloat> %193, <2 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %249 = shufflevector <8 x bfloat> %248, <8 x bfloat> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %250 = shufflevector <8 x bfloat> %249, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %250, ptr addrspace(3) %247, align 16, !dbg !22
  %251 = or disjoint i32 %216, 3584, !dbg !22
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %251, !dbg !22
  %253 = shufflevector <2 x bfloat> %204, <2 x bfloat> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %254 = shufflevector <8 x bfloat> %253, <8 x bfloat> %209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %255 = shufflevector <8 x bfloat> %254, <8 x bfloat> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %255, ptr addrspace(3) %252, align 16, !dbg !22
  %256 = shl i32 %89, 7, !dbg !23
  %257 = sext i32 %256 to i64, !dbg !24
  %258 = getelementptr bfloat, ptr addrspace(1) %1, i64 %257, !dbg !24
  %259 = getelementptr bfloat, ptr addrspace(1) %4, i64 %257, !dbg !25
  %260 = or disjoint i64 %.idx, %45, !dbg !26
  %261 = or disjoint i64 %.idx18, %45, !dbg !26
  %262 = or disjoint i64 %.idx19, %45, !dbg !26
  %263 = or disjoint i64 %.idx20, %45, !dbg !26
  %264 = or disjoint i64 %.idx21, %45, !dbg !26
  %265 = or disjoint i64 %.idx22, %45, !dbg !26
  %266 = or disjoint i64 %.idx23, %45, !dbg !26
  %267 = or disjoint i64 %.idx24, %45, !dbg !26
  %268 = getelementptr bfloat, ptr addrspace(1) %258, i64 %260, !dbg !26
  %269 = getelementptr bfloat, ptr addrspace(1) %258, i64 %261, !dbg !26
  %270 = getelementptr bfloat, ptr addrspace(1) %258, i64 %262, !dbg !26
  %271 = getelementptr bfloat, ptr addrspace(1) %258, i64 %263, !dbg !26
  %272 = getelementptr bfloat, ptr addrspace(1) %258, i64 %264, !dbg !26
  %273 = getelementptr bfloat, ptr addrspace(1) %258, i64 %265, !dbg !26
  %274 = getelementptr bfloat, ptr addrspace(1) %258, i64 %266, !dbg !26
  %275 = getelementptr bfloat, ptr addrspace(1) %258, i64 %267, !dbg !26
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %216, !dbg !26
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %221, !dbg !26
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %226, !dbg !26
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %231, !dbg !26
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %236, !dbg !26
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %241, !dbg !26
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %246, !dbg !26
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %251, !dbg !26
  %284 = select i1 %117, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %268, i32 %284) #3, !dbg !26
  %285 = select i1 %118, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %269, i32 %285) #3, !dbg !26
  %286 = select i1 %119, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %270, i32 %286) #3, !dbg !26
  %287 = select i1 %120, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %271, i32 %287) #3, !dbg !26
  %288 = select i1 %121, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %272, i32 %288) #3, !dbg !26
  %289 = select i1 %122, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %273, i32 %289) #3, !dbg !26
  %290 = select i1 %123, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %274, i32 %290) #3, !dbg !26
  %291 = select i1 %124, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %275, i32 %291) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %292 = and i32 %22, 3
  %293 = mul nuw nsw i32 %292, 72
  %294 = select i1 %33, i32 0, i32 288
  %295 = xor i32 %294, %293
  %296 = shl nuw nsw i32 %22, 6
  %297 = and i32 %296, 512
  %298 = or disjoint i32 %295, %297
  %299 = shl nuw nsw i32 %22, 6
  %300 = and i32 %299, 1536
  %301 = or disjoint i32 %295, %300
  %302 = lshr i32 %22, 2
  %303 = and i32 %302, 8
  %304 = xor i32 %301, %303
  %305 = xor i32 %304, 16
  %306 = xor i32 %304, 2064
  %307 = xor i32 %304, 32
  %308 = xor i32 %304, 2080
  %309 = xor i32 %304, 48
  %310 = xor i32 %304, 2096
  %311 = lshr i32 %22, 1
  %312 = and i32 %311, 8
  %313 = xor i32 %298, %312
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %313
  %315 = ptrtoint ptr addrspace(3) %314 to i32
  %316 = xor i32 %313, 16
  %317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %316
  %318 = ptrtoint ptr addrspace(3) %317 to i32
  %319 = xor i32 %313, 32
  %320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %319
  %321 = ptrtoint ptr addrspace(3) %320 to i32
  %322 = xor i32 %313, 48
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %322
  %324 = ptrtoint ptr addrspace(3) %323 to i32
  %325 = getelementptr inbounds nuw i8, ptr addrspace(3) %314, i32 2048
  %326 = ptrtoint ptr addrspace(3) %325 to i32
  %327 = xor i32 %313, 1040
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %327
  %329 = ptrtoint ptr addrspace(3) %328 to i32
  %330 = xor i32 %313, 1056
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %330
  %332 = ptrtoint ptr addrspace(3) %331 to i32
  %333 = xor i32 %313, 1072
  %334 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %333
  %335 = ptrtoint ptr addrspace(3) %334 to i32
  %336 = getelementptr inbounds nuw i8, ptr addrspace(3) %314, i32 4096
  %337 = ptrtoint ptr addrspace(3) %336 to i32
  %338 = xor i32 %313, 2064
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %338
  %340 = ptrtoint ptr addrspace(3) %339 to i32
  %341 = xor i32 %313, 2080
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %341
  %343 = ptrtoint ptr addrspace(3) %342 to i32
  %344 = xor i32 %313, 2096
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %344
  %346 = ptrtoint ptr addrspace(3) %345 to i32
  %347 = getelementptr inbounds nuw i8, ptr addrspace(3) %314, i32 6144
  %348 = ptrtoint ptr addrspace(3) %347 to i32
  %349 = xor i32 %313, 3088
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %349
  %351 = ptrtoint ptr addrspace(3) %350 to i32
  %352 = xor i32 %313, 3104
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %352
  %354 = ptrtoint ptr addrspace(3) %353 to i32
  %355 = xor i32 %313, 3120
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %355
  %357 = ptrtoint ptr addrspace(3) %356 to i32
  %358 = shl nuw nsw i32 %22, 4
  %359 = and i32 %358, 448
  %360 = or disjoint i32 %359, %63
  %361 = or disjoint i32 %360, %303
  %362 = and i32 %34, 504
  %363 = lshr exact i32 %359, 2
  %364 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %363
  %365 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %364, i32 %361
  %366 = or disjoint i32 %361, 512
  %367 = lshr i32 %366, 3
  %368 = and i32 %367, 120
  %369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %368
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %369, i32 %366
  %371 = getelementptr inbounds nuw i8, ptr addrspace(3) %365, i32 32
  %372 = or disjoint i32 %361, 528
  %373 = lshr i32 %372, 3
  %374 = and i32 %373, 120
  %375 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %374
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %375, i32 %372
  %377 = getelementptr inbounds nuw i8, ptr addrspace(3) %365, i32 64
  %378 = or disjoint i32 %361, 544
  %379 = lshr i32 %378, 3
  %380 = and i32 %379, 120
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %380
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %381, i32 %378
  %383 = getelementptr inbounds nuw i8, ptr addrspace(3) %365, i32 96
  %384 = or disjoint i32 %361, 560
  %385 = lshr i32 %384, 3
  %386 = and i32 %385, 120
  %387 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %386
  %388 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %387, i32 %384
  %389 = and i32 %22, 56
  %390 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %389
  %391 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %390, i32 %362
  %392 = or disjoint i32 %362, 512
  %393 = lshr exact i32 %392, 3
  %394 = and i32 %393, 120
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %394
  %396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %395, i32 %392
  %397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %304
  %398 = ptrtoint ptr addrspace(3) %397 to i32
  %399 = getelementptr inbounds nuw i8, ptr addrspace(3) %397, i32 4096
  %400 = ptrtoint ptr addrspace(3) %399 to i32
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %305
  %402 = ptrtoint ptr addrspace(3) %401 to i32
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %306
  %404 = ptrtoint ptr addrspace(3) %403 to i32
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %307
  %406 = ptrtoint ptr addrspace(3) %405 to i32
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %308
  %408 = ptrtoint ptr addrspace(3) %407 to i32
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %309
  %410 = ptrtoint ptr addrspace(3) %409 to i32
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %310
  %412 = ptrtoint ptr addrspace(3) %411 to i32
  br label %413, !dbg !27

413:                                              ; preds = %9, %413
  %414 = phi i1 [ true, %9 ], [ false, %413 ]
  %indvars.iv = phi i64 [ 64, %9 ], [ 128, %413 ]
  %415 = phi i1 [ %117, %9 ], [ %1096, %413 ]
  %416 = phi i1 [ %118, %9 ], [ %1097, %413 ]
  %417 = phi i1 [ %119, %9 ], [ %1098, %413 ]
  %418 = phi i1 [ %120, %9 ], [ %1099, %413 ]
  %419 = phi i1 [ %121, %9 ], [ %1100, %413 ]
  %420 = phi i1 [ %122, %9 ], [ %1101, %413 ]
  %421 = phi i1 [ %123, %9 ], [ %1102, %413 ]
  %422 = phi i1 [ %124, %9 ], [ %1103, %413 ]
  %423 = phi i64 [ %260, %9 ], [ %1080, %413 ]
  %424 = phi i64 [ %261, %9 ], [ %1081, %413 ]
  %425 = phi i64 [ %262, %9 ], [ %1082, %413 ]
  %426 = phi i64 [ %263, %9 ], [ %1083, %413 ]
  %427 = phi i64 [ %264, %9 ], [ %1084, %413 ]
  %428 = phi i64 [ %265, %9 ], [ %1085, %413 ]
  %429 = phi i64 [ %266, %9 ], [ %1086, %413 ]
  %430 = phi i64 [ %267, %9 ], [ %1087, %413 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %431 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %398) #3, !dbg !28
  %432 = extractvalue { i32, i32, i32, i32 } %431, 0, !dbg !28
  %433 = bitcast i32 %432 to <2 x bfloat>, !dbg !28
  %434 = extractvalue { i32, i32, i32, i32 } %431, 1, !dbg !28
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !28
  %436 = extractvalue { i32, i32, i32, i32 } %431, 2, !dbg !28
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !28
  %438 = extractvalue { i32, i32, i32, i32 } %431, 3, !dbg !28
  %439 = bitcast i32 %438 to <2 x bfloat>, !dbg !28
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %400) #3, !dbg !28
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !28
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !28
  %443 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !28
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !28
  %445 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !28
  %446 = bitcast i32 %445 to <2 x bfloat>, !dbg !28
  %447 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !28
  %448 = bitcast i32 %447 to <2 x bfloat>, !dbg !28
  %449 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %402) #3, !dbg !28
  %450 = extractvalue { i32, i32, i32, i32 } %449, 0, !dbg !28
  %451 = bitcast i32 %450 to <2 x bfloat>, !dbg !28
  %452 = extractvalue { i32, i32, i32, i32 } %449, 1, !dbg !28
  %453 = bitcast i32 %452 to <2 x bfloat>, !dbg !28
  %454 = extractvalue { i32, i32, i32, i32 } %449, 2, !dbg !28
  %455 = bitcast i32 %454 to <2 x bfloat>, !dbg !28
  %456 = extractvalue { i32, i32, i32, i32 } %449, 3, !dbg !28
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !28
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #3, !dbg !28
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !28
  %460 = bitcast i32 %459 to <2 x bfloat>, !dbg !28
  %461 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !28
  %462 = bitcast i32 %461 to <2 x bfloat>, !dbg !28
  %463 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !28
  %464 = bitcast i32 %463 to <2 x bfloat>, !dbg !28
  %465 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !28
  %466 = bitcast i32 %465 to <2 x bfloat>, !dbg !28
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %406) #3, !dbg !28
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !28
  %469 = bitcast i32 %468 to <2 x bfloat>, !dbg !28
  %470 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !28
  %471 = bitcast i32 %470 to <2 x bfloat>, !dbg !28
  %472 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !28
  %473 = bitcast i32 %472 to <2 x bfloat>, !dbg !28
  %474 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !28
  %475 = bitcast i32 %474 to <2 x bfloat>, !dbg !28
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %408) #3, !dbg !28
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !28
  %478 = bitcast i32 %477 to <2 x bfloat>, !dbg !28
  %479 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !28
  %480 = bitcast i32 %479 to <2 x bfloat>, !dbg !28
  %481 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !28
  %482 = bitcast i32 %481 to <2 x bfloat>, !dbg !28
  %483 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !28
  %484 = bitcast i32 %483 to <2 x bfloat>, !dbg !28
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %410) #3, !dbg !28
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !28
  %487 = bitcast i32 %486 to <2 x bfloat>, !dbg !28
  %488 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !28
  %489 = bitcast i32 %488 to <2 x bfloat>, !dbg !28
  %490 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !28
  %491 = bitcast i32 %490 to <2 x bfloat>, !dbg !28
  %492 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !28
  %493 = bitcast i32 %492 to <2 x bfloat>, !dbg !28
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %412) #3, !dbg !28
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !28
  %496 = bitcast i32 %495 to <2 x bfloat>, !dbg !28
  %497 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !28
  %498 = bitcast i32 %497 to <2 x bfloat>, !dbg !28
  %499 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !28
  %500 = bitcast i32 %499 to <2 x bfloat>, !dbg !28
  %501 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !28
  %502 = bitcast i32 %501 to <2 x bfloat>, !dbg !28
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #3, !dbg !22
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !22
  %505 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !22
  %506 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !22
  %507 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !22
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #3, !dbg !22
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !22
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !22
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !22
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !22
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %321) #3, !dbg !22
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !22
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !22
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !22
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !22
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %324) #3, !dbg !22
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !22
  %520 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !22
  %521 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !22
  %522 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !22
  %523 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %326) #3, !dbg !22
  %524 = extractvalue { i32, i32, i32, i32 } %523, 0, !dbg !22
  %525 = extractvalue { i32, i32, i32, i32 } %523, 1, !dbg !22
  %526 = extractvalue { i32, i32, i32, i32 } %523, 2, !dbg !22
  %527 = extractvalue { i32, i32, i32, i32 } %523, 3, !dbg !22
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %329) #3, !dbg !22
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !22
  %530 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !22
  %531 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !22
  %532 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !22
  %533 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #3, !dbg !22
  %534 = extractvalue { i32, i32, i32, i32 } %533, 0, !dbg !22
  %535 = extractvalue { i32, i32, i32, i32 } %533, 1, !dbg !22
  %536 = extractvalue { i32, i32, i32, i32 } %533, 2, !dbg !22
  %537 = extractvalue { i32, i32, i32, i32 } %533, 3, !dbg !22
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %335) #3, !dbg !22
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !22
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !22
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !22
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !22
  %543 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %337) #3, !dbg !22
  %544 = extractvalue { i32, i32, i32, i32 } %543, 0, !dbg !22
  %545 = extractvalue { i32, i32, i32, i32 } %543, 1, !dbg !22
  %546 = extractvalue { i32, i32, i32, i32 } %543, 2, !dbg !22
  %547 = extractvalue { i32, i32, i32, i32 } %543, 3, !dbg !22
  %548 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %340) #3, !dbg !22
  %549 = extractvalue { i32, i32, i32, i32 } %548, 0, !dbg !22
  %550 = extractvalue { i32, i32, i32, i32 } %548, 1, !dbg !22
  %551 = extractvalue { i32, i32, i32, i32 } %548, 2, !dbg !22
  %552 = extractvalue { i32, i32, i32, i32 } %548, 3, !dbg !22
  %553 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %343) #3, !dbg !22
  %554 = extractvalue { i32, i32, i32, i32 } %553, 0, !dbg !22
  %555 = extractvalue { i32, i32, i32, i32 } %553, 1, !dbg !22
  %556 = extractvalue { i32, i32, i32, i32 } %553, 2, !dbg !22
  %557 = extractvalue { i32, i32, i32, i32 } %553, 3, !dbg !22
  %558 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #3, !dbg !22
  %559 = extractvalue { i32, i32, i32, i32 } %558, 0, !dbg !22
  %560 = extractvalue { i32, i32, i32, i32 } %558, 1, !dbg !22
  %561 = extractvalue { i32, i32, i32, i32 } %558, 2, !dbg !22
  %562 = extractvalue { i32, i32, i32, i32 } %558, 3, !dbg !22
  %563 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %348) #3, !dbg !22
  %564 = extractvalue { i32, i32, i32, i32 } %563, 0, !dbg !22
  %565 = extractvalue { i32, i32, i32, i32 } %563, 1, !dbg !22
  %566 = extractvalue { i32, i32, i32, i32 } %563, 2, !dbg !22
  %567 = extractvalue { i32, i32, i32, i32 } %563, 3, !dbg !22
  %568 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #3, !dbg !22
  %569 = extractvalue { i32, i32, i32, i32 } %568, 0, !dbg !22
  %570 = extractvalue { i32, i32, i32, i32 } %568, 1, !dbg !22
  %571 = extractvalue { i32, i32, i32, i32 } %568, 2, !dbg !22
  %572 = extractvalue { i32, i32, i32, i32 } %568, 3, !dbg !22
  %573 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %354) #3, !dbg !22
  %574 = extractvalue { i32, i32, i32, i32 } %573, 0, !dbg !22
  %575 = extractvalue { i32, i32, i32, i32 } %573, 1, !dbg !22
  %576 = extractvalue { i32, i32, i32, i32 } %573, 2, !dbg !22
  %577 = extractvalue { i32, i32, i32, i32 } %573, 3, !dbg !22
  %578 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %357) #3, !dbg !22
  %579 = extractvalue { i32, i32, i32, i32 } %578, 0, !dbg !22
  %580 = extractvalue { i32, i32, i32, i32 } %578, 1, !dbg !22
  %581 = extractvalue { i32, i32, i32, i32 } %578, 2, !dbg !22
  %582 = extractvalue { i32, i32, i32, i32 } %578, 3, !dbg !22
  %583 = fmul <2 x bfloat> %67, %433, !dbg !29
  %584 = bitcast <2 x bfloat> %583 to i32, !dbg !29
  %585 = fmul <2 x bfloat> %70, %435, !dbg !29
  %586 = bitcast <2 x bfloat> %585 to i32, !dbg !29
  %587 = fmul <2 x bfloat> %73, %437, !dbg !29
  %588 = bitcast <2 x bfloat> %587 to i32, !dbg !29
  %589 = fmul <2 x bfloat> %76, %439, !dbg !29
  %590 = bitcast <2 x bfloat> %589 to i32, !dbg !29
  %591 = fmul <2 x bfloat> %79, %442, !dbg !29
  %592 = bitcast <2 x bfloat> %591 to i32, !dbg !29
  %593 = fmul <2 x bfloat> %82, %444, !dbg !29
  %594 = bitcast <2 x bfloat> %593 to i32, !dbg !29
  %595 = fmul <2 x bfloat> %85, %446, !dbg !29
  %596 = bitcast <2 x bfloat> %595 to i32, !dbg !29
  %597 = fmul <2 x bfloat> %88, %448, !dbg !29
  %598 = bitcast <2 x bfloat> %597 to i32, !dbg !29
  %599 = fmul <2 x bfloat> %67, %451, !dbg !29
  %600 = bitcast <2 x bfloat> %599 to i32, !dbg !29
  %601 = fmul <2 x bfloat> %70, %453, !dbg !29
  %602 = bitcast <2 x bfloat> %601 to i32, !dbg !29
  %603 = fmul <2 x bfloat> %73, %455, !dbg !29
  %604 = bitcast <2 x bfloat> %603 to i32, !dbg !29
  %605 = fmul <2 x bfloat> %76, %457, !dbg !29
  %606 = bitcast <2 x bfloat> %605 to i32, !dbg !29
  %607 = fmul <2 x bfloat> %79, %460, !dbg !29
  %608 = bitcast <2 x bfloat> %607 to i32, !dbg !29
  %609 = fmul <2 x bfloat> %82, %462, !dbg !29
  %610 = bitcast <2 x bfloat> %609 to i32, !dbg !29
  %611 = fmul <2 x bfloat> %85, %464, !dbg !29
  %612 = bitcast <2 x bfloat> %611 to i32, !dbg !29
  %613 = fmul <2 x bfloat> %88, %466, !dbg !29
  %614 = bitcast <2 x bfloat> %613 to i32, !dbg !29
  %615 = fmul <2 x bfloat> %67, %469, !dbg !29
  %616 = bitcast <2 x bfloat> %615 to i32, !dbg !29
  %617 = fmul <2 x bfloat> %70, %471, !dbg !29
  %618 = bitcast <2 x bfloat> %617 to i32, !dbg !29
  %619 = fmul <2 x bfloat> %73, %473, !dbg !29
  %620 = bitcast <2 x bfloat> %619 to i32, !dbg !29
  %621 = fmul <2 x bfloat> %76, %475, !dbg !29
  %622 = bitcast <2 x bfloat> %621 to i32, !dbg !29
  %623 = fmul <2 x bfloat> %79, %478, !dbg !29
  %624 = bitcast <2 x bfloat> %623 to i32, !dbg !29
  %625 = fmul <2 x bfloat> %82, %480, !dbg !29
  %626 = bitcast <2 x bfloat> %625 to i32, !dbg !29
  %627 = fmul <2 x bfloat> %85, %482, !dbg !29
  %628 = bitcast <2 x bfloat> %627 to i32, !dbg !29
  %629 = fmul <2 x bfloat> %88, %484, !dbg !29
  %630 = bitcast <2 x bfloat> %629 to i32, !dbg !29
  %631 = fmul <2 x bfloat> %67, %487, !dbg !29
  %632 = bitcast <2 x bfloat> %631 to i32, !dbg !29
  %633 = fmul <2 x bfloat> %70, %489, !dbg !29
  %634 = bitcast <2 x bfloat> %633 to i32, !dbg !29
  %635 = fmul <2 x bfloat> %73, %491, !dbg !29
  %636 = bitcast <2 x bfloat> %635 to i32, !dbg !29
  %637 = fmul <2 x bfloat> %76, %493, !dbg !29
  %638 = bitcast <2 x bfloat> %637 to i32, !dbg !29
  %639 = fmul <2 x bfloat> %79, %496, !dbg !29
  %640 = bitcast <2 x bfloat> %639 to i32, !dbg !29
  %641 = fmul <2 x bfloat> %82, %498, !dbg !29
  %642 = bitcast <2 x bfloat> %641 to i32, !dbg !29
  %643 = fmul <2 x bfloat> %85, %500, !dbg !29
  %644 = bitcast <2 x bfloat> %643 to i32, !dbg !29
  %645 = fmul <2 x bfloat> %88, %502, !dbg !29
  %646 = bitcast <2 x bfloat> %645 to i32, !dbg !29
  %647 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %504, i32 %505, i32 %506, i32 %507, i32 %584, i32 %586) #3, !dbg !29
  %648 = extractvalue { float, float, float, float } %647, 0, !dbg !29
  %649 = extractvalue { float, float, float, float } %647, 1, !dbg !29
  %650 = extractvalue { float, float, float, float } %647, 2, !dbg !29
  %651 = extractvalue { float, float, float, float } %647, 3, !dbg !29
  %652 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %504, i32 %505, i32 %506, i32 %507, i32 %600, i32 %602) #3, !dbg !29
  %653 = extractvalue { float, float, float, float } %652, 0, !dbg !29
  %654 = extractvalue { float, float, float, float } %652, 1, !dbg !29
  %655 = extractvalue { float, float, float, float } %652, 2, !dbg !29
  %656 = extractvalue { float, float, float, float } %652, 3, !dbg !29
  %657 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %504, i32 %505, i32 %506, i32 %507, i32 %616, i32 %618) #3, !dbg !29
  %658 = extractvalue { float, float, float, float } %657, 0, !dbg !29
  %659 = extractvalue { float, float, float, float } %657, 1, !dbg !29
  %660 = extractvalue { float, float, float, float } %657, 2, !dbg !29
  %661 = extractvalue { float, float, float, float } %657, 3, !dbg !29
  %662 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %504, i32 %505, i32 %506, i32 %507, i32 %632, i32 %634) #3, !dbg !29
  %663 = extractvalue { float, float, float, float } %662, 0, !dbg !29
  %664 = extractvalue { float, float, float, float } %662, 1, !dbg !29
  %665 = extractvalue { float, float, float, float } %662, 2, !dbg !29
  %666 = extractvalue { float, float, float, float } %662, 3, !dbg !29
  %667 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %524, i32 %525, i32 %526, i32 %527, i32 %584, i32 %586) #3, !dbg !29
  %668 = extractvalue { float, float, float, float } %667, 0, !dbg !29
  %669 = extractvalue { float, float, float, float } %667, 1, !dbg !29
  %670 = extractvalue { float, float, float, float } %667, 2, !dbg !29
  %671 = extractvalue { float, float, float, float } %667, 3, !dbg !29
  %672 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %524, i32 %525, i32 %526, i32 %527, i32 %600, i32 %602) #3, !dbg !29
  %673 = extractvalue { float, float, float, float } %672, 0, !dbg !29
  %674 = extractvalue { float, float, float, float } %672, 1, !dbg !29
  %675 = extractvalue { float, float, float, float } %672, 2, !dbg !29
  %676 = extractvalue { float, float, float, float } %672, 3, !dbg !29
  %677 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %524, i32 %525, i32 %526, i32 %527, i32 %616, i32 %618) #3, !dbg !29
  %678 = extractvalue { float, float, float, float } %677, 0, !dbg !29
  %679 = extractvalue { float, float, float, float } %677, 1, !dbg !29
  %680 = extractvalue { float, float, float, float } %677, 2, !dbg !29
  %681 = extractvalue { float, float, float, float } %677, 3, !dbg !29
  %682 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %524, i32 %525, i32 %526, i32 %527, i32 %632, i32 %634) #3, !dbg !29
  %683 = extractvalue { float, float, float, float } %682, 0, !dbg !29
  %684 = extractvalue { float, float, float, float } %682, 1, !dbg !29
  %685 = extractvalue { float, float, float, float } %682, 2, !dbg !29
  %686 = extractvalue { float, float, float, float } %682, 3, !dbg !29
  %687 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %544, i32 %545, i32 %546, i32 %547, i32 %584, i32 %586) #3, !dbg !29
  %688 = extractvalue { float, float, float, float } %687, 0, !dbg !29
  %689 = extractvalue { float, float, float, float } %687, 1, !dbg !29
  %690 = extractvalue { float, float, float, float } %687, 2, !dbg !29
  %691 = extractvalue { float, float, float, float } %687, 3, !dbg !29
  %692 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %544, i32 %545, i32 %546, i32 %547, i32 %600, i32 %602) #3, !dbg !29
  %693 = extractvalue { float, float, float, float } %692, 0, !dbg !29
  %694 = extractvalue { float, float, float, float } %692, 1, !dbg !29
  %695 = extractvalue { float, float, float, float } %692, 2, !dbg !29
  %696 = extractvalue { float, float, float, float } %692, 3, !dbg !29
  %697 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %544, i32 %545, i32 %546, i32 %547, i32 %616, i32 %618) #3, !dbg !29
  %698 = extractvalue { float, float, float, float } %697, 0, !dbg !29
  %699 = extractvalue { float, float, float, float } %697, 1, !dbg !29
  %700 = extractvalue { float, float, float, float } %697, 2, !dbg !29
  %701 = extractvalue { float, float, float, float } %697, 3, !dbg !29
  %702 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %544, i32 %545, i32 %546, i32 %547, i32 %632, i32 %634) #3, !dbg !29
  %703 = extractvalue { float, float, float, float } %702, 0, !dbg !29
  %704 = extractvalue { float, float, float, float } %702, 1, !dbg !29
  %705 = extractvalue { float, float, float, float } %702, 2, !dbg !29
  %706 = extractvalue { float, float, float, float } %702, 3, !dbg !29
  %707 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %564, i32 %565, i32 %566, i32 %567, i32 %584, i32 %586) #3, !dbg !29
  %708 = extractvalue { float, float, float, float } %707, 0, !dbg !29
  %709 = extractvalue { float, float, float, float } %707, 1, !dbg !29
  %710 = extractvalue { float, float, float, float } %707, 2, !dbg !29
  %711 = extractvalue { float, float, float, float } %707, 3, !dbg !29
  %712 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %564, i32 %565, i32 %566, i32 %567, i32 %600, i32 %602) #3, !dbg !29
  %713 = extractvalue { float, float, float, float } %712, 0, !dbg !29
  %714 = extractvalue { float, float, float, float } %712, 1, !dbg !29
  %715 = extractvalue { float, float, float, float } %712, 2, !dbg !29
  %716 = extractvalue { float, float, float, float } %712, 3, !dbg !29
  %717 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %564, i32 %565, i32 %566, i32 %567, i32 %616, i32 %618) #3, !dbg !29
  %718 = extractvalue { float, float, float, float } %717, 0, !dbg !29
  %719 = extractvalue { float, float, float, float } %717, 1, !dbg !29
  %720 = extractvalue { float, float, float, float } %717, 2, !dbg !29
  %721 = extractvalue { float, float, float, float } %717, 3, !dbg !29
  %722 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %564, i32 %565, i32 %566, i32 %567, i32 %632, i32 %634) #3, !dbg !29
  %723 = extractvalue { float, float, float, float } %722, 0, !dbg !29
  %724 = extractvalue { float, float, float, float } %722, 1, !dbg !29
  %725 = extractvalue { float, float, float, float } %722, 2, !dbg !29
  %726 = extractvalue { float, float, float, float } %722, 3, !dbg !29
  %727 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %648, float %649, float %650, float %651, i32 %509, i32 %510, i32 %511, i32 %512, i32 %588, i32 %590) #3, !dbg !29
  %728 = extractvalue { float, float, float, float } %727, 0, !dbg !29
  %729 = extractvalue { float, float, float, float } %727, 1, !dbg !29
  %730 = extractvalue { float, float, float, float } %727, 2, !dbg !29
  %731 = extractvalue { float, float, float, float } %727, 3, !dbg !29
  %732 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %653, float %654, float %655, float %656, i32 %509, i32 %510, i32 %511, i32 %512, i32 %604, i32 %606) #3, !dbg !29
  %733 = extractvalue { float, float, float, float } %732, 0, !dbg !29
  %734 = extractvalue { float, float, float, float } %732, 1, !dbg !29
  %735 = extractvalue { float, float, float, float } %732, 2, !dbg !29
  %736 = extractvalue { float, float, float, float } %732, 3, !dbg !29
  %737 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %658, float %659, float %660, float %661, i32 %509, i32 %510, i32 %511, i32 %512, i32 %620, i32 %622) #3, !dbg !29
  %738 = extractvalue { float, float, float, float } %737, 0, !dbg !29
  %739 = extractvalue { float, float, float, float } %737, 1, !dbg !29
  %740 = extractvalue { float, float, float, float } %737, 2, !dbg !29
  %741 = extractvalue { float, float, float, float } %737, 3, !dbg !29
  %742 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %663, float %664, float %665, float %666, i32 %509, i32 %510, i32 %511, i32 %512, i32 %636, i32 %638) #3, !dbg !29
  %743 = extractvalue { float, float, float, float } %742, 0, !dbg !29
  %744 = extractvalue { float, float, float, float } %742, 1, !dbg !29
  %745 = extractvalue { float, float, float, float } %742, 2, !dbg !29
  %746 = extractvalue { float, float, float, float } %742, 3, !dbg !29
  %747 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %668, float %669, float %670, float %671, i32 %529, i32 %530, i32 %531, i32 %532, i32 %588, i32 %590) #3, !dbg !29
  %748 = extractvalue { float, float, float, float } %747, 0, !dbg !29
  %749 = extractvalue { float, float, float, float } %747, 1, !dbg !29
  %750 = extractvalue { float, float, float, float } %747, 2, !dbg !29
  %751 = extractvalue { float, float, float, float } %747, 3, !dbg !29
  %752 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %673, float %674, float %675, float %676, i32 %529, i32 %530, i32 %531, i32 %532, i32 %604, i32 %606) #3, !dbg !29
  %753 = extractvalue { float, float, float, float } %752, 0, !dbg !29
  %754 = extractvalue { float, float, float, float } %752, 1, !dbg !29
  %755 = extractvalue { float, float, float, float } %752, 2, !dbg !29
  %756 = extractvalue { float, float, float, float } %752, 3, !dbg !29
  %757 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %678, float %679, float %680, float %681, i32 %529, i32 %530, i32 %531, i32 %532, i32 %620, i32 %622) #3, !dbg !29
  %758 = extractvalue { float, float, float, float } %757, 0, !dbg !29
  %759 = extractvalue { float, float, float, float } %757, 1, !dbg !29
  %760 = extractvalue { float, float, float, float } %757, 2, !dbg !29
  %761 = extractvalue { float, float, float, float } %757, 3, !dbg !29
  %762 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %683, float %684, float %685, float %686, i32 %529, i32 %530, i32 %531, i32 %532, i32 %636, i32 %638) #3, !dbg !29
  %763 = extractvalue { float, float, float, float } %762, 0, !dbg !29
  %764 = extractvalue { float, float, float, float } %762, 1, !dbg !29
  %765 = extractvalue { float, float, float, float } %762, 2, !dbg !29
  %766 = extractvalue { float, float, float, float } %762, 3, !dbg !29
  %767 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %688, float %689, float %690, float %691, i32 %549, i32 %550, i32 %551, i32 %552, i32 %588, i32 %590) #3, !dbg !29
  %768 = extractvalue { float, float, float, float } %767, 0, !dbg !29
  %769 = extractvalue { float, float, float, float } %767, 1, !dbg !29
  %770 = extractvalue { float, float, float, float } %767, 2, !dbg !29
  %771 = extractvalue { float, float, float, float } %767, 3, !dbg !29
  %772 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %693, float %694, float %695, float %696, i32 %549, i32 %550, i32 %551, i32 %552, i32 %604, i32 %606) #3, !dbg !29
  %773 = extractvalue { float, float, float, float } %772, 0, !dbg !29
  %774 = extractvalue { float, float, float, float } %772, 1, !dbg !29
  %775 = extractvalue { float, float, float, float } %772, 2, !dbg !29
  %776 = extractvalue { float, float, float, float } %772, 3, !dbg !29
  %777 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %698, float %699, float %700, float %701, i32 %549, i32 %550, i32 %551, i32 %552, i32 %620, i32 %622) #3, !dbg !29
  %778 = extractvalue { float, float, float, float } %777, 0, !dbg !29
  %779 = extractvalue { float, float, float, float } %777, 1, !dbg !29
  %780 = extractvalue { float, float, float, float } %777, 2, !dbg !29
  %781 = extractvalue { float, float, float, float } %777, 3, !dbg !29
  %782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %703, float %704, float %705, float %706, i32 %549, i32 %550, i32 %551, i32 %552, i32 %636, i32 %638) #3, !dbg !29
  %783 = extractvalue { float, float, float, float } %782, 0, !dbg !29
  %784 = extractvalue { float, float, float, float } %782, 1, !dbg !29
  %785 = extractvalue { float, float, float, float } %782, 2, !dbg !29
  %786 = extractvalue { float, float, float, float } %782, 3, !dbg !29
  %787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %708, float %709, float %710, float %711, i32 %569, i32 %570, i32 %571, i32 %572, i32 %588, i32 %590) #3, !dbg !29
  %788 = extractvalue { float, float, float, float } %787, 0, !dbg !29
  %789 = extractvalue { float, float, float, float } %787, 1, !dbg !29
  %790 = extractvalue { float, float, float, float } %787, 2, !dbg !29
  %791 = extractvalue { float, float, float, float } %787, 3, !dbg !29
  %792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %713, float %714, float %715, float %716, i32 %569, i32 %570, i32 %571, i32 %572, i32 %604, i32 %606) #3, !dbg !29
  %793 = extractvalue { float, float, float, float } %792, 0, !dbg !29
  %794 = extractvalue { float, float, float, float } %792, 1, !dbg !29
  %795 = extractvalue { float, float, float, float } %792, 2, !dbg !29
  %796 = extractvalue { float, float, float, float } %792, 3, !dbg !29
  %797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %718, float %719, float %720, float %721, i32 %569, i32 %570, i32 %571, i32 %572, i32 %620, i32 %622) #3, !dbg !29
  %798 = extractvalue { float, float, float, float } %797, 0, !dbg !29
  %799 = extractvalue { float, float, float, float } %797, 1, !dbg !29
  %800 = extractvalue { float, float, float, float } %797, 2, !dbg !29
  %801 = extractvalue { float, float, float, float } %797, 3, !dbg !29
  %802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %723, float %724, float %725, float %726, i32 %569, i32 %570, i32 %571, i32 %572, i32 %636, i32 %638) #3, !dbg !29
  %803 = extractvalue { float, float, float, float } %802, 0, !dbg !29
  %804 = extractvalue { float, float, float, float } %802, 1, !dbg !29
  %805 = extractvalue { float, float, float, float } %802, 2, !dbg !29
  %806 = extractvalue { float, float, float, float } %802, 3, !dbg !29
  %807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %728, float %729, float %730, float %731, i32 %514, i32 %515, i32 %516, i32 %517, i32 %592, i32 %594) #3, !dbg !29
  %808 = extractvalue { float, float, float, float } %807, 0, !dbg !29
  %809 = extractvalue { float, float, float, float } %807, 1, !dbg !29
  %810 = extractvalue { float, float, float, float } %807, 2, !dbg !29
  %811 = extractvalue { float, float, float, float } %807, 3, !dbg !29
  %812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %733, float %734, float %735, float %736, i32 %514, i32 %515, i32 %516, i32 %517, i32 %608, i32 %610) #3, !dbg !29
  %813 = extractvalue { float, float, float, float } %812, 0, !dbg !29
  %814 = extractvalue { float, float, float, float } %812, 1, !dbg !29
  %815 = extractvalue { float, float, float, float } %812, 2, !dbg !29
  %816 = extractvalue { float, float, float, float } %812, 3, !dbg !29
  %817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %738, float %739, float %740, float %741, i32 %514, i32 %515, i32 %516, i32 %517, i32 %624, i32 %626) #3, !dbg !29
  %818 = extractvalue { float, float, float, float } %817, 0, !dbg !29
  %819 = extractvalue { float, float, float, float } %817, 1, !dbg !29
  %820 = extractvalue { float, float, float, float } %817, 2, !dbg !29
  %821 = extractvalue { float, float, float, float } %817, 3, !dbg !29
  %822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %743, float %744, float %745, float %746, i32 %514, i32 %515, i32 %516, i32 %517, i32 %640, i32 %642) #3, !dbg !29
  %823 = extractvalue { float, float, float, float } %822, 0, !dbg !29
  %824 = extractvalue { float, float, float, float } %822, 1, !dbg !29
  %825 = extractvalue { float, float, float, float } %822, 2, !dbg !29
  %826 = extractvalue { float, float, float, float } %822, 3, !dbg !29
  %827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %748, float %749, float %750, float %751, i32 %534, i32 %535, i32 %536, i32 %537, i32 %592, i32 %594) #3, !dbg !29
  %828 = extractvalue { float, float, float, float } %827, 0, !dbg !29
  %829 = extractvalue { float, float, float, float } %827, 1, !dbg !29
  %830 = extractvalue { float, float, float, float } %827, 2, !dbg !29
  %831 = extractvalue { float, float, float, float } %827, 3, !dbg !29
  %832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %753, float %754, float %755, float %756, i32 %534, i32 %535, i32 %536, i32 %537, i32 %608, i32 %610) #3, !dbg !29
  %833 = extractvalue { float, float, float, float } %832, 0, !dbg !29
  %834 = extractvalue { float, float, float, float } %832, 1, !dbg !29
  %835 = extractvalue { float, float, float, float } %832, 2, !dbg !29
  %836 = extractvalue { float, float, float, float } %832, 3, !dbg !29
  %837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %758, float %759, float %760, float %761, i32 %534, i32 %535, i32 %536, i32 %537, i32 %624, i32 %626) #3, !dbg !29
  %838 = extractvalue { float, float, float, float } %837, 0, !dbg !29
  %839 = extractvalue { float, float, float, float } %837, 1, !dbg !29
  %840 = extractvalue { float, float, float, float } %837, 2, !dbg !29
  %841 = extractvalue { float, float, float, float } %837, 3, !dbg !29
  %842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %763, float %764, float %765, float %766, i32 %534, i32 %535, i32 %536, i32 %537, i32 %640, i32 %642) #3, !dbg !29
  %843 = extractvalue { float, float, float, float } %842, 0, !dbg !29
  %844 = extractvalue { float, float, float, float } %842, 1, !dbg !29
  %845 = extractvalue { float, float, float, float } %842, 2, !dbg !29
  %846 = extractvalue { float, float, float, float } %842, 3, !dbg !29
  %847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %768, float %769, float %770, float %771, i32 %554, i32 %555, i32 %556, i32 %557, i32 %592, i32 %594) #3, !dbg !29
  %848 = extractvalue { float, float, float, float } %847, 0, !dbg !29
  %849 = extractvalue { float, float, float, float } %847, 1, !dbg !29
  %850 = extractvalue { float, float, float, float } %847, 2, !dbg !29
  %851 = extractvalue { float, float, float, float } %847, 3, !dbg !29
  %852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %773, float %774, float %775, float %776, i32 %554, i32 %555, i32 %556, i32 %557, i32 %608, i32 %610) #3, !dbg !29
  %853 = extractvalue { float, float, float, float } %852, 0, !dbg !29
  %854 = extractvalue { float, float, float, float } %852, 1, !dbg !29
  %855 = extractvalue { float, float, float, float } %852, 2, !dbg !29
  %856 = extractvalue { float, float, float, float } %852, 3, !dbg !29
  %857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %778, float %779, float %780, float %781, i32 %554, i32 %555, i32 %556, i32 %557, i32 %624, i32 %626) #3, !dbg !29
  %858 = extractvalue { float, float, float, float } %857, 0, !dbg !29
  %859 = extractvalue { float, float, float, float } %857, 1, !dbg !29
  %860 = extractvalue { float, float, float, float } %857, 2, !dbg !29
  %861 = extractvalue { float, float, float, float } %857, 3, !dbg !29
  %862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %783, float %784, float %785, float %786, i32 %554, i32 %555, i32 %556, i32 %557, i32 %640, i32 %642) #3, !dbg !29
  %863 = extractvalue { float, float, float, float } %862, 0, !dbg !29
  %864 = extractvalue { float, float, float, float } %862, 1, !dbg !29
  %865 = extractvalue { float, float, float, float } %862, 2, !dbg !29
  %866 = extractvalue { float, float, float, float } %862, 3, !dbg !29
  %867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %788, float %789, float %790, float %791, i32 %574, i32 %575, i32 %576, i32 %577, i32 %592, i32 %594) #3, !dbg !29
  %868 = extractvalue { float, float, float, float } %867, 0, !dbg !29
  %869 = extractvalue { float, float, float, float } %867, 1, !dbg !29
  %870 = extractvalue { float, float, float, float } %867, 2, !dbg !29
  %871 = extractvalue { float, float, float, float } %867, 3, !dbg !29
  %872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %793, float %794, float %795, float %796, i32 %574, i32 %575, i32 %576, i32 %577, i32 %608, i32 %610) #3, !dbg !29
  %873 = extractvalue { float, float, float, float } %872, 0, !dbg !29
  %874 = extractvalue { float, float, float, float } %872, 1, !dbg !29
  %875 = extractvalue { float, float, float, float } %872, 2, !dbg !29
  %876 = extractvalue { float, float, float, float } %872, 3, !dbg !29
  %877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %798, float %799, float %800, float %801, i32 %574, i32 %575, i32 %576, i32 %577, i32 %624, i32 %626) #3, !dbg !29
  %878 = extractvalue { float, float, float, float } %877, 0, !dbg !29
  %879 = extractvalue { float, float, float, float } %877, 1, !dbg !29
  %880 = extractvalue { float, float, float, float } %877, 2, !dbg !29
  %881 = extractvalue { float, float, float, float } %877, 3, !dbg !29
  %882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %803, float %804, float %805, float %806, i32 %574, i32 %575, i32 %576, i32 %577, i32 %640, i32 %642) #3, !dbg !29
  %883 = extractvalue { float, float, float, float } %882, 0, !dbg !29
  %884 = extractvalue { float, float, float, float } %882, 1, !dbg !29
  %885 = extractvalue { float, float, float, float } %882, 2, !dbg !29
  %886 = extractvalue { float, float, float, float } %882, 3, !dbg !29
  %887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %808, float %809, float %810, float %811, i32 %519, i32 %520, i32 %521, i32 %522, i32 %596, i32 %598) #3, !dbg !29
  %888 = extractvalue { float, float, float, float } %887, 0, !dbg !29
  %889 = extractvalue { float, float, float, float } %887, 1, !dbg !29
  %890 = extractvalue { float, float, float, float } %887, 2, !dbg !29
  %891 = extractvalue { float, float, float, float } %887, 3, !dbg !29
  %892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %813, float %814, float %815, float %816, i32 %519, i32 %520, i32 %521, i32 %522, i32 %612, i32 %614) #3, !dbg !29
  %893 = extractvalue { float, float, float, float } %892, 0, !dbg !29
  %894 = extractvalue { float, float, float, float } %892, 1, !dbg !29
  %895 = extractvalue { float, float, float, float } %892, 2, !dbg !29
  %896 = extractvalue { float, float, float, float } %892, 3, !dbg !29
  %897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %818, float %819, float %820, float %821, i32 %519, i32 %520, i32 %521, i32 %522, i32 %628, i32 %630) #3, !dbg !29
  %898 = extractvalue { float, float, float, float } %897, 0, !dbg !29
  %899 = extractvalue { float, float, float, float } %897, 1, !dbg !29
  %900 = extractvalue { float, float, float, float } %897, 2, !dbg !29
  %901 = extractvalue { float, float, float, float } %897, 3, !dbg !29
  %902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %823, float %824, float %825, float %826, i32 %519, i32 %520, i32 %521, i32 %522, i32 %644, i32 %646) #3, !dbg !29
  %903 = extractvalue { float, float, float, float } %902, 0, !dbg !29
  %904 = extractvalue { float, float, float, float } %902, 1, !dbg !29
  %905 = extractvalue { float, float, float, float } %902, 2, !dbg !29
  %906 = extractvalue { float, float, float, float } %902, 3, !dbg !29
  %907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %828, float %829, float %830, float %831, i32 %539, i32 %540, i32 %541, i32 %542, i32 %596, i32 %598) #3, !dbg !29
  %908 = extractvalue { float, float, float, float } %907, 0, !dbg !29
  %909 = extractvalue { float, float, float, float } %907, 1, !dbg !29
  %910 = extractvalue { float, float, float, float } %907, 2, !dbg !29
  %911 = extractvalue { float, float, float, float } %907, 3, !dbg !29
  %912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %833, float %834, float %835, float %836, i32 %539, i32 %540, i32 %541, i32 %542, i32 %612, i32 %614) #3, !dbg !29
  %913 = extractvalue { float, float, float, float } %912, 0, !dbg !29
  %914 = extractvalue { float, float, float, float } %912, 1, !dbg !29
  %915 = extractvalue { float, float, float, float } %912, 2, !dbg !29
  %916 = extractvalue { float, float, float, float } %912, 3, !dbg !29
  %917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %838, float %839, float %840, float %841, i32 %539, i32 %540, i32 %541, i32 %542, i32 %628, i32 %630) #3, !dbg !29
  %918 = extractvalue { float, float, float, float } %917, 0, !dbg !29
  %919 = extractvalue { float, float, float, float } %917, 1, !dbg !29
  %920 = extractvalue { float, float, float, float } %917, 2, !dbg !29
  %921 = extractvalue { float, float, float, float } %917, 3, !dbg !29
  %922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %843, float %844, float %845, float %846, i32 %539, i32 %540, i32 %541, i32 %542, i32 %644, i32 %646) #3, !dbg !29
  %923 = extractvalue { float, float, float, float } %922, 0, !dbg !29
  %924 = extractvalue { float, float, float, float } %922, 1, !dbg !29
  %925 = extractvalue { float, float, float, float } %922, 2, !dbg !29
  %926 = extractvalue { float, float, float, float } %922, 3, !dbg !29
  %927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %848, float %849, float %850, float %851, i32 %559, i32 %560, i32 %561, i32 %562, i32 %596, i32 %598) #3, !dbg !29
  %928 = extractvalue { float, float, float, float } %927, 0, !dbg !29
  %929 = extractvalue { float, float, float, float } %927, 1, !dbg !29
  %930 = extractvalue { float, float, float, float } %927, 2, !dbg !29
  %931 = extractvalue { float, float, float, float } %927, 3, !dbg !29
  %932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %853, float %854, float %855, float %856, i32 %559, i32 %560, i32 %561, i32 %562, i32 %612, i32 %614) #3, !dbg !29
  %933 = extractvalue { float, float, float, float } %932, 0, !dbg !29
  %934 = extractvalue { float, float, float, float } %932, 1, !dbg !29
  %935 = extractvalue { float, float, float, float } %932, 2, !dbg !29
  %936 = extractvalue { float, float, float, float } %932, 3, !dbg !29
  %937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %858, float %859, float %860, float %861, i32 %559, i32 %560, i32 %561, i32 %562, i32 %628, i32 %630) #3, !dbg !29
  %938 = extractvalue { float, float, float, float } %937, 0, !dbg !29
  %939 = extractvalue { float, float, float, float } %937, 1, !dbg !29
  %940 = extractvalue { float, float, float, float } %937, 2, !dbg !29
  %941 = extractvalue { float, float, float, float } %937, 3, !dbg !29
  %942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %863, float %864, float %865, float %866, i32 %559, i32 %560, i32 %561, i32 %562, i32 %644, i32 %646) #3, !dbg !29
  %943 = extractvalue { float, float, float, float } %942, 0, !dbg !29
  %944 = extractvalue { float, float, float, float } %942, 1, !dbg !29
  %945 = extractvalue { float, float, float, float } %942, 2, !dbg !29
  %946 = extractvalue { float, float, float, float } %942, 3, !dbg !29
  %947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %868, float %869, float %870, float %871, i32 %579, i32 %580, i32 %581, i32 %582, i32 %596, i32 %598) #3, !dbg !29
  %948 = extractvalue { float, float, float, float } %947, 0, !dbg !29
  %949 = extractvalue { float, float, float, float } %947, 1, !dbg !29
  %950 = extractvalue { float, float, float, float } %947, 2, !dbg !29
  %951 = extractvalue { float, float, float, float } %947, 3, !dbg !29
  %952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %873, float %874, float %875, float %876, i32 %579, i32 %580, i32 %581, i32 %582, i32 %612, i32 %614) #3, !dbg !29
  %953 = extractvalue { float, float, float, float } %952, 0, !dbg !29
  %954 = extractvalue { float, float, float, float } %952, 1, !dbg !29
  %955 = extractvalue { float, float, float, float } %952, 2, !dbg !29
  %956 = extractvalue { float, float, float, float } %952, 3, !dbg !29
  %957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %878, float %879, float %880, float %881, i32 %579, i32 %580, i32 %581, i32 %582, i32 %628, i32 %630) #3, !dbg !29
  %958 = extractvalue { float, float, float, float } %957, 0, !dbg !29
  %959 = extractvalue { float, float, float, float } %957, 1, !dbg !29
  %960 = extractvalue { float, float, float, float } %957, 2, !dbg !29
  %961 = extractvalue { float, float, float, float } %957, 3, !dbg !29
  %962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %883, float %884, float %885, float %886, i32 %579, i32 %580, i32 %581, i32 %582, i32 %644, i32 %646) #3, !dbg !29
  %963 = extractvalue { float, float, float, float } %962, 0, !dbg !29
  %964 = extractvalue { float, float, float, float } %962, 1, !dbg !29
  %965 = extractvalue { float, float, float, float } %962, 2, !dbg !29
  %966 = extractvalue { float, float, float, float } %962, 3, !dbg !29
  %967 = insertelement <2 x float> poison, float %888, i64 0, !dbg !30
  %968 = insertelement <2 x float> %967, float %889, i64 1, !dbg !30
  %969 = fptrunc <2 x float> %968 to <2 x bfloat>, !dbg !30
  %970 = insertelement <2 x float> poison, float %890, i64 0, !dbg !30
  %971 = insertelement <2 x float> %970, float %891, i64 1, !dbg !30
  %972 = fptrunc <2 x float> %971 to <2 x bfloat>, !dbg !30
  %973 = insertelement <2 x float> poison, float %893, i64 0, !dbg !30
  %974 = insertelement <2 x float> %973, float %894, i64 1, !dbg !30
  %975 = fptrunc <2 x float> %974 to <2 x bfloat>, !dbg !30
  %976 = insertelement <2 x float> poison, float %895, i64 0, !dbg !30
  %977 = insertelement <2 x float> %976, float %896, i64 1, !dbg !30
  %978 = fptrunc <2 x float> %977 to <2 x bfloat>, !dbg !30
  %979 = insertelement <2 x float> poison, float %898, i64 0, !dbg !30
  %980 = insertelement <2 x float> %979, float %899, i64 1, !dbg !30
  %981 = fptrunc <2 x float> %980 to <2 x bfloat>, !dbg !30
  %982 = insertelement <2 x float> poison, float %900, i64 0, !dbg !30
  %983 = insertelement <2 x float> %982, float %901, i64 1, !dbg !30
  %984 = fptrunc <2 x float> %983 to <2 x bfloat>, !dbg !30
  %985 = insertelement <2 x float> poison, float %903, i64 0, !dbg !30
  %986 = insertelement <2 x float> %985, float %904, i64 1, !dbg !30
  %987 = fptrunc <2 x float> %986 to <2 x bfloat>, !dbg !30
  %988 = insertelement <2 x float> poison, float %905, i64 0, !dbg !30
  %989 = insertelement <2 x float> %988, float %906, i64 1, !dbg !30
  %990 = fptrunc <2 x float> %989 to <2 x bfloat>, !dbg !30
  %991 = insertelement <2 x float> poison, float %908, i64 0, !dbg !30
  %992 = insertelement <2 x float> %991, float %909, i64 1, !dbg !30
  %993 = fptrunc <2 x float> %992 to <2 x bfloat>, !dbg !30
  %994 = insertelement <2 x float> poison, float %910, i64 0, !dbg !30
  %995 = insertelement <2 x float> %994, float %911, i64 1, !dbg !30
  %996 = fptrunc <2 x float> %995 to <2 x bfloat>, !dbg !30
  %997 = insertelement <2 x float> poison, float %913, i64 0, !dbg !30
  %998 = insertelement <2 x float> %997, float %914, i64 1, !dbg !30
  %999 = fptrunc <2 x float> %998 to <2 x bfloat>, !dbg !30
  %1000 = insertelement <2 x float> poison, float %915, i64 0, !dbg !30
  %1001 = insertelement <2 x float> %1000, float %916, i64 1, !dbg !30
  %1002 = fptrunc <2 x float> %1001 to <2 x bfloat>, !dbg !30
  %1003 = insertelement <2 x float> poison, float %918, i64 0, !dbg !30
  %1004 = insertelement <2 x float> %1003, float %919, i64 1, !dbg !30
  %1005 = fptrunc <2 x float> %1004 to <2 x bfloat>, !dbg !30
  %1006 = insertelement <2 x float> poison, float %920, i64 0, !dbg !30
  %1007 = insertelement <2 x float> %1006, float %921, i64 1, !dbg !30
  %1008 = fptrunc <2 x float> %1007 to <2 x bfloat>, !dbg !30
  %1009 = insertelement <2 x float> poison, float %923, i64 0, !dbg !30
  %1010 = insertelement <2 x float> %1009, float %924, i64 1, !dbg !30
  %1011 = fptrunc <2 x float> %1010 to <2 x bfloat>, !dbg !30
  %1012 = insertelement <2 x float> poison, float %925, i64 0, !dbg !30
  %1013 = insertelement <2 x float> %1012, float %926, i64 1, !dbg !30
  %1014 = fptrunc <2 x float> %1013 to <2 x bfloat>, !dbg !30
  %1015 = insertelement <2 x float> poison, float %928, i64 0, !dbg !30
  %1016 = insertelement <2 x float> %1015, float %929, i64 1, !dbg !30
  %1017 = fptrunc <2 x float> %1016 to <2 x bfloat>, !dbg !30
  %1018 = insertelement <2 x float> poison, float %930, i64 0, !dbg !30
  %1019 = insertelement <2 x float> %1018, float %931, i64 1, !dbg !30
  %1020 = fptrunc <2 x float> %1019 to <2 x bfloat>, !dbg !30
  %1021 = insertelement <2 x float> poison, float %933, i64 0, !dbg !30
  %1022 = insertelement <2 x float> %1021, float %934, i64 1, !dbg !30
  %1023 = fptrunc <2 x float> %1022 to <2 x bfloat>, !dbg !30
  %1024 = insertelement <2 x float> poison, float %935, i64 0, !dbg !30
  %1025 = insertelement <2 x float> %1024, float %936, i64 1, !dbg !30
  %1026 = fptrunc <2 x float> %1025 to <2 x bfloat>, !dbg !30
  %1027 = insertelement <2 x float> poison, float %938, i64 0, !dbg !30
  %1028 = insertelement <2 x float> %1027, float %939, i64 1, !dbg !30
  %1029 = fptrunc <2 x float> %1028 to <2 x bfloat>, !dbg !30
  %1030 = insertelement <2 x float> poison, float %940, i64 0, !dbg !30
  %1031 = insertelement <2 x float> %1030, float %941, i64 1, !dbg !30
  %1032 = fptrunc <2 x float> %1031 to <2 x bfloat>, !dbg !30
  %1033 = insertelement <2 x float> poison, float %943, i64 0, !dbg !30
  %1034 = insertelement <2 x float> %1033, float %944, i64 1, !dbg !30
  %1035 = fptrunc <2 x float> %1034 to <2 x bfloat>, !dbg !30
  %1036 = insertelement <2 x float> poison, float %945, i64 0, !dbg !30
  %1037 = insertelement <2 x float> %1036, float %946, i64 1, !dbg !30
  %1038 = fptrunc <2 x float> %1037 to <2 x bfloat>, !dbg !30
  %1039 = insertelement <2 x float> poison, float %948, i64 0, !dbg !30
  %1040 = insertelement <2 x float> %1039, float %949, i64 1, !dbg !30
  %1041 = fptrunc <2 x float> %1040 to <2 x bfloat>, !dbg !30
  %1042 = insertelement <2 x float> poison, float %950, i64 0, !dbg !30
  %1043 = insertelement <2 x float> %1042, float %951, i64 1, !dbg !30
  %1044 = fptrunc <2 x float> %1043 to <2 x bfloat>, !dbg !30
  %1045 = insertelement <2 x float> poison, float %953, i64 0, !dbg !30
  %1046 = insertelement <2 x float> %1045, float %954, i64 1, !dbg !30
  %1047 = fptrunc <2 x float> %1046 to <2 x bfloat>, !dbg !30
  %1048 = insertelement <2 x float> poison, float %955, i64 0, !dbg !30
  %1049 = insertelement <2 x float> %1048, float %956, i64 1, !dbg !30
  %1050 = fptrunc <2 x float> %1049 to <2 x bfloat>, !dbg !30
  %1051 = insertelement <2 x float> poison, float %958, i64 0, !dbg !30
  %1052 = insertelement <2 x float> %1051, float %959, i64 1, !dbg !30
  %1053 = fptrunc <2 x float> %1052 to <2 x bfloat>, !dbg !30
  %1054 = insertelement <2 x float> poison, float %960, i64 0, !dbg !30
  %1055 = insertelement <2 x float> %1054, float %961, i64 1, !dbg !30
  %1056 = fptrunc <2 x float> %1055 to <2 x bfloat>, !dbg !30
  %1057 = insertelement <2 x float> poison, float %963, i64 0, !dbg !30
  %1058 = insertelement <2 x float> %1057, float %964, i64 1, !dbg !30
  %1059 = fptrunc <2 x float> %1058 to <2 x bfloat>, !dbg !30
  %1060 = insertelement <2 x float> poison, float %965, i64 0, !dbg !30
  %1061 = insertelement <2 x float> %1060, float %966, i64 1, !dbg !30
  %1062 = fptrunc <2 x float> %1061 to <2 x bfloat>, !dbg !30
  %1063 = getelementptr bfloat, ptr addrspace(1) %259, i64 %423, !dbg !31
  %1064 = getelementptr bfloat, ptr addrspace(1) %259, i64 %424, !dbg !31
  %1065 = getelementptr bfloat, ptr addrspace(1) %259, i64 %425, !dbg !31
  %1066 = getelementptr bfloat, ptr addrspace(1) %259, i64 %426, !dbg !31
  %1067 = getelementptr bfloat, ptr addrspace(1) %259, i64 %427, !dbg !31
  %1068 = getelementptr bfloat, ptr addrspace(1) %259, i64 %428, !dbg !31
  %1069 = getelementptr bfloat, ptr addrspace(1) %259, i64 %429, !dbg !31
  %1070 = getelementptr bfloat, ptr addrspace(1) %259, i64 %430, !dbg !31
  store <2 x bfloat> %969, ptr addrspace(3) %365, align 4, !dbg !31
  store <2 x bfloat> %972, ptr addrspace(3) %370, align 4, !dbg !31
  store <2 x bfloat> %975, ptr addrspace(3) %371, align 4, !dbg !31
  store <2 x bfloat> %978, ptr addrspace(3) %376, align 4, !dbg !31
  store <2 x bfloat> %981, ptr addrspace(3) %377, align 4, !dbg !31
  store <2 x bfloat> %984, ptr addrspace(3) %382, align 4, !dbg !31
  store <2 x bfloat> %987, ptr addrspace(3) %383, align 4, !dbg !31
  store <2 x bfloat> %990, ptr addrspace(3) %388, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1071 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !31
  %1072 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %993, ptr addrspace(3) %365, align 4, !dbg !31
  store <2 x bfloat> %996, ptr addrspace(3) %370, align 4, !dbg !31
  store <2 x bfloat> %999, ptr addrspace(3) %371, align 4, !dbg !31
  store <2 x bfloat> %1002, ptr addrspace(3) %376, align 4, !dbg !31
  store <2 x bfloat> %1005, ptr addrspace(3) %377, align 4, !dbg !31
  store <2 x bfloat> %1008, ptr addrspace(3) %382, align 4, !dbg !31
  store <2 x bfloat> %1011, ptr addrspace(3) %383, align 4, !dbg !31
  store <2 x bfloat> %1014, ptr addrspace(3) %388, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1073 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !31
  %1074 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1017, ptr addrspace(3) %365, align 4, !dbg !31
  store <2 x bfloat> %1020, ptr addrspace(3) %370, align 4, !dbg !31
  store <2 x bfloat> %1023, ptr addrspace(3) %371, align 4, !dbg !31
  store <2 x bfloat> %1026, ptr addrspace(3) %376, align 4, !dbg !31
  store <2 x bfloat> %1029, ptr addrspace(3) %377, align 4, !dbg !31
  store <2 x bfloat> %1032, ptr addrspace(3) %382, align 4, !dbg !31
  store <2 x bfloat> %1035, ptr addrspace(3) %383, align 4, !dbg !31
  store <2 x bfloat> %1038, ptr addrspace(3) %388, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1075 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !31
  %1076 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1041, ptr addrspace(3) %365, align 4, !dbg !31
  store <2 x bfloat> %1044, ptr addrspace(3) %370, align 4, !dbg !31
  store <2 x bfloat> %1047, ptr addrspace(3) %371, align 4, !dbg !31
  store <2 x bfloat> %1050, ptr addrspace(3) %376, align 4, !dbg !31
  store <2 x bfloat> %1053, ptr addrspace(3) %377, align 4, !dbg !31
  store <2 x bfloat> %1056, ptr addrspace(3) %382, align 4, !dbg !31
  store <2 x bfloat> %1059, ptr addrspace(3) %383, align 4, !dbg !31
  store <2 x bfloat> %1062, ptr addrspace(3) %388, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1077 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !31
  %1078 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !31
  %.extract299 = extractelement <4 x i32> %1071, i64 0, !dbg !31
  %.extract301 = extractelement <4 x i32> %1071, i64 1, !dbg !31
  %.extract303 = extractelement <4 x i32> %1071, i64 2, !dbg !31
  %.extract305 = extractelement <4 x i32> %1071, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract299, i32 %.extract301, i32 %.extract303, i32 %.extract305, ptr addrspace(1) %1063, i1 %415) #3, !dbg !31
  %.extract307 = extractelement <4 x i32> %1072, i64 0, !dbg !31
  %.extract309 = extractelement <4 x i32> %1072, i64 1, !dbg !31
  %.extract311 = extractelement <4 x i32> %1072, i64 2, !dbg !31
  %.extract313 = extractelement <4 x i32> %1072, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract307, i32 %.extract309, i32 %.extract311, i32 %.extract313, ptr addrspace(1) %1064, i1 %416) #3, !dbg !31
  %.extract315 = extractelement <4 x i32> %1073, i64 0, !dbg !31
  %.extract317 = extractelement <4 x i32> %1073, i64 1, !dbg !31
  %.extract319 = extractelement <4 x i32> %1073, i64 2, !dbg !31
  %.extract321 = extractelement <4 x i32> %1073, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract315, i32 %.extract317, i32 %.extract319, i32 %.extract321, ptr addrspace(1) %1065, i1 %417) #3, !dbg !31
  %.extract323 = extractelement <4 x i32> %1074, i64 0, !dbg !31
  %.extract325 = extractelement <4 x i32> %1074, i64 1, !dbg !31
  %.extract327 = extractelement <4 x i32> %1074, i64 2, !dbg !31
  %.extract329 = extractelement <4 x i32> %1074, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract323, i32 %.extract325, i32 %.extract327, i32 %.extract329, ptr addrspace(1) %1066, i1 %418) #3, !dbg !31
  %.extract331 = extractelement <4 x i32> %1075, i64 0, !dbg !31
  %.extract333 = extractelement <4 x i32> %1075, i64 1, !dbg !31
  %.extract335 = extractelement <4 x i32> %1075, i64 2, !dbg !31
  %.extract337 = extractelement <4 x i32> %1075, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract331, i32 %.extract333, i32 %.extract335, i32 %.extract337, ptr addrspace(1) %1067, i1 %419) #3, !dbg !31
  %.extract339 = extractelement <4 x i32> %1076, i64 0, !dbg !31
  %.extract341 = extractelement <4 x i32> %1076, i64 1, !dbg !31
  %.extract343 = extractelement <4 x i32> %1076, i64 2, !dbg !31
  %.extract345 = extractelement <4 x i32> %1076, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract339, i32 %.extract341, i32 %.extract343, i32 %.extract345, ptr addrspace(1) %1068, i1 %420) #3, !dbg !31
  %.extract347 = extractelement <4 x i32> %1077, i64 0, !dbg !31
  %.extract349 = extractelement <4 x i32> %1077, i64 1, !dbg !31
  %.extract351 = extractelement <4 x i32> %1077, i64 2, !dbg !31
  %.extract353 = extractelement <4 x i32> %1077, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract347, i32 %.extract349, i32 %.extract351, i32 %.extract353, ptr addrspace(1) %1069, i1 %421) #3, !dbg !31
  %.extract355 = extractelement <4 x i32> %1078, i64 0, !dbg !31
  %.extract357 = extractelement <4 x i32> %1078, i64 1, !dbg !31
  %.extract359 = extractelement <4 x i32> %1078, i64 2, !dbg !31
  %.extract361 = extractelement <4 x i32> %1078, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract355, i32 %.extract357, i32 %.extract359, i32 %.extract361, ptr addrspace(1) %1070, i1 %422) #3, !dbg !31
  %1079 = or disjoint i64 %indvars.iv, %45, !dbg !26
  %1080 = or disjoint i64 %1079, %.idx, !dbg !26
  %1081 = or disjoint i64 %1079, %.idx18, !dbg !26
  %1082 = or disjoint i64 %1079, %.idx19, !dbg !26
  %1083 = or disjoint i64 %1079, %.idx20, !dbg !26
  %1084 = or disjoint i64 %1079, %.idx21, !dbg !26
  %1085 = or disjoint i64 %1079, %.idx22, !dbg !26
  %1086 = or disjoint i64 %1079, %.idx23, !dbg !26
  %1087 = or disjoint i64 %1079, %.idx24, !dbg !26
  %1088 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1080, !dbg !26
  %1089 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1081, !dbg !26
  %1090 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1082, !dbg !26
  %1091 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1083, !dbg !26
  %1092 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1084, !dbg !26
  %1093 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1085, !dbg !26
  %1094 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1086, !dbg !26
  %1095 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1087, !dbg !26
  %1096 = and i1 %117, %414, !dbg !26
  %1097 = and i1 %118, %414, !dbg !26
  %1098 = and i1 %119, %414, !dbg !26
  %1099 = and i1 %120, %414, !dbg !26
  %1100 = and i1 %121, %414, !dbg !26
  %1101 = and i1 %122, %414, !dbg !26
  %1102 = and i1 %123, %414, !dbg !26
  %1103 = and i1 %124, %414, !dbg !26
  %1104 = select i1 %1096, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %1088, i32 %1104) #3, !dbg !26
  %1105 = select i1 %1097, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %1089, i32 %1105) #3, !dbg !26
  %1106 = select i1 %1098, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %1090, i32 %1106) #3, !dbg !26
  %1107 = select i1 %1099, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %1091, i32 %1107) #3, !dbg !26
  %1108 = select i1 %1100, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %1092, i32 %1108) #3, !dbg !26
  %1109 = select i1 %1101, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %1093, i32 %1109) #3, !dbg !26
  %1110 = select i1 %1102, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %1094, i32 %1110) #3, !dbg !26
  %1111 = select i1 %1103, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %1095, i32 %1111) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  br i1 %414, label %413, label %1112, !dbg !27

1112:                                             ; preds = %413
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %1113 = sext i32 %89 to i64, !dbg !32
  %1114 = getelementptr float, ptr addrspace(1) %6, i64 %1113, !dbg !32
  %1115 = getelementptr float, ptr addrspace(1) %1114, i64 %56, !dbg !33
  %1116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1115, i1 %60) #3, !dbg !33
  %1117 = bitcast i32 %1116 to float, !dbg !33
  %1118 = fmul float %1117, 0x3FF7154760000000, !dbg !34
  %1119 = tail call float @llvm.nvvm.ex2.approx.f(float %1118), !dbg !34
  %1120 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %36, !dbg !34
  store float %1119, ptr addrspace(3) %1120, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %1121 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %63, !dbg !34
  %1122 = load <2 x float>, ptr addrspace(3) %1121, align 8, !dbg !34
  %1123 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %68, !dbg !34
  %1124 = load <2 x float>, ptr addrspace(3) %1123, align 8, !dbg !34
  %1125 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %71, !dbg !34
  %1126 = load <2 x float>, ptr addrspace(3) %1125, align 8, !dbg !34
  %1127 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %74, !dbg !34
  %1128 = load <2 x float>, ptr addrspace(3) %1127, align 8, !dbg !34
  %1129 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %77, !dbg !34
  %1130 = load <2 x float>, ptr addrspace(3) %1129, align 8, !dbg !34
  %1131 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %80, !dbg !34
  %1132 = load <2 x float>, ptr addrspace(3) %1131, align 8, !dbg !34
  %1133 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %83, !dbg !34
  %1134 = load <2 x float>, ptr addrspace(3) %1133, align 8, !dbg !34
  %1135 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %86, !dbg !34
  %1136 = load <2 x float>, ptr addrspace(3) %1135, align 8, !dbg !34
  %1137 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !35
  %1138 = getelementptr bfloat, ptr addrspace(1) %3, i64 %257, !dbg !36
  %1139 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %260, !dbg !37
  %1140 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %261, !dbg !37
  %1141 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %262, !dbg !37
  %1142 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %263, !dbg !37
  %1143 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %264, !dbg !37
  %1144 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %265, !dbg !37
  %1145 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %266, !dbg !37
  %1146 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %267, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %1139, i32 %284) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %1140, i32 %285) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %1141, i32 %286) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %1142, i32 %287) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %1143, i32 %288) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %1144, i32 %289) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %1145, i32 %290) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %1146, i32 %291) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %304
  %1148 = ptrtoint ptr addrspace(3) %1147 to i32
  %1149 = getelementptr inbounds nuw i8, ptr addrspace(3) %1147, i32 4096
  %1150 = ptrtoint ptr addrspace(3) %1149 to i32
  %1151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %305
  %1152 = ptrtoint ptr addrspace(3) %1151 to i32
  %1153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %306
  %1154 = ptrtoint ptr addrspace(3) %1153 to i32
  %1155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %307
  %1156 = ptrtoint ptr addrspace(3) %1155 to i32
  %1157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %308
  %1158 = ptrtoint ptr addrspace(3) %1157 to i32
  %1159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %309
  %1160 = ptrtoint ptr addrspace(3) %1159 to i32
  %1161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %310
  %1162 = ptrtoint ptr addrspace(3) %1161 to i32
  %1163 = extractelement <2 x float> %1136, i64 0, !dbg !38
  %1164 = extractelement <2 x float> %1136, i64 1, !dbg !38
  %1165 = extractelement <2 x float> %1134, i64 0, !dbg !38
  %1166 = extractelement <2 x float> %1134, i64 1, !dbg !38
  %1167 = extractelement <2 x float> %1132, i64 0, !dbg !38
  %1168 = extractelement <2 x float> %1132, i64 1, !dbg !38
  %1169 = extractelement <2 x float> %1130, i64 0, !dbg !38
  %1170 = extractelement <2 x float> %1130, i64 1, !dbg !38
  %1171 = extractelement <2 x float> %1128, i64 0, !dbg !38
  %1172 = extractelement <2 x float> %1128, i64 1, !dbg !38
  %1173 = extractelement <2 x float> %1126, i64 0, !dbg !38
  %1174 = extractelement <2 x float> %1126, i64 1, !dbg !38
  %1175 = extractelement <2 x float> %1124, i64 0, !dbg !38
  %1176 = extractelement <2 x float> %1124, i64 1, !dbg !38
  %1177 = extractelement <2 x float> %1122, i64 0, !dbg !38
  %1178 = extractelement <2 x float> %1122, i64 1, !dbg !38
  br label %1179, !dbg !39

1179:                                             ; preds = %1112, %1179
  %1180 = phi i1 [ true, %1112 ], [ false, %1179 ]
  %indvars.iv363 = phi i64 [ 64, %1112 ], [ 128, %1179 ]
  %1181 = phi i1 [ %117, %1112 ], [ %2150, %1179 ]
  %1182 = phi i1 [ %118, %1112 ], [ %2151, %1179 ]
  %1183 = phi i1 [ %119, %1112 ], [ %2152, %1179 ]
  %1184 = phi i1 [ %120, %1112 ], [ %2153, %1179 ]
  %1185 = phi i1 [ %121, %1112 ], [ %2154, %1179 ]
  %1186 = phi i1 [ %122, %1112 ], [ %2155, %1179 ]
  %1187 = phi i1 [ %123, %1112 ], [ %2156, %1179 ]
  %1188 = phi i1 [ %124, %1112 ], [ %2157, %1179 ]
  %1189 = phi i64 [ %260, %1112 ], [ %2134, %1179 ]
  %1190 = phi i64 [ %261, %1112 ], [ %2135, %1179 ]
  %1191 = phi i64 [ %262, %1112 ], [ %2136, %1179 ]
  %1192 = phi i64 [ %263, %1112 ], [ %2137, %1179 ]
  %1193 = phi i64 [ %264, %1112 ], [ %2138, %1179 ]
  %1194 = phi i64 [ %265, %1112 ], [ %2139, %1179 ]
  %1195 = phi i64 [ %266, %1112 ], [ %2140, %1179 ]
  %1196 = phi i64 [ %267, %1112 ], [ %2141, %1179 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %1197 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1148) #3, !dbg !40
  %1198 = extractvalue { i32, i32, i32, i32 } %1197, 0, !dbg !40
  %1199 = bitcast i32 %1198 to <2 x bfloat>, !dbg !40
  %1200 = extractvalue { i32, i32, i32, i32 } %1197, 1, !dbg !40
  %1201 = bitcast i32 %1200 to <2 x bfloat>, !dbg !40
  %1202 = extractvalue { i32, i32, i32, i32 } %1197, 2, !dbg !40
  %1203 = bitcast i32 %1202 to <2 x bfloat>, !dbg !40
  %1204 = extractvalue { i32, i32, i32, i32 } %1197, 3, !dbg !40
  %1205 = bitcast i32 %1204 to <2 x bfloat>, !dbg !40
  %1206 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1150) #3, !dbg !40
  %1207 = extractvalue { i32, i32, i32, i32 } %1206, 0, !dbg !40
  %1208 = bitcast i32 %1207 to <2 x bfloat>, !dbg !40
  %1209 = extractvalue { i32, i32, i32, i32 } %1206, 1, !dbg !40
  %1210 = bitcast i32 %1209 to <2 x bfloat>, !dbg !40
  %1211 = extractvalue { i32, i32, i32, i32 } %1206, 2, !dbg !40
  %1212 = bitcast i32 %1211 to <2 x bfloat>, !dbg !40
  %1213 = extractvalue { i32, i32, i32, i32 } %1206, 3, !dbg !40
  %1214 = bitcast i32 %1213 to <2 x bfloat>, !dbg !40
  %1215 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1152) #3, !dbg !40
  %1216 = extractvalue { i32, i32, i32, i32 } %1215, 0, !dbg !40
  %1217 = bitcast i32 %1216 to <2 x bfloat>, !dbg !40
  %1218 = extractvalue { i32, i32, i32, i32 } %1215, 1, !dbg !40
  %1219 = bitcast i32 %1218 to <2 x bfloat>, !dbg !40
  %1220 = extractvalue { i32, i32, i32, i32 } %1215, 2, !dbg !40
  %1221 = bitcast i32 %1220 to <2 x bfloat>, !dbg !40
  %1222 = extractvalue { i32, i32, i32, i32 } %1215, 3, !dbg !40
  %1223 = bitcast i32 %1222 to <2 x bfloat>, !dbg !40
  %1224 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1154) #3, !dbg !40
  %1225 = extractvalue { i32, i32, i32, i32 } %1224, 0, !dbg !40
  %1226 = bitcast i32 %1225 to <2 x bfloat>, !dbg !40
  %1227 = extractvalue { i32, i32, i32, i32 } %1224, 1, !dbg !40
  %1228 = bitcast i32 %1227 to <2 x bfloat>, !dbg !40
  %1229 = extractvalue { i32, i32, i32, i32 } %1224, 2, !dbg !40
  %1230 = bitcast i32 %1229 to <2 x bfloat>, !dbg !40
  %1231 = extractvalue { i32, i32, i32, i32 } %1224, 3, !dbg !40
  %1232 = bitcast i32 %1231 to <2 x bfloat>, !dbg !40
  %1233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1156) #3, !dbg !40
  %1234 = extractvalue { i32, i32, i32, i32 } %1233, 0, !dbg !40
  %1235 = bitcast i32 %1234 to <2 x bfloat>, !dbg !40
  %1236 = extractvalue { i32, i32, i32, i32 } %1233, 1, !dbg !40
  %1237 = bitcast i32 %1236 to <2 x bfloat>, !dbg !40
  %1238 = extractvalue { i32, i32, i32, i32 } %1233, 2, !dbg !40
  %1239 = bitcast i32 %1238 to <2 x bfloat>, !dbg !40
  %1240 = extractvalue { i32, i32, i32, i32 } %1233, 3, !dbg !40
  %1241 = bitcast i32 %1240 to <2 x bfloat>, !dbg !40
  %1242 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1158) #3, !dbg !40
  %1243 = extractvalue { i32, i32, i32, i32 } %1242, 0, !dbg !40
  %1244 = bitcast i32 %1243 to <2 x bfloat>, !dbg !40
  %1245 = extractvalue { i32, i32, i32, i32 } %1242, 1, !dbg !40
  %1246 = bitcast i32 %1245 to <2 x bfloat>, !dbg !40
  %1247 = extractvalue { i32, i32, i32, i32 } %1242, 2, !dbg !40
  %1248 = bitcast i32 %1247 to <2 x bfloat>, !dbg !40
  %1249 = extractvalue { i32, i32, i32, i32 } %1242, 3, !dbg !40
  %1250 = bitcast i32 %1249 to <2 x bfloat>, !dbg !40
  %1251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1160) #3, !dbg !40
  %1252 = extractvalue { i32, i32, i32, i32 } %1251, 0, !dbg !40
  %1253 = bitcast i32 %1252 to <2 x bfloat>, !dbg !40
  %1254 = extractvalue { i32, i32, i32, i32 } %1251, 1, !dbg !40
  %1255 = bitcast i32 %1254 to <2 x bfloat>, !dbg !40
  %1256 = extractvalue { i32, i32, i32, i32 } %1251, 2, !dbg !40
  %1257 = bitcast i32 %1256 to <2 x bfloat>, !dbg !40
  %1258 = extractvalue { i32, i32, i32, i32 } %1251, 3, !dbg !40
  %1259 = bitcast i32 %1258 to <2 x bfloat>, !dbg !40
  %1260 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1162) #3, !dbg !40
  %1261 = extractvalue { i32, i32, i32, i32 } %1260, 0, !dbg !40
  %1262 = bitcast i32 %1261 to <2 x bfloat>, !dbg !40
  %1263 = extractvalue { i32, i32, i32, i32 } %1260, 1, !dbg !40
  %1264 = bitcast i32 %1263 to <2 x bfloat>, !dbg !40
  %1265 = extractvalue { i32, i32, i32, i32 } %1260, 2, !dbg !40
  %1266 = bitcast i32 %1265 to <2 x bfloat>, !dbg !40
  %1267 = extractvalue { i32, i32, i32, i32 } %1260, 3, !dbg !40
  %1268 = bitcast i32 %1267 to <2 x bfloat>, !dbg !40
  %1269 = fmul <2 x bfloat> %67, %1199, !dbg !18
  %1270 = extractelement <2 x bfloat> %1269, i64 0, !dbg !18
  %1271 = fmul <2 x bfloat> %67, %1199, !dbg !18
  %1272 = extractelement <2 x bfloat> %1271, i64 1, !dbg !18
  %1273 = fmul <2 x bfloat> %70, %1201, !dbg !18
  %1274 = extractelement <2 x bfloat> %1273, i64 0, !dbg !18
  %1275 = fmul <2 x bfloat> %70, %1201, !dbg !18
  %1276 = extractelement <2 x bfloat> %1275, i64 1, !dbg !18
  %1277 = fmul <2 x bfloat> %73, %1203, !dbg !18
  %1278 = extractelement <2 x bfloat> %1277, i64 0, !dbg !18
  %1279 = fmul <2 x bfloat> %73, %1203, !dbg !18
  %1280 = extractelement <2 x bfloat> %1279, i64 1, !dbg !18
  %1281 = fmul <2 x bfloat> %76, %1205, !dbg !18
  %1282 = extractelement <2 x bfloat> %1281, i64 0, !dbg !18
  %1283 = fmul <2 x bfloat> %76, %1205, !dbg !18
  %1284 = extractelement <2 x bfloat> %1283, i64 1, !dbg !18
  %1285 = fmul <2 x bfloat> %79, %1208, !dbg !18
  %1286 = extractelement <2 x bfloat> %1285, i64 0, !dbg !18
  %1287 = fmul <2 x bfloat> %79, %1208, !dbg !18
  %1288 = extractelement <2 x bfloat> %1287, i64 1, !dbg !18
  %1289 = fmul <2 x bfloat> %82, %1210, !dbg !18
  %1290 = extractelement <2 x bfloat> %1289, i64 0, !dbg !18
  %1291 = fmul <2 x bfloat> %82, %1210, !dbg !18
  %1292 = extractelement <2 x bfloat> %1291, i64 1, !dbg !18
  %1293 = fmul <2 x bfloat> %85, %1212, !dbg !18
  %1294 = extractelement <2 x bfloat> %1293, i64 0, !dbg !18
  %1295 = fmul <2 x bfloat> %85, %1212, !dbg !18
  %1296 = extractelement <2 x bfloat> %1295, i64 1, !dbg !18
  %1297 = fmul <2 x bfloat> %88, %1214, !dbg !18
  %1298 = extractelement <2 x bfloat> %1297, i64 0, !dbg !18
  %1299 = fmul <2 x bfloat> %88, %1214, !dbg !18
  %1300 = extractelement <2 x bfloat> %1299, i64 1, !dbg !18
  %1301 = fmul <2 x bfloat> %67, %1217, !dbg !18
  %1302 = extractelement <2 x bfloat> %1301, i64 0, !dbg !18
  %1303 = fmul <2 x bfloat> %67, %1217, !dbg !18
  %1304 = extractelement <2 x bfloat> %1303, i64 1, !dbg !18
  %1305 = fmul <2 x bfloat> %70, %1219, !dbg !18
  %1306 = extractelement <2 x bfloat> %1305, i64 0, !dbg !18
  %1307 = fmul <2 x bfloat> %70, %1219, !dbg !18
  %1308 = extractelement <2 x bfloat> %1307, i64 1, !dbg !18
  %1309 = fmul <2 x bfloat> %73, %1221, !dbg !18
  %1310 = extractelement <2 x bfloat> %1309, i64 0, !dbg !18
  %1311 = fmul <2 x bfloat> %73, %1221, !dbg !18
  %1312 = extractelement <2 x bfloat> %1311, i64 1, !dbg !18
  %1313 = fmul <2 x bfloat> %76, %1223, !dbg !18
  %1314 = extractelement <2 x bfloat> %1313, i64 0, !dbg !18
  %1315 = fmul <2 x bfloat> %76, %1223, !dbg !18
  %1316 = extractelement <2 x bfloat> %1315, i64 1, !dbg !18
  %1317 = fmul <2 x bfloat> %79, %1226, !dbg !18
  %1318 = extractelement <2 x bfloat> %1317, i64 0, !dbg !18
  %1319 = fmul <2 x bfloat> %79, %1226, !dbg !18
  %1320 = extractelement <2 x bfloat> %1319, i64 1, !dbg !18
  %1321 = fmul <2 x bfloat> %82, %1228, !dbg !18
  %1322 = extractelement <2 x bfloat> %1321, i64 0, !dbg !18
  %1323 = fmul <2 x bfloat> %82, %1228, !dbg !18
  %1324 = extractelement <2 x bfloat> %1323, i64 1, !dbg !18
  %1325 = fmul <2 x bfloat> %85, %1230, !dbg !18
  %1326 = extractelement <2 x bfloat> %1325, i64 0, !dbg !18
  %1327 = fmul <2 x bfloat> %85, %1230, !dbg !18
  %1328 = extractelement <2 x bfloat> %1327, i64 1, !dbg !18
  %1329 = fmul <2 x bfloat> %88, %1232, !dbg !18
  %1330 = extractelement <2 x bfloat> %1329, i64 0, !dbg !18
  %1331 = fmul <2 x bfloat> %88, %1232, !dbg !18
  %1332 = extractelement <2 x bfloat> %1331, i64 1, !dbg !18
  %1333 = fmul <2 x bfloat> %67, %1235, !dbg !18
  %1334 = extractelement <2 x bfloat> %1333, i64 0, !dbg !18
  %1335 = fmul <2 x bfloat> %67, %1235, !dbg !18
  %1336 = extractelement <2 x bfloat> %1335, i64 1, !dbg !18
  %1337 = fmul <2 x bfloat> %70, %1237, !dbg !18
  %1338 = extractelement <2 x bfloat> %1337, i64 0, !dbg !18
  %1339 = fmul <2 x bfloat> %70, %1237, !dbg !18
  %1340 = extractelement <2 x bfloat> %1339, i64 1, !dbg !18
  %1341 = fmul <2 x bfloat> %73, %1239, !dbg !18
  %1342 = extractelement <2 x bfloat> %1341, i64 0, !dbg !18
  %1343 = fmul <2 x bfloat> %73, %1239, !dbg !18
  %1344 = extractelement <2 x bfloat> %1343, i64 1, !dbg !18
  %1345 = fmul <2 x bfloat> %76, %1241, !dbg !18
  %1346 = extractelement <2 x bfloat> %1345, i64 0, !dbg !18
  %1347 = fmul <2 x bfloat> %76, %1241, !dbg !18
  %1348 = extractelement <2 x bfloat> %1347, i64 1, !dbg !18
  %1349 = fmul <2 x bfloat> %79, %1244, !dbg !18
  %1350 = extractelement <2 x bfloat> %1349, i64 0, !dbg !18
  %1351 = fmul <2 x bfloat> %79, %1244, !dbg !18
  %1352 = extractelement <2 x bfloat> %1351, i64 1, !dbg !18
  %1353 = fmul <2 x bfloat> %82, %1246, !dbg !18
  %1354 = extractelement <2 x bfloat> %1353, i64 0, !dbg !18
  %1355 = fmul <2 x bfloat> %82, %1246, !dbg !18
  %1356 = extractelement <2 x bfloat> %1355, i64 1, !dbg !18
  %1357 = fmul <2 x bfloat> %85, %1248, !dbg !18
  %1358 = extractelement <2 x bfloat> %1357, i64 0, !dbg !18
  %1359 = fmul <2 x bfloat> %85, %1248, !dbg !18
  %1360 = extractelement <2 x bfloat> %1359, i64 1, !dbg !18
  %1361 = fmul <2 x bfloat> %88, %1250, !dbg !18
  %1362 = extractelement <2 x bfloat> %1361, i64 0, !dbg !18
  %1363 = fmul <2 x bfloat> %88, %1250, !dbg !18
  %1364 = extractelement <2 x bfloat> %1363, i64 1, !dbg !18
  %1365 = fpext bfloat %1270 to float, !dbg !38
  %1366 = fpext bfloat %1272 to float, !dbg !38
  %1367 = fpext bfloat %1274 to float, !dbg !38
  %1368 = fpext bfloat %1276 to float, !dbg !38
  %1369 = fpext bfloat %1278 to float, !dbg !38
  %1370 = fpext bfloat %1280 to float, !dbg !38
  %1371 = fpext bfloat %1282 to float, !dbg !38
  %1372 = fpext bfloat %1284 to float, !dbg !38
  %1373 = fpext bfloat %1286 to float, !dbg !38
  %1374 = fpext bfloat %1288 to float, !dbg !38
  %1375 = fpext bfloat %1290 to float, !dbg !38
  %1376 = fpext bfloat %1292 to float, !dbg !38
  %1377 = fpext bfloat %1294 to float, !dbg !38
  %1378 = fpext bfloat %1296 to float, !dbg !38
  %1379 = fpext bfloat %1298 to float, !dbg !38
  %1380 = fpext bfloat %1300 to float, !dbg !38
  %1381 = fpext bfloat %1302 to float, !dbg !38
  %1382 = fpext bfloat %1304 to float, !dbg !38
  %1383 = fpext bfloat %1306 to float, !dbg !38
  %1384 = fpext bfloat %1308 to float, !dbg !38
  %1385 = fpext bfloat %1310 to float, !dbg !38
  %1386 = fpext bfloat %1312 to float, !dbg !38
  %1387 = fpext bfloat %1314 to float, !dbg !38
  %1388 = fpext bfloat %1316 to float, !dbg !38
  %1389 = fpext bfloat %1318 to float, !dbg !38
  %1390 = fpext bfloat %1320 to float, !dbg !38
  %1391 = fpext bfloat %1322 to float, !dbg !38
  %1392 = fpext bfloat %1324 to float, !dbg !38
  %1393 = fpext bfloat %1326 to float, !dbg !38
  %1394 = fpext bfloat %1328 to float, !dbg !38
  %1395 = fpext bfloat %1330 to float, !dbg !38
  %1396 = fpext bfloat %1332 to float, !dbg !38
  %1397 = fpext bfloat %1334 to float, !dbg !38
  %1398 = fpext bfloat %1336 to float, !dbg !38
  %1399 = fpext bfloat %1338 to float, !dbg !38
  %1400 = fpext bfloat %1340 to float, !dbg !38
  %1401 = fpext bfloat %1342 to float, !dbg !38
  %1402 = fpext bfloat %1344 to float, !dbg !38
  %1403 = fpext bfloat %1346 to float, !dbg !38
  %1404 = fpext bfloat %1348 to float, !dbg !38
  %1405 = fpext bfloat %1350 to float, !dbg !38
  %1406 = fpext bfloat %1352 to float, !dbg !38
  %1407 = fpext bfloat %1354 to float, !dbg !38
  %1408 = fpext bfloat %1356 to float, !dbg !38
  %1409 = fpext bfloat %1358 to float, !dbg !38
  %1410 = fpext bfloat %1360 to float, !dbg !38
  %1411 = fpext bfloat %1362 to float, !dbg !38
  %1412 = fpext bfloat %1364 to float, !dbg !38
  %1413 = fmul float %1177, %1365, !dbg !38
  %1414 = fmul float %1178, %1366, !dbg !38
  %1415 = fmul float %1175, %1367, !dbg !38
  %1416 = fmul float %1176, %1368, !dbg !38
  %1417 = fmul float %1173, %1369, !dbg !38
  %1418 = fmul float %1174, %1370, !dbg !38
  %1419 = fmul float %1171, %1371, !dbg !38
  %1420 = fmul float %1172, %1372, !dbg !38
  %1421 = fmul float %1169, %1373, !dbg !38
  %1422 = fmul float %1170, %1374, !dbg !38
  %1423 = fmul float %1167, %1375, !dbg !38
  %1424 = fmul float %1168, %1376, !dbg !38
  %1425 = fmul float %1165, %1377, !dbg !38
  %1426 = fmul float %1166, %1378, !dbg !38
  %1427 = fmul float %1163, %1379, !dbg !38
  %1428 = fmul float %1164, %1380, !dbg !38
  %1429 = fmul float %1177, %1381, !dbg !38
  %1430 = fmul float %1178, %1382, !dbg !38
  %1431 = fmul float %1175, %1383, !dbg !38
  %1432 = fmul float %1176, %1384, !dbg !38
  %1433 = fmul float %1173, %1385, !dbg !38
  %1434 = fmul float %1174, %1386, !dbg !38
  %1435 = fmul float %1171, %1387, !dbg !38
  %1436 = fmul float %1172, %1388, !dbg !38
  %1437 = fmul float %1169, %1389, !dbg !38
  %1438 = fmul float %1170, %1390, !dbg !38
  %1439 = fmul float %1167, %1391, !dbg !38
  %1440 = fmul float %1168, %1392, !dbg !38
  %1441 = fmul float %1165, %1393, !dbg !38
  %1442 = fmul float %1166, %1394, !dbg !38
  %1443 = fmul float %1163, %1395, !dbg !38
  %1444 = fmul float %1164, %1396, !dbg !38
  %1445 = fmul float %1177, %1397, !dbg !38
  %1446 = fmul float %1178, %1398, !dbg !38
  %1447 = fmul float %1175, %1399, !dbg !38
  %1448 = fmul float %1176, %1400, !dbg !38
  %1449 = fmul float %1173, %1401, !dbg !38
  %1450 = fmul float %1174, %1402, !dbg !38
  %1451 = fmul float %1171, %1403, !dbg !38
  %1452 = fmul float %1172, %1404, !dbg !38
  %1453 = fmul float %1169, %1405, !dbg !38
  %1454 = fmul float %1170, %1406, !dbg !38
  %1455 = fmul float %1167, %1407, !dbg !38
  %1456 = fmul float %1168, %1408, !dbg !38
  %1457 = fmul float %1165, %1409, !dbg !38
  %1458 = fmul float %1166, %1410, !dbg !38
  %1459 = fmul float %1163, %1411, !dbg !38
  %1460 = fmul float %1164, %1412, !dbg !38
  %1461 = fptrunc float %1413 to bfloat, !dbg !40
  %1462 = fptrunc float %1414 to bfloat, !dbg !40
  %1463 = fptrunc float %1415 to bfloat, !dbg !40
  %1464 = fptrunc float %1416 to bfloat, !dbg !40
  %1465 = fptrunc float %1417 to bfloat, !dbg !40
  %1466 = fptrunc float %1418 to bfloat, !dbg !40
  %1467 = fptrunc float %1419 to bfloat, !dbg !40
  %1468 = fptrunc float %1420 to bfloat, !dbg !40
  %1469 = fptrunc float %1421 to bfloat, !dbg !40
  %1470 = fptrunc float %1422 to bfloat, !dbg !40
  %1471 = fptrunc float %1423 to bfloat, !dbg !40
  %1472 = fptrunc float %1424 to bfloat, !dbg !40
  %1473 = fptrunc float %1425 to bfloat, !dbg !40
  %1474 = fptrunc float %1426 to bfloat, !dbg !40
  %1475 = fptrunc float %1427 to bfloat, !dbg !40
  %1476 = fptrunc float %1428 to bfloat, !dbg !40
  %1477 = fptrunc float %1429 to bfloat, !dbg !40
  %1478 = fptrunc float %1430 to bfloat, !dbg !40
  %1479 = fptrunc float %1431 to bfloat, !dbg !40
  %1480 = fptrunc float %1432 to bfloat, !dbg !40
  %1481 = fptrunc float %1433 to bfloat, !dbg !40
  %1482 = fptrunc float %1434 to bfloat, !dbg !40
  %1483 = fptrunc float %1435 to bfloat, !dbg !40
  %1484 = fptrunc float %1436 to bfloat, !dbg !40
  %1485 = fptrunc float %1437 to bfloat, !dbg !40
  %1486 = fptrunc float %1438 to bfloat, !dbg !40
  %1487 = fptrunc float %1439 to bfloat, !dbg !40
  %1488 = fptrunc float %1440 to bfloat, !dbg !40
  %1489 = fptrunc float %1441 to bfloat, !dbg !40
  %1490 = fptrunc float %1442 to bfloat, !dbg !40
  %1491 = fptrunc float %1443 to bfloat, !dbg !40
  %1492 = fptrunc float %1444 to bfloat, !dbg !40
  %1493 = fptrunc float %1445 to bfloat, !dbg !40
  %1494 = fptrunc float %1446 to bfloat, !dbg !40
  %1495 = fptrunc float %1447 to bfloat, !dbg !40
  %1496 = fptrunc float %1448 to bfloat, !dbg !40
  %1497 = fptrunc float %1449 to bfloat, !dbg !40
  %1498 = fptrunc float %1450 to bfloat, !dbg !40
  %1499 = fptrunc float %1451 to bfloat, !dbg !40
  %1500 = fptrunc float %1452 to bfloat, !dbg !40
  %1501 = fptrunc float %1453 to bfloat, !dbg !40
  %1502 = fptrunc float %1454 to bfloat, !dbg !40
  %1503 = fptrunc float %1455 to bfloat, !dbg !40
  %1504 = fptrunc float %1456 to bfloat, !dbg !40
  %1505 = fptrunc float %1457 to bfloat, !dbg !40
  %1506 = fptrunc float %1458 to bfloat, !dbg !40
  %1507 = fptrunc float %1459 to bfloat, !dbg !40
  %1508 = fptrunc float %1460 to bfloat, !dbg !40
  %1509 = fmul <2 x bfloat> %67, %1253, !dbg !18
  %1510 = fpext <2 x bfloat> %1509 to <2 x float>, !dbg !38
  %1511 = fmul <2 x float> %1122, %1510, !dbg !38
  %1512 = fptrunc <2 x float> %1511 to <2 x bfloat>, !dbg !40
  %1513 = fmul <2 x bfloat> %70, %1255, !dbg !18
  %1514 = fpext <2 x bfloat> %1513 to <2 x float>, !dbg !38
  %1515 = fmul <2 x float> %1124, %1514, !dbg !38
  %1516 = fptrunc <2 x float> %1515 to <2 x bfloat>, !dbg !40
  %1517 = fmul <2 x bfloat> %73, %1257, !dbg !18
  %1518 = fpext <2 x bfloat> %1517 to <2 x float>, !dbg !38
  %1519 = fmul <2 x float> %1126, %1518, !dbg !38
  %1520 = fptrunc <2 x float> %1519 to <2 x bfloat>, !dbg !40
  %1521 = fmul <2 x bfloat> %76, %1259, !dbg !18
  %1522 = fpext <2 x bfloat> %1521 to <2 x float>, !dbg !38
  %1523 = fmul <2 x float> %1128, %1522, !dbg !38
  %1524 = fptrunc <2 x float> %1523 to <2 x bfloat>, !dbg !40
  %1525 = fmul <2 x bfloat> %79, %1262, !dbg !18
  %1526 = fpext <2 x bfloat> %1525 to <2 x float>, !dbg !38
  %1527 = fmul <2 x float> %1130, %1526, !dbg !38
  %1528 = fptrunc <2 x float> %1527 to <2 x bfloat>, !dbg !40
  %1529 = fmul <2 x bfloat> %82, %1264, !dbg !18
  %1530 = fpext <2 x bfloat> %1529 to <2 x float>, !dbg !38
  %1531 = fmul <2 x float> %1132, %1530, !dbg !38
  %1532 = fptrunc <2 x float> %1531 to <2 x bfloat>, !dbg !40
  %1533 = fmul <2 x bfloat> %85, %1266, !dbg !18
  %1534 = fpext <2 x bfloat> %1533 to <2 x float>, !dbg !38
  %1535 = fmul <2 x float> %1134, %1534, !dbg !38
  %1536 = fptrunc <2 x float> %1535 to <2 x bfloat>, !dbg !40
  %1537 = fmul <2 x bfloat> %88, %1268, !dbg !18
  %1538 = fpext <2 x bfloat> %1537 to <2 x float>, !dbg !38
  %1539 = fmul <2 x float> %1136, %1538, !dbg !38
  %1540 = fptrunc <2 x float> %1539 to <2 x bfloat>, !dbg !40
  %1541 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #3, !dbg !22
  %1542 = extractvalue { i32, i32, i32, i32 } %1541, 0, !dbg !22
  %1543 = extractvalue { i32, i32, i32, i32 } %1541, 1, !dbg !22
  %1544 = extractvalue { i32, i32, i32, i32 } %1541, 2, !dbg !22
  %1545 = extractvalue { i32, i32, i32, i32 } %1541, 3, !dbg !22
  %1546 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %318) #3, !dbg !22
  %1547 = extractvalue { i32, i32, i32, i32 } %1546, 0, !dbg !22
  %1548 = extractvalue { i32, i32, i32, i32 } %1546, 1, !dbg !22
  %1549 = extractvalue { i32, i32, i32, i32 } %1546, 2, !dbg !22
  %1550 = extractvalue { i32, i32, i32, i32 } %1546, 3, !dbg !22
  %1551 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %321) #3, !dbg !22
  %1552 = extractvalue { i32, i32, i32, i32 } %1551, 0, !dbg !22
  %1553 = extractvalue { i32, i32, i32, i32 } %1551, 1, !dbg !22
  %1554 = extractvalue { i32, i32, i32, i32 } %1551, 2, !dbg !22
  %1555 = extractvalue { i32, i32, i32, i32 } %1551, 3, !dbg !22
  %1556 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %324) #3, !dbg !22
  %1557 = extractvalue { i32, i32, i32, i32 } %1556, 0, !dbg !22
  %1558 = extractvalue { i32, i32, i32, i32 } %1556, 1, !dbg !22
  %1559 = extractvalue { i32, i32, i32, i32 } %1556, 2, !dbg !22
  %1560 = extractvalue { i32, i32, i32, i32 } %1556, 3, !dbg !22
  %1561 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %326) #3, !dbg !22
  %1562 = extractvalue { i32, i32, i32, i32 } %1561, 0, !dbg !22
  %1563 = extractvalue { i32, i32, i32, i32 } %1561, 1, !dbg !22
  %1564 = extractvalue { i32, i32, i32, i32 } %1561, 2, !dbg !22
  %1565 = extractvalue { i32, i32, i32, i32 } %1561, 3, !dbg !22
  %1566 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %329) #3, !dbg !22
  %1567 = extractvalue { i32, i32, i32, i32 } %1566, 0, !dbg !22
  %1568 = extractvalue { i32, i32, i32, i32 } %1566, 1, !dbg !22
  %1569 = extractvalue { i32, i32, i32, i32 } %1566, 2, !dbg !22
  %1570 = extractvalue { i32, i32, i32, i32 } %1566, 3, !dbg !22
  %1571 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %332) #3, !dbg !22
  %1572 = extractvalue { i32, i32, i32, i32 } %1571, 0, !dbg !22
  %1573 = extractvalue { i32, i32, i32, i32 } %1571, 1, !dbg !22
  %1574 = extractvalue { i32, i32, i32, i32 } %1571, 2, !dbg !22
  %1575 = extractvalue { i32, i32, i32, i32 } %1571, 3, !dbg !22
  %1576 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %335) #3, !dbg !22
  %1577 = extractvalue { i32, i32, i32, i32 } %1576, 0, !dbg !22
  %1578 = extractvalue { i32, i32, i32, i32 } %1576, 1, !dbg !22
  %1579 = extractvalue { i32, i32, i32, i32 } %1576, 2, !dbg !22
  %1580 = extractvalue { i32, i32, i32, i32 } %1576, 3, !dbg !22
  %1581 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %337) #3, !dbg !22
  %1582 = extractvalue { i32, i32, i32, i32 } %1581, 0, !dbg !22
  %1583 = extractvalue { i32, i32, i32, i32 } %1581, 1, !dbg !22
  %1584 = extractvalue { i32, i32, i32, i32 } %1581, 2, !dbg !22
  %1585 = extractvalue { i32, i32, i32, i32 } %1581, 3, !dbg !22
  %1586 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %340) #3, !dbg !22
  %1587 = extractvalue { i32, i32, i32, i32 } %1586, 0, !dbg !22
  %1588 = extractvalue { i32, i32, i32, i32 } %1586, 1, !dbg !22
  %1589 = extractvalue { i32, i32, i32, i32 } %1586, 2, !dbg !22
  %1590 = extractvalue { i32, i32, i32, i32 } %1586, 3, !dbg !22
  %1591 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %343) #3, !dbg !22
  %1592 = extractvalue { i32, i32, i32, i32 } %1591, 0, !dbg !22
  %1593 = extractvalue { i32, i32, i32, i32 } %1591, 1, !dbg !22
  %1594 = extractvalue { i32, i32, i32, i32 } %1591, 2, !dbg !22
  %1595 = extractvalue { i32, i32, i32, i32 } %1591, 3, !dbg !22
  %1596 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #3, !dbg !22
  %1597 = extractvalue { i32, i32, i32, i32 } %1596, 0, !dbg !22
  %1598 = extractvalue { i32, i32, i32, i32 } %1596, 1, !dbg !22
  %1599 = extractvalue { i32, i32, i32, i32 } %1596, 2, !dbg !22
  %1600 = extractvalue { i32, i32, i32, i32 } %1596, 3, !dbg !22
  %1601 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %348) #3, !dbg !22
  %1602 = extractvalue { i32, i32, i32, i32 } %1601, 0, !dbg !22
  %1603 = extractvalue { i32, i32, i32, i32 } %1601, 1, !dbg !22
  %1604 = extractvalue { i32, i32, i32, i32 } %1601, 2, !dbg !22
  %1605 = extractvalue { i32, i32, i32, i32 } %1601, 3, !dbg !22
  %1606 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #3, !dbg !22
  %1607 = extractvalue { i32, i32, i32, i32 } %1606, 0, !dbg !22
  %1608 = extractvalue { i32, i32, i32, i32 } %1606, 1, !dbg !22
  %1609 = extractvalue { i32, i32, i32, i32 } %1606, 2, !dbg !22
  %1610 = extractvalue { i32, i32, i32, i32 } %1606, 3, !dbg !22
  %1611 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %354) #3, !dbg !22
  %1612 = extractvalue { i32, i32, i32, i32 } %1611, 0, !dbg !22
  %1613 = extractvalue { i32, i32, i32, i32 } %1611, 1, !dbg !22
  %1614 = extractvalue { i32, i32, i32, i32 } %1611, 2, !dbg !22
  %1615 = extractvalue { i32, i32, i32, i32 } %1611, 3, !dbg !22
  %1616 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %357) #3, !dbg !22
  %1617 = extractvalue { i32, i32, i32, i32 } %1616, 0, !dbg !22
  %1618 = extractvalue { i32, i32, i32, i32 } %1616, 1, !dbg !22
  %1619 = extractvalue { i32, i32, i32, i32 } %1616, 2, !dbg !22
  %1620 = extractvalue { i32, i32, i32, i32 } %1616, 3, !dbg !22
  %1621 = insertelement <2 x bfloat> poison, bfloat %1461, i64 0, !dbg !41
  %1622 = insertelement <2 x bfloat> %1621, bfloat %1462, i64 1, !dbg !41
  %1623 = bitcast <2 x bfloat> %1622 to i32, !dbg !41
  %1624 = insertelement <2 x bfloat> poison, bfloat %1463, i64 0, !dbg !41
  %1625 = insertelement <2 x bfloat> %1624, bfloat %1464, i64 1, !dbg !41
  %1626 = bitcast <2 x bfloat> %1625 to i32, !dbg !41
  %1627 = insertelement <2 x bfloat> poison, bfloat %1465, i64 0, !dbg !41
  %1628 = insertelement <2 x bfloat> %1627, bfloat %1466, i64 1, !dbg !41
  %1629 = bitcast <2 x bfloat> %1628 to i32, !dbg !41
  %1630 = insertelement <2 x bfloat> poison, bfloat %1467, i64 0, !dbg !41
  %1631 = insertelement <2 x bfloat> %1630, bfloat %1468, i64 1, !dbg !41
  %1632 = bitcast <2 x bfloat> %1631 to i32, !dbg !41
  %1633 = insertelement <2 x bfloat> poison, bfloat %1469, i64 0, !dbg !41
  %1634 = insertelement <2 x bfloat> %1633, bfloat %1470, i64 1, !dbg !41
  %1635 = bitcast <2 x bfloat> %1634 to i32, !dbg !41
  %1636 = insertelement <2 x bfloat> poison, bfloat %1471, i64 0, !dbg !41
  %1637 = insertelement <2 x bfloat> %1636, bfloat %1472, i64 1, !dbg !41
  %1638 = bitcast <2 x bfloat> %1637 to i32, !dbg !41
  %1639 = insertelement <2 x bfloat> poison, bfloat %1473, i64 0, !dbg !41
  %1640 = insertelement <2 x bfloat> %1639, bfloat %1474, i64 1, !dbg !41
  %1641 = bitcast <2 x bfloat> %1640 to i32, !dbg !41
  %1642 = insertelement <2 x bfloat> poison, bfloat %1475, i64 0, !dbg !41
  %1643 = insertelement <2 x bfloat> %1642, bfloat %1476, i64 1, !dbg !41
  %1644 = bitcast <2 x bfloat> %1643 to i32, !dbg !41
  %1645 = insertelement <2 x bfloat> poison, bfloat %1477, i64 0, !dbg !41
  %1646 = insertelement <2 x bfloat> %1645, bfloat %1478, i64 1, !dbg !41
  %1647 = bitcast <2 x bfloat> %1646 to i32, !dbg !41
  %1648 = insertelement <2 x bfloat> poison, bfloat %1479, i64 0, !dbg !41
  %1649 = insertelement <2 x bfloat> %1648, bfloat %1480, i64 1, !dbg !41
  %1650 = bitcast <2 x bfloat> %1649 to i32, !dbg !41
  %1651 = insertelement <2 x bfloat> poison, bfloat %1481, i64 0, !dbg !41
  %1652 = insertelement <2 x bfloat> %1651, bfloat %1482, i64 1, !dbg !41
  %1653 = bitcast <2 x bfloat> %1652 to i32, !dbg !41
  %1654 = insertelement <2 x bfloat> poison, bfloat %1483, i64 0, !dbg !41
  %1655 = insertelement <2 x bfloat> %1654, bfloat %1484, i64 1, !dbg !41
  %1656 = bitcast <2 x bfloat> %1655 to i32, !dbg !41
  %1657 = insertelement <2 x bfloat> poison, bfloat %1485, i64 0, !dbg !41
  %1658 = insertelement <2 x bfloat> %1657, bfloat %1486, i64 1, !dbg !41
  %1659 = bitcast <2 x bfloat> %1658 to i32, !dbg !41
  %1660 = insertelement <2 x bfloat> poison, bfloat %1487, i64 0, !dbg !41
  %1661 = insertelement <2 x bfloat> %1660, bfloat %1488, i64 1, !dbg !41
  %1662 = bitcast <2 x bfloat> %1661 to i32, !dbg !41
  %1663 = insertelement <2 x bfloat> poison, bfloat %1489, i64 0, !dbg !41
  %1664 = insertelement <2 x bfloat> %1663, bfloat %1490, i64 1, !dbg !41
  %1665 = bitcast <2 x bfloat> %1664 to i32, !dbg !41
  %1666 = insertelement <2 x bfloat> poison, bfloat %1491, i64 0, !dbg !41
  %1667 = insertelement <2 x bfloat> %1666, bfloat %1492, i64 1, !dbg !41
  %1668 = bitcast <2 x bfloat> %1667 to i32, !dbg !41
  %1669 = insertelement <2 x bfloat> poison, bfloat %1493, i64 0, !dbg !41
  %1670 = insertelement <2 x bfloat> %1669, bfloat %1494, i64 1, !dbg !41
  %1671 = bitcast <2 x bfloat> %1670 to i32, !dbg !41
  %1672 = insertelement <2 x bfloat> poison, bfloat %1495, i64 0, !dbg !41
  %1673 = insertelement <2 x bfloat> %1672, bfloat %1496, i64 1, !dbg !41
  %1674 = bitcast <2 x bfloat> %1673 to i32, !dbg !41
  %1675 = insertelement <2 x bfloat> poison, bfloat %1497, i64 0, !dbg !41
  %1676 = insertelement <2 x bfloat> %1675, bfloat %1498, i64 1, !dbg !41
  %1677 = bitcast <2 x bfloat> %1676 to i32, !dbg !41
  %1678 = insertelement <2 x bfloat> poison, bfloat %1499, i64 0, !dbg !41
  %1679 = insertelement <2 x bfloat> %1678, bfloat %1500, i64 1, !dbg !41
  %1680 = bitcast <2 x bfloat> %1679 to i32, !dbg !41
  %1681 = insertelement <2 x bfloat> poison, bfloat %1501, i64 0, !dbg !41
  %1682 = insertelement <2 x bfloat> %1681, bfloat %1502, i64 1, !dbg !41
  %1683 = bitcast <2 x bfloat> %1682 to i32, !dbg !41
  %1684 = insertelement <2 x bfloat> poison, bfloat %1503, i64 0, !dbg !41
  %1685 = insertelement <2 x bfloat> %1684, bfloat %1504, i64 1, !dbg !41
  %1686 = bitcast <2 x bfloat> %1685 to i32, !dbg !41
  %1687 = insertelement <2 x bfloat> poison, bfloat %1505, i64 0, !dbg !41
  %1688 = insertelement <2 x bfloat> %1687, bfloat %1506, i64 1, !dbg !41
  %1689 = bitcast <2 x bfloat> %1688 to i32, !dbg !41
  %1690 = insertelement <2 x bfloat> poison, bfloat %1507, i64 0, !dbg !41
  %1691 = insertelement <2 x bfloat> %1690, bfloat %1508, i64 1, !dbg !41
  %1692 = bitcast <2 x bfloat> %1691 to i32, !dbg !41
  %1693 = bitcast <2 x bfloat> %1512 to i32, !dbg !41
  %1694 = bitcast <2 x bfloat> %1516 to i32, !dbg !41
  %1695 = bitcast <2 x bfloat> %1520 to i32, !dbg !41
  %1696 = bitcast <2 x bfloat> %1524 to i32, !dbg !41
  %1697 = bitcast <2 x bfloat> %1528 to i32, !dbg !41
  %1698 = bitcast <2 x bfloat> %1532 to i32, !dbg !41
  %1699 = bitcast <2 x bfloat> %1536 to i32, !dbg !41
  %1700 = bitcast <2 x bfloat> %1540 to i32, !dbg !41
  %1701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1542, i32 %1543, i32 %1544, i32 %1545, i32 %1623, i32 %1626) #3, !dbg !41
  %1702 = extractvalue { float, float, float, float } %1701, 0, !dbg !41
  %1703 = extractvalue { float, float, float, float } %1701, 1, !dbg !41
  %1704 = extractvalue { float, float, float, float } %1701, 2, !dbg !41
  %1705 = extractvalue { float, float, float, float } %1701, 3, !dbg !41
  %1706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1542, i32 %1543, i32 %1544, i32 %1545, i32 %1647, i32 %1650) #3, !dbg !41
  %1707 = extractvalue { float, float, float, float } %1706, 0, !dbg !41
  %1708 = extractvalue { float, float, float, float } %1706, 1, !dbg !41
  %1709 = extractvalue { float, float, float, float } %1706, 2, !dbg !41
  %1710 = extractvalue { float, float, float, float } %1706, 3, !dbg !41
  %1711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1542, i32 %1543, i32 %1544, i32 %1545, i32 %1671, i32 %1674) #3, !dbg !41
  %1712 = extractvalue { float, float, float, float } %1711, 0, !dbg !41
  %1713 = extractvalue { float, float, float, float } %1711, 1, !dbg !41
  %1714 = extractvalue { float, float, float, float } %1711, 2, !dbg !41
  %1715 = extractvalue { float, float, float, float } %1711, 3, !dbg !41
  %1716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1542, i32 %1543, i32 %1544, i32 %1545, i32 %1693, i32 %1694) #3, !dbg !41
  %1717 = extractvalue { float, float, float, float } %1716, 0, !dbg !41
  %1718 = extractvalue { float, float, float, float } %1716, 1, !dbg !41
  %1719 = extractvalue { float, float, float, float } %1716, 2, !dbg !41
  %1720 = extractvalue { float, float, float, float } %1716, 3, !dbg !41
  %1721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1562, i32 %1563, i32 %1564, i32 %1565, i32 %1623, i32 %1626) #3, !dbg !41
  %1722 = extractvalue { float, float, float, float } %1721, 0, !dbg !41
  %1723 = extractvalue { float, float, float, float } %1721, 1, !dbg !41
  %1724 = extractvalue { float, float, float, float } %1721, 2, !dbg !41
  %1725 = extractvalue { float, float, float, float } %1721, 3, !dbg !41
  %1726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1562, i32 %1563, i32 %1564, i32 %1565, i32 %1647, i32 %1650) #3, !dbg !41
  %1727 = extractvalue { float, float, float, float } %1726, 0, !dbg !41
  %1728 = extractvalue { float, float, float, float } %1726, 1, !dbg !41
  %1729 = extractvalue { float, float, float, float } %1726, 2, !dbg !41
  %1730 = extractvalue { float, float, float, float } %1726, 3, !dbg !41
  %1731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1562, i32 %1563, i32 %1564, i32 %1565, i32 %1671, i32 %1674) #3, !dbg !41
  %1732 = extractvalue { float, float, float, float } %1731, 0, !dbg !41
  %1733 = extractvalue { float, float, float, float } %1731, 1, !dbg !41
  %1734 = extractvalue { float, float, float, float } %1731, 2, !dbg !41
  %1735 = extractvalue { float, float, float, float } %1731, 3, !dbg !41
  %1736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1562, i32 %1563, i32 %1564, i32 %1565, i32 %1693, i32 %1694) #3, !dbg !41
  %1737 = extractvalue { float, float, float, float } %1736, 0, !dbg !41
  %1738 = extractvalue { float, float, float, float } %1736, 1, !dbg !41
  %1739 = extractvalue { float, float, float, float } %1736, 2, !dbg !41
  %1740 = extractvalue { float, float, float, float } %1736, 3, !dbg !41
  %1741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1582, i32 %1583, i32 %1584, i32 %1585, i32 %1623, i32 %1626) #3, !dbg !41
  %1742 = extractvalue { float, float, float, float } %1741, 0, !dbg !41
  %1743 = extractvalue { float, float, float, float } %1741, 1, !dbg !41
  %1744 = extractvalue { float, float, float, float } %1741, 2, !dbg !41
  %1745 = extractvalue { float, float, float, float } %1741, 3, !dbg !41
  %1746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1582, i32 %1583, i32 %1584, i32 %1585, i32 %1647, i32 %1650) #3, !dbg !41
  %1747 = extractvalue { float, float, float, float } %1746, 0, !dbg !41
  %1748 = extractvalue { float, float, float, float } %1746, 1, !dbg !41
  %1749 = extractvalue { float, float, float, float } %1746, 2, !dbg !41
  %1750 = extractvalue { float, float, float, float } %1746, 3, !dbg !41
  %1751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1582, i32 %1583, i32 %1584, i32 %1585, i32 %1671, i32 %1674) #3, !dbg !41
  %1752 = extractvalue { float, float, float, float } %1751, 0, !dbg !41
  %1753 = extractvalue { float, float, float, float } %1751, 1, !dbg !41
  %1754 = extractvalue { float, float, float, float } %1751, 2, !dbg !41
  %1755 = extractvalue { float, float, float, float } %1751, 3, !dbg !41
  %1756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1582, i32 %1583, i32 %1584, i32 %1585, i32 %1693, i32 %1694) #3, !dbg !41
  %1757 = extractvalue { float, float, float, float } %1756, 0, !dbg !41
  %1758 = extractvalue { float, float, float, float } %1756, 1, !dbg !41
  %1759 = extractvalue { float, float, float, float } %1756, 2, !dbg !41
  %1760 = extractvalue { float, float, float, float } %1756, 3, !dbg !41
  %1761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1602, i32 %1603, i32 %1604, i32 %1605, i32 %1623, i32 %1626) #3, !dbg !41
  %1762 = extractvalue { float, float, float, float } %1761, 0, !dbg !41
  %1763 = extractvalue { float, float, float, float } %1761, 1, !dbg !41
  %1764 = extractvalue { float, float, float, float } %1761, 2, !dbg !41
  %1765 = extractvalue { float, float, float, float } %1761, 3, !dbg !41
  %1766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1602, i32 %1603, i32 %1604, i32 %1605, i32 %1647, i32 %1650) #3, !dbg !41
  %1767 = extractvalue { float, float, float, float } %1766, 0, !dbg !41
  %1768 = extractvalue { float, float, float, float } %1766, 1, !dbg !41
  %1769 = extractvalue { float, float, float, float } %1766, 2, !dbg !41
  %1770 = extractvalue { float, float, float, float } %1766, 3, !dbg !41
  %1771 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1602, i32 %1603, i32 %1604, i32 %1605, i32 %1671, i32 %1674) #3, !dbg !41
  %1772 = extractvalue { float, float, float, float } %1771, 0, !dbg !41
  %1773 = extractvalue { float, float, float, float } %1771, 1, !dbg !41
  %1774 = extractvalue { float, float, float, float } %1771, 2, !dbg !41
  %1775 = extractvalue { float, float, float, float } %1771, 3, !dbg !41
  %1776 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1602, i32 %1603, i32 %1604, i32 %1605, i32 %1693, i32 %1694) #3, !dbg !41
  %1777 = extractvalue { float, float, float, float } %1776, 0, !dbg !41
  %1778 = extractvalue { float, float, float, float } %1776, 1, !dbg !41
  %1779 = extractvalue { float, float, float, float } %1776, 2, !dbg !41
  %1780 = extractvalue { float, float, float, float } %1776, 3, !dbg !41
  %1781 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1702, float %1703, float %1704, float %1705, i32 %1547, i32 %1548, i32 %1549, i32 %1550, i32 %1629, i32 %1632) #3, !dbg !41
  %1782 = extractvalue { float, float, float, float } %1781, 0, !dbg !41
  %1783 = extractvalue { float, float, float, float } %1781, 1, !dbg !41
  %1784 = extractvalue { float, float, float, float } %1781, 2, !dbg !41
  %1785 = extractvalue { float, float, float, float } %1781, 3, !dbg !41
  %1786 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1707, float %1708, float %1709, float %1710, i32 %1547, i32 %1548, i32 %1549, i32 %1550, i32 %1653, i32 %1656) #3, !dbg !41
  %1787 = extractvalue { float, float, float, float } %1786, 0, !dbg !41
  %1788 = extractvalue { float, float, float, float } %1786, 1, !dbg !41
  %1789 = extractvalue { float, float, float, float } %1786, 2, !dbg !41
  %1790 = extractvalue { float, float, float, float } %1786, 3, !dbg !41
  %1791 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1712, float %1713, float %1714, float %1715, i32 %1547, i32 %1548, i32 %1549, i32 %1550, i32 %1677, i32 %1680) #3, !dbg !41
  %1792 = extractvalue { float, float, float, float } %1791, 0, !dbg !41
  %1793 = extractvalue { float, float, float, float } %1791, 1, !dbg !41
  %1794 = extractvalue { float, float, float, float } %1791, 2, !dbg !41
  %1795 = extractvalue { float, float, float, float } %1791, 3, !dbg !41
  %1796 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1717, float %1718, float %1719, float %1720, i32 %1547, i32 %1548, i32 %1549, i32 %1550, i32 %1695, i32 %1696) #3, !dbg !41
  %1797 = extractvalue { float, float, float, float } %1796, 0, !dbg !41
  %1798 = extractvalue { float, float, float, float } %1796, 1, !dbg !41
  %1799 = extractvalue { float, float, float, float } %1796, 2, !dbg !41
  %1800 = extractvalue { float, float, float, float } %1796, 3, !dbg !41
  %1801 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1722, float %1723, float %1724, float %1725, i32 %1567, i32 %1568, i32 %1569, i32 %1570, i32 %1629, i32 %1632) #3, !dbg !41
  %1802 = extractvalue { float, float, float, float } %1801, 0, !dbg !41
  %1803 = extractvalue { float, float, float, float } %1801, 1, !dbg !41
  %1804 = extractvalue { float, float, float, float } %1801, 2, !dbg !41
  %1805 = extractvalue { float, float, float, float } %1801, 3, !dbg !41
  %1806 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1727, float %1728, float %1729, float %1730, i32 %1567, i32 %1568, i32 %1569, i32 %1570, i32 %1653, i32 %1656) #3, !dbg !41
  %1807 = extractvalue { float, float, float, float } %1806, 0, !dbg !41
  %1808 = extractvalue { float, float, float, float } %1806, 1, !dbg !41
  %1809 = extractvalue { float, float, float, float } %1806, 2, !dbg !41
  %1810 = extractvalue { float, float, float, float } %1806, 3, !dbg !41
  %1811 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1732, float %1733, float %1734, float %1735, i32 %1567, i32 %1568, i32 %1569, i32 %1570, i32 %1677, i32 %1680) #3, !dbg !41
  %1812 = extractvalue { float, float, float, float } %1811, 0, !dbg !41
  %1813 = extractvalue { float, float, float, float } %1811, 1, !dbg !41
  %1814 = extractvalue { float, float, float, float } %1811, 2, !dbg !41
  %1815 = extractvalue { float, float, float, float } %1811, 3, !dbg !41
  %1816 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1737, float %1738, float %1739, float %1740, i32 %1567, i32 %1568, i32 %1569, i32 %1570, i32 %1695, i32 %1696) #3, !dbg !41
  %1817 = extractvalue { float, float, float, float } %1816, 0, !dbg !41
  %1818 = extractvalue { float, float, float, float } %1816, 1, !dbg !41
  %1819 = extractvalue { float, float, float, float } %1816, 2, !dbg !41
  %1820 = extractvalue { float, float, float, float } %1816, 3, !dbg !41
  %1821 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1742, float %1743, float %1744, float %1745, i32 %1587, i32 %1588, i32 %1589, i32 %1590, i32 %1629, i32 %1632) #3, !dbg !41
  %1822 = extractvalue { float, float, float, float } %1821, 0, !dbg !41
  %1823 = extractvalue { float, float, float, float } %1821, 1, !dbg !41
  %1824 = extractvalue { float, float, float, float } %1821, 2, !dbg !41
  %1825 = extractvalue { float, float, float, float } %1821, 3, !dbg !41
  %1826 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1747, float %1748, float %1749, float %1750, i32 %1587, i32 %1588, i32 %1589, i32 %1590, i32 %1653, i32 %1656) #3, !dbg !41
  %1827 = extractvalue { float, float, float, float } %1826, 0, !dbg !41
  %1828 = extractvalue { float, float, float, float } %1826, 1, !dbg !41
  %1829 = extractvalue { float, float, float, float } %1826, 2, !dbg !41
  %1830 = extractvalue { float, float, float, float } %1826, 3, !dbg !41
  %1831 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1752, float %1753, float %1754, float %1755, i32 %1587, i32 %1588, i32 %1589, i32 %1590, i32 %1677, i32 %1680) #3, !dbg !41
  %1832 = extractvalue { float, float, float, float } %1831, 0, !dbg !41
  %1833 = extractvalue { float, float, float, float } %1831, 1, !dbg !41
  %1834 = extractvalue { float, float, float, float } %1831, 2, !dbg !41
  %1835 = extractvalue { float, float, float, float } %1831, 3, !dbg !41
  %1836 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1757, float %1758, float %1759, float %1760, i32 %1587, i32 %1588, i32 %1589, i32 %1590, i32 %1695, i32 %1696) #3, !dbg !41
  %1837 = extractvalue { float, float, float, float } %1836, 0, !dbg !41
  %1838 = extractvalue { float, float, float, float } %1836, 1, !dbg !41
  %1839 = extractvalue { float, float, float, float } %1836, 2, !dbg !41
  %1840 = extractvalue { float, float, float, float } %1836, 3, !dbg !41
  %1841 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1762, float %1763, float %1764, float %1765, i32 %1607, i32 %1608, i32 %1609, i32 %1610, i32 %1629, i32 %1632) #3, !dbg !41
  %1842 = extractvalue { float, float, float, float } %1841, 0, !dbg !41
  %1843 = extractvalue { float, float, float, float } %1841, 1, !dbg !41
  %1844 = extractvalue { float, float, float, float } %1841, 2, !dbg !41
  %1845 = extractvalue { float, float, float, float } %1841, 3, !dbg !41
  %1846 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1767, float %1768, float %1769, float %1770, i32 %1607, i32 %1608, i32 %1609, i32 %1610, i32 %1653, i32 %1656) #3, !dbg !41
  %1847 = extractvalue { float, float, float, float } %1846, 0, !dbg !41
  %1848 = extractvalue { float, float, float, float } %1846, 1, !dbg !41
  %1849 = extractvalue { float, float, float, float } %1846, 2, !dbg !41
  %1850 = extractvalue { float, float, float, float } %1846, 3, !dbg !41
  %1851 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1772, float %1773, float %1774, float %1775, i32 %1607, i32 %1608, i32 %1609, i32 %1610, i32 %1677, i32 %1680) #3, !dbg !41
  %1852 = extractvalue { float, float, float, float } %1851, 0, !dbg !41
  %1853 = extractvalue { float, float, float, float } %1851, 1, !dbg !41
  %1854 = extractvalue { float, float, float, float } %1851, 2, !dbg !41
  %1855 = extractvalue { float, float, float, float } %1851, 3, !dbg !41
  %1856 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1777, float %1778, float %1779, float %1780, i32 %1607, i32 %1608, i32 %1609, i32 %1610, i32 %1695, i32 %1696) #3, !dbg !41
  %1857 = extractvalue { float, float, float, float } %1856, 0, !dbg !41
  %1858 = extractvalue { float, float, float, float } %1856, 1, !dbg !41
  %1859 = extractvalue { float, float, float, float } %1856, 2, !dbg !41
  %1860 = extractvalue { float, float, float, float } %1856, 3, !dbg !41
  %1861 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1782, float %1783, float %1784, float %1785, i32 %1552, i32 %1553, i32 %1554, i32 %1555, i32 %1635, i32 %1638) #3, !dbg !41
  %1862 = extractvalue { float, float, float, float } %1861, 0, !dbg !41
  %1863 = extractvalue { float, float, float, float } %1861, 1, !dbg !41
  %1864 = extractvalue { float, float, float, float } %1861, 2, !dbg !41
  %1865 = extractvalue { float, float, float, float } %1861, 3, !dbg !41
  %1866 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1787, float %1788, float %1789, float %1790, i32 %1552, i32 %1553, i32 %1554, i32 %1555, i32 %1659, i32 %1662) #3, !dbg !41
  %1867 = extractvalue { float, float, float, float } %1866, 0, !dbg !41
  %1868 = extractvalue { float, float, float, float } %1866, 1, !dbg !41
  %1869 = extractvalue { float, float, float, float } %1866, 2, !dbg !41
  %1870 = extractvalue { float, float, float, float } %1866, 3, !dbg !41
  %1871 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1792, float %1793, float %1794, float %1795, i32 %1552, i32 %1553, i32 %1554, i32 %1555, i32 %1683, i32 %1686) #3, !dbg !41
  %1872 = extractvalue { float, float, float, float } %1871, 0, !dbg !41
  %1873 = extractvalue { float, float, float, float } %1871, 1, !dbg !41
  %1874 = extractvalue { float, float, float, float } %1871, 2, !dbg !41
  %1875 = extractvalue { float, float, float, float } %1871, 3, !dbg !41
  %1876 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1797, float %1798, float %1799, float %1800, i32 %1552, i32 %1553, i32 %1554, i32 %1555, i32 %1697, i32 %1698) #3, !dbg !41
  %1877 = extractvalue { float, float, float, float } %1876, 0, !dbg !41
  %1878 = extractvalue { float, float, float, float } %1876, 1, !dbg !41
  %1879 = extractvalue { float, float, float, float } %1876, 2, !dbg !41
  %1880 = extractvalue { float, float, float, float } %1876, 3, !dbg !41
  %1881 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1802, float %1803, float %1804, float %1805, i32 %1572, i32 %1573, i32 %1574, i32 %1575, i32 %1635, i32 %1638) #3, !dbg !41
  %1882 = extractvalue { float, float, float, float } %1881, 0, !dbg !41
  %1883 = extractvalue { float, float, float, float } %1881, 1, !dbg !41
  %1884 = extractvalue { float, float, float, float } %1881, 2, !dbg !41
  %1885 = extractvalue { float, float, float, float } %1881, 3, !dbg !41
  %1886 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1807, float %1808, float %1809, float %1810, i32 %1572, i32 %1573, i32 %1574, i32 %1575, i32 %1659, i32 %1662) #3, !dbg !41
  %1887 = extractvalue { float, float, float, float } %1886, 0, !dbg !41
  %1888 = extractvalue { float, float, float, float } %1886, 1, !dbg !41
  %1889 = extractvalue { float, float, float, float } %1886, 2, !dbg !41
  %1890 = extractvalue { float, float, float, float } %1886, 3, !dbg !41
  %1891 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1812, float %1813, float %1814, float %1815, i32 %1572, i32 %1573, i32 %1574, i32 %1575, i32 %1683, i32 %1686) #3, !dbg !41
  %1892 = extractvalue { float, float, float, float } %1891, 0, !dbg !41
  %1893 = extractvalue { float, float, float, float } %1891, 1, !dbg !41
  %1894 = extractvalue { float, float, float, float } %1891, 2, !dbg !41
  %1895 = extractvalue { float, float, float, float } %1891, 3, !dbg !41
  %1896 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1817, float %1818, float %1819, float %1820, i32 %1572, i32 %1573, i32 %1574, i32 %1575, i32 %1697, i32 %1698) #3, !dbg !41
  %1897 = extractvalue { float, float, float, float } %1896, 0, !dbg !41
  %1898 = extractvalue { float, float, float, float } %1896, 1, !dbg !41
  %1899 = extractvalue { float, float, float, float } %1896, 2, !dbg !41
  %1900 = extractvalue { float, float, float, float } %1896, 3, !dbg !41
  %1901 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1822, float %1823, float %1824, float %1825, i32 %1592, i32 %1593, i32 %1594, i32 %1595, i32 %1635, i32 %1638) #3, !dbg !41
  %1902 = extractvalue { float, float, float, float } %1901, 0, !dbg !41
  %1903 = extractvalue { float, float, float, float } %1901, 1, !dbg !41
  %1904 = extractvalue { float, float, float, float } %1901, 2, !dbg !41
  %1905 = extractvalue { float, float, float, float } %1901, 3, !dbg !41
  %1906 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1827, float %1828, float %1829, float %1830, i32 %1592, i32 %1593, i32 %1594, i32 %1595, i32 %1659, i32 %1662) #3, !dbg !41
  %1907 = extractvalue { float, float, float, float } %1906, 0, !dbg !41
  %1908 = extractvalue { float, float, float, float } %1906, 1, !dbg !41
  %1909 = extractvalue { float, float, float, float } %1906, 2, !dbg !41
  %1910 = extractvalue { float, float, float, float } %1906, 3, !dbg !41
  %1911 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1832, float %1833, float %1834, float %1835, i32 %1592, i32 %1593, i32 %1594, i32 %1595, i32 %1683, i32 %1686) #3, !dbg !41
  %1912 = extractvalue { float, float, float, float } %1911, 0, !dbg !41
  %1913 = extractvalue { float, float, float, float } %1911, 1, !dbg !41
  %1914 = extractvalue { float, float, float, float } %1911, 2, !dbg !41
  %1915 = extractvalue { float, float, float, float } %1911, 3, !dbg !41
  %1916 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1837, float %1838, float %1839, float %1840, i32 %1592, i32 %1593, i32 %1594, i32 %1595, i32 %1697, i32 %1698) #3, !dbg !41
  %1917 = extractvalue { float, float, float, float } %1916, 0, !dbg !41
  %1918 = extractvalue { float, float, float, float } %1916, 1, !dbg !41
  %1919 = extractvalue { float, float, float, float } %1916, 2, !dbg !41
  %1920 = extractvalue { float, float, float, float } %1916, 3, !dbg !41
  %1921 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1842, float %1843, float %1844, float %1845, i32 %1612, i32 %1613, i32 %1614, i32 %1615, i32 %1635, i32 %1638) #3, !dbg !41
  %1922 = extractvalue { float, float, float, float } %1921, 0, !dbg !41
  %1923 = extractvalue { float, float, float, float } %1921, 1, !dbg !41
  %1924 = extractvalue { float, float, float, float } %1921, 2, !dbg !41
  %1925 = extractvalue { float, float, float, float } %1921, 3, !dbg !41
  %1926 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1847, float %1848, float %1849, float %1850, i32 %1612, i32 %1613, i32 %1614, i32 %1615, i32 %1659, i32 %1662) #3, !dbg !41
  %1927 = extractvalue { float, float, float, float } %1926, 0, !dbg !41
  %1928 = extractvalue { float, float, float, float } %1926, 1, !dbg !41
  %1929 = extractvalue { float, float, float, float } %1926, 2, !dbg !41
  %1930 = extractvalue { float, float, float, float } %1926, 3, !dbg !41
  %1931 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1852, float %1853, float %1854, float %1855, i32 %1612, i32 %1613, i32 %1614, i32 %1615, i32 %1683, i32 %1686) #3, !dbg !41
  %1932 = extractvalue { float, float, float, float } %1931, 0, !dbg !41
  %1933 = extractvalue { float, float, float, float } %1931, 1, !dbg !41
  %1934 = extractvalue { float, float, float, float } %1931, 2, !dbg !41
  %1935 = extractvalue { float, float, float, float } %1931, 3, !dbg !41
  %1936 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1857, float %1858, float %1859, float %1860, i32 %1612, i32 %1613, i32 %1614, i32 %1615, i32 %1697, i32 %1698) #3, !dbg !41
  %1937 = extractvalue { float, float, float, float } %1936, 0, !dbg !41
  %1938 = extractvalue { float, float, float, float } %1936, 1, !dbg !41
  %1939 = extractvalue { float, float, float, float } %1936, 2, !dbg !41
  %1940 = extractvalue { float, float, float, float } %1936, 3, !dbg !41
  %1941 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1862, float %1863, float %1864, float %1865, i32 %1557, i32 %1558, i32 %1559, i32 %1560, i32 %1641, i32 %1644) #3, !dbg !41
  %1942 = extractvalue { float, float, float, float } %1941, 0, !dbg !41
  %1943 = extractvalue { float, float, float, float } %1941, 1, !dbg !41
  %1944 = extractvalue { float, float, float, float } %1941, 2, !dbg !41
  %1945 = extractvalue { float, float, float, float } %1941, 3, !dbg !41
  %1946 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1867, float %1868, float %1869, float %1870, i32 %1557, i32 %1558, i32 %1559, i32 %1560, i32 %1665, i32 %1668) #3, !dbg !41
  %1947 = extractvalue { float, float, float, float } %1946, 0, !dbg !41
  %1948 = extractvalue { float, float, float, float } %1946, 1, !dbg !41
  %1949 = extractvalue { float, float, float, float } %1946, 2, !dbg !41
  %1950 = extractvalue { float, float, float, float } %1946, 3, !dbg !41
  %1951 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1872, float %1873, float %1874, float %1875, i32 %1557, i32 %1558, i32 %1559, i32 %1560, i32 %1689, i32 %1692) #3, !dbg !41
  %1952 = extractvalue { float, float, float, float } %1951, 0, !dbg !41
  %1953 = extractvalue { float, float, float, float } %1951, 1, !dbg !41
  %1954 = extractvalue { float, float, float, float } %1951, 2, !dbg !41
  %1955 = extractvalue { float, float, float, float } %1951, 3, !dbg !41
  %1956 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1877, float %1878, float %1879, float %1880, i32 %1557, i32 %1558, i32 %1559, i32 %1560, i32 %1699, i32 %1700) #3, !dbg !41
  %1957 = extractvalue { float, float, float, float } %1956, 0, !dbg !41
  %1958 = extractvalue { float, float, float, float } %1956, 1, !dbg !41
  %1959 = extractvalue { float, float, float, float } %1956, 2, !dbg !41
  %1960 = extractvalue { float, float, float, float } %1956, 3, !dbg !41
  %1961 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1882, float %1883, float %1884, float %1885, i32 %1577, i32 %1578, i32 %1579, i32 %1580, i32 %1641, i32 %1644) #3, !dbg !41
  %1962 = extractvalue { float, float, float, float } %1961, 0, !dbg !41
  %1963 = extractvalue { float, float, float, float } %1961, 1, !dbg !41
  %1964 = extractvalue { float, float, float, float } %1961, 2, !dbg !41
  %1965 = extractvalue { float, float, float, float } %1961, 3, !dbg !41
  %1966 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1887, float %1888, float %1889, float %1890, i32 %1577, i32 %1578, i32 %1579, i32 %1580, i32 %1665, i32 %1668) #3, !dbg !41
  %1967 = extractvalue { float, float, float, float } %1966, 0, !dbg !41
  %1968 = extractvalue { float, float, float, float } %1966, 1, !dbg !41
  %1969 = extractvalue { float, float, float, float } %1966, 2, !dbg !41
  %1970 = extractvalue { float, float, float, float } %1966, 3, !dbg !41
  %1971 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1892, float %1893, float %1894, float %1895, i32 %1577, i32 %1578, i32 %1579, i32 %1580, i32 %1689, i32 %1692) #3, !dbg !41
  %1972 = extractvalue { float, float, float, float } %1971, 0, !dbg !41
  %1973 = extractvalue { float, float, float, float } %1971, 1, !dbg !41
  %1974 = extractvalue { float, float, float, float } %1971, 2, !dbg !41
  %1975 = extractvalue { float, float, float, float } %1971, 3, !dbg !41
  %1976 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1897, float %1898, float %1899, float %1900, i32 %1577, i32 %1578, i32 %1579, i32 %1580, i32 %1699, i32 %1700) #3, !dbg !41
  %1977 = extractvalue { float, float, float, float } %1976, 0, !dbg !41
  %1978 = extractvalue { float, float, float, float } %1976, 1, !dbg !41
  %1979 = extractvalue { float, float, float, float } %1976, 2, !dbg !41
  %1980 = extractvalue { float, float, float, float } %1976, 3, !dbg !41
  %1981 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1902, float %1903, float %1904, float %1905, i32 %1597, i32 %1598, i32 %1599, i32 %1600, i32 %1641, i32 %1644) #3, !dbg !41
  %1982 = extractvalue { float, float, float, float } %1981, 0, !dbg !41
  %1983 = extractvalue { float, float, float, float } %1981, 1, !dbg !41
  %1984 = extractvalue { float, float, float, float } %1981, 2, !dbg !41
  %1985 = extractvalue { float, float, float, float } %1981, 3, !dbg !41
  %1986 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1907, float %1908, float %1909, float %1910, i32 %1597, i32 %1598, i32 %1599, i32 %1600, i32 %1665, i32 %1668) #3, !dbg !41
  %1987 = extractvalue { float, float, float, float } %1986, 0, !dbg !41
  %1988 = extractvalue { float, float, float, float } %1986, 1, !dbg !41
  %1989 = extractvalue { float, float, float, float } %1986, 2, !dbg !41
  %1990 = extractvalue { float, float, float, float } %1986, 3, !dbg !41
  %1991 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1912, float %1913, float %1914, float %1915, i32 %1597, i32 %1598, i32 %1599, i32 %1600, i32 %1689, i32 %1692) #3, !dbg !41
  %1992 = extractvalue { float, float, float, float } %1991, 0, !dbg !41
  %1993 = extractvalue { float, float, float, float } %1991, 1, !dbg !41
  %1994 = extractvalue { float, float, float, float } %1991, 2, !dbg !41
  %1995 = extractvalue { float, float, float, float } %1991, 3, !dbg !41
  %1996 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1917, float %1918, float %1919, float %1920, i32 %1597, i32 %1598, i32 %1599, i32 %1600, i32 %1699, i32 %1700) #3, !dbg !41
  %1997 = extractvalue { float, float, float, float } %1996, 0, !dbg !41
  %1998 = extractvalue { float, float, float, float } %1996, 1, !dbg !41
  %1999 = extractvalue { float, float, float, float } %1996, 2, !dbg !41
  %2000 = extractvalue { float, float, float, float } %1996, 3, !dbg !41
  %2001 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1922, float %1923, float %1924, float %1925, i32 %1617, i32 %1618, i32 %1619, i32 %1620, i32 %1641, i32 %1644) #3, !dbg !41
  %2002 = extractvalue { float, float, float, float } %2001, 0, !dbg !41
  %2003 = extractvalue { float, float, float, float } %2001, 1, !dbg !41
  %2004 = extractvalue { float, float, float, float } %2001, 2, !dbg !41
  %2005 = extractvalue { float, float, float, float } %2001, 3, !dbg !41
  %2006 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1927, float %1928, float %1929, float %1930, i32 %1617, i32 %1618, i32 %1619, i32 %1620, i32 %1665, i32 %1668) #3, !dbg !41
  %2007 = extractvalue { float, float, float, float } %2006, 0, !dbg !41
  %2008 = extractvalue { float, float, float, float } %2006, 1, !dbg !41
  %2009 = extractvalue { float, float, float, float } %2006, 2, !dbg !41
  %2010 = extractvalue { float, float, float, float } %2006, 3, !dbg !41
  %2011 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1932, float %1933, float %1934, float %1935, i32 %1617, i32 %1618, i32 %1619, i32 %1620, i32 %1689, i32 %1692) #3, !dbg !41
  %2012 = extractvalue { float, float, float, float } %2011, 0, !dbg !41
  %2013 = extractvalue { float, float, float, float } %2011, 1, !dbg !41
  %2014 = extractvalue { float, float, float, float } %2011, 2, !dbg !41
  %2015 = extractvalue { float, float, float, float } %2011, 3, !dbg !41
  %2016 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1937, float %1938, float %1939, float %1940, i32 %1617, i32 %1618, i32 %1619, i32 %1620, i32 %1699, i32 %1700) #3, !dbg !41
  %2017 = extractvalue { float, float, float, float } %2016, 0, !dbg !41
  %2018 = extractvalue { float, float, float, float } %2016, 1, !dbg !41
  %2019 = extractvalue { float, float, float, float } %2016, 2, !dbg !41
  %2020 = extractvalue { float, float, float, float } %2016, 3, !dbg !41
  %2021 = insertelement <2 x float> poison, float %1942, i64 0, !dbg !42
  %2022 = insertelement <2 x float> %2021, float %1943, i64 1, !dbg !42
  %2023 = fptrunc <2 x float> %2022 to <2 x bfloat>, !dbg !42
  %2024 = insertelement <2 x float> poison, float %1944, i64 0, !dbg !42
  %2025 = insertelement <2 x float> %2024, float %1945, i64 1, !dbg !42
  %2026 = fptrunc <2 x float> %2025 to <2 x bfloat>, !dbg !42
  %2027 = insertelement <2 x float> poison, float %1947, i64 0, !dbg !42
  %2028 = insertelement <2 x float> %2027, float %1948, i64 1, !dbg !42
  %2029 = fptrunc <2 x float> %2028 to <2 x bfloat>, !dbg !42
  %2030 = insertelement <2 x float> poison, float %1949, i64 0, !dbg !42
  %2031 = insertelement <2 x float> %2030, float %1950, i64 1, !dbg !42
  %2032 = fptrunc <2 x float> %2031 to <2 x bfloat>, !dbg !42
  %2033 = insertelement <2 x float> poison, float %1952, i64 0, !dbg !42
  %2034 = insertelement <2 x float> %2033, float %1953, i64 1, !dbg !42
  %2035 = fptrunc <2 x float> %2034 to <2 x bfloat>, !dbg !42
  %2036 = insertelement <2 x float> poison, float %1954, i64 0, !dbg !42
  %2037 = insertelement <2 x float> %2036, float %1955, i64 1, !dbg !42
  %2038 = fptrunc <2 x float> %2037 to <2 x bfloat>, !dbg !42
  %2039 = insertelement <2 x float> poison, float %1957, i64 0, !dbg !42
  %2040 = insertelement <2 x float> %2039, float %1958, i64 1, !dbg !42
  %2041 = fptrunc <2 x float> %2040 to <2 x bfloat>, !dbg !42
  %2042 = insertelement <2 x float> poison, float %1959, i64 0, !dbg !42
  %2043 = insertelement <2 x float> %2042, float %1960, i64 1, !dbg !42
  %2044 = fptrunc <2 x float> %2043 to <2 x bfloat>, !dbg !42
  %2045 = insertelement <2 x float> poison, float %1962, i64 0, !dbg !42
  %2046 = insertelement <2 x float> %2045, float %1963, i64 1, !dbg !42
  %2047 = fptrunc <2 x float> %2046 to <2 x bfloat>, !dbg !42
  %2048 = insertelement <2 x float> poison, float %1964, i64 0, !dbg !42
  %2049 = insertelement <2 x float> %2048, float %1965, i64 1, !dbg !42
  %2050 = fptrunc <2 x float> %2049 to <2 x bfloat>, !dbg !42
  %2051 = insertelement <2 x float> poison, float %1967, i64 0, !dbg !42
  %2052 = insertelement <2 x float> %2051, float %1968, i64 1, !dbg !42
  %2053 = fptrunc <2 x float> %2052 to <2 x bfloat>, !dbg !42
  %2054 = insertelement <2 x float> poison, float %1969, i64 0, !dbg !42
  %2055 = insertelement <2 x float> %2054, float %1970, i64 1, !dbg !42
  %2056 = fptrunc <2 x float> %2055 to <2 x bfloat>, !dbg !42
  %2057 = insertelement <2 x float> poison, float %1972, i64 0, !dbg !42
  %2058 = insertelement <2 x float> %2057, float %1973, i64 1, !dbg !42
  %2059 = fptrunc <2 x float> %2058 to <2 x bfloat>, !dbg !42
  %2060 = insertelement <2 x float> poison, float %1974, i64 0, !dbg !42
  %2061 = insertelement <2 x float> %2060, float %1975, i64 1, !dbg !42
  %2062 = fptrunc <2 x float> %2061 to <2 x bfloat>, !dbg !42
  %2063 = insertelement <2 x float> poison, float %1977, i64 0, !dbg !42
  %2064 = insertelement <2 x float> %2063, float %1978, i64 1, !dbg !42
  %2065 = fptrunc <2 x float> %2064 to <2 x bfloat>, !dbg !42
  %2066 = insertelement <2 x float> poison, float %1979, i64 0, !dbg !42
  %2067 = insertelement <2 x float> %2066, float %1980, i64 1, !dbg !42
  %2068 = fptrunc <2 x float> %2067 to <2 x bfloat>, !dbg !42
  %2069 = insertelement <2 x float> poison, float %1982, i64 0, !dbg !42
  %2070 = insertelement <2 x float> %2069, float %1983, i64 1, !dbg !42
  %2071 = fptrunc <2 x float> %2070 to <2 x bfloat>, !dbg !42
  %2072 = insertelement <2 x float> poison, float %1984, i64 0, !dbg !42
  %2073 = insertelement <2 x float> %2072, float %1985, i64 1, !dbg !42
  %2074 = fptrunc <2 x float> %2073 to <2 x bfloat>, !dbg !42
  %2075 = insertelement <2 x float> poison, float %1987, i64 0, !dbg !42
  %2076 = insertelement <2 x float> %2075, float %1988, i64 1, !dbg !42
  %2077 = fptrunc <2 x float> %2076 to <2 x bfloat>, !dbg !42
  %2078 = insertelement <2 x float> poison, float %1989, i64 0, !dbg !42
  %2079 = insertelement <2 x float> %2078, float %1990, i64 1, !dbg !42
  %2080 = fptrunc <2 x float> %2079 to <2 x bfloat>, !dbg !42
  %2081 = insertelement <2 x float> poison, float %1992, i64 0, !dbg !42
  %2082 = insertelement <2 x float> %2081, float %1993, i64 1, !dbg !42
  %2083 = fptrunc <2 x float> %2082 to <2 x bfloat>, !dbg !42
  %2084 = insertelement <2 x float> poison, float %1994, i64 0, !dbg !42
  %2085 = insertelement <2 x float> %2084, float %1995, i64 1, !dbg !42
  %2086 = fptrunc <2 x float> %2085 to <2 x bfloat>, !dbg !42
  %2087 = insertelement <2 x float> poison, float %1997, i64 0, !dbg !42
  %2088 = insertelement <2 x float> %2087, float %1998, i64 1, !dbg !42
  %2089 = fptrunc <2 x float> %2088 to <2 x bfloat>, !dbg !42
  %2090 = insertelement <2 x float> poison, float %1999, i64 0, !dbg !42
  %2091 = insertelement <2 x float> %2090, float %2000, i64 1, !dbg !42
  %2092 = fptrunc <2 x float> %2091 to <2 x bfloat>, !dbg !42
  %2093 = insertelement <2 x float> poison, float %2002, i64 0, !dbg !42
  %2094 = insertelement <2 x float> %2093, float %2003, i64 1, !dbg !42
  %2095 = fptrunc <2 x float> %2094 to <2 x bfloat>, !dbg !42
  %2096 = insertelement <2 x float> poison, float %2004, i64 0, !dbg !42
  %2097 = insertelement <2 x float> %2096, float %2005, i64 1, !dbg !42
  %2098 = fptrunc <2 x float> %2097 to <2 x bfloat>, !dbg !42
  %2099 = insertelement <2 x float> poison, float %2007, i64 0, !dbg !42
  %2100 = insertelement <2 x float> %2099, float %2008, i64 1, !dbg !42
  %2101 = fptrunc <2 x float> %2100 to <2 x bfloat>, !dbg !42
  %2102 = insertelement <2 x float> poison, float %2009, i64 0, !dbg !42
  %2103 = insertelement <2 x float> %2102, float %2010, i64 1, !dbg !42
  %2104 = fptrunc <2 x float> %2103 to <2 x bfloat>, !dbg !42
  %2105 = insertelement <2 x float> poison, float %2012, i64 0, !dbg !42
  %2106 = insertelement <2 x float> %2105, float %2013, i64 1, !dbg !42
  %2107 = fptrunc <2 x float> %2106 to <2 x bfloat>, !dbg !42
  %2108 = insertelement <2 x float> poison, float %2014, i64 0, !dbg !42
  %2109 = insertelement <2 x float> %2108, float %2015, i64 1, !dbg !42
  %2110 = fptrunc <2 x float> %2109 to <2 x bfloat>, !dbg !42
  %2111 = insertelement <2 x float> poison, float %2017, i64 0, !dbg !42
  %2112 = insertelement <2 x float> %2111, float %2018, i64 1, !dbg !42
  %2113 = fptrunc <2 x float> %2112 to <2 x bfloat>, !dbg !42
  %2114 = insertelement <2 x float> poison, float %2019, i64 0, !dbg !42
  %2115 = insertelement <2 x float> %2114, float %2020, i64 1, !dbg !42
  %2116 = fptrunc <2 x float> %2115 to <2 x bfloat>, !dbg !42
  %2117 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1189, !dbg !43
  %2118 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1190, !dbg !43
  %2119 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1191, !dbg !43
  %2120 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1192, !dbg !43
  %2121 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1193, !dbg !43
  %2122 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1194, !dbg !43
  %2123 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1195, !dbg !43
  %2124 = getelementptr bfloat, ptr addrspace(1) %1138, i64 %1196, !dbg !43
  store <2 x bfloat> %2023, ptr addrspace(3) %365, align 4, !dbg !43
  store <2 x bfloat> %2026, ptr addrspace(3) %370, align 4, !dbg !43
  store <2 x bfloat> %2029, ptr addrspace(3) %371, align 4, !dbg !43
  store <2 x bfloat> %2032, ptr addrspace(3) %376, align 4, !dbg !43
  store <2 x bfloat> %2035, ptr addrspace(3) %377, align 4, !dbg !43
  store <2 x bfloat> %2038, ptr addrspace(3) %382, align 4, !dbg !43
  store <2 x bfloat> %2041, ptr addrspace(3) %383, align 4, !dbg !43
  store <2 x bfloat> %2044, ptr addrspace(3) %388, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2125 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !43
  %2126 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2047, ptr addrspace(3) %365, align 4, !dbg !43
  store <2 x bfloat> %2050, ptr addrspace(3) %370, align 4, !dbg !43
  store <2 x bfloat> %2053, ptr addrspace(3) %371, align 4, !dbg !43
  store <2 x bfloat> %2056, ptr addrspace(3) %376, align 4, !dbg !43
  store <2 x bfloat> %2059, ptr addrspace(3) %377, align 4, !dbg !43
  store <2 x bfloat> %2062, ptr addrspace(3) %382, align 4, !dbg !43
  store <2 x bfloat> %2065, ptr addrspace(3) %383, align 4, !dbg !43
  store <2 x bfloat> %2068, ptr addrspace(3) %388, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2127 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !43
  %2128 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2071, ptr addrspace(3) %365, align 4, !dbg !43
  store <2 x bfloat> %2074, ptr addrspace(3) %370, align 4, !dbg !43
  store <2 x bfloat> %2077, ptr addrspace(3) %371, align 4, !dbg !43
  store <2 x bfloat> %2080, ptr addrspace(3) %376, align 4, !dbg !43
  store <2 x bfloat> %2083, ptr addrspace(3) %377, align 4, !dbg !43
  store <2 x bfloat> %2086, ptr addrspace(3) %382, align 4, !dbg !43
  store <2 x bfloat> %2089, ptr addrspace(3) %383, align 4, !dbg !43
  store <2 x bfloat> %2092, ptr addrspace(3) %388, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2129 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !43
  %2130 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2095, ptr addrspace(3) %365, align 4, !dbg !43
  store <2 x bfloat> %2098, ptr addrspace(3) %370, align 4, !dbg !43
  store <2 x bfloat> %2101, ptr addrspace(3) %371, align 4, !dbg !43
  store <2 x bfloat> %2104, ptr addrspace(3) %376, align 4, !dbg !43
  store <2 x bfloat> %2107, ptr addrspace(3) %377, align 4, !dbg !43
  store <2 x bfloat> %2110, ptr addrspace(3) %382, align 4, !dbg !43
  store <2 x bfloat> %2113, ptr addrspace(3) %383, align 4, !dbg !43
  store <2 x bfloat> %2116, ptr addrspace(3) %388, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2131 = load <4 x i32>, ptr addrspace(3) %391, align 16, !dbg !43
  %2132 = load <4 x i32>, ptr addrspace(3) %396, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %2125, i64 0, !dbg !43
  %.extract237 = extractelement <4 x i32> %2125, i64 1, !dbg !43
  %.extract239 = extractelement <4 x i32> %2125, i64 2, !dbg !43
  %.extract241 = extractelement <4 x i32> %2125, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract237, i32 %.extract239, i32 %.extract241, ptr addrspace(1) %2117, i1 %1181) #3, !dbg !43
  %.extract243 = extractelement <4 x i32> %2126, i64 0, !dbg !43
  %.extract245 = extractelement <4 x i32> %2126, i64 1, !dbg !43
  %.extract247 = extractelement <4 x i32> %2126, i64 2, !dbg !43
  %.extract249 = extractelement <4 x i32> %2126, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract243, i32 %.extract245, i32 %.extract247, i32 %.extract249, ptr addrspace(1) %2118, i1 %1182) #3, !dbg !43
  %.extract251 = extractelement <4 x i32> %2127, i64 0, !dbg !43
  %.extract253 = extractelement <4 x i32> %2127, i64 1, !dbg !43
  %.extract255 = extractelement <4 x i32> %2127, i64 2, !dbg !43
  %.extract257 = extractelement <4 x i32> %2127, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract251, i32 %.extract253, i32 %.extract255, i32 %.extract257, ptr addrspace(1) %2119, i1 %1183) #3, !dbg !43
  %.extract259 = extractelement <4 x i32> %2128, i64 0, !dbg !43
  %.extract261 = extractelement <4 x i32> %2128, i64 1, !dbg !43
  %.extract263 = extractelement <4 x i32> %2128, i64 2, !dbg !43
  %.extract265 = extractelement <4 x i32> %2128, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract259, i32 %.extract261, i32 %.extract263, i32 %.extract265, ptr addrspace(1) %2120, i1 %1184) #3, !dbg !43
  %.extract267 = extractelement <4 x i32> %2129, i64 0, !dbg !43
  %.extract269 = extractelement <4 x i32> %2129, i64 1, !dbg !43
  %.extract271 = extractelement <4 x i32> %2129, i64 2, !dbg !43
  %.extract273 = extractelement <4 x i32> %2129, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract267, i32 %.extract269, i32 %.extract271, i32 %.extract273, ptr addrspace(1) %2121, i1 %1185) #3, !dbg !43
  %.extract275 = extractelement <4 x i32> %2130, i64 0, !dbg !43
  %.extract277 = extractelement <4 x i32> %2130, i64 1, !dbg !43
  %.extract279 = extractelement <4 x i32> %2130, i64 2, !dbg !43
  %.extract281 = extractelement <4 x i32> %2130, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract275, i32 %.extract277, i32 %.extract279, i32 %.extract281, ptr addrspace(1) %2122, i1 %1186) #3, !dbg !43
  %.extract283 = extractelement <4 x i32> %2131, i64 0, !dbg !43
  %.extract285 = extractelement <4 x i32> %2131, i64 1, !dbg !43
  %.extract287 = extractelement <4 x i32> %2131, i64 2, !dbg !43
  %.extract289 = extractelement <4 x i32> %2131, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract283, i32 %.extract285, i32 %.extract287, i32 %.extract289, ptr addrspace(1) %2123, i1 %1187) #3, !dbg !43
  %.extract291 = extractelement <4 x i32> %2132, i64 0, !dbg !43
  %.extract293 = extractelement <4 x i32> %2132, i64 1, !dbg !43
  %.extract295 = extractelement <4 x i32> %2132, i64 2, !dbg !43
  %.extract297 = extractelement <4 x i32> %2132, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract291, i32 %.extract293, i32 %.extract295, i32 %.extract297, ptr addrspace(1) %2124, i1 %1188) #3, !dbg !43
  %2133 = or disjoint i64 %indvars.iv363, %45, !dbg !37
  %2134 = or disjoint i64 %2133, %.idx, !dbg !37
  %2135 = or disjoint i64 %2133, %.idx18, !dbg !37
  %2136 = or disjoint i64 %2133, %.idx19, !dbg !37
  %2137 = or disjoint i64 %2133, %.idx20, !dbg !37
  %2138 = or disjoint i64 %2133, %.idx21, !dbg !37
  %2139 = or disjoint i64 %2133, %.idx22, !dbg !37
  %2140 = or disjoint i64 %2133, %.idx23, !dbg !37
  %2141 = or disjoint i64 %2133, %.idx24, !dbg !37
  %2142 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2134, !dbg !37
  %2143 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2135, !dbg !37
  %2144 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2136, !dbg !37
  %2145 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2137, !dbg !37
  %2146 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2138, !dbg !37
  %2147 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2139, !dbg !37
  %2148 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2140, !dbg !37
  %2149 = getelementptr bfloat, ptr addrspace(1) %1137, i64 %2141, !dbg !37
  %2150 = and i1 %117, %1180, !dbg !37
  %2151 = and i1 %118, %1180, !dbg !37
  %2152 = and i1 %119, %1180, !dbg !37
  %2153 = and i1 %120, %1180, !dbg !37
  %2154 = and i1 %121, %1180, !dbg !37
  %2155 = and i1 %122, %1180, !dbg !37
  %2156 = and i1 %123, %1180, !dbg !37
  %2157 = and i1 %124, %1180, !dbg !37
  %2158 = select i1 %2150, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %2142, i32 %2158) #3, !dbg !37
  %2159 = select i1 %2151, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %2143, i32 %2159) #3, !dbg !37
  %2160 = select i1 %2152, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %2144, i32 %2160) #3, !dbg !37
  %2161 = select i1 %2153, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %2145, i32 %2161) #3, !dbg !37
  %2162 = select i1 %2154, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %2146, i32 %2162) #3, !dbg !37
  %2163 = select i1 %2155, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %2147, i32 %2163) #3, !dbg !37
  %2164 = select i1 %2156, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %2148, i32 %2164) #3, !dbg !37
  %2165 = select i1 %2157, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %2149, i32 %2165) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  br i1 %1180, label %1179, label %2166, !dbg !39

2166:                                             ; preds = %1179
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 196, column: 21, scope: !5)
!19 = !DILocation(line: 177, column: 41, scope: !5)
!20 = !DILocation(line: 177, column: 48, scope: !5)
!21 = !DILocation(line: 177, column: 32, scope: !5)
!22 = !DILocation(line: 178, column: 18, scope: !5)
!23 = !DILocation(line: 181, column: 52, scope: !5)
!24 = !DILocation(line: 181, column: 36, scope: !5)
!25 = !DILocation(line: 182, column: 36, scope: !5)
!26 = !DILocation(line: 183, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 184, column: 22, scope: !5)
!29 = !DILocation(line: 185, column: 26, scope: !5)
!30 = !DILocation(line: 186, column: 29, scope: !5)
!31 = !DILocation(line: 186, column: 22, scope: !5)
!32 = !DILocation(line: 189, column: 37, scope: !5)
!33 = !DILocation(line: 190, column: 26, scope: !5)
!34 = !DILocation(line: 190, column: 18, scope: !5)
!35 = !DILocation(line: 193, column: 36, scope: !5)
!36 = !DILocation(line: 194, column: 36, scope: !5)
!37 = !DILocation(line: 195, column: 22, scope: !5)
!38 = !DILocation(line: 198, column: 20, scope: !5)
!39 = !DILocation(line: 192, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
