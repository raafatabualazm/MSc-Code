; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 7, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %.lobit1 = lshr i32 %8, 4, !dbg !10
  %9 = shl nuw nsw i32 %8, 3, !dbg !10
  %10 = and i32 %9, 120, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !10
  %12 = icmp sgt i32 %7, -1, !dbg !10
  %13 = and i32 %.lobit1, 3, !dbg !10
  %14 = or disjoint i32 %13, 4, !dbg !10
  %15 = or disjoint i32 %13, 8, !dbg !10
  %16 = or disjoint i32 %13, 12, !dbg !10
  %17 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !10
  %18 = shufflevector <4 x i32> %17, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !10
  %19 = or disjoint <4 x i32> %18, <i32 28, i32 24, i32 20, i32 16>, !dbg !10
  %20 = insertelement <8 x i32> poison, i32 %.lobit1, i64 0, !dbg !10
  %21 = insertelement <8 x i32> %20, i32 %13, i64 1, !dbg !10
  %22 = shufflevector <8 x i32> %21, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !10
  %23 = or <8 x i32> %22, <i32 60, i32 56, i32 52, i32 48, i32 44, i32 40, i32 36, i32 32>, !dbg !10
  %24 = shufflevector <8 x i32> %21, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !10
  %25 = or <16 x i32> %24, <i32 124, i32 120, i32 116, i32 112, i32 108, i32 104, i32 100, i32 96, i32 92, i32 88, i32 84, i32 80, i32 76, i32 72, i32 68, i32 64>, !dbg !10
  %26 = insertelement <32 x i32> poison, i32 %16, i64 28, !dbg !10
  %27 = insertelement <32 x i32> %26, i32 %15, i64 29, !dbg !10
  %28 = insertelement <32 x i32> %27, i32 %14, i64 30, !dbg !10
  %29 = insertelement <32 x i32> %28, i32 %13, i64 31, !dbg !10
  %30 = shufflevector <16 x i32> %25, <16 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %31 = shufflevector <32 x i32> %30, <32 x i32> %29, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 60, i32 61, i32 62, i32 63>, !dbg !10
  %32 = shufflevector <8 x i32> %23, <8 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %33 = shufflevector <32 x i32> %31, <32 x i32> %32, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !10
  %34 = shufflevector <4 x i32> %19, <4 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %35 = shufflevector <32 x i32> %33, <32 x i32> %34, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 28, i32 29, i32 30, i32 31>, !dbg !10
  %36 = insertelement <32 x i32> poison, i32 %7, i64 0, !dbg !10
  %37 = shufflevector <32 x i32> %36, <32 x i32> poison, <32 x i32> zeroinitializer, !dbg !10
  %38 = or disjoint <32 x i32> %35, %37, !dbg !10
  %39 = extractelement <32 x i32> %38, i64 31, !dbg !10
  %40 = sext i32 %39 to i64, !dbg !10
  %41 = shl nsw i64 %40, 7, !dbg !10
  %42 = extractelement <32 x i32> %38, i64 30, !dbg !10
  %43 = sext i32 %42 to i64, !dbg !10
  %44 = shl nsw i64 %43, 7, !dbg !10
  %45 = extractelement <32 x i32> %38, i64 29, !dbg !10
  %46 = sext i32 %45 to i64, !dbg !10
  %47 = shl nsw i64 %46, 7, !dbg !10
  %48 = extractelement <32 x i32> %38, i64 28, !dbg !10
  %49 = sext i32 %48 to i64, !dbg !10
  %50 = shl nsw i64 %49, 7, !dbg !10
  %51 = extractelement <32 x i32> %38, i64 27, !dbg !10
  %52 = sext i32 %51 to i64, !dbg !10
  %53 = shl nsw i64 %52, 7, !dbg !10
  %54 = extractelement <32 x i32> %38, i64 26, !dbg !10
  %55 = sext i32 %54 to i64, !dbg !10
  %56 = shl nsw i64 %55, 7, !dbg !10
  %57 = extractelement <32 x i32> %38, i64 25, !dbg !10
  %58 = sext i32 %57 to i64, !dbg !10
  %59 = shl nsw i64 %58, 7, !dbg !10
  %60 = extractelement <32 x i32> %38, i64 24, !dbg !10
  %61 = sext i32 %60 to i64, !dbg !10
  %62 = shl nsw i64 %61, 7, !dbg !10
  %63 = extractelement <32 x i32> %38, i64 23, !dbg !10
  %64 = sext i32 %63 to i64, !dbg !10
  %65 = shl nsw i64 %64, 7, !dbg !10
  %66 = extractelement <32 x i32> %38, i64 22, !dbg !10
  %67 = sext i32 %66 to i64, !dbg !10
  %68 = shl nsw i64 %67, 7, !dbg !10
  %69 = extractelement <32 x i32> %38, i64 21, !dbg !10
  %70 = sext i32 %69 to i64, !dbg !10
  %71 = shl nsw i64 %70, 7, !dbg !10
  %72 = extractelement <32 x i32> %38, i64 20, !dbg !10
  %73 = sext i32 %72 to i64, !dbg !10
  %74 = shl nsw i64 %73, 7, !dbg !10
  %75 = extractelement <32 x i32> %38, i64 19, !dbg !10
  %76 = sext i32 %75 to i64, !dbg !10
  %77 = shl nsw i64 %76, 7, !dbg !10
  %78 = extractelement <32 x i32> %38, i64 18, !dbg !10
  %79 = sext i32 %78 to i64, !dbg !10
  %80 = shl nsw i64 %79, 7, !dbg !10
  %81 = extractelement <32 x i32> %38, i64 17, !dbg !10
  %82 = sext i32 %81 to i64, !dbg !10
  %83 = shl nsw i64 %82, 7, !dbg !10
  %84 = extractelement <32 x i32> %38, i64 16, !dbg !10
  %85 = sext i32 %84 to i64, !dbg !10
  %86 = shl nsw i64 %85, 7, !dbg !10
  %87 = extractelement <32 x i32> %38, i64 15, !dbg !10
  %88 = sext i32 %87 to i64, !dbg !10
  %89 = shl nsw i64 %88, 7, !dbg !10
  %90 = extractelement <32 x i32> %38, i64 14, !dbg !10
  %91 = sext i32 %90 to i64, !dbg !10
  %92 = shl nsw i64 %91, 7, !dbg !10
  %93 = extractelement <32 x i32> %38, i64 13, !dbg !10
  %94 = sext i32 %93 to i64, !dbg !10
  %95 = shl nsw i64 %94, 7, !dbg !10
  %96 = extractelement <32 x i32> %38, i64 12, !dbg !10
  %97 = sext i32 %96 to i64, !dbg !10
  %98 = shl nsw i64 %97, 7, !dbg !10
  %99 = extractelement <32 x i32> %38, i64 11, !dbg !10
  %100 = sext i32 %99 to i64, !dbg !10
  %101 = shl nsw i64 %100, 7, !dbg !10
  %102 = extractelement <32 x i32> %38, i64 10, !dbg !10
  %103 = sext i32 %102 to i64, !dbg !10
  %104 = shl nsw i64 %103, 7, !dbg !10
  %105 = extractelement <32 x i32> %38, i64 9, !dbg !10
  %106 = sext i32 %105 to i64, !dbg !10
  %107 = shl nsw i64 %106, 7, !dbg !10
  %108 = extractelement <32 x i32> %38, i64 8, !dbg !10
  %109 = sext i32 %108 to i64, !dbg !10
  %110 = shl nsw i64 %109, 7, !dbg !10
  %111 = extractelement <32 x i32> %38, i64 7, !dbg !10
  %112 = sext i32 %111 to i64, !dbg !10
  %113 = shl nsw i64 %112, 7, !dbg !10
  %114 = extractelement <32 x i32> %38, i64 6, !dbg !10
  %115 = sext i32 %114 to i64, !dbg !10
  %116 = shl nsw i64 %115, 7, !dbg !10
  %117 = extractelement <32 x i32> %38, i64 5, !dbg !10
  %118 = sext i32 %117 to i64, !dbg !10
  %119 = shl nsw i64 %118, 7, !dbg !10
  %120 = extractelement <32 x i32> %38, i64 4, !dbg !10
  %121 = sext i32 %120 to i64, !dbg !10
  %122 = shl nsw i64 %121, 7, !dbg !10
  %123 = extractelement <32 x i32> %38, i64 3, !dbg !10
  %124 = sext i32 %123 to i64, !dbg !10
  %125 = shl nsw i64 %124, 7, !dbg !10
  %126 = extractelement <32 x i32> %38, i64 2, !dbg !10
  %127 = sext i32 %126 to i64, !dbg !10
  %128 = shl nsw i64 %127, 7, !dbg !10
  %129 = extractelement <32 x i32> %38, i64 1, !dbg !10
  %130 = sext i32 %129 to i64, !dbg !10
  %131 = shl nsw i64 %130, 7, !dbg !10
  %132 = extractelement <32 x i32> %38, i64 0, !dbg !10
  %133 = sext i32 %132 to i64, !dbg !10
  %134 = shl nsw i64 %133, 7, !dbg !10
  %135 = or disjoint i64 %41, %11, !dbg !10
  %136 = or disjoint i64 %44, %11, !dbg !10
  %137 = or disjoint i64 %47, %11, !dbg !10
  %138 = or disjoint i64 %50, %11, !dbg !10
  %139 = or disjoint i64 %53, %11, !dbg !10
  %140 = or disjoint i64 %56, %11, !dbg !10
  %141 = or disjoint i64 %59, %11, !dbg !10
  %142 = or disjoint i64 %62, %11, !dbg !10
  %143 = or disjoint i64 %65, %11, !dbg !10
  %144 = or disjoint i64 %68, %11, !dbg !10
  %145 = or disjoint i64 %71, %11, !dbg !10
  %146 = or disjoint i64 %74, %11, !dbg !10
  %147 = or disjoint i64 %77, %11, !dbg !10
  %148 = or disjoint i64 %80, %11, !dbg !10
  %149 = or disjoint i64 %83, %11, !dbg !10
  %150 = or disjoint i64 %86, %11, !dbg !10
  %151 = or disjoint i64 %89, %11, !dbg !10
  %152 = or disjoint i64 %92, %11, !dbg !10
  %153 = or disjoint i64 %95, %11, !dbg !10
  %154 = or disjoint i64 %98, %11, !dbg !10
  %155 = or disjoint i64 %101, %11, !dbg !10
  %156 = or disjoint i64 %104, %11, !dbg !10
  %157 = or disjoint i64 %107, %11, !dbg !10
  %158 = or disjoint i64 %110, %11, !dbg !10
  %159 = or disjoint i64 %113, %11, !dbg !10
  %160 = or disjoint i64 %116, %11, !dbg !10
  %161 = or disjoint i64 %119, %11, !dbg !10
  %162 = or disjoint i64 %122, %11, !dbg !10
  %163 = or disjoint i64 %125, %11, !dbg !10
  %164 = or disjoint i64 %128, %11, !dbg !10
  %165 = or disjoint i64 %131, %11, !dbg !10
  %166 = or disjoint i64 %134, %11, !dbg !10
  %167 = getelementptr bfloat, ptr addrspace(1) %0, i64 %135, !dbg !10
  %168 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !10
  %169 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !10
  %170 = getelementptr bfloat, ptr addrspace(1) %0, i64 %138, !dbg !10
  %171 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !10
  %172 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !10
  %173 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !10
  %174 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !10
  %175 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !10
  %176 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !10
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !10
  %178 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !10
  %179 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !10
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !10
  %181 = getelementptr bfloat, ptr addrspace(1) %0, i64 %149, !dbg !10
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !10
  %183 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !10
  %184 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !10
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !10
  %186 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !10
  %187 = getelementptr bfloat, ptr addrspace(1) %0, i64 %155, !dbg !10
  %188 = getelementptr bfloat, ptr addrspace(1) %0, i64 %156, !dbg !10
  %189 = getelementptr bfloat, ptr addrspace(1) %0, i64 %157, !dbg !10
  %190 = getelementptr bfloat, ptr addrspace(1) %0, i64 %158, !dbg !10
  %191 = getelementptr bfloat, ptr addrspace(1) %0, i64 %159, !dbg !10
  %192 = getelementptr bfloat, ptr addrspace(1) %0, i64 %160, !dbg !10
  %193 = getelementptr bfloat, ptr addrspace(1) %0, i64 %161, !dbg !10
  %194 = getelementptr bfloat, ptr addrspace(1) %0, i64 %162, !dbg !10
  %195 = getelementptr bfloat, ptr addrspace(1) %0, i64 %163, !dbg !10
  %196 = getelementptr bfloat, ptr addrspace(1) %0, i64 %164, !dbg !10
  %197 = getelementptr bfloat, ptr addrspace(1) %0, i64 %165, !dbg !10
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %166, !dbg !10
  %199 = icmp slt <32 x i32> %38, splat (i32 49152), !dbg !10
  %200 = extractelement <32 x i1> %199, i64 31, !dbg !10
  %201 = and i1 %12, %200, !dbg !10
  %202 = extractelement <32 x i1> %199, i64 30, !dbg !10
  %203 = and i1 %12, %202, !dbg !10
  %204 = extractelement <32 x i1> %199, i64 29, !dbg !10
  %205 = and i1 %12, %204, !dbg !10
  %206 = extractelement <32 x i1> %199, i64 28, !dbg !10
  %207 = and i1 %12, %206, !dbg !10
  %208 = extractelement <32 x i1> %199, i64 27, !dbg !10
  %209 = and i1 %12, %208, !dbg !10
  %210 = extractelement <32 x i1> %199, i64 26, !dbg !10
  %211 = and i1 %12, %210, !dbg !10
  %212 = extractelement <32 x i1> %199, i64 25, !dbg !10
  %213 = and i1 %12, %212, !dbg !10
  %214 = extractelement <32 x i1> %199, i64 24, !dbg !10
  %215 = and i1 %12, %214, !dbg !10
  %216 = extractelement <32 x i1> %199, i64 23, !dbg !10
  %217 = and i1 %12, %216, !dbg !10
  %218 = extractelement <32 x i1> %199, i64 22, !dbg !10
  %219 = and i1 %12, %218, !dbg !10
  %220 = extractelement <32 x i1> %199, i64 21, !dbg !10
  %221 = and i1 %12, %220, !dbg !10
  %222 = extractelement <32 x i1> %199, i64 20, !dbg !10
  %223 = and i1 %12, %222, !dbg !10
  %224 = extractelement <32 x i1> %199, i64 19, !dbg !10
  %225 = and i1 %12, %224, !dbg !10
  %226 = extractelement <32 x i1> %199, i64 18, !dbg !10
  %227 = and i1 %12, %226, !dbg !10
  %228 = extractelement <32 x i1> %199, i64 17, !dbg !10
  %229 = and i1 %12, %228, !dbg !10
  %230 = extractelement <32 x i1> %199, i64 16, !dbg !10
  %231 = and i1 %12, %230, !dbg !10
  %232 = extractelement <32 x i1> %199, i64 15, !dbg !10
  %233 = and i1 %12, %232, !dbg !10
  %234 = extractelement <32 x i1> %199, i64 14, !dbg !10
  %235 = and i1 %12, %234, !dbg !10
  %236 = extractelement <32 x i1> %199, i64 13, !dbg !10
  %237 = and i1 %12, %236, !dbg !10
  %238 = extractelement <32 x i1> %199, i64 12, !dbg !10
  %239 = and i1 %12, %238, !dbg !10
  %240 = extractelement <32 x i1> %199, i64 11, !dbg !10
  %241 = and i1 %12, %240, !dbg !10
  %242 = extractelement <32 x i1> %199, i64 10, !dbg !10
  %243 = and i1 %12, %242, !dbg !10
  %244 = extractelement <32 x i1> %199, i64 9, !dbg !10
  %245 = and i1 %12, %244, !dbg !10
  %246 = extractelement <32 x i1> %199, i64 8, !dbg !10
  %247 = and i1 %12, %246, !dbg !10
  %248 = extractelement <32 x i1> %199, i64 7, !dbg !10
  %249 = and i1 %12, %248, !dbg !10
  %250 = extractelement <32 x i1> %199, i64 6, !dbg !10
  %251 = and i1 %12, %250, !dbg !10
  %252 = extractelement <32 x i1> %199, i64 5, !dbg !10
  %253 = and i1 %12, %252, !dbg !10
  %254 = extractelement <32 x i1> %199, i64 4, !dbg !10
  %255 = and i1 %12, %254, !dbg !10
  %256 = extractelement <32 x i1> %199, i64 3, !dbg !10
  %257 = and i1 %12, %256, !dbg !10
  %258 = extractelement <32 x i1> %199, i64 2, !dbg !10
  %259 = and i1 %12, %258, !dbg !10
  %260 = extractelement <32 x i1> %199, i64 1, !dbg !10
  %261 = and i1 %12, %260, !dbg !10
  %262 = extractelement <32 x i1> %199, i64 0, !dbg !10
  %263 = and i1 %12, %262, !dbg !10
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %201) #6, !dbg !10
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !10
  %266 = bitcast i32 %265 to <2 x bfloat>, !dbg !10
  %267 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !10
  %268 = bitcast i32 %267 to <2 x bfloat>, !dbg !10
  %269 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !10
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !10
  %271 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !10
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !10
  %273 = extractelement <2 x bfloat> %266, i64 0, !dbg !10
  %274 = extractelement <2 x bfloat> %266, i64 1, !dbg !10
  %275 = extractelement <2 x bfloat> %268, i64 0, !dbg !10
  %276 = extractelement <2 x bfloat> %268, i64 1, !dbg !10
  %277 = extractelement <2 x bfloat> %270, i64 0, !dbg !10
  %278 = extractelement <2 x bfloat> %270, i64 1, !dbg !10
  %279 = extractelement <2 x bfloat> %272, i64 0, !dbg !10
  %280 = extractelement <2 x bfloat> %272, i64 1, !dbg !10
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %203) #6, !dbg !10
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !10
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !10
  %284 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !10
  %285 = bitcast i32 %284 to <2 x bfloat>, !dbg !10
  %286 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !10
  %287 = bitcast i32 %286 to <2 x bfloat>, !dbg !10
  %288 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !10
  %289 = bitcast i32 %288 to <2 x bfloat>, !dbg !10
  %290 = extractelement <2 x bfloat> %283, i64 0, !dbg !10
  %291 = extractelement <2 x bfloat> %283, i64 1, !dbg !10
  %292 = extractelement <2 x bfloat> %285, i64 0, !dbg !10
  %293 = extractelement <2 x bfloat> %285, i64 1, !dbg !10
  %294 = extractelement <2 x bfloat> %287, i64 0, !dbg !10
  %295 = extractelement <2 x bfloat> %287, i64 1, !dbg !10
  %296 = extractelement <2 x bfloat> %289, i64 0, !dbg !10
  %297 = extractelement <2 x bfloat> %289, i64 1, !dbg !10
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %205) #6, !dbg !10
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !10
  %300 = bitcast i32 %299 to <2 x bfloat>, !dbg !10
  %301 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !10
  %302 = bitcast i32 %301 to <2 x bfloat>, !dbg !10
  %303 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !10
  %304 = bitcast i32 %303 to <2 x bfloat>, !dbg !10
  %305 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !10
  %306 = bitcast i32 %305 to <2 x bfloat>, !dbg !10
  %307 = extractelement <2 x bfloat> %300, i64 0, !dbg !10
  %308 = extractelement <2 x bfloat> %300, i64 1, !dbg !10
  %309 = extractelement <2 x bfloat> %302, i64 0, !dbg !10
  %310 = extractelement <2 x bfloat> %302, i64 1, !dbg !10
  %311 = extractelement <2 x bfloat> %304, i64 0, !dbg !10
  %312 = extractelement <2 x bfloat> %304, i64 1, !dbg !10
  %313 = extractelement <2 x bfloat> %306, i64 0, !dbg !10
  %314 = extractelement <2 x bfloat> %306, i64 1, !dbg !10
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %207) #6, !dbg !10
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !10
  %317 = bitcast i32 %316 to <2 x bfloat>, !dbg !10
  %318 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !10
  %319 = bitcast i32 %318 to <2 x bfloat>, !dbg !10
  %320 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !10
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !10
  %322 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !10
  %323 = bitcast i32 %322 to <2 x bfloat>, !dbg !10
  %324 = extractelement <2 x bfloat> %317, i64 0, !dbg !10
  %325 = extractelement <2 x bfloat> %317, i64 1, !dbg !10
  %326 = extractelement <2 x bfloat> %319, i64 0, !dbg !10
  %327 = extractelement <2 x bfloat> %319, i64 1, !dbg !10
  %328 = extractelement <2 x bfloat> %321, i64 0, !dbg !10
  %329 = extractelement <2 x bfloat> %321, i64 1, !dbg !10
  %330 = extractelement <2 x bfloat> %323, i64 0, !dbg !10
  %331 = extractelement <2 x bfloat> %323, i64 1, !dbg !10
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %209) #6, !dbg !10
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !10
  %334 = bitcast i32 %333 to <2 x bfloat>, !dbg !10
  %335 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !10
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !10
  %337 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !10
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !10
  %339 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !10
  %340 = bitcast i32 %339 to <2 x bfloat>, !dbg !10
  %341 = extractelement <2 x bfloat> %334, i64 0, !dbg !10
  %342 = extractelement <2 x bfloat> %334, i64 1, !dbg !10
  %343 = extractelement <2 x bfloat> %336, i64 0, !dbg !10
  %344 = extractelement <2 x bfloat> %336, i64 1, !dbg !10
  %345 = extractelement <2 x bfloat> %338, i64 0, !dbg !10
  %346 = extractelement <2 x bfloat> %338, i64 1, !dbg !10
  %347 = extractelement <2 x bfloat> %340, i64 0, !dbg !10
  %348 = extractelement <2 x bfloat> %340, i64 1, !dbg !10
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %211) #6, !dbg !10
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !10
  %351 = bitcast i32 %350 to <2 x bfloat>, !dbg !10
  %352 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !10
  %353 = bitcast i32 %352 to <2 x bfloat>, !dbg !10
  %354 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !10
  %355 = bitcast i32 %354 to <2 x bfloat>, !dbg !10
  %356 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !10
  %357 = bitcast i32 %356 to <2 x bfloat>, !dbg !10
  %358 = extractelement <2 x bfloat> %351, i64 0, !dbg !10
  %359 = extractelement <2 x bfloat> %351, i64 1, !dbg !10
  %360 = extractelement <2 x bfloat> %353, i64 0, !dbg !10
  %361 = extractelement <2 x bfloat> %353, i64 1, !dbg !10
  %362 = extractelement <2 x bfloat> %355, i64 0, !dbg !10
  %363 = extractelement <2 x bfloat> %355, i64 1, !dbg !10
  %364 = extractelement <2 x bfloat> %357, i64 0, !dbg !10
  %365 = extractelement <2 x bfloat> %357, i64 1, !dbg !10
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %213) #6, !dbg !10
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !10
  %368 = bitcast i32 %367 to <2 x bfloat>, !dbg !10
  %369 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !10
  %370 = bitcast i32 %369 to <2 x bfloat>, !dbg !10
  %371 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !10
  %372 = bitcast i32 %371 to <2 x bfloat>, !dbg !10
  %373 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !10
  %374 = bitcast i32 %373 to <2 x bfloat>, !dbg !10
  %375 = extractelement <2 x bfloat> %368, i64 0, !dbg !10
  %376 = extractelement <2 x bfloat> %368, i64 1, !dbg !10
  %377 = extractelement <2 x bfloat> %370, i64 0, !dbg !10
  %378 = extractelement <2 x bfloat> %370, i64 1, !dbg !10
  %379 = extractelement <2 x bfloat> %372, i64 0, !dbg !10
  %380 = extractelement <2 x bfloat> %372, i64 1, !dbg !10
  %381 = extractelement <2 x bfloat> %374, i64 0, !dbg !10
  %382 = extractelement <2 x bfloat> %374, i64 1, !dbg !10
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %215) #6, !dbg !10
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !10
  %385 = bitcast i32 %384 to <2 x bfloat>, !dbg !10
  %386 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !10
  %387 = bitcast i32 %386 to <2 x bfloat>, !dbg !10
  %388 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !10
  %389 = bitcast i32 %388 to <2 x bfloat>, !dbg !10
  %390 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !10
  %391 = bitcast i32 %390 to <2 x bfloat>, !dbg !10
  %392 = extractelement <2 x bfloat> %385, i64 0, !dbg !10
  %393 = extractelement <2 x bfloat> %385, i64 1, !dbg !10
  %394 = extractelement <2 x bfloat> %387, i64 0, !dbg !10
  %395 = extractelement <2 x bfloat> %387, i64 1, !dbg !10
  %396 = extractelement <2 x bfloat> %389, i64 0, !dbg !10
  %397 = extractelement <2 x bfloat> %389, i64 1, !dbg !10
  %398 = extractelement <2 x bfloat> %391, i64 0, !dbg !10
  %399 = extractelement <2 x bfloat> %391, i64 1, !dbg !10
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %217) #6, !dbg !10
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !10
  %402 = bitcast i32 %401 to <2 x bfloat>, !dbg !10
  %403 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !10
  %404 = bitcast i32 %403 to <2 x bfloat>, !dbg !10
  %405 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !10
  %406 = bitcast i32 %405 to <2 x bfloat>, !dbg !10
  %407 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !10
  %408 = bitcast i32 %407 to <2 x bfloat>, !dbg !10
  %409 = extractelement <2 x bfloat> %402, i64 0, !dbg !10
  %410 = extractelement <2 x bfloat> %402, i64 1, !dbg !10
  %411 = extractelement <2 x bfloat> %404, i64 0, !dbg !10
  %412 = extractelement <2 x bfloat> %404, i64 1, !dbg !10
  %413 = extractelement <2 x bfloat> %406, i64 0, !dbg !10
  %414 = extractelement <2 x bfloat> %406, i64 1, !dbg !10
  %415 = extractelement <2 x bfloat> %408, i64 0, !dbg !10
  %416 = extractelement <2 x bfloat> %408, i64 1, !dbg !10
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %219) #6, !dbg !10
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !10
  %419 = bitcast i32 %418 to <2 x bfloat>, !dbg !10
  %420 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !10
  %421 = bitcast i32 %420 to <2 x bfloat>, !dbg !10
  %422 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !10
  %423 = bitcast i32 %422 to <2 x bfloat>, !dbg !10
  %424 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !10
  %425 = bitcast i32 %424 to <2 x bfloat>, !dbg !10
  %426 = extractelement <2 x bfloat> %419, i64 0, !dbg !10
  %427 = extractelement <2 x bfloat> %419, i64 1, !dbg !10
  %428 = extractelement <2 x bfloat> %421, i64 0, !dbg !10
  %429 = extractelement <2 x bfloat> %421, i64 1, !dbg !10
  %430 = extractelement <2 x bfloat> %423, i64 0, !dbg !10
  %431 = extractelement <2 x bfloat> %423, i64 1, !dbg !10
  %432 = extractelement <2 x bfloat> %425, i64 0, !dbg !10
  %433 = extractelement <2 x bfloat> %425, i64 1, !dbg !10
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %221) #6, !dbg !10
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !10
  %436 = bitcast i32 %435 to <2 x bfloat>, !dbg !10
  %437 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !10
  %438 = bitcast i32 %437 to <2 x bfloat>, !dbg !10
  %439 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !10
  %440 = bitcast i32 %439 to <2 x bfloat>, !dbg !10
  %441 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !10
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !10
  %443 = extractelement <2 x bfloat> %436, i64 0, !dbg !10
  %444 = extractelement <2 x bfloat> %436, i64 1, !dbg !10
  %445 = extractelement <2 x bfloat> %438, i64 0, !dbg !10
  %446 = extractelement <2 x bfloat> %438, i64 1, !dbg !10
  %447 = extractelement <2 x bfloat> %440, i64 0, !dbg !10
  %448 = extractelement <2 x bfloat> %440, i64 1, !dbg !10
  %449 = extractelement <2 x bfloat> %442, i64 0, !dbg !10
  %450 = extractelement <2 x bfloat> %442, i64 1, !dbg !10
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %223) #6, !dbg !10
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !10
  %453 = bitcast i32 %452 to <2 x bfloat>, !dbg !10
  %454 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !10
  %455 = bitcast i32 %454 to <2 x bfloat>, !dbg !10
  %456 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !10
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !10
  %458 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !10
  %459 = bitcast i32 %458 to <2 x bfloat>, !dbg !10
  %460 = extractelement <2 x bfloat> %453, i64 0, !dbg !10
  %461 = extractelement <2 x bfloat> %453, i64 1, !dbg !10
  %462 = extractelement <2 x bfloat> %455, i64 0, !dbg !10
  %463 = extractelement <2 x bfloat> %455, i64 1, !dbg !10
  %464 = extractelement <2 x bfloat> %457, i64 0, !dbg !10
  %465 = extractelement <2 x bfloat> %457, i64 1, !dbg !10
  %466 = extractelement <2 x bfloat> %459, i64 0, !dbg !10
  %467 = extractelement <2 x bfloat> %459, i64 1, !dbg !10
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %225) #6, !dbg !10
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !10
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !10
  %471 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !10
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !10
  %473 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !10
  %474 = bitcast i32 %473 to <2 x bfloat>, !dbg !10
  %475 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !10
  %476 = bitcast i32 %475 to <2 x bfloat>, !dbg !10
  %477 = extractelement <2 x bfloat> %470, i64 0, !dbg !10
  %478 = extractelement <2 x bfloat> %470, i64 1, !dbg !10
  %479 = extractelement <2 x bfloat> %472, i64 0, !dbg !10
  %480 = extractelement <2 x bfloat> %472, i64 1, !dbg !10
  %481 = extractelement <2 x bfloat> %474, i64 0, !dbg !10
  %482 = extractelement <2 x bfloat> %474, i64 1, !dbg !10
  %483 = extractelement <2 x bfloat> %476, i64 0, !dbg !10
  %484 = extractelement <2 x bfloat> %476, i64 1, !dbg !10
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %227) #6, !dbg !10
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !10
  %487 = bitcast i32 %486 to <2 x bfloat>, !dbg !10
  %488 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !10
  %489 = bitcast i32 %488 to <2 x bfloat>, !dbg !10
  %490 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !10
  %491 = bitcast i32 %490 to <2 x bfloat>, !dbg !10
  %492 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !10
  %493 = bitcast i32 %492 to <2 x bfloat>, !dbg !10
  %494 = extractelement <2 x bfloat> %487, i64 0, !dbg !10
  %495 = extractelement <2 x bfloat> %487, i64 1, !dbg !10
  %496 = extractelement <2 x bfloat> %489, i64 0, !dbg !10
  %497 = extractelement <2 x bfloat> %489, i64 1, !dbg !10
  %498 = extractelement <2 x bfloat> %491, i64 0, !dbg !10
  %499 = extractelement <2 x bfloat> %491, i64 1, !dbg !10
  %500 = extractelement <2 x bfloat> %493, i64 0, !dbg !10
  %501 = extractelement <2 x bfloat> %493, i64 1, !dbg !10
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %229) #6, !dbg !10
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !10
  %504 = bitcast i32 %503 to <2 x bfloat>, !dbg !10
  %505 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !10
  %506 = bitcast i32 %505 to <2 x bfloat>, !dbg !10
  %507 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !10
  %508 = bitcast i32 %507 to <2 x bfloat>, !dbg !10
  %509 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !10
  %510 = bitcast i32 %509 to <2 x bfloat>, !dbg !10
  %511 = extractelement <2 x bfloat> %504, i64 0, !dbg !10
  %512 = extractelement <2 x bfloat> %504, i64 1, !dbg !10
  %513 = extractelement <2 x bfloat> %506, i64 0, !dbg !10
  %514 = extractelement <2 x bfloat> %506, i64 1, !dbg !10
  %515 = extractelement <2 x bfloat> %508, i64 0, !dbg !10
  %516 = extractelement <2 x bfloat> %508, i64 1, !dbg !10
  %517 = extractelement <2 x bfloat> %510, i64 0, !dbg !10
  %518 = extractelement <2 x bfloat> %510, i64 1, !dbg !10
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %231) #6, !dbg !10
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !10
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !10
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !10
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !10
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !10
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !10
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !10
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !10
  %528 = extractelement <2 x bfloat> %521, i64 0, !dbg !10
  %529 = extractelement <2 x bfloat> %521, i64 1, !dbg !10
  %530 = extractelement <2 x bfloat> %523, i64 0, !dbg !10
  %531 = extractelement <2 x bfloat> %523, i64 1, !dbg !10
  %532 = extractelement <2 x bfloat> %525, i64 0, !dbg !10
  %533 = extractelement <2 x bfloat> %525, i64 1, !dbg !10
  %534 = extractelement <2 x bfloat> %527, i64 0, !dbg !10
  %535 = extractelement <2 x bfloat> %527, i64 1, !dbg !10
  %536 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %233) #6, !dbg !10
  %537 = extractvalue { i32, i32, i32, i32 } %536, 0, !dbg !10
  %538 = bitcast i32 %537 to <2 x bfloat>, !dbg !10
  %539 = extractvalue { i32, i32, i32, i32 } %536, 1, !dbg !10
  %540 = bitcast i32 %539 to <2 x bfloat>, !dbg !10
  %541 = extractvalue { i32, i32, i32, i32 } %536, 2, !dbg !10
  %542 = bitcast i32 %541 to <2 x bfloat>, !dbg !10
  %543 = extractvalue { i32, i32, i32, i32 } %536, 3, !dbg !10
  %544 = bitcast i32 %543 to <2 x bfloat>, !dbg !10
  %545 = extractelement <2 x bfloat> %538, i64 0, !dbg !10
  %546 = extractelement <2 x bfloat> %538, i64 1, !dbg !10
  %547 = extractelement <2 x bfloat> %540, i64 0, !dbg !10
  %548 = extractelement <2 x bfloat> %540, i64 1, !dbg !10
  %549 = extractelement <2 x bfloat> %542, i64 0, !dbg !10
  %550 = extractelement <2 x bfloat> %542, i64 1, !dbg !10
  %551 = extractelement <2 x bfloat> %544, i64 0, !dbg !10
  %552 = extractelement <2 x bfloat> %544, i64 1, !dbg !10
  %553 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %235) #6, !dbg !10
  %554 = extractvalue { i32, i32, i32, i32 } %553, 0, !dbg !10
  %555 = bitcast i32 %554 to <2 x bfloat>, !dbg !10
  %556 = extractvalue { i32, i32, i32, i32 } %553, 1, !dbg !10
  %557 = bitcast i32 %556 to <2 x bfloat>, !dbg !10
  %558 = extractvalue { i32, i32, i32, i32 } %553, 2, !dbg !10
  %559 = bitcast i32 %558 to <2 x bfloat>, !dbg !10
  %560 = extractvalue { i32, i32, i32, i32 } %553, 3, !dbg !10
  %561 = bitcast i32 %560 to <2 x bfloat>, !dbg !10
  %562 = extractelement <2 x bfloat> %555, i64 0, !dbg !10
  %563 = extractelement <2 x bfloat> %555, i64 1, !dbg !10
  %564 = extractelement <2 x bfloat> %557, i64 0, !dbg !10
  %565 = extractelement <2 x bfloat> %557, i64 1, !dbg !10
  %566 = extractelement <2 x bfloat> %559, i64 0, !dbg !10
  %567 = extractelement <2 x bfloat> %559, i64 1, !dbg !10
  %568 = extractelement <2 x bfloat> %561, i64 0, !dbg !10
  %569 = extractelement <2 x bfloat> %561, i64 1, !dbg !10
  %570 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %237) #6, !dbg !10
  %571 = extractvalue { i32, i32, i32, i32 } %570, 0, !dbg !10
  %572 = bitcast i32 %571 to <2 x bfloat>, !dbg !10
  %573 = extractvalue { i32, i32, i32, i32 } %570, 1, !dbg !10
  %574 = bitcast i32 %573 to <2 x bfloat>, !dbg !10
  %575 = extractvalue { i32, i32, i32, i32 } %570, 2, !dbg !10
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !10
  %577 = extractvalue { i32, i32, i32, i32 } %570, 3, !dbg !10
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !10
  %579 = extractelement <2 x bfloat> %572, i64 0, !dbg !10
  %580 = extractelement <2 x bfloat> %572, i64 1, !dbg !10
  %581 = extractelement <2 x bfloat> %574, i64 0, !dbg !10
  %582 = extractelement <2 x bfloat> %574, i64 1, !dbg !10
  %583 = extractelement <2 x bfloat> %576, i64 0, !dbg !10
  %584 = extractelement <2 x bfloat> %576, i64 1, !dbg !10
  %585 = extractelement <2 x bfloat> %578, i64 0, !dbg !10
  %586 = extractelement <2 x bfloat> %578, i64 1, !dbg !10
  %587 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %239) #6, !dbg !10
  %588 = extractvalue { i32, i32, i32, i32 } %587, 0, !dbg !10
  %589 = bitcast i32 %588 to <2 x bfloat>, !dbg !10
  %590 = extractvalue { i32, i32, i32, i32 } %587, 1, !dbg !10
  %591 = bitcast i32 %590 to <2 x bfloat>, !dbg !10
  %592 = extractvalue { i32, i32, i32, i32 } %587, 2, !dbg !10
  %593 = bitcast i32 %592 to <2 x bfloat>, !dbg !10
  %594 = extractvalue { i32, i32, i32, i32 } %587, 3, !dbg !10
  %595 = bitcast i32 %594 to <2 x bfloat>, !dbg !10
  %596 = extractelement <2 x bfloat> %589, i64 0, !dbg !10
  %597 = extractelement <2 x bfloat> %589, i64 1, !dbg !10
  %598 = extractelement <2 x bfloat> %591, i64 0, !dbg !10
  %599 = extractelement <2 x bfloat> %591, i64 1, !dbg !10
  %600 = extractelement <2 x bfloat> %593, i64 0, !dbg !10
  %601 = extractelement <2 x bfloat> %593, i64 1, !dbg !10
  %602 = extractelement <2 x bfloat> %595, i64 0, !dbg !10
  %603 = extractelement <2 x bfloat> %595, i64 1, !dbg !10
  %604 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %241) #6, !dbg !10
  %605 = extractvalue { i32, i32, i32, i32 } %604, 0, !dbg !10
  %606 = bitcast i32 %605 to <2 x bfloat>, !dbg !10
  %607 = extractvalue { i32, i32, i32, i32 } %604, 1, !dbg !10
  %608 = bitcast i32 %607 to <2 x bfloat>, !dbg !10
  %609 = extractvalue { i32, i32, i32, i32 } %604, 2, !dbg !10
  %610 = bitcast i32 %609 to <2 x bfloat>, !dbg !10
  %611 = extractvalue { i32, i32, i32, i32 } %604, 3, !dbg !10
  %612 = bitcast i32 %611 to <2 x bfloat>, !dbg !10
  %613 = extractelement <2 x bfloat> %606, i64 0, !dbg !10
  %614 = extractelement <2 x bfloat> %606, i64 1, !dbg !10
  %615 = extractelement <2 x bfloat> %608, i64 0, !dbg !10
  %616 = extractelement <2 x bfloat> %608, i64 1, !dbg !10
  %617 = extractelement <2 x bfloat> %610, i64 0, !dbg !10
  %618 = extractelement <2 x bfloat> %610, i64 1, !dbg !10
  %619 = extractelement <2 x bfloat> %612, i64 0, !dbg !10
  %620 = extractelement <2 x bfloat> %612, i64 1, !dbg !10
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %243) #6, !dbg !10
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !10
  %623 = bitcast i32 %622 to <2 x bfloat>, !dbg !10
  %624 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !10
  %625 = bitcast i32 %624 to <2 x bfloat>, !dbg !10
  %626 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !10
  %627 = bitcast i32 %626 to <2 x bfloat>, !dbg !10
  %628 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !10
  %629 = bitcast i32 %628 to <2 x bfloat>, !dbg !10
  %630 = extractelement <2 x bfloat> %623, i64 0, !dbg !10
  %631 = extractelement <2 x bfloat> %623, i64 1, !dbg !10
  %632 = extractelement <2 x bfloat> %625, i64 0, !dbg !10
  %633 = extractelement <2 x bfloat> %625, i64 1, !dbg !10
  %634 = extractelement <2 x bfloat> %627, i64 0, !dbg !10
  %635 = extractelement <2 x bfloat> %627, i64 1, !dbg !10
  %636 = extractelement <2 x bfloat> %629, i64 0, !dbg !10
  %637 = extractelement <2 x bfloat> %629, i64 1, !dbg !10
  %638 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %245) #6, !dbg !10
  %639 = extractvalue { i32, i32, i32, i32 } %638, 0, !dbg !10
  %640 = bitcast i32 %639 to <2 x bfloat>, !dbg !10
  %641 = extractvalue { i32, i32, i32, i32 } %638, 1, !dbg !10
  %642 = bitcast i32 %641 to <2 x bfloat>, !dbg !10
  %643 = extractvalue { i32, i32, i32, i32 } %638, 2, !dbg !10
  %644 = bitcast i32 %643 to <2 x bfloat>, !dbg !10
  %645 = extractvalue { i32, i32, i32, i32 } %638, 3, !dbg !10
  %646 = bitcast i32 %645 to <2 x bfloat>, !dbg !10
  %647 = extractelement <2 x bfloat> %640, i64 0, !dbg !10
  %648 = extractelement <2 x bfloat> %640, i64 1, !dbg !10
  %649 = extractelement <2 x bfloat> %642, i64 0, !dbg !10
  %650 = extractelement <2 x bfloat> %642, i64 1, !dbg !10
  %651 = extractelement <2 x bfloat> %644, i64 0, !dbg !10
  %652 = extractelement <2 x bfloat> %644, i64 1, !dbg !10
  %653 = extractelement <2 x bfloat> %646, i64 0, !dbg !10
  %654 = extractelement <2 x bfloat> %646, i64 1, !dbg !10
  %655 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %247) #6, !dbg !10
  %656 = extractvalue { i32, i32, i32, i32 } %655, 0, !dbg !10
  %657 = bitcast i32 %656 to <2 x bfloat>, !dbg !10
  %658 = extractvalue { i32, i32, i32, i32 } %655, 1, !dbg !10
  %659 = bitcast i32 %658 to <2 x bfloat>, !dbg !10
  %660 = extractvalue { i32, i32, i32, i32 } %655, 2, !dbg !10
  %661 = bitcast i32 %660 to <2 x bfloat>, !dbg !10
  %662 = extractvalue { i32, i32, i32, i32 } %655, 3, !dbg !10
  %663 = bitcast i32 %662 to <2 x bfloat>, !dbg !10
  %664 = extractelement <2 x bfloat> %657, i64 0, !dbg !10
  %665 = extractelement <2 x bfloat> %657, i64 1, !dbg !10
  %666 = extractelement <2 x bfloat> %659, i64 0, !dbg !10
  %667 = extractelement <2 x bfloat> %659, i64 1, !dbg !10
  %668 = extractelement <2 x bfloat> %661, i64 0, !dbg !10
  %669 = extractelement <2 x bfloat> %661, i64 1, !dbg !10
  %670 = extractelement <2 x bfloat> %663, i64 0, !dbg !10
  %671 = extractelement <2 x bfloat> %663, i64 1, !dbg !10
  %672 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %249) #6, !dbg !10
  %673 = extractvalue { i32, i32, i32, i32 } %672, 0, !dbg !10
  %674 = bitcast i32 %673 to <2 x bfloat>, !dbg !10
  %675 = extractvalue { i32, i32, i32, i32 } %672, 1, !dbg !10
  %676 = bitcast i32 %675 to <2 x bfloat>, !dbg !10
  %677 = extractvalue { i32, i32, i32, i32 } %672, 2, !dbg !10
  %678 = bitcast i32 %677 to <2 x bfloat>, !dbg !10
  %679 = extractvalue { i32, i32, i32, i32 } %672, 3, !dbg !10
  %680 = bitcast i32 %679 to <2 x bfloat>, !dbg !10
  %681 = extractelement <2 x bfloat> %674, i64 0, !dbg !10
  %682 = extractelement <2 x bfloat> %674, i64 1, !dbg !10
  %683 = extractelement <2 x bfloat> %676, i64 0, !dbg !10
  %684 = extractelement <2 x bfloat> %676, i64 1, !dbg !10
  %685 = extractelement <2 x bfloat> %678, i64 0, !dbg !10
  %686 = extractelement <2 x bfloat> %678, i64 1, !dbg !10
  %687 = extractelement <2 x bfloat> %680, i64 0, !dbg !10
  %688 = extractelement <2 x bfloat> %680, i64 1, !dbg !10
  %689 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %251) #6, !dbg !10
  %690 = extractvalue { i32, i32, i32, i32 } %689, 0, !dbg !10
  %691 = bitcast i32 %690 to <2 x bfloat>, !dbg !10
  %692 = extractvalue { i32, i32, i32, i32 } %689, 1, !dbg !10
  %693 = bitcast i32 %692 to <2 x bfloat>, !dbg !10
  %694 = extractvalue { i32, i32, i32, i32 } %689, 2, !dbg !10
  %695 = bitcast i32 %694 to <2 x bfloat>, !dbg !10
  %696 = extractvalue { i32, i32, i32, i32 } %689, 3, !dbg !10
  %697 = bitcast i32 %696 to <2 x bfloat>, !dbg !10
  %698 = extractelement <2 x bfloat> %691, i64 0, !dbg !10
  %699 = extractelement <2 x bfloat> %691, i64 1, !dbg !10
  %700 = extractelement <2 x bfloat> %693, i64 0, !dbg !10
  %701 = extractelement <2 x bfloat> %693, i64 1, !dbg !10
  %702 = extractelement <2 x bfloat> %695, i64 0, !dbg !10
  %703 = extractelement <2 x bfloat> %695, i64 1, !dbg !10
  %704 = extractelement <2 x bfloat> %697, i64 0, !dbg !10
  %705 = extractelement <2 x bfloat> %697, i64 1, !dbg !10
  %706 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %253) #6, !dbg !10
  %707 = extractvalue { i32, i32, i32, i32 } %706, 0, !dbg !10
  %708 = bitcast i32 %707 to <2 x bfloat>, !dbg !10
  %709 = extractvalue { i32, i32, i32, i32 } %706, 1, !dbg !10
  %710 = bitcast i32 %709 to <2 x bfloat>, !dbg !10
  %711 = extractvalue { i32, i32, i32, i32 } %706, 2, !dbg !10
  %712 = bitcast i32 %711 to <2 x bfloat>, !dbg !10
  %713 = extractvalue { i32, i32, i32, i32 } %706, 3, !dbg !10
  %714 = bitcast i32 %713 to <2 x bfloat>, !dbg !10
  %715 = extractelement <2 x bfloat> %708, i64 0, !dbg !10
  %716 = extractelement <2 x bfloat> %708, i64 1, !dbg !10
  %717 = extractelement <2 x bfloat> %710, i64 0, !dbg !10
  %718 = extractelement <2 x bfloat> %710, i64 1, !dbg !10
  %719 = extractelement <2 x bfloat> %712, i64 0, !dbg !10
  %720 = extractelement <2 x bfloat> %712, i64 1, !dbg !10
  %721 = extractelement <2 x bfloat> %714, i64 0, !dbg !10
  %722 = extractelement <2 x bfloat> %714, i64 1, !dbg !10
  %723 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %255) #6, !dbg !10
  %724 = extractvalue { i32, i32, i32, i32 } %723, 0, !dbg !10
  %725 = bitcast i32 %724 to <2 x bfloat>, !dbg !10
  %726 = extractvalue { i32, i32, i32, i32 } %723, 1, !dbg !10
  %727 = bitcast i32 %726 to <2 x bfloat>, !dbg !10
  %728 = extractvalue { i32, i32, i32, i32 } %723, 2, !dbg !10
  %729 = bitcast i32 %728 to <2 x bfloat>, !dbg !10
  %730 = extractvalue { i32, i32, i32, i32 } %723, 3, !dbg !10
  %731 = bitcast i32 %730 to <2 x bfloat>, !dbg !10
  %732 = extractelement <2 x bfloat> %725, i64 0, !dbg !10
  %733 = extractelement <2 x bfloat> %725, i64 1, !dbg !10
  %734 = extractelement <2 x bfloat> %727, i64 0, !dbg !10
  %735 = extractelement <2 x bfloat> %727, i64 1, !dbg !10
  %736 = extractelement <2 x bfloat> %729, i64 0, !dbg !10
  %737 = extractelement <2 x bfloat> %729, i64 1, !dbg !10
  %738 = extractelement <2 x bfloat> %731, i64 0, !dbg !10
  %739 = extractelement <2 x bfloat> %731, i64 1, !dbg !10
  %740 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %257) #6, !dbg !10
  %741 = extractvalue { i32, i32, i32, i32 } %740, 0, !dbg !10
  %742 = bitcast i32 %741 to <2 x bfloat>, !dbg !10
  %743 = extractvalue { i32, i32, i32, i32 } %740, 1, !dbg !10
  %744 = bitcast i32 %743 to <2 x bfloat>, !dbg !10
  %745 = extractvalue { i32, i32, i32, i32 } %740, 2, !dbg !10
  %746 = bitcast i32 %745 to <2 x bfloat>, !dbg !10
  %747 = extractvalue { i32, i32, i32, i32 } %740, 3, !dbg !10
  %748 = bitcast i32 %747 to <2 x bfloat>, !dbg !10
  %749 = extractelement <2 x bfloat> %742, i64 0, !dbg !10
  %750 = extractelement <2 x bfloat> %742, i64 1, !dbg !10
  %751 = extractelement <2 x bfloat> %744, i64 0, !dbg !10
  %752 = extractelement <2 x bfloat> %744, i64 1, !dbg !10
  %753 = extractelement <2 x bfloat> %746, i64 0, !dbg !10
  %754 = extractelement <2 x bfloat> %746, i64 1, !dbg !10
  %755 = extractelement <2 x bfloat> %748, i64 0, !dbg !10
  %756 = extractelement <2 x bfloat> %748, i64 1, !dbg !10
  %757 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %196, i1 %259) #6, !dbg !10
  %758 = extractvalue { i32, i32, i32, i32 } %757, 0, !dbg !10
  %759 = bitcast i32 %758 to <2 x bfloat>, !dbg !10
  %760 = extractvalue { i32, i32, i32, i32 } %757, 1, !dbg !10
  %761 = bitcast i32 %760 to <2 x bfloat>, !dbg !10
  %762 = extractvalue { i32, i32, i32, i32 } %757, 2, !dbg !10
  %763 = bitcast i32 %762 to <2 x bfloat>, !dbg !10
  %764 = extractvalue { i32, i32, i32, i32 } %757, 3, !dbg !10
  %765 = bitcast i32 %764 to <2 x bfloat>, !dbg !10
  %766 = extractelement <2 x bfloat> %759, i64 0, !dbg !10
  %767 = extractelement <2 x bfloat> %759, i64 1, !dbg !10
  %768 = extractelement <2 x bfloat> %761, i64 0, !dbg !10
  %769 = extractelement <2 x bfloat> %761, i64 1, !dbg !10
  %770 = extractelement <2 x bfloat> %763, i64 0, !dbg !10
  %771 = extractelement <2 x bfloat> %763, i64 1, !dbg !10
  %772 = extractelement <2 x bfloat> %765, i64 0, !dbg !10
  %773 = extractelement <2 x bfloat> %765, i64 1, !dbg !10
  %774 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %261) #6, !dbg !10
  %775 = extractvalue { i32, i32, i32, i32 } %774, 0, !dbg !10
  %776 = bitcast i32 %775 to <2 x bfloat>, !dbg !10
  %777 = extractvalue { i32, i32, i32, i32 } %774, 1, !dbg !10
  %778 = bitcast i32 %777 to <2 x bfloat>, !dbg !10
  %779 = extractvalue { i32, i32, i32, i32 } %774, 2, !dbg !10
  %780 = bitcast i32 %779 to <2 x bfloat>, !dbg !10
  %781 = extractvalue { i32, i32, i32, i32 } %774, 3, !dbg !10
  %782 = bitcast i32 %781 to <2 x bfloat>, !dbg !10
  %783 = extractelement <2 x bfloat> %776, i64 0, !dbg !10
  %784 = extractelement <2 x bfloat> %776, i64 1, !dbg !10
  %785 = extractelement <2 x bfloat> %778, i64 0, !dbg !10
  %786 = extractelement <2 x bfloat> %778, i64 1, !dbg !10
  %787 = extractelement <2 x bfloat> %780, i64 0, !dbg !10
  %788 = extractelement <2 x bfloat> %780, i64 1, !dbg !10
  %789 = extractelement <2 x bfloat> %782, i64 0, !dbg !10
  %790 = extractelement <2 x bfloat> %782, i64 1, !dbg !10
  %791 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %263) #6, !dbg !10
  %792 = extractvalue { i32, i32, i32, i32 } %791, 0, !dbg !10
  %793 = bitcast i32 %792 to <2 x bfloat>, !dbg !10
  %794 = extractvalue { i32, i32, i32, i32 } %791, 1, !dbg !10
  %795 = bitcast i32 %794 to <2 x bfloat>, !dbg !10
  %796 = extractvalue { i32, i32, i32, i32 } %791, 2, !dbg !10
  %797 = bitcast i32 %796 to <2 x bfloat>, !dbg !10
  %798 = extractvalue { i32, i32, i32, i32 } %791, 3, !dbg !10
  %799 = bitcast i32 %798 to <2 x bfloat>, !dbg !10
  %800 = extractelement <2 x bfloat> %793, i64 0, !dbg !10
  %801 = extractelement <2 x bfloat> %793, i64 1, !dbg !10
  %802 = extractelement <2 x bfloat> %795, i64 0, !dbg !10
  %803 = extractelement <2 x bfloat> %795, i64 1, !dbg !10
  %804 = extractelement <2 x bfloat> %797, i64 0, !dbg !10
  %805 = extractelement <2 x bfloat> %797, i64 1, !dbg !10
  %806 = extractelement <2 x bfloat> %799, i64 0, !dbg !10
  %807 = extractelement <2 x bfloat> %799, i64 1, !dbg !10
  %808 = fpext bfloat %273 to float, !dbg !11
  %809 = fpext bfloat %274 to float, !dbg !11
  %810 = fpext bfloat %275 to float, !dbg !11
  %811 = fpext bfloat %276 to float, !dbg !11
  %812 = fpext bfloat %277 to float, !dbg !11
  %813 = fpext bfloat %278 to float, !dbg !11
  %814 = fpext bfloat %279 to float, !dbg !11
  %815 = fpext bfloat %280 to float, !dbg !11
  %816 = fpext bfloat %290 to float, !dbg !11
  %817 = fpext bfloat %291 to float, !dbg !11
  %818 = fpext bfloat %292 to float, !dbg !11
  %819 = fpext bfloat %293 to float, !dbg !11
  %820 = fpext bfloat %294 to float, !dbg !11
  %821 = fpext bfloat %295 to float, !dbg !11
  %822 = fpext bfloat %296 to float, !dbg !11
  %823 = fpext bfloat %297 to float, !dbg !11
  %824 = fpext bfloat %307 to float, !dbg !11
  %825 = fpext bfloat %308 to float, !dbg !11
  %826 = fpext bfloat %309 to float, !dbg !11
  %827 = fpext bfloat %310 to float, !dbg !11
  %828 = fpext bfloat %311 to float, !dbg !11
  %829 = fpext bfloat %312 to float, !dbg !11
  %830 = fpext bfloat %313 to float, !dbg !11
  %831 = fpext bfloat %314 to float, !dbg !11
  %832 = fpext bfloat %324 to float, !dbg !11
  %833 = fpext bfloat %325 to float, !dbg !11
  %834 = fpext bfloat %326 to float, !dbg !11
  %835 = fpext bfloat %327 to float, !dbg !11
  %836 = fpext bfloat %328 to float, !dbg !11
  %837 = fpext bfloat %329 to float, !dbg !11
  %838 = fpext bfloat %330 to float, !dbg !11
  %839 = fpext bfloat %331 to float, !dbg !11
  %840 = fpext bfloat %341 to float, !dbg !11
  %841 = fpext bfloat %342 to float, !dbg !11
  %842 = fpext bfloat %343 to float, !dbg !11
  %843 = fpext bfloat %344 to float, !dbg !11
  %844 = fpext bfloat %345 to float, !dbg !11
  %845 = fpext bfloat %346 to float, !dbg !11
  %846 = fpext bfloat %347 to float, !dbg !11
  %847 = fpext bfloat %348 to float, !dbg !11
  %848 = fpext bfloat %358 to float, !dbg !11
  %849 = fpext bfloat %359 to float, !dbg !11
  %850 = fpext bfloat %360 to float, !dbg !11
  %851 = fpext bfloat %361 to float, !dbg !11
  %852 = fpext bfloat %362 to float, !dbg !11
  %853 = fpext bfloat %363 to float, !dbg !11
  %854 = fpext bfloat %364 to float, !dbg !11
  %855 = fpext bfloat %365 to float, !dbg !11
  %856 = fpext bfloat %375 to float, !dbg !11
  %857 = fpext bfloat %376 to float, !dbg !11
  %858 = fpext bfloat %377 to float, !dbg !11
  %859 = fpext bfloat %378 to float, !dbg !11
  %860 = fpext bfloat %379 to float, !dbg !11
  %861 = fpext bfloat %380 to float, !dbg !11
  %862 = fpext bfloat %381 to float, !dbg !11
  %863 = fpext bfloat %382 to float, !dbg !11
  %864 = fpext bfloat %392 to float, !dbg !11
  %865 = fpext bfloat %393 to float, !dbg !11
  %866 = fpext bfloat %394 to float, !dbg !11
  %867 = fpext bfloat %395 to float, !dbg !11
  %868 = fpext bfloat %396 to float, !dbg !11
  %869 = fpext bfloat %397 to float, !dbg !11
  %870 = fpext bfloat %398 to float, !dbg !11
  %871 = fpext bfloat %399 to float, !dbg !11
  %872 = fpext bfloat %409 to float, !dbg !11
  %873 = fpext bfloat %410 to float, !dbg !11
  %874 = fpext bfloat %411 to float, !dbg !11
  %875 = fpext bfloat %412 to float, !dbg !11
  %876 = fpext bfloat %413 to float, !dbg !11
  %877 = fpext bfloat %414 to float, !dbg !11
  %878 = fpext bfloat %415 to float, !dbg !11
  %879 = fpext bfloat %416 to float, !dbg !11
  %880 = fpext bfloat %426 to float, !dbg !11
  %881 = fpext bfloat %427 to float, !dbg !11
  %882 = fpext bfloat %428 to float, !dbg !11
  %883 = fpext bfloat %429 to float, !dbg !11
  %884 = fpext bfloat %430 to float, !dbg !11
  %885 = fpext bfloat %431 to float, !dbg !11
  %886 = fpext bfloat %432 to float, !dbg !11
  %887 = fpext bfloat %433 to float, !dbg !11
  %888 = fpext bfloat %443 to float, !dbg !11
  %889 = fpext bfloat %444 to float, !dbg !11
  %890 = fpext bfloat %445 to float, !dbg !11
  %891 = fpext bfloat %446 to float, !dbg !11
  %892 = fpext bfloat %447 to float, !dbg !11
  %893 = fpext bfloat %448 to float, !dbg !11
  %894 = fpext bfloat %449 to float, !dbg !11
  %895 = fpext bfloat %450 to float, !dbg !11
  %896 = fpext bfloat %460 to float, !dbg !11
  %897 = fpext bfloat %461 to float, !dbg !11
  %898 = fpext bfloat %462 to float, !dbg !11
  %899 = fpext bfloat %463 to float, !dbg !11
  %900 = fpext bfloat %464 to float, !dbg !11
  %901 = fpext bfloat %465 to float, !dbg !11
  %902 = fpext bfloat %466 to float, !dbg !11
  %903 = fpext bfloat %467 to float, !dbg !11
  %904 = fpext bfloat %477 to float, !dbg !11
  %905 = fpext bfloat %478 to float, !dbg !11
  %906 = fpext bfloat %479 to float, !dbg !11
  %907 = fpext bfloat %480 to float, !dbg !11
  %908 = fpext bfloat %481 to float, !dbg !11
  %909 = fpext bfloat %482 to float, !dbg !11
  %910 = fpext bfloat %483 to float, !dbg !11
  %911 = fpext bfloat %484 to float, !dbg !11
  %912 = fpext bfloat %494 to float, !dbg !11
  %913 = fpext bfloat %495 to float, !dbg !11
  %914 = fpext bfloat %496 to float, !dbg !11
  %915 = fpext bfloat %497 to float, !dbg !11
  %916 = fpext bfloat %498 to float, !dbg !11
  %917 = fpext bfloat %499 to float, !dbg !11
  %918 = fpext bfloat %500 to float, !dbg !11
  %919 = fpext bfloat %501 to float, !dbg !11
  %920 = fpext bfloat %511 to float, !dbg !11
  %921 = fpext bfloat %512 to float, !dbg !11
  %922 = fpext bfloat %513 to float, !dbg !11
  %923 = fpext bfloat %514 to float, !dbg !11
  %924 = fpext bfloat %515 to float, !dbg !11
  %925 = fpext bfloat %516 to float, !dbg !11
  %926 = fpext bfloat %517 to float, !dbg !11
  %927 = fpext bfloat %518 to float, !dbg !11
  %928 = fpext bfloat %528 to float, !dbg !11
  %929 = fpext bfloat %529 to float, !dbg !11
  %930 = fpext bfloat %530 to float, !dbg !11
  %931 = fpext bfloat %531 to float, !dbg !11
  %932 = fpext bfloat %532 to float, !dbg !11
  %933 = fpext bfloat %533 to float, !dbg !11
  %934 = fpext bfloat %534 to float, !dbg !11
  %935 = fpext bfloat %535 to float, !dbg !11
  %936 = fpext bfloat %545 to float, !dbg !11
  %937 = fpext bfloat %546 to float, !dbg !11
  %938 = fpext bfloat %547 to float, !dbg !11
  %939 = fpext bfloat %548 to float, !dbg !11
  %940 = fpext bfloat %549 to float, !dbg !11
  %941 = fpext bfloat %550 to float, !dbg !11
  %942 = fpext bfloat %551 to float, !dbg !11
  %943 = fpext bfloat %552 to float, !dbg !11
  %944 = fpext bfloat %562 to float, !dbg !11
  %945 = fpext bfloat %563 to float, !dbg !11
  %946 = fpext bfloat %564 to float, !dbg !11
  %947 = fpext bfloat %565 to float, !dbg !11
  %948 = fpext bfloat %566 to float, !dbg !11
  %949 = fpext bfloat %567 to float, !dbg !11
  %950 = fpext bfloat %568 to float, !dbg !11
  %951 = fpext bfloat %569 to float, !dbg !11
  %952 = fpext bfloat %579 to float, !dbg !11
  %953 = fpext bfloat %580 to float, !dbg !11
  %954 = fpext bfloat %581 to float, !dbg !11
  %955 = fpext bfloat %582 to float, !dbg !11
  %956 = fpext bfloat %583 to float, !dbg !11
  %957 = fpext bfloat %584 to float, !dbg !11
  %958 = fpext bfloat %585 to float, !dbg !11
  %959 = fpext bfloat %586 to float, !dbg !11
  %960 = fpext bfloat %596 to float, !dbg !11
  %961 = fpext bfloat %597 to float, !dbg !11
  %962 = fpext bfloat %598 to float, !dbg !11
  %963 = fpext bfloat %599 to float, !dbg !11
  %964 = fpext bfloat %600 to float, !dbg !11
  %965 = fpext bfloat %601 to float, !dbg !11
  %966 = fpext bfloat %602 to float, !dbg !11
  %967 = fpext bfloat %603 to float, !dbg !11
  %968 = fpext bfloat %613 to float, !dbg !11
  %969 = fpext bfloat %614 to float, !dbg !11
  %970 = fpext bfloat %615 to float, !dbg !11
  %971 = fpext bfloat %616 to float, !dbg !11
  %972 = fpext bfloat %617 to float, !dbg !11
  %973 = fpext bfloat %618 to float, !dbg !11
  %974 = fpext bfloat %619 to float, !dbg !11
  %975 = fpext bfloat %620 to float, !dbg !11
  %976 = fpext bfloat %630 to float, !dbg !11
  %977 = fpext bfloat %631 to float, !dbg !11
  %978 = fpext bfloat %632 to float, !dbg !11
  %979 = fpext bfloat %633 to float, !dbg !11
  %980 = fpext bfloat %634 to float, !dbg !11
  %981 = fpext bfloat %635 to float, !dbg !11
  %982 = fpext bfloat %636 to float, !dbg !11
  %983 = fpext bfloat %637 to float, !dbg !11
  %984 = fpext bfloat %647 to float, !dbg !11
  %985 = fpext bfloat %648 to float, !dbg !11
  %986 = fpext bfloat %649 to float, !dbg !11
  %987 = fpext bfloat %650 to float, !dbg !11
  %988 = fpext bfloat %651 to float, !dbg !11
  %989 = fpext bfloat %652 to float, !dbg !11
  %990 = fpext bfloat %653 to float, !dbg !11
  %991 = fpext bfloat %654 to float, !dbg !11
  %992 = fpext bfloat %664 to float, !dbg !11
  %993 = fpext bfloat %665 to float, !dbg !11
  %994 = fpext bfloat %666 to float, !dbg !11
  %995 = fpext bfloat %667 to float, !dbg !11
  %996 = fpext bfloat %668 to float, !dbg !11
  %997 = fpext bfloat %669 to float, !dbg !11
  %998 = fpext bfloat %670 to float, !dbg !11
  %999 = fpext bfloat %671 to float, !dbg !11
  %1000 = fpext bfloat %681 to float, !dbg !11
  %1001 = fpext bfloat %682 to float, !dbg !11
  %1002 = fpext bfloat %683 to float, !dbg !11
  %1003 = fpext bfloat %684 to float, !dbg !11
  %1004 = fpext bfloat %685 to float, !dbg !11
  %1005 = fpext bfloat %686 to float, !dbg !11
  %1006 = fpext bfloat %687 to float, !dbg !11
  %1007 = fpext bfloat %688 to float, !dbg !11
  %1008 = fpext bfloat %698 to float, !dbg !11
  %1009 = fpext bfloat %699 to float, !dbg !11
  %1010 = fpext bfloat %700 to float, !dbg !11
  %1011 = fpext bfloat %701 to float, !dbg !11
  %1012 = fpext bfloat %702 to float, !dbg !11
  %1013 = fpext bfloat %703 to float, !dbg !11
  %1014 = fpext bfloat %704 to float, !dbg !11
  %1015 = fpext bfloat %705 to float, !dbg !11
  %1016 = fpext bfloat %715 to float, !dbg !11
  %1017 = fpext bfloat %716 to float, !dbg !11
  %1018 = fpext bfloat %717 to float, !dbg !11
  %1019 = fpext bfloat %718 to float, !dbg !11
  %1020 = fpext bfloat %719 to float, !dbg !11
  %1021 = fpext bfloat %720 to float, !dbg !11
  %1022 = fpext bfloat %721 to float, !dbg !11
  %1023 = fpext bfloat %722 to float, !dbg !11
  %1024 = fpext bfloat %732 to float, !dbg !11
  %1025 = fpext bfloat %733 to float, !dbg !11
  %1026 = fpext bfloat %734 to float, !dbg !11
  %1027 = fpext bfloat %735 to float, !dbg !11
  %1028 = fpext bfloat %736 to float, !dbg !11
  %1029 = fpext bfloat %737 to float, !dbg !11
  %1030 = fpext bfloat %738 to float, !dbg !11
  %1031 = fpext bfloat %739 to float, !dbg !11
  %1032 = fpext bfloat %749 to float, !dbg !11
  %1033 = fpext bfloat %750 to float, !dbg !11
  %1034 = fpext bfloat %751 to float, !dbg !11
  %1035 = fpext bfloat %752 to float, !dbg !11
  %1036 = fpext bfloat %753 to float, !dbg !11
  %1037 = fpext bfloat %754 to float, !dbg !11
  %1038 = fpext bfloat %755 to float, !dbg !11
  %1039 = fpext bfloat %756 to float, !dbg !11
  %1040 = fpext bfloat %766 to float, !dbg !11
  %1041 = fpext bfloat %767 to float, !dbg !11
  %1042 = fpext bfloat %768 to float, !dbg !11
  %1043 = fpext bfloat %769 to float, !dbg !11
  %1044 = fpext bfloat %770 to float, !dbg !11
  %1045 = fpext bfloat %771 to float, !dbg !11
  %1046 = fpext bfloat %772 to float, !dbg !11
  %1047 = fpext bfloat %773 to float, !dbg !11
  %1048 = fpext bfloat %783 to float, !dbg !11
  %1049 = fpext bfloat %784 to float, !dbg !11
  %1050 = fpext bfloat %785 to float, !dbg !11
  %1051 = fpext bfloat %786 to float, !dbg !11
  %1052 = fpext bfloat %787 to float, !dbg !11
  %1053 = fpext bfloat %788 to float, !dbg !11
  %1054 = fpext bfloat %789 to float, !dbg !11
  %1055 = fpext bfloat %790 to float, !dbg !11
  %1056 = fpext bfloat %800 to float, !dbg !11
  %1057 = fpext bfloat %801 to float, !dbg !11
  %1058 = fpext bfloat %802 to float, !dbg !11
  %1059 = fpext bfloat %803 to float, !dbg !11
  %1060 = fpext bfloat %804 to float, !dbg !11
  %1061 = fpext bfloat %805 to float, !dbg !11
  %1062 = fpext bfloat %806 to float, !dbg !11
  %1063 = fpext bfloat %807 to float, !dbg !11
  %1064 = fmul float %808, %808, !dbg !12
  %1065 = fmul float %809, %809, !dbg !12
  %1066 = fmul float %810, %810, !dbg !12
  %1067 = fmul float %811, %811, !dbg !12
  %1068 = fmul float %812, %812, !dbg !12
  %1069 = fmul float %813, %813, !dbg !12
  %1070 = fmul float %814, %814, !dbg !12
  %1071 = fmul float %815, %815, !dbg !12
  %1072 = fmul float %816, %816, !dbg !12
  %1073 = fmul float %817, %817, !dbg !12
  %1074 = fmul float %818, %818, !dbg !12
  %1075 = fmul float %819, %819, !dbg !12
  %1076 = fmul float %820, %820, !dbg !12
  %1077 = fmul float %821, %821, !dbg !12
  %1078 = fmul float %822, %822, !dbg !12
  %1079 = fmul float %823, %823, !dbg !12
  %1080 = fmul float %824, %824, !dbg !12
  %1081 = fmul float %825, %825, !dbg !12
  %1082 = fmul float %826, %826, !dbg !12
  %1083 = fmul float %827, %827, !dbg !12
  %1084 = fmul float %828, %828, !dbg !12
  %1085 = fmul float %829, %829, !dbg !12
  %1086 = fmul float %830, %830, !dbg !12
  %1087 = fmul float %831, %831, !dbg !12
  %1088 = fmul float %832, %832, !dbg !12
  %1089 = fmul float %833, %833, !dbg !12
  %1090 = fmul float %834, %834, !dbg !12
  %1091 = fmul float %835, %835, !dbg !12
  %1092 = fmul float %836, %836, !dbg !12
  %1093 = fmul float %837, %837, !dbg !12
  %1094 = fmul float %838, %838, !dbg !12
  %1095 = fmul float %839, %839, !dbg !12
  %1096 = fmul float %840, %840, !dbg !12
  %1097 = fmul float %841, %841, !dbg !12
  %1098 = fmul float %842, %842, !dbg !12
  %1099 = fmul float %843, %843, !dbg !12
  %1100 = fmul float %844, %844, !dbg !12
  %1101 = fmul float %845, %845, !dbg !12
  %1102 = fmul float %846, %846, !dbg !12
  %1103 = fmul float %847, %847, !dbg !12
  %1104 = fmul float %848, %848, !dbg !12
  %1105 = fmul float %849, %849, !dbg !12
  %1106 = fmul float %850, %850, !dbg !12
  %1107 = fmul float %851, %851, !dbg !12
  %1108 = fmul float %852, %852, !dbg !12
  %1109 = fmul float %853, %853, !dbg !12
  %1110 = fmul float %854, %854, !dbg !12
  %1111 = fmul float %855, %855, !dbg !12
  %1112 = fmul float %856, %856, !dbg !12
  %1113 = fmul float %857, %857, !dbg !12
  %1114 = fmul float %858, %858, !dbg !12
  %1115 = fmul float %859, %859, !dbg !12
  %1116 = fmul float %860, %860, !dbg !12
  %1117 = fmul float %861, %861, !dbg !12
  %1118 = fmul float %862, %862, !dbg !12
  %1119 = fmul float %863, %863, !dbg !12
  %1120 = fmul float %864, %864, !dbg !12
  %1121 = fmul float %865, %865, !dbg !12
  %1122 = fmul float %866, %866, !dbg !12
  %1123 = fmul float %867, %867, !dbg !12
  %1124 = fmul float %868, %868, !dbg !12
  %1125 = fmul float %869, %869, !dbg !12
  %1126 = fmul float %870, %870, !dbg !12
  %1127 = fmul float %871, %871, !dbg !12
  %1128 = fmul float %872, %872, !dbg !12
  %1129 = fmul float %873, %873, !dbg !12
  %1130 = fmul float %874, %874, !dbg !12
  %1131 = fmul float %875, %875, !dbg !12
  %1132 = fmul float %876, %876, !dbg !12
  %1133 = fmul float %877, %877, !dbg !12
  %1134 = fmul float %878, %878, !dbg !12
  %1135 = fmul float %879, %879, !dbg !12
  %1136 = fmul float %880, %880, !dbg !12
  %1137 = fmul float %881, %881, !dbg !12
  %1138 = fmul float %882, %882, !dbg !12
  %1139 = fmul float %883, %883, !dbg !12
  %1140 = fmul float %884, %884, !dbg !12
  %1141 = fmul float %885, %885, !dbg !12
  %1142 = fmul float %886, %886, !dbg !12
  %1143 = fmul float %887, %887, !dbg !12
  %1144 = fmul float %888, %888, !dbg !12
  %1145 = fmul float %889, %889, !dbg !12
  %1146 = fmul float %890, %890, !dbg !12
  %1147 = fmul float %891, %891, !dbg !12
  %1148 = fmul float %892, %892, !dbg !12
  %1149 = fmul float %893, %893, !dbg !12
  %1150 = fmul float %894, %894, !dbg !12
  %1151 = fmul float %895, %895, !dbg !12
  %1152 = fmul float %896, %896, !dbg !12
  %1153 = fmul float %897, %897, !dbg !12
  %1154 = fmul float %898, %898, !dbg !12
  %1155 = fmul float %899, %899, !dbg !12
  %1156 = fmul float %900, %900, !dbg !12
  %1157 = fmul float %901, %901, !dbg !12
  %1158 = fmul float %902, %902, !dbg !12
  %1159 = fmul float %903, %903, !dbg !12
  %1160 = fmul float %904, %904, !dbg !12
  %1161 = fmul float %905, %905, !dbg !12
  %1162 = fmul float %906, %906, !dbg !12
  %1163 = fmul float %907, %907, !dbg !12
  %1164 = fmul float %908, %908, !dbg !12
  %1165 = fmul float %909, %909, !dbg !12
  %1166 = fmul float %910, %910, !dbg !12
  %1167 = fmul float %911, %911, !dbg !12
  %1168 = fmul float %912, %912, !dbg !12
  %1169 = fmul float %913, %913, !dbg !12
  %1170 = fmul float %914, %914, !dbg !12
  %1171 = fmul float %915, %915, !dbg !12
  %1172 = fmul float %916, %916, !dbg !12
  %1173 = fmul float %917, %917, !dbg !12
  %1174 = fmul float %918, %918, !dbg !12
  %1175 = fmul float %919, %919, !dbg !12
  %1176 = fmul float %920, %920, !dbg !12
  %1177 = fmul float %921, %921, !dbg !12
  %1178 = fmul float %922, %922, !dbg !12
  %1179 = fmul float %923, %923, !dbg !12
  %1180 = fmul float %924, %924, !dbg !12
  %1181 = fmul float %925, %925, !dbg !12
  %1182 = fmul float %926, %926, !dbg !12
  %1183 = fmul float %927, %927, !dbg !12
  %1184 = fmul float %928, %928, !dbg !12
  %1185 = fmul float %929, %929, !dbg !12
  %1186 = fmul float %930, %930, !dbg !12
  %1187 = fmul float %931, %931, !dbg !12
  %1188 = fmul float %932, %932, !dbg !12
  %1189 = fmul float %933, %933, !dbg !12
  %1190 = fmul float %934, %934, !dbg !12
  %1191 = fmul float %935, %935, !dbg !12
  %1192 = fmul float %936, %936, !dbg !12
  %1193 = fmul float %937, %937, !dbg !12
  %1194 = fmul float %938, %938, !dbg !12
  %1195 = fmul float %939, %939, !dbg !12
  %1196 = fmul float %940, %940, !dbg !12
  %1197 = fmul float %941, %941, !dbg !12
  %1198 = fmul float %942, %942, !dbg !12
  %1199 = fmul float %943, %943, !dbg !12
  %1200 = fmul float %944, %944, !dbg !12
  %1201 = fmul float %945, %945, !dbg !12
  %1202 = fmul float %946, %946, !dbg !12
  %1203 = fmul float %947, %947, !dbg !12
  %1204 = fmul float %948, %948, !dbg !12
  %1205 = fmul float %949, %949, !dbg !12
  %1206 = fmul float %950, %950, !dbg !12
  %1207 = fmul float %951, %951, !dbg !12
  %1208 = fmul float %952, %952, !dbg !12
  %1209 = fmul float %953, %953, !dbg !12
  %1210 = fmul float %954, %954, !dbg !12
  %1211 = fmul float %955, %955, !dbg !12
  %1212 = fmul float %956, %956, !dbg !12
  %1213 = fmul float %957, %957, !dbg !12
  %1214 = fmul float %958, %958, !dbg !12
  %1215 = fmul float %959, %959, !dbg !12
  %1216 = fmul float %960, %960, !dbg !12
  %1217 = fmul float %961, %961, !dbg !12
  %1218 = fmul float %962, %962, !dbg !12
  %1219 = fmul float %963, %963, !dbg !12
  %1220 = fmul float %964, %964, !dbg !12
  %1221 = fmul float %965, %965, !dbg !12
  %1222 = fmul float %966, %966, !dbg !12
  %1223 = fmul float %967, %967, !dbg !12
  %1224 = fmul float %968, %968, !dbg !12
  %1225 = fmul float %969, %969, !dbg !12
  %1226 = fmul float %970, %970, !dbg !12
  %1227 = fmul float %971, %971, !dbg !12
  %1228 = fmul float %972, %972, !dbg !12
  %1229 = fmul float %973, %973, !dbg !12
  %1230 = fmul float %974, %974, !dbg !12
  %1231 = fmul float %975, %975, !dbg !12
  %1232 = fmul float %976, %976, !dbg !12
  %1233 = fmul float %977, %977, !dbg !12
  %1234 = fmul float %978, %978, !dbg !12
  %1235 = fmul float %979, %979, !dbg !12
  %1236 = fmul float %980, %980, !dbg !12
  %1237 = fmul float %981, %981, !dbg !12
  %1238 = fmul float %982, %982, !dbg !12
  %1239 = fmul float %983, %983, !dbg !12
  %1240 = fmul float %984, %984, !dbg !12
  %1241 = fmul float %985, %985, !dbg !12
  %1242 = fmul float %986, %986, !dbg !12
  %1243 = fmul float %987, %987, !dbg !12
  %1244 = fmul float %988, %988, !dbg !12
  %1245 = fmul float %989, %989, !dbg !12
  %1246 = fmul float %990, %990, !dbg !12
  %1247 = fmul float %991, %991, !dbg !12
  %1248 = fmul float %992, %992, !dbg !12
  %1249 = fmul float %993, %993, !dbg !12
  %1250 = fmul float %994, %994, !dbg !12
  %1251 = fmul float %995, %995, !dbg !12
  %1252 = fmul float %996, %996, !dbg !12
  %1253 = fmul float %997, %997, !dbg !12
  %1254 = fmul float %998, %998, !dbg !12
  %1255 = fmul float %999, %999, !dbg !12
  %1256 = fmul float %1000, %1000, !dbg !12
  %1257 = fmul float %1001, %1001, !dbg !12
  %1258 = fmul float %1002, %1002, !dbg !12
  %1259 = fmul float %1003, %1003, !dbg !12
  %1260 = fmul float %1004, %1004, !dbg !12
  %1261 = fmul float %1005, %1005, !dbg !12
  %1262 = fmul float %1006, %1006, !dbg !12
  %1263 = fmul float %1007, %1007, !dbg !12
  %1264 = fmul float %1008, %1008, !dbg !12
  %1265 = fmul float %1009, %1009, !dbg !12
  %1266 = fmul float %1010, %1010, !dbg !12
  %1267 = fmul float %1011, %1011, !dbg !12
  %1268 = fmul float %1012, %1012, !dbg !12
  %1269 = fmul float %1013, %1013, !dbg !12
  %1270 = fmul float %1014, %1014, !dbg !12
  %1271 = fmul float %1015, %1015, !dbg !12
  %1272 = fmul float %1016, %1016, !dbg !12
  %1273 = fmul float %1017, %1017, !dbg !12
  %1274 = fmul float %1018, %1018, !dbg !12
  %1275 = fmul float %1019, %1019, !dbg !12
  %1276 = fmul float %1020, %1020, !dbg !12
  %1277 = fmul float %1021, %1021, !dbg !12
  %1278 = fmul float %1022, %1022, !dbg !12
  %1279 = fmul float %1023, %1023, !dbg !12
  %1280 = fmul float %1024, %1024, !dbg !12
  %1281 = fmul float %1025, %1025, !dbg !12
  %1282 = fmul float %1026, %1026, !dbg !12
  %1283 = fmul float %1027, %1027, !dbg !12
  %1284 = fmul float %1028, %1028, !dbg !12
  %1285 = fmul float %1029, %1029, !dbg !12
  %1286 = fmul float %1030, %1030, !dbg !12
  %1287 = fmul float %1031, %1031, !dbg !12
  %1288 = fmul float %1032, %1032, !dbg !12
  %1289 = fmul float %1033, %1033, !dbg !12
  %1290 = fmul float %1034, %1034, !dbg !12
  %1291 = fmul float %1035, %1035, !dbg !12
  %1292 = fmul float %1036, %1036, !dbg !12
  %1293 = fmul float %1037, %1037, !dbg !12
  %1294 = fmul float %1038, %1038, !dbg !12
  %1295 = fmul float %1039, %1039, !dbg !12
  %1296 = fmul float %1040, %1040, !dbg !12
  %1297 = fmul float %1041, %1041, !dbg !12
  %1298 = fmul float %1042, %1042, !dbg !12
  %1299 = fmul float %1043, %1043, !dbg !12
  %1300 = fmul float %1044, %1044, !dbg !12
  %1301 = fmul float %1045, %1045, !dbg !12
  %1302 = fmul float %1046, %1046, !dbg !12
  %1303 = fmul float %1047, %1047, !dbg !12
  %1304 = fmul float %1048, %1048, !dbg !12
  %1305 = fmul float %1049, %1049, !dbg !12
  %1306 = fmul float %1050, %1050, !dbg !12
  %1307 = fmul float %1051, %1051, !dbg !12
  %1308 = fmul float %1052, %1052, !dbg !12
  %1309 = fmul float %1053, %1053, !dbg !12
  %1310 = fmul float %1054, %1054, !dbg !12
  %1311 = fmul float %1055, %1055, !dbg !12
  %1312 = fmul float %1056, %1056, !dbg !12
  %1313 = fmul float %1057, %1057, !dbg !12
  %1314 = fmul float %1058, %1058, !dbg !12
  %1315 = fmul float %1059, %1059, !dbg !12
  %1316 = fmul float %1060, %1060, !dbg !12
  %1317 = fmul float %1061, %1061, !dbg !12
  %1318 = fmul float %1062, %1062, !dbg !12
  %1319 = fmul float %1063, %1063, !dbg !12
  %1320 = fadd float %1064, %1065, !dbg !13
  %1321 = fadd float %1066, %1320, !dbg !13
  %1322 = fadd float %1067, %1321, !dbg !13
  %1323 = fadd float %1068, %1322, !dbg !13
  %1324 = fadd float %1069, %1323, !dbg !13
  %1325 = fadd float %1070, %1324, !dbg !13
  %1326 = fadd float %1071, %1325, !dbg !13
  %1327 = fadd float %1072, %1073, !dbg !13
  %1328 = fadd float %1074, %1327, !dbg !13
  %1329 = fadd float %1075, %1328, !dbg !13
  %1330 = fadd float %1076, %1329, !dbg !13
  %1331 = fadd float %1077, %1330, !dbg !13
  %1332 = fadd float %1078, %1331, !dbg !13
  %1333 = fadd float %1079, %1332, !dbg !13
  %1334 = fadd float %1080, %1081, !dbg !13
  %1335 = fadd float %1082, %1334, !dbg !13
  %1336 = fadd float %1083, %1335, !dbg !13
  %1337 = fadd float %1084, %1336, !dbg !13
  %1338 = fadd float %1085, %1337, !dbg !13
  %1339 = fadd float %1086, %1338, !dbg !13
  %1340 = fadd float %1087, %1339, !dbg !13
  %1341 = fadd float %1088, %1089, !dbg !13
  %1342 = fadd float %1090, %1341, !dbg !13
  %1343 = fadd float %1091, %1342, !dbg !13
  %1344 = fadd float %1092, %1343, !dbg !13
  %1345 = fadd float %1093, %1344, !dbg !13
  %1346 = fadd float %1094, %1345, !dbg !13
  %1347 = fadd float %1095, %1346, !dbg !13
  %1348 = fadd float %1096, %1097, !dbg !13
  %1349 = fadd float %1098, %1348, !dbg !13
  %1350 = fadd float %1099, %1349, !dbg !13
  %1351 = fadd float %1100, %1350, !dbg !13
  %1352 = fadd float %1101, %1351, !dbg !13
  %1353 = fadd float %1102, %1352, !dbg !13
  %1354 = fadd float %1103, %1353, !dbg !13
  %1355 = fadd float %1104, %1105, !dbg !13
  %1356 = fadd float %1106, %1355, !dbg !13
  %1357 = fadd float %1107, %1356, !dbg !13
  %1358 = fadd float %1108, %1357, !dbg !13
  %1359 = fadd float %1109, %1358, !dbg !13
  %1360 = fadd float %1110, %1359, !dbg !13
  %1361 = fadd float %1111, %1360, !dbg !13
  %1362 = fadd float %1112, %1113, !dbg !13
  %1363 = fadd float %1114, %1362, !dbg !13
  %1364 = fadd float %1115, %1363, !dbg !13
  %1365 = fadd float %1116, %1364, !dbg !13
  %1366 = fadd float %1117, %1365, !dbg !13
  %1367 = fadd float %1118, %1366, !dbg !13
  %1368 = fadd float %1119, %1367, !dbg !13
  %1369 = fadd float %1120, %1121, !dbg !13
  %1370 = fadd float %1122, %1369, !dbg !13
  %1371 = fadd float %1123, %1370, !dbg !13
  %1372 = fadd float %1124, %1371, !dbg !13
  %1373 = fadd float %1125, %1372, !dbg !13
  %1374 = fadd float %1126, %1373, !dbg !13
  %1375 = fadd float %1127, %1374, !dbg !13
  %1376 = fadd float %1128, %1129, !dbg !13
  %1377 = fadd float %1130, %1376, !dbg !13
  %1378 = fadd float %1131, %1377, !dbg !13
  %1379 = fadd float %1132, %1378, !dbg !13
  %1380 = fadd float %1133, %1379, !dbg !13
  %1381 = fadd float %1134, %1380, !dbg !13
  %1382 = fadd float %1135, %1381, !dbg !13
  %1383 = fadd float %1136, %1137, !dbg !13
  %1384 = fadd float %1138, %1383, !dbg !13
  %1385 = fadd float %1139, %1384, !dbg !13
  %1386 = fadd float %1140, %1385, !dbg !13
  %1387 = fadd float %1141, %1386, !dbg !13
  %1388 = fadd float %1142, %1387, !dbg !13
  %1389 = fadd float %1143, %1388, !dbg !13
  %1390 = fadd float %1144, %1145, !dbg !13
  %1391 = fadd float %1146, %1390, !dbg !13
  %1392 = fadd float %1147, %1391, !dbg !13
  %1393 = fadd float %1148, %1392, !dbg !13
  %1394 = fadd float %1149, %1393, !dbg !13
  %1395 = fadd float %1150, %1394, !dbg !13
  %1396 = fadd float %1151, %1395, !dbg !13
  %1397 = fadd float %1152, %1153, !dbg !13
  %1398 = fadd float %1154, %1397, !dbg !13
  %1399 = fadd float %1155, %1398, !dbg !13
  %1400 = fadd float %1156, %1399, !dbg !13
  %1401 = fadd float %1157, %1400, !dbg !13
  %1402 = fadd float %1158, %1401, !dbg !13
  %1403 = fadd float %1159, %1402, !dbg !13
  %1404 = fadd float %1160, %1161, !dbg !13
  %1405 = fadd float %1162, %1404, !dbg !13
  %1406 = fadd float %1163, %1405, !dbg !13
  %1407 = fadd float %1164, %1406, !dbg !13
  %1408 = fadd float %1165, %1407, !dbg !13
  %1409 = fadd float %1166, %1408, !dbg !13
  %1410 = fadd float %1167, %1409, !dbg !13
  %1411 = fadd float %1168, %1169, !dbg !13
  %1412 = fadd float %1170, %1411, !dbg !13
  %1413 = fadd float %1171, %1412, !dbg !13
  %1414 = fadd float %1172, %1413, !dbg !13
  %1415 = fadd float %1173, %1414, !dbg !13
  %1416 = fadd float %1174, %1415, !dbg !13
  %1417 = fadd float %1175, %1416, !dbg !13
  %1418 = fadd float %1176, %1177, !dbg !13
  %1419 = fadd float %1178, %1418, !dbg !13
  %1420 = fadd float %1179, %1419, !dbg !13
  %1421 = fadd float %1180, %1420, !dbg !13
  %1422 = fadd float %1181, %1421, !dbg !13
  %1423 = fadd float %1182, %1422, !dbg !13
  %1424 = fadd float %1183, %1423, !dbg !13
  %1425 = fadd float %1184, %1185, !dbg !13
  %1426 = fadd float %1186, %1425, !dbg !13
  %1427 = fadd float %1187, %1426, !dbg !13
  %1428 = fadd float %1188, %1427, !dbg !13
  %1429 = fadd float %1189, %1428, !dbg !13
  %1430 = fadd float %1190, %1429, !dbg !13
  %1431 = fadd float %1191, %1430, !dbg !13
  %1432 = fadd float %1192, %1193, !dbg !13
  %1433 = fadd float %1194, %1432, !dbg !13
  %1434 = fadd float %1195, %1433, !dbg !13
  %1435 = fadd float %1196, %1434, !dbg !13
  %1436 = fadd float %1197, %1435, !dbg !13
  %1437 = fadd float %1198, %1436, !dbg !13
  %1438 = fadd float %1199, %1437, !dbg !13
  %1439 = fadd float %1200, %1201, !dbg !13
  %1440 = fadd float %1202, %1439, !dbg !13
  %1441 = fadd float %1203, %1440, !dbg !13
  %1442 = fadd float %1204, %1441, !dbg !13
  %1443 = fadd float %1205, %1442, !dbg !13
  %1444 = fadd float %1206, %1443, !dbg !13
  %1445 = fadd float %1207, %1444, !dbg !13
  %1446 = fadd float %1208, %1209, !dbg !13
  %1447 = fadd float %1210, %1446, !dbg !13
  %1448 = fadd float %1211, %1447, !dbg !13
  %1449 = fadd float %1212, %1448, !dbg !13
  %1450 = fadd float %1213, %1449, !dbg !13
  %1451 = fadd float %1214, %1450, !dbg !13
  %1452 = fadd float %1215, %1451, !dbg !13
  %1453 = fadd float %1216, %1217, !dbg !13
  %1454 = fadd float %1218, %1453, !dbg !13
  %1455 = fadd float %1219, %1454, !dbg !13
  %1456 = fadd float %1220, %1455, !dbg !13
  %1457 = fadd float %1221, %1456, !dbg !13
  %1458 = fadd float %1222, %1457, !dbg !13
  %1459 = fadd float %1223, %1458, !dbg !13
  %1460 = fadd float %1224, %1225, !dbg !13
  %1461 = fadd float %1226, %1460, !dbg !13
  %1462 = fadd float %1227, %1461, !dbg !13
  %1463 = fadd float %1228, %1462, !dbg !13
  %1464 = fadd float %1229, %1463, !dbg !13
  %1465 = fadd float %1230, %1464, !dbg !13
  %1466 = fadd float %1231, %1465, !dbg !13
  %1467 = fadd float %1232, %1233, !dbg !13
  %1468 = fadd float %1234, %1467, !dbg !13
  %1469 = fadd float %1235, %1468, !dbg !13
  %1470 = fadd float %1236, %1469, !dbg !13
  %1471 = fadd float %1237, %1470, !dbg !13
  %1472 = fadd float %1238, %1471, !dbg !13
  %1473 = fadd float %1239, %1472, !dbg !13
  %1474 = fadd float %1240, %1241, !dbg !13
  %1475 = fadd float %1242, %1474, !dbg !13
  %1476 = fadd float %1243, %1475, !dbg !13
  %1477 = fadd float %1244, %1476, !dbg !13
  %1478 = fadd float %1245, %1477, !dbg !13
  %1479 = fadd float %1246, %1478, !dbg !13
  %1480 = fadd float %1247, %1479, !dbg !13
  %1481 = fadd float %1248, %1249, !dbg !13
  %1482 = fadd float %1250, %1481, !dbg !13
  %1483 = fadd float %1251, %1482, !dbg !13
  %1484 = fadd float %1252, %1483, !dbg !13
  %1485 = fadd float %1253, %1484, !dbg !13
  %1486 = fadd float %1254, %1485, !dbg !13
  %1487 = fadd float %1255, %1486, !dbg !13
  %1488 = fadd float %1256, %1257, !dbg !13
  %1489 = fadd float %1258, %1488, !dbg !13
  %1490 = fadd float %1259, %1489, !dbg !13
  %1491 = fadd float %1260, %1490, !dbg !13
  %1492 = fadd float %1261, %1491, !dbg !13
  %1493 = fadd float %1262, %1492, !dbg !13
  %1494 = fadd float %1263, %1493, !dbg !13
  %1495 = fadd float %1264, %1265, !dbg !13
  %1496 = fadd float %1266, %1495, !dbg !13
  %1497 = fadd float %1267, %1496, !dbg !13
  %1498 = fadd float %1268, %1497, !dbg !13
  %1499 = fadd float %1269, %1498, !dbg !13
  %1500 = fadd float %1270, %1499, !dbg !13
  %1501 = fadd float %1271, %1500, !dbg !13
  %1502 = fadd float %1272, %1273, !dbg !13
  %1503 = fadd float %1274, %1502, !dbg !13
  %1504 = fadd float %1275, %1503, !dbg !13
  %1505 = fadd float %1276, %1504, !dbg !13
  %1506 = fadd float %1277, %1505, !dbg !13
  %1507 = fadd float %1278, %1506, !dbg !13
  %1508 = fadd float %1279, %1507, !dbg !13
  %1509 = fadd float %1280, %1281, !dbg !13
  %1510 = fadd float %1282, %1509, !dbg !13
  %1511 = fadd float %1283, %1510, !dbg !13
  %1512 = fadd float %1284, %1511, !dbg !13
  %1513 = fadd float %1285, %1512, !dbg !13
  %1514 = fadd float %1286, %1513, !dbg !13
  %1515 = fadd float %1287, %1514, !dbg !13
  %1516 = fadd float %1288, %1289, !dbg !13
  %1517 = fadd float %1290, %1516, !dbg !13
  %1518 = fadd float %1291, %1517, !dbg !13
  %1519 = fadd float %1292, %1518, !dbg !13
  %1520 = fadd float %1293, %1519, !dbg !13
  %1521 = fadd float %1294, %1520, !dbg !13
  %1522 = fadd float %1295, %1521, !dbg !13
  %1523 = fadd float %1296, %1297, !dbg !13
  %1524 = fadd float %1298, %1523, !dbg !13
  %1525 = fadd float %1299, %1524, !dbg !13
  %1526 = fadd float %1300, %1525, !dbg !13
  %1527 = fadd float %1301, %1526, !dbg !13
  %1528 = fadd float %1302, %1527, !dbg !13
  %1529 = fadd float %1303, %1528, !dbg !13
  %1530 = fadd float %1304, %1305, !dbg !13
  %1531 = fadd float %1306, %1530, !dbg !13
  %1532 = fadd float %1307, %1531, !dbg !13
  %1533 = fadd float %1308, %1532, !dbg !13
  %1534 = fadd float %1309, %1533, !dbg !13
  %1535 = fadd float %1310, %1534, !dbg !13
  %1536 = fadd float %1311, %1535, !dbg !13
  %1537 = fadd float %1312, %1313, !dbg !13
  %1538 = fadd float %1314, %1537, !dbg !13
  %1539 = fadd float %1315, %1538, !dbg !13
  %1540 = fadd float %1316, %1539, !dbg !13
  %1541 = fadd float %1317, %1540, !dbg !13
  %1542 = fadd float %1318, %1541, !dbg !13
  %1543 = fadd float %1319, %1542, !dbg !13
  %1544 = bitcast float %1326 to i32, !dbg !17
  %1545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1544, i32 8, i32 31), !dbg !17
  %1546 = bitcast i32 %1545 to float, !dbg !17
  %1547 = fadd float %1326, %1546, !dbg !13
  %1548 = bitcast float %1547 to i32, !dbg !17
  %1549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1548, i32 4, i32 31), !dbg !17
  %1550 = bitcast i32 %1549 to float, !dbg !17
  %1551 = fadd float %1547, %1550, !dbg !13
  %1552 = bitcast float %1551 to i32, !dbg !17
  %1553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1552, i32 2, i32 31), !dbg !17
  %1554 = bitcast i32 %1553 to float, !dbg !17
  %1555 = fadd float %1551, %1554, !dbg !13
  %1556 = bitcast float %1555 to i32, !dbg !17
  %1557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1556, i32 1, i32 31), !dbg !17
  %1558 = bitcast i32 %1557 to float, !dbg !17
  %1559 = fadd float %1555, %1558, !dbg !13
  %1560 = bitcast float %1333 to i32, !dbg !17
  %1561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1560, i32 8, i32 31), !dbg !17
  %1562 = bitcast i32 %1561 to float, !dbg !17
  %1563 = fadd float %1333, %1562, !dbg !13
  %1564 = bitcast float %1563 to i32, !dbg !17
  %1565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1564, i32 4, i32 31), !dbg !17
  %1566 = bitcast i32 %1565 to float, !dbg !17
  %1567 = fadd float %1563, %1566, !dbg !13
  %1568 = bitcast float %1567 to i32, !dbg !17
  %1569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1568, i32 2, i32 31), !dbg !17
  %1570 = bitcast i32 %1569 to float, !dbg !17
  %1571 = fadd float %1567, %1570, !dbg !13
  %1572 = bitcast float %1571 to i32, !dbg !17
  %1573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1572, i32 1, i32 31), !dbg !17
  %1574 = bitcast i32 %1573 to float, !dbg !17
  %1575 = fadd float %1571, %1574, !dbg !13
  %1576 = bitcast float %1340 to i32, !dbg !17
  %1577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1576, i32 8, i32 31), !dbg !17
  %1578 = bitcast i32 %1577 to float, !dbg !17
  %1579 = fadd float %1340, %1578, !dbg !13
  %1580 = bitcast float %1579 to i32, !dbg !17
  %1581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1580, i32 4, i32 31), !dbg !17
  %1582 = bitcast i32 %1581 to float, !dbg !17
  %1583 = fadd float %1579, %1582, !dbg !13
  %1584 = bitcast float %1583 to i32, !dbg !17
  %1585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1584, i32 2, i32 31), !dbg !17
  %1586 = bitcast i32 %1585 to float, !dbg !17
  %1587 = fadd float %1583, %1586, !dbg !13
  %1588 = bitcast float %1587 to i32, !dbg !17
  %1589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1588, i32 1, i32 31), !dbg !17
  %1590 = bitcast i32 %1589 to float, !dbg !17
  %1591 = fadd float %1587, %1590, !dbg !13
  %1592 = bitcast float %1347 to i32, !dbg !17
  %1593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1592, i32 8, i32 31), !dbg !17
  %1594 = bitcast i32 %1593 to float, !dbg !17
  %1595 = fadd float %1347, %1594, !dbg !13
  %1596 = bitcast float %1595 to i32, !dbg !17
  %1597 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1596, i32 4, i32 31), !dbg !17
  %1598 = bitcast i32 %1597 to float, !dbg !17
  %1599 = fadd float %1595, %1598, !dbg !13
  %1600 = bitcast float %1599 to i32, !dbg !17
  %1601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1600, i32 2, i32 31), !dbg !17
  %1602 = bitcast i32 %1601 to float, !dbg !17
  %1603 = fadd float %1599, %1602, !dbg !13
  %1604 = bitcast float %1603 to i32, !dbg !17
  %1605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1604, i32 1, i32 31), !dbg !17
  %1606 = bitcast i32 %1605 to float, !dbg !17
  %1607 = fadd float %1603, %1606, !dbg !13
  %1608 = bitcast float %1354 to i32, !dbg !17
  %1609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1608, i32 8, i32 31), !dbg !17
  %1610 = bitcast i32 %1609 to float, !dbg !17
  %1611 = fadd float %1354, %1610, !dbg !13
  %1612 = bitcast float %1611 to i32, !dbg !17
  %1613 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1612, i32 4, i32 31), !dbg !17
  %1614 = bitcast i32 %1613 to float, !dbg !17
  %1615 = fadd float %1611, %1614, !dbg !13
  %1616 = bitcast float %1615 to i32, !dbg !17
  %1617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1616, i32 2, i32 31), !dbg !17
  %1618 = bitcast i32 %1617 to float, !dbg !17
  %1619 = fadd float %1615, %1618, !dbg !13
  %1620 = bitcast float %1619 to i32, !dbg !17
  %1621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1620, i32 1, i32 31), !dbg !17
  %1622 = bitcast i32 %1621 to float, !dbg !17
  %1623 = fadd float %1619, %1622, !dbg !13
  %1624 = bitcast float %1361 to i32, !dbg !17
  %1625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1624, i32 8, i32 31), !dbg !17
  %1626 = bitcast i32 %1625 to float, !dbg !17
  %1627 = fadd float %1361, %1626, !dbg !13
  %1628 = bitcast float %1627 to i32, !dbg !17
  %1629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1628, i32 4, i32 31), !dbg !17
  %1630 = bitcast i32 %1629 to float, !dbg !17
  %1631 = fadd float %1627, %1630, !dbg !13
  %1632 = bitcast float %1631 to i32, !dbg !17
  %1633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1632, i32 2, i32 31), !dbg !17
  %1634 = bitcast i32 %1633 to float, !dbg !17
  %1635 = fadd float %1631, %1634, !dbg !13
  %1636 = bitcast float %1635 to i32, !dbg !17
  %1637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1636, i32 1, i32 31), !dbg !17
  %1638 = bitcast i32 %1637 to float, !dbg !17
  %1639 = fadd float %1635, %1638, !dbg !13
  %1640 = bitcast float %1368 to i32, !dbg !17
  %1641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1640, i32 8, i32 31), !dbg !17
  %1642 = bitcast i32 %1641 to float, !dbg !17
  %1643 = fadd float %1368, %1642, !dbg !13
  %1644 = bitcast float %1643 to i32, !dbg !17
  %1645 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1644, i32 4, i32 31), !dbg !17
  %1646 = bitcast i32 %1645 to float, !dbg !17
  %1647 = fadd float %1643, %1646, !dbg !13
  %1648 = bitcast float %1647 to i32, !dbg !17
  %1649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1648, i32 2, i32 31), !dbg !17
  %1650 = bitcast i32 %1649 to float, !dbg !17
  %1651 = fadd float %1647, %1650, !dbg !13
  %1652 = bitcast float %1651 to i32, !dbg !17
  %1653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1652, i32 1, i32 31), !dbg !17
  %1654 = bitcast i32 %1653 to float, !dbg !17
  %1655 = fadd float %1651, %1654, !dbg !13
  %1656 = bitcast float %1375 to i32, !dbg !17
  %1657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1656, i32 8, i32 31), !dbg !17
  %1658 = bitcast i32 %1657 to float, !dbg !17
  %1659 = fadd float %1375, %1658, !dbg !13
  %1660 = bitcast float %1659 to i32, !dbg !17
  %1661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1660, i32 4, i32 31), !dbg !17
  %1662 = bitcast i32 %1661 to float, !dbg !17
  %1663 = fadd float %1659, %1662, !dbg !13
  %1664 = bitcast float %1663 to i32, !dbg !17
  %1665 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1664, i32 2, i32 31), !dbg !17
  %1666 = bitcast i32 %1665 to float, !dbg !17
  %1667 = fadd float %1663, %1666, !dbg !13
  %1668 = bitcast float %1667 to i32, !dbg !17
  %1669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1668, i32 1, i32 31), !dbg !17
  %1670 = bitcast i32 %1669 to float, !dbg !17
  %1671 = fadd float %1667, %1670, !dbg !13
  %1672 = bitcast float %1382 to i32, !dbg !17
  %1673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1672, i32 8, i32 31), !dbg !17
  %1674 = bitcast i32 %1673 to float, !dbg !17
  %1675 = fadd float %1382, %1674, !dbg !13
  %1676 = bitcast float %1675 to i32, !dbg !17
  %1677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1676, i32 4, i32 31), !dbg !17
  %1678 = bitcast i32 %1677 to float, !dbg !17
  %1679 = fadd float %1675, %1678, !dbg !13
  %1680 = bitcast float %1679 to i32, !dbg !17
  %1681 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1680, i32 2, i32 31), !dbg !17
  %1682 = bitcast i32 %1681 to float, !dbg !17
  %1683 = fadd float %1679, %1682, !dbg !13
  %1684 = bitcast float %1683 to i32, !dbg !17
  %1685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1684, i32 1, i32 31), !dbg !17
  %1686 = bitcast i32 %1685 to float, !dbg !17
  %1687 = fadd float %1683, %1686, !dbg !13
  %1688 = bitcast float %1389 to i32, !dbg !17
  %1689 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1688, i32 8, i32 31), !dbg !17
  %1690 = bitcast i32 %1689 to float, !dbg !17
  %1691 = fadd float %1389, %1690, !dbg !13
  %1692 = bitcast float %1691 to i32, !dbg !17
  %1693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1692, i32 4, i32 31), !dbg !17
  %1694 = bitcast i32 %1693 to float, !dbg !17
  %1695 = fadd float %1691, %1694, !dbg !13
  %1696 = bitcast float %1695 to i32, !dbg !17
  %1697 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1696, i32 2, i32 31), !dbg !17
  %1698 = bitcast i32 %1697 to float, !dbg !17
  %1699 = fadd float %1695, %1698, !dbg !13
  %1700 = bitcast float %1699 to i32, !dbg !17
  %1701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1700, i32 1, i32 31), !dbg !17
  %1702 = bitcast i32 %1701 to float, !dbg !17
  %1703 = fadd float %1699, %1702, !dbg !13
  %1704 = bitcast float %1396 to i32, !dbg !17
  %1705 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1704, i32 8, i32 31), !dbg !17
  %1706 = bitcast i32 %1705 to float, !dbg !17
  %1707 = fadd float %1396, %1706, !dbg !13
  %1708 = bitcast float %1707 to i32, !dbg !17
  %1709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1708, i32 4, i32 31), !dbg !17
  %1710 = bitcast i32 %1709 to float, !dbg !17
  %1711 = fadd float %1707, %1710, !dbg !13
  %1712 = bitcast float %1711 to i32, !dbg !17
  %1713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1712, i32 2, i32 31), !dbg !17
  %1714 = bitcast i32 %1713 to float, !dbg !17
  %1715 = fadd float %1711, %1714, !dbg !13
  %1716 = bitcast float %1715 to i32, !dbg !17
  %1717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1716, i32 1, i32 31), !dbg !17
  %1718 = bitcast i32 %1717 to float, !dbg !17
  %1719 = fadd float %1715, %1718, !dbg !13
  %1720 = bitcast float %1403 to i32, !dbg !17
  %1721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1720, i32 8, i32 31), !dbg !17
  %1722 = bitcast i32 %1721 to float, !dbg !17
  %1723 = fadd float %1403, %1722, !dbg !13
  %1724 = bitcast float %1723 to i32, !dbg !17
  %1725 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1724, i32 4, i32 31), !dbg !17
  %1726 = bitcast i32 %1725 to float, !dbg !17
  %1727 = fadd float %1723, %1726, !dbg !13
  %1728 = bitcast float %1727 to i32, !dbg !17
  %1729 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1728, i32 2, i32 31), !dbg !17
  %1730 = bitcast i32 %1729 to float, !dbg !17
  %1731 = fadd float %1727, %1730, !dbg !13
  %1732 = bitcast float %1731 to i32, !dbg !17
  %1733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1732, i32 1, i32 31), !dbg !17
  %1734 = bitcast i32 %1733 to float, !dbg !17
  %1735 = fadd float %1731, %1734, !dbg !13
  %1736 = bitcast float %1410 to i32, !dbg !17
  %1737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1736, i32 8, i32 31), !dbg !17
  %1738 = bitcast i32 %1737 to float, !dbg !17
  %1739 = fadd float %1410, %1738, !dbg !13
  %1740 = bitcast float %1739 to i32, !dbg !17
  %1741 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1740, i32 4, i32 31), !dbg !17
  %1742 = bitcast i32 %1741 to float, !dbg !17
  %1743 = fadd float %1739, %1742, !dbg !13
  %1744 = bitcast float %1743 to i32, !dbg !17
  %1745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1744, i32 2, i32 31), !dbg !17
  %1746 = bitcast i32 %1745 to float, !dbg !17
  %1747 = fadd float %1743, %1746, !dbg !13
  %1748 = bitcast float %1747 to i32, !dbg !17
  %1749 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1748, i32 1, i32 31), !dbg !17
  %1750 = bitcast i32 %1749 to float, !dbg !17
  %1751 = fadd float %1747, %1750, !dbg !13
  %1752 = bitcast float %1417 to i32, !dbg !17
  %1753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1752, i32 8, i32 31), !dbg !17
  %1754 = bitcast i32 %1753 to float, !dbg !17
  %1755 = fadd float %1417, %1754, !dbg !13
  %1756 = bitcast float %1755 to i32, !dbg !17
  %1757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1756, i32 4, i32 31), !dbg !17
  %1758 = bitcast i32 %1757 to float, !dbg !17
  %1759 = fadd float %1755, %1758, !dbg !13
  %1760 = bitcast float %1759 to i32, !dbg !17
  %1761 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1760, i32 2, i32 31), !dbg !17
  %1762 = bitcast i32 %1761 to float, !dbg !17
  %1763 = fadd float %1759, %1762, !dbg !13
  %1764 = bitcast float %1763 to i32, !dbg !17
  %1765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1764, i32 1, i32 31), !dbg !17
  %1766 = bitcast i32 %1765 to float, !dbg !17
  %1767 = fadd float %1763, %1766, !dbg !13
  %1768 = bitcast float %1424 to i32, !dbg !17
  %1769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1768, i32 8, i32 31), !dbg !17
  %1770 = bitcast i32 %1769 to float, !dbg !17
  %1771 = fadd float %1424, %1770, !dbg !13
  %1772 = bitcast float %1771 to i32, !dbg !17
  %1773 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1772, i32 4, i32 31), !dbg !17
  %1774 = bitcast i32 %1773 to float, !dbg !17
  %1775 = fadd float %1771, %1774, !dbg !13
  %1776 = bitcast float %1775 to i32, !dbg !17
  %1777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1776, i32 2, i32 31), !dbg !17
  %1778 = bitcast i32 %1777 to float, !dbg !17
  %1779 = fadd float %1775, %1778, !dbg !13
  %1780 = bitcast float %1779 to i32, !dbg !17
  %1781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1780, i32 1, i32 31), !dbg !17
  %1782 = bitcast i32 %1781 to float, !dbg !17
  %1783 = fadd float %1779, %1782, !dbg !13
  %1784 = bitcast float %1431 to i32, !dbg !17
  %1785 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1784, i32 8, i32 31), !dbg !17
  %1786 = bitcast i32 %1785 to float, !dbg !17
  %1787 = fadd float %1431, %1786, !dbg !13
  %1788 = bitcast float %1787 to i32, !dbg !17
  %1789 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1788, i32 4, i32 31), !dbg !17
  %1790 = bitcast i32 %1789 to float, !dbg !17
  %1791 = fadd float %1787, %1790, !dbg !13
  %1792 = bitcast float %1791 to i32, !dbg !17
  %1793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1792, i32 2, i32 31), !dbg !17
  %1794 = bitcast i32 %1793 to float, !dbg !17
  %1795 = fadd float %1791, %1794, !dbg !13
  %1796 = bitcast float %1795 to i32, !dbg !17
  %1797 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1796, i32 1, i32 31), !dbg !17
  %1798 = bitcast i32 %1797 to float, !dbg !17
  %1799 = fadd float %1795, %1798, !dbg !13
  %1800 = bitcast float %1438 to i32, !dbg !17
  %1801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1800, i32 8, i32 31), !dbg !17
  %1802 = bitcast i32 %1801 to float, !dbg !17
  %1803 = fadd float %1438, %1802, !dbg !13
  %1804 = bitcast float %1803 to i32, !dbg !17
  %1805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1804, i32 4, i32 31), !dbg !17
  %1806 = bitcast i32 %1805 to float, !dbg !17
  %1807 = fadd float %1803, %1806, !dbg !13
  %1808 = bitcast float %1807 to i32, !dbg !17
  %1809 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1808, i32 2, i32 31), !dbg !17
  %1810 = bitcast i32 %1809 to float, !dbg !17
  %1811 = fadd float %1807, %1810, !dbg !13
  %1812 = bitcast float %1811 to i32, !dbg !17
  %1813 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1812, i32 1, i32 31), !dbg !17
  %1814 = bitcast i32 %1813 to float, !dbg !17
  %1815 = fadd float %1811, %1814, !dbg !13
  %1816 = bitcast float %1445 to i32, !dbg !17
  %1817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1816, i32 8, i32 31), !dbg !17
  %1818 = bitcast i32 %1817 to float, !dbg !17
  %1819 = fadd float %1445, %1818, !dbg !13
  %1820 = bitcast float %1819 to i32, !dbg !17
  %1821 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1820, i32 4, i32 31), !dbg !17
  %1822 = bitcast i32 %1821 to float, !dbg !17
  %1823 = fadd float %1819, %1822, !dbg !13
  %1824 = bitcast float %1823 to i32, !dbg !17
  %1825 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1824, i32 2, i32 31), !dbg !17
  %1826 = bitcast i32 %1825 to float, !dbg !17
  %1827 = fadd float %1823, %1826, !dbg !13
  %1828 = bitcast float %1827 to i32, !dbg !17
  %1829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1828, i32 1, i32 31), !dbg !17
  %1830 = bitcast i32 %1829 to float, !dbg !17
  %1831 = fadd float %1827, %1830, !dbg !13
  %1832 = bitcast float %1452 to i32, !dbg !17
  %1833 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1832, i32 8, i32 31), !dbg !17
  %1834 = bitcast i32 %1833 to float, !dbg !17
  %1835 = fadd float %1452, %1834, !dbg !13
  %1836 = bitcast float %1835 to i32, !dbg !17
  %1837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1836, i32 4, i32 31), !dbg !17
  %1838 = bitcast i32 %1837 to float, !dbg !17
  %1839 = fadd float %1835, %1838, !dbg !13
  %1840 = bitcast float %1839 to i32, !dbg !17
  %1841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1840, i32 2, i32 31), !dbg !17
  %1842 = bitcast i32 %1841 to float, !dbg !17
  %1843 = fadd float %1839, %1842, !dbg !13
  %1844 = bitcast float %1843 to i32, !dbg !17
  %1845 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1844, i32 1, i32 31), !dbg !17
  %1846 = bitcast i32 %1845 to float, !dbg !17
  %1847 = fadd float %1843, %1846, !dbg !13
  %1848 = bitcast float %1459 to i32, !dbg !17
  %1849 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1848, i32 8, i32 31), !dbg !17
  %1850 = bitcast i32 %1849 to float, !dbg !17
  %1851 = fadd float %1459, %1850, !dbg !13
  %1852 = bitcast float %1851 to i32, !dbg !17
  %1853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1852, i32 4, i32 31), !dbg !17
  %1854 = bitcast i32 %1853 to float, !dbg !17
  %1855 = fadd float %1851, %1854, !dbg !13
  %1856 = bitcast float %1855 to i32, !dbg !17
  %1857 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1856, i32 2, i32 31), !dbg !17
  %1858 = bitcast i32 %1857 to float, !dbg !17
  %1859 = fadd float %1855, %1858, !dbg !13
  %1860 = bitcast float %1859 to i32, !dbg !17
  %1861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1860, i32 1, i32 31), !dbg !17
  %1862 = bitcast i32 %1861 to float, !dbg !17
  %1863 = fadd float %1859, %1862, !dbg !13
  %1864 = bitcast float %1466 to i32, !dbg !17
  %1865 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1864, i32 8, i32 31), !dbg !17
  %1866 = bitcast i32 %1865 to float, !dbg !17
  %1867 = fadd float %1466, %1866, !dbg !13
  %1868 = bitcast float %1867 to i32, !dbg !17
  %1869 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1868, i32 4, i32 31), !dbg !17
  %1870 = bitcast i32 %1869 to float, !dbg !17
  %1871 = fadd float %1867, %1870, !dbg !13
  %1872 = bitcast float %1871 to i32, !dbg !17
  %1873 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1872, i32 2, i32 31), !dbg !17
  %1874 = bitcast i32 %1873 to float, !dbg !17
  %1875 = fadd float %1871, %1874, !dbg !13
  %1876 = bitcast float %1875 to i32, !dbg !17
  %1877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1876, i32 1, i32 31), !dbg !17
  %1878 = bitcast i32 %1877 to float, !dbg !17
  %1879 = fadd float %1875, %1878, !dbg !13
  %1880 = bitcast float %1473 to i32, !dbg !17
  %1881 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1880, i32 8, i32 31), !dbg !17
  %1882 = bitcast i32 %1881 to float, !dbg !17
  %1883 = fadd float %1473, %1882, !dbg !13
  %1884 = bitcast float %1883 to i32, !dbg !17
  %1885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1884, i32 4, i32 31), !dbg !17
  %1886 = bitcast i32 %1885 to float, !dbg !17
  %1887 = fadd float %1883, %1886, !dbg !13
  %1888 = bitcast float %1887 to i32, !dbg !17
  %1889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1888, i32 2, i32 31), !dbg !17
  %1890 = bitcast i32 %1889 to float, !dbg !17
  %1891 = fadd float %1887, %1890, !dbg !13
  %1892 = bitcast float %1891 to i32, !dbg !17
  %1893 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1892, i32 1, i32 31), !dbg !17
  %1894 = bitcast i32 %1893 to float, !dbg !17
  %1895 = fadd float %1891, %1894, !dbg !13
  %1896 = bitcast float %1480 to i32, !dbg !17
  %1897 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1896, i32 8, i32 31), !dbg !17
  %1898 = bitcast i32 %1897 to float, !dbg !17
  %1899 = fadd float %1480, %1898, !dbg !13
  %1900 = bitcast float %1899 to i32, !dbg !17
  %1901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1900, i32 4, i32 31), !dbg !17
  %1902 = bitcast i32 %1901 to float, !dbg !17
  %1903 = fadd float %1899, %1902, !dbg !13
  %1904 = bitcast float %1903 to i32, !dbg !17
  %1905 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1904, i32 2, i32 31), !dbg !17
  %1906 = bitcast i32 %1905 to float, !dbg !17
  %1907 = fadd float %1903, %1906, !dbg !13
  %1908 = bitcast float %1907 to i32, !dbg !17
  %1909 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1908, i32 1, i32 31), !dbg !17
  %1910 = bitcast i32 %1909 to float, !dbg !17
  %1911 = fadd float %1907, %1910, !dbg !13
  %1912 = bitcast float %1487 to i32, !dbg !17
  %1913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1912, i32 8, i32 31), !dbg !17
  %1914 = bitcast i32 %1913 to float, !dbg !17
  %1915 = fadd float %1487, %1914, !dbg !13
  %1916 = bitcast float %1915 to i32, !dbg !17
  %1917 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1916, i32 4, i32 31), !dbg !17
  %1918 = bitcast i32 %1917 to float, !dbg !17
  %1919 = fadd float %1915, %1918, !dbg !13
  %1920 = bitcast float %1919 to i32, !dbg !17
  %1921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1920, i32 2, i32 31), !dbg !17
  %1922 = bitcast i32 %1921 to float, !dbg !17
  %1923 = fadd float %1919, %1922, !dbg !13
  %1924 = bitcast float %1923 to i32, !dbg !17
  %1925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1924, i32 1, i32 31), !dbg !17
  %1926 = bitcast i32 %1925 to float, !dbg !17
  %1927 = fadd float %1923, %1926, !dbg !13
  %1928 = bitcast float %1494 to i32, !dbg !17
  %1929 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1928, i32 8, i32 31), !dbg !17
  %1930 = bitcast i32 %1929 to float, !dbg !17
  %1931 = fadd float %1494, %1930, !dbg !13
  %1932 = bitcast float %1931 to i32, !dbg !17
  %1933 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1932, i32 4, i32 31), !dbg !17
  %1934 = bitcast i32 %1933 to float, !dbg !17
  %1935 = fadd float %1931, %1934, !dbg !13
  %1936 = bitcast float %1935 to i32, !dbg !17
  %1937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1936, i32 2, i32 31), !dbg !17
  %1938 = bitcast i32 %1937 to float, !dbg !17
  %1939 = fadd float %1935, %1938, !dbg !13
  %1940 = bitcast float %1939 to i32, !dbg !17
  %1941 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1940, i32 1, i32 31), !dbg !17
  %1942 = bitcast i32 %1941 to float, !dbg !17
  %1943 = fadd float %1939, %1942, !dbg !13
  %1944 = bitcast float %1501 to i32, !dbg !17
  %1945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1944, i32 8, i32 31), !dbg !17
  %1946 = bitcast i32 %1945 to float, !dbg !17
  %1947 = fadd float %1501, %1946, !dbg !13
  %1948 = bitcast float %1947 to i32, !dbg !17
  %1949 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1948, i32 4, i32 31), !dbg !17
  %1950 = bitcast i32 %1949 to float, !dbg !17
  %1951 = fadd float %1947, %1950, !dbg !13
  %1952 = bitcast float %1951 to i32, !dbg !17
  %1953 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1952, i32 2, i32 31), !dbg !17
  %1954 = bitcast i32 %1953 to float, !dbg !17
  %1955 = fadd float %1951, %1954, !dbg !13
  %1956 = bitcast float %1955 to i32, !dbg !17
  %1957 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1956, i32 1, i32 31), !dbg !17
  %1958 = bitcast i32 %1957 to float, !dbg !17
  %1959 = fadd float %1955, %1958, !dbg !13
  %1960 = bitcast float %1508 to i32, !dbg !17
  %1961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1960, i32 8, i32 31), !dbg !17
  %1962 = bitcast i32 %1961 to float, !dbg !17
  %1963 = fadd float %1508, %1962, !dbg !13
  %1964 = bitcast float %1963 to i32, !dbg !17
  %1965 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1964, i32 4, i32 31), !dbg !17
  %1966 = bitcast i32 %1965 to float, !dbg !17
  %1967 = fadd float %1963, %1966, !dbg !13
  %1968 = bitcast float %1967 to i32, !dbg !17
  %1969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1968, i32 2, i32 31), !dbg !17
  %1970 = bitcast i32 %1969 to float, !dbg !17
  %1971 = fadd float %1967, %1970, !dbg !13
  %1972 = bitcast float %1971 to i32, !dbg !17
  %1973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1972, i32 1, i32 31), !dbg !17
  %1974 = bitcast i32 %1973 to float, !dbg !17
  %1975 = fadd float %1971, %1974, !dbg !13
  %1976 = bitcast float %1515 to i32, !dbg !17
  %1977 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1976, i32 8, i32 31), !dbg !17
  %1978 = bitcast i32 %1977 to float, !dbg !17
  %1979 = fadd float %1515, %1978, !dbg !13
  %1980 = bitcast float %1979 to i32, !dbg !17
  %1981 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1980, i32 4, i32 31), !dbg !17
  %1982 = bitcast i32 %1981 to float, !dbg !17
  %1983 = fadd float %1979, %1982, !dbg !13
  %1984 = bitcast float %1983 to i32, !dbg !17
  %1985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1984, i32 2, i32 31), !dbg !17
  %1986 = bitcast i32 %1985 to float, !dbg !17
  %1987 = fadd float %1983, %1986, !dbg !13
  %1988 = bitcast float %1987 to i32, !dbg !17
  %1989 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1988, i32 1, i32 31), !dbg !17
  %1990 = bitcast i32 %1989 to float, !dbg !17
  %1991 = fadd float %1987, %1990, !dbg !13
  %1992 = bitcast float %1522 to i32, !dbg !17
  %1993 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1992, i32 8, i32 31), !dbg !17
  %1994 = bitcast i32 %1993 to float, !dbg !17
  %1995 = fadd float %1522, %1994, !dbg !13
  %1996 = bitcast float %1995 to i32, !dbg !17
  %1997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1996, i32 4, i32 31), !dbg !17
  %1998 = bitcast i32 %1997 to float, !dbg !17
  %1999 = fadd float %1995, %1998, !dbg !13
  %2000 = bitcast float %1999 to i32, !dbg !17
  %2001 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2000, i32 2, i32 31), !dbg !17
  %2002 = bitcast i32 %2001 to float, !dbg !17
  %2003 = fadd float %1999, %2002, !dbg !13
  %2004 = bitcast float %2003 to i32, !dbg !17
  %2005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2004, i32 1, i32 31), !dbg !17
  %2006 = bitcast i32 %2005 to float, !dbg !17
  %2007 = fadd float %2003, %2006, !dbg !13
  %2008 = bitcast float %1529 to i32, !dbg !17
  %2009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2008, i32 8, i32 31), !dbg !17
  %2010 = bitcast i32 %2009 to float, !dbg !17
  %2011 = fadd float %1529, %2010, !dbg !13
  %2012 = bitcast float %2011 to i32, !dbg !17
  %2013 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2012, i32 4, i32 31), !dbg !17
  %2014 = bitcast i32 %2013 to float, !dbg !17
  %2015 = fadd float %2011, %2014, !dbg !13
  %2016 = bitcast float %2015 to i32, !dbg !17
  %2017 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2016, i32 2, i32 31), !dbg !17
  %2018 = bitcast i32 %2017 to float, !dbg !17
  %2019 = fadd float %2015, %2018, !dbg !13
  %2020 = bitcast float %2019 to i32, !dbg !17
  %2021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2020, i32 1, i32 31), !dbg !17
  %2022 = bitcast i32 %2021 to float, !dbg !17
  %2023 = fadd float %2019, %2022, !dbg !13
  %2024 = bitcast float %1536 to i32, !dbg !17
  %2025 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2024, i32 8, i32 31), !dbg !17
  %2026 = bitcast i32 %2025 to float, !dbg !17
  %2027 = fadd float %1536, %2026, !dbg !13
  %2028 = bitcast float %2027 to i32, !dbg !17
  %2029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2028, i32 4, i32 31), !dbg !17
  %2030 = bitcast i32 %2029 to float, !dbg !17
  %2031 = fadd float %2027, %2030, !dbg !13
  %2032 = bitcast float %2031 to i32, !dbg !17
  %2033 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2032, i32 2, i32 31), !dbg !17
  %2034 = bitcast i32 %2033 to float, !dbg !17
  %2035 = fadd float %2031, %2034, !dbg !13
  %2036 = bitcast float %2035 to i32, !dbg !17
  %2037 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2036, i32 1, i32 31), !dbg !17
  %2038 = bitcast i32 %2037 to float, !dbg !17
  %2039 = fadd float %2035, %2038, !dbg !13
  %2040 = bitcast float %1543 to i32, !dbg !17
  %2041 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2040, i32 8, i32 31), !dbg !17
  %2042 = bitcast i32 %2041 to float, !dbg !17
  %2043 = fadd float %1543, %2042, !dbg !13
  %2044 = bitcast float %2043 to i32, !dbg !17
  %2045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2044, i32 4, i32 31), !dbg !17
  %2046 = bitcast i32 %2045 to float, !dbg !17
  %2047 = fadd float %2043, %2046, !dbg !13
  %2048 = bitcast float %2047 to i32, !dbg !17
  %2049 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2048, i32 2, i32 31), !dbg !17
  %2050 = bitcast i32 %2049 to float, !dbg !17
  %2051 = fadd float %2047, %2050, !dbg !13
  %2052 = bitcast float %2051 to i32, !dbg !17
  %2053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2052, i32 1, i32 31), !dbg !17
  %2054 = bitcast i32 %2053 to float, !dbg !17
  %2055 = fadd float %2051, %2054, !dbg !13
  %2056 = fadd float %3, %1559, !dbg !18
  %2057 = fadd float %3, %1575, !dbg !18
  %2058 = fadd float %3, %1591, !dbg !18
  %2059 = fadd float %3, %1607, !dbg !18
  %2060 = fadd float %3, %1623, !dbg !18
  %2061 = fadd float %3, %1639, !dbg !18
  %2062 = fadd float %3, %1655, !dbg !18
  %2063 = fadd float %3, %1671, !dbg !18
  %2064 = fadd float %3, %1687, !dbg !18
  %2065 = fadd float %3, %1703, !dbg !18
  %2066 = fadd float %3, %1719, !dbg !18
  %2067 = fadd float %3, %1735, !dbg !18
  %2068 = fadd float %3, %1751, !dbg !18
  %2069 = fadd float %3, %1767, !dbg !18
  %2070 = fadd float %3, %1783, !dbg !18
  %2071 = fadd float %3, %1799, !dbg !18
  %2072 = fadd float %3, %1815, !dbg !18
  %2073 = fadd float %3, %1831, !dbg !18
  %2074 = fadd float %3, %1847, !dbg !18
  %2075 = fadd float %3, %1863, !dbg !18
  %2076 = fadd float %3, %1879, !dbg !18
  %2077 = fadd float %3, %1895, !dbg !18
  %2078 = fadd float %3, %1911, !dbg !18
  %2079 = fadd float %3, %1927, !dbg !18
  %2080 = fadd float %3, %1943, !dbg !18
  %2081 = fadd float %3, %1959, !dbg !18
  %2082 = fadd float %3, %1975, !dbg !18
  %2083 = fadd float %3, %1991, !dbg !18
  %2084 = fadd float %3, %2007, !dbg !18
  %2085 = fadd float %3, %2023, !dbg !18
  %2086 = fadd float %3, %2039, !dbg !18
  %2087 = fadd float %3, %2055, !dbg !18
  %2088 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i = icmp eq i32 %2088, 0, !dbg !19
  %2089 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i = icmp eq i32 %2089, 0, !dbg !19
  br i1 %.not.i, label %2095, label %2090, !dbg !19

2090:                                             ; preds = %5
  br i1 %.not1.i, label %2093, label %2091, !dbg !19

2091:                                             ; preds = %2090
  %2092 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2056) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2093:                                             ; preds = %2090
  %2094 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2056) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2095:                                             ; preds = %5
  br i1 %.not1.i, label %2098, label %2096, !dbg !19

2096:                                             ; preds = %2095
  %2097 = tail call float @llvm.nvvm.sqrt.rn.f(float %2056) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2098:                                             ; preds = %2095
  %2099 = tail call float @llvm.nvvm.sqrt.approx.f(float %2056) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

__nv_sqrtf.exit:                                  ; preds = %2091, %2093, %2096, %2098
  %.0.i = phi float [ %2092, %2091 ], [ %2094, %2093 ], [ %2097, %2096 ], [ %2099, %2098 ], !dbg !19
  %2100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i4 = icmp eq i32 %2100, 0, !dbg !19
  %2101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i7 = icmp eq i32 %2101, 0, !dbg !19
  br i1 %.not.i4, label %2107, label %2102, !dbg !19

2102:                                             ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %2105, label %2103, !dbg !19

2103:                                             ; preds = %2102
  %2104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit8, !dbg !19

2105:                                             ; preds = %2102
  %2106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit8, !dbg !19

2107:                                             ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %2110, label %2108, !dbg !19

2108:                                             ; preds = %2107
  %2109 = tail call float @llvm.nvvm.sqrt.rn.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit8, !dbg !19

2110:                                             ; preds = %2107
  %2111 = tail call float @llvm.nvvm.sqrt.approx.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit8, !dbg !19

__nv_sqrtf.exit8:                                 ; preds = %2103, %2105, %2108, %2110
  %.0.i6 = phi float [ %2104, %2103 ], [ %2106, %2105 ], [ %2109, %2108 ], [ %2111, %2110 ], !dbg !19
  %2112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i9 = icmp eq i32 %2112, 0, !dbg !19
  %2113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i12 = icmp eq i32 %2113, 0, !dbg !19
  br i1 %.not.i9, label %2119, label %2114, !dbg !19

2114:                                             ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %2117, label %2115, !dbg !19

2115:                                             ; preds = %2114
  %2116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit13, !dbg !19

2117:                                             ; preds = %2114
  %2118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit13, !dbg !19

2119:                                             ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %2122, label %2120, !dbg !19

2120:                                             ; preds = %2119
  %2121 = tail call float @llvm.nvvm.sqrt.rn.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit13, !dbg !19

2122:                                             ; preds = %2119
  %2123 = tail call float @llvm.nvvm.sqrt.approx.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit13, !dbg !19

__nv_sqrtf.exit13:                                ; preds = %2115, %2117, %2120, %2122
  %.0.i11 = phi float [ %2116, %2115 ], [ %2118, %2117 ], [ %2121, %2120 ], [ %2123, %2122 ], !dbg !19
  %2124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i14 = icmp eq i32 %2124, 0, !dbg !19
  %2125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i17 = icmp eq i32 %2125, 0, !dbg !19
  br i1 %.not.i14, label %2131, label %2126, !dbg !19

2126:                                             ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %2129, label %2127, !dbg !19

2127:                                             ; preds = %2126
  %2128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit18, !dbg !19

2129:                                             ; preds = %2126
  %2130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit18, !dbg !19

2131:                                             ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %2134, label %2132, !dbg !19

2132:                                             ; preds = %2131
  %2133 = tail call float @llvm.nvvm.sqrt.rn.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit18, !dbg !19

2134:                                             ; preds = %2131
  %2135 = tail call float @llvm.nvvm.sqrt.approx.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit18, !dbg !19

__nv_sqrtf.exit18:                                ; preds = %2127, %2129, %2132, %2134
  %.0.i16 = phi float [ %2128, %2127 ], [ %2130, %2129 ], [ %2133, %2132 ], [ %2135, %2134 ], !dbg !19
  %2136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i19 = icmp eq i32 %2136, 0, !dbg !19
  %2137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i22 = icmp eq i32 %2137, 0, !dbg !19
  br i1 %.not.i19, label %2143, label %2138, !dbg !19

2138:                                             ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %2141, label %2139, !dbg !19

2139:                                             ; preds = %2138
  %2140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit23, !dbg !19

2141:                                             ; preds = %2138
  %2142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit23, !dbg !19

2143:                                             ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %2146, label %2144, !dbg !19

2144:                                             ; preds = %2143
  %2145 = tail call float @llvm.nvvm.sqrt.rn.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit23, !dbg !19

2146:                                             ; preds = %2143
  %2147 = tail call float @llvm.nvvm.sqrt.approx.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit23, !dbg !19

__nv_sqrtf.exit23:                                ; preds = %2139, %2141, %2144, %2146
  %.0.i21 = phi float [ %2140, %2139 ], [ %2142, %2141 ], [ %2145, %2144 ], [ %2147, %2146 ], !dbg !19
  %2148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i24 = icmp eq i32 %2148, 0, !dbg !19
  %2149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i27 = icmp eq i32 %2149, 0, !dbg !19
  br i1 %.not.i24, label %2155, label %2150, !dbg !19

2150:                                             ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %2153, label %2151, !dbg !19

2151:                                             ; preds = %2150
  %2152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit28, !dbg !19

2153:                                             ; preds = %2150
  %2154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit28, !dbg !19

2155:                                             ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %2158, label %2156, !dbg !19

2156:                                             ; preds = %2155
  %2157 = tail call float @llvm.nvvm.sqrt.rn.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit28, !dbg !19

2158:                                             ; preds = %2155
  %2159 = tail call float @llvm.nvvm.sqrt.approx.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit28, !dbg !19

__nv_sqrtf.exit28:                                ; preds = %2151, %2153, %2156, %2158
  %.0.i26 = phi float [ %2152, %2151 ], [ %2154, %2153 ], [ %2157, %2156 ], [ %2159, %2158 ], !dbg !19
  %2160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i29 = icmp eq i32 %2160, 0, !dbg !19
  %2161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i32 = icmp eq i32 %2161, 0, !dbg !19
  br i1 %.not.i29, label %2167, label %2162, !dbg !19

2162:                                             ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %2165, label %2163, !dbg !19

2163:                                             ; preds = %2162
  %2164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit33, !dbg !19

2165:                                             ; preds = %2162
  %2166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit33, !dbg !19

2167:                                             ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %2170, label %2168, !dbg !19

2168:                                             ; preds = %2167
  %2169 = tail call float @llvm.nvvm.sqrt.rn.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit33, !dbg !19

2170:                                             ; preds = %2167
  %2171 = tail call float @llvm.nvvm.sqrt.approx.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit33, !dbg !19

__nv_sqrtf.exit33:                                ; preds = %2163, %2165, %2168, %2170
  %.0.i31 = phi float [ %2164, %2163 ], [ %2166, %2165 ], [ %2169, %2168 ], [ %2171, %2170 ], !dbg !19
  %2172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i34 = icmp eq i32 %2172, 0, !dbg !19
  %2173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i37 = icmp eq i32 %2173, 0, !dbg !19
  br i1 %.not.i34, label %2179, label %2174, !dbg !19

2174:                                             ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %2177, label %2175, !dbg !19

2175:                                             ; preds = %2174
  %2176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit38, !dbg !19

2177:                                             ; preds = %2174
  %2178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit38, !dbg !19

2179:                                             ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %2182, label %2180, !dbg !19

2180:                                             ; preds = %2179
  %2181 = tail call float @llvm.nvvm.sqrt.rn.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit38, !dbg !19

2182:                                             ; preds = %2179
  %2183 = tail call float @llvm.nvvm.sqrt.approx.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit38, !dbg !19

__nv_sqrtf.exit38:                                ; preds = %2175, %2177, %2180, %2182
  %.0.i36 = phi float [ %2176, %2175 ], [ %2178, %2177 ], [ %2181, %2180 ], [ %2183, %2182 ], !dbg !19
  %2184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i39 = icmp eq i32 %2184, 0, !dbg !19
  %2185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i42 = icmp eq i32 %2185, 0, !dbg !19
  br i1 %.not.i39, label %2191, label %2186, !dbg !19

2186:                                             ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %2189, label %2187, !dbg !19

2187:                                             ; preds = %2186
  %2188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit43, !dbg !19

2189:                                             ; preds = %2186
  %2190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit43, !dbg !19

2191:                                             ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %2194, label %2192, !dbg !19

2192:                                             ; preds = %2191
  %2193 = tail call float @llvm.nvvm.sqrt.rn.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit43, !dbg !19

2194:                                             ; preds = %2191
  %2195 = tail call float @llvm.nvvm.sqrt.approx.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit43, !dbg !19

__nv_sqrtf.exit43:                                ; preds = %2187, %2189, %2192, %2194
  %.0.i41 = phi float [ %2188, %2187 ], [ %2190, %2189 ], [ %2193, %2192 ], [ %2195, %2194 ], !dbg !19
  %2196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i44 = icmp eq i32 %2196, 0, !dbg !19
  %2197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i47 = icmp eq i32 %2197, 0, !dbg !19
  br i1 %.not.i44, label %2203, label %2198, !dbg !19

2198:                                             ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %2201, label %2199, !dbg !19

2199:                                             ; preds = %2198
  %2200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit48, !dbg !19

2201:                                             ; preds = %2198
  %2202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit48, !dbg !19

2203:                                             ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %2206, label %2204, !dbg !19

2204:                                             ; preds = %2203
  %2205 = tail call float @llvm.nvvm.sqrt.rn.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit48, !dbg !19

2206:                                             ; preds = %2203
  %2207 = tail call float @llvm.nvvm.sqrt.approx.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit48, !dbg !19

__nv_sqrtf.exit48:                                ; preds = %2199, %2201, %2204, %2206
  %.0.i46 = phi float [ %2200, %2199 ], [ %2202, %2201 ], [ %2205, %2204 ], [ %2207, %2206 ], !dbg !19
  %2208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i49 = icmp eq i32 %2208, 0, !dbg !19
  %2209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i52 = icmp eq i32 %2209, 0, !dbg !19
  br i1 %.not.i49, label %2215, label %2210, !dbg !19

2210:                                             ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %2213, label %2211, !dbg !19

2211:                                             ; preds = %2210
  %2212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit53, !dbg !19

2213:                                             ; preds = %2210
  %2214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit53, !dbg !19

2215:                                             ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %2218, label %2216, !dbg !19

2216:                                             ; preds = %2215
  %2217 = tail call float @llvm.nvvm.sqrt.rn.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit53, !dbg !19

2218:                                             ; preds = %2215
  %2219 = tail call float @llvm.nvvm.sqrt.approx.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit53, !dbg !19

__nv_sqrtf.exit53:                                ; preds = %2211, %2213, %2216, %2218
  %.0.i51 = phi float [ %2212, %2211 ], [ %2214, %2213 ], [ %2217, %2216 ], [ %2219, %2218 ], !dbg !19
  %2220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i54 = icmp eq i32 %2220, 0, !dbg !19
  %2221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i57 = icmp eq i32 %2221, 0, !dbg !19
  br i1 %.not.i54, label %2227, label %2222, !dbg !19

2222:                                             ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %2225, label %2223, !dbg !19

2223:                                             ; preds = %2222
  %2224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit58, !dbg !19

2225:                                             ; preds = %2222
  %2226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit58, !dbg !19

2227:                                             ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %2230, label %2228, !dbg !19

2228:                                             ; preds = %2227
  %2229 = tail call float @llvm.nvvm.sqrt.rn.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit58, !dbg !19

2230:                                             ; preds = %2227
  %2231 = tail call float @llvm.nvvm.sqrt.approx.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit58, !dbg !19

__nv_sqrtf.exit58:                                ; preds = %2223, %2225, %2228, %2230
  %.0.i56 = phi float [ %2224, %2223 ], [ %2226, %2225 ], [ %2229, %2228 ], [ %2231, %2230 ], !dbg !19
  %2232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i59 = icmp eq i32 %2232, 0, !dbg !19
  %2233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i62 = icmp eq i32 %2233, 0, !dbg !19
  br i1 %.not.i59, label %2239, label %2234, !dbg !19

2234:                                             ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %2237, label %2235, !dbg !19

2235:                                             ; preds = %2234
  %2236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit63, !dbg !19

2237:                                             ; preds = %2234
  %2238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit63, !dbg !19

2239:                                             ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %2242, label %2240, !dbg !19

2240:                                             ; preds = %2239
  %2241 = tail call float @llvm.nvvm.sqrt.rn.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit63, !dbg !19

2242:                                             ; preds = %2239
  %2243 = tail call float @llvm.nvvm.sqrt.approx.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit63, !dbg !19

__nv_sqrtf.exit63:                                ; preds = %2235, %2237, %2240, %2242
  %.0.i61 = phi float [ %2236, %2235 ], [ %2238, %2237 ], [ %2241, %2240 ], [ %2243, %2242 ], !dbg !19
  %2244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i64 = icmp eq i32 %2244, 0, !dbg !19
  %2245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i67 = icmp eq i32 %2245, 0, !dbg !19
  br i1 %.not.i64, label %2251, label %2246, !dbg !19

2246:                                             ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %2249, label %2247, !dbg !19

2247:                                             ; preds = %2246
  %2248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit68, !dbg !19

2249:                                             ; preds = %2246
  %2250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit68, !dbg !19

2251:                                             ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %2254, label %2252, !dbg !19

2252:                                             ; preds = %2251
  %2253 = tail call float @llvm.nvvm.sqrt.rn.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit68, !dbg !19

2254:                                             ; preds = %2251
  %2255 = tail call float @llvm.nvvm.sqrt.approx.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit68, !dbg !19

__nv_sqrtf.exit68:                                ; preds = %2247, %2249, %2252, %2254
  %.0.i66 = phi float [ %2248, %2247 ], [ %2250, %2249 ], [ %2253, %2252 ], [ %2255, %2254 ], !dbg !19
  %2256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i69 = icmp eq i32 %2256, 0, !dbg !19
  %2257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i72 = icmp eq i32 %2257, 0, !dbg !19
  br i1 %.not.i69, label %2263, label %2258, !dbg !19

2258:                                             ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %2261, label %2259, !dbg !19

2259:                                             ; preds = %2258
  %2260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit73, !dbg !19

2261:                                             ; preds = %2258
  %2262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit73, !dbg !19

2263:                                             ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %2266, label %2264, !dbg !19

2264:                                             ; preds = %2263
  %2265 = tail call float @llvm.nvvm.sqrt.rn.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit73, !dbg !19

2266:                                             ; preds = %2263
  %2267 = tail call float @llvm.nvvm.sqrt.approx.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit73, !dbg !19

__nv_sqrtf.exit73:                                ; preds = %2259, %2261, %2264, %2266
  %.0.i71 = phi float [ %2260, %2259 ], [ %2262, %2261 ], [ %2265, %2264 ], [ %2267, %2266 ], !dbg !19
  %2268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i74 = icmp eq i32 %2268, 0, !dbg !19
  %2269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i77 = icmp eq i32 %2269, 0, !dbg !19
  br i1 %.not.i74, label %2275, label %2270, !dbg !19

2270:                                             ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %2273, label %2271, !dbg !19

2271:                                             ; preds = %2270
  %2272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit78, !dbg !19

2273:                                             ; preds = %2270
  %2274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit78, !dbg !19

2275:                                             ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %2278, label %2276, !dbg !19

2276:                                             ; preds = %2275
  %2277 = tail call float @llvm.nvvm.sqrt.rn.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit78, !dbg !19

2278:                                             ; preds = %2275
  %2279 = tail call float @llvm.nvvm.sqrt.approx.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit78, !dbg !19

__nv_sqrtf.exit78:                                ; preds = %2271, %2273, %2276, %2278
  %.0.i76 = phi float [ %2272, %2271 ], [ %2274, %2273 ], [ %2277, %2276 ], [ %2279, %2278 ], !dbg !19
  %2280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i79 = icmp eq i32 %2280, 0, !dbg !19
  %2281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i82 = icmp eq i32 %2281, 0, !dbg !19
  br i1 %.not.i79, label %2287, label %2282, !dbg !19

2282:                                             ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %2285, label %2283, !dbg !19

2283:                                             ; preds = %2282
  %2284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit83, !dbg !19

2285:                                             ; preds = %2282
  %2286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit83, !dbg !19

2287:                                             ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %2290, label %2288, !dbg !19

2288:                                             ; preds = %2287
  %2289 = tail call float @llvm.nvvm.sqrt.rn.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit83, !dbg !19

2290:                                             ; preds = %2287
  %2291 = tail call float @llvm.nvvm.sqrt.approx.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit83, !dbg !19

__nv_sqrtf.exit83:                                ; preds = %2283, %2285, %2288, %2290
  %.0.i81 = phi float [ %2284, %2283 ], [ %2286, %2285 ], [ %2289, %2288 ], [ %2291, %2290 ], !dbg !19
  %2292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i84 = icmp eq i32 %2292, 0, !dbg !19
  %2293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i87 = icmp eq i32 %2293, 0, !dbg !19
  br i1 %.not.i84, label %2299, label %2294, !dbg !19

2294:                                             ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %2297, label %2295, !dbg !19

2295:                                             ; preds = %2294
  %2296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit88, !dbg !19

2297:                                             ; preds = %2294
  %2298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit88, !dbg !19

2299:                                             ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %2302, label %2300, !dbg !19

2300:                                             ; preds = %2299
  %2301 = tail call float @llvm.nvvm.sqrt.rn.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit88, !dbg !19

2302:                                             ; preds = %2299
  %2303 = tail call float @llvm.nvvm.sqrt.approx.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit88, !dbg !19

__nv_sqrtf.exit88:                                ; preds = %2295, %2297, %2300, %2302
  %.0.i86 = phi float [ %2296, %2295 ], [ %2298, %2297 ], [ %2301, %2300 ], [ %2303, %2302 ], !dbg !19
  %2304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i89 = icmp eq i32 %2304, 0, !dbg !19
  %2305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i92 = icmp eq i32 %2305, 0, !dbg !19
  br i1 %.not.i89, label %2311, label %2306, !dbg !19

2306:                                             ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %2309, label %2307, !dbg !19

2307:                                             ; preds = %2306
  %2308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit93, !dbg !19

2309:                                             ; preds = %2306
  %2310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit93, !dbg !19

2311:                                             ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %2314, label %2312, !dbg !19

2312:                                             ; preds = %2311
  %2313 = tail call float @llvm.nvvm.sqrt.rn.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit93, !dbg !19

2314:                                             ; preds = %2311
  %2315 = tail call float @llvm.nvvm.sqrt.approx.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit93, !dbg !19

__nv_sqrtf.exit93:                                ; preds = %2307, %2309, %2312, %2314
  %.0.i91 = phi float [ %2308, %2307 ], [ %2310, %2309 ], [ %2313, %2312 ], [ %2315, %2314 ], !dbg !19
  %2316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i94 = icmp eq i32 %2316, 0, !dbg !19
  %2317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i97 = icmp eq i32 %2317, 0, !dbg !19
  br i1 %.not.i94, label %2323, label %2318, !dbg !19

2318:                                             ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %2321, label %2319, !dbg !19

2319:                                             ; preds = %2318
  %2320 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit98, !dbg !19

2321:                                             ; preds = %2318
  %2322 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit98, !dbg !19

2323:                                             ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %2326, label %2324, !dbg !19

2324:                                             ; preds = %2323
  %2325 = tail call float @llvm.nvvm.sqrt.rn.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit98, !dbg !19

2326:                                             ; preds = %2323
  %2327 = tail call float @llvm.nvvm.sqrt.approx.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit98, !dbg !19

__nv_sqrtf.exit98:                                ; preds = %2319, %2321, %2324, %2326
  %.0.i96 = phi float [ %2320, %2319 ], [ %2322, %2321 ], [ %2325, %2324 ], [ %2327, %2326 ], !dbg !19
  %2328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i99 = icmp eq i32 %2328, 0, !dbg !19
  %2329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i102 = icmp eq i32 %2329, 0, !dbg !19
  br i1 %.not.i99, label %2335, label %2330, !dbg !19

2330:                                             ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %2333, label %2331, !dbg !19

2331:                                             ; preds = %2330
  %2332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit103, !dbg !19

2333:                                             ; preds = %2330
  %2334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit103, !dbg !19

2335:                                             ; preds = %__nv_sqrtf.exit98
  br i1 %.not1.i102, label %2338, label %2336, !dbg !19

2336:                                             ; preds = %2335
  %2337 = tail call float @llvm.nvvm.sqrt.rn.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit103, !dbg !19

2338:                                             ; preds = %2335
  %2339 = tail call float @llvm.nvvm.sqrt.approx.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit103, !dbg !19

__nv_sqrtf.exit103:                               ; preds = %2331, %2333, %2336, %2338
  %.0.i101 = phi float [ %2332, %2331 ], [ %2334, %2333 ], [ %2337, %2336 ], [ %2339, %2338 ], !dbg !19
  %2340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i104 = icmp eq i32 %2340, 0, !dbg !19
  %2341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i107 = icmp eq i32 %2341, 0, !dbg !19
  br i1 %.not.i104, label %2347, label %2342, !dbg !19

2342:                                             ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %2345, label %2343, !dbg !19

2343:                                             ; preds = %2342
  %2344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit108, !dbg !19

2345:                                             ; preds = %2342
  %2346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit108, !dbg !19

2347:                                             ; preds = %__nv_sqrtf.exit103
  br i1 %.not1.i107, label %2350, label %2348, !dbg !19

2348:                                             ; preds = %2347
  %2349 = tail call float @llvm.nvvm.sqrt.rn.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit108, !dbg !19

2350:                                             ; preds = %2347
  %2351 = tail call float @llvm.nvvm.sqrt.approx.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit108, !dbg !19

__nv_sqrtf.exit108:                               ; preds = %2343, %2345, %2348, %2350
  %.0.i106 = phi float [ %2344, %2343 ], [ %2346, %2345 ], [ %2349, %2348 ], [ %2351, %2350 ], !dbg !19
  %2352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i109 = icmp eq i32 %2352, 0, !dbg !19
  %2353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i112 = icmp eq i32 %2353, 0, !dbg !19
  br i1 %.not.i109, label %2359, label %2354, !dbg !19

2354:                                             ; preds = %__nv_sqrtf.exit108
  br i1 %.not1.i112, label %2357, label %2355, !dbg !19

2355:                                             ; preds = %2354
  %2356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit113, !dbg !19

2357:                                             ; preds = %2354
  %2358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit113, !dbg !19

2359:                                             ; preds = %__nv_sqrtf.exit108
  br i1 %.not1.i112, label %2362, label %2360, !dbg !19

2360:                                             ; preds = %2359
  %2361 = tail call float @llvm.nvvm.sqrt.rn.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit113, !dbg !19

2362:                                             ; preds = %2359
  %2363 = tail call float @llvm.nvvm.sqrt.approx.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit113, !dbg !19

__nv_sqrtf.exit113:                               ; preds = %2355, %2357, %2360, %2362
  %.0.i111 = phi float [ %2356, %2355 ], [ %2358, %2357 ], [ %2361, %2360 ], [ %2363, %2362 ], !dbg !19
  %2364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i114 = icmp eq i32 %2364, 0, !dbg !19
  %2365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i117 = icmp eq i32 %2365, 0, !dbg !19
  br i1 %.not.i114, label %2371, label %2366, !dbg !19

2366:                                             ; preds = %__nv_sqrtf.exit113
  br i1 %.not1.i117, label %2369, label %2367, !dbg !19

2367:                                             ; preds = %2366
  %2368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit118, !dbg !19

2369:                                             ; preds = %2366
  %2370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit118, !dbg !19

2371:                                             ; preds = %__nv_sqrtf.exit113
  br i1 %.not1.i117, label %2374, label %2372, !dbg !19

2372:                                             ; preds = %2371
  %2373 = tail call float @llvm.nvvm.sqrt.rn.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit118, !dbg !19

2374:                                             ; preds = %2371
  %2375 = tail call float @llvm.nvvm.sqrt.approx.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit118, !dbg !19

__nv_sqrtf.exit118:                               ; preds = %2367, %2369, %2372, %2374
  %.0.i116 = phi float [ %2368, %2367 ], [ %2370, %2369 ], [ %2373, %2372 ], [ %2375, %2374 ], !dbg !19
  %2376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i119 = icmp eq i32 %2376, 0, !dbg !19
  %2377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i122 = icmp eq i32 %2377, 0, !dbg !19
  br i1 %.not.i119, label %2383, label %2378, !dbg !19

2378:                                             ; preds = %__nv_sqrtf.exit118
  br i1 %.not1.i122, label %2381, label %2379, !dbg !19

2379:                                             ; preds = %2378
  %2380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit123, !dbg !19

2381:                                             ; preds = %2378
  %2382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit123, !dbg !19

2383:                                             ; preds = %__nv_sqrtf.exit118
  br i1 %.not1.i122, label %2386, label %2384, !dbg !19

2384:                                             ; preds = %2383
  %2385 = tail call float @llvm.nvvm.sqrt.rn.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit123, !dbg !19

2386:                                             ; preds = %2383
  %2387 = tail call float @llvm.nvvm.sqrt.approx.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit123, !dbg !19

__nv_sqrtf.exit123:                               ; preds = %2379, %2381, %2384, %2386
  %.0.i121 = phi float [ %2380, %2379 ], [ %2382, %2381 ], [ %2385, %2384 ], [ %2387, %2386 ], !dbg !19
  %2388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i124 = icmp eq i32 %2388, 0, !dbg !19
  %2389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i127 = icmp eq i32 %2389, 0, !dbg !19
  br i1 %.not.i124, label %2395, label %2390, !dbg !19

2390:                                             ; preds = %__nv_sqrtf.exit123
  br i1 %.not1.i127, label %2393, label %2391, !dbg !19

2391:                                             ; preds = %2390
  %2392 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit128, !dbg !19

2393:                                             ; preds = %2390
  %2394 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit128, !dbg !19

2395:                                             ; preds = %__nv_sqrtf.exit123
  br i1 %.not1.i127, label %2398, label %2396, !dbg !19

2396:                                             ; preds = %2395
  %2397 = tail call float @llvm.nvvm.sqrt.rn.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit128, !dbg !19

2398:                                             ; preds = %2395
  %2399 = tail call float @llvm.nvvm.sqrt.approx.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit128, !dbg !19

__nv_sqrtf.exit128:                               ; preds = %2391, %2393, %2396, %2398
  %.0.i126 = phi float [ %2392, %2391 ], [ %2394, %2393 ], [ %2397, %2396 ], [ %2399, %2398 ], !dbg !19
  %2400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i129 = icmp eq i32 %2400, 0, !dbg !19
  %2401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i132 = icmp eq i32 %2401, 0, !dbg !19
  br i1 %.not.i129, label %2407, label %2402, !dbg !19

2402:                                             ; preds = %__nv_sqrtf.exit128
  br i1 %.not1.i132, label %2405, label %2403, !dbg !19

2403:                                             ; preds = %2402
  %2404 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit133, !dbg !19

2405:                                             ; preds = %2402
  %2406 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit133, !dbg !19

2407:                                             ; preds = %__nv_sqrtf.exit128
  br i1 %.not1.i132, label %2410, label %2408, !dbg !19

2408:                                             ; preds = %2407
  %2409 = tail call float @llvm.nvvm.sqrt.rn.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit133, !dbg !19

2410:                                             ; preds = %2407
  %2411 = tail call float @llvm.nvvm.sqrt.approx.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit133, !dbg !19

__nv_sqrtf.exit133:                               ; preds = %2403, %2405, %2408, %2410
  %.0.i131 = phi float [ %2404, %2403 ], [ %2406, %2405 ], [ %2409, %2408 ], [ %2411, %2410 ], !dbg !19
  %2412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i134 = icmp eq i32 %2412, 0, !dbg !19
  %2413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i137 = icmp eq i32 %2413, 0, !dbg !19
  br i1 %.not.i134, label %2419, label %2414, !dbg !19

2414:                                             ; preds = %__nv_sqrtf.exit133
  br i1 %.not1.i137, label %2417, label %2415, !dbg !19

2415:                                             ; preds = %2414
  %2416 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit138, !dbg !19

2417:                                             ; preds = %2414
  %2418 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit138, !dbg !19

2419:                                             ; preds = %__nv_sqrtf.exit133
  br i1 %.not1.i137, label %2422, label %2420, !dbg !19

2420:                                             ; preds = %2419
  %2421 = tail call float @llvm.nvvm.sqrt.rn.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit138, !dbg !19

2422:                                             ; preds = %2419
  %2423 = tail call float @llvm.nvvm.sqrt.approx.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit138, !dbg !19

__nv_sqrtf.exit138:                               ; preds = %2415, %2417, %2420, %2422
  %.0.i136 = phi float [ %2416, %2415 ], [ %2418, %2417 ], [ %2421, %2420 ], [ %2423, %2422 ], !dbg !19
  %2424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i139 = icmp eq i32 %2424, 0, !dbg !19
  %2425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i142 = icmp eq i32 %2425, 0, !dbg !19
  br i1 %.not.i139, label %2431, label %2426, !dbg !19

2426:                                             ; preds = %__nv_sqrtf.exit138
  br i1 %.not1.i142, label %2429, label %2427, !dbg !19

2427:                                             ; preds = %2426
  %2428 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit143, !dbg !19

2429:                                             ; preds = %2426
  %2430 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit143, !dbg !19

2431:                                             ; preds = %__nv_sqrtf.exit138
  br i1 %.not1.i142, label %2434, label %2432, !dbg !19

2432:                                             ; preds = %2431
  %2433 = tail call float @llvm.nvvm.sqrt.rn.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit143, !dbg !19

2434:                                             ; preds = %2431
  %2435 = tail call float @llvm.nvvm.sqrt.approx.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit143, !dbg !19

__nv_sqrtf.exit143:                               ; preds = %2427, %2429, %2432, %2434
  %.0.i141 = phi float [ %2428, %2427 ], [ %2430, %2429 ], [ %2433, %2432 ], [ %2435, %2434 ], !dbg !19
  %2436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i144 = icmp eq i32 %2436, 0, !dbg !19
  %2437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i147 = icmp eq i32 %2437, 0, !dbg !19
  br i1 %.not.i144, label %2443, label %2438, !dbg !19

2438:                                             ; preds = %__nv_sqrtf.exit143
  br i1 %.not1.i147, label %2441, label %2439, !dbg !19

2439:                                             ; preds = %2438
  %2440 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit148, !dbg !19

2441:                                             ; preds = %2438
  %2442 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit148, !dbg !19

2443:                                             ; preds = %__nv_sqrtf.exit143
  br i1 %.not1.i147, label %2446, label %2444, !dbg !19

2444:                                             ; preds = %2443
  %2445 = tail call float @llvm.nvvm.sqrt.rn.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit148, !dbg !19

2446:                                             ; preds = %2443
  %2447 = tail call float @llvm.nvvm.sqrt.approx.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit148, !dbg !19

__nv_sqrtf.exit148:                               ; preds = %2439, %2441, %2444, %2446
  %.0.i146 = phi float [ %2440, %2439 ], [ %2442, %2441 ], [ %2445, %2444 ], [ %2447, %2446 ], !dbg !19
  %2448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i149 = icmp eq i32 %2448, 0, !dbg !19
  %2449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i152 = icmp eq i32 %2449, 0, !dbg !19
  br i1 %.not.i149, label %2455, label %2450, !dbg !19

2450:                                             ; preds = %__nv_sqrtf.exit148
  br i1 %.not1.i152, label %2453, label %2451, !dbg !19

2451:                                             ; preds = %2450
  %2452 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit153, !dbg !19

2453:                                             ; preds = %2450
  %2454 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit153, !dbg !19

2455:                                             ; preds = %__nv_sqrtf.exit148
  br i1 %.not1.i152, label %2458, label %2456, !dbg !19

2456:                                             ; preds = %2455
  %2457 = tail call float @llvm.nvvm.sqrt.rn.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit153, !dbg !19

2458:                                             ; preds = %2455
  %2459 = tail call float @llvm.nvvm.sqrt.approx.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit153, !dbg !19

__nv_sqrtf.exit153:                               ; preds = %2451, %2453, %2456, %2458
  %.0.i151 = phi float [ %2452, %2451 ], [ %2454, %2453 ], [ %2457, %2456 ], [ %2459, %2458 ], !dbg !19
  %2460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i154 = icmp eq i32 %2460, 0, !dbg !19
  %2461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i157 = icmp eq i32 %2461, 0, !dbg !19
  br i1 %.not.i154, label %2467, label %2462, !dbg !19

2462:                                             ; preds = %__nv_sqrtf.exit153
  br i1 %.not1.i157, label %2465, label %2463, !dbg !19

2463:                                             ; preds = %2462
  %2464 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit158, !dbg !19

2465:                                             ; preds = %2462
  %2466 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit158, !dbg !19

2467:                                             ; preds = %__nv_sqrtf.exit153
  br i1 %.not1.i157, label %2470, label %2468, !dbg !19

2468:                                             ; preds = %2467
  %2469 = tail call float @llvm.nvvm.sqrt.rn.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit158, !dbg !19

2470:                                             ; preds = %2467
  %2471 = tail call float @llvm.nvvm.sqrt.approx.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit158, !dbg !19

__nv_sqrtf.exit158:                               ; preds = %2463, %2465, %2468, %2470
  %.0.i156 = phi float [ %2464, %2463 ], [ %2466, %2465 ], [ %2469, %2468 ], [ %2471, %2470 ], !dbg !19
  %2472 = sext i32 %7 to i64, !dbg !20
  %2473 = shl nuw nsw i32 %8, 1, !dbg !10
  %2474 = and i32 %2473, 126, !dbg !10
  %2475 = zext nneg i32 %2474 to i64, !dbg !10
  %2476 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %2477 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i6), !dbg !21
  %2478 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i11), !dbg !21
  %2479 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i16), !dbg !21
  %2480 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i21), !dbg !21
  %2481 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i26), !dbg !21
  %2482 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i31), !dbg !21
  %2483 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i36), !dbg !21
  %2484 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i41), !dbg !21
  %2485 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i46), !dbg !21
  %2486 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i51), !dbg !21
  %2487 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i56), !dbg !21
  %2488 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i61), !dbg !21
  %2489 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i66), !dbg !21
  %2490 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i71), !dbg !21
  %2491 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i76), !dbg !21
  %2492 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i81), !dbg !21
  %2493 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i86), !dbg !21
  %2494 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i91), !dbg !21
  %2495 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i96), !dbg !21
  %2496 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i101), !dbg !21
  %2497 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i106), !dbg !21
  %2498 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i111), !dbg !21
  %2499 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i116), !dbg !21
  %2500 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i121), !dbg !21
  %2501 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i126), !dbg !21
  %2502 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i131), !dbg !21
  %2503 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i136), !dbg !21
  %2504 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i141), !dbg !21
  %2505 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i146), !dbg !21
  %2506 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i151), !dbg !21
  %2507 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i156), !dbg !21
  %2508 = fmul float %2476, %808, !dbg !22
  %2509 = fmul float %2476, %809, !dbg !22
  %2510 = fmul float %2476, %810, !dbg !22
  %2511 = fmul float %2476, %811, !dbg !22
  %2512 = fmul float %2476, %812, !dbg !22
  %2513 = fmul float %2476, %813, !dbg !22
  %2514 = fmul float %2476, %814, !dbg !22
  %2515 = fmul float %2476, %815, !dbg !22
  %2516 = fmul float %2477, %816, !dbg !22
  %2517 = fmul float %2477, %817, !dbg !22
  %2518 = fmul float %2477, %818, !dbg !22
  %2519 = fmul float %2477, %819, !dbg !22
  %2520 = fmul float %2477, %820, !dbg !22
  %2521 = fmul float %2477, %821, !dbg !22
  %2522 = fmul float %2477, %822, !dbg !22
  %2523 = fmul float %2477, %823, !dbg !22
  %2524 = fmul float %2478, %824, !dbg !22
  %2525 = fmul float %2478, %825, !dbg !22
  %2526 = fmul float %2478, %826, !dbg !22
  %2527 = fmul float %2478, %827, !dbg !22
  %2528 = fmul float %2478, %828, !dbg !22
  %2529 = fmul float %2478, %829, !dbg !22
  %2530 = fmul float %2478, %830, !dbg !22
  %2531 = fmul float %2478, %831, !dbg !22
  %2532 = fmul float %2479, %832, !dbg !22
  %2533 = fmul float %2479, %833, !dbg !22
  %2534 = fmul float %2479, %834, !dbg !22
  %2535 = fmul float %2479, %835, !dbg !22
  %2536 = fmul float %2479, %836, !dbg !22
  %2537 = fmul float %2479, %837, !dbg !22
  %2538 = fmul float %2479, %838, !dbg !22
  %2539 = fmul float %2479, %839, !dbg !22
  %2540 = fmul float %2480, %840, !dbg !22
  %2541 = fmul float %2480, %841, !dbg !22
  %2542 = fmul float %2480, %842, !dbg !22
  %2543 = fmul float %2480, %843, !dbg !22
  %2544 = fmul float %2480, %844, !dbg !22
  %2545 = fmul float %2480, %845, !dbg !22
  %2546 = fmul float %2480, %846, !dbg !22
  %2547 = fmul float %2480, %847, !dbg !22
  %2548 = fmul float %2481, %848, !dbg !22
  %2549 = fmul float %2481, %849, !dbg !22
  %2550 = fmul float %2481, %850, !dbg !22
  %2551 = fmul float %2481, %851, !dbg !22
  %2552 = fmul float %2481, %852, !dbg !22
  %2553 = fmul float %2481, %853, !dbg !22
  %2554 = fmul float %2481, %854, !dbg !22
  %2555 = fmul float %2481, %855, !dbg !22
  %2556 = fmul float %2482, %856, !dbg !22
  %2557 = fmul float %2482, %857, !dbg !22
  %2558 = fmul float %2482, %858, !dbg !22
  %2559 = fmul float %2482, %859, !dbg !22
  %2560 = fmul float %2482, %860, !dbg !22
  %2561 = fmul float %2482, %861, !dbg !22
  %2562 = fmul float %2482, %862, !dbg !22
  %2563 = fmul float %2482, %863, !dbg !22
  %2564 = fmul float %2483, %864, !dbg !22
  %2565 = fmul float %2483, %865, !dbg !22
  %2566 = fmul float %2483, %866, !dbg !22
  %2567 = fmul float %2483, %867, !dbg !22
  %2568 = fmul float %2483, %868, !dbg !22
  %2569 = fmul float %2483, %869, !dbg !22
  %2570 = fmul float %2483, %870, !dbg !22
  %2571 = fmul float %2483, %871, !dbg !22
  %2572 = fmul float %2484, %872, !dbg !22
  %2573 = fmul float %2484, %873, !dbg !22
  %2574 = fmul float %2484, %874, !dbg !22
  %2575 = fmul float %2484, %875, !dbg !22
  %2576 = fmul float %2484, %876, !dbg !22
  %2577 = fmul float %2484, %877, !dbg !22
  %2578 = fmul float %2484, %878, !dbg !22
  %2579 = fmul float %2484, %879, !dbg !22
  %2580 = fmul float %2485, %880, !dbg !22
  %2581 = fmul float %2485, %881, !dbg !22
  %2582 = fmul float %2485, %882, !dbg !22
  %2583 = fmul float %2485, %883, !dbg !22
  %2584 = fmul float %2485, %884, !dbg !22
  %2585 = fmul float %2485, %885, !dbg !22
  %2586 = fmul float %2485, %886, !dbg !22
  %2587 = fmul float %2485, %887, !dbg !22
  %2588 = fmul float %2486, %888, !dbg !22
  %2589 = fmul float %2486, %889, !dbg !22
  %2590 = fmul float %2486, %890, !dbg !22
  %2591 = fmul float %2486, %891, !dbg !22
  %2592 = fmul float %2486, %892, !dbg !22
  %2593 = fmul float %2486, %893, !dbg !22
  %2594 = fmul float %2486, %894, !dbg !22
  %2595 = fmul float %2486, %895, !dbg !22
  %2596 = fmul float %2487, %896, !dbg !22
  %2597 = fmul float %2487, %897, !dbg !22
  %2598 = fmul float %2487, %898, !dbg !22
  %2599 = fmul float %2487, %899, !dbg !22
  %2600 = fmul float %2487, %900, !dbg !22
  %2601 = fmul float %2487, %901, !dbg !22
  %2602 = fmul float %2487, %902, !dbg !22
  %2603 = fmul float %2487, %903, !dbg !22
  %2604 = fmul float %2488, %904, !dbg !22
  %2605 = fmul float %2488, %905, !dbg !22
  %2606 = fmul float %2488, %906, !dbg !22
  %2607 = fmul float %2488, %907, !dbg !22
  %2608 = fmul float %2488, %908, !dbg !22
  %2609 = fmul float %2488, %909, !dbg !22
  %2610 = fmul float %2488, %910, !dbg !22
  %2611 = fmul float %2488, %911, !dbg !22
  %2612 = fmul float %2489, %912, !dbg !22
  %2613 = fmul float %2489, %913, !dbg !22
  %2614 = fmul float %2489, %914, !dbg !22
  %2615 = fmul float %2489, %915, !dbg !22
  %2616 = fmul float %2489, %916, !dbg !22
  %2617 = fmul float %2489, %917, !dbg !22
  %2618 = fmul float %2489, %918, !dbg !22
  %2619 = fmul float %2489, %919, !dbg !22
  %2620 = fmul float %2490, %920, !dbg !22
  %2621 = fmul float %2490, %921, !dbg !22
  %2622 = fmul float %2490, %922, !dbg !22
  %2623 = fmul float %2490, %923, !dbg !22
  %2624 = fmul float %2490, %924, !dbg !22
  %2625 = fmul float %2490, %925, !dbg !22
  %2626 = fmul float %2490, %926, !dbg !22
  %2627 = fmul float %2490, %927, !dbg !22
  %2628 = fmul float %2491, %928, !dbg !22
  %2629 = fmul float %2491, %929, !dbg !22
  %2630 = fmul float %2491, %930, !dbg !22
  %2631 = fmul float %2491, %931, !dbg !22
  %2632 = fmul float %2491, %932, !dbg !22
  %2633 = fmul float %2491, %933, !dbg !22
  %2634 = fmul float %2491, %934, !dbg !22
  %2635 = fmul float %2491, %935, !dbg !22
  %2636 = fmul float %2492, %936, !dbg !22
  %2637 = fmul float %2492, %937, !dbg !22
  %2638 = fmul float %2492, %938, !dbg !22
  %2639 = fmul float %2492, %939, !dbg !22
  %2640 = fmul float %2492, %940, !dbg !22
  %2641 = fmul float %2492, %941, !dbg !22
  %2642 = fmul float %2492, %942, !dbg !22
  %2643 = fmul float %2492, %943, !dbg !22
  %2644 = fmul float %2493, %944, !dbg !22
  %2645 = fmul float %2493, %945, !dbg !22
  %2646 = fmul float %2493, %946, !dbg !22
  %2647 = fmul float %2493, %947, !dbg !22
  %2648 = fmul float %2493, %948, !dbg !22
  %2649 = fmul float %2493, %949, !dbg !22
  %2650 = fmul float %2493, %950, !dbg !22
  %2651 = fmul float %2493, %951, !dbg !22
  %2652 = fmul float %2494, %952, !dbg !22
  %2653 = fmul float %2494, %953, !dbg !22
  %2654 = fmul float %2494, %954, !dbg !22
  %2655 = fmul float %2494, %955, !dbg !22
  %2656 = fmul float %2494, %956, !dbg !22
  %2657 = fmul float %2494, %957, !dbg !22
  %2658 = fmul float %2494, %958, !dbg !22
  %2659 = fmul float %2494, %959, !dbg !22
  %2660 = fmul float %2495, %960, !dbg !22
  %2661 = fmul float %2495, %961, !dbg !22
  %2662 = fmul float %2495, %962, !dbg !22
  %2663 = fmul float %2495, %963, !dbg !22
  %2664 = fmul float %2495, %964, !dbg !22
  %2665 = fmul float %2495, %965, !dbg !22
  %2666 = fmul float %2495, %966, !dbg !22
  %2667 = fmul float %2495, %967, !dbg !22
  %2668 = fmul float %2496, %968, !dbg !22
  %2669 = fmul float %2496, %969, !dbg !22
  %2670 = fmul float %2496, %970, !dbg !22
  %2671 = fmul float %2496, %971, !dbg !22
  %2672 = fmul float %2496, %972, !dbg !22
  %2673 = fmul float %2496, %973, !dbg !22
  %2674 = fmul float %2496, %974, !dbg !22
  %2675 = fmul float %2496, %975, !dbg !22
  %2676 = fmul float %2497, %976, !dbg !22
  %2677 = fmul float %2497, %977, !dbg !22
  %2678 = fmul float %2497, %978, !dbg !22
  %2679 = fmul float %2497, %979, !dbg !22
  %2680 = fmul float %2497, %980, !dbg !22
  %2681 = fmul float %2497, %981, !dbg !22
  %2682 = fmul float %2497, %982, !dbg !22
  %2683 = fmul float %2497, %983, !dbg !22
  %2684 = fmul float %2498, %984, !dbg !22
  %2685 = fmul float %2498, %985, !dbg !22
  %2686 = fmul float %2498, %986, !dbg !22
  %2687 = fmul float %2498, %987, !dbg !22
  %2688 = fmul float %2498, %988, !dbg !22
  %2689 = fmul float %2498, %989, !dbg !22
  %2690 = fmul float %2498, %990, !dbg !22
  %2691 = fmul float %2498, %991, !dbg !22
  %2692 = fmul float %2499, %992, !dbg !22
  %2693 = fmul float %2499, %993, !dbg !22
  %2694 = fmul float %2499, %994, !dbg !22
  %2695 = fmul float %2499, %995, !dbg !22
  %2696 = fmul float %2499, %996, !dbg !22
  %2697 = fmul float %2499, %997, !dbg !22
  %2698 = fmul float %2499, %998, !dbg !22
  %2699 = fmul float %2499, %999, !dbg !22
  %2700 = fmul float %2500, %1000, !dbg !22
  %2701 = fmul float %2500, %1001, !dbg !22
  %2702 = fmul float %2500, %1002, !dbg !22
  %2703 = fmul float %2500, %1003, !dbg !22
  %2704 = fmul float %2500, %1004, !dbg !22
  %2705 = fmul float %2500, %1005, !dbg !22
  %2706 = fmul float %2500, %1006, !dbg !22
  %2707 = fmul float %2500, %1007, !dbg !22
  %2708 = fmul float %2501, %1008, !dbg !22
  %2709 = fmul float %2501, %1009, !dbg !22
  %2710 = fmul float %2501, %1010, !dbg !22
  %2711 = fmul float %2501, %1011, !dbg !22
  %2712 = fmul float %2501, %1012, !dbg !22
  %2713 = fmul float %2501, %1013, !dbg !22
  %2714 = fmul float %2501, %1014, !dbg !22
  %2715 = fmul float %2501, %1015, !dbg !22
  %2716 = fmul float %2502, %1016, !dbg !22
  %2717 = fmul float %2502, %1017, !dbg !22
  %2718 = fmul float %2502, %1018, !dbg !22
  %2719 = fmul float %2502, %1019, !dbg !22
  %2720 = fmul float %2502, %1020, !dbg !22
  %2721 = fmul float %2502, %1021, !dbg !22
  %2722 = fmul float %2502, %1022, !dbg !22
  %2723 = fmul float %2502, %1023, !dbg !22
  %2724 = fmul float %2503, %1024, !dbg !22
  %2725 = fmul float %2503, %1025, !dbg !22
  %2726 = fmul float %2503, %1026, !dbg !22
  %2727 = fmul float %2503, %1027, !dbg !22
  %2728 = fmul float %2503, %1028, !dbg !22
  %2729 = fmul float %2503, %1029, !dbg !22
  %2730 = fmul float %2503, %1030, !dbg !22
  %2731 = fmul float %2503, %1031, !dbg !22
  %2732 = fmul float %2504, %1032, !dbg !22
  %2733 = fmul float %2504, %1033, !dbg !22
  %2734 = fmul float %2504, %1034, !dbg !22
  %2735 = fmul float %2504, %1035, !dbg !22
  %2736 = fmul float %2504, %1036, !dbg !22
  %2737 = fmul float %2504, %1037, !dbg !22
  %2738 = fmul float %2504, %1038, !dbg !22
  %2739 = fmul float %2504, %1039, !dbg !22
  %2740 = fmul float %2505, %1040, !dbg !22
  %2741 = fmul float %2505, %1041, !dbg !22
  %2742 = fmul float %2505, %1042, !dbg !22
  %2743 = fmul float %2505, %1043, !dbg !22
  %2744 = fmul float %2505, %1044, !dbg !22
  %2745 = fmul float %2505, %1045, !dbg !22
  %2746 = fmul float %2505, %1046, !dbg !22
  %2747 = fmul float %2505, %1047, !dbg !22
  %2748 = fmul float %2506, %1048, !dbg !22
  %2749 = fmul float %2506, %1049, !dbg !22
  %2750 = fmul float %2506, %1050, !dbg !22
  %2751 = fmul float %2506, %1051, !dbg !22
  %2752 = fmul float %2506, %1052, !dbg !22
  %2753 = fmul float %2506, %1053, !dbg !22
  %2754 = fmul float %2506, %1054, !dbg !22
  %2755 = fmul float %2506, %1055, !dbg !22
  %2756 = fmul float %2507, %1056, !dbg !22
  %2757 = fmul float %2507, %1057, !dbg !22
  %2758 = fmul float %2507, %1058, !dbg !22
  %2759 = fmul float %2507, %1059, !dbg !22
  %2760 = fmul float %2507, %1060, !dbg !22
  %2761 = fmul float %2507, %1061, !dbg !22
  %2762 = fmul float %2507, %1062, !dbg !22
  %2763 = fmul float %2507, %1063, !dbg !22
  %2764 = fptrunc float %2508 to bfloat, !dbg !23
  %2765 = fptrunc float %2509 to bfloat, !dbg !23
  %2766 = fptrunc float %2510 to bfloat, !dbg !23
  %2767 = fptrunc float %2511 to bfloat, !dbg !23
  %2768 = fptrunc float %2512 to bfloat, !dbg !23
  %2769 = fptrunc float %2513 to bfloat, !dbg !23
  %2770 = fptrunc float %2514 to bfloat, !dbg !23
  %2771 = fptrunc float %2515 to bfloat, !dbg !23
  %2772 = fptrunc float %2516 to bfloat, !dbg !23
  %2773 = fptrunc float %2517 to bfloat, !dbg !23
  %2774 = fptrunc float %2518 to bfloat, !dbg !23
  %2775 = fptrunc float %2519 to bfloat, !dbg !23
  %2776 = fptrunc float %2520 to bfloat, !dbg !23
  %2777 = fptrunc float %2521 to bfloat, !dbg !23
  %2778 = fptrunc float %2522 to bfloat, !dbg !23
  %2779 = fptrunc float %2523 to bfloat, !dbg !23
  %2780 = fptrunc float %2524 to bfloat, !dbg !23
  %2781 = fptrunc float %2525 to bfloat, !dbg !23
  %2782 = fptrunc float %2526 to bfloat, !dbg !23
  %2783 = fptrunc float %2527 to bfloat, !dbg !23
  %2784 = fptrunc float %2528 to bfloat, !dbg !23
  %2785 = fptrunc float %2529 to bfloat, !dbg !23
  %2786 = fptrunc float %2530 to bfloat, !dbg !23
  %2787 = fptrunc float %2531 to bfloat, !dbg !23
  %2788 = fptrunc float %2532 to bfloat, !dbg !23
  %2789 = fptrunc float %2533 to bfloat, !dbg !23
  %2790 = fptrunc float %2534 to bfloat, !dbg !23
  %2791 = fptrunc float %2535 to bfloat, !dbg !23
  %2792 = fptrunc float %2536 to bfloat, !dbg !23
  %2793 = fptrunc float %2537 to bfloat, !dbg !23
  %2794 = fptrunc float %2538 to bfloat, !dbg !23
  %2795 = fptrunc float %2539 to bfloat, !dbg !23
  %2796 = fptrunc float %2540 to bfloat, !dbg !23
  %2797 = fptrunc float %2541 to bfloat, !dbg !23
  %2798 = fptrunc float %2542 to bfloat, !dbg !23
  %2799 = fptrunc float %2543 to bfloat, !dbg !23
  %2800 = fptrunc float %2544 to bfloat, !dbg !23
  %2801 = fptrunc float %2545 to bfloat, !dbg !23
  %2802 = fptrunc float %2546 to bfloat, !dbg !23
  %2803 = fptrunc float %2547 to bfloat, !dbg !23
  %2804 = fptrunc float %2548 to bfloat, !dbg !23
  %2805 = fptrunc float %2549 to bfloat, !dbg !23
  %2806 = fptrunc float %2550 to bfloat, !dbg !23
  %2807 = fptrunc float %2551 to bfloat, !dbg !23
  %2808 = fptrunc float %2552 to bfloat, !dbg !23
  %2809 = fptrunc float %2553 to bfloat, !dbg !23
  %2810 = fptrunc float %2554 to bfloat, !dbg !23
  %2811 = fptrunc float %2555 to bfloat, !dbg !23
  %2812 = fptrunc float %2556 to bfloat, !dbg !23
  %2813 = fptrunc float %2557 to bfloat, !dbg !23
  %2814 = fptrunc float %2558 to bfloat, !dbg !23
  %2815 = fptrunc float %2559 to bfloat, !dbg !23
  %2816 = fptrunc float %2560 to bfloat, !dbg !23
  %2817 = fptrunc float %2561 to bfloat, !dbg !23
  %2818 = fptrunc float %2562 to bfloat, !dbg !23
  %2819 = fptrunc float %2563 to bfloat, !dbg !23
  %2820 = fptrunc float %2564 to bfloat, !dbg !23
  %2821 = fptrunc float %2565 to bfloat, !dbg !23
  %2822 = fptrunc float %2566 to bfloat, !dbg !23
  %2823 = fptrunc float %2567 to bfloat, !dbg !23
  %2824 = fptrunc float %2568 to bfloat, !dbg !23
  %2825 = fptrunc float %2569 to bfloat, !dbg !23
  %2826 = fptrunc float %2570 to bfloat, !dbg !23
  %2827 = fptrunc float %2571 to bfloat, !dbg !23
  %2828 = fptrunc float %2572 to bfloat, !dbg !23
  %2829 = fptrunc float %2573 to bfloat, !dbg !23
  %2830 = fptrunc float %2574 to bfloat, !dbg !23
  %2831 = fptrunc float %2575 to bfloat, !dbg !23
  %2832 = fptrunc float %2576 to bfloat, !dbg !23
  %2833 = fptrunc float %2577 to bfloat, !dbg !23
  %2834 = fptrunc float %2578 to bfloat, !dbg !23
  %2835 = fptrunc float %2579 to bfloat, !dbg !23
  %2836 = fptrunc float %2580 to bfloat, !dbg !23
  %2837 = fptrunc float %2581 to bfloat, !dbg !23
  %2838 = fptrunc float %2582 to bfloat, !dbg !23
  %2839 = fptrunc float %2583 to bfloat, !dbg !23
  %2840 = fptrunc float %2584 to bfloat, !dbg !23
  %2841 = fptrunc float %2585 to bfloat, !dbg !23
  %2842 = fptrunc float %2586 to bfloat, !dbg !23
  %2843 = fptrunc float %2587 to bfloat, !dbg !23
  %2844 = fptrunc float %2588 to bfloat, !dbg !23
  %2845 = fptrunc float %2589 to bfloat, !dbg !23
  %2846 = fptrunc float %2590 to bfloat, !dbg !23
  %2847 = fptrunc float %2591 to bfloat, !dbg !23
  %2848 = fptrunc float %2592 to bfloat, !dbg !23
  %2849 = fptrunc float %2593 to bfloat, !dbg !23
  %2850 = fptrunc float %2594 to bfloat, !dbg !23
  %2851 = fptrunc float %2595 to bfloat, !dbg !23
  %2852 = fptrunc float %2596 to bfloat, !dbg !23
  %2853 = fptrunc float %2597 to bfloat, !dbg !23
  %2854 = fptrunc float %2598 to bfloat, !dbg !23
  %2855 = fptrunc float %2599 to bfloat, !dbg !23
  %2856 = fptrunc float %2600 to bfloat, !dbg !23
  %2857 = fptrunc float %2601 to bfloat, !dbg !23
  %2858 = fptrunc float %2602 to bfloat, !dbg !23
  %2859 = fptrunc float %2603 to bfloat, !dbg !23
  %2860 = fptrunc float %2604 to bfloat, !dbg !23
  %2861 = fptrunc float %2605 to bfloat, !dbg !23
  %2862 = fptrunc float %2606 to bfloat, !dbg !23
  %2863 = fptrunc float %2607 to bfloat, !dbg !23
  %2864 = fptrunc float %2608 to bfloat, !dbg !23
  %2865 = fptrunc float %2609 to bfloat, !dbg !23
  %2866 = fptrunc float %2610 to bfloat, !dbg !23
  %2867 = fptrunc float %2611 to bfloat, !dbg !23
  %2868 = fptrunc float %2612 to bfloat, !dbg !23
  %2869 = fptrunc float %2613 to bfloat, !dbg !23
  %2870 = fptrunc float %2614 to bfloat, !dbg !23
  %2871 = fptrunc float %2615 to bfloat, !dbg !23
  %2872 = fptrunc float %2616 to bfloat, !dbg !23
  %2873 = fptrunc float %2617 to bfloat, !dbg !23
  %2874 = fptrunc float %2618 to bfloat, !dbg !23
  %2875 = fptrunc float %2619 to bfloat, !dbg !23
  %2876 = fptrunc float %2620 to bfloat, !dbg !23
  %2877 = fptrunc float %2621 to bfloat, !dbg !23
  %2878 = fptrunc float %2622 to bfloat, !dbg !23
  %2879 = fptrunc float %2623 to bfloat, !dbg !23
  %2880 = fptrunc float %2624 to bfloat, !dbg !23
  %2881 = fptrunc float %2625 to bfloat, !dbg !23
  %2882 = fptrunc float %2626 to bfloat, !dbg !23
  %2883 = fptrunc float %2627 to bfloat, !dbg !23
  %2884 = fptrunc float %2628 to bfloat, !dbg !23
  %2885 = fptrunc float %2629 to bfloat, !dbg !23
  %2886 = fptrunc float %2630 to bfloat, !dbg !23
  %2887 = fptrunc float %2631 to bfloat, !dbg !23
  %2888 = fptrunc float %2632 to bfloat, !dbg !23
  %2889 = fptrunc float %2633 to bfloat, !dbg !23
  %2890 = fptrunc float %2634 to bfloat, !dbg !23
  %2891 = fptrunc float %2635 to bfloat, !dbg !23
  %2892 = fptrunc float %2636 to bfloat, !dbg !23
  %2893 = fptrunc float %2637 to bfloat, !dbg !23
  %2894 = fptrunc float %2638 to bfloat, !dbg !23
  %2895 = fptrunc float %2639 to bfloat, !dbg !23
  %2896 = fptrunc float %2640 to bfloat, !dbg !23
  %2897 = fptrunc float %2641 to bfloat, !dbg !23
  %2898 = fptrunc float %2642 to bfloat, !dbg !23
  %2899 = fptrunc float %2643 to bfloat, !dbg !23
  %2900 = fptrunc float %2644 to bfloat, !dbg !23
  %2901 = fptrunc float %2645 to bfloat, !dbg !23
  %2902 = fptrunc float %2646 to bfloat, !dbg !23
  %2903 = fptrunc float %2647 to bfloat, !dbg !23
  %2904 = fptrunc float %2648 to bfloat, !dbg !23
  %2905 = fptrunc float %2649 to bfloat, !dbg !23
  %2906 = fptrunc float %2650 to bfloat, !dbg !23
  %2907 = fptrunc float %2651 to bfloat, !dbg !23
  %2908 = fptrunc float %2652 to bfloat, !dbg !23
  %2909 = fptrunc float %2653 to bfloat, !dbg !23
  %2910 = fptrunc float %2654 to bfloat, !dbg !23
  %2911 = fptrunc float %2655 to bfloat, !dbg !23
  %2912 = fptrunc float %2656 to bfloat, !dbg !23
  %2913 = fptrunc float %2657 to bfloat, !dbg !23
  %2914 = fptrunc float %2658 to bfloat, !dbg !23
  %2915 = fptrunc float %2659 to bfloat, !dbg !23
  %2916 = fptrunc float %2660 to bfloat, !dbg !23
  %2917 = fptrunc float %2661 to bfloat, !dbg !23
  %2918 = fptrunc float %2662 to bfloat, !dbg !23
  %2919 = fptrunc float %2663 to bfloat, !dbg !23
  %2920 = fptrunc float %2664 to bfloat, !dbg !23
  %2921 = fptrunc float %2665 to bfloat, !dbg !23
  %2922 = fptrunc float %2666 to bfloat, !dbg !23
  %2923 = fptrunc float %2667 to bfloat, !dbg !23
  %2924 = fptrunc float %2668 to bfloat, !dbg !23
  %2925 = fptrunc float %2669 to bfloat, !dbg !23
  %2926 = fptrunc float %2670 to bfloat, !dbg !23
  %2927 = fptrunc float %2671 to bfloat, !dbg !23
  %2928 = fptrunc float %2672 to bfloat, !dbg !23
  %2929 = fptrunc float %2673 to bfloat, !dbg !23
  %2930 = fptrunc float %2674 to bfloat, !dbg !23
  %2931 = fptrunc float %2675 to bfloat, !dbg !23
  %2932 = fptrunc float %2676 to bfloat, !dbg !23
  %2933 = fptrunc float %2677 to bfloat, !dbg !23
  %2934 = fptrunc float %2678 to bfloat, !dbg !23
  %2935 = fptrunc float %2679 to bfloat, !dbg !23
  %2936 = fptrunc float %2680 to bfloat, !dbg !23
  %2937 = fptrunc float %2681 to bfloat, !dbg !23
  %2938 = fptrunc float %2682 to bfloat, !dbg !23
  %2939 = fptrunc float %2683 to bfloat, !dbg !23
  %2940 = fptrunc float %2684 to bfloat, !dbg !23
  %2941 = fptrunc float %2685 to bfloat, !dbg !23
  %2942 = fptrunc float %2686 to bfloat, !dbg !23
  %2943 = fptrunc float %2687 to bfloat, !dbg !23
  %2944 = fptrunc float %2688 to bfloat, !dbg !23
  %2945 = fptrunc float %2689 to bfloat, !dbg !23
  %2946 = fptrunc float %2690 to bfloat, !dbg !23
  %2947 = fptrunc float %2691 to bfloat, !dbg !23
  %2948 = fptrunc float %2692 to bfloat, !dbg !23
  %2949 = fptrunc float %2693 to bfloat, !dbg !23
  %2950 = fptrunc float %2694 to bfloat, !dbg !23
  %2951 = fptrunc float %2695 to bfloat, !dbg !23
  %2952 = fptrunc float %2696 to bfloat, !dbg !23
  %2953 = fptrunc float %2697 to bfloat, !dbg !23
  %2954 = fptrunc float %2698 to bfloat, !dbg !23
  %2955 = fptrunc float %2699 to bfloat, !dbg !23
  %2956 = fptrunc float %2700 to bfloat, !dbg !23
  %2957 = fptrunc float %2701 to bfloat, !dbg !23
  %2958 = fptrunc float %2702 to bfloat, !dbg !23
  %2959 = fptrunc float %2703 to bfloat, !dbg !23
  %2960 = fptrunc float %2704 to bfloat, !dbg !23
  %2961 = fptrunc float %2705 to bfloat, !dbg !23
  %2962 = fptrunc float %2706 to bfloat, !dbg !23
  %2963 = fptrunc float %2707 to bfloat, !dbg !23
  %2964 = fptrunc float %2708 to bfloat, !dbg !23
  %2965 = fptrunc float %2709 to bfloat, !dbg !23
  %2966 = fptrunc float %2710 to bfloat, !dbg !23
  %2967 = fptrunc float %2711 to bfloat, !dbg !23
  %2968 = fptrunc float %2712 to bfloat, !dbg !23
  %2969 = fptrunc float %2713 to bfloat, !dbg !23
  %2970 = fptrunc float %2714 to bfloat, !dbg !23
  %2971 = fptrunc float %2715 to bfloat, !dbg !23
  %2972 = fptrunc float %2716 to bfloat, !dbg !23
  %2973 = fptrunc float %2717 to bfloat, !dbg !23
  %2974 = fptrunc float %2718 to bfloat, !dbg !23
  %2975 = fptrunc float %2719 to bfloat, !dbg !23
  %2976 = fptrunc float %2720 to bfloat, !dbg !23
  %2977 = fptrunc float %2721 to bfloat, !dbg !23
  %2978 = fptrunc float %2722 to bfloat, !dbg !23
  %2979 = fptrunc float %2723 to bfloat, !dbg !23
  %2980 = fptrunc float %2724 to bfloat, !dbg !23
  %2981 = fptrunc float %2725 to bfloat, !dbg !23
  %2982 = fptrunc float %2726 to bfloat, !dbg !23
  %2983 = fptrunc float %2727 to bfloat, !dbg !23
  %2984 = fptrunc float %2728 to bfloat, !dbg !23
  %2985 = fptrunc float %2729 to bfloat, !dbg !23
  %2986 = fptrunc float %2730 to bfloat, !dbg !23
  %2987 = fptrunc float %2731 to bfloat, !dbg !23
  %2988 = fptrunc float %2732 to bfloat, !dbg !23
  %2989 = fptrunc float %2733 to bfloat, !dbg !23
  %2990 = fptrunc float %2734 to bfloat, !dbg !23
  %2991 = fptrunc float %2735 to bfloat, !dbg !23
  %2992 = fptrunc float %2736 to bfloat, !dbg !23
  %2993 = fptrunc float %2737 to bfloat, !dbg !23
  %2994 = fptrunc float %2738 to bfloat, !dbg !23
  %2995 = fptrunc float %2739 to bfloat, !dbg !23
  %2996 = fptrunc float %2740 to bfloat, !dbg !23
  %2997 = fptrunc float %2741 to bfloat, !dbg !23
  %2998 = fptrunc float %2742 to bfloat, !dbg !23
  %2999 = fptrunc float %2743 to bfloat, !dbg !23
  %3000 = fptrunc float %2744 to bfloat, !dbg !23
  %3001 = fptrunc float %2745 to bfloat, !dbg !23
  %3002 = fptrunc float %2746 to bfloat, !dbg !23
  %3003 = fptrunc float %2747 to bfloat, !dbg !23
  %3004 = fptrunc float %2748 to bfloat, !dbg !23
  %3005 = fptrunc float %2749 to bfloat, !dbg !23
  %3006 = fptrunc float %2750 to bfloat, !dbg !23
  %3007 = fptrunc float %2751 to bfloat, !dbg !23
  %3008 = fptrunc float %2752 to bfloat, !dbg !23
  %3009 = fptrunc float %2753 to bfloat, !dbg !23
  %3010 = fptrunc float %2754 to bfloat, !dbg !23
  %3011 = fptrunc float %2755 to bfloat, !dbg !23
  %3012 = fptrunc float %2756 to bfloat, !dbg !23
  %3013 = fptrunc float %2757 to bfloat, !dbg !23
  %3014 = fptrunc float %2758 to bfloat, !dbg !23
  %3015 = fptrunc float %2759 to bfloat, !dbg !23
  %3016 = fptrunc float %2760 to bfloat, !dbg !23
  %3017 = fptrunc float %2761 to bfloat, !dbg !23
  %3018 = fptrunc float %2762 to bfloat, !dbg !23
  %3019 = fptrunc float %2763 to bfloat, !dbg !23
  %3020 = getelementptr bfloat, ptr addrspace(1) %1, i64 %135, !dbg !24
  %3021 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !24
  %3022 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !24
  %3023 = getelementptr bfloat, ptr addrspace(1) %1, i64 %138, !dbg !24
  %3024 = getelementptr bfloat, ptr addrspace(1) %1, i64 %139, !dbg !24
  %3025 = getelementptr bfloat, ptr addrspace(1) %1, i64 %140, !dbg !24
  %3026 = getelementptr bfloat, ptr addrspace(1) %1, i64 %141, !dbg !24
  %3027 = getelementptr bfloat, ptr addrspace(1) %1, i64 %142, !dbg !24
  %3028 = getelementptr bfloat, ptr addrspace(1) %1, i64 %143, !dbg !24
  %3029 = getelementptr bfloat, ptr addrspace(1) %1, i64 %144, !dbg !24
  %3030 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !24
  %3031 = getelementptr bfloat, ptr addrspace(1) %1, i64 %146, !dbg !24
  %3032 = getelementptr bfloat, ptr addrspace(1) %1, i64 %147, !dbg !24
  %3033 = getelementptr bfloat, ptr addrspace(1) %1, i64 %148, !dbg !24
  %3034 = getelementptr bfloat, ptr addrspace(1) %1, i64 %149, !dbg !24
  %3035 = getelementptr bfloat, ptr addrspace(1) %1, i64 %150, !dbg !24
  %3036 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !24
  %3037 = getelementptr bfloat, ptr addrspace(1) %1, i64 %152, !dbg !24
  %3038 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !24
  %3039 = getelementptr bfloat, ptr addrspace(1) %1, i64 %154, !dbg !24
  %3040 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !24
  %3041 = getelementptr bfloat, ptr addrspace(1) %1, i64 %156, !dbg !24
  %3042 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !24
  %3043 = getelementptr bfloat, ptr addrspace(1) %1, i64 %158, !dbg !24
  %3044 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !24
  %3045 = getelementptr bfloat, ptr addrspace(1) %1, i64 %160, !dbg !24
  %3046 = getelementptr bfloat, ptr addrspace(1) %1, i64 %161, !dbg !24
  %3047 = getelementptr bfloat, ptr addrspace(1) %1, i64 %162, !dbg !24
  %3048 = getelementptr bfloat, ptr addrspace(1) %1, i64 %163, !dbg !24
  %3049 = getelementptr bfloat, ptr addrspace(1) %1, i64 %164, !dbg !24
  %3050 = getelementptr bfloat, ptr addrspace(1) %1, i64 %165, !dbg !24
  %3051 = getelementptr bfloat, ptr addrspace(1) %1, i64 %166, !dbg !24
  %3052 = insertelement <2 x bfloat> poison, bfloat %2764, i64 0, !dbg !24
  %3053 = insertelement <2 x bfloat> %3052, bfloat %2765, i64 1, !dbg !24
  %3054 = bitcast <2 x bfloat> %3053 to i32, !dbg !24
  %3055 = insertelement <2 x bfloat> poison, bfloat %2766, i64 0, !dbg !24
  %3056 = insertelement <2 x bfloat> %3055, bfloat %2767, i64 1, !dbg !24
  %3057 = bitcast <2 x bfloat> %3056 to i32, !dbg !24
  %3058 = insertelement <2 x bfloat> poison, bfloat %2768, i64 0, !dbg !24
  %3059 = insertelement <2 x bfloat> %3058, bfloat %2769, i64 1, !dbg !24
  %3060 = bitcast <2 x bfloat> %3059 to i32, !dbg !24
  %3061 = insertelement <2 x bfloat> poison, bfloat %2770, i64 0, !dbg !24
  %3062 = insertelement <2 x bfloat> %3061, bfloat %2771, i64 1, !dbg !24
  %3063 = bitcast <2 x bfloat> %3062 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3054, i32 %3057, i32 %3060, i32 %3063, ptr addrspace(1) %3020, i1 %201) #6, !dbg !24
  %3064 = insertelement <2 x bfloat> poison, bfloat %2772, i64 0, !dbg !24
  %3065 = insertelement <2 x bfloat> %3064, bfloat %2773, i64 1, !dbg !24
  %3066 = bitcast <2 x bfloat> %3065 to i32, !dbg !24
  %3067 = insertelement <2 x bfloat> poison, bfloat %2774, i64 0, !dbg !24
  %3068 = insertelement <2 x bfloat> %3067, bfloat %2775, i64 1, !dbg !24
  %3069 = bitcast <2 x bfloat> %3068 to i32, !dbg !24
  %3070 = insertelement <2 x bfloat> poison, bfloat %2776, i64 0, !dbg !24
  %3071 = insertelement <2 x bfloat> %3070, bfloat %2777, i64 1, !dbg !24
  %3072 = bitcast <2 x bfloat> %3071 to i32, !dbg !24
  %3073 = insertelement <2 x bfloat> poison, bfloat %2778, i64 0, !dbg !24
  %3074 = insertelement <2 x bfloat> %3073, bfloat %2779, i64 1, !dbg !24
  %3075 = bitcast <2 x bfloat> %3074 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3066, i32 %3069, i32 %3072, i32 %3075, ptr addrspace(1) %3021, i1 %203) #6, !dbg !24
  %3076 = insertelement <2 x bfloat> poison, bfloat %2780, i64 0, !dbg !24
  %3077 = insertelement <2 x bfloat> %3076, bfloat %2781, i64 1, !dbg !24
  %3078 = bitcast <2 x bfloat> %3077 to i32, !dbg !24
  %3079 = insertelement <2 x bfloat> poison, bfloat %2782, i64 0, !dbg !24
  %3080 = insertelement <2 x bfloat> %3079, bfloat %2783, i64 1, !dbg !24
  %3081 = bitcast <2 x bfloat> %3080 to i32, !dbg !24
  %3082 = insertelement <2 x bfloat> poison, bfloat %2784, i64 0, !dbg !24
  %3083 = insertelement <2 x bfloat> %3082, bfloat %2785, i64 1, !dbg !24
  %3084 = bitcast <2 x bfloat> %3083 to i32, !dbg !24
  %3085 = insertelement <2 x bfloat> poison, bfloat %2786, i64 0, !dbg !24
  %3086 = insertelement <2 x bfloat> %3085, bfloat %2787, i64 1, !dbg !24
  %3087 = bitcast <2 x bfloat> %3086 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3078, i32 %3081, i32 %3084, i32 %3087, ptr addrspace(1) %3022, i1 %205) #6, !dbg !24
  %3088 = insertelement <2 x bfloat> poison, bfloat %2788, i64 0, !dbg !24
  %3089 = insertelement <2 x bfloat> %3088, bfloat %2789, i64 1, !dbg !24
  %3090 = bitcast <2 x bfloat> %3089 to i32, !dbg !24
  %3091 = insertelement <2 x bfloat> poison, bfloat %2790, i64 0, !dbg !24
  %3092 = insertelement <2 x bfloat> %3091, bfloat %2791, i64 1, !dbg !24
  %3093 = bitcast <2 x bfloat> %3092 to i32, !dbg !24
  %3094 = insertelement <2 x bfloat> poison, bfloat %2792, i64 0, !dbg !24
  %3095 = insertelement <2 x bfloat> %3094, bfloat %2793, i64 1, !dbg !24
  %3096 = bitcast <2 x bfloat> %3095 to i32, !dbg !24
  %3097 = insertelement <2 x bfloat> poison, bfloat %2794, i64 0, !dbg !24
  %3098 = insertelement <2 x bfloat> %3097, bfloat %2795, i64 1, !dbg !24
  %3099 = bitcast <2 x bfloat> %3098 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3090, i32 %3093, i32 %3096, i32 %3099, ptr addrspace(1) %3023, i1 %207) #6, !dbg !24
  %3100 = insertelement <2 x bfloat> poison, bfloat %2796, i64 0, !dbg !24
  %3101 = insertelement <2 x bfloat> %3100, bfloat %2797, i64 1, !dbg !24
  %3102 = bitcast <2 x bfloat> %3101 to i32, !dbg !24
  %3103 = insertelement <2 x bfloat> poison, bfloat %2798, i64 0, !dbg !24
  %3104 = insertelement <2 x bfloat> %3103, bfloat %2799, i64 1, !dbg !24
  %3105 = bitcast <2 x bfloat> %3104 to i32, !dbg !24
  %3106 = insertelement <2 x bfloat> poison, bfloat %2800, i64 0, !dbg !24
  %3107 = insertelement <2 x bfloat> %3106, bfloat %2801, i64 1, !dbg !24
  %3108 = bitcast <2 x bfloat> %3107 to i32, !dbg !24
  %3109 = insertelement <2 x bfloat> poison, bfloat %2802, i64 0, !dbg !24
  %3110 = insertelement <2 x bfloat> %3109, bfloat %2803, i64 1, !dbg !24
  %3111 = bitcast <2 x bfloat> %3110 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3102, i32 %3105, i32 %3108, i32 %3111, ptr addrspace(1) %3024, i1 %209) #6, !dbg !24
  %3112 = insertelement <2 x bfloat> poison, bfloat %2804, i64 0, !dbg !24
  %3113 = insertelement <2 x bfloat> %3112, bfloat %2805, i64 1, !dbg !24
  %3114 = bitcast <2 x bfloat> %3113 to i32, !dbg !24
  %3115 = insertelement <2 x bfloat> poison, bfloat %2806, i64 0, !dbg !24
  %3116 = insertelement <2 x bfloat> %3115, bfloat %2807, i64 1, !dbg !24
  %3117 = bitcast <2 x bfloat> %3116 to i32, !dbg !24
  %3118 = insertelement <2 x bfloat> poison, bfloat %2808, i64 0, !dbg !24
  %3119 = insertelement <2 x bfloat> %3118, bfloat %2809, i64 1, !dbg !24
  %3120 = bitcast <2 x bfloat> %3119 to i32, !dbg !24
  %3121 = insertelement <2 x bfloat> poison, bfloat %2810, i64 0, !dbg !24
  %3122 = insertelement <2 x bfloat> %3121, bfloat %2811, i64 1, !dbg !24
  %3123 = bitcast <2 x bfloat> %3122 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3114, i32 %3117, i32 %3120, i32 %3123, ptr addrspace(1) %3025, i1 %211) #6, !dbg !24
  %3124 = insertelement <2 x bfloat> poison, bfloat %2812, i64 0, !dbg !24
  %3125 = insertelement <2 x bfloat> %3124, bfloat %2813, i64 1, !dbg !24
  %3126 = bitcast <2 x bfloat> %3125 to i32, !dbg !24
  %3127 = insertelement <2 x bfloat> poison, bfloat %2814, i64 0, !dbg !24
  %3128 = insertelement <2 x bfloat> %3127, bfloat %2815, i64 1, !dbg !24
  %3129 = bitcast <2 x bfloat> %3128 to i32, !dbg !24
  %3130 = insertelement <2 x bfloat> poison, bfloat %2816, i64 0, !dbg !24
  %3131 = insertelement <2 x bfloat> %3130, bfloat %2817, i64 1, !dbg !24
  %3132 = bitcast <2 x bfloat> %3131 to i32, !dbg !24
  %3133 = insertelement <2 x bfloat> poison, bfloat %2818, i64 0, !dbg !24
  %3134 = insertelement <2 x bfloat> %3133, bfloat %2819, i64 1, !dbg !24
  %3135 = bitcast <2 x bfloat> %3134 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3126, i32 %3129, i32 %3132, i32 %3135, ptr addrspace(1) %3026, i1 %213) #6, !dbg !24
  %3136 = insertelement <2 x bfloat> poison, bfloat %2820, i64 0, !dbg !24
  %3137 = insertelement <2 x bfloat> %3136, bfloat %2821, i64 1, !dbg !24
  %3138 = bitcast <2 x bfloat> %3137 to i32, !dbg !24
  %3139 = insertelement <2 x bfloat> poison, bfloat %2822, i64 0, !dbg !24
  %3140 = insertelement <2 x bfloat> %3139, bfloat %2823, i64 1, !dbg !24
  %3141 = bitcast <2 x bfloat> %3140 to i32, !dbg !24
  %3142 = insertelement <2 x bfloat> poison, bfloat %2824, i64 0, !dbg !24
  %3143 = insertelement <2 x bfloat> %3142, bfloat %2825, i64 1, !dbg !24
  %3144 = bitcast <2 x bfloat> %3143 to i32, !dbg !24
  %3145 = insertelement <2 x bfloat> poison, bfloat %2826, i64 0, !dbg !24
  %3146 = insertelement <2 x bfloat> %3145, bfloat %2827, i64 1, !dbg !24
  %3147 = bitcast <2 x bfloat> %3146 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3138, i32 %3141, i32 %3144, i32 %3147, ptr addrspace(1) %3027, i1 %215) #6, !dbg !24
  %3148 = insertelement <2 x bfloat> poison, bfloat %2828, i64 0, !dbg !24
  %3149 = insertelement <2 x bfloat> %3148, bfloat %2829, i64 1, !dbg !24
  %3150 = bitcast <2 x bfloat> %3149 to i32, !dbg !24
  %3151 = insertelement <2 x bfloat> poison, bfloat %2830, i64 0, !dbg !24
  %3152 = insertelement <2 x bfloat> %3151, bfloat %2831, i64 1, !dbg !24
  %3153 = bitcast <2 x bfloat> %3152 to i32, !dbg !24
  %3154 = insertelement <2 x bfloat> poison, bfloat %2832, i64 0, !dbg !24
  %3155 = insertelement <2 x bfloat> %3154, bfloat %2833, i64 1, !dbg !24
  %3156 = bitcast <2 x bfloat> %3155 to i32, !dbg !24
  %3157 = insertelement <2 x bfloat> poison, bfloat %2834, i64 0, !dbg !24
  %3158 = insertelement <2 x bfloat> %3157, bfloat %2835, i64 1, !dbg !24
  %3159 = bitcast <2 x bfloat> %3158 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3150, i32 %3153, i32 %3156, i32 %3159, ptr addrspace(1) %3028, i1 %217) #6, !dbg !24
  %3160 = insertelement <2 x bfloat> poison, bfloat %2836, i64 0, !dbg !24
  %3161 = insertelement <2 x bfloat> %3160, bfloat %2837, i64 1, !dbg !24
  %3162 = bitcast <2 x bfloat> %3161 to i32, !dbg !24
  %3163 = insertelement <2 x bfloat> poison, bfloat %2838, i64 0, !dbg !24
  %3164 = insertelement <2 x bfloat> %3163, bfloat %2839, i64 1, !dbg !24
  %3165 = bitcast <2 x bfloat> %3164 to i32, !dbg !24
  %3166 = insertelement <2 x bfloat> poison, bfloat %2840, i64 0, !dbg !24
  %3167 = insertelement <2 x bfloat> %3166, bfloat %2841, i64 1, !dbg !24
  %3168 = bitcast <2 x bfloat> %3167 to i32, !dbg !24
  %3169 = insertelement <2 x bfloat> poison, bfloat %2842, i64 0, !dbg !24
  %3170 = insertelement <2 x bfloat> %3169, bfloat %2843, i64 1, !dbg !24
  %3171 = bitcast <2 x bfloat> %3170 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3162, i32 %3165, i32 %3168, i32 %3171, ptr addrspace(1) %3029, i1 %219) #6, !dbg !24
  %3172 = insertelement <2 x bfloat> poison, bfloat %2844, i64 0, !dbg !24
  %3173 = insertelement <2 x bfloat> %3172, bfloat %2845, i64 1, !dbg !24
  %3174 = bitcast <2 x bfloat> %3173 to i32, !dbg !24
  %3175 = insertelement <2 x bfloat> poison, bfloat %2846, i64 0, !dbg !24
  %3176 = insertelement <2 x bfloat> %3175, bfloat %2847, i64 1, !dbg !24
  %3177 = bitcast <2 x bfloat> %3176 to i32, !dbg !24
  %3178 = insertelement <2 x bfloat> poison, bfloat %2848, i64 0, !dbg !24
  %3179 = insertelement <2 x bfloat> %3178, bfloat %2849, i64 1, !dbg !24
  %3180 = bitcast <2 x bfloat> %3179 to i32, !dbg !24
  %3181 = insertelement <2 x bfloat> poison, bfloat %2850, i64 0, !dbg !24
  %3182 = insertelement <2 x bfloat> %3181, bfloat %2851, i64 1, !dbg !24
  %3183 = bitcast <2 x bfloat> %3182 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3174, i32 %3177, i32 %3180, i32 %3183, ptr addrspace(1) %3030, i1 %221) #6, !dbg !24
  %3184 = insertelement <2 x bfloat> poison, bfloat %2852, i64 0, !dbg !24
  %3185 = insertelement <2 x bfloat> %3184, bfloat %2853, i64 1, !dbg !24
  %3186 = bitcast <2 x bfloat> %3185 to i32, !dbg !24
  %3187 = insertelement <2 x bfloat> poison, bfloat %2854, i64 0, !dbg !24
  %3188 = insertelement <2 x bfloat> %3187, bfloat %2855, i64 1, !dbg !24
  %3189 = bitcast <2 x bfloat> %3188 to i32, !dbg !24
  %3190 = insertelement <2 x bfloat> poison, bfloat %2856, i64 0, !dbg !24
  %3191 = insertelement <2 x bfloat> %3190, bfloat %2857, i64 1, !dbg !24
  %3192 = bitcast <2 x bfloat> %3191 to i32, !dbg !24
  %3193 = insertelement <2 x bfloat> poison, bfloat %2858, i64 0, !dbg !24
  %3194 = insertelement <2 x bfloat> %3193, bfloat %2859, i64 1, !dbg !24
  %3195 = bitcast <2 x bfloat> %3194 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3186, i32 %3189, i32 %3192, i32 %3195, ptr addrspace(1) %3031, i1 %223) #6, !dbg !24
  %3196 = insertelement <2 x bfloat> poison, bfloat %2860, i64 0, !dbg !24
  %3197 = insertelement <2 x bfloat> %3196, bfloat %2861, i64 1, !dbg !24
  %3198 = bitcast <2 x bfloat> %3197 to i32, !dbg !24
  %3199 = insertelement <2 x bfloat> poison, bfloat %2862, i64 0, !dbg !24
  %3200 = insertelement <2 x bfloat> %3199, bfloat %2863, i64 1, !dbg !24
  %3201 = bitcast <2 x bfloat> %3200 to i32, !dbg !24
  %3202 = insertelement <2 x bfloat> poison, bfloat %2864, i64 0, !dbg !24
  %3203 = insertelement <2 x bfloat> %3202, bfloat %2865, i64 1, !dbg !24
  %3204 = bitcast <2 x bfloat> %3203 to i32, !dbg !24
  %3205 = insertelement <2 x bfloat> poison, bfloat %2866, i64 0, !dbg !24
  %3206 = insertelement <2 x bfloat> %3205, bfloat %2867, i64 1, !dbg !24
  %3207 = bitcast <2 x bfloat> %3206 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3198, i32 %3201, i32 %3204, i32 %3207, ptr addrspace(1) %3032, i1 %225) #6, !dbg !24
  %3208 = insertelement <2 x bfloat> poison, bfloat %2868, i64 0, !dbg !24
  %3209 = insertelement <2 x bfloat> %3208, bfloat %2869, i64 1, !dbg !24
  %3210 = bitcast <2 x bfloat> %3209 to i32, !dbg !24
  %3211 = insertelement <2 x bfloat> poison, bfloat %2870, i64 0, !dbg !24
  %3212 = insertelement <2 x bfloat> %3211, bfloat %2871, i64 1, !dbg !24
  %3213 = bitcast <2 x bfloat> %3212 to i32, !dbg !24
  %3214 = insertelement <2 x bfloat> poison, bfloat %2872, i64 0, !dbg !24
  %3215 = insertelement <2 x bfloat> %3214, bfloat %2873, i64 1, !dbg !24
  %3216 = bitcast <2 x bfloat> %3215 to i32, !dbg !24
  %3217 = insertelement <2 x bfloat> poison, bfloat %2874, i64 0, !dbg !24
  %3218 = insertelement <2 x bfloat> %3217, bfloat %2875, i64 1, !dbg !24
  %3219 = bitcast <2 x bfloat> %3218 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3210, i32 %3213, i32 %3216, i32 %3219, ptr addrspace(1) %3033, i1 %227) #6, !dbg !24
  %3220 = insertelement <2 x bfloat> poison, bfloat %2876, i64 0, !dbg !24
  %3221 = insertelement <2 x bfloat> %3220, bfloat %2877, i64 1, !dbg !24
  %3222 = bitcast <2 x bfloat> %3221 to i32, !dbg !24
  %3223 = insertelement <2 x bfloat> poison, bfloat %2878, i64 0, !dbg !24
  %3224 = insertelement <2 x bfloat> %3223, bfloat %2879, i64 1, !dbg !24
  %3225 = bitcast <2 x bfloat> %3224 to i32, !dbg !24
  %3226 = insertelement <2 x bfloat> poison, bfloat %2880, i64 0, !dbg !24
  %3227 = insertelement <2 x bfloat> %3226, bfloat %2881, i64 1, !dbg !24
  %3228 = bitcast <2 x bfloat> %3227 to i32, !dbg !24
  %3229 = insertelement <2 x bfloat> poison, bfloat %2882, i64 0, !dbg !24
  %3230 = insertelement <2 x bfloat> %3229, bfloat %2883, i64 1, !dbg !24
  %3231 = bitcast <2 x bfloat> %3230 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3222, i32 %3225, i32 %3228, i32 %3231, ptr addrspace(1) %3034, i1 %229) #6, !dbg !24
  %3232 = insertelement <2 x bfloat> poison, bfloat %2884, i64 0, !dbg !24
  %3233 = insertelement <2 x bfloat> %3232, bfloat %2885, i64 1, !dbg !24
  %3234 = bitcast <2 x bfloat> %3233 to i32, !dbg !24
  %3235 = insertelement <2 x bfloat> poison, bfloat %2886, i64 0, !dbg !24
  %3236 = insertelement <2 x bfloat> %3235, bfloat %2887, i64 1, !dbg !24
  %3237 = bitcast <2 x bfloat> %3236 to i32, !dbg !24
  %3238 = insertelement <2 x bfloat> poison, bfloat %2888, i64 0, !dbg !24
  %3239 = insertelement <2 x bfloat> %3238, bfloat %2889, i64 1, !dbg !24
  %3240 = bitcast <2 x bfloat> %3239 to i32, !dbg !24
  %3241 = insertelement <2 x bfloat> poison, bfloat %2890, i64 0, !dbg !24
  %3242 = insertelement <2 x bfloat> %3241, bfloat %2891, i64 1, !dbg !24
  %3243 = bitcast <2 x bfloat> %3242 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3234, i32 %3237, i32 %3240, i32 %3243, ptr addrspace(1) %3035, i1 %231) #6, !dbg !24
  %3244 = insertelement <2 x bfloat> poison, bfloat %2892, i64 0, !dbg !24
  %3245 = insertelement <2 x bfloat> %3244, bfloat %2893, i64 1, !dbg !24
  %3246 = bitcast <2 x bfloat> %3245 to i32, !dbg !24
  %3247 = insertelement <2 x bfloat> poison, bfloat %2894, i64 0, !dbg !24
  %3248 = insertelement <2 x bfloat> %3247, bfloat %2895, i64 1, !dbg !24
  %3249 = bitcast <2 x bfloat> %3248 to i32, !dbg !24
  %3250 = insertelement <2 x bfloat> poison, bfloat %2896, i64 0, !dbg !24
  %3251 = insertelement <2 x bfloat> %3250, bfloat %2897, i64 1, !dbg !24
  %3252 = bitcast <2 x bfloat> %3251 to i32, !dbg !24
  %3253 = insertelement <2 x bfloat> poison, bfloat %2898, i64 0, !dbg !24
  %3254 = insertelement <2 x bfloat> %3253, bfloat %2899, i64 1, !dbg !24
  %3255 = bitcast <2 x bfloat> %3254 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3246, i32 %3249, i32 %3252, i32 %3255, ptr addrspace(1) %3036, i1 %233) #6, !dbg !24
  %3256 = insertelement <2 x bfloat> poison, bfloat %2900, i64 0, !dbg !24
  %3257 = insertelement <2 x bfloat> %3256, bfloat %2901, i64 1, !dbg !24
  %3258 = bitcast <2 x bfloat> %3257 to i32, !dbg !24
  %3259 = insertelement <2 x bfloat> poison, bfloat %2902, i64 0, !dbg !24
  %3260 = insertelement <2 x bfloat> %3259, bfloat %2903, i64 1, !dbg !24
  %3261 = bitcast <2 x bfloat> %3260 to i32, !dbg !24
  %3262 = insertelement <2 x bfloat> poison, bfloat %2904, i64 0, !dbg !24
  %3263 = insertelement <2 x bfloat> %3262, bfloat %2905, i64 1, !dbg !24
  %3264 = bitcast <2 x bfloat> %3263 to i32, !dbg !24
  %3265 = insertelement <2 x bfloat> poison, bfloat %2906, i64 0, !dbg !24
  %3266 = insertelement <2 x bfloat> %3265, bfloat %2907, i64 1, !dbg !24
  %3267 = bitcast <2 x bfloat> %3266 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3258, i32 %3261, i32 %3264, i32 %3267, ptr addrspace(1) %3037, i1 %235) #6, !dbg !24
  %3268 = insertelement <2 x bfloat> poison, bfloat %2908, i64 0, !dbg !24
  %3269 = insertelement <2 x bfloat> %3268, bfloat %2909, i64 1, !dbg !24
  %3270 = bitcast <2 x bfloat> %3269 to i32, !dbg !24
  %3271 = insertelement <2 x bfloat> poison, bfloat %2910, i64 0, !dbg !24
  %3272 = insertelement <2 x bfloat> %3271, bfloat %2911, i64 1, !dbg !24
  %3273 = bitcast <2 x bfloat> %3272 to i32, !dbg !24
  %3274 = insertelement <2 x bfloat> poison, bfloat %2912, i64 0, !dbg !24
  %3275 = insertelement <2 x bfloat> %3274, bfloat %2913, i64 1, !dbg !24
  %3276 = bitcast <2 x bfloat> %3275 to i32, !dbg !24
  %3277 = insertelement <2 x bfloat> poison, bfloat %2914, i64 0, !dbg !24
  %3278 = insertelement <2 x bfloat> %3277, bfloat %2915, i64 1, !dbg !24
  %3279 = bitcast <2 x bfloat> %3278 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3270, i32 %3273, i32 %3276, i32 %3279, ptr addrspace(1) %3038, i1 %237) #6, !dbg !24
  %3280 = insertelement <2 x bfloat> poison, bfloat %2916, i64 0, !dbg !24
  %3281 = insertelement <2 x bfloat> %3280, bfloat %2917, i64 1, !dbg !24
  %3282 = bitcast <2 x bfloat> %3281 to i32, !dbg !24
  %3283 = insertelement <2 x bfloat> poison, bfloat %2918, i64 0, !dbg !24
  %3284 = insertelement <2 x bfloat> %3283, bfloat %2919, i64 1, !dbg !24
  %3285 = bitcast <2 x bfloat> %3284 to i32, !dbg !24
  %3286 = insertelement <2 x bfloat> poison, bfloat %2920, i64 0, !dbg !24
  %3287 = insertelement <2 x bfloat> %3286, bfloat %2921, i64 1, !dbg !24
  %3288 = bitcast <2 x bfloat> %3287 to i32, !dbg !24
  %3289 = insertelement <2 x bfloat> poison, bfloat %2922, i64 0, !dbg !24
  %3290 = insertelement <2 x bfloat> %3289, bfloat %2923, i64 1, !dbg !24
  %3291 = bitcast <2 x bfloat> %3290 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3282, i32 %3285, i32 %3288, i32 %3291, ptr addrspace(1) %3039, i1 %239) #6, !dbg !24
  %3292 = insertelement <2 x bfloat> poison, bfloat %2924, i64 0, !dbg !24
  %3293 = insertelement <2 x bfloat> %3292, bfloat %2925, i64 1, !dbg !24
  %3294 = bitcast <2 x bfloat> %3293 to i32, !dbg !24
  %3295 = insertelement <2 x bfloat> poison, bfloat %2926, i64 0, !dbg !24
  %3296 = insertelement <2 x bfloat> %3295, bfloat %2927, i64 1, !dbg !24
  %3297 = bitcast <2 x bfloat> %3296 to i32, !dbg !24
  %3298 = insertelement <2 x bfloat> poison, bfloat %2928, i64 0, !dbg !24
  %3299 = insertelement <2 x bfloat> %3298, bfloat %2929, i64 1, !dbg !24
  %3300 = bitcast <2 x bfloat> %3299 to i32, !dbg !24
  %3301 = insertelement <2 x bfloat> poison, bfloat %2930, i64 0, !dbg !24
  %3302 = insertelement <2 x bfloat> %3301, bfloat %2931, i64 1, !dbg !24
  %3303 = bitcast <2 x bfloat> %3302 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3294, i32 %3297, i32 %3300, i32 %3303, ptr addrspace(1) %3040, i1 %241) #6, !dbg !24
  %3304 = insertelement <2 x bfloat> poison, bfloat %2932, i64 0, !dbg !24
  %3305 = insertelement <2 x bfloat> %3304, bfloat %2933, i64 1, !dbg !24
  %3306 = bitcast <2 x bfloat> %3305 to i32, !dbg !24
  %3307 = insertelement <2 x bfloat> poison, bfloat %2934, i64 0, !dbg !24
  %3308 = insertelement <2 x bfloat> %3307, bfloat %2935, i64 1, !dbg !24
  %3309 = bitcast <2 x bfloat> %3308 to i32, !dbg !24
  %3310 = insertelement <2 x bfloat> poison, bfloat %2936, i64 0, !dbg !24
  %3311 = insertelement <2 x bfloat> %3310, bfloat %2937, i64 1, !dbg !24
  %3312 = bitcast <2 x bfloat> %3311 to i32, !dbg !24
  %3313 = insertelement <2 x bfloat> poison, bfloat %2938, i64 0, !dbg !24
  %3314 = insertelement <2 x bfloat> %3313, bfloat %2939, i64 1, !dbg !24
  %3315 = bitcast <2 x bfloat> %3314 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3306, i32 %3309, i32 %3312, i32 %3315, ptr addrspace(1) %3041, i1 %243) #6, !dbg !24
  %3316 = insertelement <2 x bfloat> poison, bfloat %2940, i64 0, !dbg !24
  %3317 = insertelement <2 x bfloat> %3316, bfloat %2941, i64 1, !dbg !24
  %3318 = bitcast <2 x bfloat> %3317 to i32, !dbg !24
  %3319 = insertelement <2 x bfloat> poison, bfloat %2942, i64 0, !dbg !24
  %3320 = insertelement <2 x bfloat> %3319, bfloat %2943, i64 1, !dbg !24
  %3321 = bitcast <2 x bfloat> %3320 to i32, !dbg !24
  %3322 = insertelement <2 x bfloat> poison, bfloat %2944, i64 0, !dbg !24
  %3323 = insertelement <2 x bfloat> %3322, bfloat %2945, i64 1, !dbg !24
  %3324 = bitcast <2 x bfloat> %3323 to i32, !dbg !24
  %3325 = insertelement <2 x bfloat> poison, bfloat %2946, i64 0, !dbg !24
  %3326 = insertelement <2 x bfloat> %3325, bfloat %2947, i64 1, !dbg !24
  %3327 = bitcast <2 x bfloat> %3326 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3318, i32 %3321, i32 %3324, i32 %3327, ptr addrspace(1) %3042, i1 %245) #6, !dbg !24
  %3328 = insertelement <2 x bfloat> poison, bfloat %2948, i64 0, !dbg !24
  %3329 = insertelement <2 x bfloat> %3328, bfloat %2949, i64 1, !dbg !24
  %3330 = bitcast <2 x bfloat> %3329 to i32, !dbg !24
  %3331 = insertelement <2 x bfloat> poison, bfloat %2950, i64 0, !dbg !24
  %3332 = insertelement <2 x bfloat> %3331, bfloat %2951, i64 1, !dbg !24
  %3333 = bitcast <2 x bfloat> %3332 to i32, !dbg !24
  %3334 = insertelement <2 x bfloat> poison, bfloat %2952, i64 0, !dbg !24
  %3335 = insertelement <2 x bfloat> %3334, bfloat %2953, i64 1, !dbg !24
  %3336 = bitcast <2 x bfloat> %3335 to i32, !dbg !24
  %3337 = insertelement <2 x bfloat> poison, bfloat %2954, i64 0, !dbg !24
  %3338 = insertelement <2 x bfloat> %3337, bfloat %2955, i64 1, !dbg !24
  %3339 = bitcast <2 x bfloat> %3338 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3330, i32 %3333, i32 %3336, i32 %3339, ptr addrspace(1) %3043, i1 %247) #6, !dbg !24
  %3340 = insertelement <2 x bfloat> poison, bfloat %2956, i64 0, !dbg !24
  %3341 = insertelement <2 x bfloat> %3340, bfloat %2957, i64 1, !dbg !24
  %3342 = bitcast <2 x bfloat> %3341 to i32, !dbg !24
  %3343 = insertelement <2 x bfloat> poison, bfloat %2958, i64 0, !dbg !24
  %3344 = insertelement <2 x bfloat> %3343, bfloat %2959, i64 1, !dbg !24
  %3345 = bitcast <2 x bfloat> %3344 to i32, !dbg !24
  %3346 = insertelement <2 x bfloat> poison, bfloat %2960, i64 0, !dbg !24
  %3347 = insertelement <2 x bfloat> %3346, bfloat %2961, i64 1, !dbg !24
  %3348 = bitcast <2 x bfloat> %3347 to i32, !dbg !24
  %3349 = insertelement <2 x bfloat> poison, bfloat %2962, i64 0, !dbg !24
  %3350 = insertelement <2 x bfloat> %3349, bfloat %2963, i64 1, !dbg !24
  %3351 = bitcast <2 x bfloat> %3350 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3342, i32 %3345, i32 %3348, i32 %3351, ptr addrspace(1) %3044, i1 %249) #6, !dbg !24
  %3352 = insertelement <2 x bfloat> poison, bfloat %2964, i64 0, !dbg !24
  %3353 = insertelement <2 x bfloat> %3352, bfloat %2965, i64 1, !dbg !24
  %3354 = bitcast <2 x bfloat> %3353 to i32, !dbg !24
  %3355 = insertelement <2 x bfloat> poison, bfloat %2966, i64 0, !dbg !24
  %3356 = insertelement <2 x bfloat> %3355, bfloat %2967, i64 1, !dbg !24
  %3357 = bitcast <2 x bfloat> %3356 to i32, !dbg !24
  %3358 = insertelement <2 x bfloat> poison, bfloat %2968, i64 0, !dbg !24
  %3359 = insertelement <2 x bfloat> %3358, bfloat %2969, i64 1, !dbg !24
  %3360 = bitcast <2 x bfloat> %3359 to i32, !dbg !24
  %3361 = insertelement <2 x bfloat> poison, bfloat %2970, i64 0, !dbg !24
  %3362 = insertelement <2 x bfloat> %3361, bfloat %2971, i64 1, !dbg !24
  %3363 = bitcast <2 x bfloat> %3362 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3354, i32 %3357, i32 %3360, i32 %3363, ptr addrspace(1) %3045, i1 %251) #6, !dbg !24
  %3364 = insertelement <2 x bfloat> poison, bfloat %2972, i64 0, !dbg !24
  %3365 = insertelement <2 x bfloat> %3364, bfloat %2973, i64 1, !dbg !24
  %3366 = bitcast <2 x bfloat> %3365 to i32, !dbg !24
  %3367 = insertelement <2 x bfloat> poison, bfloat %2974, i64 0, !dbg !24
  %3368 = insertelement <2 x bfloat> %3367, bfloat %2975, i64 1, !dbg !24
  %3369 = bitcast <2 x bfloat> %3368 to i32, !dbg !24
  %3370 = insertelement <2 x bfloat> poison, bfloat %2976, i64 0, !dbg !24
  %3371 = insertelement <2 x bfloat> %3370, bfloat %2977, i64 1, !dbg !24
  %3372 = bitcast <2 x bfloat> %3371 to i32, !dbg !24
  %3373 = insertelement <2 x bfloat> poison, bfloat %2978, i64 0, !dbg !24
  %3374 = insertelement <2 x bfloat> %3373, bfloat %2979, i64 1, !dbg !24
  %3375 = bitcast <2 x bfloat> %3374 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3366, i32 %3369, i32 %3372, i32 %3375, ptr addrspace(1) %3046, i1 %253) #6, !dbg !24
  %3376 = insertelement <2 x bfloat> poison, bfloat %2980, i64 0, !dbg !24
  %3377 = insertelement <2 x bfloat> %3376, bfloat %2981, i64 1, !dbg !24
  %3378 = bitcast <2 x bfloat> %3377 to i32, !dbg !24
  %3379 = insertelement <2 x bfloat> poison, bfloat %2982, i64 0, !dbg !24
  %3380 = insertelement <2 x bfloat> %3379, bfloat %2983, i64 1, !dbg !24
  %3381 = bitcast <2 x bfloat> %3380 to i32, !dbg !24
  %3382 = insertelement <2 x bfloat> poison, bfloat %2984, i64 0, !dbg !24
  %3383 = insertelement <2 x bfloat> %3382, bfloat %2985, i64 1, !dbg !24
  %3384 = bitcast <2 x bfloat> %3383 to i32, !dbg !24
  %3385 = insertelement <2 x bfloat> poison, bfloat %2986, i64 0, !dbg !24
  %3386 = insertelement <2 x bfloat> %3385, bfloat %2987, i64 1, !dbg !24
  %3387 = bitcast <2 x bfloat> %3386 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3378, i32 %3381, i32 %3384, i32 %3387, ptr addrspace(1) %3047, i1 %255) #6, !dbg !24
  %3388 = insertelement <2 x bfloat> poison, bfloat %2988, i64 0, !dbg !24
  %3389 = insertelement <2 x bfloat> %3388, bfloat %2989, i64 1, !dbg !24
  %3390 = bitcast <2 x bfloat> %3389 to i32, !dbg !24
  %3391 = insertelement <2 x bfloat> poison, bfloat %2990, i64 0, !dbg !24
  %3392 = insertelement <2 x bfloat> %3391, bfloat %2991, i64 1, !dbg !24
  %3393 = bitcast <2 x bfloat> %3392 to i32, !dbg !24
  %3394 = insertelement <2 x bfloat> poison, bfloat %2992, i64 0, !dbg !24
  %3395 = insertelement <2 x bfloat> %3394, bfloat %2993, i64 1, !dbg !24
  %3396 = bitcast <2 x bfloat> %3395 to i32, !dbg !24
  %3397 = insertelement <2 x bfloat> poison, bfloat %2994, i64 0, !dbg !24
  %3398 = insertelement <2 x bfloat> %3397, bfloat %2995, i64 1, !dbg !24
  %3399 = bitcast <2 x bfloat> %3398 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3390, i32 %3393, i32 %3396, i32 %3399, ptr addrspace(1) %3048, i1 %257) #6, !dbg !24
  %3400 = insertelement <2 x bfloat> poison, bfloat %2996, i64 0, !dbg !24
  %3401 = insertelement <2 x bfloat> %3400, bfloat %2997, i64 1, !dbg !24
  %3402 = bitcast <2 x bfloat> %3401 to i32, !dbg !24
  %3403 = insertelement <2 x bfloat> poison, bfloat %2998, i64 0, !dbg !24
  %3404 = insertelement <2 x bfloat> %3403, bfloat %2999, i64 1, !dbg !24
  %3405 = bitcast <2 x bfloat> %3404 to i32, !dbg !24
  %3406 = insertelement <2 x bfloat> poison, bfloat %3000, i64 0, !dbg !24
  %3407 = insertelement <2 x bfloat> %3406, bfloat %3001, i64 1, !dbg !24
  %3408 = bitcast <2 x bfloat> %3407 to i32, !dbg !24
  %3409 = insertelement <2 x bfloat> poison, bfloat %3002, i64 0, !dbg !24
  %3410 = insertelement <2 x bfloat> %3409, bfloat %3003, i64 1, !dbg !24
  %3411 = bitcast <2 x bfloat> %3410 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3402, i32 %3405, i32 %3408, i32 %3411, ptr addrspace(1) %3049, i1 %259) #6, !dbg !24
  %3412 = insertelement <2 x bfloat> poison, bfloat %3004, i64 0, !dbg !24
  %3413 = insertelement <2 x bfloat> %3412, bfloat %3005, i64 1, !dbg !24
  %3414 = bitcast <2 x bfloat> %3413 to i32, !dbg !24
  %3415 = insertelement <2 x bfloat> poison, bfloat %3006, i64 0, !dbg !24
  %3416 = insertelement <2 x bfloat> %3415, bfloat %3007, i64 1, !dbg !24
  %3417 = bitcast <2 x bfloat> %3416 to i32, !dbg !24
  %3418 = insertelement <2 x bfloat> poison, bfloat %3008, i64 0, !dbg !24
  %3419 = insertelement <2 x bfloat> %3418, bfloat %3009, i64 1, !dbg !24
  %3420 = bitcast <2 x bfloat> %3419 to i32, !dbg !24
  %3421 = insertelement <2 x bfloat> poison, bfloat %3010, i64 0, !dbg !24
  %3422 = insertelement <2 x bfloat> %3421, bfloat %3011, i64 1, !dbg !24
  %3423 = bitcast <2 x bfloat> %3422 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3414, i32 %3417, i32 %3420, i32 %3423, ptr addrspace(1) %3050, i1 %261) #6, !dbg !24
  %3424 = insertelement <2 x bfloat> poison, bfloat %3012, i64 0, !dbg !24
  %3425 = insertelement <2 x bfloat> %3424, bfloat %3013, i64 1, !dbg !24
  %3426 = bitcast <2 x bfloat> %3425 to i32, !dbg !24
  %3427 = insertelement <2 x bfloat> poison, bfloat %3014, i64 0, !dbg !24
  %3428 = insertelement <2 x bfloat> %3427, bfloat %3015, i64 1, !dbg !24
  %3429 = bitcast <2 x bfloat> %3428 to i32, !dbg !24
  %3430 = insertelement <2 x bfloat> poison, bfloat %3016, i64 0, !dbg !24
  %3431 = insertelement <2 x bfloat> %3430, bfloat %3017, i64 1, !dbg !24
  %3432 = bitcast <2 x bfloat> %3431 to i32, !dbg !24
  %3433 = insertelement <2 x bfloat> poison, bfloat %3018, i64 0, !dbg !24
  %3434 = insertelement <2 x bfloat> %3433, bfloat %3019, i64 1, !dbg !24
  %3435 = bitcast <2 x bfloat> %3434 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3426, i32 %3429, i32 %3432, i32 %3435, ptr addrspace(1) %3051, i1 %263) #6, !dbg !24
  %3436 = getelementptr float, ptr addrspace(1) %2, i64 %2472, !dbg !25
  %3437 = getelementptr float, ptr addrspace(1) %3436, i64 %2475, !dbg !25
  %3438 = icmp ult i32 %7, 49152, !dbg !25
  %3439 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  store float %2476, ptr addrspace(3) %3439, align 4, !dbg !25
  %3440 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  store float %2477, ptr addrspace(3) %3440, align 4, !dbg !25
  %3441 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  store float %2478, ptr addrspace(3) %3441, align 4, !dbg !25
  %3442 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  store float %2479, ptr addrspace(3) %3442, align 4, !dbg !25
  %3443 = extractelement <4 x i32> %19, i64 3, !dbg !25
  %3444 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3443, !dbg !25
  store float %2480, ptr addrspace(3) %3444, align 4, !dbg !25
  %3445 = extractelement <4 x i32> %19, i64 2, !dbg !25
  %3446 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3445, !dbg !25
  store float %2481, ptr addrspace(3) %3446, align 4, !dbg !25
  %3447 = extractelement <4 x i32> %19, i64 1, !dbg !25
  %3448 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3447, !dbg !25
  store float %2482, ptr addrspace(3) %3448, align 4, !dbg !25
  %3449 = extractelement <4 x i32> %19, i64 0, !dbg !25
  %3450 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3449, !dbg !25
  store float %2483, ptr addrspace(3) %3450, align 4, !dbg !25
  %3451 = extractelement <8 x i32> %23, i64 7, !dbg !25
  %3452 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3451, !dbg !25
  store float %2484, ptr addrspace(3) %3452, align 4, !dbg !25
  %3453 = extractelement <8 x i32> %23, i64 6, !dbg !25
  %3454 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3453, !dbg !25
  store float %2485, ptr addrspace(3) %3454, align 4, !dbg !25
  %3455 = extractelement <8 x i32> %23, i64 5, !dbg !25
  %3456 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3455, !dbg !25
  store float %2486, ptr addrspace(3) %3456, align 4, !dbg !25
  %3457 = extractelement <8 x i32> %23, i64 4, !dbg !25
  %3458 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3457, !dbg !25
  store float %2487, ptr addrspace(3) %3458, align 4, !dbg !25
  %3459 = extractelement <8 x i32> %23, i64 3, !dbg !25
  %3460 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3459, !dbg !25
  store float %2488, ptr addrspace(3) %3460, align 4, !dbg !25
  %3461 = extractelement <8 x i32> %23, i64 2, !dbg !25
  %3462 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3461, !dbg !25
  store float %2489, ptr addrspace(3) %3462, align 4, !dbg !25
  %3463 = extractelement <8 x i32> %23, i64 1, !dbg !25
  %3464 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3463, !dbg !25
  store float %2490, ptr addrspace(3) %3464, align 4, !dbg !25
  %3465 = extractelement <8 x i32> %23, i64 0, !dbg !25
  %3466 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3465, !dbg !25
  store float %2491, ptr addrspace(3) %3466, align 4, !dbg !25
  %3467 = extractelement <16 x i32> %25, i64 15, !dbg !25
  %3468 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3467, !dbg !25
  store float %2492, ptr addrspace(3) %3468, align 4, !dbg !25
  %3469 = extractelement <16 x i32> %25, i64 14, !dbg !25
  %3470 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3469, !dbg !25
  store float %2493, ptr addrspace(3) %3470, align 4, !dbg !25
  %3471 = extractelement <16 x i32> %25, i64 13, !dbg !25
  %3472 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3471, !dbg !25
  store float %2494, ptr addrspace(3) %3472, align 4, !dbg !25
  %3473 = extractelement <16 x i32> %25, i64 12, !dbg !25
  %3474 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3473, !dbg !25
  store float %2495, ptr addrspace(3) %3474, align 4, !dbg !25
  %3475 = extractelement <16 x i32> %25, i64 11, !dbg !25
  %3476 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3475, !dbg !25
  store float %2496, ptr addrspace(3) %3476, align 4, !dbg !25
  %3477 = extractelement <16 x i32> %25, i64 10, !dbg !25
  %3478 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3477, !dbg !25
  store float %2497, ptr addrspace(3) %3478, align 4, !dbg !25
  %3479 = extractelement <16 x i32> %25, i64 9, !dbg !25
  %3480 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3479, !dbg !25
  store float %2498, ptr addrspace(3) %3480, align 4, !dbg !25
  %3481 = extractelement <16 x i32> %25, i64 8, !dbg !25
  %3482 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3481, !dbg !25
  store float %2499, ptr addrspace(3) %3482, align 4, !dbg !25
  %3483 = extractelement <16 x i32> %25, i64 7, !dbg !25
  %3484 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3483, !dbg !25
  store float %2500, ptr addrspace(3) %3484, align 4, !dbg !25
  %3485 = extractelement <16 x i32> %25, i64 6, !dbg !25
  %3486 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3485, !dbg !25
  store float %2501, ptr addrspace(3) %3486, align 4, !dbg !25
  %3487 = extractelement <16 x i32> %25, i64 5, !dbg !25
  %3488 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3487, !dbg !25
  store float %2502, ptr addrspace(3) %3488, align 4, !dbg !25
  %3489 = extractelement <16 x i32> %25, i64 4, !dbg !25
  %3490 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3489, !dbg !25
  store float %2503, ptr addrspace(3) %3490, align 4, !dbg !25
  %3491 = extractelement <16 x i32> %25, i64 3, !dbg !25
  %3492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3491, !dbg !25
  store float %2504, ptr addrspace(3) %3492, align 4, !dbg !25
  %3493 = extractelement <16 x i32> %25, i64 2, !dbg !25
  %3494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3493, !dbg !25
  store float %2505, ptr addrspace(3) %3494, align 4, !dbg !25
  %3495 = extractelement <16 x i32> %25, i64 1, !dbg !25
  %3496 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3495, !dbg !25
  store float %2506, ptr addrspace(3) %3496, align 4, !dbg !25
  %3497 = extractelement <16 x i32> %25, i64 0, !dbg !25
  %3498 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3497, !dbg !25
  store float %2507, ptr addrspace(3) %3498, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %3499 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2474, !dbg !25
  %.extract = load i32, ptr addrspace(3) %3499, align 8, !dbg !25
  %3500 = getelementptr inbounds nuw i8, ptr addrspace(3) %3499, i32 4, !dbg !25
  %.extract3 = load i32, ptr addrspace(3) %3500, align 4, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract3, ptr addrspace(1) %3437, i1 %3438) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 103, column: 18, scope: !5)
!11 = !DILocation(line: 103, column: 49, scope: !5)
!12 = !DILocation(line: 104, column: 38, scope: !5)
!13 = !DILocation(line: 260, column: 15, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!16 = !DILocation(line: 104, column: 43, scope: !5)
!17 = !DILocation(line: 290, column: 36, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 104, column: 48, scope: !5)
!19 = !DILocation(line: 104, column: 25, scope: !5)
!20 = !DILocation(line: 99, column: 72, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
