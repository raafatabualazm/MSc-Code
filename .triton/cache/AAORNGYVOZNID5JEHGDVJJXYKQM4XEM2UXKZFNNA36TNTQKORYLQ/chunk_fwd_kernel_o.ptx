//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_fwd_kernel_o      // -- Begin function chunk_fwd_kernel_o
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_fwd_kernel_o
.visible .entry chunk_fwd_kernel_o(
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_0,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_1,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_2,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_3,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_4,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_5,
	.param .f32 chunk_fwd_kernel_o_param_6,
	.param .u32 chunk_fwd_kernel_o_param_7,
	.param .u64 .ptr .global .align 1 chunk_fwd_kernel_o_param_8
)
.reqntid 128
{
	.reg .pred 	%p<82>;
	.reg .b16 	%rs<119>;
	.reg .b32 	%r<1851>;
	.reg .b64 	%rd<194>;
	.loc	1 32 0                          // chunk_o.py:32:0
$L__func_begin0:
	.loc	1 32 0                          // chunk_o.py:32:0

// %bb.0:
	ld.param.b32 	%r147, [chunk_fwd_kernel_o_param_7];
	ld.param.b32 	%r146, [chunk_fwd_kernel_o_param_6];
	ld.param.b64 	%rd23, [chunk_fwd_kernel_o_param_5];
	ld.param.b64 	%rd22, [chunk_fwd_kernel_o_param_4];
	ld.param.b64 	%rd21, [chunk_fwd_kernel_o_param_2];
	ld.param.b64 	%rd49, [chunk_fwd_kernel_o_param_0];
$L__tmp0:
	.loc	1 54 35                         // chunk_o.py:54:35
	mov.u32 	%r199, %ctaid.x;
	ld.param.b64 	%rd50, [chunk_fwd_kernel_o_param_1];
	.loc	1 54 53                         // chunk_o.py:54:53
	mov.u32 	%r200, %ctaid.y;
	ld.param.b64 	%rd51, [chunk_fwd_kernel_o_param_3];
	.loc	1 54 71                         // chunk_o.py:54:71
	mov.u32 	%r201, %ctaid.z;
	.loc	1 55 23                         // chunk_o.py:55:23
	shr.u32 	%r202, %r201, 5;
	.loc	1 55 33                         // chunk_o.py:55:33
	and.b32 	%r203, %r201, 31;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_o.py:64:24 ]
	add.s32 	%r204, %r147, 63;
	.loc	2 40 28                         // standard.py:40:28 @[ chunk_o.py:64:24 ]
	shr.s32 	%r205, %r204, 31;
	shr.u32 	%r206, %r205, 26;
	add.s32 	%r207, %r204, %r206;
	shr.s32 	%r208, %r207, 6;
$L__tmp2:
	.loc	1 65 26                         // chunk_o.py:65:26
	mad.lo.s32 	%r209, %r208, %r202, %r200;
	.loc	1 66 25                         // chunk_o.py:66:25
	and.b32 	%r210, %r201, 65504;
	.loc	1 69 16                         // chunk_o.py:69:16
	mul.lo.s32 	%r211, %r210, %r147;
	.loc	1 69 20                         // chunk_o.py:69:20
	or.b32 	%r1, %r211, %r203;
	.loc	1 69 27                         // chunk_o.py:69:27
	shl.b32 	%r212, %r1, 7;
	.loc	1 69 9                          // chunk_o.py:69:9
	cvt.s64.s32 	%rd1, %r212;
	mul.wide.s32 	%rd52, %r212, 2;
	add.s64 	%rd2, %rd49, %rd52;
	.loc	1 70 9                          // chunk_o.py:70:9
	add.s64 	%rd3, %rd50, %rd52;
	.loc	1 73 17                         // chunk_o.py:73:17
	shl.b32 	%r213, %r209, 5;
	.loc	1 73 21                         // chunk_o.py:73:21
	or.b32 	%r214, %r213, %r203;
	.loc	1 73 9                          // chunk_o.py:73:9
	mul.wide.s32 	%rd53, %r214, 32768;
	add.s64 	%rd54, %rd51, %rd53;
	.loc	1 79 60                         // chunk_o.py:79:60
	shl.b32 	%r2, %r200, 6;
	.loc	1 79 85                         // chunk_o.py:79:85
	cvt.s64.s32 	%rd4, %r147;
	cvt.u64.u32 	%rd55, %r2;
	.loc	1 81 68                         // chunk_o.py:81:68
	shl.b32 	%r215, %r199, 6;
	.loc	1 81 83                         // chunk_o.py:81:83
	cvt.s64.s32 	%rd56, %r215;
	.loc	1 83 22                         // chunk_o.py:83:22
	mov.u32 	%r3, %tid.x;
	shr.u32 	%r4, %r3, 5;
	bfe.s32 	%r216, %r3, 5, 1;
	bfe.u32 	%r217, %r3, 3, 4;
	or.b32 	%r218, %r217, 16;
	or.b32 	%r219, %r217, 32;
	or.b32 	%r220, %r217, 48;
	shl.b32 	%r5, %r3, 3;
	and.b32 	%r221, %r5, 56;
	cvt.u64.u32 	%rd5, %r217;
	cvt.u64.u32 	%rd6, %r218;
	cvt.u64.u32 	%rd7, %r219;
	cvt.u64.u32 	%rd8, %r220;
	cvt.u64.u32 	%rd9, %r221;
	or.b64 	%rd10, %rd5, %rd55;
	or.b64 	%rd11, %rd6, %rd55;
	or.b64 	%rd12, %rd7, %rd55;
	or.b64 	%rd13, %rd8, %rd55;
	shl.b64 	%rd14, %rd10, 12;
	shl.b64 	%rd15, %rd11, 12;
	shl.b64 	%rd16, %rd12, 12;
	shl.b64 	%rd17, %rd13, 12;
	setp.lt.s64 	%p4, %rd10, %rd4;
	setp.lt.s64 	%p5, %rd11, %rd4;
	setp.lt.s64 	%p6, %rd12, %rd4;
	setp.lt.s64 	%p7, %rd13, %rd4;
	.loc	1 87 22                         // chunk_o.py:87:22
	or.b64 	%rd18, %rd9, %rd56;
	setp.gt.s32 	%p8, %r215, -1;
	setp.lt.s64 	%p9, %rd18, 128;
	and.pred 	%p1, %p8, %p9;
	.loc	1 83 22                         // chunk_o.py:83:22
	or.b64 	%rd57, %rd14, %rd9;
	or.b64 	%rd58, %rd15, %rd9;
	or.b64 	%rd59, %rd16, %rd9;
	or.b64 	%rd60, %rd17, %rd9;
	shl.b64 	%rd61, %rd57, 1;
	add.s64 	%rd24, %rd2, %rd61;
	shl.b64 	%rd62, %rd58, 1;
	add.s64 	%rd25, %rd2, %rd62;
	shl.b64 	%rd63, %rd59, 1;
	add.s64 	%rd26, %rd2, %rd63;
	shl.b64 	%rd64, %rd60, 1;
	add.s64 	%rd27, %rd2, %rd64;
	and.b32 	%r222, %r216, 288;
	and.b32 	%r223, %r3, 24;
	mul.lo.s32 	%r224, %r223, 9;
	xor.b32 	%r225, %r224, %r221;
	xor.b32 	%r226, %r225, %r222;
	and.b32 	%r227, %r5, 512;
	or.b32 	%r6, %r226, %r227;
	shl.b32 	%r228, %r6, 1;
	mov.b32 	%r229, global_smem;
	add.s32 	%r7, %r229, %r228;
	or.b32 	%r230, %r221, 1024;
	xor.b32 	%r231, %r224, %r230;
	xor.b32 	%r232, %r231, %r222;
	or.b32 	%r8, %r232, %r227;
	shl.b32 	%r233, %r8, 1;
	add.s32 	%r9, %r229, %r233;
	or.b32 	%r234, %r221, 2048;
	xor.b32 	%r235, %r224, %r234;
	xor.b32 	%r236, %r235, %r222;
	or.b32 	%r10, %r236, %r227;
	shl.b32 	%r237, %r10, 1;
	add.s32 	%r11, %r229, %r237;
	or.b32 	%r238, %r221, 3072;
	xor.b32 	%r239, %r224, %r238;
	xor.b32 	%r240, %r239, %r222;
	or.b32 	%r12, %r240, %r227;
	shl.b32 	%r241, %r12, 1;
	add.s32 	%r13, %r229, %r241;
	selp.b32 	%r149, 16, 0, %p4;
	// begin inline asm
	cp.async.cg.shared.global [ %r7 + 0 ], [ %rd24 + 0 ], 0x10, %r149;
	// end inline asm
	selp.b32 	%r151, 16, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r9 + 0 ], [ %rd25 + 0 ], 0x10, %r151;
	// end inline asm
	selp.b32 	%r153, 16, 0, %p6;
	// begin inline asm
	cp.async.cg.shared.global [ %r11 + 0 ], [ %rd26 + 0 ], 0x10, %r153;
	// end inline asm
	selp.b32 	%r155, 16, 0, %p7;
	// begin inline asm
	cp.async.cg.shared.global [ %r13 + 0 ], [ %rd27 + 0 ], 0x10, %r155;
	// end inline asm
	cp.async.commit_group;
	.loc	1 85 22                         // chunk_o.py:85:22
	add.s64 	%rd28, %rd3, %rd61;
	add.s64 	%rd29, %rd3, %rd62;
	add.s64 	%rd30, %rd3, %rd63;
	add.s64 	%rd31, %rd3, %rd64;
	add.s32 	%r242, %r229, 24576;
	add.s32 	%r156, %r242, %r228;
	add.s32 	%r158, %r242, %r233;
	add.s32 	%r160, %r242, %r237;
	add.s32 	%r162, %r242, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r156 + 0 ], [ %rd28 + 0 ], 0x10, %r149;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r158 + 0 ], [ %rd29 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r160 + 0 ], [ %rd30 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r162 + 0 ], [ %rd31 + 0 ], 0x10, %r155;
	// end inline asm
	cp.async.commit_group;
	.loc	1 87 22                         // chunk_o.py:87:22
	mul.wide.u32 	%rd65, %r217, 256;
	shl.b64 	%rd66, %rd18, 1;
	.loc	1 78 21                         // chunk_o.py:78:21
	add.s64 	%rd19, %rd54, %rd66;
	.loc	1 87 22                         // chunk_o.py:87:22
	add.s64 	%rd32, %rd19, %rd65;
	mul.wide.u32 	%rd67, %r218, 256;
	add.s64 	%rd33, %rd19, %rd67;
	mul.wide.u32 	%rd68, %r219, 256;
	add.s64 	%rd34, %rd19, %rd68;
	mul.wide.u32 	%rd69, %r220, 256;
	add.s64 	%rd35, %rd19, %rd69;
	add.s32 	%r243, %r229, 49152;
	add.s32 	%r164, %r243, %r228;
	add.s32 	%r166, %r243, %r233;
	add.s32 	%r168, %r243, %r237;
	add.s32 	%r170, %r243, %r241;
	selp.b32 	%r165, 16, 0, %p1;
	// begin inline asm
	cp.async.cg.shared.global [ %r164 + 0 ], [ %rd32 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r166 + 0 ], [ %rd33 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r168 + 0 ], [ %rd34 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r170 + 0 ], [ %rd35 + 0 ], 0x10, %r165;
	// end inline asm
	cp.async.commit_group;
	.loc	1 83 22                         // chunk_o.py:83:22
	add.s64 	%rd36, %rd24, 128;
	add.s64 	%rd37, %rd25, 128;
	add.s64 	%rd38, %rd26, 128;
	add.s64 	%rd39, %rd27, 128;
	bar.sync 	0;
	add.s32 	%r244, %r229, 8192;
	add.s32 	%r172, %r244, %r228;
	add.s32 	%r174, %r244, %r233;
	add.s32 	%r176, %r244, %r237;
	add.s32 	%r178, %r244, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r172 + 0 ], [ %rd36 + 0 ], 0x10, %r149;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r174 + 0 ], [ %rd37 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r176 + 0 ], [ %rd38 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r178 + 0 ], [ %rd39 + 0 ], 0x10, %r155;
	// end inline asm
	cp.async.commit_group;
	.loc	1 85 22                         // chunk_o.py:85:22
	add.s64 	%rd40, %rd28, 128;
	add.s64 	%rd41, %rd29, 128;
	add.s64 	%rd42, %rd30, 128;
	add.s64 	%rd43, %rd31, 128;
	add.s32 	%r245, %r229, 32768;
	add.s32 	%r180, %r245, %r228;
	add.s32 	%r182, %r245, %r233;
	add.s32 	%r184, %r245, %r237;
	add.s32 	%r186, %r245, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r180 + 0 ], [ %rd40 + 0 ], 0x10, %r149;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r182 + 0 ], [ %rd41 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r184 + 0 ], [ %rd42 + 0 ], 0x10, %r153;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r186 + 0 ], [ %rd43 + 0 ], 0x10, %r155;
	// end inline asm
	cp.async.commit_group;
	.loc	1 87 22                         // chunk_o.py:87:22
	add.s64 	%rd44, %rd32, 16384;
	add.s64 	%rd45, %rd33, 16384;
	add.s64 	%rd46, %rd34, 16384;
	add.s64 	%rd47, %rd35, 16384;
	add.s32 	%r246, %r229, 57344;
	add.s32 	%r188, %r246, %r228;
	add.s32 	%r190, %r246, %r233;
	add.s32 	%r192, %r246, %r237;
	add.s32 	%r194, %r246, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r188 + 0 ], [ %rd44 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r190 + 0 ], [ %rd45 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r192 + 0 ], [ %rd46 + 0 ], 0x10, %r165;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r194 + 0 ], [ %rd47 + 0 ], 0x10, %r165;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1787, 0f00000000;
	mov.b32 	%r1786, 1;
	mov.b32 	%r1785, -1;
	mov.b64 	%rd193, 128;
	mov.pred 	%p10, -1;
	mov.pred 	%p81, %p10;
	mov.b32 	%r1788, %r1787;
	mov.b32 	%r1789, %r1787;
	mov.b32 	%r1790, %r1787;
	mov.b32 	%r1791, %r1787;
	mov.b32 	%r1792, %r1787;
	mov.b32 	%r1793, %r1787;
	mov.b32 	%r1794, %r1787;
	mov.b32 	%r1795, %r1787;
	mov.b32 	%r1796, %r1787;
	mov.b32 	%r1797, %r1787;
	mov.b32 	%r1798, %r1787;
	mov.b32 	%r1799, %r1787;
	mov.b32 	%r1800, %r1787;
	mov.b32 	%r1801, %r1787;
	mov.b32 	%r1802, %r1787;
	mov.b32 	%r1803, %r1787;
	mov.b32 	%r1804, %r1787;
	mov.b32 	%r1805, %r1787;
	mov.b32 	%r1806, %r1787;
	mov.b32 	%r1807, %r1787;
	mov.b32 	%r1808, %r1787;
	mov.b32 	%r1809, %r1787;
	mov.b32 	%r1810, %r1787;
	mov.b32 	%r1811, %r1787;
	mov.b32 	%r1812, %r1787;
	mov.b32 	%r1813, %r1787;
	mov.b32 	%r1814, %r1787;
	mov.b32 	%r1815, %r1787;
	mov.b32 	%r1816, %r1787;
	mov.b32 	%r1817, %r1787;
	mov.b32 	%r1818, %r1787;
	mov.b32 	%r1819, %r1787;
	mov.b32 	%r1820, %r1787;
	mov.b32 	%r1821, %r1787;
	mov.b32 	%r1822, %r1787;
	mov.b32 	%r1823, %r1787;
	mov.b32 	%r1824, %r1787;
	mov.b32 	%r1825, %r1787;
	mov.b32 	%r1826, %r1787;
	mov.b32 	%r1827, %r1787;
	mov.b32 	%r1828, %r1787;
	mov.b32 	%r1829, %r1787;
	mov.b32 	%r1830, %r1787;
	mov.b32 	%r1831, %r1787;
	mov.b32 	%r1832, %r1787;
	mov.b32 	%r1833, %r1787;
	mov.b32 	%r1834, %r1787;
	mov.b32 	%r1835, %r1787;
	mov.b32 	%r1836, %r1787;
	mov.b32 	%r1837, %r1787;
	mov.b32 	%r1838, %r1787;
	mov.b32 	%r1839, %r1787;
	mov.b32 	%r1840, %r1787;
	mov.b32 	%r1841, %r1787;
	mov.b32 	%r1842, %r1787;
	mov.b32 	%r1843, %r1787;
	mov.b32 	%r1844, %r1787;
	mov.b32 	%r1845, %r1787;
	mov.b32 	%r1846, %r1787;
	mov.b32 	%r1847, %r1787;
	mov.b32 	%r1848, %r1787;
	mov.b32 	%r1849, %r1787;
	mov.b32 	%r1850, %r1787;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // chunk_o.py:0:22
	mov.pred 	%p2, %p81;
	.loc	1 78 21                         // chunk_o.py:78:21
	add.s32 	%r929, %r1785, 1;
	setp.gt.s32 	%p19, %r929, 2;
	selp.b32 	%r1785, 0, %r929, %p19;
	.loc	1 83 22                         // chunk_o.py:83:22
	cp.async.wait_group 	3;
	bar.sync 	0;
	shl.b32 	%r930, %r1785, 13;
	add.s32 	%r823, %r229, %r930;
	.loc	1 85 22                         // chunk_o.py:85:22
	add.s32 	%r829, %r242, %r930;
	.loc	1 87 22                         // chunk_o.py:87:22
	add.s32 	%r826, %r243, %r930;
	.loc	1 90 27                         // chunk_o.py:90:27
	shfl.sync.idx.b32 	%r934, %r4, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r935, %r823, 4, 14;
	cvt.u64.u32 	%rd99, %r935;
	or.b64 	%rd70, %rd99, 4611686293338849280;
	bfe.u32 	%r936, %r826, 4, 14;
	cvt.u64.u32 	%rd100, %r936;
	or.b64 	%rd71, %rd100, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850}, %rd70, %rd71, %p10, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r937, %r823, 32;
	bfe.u32 	%r938, %r937, 4, 14;
	cvt.u64.u32 	%rd101, %r938;
	or.b64 	%rd72, %rd101, 4611686293338849280;
	add.s32 	%r939, %r826, 2048;
	bfe.u32 	%r940, %r939, 4, 14;
	cvt.u64.u32 	%rd102, %r940;
	or.b64 	%rd73, %rd102, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850}, %rd72, %rd73, %p10, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r941, %r823, 64;
	bfe.u32 	%r942, %r941, 4, 14;
	cvt.u64.u32 	%rd103, %r942;
	or.b64 	%rd74, %rd103, 4611686293338849280;
	add.s32 	%r943, %r826, 4096;
	bfe.u32 	%r944, %r943, 4, 14;
	cvt.u64.u32 	%rd104, %r944;
	or.b64 	%rd75, %rd104, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850}, %rd74, %rd75, %p10, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r945, %r823, 96;
	bfe.u32 	%r946, %r945, 4, 14;
	cvt.u64.u32 	%rd105, %r946;
	or.b64 	%rd76, %rd105, 4611686293338849280;
	add.s32 	%r947, %r826, 6144;
	bfe.u32 	%r948, %r947, 4, 14;
	cvt.u64.u32 	%rd106, %r948;
	or.b64 	%rd77, %rd106, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850}, %rd76, %rd77, %p10, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	.loc	1 92 27                         // chunk_o.py:92:27
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r949, %r829, 4, 14;
	cvt.u64.u32 	%rd107, %r949;
	or.b64 	%rd79, %rd107, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818}, %rd70, %rd79, %p10, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r950, %r829, 32;
	bfe.u32 	%r951, %r950, 4, 14;
	cvt.u64.u32 	%rd108, %r951;
	or.b64 	%rd81, %rd108, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818}, %rd72, %rd81, %p10, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r952, %r829, 64;
	bfe.u32 	%r953, %r952, 4, 14;
	cvt.u64.u32 	%rd109, %r953;
	or.b64 	%rd83, %rd109, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818}, %rd74, %rd83, %p10, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r954, %r829, 96;
	bfe.u32 	%r955, %r954, 4, 14;
	cvt.u64.u32 	%rd110, %r955;
	or.b64 	%rd85, %rd110, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818}, %rd76, %rd85, %p10, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r897, 0;
	mov.b32 	%r824, %r897;
	mov.b32 	%r825, %r897;
	mov.b32 	%r827, %r897;
	mov.b32 	%r828, %r897;
	mov.b32 	%r830, %r897;
	mov.b32 	%r831, %r897;
	// begin inline asm
	// wait for regs: %r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818,%r823,%r824,%r825,%r826,%r827,%r828,%r829,%r830,%r831
	wgmma.wait_group.sync.aligned 2;
	// end inline asm
	.loc	1 78 21                         // chunk_o.py:78:21
	add.s32 	%r956, %r1786, 1;
	setp.gt.s32 	%p20, %r956, 2;
	selp.b32 	%r1786, 0, %r956, %p20;
	.loc	1 83 22                         // chunk_o.py:83:22
	or.b64 	%rd111, %rd193, %rd9;
	or.b64 	%rd112, %rd193, %rd5;
	or.b64 	%rd113, %rd193, %rd6;
	or.b64 	%rd114, %rd193, %rd7;
	or.b64 	%rd115, %rd193, %rd8;
	or.b64 	%rd116, %rd111, %rd14;
	or.b64 	%rd117, %rd111, %rd15;
	or.b64 	%rd118, %rd111, %rd16;
	or.b64 	%rd119, %rd111, %rd17;
	shl.b64 	%rd120, %rd116, 1;
	add.s64 	%rd86, %rd2, %rd120;
	shl.b64 	%rd121, %rd117, 1;
	add.s64 	%rd87, %rd2, %rd121;
	shl.b64 	%rd122, %rd118, 1;
	add.s64 	%rd88, %rd2, %rd122;
	shl.b64 	%rd123, %rd119, 1;
	add.s64 	%rd89, %rd2, %rd123;
	shl.b32 	%r957, %r1786, 13;
	add.s32 	%r958, %r229, %r957;
	bar.sync 	0;
	add.s32 	%r905, %r958, %r228;
	add.s32 	%r907, %r958, %r233;
	add.s32 	%r909, %r958, %r237;
	add.s32 	%r911, %r958, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r905 + 0 ], [ %rd86 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r907 + 0 ], [ %rd87 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r909 + 0 ], [ %rd88 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r911 + 0 ], [ %rd89 + 0 ], 0x10, %r897;
	// end inline asm
	cp.async.commit_group;
	.loc	1 85 22                         // chunk_o.py:85:22
	add.s64 	%rd90, %rd3, %rd120;
	add.s64 	%rd91, %rd3, %rd121;
	add.s64 	%rd92, %rd3, %rd122;
	add.s64 	%rd93, %rd3, %rd123;
	add.s32 	%r963, %r242, %r957;
	add.s32 	%r913, %r963, %r228;
	add.s32 	%r915, %r963, %r233;
	add.s32 	%r917, %r963, %r237;
	add.s32 	%r919, %r963, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r913 + 0 ], [ %rd90 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r915 + 0 ], [ %rd91 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r917 + 0 ], [ %rd92 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r919 + 0 ], [ %rd93 + 0 ], 0x10, %r897;
	// end inline asm
	cp.async.commit_group;
	.loc	1 87 22                         // chunk_o.py:87:22
	shl.b64 	%rd124, %rd112, 8;
	add.s64 	%rd94, %rd19, %rd124;
	shl.b64 	%rd125, %rd113, 8;
	add.s64 	%rd95, %rd19, %rd125;
	shl.b64 	%rd126, %rd114, 8;
	add.s64 	%rd96, %rd19, %rd126;
	shl.b64 	%rd127, %rd115, 8;
	add.s64 	%rd97, %rd19, %rd127;
	add.s32 	%r964, %r243, %r957;
	add.s32 	%r921, %r964, %r228;
	add.s32 	%r923, %r964, %r233;
	add.s32 	%r925, %r964, %r237;
	add.s32 	%r927, %r964, %r241;
	// begin inline asm
	cp.async.cg.shared.global [ %r921 + 0 ], [ %rd94 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r923 + 0 ], [ %rd95 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r925 + 0 ], [ %rd96 + 0 ], 0x10, %r897;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r927 + 0 ], [ %rd97 + 0 ], 0x10, %r897;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd193, 192;
	mov.pred 	%p81, 0;
	.loc	1 78 21                         // chunk_o.py:78:21
	@%p2 bra 	$L__BB0_1;
// %bb.2:
	.loc	1 72 9                          // chunk_o.py:72:9
	shl.b64 	%rd158, %rd1, 1;
	add.s64 	%rd159, %rd23, %rd158;
	.loc	1 71 9                          // chunk_o.py:71:9
	add.s64 	%rd160, %rd21, %rd158;
	.loc	1 78 21                         // chunk_o.py:78:21
	// begin inline asm
	// wait for regs: %r1819,%r1820,%r1821,%r1822,%r1823,%r1824,%r1825,%r1826,%r1827,%r1828,%r1829,%r1830,%r1831,%r1832,%r1833,%r1834,%r1835,%r1836,%r1837,%r1838,%r1839,%r1840,%r1841,%r1842,%r1843,%r1844,%r1845,%r1846,%r1847,%r1848,%r1849,%r1850,%r1787,%r1788,%r1789,%r1790,%r1791,%r1792,%r1793,%r1794,%r1795,%r1796,%r1797,%r1798,%r1799,%r1800,%r1801,%r1802,%r1803,%r1804,%r1805,%r1806,%r1807,%r1808,%r1809,%r1810,%r1811,%r1812,%r1813,%r1814,%r1815,%r1816,%r1817,%r1818
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 95 13                         // chunk_o.py:95:13
	mul.wide.s32 	%rd161, %r1, 4;
	add.s64 	%rd162, %rd22, %rd161;
	.loc	1 97 22                         // chunk_o.py:97:22
	bfe.u32 	%r1467, %r3, 2, 3;
	shr.u32 	%r1468, %r3, 1;
	and.b32 	%r1469, %r1468, 48;
	or.b32 	%r1470, %r1469, %r1467;
	or.b32 	%r1471, %r1470, 8;
	shl.b32 	%r1472, %r3, 1;
	and.b32 	%r1473, %r1472, 6;
	or.b32 	%r1474, %r1473, 8;
	or.b32 	%r1475, %r1473, 9;
	or.b32 	%r1476, %r1473, 16;
	or.b32 	%r1477, %r1473, 17;
	or.b32 	%r1478, %r1473, 24;
	or.b32 	%r1479, %r1473, 25;
	or.b32 	%r1480, %r1473, 32;
	or.b32 	%r1481, %r1473, 33;
	or.b32 	%r1482, %r1473, 40;
	or.b32 	%r1483, %r1473, 41;
	or.b32 	%r1484, %r1473, 48;
	or.b32 	%r1485, %r1473, 49;
	or.b32 	%r1486, %r1473, 56;
	or.b32 	%r1487, %r1473, 57;
	or.b32 	%r1488, %r1470, %r2;
	or.b32 	%r1489, %r1471, %r2;
	or.b32 	%r1490, %r1473, %r2;
	or.b32 	%r1491, %r1490, 1;
	or.b32 	%r1492, %r1474, %r2;
	or.b32 	%r1493, %r1475, %r2;
	or.b32 	%r1494, %r1476, %r2;
	or.b32 	%r1495, %r1477, %r2;
	or.b32 	%r1496, %r1478, %r2;
	or.b32 	%r1497, %r1479, %r2;
	or.b32 	%r1498, %r1480, %r2;
	or.b32 	%r1499, %r1481, %r2;
	or.b32 	%r1500, %r1482, %r2;
	or.b32 	%r1501, %r1483, %r2;
	or.b32 	%r1502, %r1484, %r2;
	or.b32 	%r1503, %r1485, %r2;
	or.b32 	%r1504, %r1486, %r2;
	or.b32 	%r1505, %r1487, %r2;
	shl.b32 	%r1506, %r1488, 7;
	cvt.u64.u32 	%rd163, %r1506;
	add.s64 	%rd128, %rd162, %rd163;
	shl.b32 	%r1507, %r1489, 7;
	cvt.u64.u32 	%rd164, %r1507;
	add.s64 	%rd129, %rd162, %rd164;
	shl.b32 	%r1508, %r1490, 7;
	cvt.u64.u32 	%rd165, %r1508;
	add.s64 	%rd130, %rd162, %rd165;
	shl.b32 	%r1509, %r1491, 7;
	cvt.u64.u32 	%rd166, %r1509;
	add.s64 	%rd131, %rd162, %rd166;
	shl.b32 	%r1510, %r1492, 7;
	cvt.u64.u32 	%rd167, %r1510;
	add.s64 	%rd132, %rd162, %rd167;
	shl.b32 	%r1511, %r1493, 7;
	cvt.u64.u32 	%rd168, %r1511;
	add.s64 	%rd133, %rd162, %rd168;
	shl.b32 	%r1512, %r1494, 7;
	cvt.u64.u32 	%rd169, %r1512;
	add.s64 	%rd134, %rd162, %rd169;
	shl.b32 	%r1513, %r1495, 7;
	cvt.u64.u32 	%rd170, %r1513;
	add.s64 	%rd135, %rd162, %rd170;
	shl.b32 	%r1514, %r1496, 7;
	cvt.u64.u32 	%rd171, %r1514;
	add.s64 	%rd136, %rd162, %rd171;
	shl.b32 	%r1515, %r1497, 7;
	cvt.u64.u32 	%rd172, %r1515;
	add.s64 	%rd137, %rd162, %rd172;
	shl.b32 	%r1516, %r1498, 7;
	cvt.u64.u32 	%rd173, %r1516;
	add.s64 	%rd138, %rd162, %rd173;
	shl.b32 	%r1517, %r1499, 7;
	cvt.u64.u32 	%rd174, %r1517;
	add.s64 	%rd139, %rd162, %rd174;
	shl.b32 	%r1518, %r1500, 7;
	cvt.u64.u32 	%rd175, %r1518;
	add.s64 	%rd140, %rd162, %rd175;
	shl.b32 	%r1519, %r1501, 7;
	cvt.u64.u32 	%rd176, %r1519;
	add.s64 	%rd141, %rd162, %rd176;
	shl.b32 	%r1520, %r1502, 7;
	cvt.u64.u32 	%rd177, %r1520;
	add.s64 	%rd142, %rd162, %rd177;
	shl.b32 	%r1521, %r1503, 7;
	cvt.u64.u32 	%rd178, %r1521;
	add.s64 	%rd143, %rd162, %rd178;
	shl.b32 	%r1522, %r1504, 7;
	cvt.u64.u32 	%rd179, %r1522;
	add.s64 	%rd144, %rd162, %rd179;
	shl.b32 	%r1523, %r1505, 7;
	cvt.u64.u32 	%rd180, %r1523;
	add.s64 	%rd145, %rd162, %rd180;
	setp.lt.s32 	%p21, %r1488, %r147;
	setp.lt.s32 	%p22, %r1489, %r147;
	setp.lt.s32 	%p23, %r1490, %r147;
	setp.lt.s32 	%p24, %r1491, %r147;
	setp.lt.s32 	%p25, %r1492, %r147;
	setp.lt.s32 	%p26, %r1493, %r147;
	setp.lt.s32 	%p27, %r1494, %r147;
	setp.lt.s32 	%p28, %r1495, %r147;
	setp.lt.s32 	%p29, %r1496, %r147;
	setp.lt.s32 	%p30, %r1497, %r147;
	setp.lt.s32 	%p31, %r1498, %r147;
	setp.lt.s32 	%p32, %r1499, %r147;
	setp.lt.s32 	%p33, %r1500, %r147;
	setp.lt.s32 	%p34, %r1501, %r147;
	setp.lt.s32 	%p35, %r1502, %r147;
	setp.lt.s32 	%p36, %r1503, %r147;
	setp.lt.s32 	%p37, %r1504, %r147;
	setp.lt.s32 	%p38, %r1505, %r147;
	// begin inline asm
	mov.u32 %r1093, 0x0;
	@%p21 ld.global.b32 { %r1093 }, [ %rd128 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1094, 0x0;
	@%p22 ld.global.b32 { %r1094 }, [ %rd129 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1095, 0x0;
	@%p23 ld.global.b32 { %r1095 }, [ %rd130 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1096, 0x0;
	@%p24 ld.global.b32 { %r1096 }, [ %rd131 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1097, 0x0;
	@%p25 ld.global.b32 { %r1097 }, [ %rd132 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1098, 0x0;
	@%p26 ld.global.b32 { %r1098 }, [ %rd133 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1099, 0x0;
	@%p27 ld.global.b32 { %r1099 }, [ %rd134 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1100, 0x0;
	@%p28 ld.global.b32 { %r1100 }, [ %rd135 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1101, 0x0;
	@%p29 ld.global.b32 { %r1101 }, [ %rd136 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1102, 0x0;
	@%p30 ld.global.b32 { %r1102 }, [ %rd137 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1103, 0x0;
	@%p31 ld.global.b32 { %r1103 }, [ %rd138 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1104, 0x0;
	@%p32 ld.global.b32 { %r1104 }, [ %rd139 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1105, 0x0;
	@%p33 ld.global.b32 { %r1105 }, [ %rd140 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1106, 0x0;
	@%p34 ld.global.b32 { %r1106 }, [ %rd141 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1107, 0x0;
	@%p35 ld.global.b32 { %r1107 }, [ %rd142 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1108, 0x0;
	@%p36 ld.global.b32 { %r1108 }, [ %rd143 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1109, 0x0;
	@%p37 ld.global.b32 { %r1109 }, [ %rd144 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1110, 0x0;
	@%p38 ld.global.b32 { %r1110 }, [ %rd145 + 0 ];
	// end inline asm
	.loc	1 98 24                         // chunk_o.py:98:24
	mul.f32 	%r1524, %r1093, 0f3FB8AA3B;
	ex2.approx.f32 	%r1525, %r1524;
	mul.f32 	%r1526, %r1094, 0f3FB8AA3B;
	ex2.approx.f32 	%r1527, %r1526;
	.loc	1 99 39                         // chunk_o.py:99:39
	sub.f32 	%r1528, %r1093, %r1095;
	sub.f32 	%r1529, %r1093, %r1096;
	sub.f32 	%r1530, %r1094, %r1095;
	sub.f32 	%r1531, %r1094, %r1096;
	sub.f32 	%r1532, %r1093, %r1097;
	sub.f32 	%r1533, %r1093, %r1098;
	sub.f32 	%r1534, %r1094, %r1097;
	sub.f32 	%r1535, %r1094, %r1098;
	sub.f32 	%r1536, %r1093, %r1099;
	sub.f32 	%r1537, %r1093, %r1100;
	sub.f32 	%r1538, %r1094, %r1099;
	sub.f32 	%r1539, %r1094, %r1100;
	sub.f32 	%r1540, %r1093, %r1101;
	sub.f32 	%r1541, %r1093, %r1102;
	sub.f32 	%r1542, %r1094, %r1101;
	sub.f32 	%r1543, %r1094, %r1102;
	sub.f32 	%r1544, %r1093, %r1103;
	sub.f32 	%r1545, %r1093, %r1104;
	sub.f32 	%r1546, %r1094, %r1103;
	sub.f32 	%r1547, %r1094, %r1104;
	sub.f32 	%r1548, %r1093, %r1105;
	sub.f32 	%r1549, %r1093, %r1106;
	sub.f32 	%r1550, %r1094, %r1105;
	sub.f32 	%r1551, %r1094, %r1106;
	sub.f32 	%r1552, %r1093, %r1107;
	sub.f32 	%r1553, %r1093, %r1108;
	sub.f32 	%r1554, %r1094, %r1107;
	sub.f32 	%r1555, %r1094, %r1108;
	sub.f32 	%r1556, %r1094, %r1109;
	sub.f32 	%r1557, %r1094, %r1110;
	.loc	1 99 24                         // chunk_o.py:99:24
	mul.f32 	%r1558, %r1528, 0f3FB8AA3B;
	ex2.approx.f32 	%r1559, %r1558;
	mul.f32 	%r1560, %r1529, 0f3FB8AA3B;
	ex2.approx.f32 	%r1561, %r1560;
	mul.f32 	%r1562, %r1530, 0f3FB8AA3B;
	ex2.approx.f32 	%r1563, %r1562;
	mul.f32 	%r1564, %r1531, 0f3FB8AA3B;
	ex2.approx.f32 	%r1565, %r1564;
	mul.f32 	%r1566, %r1532, 0f3FB8AA3B;
	ex2.approx.f32 	%r1567, %r1566;
	mul.f32 	%r1568, %r1533, 0f3FB8AA3B;
	ex2.approx.f32 	%r1569, %r1568;
	mul.f32 	%r1570, %r1534, 0f3FB8AA3B;
	ex2.approx.f32 	%r1571, %r1570;
	mul.f32 	%r1572, %r1535, 0f3FB8AA3B;
	ex2.approx.f32 	%r1573, %r1572;
	mul.f32 	%r1574, %r1536, 0f3FB8AA3B;
	ex2.approx.f32 	%r1575, %r1574;
	mul.f32 	%r1576, %r1537, 0f3FB8AA3B;
	ex2.approx.f32 	%r1577, %r1576;
	mul.f32 	%r1578, %r1538, 0f3FB8AA3B;
	ex2.approx.f32 	%r1579, %r1578;
	mul.f32 	%r1580, %r1539, 0f3FB8AA3B;
	ex2.approx.f32 	%r1581, %r1580;
	mul.f32 	%r1582, %r1540, 0f3FB8AA3B;
	ex2.approx.f32 	%r1583, %r1582;
	mul.f32 	%r1584, %r1541, 0f3FB8AA3B;
	ex2.approx.f32 	%r1585, %r1584;
	mul.f32 	%r1586, %r1542, 0f3FB8AA3B;
	ex2.approx.f32 	%r1587, %r1586;
	mul.f32 	%r1588, %r1543, 0f3FB8AA3B;
	ex2.approx.f32 	%r1589, %r1588;
	mul.f32 	%r1590, %r1544, 0f3FB8AA3B;
	ex2.approx.f32 	%r1591, %r1590;
	mul.f32 	%r1592, %r1545, 0f3FB8AA3B;
	ex2.approx.f32 	%r1593, %r1592;
	mul.f32 	%r1594, %r1546, 0f3FB8AA3B;
	ex2.approx.f32 	%r1595, %r1594;
	mul.f32 	%r1596, %r1547, 0f3FB8AA3B;
	ex2.approx.f32 	%r1597, %r1596;
	mul.f32 	%r1598, %r1548, 0f3FB8AA3B;
	ex2.approx.f32 	%r1599, %r1598;
	mul.f32 	%r1600, %r1549, 0f3FB8AA3B;
	ex2.approx.f32 	%r1601, %r1600;
	mul.f32 	%r1602, %r1550, 0f3FB8AA3B;
	ex2.approx.f32 	%r1603, %r1602;
	mul.f32 	%r1604, %r1551, 0f3FB8AA3B;
	ex2.approx.f32 	%r1605, %r1604;
	mul.f32 	%r1606, %r1552, 0f3FB8AA3B;
	ex2.approx.f32 	%r1607, %r1606;
	mul.f32 	%r1608, %r1553, 0f3FB8AA3B;
	ex2.approx.f32 	%r1609, %r1608;
	mul.f32 	%r1610, %r1554, 0f3FB8AA3B;
	ex2.approx.f32 	%r1611, %r1610;
	mul.f32 	%r1612, %r1555, 0f3FB8AA3B;
	ex2.approx.f32 	%r1613, %r1612;
	mul.f32 	%r1614, %r1556, 0f3FB8AA3B;
	ex2.approx.f32 	%r1615, %r1614;
	mul.f32 	%r1616, %r1557, 0f3FB8AA3B;
	ex2.approx.f32 	%r1617, %r1616;
	.loc	1 99 20                         // chunk_o.py:99:20
	mul.f32 	%r1618, %r1787, %r1559;
	mul.f32 	%r1619, %r1788, %r1561;
	mul.f32 	%r1620, %r1789, %r1563;
	mul.f32 	%r1621, %r1790, %r1565;
	mul.f32 	%r1622, %r1791, %r1567;
	mul.f32 	%r1623, %r1792, %r1569;
	mul.f32 	%r1624, %r1793, %r1571;
	mul.f32 	%r1625, %r1794, %r1573;
	mul.f32 	%r1626, %r1795, %r1575;
	mul.f32 	%r1627, %r1796, %r1577;
	mul.f32 	%r1628, %r1797, %r1579;
	mul.f32 	%r1629, %r1798, %r1581;
	mul.f32 	%r1630, %r1799, %r1583;
	mul.f32 	%r1631, %r1800, %r1585;
	mul.f32 	%r1632, %r1801, %r1587;
	mul.f32 	%r1633, %r1802, %r1589;
	mul.f32 	%r1634, %r1803, %r1591;
	mul.f32 	%r1635, %r1804, %r1593;
	mul.f32 	%r1636, %r1805, %r1595;
	mul.f32 	%r1637, %r1806, %r1597;
	mul.f32 	%r1638, %r1807, %r1599;
	mul.f32 	%r1639, %r1808, %r1601;
	mul.f32 	%r1640, %r1809, %r1603;
	mul.f32 	%r1641, %r1810, %r1605;
	mul.f32 	%r1642, %r1811, %r1607;
	mul.f32 	%r1643, %r1812, %r1609;
	mul.f32 	%r1644, %r1813, %r1611;
	mul.f32 	%r1645, %r1814, %r1613;
	mul.f32 	%r1646, %r1817, %r1615;
	mul.f32 	%r1647, %r1818, %r1617;
	.loc	1 109 27                        // chunk_o.py:109:27
	setp.ge.u32 	%p54, %r1470, %r1473;
	setp.gt.u32 	%p55, %r1470, %r1473;
	setp.ge.u32 	%p56, %r1470, %r1474;
	setp.ge.u32 	%p57, %r1470, %r1475;
	setp.ge.u32 	%p58, %r1471, %r1475;
	setp.ge.u32 	%p59, %r1470, %r1476;
	setp.ge.u32 	%p60, %r1470, %r1477;
	setp.ge.u32 	%p61, %r1471, %r1476;
	setp.ge.u32 	%p62, %r1471, %r1477;
	setp.ge.u32 	%p63, %r1470, %r1478;
	setp.ge.u32 	%p64, %r1470, %r1479;
	setp.ge.u32 	%p65, %r1471, %r1478;
	setp.ge.u32 	%p66, %r1471, %r1479;
	setp.ge.u32 	%p67, %r1470, %r1480;
	setp.ge.u32 	%p68, %r1470, %r1481;
	setp.ge.u32 	%p69, %r1471, %r1480;
	setp.ge.u32 	%p70, %r1471, %r1481;
	setp.ge.u32 	%p71, %r1470, %r1482;
	setp.ge.u32 	%p72, %r1470, %r1483;
	setp.ge.u32 	%p73, %r1471, %r1482;
	setp.ge.u32 	%p74, %r1471, %r1483;
	setp.ge.u32 	%p75, %r1470, %r1484;
	setp.ge.u32 	%p76, %r1470, %r1485;
	setp.ge.u32 	%p77, %r1471, %r1484;
	setp.ge.u32 	%p78, %r1471, %r1485;
	setp.ge.u32 	%p79, %r1471, %r1486;
	setp.ge.u32 	%p80, %r1471, %r1487;
	.loc	1 115 18                        // chunk_o.py:115:18
	add.s64 	%rd181, %rd14, %rd18;
	add.s64 	%rd182, %rd15, %rd18;
	add.s64 	%rd183, %rd16, %rd18;
	add.s64 	%rd184, %rd17, %rd18;
	shl.b64 	%rd185, %rd181, 1;
	add.s64 	%rd146, %rd160, %rd185;
	shl.b64 	%rd186, %rd182, 1;
	add.s64 	%rd147, %rd160, %rd186;
	shl.b64 	%rd187, %rd183, 1;
	add.s64 	%rd148, %rd160, %rd187;
	shl.b64 	%rd188, %rd184, 1;
	add.s64 	%rd149, %rd160, %rd188;
	and.pred 	%p39, %p1, %p4;
	and.pred 	%p40, %p1, %p5;
	and.pred 	%p41, %p1, %p6;
	and.pred 	%p42, %p1, %p7;
	// begin inline asm
	mov.u32 %r1111, 0x0;
	mov.u32 %r1112, 0x0;
	mov.u32 %r1113, 0x0;
	mov.u32 %r1114, 0x0;
	@%p39 ld.global.v4.b32 { %r1111, %r1112, %r1113, %r1114 }, [ %rd146 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1115, 0x0;
	mov.u32 %r1116, 0x0;
	mov.u32 %r1117, 0x0;
	mov.u32 %r1118, 0x0;
	@%p40 ld.global.v4.b32 { %r1115, %r1116, %r1117, %r1118 }, [ %rd147 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1119, 0x0;
	mov.u32 %r1120, 0x0;
	mov.u32 %r1121, 0x0;
	mov.u32 %r1122, 0x0;
	@%p41 ld.global.v4.b32 { %r1119, %r1120, %r1121, %r1122 }, [ %rd148 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r1123, 0x0;
	mov.u32 %r1124, 0x0;
	mov.u32 %r1125, 0x0;
	mov.u32 %r1126, 0x0;
	@%p42 ld.global.v4.b32 { %r1123, %r1124, %r1125, %r1126 }, [ %rd149 + 0 ];
	// end inline asm
	st.shared.v4.b32 	[%r7], {%r1111, %r1112, %r1113, %r1114};
	st.shared.v4.b32 	[%r9], {%r1115, %r1116, %r1117, %r1118};
	st.shared.v4.b32 	[%r11], {%r1119, %r1120, %r1121, %r1122};
	st.shared.v4.b32 	[%r13], {%r1123, %r1124, %r1125, %r1126};
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs1, %r1618;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs2, %rs1, 0x0000, %p23;
	selp.b16 	%rs3, %rs2, 0x0000, %p54;
	selp.b16 	%rs4, %rs3, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs5, %r1619;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs6, %rs5, 0x0000, %p24;
	selp.b16 	%rs7, %rs6, 0x0000, %p55;
	selp.b16 	%rs8, %rs7, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs9, %r1620;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs10, %rs9, 0x0000, %p23;
	selp.b16 	%rs11, %rs10, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs12, %r1621;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs13, %rs12, 0x0000, %p24;
	selp.b16 	%rs14, %rs13, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs15, %r1622;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs16, %rs15, 0x0000, %p25;
	selp.b16 	%rs17, %rs16, 0x0000, %p56;
	selp.b16 	%rs18, %rs17, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs19, %r1623;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs20, %rs19, 0x0000, %p26;
	selp.b16 	%rs21, %rs20, 0x0000, %p57;
	selp.b16 	%rs22, %rs21, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs23, %r1624;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs24, %rs23, 0x0000, %p25;
	selp.b16 	%rs25, %rs24, 0x0000, %p54;
	selp.b16 	%rs26, %rs25, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs27, %r1625;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs28, %rs27, 0x0000, %p26;
	selp.b16 	%rs29, %rs28, 0x0000, %p58;
	selp.b16 	%rs30, %rs29, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs31, %r1626;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs32, %rs31, 0x0000, %p27;
	selp.b16 	%rs33, %rs32, 0x0000, %p59;
	selp.b16 	%rs34, %rs33, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs35, %r1627;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs36, %rs35, 0x0000, %p28;
	selp.b16 	%rs37, %rs36, 0x0000, %p60;
	selp.b16 	%rs38, %rs37, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs39, %r1628;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs40, %rs39, 0x0000, %p27;
	selp.b16 	%rs41, %rs40, 0x0000, %p61;
	selp.b16 	%rs42, %rs41, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs43, %r1629;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs44, %rs43, 0x0000, %p28;
	selp.b16 	%rs45, %rs44, 0x0000, %p62;
	selp.b16 	%rs46, %rs45, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs47, %r1630;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs48, %rs47, 0x0000, %p29;
	selp.b16 	%rs49, %rs48, 0x0000, %p63;
	selp.b16 	%rs50, %rs49, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs51, %r1631;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs52, %rs51, 0x0000, %p30;
	selp.b16 	%rs53, %rs52, 0x0000, %p64;
	selp.b16 	%rs54, %rs53, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs55, %r1632;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs56, %rs55, 0x0000, %p29;
	selp.b16 	%rs57, %rs56, 0x0000, %p65;
	selp.b16 	%rs58, %rs57, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs59, %r1633;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs60, %rs59, 0x0000, %p30;
	selp.b16 	%rs61, %rs60, 0x0000, %p66;
	selp.b16 	%rs62, %rs61, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs63, %r1634;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs64, %rs63, 0x0000, %p31;
	selp.b16 	%rs65, %rs64, 0x0000, %p67;
	selp.b16 	%rs66, %rs65, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs67, %r1635;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs68, %rs67, 0x0000, %p32;
	selp.b16 	%rs69, %rs68, 0x0000, %p68;
	selp.b16 	%rs70, %rs69, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs71, %r1636;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs72, %rs71, 0x0000, %p31;
	selp.b16 	%rs73, %rs72, 0x0000, %p69;
	selp.b16 	%rs74, %rs73, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs75, %r1637;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs76, %rs75, 0x0000, %p32;
	selp.b16 	%rs77, %rs76, 0x0000, %p70;
	selp.b16 	%rs78, %rs77, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs79, %r1638;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs80, %rs79, 0x0000, %p33;
	selp.b16 	%rs81, %rs80, 0x0000, %p71;
	selp.b16 	%rs82, %rs81, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs83, %r1639;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs84, %rs83, 0x0000, %p34;
	selp.b16 	%rs85, %rs84, 0x0000, %p72;
	selp.b16 	%rs86, %rs85, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs87, %r1640;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs88, %rs87, 0x0000, %p33;
	selp.b16 	%rs89, %rs88, 0x0000, %p73;
	selp.b16 	%rs90, %rs89, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs91, %r1641;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs92, %rs91, 0x0000, %p34;
	selp.b16 	%rs93, %rs92, 0x0000, %p74;
	selp.b16 	%rs94, %rs93, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs95, %r1642;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs96, %rs95, 0x0000, %p35;
	selp.b16 	%rs97, %rs96, 0x0000, %p75;
	selp.b16 	%rs98, %rs97, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs99, %r1643;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs100, %rs99, 0x0000, %p36;
	selp.b16 	%rs101, %rs100, 0x0000, %p76;
	selp.b16 	%rs102, %rs101, 0x0000, %p21;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs103, %r1644;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs104, %rs103, 0x0000, %p35;
	selp.b16 	%rs105, %rs104, 0x0000, %p77;
	selp.b16 	%rs106, %rs105, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs107, %r1645;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs108, %rs107, 0x0000, %p36;
	selp.b16 	%rs109, %rs108, 0x0000, %p78;
	selp.b16 	%rs110, %rs109, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs111, %r1646;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs112, %rs111, 0x0000, %p37;
	selp.b16 	%rs113, %rs112, 0x0000, %p79;
	selp.b16 	%rs114, %rs113, 0x0000, %p22;
	.loc	1 118 38                        // chunk_o.py:118:38
	cvt.rn.bf16.f32 	%rs115, %r1647;
	.loc	1 110 29                        // chunk_o.py:110:29
	selp.b16 	%rs116, %rs115, 0x0000, %p38;
	selp.b16 	%rs117, %rs116, 0x0000, %p80;
	selp.b16 	%rs118, %rs117, 0x0000, %p22;
	.loc	1 118 50                        // chunk_o.py:118:50
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1648, %r4, 0, 31, -1;
	mov.b32 	%r1159, {%rs4, %rs8};
	mov.b32 	%r1160, {%rs11, %rs14};
	mov.b32 	%r1161, {%rs18, %rs22};
	mov.b32 	%r1162, {%rs26, %rs30};
	mov.b32 	%r1227, {%rs34, %rs38};
	mov.b32 	%r1228, {%rs42, %rs46};
	mov.b32 	%r1229, {%rs50, %rs54};
	mov.b32 	%r1230, {%rs58, %rs62};
	mov.b32 	%r1295, {%rs66, %rs70};
	mov.b32 	%r1296, {%rs74, %rs78};
	mov.b32 	%r1297, {%rs82, %rs86};
	mov.b32 	%r1298, {%rs90, %rs94};
	mov.b32 	%r1363, {%rs98, %rs102};
	mov.b32 	%r1364, {%rs106, %rs110};
	mov.b32 	%r1366, {%rs114, %rs118};
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1650, %r229, 4, 14;
	cvt.u64.u32 	%rd189, %r1650;
	or.b64 	%rd150, %rd189, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1231,%r1232,%r1233,%r1234,%r1235,%r1236,%r1237,%r1238,%r1239,%r1240,%r1241,%r1242,%r1243,%r1244,%r1245,%r1246,%r1247,%r1248,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254,%r1255,%r1256,%r1257,%r1258,%r1259,%r1260,%r1261,%r1262}, {%r1159,%r1160,%r1161,%r1162}, %rd150, 0, 1, 1, 1;
	// end inline asm
	add.s32 	%r1651, %r229, 2048;
	bfe.u32 	%r1652, %r1651, 4, 14;
	cvt.u64.u32 	%rd190, %r1652;
	or.b64 	%rd151, %rd190, 4611686293338849280;
	mov.pred 	%p43, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1231,%r1232,%r1233,%r1234,%r1235,%r1236,%r1237,%r1238,%r1239,%r1240,%r1241,%r1242,%r1243,%r1244,%r1245,%r1246,%r1247,%r1248,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254,%r1255,%r1256,%r1257,%r1258,%r1259,%r1260,%r1261,%r1262}, {%r1227,%r1228,%r1229,%r1230}, %rd151, %p43, 1, 1, 1;
	// end inline asm
	add.s32 	%r1653, %r229, 4096;
	bfe.u32 	%r1654, %r1653, 4, 14;
	cvt.u64.u32 	%rd191, %r1654;
	or.b64 	%rd152, %rd191, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1231,%r1232,%r1233,%r1234,%r1235,%r1236,%r1237,%r1238,%r1239,%r1240,%r1241,%r1242,%r1243,%r1244,%r1245,%r1246,%r1247,%r1248,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254,%r1255,%r1256,%r1257,%r1258,%r1259,%r1260,%r1261,%r1262}, {%r1295,%r1296,%r1297,%r1298}, %rd152, %p43, 1, 1, 1;
	// end inline asm
	add.s32 	%r1655, %r229, 6144;
	bfe.u32 	%r1656, %r1655, 4, 14;
	cvt.u64.u32 	%rd192, %r1656;
	or.b64 	%rd153, %rd192, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1231,%r1232,%r1233,%r1234,%r1235,%r1236,%r1237,%r1238,%r1239,%r1240,%r1241,%r1242,%r1243,%r1244,%r1245,%r1246,%r1247,%r1248,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254,%r1255,%r1256,%r1257,%r1258,%r1259,%r1260,%r1261,%r1262}, {%r1363,%r1364,%r897,%r1366}, %rd153, %p43, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %r1231,%r1232,%r1233,%r1234,%r1235,%r1236,%r1237,%r1238,%r1239,%r1240,%r1241,%r1242,%r1243,%r1244,%r1245,%r1246,%r1247,%r1248,%r1249,%r1250,%r1251,%r1252,%r1253,%r1254,%r1255,%r1256,%r1257,%r1258,%r1259,%r1260,%r1261,%r1262
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1657, %r1820, %r1525;
	mul.f32 	%r1658, %r1819, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1659, %r146, %r1232;
	mul.f32 	%r1660, %r146, %r1231;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1661, %r146, %r1658, %r1660;
	fma.rn.f32 	%r1662, %r146, %r1657, %r1659;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1432, %r1662, %r1661;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1663, %r1822, %r1527;
	mul.f32 	%r1664, %r1821, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1665, %r146, %r1234;
	mul.f32 	%r1666, %r146, %r1233;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1667, %r146, %r1664, %r1666;
	fma.rn.f32 	%r1668, %r146, %r1663, %r1665;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1433, %r1668, %r1667;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1669, %r1824, %r1525;
	mul.f32 	%r1670, %r1823, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1671, %r146, %r1236;
	mul.f32 	%r1672, %r146, %r1235;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1673, %r146, %r1670, %r1672;
	fma.rn.f32 	%r1674, %r146, %r1669, %r1671;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1434, %r1674, %r1673;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1675, %r1826, %r1527;
	mul.f32 	%r1676, %r1825, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1677, %r146, %r1238;
	mul.f32 	%r1678, %r146, %r1237;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1679, %r146, %r1676, %r1678;
	fma.rn.f32 	%r1680, %r146, %r1675, %r1677;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1435, %r1680, %r1679;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1681, %r1828, %r1525;
	mul.f32 	%r1682, %r1827, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1683, %r146, %r1240;
	mul.f32 	%r1684, %r146, %r1239;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1685, %r146, %r1682, %r1684;
	fma.rn.f32 	%r1686, %r146, %r1681, %r1683;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1437, %r1686, %r1685;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1687, %r1830, %r1527;
	mul.f32 	%r1688, %r1829, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1689, %r146, %r1242;
	mul.f32 	%r1690, %r146, %r1241;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1691, %r146, %r1688, %r1690;
	fma.rn.f32 	%r1692, %r146, %r1687, %r1689;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1438, %r1692, %r1691;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1693, %r1832, %r1525;
	mul.f32 	%r1694, %r1831, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1695, %r146, %r1244;
	mul.f32 	%r1696, %r146, %r1243;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1697, %r146, %r1694, %r1696;
	fma.rn.f32 	%r1698, %r146, %r1693, %r1695;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1439, %r1698, %r1697;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1699, %r1834, %r1527;
	mul.f32 	%r1700, %r1833, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1701, %r146, %r1246;
	mul.f32 	%r1702, %r146, %r1245;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1703, %r146, %r1700, %r1702;
	fma.rn.f32 	%r1704, %r146, %r1699, %r1701;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1440, %r1704, %r1703;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1705, %r1836, %r1525;
	mul.f32 	%r1706, %r1835, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1707, %r146, %r1248;
	mul.f32 	%r1708, %r146, %r1247;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1709, %r146, %r1706, %r1708;
	fma.rn.f32 	%r1710, %r146, %r1705, %r1707;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1442, %r1710, %r1709;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1711, %r1838, %r1527;
	mul.f32 	%r1712, %r1837, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1713, %r146, %r1250;
	mul.f32 	%r1714, %r146, %r1249;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1715, %r146, %r1712, %r1714;
	fma.rn.f32 	%r1716, %r146, %r1711, %r1713;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1443, %r1716, %r1715;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1717, %r1840, %r1525;
	mul.f32 	%r1718, %r1839, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1719, %r146, %r1252;
	mul.f32 	%r1720, %r146, %r1251;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1721, %r146, %r1718, %r1720;
	fma.rn.f32 	%r1722, %r146, %r1717, %r1719;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1444, %r1722, %r1721;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1723, %r1842, %r1527;
	mul.f32 	%r1724, %r1841, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1725, %r146, %r1254;
	mul.f32 	%r1726, %r146, %r1253;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1727, %r146, %r1724, %r1726;
	fma.rn.f32 	%r1728, %r146, %r1723, %r1725;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1445, %r1728, %r1727;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1729, %r1844, %r1525;
	mul.f32 	%r1730, %r1843, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1731, %r146, %r1256;
	mul.f32 	%r1732, %r146, %r1255;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1733, %r146, %r1730, %r1732;
	fma.rn.f32 	%r1734, %r146, %r1729, %r1731;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1447, %r1734, %r1733;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1735, %r1846, %r1527;
	mul.f32 	%r1736, %r1845, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1737, %r146, %r1258;
	mul.f32 	%r1738, %r146, %r1257;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1739, %r146, %r1736, %r1738;
	fma.rn.f32 	%r1740, %r146, %r1735, %r1737;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1448, %r1740, %r1739;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1741, %r1848, %r1525;
	mul.f32 	%r1742, %r1847, %r1525;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1743, %r146, %r1260;
	mul.f32 	%r1744, %r146, %r1259;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1745, %r146, %r1742, %r1744;
	fma.rn.f32 	%r1746, %r146, %r1741, %r1743;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1449, %r1746, %r1745;
	.loc	1 98 20                         // chunk_o.py:98:20
	mul.f32 	%r1747, %r1850, %r1527;
	mul.f32 	%r1748, %r1849, %r1527;
	.loc	1 118 57                        // chunk_o.py:118:57
	mul.f32 	%r1749, %r146, %r1262;
	mul.f32 	%r1750, %r146, %r1261;
	.loc	1 118 24                        // chunk_o.py:118:24
	fma.rn.f32 	%r1751, %r146, %r1748, %r1750;
	fma.rn.f32 	%r1752, %r146, %r1747, %r1749;
	.loc	1 119 25                        // chunk_o.py:119:25
	cvt.rn.bf16x2.f32 	%r1450, %r1752, %r1751;
	.loc	1 119 18                        // chunk_o.py:119:18
	add.s64 	%rd154, %rd159, %rd185;
	add.s64 	%rd155, %rd159, %rd186;
	add.s64 	%rd156, %rd159, %rd187;
	add.s64 	%rd157, %rd159, %rd188;
	bar.sync 	0;
	shl.b32 	%r1753, %r3, 6;
	and.b32 	%r1754, %r1753, 960;
	and.b32 	%r1755, %r1468, 8;
	or.b32 	%r1756, %r1754, %r1755;
	shl.b32 	%r1757, %r3, 5;
	and.b32 	%r1758, %r1757, 3072;
	or.b32 	%r1759, %r1756, %r1758;
	and.b32 	%r1760, %r5, 1016;
	shr.u32 	%r1761, %r1759, 2;
	and.b32 	%r1762, %r1761, 1008;
	add.s32 	%r1763, %r229, %r1762;
	shl.b32 	%r1764, %r1759, 1;
	add.s32 	%r1431, %r1763, %r1764;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1431], {%r1432, %r1433, %r1434, %r1435};
	// end inline asm
	add.s32 	%r1436, %r1431, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1436], {%r1437, %r1438, %r1439, %r1440};
	// end inline asm
	add.s32 	%r1441, %r1431, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1441], {%r1442, %r1443, %r1444, %r1445};
	// end inline asm
	add.s32 	%r1446, %r1431, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1446], {%r1447, %r1448, %r1449, %r1450};
	// end inline asm
	bar.sync 	0;
	and.b32 	%r1765, %r3, 120;
	shl.b32 	%r1766, %r1765, 1;
	add.s32 	%r1767, %r229, %r1766;
	shl.b32 	%r1768, %r1760, 1;
	add.s32 	%r1769, %r1767, %r1768;
	ld.shared.v4.b32 	{%r1451, %r1452, %r1453, %r1454}, [%r1769];
	or.b32 	%r1770, %r1760, 1024;
	shr.u32 	%r1771, %r1770, 2;
	and.b32 	%r1772, %r1771, 496;
	add.s32 	%r1773, %r229, %r1772;
	add.s32 	%r1774, %r1773, %r1768;
	ld.shared.v4.b32 	{%r1455, %r1456, %r1457, %r1458}, [%r1774+2048];
	or.b32 	%r1775, %r1760, 2048;
	shr.u32 	%r1776, %r1775, 2;
	and.b32 	%r1777, %r1776, 752;
	add.s32 	%r1778, %r229, %r1777;
	add.s32 	%r1779, %r1778, %r1768;
	ld.shared.v4.b32 	{%r1459, %r1460, %r1461, %r1462}, [%r1779+4096];
	or.b32 	%r1780, %r1760, 3072;
	shr.u32 	%r1781, %r1780, 2;
	and.b32 	%r1782, %r1781, 1008;
	add.s32 	%r1783, %r229, %r1782;
	add.s32 	%r1784, %r1783, %r1768;
	ld.shared.v4.b32 	{%r1463, %r1464, %r1465, %r1466}, [%r1784+6144];
	// begin inline asm
	@%p39 st.global.v4.b32 [ %rd154 + 0 ], { %r1451, %r1452, %r1453, %r1454 };
	// end inline asm
	// begin inline asm
	@%p40 st.global.v4.b32 [ %rd155 + 0 ], { %r1455, %r1456, %r1457, %r1458 };
	// end inline asm
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd156 + 0 ], { %r1459, %r1460, %r1461, %r1462 };
	// end inline asm
	// begin inline asm
	@%p42 st.global.v4.b32 [ %rd157 + 0 ], { %r1463, %r1464, %r1465, %r1466 };
	// end inline asm
	.loc	1 119 4                         // chunk_o.py:119:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 182                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xaf DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 111
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x76:0x15 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 111
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8b:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 118                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa0:0x18 DW_TAG_inlined_subroutine
.b32 118                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 64                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
