#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_fwd_kernel_o(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg6: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<4096> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16384_i64 = arith.constant 16384 : i64 loc(#loc1)
    %cst_12 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_14 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = tt.get_program_id z : i32 loc(#loc4)
    %3 = arith.divsi %2, %c32_i32 : i32 loc(#loc5)
    %4 = arith.remsi %2, %c32_i32 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc64)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc65)
    %7 = arith.muli %3, %6 : i32 loc(#loc10)
    %8 = arith.addi %7, %1 : i32 loc(#loc11)
    %9 = arith.muli %3, %arg7 : i32 loc(#loc12)
    %10 = arith.muli %9, %c32_i32 : i32 loc(#loc13)
    %11 = arith.addi %10, %4 : i32 loc(#loc14)
    %12 = arith.muli %11, %c128_i32 : i32 loc(#loc15)
    %13 = tt.addptr %arg0, %12 : !tt.ptr<bf16>, i32 loc(#loc16)
    %14 = tt.addptr %arg1, %12 : !tt.ptr<bf16>, i32 loc(#loc17)
    %15 = tt.addptr %arg2, %12 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg5, %12 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = arith.muli %8, %c32_i32 : i32 loc(#loc20)
    %18 = arith.addi %17, %4 : i32 loc(#loc21)
    %19 = arith.extsi %18 : i32 to i64 loc(#loc22)
    %20 = arith.muli %19, %c16384_i64 : i64 loc(#loc23)
    %21 = tt.addptr %arg3, %20 : !tt.ptr<bf16>, i64 loc(#loc24)
    %22 = arith.muli %1, %c64_i32 : i32 loc(#loc25)
    %23 = arith.extsi %arg7 : i32 to i64 loc(#loc26)
    %24 = arith.extsi %22 : i32 to i64 loc(#loc26)
    %25 = arith.muli %0, %c64_i32 : i32 loc(#loc27)
    %26 = arith.extsi %25 : i32 to i64 loc(#loc28)
    %27 = tt.splat %13 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %28 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %29 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %30 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %31 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %32 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %33 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %34 = arith.extsi %30 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %35 = arith.extsi %31 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %36 = arith.extsi %32 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %37 = arith.extsi %33 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %38 = arith.addi %28, %34 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %39 = arith.addi %29, %37 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %40 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc29)
    %41 = arith.muli %40, %cst_11 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %42 = tt.broadcast %41 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc29)
    %43 = arith.cmpi sge, %40, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %44 = tt.splat %23 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc29)
    %45 = arith.cmpi slt, %40, %44 : tensor<64x1xi64, #blocked1> loc(#loc29)
    %46 = arith.andi %43, %45 : tensor<64x1xi1, #blocked1> loc(#loc29)
    %47 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc29)
    %48 = tt.splat %14 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc30)
    %49 = tt.expand_dims %39 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc30)
    %50 = arith.muli %49, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc30)
    %51 = tt.broadcast %50 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc30)
    %52 = arith.cmpi sge, %49, %cst_8 : tensor<1x64xi64, #blocked> loc(#loc30)
    %53 = tt.splat %23 : i64 -> tensor<1x64xi64, #blocked> loc(#loc30)
    %54 = arith.cmpi slt, %49, %53 : tensor<1x64xi64, #blocked> loc(#loc30)
    %55 = arith.andi %52, %54 : tensor<1x64xi1, #blocked> loc(#loc30)
    %56 = tt.broadcast %55 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc30)
    %57 = tt.splat %21 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc31)
    %58 = tt.splat %26 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc31)
    %59 = arith.addi %58, %36 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc31)
    %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc31)
    %61 = tt.broadcast %60 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc31)
    %62 = arith.cmpi sge, %60, %cst_7 : tensor<1x64xi64, #blocked1> loc(#loc31)
    %63 = arith.cmpi slt, %60, %cst_6 : tensor<1x64xi64, #blocked1> loc(#loc31)
    %64 = arith.andi %62, %63 : tensor<1x64xi1, #blocked1> loc(#loc31)
    %65 = tt.broadcast %64 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc31)
    %66 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %67 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc30)
    %68 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc31)
    %69 = tt.expand_dims %36 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc29)
    %70 = tt.broadcast %69 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc29)
    %71 = arith.addi %42, %70 : tensor<64x64xi64, #blocked1> loc(#loc29)
    %72 = tt.addptr %27, %71 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc29)
    %73 = arith.cmpi sge, %69, %cst_7 : tensor<1x64xi64, #blocked1> loc(#loc29)
    %74 = arith.cmpi slt, %69, %cst_6 : tensor<1x64xi64, #blocked1> loc(#loc29)
    %75 = arith.andi %73, %74 : tensor<1x64xi1, #blocked1> loc(#loc29)
    %76 = tt.broadcast %75 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc29)
    %77 = arith.andi %47, %76 : tensor<64x64xi1, #blocked1> loc(#loc29)
    %78 = ttg.memdesc_subview %66[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %79 = ttg.async_copy_global_to_local %72, %78 mask %77 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %80 = ttg.async_commit_group %79 loc(#loc29)
    %81 = tt.expand_dims %35 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc30)
    %82 = tt.expand_dims %34 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc30)
    %83 = tt.broadcast %81 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc30)
    %84 = arith.addi %83, %51 : tensor<64x64xi64, #blocked> loc(#loc30)
    %85 = tt.addptr %48, %84 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc30)
    %86 = arith.cmpi sge, %81, %cst_10 : tensor<64x1xi64, #blocked> loc(#loc30)
    %87 = arith.cmpi sge, %82, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc30)
    %88 = arith.cmpi slt, %81, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc30)
    %89 = arith.cmpi slt, %82, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc30)
    %90 = arith.andi %86, %88 : tensor<64x1xi1, #blocked> loc(#loc30)
    %91 = arith.andi %87, %89 : tensor<64x1xi1, #blocked1> loc(#loc30)
    %92 = tt.broadcast %90 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc30)
    %93 = tt.broadcast %91 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
    %94 = arith.andi %92, %56 : tensor<64x64xi1, #blocked> loc(#loc30)
    %95 = ttg.memdesc_subview %67[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
    %96 = ttg.async_copy_global_to_local %85, %95 mask %94 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
    %97 = ttg.async_commit_group %96 loc(#loc30)
    %98 = arith.muli %82, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc31)
    %99 = tt.broadcast %98 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc31)
    %100 = arith.addi %99, %61 : tensor<64x64xi64, #blocked1> loc(#loc31)
    %101 = tt.addptr %57, %100 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc31)
    %102 = arith.andi %93, %65 : tensor<64x64xi1, #blocked1> loc(#loc31)
    %103 = ttg.memdesc_subview %68[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %104 = ttg.async_copy_global_to_local %101, %103 mask %102 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %105 = ttg.async_commit_group %104 loc(#loc31)
    %106 = arith.addi %36, %cst_13 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %107 = arith.addi %35, %cst_14 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %108 = arith.addi %34, %cst_15 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %109 = tt.expand_dims %106 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc29)
    %110 = tt.broadcast %109 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc29)
    %111 = arith.addi %42, %110 : tensor<64x64xi64, #blocked1> loc(#loc29)
    %112 = tt.addptr %27, %111 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc29)
    %113 = arith.cmpi sge, %109, %cst_7 : tensor<1x64xi64, #blocked1> loc(#loc29)
    %114 = arith.cmpi slt, %109, %cst_6 : tensor<1x64xi64, #blocked1> loc(#loc29)
    %115 = arith.andi %113, %114 : tensor<1x64xi1, #blocked1> loc(#loc29)
    %116 = tt.broadcast %115 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc29)
    %117 = arith.andi %47, %116 : tensor<64x64xi1, #blocked1> loc(#loc29)
    %118 = ttg.memdesc_subview %66[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %119 = ttg.async_copy_global_to_local %112, %118 mask %117 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %120 = ttg.async_commit_group %119 loc(#loc29)
    %121 = tt.expand_dims %107 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc30)
    %122 = tt.expand_dims %108 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc30)
    %123 = tt.broadcast %121 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc30)
    %124 = arith.addi %123, %51 : tensor<64x64xi64, #blocked> loc(#loc30)
    %125 = tt.addptr %48, %124 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc30)
    %126 = arith.cmpi sge, %121, %cst_10 : tensor<64x1xi64, #blocked> loc(#loc30)
    %127 = arith.cmpi sge, %122, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc30)
    %128 = arith.cmpi slt, %121, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc30)
    %129 = arith.cmpi slt, %122, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc30)
    %130 = arith.andi %126, %128 : tensor<64x1xi1, #blocked> loc(#loc30)
    %131 = arith.andi %127, %129 : tensor<64x1xi1, #blocked1> loc(#loc30)
    %132 = tt.broadcast %130 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc30)
    %133 = tt.broadcast %131 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
    %134 = arith.andi %132, %56 : tensor<64x64xi1, #blocked> loc(#loc30)
    %135 = ttg.memdesc_subview %67[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
    %136 = ttg.async_copy_global_to_local %125, %135 mask %134 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
    %137 = ttg.async_commit_group %136 loc(#loc30)
    %138 = arith.muli %122, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc31)
    %139 = tt.broadcast %138 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc31)
    %140 = arith.addi %139, %61 : tensor<64x64xi64, #blocked1> loc(#loc31)
    %141 = tt.addptr %57, %140 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc31)
    %142 = arith.andi %133, %65 : tensor<64x64xi1, #blocked1> loc(#loc31)
    %143 = ttg.memdesc_subview %68[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %144 = ttg.async_copy_global_to_local %141, %143 mask %142 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %145 = ttg.async_commit_group %144 loc(#loc31)
    %146:10 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %cst_12, %arg10 = %cst_12, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %80, %arg14 = %120, %arg15 = %97, %arg16 = %137, %arg17 = %105, %arg18 = %145) -> (tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %222 = arith.cmpi slt, %arg8, %c0_i32 : i32 loc(#loc32)
      %223 = arith.addi %arg12, %c1_i32 : i32 loc(#loc32)
      %224 = arith.cmpi sge, %223, %c3_i32 : i32 loc(#loc32)
      %225 = arith.select %224, %c0_i32, %223 : i32 loc(#loc32)
      %226 = ttg.async_wait %arg13, %arg15, %arg17 {num = 3 : i32} loc(#loc29)
      %227 = ttg.memdesc_subview %66[%225, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %228 = ttg.memdesc_subview %67[%225, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
      %229 = ttg.memdesc_subview %68[%225, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %230 = ttng.warp_group_dot %227, %229, %arg9 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> * !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #mma> loc(#loc33)
      %231 = ttng.warp_group_dot %227, %228, %arg10 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> * !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> -> tensor<64x64xf32, #mma> loc(#loc34)
      %232:5 = ttng.warp_group_dot_wait %230, %231, %227, %229, %228 {pendings = 2 : i32} : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64>, !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
      %233 = arith.addi %arg11, %c1_i32 : i32 loc(#loc32)
      %234 = arith.cmpi sge, %233, %c3_i32 : i32 loc(#loc32)
      %235 = arith.select %234, %c0_i32, %233 : i32 loc(#loc32)
      %236 = arith.addi %arg8, %c2_i32 : i32 loc(#loc32)
      %237 = arith.muli %236, %c64_i32 : i32 loc(#loc35)
      %238 = arith.extsi %237 : i32 to i64 loc(#loc26)
      %239 = tt.splat %238 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %240 = tt.splat %238 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
      %241 = tt.splat %238 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
      %242 = arith.addi %239, %36 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %243 = arith.addi %240, %35 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
      %244 = arith.addi %241, %34 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
      %245 = tt.expand_dims %242 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc29)
      %246 = tt.broadcast %245 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc29)
      %247 = arith.addi %42, %246 : tensor<64x64xi64, #blocked1> loc(#loc29)
      %248 = tt.addptr %27, %247 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc29)
      %249 = arith.cmpi sge, %245, %cst_7 : tensor<1x64xi64, #blocked1> loc(#loc29)
      %250 = arith.cmpi slt, %245, %cst_6 : tensor<1x64xi64, #blocked1> loc(#loc29)
      %251 = arith.andi %249, %250 : tensor<1x64xi1, #blocked1> loc(#loc29)
      %252 = tt.broadcast %251 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc29)
      %253 = arith.andi %47, %252 : tensor<64x64xi1, #blocked1> loc(#loc29)
      %254 = ttg.memdesc_subview %66[%235, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %255 = tt.splat %222 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc32)
      %256 = arith.andi %255, %253 : tensor<64x64xi1, #blocked1> loc(#loc32)
      %257 = ttg.async_copy_global_to_local %248, %254 mask %256 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %258 = ttg.async_commit_group %257 loc(#loc29)
      %259 = tt.expand_dims %243 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc30)
      %260 = tt.expand_dims %244 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc30)
      %261 = tt.broadcast %259 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc30)
      %262 = arith.addi %261, %51 : tensor<64x64xi64, #blocked> loc(#loc30)
      %263 = tt.addptr %48, %262 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc30)
      %264 = arith.cmpi sge, %259, %cst_10 : tensor<64x1xi64, #blocked> loc(#loc30)
      %265 = arith.cmpi sge, %260, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc30)
      %266 = arith.cmpi slt, %259, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc30)
      %267 = arith.cmpi slt, %260, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc30)
      %268 = arith.andi %264, %266 : tensor<64x1xi1, #blocked> loc(#loc30)
      %269 = arith.andi %265, %267 : tensor<64x1xi1, #blocked1> loc(#loc30)
      %270 = tt.broadcast %268 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc30)
      %271 = tt.broadcast %269 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc30)
      %272 = arith.andi %270, %56 : tensor<64x64xi1, #blocked> loc(#loc30)
      %273 = ttg.memdesc_subview %67[%235, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
      %274 = tt.splat %222 : i1 -> tensor<64x64xi1, #blocked> loc(#loc32)
      %275 = arith.andi %274, %272 : tensor<64x64xi1, #blocked> loc(#loc32)
      %276 = ttg.async_copy_global_to_local %263, %273 mask %275 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc30)
      %277 = ttg.async_commit_group %276 loc(#loc30)
      %278 = arith.muli %260, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc31)
      %279 = tt.broadcast %278 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc31)
      %280 = arith.addi %279, %61 : tensor<64x64xi64, #blocked1> loc(#loc31)
      %281 = tt.addptr %57, %280 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc31)
      %282 = arith.andi %271, %65 : tensor<64x64xi1, #blocked1> loc(#loc31)
      %283 = ttg.memdesc_subview %68[%235, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %284 = arith.andi %255, %282 : tensor<64x64xi1, #blocked1> loc(#loc32)
      %285 = ttg.async_copy_global_to_local %281, %283 mask %284 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %286 = ttg.async_commit_group %285 loc(#loc31)
      scf.yield %232#0, %232#1, %235, %225, %arg14, %258, %arg16, %277, %arg18, %286 : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc32)
    } loc(#loc32)
    %147:2 = ttng.warp_group_dot_wait %146#0, %146#1 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma> loc(#loc32)
    %148 = ttg.async_wait  {num = 0 : i32} loc(#loc32)
    ttg.local_dealloc %68 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc32)
    ttg.local_dealloc %67 : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc32)
    ttg.local_dealloc %66 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc32)
    %149 = tt.addptr %arg4, %11 : !tt.ptr<f32>, i32 loc(#loc36)
    %150 = tt.splat %149 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %151 = tt.splat %149 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %152 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %153 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %154 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %155 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %156 = arith.extsi %154 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %157 = arith.extsi %155 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %158 = arith.addi %152, %156 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %159 = arith.addi %153, %157 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %160 = arith.muli %158, %cst_1 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %161 = arith.muli %159, %cst_2 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %162 = tt.addptr %150, %160 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %163 = tt.addptr %151, %161 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %164 = arith.cmpi sge, %158, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %165 = arith.cmpi sge, %159, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %166 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %167 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %168 = arith.cmpi slt, %158, %166 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %169 = arith.cmpi slt, %159, %167 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %170 = arith.andi %164, %168 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %171 = arith.andi %165, %169 : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %172 = tt.load %162, %170 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %173 = tt.load %163, %171 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc37)
    %174 = math.exp %172 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc38)
    %175 = tt.expand_dims %174 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc39)
    %176 = tt.broadcast %175 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc40)
    %177 = arith.mulf %147#0, %176 : tensor<64x64xf32, #mma> loc(#loc40)
    %178 = tt.expand_dims %172 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc41)
    %179 = tt.expand_dims %173 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xf32, #mma> loc(#loc42)
    %180 = tt.broadcast %178 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc43)
    %181 = tt.broadcast %179 : tensor<1x64xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc43)
    %182 = arith.subf %180, %181 : tensor<64x64xf32, #mma> loc(#loc43)
    %183 = math.exp %182 : tensor<64x64xf32, #mma> loc(#loc44)
    %184 = arith.mulf %147#1, %183 : tensor<64x64xf32, #mma> loc(#loc45)
    %185 = tt.splat %22 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc46)
    %186 = tt.splat %22 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc46)
    %187 = arith.addi %185, %154 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc46)
    %188 = arith.addi %186, %155 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc46)
    %189 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc47)
    %190 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc47)
    %191 = arith.cmpi slt, %187, %189 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc47)
    %192 = arith.cmpi slt, %188, %190 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc47)
    %193 = tt.expand_dims %187 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc48)
    %194 = tt.expand_dims %188 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc49)
    %195 = tt.broadcast %193 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc50)
    %196 = tt.broadcast %194 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc50)
    %197 = arith.cmpi sge, %195, %196 : tensor<64x64xi32, #mma> loc(#loc50)
    %198 = tt.expand_dims %191 {axis = 1 : i32} : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi1, #mma> loc(#loc51)
    %199 = tt.expand_dims %192 {axis = 0 : i32} : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi1, #mma> loc(#loc52)
    %200 = tt.broadcast %198 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc52)
    %201 = tt.broadcast %199 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc52)
    %202 = arith.andi %200, %201 : tensor<64x64xi1, #mma> loc(#loc52)
    %203 = arith.andi %197, %202 : tensor<64x64xi1, #mma> loc(#loc53)
    %204 = arith.select %203, %184, %cst_12 : tensor<64x64xi1, #mma>, tensor<64x64xf32, #mma> loc(#loc54)
    %205 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc55)
    %206 = arith.addi %42, %61 : tensor<64x64xi64, #blocked1> loc(#loc55)
    %207 = tt.addptr %205, %206 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc55)
    %208 = arith.andi %47, %65 : tensor<64x64xi1, #blocked1> loc(#loc55)
    %209 = tt.load %207, %208 : tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc55)
    %210 = ttg.local_alloc %209 : (tensor<64x64xbf16, #blocked1>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc55)
    %211 = tt.splat %arg6 : f32 -> tensor<64x64xf32, #mma> loc(#loc56)
    %212 = arith.mulf %177, %211 : tensor<64x64xf32, #mma> loc(#loc56)
    %213 = arith.truncf %204 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc57)
    %214 = ttg.convert_layout %213 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc57)
    ttng.fence_async_shared {bCluster = false} loc(#loc58)
    %215 = ttng.warp_group_dot %214, %210, %cst_12 {inputPrecision = 0 : i32} : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc58)
    %216 = arith.mulf %215, %211 : tensor<64x64xf32, #mma> loc(#loc59)
    %217 = arith.addf %212, %216 : tensor<64x64xf32, #mma> loc(#loc60)
    %218 = arith.truncf %217 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc61)
    %219 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc62)
    %220 = tt.addptr %219, %206 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc62)
    %221 = ttg.convert_layout %218 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked1> loc(#loc62)
    tt.store %220, %221, %208 : tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:35)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:53)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:71)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:23)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:33)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":64:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:21)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:26)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":66:25)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:16)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:20)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:27)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:9)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:9)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:17)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:21)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:29)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:43)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:9)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:60)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:85)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:68)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":83:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":85:22)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":87:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":78:21)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":90:27)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":92:27)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:70)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":95:13)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":97:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:24)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:29)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:20)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:28)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:43)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:39)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:24)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:20)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":107:21)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":108:16)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:15)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:31)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:27)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:48)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:59)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:44)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":110:29)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":115:18)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:16)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:38)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:50)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:57)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:24)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:25)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:18)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:4)
#loc64 = loc(callsite(#loc7 at #loc8))
#loc65 = loc(callsite(#loc9 at #loc8))
