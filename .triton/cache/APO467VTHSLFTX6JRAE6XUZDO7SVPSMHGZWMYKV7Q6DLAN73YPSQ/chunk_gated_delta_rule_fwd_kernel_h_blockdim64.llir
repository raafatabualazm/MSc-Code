; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 5, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = and i32 %33, 4, !dbg !29
  %35 = lshr i32 %33, 2, !dbg !29
  %36 = and i32 %35, 7, !dbg !29
  %37 = and i32 %33, 32, !dbg !29
  %38 = lshr exact i32 %37, 2, !dbg !29
  %39 = or disjoint i32 %36, %38, !dbg !29
  %40 = or disjoint i32 %39, 16, !dbg !29
  %41 = or disjoint i32 %39, 32, !dbg !29
  %42 = or disjoint i32 %39, 48, !dbg !29
  %43 = lshr i32 %33, 3, !dbg !29
  %44 = and i32 %43, 7, !dbg !29
  %45 = or disjoint i32 %44, 8, !dbg !29
  %46 = or disjoint i32 %44, 16, !dbg !29
  %47 = or disjoint i32 %44, 24, !dbg !29
  %48 = or disjoint i32 %44, 32, !dbg !29
  %49 = or disjoint i32 %44, 40, !dbg !29
  %50 = or disjoint i32 %44, 48, !dbg !29
  %51 = or disjoint i32 %44, 56, !dbg !29
  %52 = shl nuw nsw i32 %33, 3, !dbg !29
  %53 = and i32 %52, 24, !dbg !29
  %54 = shl nuw nsw i32 %34, 3, !dbg !29
  %55 = or disjoint i32 %53, %54, !dbg !29
  %56 = lshr exact i32 %37, 1, !dbg !29
  %57 = or disjoint i32 %36, %56, !dbg !29
  %58 = and i32 %33, 63, !dbg !29
  %59 = zext nneg i32 %39 to i64, !dbg !29
  %60 = zext nneg i32 %40 to i64, !dbg !29
  %61 = zext nneg i32 %41 to i64, !dbg !29
  %62 = zext nneg i32 %42 to i64, !dbg !29
  %63 = zext nneg i32 %44 to i64, !dbg !29
  %64 = zext nneg i32 %45 to i64, !dbg !29
  %65 = zext nneg i32 %46 to i64, !dbg !29
  %66 = zext nneg i32 %47 to i64, !dbg !29
  %67 = zext nneg i32 %48 to i64, !dbg !29
  %68 = zext nneg i32 %49 to i64, !dbg !29
  %69 = zext nneg i32 %50 to i64, !dbg !29
  %70 = zext nneg i32 %51 to i64, !dbg !29
  %71 = zext nneg i32 %55 to i64, !dbg !29
  %72 = zext nneg i32 %58 to i64, !dbg !29
  %73 = zext nneg i32 %53 to i64, !dbg !29
  %74 = or disjoint i64 %73, %32, !dbg !29
  %75 = icmp sgt i32 %31, -1, !dbg !29
  %76 = icmp slt i64 %74, 128, !dbg !29
  %77 = and i1 %75, %76, !dbg !29
  %78 = or disjoint i64 %71, 64, !dbg !30
  %79 = sext i32 %7 to i64, !dbg !31
  %80 = sext i32 %23 to i64, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !32
  %82 = zext nneg i32 %12 to i64, !dbg !33
  %83 = getelementptr float, ptr addrspace(1) %81, i64 %82, !dbg !33
  %84 = icmp sgt i32 %13, 63, !dbg !34
  %85 = shl nuw nsw i64 %63, 12, !dbg !35
  %86 = shl nuw nsw i64 %64, 12, !dbg !35
  %87 = shl nuw nsw i64 %65, 12, !dbg !35
  %88 = shl nuw nsw i64 %66, 12, !dbg !35
  %89 = shl nuw nsw i64 %67, 12, !dbg !35
  %90 = shl nuw nsw i64 %68, 12, !dbg !35
  %91 = shl nuw nsw i64 %69, 12, !dbg !35
  %92 = shl nuw nsw i64 %70, 12, !dbg !35
  %93 = shl nuw nsw i64 %59, 12, !dbg !35
  %94 = shl nuw nsw i64 %60, 12, !dbg !35
  %95 = shl nuw nsw i64 %61, 12, !dbg !35
  %96 = shl nuw nsw i64 %62, 12, !dbg !35
  %97 = or disjoint i64 %85, %71, !dbg !35
  %98 = or disjoint i64 %86, %71, !dbg !35
  %99 = or disjoint i64 %87, %71, !dbg !35
  %100 = or disjoint i64 %88, %71, !dbg !35
  %101 = or disjoint i64 %89, %71, !dbg !35
  %102 = or disjoint i64 %90, %71, !dbg !35
  %103 = or disjoint i64 %91, %71, !dbg !35
  %104 = or disjoint i64 %92, %71, !dbg !35
  %105 = getelementptr bfloat, ptr addrspace(1) %29, i64 %97, !dbg !35
  %106 = getelementptr bfloat, ptr addrspace(1) %29, i64 %98, !dbg !35
  %107 = getelementptr bfloat, ptr addrspace(1) %29, i64 %99, !dbg !35
  %108 = getelementptr bfloat, ptr addrspace(1) %29, i64 %100, !dbg !35
  %109 = getelementptr bfloat, ptr addrspace(1) %29, i64 %101, !dbg !35
  %110 = getelementptr bfloat, ptr addrspace(1) %29, i64 %102, !dbg !35
  %111 = getelementptr bfloat, ptr addrspace(1) %29, i64 %103, !dbg !35
  %112 = getelementptr bfloat, ptr addrspace(1) %29, i64 %104, !dbg !35
  %113 = icmp slt i32 %44, %7, !dbg !35
  %114 = icmp slt i32 %45, %7, !dbg !35
  %115 = icmp slt i32 %46, %7, !dbg !35
  %116 = icmp slt i32 %47, %7, !dbg !35
  %117 = icmp slt i32 %48, %7, !dbg !35
  %118 = icmp slt i32 %49, %7, !dbg !35
  %119 = icmp slt i32 %50, %7, !dbg !35
  %120 = icmp slt i32 %51, %7, !dbg !35
  %121 = icmp slt i32 %39, %7, !dbg !35
  %122 = icmp slt i32 %40, %7, !dbg !35
  %123 = icmp slt i32 %41, %7, !dbg !35
  %124 = icmp slt i32 %42, %7, !dbg !35
  %125 = and i1 %113, %84, !dbg !34
  %126 = and i1 %114, %84, !dbg !34
  %127 = and i1 %115, %84, !dbg !34
  %128 = and i1 %116, %84, !dbg !34
  %129 = and i1 %117, %84, !dbg !34
  %130 = and i1 %118, %84, !dbg !34
  %131 = and i1 %119, %84, !dbg !34
  %132 = and i1 %120, %84, !dbg !34
  %and.ra553 = and i32 %33, 56, !dbg !35
  %133 = xor i32 %55, %and.ra553, !dbg !35
  %134 = shl nuw nsw i32 %44, 6, !dbg !35
  %135 = or disjoint i32 %133, %134, !dbg !35
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = or disjoint i32 %135, 512, !dbg !35
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %137, !dbg !35
  %139 = or disjoint i32 %135, 1024, !dbg !35
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139, !dbg !35
  %141 = or disjoint i32 %135, 1536, !dbg !35
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %141, !dbg !35
  %143 = or disjoint i32 %135, 2048, !dbg !35
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %143, !dbg !35
  %145 = or disjoint i32 %135, 2560, !dbg !35
  %146 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %145, !dbg !35
  %147 = or disjoint i32 %135, 3072, !dbg !35
  %148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %147, !dbg !35
  %149 = or disjoint i32 %135, 3584, !dbg !35
  %150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %149, !dbg !35
  %151 = select i1 %125, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %136, ptr addrspace(1) %105, i32 %151) #2, !dbg !35
  %152 = select i1 %126, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %106, i32 %152) #2, !dbg !35
  %153 = select i1 %127, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %107, i32 %153) #2, !dbg !35
  %154 = select i1 %128, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %108, i32 %154) #2, !dbg !35
  %155 = select i1 %129, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %109, i32 %155) #2, !dbg !35
  %156 = select i1 %130, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %110, i32 %156) #2, !dbg !35
  %157 = select i1 %131, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %111, i32 %157) #2, !dbg !35
  %158 = select i1 %132, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %112, i32 %158) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %159 = or disjoint i64 %78, %85, !dbg !36
  %160 = or disjoint i64 %86, %78, !dbg !36
  %161 = or disjoint i64 %87, %78, !dbg !36
  %162 = or disjoint i64 %88, %78, !dbg !36
  %163 = or disjoint i64 %89, %78, !dbg !36
  %164 = or disjoint i64 %90, %78, !dbg !36
  %165 = or disjoint i64 %91, %78, !dbg !36
  %166 = or disjoint i64 %92, %78, !dbg !36
  %167 = getelementptr bfloat, ptr addrspace(1) %29, i64 %159, !dbg !36
  %168 = getelementptr bfloat, ptr addrspace(1) %29, i64 %160, !dbg !36
  %169 = getelementptr bfloat, ptr addrspace(1) %29, i64 %161, !dbg !36
  %170 = getelementptr bfloat, ptr addrspace(1) %29, i64 %162, !dbg !36
  %171 = getelementptr bfloat, ptr addrspace(1) %29, i64 %163, !dbg !36
  %172 = getelementptr bfloat, ptr addrspace(1) %29, i64 %164, !dbg !36
  %173 = getelementptr bfloat, ptr addrspace(1) %29, i64 %165, !dbg !36
  %174 = getelementptr bfloat, ptr addrspace(1) %29, i64 %166, !dbg !36
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %135, !dbg !36
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %137, !dbg !36
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %139, !dbg !36
  %178 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %141, !dbg !36
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %143, !dbg !36
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %145, !dbg !36
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %147, !dbg !36
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %149, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %167, i32 %151) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %168, i32 %152) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %169, i32 %153) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %170, i32 %154) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %171, i32 %155) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %172, i32 %156) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %173, i32 %157) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %174, i32 %158) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %183 = add nsw i64 %93, %74, !dbg !37
  %184 = add nsw i64 %94, %74, !dbg !37
  %185 = add nsw i64 %95, %74, !dbg !37
  %186 = add nsw i64 %96, %74, !dbg !37
  %187 = getelementptr bfloat, ptr addrspace(1) %27, i64 %183, !dbg !37
  %188 = getelementptr bfloat, ptr addrspace(1) %27, i64 %184, !dbg !37
  %189 = getelementptr bfloat, ptr addrspace(1) %27, i64 %185, !dbg !37
  %190 = getelementptr bfloat, ptr addrspace(1) %27, i64 %186, !dbg !37
  %191 = and i1 %77, %121, !dbg !37
  %192 = and i1 %77, %122, !dbg !37
  %193 = and i1 %77, %123, !dbg !37
  %194 = and i1 %77, %124, !dbg !37
  %195 = and i1 %84, %191, !dbg !34
  %196 = and i1 %84, %192, !dbg !34
  %197 = and i1 %84, %193, !dbg !34
  %198 = and i1 %84, %194, !dbg !34
  %199 = xor i32 %52, %33, !dbg !37
  %200 = and i32 %199, 24, !dbg !37
  %201 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %200, !dbg !37
  %.idx = shl nuw nsw i32 %39, 6, !dbg !37
  %202 = getelementptr inbounds nuw i8, ptr addrspace(3) %201, i32 %.idx, !dbg !37
  %.idx571 = shl nuw nsw i32 %39, 6, !dbg !37
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %201, i32 %.idx571, !dbg !37
  %204 = getelementptr inbounds nuw i8, ptr addrspace(3) %203, i32 1024, !dbg !37
  %205 = or disjoint i32 %36, 32, !dbg !37
  %206 = or disjoint i32 %205, %38, !dbg !37
  %.idx5 = shl nuw nsw i32 %206, 6, !dbg !37
  %207 = getelementptr inbounds nuw i8, ptr addrspace(3) %201, i32 %.idx5, !dbg !37
  %208 = getelementptr inbounds nuw i8, ptr addrspace(3) %203, i32 3072, !dbg !37
  %209 = select i1 %195, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %202, ptr addrspace(1) %187, i32 %209) #2, !dbg !37
  %210 = select i1 %196, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %204, ptr addrspace(1) %188, i32 %210) #2, !dbg !37
  %211 = select i1 %197, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %207, ptr addrspace(1) %189, i32 %211) #2, !dbg !37
  %212 = select i1 %198, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %190, i32 %212) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx6 = shl nuw nsw i64 %72, 7, !dbg !38
  %213 = getelementptr i8, ptr addrspace(1) %83, i64 %.idx6, !dbg !38
  %214 = icmp slt i32 %58, %7, !dbg !38
  %215 = and i1 %214, %84, !dbg !34
  %216 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 47616), i32 %58, !dbg !38
  %217 = select i1 %215, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %216, ptr addrspace(1) %213, i32 %217) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %218 = getelementptr bfloat, ptr addrspace(1) %28, i64 %97, !dbg !39
  %219 = getelementptr bfloat, ptr addrspace(1) %28, i64 %98, !dbg !39
  %220 = getelementptr bfloat, ptr addrspace(1) %28, i64 %99, !dbg !39
  %221 = getelementptr bfloat, ptr addrspace(1) %28, i64 %100, !dbg !39
  %222 = getelementptr bfloat, ptr addrspace(1) %28, i64 %101, !dbg !39
  %223 = getelementptr bfloat, ptr addrspace(1) %28, i64 %102, !dbg !39
  %224 = getelementptr bfloat, ptr addrspace(1) %28, i64 %103, !dbg !39
  %225 = getelementptr bfloat, ptr addrspace(1) %28, i64 %104, !dbg !39
  %226 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %135, !dbg !39
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %137, !dbg !39
  %228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %139, !dbg !39
  %229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %141, !dbg !39
  %230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %143, !dbg !39
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %145, !dbg !39
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %147, !dbg !39
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %149, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %226, ptr addrspace(1) %218, i32 %151) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %227, ptr addrspace(1) %219, i32 %152) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %228, ptr addrspace(1) %220, i32 %153) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %229, ptr addrspace(1) %221, i32 %154) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %230, ptr addrspace(1) %222, i32 %155) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %231, ptr addrspace(1) %223, i32 %156) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %232, ptr addrspace(1) %224, i32 %157) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %233, ptr addrspace(1) %225, i32 %158) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %234 = getelementptr bfloat, ptr addrspace(1) %28, i64 %159, !dbg !40
  %235 = getelementptr bfloat, ptr addrspace(1) %28, i64 %160, !dbg !40
  %236 = getelementptr bfloat, ptr addrspace(1) %28, i64 %161, !dbg !40
  %237 = getelementptr bfloat, ptr addrspace(1) %28, i64 %162, !dbg !40
  %238 = getelementptr bfloat, ptr addrspace(1) %28, i64 %163, !dbg !40
  %239 = getelementptr bfloat, ptr addrspace(1) %28, i64 %164, !dbg !40
  %240 = getelementptr bfloat, ptr addrspace(1) %28, i64 %165, !dbg !40
  %241 = getelementptr bfloat, ptr addrspace(1) %28, i64 %166, !dbg !40
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %135, !dbg !40
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %137, !dbg !40
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %139, !dbg !40
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %141, !dbg !40
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %143, !dbg !40
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %145, !dbg !40
  %248 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %147, !dbg !40
  %249 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %149, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %242, ptr addrspace(1) %234, i32 %151) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %235, i32 %152) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %236, i32 %153) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %237, i32 %154) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %246, ptr addrspace(1) %238, i32 %155) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %247, ptr addrspace(1) %239, i32 %156) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %248, ptr addrspace(1) %240, i32 %157) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %249, ptr addrspace(1) %241, i32 %158) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %84, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %33, 1, !dbg !41
  %.pre567 = and i32 %.pre, 6, !dbg !41
  %.pre569 = shl nuw nsw i32 %37, 4, !dbg !41
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %250 = and i32 %33, 16, !dbg !29
  %251 = and i32 %33, 8, !dbg !29
  %252 = and i32 %33, 2, !dbg !29
  %253 = icmp eq i32 %252, 0, !dbg !29
  %.not = icmp eq i32 %34, 0, !dbg !29
  %254 = add nsw i32 %14, -1
  %255 = shl nuw nsw i32 %33, 5
  %256 = and i32 %255, 32
  %257 = select i1 %253, i32 0, i32 72
  %258 = or disjoint i32 %257, %256
  %259 = select i1 %.not, i32 0, i32 144
  %260 = or disjoint i32 %258, %259
  %261 = shl nuw nsw i32 %251, 5
  %262 = or disjoint i32 %260, %261
  %263 = lshr exact i32 %250, 1
  %264 = xor i32 %262, %263
  %265 = shl nuw nsw i32 %37, 4
  %266 = or disjoint i32 %264, %265
  %267 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %266
  %268 = ptrtoint ptr addrspace(3) %267 to i32
  %269 = xor i32 %266, 16
  %270 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %269
  %271 = ptrtoint ptr addrspace(3) %270 to i32
  %272 = xor i32 %266, 1024
  %273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %272
  %274 = ptrtoint ptr addrspace(3) %273 to i32
  %275 = xor i32 %266, 1040
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %275
  %277 = ptrtoint ptr addrspace(3) %276 to i32
  %.idx295 = shl nuw nsw i64 %59, 8
  %.idx296 = shl nuw nsw i64 %60, 8
  %.idx297 = shl nuw nsw i64 %61, 8
  %.idx298 = shl nuw nsw i64 %62, 8
  %278 = shl nuw nsw i32 %33, 1
  %279 = and i32 %278, 6
  %280 = shl nuw nsw i32 %251, 3
  %281 = or disjoint i32 %279, %280
  %282 = or disjoint i32 %281, %54
  %283 = shl nuw nsw i32 %250, 3
  %284 = or disjoint i32 %282, %283
  %285 = or disjoint i32 %284, %265
  %286 = and i32 %52, 320
  %287 = or disjoint i32 %283, %286
  %288 = or disjoint i32 %287, %55
  %289 = lshr i32 %285, 2
  %290 = and i32 %289, 1073741816
  %291 = add nuw nsw i32 %290, %285
  %292 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %291
  %293 = xor i32 %285, 256
  %294 = lshr i32 %293, 2
  %295 = and i32 %294, 1073741816
  %296 = add nuw nsw i32 %295, %293
  %297 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %296
  %298 = xor i32 %285, 8
  %299 = add nuw nsw i32 %290, %298
  %300 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %299
  %301 = xor i32 %285, 264
  %302 = lshr i32 %301, 2
  %303 = and i32 %302, 1073741816
  %304 = add nuw nsw i32 %303, %301
  %305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %304
  %306 = xor i32 %285, 16
  %307 = add nuw nsw i32 %290, %306
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %307
  %309 = xor i32 %285, 272
  %310 = lshr i32 %309, 2
  %311 = and i32 %310, 1073741816
  %312 = add nuw nsw i32 %311, %309
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %312
  %314 = xor i32 %285, 24
  %315 = add nuw nsw i32 %290, %314
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %315
  %317 = xor i32 %285, 280
  %318 = lshr i32 %317, 2
  %319 = and i32 %318, 1073741816
  %320 = add nuw nsw i32 %319, %317
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %320
  %322 = lshr exact i32 %288, 2
  %323 = and i32 %322, 120
  %324 = add nuw nsw i32 %323, %288
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %324
  %326 = or disjoint i32 %288, 512
  %327 = lshr exact i32 %326, 2
  %328 = and i32 %327, 536870904
  %329 = add nuw nsw i32 %328, %326
  %330 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %329
  %331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %266
  %332 = ptrtoint ptr addrspace(3) %331 to i32
  %333 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %269
  %334 = ptrtoint ptr addrspace(3) %333 to i32
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %272
  %336 = ptrtoint ptr addrspace(3) %335 to i32
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %275
  %338 = ptrtoint ptr addrspace(3) %337 to i32
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %291
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %296
  %341 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %299
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %304
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %307
  %344 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %312
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %315
  %346 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %320
  %347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %324
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 45056), i32 %329
  %349 = and i32 %33, 3
  %350 = mul nuw nsw i32 %349, 72
  %351 = select i1 %.not, i32 0, i32 288
  %352 = xor i32 %351, %350
  %353 = shl nuw nsw i32 %251, 6
  %354 = or disjoint i32 %352, %353
  %355 = xor i32 %354, %263
  %356 = shl nuw nsw i32 %37, 5
  %357 = or disjoint i32 %355, %356
  %358 = xor i32 %357, 16
  %359 = xor i32 %357, 32
  %360 = xor i32 %357, 48
  %361 = xor i32 %357, 2048
  %362 = xor i32 %357, 2064
  %363 = xor i32 %357, 2080
  %364 = xor i32 %357, 2096
  %365 = shl nuw nsw i32 %250, 5
  %366 = or disjoint i32 %262, %365
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %366
  %368 = ptrtoint ptr addrspace(3) %367 to i32
  %369 = or disjoint i32 %366, 1024
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %369
  %371 = ptrtoint ptr addrspace(3) %370 to i32
  %372 = xor i32 %366, 8
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %372
  %374 = ptrtoint ptr addrspace(3) %373 to i32
  %375 = xor i32 %366, 1032
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %375
  %377 = ptrtoint ptr addrspace(3) %376 to i32
  %378 = xor i32 %366, 16
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %378
  %380 = ptrtoint ptr addrspace(3) %379 to i32
  %381 = xor i32 %366, 1040
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %381
  %383 = ptrtoint ptr addrspace(3) %382 to i32
  %384 = xor i32 %366, 24
  %385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %384
  %386 = ptrtoint ptr addrspace(3) %385 to i32
  %387 = xor i32 %366, 1048
  %388 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %387
  %389 = ptrtoint ptr addrspace(3) %388 to i32
  %390 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %366
  %391 = ptrtoint ptr addrspace(3) %390 to i32
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %369
  %393 = ptrtoint ptr addrspace(3) %392 to i32
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %372
  %395 = ptrtoint ptr addrspace(3) %394 to i32
  %396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %375
  %397 = ptrtoint ptr addrspace(3) %396 to i32
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %378
  %399 = ptrtoint ptr addrspace(3) %398 to i32
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %381
  %401 = ptrtoint ptr addrspace(3) %400 to i32
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %384
  %403 = ptrtoint ptr addrspace(3) %402 to i32
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %387
  %405 = ptrtoint ptr addrspace(3) %404 to i32
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %291
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %296
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %299
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %304
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %307
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %312
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %315
  %413 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %320
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %324
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 36864), i32 %329
  %416 = xor i32 %352, %251
  %417 = or disjoint i32 %416, %365
  %418 = xor i32 %417, %56
  %419 = xor i32 %418, 1024
  %420 = xor i32 %418, 2048
  %421 = xor i32 %418, 3072
  %422 = xor i32 %418, 32
  %423 = xor i32 %418, 1056
  %424 = xor i32 %418, 2080
  %425 = xor i32 %418, 3104
  %426 = sext i32 %254 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %357
  %428 = ptrtoint ptr addrspace(3) %427 to i32
  %429 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %358
  %430 = ptrtoint ptr addrspace(3) %429 to i32
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %359
  %432 = ptrtoint ptr addrspace(3) %431 to i32
  %433 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %360
  %434 = ptrtoint ptr addrspace(3) %433 to i32
  %435 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %361
  %436 = ptrtoint ptr addrspace(3) %435 to i32
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %362
  %438 = ptrtoint ptr addrspace(3) %437 to i32
  %439 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %363
  %440 = ptrtoint ptr addrspace(3) %439 to i32
  %441 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %364
  %442 = ptrtoint ptr addrspace(3) %441 to i32
  %443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %357
  %444 = ptrtoint ptr addrspace(3) %443 to i32
  %445 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %358
  %446 = ptrtoint ptr addrspace(3) %445 to i32
  %447 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %359
  %448 = ptrtoint ptr addrspace(3) %447 to i32
  %449 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %360
  %450 = ptrtoint ptr addrspace(3) %449 to i32
  %451 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %361
  %452 = ptrtoint ptr addrspace(3) %451 to i32
  %453 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %362
  %454 = ptrtoint ptr addrspace(3) %453 to i32
  %455 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %363
  %456 = ptrtoint ptr addrspace(3) %455 to i32
  %457 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %364
  %458 = ptrtoint ptr addrspace(3) %457 to i32
  %459 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %266
  %460 = ptrtoint ptr addrspace(3) %459 to i32
  %461 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %269
  %462 = ptrtoint ptr addrspace(3) %461 to i32
  %463 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %272
  %464 = ptrtoint ptr addrspace(3) %463 to i32
  %465 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %275
  %466 = ptrtoint ptr addrspace(3) %465 to i32
  %467 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 47616), i32 %57
  %468 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 47616), i32 %34
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %468, i32 %251
  %470 = getelementptr inbounds nuw i8, ptr addrspace(3) %469, i32 %250
  %471 = getelementptr inbounds nuw float, ptr addrspace(3) %470, i32 %56
  %472 = getelementptr inbounds nuw i8, ptr addrspace(3) %471, i32 32
  %473 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 47616), i32 %205
  %474 = getelementptr inbounds nuw float, ptr addrspace(3) %473, i32 %56
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %471, i32 160
  %476 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %418
  %477 = ptrtoint ptr addrspace(3) %476 to i32
  %478 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %419
  %479 = ptrtoint ptr addrspace(3) %478 to i32
  %480 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %420
  %481 = ptrtoint ptr addrspace(3) %480 to i32
  %482 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %421
  %483 = ptrtoint ptr addrspace(3) %482 to i32
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %422
  %485 = ptrtoint ptr addrspace(3) %484 to i32
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %423
  %487 = ptrtoint ptr addrspace(3) %486 to i32
  %488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %424
  %489 = ptrtoint ptr addrspace(3) %488 to i32
  %490 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %425
  %491 = ptrtoint ptr addrspace(3) %490 to i32
  %492 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %418
  %493 = ptrtoint ptr addrspace(3) %492 to i32
  %494 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %419
  %495 = ptrtoint ptr addrspace(3) %494 to i32
  %496 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %420
  %497 = ptrtoint ptr addrspace(3) %496 to i32
  %498 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %421
  %499 = ptrtoint ptr addrspace(3) %498 to i32
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %422
  %501 = ptrtoint ptr addrspace(3) %500 to i32
  %502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %423
  %503 = ptrtoint ptr addrspace(3) %502 to i32
  %504 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %424
  %505 = ptrtoint ptr addrspace(3) %504 to i32
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %425
  %507 = ptrtoint ptr addrspace(3) %506 to i32
  br label %508, !dbg !34

508:                                              ; preds = %.lr.ph, %508
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %508 ]
  %509 = phi i32 [ 0, %.lr.ph ], [ %1368, %508 ]
  %.pn99563 = phi i1 [ %194, %.lr.ph ], [ %2149, %508 ]
  %.pn115562 = phi i1 [ %193, %.lr.ph ], [ %2148, %508 ]
  %.pn131561 = phi i1 [ %192, %.lr.ph ], [ %2147, %508 ]
  %.pn147560 = phi i1 [ %191, %.lr.ph ], [ %2146, %508 ]
  %.pn21559 = phi i64 [ %186, %.lr.ph ], [ %2141, %508 ]
  %.pn37558 = phi i64 [ %185, %.lr.ph ], [ %2140, %508 ]
  %.pn53557 = phi i64 [ %184, %.lr.ph ], [ %2139, %508 ]
  %.pn69556 = phi i64 [ %183, %.lr.ph ], [ %2138, %508 ]
  %510 = phi float [ 0.000000e+00, %.lr.ph ], [ %2014, %508 ]
  %511 = phi float [ 0.000000e+00, %.lr.ph ], [ %2015, %508 ]
  %512 = phi float [ 0.000000e+00, %.lr.ph ], [ %2016, %508 ]
  %513 = phi float [ 0.000000e+00, %.lr.ph ], [ %2017, %508 ]
  %514 = phi float [ 0.000000e+00, %.lr.ph ], [ %2019, %508 ]
  %515 = phi float [ 0.000000e+00, %.lr.ph ], [ %2020, %508 ]
  %516 = phi float [ 0.000000e+00, %.lr.ph ], [ %2021, %508 ]
  %517 = phi float [ 0.000000e+00, %.lr.ph ], [ %2022, %508 ]
  %518 = phi float [ 0.000000e+00, %.lr.ph ], [ %2024, %508 ]
  %519 = phi float [ 0.000000e+00, %.lr.ph ], [ %2025, %508 ]
  %520 = phi float [ 0.000000e+00, %.lr.ph ], [ %2026, %508 ]
  %521 = phi float [ 0.000000e+00, %.lr.ph ], [ %2027, %508 ]
  %522 = phi float [ 0.000000e+00, %.lr.ph ], [ %2029, %508 ]
  %523 = phi float [ 0.000000e+00, %.lr.ph ], [ %2030, %508 ]
  %524 = phi float [ 0.000000e+00, %.lr.ph ], [ %2031, %508 ]
  %525 = phi float [ 0.000000e+00, %.lr.ph ], [ %2032, %508 ]
  %526 = phi float [ 0.000000e+00, %.lr.ph ], [ %2034, %508 ]
  %527 = phi float [ 0.000000e+00, %.lr.ph ], [ %2035, %508 ]
  %528 = phi float [ 0.000000e+00, %.lr.ph ], [ %2036, %508 ]
  %529 = phi float [ 0.000000e+00, %.lr.ph ], [ %2037, %508 ]
  %530 = phi float [ 0.000000e+00, %.lr.ph ], [ %2039, %508 ]
  %531 = phi float [ 0.000000e+00, %.lr.ph ], [ %2040, %508 ]
  %532 = phi float [ 0.000000e+00, %.lr.ph ], [ %2041, %508 ]
  %533 = phi float [ 0.000000e+00, %.lr.ph ], [ %2042, %508 ]
  %534 = phi float [ 0.000000e+00, %.lr.ph ], [ %2044, %508 ]
  %535 = phi float [ 0.000000e+00, %.lr.ph ], [ %2045, %508 ]
  %536 = phi float [ 0.000000e+00, %.lr.ph ], [ %2046, %508 ]
  %537 = phi float [ 0.000000e+00, %.lr.ph ], [ %2047, %508 ]
  %538 = phi float [ 0.000000e+00, %.lr.ph ], [ %2049, %508 ]
  %539 = phi float [ 0.000000e+00, %.lr.ph ], [ %2050, %508 ]
  %540 = phi float [ 0.000000e+00, %.lr.ph ], [ %2051, %508 ]
  %541 = phi float [ 0.000000e+00, %.lr.ph ], [ %2052, %508 ]
  %542 = phi float [ 0.000000e+00, %.lr.ph ], [ %1814, %508 ]
  %543 = phi float [ 0.000000e+00, %.lr.ph ], [ %1815, %508 ]
  %544 = phi float [ 0.000000e+00, %.lr.ph ], [ %1816, %508 ]
  %545 = phi float [ 0.000000e+00, %.lr.ph ], [ %1817, %508 ]
  %546 = phi float [ 0.000000e+00, %.lr.ph ], [ %1819, %508 ]
  %547 = phi float [ 0.000000e+00, %.lr.ph ], [ %1820, %508 ]
  %548 = phi float [ 0.000000e+00, %.lr.ph ], [ %1821, %508 ]
  %549 = phi float [ 0.000000e+00, %.lr.ph ], [ %1822, %508 ]
  %550 = phi float [ 0.000000e+00, %.lr.ph ], [ %1824, %508 ]
  %551 = phi float [ 0.000000e+00, %.lr.ph ], [ %1825, %508 ]
  %552 = phi float [ 0.000000e+00, %.lr.ph ], [ %1826, %508 ]
  %553 = phi float [ 0.000000e+00, %.lr.ph ], [ %1827, %508 ]
  %554 = phi float [ 0.000000e+00, %.lr.ph ], [ %1829, %508 ]
  %555 = phi float [ 0.000000e+00, %.lr.ph ], [ %1830, %508 ]
  %556 = phi float [ 0.000000e+00, %.lr.ph ], [ %1831, %508 ]
  %557 = phi float [ 0.000000e+00, %.lr.ph ], [ %1832, %508 ]
  %558 = phi float [ 0.000000e+00, %.lr.ph ], [ %1834, %508 ]
  %559 = phi float [ 0.000000e+00, %.lr.ph ], [ %1835, %508 ]
  %560 = phi float [ 0.000000e+00, %.lr.ph ], [ %1836, %508 ]
  %561 = phi float [ 0.000000e+00, %.lr.ph ], [ %1837, %508 ]
  %562 = phi float [ 0.000000e+00, %.lr.ph ], [ %1839, %508 ]
  %563 = phi float [ 0.000000e+00, %.lr.ph ], [ %1840, %508 ]
  %564 = phi float [ 0.000000e+00, %.lr.ph ], [ %1841, %508 ]
  %565 = phi float [ 0.000000e+00, %.lr.ph ], [ %1842, %508 ]
  %566 = phi float [ 0.000000e+00, %.lr.ph ], [ %1844, %508 ]
  %567 = phi float [ 0.000000e+00, %.lr.ph ], [ %1845, %508 ]
  %568 = phi float [ 0.000000e+00, %.lr.ph ], [ %1846, %508 ]
  %569 = phi float [ 0.000000e+00, %.lr.ph ], [ %1847, %508 ]
  %570 = phi float [ 0.000000e+00, %.lr.ph ], [ %1849, %508 ]
  %571 = phi float [ 0.000000e+00, %.lr.ph ], [ %1850, %508 ]
  %572 = phi float [ 0.000000e+00, %.lr.ph ], [ %1851, %508 ]
  %573 = phi float [ 0.000000e+00, %.lr.ph ], [ %1852, %508 ]
  %574 = icmp slt i64 %indvars.iv, %426, !dbg !34
  %575 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %576 = shl i32 %575, 19, !dbg !42
  %577 = sext i32 %576 to i64, !dbg !43
  %578 = getelementptr bfloat, ptr addrspace(1) %21, i64 %577, !dbg !43
  %579 = fptrunc float %542 to bfloat, !dbg !44
  %580 = fptrunc float %543 to bfloat, !dbg !44
  %581 = fptrunc float %544 to bfloat, !dbg !44
  %582 = fptrunc float %545 to bfloat, !dbg !44
  %583 = fptrunc float %546 to bfloat, !dbg !44
  %584 = fptrunc float %547 to bfloat, !dbg !44
  %585 = fptrunc float %548 to bfloat, !dbg !44
  %586 = fptrunc float %549 to bfloat, !dbg !44
  %587 = fptrunc float %550 to bfloat, !dbg !44
  %588 = fptrunc float %551 to bfloat, !dbg !44
  %589 = fptrunc float %552 to bfloat, !dbg !44
  %590 = fptrunc float %553 to bfloat, !dbg !44
  %591 = fptrunc float %554 to bfloat, !dbg !44
  %592 = fptrunc float %555 to bfloat, !dbg !44
  %593 = fptrunc float %556 to bfloat, !dbg !44
  %594 = fptrunc float %557 to bfloat, !dbg !44
  %595 = fptrunc float %558 to bfloat, !dbg !44
  %596 = fptrunc float %559 to bfloat, !dbg !44
  %597 = fptrunc float %560 to bfloat, !dbg !44
  %598 = fptrunc float %561 to bfloat, !dbg !44
  %599 = fptrunc float %562 to bfloat, !dbg !44
  %600 = fptrunc float %563 to bfloat, !dbg !44
  %601 = fptrunc float %564 to bfloat, !dbg !44
  %602 = fptrunc float %565 to bfloat, !dbg !44
  %603 = fptrunc float %566 to bfloat, !dbg !44
  %604 = fptrunc float %567 to bfloat, !dbg !44
  %605 = fptrunc float %568 to bfloat, !dbg !44
  %606 = fptrunc float %569 to bfloat, !dbg !44
  %607 = fptrunc float %570 to bfloat, !dbg !44
  %608 = fptrunc float %571 to bfloat, !dbg !44
  %609 = fptrunc float %572 to bfloat, !dbg !44
  %610 = fptrunc float %573 to bfloat, !dbg !44
  %611 = insertelement <2 x bfloat> poison, bfloat %579, i64 0, !dbg !44
  %612 = insertelement <2 x bfloat> %611, bfloat %580, i64 1, !dbg !44
  %613 = bitcast <2 x bfloat> %612 to i32, !dbg !44
  %614 = insertelement <2 x bfloat> poison, bfloat %581, i64 0, !dbg !44
  %615 = insertelement <2 x bfloat> %614, bfloat %582, i64 1, !dbg !44
  %616 = bitcast <2 x bfloat> %615 to i32, !dbg !44
  %617 = insertelement <2 x bfloat> poison, bfloat %583, i64 0, !dbg !44
  %618 = insertelement <2 x bfloat> %617, bfloat %584, i64 1, !dbg !44
  %619 = bitcast <2 x bfloat> %618 to i32, !dbg !44
  %620 = insertelement <2 x bfloat> poison, bfloat %585, i64 0, !dbg !44
  %621 = insertelement <2 x bfloat> %620, bfloat %586, i64 1, !dbg !44
  %622 = bitcast <2 x bfloat> %621 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %268, i32 %613, i32 %616, i32 %619, i32 %622) #2, !dbg !44
  %623 = insertelement <2 x bfloat> poison, bfloat %587, i64 0, !dbg !44
  %624 = insertelement <2 x bfloat> %623, bfloat %588, i64 1, !dbg !44
  %625 = bitcast <2 x bfloat> %624 to i32, !dbg !44
  %626 = insertelement <2 x bfloat> poison, bfloat %589, i64 0, !dbg !44
  %627 = insertelement <2 x bfloat> %626, bfloat %590, i64 1, !dbg !44
  %628 = bitcast <2 x bfloat> %627 to i32, !dbg !44
  %629 = insertelement <2 x bfloat> poison, bfloat %591, i64 0, !dbg !44
  %630 = insertelement <2 x bfloat> %629, bfloat %592, i64 1, !dbg !44
  %631 = bitcast <2 x bfloat> %630 to i32, !dbg !44
  %632 = insertelement <2 x bfloat> poison, bfloat %593, i64 0, !dbg !44
  %633 = insertelement <2 x bfloat> %632, bfloat %594, i64 1, !dbg !44
  %634 = bitcast <2 x bfloat> %633 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %271, i32 %625, i32 %628, i32 %631, i32 %634) #2, !dbg !44
  %635 = insertelement <2 x bfloat> poison, bfloat %595, i64 0, !dbg !44
  %636 = insertelement <2 x bfloat> %635, bfloat %596, i64 1, !dbg !44
  %637 = bitcast <2 x bfloat> %636 to i32, !dbg !44
  %638 = insertelement <2 x bfloat> poison, bfloat %597, i64 0, !dbg !44
  %639 = insertelement <2 x bfloat> %638, bfloat %598, i64 1, !dbg !44
  %640 = bitcast <2 x bfloat> %639 to i32, !dbg !44
  %641 = insertelement <2 x bfloat> poison, bfloat %599, i64 0, !dbg !44
  %642 = insertelement <2 x bfloat> %641, bfloat %600, i64 1, !dbg !44
  %643 = bitcast <2 x bfloat> %642 to i32, !dbg !44
  %644 = insertelement <2 x bfloat> poison, bfloat %601, i64 0, !dbg !44
  %645 = insertelement <2 x bfloat> %644, bfloat %602, i64 1, !dbg !44
  %646 = bitcast <2 x bfloat> %645 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %274, i32 %637, i32 %640, i32 %643, i32 %646) #2, !dbg !44
  %647 = insertelement <2 x bfloat> poison, bfloat %603, i64 0, !dbg !44
  %648 = insertelement <2 x bfloat> %647, bfloat %604, i64 1, !dbg !44
  %649 = bitcast <2 x bfloat> %648 to i32, !dbg !44
  %650 = insertelement <2 x bfloat> poison, bfloat %605, i64 0, !dbg !44
  %651 = insertelement <2 x bfloat> %650, bfloat %606, i64 1, !dbg !44
  %652 = bitcast <2 x bfloat> %651 to i32, !dbg !44
  %653 = insertelement <2 x bfloat> poison, bfloat %607, i64 0, !dbg !44
  %654 = insertelement <2 x bfloat> %653, bfloat %608, i64 1, !dbg !44
  %655 = bitcast <2 x bfloat> %654 to i32, !dbg !44
  %656 = insertelement <2 x bfloat> poison, bfloat %609, i64 0, !dbg !44
  %657 = insertelement <2 x bfloat> %656, bfloat %610, i64 1, !dbg !44
  %658 = bitcast <2 x bfloat> %657 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %277, i32 %649, i32 %652, i32 %655, i32 %658) #2, !dbg !44
  %659 = getelementptr i8, ptr addrspace(1) %578, i64 %.idx295, !dbg !29
  %660 = getelementptr bfloat, ptr addrspace(1) %659, i64 %74, !dbg !29
  %661 = getelementptr i8, ptr addrspace(1) %578, i64 %.idx296, !dbg !29
  %662 = getelementptr bfloat, ptr addrspace(1) %661, i64 %74, !dbg !29
  %663 = getelementptr i8, ptr addrspace(1) %578, i64 %.idx297, !dbg !29
  %664 = getelementptr bfloat, ptr addrspace(1) %663, i64 %74, !dbg !29
  %665 = getelementptr i8, ptr addrspace(1) %578, i64 %.idx298, !dbg !29
  %666 = getelementptr bfloat, ptr addrspace(1) %665, i64 %74, !dbg !29
  store <2 x bfloat> %612, ptr addrspace(3) %292, align 4, !dbg !29
  store <2 x bfloat> %615, ptr addrspace(3) %297, align 4, !dbg !29
  store <2 x bfloat> %618, ptr addrspace(3) %300, align 4, !dbg !29
  store <2 x bfloat> %621, ptr addrspace(3) %305, align 4, !dbg !29
  store <2 x bfloat> %624, ptr addrspace(3) %308, align 4, !dbg !29
  store <2 x bfloat> %627, ptr addrspace(3) %313, align 4, !dbg !29
  store <2 x bfloat> %630, ptr addrspace(3) %316, align 4, !dbg !29
  store <2 x bfloat> %633, ptr addrspace(3) %321, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %667 = load <4 x i32>, ptr addrspace(3) %325, align 16, !dbg !29
  %668 = load <4 x i32>, ptr addrspace(3) %330, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  store <2 x bfloat> %636, ptr addrspace(3) %292, align 4, !dbg !29
  store <2 x bfloat> %639, ptr addrspace(3) %297, align 4, !dbg !29
  store <2 x bfloat> %642, ptr addrspace(3) %300, align 4, !dbg !29
  store <2 x bfloat> %645, ptr addrspace(3) %305, align 4, !dbg !29
  store <2 x bfloat> %648, ptr addrspace(3) %308, align 4, !dbg !29
  store <2 x bfloat> %651, ptr addrspace(3) %313, align 4, !dbg !29
  store <2 x bfloat> %654, ptr addrspace(3) %316, align 4, !dbg !29
  store <2 x bfloat> %657, ptr addrspace(3) %321, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %669 = load <4 x i32>, ptr addrspace(3) %325, align 16, !dbg !29
  %670 = load <4 x i32>, ptr addrspace(3) %330, align 16, !dbg !29
  %.extract457 = extractelement <4 x i32> %667, i64 0, !dbg !29
  %.extract459 = extractelement <4 x i32> %667, i64 1, !dbg !29
  %.extract461 = extractelement <4 x i32> %667, i64 2, !dbg !29
  %.extract463 = extractelement <4 x i32> %667, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract457, i32 %.extract459, i32 %.extract461, i32 %.extract463, ptr addrspace(1) %660, i1 %77) #2, !dbg !29
  %.extract465 = extractelement <4 x i32> %668, i64 0, !dbg !29
  %.extract467 = extractelement <4 x i32> %668, i64 1, !dbg !29
  %.extract469 = extractelement <4 x i32> %668, i64 2, !dbg !29
  %.extract471 = extractelement <4 x i32> %668, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract465, i32 %.extract467, i32 %.extract469, i32 %.extract471, ptr addrspace(1) %662, i1 %77) #2, !dbg !29
  %.extract473 = extractelement <4 x i32> %669, i64 0, !dbg !29
  %.extract475 = extractelement <4 x i32> %669, i64 1, !dbg !29
  %.extract477 = extractelement <4 x i32> %669, i64 2, !dbg !29
  %.extract479 = extractelement <4 x i32> %669, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract473, i32 %.extract475, i32 %.extract477, i32 %.extract479, ptr addrspace(1) %664, i1 %77) #2, !dbg !29
  %.extract481 = extractelement <4 x i32> %670, i64 0, !dbg !29
  %.extract483 = extractelement <4 x i32> %670, i64 1, !dbg !29
  %.extract485 = extractelement <4 x i32> %670, i64 2, !dbg !29
  %.extract487 = extractelement <4 x i32> %670, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract481, i32 %.extract483, i32 %.extract485, i32 %.extract487, ptr addrspace(1) %666, i1 %77) #2, !dbg !29
  %671 = fptrunc float %510 to bfloat, !dbg !45
  %672 = fptrunc float %511 to bfloat, !dbg !45
  %673 = fptrunc float %512 to bfloat, !dbg !45
  %674 = fptrunc float %513 to bfloat, !dbg !45
  %675 = fptrunc float %514 to bfloat, !dbg !45
  %676 = fptrunc float %515 to bfloat, !dbg !45
  %677 = fptrunc float %516 to bfloat, !dbg !45
  %678 = fptrunc float %517 to bfloat, !dbg !45
  %679 = fptrunc float %518 to bfloat, !dbg !45
  %680 = fptrunc float %519 to bfloat, !dbg !45
  %681 = fptrunc float %520 to bfloat, !dbg !45
  %682 = fptrunc float %521 to bfloat, !dbg !45
  %683 = fptrunc float %522 to bfloat, !dbg !45
  %684 = fptrunc float %523 to bfloat, !dbg !45
  %685 = fptrunc float %524 to bfloat, !dbg !45
  %686 = fptrunc float %525 to bfloat, !dbg !45
  %687 = fptrunc float %526 to bfloat, !dbg !45
  %688 = fptrunc float %527 to bfloat, !dbg !45
  %689 = fptrunc float %528 to bfloat, !dbg !45
  %690 = fptrunc float %529 to bfloat, !dbg !45
  %691 = fptrunc float %530 to bfloat, !dbg !45
  %692 = fptrunc float %531 to bfloat, !dbg !45
  %693 = fptrunc float %532 to bfloat, !dbg !45
  %694 = fptrunc float %533 to bfloat, !dbg !45
  %695 = fptrunc float %534 to bfloat, !dbg !45
  %696 = fptrunc float %535 to bfloat, !dbg !45
  %697 = fptrunc float %536 to bfloat, !dbg !45
  %698 = fptrunc float %537 to bfloat, !dbg !45
  %699 = fptrunc float %538 to bfloat, !dbg !45
  %700 = fptrunc float %539 to bfloat, !dbg !45
  %701 = fptrunc float %540 to bfloat, !dbg !45
  %702 = fptrunc float %541 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %703 = insertelement <2 x bfloat> poison, bfloat %671, i64 0, !dbg !45
  %704 = insertelement <2 x bfloat> %703, bfloat %672, i64 1, !dbg !45
  %705 = bitcast <2 x bfloat> %704 to i32, !dbg !45
  %706 = insertelement <2 x bfloat> poison, bfloat %673, i64 0, !dbg !45
  %707 = insertelement <2 x bfloat> %706, bfloat %674, i64 1, !dbg !45
  %708 = bitcast <2 x bfloat> %707 to i32, !dbg !45
  %709 = insertelement <2 x bfloat> poison, bfloat %675, i64 0, !dbg !45
  %710 = insertelement <2 x bfloat> %709, bfloat %676, i64 1, !dbg !45
  %711 = bitcast <2 x bfloat> %710 to i32, !dbg !45
  %712 = insertelement <2 x bfloat> poison, bfloat %677, i64 0, !dbg !45
  %713 = insertelement <2 x bfloat> %712, bfloat %678, i64 1, !dbg !45
  %714 = bitcast <2 x bfloat> %713 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %332, i32 %705, i32 %708, i32 %711, i32 %714) #2, !dbg !45
  %715 = insertelement <2 x bfloat> poison, bfloat %679, i64 0, !dbg !45
  %716 = insertelement <2 x bfloat> %715, bfloat %680, i64 1, !dbg !45
  %717 = bitcast <2 x bfloat> %716 to i32, !dbg !45
  %718 = insertelement <2 x bfloat> poison, bfloat %681, i64 0, !dbg !45
  %719 = insertelement <2 x bfloat> %718, bfloat %682, i64 1, !dbg !45
  %720 = bitcast <2 x bfloat> %719 to i32, !dbg !45
  %721 = insertelement <2 x bfloat> poison, bfloat %683, i64 0, !dbg !45
  %722 = insertelement <2 x bfloat> %721, bfloat %684, i64 1, !dbg !45
  %723 = bitcast <2 x bfloat> %722 to i32, !dbg !45
  %724 = insertelement <2 x bfloat> poison, bfloat %685, i64 0, !dbg !45
  %725 = insertelement <2 x bfloat> %724, bfloat %686, i64 1, !dbg !45
  %726 = bitcast <2 x bfloat> %725 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %334, i32 %717, i32 %720, i32 %723, i32 %726) #2, !dbg !45
  %727 = insertelement <2 x bfloat> poison, bfloat %687, i64 0, !dbg !45
  %728 = insertelement <2 x bfloat> %727, bfloat %688, i64 1, !dbg !45
  %729 = bitcast <2 x bfloat> %728 to i32, !dbg !45
  %730 = insertelement <2 x bfloat> poison, bfloat %689, i64 0, !dbg !45
  %731 = insertelement <2 x bfloat> %730, bfloat %690, i64 1, !dbg !45
  %732 = bitcast <2 x bfloat> %731 to i32, !dbg !45
  %733 = insertelement <2 x bfloat> poison, bfloat %691, i64 0, !dbg !45
  %734 = insertelement <2 x bfloat> %733, bfloat %692, i64 1, !dbg !45
  %735 = bitcast <2 x bfloat> %734 to i32, !dbg !45
  %736 = insertelement <2 x bfloat> poison, bfloat %693, i64 0, !dbg !45
  %737 = insertelement <2 x bfloat> %736, bfloat %694, i64 1, !dbg !45
  %738 = bitcast <2 x bfloat> %737 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %336, i32 %729, i32 %732, i32 %735, i32 %738) #2, !dbg !45
  %739 = insertelement <2 x bfloat> poison, bfloat %695, i64 0, !dbg !45
  %740 = insertelement <2 x bfloat> %739, bfloat %696, i64 1, !dbg !45
  %741 = bitcast <2 x bfloat> %740 to i32, !dbg !45
  %742 = insertelement <2 x bfloat> poison, bfloat %697, i64 0, !dbg !45
  %743 = insertelement <2 x bfloat> %742, bfloat %698, i64 1, !dbg !45
  %744 = bitcast <2 x bfloat> %743 to i32, !dbg !45
  %745 = insertelement <2 x bfloat> poison, bfloat %699, i64 0, !dbg !45
  %746 = insertelement <2 x bfloat> %745, bfloat %700, i64 1, !dbg !45
  %747 = bitcast <2 x bfloat> %746 to i32, !dbg !45
  %748 = insertelement <2 x bfloat> poison, bfloat %701, i64 0, !dbg !45
  %749 = insertelement <2 x bfloat> %748, bfloat %702, i64 1, !dbg !45
  %750 = bitcast <2 x bfloat> %749 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %338, i32 %741, i32 %744, i32 %747, i32 %750) #2, !dbg !45
  %751 = getelementptr i8, ptr addrspace(1) %659, i64 16384, !dbg !30
  %752 = getelementptr bfloat, ptr addrspace(1) %751, i64 %74, !dbg !30
  %753 = getelementptr i8, ptr addrspace(1) %661, i64 16384, !dbg !30
  %754 = getelementptr bfloat, ptr addrspace(1) %753, i64 %74, !dbg !30
  %755 = getelementptr i8, ptr addrspace(1) %663, i64 16384, !dbg !30
  %756 = getelementptr bfloat, ptr addrspace(1) %755, i64 %74, !dbg !30
  %757 = getelementptr i8, ptr addrspace(1) %665, i64 16384, !dbg !30
  %758 = getelementptr bfloat, ptr addrspace(1) %757, i64 %74, !dbg !30
  store <2 x bfloat> %704, ptr addrspace(3) %339, align 4, !dbg !30
  store <2 x bfloat> %707, ptr addrspace(3) %340, align 4, !dbg !30
  store <2 x bfloat> %710, ptr addrspace(3) %341, align 4, !dbg !30
  store <2 x bfloat> %713, ptr addrspace(3) %342, align 4, !dbg !30
  store <2 x bfloat> %716, ptr addrspace(3) %343, align 4, !dbg !30
  store <2 x bfloat> %719, ptr addrspace(3) %344, align 4, !dbg !30
  store <2 x bfloat> %722, ptr addrspace(3) %345, align 4, !dbg !30
  store <2 x bfloat> %725, ptr addrspace(3) %346, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %759 = load <4 x i32>, ptr addrspace(3) %347, align 16, !dbg !30
  %760 = load <4 x i32>, ptr addrspace(3) %348, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  store <2 x bfloat> %728, ptr addrspace(3) %339, align 4, !dbg !30
  store <2 x bfloat> %731, ptr addrspace(3) %340, align 4, !dbg !30
  store <2 x bfloat> %734, ptr addrspace(3) %341, align 4, !dbg !30
  store <2 x bfloat> %737, ptr addrspace(3) %342, align 4, !dbg !30
  store <2 x bfloat> %740, ptr addrspace(3) %343, align 4, !dbg !30
  store <2 x bfloat> %743, ptr addrspace(3) %344, align 4, !dbg !30
  store <2 x bfloat> %746, ptr addrspace(3) %345, align 4, !dbg !30
  store <2 x bfloat> %749, ptr addrspace(3) %346, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %761 = load <4 x i32>, ptr addrspace(3) %347, align 16, !dbg !30
  %762 = load <4 x i32>, ptr addrspace(3) %348, align 16, !dbg !30
  %.extract490 = extractelement <4 x i32> %759, i64 0, !dbg !30
  %.extract492 = extractelement <4 x i32> %759, i64 1, !dbg !30
  %.extract494 = extractelement <4 x i32> %759, i64 2, !dbg !30
  %.extract496 = extractelement <4 x i32> %759, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract490, i32 %.extract492, i32 %.extract494, i32 %.extract496, ptr addrspace(1) %752, i1 %77) #2, !dbg !30
  %.extract498 = extractelement <4 x i32> %760, i64 0, !dbg !30
  %.extract500 = extractelement <4 x i32> %760, i64 1, !dbg !30
  %.extract502 = extractelement <4 x i32> %760, i64 2, !dbg !30
  %.extract504 = extractelement <4 x i32> %760, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract498, i32 %.extract500, i32 %.extract502, i32 %.extract504, ptr addrspace(1) %754, i1 %77) #2, !dbg !30
  %.extract506 = extractelement <4 x i32> %761, i64 0, !dbg !30
  %.extract508 = extractelement <4 x i32> %761, i64 1, !dbg !30
  %.extract510 = extractelement <4 x i32> %761, i64 2, !dbg !30
  %.extract512 = extractelement <4 x i32> %761, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract506, i32 %.extract508, i32 %.extract510, i32 %.extract512, ptr addrspace(1) %756, i1 %77) #2, !dbg !30
  %.extract514 = extractelement <4 x i32> %762, i64 0, !dbg !30
  %.extract516 = extractelement <4 x i32> %762, i64 1, !dbg !30
  %.extract518 = extractelement <4 x i32> %762, i64 2, !dbg !30
  %.extract520 = extractelement <4 x i32> %762, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract514, i32 %.extract516, i32 %.extract518, i32 %.extract520, ptr addrspace(1) %758, i1 %77) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %763 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %428) #2, !dbg !35
  %764 = extractvalue { i32, i32, i32, i32 } %763, 0, !dbg !35
  %765 = extractvalue { i32, i32, i32, i32 } %763, 1, !dbg !35
  %766 = extractvalue { i32, i32, i32, i32 } %763, 2, !dbg !35
  %767 = extractvalue { i32, i32, i32, i32 } %763, 3, !dbg !35
  %768 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %430) #2, !dbg !35
  %769 = extractvalue { i32, i32, i32, i32 } %768, 0, !dbg !35
  %770 = extractvalue { i32, i32, i32, i32 } %768, 1, !dbg !35
  %771 = extractvalue { i32, i32, i32, i32 } %768, 2, !dbg !35
  %772 = extractvalue { i32, i32, i32, i32 } %768, 3, !dbg !35
  %773 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %432) #2, !dbg !35
  %774 = extractvalue { i32, i32, i32, i32 } %773, 0, !dbg !35
  %775 = extractvalue { i32, i32, i32, i32 } %773, 1, !dbg !35
  %776 = extractvalue { i32, i32, i32, i32 } %773, 2, !dbg !35
  %777 = extractvalue { i32, i32, i32, i32 } %773, 3, !dbg !35
  %778 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %434) #2, !dbg !35
  %779 = extractvalue { i32, i32, i32, i32 } %778, 0, !dbg !35
  %780 = extractvalue { i32, i32, i32, i32 } %778, 1, !dbg !35
  %781 = extractvalue { i32, i32, i32, i32 } %778, 2, !dbg !35
  %782 = extractvalue { i32, i32, i32, i32 } %778, 3, !dbg !35
  %783 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %436) #2, !dbg !35
  %784 = extractvalue { i32, i32, i32, i32 } %783, 0, !dbg !35
  %785 = extractvalue { i32, i32, i32, i32 } %783, 1, !dbg !35
  %786 = extractvalue { i32, i32, i32, i32 } %783, 2, !dbg !35
  %787 = extractvalue { i32, i32, i32, i32 } %783, 3, !dbg !35
  %788 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %438) #2, !dbg !35
  %789 = extractvalue { i32, i32, i32, i32 } %788, 0, !dbg !35
  %790 = extractvalue { i32, i32, i32, i32 } %788, 1, !dbg !35
  %791 = extractvalue { i32, i32, i32, i32 } %788, 2, !dbg !35
  %792 = extractvalue { i32, i32, i32, i32 } %788, 3, !dbg !35
  %793 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %440) #2, !dbg !35
  %794 = extractvalue { i32, i32, i32, i32 } %793, 0, !dbg !35
  %795 = extractvalue { i32, i32, i32, i32 } %793, 1, !dbg !35
  %796 = extractvalue { i32, i32, i32, i32 } %793, 2, !dbg !35
  %797 = extractvalue { i32, i32, i32, i32 } %793, 3, !dbg !35
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %442) #2, !dbg !35
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !35
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !35
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !35
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !35
  %803 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #2, !dbg !44
  %804 = extractvalue { i32, i32, i32, i32 } %803, 0, !dbg !44
  %805 = extractvalue { i32, i32, i32, i32 } %803, 1, !dbg !44
  %806 = extractvalue { i32, i32, i32, i32 } %803, 2, !dbg !44
  %807 = extractvalue { i32, i32, i32, i32 } %803, 3, !dbg !44
  %808 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #2, !dbg !44
  %809 = extractvalue { i32, i32, i32, i32 } %808, 0, !dbg !44
  %810 = extractvalue { i32, i32, i32, i32 } %808, 1, !dbg !44
  %811 = extractvalue { i32, i32, i32, i32 } %808, 2, !dbg !44
  %812 = extractvalue { i32, i32, i32, i32 } %808, 3, !dbg !44
  %813 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #2, !dbg !44
  %814 = extractvalue { i32, i32, i32, i32 } %813, 0, !dbg !44
  %815 = extractvalue { i32, i32, i32, i32 } %813, 1, !dbg !44
  %816 = extractvalue { i32, i32, i32, i32 } %813, 2, !dbg !44
  %817 = extractvalue { i32, i32, i32, i32 } %813, 3, !dbg !44
  %818 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %377) #2, !dbg !44
  %819 = extractvalue { i32, i32, i32, i32 } %818, 0, !dbg !44
  %820 = extractvalue { i32, i32, i32, i32 } %818, 1, !dbg !44
  %821 = extractvalue { i32, i32, i32, i32 } %818, 2, !dbg !44
  %822 = extractvalue { i32, i32, i32, i32 } %818, 3, !dbg !44
  %823 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %380) #2, !dbg !44
  %824 = extractvalue { i32, i32, i32, i32 } %823, 0, !dbg !44
  %825 = extractvalue { i32, i32, i32, i32 } %823, 1, !dbg !44
  %826 = extractvalue { i32, i32, i32, i32 } %823, 2, !dbg !44
  %827 = extractvalue { i32, i32, i32, i32 } %823, 3, !dbg !44
  %828 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %383) #2, !dbg !44
  %829 = extractvalue { i32, i32, i32, i32 } %828, 0, !dbg !44
  %830 = extractvalue { i32, i32, i32, i32 } %828, 1, !dbg !44
  %831 = extractvalue { i32, i32, i32, i32 } %828, 2, !dbg !44
  %832 = extractvalue { i32, i32, i32, i32 } %828, 3, !dbg !44
  %833 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %386) #2, !dbg !44
  %834 = extractvalue { i32, i32, i32, i32 } %833, 0, !dbg !44
  %835 = extractvalue { i32, i32, i32, i32 } %833, 1, !dbg !44
  %836 = extractvalue { i32, i32, i32, i32 } %833, 2, !dbg !44
  %837 = extractvalue { i32, i32, i32, i32 } %833, 3, !dbg !44
  %838 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %389) #2, !dbg !44
  %839 = extractvalue { i32, i32, i32, i32 } %838, 0, !dbg !44
  %840 = extractvalue { i32, i32, i32, i32 } %838, 1, !dbg !44
  %841 = extractvalue { i32, i32, i32, i32 } %838, 2, !dbg !44
  %842 = extractvalue { i32, i32, i32, i32 } %838, 3, !dbg !44
  %843 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %764, i32 %765, i32 %766, i32 %767, i32 %804, i32 %805) #2, !dbg !46
  %844 = extractvalue { float, float, float, float } %843, 0, !dbg !46
  %845 = extractvalue { float, float, float, float } %843, 1, !dbg !46
  %846 = extractvalue { float, float, float, float } %843, 2, !dbg !46
  %847 = extractvalue { float, float, float, float } %843, 3, !dbg !46
  %848 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %764, i32 %765, i32 %766, i32 %767, i32 %814, i32 %815) #2, !dbg !46
  %849 = extractvalue { float, float, float, float } %848, 0, !dbg !46
  %850 = extractvalue { float, float, float, float } %848, 1, !dbg !46
  %851 = extractvalue { float, float, float, float } %848, 2, !dbg !46
  %852 = extractvalue { float, float, float, float } %848, 3, !dbg !46
  %853 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %764, i32 %765, i32 %766, i32 %767, i32 %824, i32 %825) #2, !dbg !46
  %854 = extractvalue { float, float, float, float } %853, 0, !dbg !46
  %855 = extractvalue { float, float, float, float } %853, 1, !dbg !46
  %856 = extractvalue { float, float, float, float } %853, 2, !dbg !46
  %857 = extractvalue { float, float, float, float } %853, 3, !dbg !46
  %858 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %764, i32 %765, i32 %766, i32 %767, i32 %834, i32 %835) #2, !dbg !46
  %859 = extractvalue { float, float, float, float } %858, 0, !dbg !46
  %860 = extractvalue { float, float, float, float } %858, 1, !dbg !46
  %861 = extractvalue { float, float, float, float } %858, 2, !dbg !46
  %862 = extractvalue { float, float, float, float } %858, 3, !dbg !46
  %863 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %784, i32 %785, i32 %786, i32 %787, i32 %804, i32 %805) #2, !dbg !46
  %864 = extractvalue { float, float, float, float } %863, 0, !dbg !46
  %865 = extractvalue { float, float, float, float } %863, 1, !dbg !46
  %866 = extractvalue { float, float, float, float } %863, 2, !dbg !46
  %867 = extractvalue { float, float, float, float } %863, 3, !dbg !46
  %868 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %784, i32 %785, i32 %786, i32 %787, i32 %814, i32 %815) #2, !dbg !46
  %869 = extractvalue { float, float, float, float } %868, 0, !dbg !46
  %870 = extractvalue { float, float, float, float } %868, 1, !dbg !46
  %871 = extractvalue { float, float, float, float } %868, 2, !dbg !46
  %872 = extractvalue { float, float, float, float } %868, 3, !dbg !46
  %873 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %784, i32 %785, i32 %786, i32 %787, i32 %824, i32 %825) #2, !dbg !46
  %874 = extractvalue { float, float, float, float } %873, 0, !dbg !46
  %875 = extractvalue { float, float, float, float } %873, 1, !dbg !46
  %876 = extractvalue { float, float, float, float } %873, 2, !dbg !46
  %877 = extractvalue { float, float, float, float } %873, 3, !dbg !46
  %878 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %784, i32 %785, i32 %786, i32 %787, i32 %834, i32 %835) #2, !dbg !46
  %879 = extractvalue { float, float, float, float } %878, 0, !dbg !46
  %880 = extractvalue { float, float, float, float } %878, 1, !dbg !46
  %881 = extractvalue { float, float, float, float } %878, 2, !dbg !46
  %882 = extractvalue { float, float, float, float } %878, 3, !dbg !46
  %883 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %844, float %845, float %846, float %847, i32 %769, i32 %770, i32 %771, i32 %772, i32 %806, i32 %807) #2, !dbg !46
  %884 = extractvalue { float, float, float, float } %883, 0, !dbg !46
  %885 = extractvalue { float, float, float, float } %883, 1, !dbg !46
  %886 = extractvalue { float, float, float, float } %883, 2, !dbg !46
  %887 = extractvalue { float, float, float, float } %883, 3, !dbg !46
  %888 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %849, float %850, float %851, float %852, i32 %769, i32 %770, i32 %771, i32 %772, i32 %816, i32 %817) #2, !dbg !46
  %889 = extractvalue { float, float, float, float } %888, 0, !dbg !46
  %890 = extractvalue { float, float, float, float } %888, 1, !dbg !46
  %891 = extractvalue { float, float, float, float } %888, 2, !dbg !46
  %892 = extractvalue { float, float, float, float } %888, 3, !dbg !46
  %893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %854, float %855, float %856, float %857, i32 %769, i32 %770, i32 %771, i32 %772, i32 %826, i32 %827) #2, !dbg !46
  %894 = extractvalue { float, float, float, float } %893, 0, !dbg !46
  %895 = extractvalue { float, float, float, float } %893, 1, !dbg !46
  %896 = extractvalue { float, float, float, float } %893, 2, !dbg !46
  %897 = extractvalue { float, float, float, float } %893, 3, !dbg !46
  %898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %859, float %860, float %861, float %862, i32 %769, i32 %770, i32 %771, i32 %772, i32 %836, i32 %837) #2, !dbg !46
  %899 = extractvalue { float, float, float, float } %898, 0, !dbg !46
  %900 = extractvalue { float, float, float, float } %898, 1, !dbg !46
  %901 = extractvalue { float, float, float, float } %898, 2, !dbg !46
  %902 = extractvalue { float, float, float, float } %898, 3, !dbg !46
  %903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %864, float %865, float %866, float %867, i32 %789, i32 %790, i32 %791, i32 %792, i32 %806, i32 %807) #2, !dbg !46
  %904 = extractvalue { float, float, float, float } %903, 0, !dbg !46
  %905 = extractvalue { float, float, float, float } %903, 1, !dbg !46
  %906 = extractvalue { float, float, float, float } %903, 2, !dbg !46
  %907 = extractvalue { float, float, float, float } %903, 3, !dbg !46
  %908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %869, float %870, float %871, float %872, i32 %789, i32 %790, i32 %791, i32 %792, i32 %816, i32 %817) #2, !dbg !46
  %909 = extractvalue { float, float, float, float } %908, 0, !dbg !46
  %910 = extractvalue { float, float, float, float } %908, 1, !dbg !46
  %911 = extractvalue { float, float, float, float } %908, 2, !dbg !46
  %912 = extractvalue { float, float, float, float } %908, 3, !dbg !46
  %913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %874, float %875, float %876, float %877, i32 %789, i32 %790, i32 %791, i32 %792, i32 %826, i32 %827) #2, !dbg !46
  %914 = extractvalue { float, float, float, float } %913, 0, !dbg !46
  %915 = extractvalue { float, float, float, float } %913, 1, !dbg !46
  %916 = extractvalue { float, float, float, float } %913, 2, !dbg !46
  %917 = extractvalue { float, float, float, float } %913, 3, !dbg !46
  %918 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %879, float %880, float %881, float %882, i32 %789, i32 %790, i32 %791, i32 %792, i32 %836, i32 %837) #2, !dbg !46
  %919 = extractvalue { float, float, float, float } %918, 0, !dbg !46
  %920 = extractvalue { float, float, float, float } %918, 1, !dbg !46
  %921 = extractvalue { float, float, float, float } %918, 2, !dbg !46
  %922 = extractvalue { float, float, float, float } %918, 3, !dbg !46
  %923 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %884, float %885, float %886, float %887, i32 %774, i32 %775, i32 %776, i32 %777, i32 %809, i32 %810) #2, !dbg !46
  %924 = extractvalue { float, float, float, float } %923, 0, !dbg !46
  %925 = extractvalue { float, float, float, float } %923, 1, !dbg !46
  %926 = extractvalue { float, float, float, float } %923, 2, !dbg !46
  %927 = extractvalue { float, float, float, float } %923, 3, !dbg !46
  %928 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %889, float %890, float %891, float %892, i32 %774, i32 %775, i32 %776, i32 %777, i32 %819, i32 %820) #2, !dbg !46
  %929 = extractvalue { float, float, float, float } %928, 0, !dbg !46
  %930 = extractvalue { float, float, float, float } %928, 1, !dbg !46
  %931 = extractvalue { float, float, float, float } %928, 2, !dbg !46
  %932 = extractvalue { float, float, float, float } %928, 3, !dbg !46
  %933 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %894, float %895, float %896, float %897, i32 %774, i32 %775, i32 %776, i32 %777, i32 %829, i32 %830) #2, !dbg !46
  %934 = extractvalue { float, float, float, float } %933, 0, !dbg !46
  %935 = extractvalue { float, float, float, float } %933, 1, !dbg !46
  %936 = extractvalue { float, float, float, float } %933, 2, !dbg !46
  %937 = extractvalue { float, float, float, float } %933, 3, !dbg !46
  %938 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %899, float %900, float %901, float %902, i32 %774, i32 %775, i32 %776, i32 %777, i32 %839, i32 %840) #2, !dbg !46
  %939 = extractvalue { float, float, float, float } %938, 0, !dbg !46
  %940 = extractvalue { float, float, float, float } %938, 1, !dbg !46
  %941 = extractvalue { float, float, float, float } %938, 2, !dbg !46
  %942 = extractvalue { float, float, float, float } %938, 3, !dbg !46
  %943 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %904, float %905, float %906, float %907, i32 %794, i32 %795, i32 %796, i32 %797, i32 %809, i32 %810) #2, !dbg !46
  %944 = extractvalue { float, float, float, float } %943, 0, !dbg !46
  %945 = extractvalue { float, float, float, float } %943, 1, !dbg !46
  %946 = extractvalue { float, float, float, float } %943, 2, !dbg !46
  %947 = extractvalue { float, float, float, float } %943, 3, !dbg !46
  %948 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %909, float %910, float %911, float %912, i32 %794, i32 %795, i32 %796, i32 %797, i32 %819, i32 %820) #2, !dbg !46
  %949 = extractvalue { float, float, float, float } %948, 0, !dbg !46
  %950 = extractvalue { float, float, float, float } %948, 1, !dbg !46
  %951 = extractvalue { float, float, float, float } %948, 2, !dbg !46
  %952 = extractvalue { float, float, float, float } %948, 3, !dbg !46
  %953 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %914, float %915, float %916, float %917, i32 %794, i32 %795, i32 %796, i32 %797, i32 %829, i32 %830) #2, !dbg !46
  %954 = extractvalue { float, float, float, float } %953, 0, !dbg !46
  %955 = extractvalue { float, float, float, float } %953, 1, !dbg !46
  %956 = extractvalue { float, float, float, float } %953, 2, !dbg !46
  %957 = extractvalue { float, float, float, float } %953, 3, !dbg !46
  %958 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %919, float %920, float %921, float %922, i32 %794, i32 %795, i32 %796, i32 %797, i32 %839, i32 %840) #2, !dbg !46
  %959 = extractvalue { float, float, float, float } %958, 0, !dbg !46
  %960 = extractvalue { float, float, float, float } %958, 1, !dbg !46
  %961 = extractvalue { float, float, float, float } %958, 2, !dbg !46
  %962 = extractvalue { float, float, float, float } %958, 3, !dbg !46
  %963 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %924, float %925, float %926, float %927, i32 %779, i32 %780, i32 %781, i32 %782, i32 %811, i32 %812) #2, !dbg !46
  %964 = extractvalue { float, float, float, float } %963, 0, !dbg !46
  %965 = extractvalue { float, float, float, float } %963, 1, !dbg !46
  %966 = extractvalue { float, float, float, float } %963, 2, !dbg !46
  %967 = extractvalue { float, float, float, float } %963, 3, !dbg !46
  %968 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %929, float %930, float %931, float %932, i32 %779, i32 %780, i32 %781, i32 %782, i32 %821, i32 %822) #2, !dbg !46
  %969 = extractvalue { float, float, float, float } %968, 0, !dbg !46
  %970 = extractvalue { float, float, float, float } %968, 1, !dbg !46
  %971 = extractvalue { float, float, float, float } %968, 2, !dbg !46
  %972 = extractvalue { float, float, float, float } %968, 3, !dbg !46
  %973 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %934, float %935, float %936, float %937, i32 %779, i32 %780, i32 %781, i32 %782, i32 %831, i32 %832) #2, !dbg !46
  %974 = extractvalue { float, float, float, float } %973, 0, !dbg !46
  %975 = extractvalue { float, float, float, float } %973, 1, !dbg !46
  %976 = extractvalue { float, float, float, float } %973, 2, !dbg !46
  %977 = extractvalue { float, float, float, float } %973, 3, !dbg !46
  %978 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %939, float %940, float %941, float %942, i32 %779, i32 %780, i32 %781, i32 %782, i32 %841, i32 %842) #2, !dbg !46
  %979 = extractvalue { float, float, float, float } %978, 0, !dbg !46
  %980 = extractvalue { float, float, float, float } %978, 1, !dbg !46
  %981 = extractvalue { float, float, float, float } %978, 2, !dbg !46
  %982 = extractvalue { float, float, float, float } %978, 3, !dbg !46
  %983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %944, float %945, float %946, float %947, i32 %799, i32 %800, i32 %801, i32 %802, i32 %811, i32 %812) #2, !dbg !46
  %984 = extractvalue { float, float, float, float } %983, 0, !dbg !46
  %985 = extractvalue { float, float, float, float } %983, 1, !dbg !46
  %986 = extractvalue { float, float, float, float } %983, 2, !dbg !46
  %987 = extractvalue { float, float, float, float } %983, 3, !dbg !46
  %988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %949, float %950, float %951, float %952, i32 %799, i32 %800, i32 %801, i32 %802, i32 %821, i32 %822) #2, !dbg !46
  %989 = extractvalue { float, float, float, float } %988, 0, !dbg !46
  %990 = extractvalue { float, float, float, float } %988, 1, !dbg !46
  %991 = extractvalue { float, float, float, float } %988, 2, !dbg !46
  %992 = extractvalue { float, float, float, float } %988, 3, !dbg !46
  %993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %954, float %955, float %956, float %957, i32 %799, i32 %800, i32 %801, i32 %802, i32 %831, i32 %832) #2, !dbg !46
  %994 = extractvalue { float, float, float, float } %993, 0, !dbg !46
  %995 = extractvalue { float, float, float, float } %993, 1, !dbg !46
  %996 = extractvalue { float, float, float, float } %993, 2, !dbg !46
  %997 = extractvalue { float, float, float, float } %993, 3, !dbg !46
  %998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %959, float %960, float %961, float %962, i32 %799, i32 %800, i32 %801, i32 %802, i32 %841, i32 %842) #2, !dbg !46
  %999 = extractvalue { float, float, float, float } %998, 0, !dbg !46
  %1000 = extractvalue { float, float, float, float } %998, 1, !dbg !46
  %1001 = extractvalue { float, float, float, float } %998, 2, !dbg !46
  %1002 = extractvalue { float, float, float, float } %998, 3, !dbg !46
  %1003 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %444) #2, !dbg !36
  %1004 = extractvalue { i32, i32, i32, i32 } %1003, 0, !dbg !36
  %1005 = extractvalue { i32, i32, i32, i32 } %1003, 1, !dbg !36
  %1006 = extractvalue { i32, i32, i32, i32 } %1003, 2, !dbg !36
  %1007 = extractvalue { i32, i32, i32, i32 } %1003, 3, !dbg !36
  %1008 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %446) #2, !dbg !36
  %1009 = extractvalue { i32, i32, i32, i32 } %1008, 0, !dbg !36
  %1010 = extractvalue { i32, i32, i32, i32 } %1008, 1, !dbg !36
  %1011 = extractvalue { i32, i32, i32, i32 } %1008, 2, !dbg !36
  %1012 = extractvalue { i32, i32, i32, i32 } %1008, 3, !dbg !36
  %1013 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %448) #2, !dbg !36
  %1014 = extractvalue { i32, i32, i32, i32 } %1013, 0, !dbg !36
  %1015 = extractvalue { i32, i32, i32, i32 } %1013, 1, !dbg !36
  %1016 = extractvalue { i32, i32, i32, i32 } %1013, 2, !dbg !36
  %1017 = extractvalue { i32, i32, i32, i32 } %1013, 3, !dbg !36
  %1018 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %450) #2, !dbg !36
  %1019 = extractvalue { i32, i32, i32, i32 } %1018, 0, !dbg !36
  %1020 = extractvalue { i32, i32, i32, i32 } %1018, 1, !dbg !36
  %1021 = extractvalue { i32, i32, i32, i32 } %1018, 2, !dbg !36
  %1022 = extractvalue { i32, i32, i32, i32 } %1018, 3, !dbg !36
  %1023 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %452) #2, !dbg !36
  %1024 = extractvalue { i32, i32, i32, i32 } %1023, 0, !dbg !36
  %1025 = extractvalue { i32, i32, i32, i32 } %1023, 1, !dbg !36
  %1026 = extractvalue { i32, i32, i32, i32 } %1023, 2, !dbg !36
  %1027 = extractvalue { i32, i32, i32, i32 } %1023, 3, !dbg !36
  %1028 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %454) #2, !dbg !36
  %1029 = extractvalue { i32, i32, i32, i32 } %1028, 0, !dbg !36
  %1030 = extractvalue { i32, i32, i32, i32 } %1028, 1, !dbg !36
  %1031 = extractvalue { i32, i32, i32, i32 } %1028, 2, !dbg !36
  %1032 = extractvalue { i32, i32, i32, i32 } %1028, 3, !dbg !36
  %1033 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %456) #2, !dbg !36
  %1034 = extractvalue { i32, i32, i32, i32 } %1033, 0, !dbg !36
  %1035 = extractvalue { i32, i32, i32, i32 } %1033, 1, !dbg !36
  %1036 = extractvalue { i32, i32, i32, i32 } %1033, 2, !dbg !36
  %1037 = extractvalue { i32, i32, i32, i32 } %1033, 3, !dbg !36
  %1038 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %458) #2, !dbg !36
  %1039 = extractvalue { i32, i32, i32, i32 } %1038, 0, !dbg !36
  %1040 = extractvalue { i32, i32, i32, i32 } %1038, 1, !dbg !36
  %1041 = extractvalue { i32, i32, i32, i32 } %1038, 2, !dbg !36
  %1042 = extractvalue { i32, i32, i32, i32 } %1038, 3, !dbg !36
  %1043 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %391) #2, !dbg !45
  %1044 = extractvalue { i32, i32, i32, i32 } %1043, 0, !dbg !45
  %1045 = extractvalue { i32, i32, i32, i32 } %1043, 1, !dbg !45
  %1046 = extractvalue { i32, i32, i32, i32 } %1043, 2, !dbg !45
  %1047 = extractvalue { i32, i32, i32, i32 } %1043, 3, !dbg !45
  %1048 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %393) #2, !dbg !45
  %1049 = extractvalue { i32, i32, i32, i32 } %1048, 0, !dbg !45
  %1050 = extractvalue { i32, i32, i32, i32 } %1048, 1, !dbg !45
  %1051 = extractvalue { i32, i32, i32, i32 } %1048, 2, !dbg !45
  %1052 = extractvalue { i32, i32, i32, i32 } %1048, 3, !dbg !45
  %1053 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %395) #2, !dbg !45
  %1054 = extractvalue { i32, i32, i32, i32 } %1053, 0, !dbg !45
  %1055 = extractvalue { i32, i32, i32, i32 } %1053, 1, !dbg !45
  %1056 = extractvalue { i32, i32, i32, i32 } %1053, 2, !dbg !45
  %1057 = extractvalue { i32, i32, i32, i32 } %1053, 3, !dbg !45
  %1058 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %397) #2, !dbg !45
  %1059 = extractvalue { i32, i32, i32, i32 } %1058, 0, !dbg !45
  %1060 = extractvalue { i32, i32, i32, i32 } %1058, 1, !dbg !45
  %1061 = extractvalue { i32, i32, i32, i32 } %1058, 2, !dbg !45
  %1062 = extractvalue { i32, i32, i32, i32 } %1058, 3, !dbg !45
  %1063 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %399) #2, !dbg !45
  %1064 = extractvalue { i32, i32, i32, i32 } %1063, 0, !dbg !45
  %1065 = extractvalue { i32, i32, i32, i32 } %1063, 1, !dbg !45
  %1066 = extractvalue { i32, i32, i32, i32 } %1063, 2, !dbg !45
  %1067 = extractvalue { i32, i32, i32, i32 } %1063, 3, !dbg !45
  %1068 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %401) #2, !dbg !45
  %1069 = extractvalue { i32, i32, i32, i32 } %1068, 0, !dbg !45
  %1070 = extractvalue { i32, i32, i32, i32 } %1068, 1, !dbg !45
  %1071 = extractvalue { i32, i32, i32, i32 } %1068, 2, !dbg !45
  %1072 = extractvalue { i32, i32, i32, i32 } %1068, 3, !dbg !45
  %1073 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %403) #2, !dbg !45
  %1074 = extractvalue { i32, i32, i32, i32 } %1073, 0, !dbg !45
  %1075 = extractvalue { i32, i32, i32, i32 } %1073, 1, !dbg !45
  %1076 = extractvalue { i32, i32, i32, i32 } %1073, 2, !dbg !45
  %1077 = extractvalue { i32, i32, i32, i32 } %1073, 3, !dbg !45
  %1078 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %405) #2, !dbg !45
  %1079 = extractvalue { i32, i32, i32, i32 } %1078, 0, !dbg !45
  %1080 = extractvalue { i32, i32, i32, i32 } %1078, 1, !dbg !45
  %1081 = extractvalue { i32, i32, i32, i32 } %1078, 2, !dbg !45
  %1082 = extractvalue { i32, i32, i32, i32 } %1078, 3, !dbg !45
  %1083 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %964, float %965, float %966, float %967, i32 %1004, i32 %1005, i32 %1006, i32 %1007, i32 %1044, i32 %1045) #2, !dbg !47
  %1084 = extractvalue { float, float, float, float } %1083, 0, !dbg !47
  %1085 = extractvalue { float, float, float, float } %1083, 1, !dbg !47
  %1086 = extractvalue { float, float, float, float } %1083, 2, !dbg !47
  %1087 = extractvalue { float, float, float, float } %1083, 3, !dbg !47
  %1088 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %969, float %970, float %971, float %972, i32 %1004, i32 %1005, i32 %1006, i32 %1007, i32 %1054, i32 %1055) #2, !dbg !47
  %1089 = extractvalue { float, float, float, float } %1088, 0, !dbg !47
  %1090 = extractvalue { float, float, float, float } %1088, 1, !dbg !47
  %1091 = extractvalue { float, float, float, float } %1088, 2, !dbg !47
  %1092 = extractvalue { float, float, float, float } %1088, 3, !dbg !47
  %1093 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %974, float %975, float %976, float %977, i32 %1004, i32 %1005, i32 %1006, i32 %1007, i32 %1064, i32 %1065) #2, !dbg !47
  %1094 = extractvalue { float, float, float, float } %1093, 0, !dbg !47
  %1095 = extractvalue { float, float, float, float } %1093, 1, !dbg !47
  %1096 = extractvalue { float, float, float, float } %1093, 2, !dbg !47
  %1097 = extractvalue { float, float, float, float } %1093, 3, !dbg !47
  %1098 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %979, float %980, float %981, float %982, i32 %1004, i32 %1005, i32 %1006, i32 %1007, i32 %1074, i32 %1075) #2, !dbg !47
  %1099 = extractvalue { float, float, float, float } %1098, 0, !dbg !47
  %1100 = extractvalue { float, float, float, float } %1098, 1, !dbg !47
  %1101 = extractvalue { float, float, float, float } %1098, 2, !dbg !47
  %1102 = extractvalue { float, float, float, float } %1098, 3, !dbg !47
  %1103 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %984, float %985, float %986, float %987, i32 %1024, i32 %1025, i32 %1026, i32 %1027, i32 %1044, i32 %1045) #2, !dbg !47
  %1104 = extractvalue { float, float, float, float } %1103, 0, !dbg !47
  %1105 = extractvalue { float, float, float, float } %1103, 1, !dbg !47
  %1106 = extractvalue { float, float, float, float } %1103, 2, !dbg !47
  %1107 = extractvalue { float, float, float, float } %1103, 3, !dbg !47
  %1108 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %989, float %990, float %991, float %992, i32 %1024, i32 %1025, i32 %1026, i32 %1027, i32 %1054, i32 %1055) #2, !dbg !47
  %1109 = extractvalue { float, float, float, float } %1108, 0, !dbg !47
  %1110 = extractvalue { float, float, float, float } %1108, 1, !dbg !47
  %1111 = extractvalue { float, float, float, float } %1108, 2, !dbg !47
  %1112 = extractvalue { float, float, float, float } %1108, 3, !dbg !47
  %1113 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %994, float %995, float %996, float %997, i32 %1024, i32 %1025, i32 %1026, i32 %1027, i32 %1064, i32 %1065) #2, !dbg !47
  %1114 = extractvalue { float, float, float, float } %1113, 0, !dbg !47
  %1115 = extractvalue { float, float, float, float } %1113, 1, !dbg !47
  %1116 = extractvalue { float, float, float, float } %1113, 2, !dbg !47
  %1117 = extractvalue { float, float, float, float } %1113, 3, !dbg !47
  %1118 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %999, float %1000, float %1001, float %1002, i32 %1024, i32 %1025, i32 %1026, i32 %1027, i32 %1074, i32 %1075) #2, !dbg !47
  %1119 = extractvalue { float, float, float, float } %1118, 0, !dbg !47
  %1120 = extractvalue { float, float, float, float } %1118, 1, !dbg !47
  %1121 = extractvalue { float, float, float, float } %1118, 2, !dbg !47
  %1122 = extractvalue { float, float, float, float } %1118, 3, !dbg !47
  %1123 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1084, float %1085, float %1086, float %1087, i32 %1009, i32 %1010, i32 %1011, i32 %1012, i32 %1046, i32 %1047) #2, !dbg !47
  %1124 = extractvalue { float, float, float, float } %1123, 0, !dbg !47
  %1125 = extractvalue { float, float, float, float } %1123, 1, !dbg !47
  %1126 = extractvalue { float, float, float, float } %1123, 2, !dbg !47
  %1127 = extractvalue { float, float, float, float } %1123, 3, !dbg !47
  %1128 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1089, float %1090, float %1091, float %1092, i32 %1009, i32 %1010, i32 %1011, i32 %1012, i32 %1056, i32 %1057) #2, !dbg !47
  %1129 = extractvalue { float, float, float, float } %1128, 0, !dbg !47
  %1130 = extractvalue { float, float, float, float } %1128, 1, !dbg !47
  %1131 = extractvalue { float, float, float, float } %1128, 2, !dbg !47
  %1132 = extractvalue { float, float, float, float } %1128, 3, !dbg !47
  %1133 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1094, float %1095, float %1096, float %1097, i32 %1009, i32 %1010, i32 %1011, i32 %1012, i32 %1066, i32 %1067) #2, !dbg !47
  %1134 = extractvalue { float, float, float, float } %1133, 0, !dbg !47
  %1135 = extractvalue { float, float, float, float } %1133, 1, !dbg !47
  %1136 = extractvalue { float, float, float, float } %1133, 2, !dbg !47
  %1137 = extractvalue { float, float, float, float } %1133, 3, !dbg !47
  %1138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1099, float %1100, float %1101, float %1102, i32 %1009, i32 %1010, i32 %1011, i32 %1012, i32 %1076, i32 %1077) #2, !dbg !47
  %1139 = extractvalue { float, float, float, float } %1138, 0, !dbg !47
  %1140 = extractvalue { float, float, float, float } %1138, 1, !dbg !47
  %1141 = extractvalue { float, float, float, float } %1138, 2, !dbg !47
  %1142 = extractvalue { float, float, float, float } %1138, 3, !dbg !47
  %1143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1104, float %1105, float %1106, float %1107, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1046, i32 %1047) #2, !dbg !47
  %1144 = extractvalue { float, float, float, float } %1143, 0, !dbg !47
  %1145 = extractvalue { float, float, float, float } %1143, 1, !dbg !47
  %1146 = extractvalue { float, float, float, float } %1143, 2, !dbg !47
  %1147 = extractvalue { float, float, float, float } %1143, 3, !dbg !47
  %1148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1109, float %1110, float %1111, float %1112, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1056, i32 %1057) #2, !dbg !47
  %1149 = extractvalue { float, float, float, float } %1148, 0, !dbg !47
  %1150 = extractvalue { float, float, float, float } %1148, 1, !dbg !47
  %1151 = extractvalue { float, float, float, float } %1148, 2, !dbg !47
  %1152 = extractvalue { float, float, float, float } %1148, 3, !dbg !47
  %1153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1114, float %1115, float %1116, float %1117, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1066, i32 %1067) #2, !dbg !47
  %1154 = extractvalue { float, float, float, float } %1153, 0, !dbg !47
  %1155 = extractvalue { float, float, float, float } %1153, 1, !dbg !47
  %1156 = extractvalue { float, float, float, float } %1153, 2, !dbg !47
  %1157 = extractvalue { float, float, float, float } %1153, 3, !dbg !47
  %1158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1119, float %1120, float %1121, float %1122, i32 %1029, i32 %1030, i32 %1031, i32 %1032, i32 %1076, i32 %1077) #2, !dbg !47
  %1159 = extractvalue { float, float, float, float } %1158, 0, !dbg !47
  %1160 = extractvalue { float, float, float, float } %1158, 1, !dbg !47
  %1161 = extractvalue { float, float, float, float } %1158, 2, !dbg !47
  %1162 = extractvalue { float, float, float, float } %1158, 3, !dbg !47
  %1163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1124, float %1125, float %1126, float %1127, i32 %1014, i32 %1015, i32 %1016, i32 %1017, i32 %1049, i32 %1050) #2, !dbg !47
  %1164 = extractvalue { float, float, float, float } %1163, 0, !dbg !47
  %1165 = extractvalue { float, float, float, float } %1163, 1, !dbg !47
  %1166 = extractvalue { float, float, float, float } %1163, 2, !dbg !47
  %1167 = extractvalue { float, float, float, float } %1163, 3, !dbg !47
  %1168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1129, float %1130, float %1131, float %1132, i32 %1014, i32 %1015, i32 %1016, i32 %1017, i32 %1059, i32 %1060) #2, !dbg !47
  %1169 = extractvalue { float, float, float, float } %1168, 0, !dbg !47
  %1170 = extractvalue { float, float, float, float } %1168, 1, !dbg !47
  %1171 = extractvalue { float, float, float, float } %1168, 2, !dbg !47
  %1172 = extractvalue { float, float, float, float } %1168, 3, !dbg !47
  %1173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1134, float %1135, float %1136, float %1137, i32 %1014, i32 %1015, i32 %1016, i32 %1017, i32 %1069, i32 %1070) #2, !dbg !47
  %1174 = extractvalue { float, float, float, float } %1173, 0, !dbg !47
  %1175 = extractvalue { float, float, float, float } %1173, 1, !dbg !47
  %1176 = extractvalue { float, float, float, float } %1173, 2, !dbg !47
  %1177 = extractvalue { float, float, float, float } %1173, 3, !dbg !47
  %1178 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1139, float %1140, float %1141, float %1142, i32 %1014, i32 %1015, i32 %1016, i32 %1017, i32 %1079, i32 %1080) #2, !dbg !47
  %1179 = extractvalue { float, float, float, float } %1178, 0, !dbg !47
  %1180 = extractvalue { float, float, float, float } %1178, 1, !dbg !47
  %1181 = extractvalue { float, float, float, float } %1178, 2, !dbg !47
  %1182 = extractvalue { float, float, float, float } %1178, 3, !dbg !47
  %1183 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1144, float %1145, float %1146, float %1147, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1049, i32 %1050) #2, !dbg !47
  %1184 = extractvalue { float, float, float, float } %1183, 0, !dbg !47
  %1185 = extractvalue { float, float, float, float } %1183, 1, !dbg !47
  %1186 = extractvalue { float, float, float, float } %1183, 2, !dbg !47
  %1187 = extractvalue { float, float, float, float } %1183, 3, !dbg !47
  %1188 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1149, float %1150, float %1151, float %1152, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1059, i32 %1060) #2, !dbg !47
  %1189 = extractvalue { float, float, float, float } %1188, 0, !dbg !47
  %1190 = extractvalue { float, float, float, float } %1188, 1, !dbg !47
  %1191 = extractvalue { float, float, float, float } %1188, 2, !dbg !47
  %1192 = extractvalue { float, float, float, float } %1188, 3, !dbg !47
  %1193 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1154, float %1155, float %1156, float %1157, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1069, i32 %1070) #2, !dbg !47
  %1194 = extractvalue { float, float, float, float } %1193, 0, !dbg !47
  %1195 = extractvalue { float, float, float, float } %1193, 1, !dbg !47
  %1196 = extractvalue { float, float, float, float } %1193, 2, !dbg !47
  %1197 = extractvalue { float, float, float, float } %1193, 3, !dbg !47
  %1198 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1159, float %1160, float %1161, float %1162, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1079, i32 %1080) #2, !dbg !47
  %1199 = extractvalue { float, float, float, float } %1198, 0, !dbg !47
  %1200 = extractvalue { float, float, float, float } %1198, 1, !dbg !47
  %1201 = extractvalue { float, float, float, float } %1198, 2, !dbg !47
  %1202 = extractvalue { float, float, float, float } %1198, 3, !dbg !47
  %1203 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1164, float %1165, float %1166, float %1167, i32 %1019, i32 %1020, i32 %1021, i32 %1022, i32 %1051, i32 %1052) #2, !dbg !47
  %1204 = extractvalue { float, float, float, float } %1203, 0, !dbg !47
  %1205 = extractvalue { float, float, float, float } %1203, 1, !dbg !47
  %1206 = extractvalue { float, float, float, float } %1203, 2, !dbg !47
  %1207 = extractvalue { float, float, float, float } %1203, 3, !dbg !47
  %1208 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1169, float %1170, float %1171, float %1172, i32 %1019, i32 %1020, i32 %1021, i32 %1022, i32 %1061, i32 %1062) #2, !dbg !47
  %1209 = extractvalue { float, float, float, float } %1208, 0, !dbg !47
  %1210 = extractvalue { float, float, float, float } %1208, 1, !dbg !47
  %1211 = extractvalue { float, float, float, float } %1208, 2, !dbg !47
  %1212 = extractvalue { float, float, float, float } %1208, 3, !dbg !47
  %1213 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1174, float %1175, float %1176, float %1177, i32 %1019, i32 %1020, i32 %1021, i32 %1022, i32 %1071, i32 %1072) #2, !dbg !47
  %1214 = extractvalue { float, float, float, float } %1213, 0, !dbg !47
  %1215 = extractvalue { float, float, float, float } %1213, 1, !dbg !47
  %1216 = extractvalue { float, float, float, float } %1213, 2, !dbg !47
  %1217 = extractvalue { float, float, float, float } %1213, 3, !dbg !47
  %1218 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1179, float %1180, float %1181, float %1182, i32 %1019, i32 %1020, i32 %1021, i32 %1022, i32 %1081, i32 %1082) #2, !dbg !47
  %1219 = extractvalue { float, float, float, float } %1218, 0, !dbg !47
  %1220 = extractvalue { float, float, float, float } %1218, 1, !dbg !47
  %1221 = extractvalue { float, float, float, float } %1218, 2, !dbg !47
  %1222 = extractvalue { float, float, float, float } %1218, 3, !dbg !47
  %1223 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1184, float %1185, float %1186, float %1187, i32 %1039, i32 %1040, i32 %1041, i32 %1042, i32 %1051, i32 %1052) #2, !dbg !47
  %1224 = extractvalue { float, float, float, float } %1223, 0, !dbg !47
  %1225 = extractvalue { float, float, float, float } %1223, 1, !dbg !47
  %1226 = extractvalue { float, float, float, float } %1223, 2, !dbg !47
  %1227 = extractvalue { float, float, float, float } %1223, 3, !dbg !47
  %1228 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1189, float %1190, float %1191, float %1192, i32 %1039, i32 %1040, i32 %1041, i32 %1042, i32 %1061, i32 %1062) #2, !dbg !47
  %1229 = extractvalue { float, float, float, float } %1228, 0, !dbg !47
  %1230 = extractvalue { float, float, float, float } %1228, 1, !dbg !47
  %1231 = extractvalue { float, float, float, float } %1228, 2, !dbg !47
  %1232 = extractvalue { float, float, float, float } %1228, 3, !dbg !47
  %1233 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1194, float %1195, float %1196, float %1197, i32 %1039, i32 %1040, i32 %1041, i32 %1042, i32 %1071, i32 %1072) #2, !dbg !47
  %1234 = extractvalue { float, float, float, float } %1233, 0, !dbg !47
  %1235 = extractvalue { float, float, float, float } %1233, 1, !dbg !47
  %1236 = extractvalue { float, float, float, float } %1233, 2, !dbg !47
  %1237 = extractvalue { float, float, float, float } %1233, 3, !dbg !47
  %1238 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1199, float %1200, float %1201, float %1202, i32 %1039, i32 %1040, i32 %1041, i32 %1042, i32 %1081, i32 %1082) #2, !dbg !47
  %1239 = extractvalue { float, float, float, float } %1238, 0, !dbg !47
  %1240 = extractvalue { float, float, float, float } %1238, 1, !dbg !47
  %1241 = extractvalue { float, float, float, float } %1238, 2, !dbg !47
  %1242 = extractvalue { float, float, float, float } %1238, 3, !dbg !47
  %1243 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %460) #2, !dbg !48
  %1244 = extractvalue { i32, i32, i32, i32 } %1243, 0, !dbg !48
  %1245 = bitcast i32 %1244 to <2 x bfloat>, !dbg !48
  %1246 = extractvalue { i32, i32, i32, i32 } %1243, 1, !dbg !48
  %1247 = bitcast i32 %1246 to <2 x bfloat>, !dbg !48
  %1248 = extractvalue { i32, i32, i32, i32 } %1243, 2, !dbg !48
  %1249 = bitcast i32 %1248 to <2 x bfloat>, !dbg !48
  %1250 = extractvalue { i32, i32, i32, i32 } %1243, 3, !dbg !48
  %1251 = bitcast i32 %1250 to <2 x bfloat>, !dbg !48
  %1252 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %462) #2, !dbg !48
  %1253 = extractvalue { i32, i32, i32, i32 } %1252, 0, !dbg !48
  %1254 = bitcast i32 %1253 to <2 x bfloat>, !dbg !48
  %1255 = extractvalue { i32, i32, i32, i32 } %1252, 1, !dbg !48
  %1256 = bitcast i32 %1255 to <2 x bfloat>, !dbg !48
  %1257 = extractvalue { i32, i32, i32, i32 } %1252, 2, !dbg !48
  %1258 = bitcast i32 %1257 to <2 x bfloat>, !dbg !48
  %1259 = extractvalue { i32, i32, i32, i32 } %1252, 3, !dbg !48
  %1260 = bitcast i32 %1259 to <2 x bfloat>, !dbg !48
  %1261 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %464) #2, !dbg !48
  %1262 = extractvalue { i32, i32, i32, i32 } %1261, 0, !dbg !48
  %1263 = bitcast i32 %1262 to <2 x bfloat>, !dbg !48
  %1264 = extractvalue { i32, i32, i32, i32 } %1261, 1, !dbg !48
  %1265 = bitcast i32 %1264 to <2 x bfloat>, !dbg !48
  %1266 = extractvalue { i32, i32, i32, i32 } %1261, 2, !dbg !48
  %1267 = bitcast i32 %1266 to <2 x bfloat>, !dbg !48
  %1268 = extractvalue { i32, i32, i32, i32 } %1261, 3, !dbg !48
  %1269 = bitcast i32 %1268 to <2 x bfloat>, !dbg !48
  %1270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %466) #2, !dbg !48
  %1271 = extractvalue { i32, i32, i32, i32 } %1270, 0, !dbg !48
  %1272 = bitcast i32 %1271 to <2 x bfloat>, !dbg !48
  %1273 = extractvalue { i32, i32, i32, i32 } %1270, 1, !dbg !48
  %1274 = bitcast i32 %1273 to <2 x bfloat>, !dbg !48
  %1275 = extractvalue { i32, i32, i32, i32 } %1270, 2, !dbg !48
  %1276 = bitcast i32 %1275 to <2 x bfloat>, !dbg !48
  %1277 = extractvalue { i32, i32, i32, i32 } %1270, 3, !dbg !48
  %1278 = bitcast i32 %1277 to <2 x bfloat>, !dbg !48
  %1279 = fpext <2 x bfloat> %1245 to <2 x float>, !dbg !48
  %1280 = insertelement <2 x float> poison, float %1204, i64 0, !dbg !48
  %1281 = insertelement <2 x float> %1280, float %1205, i64 1, !dbg !48
  %1282 = fsub <2 x float> %1279, %1281, !dbg !48
  %1283 = fptrunc <2 x float> %1282 to <2 x bfloat>, !dbg !49
  %1284 = fpext <2 x bfloat> %1247 to <2 x float>, !dbg !48
  %1285 = insertelement <2 x float> poison, float %1206, i64 0, !dbg !48
  %1286 = insertelement <2 x float> %1285, float %1207, i64 1, !dbg !48
  %1287 = fsub <2 x float> %1284, %1286, !dbg !48
  %1288 = fptrunc <2 x float> %1287 to <2 x bfloat>, !dbg !49
  %1289 = fpext <2 x bfloat> %1249 to <2 x float>, !dbg !48
  %1290 = insertelement <2 x float> poison, float %1209, i64 0, !dbg !48
  %1291 = insertelement <2 x float> %1290, float %1210, i64 1, !dbg !48
  %1292 = fsub <2 x float> %1289, %1291, !dbg !48
  %1293 = fptrunc <2 x float> %1292 to <2 x bfloat>, !dbg !49
  %1294 = fpext <2 x bfloat> %1251 to <2 x float>, !dbg !48
  %1295 = insertelement <2 x float> poison, float %1211, i64 0, !dbg !48
  %1296 = insertelement <2 x float> %1295, float %1212, i64 1, !dbg !48
  %1297 = fsub <2 x float> %1294, %1296, !dbg !48
  %1298 = fptrunc <2 x float> %1297 to <2 x bfloat>, !dbg !49
  %1299 = fpext <2 x bfloat> %1254 to <2 x float>, !dbg !48
  %1300 = insertelement <2 x float> poison, float %1214, i64 0, !dbg !48
  %1301 = insertelement <2 x float> %1300, float %1215, i64 1, !dbg !48
  %1302 = fsub <2 x float> %1299, %1301, !dbg !48
  %1303 = fptrunc <2 x float> %1302 to <2 x bfloat>, !dbg !49
  %1304 = fpext <2 x bfloat> %1256 to <2 x float>, !dbg !48
  %1305 = insertelement <2 x float> poison, float %1216, i64 0, !dbg !48
  %1306 = insertelement <2 x float> %1305, float %1217, i64 1, !dbg !48
  %1307 = fsub <2 x float> %1304, %1306, !dbg !48
  %1308 = fptrunc <2 x float> %1307 to <2 x bfloat>, !dbg !49
  %1309 = fpext <2 x bfloat> %1258 to <2 x float>, !dbg !48
  %1310 = insertelement <2 x float> poison, float %1219, i64 0, !dbg !48
  %1311 = insertelement <2 x float> %1310, float %1220, i64 1, !dbg !48
  %1312 = fsub <2 x float> %1309, %1311, !dbg !48
  %1313 = fptrunc <2 x float> %1312 to <2 x bfloat>, !dbg !49
  %1314 = fpext <2 x bfloat> %1260 to <2 x float>, !dbg !48
  %1315 = insertelement <2 x float> poison, float %1221, i64 0, !dbg !48
  %1316 = insertelement <2 x float> %1315, float %1222, i64 1, !dbg !48
  %1317 = fsub <2 x float> %1314, %1316, !dbg !48
  %1318 = fptrunc <2 x float> %1317 to <2 x bfloat>, !dbg !49
  %1319 = fpext <2 x bfloat> %1263 to <2 x float>, !dbg !48
  %1320 = insertelement <2 x float> poison, float %1224, i64 0, !dbg !48
  %1321 = insertelement <2 x float> %1320, float %1225, i64 1, !dbg !48
  %1322 = fsub <2 x float> %1319, %1321, !dbg !48
  %1323 = fptrunc <2 x float> %1322 to <2 x bfloat>, !dbg !49
  %1324 = fpext <2 x bfloat> %1265 to <2 x float>, !dbg !48
  %1325 = insertelement <2 x float> poison, float %1226, i64 0, !dbg !48
  %1326 = insertelement <2 x float> %1325, float %1227, i64 1, !dbg !48
  %1327 = fsub <2 x float> %1324, %1326, !dbg !48
  %1328 = fptrunc <2 x float> %1327 to <2 x bfloat>, !dbg !49
  %1329 = fpext <2 x bfloat> %1267 to <2 x float>, !dbg !48
  %1330 = insertelement <2 x float> poison, float %1229, i64 0, !dbg !48
  %1331 = insertelement <2 x float> %1330, float %1230, i64 1, !dbg !48
  %1332 = fsub <2 x float> %1329, %1331, !dbg !48
  %1333 = fptrunc <2 x float> %1332 to <2 x bfloat>, !dbg !49
  %1334 = fpext <2 x bfloat> %1269 to <2 x float>, !dbg !48
  %1335 = insertelement <2 x float> poison, float %1231, i64 0, !dbg !48
  %1336 = insertelement <2 x float> %1335, float %1232, i64 1, !dbg !48
  %1337 = fsub <2 x float> %1334, %1336, !dbg !48
  %1338 = fptrunc <2 x float> %1337 to <2 x bfloat>, !dbg !49
  %1339 = fpext <2 x bfloat> %1272 to <2 x float>, !dbg !48
  %1340 = insertelement <2 x float> poison, float %1234, i64 0, !dbg !48
  %1341 = insertelement <2 x float> %1340, float %1235, i64 1, !dbg !48
  %1342 = fsub <2 x float> %1339, %1341, !dbg !48
  %1343 = fptrunc <2 x float> %1342 to <2 x bfloat>, !dbg !49
  %1344 = fpext <2 x bfloat> %1274 to <2 x float>, !dbg !48
  %1345 = insertelement <2 x float> poison, float %1236, i64 0, !dbg !48
  %1346 = insertelement <2 x float> %1345, float %1237, i64 1, !dbg !48
  %1347 = fsub <2 x float> %1344, %1346, !dbg !48
  %1348 = fptrunc <2 x float> %1347 to <2 x bfloat>, !dbg !49
  %1349 = fpext <2 x bfloat> %1276 to <2 x float>, !dbg !48
  %1350 = insertelement <2 x float> poison, float %1239, i64 0, !dbg !48
  %1351 = insertelement <2 x float> %1350, float %1240, i64 1, !dbg !48
  %1352 = fsub <2 x float> %1349, %1351, !dbg !48
  %1353 = fptrunc <2 x float> %1352 to <2 x bfloat>, !dbg !49
  %1354 = fpext <2 x bfloat> %1278 to <2 x float>, !dbg !48
  %1355 = insertelement <2 x float> poison, float %1241, i64 0, !dbg !48
  %1356 = insertelement <2 x float> %1355, float %1242, i64 1, !dbg !48
  %1357 = fsub <2 x float> %1354, %1356, !dbg !48
  %1358 = fptrunc <2 x float> %1357 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1283, ptr addrspace(3) %406, align 4, !dbg !49
  store <2 x bfloat> %1288, ptr addrspace(3) %407, align 4, !dbg !49
  store <2 x bfloat> %1293, ptr addrspace(3) %408, align 4, !dbg !49
  store <2 x bfloat> %1298, ptr addrspace(3) %409, align 4, !dbg !49
  store <2 x bfloat> %1303, ptr addrspace(3) %410, align 4, !dbg !49
  store <2 x bfloat> %1308, ptr addrspace(3) %411, align 4, !dbg !49
  store <2 x bfloat> %1313, ptr addrspace(3) %412, align 4, !dbg !49
  store <2 x bfloat> %1318, ptr addrspace(3) %413, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1359 = load <4 x i32>, ptr addrspace(3) %414, align 16, !dbg !49
  %1360 = load <4 x i32>, ptr addrspace(3) %415, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1323, ptr addrspace(3) %406, align 4, !dbg !49
  store <2 x bfloat> %1328, ptr addrspace(3) %407, align 4, !dbg !49
  store <2 x bfloat> %1333, ptr addrspace(3) %408, align 4, !dbg !49
  store <2 x bfloat> %1338, ptr addrspace(3) %409, align 4, !dbg !49
  store <2 x bfloat> %1343, ptr addrspace(3) %410, align 4, !dbg !49
  store <2 x bfloat> %1348, ptr addrspace(3) %411, align 4, !dbg !49
  store <2 x bfloat> %1353, ptr addrspace(3) %412, align 4, !dbg !49
  store <2 x bfloat> %1358, ptr addrspace(3) %413, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1361 = load <4 x i32>, ptr addrspace(3) %414, align 16, !dbg !49
  %1362 = load <4 x i32>, ptr addrspace(3) %415, align 16, !dbg !49
  %1363 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn69556, !dbg !50
  %1364 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn53557, !dbg !50
  %1365 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn37558, !dbg !50
  %1366 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn21559, !dbg !50
  %.extract522 = extractelement <4 x i32> %1359, i64 0, !dbg !50
  %.extract524 = extractelement <4 x i32> %1359, i64 1, !dbg !50
  %.extract526 = extractelement <4 x i32> %1359, i64 2, !dbg !50
  %.extract528 = extractelement <4 x i32> %1359, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract522, i32 %.extract524, i32 %.extract526, i32 %.extract528, ptr addrspace(1) %1363, i1 %.pn147560) #2, !dbg !50
  %.extract530 = extractelement <4 x i32> %1360, i64 0, !dbg !50
  %.extract532 = extractelement <4 x i32> %1360, i64 1, !dbg !50
  %.extract534 = extractelement <4 x i32> %1360, i64 2, !dbg !50
  %.extract536 = extractelement <4 x i32> %1360, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract530, i32 %.extract532, i32 %.extract534, i32 %.extract536, ptr addrspace(1) %1364, i1 %.pn131561) #2, !dbg !50
  %.extract538 = extractelement <4 x i32> %1361, i64 0, !dbg !50
  %.extract540 = extractelement <4 x i32> %1361, i64 1, !dbg !50
  %.extract542 = extractelement <4 x i32> %1361, i64 2, !dbg !50
  %.extract544 = extractelement <4 x i32> %1361, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract538, i32 %.extract540, i32 %.extract542, i32 %.extract544, ptr addrspace(1) %1365, i1 %.pn115562) #2, !dbg !50
  %.extract546 = extractelement <4 x i32> %1362, i64 0, !dbg !50
  %.extract548 = extractelement <4 x i32> %1362, i64 1, !dbg !50
  %.extract550 = extractelement <4 x i32> %1362, i64 2, !dbg !50
  %.extract552 = extractelement <4 x i32> %1362, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract546, i32 %.extract548, i32 %.extract550, i32 %.extract552, ptr addrspace(1) %1366, i1 %.pn99563) #2, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !51
  %1367 = shl i64 %indvars.iv.next, 6, !dbg !52
  %1368 = trunc nuw nsw i64 %1367 to i32, !dbg !53
  %1369 = tail call i32 @llvm.smin.i32(i32 %1368, i32 %7), !dbg !53
  %1370 = or disjoint i32 %509, %57, !dbg !54
  %1371 = or disjoint i32 %1370, 8, !dbg !54
  %1372 = or disjoint i32 %1370, 32, !dbg !54
  %1373 = or disjoint i32 %1370, 40, !dbg !54
  %1374 = icmp slt i32 %1370, %7, !dbg !55
  %1375 = icmp slt i32 %1371, %7, !dbg !55
  %1376 = icmp slt i32 %1372, %7, !dbg !55
  %1377 = icmp slt i32 %1373, %7, !dbg !55
  %1378 = shl i32 %1369, 5, !dbg !56
  %1379 = add i32 %1378, -32, !dbg !56
  %1380 = sext i32 %1379 to i64, !dbg !57
  %gep = getelementptr float, ptr addrspace(1) %83, i64 %1380, !dbg !58
  %1381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !59
  %1382 = bitcast i32 %1381 to float, !dbg !59
  %1383 = load float, ptr addrspace(3) %467, align 4, !dbg !38
  %1384 = load float, ptr addrspace(3) %472, align 4, !dbg !38
  %1385 = load float, ptr addrspace(3) %474, align 4, !dbg !38
  %1386 = load float, ptr addrspace(3) %475, align 4, !dbg !38
  %1387 = fsub float %1382, %1383, !dbg !60
  %1388 = fsub float %1382, %1384, !dbg !60
  %1389 = fsub float %1382, %1385, !dbg !60
  %1390 = fsub float %1382, %1386, !dbg !60
  %1391 = fmul float %1387, 0x3FF7154760000000, !dbg !61
  %1392 = tail call float @llvm.nvvm.ex2.approx.f(float %1391), !dbg !61
  %1393 = fmul float %1388, 0x3FF7154760000000, !dbg !61
  %1394 = tail call float @llvm.nvvm.ex2.approx.f(float %1393), !dbg !61
  %1395 = fmul float %1389, 0x3FF7154760000000, !dbg !61
  %1396 = tail call float @llvm.nvvm.ex2.approx.f(float %1395), !dbg !61
  %1397 = fmul float %1390, 0x3FF7154760000000, !dbg !61
  %1398 = tail call float @llvm.nvvm.ex2.approx.f(float %1397), !dbg !61
  %1399 = select i1 %1374, float %1392, float 0.000000e+00, !dbg !62
  %1400 = select i1 %1375, float %1394, float 0.000000e+00, !dbg !62
  %1401 = select i1 %1376, float %1396, float 0.000000e+00, !dbg !62
  %1402 = select i1 %1377, float %1398, float 0.000000e+00, !dbg !62
  %1403 = extractelement <2 x float> %1282, i64 0, !dbg !63
  %1404 = fmul float %1403, %1399, !dbg !63
  %1405 = extractelement <2 x float> %1282, i64 1, !dbg !63
  %1406 = fmul float %1405, %1399, !dbg !63
  %1407 = extractelement <2 x float> %1287, i64 0, !dbg !63
  %1408 = fmul float %1407, %1400, !dbg !63
  %1409 = extractelement <2 x float> %1287, i64 1, !dbg !63
  %1410 = fmul float %1409, %1400, !dbg !63
  %1411 = extractelement <2 x float> %1292, i64 0, !dbg !63
  %1412 = fmul float %1411, %1399, !dbg !63
  %1413 = extractelement <2 x float> %1292, i64 1, !dbg !63
  %1414 = fmul float %1413, %1399, !dbg !63
  %1415 = extractelement <2 x float> %1297, i64 0, !dbg !63
  %1416 = fmul float %1415, %1400, !dbg !63
  %1417 = extractelement <2 x float> %1297, i64 1, !dbg !63
  %1418 = fmul float %1417, %1400, !dbg !63
  %1419 = extractelement <2 x float> %1302, i64 0, !dbg !63
  %1420 = fmul float %1419, %1399, !dbg !63
  %1421 = extractelement <2 x float> %1302, i64 1, !dbg !63
  %1422 = fmul float %1421, %1399, !dbg !63
  %1423 = extractelement <2 x float> %1307, i64 0, !dbg !63
  %1424 = fmul float %1423, %1400, !dbg !63
  %1425 = extractelement <2 x float> %1307, i64 1, !dbg !63
  %1426 = fmul float %1425, %1400, !dbg !63
  %1427 = extractelement <2 x float> %1312, i64 0, !dbg !63
  %1428 = fmul float %1427, %1399, !dbg !63
  %1429 = extractelement <2 x float> %1312, i64 1, !dbg !63
  %1430 = fmul float %1429, %1399, !dbg !63
  %1431 = extractelement <2 x float> %1317, i64 0, !dbg !63
  %1432 = fmul float %1431, %1400, !dbg !63
  %1433 = extractelement <2 x float> %1317, i64 1, !dbg !63
  %1434 = fmul float %1433, %1400, !dbg !63
  %1435 = extractelement <2 x float> %1322, i64 0, !dbg !63
  %1436 = fmul float %1435, %1401, !dbg !63
  %1437 = extractelement <2 x float> %1322, i64 1, !dbg !63
  %1438 = fmul float %1437, %1401, !dbg !63
  %1439 = extractelement <2 x float> %1327, i64 0, !dbg !63
  %1440 = fmul float %1439, %1402, !dbg !63
  %1441 = extractelement <2 x float> %1327, i64 1, !dbg !63
  %1442 = fmul float %1441, %1402, !dbg !63
  %1443 = extractelement <2 x float> %1332, i64 0, !dbg !63
  %1444 = fmul float %1443, %1401, !dbg !63
  %1445 = extractelement <2 x float> %1332, i64 1, !dbg !63
  %1446 = fmul float %1445, %1401, !dbg !63
  %1447 = extractelement <2 x float> %1337, i64 0, !dbg !63
  %1448 = fmul float %1447, %1402, !dbg !63
  %1449 = extractelement <2 x float> %1337, i64 1, !dbg !63
  %1450 = fmul float %1449, %1402, !dbg !63
  %1451 = extractelement <2 x float> %1342, i64 0, !dbg !63
  %1452 = fmul float %1451, %1401, !dbg !63
  %1453 = extractelement <2 x float> %1342, i64 1, !dbg !63
  %1454 = fmul float %1453, %1401, !dbg !63
  %1455 = extractelement <2 x float> %1347, i64 0, !dbg !63
  %1456 = fmul float %1455, %1402, !dbg !63
  %1457 = extractelement <2 x float> %1347, i64 1, !dbg !63
  %1458 = fmul float %1457, %1402, !dbg !63
  %1459 = extractelement <2 x float> %1352, i64 0, !dbg !63
  %1460 = fmul float %1459, %1401, !dbg !63
  %1461 = extractelement <2 x float> %1352, i64 1, !dbg !63
  %1462 = fmul float %1461, %1401, !dbg !63
  %1463 = extractelement <2 x float> %1357, i64 0, !dbg !63
  %1464 = fmul float %1463, %1402, !dbg !63
  %1465 = extractelement <2 x float> %1357, i64 1, !dbg !63
  %1466 = fmul float %1465, %1402, !dbg !63
  %1467 = fmul float %1382, 0x3FF7154760000000, !dbg !64
  %1468 = tail call float @llvm.nvvm.ex2.approx.f(float %1467), !dbg !64
  %1469 = fmul float %542, %1468, !dbg !65
  %1470 = fmul float %543, %1468, !dbg !65
  %1471 = fmul float %544, %1468, !dbg !65
  %1472 = fmul float %545, %1468, !dbg !65
  %1473 = fmul float %546, %1468, !dbg !65
  %1474 = fmul float %547, %1468, !dbg !65
  %1475 = fmul float %548, %1468, !dbg !65
  %1476 = fmul float %549, %1468, !dbg !65
  %1477 = fmul float %550, %1468, !dbg !65
  %1478 = fmul float %551, %1468, !dbg !65
  %1479 = fmul float %552, %1468, !dbg !65
  %1480 = fmul float %553, %1468, !dbg !65
  %1481 = fmul float %554, %1468, !dbg !65
  %1482 = fmul float %555, %1468, !dbg !65
  %1483 = fmul float %556, %1468, !dbg !65
  %1484 = fmul float %557, %1468, !dbg !65
  %1485 = fmul float %558, %1468, !dbg !65
  %1486 = fmul float %559, %1468, !dbg !65
  %1487 = fmul float %560, %1468, !dbg !65
  %1488 = fmul float %561, %1468, !dbg !65
  %1489 = fmul float %562, %1468, !dbg !65
  %1490 = fmul float %563, %1468, !dbg !65
  %1491 = fmul float %564, %1468, !dbg !65
  %1492 = fmul float %565, %1468, !dbg !65
  %1493 = fmul float %566, %1468, !dbg !65
  %1494 = fmul float %567, %1468, !dbg !65
  %1495 = fmul float %568, %1468, !dbg !65
  %1496 = fmul float %569, %1468, !dbg !65
  %1497 = fmul float %570, %1468, !dbg !65
  %1498 = fmul float %571, %1468, !dbg !65
  %1499 = fmul float %572, %1468, !dbg !65
  %1500 = fmul float %573, %1468, !dbg !65
  %1501 = fmul float %510, %1468, !dbg !66
  %1502 = fmul float %511, %1468, !dbg !66
  %1503 = fmul float %512, %1468, !dbg !66
  %1504 = fmul float %513, %1468, !dbg !66
  %1505 = fmul float %514, %1468, !dbg !66
  %1506 = fmul float %515, %1468, !dbg !66
  %1507 = fmul float %516, %1468, !dbg !66
  %1508 = fmul float %517, %1468, !dbg !66
  %1509 = fmul float %518, %1468, !dbg !66
  %1510 = fmul float %519, %1468, !dbg !66
  %1511 = fmul float %520, %1468, !dbg !66
  %1512 = fmul float %521, %1468, !dbg !66
  %1513 = fmul float %522, %1468, !dbg !66
  %1514 = fmul float %523, %1468, !dbg !66
  %1515 = fmul float %524, %1468, !dbg !66
  %1516 = fmul float %525, %1468, !dbg !66
  %1517 = fmul float %526, %1468, !dbg !66
  %1518 = fmul float %527, %1468, !dbg !66
  %1519 = fmul float %528, %1468, !dbg !66
  %1520 = fmul float %529, %1468, !dbg !66
  %1521 = fmul float %530, %1468, !dbg !66
  %1522 = fmul float %531, %1468, !dbg !66
  %1523 = fmul float %532, %1468, !dbg !66
  %1524 = fmul float %533, %1468, !dbg !66
  %1525 = fmul float %534, %1468, !dbg !66
  %1526 = fmul float %535, %1468, !dbg !66
  %1527 = fmul float %536, %1468, !dbg !66
  %1528 = fmul float %537, %1468, !dbg !66
  %1529 = fmul float %538, %1468, !dbg !66
  %1530 = fmul float %539, %1468, !dbg !66
  %1531 = fmul float %540, %1468, !dbg !66
  %1532 = fmul float %541, %1468, !dbg !66
  %1533 = fptrunc float %1404 to bfloat, !dbg !67
  %1534 = fptrunc float %1406 to bfloat, !dbg !67
  %1535 = fptrunc float %1408 to bfloat, !dbg !67
  %1536 = fptrunc float %1410 to bfloat, !dbg !67
  %1537 = fptrunc float %1412 to bfloat, !dbg !67
  %1538 = fptrunc float %1414 to bfloat, !dbg !67
  %1539 = fptrunc float %1416 to bfloat, !dbg !67
  %1540 = fptrunc float %1418 to bfloat, !dbg !67
  %1541 = fptrunc float %1420 to bfloat, !dbg !67
  %1542 = fptrunc float %1422 to bfloat, !dbg !67
  %1543 = fptrunc float %1424 to bfloat, !dbg !67
  %1544 = fptrunc float %1426 to bfloat, !dbg !67
  %1545 = fptrunc float %1428 to bfloat, !dbg !67
  %1546 = fptrunc float %1430 to bfloat, !dbg !67
  %1547 = fptrunc float %1432 to bfloat, !dbg !67
  %1548 = fptrunc float %1434 to bfloat, !dbg !67
  %1549 = fptrunc float %1436 to bfloat, !dbg !67
  %1550 = fptrunc float %1438 to bfloat, !dbg !67
  %1551 = fptrunc float %1440 to bfloat, !dbg !67
  %1552 = fptrunc float %1442 to bfloat, !dbg !67
  %1553 = fptrunc float %1444 to bfloat, !dbg !67
  %1554 = fptrunc float %1446 to bfloat, !dbg !67
  %1555 = fptrunc float %1448 to bfloat, !dbg !67
  %1556 = fptrunc float %1450 to bfloat, !dbg !67
  %1557 = fptrunc float %1452 to bfloat, !dbg !67
  %1558 = fptrunc float %1454 to bfloat, !dbg !67
  %1559 = fptrunc float %1456 to bfloat, !dbg !67
  %1560 = fptrunc float %1458 to bfloat, !dbg !67
  %1561 = fptrunc float %1460 to bfloat, !dbg !67
  %1562 = fptrunc float %1462 to bfloat, !dbg !67
  %1563 = fptrunc float %1464 to bfloat, !dbg !67
  %1564 = fptrunc float %1466 to bfloat, !dbg !67
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !67
  %1565 = insertelement <2 x bfloat> poison, bfloat %1533, i64 0, !dbg !67
  %1566 = insertelement <2 x bfloat> %1565, bfloat %1534, i64 1, !dbg !67
  %1567 = bitcast <2 x bfloat> %1566 to i32, !dbg !67
  %1568 = insertelement <2 x bfloat> poison, bfloat %1535, i64 0, !dbg !67
  %1569 = insertelement <2 x bfloat> %1568, bfloat %1536, i64 1, !dbg !67
  %1570 = bitcast <2 x bfloat> %1569 to i32, !dbg !67
  %1571 = insertelement <2 x bfloat> poison, bfloat %1537, i64 0, !dbg !67
  %1572 = insertelement <2 x bfloat> %1571, bfloat %1538, i64 1, !dbg !67
  %1573 = bitcast <2 x bfloat> %1572 to i32, !dbg !67
  %1574 = insertelement <2 x bfloat> poison, bfloat %1539, i64 0, !dbg !67
  %1575 = insertelement <2 x bfloat> %1574, bfloat %1540, i64 1, !dbg !67
  %1576 = bitcast <2 x bfloat> %1575 to i32, !dbg !67
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %268, i32 %1567, i32 %1570, i32 %1573, i32 %1576) #2, !dbg !67
  %1577 = insertelement <2 x bfloat> poison, bfloat %1541, i64 0, !dbg !67
  %1578 = insertelement <2 x bfloat> %1577, bfloat %1542, i64 1, !dbg !67
  %1579 = bitcast <2 x bfloat> %1578 to i32, !dbg !67
  %1580 = insertelement <2 x bfloat> poison, bfloat %1543, i64 0, !dbg !67
  %1581 = insertelement <2 x bfloat> %1580, bfloat %1544, i64 1, !dbg !67
  %1582 = bitcast <2 x bfloat> %1581 to i32, !dbg !67
  %1583 = insertelement <2 x bfloat> poison, bfloat %1545, i64 0, !dbg !67
  %1584 = insertelement <2 x bfloat> %1583, bfloat %1546, i64 1, !dbg !67
  %1585 = bitcast <2 x bfloat> %1584 to i32, !dbg !67
  %1586 = insertelement <2 x bfloat> poison, bfloat %1547, i64 0, !dbg !67
  %1587 = insertelement <2 x bfloat> %1586, bfloat %1548, i64 1, !dbg !67
  %1588 = bitcast <2 x bfloat> %1587 to i32, !dbg !67
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %271, i32 %1579, i32 %1582, i32 %1585, i32 %1588) #2, !dbg !67
  %1589 = insertelement <2 x bfloat> poison, bfloat %1549, i64 0, !dbg !67
  %1590 = insertelement <2 x bfloat> %1589, bfloat %1550, i64 1, !dbg !67
  %1591 = bitcast <2 x bfloat> %1590 to i32, !dbg !67
  %1592 = insertelement <2 x bfloat> poison, bfloat %1551, i64 0, !dbg !67
  %1593 = insertelement <2 x bfloat> %1592, bfloat %1552, i64 1, !dbg !67
  %1594 = bitcast <2 x bfloat> %1593 to i32, !dbg !67
  %1595 = insertelement <2 x bfloat> poison, bfloat %1553, i64 0, !dbg !67
  %1596 = insertelement <2 x bfloat> %1595, bfloat %1554, i64 1, !dbg !67
  %1597 = bitcast <2 x bfloat> %1596 to i32, !dbg !67
  %1598 = insertelement <2 x bfloat> poison, bfloat %1555, i64 0, !dbg !67
  %1599 = insertelement <2 x bfloat> %1598, bfloat %1556, i64 1, !dbg !67
  %1600 = bitcast <2 x bfloat> %1599 to i32, !dbg !67
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %274, i32 %1591, i32 %1594, i32 %1597, i32 %1600) #2, !dbg !67
  %1601 = insertelement <2 x bfloat> poison, bfloat %1557, i64 0, !dbg !67
  %1602 = insertelement <2 x bfloat> %1601, bfloat %1558, i64 1, !dbg !67
  %1603 = bitcast <2 x bfloat> %1602 to i32, !dbg !67
  %1604 = insertelement <2 x bfloat> poison, bfloat %1559, i64 0, !dbg !67
  %1605 = insertelement <2 x bfloat> %1604, bfloat %1560, i64 1, !dbg !67
  %1606 = bitcast <2 x bfloat> %1605 to i32, !dbg !67
  %1607 = insertelement <2 x bfloat> poison, bfloat %1561, i64 0, !dbg !67
  %1608 = insertelement <2 x bfloat> %1607, bfloat %1562, i64 1, !dbg !67
  %1609 = bitcast <2 x bfloat> %1608 to i32, !dbg !67
  %1610 = insertelement <2 x bfloat> poison, bfloat %1563, i64 0, !dbg !67
  %1611 = insertelement <2 x bfloat> %1610, bfloat %1564, i64 1, !dbg !67
  %1612 = bitcast <2 x bfloat> %1611 to i32, !dbg !67
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %277, i32 %1603, i32 %1606, i32 %1609, i32 %1612) #2, !dbg !67
  %1613 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %477) #2, !dbg !39
  %1614 = extractvalue { i32, i32, i32, i32 } %1613, 0, !dbg !39
  %1615 = extractvalue { i32, i32, i32, i32 } %1613, 1, !dbg !39
  %1616 = extractvalue { i32, i32, i32, i32 } %1613, 2, !dbg !39
  %1617 = extractvalue { i32, i32, i32, i32 } %1613, 3, !dbg !39
  %1618 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %479) #2, !dbg !39
  %1619 = extractvalue { i32, i32, i32, i32 } %1618, 0, !dbg !39
  %1620 = extractvalue { i32, i32, i32, i32 } %1618, 1, !dbg !39
  %1621 = extractvalue { i32, i32, i32, i32 } %1618, 2, !dbg !39
  %1622 = extractvalue { i32, i32, i32, i32 } %1618, 3, !dbg !39
  %1623 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %481) #2, !dbg !39
  %1624 = extractvalue { i32, i32, i32, i32 } %1623, 0, !dbg !39
  %1625 = extractvalue { i32, i32, i32, i32 } %1623, 1, !dbg !39
  %1626 = extractvalue { i32, i32, i32, i32 } %1623, 2, !dbg !39
  %1627 = extractvalue { i32, i32, i32, i32 } %1623, 3, !dbg !39
  %1628 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %483) #2, !dbg !39
  %1629 = extractvalue { i32, i32, i32, i32 } %1628, 0, !dbg !39
  %1630 = extractvalue { i32, i32, i32, i32 } %1628, 1, !dbg !39
  %1631 = extractvalue { i32, i32, i32, i32 } %1628, 2, !dbg !39
  %1632 = extractvalue { i32, i32, i32, i32 } %1628, 3, !dbg !39
  %1633 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %485) #2, !dbg !39
  %1634 = extractvalue { i32, i32, i32, i32 } %1633, 0, !dbg !39
  %1635 = extractvalue { i32, i32, i32, i32 } %1633, 1, !dbg !39
  %1636 = extractvalue { i32, i32, i32, i32 } %1633, 2, !dbg !39
  %1637 = extractvalue { i32, i32, i32, i32 } %1633, 3, !dbg !39
  %1638 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %487) #2, !dbg !39
  %1639 = extractvalue { i32, i32, i32, i32 } %1638, 0, !dbg !39
  %1640 = extractvalue { i32, i32, i32, i32 } %1638, 1, !dbg !39
  %1641 = extractvalue { i32, i32, i32, i32 } %1638, 2, !dbg !39
  %1642 = extractvalue { i32, i32, i32, i32 } %1638, 3, !dbg !39
  %1643 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %489) #2, !dbg !39
  %1644 = extractvalue { i32, i32, i32, i32 } %1643, 0, !dbg !39
  %1645 = extractvalue { i32, i32, i32, i32 } %1643, 1, !dbg !39
  %1646 = extractvalue { i32, i32, i32, i32 } %1643, 2, !dbg !39
  %1647 = extractvalue { i32, i32, i32, i32 } %1643, 3, !dbg !39
  %1648 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %491) #2, !dbg !39
  %1649 = extractvalue { i32, i32, i32, i32 } %1648, 0, !dbg !39
  %1650 = extractvalue { i32, i32, i32, i32 } %1648, 1, !dbg !39
  %1651 = extractvalue { i32, i32, i32, i32 } %1648, 2, !dbg !39
  %1652 = extractvalue { i32, i32, i32, i32 } %1648, 3, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !67
  %1653 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #2, !dbg !67
  %1654 = extractvalue { i32, i32, i32, i32 } %1653, 0, !dbg !67
  %1655 = extractvalue { i32, i32, i32, i32 } %1653, 1, !dbg !67
  %1656 = extractvalue { i32, i32, i32, i32 } %1653, 2, !dbg !67
  %1657 = extractvalue { i32, i32, i32, i32 } %1653, 3, !dbg !67
  %1658 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #2, !dbg !67
  %1659 = extractvalue { i32, i32, i32, i32 } %1658, 0, !dbg !67
  %1660 = extractvalue { i32, i32, i32, i32 } %1658, 1, !dbg !67
  %1661 = extractvalue { i32, i32, i32, i32 } %1658, 2, !dbg !67
  %1662 = extractvalue { i32, i32, i32, i32 } %1658, 3, !dbg !67
  %1663 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #2, !dbg !67
  %1664 = extractvalue { i32, i32, i32, i32 } %1663, 0, !dbg !67
  %1665 = extractvalue { i32, i32, i32, i32 } %1663, 1, !dbg !67
  %1666 = extractvalue { i32, i32, i32, i32 } %1663, 2, !dbg !67
  %1667 = extractvalue { i32, i32, i32, i32 } %1663, 3, !dbg !67
  %1668 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %377) #2, !dbg !67
  %1669 = extractvalue { i32, i32, i32, i32 } %1668, 0, !dbg !67
  %1670 = extractvalue { i32, i32, i32, i32 } %1668, 1, !dbg !67
  %1671 = extractvalue { i32, i32, i32, i32 } %1668, 2, !dbg !67
  %1672 = extractvalue { i32, i32, i32, i32 } %1668, 3, !dbg !67
  %1673 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %380) #2, !dbg !67
  %1674 = extractvalue { i32, i32, i32, i32 } %1673, 0, !dbg !67
  %1675 = extractvalue { i32, i32, i32, i32 } %1673, 1, !dbg !67
  %1676 = extractvalue { i32, i32, i32, i32 } %1673, 2, !dbg !67
  %1677 = extractvalue { i32, i32, i32, i32 } %1673, 3, !dbg !67
  %1678 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %383) #2, !dbg !67
  %1679 = extractvalue { i32, i32, i32, i32 } %1678, 0, !dbg !67
  %1680 = extractvalue { i32, i32, i32, i32 } %1678, 1, !dbg !67
  %1681 = extractvalue { i32, i32, i32, i32 } %1678, 2, !dbg !67
  %1682 = extractvalue { i32, i32, i32, i32 } %1678, 3, !dbg !67
  %1683 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %386) #2, !dbg !67
  %1684 = extractvalue { i32, i32, i32, i32 } %1683, 0, !dbg !67
  %1685 = extractvalue { i32, i32, i32, i32 } %1683, 1, !dbg !67
  %1686 = extractvalue { i32, i32, i32, i32 } %1683, 2, !dbg !67
  %1687 = extractvalue { i32, i32, i32, i32 } %1683, 3, !dbg !67
  %1688 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %389) #2, !dbg !67
  %1689 = extractvalue { i32, i32, i32, i32 } %1688, 0, !dbg !67
  %1690 = extractvalue { i32, i32, i32, i32 } %1688, 1, !dbg !67
  %1691 = extractvalue { i32, i32, i32, i32 } %1688, 2, !dbg !67
  %1692 = extractvalue { i32, i32, i32, i32 } %1688, 3, !dbg !67
  %1693 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1469, float %1470, float %1471, float %1472, i32 %1614, i32 %1615, i32 %1616, i32 %1617, i32 %1654, i32 %1655) #2, !dbg !68
  %1694 = extractvalue { float, float, float, float } %1693, 0, !dbg !68
  %1695 = extractvalue { float, float, float, float } %1693, 1, !dbg !68
  %1696 = extractvalue { float, float, float, float } %1693, 2, !dbg !68
  %1697 = extractvalue { float, float, float, float } %1693, 3, !dbg !68
  %1698 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1473, float %1474, float %1475, float %1476, i32 %1614, i32 %1615, i32 %1616, i32 %1617, i32 %1664, i32 %1665) #2, !dbg !68
  %1699 = extractvalue { float, float, float, float } %1698, 0, !dbg !68
  %1700 = extractvalue { float, float, float, float } %1698, 1, !dbg !68
  %1701 = extractvalue { float, float, float, float } %1698, 2, !dbg !68
  %1702 = extractvalue { float, float, float, float } %1698, 3, !dbg !68
  %1703 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1477, float %1478, float %1479, float %1480, i32 %1614, i32 %1615, i32 %1616, i32 %1617, i32 %1674, i32 %1675) #2, !dbg !68
  %1704 = extractvalue { float, float, float, float } %1703, 0, !dbg !68
  %1705 = extractvalue { float, float, float, float } %1703, 1, !dbg !68
  %1706 = extractvalue { float, float, float, float } %1703, 2, !dbg !68
  %1707 = extractvalue { float, float, float, float } %1703, 3, !dbg !68
  %1708 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1481, float %1482, float %1483, float %1484, i32 %1614, i32 %1615, i32 %1616, i32 %1617, i32 %1684, i32 %1685) #2, !dbg !68
  %1709 = extractvalue { float, float, float, float } %1708, 0, !dbg !68
  %1710 = extractvalue { float, float, float, float } %1708, 1, !dbg !68
  %1711 = extractvalue { float, float, float, float } %1708, 2, !dbg !68
  %1712 = extractvalue { float, float, float, float } %1708, 3, !dbg !68
  %1713 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1485, float %1486, float %1487, float %1488, i32 %1634, i32 %1635, i32 %1636, i32 %1637, i32 %1654, i32 %1655) #2, !dbg !68
  %1714 = extractvalue { float, float, float, float } %1713, 0, !dbg !68
  %1715 = extractvalue { float, float, float, float } %1713, 1, !dbg !68
  %1716 = extractvalue { float, float, float, float } %1713, 2, !dbg !68
  %1717 = extractvalue { float, float, float, float } %1713, 3, !dbg !68
  %1718 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1489, float %1490, float %1491, float %1492, i32 %1634, i32 %1635, i32 %1636, i32 %1637, i32 %1664, i32 %1665) #2, !dbg !68
  %1719 = extractvalue { float, float, float, float } %1718, 0, !dbg !68
  %1720 = extractvalue { float, float, float, float } %1718, 1, !dbg !68
  %1721 = extractvalue { float, float, float, float } %1718, 2, !dbg !68
  %1722 = extractvalue { float, float, float, float } %1718, 3, !dbg !68
  %1723 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1493, float %1494, float %1495, float %1496, i32 %1634, i32 %1635, i32 %1636, i32 %1637, i32 %1674, i32 %1675) #2, !dbg !68
  %1724 = extractvalue { float, float, float, float } %1723, 0, !dbg !68
  %1725 = extractvalue { float, float, float, float } %1723, 1, !dbg !68
  %1726 = extractvalue { float, float, float, float } %1723, 2, !dbg !68
  %1727 = extractvalue { float, float, float, float } %1723, 3, !dbg !68
  %1728 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1497, float %1498, float %1499, float %1500, i32 %1634, i32 %1635, i32 %1636, i32 %1637, i32 %1684, i32 %1685) #2, !dbg !68
  %1729 = extractvalue { float, float, float, float } %1728, 0, !dbg !68
  %1730 = extractvalue { float, float, float, float } %1728, 1, !dbg !68
  %1731 = extractvalue { float, float, float, float } %1728, 2, !dbg !68
  %1732 = extractvalue { float, float, float, float } %1728, 3, !dbg !68
  %1733 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1694, float %1695, float %1696, float %1697, i32 %1619, i32 %1620, i32 %1621, i32 %1622, i32 %1656, i32 %1657) #2, !dbg !68
  %1734 = extractvalue { float, float, float, float } %1733, 0, !dbg !68
  %1735 = extractvalue { float, float, float, float } %1733, 1, !dbg !68
  %1736 = extractvalue { float, float, float, float } %1733, 2, !dbg !68
  %1737 = extractvalue { float, float, float, float } %1733, 3, !dbg !68
  %1738 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1699, float %1700, float %1701, float %1702, i32 %1619, i32 %1620, i32 %1621, i32 %1622, i32 %1666, i32 %1667) #2, !dbg !68
  %1739 = extractvalue { float, float, float, float } %1738, 0, !dbg !68
  %1740 = extractvalue { float, float, float, float } %1738, 1, !dbg !68
  %1741 = extractvalue { float, float, float, float } %1738, 2, !dbg !68
  %1742 = extractvalue { float, float, float, float } %1738, 3, !dbg !68
  %1743 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1704, float %1705, float %1706, float %1707, i32 %1619, i32 %1620, i32 %1621, i32 %1622, i32 %1676, i32 %1677) #2, !dbg !68
  %1744 = extractvalue { float, float, float, float } %1743, 0, !dbg !68
  %1745 = extractvalue { float, float, float, float } %1743, 1, !dbg !68
  %1746 = extractvalue { float, float, float, float } %1743, 2, !dbg !68
  %1747 = extractvalue { float, float, float, float } %1743, 3, !dbg !68
  %1748 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1709, float %1710, float %1711, float %1712, i32 %1619, i32 %1620, i32 %1621, i32 %1622, i32 %1686, i32 %1687) #2, !dbg !68
  %1749 = extractvalue { float, float, float, float } %1748, 0, !dbg !68
  %1750 = extractvalue { float, float, float, float } %1748, 1, !dbg !68
  %1751 = extractvalue { float, float, float, float } %1748, 2, !dbg !68
  %1752 = extractvalue { float, float, float, float } %1748, 3, !dbg !68
  %1753 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1714, float %1715, float %1716, float %1717, i32 %1639, i32 %1640, i32 %1641, i32 %1642, i32 %1656, i32 %1657) #2, !dbg !68
  %1754 = extractvalue { float, float, float, float } %1753, 0, !dbg !68
  %1755 = extractvalue { float, float, float, float } %1753, 1, !dbg !68
  %1756 = extractvalue { float, float, float, float } %1753, 2, !dbg !68
  %1757 = extractvalue { float, float, float, float } %1753, 3, !dbg !68
  %1758 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1719, float %1720, float %1721, float %1722, i32 %1639, i32 %1640, i32 %1641, i32 %1642, i32 %1666, i32 %1667) #2, !dbg !68
  %1759 = extractvalue { float, float, float, float } %1758, 0, !dbg !68
  %1760 = extractvalue { float, float, float, float } %1758, 1, !dbg !68
  %1761 = extractvalue { float, float, float, float } %1758, 2, !dbg !68
  %1762 = extractvalue { float, float, float, float } %1758, 3, !dbg !68
  %1763 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1724, float %1725, float %1726, float %1727, i32 %1639, i32 %1640, i32 %1641, i32 %1642, i32 %1676, i32 %1677) #2, !dbg !68
  %1764 = extractvalue { float, float, float, float } %1763, 0, !dbg !68
  %1765 = extractvalue { float, float, float, float } %1763, 1, !dbg !68
  %1766 = extractvalue { float, float, float, float } %1763, 2, !dbg !68
  %1767 = extractvalue { float, float, float, float } %1763, 3, !dbg !68
  %1768 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1729, float %1730, float %1731, float %1732, i32 %1639, i32 %1640, i32 %1641, i32 %1642, i32 %1686, i32 %1687) #2, !dbg !68
  %1769 = extractvalue { float, float, float, float } %1768, 0, !dbg !68
  %1770 = extractvalue { float, float, float, float } %1768, 1, !dbg !68
  %1771 = extractvalue { float, float, float, float } %1768, 2, !dbg !68
  %1772 = extractvalue { float, float, float, float } %1768, 3, !dbg !68
  %1773 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1734, float %1735, float %1736, float %1737, i32 %1624, i32 %1625, i32 %1626, i32 %1627, i32 %1659, i32 %1660) #2, !dbg !68
  %1774 = extractvalue { float, float, float, float } %1773, 0, !dbg !68
  %1775 = extractvalue { float, float, float, float } %1773, 1, !dbg !68
  %1776 = extractvalue { float, float, float, float } %1773, 2, !dbg !68
  %1777 = extractvalue { float, float, float, float } %1773, 3, !dbg !68
  %1778 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1739, float %1740, float %1741, float %1742, i32 %1624, i32 %1625, i32 %1626, i32 %1627, i32 %1669, i32 %1670) #2, !dbg !68
  %1779 = extractvalue { float, float, float, float } %1778, 0, !dbg !68
  %1780 = extractvalue { float, float, float, float } %1778, 1, !dbg !68
  %1781 = extractvalue { float, float, float, float } %1778, 2, !dbg !68
  %1782 = extractvalue { float, float, float, float } %1778, 3, !dbg !68
  %1783 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1744, float %1745, float %1746, float %1747, i32 %1624, i32 %1625, i32 %1626, i32 %1627, i32 %1679, i32 %1680) #2, !dbg !68
  %1784 = extractvalue { float, float, float, float } %1783, 0, !dbg !68
  %1785 = extractvalue { float, float, float, float } %1783, 1, !dbg !68
  %1786 = extractvalue { float, float, float, float } %1783, 2, !dbg !68
  %1787 = extractvalue { float, float, float, float } %1783, 3, !dbg !68
  %1788 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1749, float %1750, float %1751, float %1752, i32 %1624, i32 %1625, i32 %1626, i32 %1627, i32 %1689, i32 %1690) #2, !dbg !68
  %1789 = extractvalue { float, float, float, float } %1788, 0, !dbg !68
  %1790 = extractvalue { float, float, float, float } %1788, 1, !dbg !68
  %1791 = extractvalue { float, float, float, float } %1788, 2, !dbg !68
  %1792 = extractvalue { float, float, float, float } %1788, 3, !dbg !68
  %1793 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1754, float %1755, float %1756, float %1757, i32 %1644, i32 %1645, i32 %1646, i32 %1647, i32 %1659, i32 %1660) #2, !dbg !68
  %1794 = extractvalue { float, float, float, float } %1793, 0, !dbg !68
  %1795 = extractvalue { float, float, float, float } %1793, 1, !dbg !68
  %1796 = extractvalue { float, float, float, float } %1793, 2, !dbg !68
  %1797 = extractvalue { float, float, float, float } %1793, 3, !dbg !68
  %1798 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1759, float %1760, float %1761, float %1762, i32 %1644, i32 %1645, i32 %1646, i32 %1647, i32 %1669, i32 %1670) #2, !dbg !68
  %1799 = extractvalue { float, float, float, float } %1798, 0, !dbg !68
  %1800 = extractvalue { float, float, float, float } %1798, 1, !dbg !68
  %1801 = extractvalue { float, float, float, float } %1798, 2, !dbg !68
  %1802 = extractvalue { float, float, float, float } %1798, 3, !dbg !68
  %1803 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1764, float %1765, float %1766, float %1767, i32 %1644, i32 %1645, i32 %1646, i32 %1647, i32 %1679, i32 %1680) #2, !dbg !68
  %1804 = extractvalue { float, float, float, float } %1803, 0, !dbg !68
  %1805 = extractvalue { float, float, float, float } %1803, 1, !dbg !68
  %1806 = extractvalue { float, float, float, float } %1803, 2, !dbg !68
  %1807 = extractvalue { float, float, float, float } %1803, 3, !dbg !68
  %1808 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1769, float %1770, float %1771, float %1772, i32 %1644, i32 %1645, i32 %1646, i32 %1647, i32 %1689, i32 %1690) #2, !dbg !68
  %1809 = extractvalue { float, float, float, float } %1808, 0, !dbg !68
  %1810 = extractvalue { float, float, float, float } %1808, 1, !dbg !68
  %1811 = extractvalue { float, float, float, float } %1808, 2, !dbg !68
  %1812 = extractvalue { float, float, float, float } %1808, 3, !dbg !68
  %1813 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1774, float %1775, float %1776, float %1777, i32 %1629, i32 %1630, i32 %1631, i32 %1632, i32 %1661, i32 %1662) #2, !dbg !68
  %1814 = extractvalue { float, float, float, float } %1813, 0, !dbg !68
  %1815 = extractvalue { float, float, float, float } %1813, 1, !dbg !68
  %1816 = extractvalue { float, float, float, float } %1813, 2, !dbg !68
  %1817 = extractvalue { float, float, float, float } %1813, 3, !dbg !68
  %1818 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1779, float %1780, float %1781, float %1782, i32 %1629, i32 %1630, i32 %1631, i32 %1632, i32 %1671, i32 %1672) #2, !dbg !68
  %1819 = extractvalue { float, float, float, float } %1818, 0, !dbg !68
  %1820 = extractvalue { float, float, float, float } %1818, 1, !dbg !68
  %1821 = extractvalue { float, float, float, float } %1818, 2, !dbg !68
  %1822 = extractvalue { float, float, float, float } %1818, 3, !dbg !68
  %1823 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1784, float %1785, float %1786, float %1787, i32 %1629, i32 %1630, i32 %1631, i32 %1632, i32 %1681, i32 %1682) #2, !dbg !68
  %1824 = extractvalue { float, float, float, float } %1823, 0, !dbg !68
  %1825 = extractvalue { float, float, float, float } %1823, 1, !dbg !68
  %1826 = extractvalue { float, float, float, float } %1823, 2, !dbg !68
  %1827 = extractvalue { float, float, float, float } %1823, 3, !dbg !68
  %1828 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1789, float %1790, float %1791, float %1792, i32 %1629, i32 %1630, i32 %1631, i32 %1632, i32 %1691, i32 %1692) #2, !dbg !68
  %1829 = extractvalue { float, float, float, float } %1828, 0, !dbg !68
  %1830 = extractvalue { float, float, float, float } %1828, 1, !dbg !68
  %1831 = extractvalue { float, float, float, float } %1828, 2, !dbg !68
  %1832 = extractvalue { float, float, float, float } %1828, 3, !dbg !68
  %1833 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1794, float %1795, float %1796, float %1797, i32 %1649, i32 %1650, i32 %1651, i32 %1652, i32 %1661, i32 %1662) #2, !dbg !68
  %1834 = extractvalue { float, float, float, float } %1833, 0, !dbg !68
  %1835 = extractvalue { float, float, float, float } %1833, 1, !dbg !68
  %1836 = extractvalue { float, float, float, float } %1833, 2, !dbg !68
  %1837 = extractvalue { float, float, float, float } %1833, 3, !dbg !68
  %1838 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1799, float %1800, float %1801, float %1802, i32 %1649, i32 %1650, i32 %1651, i32 %1652, i32 %1671, i32 %1672) #2, !dbg !68
  %1839 = extractvalue { float, float, float, float } %1838, 0, !dbg !68
  %1840 = extractvalue { float, float, float, float } %1838, 1, !dbg !68
  %1841 = extractvalue { float, float, float, float } %1838, 2, !dbg !68
  %1842 = extractvalue { float, float, float, float } %1838, 3, !dbg !68
  %1843 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1804, float %1805, float %1806, float %1807, i32 %1649, i32 %1650, i32 %1651, i32 %1652, i32 %1681, i32 %1682) #2, !dbg !68
  %1844 = extractvalue { float, float, float, float } %1843, 0, !dbg !68
  %1845 = extractvalue { float, float, float, float } %1843, 1, !dbg !68
  %1846 = extractvalue { float, float, float, float } %1843, 2, !dbg !68
  %1847 = extractvalue { float, float, float, float } %1843, 3, !dbg !68
  %1848 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1809, float %1810, float %1811, float %1812, i32 %1649, i32 %1650, i32 %1651, i32 %1652, i32 %1691, i32 %1692) #2, !dbg !68
  %1849 = extractvalue { float, float, float, float } %1848, 0, !dbg !68
  %1850 = extractvalue { float, float, float, float } %1848, 1, !dbg !68
  %1851 = extractvalue { float, float, float, float } %1848, 2, !dbg !68
  %1852 = extractvalue { float, float, float, float } %1848, 3, !dbg !68
  %1853 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %493) #2, !dbg !40
  %1854 = extractvalue { i32, i32, i32, i32 } %1853, 0, !dbg !40
  %1855 = extractvalue { i32, i32, i32, i32 } %1853, 1, !dbg !40
  %1856 = extractvalue { i32, i32, i32, i32 } %1853, 2, !dbg !40
  %1857 = extractvalue { i32, i32, i32, i32 } %1853, 3, !dbg !40
  %1858 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #2, !dbg !40
  %1859 = extractvalue { i32, i32, i32, i32 } %1858, 0, !dbg !40
  %1860 = extractvalue { i32, i32, i32, i32 } %1858, 1, !dbg !40
  %1861 = extractvalue { i32, i32, i32, i32 } %1858, 2, !dbg !40
  %1862 = extractvalue { i32, i32, i32, i32 } %1858, 3, !dbg !40
  %1863 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %497) #2, !dbg !40
  %1864 = extractvalue { i32, i32, i32, i32 } %1863, 0, !dbg !40
  %1865 = extractvalue { i32, i32, i32, i32 } %1863, 1, !dbg !40
  %1866 = extractvalue { i32, i32, i32, i32 } %1863, 2, !dbg !40
  %1867 = extractvalue { i32, i32, i32, i32 } %1863, 3, !dbg !40
  %1868 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %499) #2, !dbg !40
  %1869 = extractvalue { i32, i32, i32, i32 } %1868, 0, !dbg !40
  %1870 = extractvalue { i32, i32, i32, i32 } %1868, 1, !dbg !40
  %1871 = extractvalue { i32, i32, i32, i32 } %1868, 2, !dbg !40
  %1872 = extractvalue { i32, i32, i32, i32 } %1868, 3, !dbg !40
  %1873 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %501) #2, !dbg !40
  %1874 = extractvalue { i32, i32, i32, i32 } %1873, 0, !dbg !40
  %1875 = extractvalue { i32, i32, i32, i32 } %1873, 1, !dbg !40
  %1876 = extractvalue { i32, i32, i32, i32 } %1873, 2, !dbg !40
  %1877 = extractvalue { i32, i32, i32, i32 } %1873, 3, !dbg !40
  %1878 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %503) #2, !dbg !40
  %1879 = extractvalue { i32, i32, i32, i32 } %1878, 0, !dbg !40
  %1880 = extractvalue { i32, i32, i32, i32 } %1878, 1, !dbg !40
  %1881 = extractvalue { i32, i32, i32, i32 } %1878, 2, !dbg !40
  %1882 = extractvalue { i32, i32, i32, i32 } %1878, 3, !dbg !40
  %1883 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %505) #2, !dbg !40
  %1884 = extractvalue { i32, i32, i32, i32 } %1883, 0, !dbg !40
  %1885 = extractvalue { i32, i32, i32, i32 } %1883, 1, !dbg !40
  %1886 = extractvalue { i32, i32, i32, i32 } %1883, 2, !dbg !40
  %1887 = extractvalue { i32, i32, i32, i32 } %1883, 3, !dbg !40
  %1888 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %507) #2, !dbg !40
  %1889 = extractvalue { i32, i32, i32, i32 } %1888, 0, !dbg !40
  %1890 = extractvalue { i32, i32, i32, i32 } %1888, 1, !dbg !40
  %1891 = extractvalue { i32, i32, i32, i32 } %1888, 2, !dbg !40
  %1892 = extractvalue { i32, i32, i32, i32 } %1888, 3, !dbg !40
  %1893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1501, float %1502, float %1503, float %1504, i32 %1854, i32 %1855, i32 %1856, i32 %1857, i32 %1654, i32 %1655) #2, !dbg !69
  %1894 = extractvalue { float, float, float, float } %1893, 0, !dbg !69
  %1895 = extractvalue { float, float, float, float } %1893, 1, !dbg !69
  %1896 = extractvalue { float, float, float, float } %1893, 2, !dbg !69
  %1897 = extractvalue { float, float, float, float } %1893, 3, !dbg !69
  %1898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1505, float %1506, float %1507, float %1508, i32 %1854, i32 %1855, i32 %1856, i32 %1857, i32 %1664, i32 %1665) #2, !dbg !69
  %1899 = extractvalue { float, float, float, float } %1898, 0, !dbg !69
  %1900 = extractvalue { float, float, float, float } %1898, 1, !dbg !69
  %1901 = extractvalue { float, float, float, float } %1898, 2, !dbg !69
  %1902 = extractvalue { float, float, float, float } %1898, 3, !dbg !69
  %1903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1509, float %1510, float %1511, float %1512, i32 %1854, i32 %1855, i32 %1856, i32 %1857, i32 %1674, i32 %1675) #2, !dbg !69
  %1904 = extractvalue { float, float, float, float } %1903, 0, !dbg !69
  %1905 = extractvalue { float, float, float, float } %1903, 1, !dbg !69
  %1906 = extractvalue { float, float, float, float } %1903, 2, !dbg !69
  %1907 = extractvalue { float, float, float, float } %1903, 3, !dbg !69
  %1908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1513, float %1514, float %1515, float %1516, i32 %1854, i32 %1855, i32 %1856, i32 %1857, i32 %1684, i32 %1685) #2, !dbg !69
  %1909 = extractvalue { float, float, float, float } %1908, 0, !dbg !69
  %1910 = extractvalue { float, float, float, float } %1908, 1, !dbg !69
  %1911 = extractvalue { float, float, float, float } %1908, 2, !dbg !69
  %1912 = extractvalue { float, float, float, float } %1908, 3, !dbg !69
  %1913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1517, float %1518, float %1519, float %1520, i32 %1874, i32 %1875, i32 %1876, i32 %1877, i32 %1654, i32 %1655) #2, !dbg !69
  %1914 = extractvalue { float, float, float, float } %1913, 0, !dbg !69
  %1915 = extractvalue { float, float, float, float } %1913, 1, !dbg !69
  %1916 = extractvalue { float, float, float, float } %1913, 2, !dbg !69
  %1917 = extractvalue { float, float, float, float } %1913, 3, !dbg !69
  %1918 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1521, float %1522, float %1523, float %1524, i32 %1874, i32 %1875, i32 %1876, i32 %1877, i32 %1664, i32 %1665) #2, !dbg !69
  %1919 = extractvalue { float, float, float, float } %1918, 0, !dbg !69
  %1920 = extractvalue { float, float, float, float } %1918, 1, !dbg !69
  %1921 = extractvalue { float, float, float, float } %1918, 2, !dbg !69
  %1922 = extractvalue { float, float, float, float } %1918, 3, !dbg !69
  %1923 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1525, float %1526, float %1527, float %1528, i32 %1874, i32 %1875, i32 %1876, i32 %1877, i32 %1674, i32 %1675) #2, !dbg !69
  %1924 = extractvalue { float, float, float, float } %1923, 0, !dbg !69
  %1925 = extractvalue { float, float, float, float } %1923, 1, !dbg !69
  %1926 = extractvalue { float, float, float, float } %1923, 2, !dbg !69
  %1927 = extractvalue { float, float, float, float } %1923, 3, !dbg !69
  %1928 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1529, float %1530, float %1531, float %1532, i32 %1874, i32 %1875, i32 %1876, i32 %1877, i32 %1684, i32 %1685) #2, !dbg !69
  %1929 = extractvalue { float, float, float, float } %1928, 0, !dbg !69
  %1930 = extractvalue { float, float, float, float } %1928, 1, !dbg !69
  %1931 = extractvalue { float, float, float, float } %1928, 2, !dbg !69
  %1932 = extractvalue { float, float, float, float } %1928, 3, !dbg !69
  %1933 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1894, float %1895, float %1896, float %1897, i32 %1859, i32 %1860, i32 %1861, i32 %1862, i32 %1656, i32 %1657) #2, !dbg !69
  %1934 = extractvalue { float, float, float, float } %1933, 0, !dbg !69
  %1935 = extractvalue { float, float, float, float } %1933, 1, !dbg !69
  %1936 = extractvalue { float, float, float, float } %1933, 2, !dbg !69
  %1937 = extractvalue { float, float, float, float } %1933, 3, !dbg !69
  %1938 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1899, float %1900, float %1901, float %1902, i32 %1859, i32 %1860, i32 %1861, i32 %1862, i32 %1666, i32 %1667) #2, !dbg !69
  %1939 = extractvalue { float, float, float, float } %1938, 0, !dbg !69
  %1940 = extractvalue { float, float, float, float } %1938, 1, !dbg !69
  %1941 = extractvalue { float, float, float, float } %1938, 2, !dbg !69
  %1942 = extractvalue { float, float, float, float } %1938, 3, !dbg !69
  %1943 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1904, float %1905, float %1906, float %1907, i32 %1859, i32 %1860, i32 %1861, i32 %1862, i32 %1676, i32 %1677) #2, !dbg !69
  %1944 = extractvalue { float, float, float, float } %1943, 0, !dbg !69
  %1945 = extractvalue { float, float, float, float } %1943, 1, !dbg !69
  %1946 = extractvalue { float, float, float, float } %1943, 2, !dbg !69
  %1947 = extractvalue { float, float, float, float } %1943, 3, !dbg !69
  %1948 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1909, float %1910, float %1911, float %1912, i32 %1859, i32 %1860, i32 %1861, i32 %1862, i32 %1686, i32 %1687) #2, !dbg !69
  %1949 = extractvalue { float, float, float, float } %1948, 0, !dbg !69
  %1950 = extractvalue { float, float, float, float } %1948, 1, !dbg !69
  %1951 = extractvalue { float, float, float, float } %1948, 2, !dbg !69
  %1952 = extractvalue { float, float, float, float } %1948, 3, !dbg !69
  %1953 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1914, float %1915, float %1916, float %1917, i32 %1879, i32 %1880, i32 %1881, i32 %1882, i32 %1656, i32 %1657) #2, !dbg !69
  %1954 = extractvalue { float, float, float, float } %1953, 0, !dbg !69
  %1955 = extractvalue { float, float, float, float } %1953, 1, !dbg !69
  %1956 = extractvalue { float, float, float, float } %1953, 2, !dbg !69
  %1957 = extractvalue { float, float, float, float } %1953, 3, !dbg !69
  %1958 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1919, float %1920, float %1921, float %1922, i32 %1879, i32 %1880, i32 %1881, i32 %1882, i32 %1666, i32 %1667) #2, !dbg !69
  %1959 = extractvalue { float, float, float, float } %1958, 0, !dbg !69
  %1960 = extractvalue { float, float, float, float } %1958, 1, !dbg !69
  %1961 = extractvalue { float, float, float, float } %1958, 2, !dbg !69
  %1962 = extractvalue { float, float, float, float } %1958, 3, !dbg !69
  %1963 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1924, float %1925, float %1926, float %1927, i32 %1879, i32 %1880, i32 %1881, i32 %1882, i32 %1676, i32 %1677) #2, !dbg !69
  %1964 = extractvalue { float, float, float, float } %1963, 0, !dbg !69
  %1965 = extractvalue { float, float, float, float } %1963, 1, !dbg !69
  %1966 = extractvalue { float, float, float, float } %1963, 2, !dbg !69
  %1967 = extractvalue { float, float, float, float } %1963, 3, !dbg !69
  %1968 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1929, float %1930, float %1931, float %1932, i32 %1879, i32 %1880, i32 %1881, i32 %1882, i32 %1686, i32 %1687) #2, !dbg !69
  %1969 = extractvalue { float, float, float, float } %1968, 0, !dbg !69
  %1970 = extractvalue { float, float, float, float } %1968, 1, !dbg !69
  %1971 = extractvalue { float, float, float, float } %1968, 2, !dbg !69
  %1972 = extractvalue { float, float, float, float } %1968, 3, !dbg !69
  %1973 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1934, float %1935, float %1936, float %1937, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1659, i32 %1660) #2, !dbg !69
  %1974 = extractvalue { float, float, float, float } %1973, 0, !dbg !69
  %1975 = extractvalue { float, float, float, float } %1973, 1, !dbg !69
  %1976 = extractvalue { float, float, float, float } %1973, 2, !dbg !69
  %1977 = extractvalue { float, float, float, float } %1973, 3, !dbg !69
  %1978 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1939, float %1940, float %1941, float %1942, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1669, i32 %1670) #2, !dbg !69
  %1979 = extractvalue { float, float, float, float } %1978, 0, !dbg !69
  %1980 = extractvalue { float, float, float, float } %1978, 1, !dbg !69
  %1981 = extractvalue { float, float, float, float } %1978, 2, !dbg !69
  %1982 = extractvalue { float, float, float, float } %1978, 3, !dbg !69
  %1983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1944, float %1945, float %1946, float %1947, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1679, i32 %1680) #2, !dbg !69
  %1984 = extractvalue { float, float, float, float } %1983, 0, !dbg !69
  %1985 = extractvalue { float, float, float, float } %1983, 1, !dbg !69
  %1986 = extractvalue { float, float, float, float } %1983, 2, !dbg !69
  %1987 = extractvalue { float, float, float, float } %1983, 3, !dbg !69
  %1988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1949, float %1950, float %1951, float %1952, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1689, i32 %1690) #2, !dbg !69
  %1989 = extractvalue { float, float, float, float } %1988, 0, !dbg !69
  %1990 = extractvalue { float, float, float, float } %1988, 1, !dbg !69
  %1991 = extractvalue { float, float, float, float } %1988, 2, !dbg !69
  %1992 = extractvalue { float, float, float, float } %1988, 3, !dbg !69
  %1993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1954, float %1955, float %1956, float %1957, i32 %1884, i32 %1885, i32 %1886, i32 %1887, i32 %1659, i32 %1660) #2, !dbg !69
  %1994 = extractvalue { float, float, float, float } %1993, 0, !dbg !69
  %1995 = extractvalue { float, float, float, float } %1993, 1, !dbg !69
  %1996 = extractvalue { float, float, float, float } %1993, 2, !dbg !69
  %1997 = extractvalue { float, float, float, float } %1993, 3, !dbg !69
  %1998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1959, float %1960, float %1961, float %1962, i32 %1884, i32 %1885, i32 %1886, i32 %1887, i32 %1669, i32 %1670) #2, !dbg !69
  %1999 = extractvalue { float, float, float, float } %1998, 0, !dbg !69
  %2000 = extractvalue { float, float, float, float } %1998, 1, !dbg !69
  %2001 = extractvalue { float, float, float, float } %1998, 2, !dbg !69
  %2002 = extractvalue { float, float, float, float } %1998, 3, !dbg !69
  %2003 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1964, float %1965, float %1966, float %1967, i32 %1884, i32 %1885, i32 %1886, i32 %1887, i32 %1679, i32 %1680) #2, !dbg !69
  %2004 = extractvalue { float, float, float, float } %2003, 0, !dbg !69
  %2005 = extractvalue { float, float, float, float } %2003, 1, !dbg !69
  %2006 = extractvalue { float, float, float, float } %2003, 2, !dbg !69
  %2007 = extractvalue { float, float, float, float } %2003, 3, !dbg !69
  %2008 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1969, float %1970, float %1971, float %1972, i32 %1884, i32 %1885, i32 %1886, i32 %1887, i32 %1689, i32 %1690) #2, !dbg !69
  %2009 = extractvalue { float, float, float, float } %2008, 0, !dbg !69
  %2010 = extractvalue { float, float, float, float } %2008, 1, !dbg !69
  %2011 = extractvalue { float, float, float, float } %2008, 2, !dbg !69
  %2012 = extractvalue { float, float, float, float } %2008, 3, !dbg !69
  %2013 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1974, float %1975, float %1976, float %1977, i32 %1869, i32 %1870, i32 %1871, i32 %1872, i32 %1661, i32 %1662) #2, !dbg !69
  %2014 = extractvalue { float, float, float, float } %2013, 0, !dbg !69
  %2015 = extractvalue { float, float, float, float } %2013, 1, !dbg !69
  %2016 = extractvalue { float, float, float, float } %2013, 2, !dbg !69
  %2017 = extractvalue { float, float, float, float } %2013, 3, !dbg !69
  %2018 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1979, float %1980, float %1981, float %1982, i32 %1869, i32 %1870, i32 %1871, i32 %1872, i32 %1671, i32 %1672) #2, !dbg !69
  %2019 = extractvalue { float, float, float, float } %2018, 0, !dbg !69
  %2020 = extractvalue { float, float, float, float } %2018, 1, !dbg !69
  %2021 = extractvalue { float, float, float, float } %2018, 2, !dbg !69
  %2022 = extractvalue { float, float, float, float } %2018, 3, !dbg !69
  %2023 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1984, float %1985, float %1986, float %1987, i32 %1869, i32 %1870, i32 %1871, i32 %1872, i32 %1681, i32 %1682) #2, !dbg !69
  %2024 = extractvalue { float, float, float, float } %2023, 0, !dbg !69
  %2025 = extractvalue { float, float, float, float } %2023, 1, !dbg !69
  %2026 = extractvalue { float, float, float, float } %2023, 2, !dbg !69
  %2027 = extractvalue { float, float, float, float } %2023, 3, !dbg !69
  %2028 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1989, float %1990, float %1991, float %1992, i32 %1869, i32 %1870, i32 %1871, i32 %1872, i32 %1691, i32 %1692) #2, !dbg !69
  %2029 = extractvalue { float, float, float, float } %2028, 0, !dbg !69
  %2030 = extractvalue { float, float, float, float } %2028, 1, !dbg !69
  %2031 = extractvalue { float, float, float, float } %2028, 2, !dbg !69
  %2032 = extractvalue { float, float, float, float } %2028, 3, !dbg !69
  %2033 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1994, float %1995, float %1996, float %1997, i32 %1889, i32 %1890, i32 %1891, i32 %1892, i32 %1661, i32 %1662) #2, !dbg !69
  %2034 = extractvalue { float, float, float, float } %2033, 0, !dbg !69
  %2035 = extractvalue { float, float, float, float } %2033, 1, !dbg !69
  %2036 = extractvalue { float, float, float, float } %2033, 2, !dbg !69
  %2037 = extractvalue { float, float, float, float } %2033, 3, !dbg !69
  %2038 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1999, float %2000, float %2001, float %2002, i32 %1889, i32 %1890, i32 %1891, i32 %1892, i32 %1671, i32 %1672) #2, !dbg !69
  %2039 = extractvalue { float, float, float, float } %2038, 0, !dbg !69
  %2040 = extractvalue { float, float, float, float } %2038, 1, !dbg !69
  %2041 = extractvalue { float, float, float, float } %2038, 2, !dbg !69
  %2042 = extractvalue { float, float, float, float } %2038, 3, !dbg !69
  %2043 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2004, float %2005, float %2006, float %2007, i32 %1889, i32 %1890, i32 %1891, i32 %1892, i32 %1681, i32 %1682) #2, !dbg !69
  %2044 = extractvalue { float, float, float, float } %2043, 0, !dbg !69
  %2045 = extractvalue { float, float, float, float } %2043, 1, !dbg !69
  %2046 = extractvalue { float, float, float, float } %2043, 2, !dbg !69
  %2047 = extractvalue { float, float, float, float } %2043, 3, !dbg !69
  %2048 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2009, float %2010, float %2011, float %2012, i32 %1889, i32 %1890, i32 %1891, i32 %1892, i32 %1691, i32 %1692) #2, !dbg !69
  %2049 = extractvalue { float, float, float, float } %2048, 0, !dbg !69
  %2050 = extractvalue { float, float, float, float } %2048, 1, !dbg !69
  %2051 = extractvalue { float, float, float, float } %2048, 2, !dbg !69
  %2052 = extractvalue { float, float, float, float } %2048, 3, !dbg !69
  %2053 = or disjoint i64 %1367, %63, !dbg !35
  %2054 = or disjoint i64 %1367, %64, !dbg !35
  %2055 = or disjoint i64 %1367, %65, !dbg !35
  %2056 = or disjoint i64 %1367, %66, !dbg !35
  %2057 = or disjoint i64 %1367, %67, !dbg !35
  %2058 = or disjoint i64 %1367, %68, !dbg !35
  %2059 = or disjoint i64 %1367, %69, !dbg !35
  %2060 = or disjoint i64 %1367, %70, !dbg !35
  %2061 = or disjoint i64 %1367, %59, !dbg !35
  %2062 = or disjoint i64 %1367, %60, !dbg !35
  %2063 = or disjoint i64 %1367, %61, !dbg !35
  %2064 = or disjoint i64 %1367, %62, !dbg !35
  %2065 = or disjoint i64 %1367, %72, !dbg !35
  %2066 = shl nsw i64 %2053, 12, !dbg !35
  %2067 = shl nsw i64 %2054, 12, !dbg !35
  %2068 = shl nsw i64 %2055, 12, !dbg !35
  %2069 = shl nsw i64 %2056, 12, !dbg !35
  %2070 = shl nsw i64 %2057, 12, !dbg !35
  %2071 = shl nsw i64 %2058, 12, !dbg !35
  %2072 = shl nsw i64 %2059, 12, !dbg !35
  %2073 = shl nsw i64 %2060, 12, !dbg !35
  %2074 = shl nsw i64 %2061, 12, !dbg !35
  %2075 = shl nsw i64 %2062, 12, !dbg !35
  %2076 = shl nsw i64 %2063, 12, !dbg !35
  %2077 = shl nsw i64 %2064, 12, !dbg !35
  %2078 = or disjoint i64 %2066, %71, !dbg !35
  %2079 = or disjoint i64 %2067, %71, !dbg !35
  %2080 = or disjoint i64 %2068, %71, !dbg !35
  %2081 = or disjoint i64 %2069, %71, !dbg !35
  %2082 = or disjoint i64 %2070, %71, !dbg !35
  %2083 = or disjoint i64 %2071, %71, !dbg !35
  %2084 = or disjoint i64 %2072, %71, !dbg !35
  %2085 = or disjoint i64 %2073, %71, !dbg !35
  %2086 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2078, !dbg !35
  %2087 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2079, !dbg !35
  %2088 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2080, !dbg !35
  %2089 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2081, !dbg !35
  %2090 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2082, !dbg !35
  %2091 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2083, !dbg !35
  %2092 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2084, !dbg !35
  %2093 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2085, !dbg !35
  %2094 = icmp slt i64 %2053, %79, !dbg !35
  %2095 = icmp slt i64 %2054, %79, !dbg !35
  %2096 = icmp slt i64 %2055, %79, !dbg !35
  %2097 = icmp slt i64 %2056, %79, !dbg !35
  %2098 = icmp slt i64 %2057, %79, !dbg !35
  %2099 = icmp slt i64 %2058, %79, !dbg !35
  %2100 = icmp slt i64 %2059, %79, !dbg !35
  %2101 = icmp slt i64 %2060, %79, !dbg !35
  %2102 = icmp slt i64 %2061, %79, !dbg !35
  %2103 = icmp slt i64 %2062, %79, !dbg !35
  %2104 = icmp slt i64 %2063, %79, !dbg !35
  %2105 = icmp slt i64 %2064, %79, !dbg !35
  %2106 = and i1 %574, %2094, !dbg !34
  %2107 = and i1 %574, %2095, !dbg !34
  %2108 = and i1 %574, %2096, !dbg !34
  %2109 = and i1 %574, %2097, !dbg !34
  %2110 = and i1 %574, %2098, !dbg !34
  %2111 = and i1 %574, %2099, !dbg !34
  %2112 = and i1 %574, %2100, !dbg !34
  %2113 = and i1 %574, %2101, !dbg !34
  %2114 = select i1 %2106, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %136, ptr addrspace(1) %2086, i32 %2114) #2, !dbg !35
  %2115 = select i1 %2107, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %2087, i32 %2115) #2, !dbg !35
  %2116 = select i1 %2108, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %2088, i32 %2116) #2, !dbg !35
  %2117 = select i1 %2109, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %2089, i32 %2117) #2, !dbg !35
  %2118 = select i1 %2110, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %2090, i32 %2118) #2, !dbg !35
  %2119 = select i1 %2111, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %146, ptr addrspace(1) %2091, i32 %2119) #2, !dbg !35
  %2120 = select i1 %2112, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %148, ptr addrspace(1) %2092, i32 %2120) #2, !dbg !35
  %2121 = select i1 %2113, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %150, ptr addrspace(1) %2093, i32 %2121) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %2122 = or disjoint i64 %2066, %78, !dbg !36
  %2123 = or disjoint i64 %2067, %78, !dbg !36
  %2124 = or disjoint i64 %2068, %78, !dbg !36
  %2125 = or disjoint i64 %2069, %78, !dbg !36
  %2126 = or disjoint i64 %2070, %78, !dbg !36
  %2127 = or disjoint i64 %2071, %78, !dbg !36
  %2128 = or disjoint i64 %2072, %78, !dbg !36
  %2129 = or disjoint i64 %2073, %78, !dbg !36
  %2130 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2122, !dbg !36
  %2131 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2123, !dbg !36
  %2132 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2124, !dbg !36
  %2133 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2125, !dbg !36
  %2134 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2126, !dbg !36
  %2135 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2127, !dbg !36
  %2136 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2128, !dbg !36
  %2137 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2129, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %2130, i32 %2114) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %2131, i32 %2115) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %177, ptr addrspace(1) %2132, i32 %2116) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %178, ptr addrspace(1) %2133, i32 %2117) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %179, ptr addrspace(1) %2134, i32 %2118) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %180, ptr addrspace(1) %2135, i32 %2119) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %181, ptr addrspace(1) %2136, i32 %2120) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %182, ptr addrspace(1) %2137, i32 %2121) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %2138 = add nsw i64 %2074, %74, !dbg !37
  %2139 = add nsw i64 %2075, %74, !dbg !37
  %2140 = add nsw i64 %2076, %74, !dbg !37
  %2141 = add nsw i64 %2077, %74, !dbg !37
  %2142 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2138, !dbg !37
  %2143 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2139, !dbg !37
  %2144 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2140, !dbg !37
  %2145 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2141, !dbg !37
  %2146 = and i1 %77, %2102, !dbg !37
  %2147 = and i1 %77, %2103, !dbg !37
  %2148 = and i1 %77, %2104, !dbg !37
  %2149 = and i1 %77, %2105, !dbg !37
  %2150 = and i1 %574, %2146, !dbg !34
  %2151 = and i1 %574, %2147, !dbg !34
  %2152 = and i1 %574, %2148, !dbg !34
  %2153 = and i1 %574, %2149, !dbg !34
  %2154 = select i1 %2150, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %202, ptr addrspace(1) %2142, i32 %2154) #2, !dbg !37
  %2155 = select i1 %2151, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %204, ptr addrspace(1) %2143, i32 %2155) #2, !dbg !37
  %2156 = select i1 %2152, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %207, ptr addrspace(1) %2144, i32 %2156) #2, !dbg !37
  %2157 = select i1 %2153, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %208, ptr addrspace(1) %2145, i32 %2157) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx446 = shl nsw i64 %2065, 7, !dbg !38
  %2158 = getelementptr i8, ptr addrspace(1) %83, i64 %.idx446, !dbg !38
  %2159 = icmp slt i64 %2065, %79, !dbg !38
  %2160 = and i1 %574, %2159, !dbg !34
  %2161 = select i1 %2160, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %216, ptr addrspace(1) %2158, i32 %2161) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %2162 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2078, !dbg !39
  %2163 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2079, !dbg !39
  %2164 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2080, !dbg !39
  %2165 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2081, !dbg !39
  %2166 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2082, !dbg !39
  %2167 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2083, !dbg !39
  %2168 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2084, !dbg !39
  %2169 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2085, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %226, ptr addrspace(1) %2162, i32 %2114) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %227, ptr addrspace(1) %2163, i32 %2115) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %228, ptr addrspace(1) %2164, i32 %2116) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %229, ptr addrspace(1) %2165, i32 %2117) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %230, ptr addrspace(1) %2166, i32 %2118) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %231, ptr addrspace(1) %2167, i32 %2119) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %232, ptr addrspace(1) %2168, i32 %2120) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %233, ptr addrspace(1) %2169, i32 %2121) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %2170 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2122, !dbg !40
  %2171 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2123, !dbg !40
  %2172 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2124, !dbg !40
  %2173 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2125, !dbg !40
  %2174 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2126, !dbg !40
  %2175 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2127, !dbg !40
  %2176 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2128, !dbg !40
  %2177 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2129, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %242, ptr addrspace(1) %2170, i32 %2114) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %2171, i32 %2115) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %2172, i32 %2116) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %2173, i32 %2117) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %246, ptr addrspace(1) %2174, i32 %2118) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %247, ptr addrspace(1) %2175, i32 %2119) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %248, ptr addrspace(1) %2176, i32 %2120) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %249, ptr addrspace(1) %2177, i32 %2121) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %508, !dbg !34

._crit_edge:                                      ; preds = %508, %.._crit_edge_crit_edge
  %.pre-phi570 = phi i32 [ %.pre569, %.._crit_edge_crit_edge ], [ %265, %508 ], !dbg !41
  %.pre-phi568 = phi i32 [ %.pre567, %.._crit_edge_crit_edge ], [ %279, %508 ], !dbg !41
  %2178 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1814, %508 ]
  %2179 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1815, %508 ]
  %2180 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1816, %508 ]
  %2181 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1817, %508 ]
  %2182 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1819, %508 ]
  %2183 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1820, %508 ]
  %2184 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1821, %508 ]
  %2185 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1822, %508 ]
  %2186 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1824, %508 ]
  %2187 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1825, %508 ]
  %2188 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1826, %508 ]
  %2189 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1827, %508 ]
  %2190 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1829, %508 ]
  %2191 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1830, %508 ]
  %2192 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1831, %508 ]
  %2193 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1832, %508 ]
  %2194 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1834, %508 ]
  %2195 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1835, %508 ]
  %2196 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1836, %508 ]
  %2197 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1837, %508 ]
  %2198 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1839, %508 ]
  %2199 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1840, %508 ]
  %2200 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1841, %508 ]
  %2201 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1842, %508 ]
  %2202 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1844, %508 ]
  %2203 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1845, %508 ]
  %2204 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1846, %508 ]
  %2205 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1847, %508 ]
  %2206 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1849, %508 ]
  %2207 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1850, %508 ]
  %2208 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1851, %508 ]
  %2209 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1852, %508 ]
  %2210 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2014, %508 ]
  %2211 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2015, %508 ]
  %2212 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2016, %508 ]
  %2213 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2017, %508 ]
  %2214 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2019, %508 ]
  %2215 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2020, %508 ]
  %2216 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2021, %508 ]
  %2217 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2022, %508 ]
  %2218 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2024, %508 ]
  %2219 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2025, %508 ]
  %2220 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2026, %508 ]
  %2221 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2027, %508 ]
  %2222 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2029, %508 ]
  %2223 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2030, %508 ]
  %2224 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2031, %508 ]
  %2225 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2032, %508 ]
  %2226 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2034, %508 ]
  %2227 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2035, %508 ]
  %2228 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2036, %508 ]
  %2229 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2037, %508 ]
  %2230 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2039, %508 ]
  %2231 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2040, %508 ]
  %2232 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2041, %508 ]
  %2233 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2042, %508 ]
  %2234 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2044, %508 ]
  %2235 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2045, %508 ]
  %2236 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2046, %508 ]
  %2237 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2047, %508 ]
  %2238 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2049, %508 ]
  %2239 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2050, %508 ]
  %2240 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2051, %508 ]
  %2241 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2052, %508 ]
  %2242 = zext nneg i32 %15 to i64, !dbg !70
  %2243 = getelementptr float, ptr addrspace(1) %6, i64 %2242, !dbg !70
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %2244 = shl nuw nsw i32 %33, 2, !dbg !41
  %2245 = and i32 %2244, 28, !dbg !41
  %2246 = zext nneg i32 %2245 to i64, !dbg !41
  %2247 = or disjoint i64 %2246, %32, !dbg !41
  %.idx162 = shl nuw nsw i64 %63, 9, !dbg !41
  %2248 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx162, !dbg !41
  %2249 = getelementptr float, ptr addrspace(1) %2248, i64 %2247, !dbg !41
  %.idx163 = shl nuw nsw i64 %64, 9, !dbg !41
  %2250 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx163, !dbg !41
  %2251 = getelementptr float, ptr addrspace(1) %2250, i64 %2247, !dbg !41
  %.idx164 = shl nuw nsw i64 %65, 9, !dbg !41
  %2252 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx164, !dbg !41
  %2253 = getelementptr float, ptr addrspace(1) %2252, i64 %2247, !dbg !41
  %.idx165 = shl nuw nsw i64 %66, 9, !dbg !41
  %2254 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx165, !dbg !41
  %2255 = getelementptr float, ptr addrspace(1) %2254, i64 %2247, !dbg !41
  %.idx166 = shl nuw nsw i64 %67, 9, !dbg !41
  %2256 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx166, !dbg !41
  %2257 = getelementptr float, ptr addrspace(1) %2256, i64 %2247, !dbg !41
  %.idx167 = shl nuw nsw i64 %68, 9, !dbg !41
  %2258 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx167, !dbg !41
  %2259 = getelementptr float, ptr addrspace(1) %2258, i64 %2247, !dbg !41
  %.idx168 = shl nuw nsw i64 %69, 9, !dbg !41
  %2260 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx168, !dbg !41
  %2261 = getelementptr float, ptr addrspace(1) %2260, i64 %2247, !dbg !41
  %.idx169 = shl nuw nsw i64 %70, 9, !dbg !41
  %2262 = getelementptr i8, ptr addrspace(1) %2243, i64 %.idx169, !dbg !41
  %2263 = getelementptr float, ptr addrspace(1) %2262, i64 %2247, !dbg !41
  %2264 = icmp slt i64 %2247, 128, !dbg !41
  %2265 = and i1 %75, %2264, !dbg !41
  %2266 = and i32 %52, 192, !dbg !41
  %2267 = or disjoint i32 %2266, %.pre-phi568, !dbg !41
  %2268 = or disjoint i32 %2267, %.pre-phi570, !dbg !41
  %2269 = or disjoint i32 %2268, %54, !dbg !41
  %2270 = and i32 %2244, 252, !dbg !41
  %2271 = lshr i32 %2269, 3, !dbg !41
  %2272 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2271, !dbg !41
  %2273 = getelementptr inbounds nuw float, ptr addrspace(3) %2272, i32 %2269, !dbg !41
  %2274 = insertelement <2 x float> poison, float %2178, i64 0, !dbg !41
  %2275 = insertelement <2 x float> %2274, float %2179, i64 1, !dbg !41
  store <2 x float> %2275, ptr addrspace(3) %2273, align 8, !dbg !41
  %2276 = or disjoint i32 %2269, 256, !dbg !41
  %2277 = lshr i32 %2276, 3, !dbg !41
  %2278 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2277, !dbg !41
  %2279 = getelementptr inbounds nuw float, ptr addrspace(3) %2278, i32 %2276, !dbg !41
  %2280 = insertelement <2 x float> poison, float %2180, i64 0, !dbg !41
  %2281 = insertelement <2 x float> %2280, float %2181, i64 1, !dbg !41
  store <2 x float> %2281, ptr addrspace(3) %2279, align 8, !dbg !41
  %2282 = getelementptr inbounds nuw i8, ptr addrspace(3) %2273, i32 32, !dbg !41
  %2283 = insertelement <2 x float> poison, float %2182, i64 0, !dbg !41
  %2284 = insertelement <2 x float> %2283, float %2183, i64 1, !dbg !41
  store <2 x float> %2284, ptr addrspace(3) %2282, align 8, !dbg !41
  %2285 = or disjoint i32 %2269, 264, !dbg !41
  %2286 = lshr i32 %2285, 3, !dbg !41
  %2287 = and i32 %2286, 536870908, !dbg !41
  %2288 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2287, !dbg !41
  %2289 = getelementptr inbounds nuw float, ptr addrspace(3) %2288, i32 %2285, !dbg !41
  %2290 = insertelement <2 x float> poison, float %2184, i64 0, !dbg !41
  %2291 = insertelement <2 x float> %2290, float %2185, i64 1, !dbg !41
  store <2 x float> %2291, ptr addrspace(3) %2289, align 8, !dbg !41
  %2292 = getelementptr inbounds nuw i8, ptr addrspace(3) %2273, i32 64, !dbg !41
  %2293 = insertelement <2 x float> poison, float %2186, i64 0, !dbg !41
  %2294 = insertelement <2 x float> %2293, float %2187, i64 1, !dbg !41
  store <2 x float> %2294, ptr addrspace(3) %2292, align 8, !dbg !41
  %2295 = or disjoint i32 %2269, 272, !dbg !41
  %2296 = lshr i32 %2295, 3, !dbg !41
  %2297 = and i32 %2296, 536870908, !dbg !41
  %2298 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2297, !dbg !41
  %2299 = getelementptr inbounds nuw float, ptr addrspace(3) %2298, i32 %2295, !dbg !41
  %2300 = insertelement <2 x float> poison, float %2188, i64 0, !dbg !41
  %2301 = insertelement <2 x float> %2300, float %2189, i64 1, !dbg !41
  store <2 x float> %2301, ptr addrspace(3) %2299, align 8, !dbg !41
  %2302 = getelementptr inbounds nuw i8, ptr addrspace(3) %2273, i32 96, !dbg !41
  %2303 = insertelement <2 x float> poison, float %2190, i64 0, !dbg !41
  %2304 = insertelement <2 x float> %2303, float %2191, i64 1, !dbg !41
  store <2 x float> %2304, ptr addrspace(3) %2302, align 8, !dbg !41
  %2305 = or disjoint i32 %2269, 280, !dbg !41
  %2306 = lshr i32 %2305, 3, !dbg !41
  %2307 = and i32 %2306, 536870908, !dbg !41
  %2308 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2307, !dbg !41
  %2309 = getelementptr inbounds nuw float, ptr addrspace(3) %2308, i32 %2305, !dbg !41
  %2310 = insertelement <2 x float> poison, float %2192, i64 0, !dbg !41
  %2311 = insertelement <2 x float> %2310, float %2193, i64 1, !dbg !41
  store <2 x float> %2311, ptr addrspace(3) %2309, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2312 = lshr i32 %33, 1, !dbg !41
  %2313 = and i32 %2312, 28, !dbg !41
  %2314 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2313, !dbg !41
  %2315 = getelementptr inbounds nuw float, ptr addrspace(3) %2314, i32 %2270, !dbg !41
  %2316 = load <4 x i32>, ptr addrspace(3) %2315, align 16, !dbg !41
  %2317 = or disjoint i32 %2270, 256, !dbg !41
  %2318 = lshr i32 %2317, 3, !dbg !41
  %2319 = and i32 %2318, 60, !dbg !41
  %2320 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2319, !dbg !41
  %2321 = getelementptr inbounds nuw float, ptr addrspace(3) %2320, i32 %2317, !dbg !41
  %2322 = load <4 x i32>, ptr addrspace(3) %2321, align 16, !dbg !41
  %2323 = or disjoint i32 %2270, 512, !dbg !41
  %2324 = lshr i32 %2323, 3, !dbg !41
  %2325 = and i32 %2324, 92, !dbg !41
  %2326 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2325, !dbg !41
  %2327 = getelementptr inbounds nuw float, ptr addrspace(3) %2326, i32 %2323, !dbg !41
  %2328 = load <4 x i32>, ptr addrspace(3) %2327, align 16, !dbg !41
  %2329 = or disjoint i32 %2270, 768, !dbg !41
  %2330 = lshr i32 %2329, 3, !dbg !41
  %2331 = and i32 %2330, 124, !dbg !41
  %2332 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2331, !dbg !41
  %2333 = getelementptr inbounds nuw float, ptr addrspace(3) %2332, i32 %2329, !dbg !41
  %2334 = load <4 x i32>, ptr addrspace(3) %2333, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2335 = insertelement <2 x float> poison, float %2194, i64 0, !dbg !41
  %2336 = insertelement <2 x float> %2335, float %2195, i64 1, !dbg !41
  store <2 x float> %2336, ptr addrspace(3) %2273, align 8, !dbg !41
  %2337 = insertelement <2 x float> poison, float %2196, i64 0, !dbg !41
  %2338 = insertelement <2 x float> %2337, float %2197, i64 1, !dbg !41
  store <2 x float> %2338, ptr addrspace(3) %2279, align 8, !dbg !41
  %2339 = insertelement <2 x float> poison, float %2198, i64 0, !dbg !41
  %2340 = insertelement <2 x float> %2339, float %2199, i64 1, !dbg !41
  store <2 x float> %2340, ptr addrspace(3) %2282, align 8, !dbg !41
  %2341 = insertelement <2 x float> poison, float %2200, i64 0, !dbg !41
  %2342 = insertelement <2 x float> %2341, float %2201, i64 1, !dbg !41
  store <2 x float> %2342, ptr addrspace(3) %2289, align 8, !dbg !41
  %2343 = insertelement <2 x float> poison, float %2202, i64 0, !dbg !41
  %2344 = insertelement <2 x float> %2343, float %2203, i64 1, !dbg !41
  store <2 x float> %2344, ptr addrspace(3) %2292, align 8, !dbg !41
  %2345 = insertelement <2 x float> poison, float %2204, i64 0, !dbg !41
  %2346 = insertelement <2 x float> %2345, float %2205, i64 1, !dbg !41
  store <2 x float> %2346, ptr addrspace(3) %2299, align 8, !dbg !41
  %2347 = insertelement <2 x float> poison, float %2206, i64 0, !dbg !41
  %2348 = insertelement <2 x float> %2347, float %2207, i64 1, !dbg !41
  store <2 x float> %2348, ptr addrspace(3) %2302, align 8, !dbg !41
  %2349 = insertelement <2 x float> poison, float %2208, i64 0, !dbg !41
  %2350 = insertelement <2 x float> %2349, float %2209, i64 1, !dbg !41
  store <2 x float> %2350, ptr addrspace(3) %2309, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2351 = load <4 x i32>, ptr addrspace(3) %2315, align 16, !dbg !41
  %2352 = load <4 x i32>, ptr addrspace(3) %2321, align 16, !dbg !41
  %2353 = load <4 x i32>, ptr addrspace(3) %2327, align 16, !dbg !41
  %2354 = load <4 x i32>, ptr addrspace(3) %2333, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %2316, i64 0, !dbg !41
  %.extract201 = extractelement <4 x i32> %2316, i64 1, !dbg !41
  %.extract202 = extractelement <4 x i32> %2316, i64 2, !dbg !41
  %.extract203 = extractelement <4 x i32> %2316, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract201, i32 %.extract202, i32 %.extract203, ptr addrspace(1) %2249, i1 %2265) #2, !dbg !41
  %.extract204 = extractelement <4 x i32> %2322, i64 0, !dbg !41
  %.extract205 = extractelement <4 x i32> %2322, i64 1, !dbg !41
  %.extract206 = extractelement <4 x i32> %2322, i64 2, !dbg !41
  %.extract207 = extractelement <4 x i32> %2322, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract204, i32 %.extract205, i32 %.extract206, i32 %.extract207, ptr addrspace(1) %2251, i1 %2265) #2, !dbg !41
  %.extract208 = extractelement <4 x i32> %2328, i64 0, !dbg !41
  %.extract209 = extractelement <4 x i32> %2328, i64 1, !dbg !41
  %.extract210 = extractelement <4 x i32> %2328, i64 2, !dbg !41
  %.extract211 = extractelement <4 x i32> %2328, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract208, i32 %.extract209, i32 %.extract210, i32 %.extract211, ptr addrspace(1) %2253, i1 %2265) #2, !dbg !41
  %.extract212 = extractelement <4 x i32> %2334, i64 0, !dbg !41
  %.extract213 = extractelement <4 x i32> %2334, i64 1, !dbg !41
  %.extract214 = extractelement <4 x i32> %2334, i64 2, !dbg !41
  %.extract215 = extractelement <4 x i32> %2334, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract212, i32 %.extract213, i32 %.extract214, i32 %.extract215, ptr addrspace(1) %2255, i1 %2265) #2, !dbg !41
  %.extract216 = extractelement <4 x i32> %2351, i64 0, !dbg !41
  %.extract217 = extractelement <4 x i32> %2351, i64 1, !dbg !41
  %.extract218 = extractelement <4 x i32> %2351, i64 2, !dbg !41
  %.extract219 = extractelement <4 x i32> %2351, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract216, i32 %.extract217, i32 %.extract218, i32 %.extract219, ptr addrspace(1) %2257, i1 %2265) #2, !dbg !41
  %.extract220 = extractelement <4 x i32> %2352, i64 0, !dbg !41
  %.extract221 = extractelement <4 x i32> %2352, i64 1, !dbg !41
  %.extract222 = extractelement <4 x i32> %2352, i64 2, !dbg !41
  %.extract223 = extractelement <4 x i32> %2352, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract220, i32 %.extract221, i32 %.extract222, i32 %.extract223, ptr addrspace(1) %2259, i1 %2265) #2, !dbg !41
  %.extract224 = extractelement <4 x i32> %2353, i64 0, !dbg !41
  %.extract225 = extractelement <4 x i32> %2353, i64 1, !dbg !41
  %.extract226 = extractelement <4 x i32> %2353, i64 2, !dbg !41
  %.extract227 = extractelement <4 x i32> %2353, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract224, i32 %.extract225, i32 %.extract226, i32 %.extract227, ptr addrspace(1) %2261, i1 %2265) #2, !dbg !41
  %.extract228 = extractelement <4 x i32> %2354, i64 0, !dbg !41
  %.extract229 = extractelement <4 x i32> %2354, i64 1, !dbg !41
  %.extract230 = extractelement <4 x i32> %2354, i64 2, !dbg !41
  %.extract231 = extractelement <4 x i32> %2354, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract228, i32 %.extract229, i32 %.extract230, i32 %.extract231, ptr addrspace(1) %2263, i1 %2265) #2, !dbg !41
  %2355 = getelementptr i8, ptr addrspace(1) %2248, i64 32768, !dbg !71
  %2356 = getelementptr float, ptr addrspace(1) %2355, i64 %2247, !dbg !71
  %2357 = getelementptr i8, ptr addrspace(1) %2250, i64 32768, !dbg !71
  %2358 = getelementptr float, ptr addrspace(1) %2357, i64 %2247, !dbg !71
  %2359 = getelementptr i8, ptr addrspace(1) %2252, i64 32768, !dbg !71
  %2360 = getelementptr float, ptr addrspace(1) %2359, i64 %2247, !dbg !71
  %2361 = getelementptr i8, ptr addrspace(1) %2254, i64 32768, !dbg !71
  %2362 = getelementptr float, ptr addrspace(1) %2361, i64 %2247, !dbg !71
  %2363 = getelementptr i8, ptr addrspace(1) %2256, i64 32768, !dbg !71
  %2364 = getelementptr float, ptr addrspace(1) %2363, i64 %2247, !dbg !71
  %2365 = getelementptr i8, ptr addrspace(1) %2258, i64 32768, !dbg !71
  %2366 = getelementptr float, ptr addrspace(1) %2365, i64 %2247, !dbg !71
  %2367 = getelementptr i8, ptr addrspace(1) %2260, i64 32768, !dbg !71
  %2368 = getelementptr float, ptr addrspace(1) %2367, i64 %2247, !dbg !71
  %2369 = getelementptr i8, ptr addrspace(1) %2262, i64 32768, !dbg !71
  %2370 = getelementptr float, ptr addrspace(1) %2369, i64 %2247, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %2371 = insertelement <2 x float> poison, float %2210, i64 0, !dbg !71
  %2372 = insertelement <2 x float> %2371, float %2211, i64 1, !dbg !71
  store <2 x float> %2372, ptr addrspace(3) %2273, align 8, !dbg !71
  %2373 = insertelement <2 x float> poison, float %2212, i64 0, !dbg !71
  %2374 = insertelement <2 x float> %2373, float %2213, i64 1, !dbg !71
  store <2 x float> %2374, ptr addrspace(3) %2279, align 8, !dbg !71
  %2375 = insertelement <2 x float> poison, float %2214, i64 0, !dbg !71
  %2376 = insertelement <2 x float> %2375, float %2215, i64 1, !dbg !71
  store <2 x float> %2376, ptr addrspace(3) %2282, align 8, !dbg !71
  %2377 = insertelement <2 x float> poison, float %2216, i64 0, !dbg !71
  %2378 = insertelement <2 x float> %2377, float %2217, i64 1, !dbg !71
  store <2 x float> %2378, ptr addrspace(3) %2289, align 8, !dbg !71
  %2379 = insertelement <2 x float> poison, float %2218, i64 0, !dbg !71
  %2380 = insertelement <2 x float> %2379, float %2219, i64 1, !dbg !71
  store <2 x float> %2380, ptr addrspace(3) %2292, align 8, !dbg !71
  %2381 = insertelement <2 x float> poison, float %2220, i64 0, !dbg !71
  %2382 = insertelement <2 x float> %2381, float %2221, i64 1, !dbg !71
  store <2 x float> %2382, ptr addrspace(3) %2299, align 8, !dbg !71
  %2383 = insertelement <2 x float> poison, float %2222, i64 0, !dbg !71
  %2384 = insertelement <2 x float> %2383, float %2223, i64 1, !dbg !71
  store <2 x float> %2384, ptr addrspace(3) %2302, align 8, !dbg !71
  %2385 = insertelement <2 x float> poison, float %2224, i64 0, !dbg !71
  %2386 = insertelement <2 x float> %2385, float %2225, i64 1, !dbg !71
  store <2 x float> %2386, ptr addrspace(3) %2309, align 8, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %2387 = load <4 x i32>, ptr addrspace(3) %2315, align 16, !dbg !71
  %2388 = load <4 x i32>, ptr addrspace(3) %2321, align 16, !dbg !71
  %2389 = load <4 x i32>, ptr addrspace(3) %2327, align 16, !dbg !71
  %2390 = load <4 x i32>, ptr addrspace(3) %2333, align 16, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %2391 = insertelement <2 x float> poison, float %2226, i64 0, !dbg !71
  %2392 = insertelement <2 x float> %2391, float %2227, i64 1, !dbg !71
  store <2 x float> %2392, ptr addrspace(3) %2273, align 8, !dbg !71
  %2393 = insertelement <2 x float> poison, float %2228, i64 0, !dbg !71
  %2394 = insertelement <2 x float> %2393, float %2229, i64 1, !dbg !71
  store <2 x float> %2394, ptr addrspace(3) %2279, align 8, !dbg !71
  %2395 = insertelement <2 x float> poison, float %2230, i64 0, !dbg !71
  %2396 = insertelement <2 x float> %2395, float %2231, i64 1, !dbg !71
  store <2 x float> %2396, ptr addrspace(3) %2282, align 8, !dbg !71
  %2397 = insertelement <2 x float> poison, float %2232, i64 0, !dbg !71
  %2398 = insertelement <2 x float> %2397, float %2233, i64 1, !dbg !71
  store <2 x float> %2398, ptr addrspace(3) %2289, align 8, !dbg !71
  %2399 = insertelement <2 x float> poison, float %2234, i64 0, !dbg !71
  %2400 = insertelement <2 x float> %2399, float %2235, i64 1, !dbg !71
  store <2 x float> %2400, ptr addrspace(3) %2292, align 8, !dbg !71
  %2401 = insertelement <2 x float> poison, float %2236, i64 0, !dbg !71
  %2402 = insertelement <2 x float> %2401, float %2237, i64 1, !dbg !71
  store <2 x float> %2402, ptr addrspace(3) %2299, align 8, !dbg !71
  %2403 = insertelement <2 x float> poison, float %2238, i64 0, !dbg !71
  %2404 = insertelement <2 x float> %2403, float %2239, i64 1, !dbg !71
  store <2 x float> %2404, ptr addrspace(3) %2302, align 8, !dbg !71
  %2405 = insertelement <2 x float> poison, float %2240, i64 0, !dbg !71
  %2406 = insertelement <2 x float> %2405, float %2241, i64 1, !dbg !71
  store <2 x float> %2406, ptr addrspace(3) %2309, align 8, !dbg !71
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !71
  %2407 = load <4 x i32>, ptr addrspace(3) %2315, align 16, !dbg !71
  %2408 = load <4 x i32>, ptr addrspace(3) %2321, align 16, !dbg !71
  %2409 = load <4 x i32>, ptr addrspace(3) %2327, align 16, !dbg !71
  %2410 = load <4 x i32>, ptr addrspace(3) %2333, align 16, !dbg !71
  %.extract263 = extractelement <4 x i32> %2387, i64 0, !dbg !71
  %.extract264 = extractelement <4 x i32> %2387, i64 1, !dbg !71
  %.extract265 = extractelement <4 x i32> %2387, i64 2, !dbg !71
  %.extract266 = extractelement <4 x i32> %2387, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract263, i32 %.extract264, i32 %.extract265, i32 %.extract266, ptr addrspace(1) %2356, i1 %2265) #2, !dbg !71
  %.extract267 = extractelement <4 x i32> %2388, i64 0, !dbg !71
  %.extract268 = extractelement <4 x i32> %2388, i64 1, !dbg !71
  %.extract269 = extractelement <4 x i32> %2388, i64 2, !dbg !71
  %.extract270 = extractelement <4 x i32> %2388, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract267, i32 %.extract268, i32 %.extract269, i32 %.extract270, ptr addrspace(1) %2358, i1 %2265) #2, !dbg !71
  %.extract271 = extractelement <4 x i32> %2389, i64 0, !dbg !71
  %.extract272 = extractelement <4 x i32> %2389, i64 1, !dbg !71
  %.extract273 = extractelement <4 x i32> %2389, i64 2, !dbg !71
  %.extract274 = extractelement <4 x i32> %2389, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract271, i32 %.extract272, i32 %.extract273, i32 %.extract274, ptr addrspace(1) %2360, i1 %2265) #2, !dbg !71
  %.extract275 = extractelement <4 x i32> %2390, i64 0, !dbg !71
  %.extract276 = extractelement <4 x i32> %2390, i64 1, !dbg !71
  %.extract277 = extractelement <4 x i32> %2390, i64 2, !dbg !71
  %.extract278 = extractelement <4 x i32> %2390, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract275, i32 %.extract276, i32 %.extract277, i32 %.extract278, ptr addrspace(1) %2362, i1 %2265) #2, !dbg !71
  %.extract279 = extractelement <4 x i32> %2407, i64 0, !dbg !71
  %.extract280 = extractelement <4 x i32> %2407, i64 1, !dbg !71
  %.extract281 = extractelement <4 x i32> %2407, i64 2, !dbg !71
  %.extract282 = extractelement <4 x i32> %2407, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract279, i32 %.extract280, i32 %.extract281, i32 %.extract282, ptr addrspace(1) %2364, i1 %2265) #2, !dbg !71
  %.extract283 = extractelement <4 x i32> %2408, i64 0, !dbg !71
  %.extract284 = extractelement <4 x i32> %2408, i64 1, !dbg !71
  %.extract285 = extractelement <4 x i32> %2408, i64 2, !dbg !71
  %.extract286 = extractelement <4 x i32> %2408, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract283, i32 %.extract284, i32 %.extract285, i32 %.extract286, ptr addrspace(1) %2366, i1 %2265) #2, !dbg !71
  %.extract287 = extractelement <4 x i32> %2409, i64 0, !dbg !71
  %.extract288 = extractelement <4 x i32> %2409, i64 1, !dbg !71
  %.extract289 = extractelement <4 x i32> %2409, i64 2, !dbg !71
  %.extract290 = extractelement <4 x i32> %2409, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract287, i32 %.extract288, i32 %.extract289, i32 %.extract290, ptr addrspace(1) %2368, i1 %2265) #2, !dbg !71
  %.extract291 = extractelement <4 x i32> %2410, i64 0, !dbg !71
  %.extract292 = extractelement <4 x i32> %2410, i64 1, !dbg !71
  %.extract293 = extractelement <4 x i32> %2410, i64 2, !dbg !71
  %.extract294 = extractelement <4 x i32> %2410, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract291, i32 %.extract292, i32 %.extract293, i32 %.extract294, ptr addrspace(1) %2370, i1 %2265) #2, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 211, column: 23, scope: !5)
!42 = !DILocation(line: 113, column: 43, scope: !5)
!43 = !DILocation(line: 113, column: 37, scope: !5)
!44 = !DILocation(line: 114, column: 31, scope: !5)
!45 = !DILocation(line: 117, column: 35, scope: !5)
!46 = !DILocation(line: 127, column: 26, scope: !5)
!47 = !DILocation(line: 131, column: 31, scope: !5)
!48 = !DILocation(line: 141, column: 52, scope: !5)
!49 = !DILocation(line: 145, column: 33, scope: !5)
!50 = !DILocation(line: 145, column: 26, scope: !5)
!51 = !DILocation(line: 147, column: 30, scope: !5)
!52 = !DILocation(line: 147, column: 35, scope: !5)
!53 = !DILocation(line: 147, column: 39, scope: !5)
!54 = !DILocation(line: 149, column: 30, scope: !5)
!55 = !DILocation(line: 149, column: 50, scope: !5)
!56 = !DILocation(line: 150, column: 56, scope: !5)
!57 = !DILocation(line: 150, column: 45, scope: !5)
!58 = !DILocation(line: 150, column: 60, scope: !5)
!59 = !DILocation(line: 150, column: 31, scope: !5)
!60 = !DILocation(line: 153, column: 53, scope: !5)
!61 = !DILocation(line: 153, column: 42, scope: !5)
!62 = !DILocation(line: 153, column: 59, scope: !5)
!63 = !DILocation(line: 153, column: 24, scope: !5)
!64 = !DILocation(line: 154, column: 27, scope: !5)
!65 = !DILocation(line: 155, column: 20, scope: !5)
!66 = !DILocation(line: 157, column: 24, scope: !5)
!67 = !DILocation(line: 179, column: 21, scope: !5)
!68 = !DILocation(line: 186, column: 28, scope: !5)
!69 = !DILocation(line: 193, column: 32, scope: !5)
!70 = !DILocation(line: 95, column: 18, scope: !5)
!71 = !DILocation(line: 214, column: 27, scope: !5)
!72 = !DILocation(line: 209, column: 4, scope: !5)
