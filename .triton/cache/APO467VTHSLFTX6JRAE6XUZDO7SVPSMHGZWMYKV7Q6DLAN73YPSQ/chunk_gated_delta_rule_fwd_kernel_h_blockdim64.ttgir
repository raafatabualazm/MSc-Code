#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64xi64, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<4096> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_11 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %cst_12 = arith.constant dense<128> : tensor<1x32xi64, #blocked3> loc(#loc1)
    %cst_13 = arith.constant dense<128> : tensor<1x32xi64, #blocked4> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<1x32xi64, #blocked3> loc(#loc1)
    %cst_15 = arith.constant dense<0> : tensor<1x32xi64, #blocked4> loc(#loc1)
    %cst_16 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_17 = arith.constant dense<0> : tensor<64x1xi64, #blocked4> loc(#loc1)
    %cst_18 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_19 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_20 = arith.constant dense<128> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_21 = arith.constant dense<128> : tensor<64x1xi64, #blocked4> loc(#loc1)
    %cst_22 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_23 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc71)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc72)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c32_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %29 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc26)
    %30 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %31 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %32 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %33 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %34 = arith.extsi %27 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %35 = arith.extsi %29 : tensor<64xi32, #blocked> to tensor<64xi64, #blocked> loc(#loc26)
    %36 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc26)
    %37 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc26)
    %38 = arith.muli %36, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %39 = tt.broadcast %38 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc26)
    %40 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %41 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %42 = arith.extsi %41 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %43 = arith.addi %40, %42 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %44 = tt.expand_dims %43 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi64, #blocked3> loc(#loc26)
    %45 = tt.broadcast %44 : tensor<1x32xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc26)
    %46 = arith.addi %39, %45 : tensor<64x32xi64, #blocked3> loc(#loc26)
    %47 = arith.cmpi sge, %36, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %48 = arith.cmpi sge, %37, %cst_19 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %49 = arith.cmpi slt, %36, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %50 = arith.cmpi slt, %37, %cst_22 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %51 = arith.andi %47, %49 : tensor<64x1xi1, #blocked3> loc(#loc26)
    %52 = arith.andi %48, %50 : tensor<64x1xi1, #blocked1> loc(#loc26)
    %53 = tt.broadcast %51 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc26)
    %54 = arith.cmpi sge, %44, %cst_14 : tensor<1x32xi64, #blocked3> loc(#loc26)
    %55 = arith.cmpi slt, %44, %cst_12 : tensor<1x32xi64, #blocked3> loc(#loc26)
    %56 = arith.andi %54, %55 : tensor<1x32xi1, #blocked3> loc(#loc26)
    %57 = tt.broadcast %56 : tensor<1x32xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc26)
    %58 = arith.andi %53, %57 : tensor<64x32xi1, #blocked3> loc(#loc26)
    %59 = arith.addi %30, %cst_8 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc27)
    %60 = arith.addi %32, %cst_10 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %61 = arith.addi %33, %cst_11 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %62 = tt.expand_dims %59 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc27)
    %63 = tt.expand_dims %60 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc27)
    %64 = arith.muli %62, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %65 = tt.broadcast %64 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc27)
    %66 = arith.addi %65, %45 : tensor<64x32xi64, #blocked3> loc(#loc27)
    %67 = arith.cmpi sge, %62, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %68 = arith.cmpi sge, %63, %cst_19 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %69 = arith.cmpi slt, %62, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %70 = arith.cmpi slt, %63, %cst_22 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %71 = arith.andi %67, %69 : tensor<64x1xi1, #blocked3> loc(#loc27)
    %72 = arith.andi %68, %70 : tensor<64x1xi1, #blocked1> loc(#loc27)
    %73 = tt.broadcast %71 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc27)
    %74 = arith.andi %73, %57 : tensor<64x32xi1, #blocked3> loc(#loc27)
    %75 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %76 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc29)
    %77 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc29)
    %78 = tt.broadcast %77 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %79 = tt.splat %75 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %80 = tt.splat %75 : i64 -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %81 = arith.cmpi sge, %77, %cst_4 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %82 = arith.cmpi slt, %77, %cst_3 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %83 = arith.andi %81, %82 : tensor<1x64xi1, #blocked2> loc(#loc29)
    %84 = tt.broadcast %83 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %85 = tt.expand_dims %61 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc30)
    %86 = tt.broadcast %85 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc30)
    %87 = arith.cmpi sge, %85, %cst_4 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %88 = arith.cmpi slt, %85, %cst_3 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %89 = arith.andi %87, %88 : tensor<1x64xi1, #blocked2> loc(#loc30)
    %90 = tt.broadcast %89 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc30)
    %91 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc31)
    %92 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc32)
    %93 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %94 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %95 = tt.addptr %94, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %96 = tt.splat %95 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %97 = tt.splat %75 : i64 -> tensor<64xi64, #blocked> loc(#loc36)
    %98 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    %99 = tt.broadcast %37 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %100 = tt.broadcast %52 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %101 = tt.splat %75 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %102 = tt.broadcast %63 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc38)
    %103 = tt.broadcast %72 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %105 = ttg.local_alloc : () -> !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %106 = ttg.local_alloc : () -> !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> loc(#loc31)
    %107 = ttg.local_alloc : () -> !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> loc(#loc36)
    %108 = ttg.local_alloc : () -> !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> loc(#loc37)
    %109 = ttg.local_alloc : () -> !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> loc(#loc38)
    %110 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %111 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %112 = arith.muli %111, %cst_6 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %113 = arith.muli %36, %cst_7 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %114 = tt.broadcast %112 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %115 = arith.addi %114, %78 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %116 = tt.addptr %76, %115 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %117 = arith.cmpi sge, %111, %cst_18 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %118 = arith.cmpi slt, %111, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %119 = arith.cmpi slt, %36, %80 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %120 = arith.andi %117, %118 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %121 = arith.andi %47, %119 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %122 = tt.broadcast %120 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %123 = arith.andi %122, %84 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %124 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc29)
    %125 = tt.splat %110 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %126 = arith.andi %125, %123 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %127 = ttg.async_copy_global_to_local %116, %124 mask %126 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc29)
    %128 = ttg.async_commit_group %127 loc(#loc29)
    %129 = arith.addi %114, %86 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %130 = tt.addptr %76, %129 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %131 = arith.andi %122, %90 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %132 = ttg.memdesc_subview %105[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc30)
    %133 = arith.andi %125, %131 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %134 = ttg.async_copy_global_to_local %130, %132 mask %133 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc30)
    %135 = ttg.async_commit_group %134 loc(#loc30)
    %136 = tt.broadcast %113 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc31)
    %137 = arith.addi %136, %45 : tensor<64x32xi64, #blocked3> loc(#loc31)
    %138 = tt.addptr %91, %137 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc31)
    %139 = tt.broadcast %121 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc31)
    %140 = arith.andi %139, %57 : tensor<64x32xi1, #blocked3> loc(#loc31)
    %141 = ttg.memdesc_subview %106[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc31)
    %142 = tt.splat %110 : i1 -> tensor<64x32xi1, #blocked3> loc(#loc39)
    %143 = arith.andi %142, %140 : tensor<64x32xi1, #blocked3> loc(#loc39)
    %144 = ttg.async_copy_global_to_local %138, %141 mask %143 : tensor<64x32x!tt.ptr<bf16>, #blocked3> -> <64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc31)
    %145 = ttg.async_commit_group %144 loc(#loc31)
    %146 = arith.muli %35, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %147 = tt.addptr %96, %146 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %148 = arith.cmpi sge, %35, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %149 = arith.cmpi slt, %35, %97 : tensor<64xi64, #blocked> loc(#loc36)
    %150 = arith.andi %148, %149 : tensor<64xi1, #blocked> loc(#loc36)
    %151 = ttg.memdesc_subview %107[%c0_i32, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
    %152 = tt.splat %110 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %153 = arith.andi %152, %150 : tensor<64xi1, #blocked> loc(#loc39)
    %154 = ttg.async_copy_global_to_local %147, %151 mask %153 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
    %155 = ttg.async_commit_group %154 loc(#loc36)
    %156 = tt.expand_dims %34 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %157 = arith.muli %156, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %158 = tt.broadcast %157 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %159 = arith.addi %99, %158 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %160 = tt.addptr %98, %159 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %161 = arith.cmpi sge, %156, %cst_5 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %162 = arith.cmpi slt, %156, %101 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %163 = arith.andi %161, %162 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %164 = tt.broadcast %163 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %165 = arith.andi %100, %164 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %166 = ttg.memdesc_subview %108[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc37)
    %167 = tt.splat %110 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %168 = arith.andi %167, %165 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %169 = ttg.async_copy_global_to_local %160, %166 mask %168 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc37)
    %170 = ttg.async_commit_group %169 loc(#loc37)
    %171 = arith.addi %102, %158 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %172 = tt.addptr %98, %171 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %173 = arith.andi %103, %164 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %174 = ttg.memdesc_subview %109[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc38)
    %175 = arith.andi %167, %173 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %176 = ttg.async_copy_global_to_local %172, %174 mask %175 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc38)
    %177 = ttg.async_commit_group %176 loc(#loc38)
    %178:12 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_23, %arg10 = %cst_23, %arg11 = %c-1_i32, %arg12 = %128, %arg13 = %135, %arg14 = %145, %arg15 = %137, %arg16 = %140, %arg17 = %c0_i32, %arg18 = %155, %arg19 = %170, %arg20 = %177) -> (tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked3>, tensor<64x32xi1, #blocked3>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %216 = arith.subi %6, %c1_i32 : i32 loc(#loc39)
      %217 = arith.cmpi slt, %arg8, %216 : i32 loc(#loc39)
      %218 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %219 = arith.cmpi sge, %218, %c1_i32 : i32 loc(#loc39)
      %220 = arith.select %219, %c0_i32, %218 : i32 loc(#loc39)
      %221 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %222 = tt.addptr %11, %221 : !tt.ptr<bf16>, i32 loc(#loc41)
      %223 = arith.truncf %arg9 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc42)
      %224 = ttg.local_alloc %223 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc42)
      %225 = tt.splat %222 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc26)
      %226 = tt.addptr %225, %46 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc26)
      %227 = ttg.convert_layout %223 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc26)
      tt.store %226, %227, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc26)
      %228 = arith.truncf %arg10 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc43)
      %229 = ttg.local_alloc %228 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc43)
      %230 = tt.addptr %225, %66 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc27)
      %231 = ttg.convert_layout %228 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc27)
      tt.store %230, %231, %74 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc27)
      %232 = ttg.async_wait %arg12, %arg13, %arg14, %arg18, %arg19, %arg20 {num = 0 : i32} loc(#loc29)
      %233 = ttg.memdesc_subview %104[%220, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc29)
      %234 = ttg.local_load %233 token %232 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %235 = ttg.local_load %224 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc42)
      %236 = tt.dot %234, %235, %cst_23, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc44)
      %237 = ttg.memdesc_subview %105[%220, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc30)
      %238 = ttg.local_load %237 token %232 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc30)
      %239 = ttg.local_load %229 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc43)
      %240 = tt.dot %238, %239, %236, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc45)
      %241 = ttg.memdesc_subview %106[%220, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc31)
      %242 = ttg.local_load %241 token %232 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> -> tensor<64x32xbf16, #mma> loc(#loc46)
      %243 = arith.extf %242 : tensor<64x32xbf16, #mma> to tensor<64x32xf32, #mma> loc(#loc46)
      %244 = arith.subf %243, %240 : tensor<64x32xf32, #mma> loc(#loc46)
      %245 = arith.truncf %244 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc47)
      %246 = ttg.convert_layout %245 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc47)
      %247 = tt.addptr %92, %arg15 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc32)
      tt.store %247, %246, %arg16 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc32)
      %248 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %249 = arith.muli %248, %c64_i32 : i32 loc(#loc49)
      %250 = arith.minsi %249, %arg7 : i32 loc(#loc50)
      %251 = arith.subi %250, %c1_i32 : i32 loc(#loc51)
      %252 = tt.splat %arg17 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %253 = arith.addi %252, %28 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %254 = arith.cmpi slt, %253, %93 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %255 = arith.muli %251, %c32_i32 : i32 loc(#loc53)
      %256 = tt.addptr %94, %255 : !tt.ptr<f32>, i32 loc(#loc54)
      %257 = tt.addptr %256, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %258 = tt.load %257 : !tt.ptr<f32> loc(#loc56)
      %259 = ttg.memdesc_subview %107[%220, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %260 = ttg.local_load %259 token %232 : !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %261 = tt.splat %258 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %262 = arith.subf %261, %260 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %263 = math.exp %262 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %264 = arith.select %254, %263, %cst : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %265 = tt.expand_dims %264 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %266 = tt.broadcast %265 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc61)
      %267 = arith.mulf %244, %266 : tensor<64x32xf32, #mma> loc(#loc61)
      %268 = math.exp %258 : f32 loc(#loc62)
      %269 = tt.splat %268 : f32 -> tensor<64x32xf32, #mma> loc(#loc63)
      %270 = arith.mulf %arg9, %269 : tensor<64x32xf32, #mma> loc(#loc63)
      %271 = arith.mulf %arg10, %269 : tensor<64x32xf32, #mma> loc(#loc64)
      %272 = arith.truncf %267 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc65)
      %273 = ttg.local_alloc %272 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc65)
      %274 = ttg.memdesc_subview %108[%220, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc37)
      %275 = ttg.local_load %274 token %232 : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc37)
      %276 = ttg.local_load %273 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc65)
      %277 = tt.dot %275, %276, %270, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc66)
      %278 = ttg.memdesc_subview %109[%220, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc38)
      %279 = ttg.local_load %278 token %232 : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc38)
      %280 = tt.dot %279, %276, %271, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc67)
      %281 = arith.extsi %249 : i32 to i64 loc(#loc28)
      %282 = tt.splat %281 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %283 = tt.splat %281 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %284 = tt.splat %281 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %285 = tt.splat %281 : i64 -> tensor<64xi64, #blocked> loc(#loc29)
      %286 = arith.addi %282, %31 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %287 = arith.addi %283, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %288 = arith.addi %284, %34 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %289 = arith.addi %285, %35 : tensor<64xi64, #blocked> loc(#loc29)
      %290 = tt.expand_dims %286 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %291 = tt.expand_dims %287 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
      %292 = arith.muli %290, %cst_6 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %293 = arith.muli %291, %cst_7 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %294 = tt.broadcast %292 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
      %295 = arith.addi %294, %78 : tensor<64x64xi64, #blocked2> loc(#loc29)
      %296 = tt.addptr %76, %295 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
      %297 = arith.cmpi sge, %290, %cst_18 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %298 = arith.cmpi sge, %291, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %299 = arith.cmpi slt, %290, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %300 = arith.cmpi slt, %291, %80 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %301 = arith.andi %297, %299 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %302 = arith.andi %298, %300 : tensor<64x1xi1, #blocked3> loc(#loc29)
      %303 = tt.broadcast %301 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
      %304 = arith.andi %303, %84 : tensor<64x64xi1, #blocked2> loc(#loc29)
      %305 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc29)
      %306 = tt.splat %217 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
      %307 = arith.andi %306, %304 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %308 = ttg.async_copy_global_to_local %296, %305 mask %307 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc29)
      %309 = ttg.async_commit_group %308 loc(#loc29)
      %310 = arith.addi %294, %86 : tensor<64x64xi64, #blocked2> loc(#loc30)
      %311 = tt.addptr %76, %310 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
      %312 = arith.andi %303, %90 : tensor<64x64xi1, #blocked2> loc(#loc30)
      %313 = ttg.memdesc_subview %105[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc30)
      %314 = arith.andi %306, %312 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %315 = ttg.async_copy_global_to_local %311, %313 mask %314 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 1x64x64> loc(#loc30)
      %316 = ttg.async_commit_group %315 loc(#loc30)
      %317 = tt.broadcast %293 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc31)
      %318 = arith.addi %317, %45 : tensor<64x32xi64, #blocked3> loc(#loc31)
      %319 = tt.addptr %91, %318 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc31)
      %320 = tt.broadcast %302 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc31)
      %321 = arith.andi %320, %57 : tensor<64x32xi1, #blocked3> loc(#loc31)
      %322 = ttg.memdesc_subview %106[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc31)
      %323 = tt.splat %217 : i1 -> tensor<64x32xi1, #blocked3> loc(#loc39)
      %324 = arith.andi %323, %321 : tensor<64x32xi1, #blocked3> loc(#loc39)
      %325 = ttg.async_copy_global_to_local %319, %322 mask %324 : tensor<64x32x!tt.ptr<bf16>, #blocked3> -> <64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc31)
      %326 = ttg.async_commit_group %325 loc(#loc31)
      %327 = arith.muli %289, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
      %328 = tt.addptr %96, %327 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
      %329 = arith.cmpi sge, %289, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
      %330 = arith.cmpi slt, %289, %97 : tensor<64xi64, #blocked> loc(#loc36)
      %331 = arith.andi %329, %330 : tensor<64xi1, #blocked> loc(#loc36)
      %332 = ttg.memdesc_subview %107[%c0_i32, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %333 = tt.splat %217 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
      %334 = arith.andi %333, %331 : tensor<64xi1, #blocked> loc(#loc39)
      %335 = ttg.async_copy_global_to_local %328, %332 mask %334 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %336 = ttg.async_commit_group %335 loc(#loc36)
      %337 = tt.expand_dims %288 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
      %338 = arith.muli %337, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %339 = tt.broadcast %338 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
      %340 = arith.addi %99, %339 : tensor<64x64xi64, #blocked1> loc(#loc37)
      %341 = tt.addptr %98, %340 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
      %342 = arith.cmpi sge, %337, %cst_5 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %343 = arith.cmpi slt, %337, %101 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %344 = arith.andi %342, %343 : tensor<1x64xi1, #blocked1> loc(#loc37)
      %345 = tt.broadcast %344 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %346 = arith.andi %100, %345 : tensor<64x64xi1, #blocked1> loc(#loc37)
      %347 = ttg.memdesc_subview %108[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc37)
      %348 = tt.splat %217 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %349 = arith.andi %348, %346 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %350 = ttg.async_copy_global_to_local %341, %347 mask %349 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc37)
      %351 = ttg.async_commit_group %350 loc(#loc37)
      %352 = arith.addi %102, %339 : tensor<64x64xi64, #blocked1> loc(#loc38)
      %353 = tt.addptr %98, %352 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
      %354 = arith.andi %103, %345 : tensor<64x64xi1, #blocked1> loc(#loc38)
      %355 = ttg.memdesc_subview %109[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc38)
      %356 = arith.andi %348, %354 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %357 = ttg.async_copy_global_to_local %353, %355 mask %356 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 1x64x64> loc(#loc38)
      %358 = ttg.async_commit_group %357 loc(#loc38)
      scf.yield %277, %280, %220, %309, %316, %326, %318, %321, %249, %336, %351, %358 : tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked3>, tensor<64x32xi1, #blocked3>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %179 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %109 : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %108 : !ttg.memdesc<1x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %107 : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %106 : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %105 : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<1x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %180 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc68)
    %181 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc68)
    %182 = arith.extsi %181 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc68)
    %183 = tt.expand_dims %182 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<64x1xi64, #blocked4> loc(#loc68)
    %184 = arith.muli %183, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc68)
    %185 = tt.broadcast %184 : tensor<64x1xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc68)
    %186 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc68)
    %187 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc68)
    %188 = arith.extsi %187 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc68)
    %189 = arith.addi %186, %188 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc68)
    %190 = tt.expand_dims %189 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi64, #blocked4> loc(#loc68)
    %191 = tt.broadcast %190 : tensor<1x32xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc68)
    %192 = arith.addi %185, %191 : tensor<64x32xi64, #blocked4> loc(#loc68)
    %193 = tt.addptr %180, %192 : tensor<64x32x!tt.ptr<f32>, #blocked4>, tensor<64x32xi64, #blocked4> loc(#loc68)
    %194 = arith.cmpi sge, %183, %cst_17 : tensor<64x1xi64, #blocked4> loc(#loc68)
    %195 = arith.cmpi slt, %183, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc68)
    %196 = arith.andi %194, %195 : tensor<64x1xi1, #blocked4> loc(#loc68)
    %197 = tt.broadcast %196 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc68)
    %198 = arith.cmpi sge, %190, %cst_15 : tensor<1x32xi64, #blocked4> loc(#loc68)
    %199 = arith.cmpi slt, %190, %cst_13 : tensor<1x32xi64, #blocked4> loc(#loc68)
    %200 = arith.andi %198, %199 : tensor<1x32xi1, #blocked4> loc(#loc68)
    %201 = tt.broadcast %200 : tensor<1x32xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc68)
    %202 = arith.andi %197, %201 : tensor<64x32xi1, #blocked4> loc(#loc68)
    %203 = ttg.convert_layout %178#0 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked4> loc(#loc68)
    tt.store %193, %203, %202 : tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc68)
    %204 = arith.addi %182, %cst_9 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc69)
    %205 = tt.expand_dims %204 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<64x1xi64, #blocked4> loc(#loc69)
    %206 = arith.muli %205, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %207 = tt.broadcast %206 : tensor<64x1xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc69)
    %208 = arith.addi %207, %191 : tensor<64x32xi64, #blocked4> loc(#loc69)
    %209 = tt.addptr %180, %208 : tensor<64x32x!tt.ptr<f32>, #blocked4>, tensor<64x32xi64, #blocked4> loc(#loc69)
    %210 = arith.cmpi sge, %205, %cst_17 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %211 = arith.cmpi slt, %205, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %212 = arith.andi %210, %211 : tensor<64x1xi1, #blocked4> loc(#loc69)
    %213 = tt.broadcast %212 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc69)
    %214 = arith.andi %213, %201 : tensor<64x32xi1, #blocked4> loc(#loc69)
    %215 = ttg.convert_layout %178#1 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked4> loc(#loc69)
    tt.store %209, %215, %214 : tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc69)
    tt.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc71 = loc(callsite(#loc7 at #loc8))
#loc72 = loc(callsite(#loc9 at #loc8))
