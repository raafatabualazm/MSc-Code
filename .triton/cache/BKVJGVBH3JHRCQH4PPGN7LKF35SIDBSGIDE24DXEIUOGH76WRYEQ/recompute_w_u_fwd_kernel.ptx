//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<80>;
	.reg .b16 	%rs<37>;
	.reg .b32 	%r<1092>;
	.reg .b64 	%rd<226>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd63, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd62, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd61, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd81, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r118, %ctaid.x;
	ld.param.b64 	%rd82, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r119, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r120, %r119, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r121, %r119, 31;
	ld.param.b64 	%rd83, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r122, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r123, %r120, %r122;
	ld.param.b64 	%rd84, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd85, %r123, 2;
	add.s64 	%rd86, %rd82, %rd85;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd87, %r121, 2;
	add.s64 	%rd88, %rd86, %rd87;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r124, %r118, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd89, %r122;
	cvt.s64.s32 	%rd90, %r124;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r125, %tid.x;
	shr.u32 	%r1, %r125, 5;
	bfe.s32 	%r126, %r125, 5, 1;
	bfe.u32 	%r127, %r125, 3, 4;
	or.b32 	%r128, %r127, 16;
	or.b32 	%r129, %r127, 32;
	or.b32 	%r130, %r127, 48;
	shl.b32 	%r131, %r125, 3;
	and.b32 	%r132, %r131, 56;
	cvt.u64.u32 	%rd91, %r127;
	cvt.u64.u32 	%rd92, %r128;
	cvt.u64.u32 	%rd93, %r129;
	cvt.u64.u32 	%rd94, %r130;
	cvt.u64.u32 	%rd1, %r132;
	or.b64 	%rd95, %rd91, %rd90;
	or.b64 	%rd96, %rd92, %rd90;
	or.b64 	%rd97, %rd93, %rd90;
	or.b64 	%rd98, %rd94, %rd90;
	shl.b64 	%rd2, %rd95, 5;
	shl.b64 	%rd3, %rd96, 5;
	shl.b64 	%rd4, %rd97, 5;
	shl.b64 	%rd5, %rd98, 5;
	shl.b64 	%rd99, %rd95, 6;
	add.s64 	%rd64, %rd88, %rd99;
	shl.b64 	%rd100, %rd96, 6;
	add.s64 	%rd65, %rd88, %rd100;
	shl.b64 	%rd101, %rd97, 6;
	add.s64 	%rd66, %rd88, %rd101;
	shl.b64 	%rd102, %rd98, 6;
	add.s64 	%rd67, %rd88, %rd102;
	setp.gt.s32 	%p32, %r124, -1;
	setp.lt.s64 	%p33, %rd95, %rd89;
	setp.lt.s64 	%p34, %rd96, %rd89;
	setp.lt.s64 	%p35, %rd97, %rd89;
	setp.lt.s64 	%p36, %rd98, %rd89;
	and.pred 	%p72, %p32, %p33;
	and.pred 	%p73, %p32, %p34;
	and.pred 	%p74, %p32, %p35;
	and.pred 	%p75, %p32, %p36;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p72 ld.global.b16 { %rs1 }, [ %rd64 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p73 ld.global.b16 { %rs2 }, [ %rd65 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs3, 0x0;
	@%p74 ld.global.b16 { %rs3 }, [ %rd66 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs4, 0x0;
	@%p75 ld.global.b16 { %rs4 }, [ %rd67 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r123, %r121;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r133, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd103, %r133, 2;
	add.s64 	%rd104, %rd84, %rd103;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd6, %rd95, 12;
	add.s64 	%rd105, %rd104, %rd6;
	mul.wide.u32 	%rd106, %r132, 2;
	add.s64 	%rd68, %rd105, %rd106;
	shl.b64 	%rd7, %rd96, 12;
	add.s64 	%rd107, %rd104, %rd7;
	add.s64 	%rd69, %rd107, %rd106;
	shl.b64 	%rd8, %rd97, 12;
	add.s64 	%rd108, %rd104, %rd8;
	add.s64 	%rd70, %rd108, %rd106;
	shl.b64 	%rd9, %rd98, 12;
	add.s64 	%rd109, %rd104, %rd9;
	add.s64 	%rd71, %rd109, %rd106;
	// begin inline asm
	mov.u32 %r84, 0x0;
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	@%p72 ld.global.v4.b32 { %r84, %r85, %r86, %r87 }, [ %rd68 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r88, 0x0;
	mov.u32 %r89, 0x0;
	mov.u32 %r90, 0x0;
	mov.u32 %r91, 0x0;
	@%p73 ld.global.v4.b32 { %r88, %r89, %r90, %r91 }, [ %rd69 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r92, 0x0;
	mov.u32 %r93, 0x0;
	mov.u32 %r94, 0x0;
	mov.u32 %r95, 0x0;
	@%p74 ld.global.v4.b32 { %r92, %r93, %r94, %r95 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r96, 0x0;
	mov.u32 %r97, 0x0;
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	@%p75 ld.global.v4.b32 { %r96, %r97, %r98, %r99 }, [ %rd71 + 0 ];
	// end inline asm
	and.b32 	%r134, %r126, 288;
	and.b32 	%r135, %r125, 24;
	mul.lo.s32 	%r136, %r135, 9;
	xor.b32 	%r137, %r136, %r132;
	xor.b32 	%r138, %r137, %r134;
	and.b32 	%r139, %r131, 512;
	or.b32 	%r140, %r138, %r139;
	shl.b32 	%r141, %r140, 1;
	mov.b32 	%r142, global_smem;
	add.s32 	%r143, %r142, 25600;
	add.s32 	%r144, %r143, %r141;
	st.shared.v4.b32 	[%r144], {%r84, %r85, %r86, %r87};
	or.b32 	%r145, %r132, 1024;
	xor.b32 	%r146, %r136, %r145;
	xor.b32 	%r147, %r146, %r134;
	or.b32 	%r148, %r147, %r139;
	shl.b32 	%r149, %r148, 1;
	add.s32 	%r150, %r143, %r149;
	st.shared.v4.b32 	[%r150], {%r88, %r89, %r90, %r91};
	or.b32 	%r151, %r132, 2048;
	xor.b32 	%r152, %r136, %r151;
	xor.b32 	%r153, %r152, %r134;
	or.b32 	%r154, %r153, %r139;
	shl.b32 	%r155, %r154, 1;
	add.s32 	%r156, %r143, %r155;
	st.shared.v4.b32 	[%r156], {%r92, %r93, %r94, %r95};
	or.b32 	%r157, %r132, 3072;
	xor.b32 	%r158, %r136, %r157;
	xor.b32 	%r159, %r158, %r134;
	or.b32 	%r160, %r159, %r139;
	shl.b32 	%r161, %r160, 1;
	add.s32 	%r162, %r143, %r161;
	st.shared.v4.b32 	[%r162], {%r96, %r97, %r98, %r99};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r163, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd10, %r163;
	mul.wide.s32 	%rd110, %r163, 2;
	add.s64 	%rd11, %rd81, %rd110;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd12, %rd83, %rd110;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd222, %rd6, %rd1;
	or.b64 	%rd223, %rd7, %rd1;
	or.b64 	%rd224, %rd8, %rd1;
	or.b64 	%rd225, %rd9, %rd1;
	shl.b64 	%rd111, %rd222, 1;
	add.s64 	%rd72, %rd11, %rd111;
	shl.b64 	%rd112, %rd223, 1;
	add.s64 	%rd73, %rd11, %rd112;
	shl.b64 	%rd113, %rd224, 1;
	add.s64 	%rd74, %rd11, %rd113;
	shl.b64 	%rd114, %rd225, 1;
	add.s64 	%rd75, %rd11, %rd114;
	shl.b32 	%r164, %r127, 6;
	or.b32 	%r3, %r164, %r132;
	shl.b32 	%r165, %r3, 1;
	add.s32 	%r600, %r142, %r165;
	add.s32 	%r602, %r600, 2048;
	add.s32 	%r604, %r600, 4096;
	add.s32 	%r606, %r600, 6144;
	selp.b32 	%r8, 16, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r600 + 0 ], [ %rd72 + 0 ], 0x10, %r8;
	// end inline asm
	selp.b32 	%r9, 16, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r602 + 0 ], [ %rd73 + 0 ], 0x10, %r9;
	// end inline asm
	selp.b32 	%r10, 16, 0, %p74;
	// begin inline asm
	cp.async.cg.shared.global [ %r604 + 0 ], [ %rd74 + 0 ], 0x10, %r10;
	// end inline asm
	selp.b32 	%r11, 16, 0, %p75;
	// begin inline asm
	cp.async.cg.shared.global [ %r606 + 0 ], [ %rd75 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd115, %rd1, 64;
	or.b64 	%rd218, %rd6, %rd115;
	or.b64 	%rd219, %rd7, %rd115;
	or.b64 	%rd220, %rd8, %rd115;
	or.b64 	%rd221, %rd9, %rd115;
	add.s64 	%rd76, %rd72, 128;
	add.s64 	%rd77, %rd73, 128;
	add.s64 	%rd78, %rd74, 128;
	add.s64 	%rd79, %rd75, 128;
	bar.sync 	0;
	add.s32 	%r108, %r600, 8192;
	add.s32 	%r110, %r600, 10240;
	add.s32 	%r112, %r600, 12288;
	add.s32 	%r114, %r600, 14336;
	// begin inline asm
	cp.async.cg.shared.global [ %r108 + 0 ], [ %rd76 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r110 + 0 ], [ %rd77 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd78 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd79 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r166, %r142, 16384;
	add.s32 	%r16, %r166, %r141;
	add.s32 	%r17, %r166, %r149;
	add.s32 	%r18, %r166, %r155;
	add.s32 	%r19, %r166, %r161;
	bfe.u32 	%r167, %r143, 4, 14;
	cvt.u64.u32 	%rd116, %r167;
	or.b64 	%rd182, %rd116, 4611686293338849280;
	bfe.u32 	%r168, %r166, 4, 14;
	cvt.u64.u32 	%rd117, %r168;
	or.b64 	%rd183, %rd117, 4611686293338849280;
	add.s32 	%r169, %r142, 25632;
	bfe.u32 	%r170, %r169, 4, 14;
	cvt.u64.u32 	%rd118, %r170;
	or.b64 	%rd184, %rd118, 4611686293338849280;
	add.s32 	%r171, %r142, 18432;
	bfe.u32 	%r172, %r171, 4, 14;
	cvt.u64.u32 	%rd119, %r172;
	or.b64 	%rd185, %rd119, 4611686293338849280;
	add.s32 	%r173, %r142, 25664;
	bfe.u32 	%r174, %r173, 4, 14;
	cvt.u64.u32 	%rd120, %r174;
	or.b64 	%rd186, %rd120, 4611686293338849280;
	add.s32 	%r175, %r142, 20480;
	bfe.u32 	%r176, %r175, 4, 14;
	cvt.u64.u32 	%rd121, %r176;
	or.b64 	%rd187, %rd121, 4611686293338849280;
	add.s32 	%r177, %r142, 25696;
	bfe.u32 	%r178, %r177, 4, 14;
	cvt.u64.u32 	%rd122, %r178;
	or.b64 	%rd188, %rd122, 4611686293338849280;
	add.s32 	%r179, %r142, 22528;
	bfe.u32 	%r180, %r179, 4, 14;
	cvt.u64.u32 	%rd123, %r180;
	or.b64 	%rd189, %rd123, 4611686293338849280;
	shl.b32 	%r181, %r125, 6;
	and.b32 	%r182, %r181, 960;
	shr.u32 	%r183, %r125, 1;
	and.b32 	%r184, %r183, 8;
	or.b32 	%r185, %r182, %r184;
	shl.b32 	%r186, %r125, 5;
	and.b32 	%r187, %r186, 3072;
	or.b32 	%r188, %r185, %r187;
	and.b32 	%r189, %r131, 1016;
	shr.u32 	%r190, %r188, 2;
	and.b32 	%r191, %r190, 1008;
	add.s32 	%r192, %r166, %r191;
	shl.b32 	%r193, %r188, 1;
	add.s32 	%r922, %r192, %r193;
	add.s32 	%r927, %r922, 32;
	add.s32 	%r932, %r922, 64;
	add.s32 	%r937, %r922, 96;
	and.b32 	%r194, %r125, 120;
	shl.b32 	%r195, %r194, 1;
	add.s32 	%r196, %r166, %r195;
	shl.b32 	%r197, %r189, 1;
	add.s32 	%r24, %r196, %r197;
	or.b32 	%r198, %r189, 1024;
	shr.u32 	%r199, %r198, 2;
	and.b32 	%r200, %r199, 496;
	add.s32 	%r201, %r166, %r200;
	add.s32 	%r25, %r201, %r197;
	or.b32 	%r202, %r189, 2048;
	shr.u32 	%r203, %r202, 2;
	and.b32 	%r204, %r203, 752;
	add.s32 	%r205, %r166, %r204;
	add.s32 	%r26, %r205, %r197;
	or.b32 	%r206, %r189, 3072;
	shr.u32 	%r207, %r206, 2;
	and.b32 	%r208, %r207, 1008;
	add.s32 	%r209, %r166, %r208;
	add.s32 	%r27, %r209, %r197;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r30, {%rs1, %rs1};
	mov.b32 	%r34, {%rs2, %rs2};
	mov.b32 	%r38, {%rs3, %rs3};
	mov.b32 	%r42, {%rs4, %rs4};
	mov.b32 	%r1089, 1;
	mov.b32 	%r1088, -1;
	mov.b64 	%rd208, 128;
	mov.pred 	%p37, -1;
	mov.pred 	%p62, %p37;
	mov.pred 	%p63, %p72;
	mov.pred 	%p64, %p73;
	mov.pred 	%p65, %p74;
	mov.pred 	%p66, %p75;
	mov.pred 	%p67, %p72;
	mov.pred 	%p68, %p73;
	mov.pred 	%p69, %p74;
	mov.pred 	%p70, %p75;
	mov.b64 	%rd209, %rd218;
	mov.b64 	%rd210, %rd219;
	mov.b64 	%rd211, %rd220;
	mov.b64 	%rd212, %rd221;
	mov.b64 	%rd213, %rd222;
	mov.b64 	%rd214, %rd223;
	mov.b64 	%rd215, %rd224;
	mov.b64 	%rd216, %rd225;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd37, %rd212;
	mov.b64 	%rd36, %rd211;
	mov.b64 	%rd35, %rd210;
	mov.b64 	%rd34, %rd209;
	mov.pred 	%p9, %p66;
	mov.pred 	%p8, %p65;
	mov.pred 	%p7, %p64;
	mov.pred 	%p6, %p63;
	mov.pred 	%p5, %p62;
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r554, %r1088, 1;
	setp.gt.s32 	%p45, %r554, 1;
	selp.b32 	%r1088, 0, %r554, %p45;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	1;
	bar.sync 	0;
	shl.b32 	%r555, %r1088, 13;
	add.s32 	%r557, %r142, %r555;
	add.s32 	%r559, %r557, %r165;
	ld.shared.v4.b32 	{%r560, %r561, %r562, %r563}, [%r559];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r564, %r563, %r30;
	mul.bf16x2 	%r565, %r562, %r30;
	mul.bf16x2 	%r566, %r561, %r30;
	mul.bf16x2 	%r567, %r560, %r30;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r568, %r569, %r570, %r571}, [%r559+2048];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r572, %r571, %r34;
	mul.bf16x2 	%r573, %r570, %r34;
	mul.bf16x2 	%r574, %r569, %r34;
	mul.bf16x2 	%r575, %r568, %r34;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r576, %r577, %r578, %r579}, [%r559+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r580, %r579, %r38;
	mul.bf16x2 	%r581, %r578, %r38;
	mul.bf16x2 	%r582, %r577, %r38;
	mul.bf16x2 	%r583, %r576, %r38;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r584, %r585, %r586, %r587}, [%r559+6144];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r588, %r587, %r42;
	mul.bf16x2 	%r589, %r586, %r42;
	mul.bf16x2 	%r590, %r585, %r42;
	mul.bf16x2 	%r591, %r584, %r42;
	st.shared.v4.b32 	[%r16], {%r567, %r566, %r565, %r564};
	st.shared.v4.b32 	[%r17], {%r575, %r574, %r573, %r572};
	st.shared.v4.b32 	[%r18], {%r583, %r582, %r581, %r580};
	st.shared.v4.b32 	[%r19], {%r591, %r590, %r589, %r588};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r592, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r316,%r317,%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337}, %rd182, %rd183, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r316,%r317,%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337}, %rd184, %rd185, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r316,%r317,%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337}, %rd186, %rd187, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r316,%r317,%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337}, %rd188, %rd189, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r505, 0;
	mov.b32 	%r469, %r166;
	mov.b32 	%r466, %r143;
	mov.b32 	%r467, %r505;
	mov.b32 	%r468, %r505;
	mov.b32 	%r470, %r505;
	mov.b32 	%r471, %r505;
	// begin inline asm
	// wait for regs: %r306,%r307,%r308,%r309,%r310,%r311,%r312,%r313,%r314,%r315,%r316,%r317,%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r466,%r467,%r468,%r469,%r470,%r471
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r511, %r307, %r306;
	cvt.rn.bf16x2.f32 	%r512, %r309, %r308;
	cvt.rn.bf16x2.f32 	%r513, %r311, %r310;
	cvt.rn.bf16x2.f32 	%r514, %r313, %r312;
	cvt.rn.bf16x2.f32 	%r516, %r315, %r314;
	cvt.rn.bf16x2.f32 	%r517, %r317, %r316;
	cvt.rn.bf16x2.f32 	%r518, %r319, %r318;
	cvt.rn.bf16x2.f32 	%r519, %r321, %r320;
	cvt.rn.bf16x2.f32 	%r521, %r323, %r322;
	cvt.rn.bf16x2.f32 	%r522, %r325, %r324;
	cvt.rn.bf16x2.f32 	%r523, %r327, %r326;
	cvt.rn.bf16x2.f32 	%r524, %r329, %r328;
	cvt.rn.bf16x2.f32 	%r526, %r331, %r330;
	cvt.rn.bf16x2.f32 	%r527, %r333, %r332;
	cvt.rn.bf16x2.f32 	%r528, %r335, %r334;
	cvt.rn.bf16x2.f32 	%r529, %r337, %r336;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd141, %rd213, 1;
	add.s64 	%rd132, %rd12, %rd141;
	shl.b64 	%rd142, %rd214, 1;
	add.s64 	%rd133, %rd12, %rd142;
	shl.b64 	%rd143, %rd215, 1;
	add.s64 	%rd134, %rd12, %rd143;
	shl.b64 	%rd144, %rd216, 1;
	add.s64 	%rd135, %rd12, %rd144;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r922], {%r511, %r512, %r513, %r514};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r927], {%r516, %r517, %r518, %r519};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r932], {%r521, %r522, %r523, %r524};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r937], {%r526, %r527, %r528, %r529};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r534, %r535, %r536, %r537}, [%r25+2048];
	ld.shared.v4.b32 	{%r538, %r539, %r540, %r541}, [%r26+4096];
	ld.shared.v4.b32 	{%r542, %r543, %r544, %r545}, [%r27+6144];
	ld.shared.v4.b32 	{%r530, %r531, %r532, %r533}, [%r24];
	// begin inline asm
	@%p67 st.global.v4.b32 [ %rd132 + 0 ], { %r530, %r531, %r532, %r533 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd133 + 0 ], { %r534, %r535, %r536, %r537 };
	// end inline asm
	// begin inline asm
	@%p69 st.global.v4.b32 [ %rd134 + 0 ], { %r538, %r539, %r540, %r541 };
	// end inline asm
	// begin inline asm
	@%p70 st.global.v4.b32 [ %rd135 + 0 ], { %r542, %r543, %r544, %r545 };
	// end inline asm
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r593, %r1089, 1;
	setp.gt.s32 	%p46, %r593, 1;
	selp.b32 	%r1089, 0, %r593, %p46;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd145, %rd208, %rd1;
	or.b64 	%rd209, %rd145, %rd6;
	or.b64 	%rd210, %rd145, %rd7;
	or.b64 	%rd211, %rd145, %rd8;
	or.b64 	%rd212, %rd145, %rd9;
	shl.b64 	%rd146, %rd209, 1;
	add.s64 	%rd136, %rd11, %rd146;
	shl.b64 	%rd147, %rd210, 1;
	add.s64 	%rd137, %rd11, %rd147;
	shl.b64 	%rd148, %rd211, 1;
	add.s64 	%rd138, %rd11, %rd148;
	shl.b64 	%rd149, %rd212, 1;
	add.s64 	%rd139, %rd11, %rd149;
	shl.b32 	%r594, %r1089, 13;
	add.s32 	%r595, %r142, %r594;
	add.s32 	%r546, %r595, %r165;
	add.s32 	%r548, %r546, 2048;
	add.s32 	%r550, %r546, 4096;
	add.s32 	%r552, %r546, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r546 + 0 ], [ %rd136 + 0 ], 0x10, %r505;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r548 + 0 ], [ %rd137 + 0 ], 0x10, %r505;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r550 + 0 ], [ %rd138 + 0 ], 0x10, %r505;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r552 + 0 ], [ %rd139 + 0 ], 0x10, %r505;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd208, 192;
	mov.pred 	%p62, 0;
	mov.pred 	%p63, %p62;
	mov.pred 	%p64, %p62;
	mov.pred 	%p65, %p62;
	mov.pred 	%p66, %p62;
	mov.pred 	%p67, %p6;
	mov.pred 	%p68, %p7;
	mov.pred 	%p69, %p8;
	mov.pred 	%p70, %p9;
	mov.b64 	%rd213, %rd34;
	mov.b64 	%rd214, %rd35;
	mov.b64 	%rd215, %rd36;
	mov.b64 	%rd216, %rd37;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p5 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd163, %r2, 4;
	add.s64 	%rd164, %rd63, %rd163;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd165, %rd2, 2;
	add.s64 	%rd150, %rd164, %rd165;
	shl.b64 	%rd166, %rd3, 2;
	add.s64 	%rd151, %rd164, %rd166;
	shl.b64 	%rd167, %rd4, 2;
	add.s64 	%rd152, %rd164, %rd167;
	shl.b64 	%rd168, %rd5, 2;
	add.s64 	%rd153, %rd164, %rd168;
	// begin inline asm
	mov.u32 %r596, 0x0;
	@%p72 ld.global.b32 { %r596 }, [ %rd150 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r597, 0x0;
	@%p73 ld.global.b32 { %r597 }, [ %rd151 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r598, 0x0;
	@%p74 ld.global.b32 { %r598 }, [ %rd152 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r599, 0x0;
	@%p75 ld.global.b32 { %r599 }, [ %rd153 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r618, %r596, 0f3FB8AA3B;
	ex2.approx.f32 	%r48, %r618;
	mul.f32 	%r619, %r597, 0f3FB8AA3B;
	ex2.approx.f32 	%r56, %r619;
	mul.f32 	%r620, %r598, 0f3FB8AA3B;
	ex2.approx.f32 	%r64, %r620;
	mul.f32 	%r621, %r599, 0f3FB8AA3B;
	ex2.approx.f32 	%r72, %r621;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd169, %rd10, 1;
	add.s64 	%rd46, %rd61, %rd169;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd47, %rd62, %rd169;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd154, %rd46, %rd111;
	add.s64 	%rd155, %rd46, %rd112;
	add.s64 	%rd156, %rd46, %rd113;
	add.s64 	%rd157, %rd46, %rd114;
	// begin inline asm
	cp.async.cg.shared.global [ %r600 + 0 ], [ %rd154 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r602 + 0 ], [ %rd155 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r604 + 0 ], [ %rd156 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r606 + 0 ], [ %rd157 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd158, %rd154, 128;
	add.s64 	%rd159, %rd155, 128;
	add.s64 	%rd160, %rd156, 128;
	add.s64 	%rd161, %rd157, 128;
	bar.sync 	0;
	// begin inline asm
	cp.async.cg.shared.global [ %r108 + 0 ], [ %rd158 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r110 + 0 ], [ %rd159 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd160 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd161 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1091, 1;
	mov.b32 	%r1090, -1;
	mov.b64 	%rd217, 128;
	mov.pred 	%p52, -1;
	mov.pred 	%p71, %p52;
	mov.pred 	%p76, %p72;
	mov.pred 	%p77, %p73;
	mov.pred 	%p78, %p74;
	mov.pred 	%p79, %p75;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd52, %rd221;
	mov.b64 	%rd51, %rd220;
	mov.b64 	%rd50, %rd219;
	mov.b64 	%rd49, %rd218;
	mov.pred 	%p18, %p75;
	mov.pred 	%p17, %p74;
	mov.pred 	%p16, %p73;
	mov.pred 	%p15, %p72;
	mov.pred 	%p14, %p71;
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r966, %r1090, 1;
	setp.gt.s32 	%p60, %r966, 1;
	selp.b32 	%r1090, 0, %r966, %p60;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	1;
	bar.sync 	0;
	shl.b32 	%r967, %r1090, 13;
	add.s32 	%r969, %r142, %r967;
	add.s32 	%r971, %r969, %r165;
	ld.shared.v4.b32 	{%r972, %r973, %r974, %r975}, [%r971];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r976, %r972, %r30;
	mul.bf16x2 	%r977, %r973, %r30;
	mul.bf16x2 	%r978, %r974, %r30;
	mul.bf16x2 	%r979, %r975, %r30;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs5, %rs6}, %r979;
	cvt.f32.bf16 	%r980, %rs6;
	cvt.f32.bf16 	%r981, %rs5;
	mov.b32 	{%rs7, %rs8}, %r978;
	cvt.f32.bf16 	%r982, %rs8;
	cvt.f32.bf16 	%r983, %rs7;
	mov.b32 	{%rs9, %rs10}, %r977;
	cvt.f32.bf16 	%r984, %rs10;
	cvt.f32.bf16 	%r985, %rs9;
	mov.b32 	{%rs11, %rs12}, %r976;
	cvt.f32.bf16 	%r986, %rs12;
	cvt.f32.bf16 	%r987, %rs11;
	mul.f32 	%r988, %r48, %r987;
	mul.f32 	%r989, %r48, %r986;
	mul.f32 	%r990, %r48, %r985;
	mul.f32 	%r991, %r48, %r984;
	mul.f32 	%r992, %r48, %r983;
	mul.f32 	%r993, %r48, %r982;
	mul.f32 	%r994, %r48, %r981;
	mul.f32 	%r995, %r48, %r980;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r996, %r995, %r994;
	cvt.rn.bf16x2.f32 	%r997, %r993, %r992;
	cvt.rn.bf16x2.f32 	%r998, %r991, %r990;
	cvt.rn.bf16x2.f32 	%r999, %r989, %r988;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1000, %r1001, %r1002, %r1003}, [%r971+2048];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1004, %r1000, %r34;
	mul.bf16x2 	%r1005, %r1001, %r34;
	mul.bf16x2 	%r1006, %r1002, %r34;
	mul.bf16x2 	%r1007, %r1003, %r34;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs13, %rs14}, %r1007;
	cvt.f32.bf16 	%r1008, %rs14;
	cvt.f32.bf16 	%r1009, %rs13;
	mov.b32 	{%rs15, %rs16}, %r1006;
	cvt.f32.bf16 	%r1010, %rs16;
	cvt.f32.bf16 	%r1011, %rs15;
	mov.b32 	{%rs17, %rs18}, %r1005;
	cvt.f32.bf16 	%r1012, %rs18;
	cvt.f32.bf16 	%r1013, %rs17;
	mov.b32 	{%rs19, %rs20}, %r1004;
	cvt.f32.bf16 	%r1014, %rs20;
	cvt.f32.bf16 	%r1015, %rs19;
	mul.f32 	%r1016, %r56, %r1015;
	mul.f32 	%r1017, %r56, %r1014;
	mul.f32 	%r1018, %r56, %r1013;
	mul.f32 	%r1019, %r56, %r1012;
	mul.f32 	%r1020, %r56, %r1011;
	mul.f32 	%r1021, %r56, %r1010;
	mul.f32 	%r1022, %r56, %r1009;
	mul.f32 	%r1023, %r56, %r1008;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1024, %r1023, %r1022;
	cvt.rn.bf16x2.f32 	%r1025, %r1021, %r1020;
	cvt.rn.bf16x2.f32 	%r1026, %r1019, %r1018;
	cvt.rn.bf16x2.f32 	%r1027, %r1017, %r1016;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1028, %r1029, %r1030, %r1031}, [%r971+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1032, %r1028, %r38;
	mul.bf16x2 	%r1033, %r1029, %r38;
	mul.bf16x2 	%r1034, %r1030, %r38;
	mul.bf16x2 	%r1035, %r1031, %r38;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs21, %rs22}, %r1035;
	cvt.f32.bf16 	%r1036, %rs22;
	cvt.f32.bf16 	%r1037, %rs21;
	mov.b32 	{%rs23, %rs24}, %r1034;
	cvt.f32.bf16 	%r1038, %rs24;
	cvt.f32.bf16 	%r1039, %rs23;
	mov.b32 	{%rs25, %rs26}, %r1033;
	cvt.f32.bf16 	%r1040, %rs26;
	cvt.f32.bf16 	%r1041, %rs25;
	mov.b32 	{%rs27, %rs28}, %r1032;
	cvt.f32.bf16 	%r1042, %rs28;
	cvt.f32.bf16 	%r1043, %rs27;
	mul.f32 	%r1044, %r64, %r1043;
	mul.f32 	%r1045, %r64, %r1042;
	mul.f32 	%r1046, %r64, %r1041;
	mul.f32 	%r1047, %r64, %r1040;
	mul.f32 	%r1048, %r64, %r1039;
	mul.f32 	%r1049, %r64, %r1038;
	mul.f32 	%r1050, %r64, %r1037;
	mul.f32 	%r1051, %r64, %r1036;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1052, %r1051, %r1050;
	cvt.rn.bf16x2.f32 	%r1053, %r1049, %r1048;
	cvt.rn.bf16x2.f32 	%r1054, %r1047, %r1046;
	cvt.rn.bf16x2.f32 	%r1055, %r1045, %r1044;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1056, %r1057, %r1058, %r1059}, [%r971+6144];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1060, %r1056, %r42;
	mul.bf16x2 	%r1061, %r1057, %r42;
	mul.bf16x2 	%r1062, %r1058, %r42;
	mul.bf16x2 	%r1063, %r1059, %r42;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs29, %rs30}, %r1063;
	cvt.f32.bf16 	%r1064, %rs30;
	cvt.f32.bf16 	%r1065, %rs29;
	mov.b32 	{%rs31, %rs32}, %r1062;
	cvt.f32.bf16 	%r1066, %rs32;
	cvt.f32.bf16 	%r1067, %rs31;
	mov.b32 	{%rs33, %rs34}, %r1061;
	cvt.f32.bf16 	%r1068, %rs34;
	cvt.f32.bf16 	%r1069, %rs33;
	mov.b32 	{%rs35, %rs36}, %r1060;
	cvt.f32.bf16 	%r1070, %rs36;
	cvt.f32.bf16 	%r1071, %rs35;
	mul.f32 	%r1072, %r72, %r1071;
	mul.f32 	%r1073, %r72, %r1070;
	mul.f32 	%r1074, %r72, %r1069;
	mul.f32 	%r1075, %r72, %r1068;
	mul.f32 	%r1076, %r72, %r1067;
	mul.f32 	%r1077, %r72, %r1066;
	mul.f32 	%r1078, %r72, %r1065;
	mul.f32 	%r1079, %r72, %r1064;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1080, %r1079, %r1078;
	cvt.rn.bf16x2.f32 	%r1081, %r1077, %r1076;
	cvt.rn.bf16x2.f32 	%r1082, %r1075, %r1074;
	cvt.rn.bf16x2.f32 	%r1083, %r1073, %r1072;
	st.shared.v4.b32 	[%r16], {%r999, %r998, %r997, %r996};
	st.shared.v4.b32 	[%r17], {%r1027, %r1026, %r1025, %r1024};
	st.shared.v4.b32 	[%r18], {%r1055, %r1054, %r1053, %r1052};
	st.shared.v4.b32 	[%r19], {%r1083, %r1082, %r1081, %r1080};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1084, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r732,%r733,%r734,%r735,%r736,%r737,%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749}, %rd182, %rd183, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r732,%r733,%r734,%r735,%r736,%r737,%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749}, %rd184, %rd185, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r732,%r733,%r734,%r735,%r736,%r737,%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749}, %rd186, %rd187, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r732,%r733,%r734,%r735,%r736,%r737,%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749}, %rd188, %rd189, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r917, 0;
	mov.b32 	%r881, %r166;
	mov.b32 	%r878, %r143;
	mov.b32 	%r879, %r917;
	mov.b32 	%r880, %r917;
	mov.b32 	%r882, %r917;
	mov.b32 	%r883, %r917;
	// begin inline asm
	// wait for regs: %r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r732,%r733,%r734,%r735,%r736,%r737,%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r878,%r879,%r880,%r881,%r882,%r883
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r923, %r719, %r718;
	cvt.rn.bf16x2.f32 	%r924, %r721, %r720;
	cvt.rn.bf16x2.f32 	%r925, %r723, %r722;
	cvt.rn.bf16x2.f32 	%r926, %r725, %r724;
	cvt.rn.bf16x2.f32 	%r928, %r727, %r726;
	cvt.rn.bf16x2.f32 	%r929, %r729, %r728;
	cvt.rn.bf16x2.f32 	%r930, %r731, %r730;
	cvt.rn.bf16x2.f32 	%r931, %r733, %r732;
	cvt.rn.bf16x2.f32 	%r933, %r735, %r734;
	cvt.rn.bf16x2.f32 	%r934, %r737, %r736;
	cvt.rn.bf16x2.f32 	%r935, %r739, %r738;
	cvt.rn.bf16x2.f32 	%r936, %r741, %r740;
	cvt.rn.bf16x2.f32 	%r938, %r743, %r742;
	cvt.rn.bf16x2.f32 	%r939, %r745, %r744;
	cvt.rn.bf16x2.f32 	%r940, %r747, %r746;
	cvt.rn.bf16x2.f32 	%r941, %r749, %r748;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd199, %rd222, 1;
	add.s64 	%rd190, %rd47, %rd199;
	shl.b64 	%rd200, %rd223, 1;
	add.s64 	%rd191, %rd47, %rd200;
	shl.b64 	%rd201, %rd224, 1;
	add.s64 	%rd192, %rd47, %rd201;
	shl.b64 	%rd202, %rd225, 1;
	add.s64 	%rd193, %rd47, %rd202;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r922], {%r923, %r924, %r925, %r926};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r927], {%r928, %r929, %r930, %r931};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r932], {%r933, %r934, %r935, %r936};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r937], {%r938, %r939, %r940, %r941};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r946, %r947, %r948, %r949}, [%r25+2048];
	ld.shared.v4.b32 	{%r950, %r951, %r952, %r953}, [%r26+4096];
	ld.shared.v4.b32 	{%r954, %r955, %r956, %r957}, [%r27+6144];
	ld.shared.v4.b32 	{%r942, %r943, %r944, %r945}, [%r24];
	// begin inline asm
	@%p76 st.global.v4.b32 [ %rd190 + 0 ], { %r942, %r943, %r944, %r945 };
	// end inline asm
	// begin inline asm
	@%p77 st.global.v4.b32 [ %rd191 + 0 ], { %r946, %r947, %r948, %r949 };
	// end inline asm
	// begin inline asm
	@%p78 st.global.v4.b32 [ %rd192 + 0 ], { %r950, %r951, %r952, %r953 };
	// end inline asm
	// begin inline asm
	@%p79 st.global.v4.b32 [ %rd193 + 0 ], { %r954, %r955, %r956, %r957 };
	// end inline asm
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r1085, %r1091, 1;
	setp.gt.s32 	%p61, %r1085, 1;
	selp.b32 	%r1091, 0, %r1085, %p61;
	.loc	1 195 22                        // wy_fast.py:195:22
	or.b64 	%rd203, %rd217, %rd1;
	or.b64 	%rd218, %rd203, %rd6;
	or.b64 	%rd219, %rd203, %rd7;
	or.b64 	%rd220, %rd203, %rd8;
	or.b64 	%rd221, %rd203, %rd9;
	shl.b64 	%rd204, %rd218, 1;
	add.s64 	%rd194, %rd46, %rd204;
	shl.b64 	%rd205, %rd219, 1;
	add.s64 	%rd195, %rd46, %rd205;
	shl.b64 	%rd206, %rd220, 1;
	add.s64 	%rd196, %rd46, %rd206;
	shl.b64 	%rd207, %rd221, 1;
	add.s64 	%rd197, %rd46, %rd207;
	shl.b32 	%r1086, %r1091, 13;
	add.s32 	%r1087, %r142, %r1086;
	add.s32 	%r958, %r1087, %r165;
	add.s32 	%r960, %r958, 2048;
	add.s32 	%r962, %r958, 4096;
	add.s32 	%r964, %r958, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r958 + 0 ], [ %rd194 + 0 ], 0x10, %r917;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r960 + 0 ], [ %rd195 + 0 ], 0x10, %r917;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r962 + 0 ], [ %rd196 + 0 ], 0x10, %r917;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r964 + 0 ], [ %rd197 + 0 ], 0x10, %r917;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd217, 192;
	mov.pred 	%p71, 0;
	mov.pred 	%p72, %p71;
	mov.pred 	%p73, %p71;
	mov.pred 	%p74, %p71;
	mov.pred 	%p75, %p71;
	mov.pred 	%p76, %p15;
	mov.pred 	%p77, %p16;
	mov.pred 	%p78, %p17;
	mov.pred 	%p79, %p18;
	mov.b64 	%rd222, %rd49;
	mov.b64 	%rd223, %rd50;
	mov.b64 	%rd224, %rd51;
	mov.b64 	%rd225, %rd52;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p14 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
