; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 5, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = lshr i32 %33, 5, !dbg !29
  %35 = lshr i32 %33, 2, !dbg !29
  %36 = and i32 %35, 7, !dbg !29
  %37 = and i32 %33, 32, !dbg !29
  %38 = icmp eq i32 %37, 0, !dbg !29
  %39 = and i32 %35, 15, !dbg !29
  %40 = and i32 %33, 64, !dbg !29
  %41 = lshr exact i32 %40, 2, !dbg !29
  %42 = or disjoint i32 %39, %41, !dbg !29
  %43 = or disjoint i32 %42, 32, !dbg !29
  %44 = lshr i32 %33, 3, !dbg !29
  %45 = and i32 %44, 15, !dbg !29
  %46 = or disjoint i32 %45, 16, !dbg !29
  %47 = or disjoint i32 %45, 32, !dbg !29
  %48 = or disjoint i32 %45, 48, !dbg !29
  %49 = and i32 %33, 1, !dbg !29
  %50 = shl nuw nsw i32 %49, 3, !dbg !29
  %51 = shl nuw nsw i32 %33, 3, !dbg !29
  %52 = and i32 %51, 16, !dbg !29
  %53 = or disjoint i32 %50, %52, !dbg !29
  %54 = and i32 %51, 32, !dbg !29
  %55 = or disjoint i32 %53, %54, !dbg !29
  %56 = lshr i32 %33, 1, !dbg !29
  %57 = and i32 %56, 48, !dbg !29
  %58 = or disjoint i32 %57, %36, !dbg !29
  %59 = or disjoint i32 %58, 8, !dbg !29
  %60 = zext nneg i32 %42 to i64, !dbg !29
  %61 = zext nneg i32 %43 to i64, !dbg !29
  %62 = zext nneg i32 %45 to i64, !dbg !29
  %63 = zext nneg i32 %46 to i64, !dbg !29
  %64 = zext nneg i32 %47 to i64, !dbg !29
  %65 = zext nneg i32 %48 to i64, !dbg !29
  %66 = zext nneg i32 %55 to i64, !dbg !29
  %67 = zext nneg i32 %58 to i64, !dbg !29
  %68 = zext nneg i32 %59 to i64, !dbg !29
  %69 = zext nneg i32 %53 to i64, !dbg !29
  %70 = or disjoint i64 %69, %32, !dbg !29
  %71 = icmp sgt i32 %31, -1, !dbg !29
  %72 = icmp slt i64 %70, 128, !dbg !29
  %73 = and i1 %71, %72, !dbg !29
  %74 = or disjoint i64 %60, 64, !dbg !30
  %75 = or disjoint i64 %61, 64, !dbg !30
  %76 = or disjoint i64 %66, 64, !dbg !30
  %77 = sext i32 %7 to i64, !dbg !31
  %78 = sext i32 %23 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !32
  %80 = zext nneg i32 %12 to i64, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %79, i64 %80, !dbg !33
  %82 = icmp sgt i32 %13, 63, !dbg !34
  %83 = shl nuw nsw i64 %62, 12, !dbg !35
  %84 = shl nuw nsw i64 %63, 12, !dbg !35
  %85 = shl nuw nsw i64 %64, 12, !dbg !35
  %86 = shl nuw nsw i64 %65, 12, !dbg !35
  %87 = shl nuw nsw i64 %60, 12, !dbg !35
  %88 = shl nuw nsw i64 %61, 12, !dbg !35
  %89 = or disjoint i64 %83, %66, !dbg !35
  %90 = or disjoint i64 %84, %66, !dbg !35
  %91 = or disjoint i64 %85, %66, !dbg !35
  %92 = or disjoint i64 %86, %66, !dbg !35
  %93 = getelementptr bfloat, ptr addrspace(1) %29, i64 %89, !dbg !35
  %94 = getelementptr bfloat, ptr addrspace(1) %29, i64 %90, !dbg !35
  %95 = getelementptr bfloat, ptr addrspace(1) %29, i64 %91, !dbg !35
  %96 = getelementptr bfloat, ptr addrspace(1) %29, i64 %92, !dbg !35
  %97 = icmp slt i32 %45, %7, !dbg !35
  %98 = icmp slt i32 %46, %7, !dbg !35
  %99 = icmp slt i32 %47, %7, !dbg !35
  %100 = icmp slt i32 %48, %7, !dbg !35
  %101 = icmp slt i32 %42, %7, !dbg !35
  %102 = icmp slt i32 %43, %7, !dbg !35
  %103 = and i1 %97, %82, !dbg !34
  %104 = and i1 %98, %82, !dbg !34
  %105 = and i1 %99, %82, !dbg !34
  %106 = and i1 %100, %82, !dbg !34
  %107 = select i1 %38, i32 0, i32 288, !dbg !35
  %108 = shl nuw nsw i32 %40, 3, !dbg !35
  %109 = and i32 %33, 24, !dbg !35
  %110 = mul nuw nsw i32 %109, 9, !dbg !35
  %111 = or i32 %110, %107, !dbg !35
  %112 = or disjoint i32 %111, %108, !dbg !35
  %113 = xor i32 %112, %55, !dbg !35
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %113, !dbg !35
  %115 = or disjoint i32 %55, 1024, !dbg !35
  %116 = xor i32 %112, %115, !dbg !35
  %117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %116, !dbg !35
  %118 = or disjoint i32 %55, 2048, !dbg !35
  %119 = xor i32 %112, %118, !dbg !35
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %119, !dbg !35
  %121 = or disjoint i32 %55, 3072, !dbg !35
  %122 = xor i32 %112, %121, !dbg !35
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %122, !dbg !35
  %124 = select i1 %103, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %93, i32 %124) #2, !dbg !35
  %125 = select i1 %104, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %117, ptr addrspace(1) %94, i32 %125) #2, !dbg !35
  %126 = select i1 %105, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %120, ptr addrspace(1) %95, i32 %126) #2, !dbg !35
  %127 = select i1 %106, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %123, ptr addrspace(1) %96, i32 %127) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %128 = or disjoint i64 %76, %83, !dbg !36
  %129 = or disjoint i64 %76, %84, !dbg !36
  %130 = or disjoint i64 %76, %85, !dbg !36
  %131 = or disjoint i64 %76, %86, !dbg !36
  %132 = getelementptr bfloat, ptr addrspace(1) %29, i64 %128, !dbg !36
  %133 = getelementptr bfloat, ptr addrspace(1) %29, i64 %129, !dbg !36
  %134 = getelementptr bfloat, ptr addrspace(1) %29, i64 %130, !dbg !36
  %135 = getelementptr bfloat, ptr addrspace(1) %29, i64 %131, !dbg !36
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %113, !dbg !36
  %137 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %116, !dbg !36
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %119, !dbg !36
  %139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %122, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %136, ptr addrspace(1) %132, i32 %124) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %137, ptr addrspace(1) %133, i32 %125) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %138, ptr addrspace(1) %134, i32 %126) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %139, ptr addrspace(1) %135, i32 %127) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %140 = add nsw i64 %87, %70, !dbg !37
  %141 = add nsw i64 %88, %70, !dbg !37
  %142 = getelementptr bfloat, ptr addrspace(1) %27, i64 %140, !dbg !37
  %143 = getelementptr bfloat, ptr addrspace(1) %27, i64 %141, !dbg !37
  %144 = and i1 %73, %101, !dbg !37
  %145 = and i1 %73, %102, !dbg !37
  %146 = and i1 %82, %144, !dbg !34
  %147 = and i1 %82, %145, !dbg !34
  %and.ra = and i32 %33, 24, !dbg !37
  %148 = xor i32 %53, %and.ra, !dbg !37
  %149 = shl nuw nsw i32 %42, 5, !dbg !37
  %150 = or disjoint i32 %148, %149, !dbg !37
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %150, !dbg !37
  %152 = or disjoint i32 %150, 1024, !dbg !37
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %152, !dbg !37
  %154 = select i1 %146, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %151, ptr addrspace(1) %142, i32 %154) #2, !dbg !37
  %155 = select i1 %147, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %153, ptr addrspace(1) %143, i32 %155) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx = shl nuw nsw i64 %67, 7, !dbg !38
  %156 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx, !dbg !38
  %.idx5 = shl nuw nsw i64 %68, 7, !dbg !38
  %157 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx5, !dbg !38
  %158 = icmp slt i32 %58, %7, !dbg !38
  %159 = icmp slt i32 %59, %7, !dbg !38
  %160 = and i1 %158, %82, !dbg !34
  %161 = and i1 %159, %82, !dbg !34
  %162 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156672), i32 %58, !dbg !38
  %163 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156672), i32 %59, !dbg !38
  %164 = and i32 %33, 3, !dbg !38
  %165 = icmp eq i32 %164, 0, !dbg !38
  %166 = select i1 %160, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %156, i32 %166, i1 %165) #2, !dbg !38
  %167 = select i1 %161, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %163, ptr addrspace(1) %157, i32 %167, i1 %165) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %168 = getelementptr bfloat, ptr addrspace(1) %28, i64 %89, !dbg !39
  %169 = getelementptr bfloat, ptr addrspace(1) %28, i64 %90, !dbg !39
  %170 = getelementptr bfloat, ptr addrspace(1) %28, i64 %91, !dbg !39
  %171 = getelementptr bfloat, ptr addrspace(1) %28, i64 %92, !dbg !39
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %113, !dbg !39
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %116, !dbg !39
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %119, !dbg !39
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %122, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %172, ptr addrspace(1) %168, i32 %124) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %173, ptr addrspace(1) %169, i32 %125) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %174, ptr addrspace(1) %170, i32 %126) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %175, ptr addrspace(1) %171, i32 %127) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %176 = getelementptr bfloat, ptr addrspace(1) %28, i64 %128, !dbg !40
  %177 = getelementptr bfloat, ptr addrspace(1) %28, i64 %129, !dbg !40
  %178 = getelementptr bfloat, ptr addrspace(1) %28, i64 %130, !dbg !40
  %179 = getelementptr bfloat, ptr addrspace(1) %28, i64 %131, !dbg !40
  %180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %113, !dbg !40
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %116, !dbg !40
  %182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %119, !dbg !40
  %183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %122, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %180, ptr addrspace(1) %176, i32 %124) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %181, ptr addrspace(1) %177, i32 %125) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %182, ptr addrspace(1) %178, i32 %126) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %183, ptr addrspace(1) %179, i32 %127) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %184 = icmp sgt i32 %13, 127, !dbg !34
  %185 = or disjoint i64 %62, 64, !dbg !35
  %186 = or disjoint i64 %63, 64, !dbg !35
  %187 = or disjoint i64 %64, 64, !dbg !35
  %188 = or disjoint i64 %65, 64, !dbg !35
  %189 = or disjoint i64 %67, 64, !dbg !35
  %190 = or disjoint i64 %68, 64, !dbg !35
  %191 = shl nuw nsw i64 %185, 12, !dbg !35
  %192 = shl nuw nsw i64 %186, 12, !dbg !35
  %193 = shl nuw nsw i64 %187, 12, !dbg !35
  %194 = shl nuw nsw i64 %188, 12, !dbg !35
  %195 = shl nuw nsw i64 %74, 12, !dbg !35
  %196 = shl nuw nsw i64 %75, 12, !dbg !35
  %197 = or disjoint i64 %191, %66, !dbg !35
  %198 = or disjoint i64 %192, %66, !dbg !35
  %199 = or disjoint i64 %193, %66, !dbg !35
  %200 = or disjoint i64 %194, %66, !dbg !35
  %201 = getelementptr bfloat, ptr addrspace(1) %29, i64 %197, !dbg !35
  %202 = getelementptr bfloat, ptr addrspace(1) %29, i64 %198, !dbg !35
  %203 = getelementptr bfloat, ptr addrspace(1) %29, i64 %199, !dbg !35
  %204 = getelementptr bfloat, ptr addrspace(1) %29, i64 %200, !dbg !35
  %205 = icmp slt i64 %185, %77, !dbg !35
  %206 = icmp slt i64 %186, %77, !dbg !35
  %207 = icmp slt i64 %187, %77, !dbg !35
  %208 = icmp slt i64 %188, %77, !dbg !35
  %209 = icmp slt i64 %74, %77, !dbg !35
  %210 = icmp slt i64 %75, %77, !dbg !35
  %211 = and i1 %184, %205, !dbg !34
  %212 = and i1 %184, %206, !dbg !34
  %213 = and i1 %184, %207, !dbg !34
  %214 = and i1 %184, %208, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %113, !dbg !35
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %116, !dbg !35
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %119, !dbg !35
  %218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %122, !dbg !35
  %219 = select i1 %211, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %215, ptr addrspace(1) %201, i32 %219) #2, !dbg !35
  %220 = select i1 %212, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %216, ptr addrspace(1) %202, i32 %220) #2, !dbg !35
  %221 = select i1 %213, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %217, ptr addrspace(1) %203, i32 %221) #2, !dbg !35
  %222 = select i1 %214, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %218, ptr addrspace(1) %204, i32 %222) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %223 = or disjoint i64 %76, %191, !dbg !36
  %224 = or disjoint i64 %192, %76, !dbg !36
  %225 = or disjoint i64 %193, %76, !dbg !36
  %226 = or disjoint i64 %194, %76, !dbg !36
  %227 = getelementptr bfloat, ptr addrspace(1) %29, i64 %223, !dbg !36
  %228 = getelementptr bfloat, ptr addrspace(1) %29, i64 %224, !dbg !36
  %229 = getelementptr bfloat, ptr addrspace(1) %29, i64 %225, !dbg !36
  %230 = getelementptr bfloat, ptr addrspace(1) %29, i64 %226, !dbg !36
  %231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %113, !dbg !36
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %116, !dbg !36
  %233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %119, !dbg !36
  %234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %122, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %231, ptr addrspace(1) %227, i32 %219) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %232, ptr addrspace(1) %228, i32 %220) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %233, ptr addrspace(1) %229, i32 %221) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %234, ptr addrspace(1) %230, i32 %222) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %235 = add nsw i64 %195, %70, !dbg !37
  %236 = add nsw i64 %196, %70, !dbg !37
  %237 = getelementptr bfloat, ptr addrspace(1) %27, i64 %235, !dbg !37
  %238 = getelementptr bfloat, ptr addrspace(1) %27, i64 %236, !dbg !37
  %239 = and i1 %73, %209, !dbg !37
  %240 = and i1 %73, %210, !dbg !37
  %241 = and i1 %184, %239, !dbg !34
  %242 = and i1 %184, %240, !dbg !34
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), i32 %150, !dbg !37
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 135168), i32 %152, !dbg !37
  %245 = select i1 %241, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %243, ptr addrspace(1) %237, i32 %245) #2, !dbg !37
  %246 = select i1 %242, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %238, i32 %246) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx6 = shl nuw nsw i64 %189, 7, !dbg !38
  %247 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx6, !dbg !38
  %.idx7 = shl nuw nsw i64 %190, 7, !dbg !38
  %248 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx7, !dbg !38
  %249 = icmp slt i64 %189, %77, !dbg !38
  %250 = icmp slt i64 %190, %77, !dbg !38
  %251 = and i1 %184, %249, !dbg !34
  %252 = and i1 %184, %250, !dbg !34
  %253 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156928), i32 %58, !dbg !38
  %254 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156928), i32 %59, !dbg !38
  %255 = select i1 %251, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %253, ptr addrspace(1) %247, i32 %255, i1 %165) #2, !dbg !38
  %256 = select i1 %252, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %254, ptr addrspace(1) %248, i32 %256, i1 %165) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %257 = getelementptr bfloat, ptr addrspace(1) %28, i64 %197, !dbg !39
  %258 = getelementptr bfloat, ptr addrspace(1) %28, i64 %198, !dbg !39
  %259 = getelementptr bfloat, ptr addrspace(1) %28, i64 %199, !dbg !39
  %260 = getelementptr bfloat, ptr addrspace(1) %28, i64 %200, !dbg !39
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %113, !dbg !39
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %116, !dbg !39
  %263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %119, !dbg !39
  %264 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %122, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %261, ptr addrspace(1) %257, i32 %219) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %262, ptr addrspace(1) %258, i32 %220) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %263, ptr addrspace(1) %259, i32 %221) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %264, ptr addrspace(1) %260, i32 %222) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %265 = getelementptr bfloat, ptr addrspace(1) %28, i64 %223, !dbg !40
  %266 = getelementptr bfloat, ptr addrspace(1) %28, i64 %224, !dbg !40
  %267 = getelementptr bfloat, ptr addrspace(1) %28, i64 %225, !dbg !40
  %268 = getelementptr bfloat, ptr addrspace(1) %28, i64 %226, !dbg !40
  %269 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %113, !dbg !40
  %270 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %116, !dbg !40
  %271 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %119, !dbg !40
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %122, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %269, ptr addrspace(1) %265, i32 %219) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %270, ptr addrspace(1) %266, i32 %220) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %271, ptr addrspace(1) %267, i32 %221) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %272, ptr addrspace(1) %268, i32 %222) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %273 = icmp sgt i32 %13, 191, !dbg !34
  %274 = or disjoint i64 %62, 128, !dbg !35
  %275 = or disjoint i64 %63, 128, !dbg !35
  %276 = or disjoint i64 %64, 128, !dbg !35
  %277 = or disjoint i64 %65, 128, !dbg !35
  %278 = or disjoint i64 %60, 128, !dbg !35
  %279 = or disjoint i64 %61, 128, !dbg !35
  %280 = or disjoint i64 %67, 128, !dbg !35
  %281 = or disjoint i64 %68, 128, !dbg !35
  %282 = shl nuw nsw i64 %274, 12, !dbg !35
  %283 = shl nuw nsw i64 %275, 12, !dbg !35
  %284 = shl nuw nsw i64 %276, 12, !dbg !35
  %285 = shl nuw nsw i64 %277, 12, !dbg !35
  %286 = shl nuw nsw i64 %278, 12, !dbg !35
  %287 = shl nuw nsw i64 %279, 12, !dbg !35
  %288 = or disjoint i64 %282, %66, !dbg !35
  %289 = or disjoint i64 %283, %66, !dbg !35
  %290 = or disjoint i64 %284, %66, !dbg !35
  %291 = or disjoint i64 %285, %66, !dbg !35
  %292 = getelementptr bfloat, ptr addrspace(1) %29, i64 %288, !dbg !35
  %293 = getelementptr bfloat, ptr addrspace(1) %29, i64 %289, !dbg !35
  %294 = getelementptr bfloat, ptr addrspace(1) %29, i64 %290, !dbg !35
  %295 = getelementptr bfloat, ptr addrspace(1) %29, i64 %291, !dbg !35
  %296 = icmp slt i64 %274, %77, !dbg !35
  %297 = icmp slt i64 %275, %77, !dbg !35
  %298 = icmp slt i64 %276, %77, !dbg !35
  %299 = icmp slt i64 %277, %77, !dbg !35
  %300 = icmp slt i64 %278, %77, !dbg !35
  %301 = icmp slt i64 %279, %77, !dbg !35
  %302 = and i1 %273, %296, !dbg !34
  %303 = and i1 %273, %297, !dbg !34
  %304 = and i1 %273, %298, !dbg !34
  %305 = and i1 %273, %299, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %113, !dbg !35
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %116, !dbg !35
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %119, !dbg !35
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %122, !dbg !35
  %310 = select i1 %302, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %306, ptr addrspace(1) %292, i32 %310) #2, !dbg !35
  %311 = select i1 %303, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %307, ptr addrspace(1) %293, i32 %311) #2, !dbg !35
  %312 = select i1 %304, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %308, ptr addrspace(1) %294, i32 %312) #2, !dbg !35
  %313 = select i1 %305, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %309, ptr addrspace(1) %295, i32 %313) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %314 = or disjoint i64 %76, %282, !dbg !36
  %315 = or disjoint i64 %283, %76, !dbg !36
  %316 = or disjoint i64 %284, %76, !dbg !36
  %317 = or disjoint i64 %285, %76, !dbg !36
  %318 = getelementptr bfloat, ptr addrspace(1) %29, i64 %314, !dbg !36
  %319 = getelementptr bfloat, ptr addrspace(1) %29, i64 %315, !dbg !36
  %320 = getelementptr bfloat, ptr addrspace(1) %29, i64 %316, !dbg !36
  %321 = getelementptr bfloat, ptr addrspace(1) %29, i64 %317, !dbg !36
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %113, !dbg !36
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %116, !dbg !36
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %119, !dbg !36
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %122, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %322, ptr addrspace(1) %318, i32 %310) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %323, ptr addrspace(1) %319, i32 %311) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %324, ptr addrspace(1) %320, i32 %312) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %325, ptr addrspace(1) %321, i32 %313) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %326 = add nsw i64 %286, %70, !dbg !37
  %327 = add nsw i64 %287, %70, !dbg !37
  %328 = getelementptr bfloat, ptr addrspace(1) %27, i64 %326, !dbg !37
  %329 = getelementptr bfloat, ptr addrspace(1) %27, i64 %327, !dbg !37
  %330 = and i1 %73, %300, !dbg !37
  %331 = and i1 %73, %301, !dbg !37
  %332 = and i1 %273, %330, !dbg !34
  %333 = and i1 %273, %331, !dbg !34
  %334 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %150, !dbg !37
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %152, !dbg !37
  %336 = select i1 %332, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %334, ptr addrspace(1) %328, i32 %336) #2, !dbg !37
  %337 = select i1 %333, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %335, ptr addrspace(1) %329, i32 %337) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx8 = shl nuw nsw i64 %280, 7, !dbg !38
  %338 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx8, !dbg !38
  %.idx9 = shl nuw nsw i64 %281, 7, !dbg !38
  %339 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx9, !dbg !38
  %340 = icmp slt i64 %280, %77, !dbg !38
  %341 = icmp slt i64 %281, %77, !dbg !38
  %342 = and i1 %273, %340, !dbg !34
  %343 = and i1 %273, %341, !dbg !34
  %344 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 157184), i32 %58, !dbg !38
  %345 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 157184), i32 %59, !dbg !38
  %346 = select i1 %342, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %344, ptr addrspace(1) %338, i32 %346, i1 %165) #2, !dbg !38
  %347 = select i1 %343, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %345, ptr addrspace(1) %339, i32 %347, i1 %165) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %348 = getelementptr bfloat, ptr addrspace(1) %28, i64 %288, !dbg !39
  %349 = getelementptr bfloat, ptr addrspace(1) %28, i64 %289, !dbg !39
  %350 = getelementptr bfloat, ptr addrspace(1) %28, i64 %290, !dbg !39
  %351 = getelementptr bfloat, ptr addrspace(1) %28, i64 %291, !dbg !39
  %352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %113, !dbg !39
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %116, !dbg !39
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %119, !dbg !39
  %355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %122, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %352, ptr addrspace(1) %348, i32 %310) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %353, ptr addrspace(1) %349, i32 %311) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %354, ptr addrspace(1) %350, i32 %312) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %355, ptr addrspace(1) %351, i32 %313) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %356 = getelementptr bfloat, ptr addrspace(1) %28, i64 %314, !dbg !40
  %357 = getelementptr bfloat, ptr addrspace(1) %28, i64 %315, !dbg !40
  %358 = getelementptr bfloat, ptr addrspace(1) %28, i64 %316, !dbg !40
  %359 = getelementptr bfloat, ptr addrspace(1) %28, i64 %317, !dbg !40
  %360 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %113, !dbg !40
  %361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %116, !dbg !40
  %362 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %119, !dbg !40
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %122, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %360, ptr addrspace(1) %356, i32 %310) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %361, ptr addrspace(1) %357, i32 %311) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %362, ptr addrspace(1) %358, i32 %312) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %363, ptr addrspace(1) %359, i32 %313) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %82, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %364 = add nsw i32 %14, -3
  %365 = shl nuw nsw i32 %49, 5
  %366 = and i32 %33, 6
  %367 = mul nuw nsw i32 %366, 36
  %368 = or i32 %367, %365
  %369 = shl nuw nsw i32 %33, 5
  %370 = and i32 %369, 256
  %371 = or disjoint i32 %368, %370
  %372 = lshr i32 %33, 1
  %373 = and i32 %372, 8
  %374 = xor i32 %371, %373
  %375 = shl nuw nsw i32 %37, 4
  %376 = or disjoint i32 %374, %375
  %377 = shl nuw nsw i32 %40, 4
  %378 = xor i32 %376, %377
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480), i32 %378
  %380 = ptrtoint ptr addrspace(3) %379 to i32
  %381 = xor i32 %378, 16
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480), i32 %381
  %383 = ptrtoint ptr addrspace(3) %382 to i32
  %.idx208 = shl nuw nsw i64 %60, 8
  %.idx209 = shl nuw nsw i64 %61, 8
  %384 = shl nuw nsw i32 %33, 5
  %385 = and i32 %384, 224
  %386 = or disjoint i32 %385, %370
  %387 = or disjoint i32 %386, %373
  %388 = or disjoint i32 %387, %375
  %389 = or disjoint i32 %388, %377
  %390 = and i32 %51, 448
  %391 = or disjoint i32 %55, %390
  %.reass = or disjoint i32 %391, %108
  %392 = lshr exact i32 %389, 2
  %393 = and i32 %392, 1073741816
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 %393
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i32 %389
  %396 = ptrtoint ptr addrspace(3) %395 to i32
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) %395, i32 32
  %398 = ptrtoint ptr addrspace(3) %397 to i32
  %399 = lshr exact i32 %.reass, 2
  %400 = and i32 %399, 1073741816
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 %400
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %401, i32 %.reass
  %403 = xor i32 %.reass, 1024
  %404 = lshr exact i32 %403, 2
  %405 = and i32 %404, 1073741816
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 %405
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %406, i32 %403
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576), i32 %378
  %409 = ptrtoint ptr addrspace(3) %408 to i32
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576), i32 %381
  %411 = ptrtoint ptr addrspace(3) %410 to i32
  %.idx232 = shl nuw nsw i64 %74, 8
  %.idx233 = shl nuw nsw i64 %75, 8
  %412 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480) to i32), 4
  %413 = and i32 %412, 16383
  %414 = zext nneg i32 %413 to i64
  %415 = or disjoint i64 %414, -9223371899399045120
  %416 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480) to i32), i32 1024), 4
  %417 = and i32 %416, 16383
  %418 = zext nneg i32 %417 to i64
  %419 = or disjoint i64 %418, -9223371899399045120
  %420 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480) to i32), i32 2048), 4
  %421 = and i32 %420, 16383
  %422 = zext nneg i32 %421 to i64
  %423 = or disjoint i64 %422, -9223371899399045120
  %424 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480) to i32), i32 3072), 4
  %425 = and i32 %424, 16383
  %426 = zext nneg i32 %425 to i64
  %427 = or disjoint i64 %426, -9223371899399045120
  %428 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576) to i32), 4
  %429 = and i32 %428, 16383
  %430 = zext nneg i32 %429 to i64
  %431 = or disjoint i64 %430, -9223371899399045120
  %432 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576) to i32), i32 1024), 4
  %433 = and i32 %432, 16383
  %434 = zext nneg i32 %433 to i64
  %435 = or disjoint i64 %434, -9223371899399045120
  %436 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576) to i32), i32 2048), 4
  %437 = and i32 %436, 16383
  %438 = zext nneg i32 %437 to i64
  %439 = or disjoint i64 %438, -9223371899399045120
  %440 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576) to i32), i32 3072), 4
  %441 = and i32 %440, 16383
  %442 = zext nneg i32 %441 to i64
  %443 = or disjoint i64 %442, -9223371899399045120
  %444 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 %378
  %445 = ptrtoint ptr addrspace(3) %444 to i32
  %446 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 %381
  %447 = ptrtoint ptr addrspace(3) %446 to i32
  %448 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360) to i32), 4
  %449 = and i32 %448, 16383
  %450 = zext nneg i32 %449 to i64
  %451 = or disjoint i64 %450, -9223371899399045120
  %452 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360) to i32), i32 1024), 4
  %453 = and i32 %452, 16383
  %454 = zext nneg i32 %453 to i64
  %455 = or disjoint i64 %454, -9223371899399045120
  %456 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360) to i32), i32 2048), 4
  %457 = and i32 %456, 16383
  %458 = zext nneg i32 %457 to i64
  %459 = or disjoint i64 %458, -9223371899399045120
  %460 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360) to i32), i32 3072), 4
  %461 = and i32 %460, 16383
  %462 = zext nneg i32 %461 to i64
  %463 = or disjoint i64 %462, -9223371899399045120
  %464 = sext i32 %364 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  %465 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 4
  %466 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 8
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 12
  %468 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 4
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 8
  %470 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 12
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 4
  %472 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 8
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %402, i32 12
  br label %474, !dbg !34

474:                                              ; preds = %.lr.ph, %474
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %474 ]
  %475 = phi i32 [ 128, %.lr.ph ], [ %1242, %474 ]
  %476 = phi i32 [ 64, %.lr.ph ], [ %475, %474 ]
  %477 = phi i32 [ 0, %.lr.ph ], [ %476, %474 ]
  %.pn79348 = phi i1 [ %331, %.lr.ph ], [ %1312, %474 ]
  %.pn95347 = phi i1 [ %330, %.lr.ph ], [ %1311, %474 ]
  %.pn79.pn346 = phi i1 [ %240, %.lr.ph ], [ %.pn79348, %474 ]
  %.pn95.pn345 = phi i1 [ %239, %.lr.ph ], [ %.pn95347, %474 ]
  %.pn79.pn.pn344 = phi i1 [ %145, %.lr.ph ], [ %.pn79.pn346, %474 ]
  %.pn95.pn.pn343 = phi i1 [ %144, %.lr.ph ], [ %.pn95.pn345, %474 ]
  %.pn24342 = phi i64 [ %327, %.lr.ph ], [ %1308, %474 ]
  %.pn40341 = phi i64 [ %326, %.lr.ph ], [ %1307, %474 ]
  %.pn24.pn340 = phi i64 [ %236, %.lr.ph ], [ %.pn24342, %474 ]
  %.pn40.pn339 = phi i64 [ %235, %.lr.ph ], [ %.pn40341, %474 ]
  %.pn24.pn.pn338 = phi i64 [ %141, %.lr.ph ], [ %.pn24.pn340, %474 ]
  %.pn40.pn.pn337 = phi i64 [ %140, %.lr.ph ], [ %.pn40.pn339, %474 ]
  %478 = phi float [ 0.000000e+00, %.lr.ph ], [ %1225, %474 ]
  %479 = phi float [ 0.000000e+00, %.lr.ph ], [ %1226, %474 ]
  %480 = phi float [ 0.000000e+00, %.lr.ph ], [ %1227, %474 ]
  %481 = phi float [ 0.000000e+00, %.lr.ph ], [ %1228, %474 ]
  %482 = phi float [ 0.000000e+00, %.lr.ph ], [ %1229, %474 ]
  %483 = phi float [ 0.000000e+00, %.lr.ph ], [ %1230, %474 ]
  %484 = phi float [ 0.000000e+00, %.lr.ph ], [ %1231, %474 ]
  %485 = phi float [ 0.000000e+00, %.lr.ph ], [ %1232, %474 ]
  %486 = phi float [ 0.000000e+00, %.lr.ph ], [ %1233, %474 ]
  %487 = phi float [ 0.000000e+00, %.lr.ph ], [ %1234, %474 ]
  %488 = phi float [ 0.000000e+00, %.lr.ph ], [ %1235, %474 ]
  %489 = phi float [ 0.000000e+00, %.lr.ph ], [ %1236, %474 ]
  %490 = phi float [ 0.000000e+00, %.lr.ph ], [ %1237, %474 ]
  %491 = phi float [ 0.000000e+00, %.lr.ph ], [ %1238, %474 ]
  %492 = phi float [ 0.000000e+00, %.lr.ph ], [ %1239, %474 ]
  %493 = phi float [ 0.000000e+00, %.lr.ph ], [ %1240, %474 ]
  %494 = phi float [ 0.000000e+00, %.lr.ph ], [ %1119, %474 ]
  %495 = phi float [ 0.000000e+00, %.lr.ph ], [ %1120, %474 ]
  %496 = phi float [ 0.000000e+00, %.lr.ph ], [ %1121, %474 ]
  %497 = phi float [ 0.000000e+00, %.lr.ph ], [ %1122, %474 ]
  %498 = phi float [ 0.000000e+00, %.lr.ph ], [ %1123, %474 ]
  %499 = phi float [ 0.000000e+00, %.lr.ph ], [ %1124, %474 ]
  %500 = phi float [ 0.000000e+00, %.lr.ph ], [ %1125, %474 ]
  %501 = phi float [ 0.000000e+00, %.lr.ph ], [ %1126, %474 ]
  %502 = phi float [ 0.000000e+00, %.lr.ph ], [ %1127, %474 ]
  %503 = phi float [ 0.000000e+00, %.lr.ph ], [ %1128, %474 ]
  %504 = phi float [ 0.000000e+00, %.lr.ph ], [ %1129, %474 ]
  %505 = phi float [ 0.000000e+00, %.lr.ph ], [ %1130, %474 ]
  %506 = phi float [ 0.000000e+00, %.lr.ph ], [ %1131, %474 ]
  %507 = phi float [ 0.000000e+00, %.lr.ph ], [ %1132, %474 ]
  %508 = phi float [ 0.000000e+00, %.lr.ph ], [ %1133, %474 ]
  %509 = phi float [ 0.000000e+00, %.lr.ph ], [ %1134, %474 ]
  %510 = phi <4 x i32> [ <i32 -1, i32 2, i32 -1, i32 2>, %.lr.ph ], [ %620, %474 ]
  %511 = icmp slt i64 %indvars.iv, %464, !dbg !34
  %512 = add <4 x i32> %510, splat (i32 1), !dbg !34
  %513 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %514 = shl i32 %513, 19, !dbg !41
  %515 = sext i32 %514 to i64, !dbg !42
  %516 = getelementptr bfloat, ptr addrspace(1) %21, i64 %515, !dbg !42
  %517 = fptrunc float %494 to bfloat, !dbg !43
  %518 = fptrunc float %495 to bfloat, !dbg !43
  %519 = fptrunc float %496 to bfloat, !dbg !43
  %520 = fptrunc float %497 to bfloat, !dbg !43
  %521 = fptrunc float %498 to bfloat, !dbg !43
  %522 = fptrunc float %499 to bfloat, !dbg !43
  %523 = fptrunc float %500 to bfloat, !dbg !43
  %524 = fptrunc float %501 to bfloat, !dbg !43
  %525 = fptrunc float %502 to bfloat, !dbg !43
  %526 = fptrunc float %503 to bfloat, !dbg !43
  %527 = fptrunc float %504 to bfloat, !dbg !43
  %528 = fptrunc float %505 to bfloat, !dbg !43
  %529 = fptrunc float %506 to bfloat, !dbg !43
  %530 = fptrunc float %507 to bfloat, !dbg !43
  %531 = fptrunc float %508 to bfloat, !dbg !43
  %532 = fptrunc float %509 to bfloat, !dbg !43
  %533 = insertelement <2 x bfloat> poison, bfloat %517, i64 0, !dbg !43
  %534 = insertelement <2 x bfloat> %533, bfloat %518, i64 1, !dbg !43
  %535 = bitcast <2 x bfloat> %534 to i32, !dbg !43
  %536 = insertelement <2 x bfloat> poison, bfloat %519, i64 0, !dbg !43
  %537 = insertelement <2 x bfloat> %536, bfloat %520, i64 1, !dbg !43
  %538 = bitcast <2 x bfloat> %537 to i32, !dbg !43
  %539 = insertelement <2 x bfloat> poison, bfloat %521, i64 0, !dbg !43
  %540 = insertelement <2 x bfloat> %539, bfloat %522, i64 1, !dbg !43
  %541 = bitcast <2 x bfloat> %540 to i32, !dbg !43
  %542 = insertelement <2 x bfloat> poison, bfloat %523, i64 0, !dbg !43
  %543 = insertelement <2 x bfloat> %542, bfloat %524, i64 1, !dbg !43
  %544 = bitcast <2 x bfloat> %543 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %380, i32 %535, i32 %538, i32 %541, i32 %544) #2, !dbg !43
  %545 = insertelement <2 x bfloat> poison, bfloat %525, i64 0, !dbg !43
  %546 = insertelement <2 x bfloat> %545, bfloat %526, i64 1, !dbg !43
  %547 = bitcast <2 x bfloat> %546 to i32, !dbg !43
  %548 = insertelement <2 x bfloat> poison, bfloat %527, i64 0, !dbg !43
  %549 = insertelement <2 x bfloat> %548, bfloat %528, i64 1, !dbg !43
  %550 = bitcast <2 x bfloat> %549 to i32, !dbg !43
  %551 = insertelement <2 x bfloat> poison, bfloat %529, i64 0, !dbg !43
  %552 = insertelement <2 x bfloat> %551, bfloat %530, i64 1, !dbg !43
  %553 = bitcast <2 x bfloat> %552 to i32, !dbg !43
  %554 = insertelement <2 x bfloat> poison, bfloat %531, i64 0, !dbg !43
  %555 = insertelement <2 x bfloat> %554, bfloat %532, i64 1, !dbg !43
  %556 = bitcast <2 x bfloat> %555 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %383, i32 %547, i32 %550, i32 %553, i32 %556) #2, !dbg !43
  %557 = getelementptr i8, ptr addrspace(1) %516, i64 %.idx208, !dbg !29
  %558 = getelementptr bfloat, ptr addrspace(1) %557, i64 %70, !dbg !29
  %559 = getelementptr i8, ptr addrspace(1) %516, i64 %.idx209, !dbg !29
  %560 = getelementptr bfloat, ptr addrspace(1) %559, i64 %70, !dbg !29
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %396, i32 %535, i32 %538, i32 %541, i32 %544) #2, !dbg !29
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %398, i32 %547, i32 %550, i32 %553, i32 %556) #2, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %561 = load <4 x i32>, ptr addrspace(3) %407, align 16, !dbg !29
  %.extract289 = load i32, ptr addrspace(3) %402, align 16, !dbg !29
  %.extract291 = load i32, ptr addrspace(3) %465, align 4, !dbg !29
  %.extract293 = load i32, ptr addrspace(3) %466, align 8, !dbg !29
  %.extract295 = load i32, ptr addrspace(3) %467, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract289, i32 %.extract291, i32 %.extract293, i32 %.extract295, ptr addrspace(1) %558, i1 %73) #2, !dbg !29
  %.extract297 = extractelement <4 x i32> %561, i64 0, !dbg !29
  %.extract299 = extractelement <4 x i32> %561, i64 1, !dbg !29
  %.extract301 = extractelement <4 x i32> %561, i64 2, !dbg !29
  %.extract303 = extractelement <4 x i32> %561, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract297, i32 %.extract299, i32 %.extract301, i32 %.extract303, ptr addrspace(1) %560, i1 %73) #2, !dbg !29
  %562 = fptrunc float %478 to bfloat, !dbg !44
  %563 = fptrunc float %479 to bfloat, !dbg !44
  %564 = fptrunc float %480 to bfloat, !dbg !44
  %565 = fptrunc float %481 to bfloat, !dbg !44
  %566 = fptrunc float %482 to bfloat, !dbg !44
  %567 = fptrunc float %483 to bfloat, !dbg !44
  %568 = fptrunc float %484 to bfloat, !dbg !44
  %569 = fptrunc float %485 to bfloat, !dbg !44
  %570 = fptrunc float %486 to bfloat, !dbg !44
  %571 = fptrunc float %487 to bfloat, !dbg !44
  %572 = fptrunc float %488 to bfloat, !dbg !44
  %573 = fptrunc float %489 to bfloat, !dbg !44
  %574 = fptrunc float %490 to bfloat, !dbg !44
  %575 = fptrunc float %491 to bfloat, !dbg !44
  %576 = fptrunc float %492 to bfloat, !dbg !44
  %577 = fptrunc float %493 to bfloat, !dbg !44
  %578 = insertelement <2 x bfloat> poison, bfloat %562, i64 0, !dbg !44
  %579 = insertelement <2 x bfloat> %578, bfloat %563, i64 1, !dbg !44
  %580 = bitcast <2 x bfloat> %579 to i32, !dbg !44
  %581 = insertelement <2 x bfloat> poison, bfloat %564, i64 0, !dbg !44
  %582 = insertelement <2 x bfloat> %581, bfloat %565, i64 1, !dbg !44
  %583 = bitcast <2 x bfloat> %582 to i32, !dbg !44
  %584 = insertelement <2 x bfloat> poison, bfloat %566, i64 0, !dbg !44
  %585 = insertelement <2 x bfloat> %584, bfloat %567, i64 1, !dbg !44
  %586 = bitcast <2 x bfloat> %585 to i32, !dbg !44
  %587 = insertelement <2 x bfloat> poison, bfloat %568, i64 0, !dbg !44
  %588 = insertelement <2 x bfloat> %587, bfloat %569, i64 1, !dbg !44
  %589 = bitcast <2 x bfloat> %588 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %409, i32 %580, i32 %583, i32 %586, i32 %589) #2, !dbg !44
  %590 = insertelement <2 x bfloat> poison, bfloat %570, i64 0, !dbg !44
  %591 = insertelement <2 x bfloat> %590, bfloat %571, i64 1, !dbg !44
  %592 = bitcast <2 x bfloat> %591 to i32, !dbg !44
  %593 = insertelement <2 x bfloat> poison, bfloat %572, i64 0, !dbg !44
  %594 = insertelement <2 x bfloat> %593, bfloat %573, i64 1, !dbg !44
  %595 = bitcast <2 x bfloat> %594 to i32, !dbg !44
  %596 = insertelement <2 x bfloat> poison, bfloat %574, i64 0, !dbg !44
  %597 = insertelement <2 x bfloat> %596, bfloat %575, i64 1, !dbg !44
  %598 = bitcast <2 x bfloat> %597 to i32, !dbg !44
  %599 = insertelement <2 x bfloat> poison, bfloat %576, i64 0, !dbg !44
  %600 = insertelement <2 x bfloat> %599, bfloat %577, i64 1, !dbg !44
  %601 = bitcast <2 x bfloat> %600 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %411, i32 %592, i32 %595, i32 %598, i32 %601) #2, !dbg !44
  %602 = getelementptr i8, ptr addrspace(1) %516, i64 %.idx232, !dbg !30
  %603 = getelementptr bfloat, ptr addrspace(1) %602, i64 %70, !dbg !30
  %604 = getelementptr i8, ptr addrspace(1) %516, i64 %.idx233, !dbg !30
  %605 = getelementptr bfloat, ptr addrspace(1) %604, i64 %70, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %396, i32 %580, i32 %583, i32 %586, i32 %589) #2, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %398, i32 %592, i32 %595, i32 %598, i32 %601) #2, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %606 = load <4 x i32>, ptr addrspace(3) %407, align 16, !dbg !30
  %.extract305 = load i32, ptr addrspace(3) %402, align 16, !dbg !30
  %.extract307 = load i32, ptr addrspace(3) %468, align 4, !dbg !30
  %.extract309 = load i32, ptr addrspace(3) %469, align 8, !dbg !30
  %.extract311 = load i32, ptr addrspace(3) %470, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract305, i32 %.extract307, i32 %.extract309, i32 %.extract311, ptr addrspace(1) %603, i1 %73) #2, !dbg !30
  %.extract313 = extractelement <4 x i32> %606, i64 0, !dbg !30
  %.extract315 = extractelement <4 x i32> %606, i64 1, !dbg !30
  %.extract317 = extractelement <4 x i32> %606, i64 2, !dbg !30
  %.extract319 = extractelement <4 x i32> %606, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract313, i32 %.extract315, i32 %.extract317, i32 %.extract319, ptr addrspace(1) %605, i1 %73) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 12), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !45
  %607 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %34, i32 0, i32 31), !dbg !45
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !45
  %608 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn40.pn.pn337, !dbg !46
  %609 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn24.pn.pn338, !dbg !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %indvars.iv.next.tr = trunc i64 %indvars.iv.next to i32, !dbg !48
  %610 = shl i32 %indvars.iv.next.tr, 6, !dbg !48
  %611 = tail call i32 @llvm.smin.i32(i32 %610, i32 %7), !dbg !48
  %612 = add nuw nsw i32 %477, %58, !dbg !49
  %613 = add nuw nsw i32 %477, %59, !dbg !49
  %614 = icmp slt i32 %612, %7, !dbg !50
  %615 = icmp slt i32 %613, %7, !dbg !50
  %616 = shl i32 %611, 5, !dbg !51
  %617 = add i32 %616, -32, !dbg !51
  %618 = sext i32 %617 to i64, !dbg !52
  %gep = getelementptr float, ptr addrspace(1) %81, i64 %618, !dbg !53
  %619 = icmp sgt <4 x i32> %512, <i32 2, i32 2, i32 3, i32 3>, !dbg !34
  %620 = select <4 x i1> %619, <4 x i32> zeroinitializer, <4 x i32> %512, !dbg !34
  %621 = extractelement <4 x i32> %620, i64 2, !dbg !35
  %622 = shl i32 %621, 12, !dbg !35
  %623 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %622, !dbg !35
  %624 = ptrtoint ptr addrspace(3) %623 to i32, !dbg !45
  %625 = lshr exact i32 %624, 4, !dbg !45
  %626 = and i32 %625, 16383, !dbg !45
  %627 = zext nneg i32 %626 to i64, !dbg !45
  %628 = or disjoint i64 %627, 4611686293338849280, !dbg !45
  %629 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %628, i64 %415) #2, !dbg !45
  %630 = add i32 %624, 32, !dbg !45
  %631 = lshr exact i32 %630, 4, !dbg !45
  %632 = and i32 %631, 16383, !dbg !45
  %633 = zext nneg i32 %632 to i64, !dbg !45
  %634 = or disjoint i64 %633, 4611686293338849280, !dbg !45
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 0, !dbg !45
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 1, !dbg !45
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 2, !dbg !45
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 3, !dbg !45
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 4, !dbg !45
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 5, !dbg !45
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 6, !dbg !45
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 7, !dbg !45
  %643 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 8, !dbg !45
  %644 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 9, !dbg !45
  %645 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 10, !dbg !45
  %646 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 11, !dbg !45
  %647 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 12, !dbg !45
  %648 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 13, !dbg !45
  %649 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 14, !dbg !45
  %650 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %629, 15, !dbg !45
  %651 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %635, float %636, float %637, float %638, float %639, float %640, float %641, float %642, float %643, float %644, float %645, float %646, float %647, float %648, float %649, float %650, i64 %634, i64 %419, i1 true) #2, !dbg !45
  %652 = add i32 %624, 64, !dbg !45
  %653 = lshr exact i32 %652, 4, !dbg !45
  %654 = and i32 %653, 16383, !dbg !45
  %655 = zext nneg i32 %654 to i64, !dbg !45
  %656 = or disjoint i64 %655, 4611686293338849280, !dbg !45
  %657 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 0, !dbg !45
  %658 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 1, !dbg !45
  %659 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 2, !dbg !45
  %660 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 3, !dbg !45
  %661 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 4, !dbg !45
  %662 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 5, !dbg !45
  %663 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 6, !dbg !45
  %664 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 7, !dbg !45
  %665 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 8, !dbg !45
  %666 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 9, !dbg !45
  %667 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 10, !dbg !45
  %668 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 11, !dbg !45
  %669 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 12, !dbg !45
  %670 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 13, !dbg !45
  %671 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 14, !dbg !45
  %672 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %651, 15, !dbg !45
  %673 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %657, float %658, float %659, float %660, float %661, float %662, float %663, float %664, float %665, float %666, float %667, float %668, float %669, float %670, float %671, float %672, i64 %656, i64 %423, i1 true) #2, !dbg !45
  %674 = add i32 %624, 96, !dbg !45
  %675 = lshr exact i32 %674, 4, !dbg !45
  %676 = and i32 %675, 16383, !dbg !45
  %677 = zext nneg i32 %676 to i64, !dbg !45
  %678 = or disjoint i64 %677, 4611686293338849280, !dbg !45
  %679 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 0, !dbg !45
  %680 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 1, !dbg !45
  %681 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 2, !dbg !45
  %682 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 3, !dbg !45
  %683 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 4, !dbg !45
  %684 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 5, !dbg !45
  %685 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 6, !dbg !45
  %686 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 7, !dbg !45
  %687 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 8, !dbg !45
  %688 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 9, !dbg !45
  %689 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 10, !dbg !45
  %690 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 11, !dbg !45
  %691 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 12, !dbg !45
  %692 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 13, !dbg !45
  %693 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 14, !dbg !45
  %694 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %673, 15, !dbg !45
  %695 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %679, float %680, float %681, float %682, float %683, float %684, float %685, float %686, float %687, float %688, float %689, float %690, float %691, float %692, float %693, float %694, i64 %678, i64 %427, i1 true) #2, !dbg !45
  %696 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 0, !dbg !45
  %697 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 1, !dbg !45
  %698 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 2, !dbg !45
  %699 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 3, !dbg !45
  %700 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 4, !dbg !45
  %701 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 5, !dbg !45
  %702 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 6, !dbg !45
  %703 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 7, !dbg !45
  %704 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 8, !dbg !45
  %705 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 9, !dbg !45
  %706 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 10, !dbg !45
  %707 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 11, !dbg !45
  %708 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 12, !dbg !45
  %709 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 13, !dbg !45
  %710 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 14, !dbg !45
  %711 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %695, 15, !dbg !45
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !45
  %712 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %696, float %697, float %698, float %699, float %700, float %701, float %702, float %703, float %704, float %705, float %706, float %707, float %708, float %709, float %710, float %711, ptr addrspace(3) %623, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 148480), i32 0, i32 0) #2, !dbg !45
  %713 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 0, !dbg !45
  %714 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 1, !dbg !45
  %715 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 2, !dbg !45
  %716 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 3, !dbg !45
  %717 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 4, !dbg !45
  %718 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 5, !dbg !45
  %719 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 6, !dbg !45
  %720 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 7, !dbg !45
  %721 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 8, !dbg !45
  %722 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 9, !dbg !45
  %723 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 10, !dbg !45
  %724 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 11, !dbg !45
  %725 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 12, !dbg !45
  %726 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 13, !dbg !45
  %727 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 14, !dbg !45
  %728 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %712, 15, !dbg !45
  %729 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %622, !dbg !36
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !54
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !54
  %730 = ptrtoint ptr addrspace(3) %729 to i32, !dbg !54
  %731 = lshr exact i32 %730, 4, !dbg !54
  %732 = and i32 %731, 16383, !dbg !54
  %733 = zext nneg i32 %732 to i64, !dbg !54
  %734 = or disjoint i64 %733, 4611686293338849280, !dbg !54
  %735 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %713, float %714, float %715, float %716, float %717, float %718, float %719, float %720, float %721, float %722, float %723, float %724, float %725, float %726, float %727, float %728, i64 %734, i64 %431, i1 true) #2, !dbg !54
  %736 = add i32 %730, 32, !dbg !54
  %737 = lshr exact i32 %736, 4, !dbg !54
  %738 = and i32 %737, 16383, !dbg !54
  %739 = zext nneg i32 %738 to i64, !dbg !54
  %740 = or disjoint i64 %739, 4611686293338849280, !dbg !54
  %741 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 0, !dbg !54
  %742 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 1, !dbg !54
  %743 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 2, !dbg !54
  %744 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 3, !dbg !54
  %745 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 4, !dbg !54
  %746 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 5, !dbg !54
  %747 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 6, !dbg !54
  %748 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 7, !dbg !54
  %749 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 8, !dbg !54
  %750 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 9, !dbg !54
  %751 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 10, !dbg !54
  %752 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 11, !dbg !54
  %753 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 12, !dbg !54
  %754 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 13, !dbg !54
  %755 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 14, !dbg !54
  %756 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %735, 15, !dbg !54
  %757 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %741, float %742, float %743, float %744, float %745, float %746, float %747, float %748, float %749, float %750, float %751, float %752, float %753, float %754, float %755, float %756, i64 %740, i64 %435, i1 true) #2, !dbg !54
  %758 = add i32 %730, 64, !dbg !54
  %759 = lshr exact i32 %758, 4, !dbg !54
  %760 = and i32 %759, 16383, !dbg !54
  %761 = zext nneg i32 %760 to i64, !dbg !54
  %762 = or disjoint i64 %761, 4611686293338849280, !dbg !54
  %763 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 0, !dbg !54
  %764 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 1, !dbg !54
  %765 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 2, !dbg !54
  %766 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 3, !dbg !54
  %767 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 4, !dbg !54
  %768 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 5, !dbg !54
  %769 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 6, !dbg !54
  %770 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 7, !dbg !54
  %771 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 8, !dbg !54
  %772 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 9, !dbg !54
  %773 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 10, !dbg !54
  %774 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 11, !dbg !54
  %775 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 12, !dbg !54
  %776 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 13, !dbg !54
  %777 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 14, !dbg !54
  %778 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %757, 15, !dbg !54
  %779 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %763, float %764, float %765, float %766, float %767, float %768, float %769, float %770, float %771, float %772, float %773, float %774, float %775, float %776, float %777, float %778, i64 %762, i64 %439, i1 true) #2, !dbg !54
  %780 = add i32 %730, 96, !dbg !54
  %781 = lshr exact i32 %780, 4, !dbg !54
  %782 = and i32 %781, 16383, !dbg !54
  %783 = zext nneg i32 %782 to i64, !dbg !54
  %784 = or disjoint i64 %783, 4611686293338849280, !dbg !54
  %785 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 0, !dbg !54
  %786 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 1, !dbg !54
  %787 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 2, !dbg !54
  %788 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 3, !dbg !54
  %789 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 4, !dbg !54
  %790 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 5, !dbg !54
  %791 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 6, !dbg !54
  %792 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 7, !dbg !54
  %793 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 8, !dbg !54
  %794 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 9, !dbg !54
  %795 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 10, !dbg !54
  %796 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 11, !dbg !54
  %797 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 12, !dbg !54
  %798 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 13, !dbg !54
  %799 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 14, !dbg !54
  %800 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %779, 15, !dbg !54
  %801 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %785, float %786, float %787, float %788, float %789, float %790, float %791, float %792, float %793, float %794, float %795, float %796, float %797, float %798, float %799, float %800, i64 %784, i64 %443, i1 true) #2, !dbg !54
  %802 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 0, !dbg !54
  %803 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 1, !dbg !54
  %804 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 2, !dbg !54
  %805 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 3, !dbg !54
  %806 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 4, !dbg !54
  %807 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 5, !dbg !54
  %808 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 6, !dbg !54
  %809 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 7, !dbg !54
  %810 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 8, !dbg !54
  %811 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 9, !dbg !54
  %812 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 10, !dbg !54
  %813 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 11, !dbg !54
  %814 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 12, !dbg !54
  %815 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 13, !dbg !54
  %816 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 14, !dbg !54
  %817 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %801, 15, !dbg !54
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !54
  %818 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %802, float %803, float %804, float %805, float %806, float %807, float %808, float %809, float %810, float %811, float %812, float %813, float %814, float %815, float %816, float %817, ptr addrspace(3) %729, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 152576), i32 0, i32 0) #2, !dbg !54
  %819 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 0, !dbg !54
  %820 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 1, !dbg !54
  %821 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 2, !dbg !54
  %822 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 3, !dbg !54
  %823 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 4, !dbg !54
  %824 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 5, !dbg !54
  %825 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 6, !dbg !54
  %826 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 7, !dbg !54
  %827 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 8, !dbg !54
  %828 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 9, !dbg !54
  %829 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 10, !dbg !54
  %830 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 11, !dbg !54
  %831 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 12, !dbg !54
  %832 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 13, !dbg !54
  %833 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 14, !dbg !54
  %834 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %818, 15, !dbg !54
  %835 = extractelement <4 x i32> %620, i64 0, !dbg !38
  %.idx258 = shl i32 %835, 12, !dbg !37
  %836 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %.idx258, !dbg !37
  %837 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %836, i32 %378, !dbg !55
  %838 = ptrtoint ptr addrspace(3) %837 to i32, !dbg !55
  %839 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %838) #2, !dbg !55
  %840 = extractvalue { i32, i32, i32, i32 } %839, 0, !dbg !55
  %841 = bitcast i32 %840 to <2 x bfloat>, !dbg !55
  %842 = extractvalue { i32, i32, i32, i32 } %839, 1, !dbg !55
  %843 = bitcast i32 %842 to <2 x bfloat>, !dbg !55
  %844 = extractvalue { i32, i32, i32, i32 } %839, 2, !dbg !55
  %845 = bitcast i32 %844 to <2 x bfloat>, !dbg !55
  %846 = extractvalue { i32, i32, i32, i32 } %839, 3, !dbg !55
  %847 = bitcast i32 %846 to <2 x bfloat>, !dbg !55
  %848 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %836, i32 %381, !dbg !55
  %849 = ptrtoint ptr addrspace(3) %848 to i32, !dbg !55
  %850 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %849) #2, !dbg !55
  %851 = extractvalue { i32, i32, i32, i32 } %850, 0, !dbg !55
  %852 = bitcast i32 %851 to <2 x bfloat>, !dbg !55
  %853 = extractvalue { i32, i32, i32, i32 } %850, 1, !dbg !55
  %854 = bitcast i32 %853 to <2 x bfloat>, !dbg !55
  %855 = extractvalue { i32, i32, i32, i32 } %850, 2, !dbg !55
  %856 = bitcast i32 %855 to <2 x bfloat>, !dbg !55
  %857 = extractvalue { i32, i32, i32, i32 } %850, 3, !dbg !55
  %858 = bitcast i32 %857 to <2 x bfloat>, !dbg !55
  %859 = fpext <2 x bfloat> %841 to <2 x float>, !dbg !55
  %860 = insertelement <2 x float> poison, float %819, i64 0, !dbg !55
  %861 = insertelement <2 x float> %860, float %820, i64 1, !dbg !55
  %862 = fsub <2 x float> %859, %861, !dbg !55
  %863 = fptrunc <2 x float> %862 to <2 x bfloat>, !dbg !56
  %864 = fpext <2 x bfloat> %843 to <2 x float>, !dbg !55
  %865 = insertelement <2 x float> poison, float %821, i64 0, !dbg !55
  %866 = insertelement <2 x float> %865, float %822, i64 1, !dbg !55
  %867 = fsub <2 x float> %864, %866, !dbg !55
  %868 = fptrunc <2 x float> %867 to <2 x bfloat>, !dbg !56
  %869 = fpext <2 x bfloat> %845 to <2 x float>, !dbg !55
  %870 = insertelement <2 x float> poison, float %823, i64 0, !dbg !55
  %871 = insertelement <2 x float> %870, float %824, i64 1, !dbg !55
  %872 = fsub <2 x float> %869, %871, !dbg !55
  %873 = fptrunc <2 x float> %872 to <2 x bfloat>, !dbg !56
  %874 = fpext <2 x bfloat> %847 to <2 x float>, !dbg !55
  %875 = insertelement <2 x float> poison, float %825, i64 0, !dbg !55
  %876 = insertelement <2 x float> %875, float %826, i64 1, !dbg !55
  %877 = fsub <2 x float> %874, %876, !dbg !55
  %878 = fptrunc <2 x float> %877 to <2 x bfloat>, !dbg !56
  %879 = fpext <2 x bfloat> %852 to <2 x float>, !dbg !55
  %880 = insertelement <2 x float> poison, float %827, i64 0, !dbg !55
  %881 = insertelement <2 x float> %880, float %828, i64 1, !dbg !55
  %882 = fsub <2 x float> %879, %881, !dbg !55
  %883 = fptrunc <2 x float> %882 to <2 x bfloat>, !dbg !56
  %884 = fpext <2 x bfloat> %854 to <2 x float>, !dbg !55
  %885 = insertelement <2 x float> poison, float %829, i64 0, !dbg !55
  %886 = insertelement <2 x float> %885, float %830, i64 1, !dbg !55
  %887 = fsub <2 x float> %884, %886, !dbg !55
  %888 = fptrunc <2 x float> %887 to <2 x bfloat>, !dbg !56
  %889 = fpext <2 x bfloat> %856 to <2 x float>, !dbg !55
  %890 = insertelement <2 x float> poison, float %831, i64 0, !dbg !55
  %891 = insertelement <2 x float> %890, float %832, i64 1, !dbg !55
  %892 = fsub <2 x float> %889, %891, !dbg !55
  %893 = fptrunc <2 x float> %892 to <2 x bfloat>, !dbg !56
  %894 = fpext <2 x bfloat> %858 to <2 x float>, !dbg !55
  %895 = insertelement <2 x float> poison, float %833, i64 0, !dbg !55
  %896 = insertelement <2 x float> %895, float %834, i64 1, !dbg !55
  %897 = fsub <2 x float> %894, %896, !dbg !55
  %898 = fptrunc <2 x float> %897 to <2 x bfloat>, !dbg !56
  %899 = bitcast <2 x bfloat> %863 to i32, !dbg !56
  %900 = bitcast <2 x bfloat> %868 to i32, !dbg !56
  %901 = bitcast <2 x bfloat> %873 to i32, !dbg !56
  %902 = bitcast <2 x bfloat> %878 to i32, !dbg !56
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %396, i32 %899, i32 %900, i32 %901, i32 %902) #2, !dbg !56
  %903 = bitcast <2 x bfloat> %883 to i32, !dbg !56
  %904 = bitcast <2 x bfloat> %888 to i32, !dbg !56
  %905 = bitcast <2 x bfloat> %893 to i32, !dbg !56
  %906 = bitcast <2 x bfloat> %898 to i32, !dbg !56
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %398, i32 %903, i32 %904, i32 %905, i32 %906) #2, !dbg !56
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !56
  %907 = load <4 x i32>, ptr addrspace(3) %407, align 16, !dbg !56
  %.extract321 = load i32, ptr addrspace(3) %402, align 16, !dbg !46
  %.extract323 = load i32, ptr addrspace(3) %471, align 4, !dbg !46
  %.extract325 = load i32, ptr addrspace(3) %472, align 8, !dbg !46
  %.extract327 = load i32, ptr addrspace(3) %473, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract321, i32 %.extract323, i32 %.extract325, i32 %.extract327, ptr addrspace(1) %608, i1 %.pn95.pn.pn343) #2, !dbg !46
  %.extract329 = extractelement <4 x i32> %907, i64 0, !dbg !46
  %.extract331 = extractelement <4 x i32> %907, i64 1, !dbg !46
  %.extract333 = extractelement <4 x i32> %907, i64 2, !dbg !46
  %.extract335 = extractelement <4 x i32> %907, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract329, i32 %.extract331, i32 %.extract333, i32 %.extract335, ptr addrspace(1) %609, i1 %.pn79.pn.pn344) #2, !dbg !46
  %908 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !57
  %909 = bitcast i32 %908 to float, !dbg !57
  %.idx283 = shl i32 %835, 8, !dbg !38
  %910 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156672), i32 %.idx283, !dbg !38
  %911 = getelementptr inbounds nuw float, ptr addrspace(3) %910, i32 %58, !dbg !38
  %912 = load float, ptr addrspace(3) %911, align 4, !dbg !38
  %913 = getelementptr inbounds nuw float, ptr addrspace(3) %910, i32 %59, !dbg !38
  %914 = load float, ptr addrspace(3) %913, align 4, !dbg !38
  %915 = fsub float %909, %912, !dbg !58
  %916 = fsub float %909, %914, !dbg !58
  %917 = fmul float %915, 0x3FF7154760000000, !dbg !59
  %918 = tail call float @llvm.nvvm.ex2.approx.f(float %917), !dbg !59
  %919 = fmul float %916, 0x3FF7154760000000, !dbg !59
  %920 = tail call float @llvm.nvvm.ex2.approx.f(float %919), !dbg !59
  %921 = select i1 %614, float %918, float 0.000000e+00, !dbg !60
  %922 = select i1 %615, float %920, float 0.000000e+00, !dbg !60
  %923 = extractelement <2 x float> %862, i64 0, !dbg !61
  %924 = fmul float %923, %921, !dbg !61
  %925 = extractelement <2 x float> %862, i64 1, !dbg !61
  %926 = fmul float %925, %921, !dbg !61
  %927 = extractelement <2 x float> %867, i64 0, !dbg !61
  %928 = fmul float %927, %922, !dbg !61
  %929 = extractelement <2 x float> %867, i64 1, !dbg !61
  %930 = fmul float %929, %922, !dbg !61
  %931 = extractelement <2 x float> %872, i64 0, !dbg !61
  %932 = fmul float %931, %921, !dbg !61
  %933 = extractelement <2 x float> %872, i64 1, !dbg !61
  %934 = fmul float %933, %921, !dbg !61
  %935 = extractelement <2 x float> %877, i64 0, !dbg !61
  %936 = fmul float %935, %922, !dbg !61
  %937 = extractelement <2 x float> %877, i64 1, !dbg !61
  %938 = fmul float %937, %922, !dbg !61
  %939 = extractelement <2 x float> %882, i64 0, !dbg !61
  %940 = fmul float %939, %921, !dbg !61
  %941 = extractelement <2 x float> %882, i64 1, !dbg !61
  %942 = fmul float %941, %921, !dbg !61
  %943 = extractelement <2 x float> %887, i64 0, !dbg !61
  %944 = fmul float %943, %922, !dbg !61
  %945 = extractelement <2 x float> %887, i64 1, !dbg !61
  %946 = fmul float %945, %922, !dbg !61
  %947 = extractelement <2 x float> %892, i64 0, !dbg !61
  %948 = fmul float %947, %921, !dbg !61
  %949 = extractelement <2 x float> %892, i64 1, !dbg !61
  %950 = fmul float %949, %921, !dbg !61
  %951 = extractelement <2 x float> %897, i64 0, !dbg !61
  %952 = fmul float %951, %922, !dbg !61
  %953 = extractelement <2 x float> %897, i64 1, !dbg !61
  %954 = fmul float %953, %922, !dbg !61
  %955 = fmul float %909, 0x3FF7154760000000, !dbg !62
  %956 = tail call float @llvm.nvvm.ex2.approx.f(float %955), !dbg !62
  %957 = fmul float %494, %956, !dbg !63
  %958 = fmul float %495, %956, !dbg !63
  %959 = fmul float %496, %956, !dbg !63
  %960 = fmul float %497, %956, !dbg !63
  %961 = fmul float %498, %956, !dbg !63
  %962 = fmul float %499, %956, !dbg !63
  %963 = fmul float %500, %956, !dbg !63
  %964 = fmul float %501, %956, !dbg !63
  %965 = fmul float %502, %956, !dbg !63
  %966 = fmul float %503, %956, !dbg !63
  %967 = fmul float %504, %956, !dbg !63
  %968 = fmul float %505, %956, !dbg !63
  %969 = fmul float %506, %956, !dbg !63
  %970 = fmul float %507, %956, !dbg !63
  %971 = fmul float %508, %956, !dbg !63
  %972 = fmul float %509, %956, !dbg !63
  %973 = fmul float %478, %956, !dbg !64
  %974 = fmul float %479, %956, !dbg !64
  %975 = fmul float %480, %956, !dbg !64
  %976 = fmul float %481, %956, !dbg !64
  %977 = fmul float %482, %956, !dbg !64
  %978 = fmul float %483, %956, !dbg !64
  %979 = fmul float %484, %956, !dbg !64
  %980 = fmul float %485, %956, !dbg !64
  %981 = fmul float %486, %956, !dbg !64
  %982 = fmul float %487, %956, !dbg !64
  %983 = fmul float %488, %956, !dbg !64
  %984 = fmul float %489, %956, !dbg !64
  %985 = fmul float %490, %956, !dbg !64
  %986 = fmul float %491, %956, !dbg !64
  %987 = fmul float %492, %956, !dbg !64
  %988 = fmul float %493, %956, !dbg !64
  %989 = fptrunc float %924 to bfloat, !dbg !65
  %990 = fptrunc float %926 to bfloat, !dbg !65
  %991 = fptrunc float %928 to bfloat, !dbg !65
  %992 = fptrunc float %930 to bfloat, !dbg !65
  %993 = fptrunc float %932 to bfloat, !dbg !65
  %994 = fptrunc float %934 to bfloat, !dbg !65
  %995 = fptrunc float %936 to bfloat, !dbg !65
  %996 = fptrunc float %938 to bfloat, !dbg !65
  %997 = fptrunc float %940 to bfloat, !dbg !65
  %998 = fptrunc float %942 to bfloat, !dbg !65
  %999 = fptrunc float %944 to bfloat, !dbg !65
  %1000 = fptrunc float %946 to bfloat, !dbg !65
  %1001 = fptrunc float %948 to bfloat, !dbg !65
  %1002 = fptrunc float %950 to bfloat, !dbg !65
  %1003 = fptrunc float %952 to bfloat, !dbg !65
  %1004 = fptrunc float %954 to bfloat, !dbg !65
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !65
  %1005 = insertelement <2 x bfloat> poison, bfloat %989, i64 0, !dbg !65
  %1006 = insertelement <2 x bfloat> %1005, bfloat %990, i64 1, !dbg !65
  %1007 = bitcast <2 x bfloat> %1006 to i32, !dbg !65
  %1008 = insertelement <2 x bfloat> poison, bfloat %991, i64 0, !dbg !65
  %1009 = insertelement <2 x bfloat> %1008, bfloat %992, i64 1, !dbg !65
  %1010 = bitcast <2 x bfloat> %1009 to i32, !dbg !65
  %1011 = insertelement <2 x bfloat> poison, bfloat %993, i64 0, !dbg !65
  %1012 = insertelement <2 x bfloat> %1011, bfloat %994, i64 1, !dbg !65
  %1013 = bitcast <2 x bfloat> %1012 to i32, !dbg !65
  %1014 = insertelement <2 x bfloat> poison, bfloat %995, i64 0, !dbg !65
  %1015 = insertelement <2 x bfloat> %1014, bfloat %996, i64 1, !dbg !65
  %1016 = bitcast <2 x bfloat> %1015 to i32, !dbg !65
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %445, i32 %1007, i32 %1010, i32 %1013, i32 %1016) #2, !dbg !65
  %1017 = insertelement <2 x bfloat> poison, bfloat %997, i64 0, !dbg !65
  %1018 = insertelement <2 x bfloat> %1017, bfloat %998, i64 1, !dbg !65
  %1019 = bitcast <2 x bfloat> %1018 to i32, !dbg !65
  %1020 = insertelement <2 x bfloat> poison, bfloat %999, i64 0, !dbg !65
  %1021 = insertelement <2 x bfloat> %1020, bfloat %1000, i64 1, !dbg !65
  %1022 = bitcast <2 x bfloat> %1021 to i32, !dbg !65
  %1023 = insertelement <2 x bfloat> poison, bfloat %1001, i64 0, !dbg !65
  %1024 = insertelement <2 x bfloat> %1023, bfloat %1002, i64 1, !dbg !65
  %1025 = bitcast <2 x bfloat> %1024 to i32, !dbg !65
  %1026 = insertelement <2 x bfloat> poison, bfloat %1003, i64 0, !dbg !65
  %1027 = insertelement <2 x bfloat> %1026, bfloat %1004, i64 1, !dbg !65
  %1028 = bitcast <2 x bfloat> %1027 to i32, !dbg !65
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %447, i32 %1019, i32 %1022, i32 %1025, i32 %1028) #2, !dbg !65
  %1029 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %622, !dbg !39
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !66
  %1030 = ptrtoint ptr addrspace(3) %1029 to i32, !dbg !66
  %1031 = lshr exact i32 %1030, 4, !dbg !66
  %1032 = and i32 %1031, 16383, !dbg !66
  %1033 = zext nneg i32 %1032 to i64, !dbg !66
  %1034 = or disjoint i64 %1033, 4611686293338849280, !dbg !66
  %1035 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %957, float %958, float %959, float %960, float %961, float %962, float %963, float %964, float %965, float %966, float %967, float %968, float %969, float %970, float %971, float %972, i64 %1034, i64 %451, i1 true) #2, !dbg !66
  %1036 = add i32 %1030, 2048, !dbg !66
  %1037 = lshr exact i32 %1036, 4, !dbg !66
  %1038 = and i32 %1037, 16383, !dbg !66
  %1039 = zext nneg i32 %1038 to i64, !dbg !66
  %1040 = or disjoint i64 %1039, 4611686293338849280, !dbg !66
  %1041 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 0, !dbg !66
  %1042 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 1, !dbg !66
  %1043 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 2, !dbg !66
  %1044 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 3, !dbg !66
  %1045 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 4, !dbg !66
  %1046 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 5, !dbg !66
  %1047 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 6, !dbg !66
  %1048 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 7, !dbg !66
  %1049 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 8, !dbg !66
  %1050 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 9, !dbg !66
  %1051 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 10, !dbg !66
  %1052 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 11, !dbg !66
  %1053 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 12, !dbg !66
  %1054 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 13, !dbg !66
  %1055 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 14, !dbg !66
  %1056 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1035, 15, !dbg !66
  %1057 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1041, float %1042, float %1043, float %1044, float %1045, float %1046, float %1047, float %1048, float %1049, float %1050, float %1051, float %1052, float %1053, float %1054, float %1055, float %1056, i64 %1040, i64 %455, i1 true) #2, !dbg !66
  %1058 = add i32 %1030, 4096, !dbg !66
  %1059 = lshr exact i32 %1058, 4, !dbg !66
  %1060 = and i32 %1059, 16383, !dbg !66
  %1061 = zext nneg i32 %1060 to i64, !dbg !66
  %1062 = or disjoint i64 %1061, 4611686293338849280, !dbg !66
  %1063 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 0, !dbg !66
  %1064 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 1, !dbg !66
  %1065 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 2, !dbg !66
  %1066 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 3, !dbg !66
  %1067 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 4, !dbg !66
  %1068 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 5, !dbg !66
  %1069 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 6, !dbg !66
  %1070 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 7, !dbg !66
  %1071 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 8, !dbg !66
  %1072 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 9, !dbg !66
  %1073 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 10, !dbg !66
  %1074 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 11, !dbg !66
  %1075 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 12, !dbg !66
  %1076 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 13, !dbg !66
  %1077 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 14, !dbg !66
  %1078 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1057, 15, !dbg !66
  %1079 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1063, float %1064, float %1065, float %1066, float %1067, float %1068, float %1069, float %1070, float %1071, float %1072, float %1073, float %1074, float %1075, float %1076, float %1077, float %1078, i64 %1062, i64 %459, i1 true) #2, !dbg !66
  %1080 = add i32 %1030, 6144, !dbg !66
  %1081 = lshr exact i32 %1080, 4, !dbg !66
  %1082 = and i32 %1081, 16383, !dbg !66
  %1083 = zext nneg i32 %1082 to i64, !dbg !66
  %1084 = or disjoint i64 %1083, 4611686293338849280, !dbg !66
  %1085 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 0, !dbg !66
  %1086 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 1, !dbg !66
  %1087 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 2, !dbg !66
  %1088 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 3, !dbg !66
  %1089 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 4, !dbg !66
  %1090 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 5, !dbg !66
  %1091 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 6, !dbg !66
  %1092 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 7, !dbg !66
  %1093 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 8, !dbg !66
  %1094 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 9, !dbg !66
  %1095 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 10, !dbg !66
  %1096 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 11, !dbg !66
  %1097 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 12, !dbg !66
  %1098 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 13, !dbg !66
  %1099 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 14, !dbg !66
  %1100 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1079, 15, !dbg !66
  %1101 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1085, float %1086, float %1087, float %1088, float %1089, float %1090, float %1091, float %1092, float %1093, float %1094, float %1095, float %1096, float %1097, float %1098, float %1099, float %1100, i64 %1084, i64 %463, i1 true) #2, !dbg !66
  %1102 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 0, !dbg !66
  %1103 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 1, !dbg !66
  %1104 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 2, !dbg !66
  %1105 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 3, !dbg !66
  %1106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 4, !dbg !66
  %1107 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 5, !dbg !66
  %1108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 6, !dbg !66
  %1109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 7, !dbg !66
  %1110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 8, !dbg !66
  %1111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 9, !dbg !66
  %1112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 10, !dbg !66
  %1113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 11, !dbg !66
  %1114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 12, !dbg !66
  %1115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 13, !dbg !66
  %1116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 14, !dbg !66
  %1117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1101, 15, !dbg !66
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !66
  %1118 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %1102, float %1103, float %1104, float %1105, float %1106, float %1107, float %1108, float %1109, float %1110, float %1111, float %1112, float %1113, float %1114, float %1115, float %1116, float %1117, ptr addrspace(3) %1029, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 0, i32 0) #2, !dbg !66
  %1119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 0, !dbg !66
  %1120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 1, !dbg !66
  %1121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 2, !dbg !66
  %1122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 3, !dbg !66
  %1123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 4, !dbg !66
  %1124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 5, !dbg !66
  %1125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 6, !dbg !66
  %1126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 7, !dbg !66
  %1127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 8, !dbg !66
  %1128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 9, !dbg !66
  %1129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 10, !dbg !66
  %1130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 11, !dbg !66
  %1131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 12, !dbg !66
  %1132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 13, !dbg !66
  %1133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 14, !dbg !66
  %1134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1118, 15, !dbg !66
  %1135 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %622, !dbg !40
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !67
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !67
  %1136 = ptrtoint ptr addrspace(3) %1135 to i32, !dbg !67
  %1137 = lshr exact i32 %1136, 4, !dbg !67
  %1138 = and i32 %1137, 16383, !dbg !67
  %1139 = zext nneg i32 %1138 to i64, !dbg !67
  %1140 = or disjoint i64 %1139, 4611686293338849280, !dbg !67
  %1141 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %973, float %974, float %975, float %976, float %977, float %978, float %979, float %980, float %981, float %982, float %983, float %984, float %985, float %986, float %987, float %988, i64 %1140, i64 %451, i1 true) #2, !dbg !67
  %1142 = add i32 %1136, 2048, !dbg !67
  %1143 = lshr exact i32 %1142, 4, !dbg !67
  %1144 = and i32 %1143, 16383, !dbg !67
  %1145 = zext nneg i32 %1144 to i64, !dbg !67
  %1146 = or disjoint i64 %1145, 4611686293338849280, !dbg !67
  %1147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 0, !dbg !67
  %1148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 1, !dbg !67
  %1149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 2, !dbg !67
  %1150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 3, !dbg !67
  %1151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 4, !dbg !67
  %1152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 5, !dbg !67
  %1153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 6, !dbg !67
  %1154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 7, !dbg !67
  %1155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 8, !dbg !67
  %1156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 9, !dbg !67
  %1157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 10, !dbg !67
  %1158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 11, !dbg !67
  %1159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 12, !dbg !67
  %1160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 13, !dbg !67
  %1161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 14, !dbg !67
  %1162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1141, 15, !dbg !67
  %1163 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1147, float %1148, float %1149, float %1150, float %1151, float %1152, float %1153, float %1154, float %1155, float %1156, float %1157, float %1158, float %1159, float %1160, float %1161, float %1162, i64 %1146, i64 %455, i1 true) #2, !dbg !67
  %1164 = add i32 %1136, 4096, !dbg !67
  %1165 = lshr exact i32 %1164, 4, !dbg !67
  %1166 = and i32 %1165, 16383, !dbg !67
  %1167 = zext nneg i32 %1166 to i64, !dbg !67
  %1168 = or disjoint i64 %1167, 4611686293338849280, !dbg !67
  %1169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 0, !dbg !67
  %1170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 1, !dbg !67
  %1171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 2, !dbg !67
  %1172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 3, !dbg !67
  %1173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 4, !dbg !67
  %1174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 5, !dbg !67
  %1175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 6, !dbg !67
  %1176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 7, !dbg !67
  %1177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 8, !dbg !67
  %1178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 9, !dbg !67
  %1179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 10, !dbg !67
  %1180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 11, !dbg !67
  %1181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 12, !dbg !67
  %1182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 13, !dbg !67
  %1183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 14, !dbg !67
  %1184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1163, 15, !dbg !67
  %1185 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1169, float %1170, float %1171, float %1172, float %1173, float %1174, float %1175, float %1176, float %1177, float %1178, float %1179, float %1180, float %1181, float %1182, float %1183, float %1184, i64 %1168, i64 %459, i1 true) #2, !dbg !67
  %1186 = add i32 %1136, 6144, !dbg !67
  %1187 = lshr exact i32 %1186, 4, !dbg !67
  %1188 = and i32 %1187, 16383, !dbg !67
  %1189 = zext nneg i32 %1188 to i64, !dbg !67
  %1190 = or disjoint i64 %1189, 4611686293338849280, !dbg !67
  %1191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 0, !dbg !67
  %1192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 1, !dbg !67
  %1193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 2, !dbg !67
  %1194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 3, !dbg !67
  %1195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 4, !dbg !67
  %1196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 5, !dbg !67
  %1197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 6, !dbg !67
  %1198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 7, !dbg !67
  %1199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 8, !dbg !67
  %1200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 9, !dbg !67
  %1201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 10, !dbg !67
  %1202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 11, !dbg !67
  %1203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 12, !dbg !67
  %1204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 13, !dbg !67
  %1205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 14, !dbg !67
  %1206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1185, 15, !dbg !67
  %1207 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 1, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %1191, float %1192, float %1193, float %1194, float %1195, float %1196, float %1197, float %1198, float %1199, float %1200, float %1201, float %1202, float %1203, float %1204, float %1205, float %1206, i64 %1190, i64 %463, i1 true) #2, !dbg !67
  %1208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 0, !dbg !67
  %1209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 1, !dbg !67
  %1210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 2, !dbg !67
  %1211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 3, !dbg !67
  %1212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 4, !dbg !67
  %1213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 5, !dbg !67
  %1214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 6, !dbg !67
  %1215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 7, !dbg !67
  %1216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 8, !dbg !67
  %1217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 9, !dbg !67
  %1218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 10, !dbg !67
  %1219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 11, !dbg !67
  %1220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 12, !dbg !67
  %1221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 13, !dbg !67
  %1222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 14, !dbg !67
  %1223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %1207, 15, !dbg !67
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !67
  %1224 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %1208, float %1209, float %1210, float %1211, float %1212, float %1213, float %1214, float %1215, float %1216, float %1217, float %1218, float %1219, float %1220, float %1221, float %1222, float %1223, ptr addrspace(3) %1135, i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143360), i32 0, i32 0) #2, !dbg !67
  %1225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 0, !dbg !67
  %1226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 1, !dbg !67
  %1227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 2, !dbg !67
  %1228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 3, !dbg !67
  %1229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 4, !dbg !67
  %1230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 5, !dbg !67
  %1231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 6, !dbg !67
  %1232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 7, !dbg !67
  %1233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 8, !dbg !67
  %1234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 9, !dbg !67
  %1235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 10, !dbg !67
  %1236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 11, !dbg !67
  %1237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 12, !dbg !67
  %1238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 13, !dbg !67
  %1239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 14, !dbg !67
  %1240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %1224, 15, !dbg !67
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !31
  %1241 = shl i32 %indvars.iv.tr, 6, !dbg !31
  %1242 = add i32 %1241, 192, !dbg !31
  %1243 = sext i32 %1242 to i64, !dbg !31
  %1244 = or disjoint i64 %1243, %62, !dbg !35
  %1245 = or disjoint i64 %1243, %63, !dbg !35
  %1246 = or disjoint i64 %1243, %64, !dbg !35
  %1247 = or disjoint i64 %1243, %65, !dbg !35
  %1248 = or disjoint i64 %1243, %60, !dbg !35
  %1249 = or disjoint i64 %1243, %61, !dbg !35
  %1250 = or disjoint i64 %1243, %67, !dbg !35
  %1251 = or disjoint i64 %1243, %68, !dbg !35
  %1252 = shl nsw i64 %1244, 12, !dbg !35
  %1253 = shl nsw i64 %1245, 12, !dbg !35
  %1254 = shl nsw i64 %1246, 12, !dbg !35
  %1255 = shl nsw i64 %1247, 12, !dbg !35
  %1256 = shl nsw i64 %1248, 12, !dbg !35
  %1257 = shl nsw i64 %1249, 12, !dbg !35
  %1258 = or disjoint i64 %1252, %66, !dbg !35
  %1259 = or disjoint i64 %1253, %66, !dbg !35
  %1260 = or disjoint i64 %1254, %66, !dbg !35
  %1261 = or disjoint i64 %1255, %66, !dbg !35
  %1262 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1258, !dbg !35
  %1263 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1259, !dbg !35
  %1264 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1260, !dbg !35
  %1265 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1261, !dbg !35
  %1266 = icmp sgt i32 %1242, -1, !dbg !35
  %1267 = icmp slt i64 %1244, %77, !dbg !35
  %1268 = icmp slt i64 %1245, %77, !dbg !35
  %1269 = icmp slt i64 %1246, %77, !dbg !35
  %1270 = icmp slt i64 %1247, %77, !dbg !35
  %1271 = icmp slt i64 %1248, %77, !dbg !35
  %1272 = icmp slt i64 %1249, %77, !dbg !35
  %1273 = and i1 %1266, %1267, !dbg !35
  %1274 = and i1 %1266, %1268, !dbg !35
  %1275 = and i1 %1266, %1269, !dbg !35
  %1276 = and i1 %1266, %1270, !dbg !35
  %1277 = and i1 %1266, %1271, !dbg !35
  %1278 = and i1 %1266, %1272, !dbg !35
  %1279 = extractelement <4 x i32> %620, i64 3, !dbg !35
  %1280 = shl i32 %1279, 12, !dbg !35
  %1281 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1280, !dbg !35
  %1282 = and i1 %511, %1273, !dbg !34
  %1283 = and i1 %511, %1274, !dbg !34
  %1284 = and i1 %511, %1275, !dbg !34
  %1285 = and i1 %511, %1276, !dbg !34
  %1286 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1281, i32 %113, !dbg !35
  %1287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1281, i32 %116, !dbg !35
  %1288 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1281, i32 %119, !dbg !35
  %1289 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1281, i32 %122, !dbg !35
  %1290 = select i1 %1282, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1286, ptr addrspace(1) %1262, i32 %1290) #2, !dbg !35
  %1291 = select i1 %1283, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1287, ptr addrspace(1) %1263, i32 %1291) #2, !dbg !35
  %1292 = select i1 %1284, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1288, ptr addrspace(1) %1264, i32 %1292) #2, !dbg !35
  %1293 = select i1 %1285, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1289, ptr addrspace(1) %1265, i32 %1293) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %1294 = or disjoint i64 %1252, %76, !dbg !36
  %1295 = or disjoint i64 %1253, %76, !dbg !36
  %1296 = or disjoint i64 %1254, %76, !dbg !36
  %1297 = or disjoint i64 %1255, %76, !dbg !36
  %1298 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1294, !dbg !36
  %1299 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1295, !dbg !36
  %1300 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1296, !dbg !36
  %1301 = getelementptr bfloat, ptr addrspace(1) %29, i64 %1297, !dbg !36
  %1302 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %1280, !dbg !36
  %1303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %113, !dbg !36
  %1304 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %116, !dbg !36
  %1305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %119, !dbg !36
  %1306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %122, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1303, ptr addrspace(1) %1298, i32 %1290) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1304, ptr addrspace(1) %1299, i32 %1291) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1305, ptr addrspace(1) %1300, i32 %1292) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1306, ptr addrspace(1) %1301, i32 %1293) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %1307 = add nsw i64 %1256, %70, !dbg !37
  %1308 = add nsw i64 %1257, %70, !dbg !37
  %1309 = getelementptr bfloat, ptr addrspace(1) %27, i64 %1307, !dbg !37
  %1310 = getelementptr bfloat, ptr addrspace(1) %27, i64 %1308, !dbg !37
  %1311 = and i1 %73, %1277, !dbg !37
  %1312 = and i1 %73, %1278, !dbg !37
  %1313 = extractelement <4 x i32> %620, i64 1, !dbg !38
  %.idx284 = shl i32 %1313, 12, !dbg !37
  %1314 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %.idx284, !dbg !37
  %1315 = and i1 %511, %1311, !dbg !34
  %1316 = and i1 %511, %1312, !dbg !34
  %1317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1314, i32 %150, !dbg !37
  %1318 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1314, i32 %152, !dbg !37
  %1319 = select i1 %1315, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1317, ptr addrspace(1) %1309, i32 %1319) #2, !dbg !37
  %1320 = select i1 %1316, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1318, ptr addrspace(1) %1310, i32 %1320) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx285 = shl nsw i64 %1250, 7, !dbg !38
  %1321 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx285, !dbg !38
  %.idx286 = shl nsw i64 %1251, 7, !dbg !38
  %1322 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx286, !dbg !38
  %1323 = icmp slt i64 %1250, %77, !dbg !38
  %1324 = icmp slt i64 %1251, %77, !dbg !38
  %1325 = and i1 %1266, %1323, !dbg !38
  %1326 = and i1 %1266, %1324, !dbg !38
  %.idx287 = shl i32 %1313, 8, !dbg !38
  %1327 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 156672), i32 %.idx287, !dbg !38
  %1328 = and i1 %511, %1325, !dbg !34
  %1329 = and i1 %511, %1326, !dbg !34
  %1330 = getelementptr inbounds nuw float, ptr addrspace(3) %1327, i32 %58, !dbg !38
  %1331 = getelementptr inbounds nuw float, ptr addrspace(3) %1327, i32 %59, !dbg !38
  %1332 = select i1 %1328, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %1330, ptr addrspace(1) %1321, i32 %1332, i1 %165) #2, !dbg !38
  %1333 = select i1 %1329, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) nonnull %1331, ptr addrspace(1) %1322, i32 %1333, i1 %165) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %1334 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1258, !dbg !39
  %1335 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1259, !dbg !39
  %1336 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1260, !dbg !39
  %1337 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1261, !dbg !39
  %1338 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %1280, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1338, i32 %113, !dbg !39
  %1340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1338, i32 %116, !dbg !39
  %1341 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1338, i32 %119, !dbg !39
  %1342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1338, i32 %122, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1339, ptr addrspace(1) %1334, i32 %1290) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1340, ptr addrspace(1) %1335, i32 %1291) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1341, ptr addrspace(1) %1336, i32 %1292) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1342, ptr addrspace(1) %1337, i32 %1293) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %1343 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1294, !dbg !40
  %1344 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1295, !dbg !40
  %1345 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1296, !dbg !40
  %1346 = getelementptr bfloat, ptr addrspace(1) %28, i64 %1297, !dbg !40
  %1347 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %1280, !dbg !40
  %1348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1347, i32 %113, !dbg !40
  %1349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1347, i32 %116, !dbg !40
  %1350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1347, i32 %119, !dbg !40
  %1351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1347, i32 %122, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1348, ptr addrspace(1) %1343, i32 %1290) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1349, ptr addrspace(1) %1344, i32 %1291) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1350, ptr addrspace(1) %1345, i32 %1292) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1351, ptr addrspace(1) %1346, i32 %1293) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %474, !dbg !34

._crit_edge:                                      ; preds = %474, %9
  %1352 = phi float [ 0.000000e+00, %9 ], [ %1119, %474 ]
  %1353 = phi float [ 0.000000e+00, %9 ], [ %1120, %474 ]
  %1354 = phi float [ 0.000000e+00, %9 ], [ %1121, %474 ]
  %1355 = phi float [ 0.000000e+00, %9 ], [ %1122, %474 ]
  %1356 = phi float [ 0.000000e+00, %9 ], [ %1123, %474 ]
  %1357 = phi float [ 0.000000e+00, %9 ], [ %1124, %474 ]
  %1358 = phi float [ 0.000000e+00, %9 ], [ %1125, %474 ]
  %1359 = phi float [ 0.000000e+00, %9 ], [ %1126, %474 ]
  %1360 = phi float [ 0.000000e+00, %9 ], [ %1127, %474 ]
  %1361 = phi float [ 0.000000e+00, %9 ], [ %1128, %474 ]
  %1362 = phi float [ 0.000000e+00, %9 ], [ %1129, %474 ]
  %1363 = phi float [ 0.000000e+00, %9 ], [ %1130, %474 ]
  %1364 = phi float [ 0.000000e+00, %9 ], [ %1131, %474 ]
  %1365 = phi float [ 0.000000e+00, %9 ], [ %1132, %474 ]
  %1366 = phi float [ 0.000000e+00, %9 ], [ %1133, %474 ]
  %1367 = phi float [ 0.000000e+00, %9 ], [ %1134, %474 ]
  %1368 = phi float [ 0.000000e+00, %9 ], [ %1225, %474 ]
  %1369 = phi float [ 0.000000e+00, %9 ], [ %1226, %474 ]
  %1370 = phi float [ 0.000000e+00, %9 ], [ %1227, %474 ]
  %1371 = phi float [ 0.000000e+00, %9 ], [ %1228, %474 ]
  %1372 = phi float [ 0.000000e+00, %9 ], [ %1229, %474 ]
  %1373 = phi float [ 0.000000e+00, %9 ], [ %1230, %474 ]
  %1374 = phi float [ 0.000000e+00, %9 ], [ %1231, %474 ]
  %1375 = phi float [ 0.000000e+00, %9 ], [ %1232, %474 ]
  %1376 = phi float [ 0.000000e+00, %9 ], [ %1233, %474 ]
  %1377 = phi float [ 0.000000e+00, %9 ], [ %1234, %474 ]
  %1378 = phi float [ 0.000000e+00, %9 ], [ %1235, %474 ]
  %1379 = phi float [ 0.000000e+00, %9 ], [ %1236, %474 ]
  %1380 = phi float [ 0.000000e+00, %9 ], [ %1237, %474 ]
  %1381 = phi float [ 0.000000e+00, %9 ], [ %1238, %474 ]
  %1382 = phi float [ 0.000000e+00, %9 ], [ %1239, %474 ]
  %1383 = phi float [ 0.000000e+00, %9 ], [ %1240, %474 ]
  %1384 = zext nneg i32 %15 to i64, !dbg !68
  %1385 = getelementptr float, ptr addrspace(1) %6, i64 %1384, !dbg !68
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %1386 = shl nuw nsw i32 %33, 2, !dbg !69
  %1387 = and i32 %1386, 28, !dbg !69
  %1388 = zext nneg i32 %1387 to i64, !dbg !69
  %1389 = or disjoint i64 %1388, %32, !dbg !69
  %.idx139 = shl nuw nsw i64 %62, 9, !dbg !69
  %1390 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx139, !dbg !69
  %1391 = getelementptr float, ptr addrspace(1) %1390, i64 %1389, !dbg !69
  %.idx140 = shl nuw nsw i64 %63, 9, !dbg !69
  %1392 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx140, !dbg !69
  %1393 = getelementptr float, ptr addrspace(1) %1392, i64 %1389, !dbg !69
  %.idx141 = shl nuw nsw i64 %64, 9, !dbg !69
  %1394 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx141, !dbg !69
  %1395 = getelementptr float, ptr addrspace(1) %1394, i64 %1389, !dbg !69
  %.idx142 = shl nuw nsw i64 %65, 9, !dbg !69
  %1396 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx142, !dbg !69
  %1397 = getelementptr float, ptr addrspace(1) %1396, i64 %1389, !dbg !69
  %1398 = icmp slt i64 %1389, 128, !dbg !69
  %1399 = and i1 %71, %1398, !dbg !69
  %1400 = shl nuw nsw i32 %33, 1, !dbg !69
  %1401 = and i32 %1400, 6, !dbg !69
  %1402 = and i32 %51, 192, !dbg !69
  %1403 = or disjoint i32 %1402, %1401, !dbg !69
  %1404 = shl nuw nsw i32 %33, 4, !dbg !69
  %1405 = and i32 %1404, 1536, !dbg !69
  %1406 = or disjoint i32 %1403, %1405, !dbg !69
  %1407 = or disjoint i32 %1406, %54, !dbg !69
  %1408 = and i32 %1386, 508, !dbg !69
  %1409 = lshr i32 %1407, 3, !dbg !69
  %1410 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1409, !dbg !69
  %1411 = getelementptr inbounds nuw float, ptr addrspace(3) %1410, i32 %1407, !dbg !69
  %1412 = insertelement <2 x float> poison, float %1352, i64 0, !dbg !69
  %1413 = insertelement <2 x float> %1412, float %1353, i64 1, !dbg !69
  store <2 x float> %1413, ptr addrspace(3) %1411, align 8, !dbg !69
  %1414 = or disjoint i32 %1407, 256, !dbg !69
  %1415 = lshr i32 %1414, 3, !dbg !69
  %1416 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1415, !dbg !69
  %1417 = getelementptr inbounds nuw float, ptr addrspace(3) %1416, i32 %1414, !dbg !69
  %1418 = insertelement <2 x float> poison, float %1354, i64 0, !dbg !69
  %1419 = insertelement <2 x float> %1418, float %1355, i64 1, !dbg !69
  store <2 x float> %1419, ptr addrspace(3) %1417, align 8, !dbg !69
  %1420 = getelementptr inbounds nuw i8, ptr addrspace(3) %1411, i32 32, !dbg !69
  %1421 = insertelement <2 x float> poison, float %1356, i64 0, !dbg !69
  %1422 = insertelement <2 x float> %1421, float %1357, i64 1, !dbg !69
  store <2 x float> %1422, ptr addrspace(3) %1420, align 8, !dbg !69
  %1423 = or disjoint i32 %1407, 264, !dbg !69
  %1424 = lshr i32 %1423, 3, !dbg !69
  %1425 = and i32 %1424, 536870908, !dbg !69
  %1426 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1425, !dbg !69
  %1427 = getelementptr inbounds nuw float, ptr addrspace(3) %1426, i32 %1423, !dbg !69
  %1428 = insertelement <2 x float> poison, float %1358, i64 0, !dbg !69
  %1429 = insertelement <2 x float> %1428, float %1359, i64 1, !dbg !69
  store <2 x float> %1429, ptr addrspace(3) %1427, align 8, !dbg !69
  %1430 = getelementptr inbounds nuw i8, ptr addrspace(3) %1411, i32 64, !dbg !69
  %1431 = insertelement <2 x float> poison, float %1360, i64 0, !dbg !69
  %1432 = insertelement <2 x float> %1431, float %1361, i64 1, !dbg !69
  store <2 x float> %1432, ptr addrspace(3) %1430, align 8, !dbg !69
  %1433 = or disjoint i32 %1407, 272, !dbg !69
  %1434 = lshr i32 %1433, 3, !dbg !69
  %1435 = and i32 %1434, 536870908, !dbg !69
  %1436 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1435, !dbg !69
  %1437 = getelementptr inbounds nuw float, ptr addrspace(3) %1436, i32 %1433, !dbg !69
  %1438 = insertelement <2 x float> poison, float %1362, i64 0, !dbg !69
  %1439 = insertelement <2 x float> %1438, float %1363, i64 1, !dbg !69
  store <2 x float> %1439, ptr addrspace(3) %1437, align 8, !dbg !69
  %1440 = getelementptr inbounds nuw i8, ptr addrspace(3) %1411, i32 96, !dbg !69
  %1441 = insertelement <2 x float> poison, float %1364, i64 0, !dbg !69
  %1442 = insertelement <2 x float> %1441, float %1365, i64 1, !dbg !69
  store <2 x float> %1442, ptr addrspace(3) %1440, align 8, !dbg !69
  %1443 = or disjoint i32 %1407, 280, !dbg !69
  %1444 = lshr i32 %1443, 3, !dbg !69
  %1445 = and i32 %1444, 536870908, !dbg !69
  %1446 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1445, !dbg !69
  %1447 = getelementptr inbounds nuw float, ptr addrspace(3) %1446, i32 %1443, !dbg !69
  %1448 = insertelement <2 x float> poison, float %1366, i64 0, !dbg !69
  %1449 = insertelement <2 x float> %1448, float %1367, i64 1, !dbg !69
  store <2 x float> %1449, ptr addrspace(3) %1447, align 8, !dbg !69
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !69
  %1450 = lshr i32 %33, 1, !dbg !69
  %1451 = and i32 %1450, 60, !dbg !69
  %1452 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1451, !dbg !69
  %1453 = getelementptr inbounds nuw float, ptr addrspace(3) %1452, i32 %1408, !dbg !69
  %1454 = or disjoint i32 %1408, 512, !dbg !69
  %1455 = lshr i32 %1454, 3, !dbg !69
  %1456 = and i32 %1455, 124, !dbg !69
  %1457 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1456, !dbg !69
  %1458 = getelementptr inbounds nuw float, ptr addrspace(3) %1457, i32 %1454, !dbg !69
  %1459 = load <4 x i32>, ptr addrspace(3) %1458, align 16, !dbg !69
  %1460 = or disjoint i32 %1408, 1024, !dbg !69
  %1461 = lshr i32 %1460, 3, !dbg !69
  %1462 = and i32 %1461, 188, !dbg !69
  %1463 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1462, !dbg !69
  %1464 = getelementptr inbounds nuw float, ptr addrspace(3) %1463, i32 %1460, !dbg !69
  %1465 = load <4 x i32>, ptr addrspace(3) %1464, align 16, !dbg !69
  %1466 = or disjoint i32 %1408, 1536, !dbg !69
  %1467 = lshr i32 %1466, 3, !dbg !69
  %1468 = and i32 %1467, 252, !dbg !69
  %1469 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1468, !dbg !69
  %1470 = getelementptr inbounds nuw float, ptr addrspace(3) %1469, i32 %1466, !dbg !69
  %1471 = load <4 x i32>, ptr addrspace(3) %1470, align 16, !dbg !69
  %.extract = load i32, ptr addrspace(3) %1453, align 16, !dbg !69
  %1472 = getelementptr inbounds nuw i8, ptr addrspace(3) %1453, i32 4, !dbg !69
  %.extract158 = load i32, ptr addrspace(3) %1472, align 4, !dbg !69
  %1473 = getelementptr inbounds nuw i8, ptr addrspace(3) %1453, i32 8, !dbg !69
  %.extract159 = load i32, ptr addrspace(3) %1473, align 8, !dbg !69
  %1474 = getelementptr inbounds nuw i8, ptr addrspace(3) %1453, i32 12, !dbg !69
  %.extract160 = load i32, ptr addrspace(3) %1474, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract158, i32 %.extract159, i32 %.extract160, ptr addrspace(1) %1391, i1 %1399) #2, !dbg !69
  %.extract161 = extractelement <4 x i32> %1459, i64 0, !dbg !69
  %.extract162 = extractelement <4 x i32> %1459, i64 1, !dbg !69
  %.extract163 = extractelement <4 x i32> %1459, i64 2, !dbg !69
  %.extract164 = extractelement <4 x i32> %1459, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract161, i32 %.extract162, i32 %.extract163, i32 %.extract164, ptr addrspace(1) %1393, i1 %1399) #2, !dbg !69
  %.extract165 = extractelement <4 x i32> %1465, i64 0, !dbg !69
  %.extract166 = extractelement <4 x i32> %1465, i64 1, !dbg !69
  %.extract167 = extractelement <4 x i32> %1465, i64 2, !dbg !69
  %.extract168 = extractelement <4 x i32> %1465, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract165, i32 %.extract166, i32 %.extract167, i32 %.extract168, ptr addrspace(1) %1395, i1 %1399) #2, !dbg !69
  %.extract169 = extractelement <4 x i32> %1471, i64 0, !dbg !69
  %.extract170 = extractelement <4 x i32> %1471, i64 1, !dbg !69
  %.extract171 = extractelement <4 x i32> %1471, i64 2, !dbg !69
  %.extract172 = extractelement <4 x i32> %1471, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract169, i32 %.extract170, i32 %.extract171, i32 %.extract172, ptr addrspace(1) %1397, i1 %1399) #2, !dbg !69
  %.idx173 = shl nuw nsw i64 %185, 9, !dbg !70
  %1475 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx173, !dbg !70
  %1476 = getelementptr float, ptr addrspace(1) %1475, i64 %1389, !dbg !70
  %.idx174 = shl nuw nsw i64 %186, 9, !dbg !70
  %1477 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx174, !dbg !70
  %1478 = getelementptr float, ptr addrspace(1) %1477, i64 %1389, !dbg !70
  %.idx175 = shl nuw nsw i64 %187, 9, !dbg !70
  %1479 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx175, !dbg !70
  %1480 = getelementptr float, ptr addrspace(1) %1479, i64 %1389, !dbg !70
  %.idx176 = shl nuw nsw i64 %188, 9, !dbg !70
  %1481 = getelementptr i8, ptr addrspace(1) %1385, i64 %.idx176, !dbg !70
  %1482 = getelementptr float, ptr addrspace(1) %1481, i64 %1389, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %1483 = insertelement <2 x float> poison, float %1368, i64 0, !dbg !70
  %1484 = insertelement <2 x float> %1483, float %1369, i64 1, !dbg !70
  store <2 x float> %1484, ptr addrspace(3) %1411, align 8, !dbg !70
  %1485 = insertelement <2 x float> poison, float %1370, i64 0, !dbg !70
  %1486 = insertelement <2 x float> %1485, float %1371, i64 1, !dbg !70
  store <2 x float> %1486, ptr addrspace(3) %1417, align 8, !dbg !70
  %1487 = insertelement <2 x float> poison, float %1372, i64 0, !dbg !70
  %1488 = insertelement <2 x float> %1487, float %1373, i64 1, !dbg !70
  store <2 x float> %1488, ptr addrspace(3) %1420, align 8, !dbg !70
  %1489 = insertelement <2 x float> poison, float %1374, i64 0, !dbg !70
  %1490 = insertelement <2 x float> %1489, float %1375, i64 1, !dbg !70
  store <2 x float> %1490, ptr addrspace(3) %1427, align 8, !dbg !70
  %1491 = insertelement <2 x float> poison, float %1376, i64 0, !dbg !70
  %1492 = insertelement <2 x float> %1491, float %1377, i64 1, !dbg !70
  store <2 x float> %1492, ptr addrspace(3) %1430, align 8, !dbg !70
  %1493 = insertelement <2 x float> poison, float %1378, i64 0, !dbg !70
  %1494 = insertelement <2 x float> %1493, float %1379, i64 1, !dbg !70
  store <2 x float> %1494, ptr addrspace(3) %1437, align 8, !dbg !70
  %1495 = insertelement <2 x float> poison, float %1380, i64 0, !dbg !70
  %1496 = insertelement <2 x float> %1495, float %1381, i64 1, !dbg !70
  store <2 x float> %1496, ptr addrspace(3) %1440, align 8, !dbg !70
  %1497 = insertelement <2 x float> poison, float %1382, i64 0, !dbg !70
  %1498 = insertelement <2 x float> %1497, float %1383, i64 1, !dbg !70
  store <2 x float> %1498, ptr addrspace(3) %1447, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %1499 = load <4 x i32>, ptr addrspace(3) %1458, align 16, !dbg !70
  %1500 = load <4 x i32>, ptr addrspace(3) %1464, align 16, !dbg !70
  %1501 = load <4 x i32>, ptr addrspace(3) %1470, align 16, !dbg !70
  %.extract192 = load i32, ptr addrspace(3) %1453, align 16, !dbg !70
  %.extract193 = load i32, ptr addrspace(3) %1472, align 4, !dbg !70
  %.extract194 = load i32, ptr addrspace(3) %1473, align 8, !dbg !70
  %.extract195 = load i32, ptr addrspace(3) %1474, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract192, i32 %.extract193, i32 %.extract194, i32 %.extract195, ptr addrspace(1) %1476, i1 %1399) #2, !dbg !70
  %.extract196 = extractelement <4 x i32> %1499, i64 0, !dbg !70
  %.extract197 = extractelement <4 x i32> %1499, i64 1, !dbg !70
  %.extract198 = extractelement <4 x i32> %1499, i64 2, !dbg !70
  %.extract199 = extractelement <4 x i32> %1499, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract196, i32 %.extract197, i32 %.extract198, i32 %.extract199, ptr addrspace(1) %1478, i1 %1399) #2, !dbg !70
  %.extract200 = extractelement <4 x i32> %1500, i64 0, !dbg !70
  %.extract201 = extractelement <4 x i32> %1500, i64 1, !dbg !70
  %.extract202 = extractelement <4 x i32> %1500, i64 2, !dbg !70
  %.extract203 = extractelement <4 x i32> %1500, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract200, i32 %.extract201, i32 %.extract202, i32 %.extract203, ptr addrspace(1) %1480, i1 %1399) #2, !dbg !70
  %.extract204 = extractelement <4 x i32> %1501, i64 0, !dbg !70
  %.extract205 = extractelement <4 x i32> %1501, i64 1, !dbg !70
  %.extract206 = extractelement <4 x i32> %1501, i64 2, !dbg !70
  %.extract207 = extractelement <4 x i32> %1501, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract204, i32 %.extract205, i32 %.extract206, i32 %.extract207, ptr addrspace(1) %1482, i1 %1399) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 113, column: 43, scope: !5)
!42 = !DILocation(line: 113, column: 37, scope: !5)
!43 = !DILocation(line: 114, column: 31, scope: !5)
!44 = !DILocation(line: 117, column: 35, scope: !5)
!45 = !DILocation(line: 127, column: 26, scope: !5)
!46 = !DILocation(line: 145, column: 26, scope: !5)
!47 = !DILocation(line: 147, column: 30, scope: !5)
!48 = !DILocation(line: 147, column: 39, scope: !5)
!49 = !DILocation(line: 149, column: 30, scope: !5)
!50 = !DILocation(line: 149, column: 50, scope: !5)
!51 = !DILocation(line: 150, column: 56, scope: !5)
!52 = !DILocation(line: 150, column: 45, scope: !5)
!53 = !DILocation(line: 150, column: 60, scope: !5)
!54 = !DILocation(line: 131, column: 31, scope: !5)
!55 = !DILocation(line: 141, column: 52, scope: !5)
!56 = !DILocation(line: 145, column: 33, scope: !5)
!57 = !DILocation(line: 150, column: 31, scope: !5)
!58 = !DILocation(line: 153, column: 53, scope: !5)
!59 = !DILocation(line: 153, column: 42, scope: !5)
!60 = !DILocation(line: 153, column: 59, scope: !5)
!61 = !DILocation(line: 153, column: 24, scope: !5)
!62 = !DILocation(line: 154, column: 27, scope: !5)
!63 = !DILocation(line: 155, column: 20, scope: !5)
!64 = !DILocation(line: 157, column: 24, scope: !5)
!65 = !DILocation(line: 179, column: 21, scope: !5)
!66 = !DILocation(line: 186, column: 28, scope: !5)
!67 = !DILocation(line: 193, column: 32, scope: !5)
!68 = !DILocation(line: 95, column: 18, scope: !5)
!69 = !DILocation(line: 211, column: 23, scope: !5)
!70 = !DILocation(line: 214, column: 27, scope: !5)
!71 = !DILocation(line: 209, column: 4, scope: !5)
