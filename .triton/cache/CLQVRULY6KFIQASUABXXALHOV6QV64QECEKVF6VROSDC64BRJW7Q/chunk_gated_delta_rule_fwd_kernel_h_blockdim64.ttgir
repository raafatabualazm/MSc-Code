#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 32, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#shared4 = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x32xi64, #blocked2> loc(#loc1)
    %cst_11 = arith.constant dense<128> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<128> : tensor<1x32xi64, #blocked2> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc1)
    %cst_14 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_17 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_18 = arith.constant dense<4096> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_19 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_21 = arith.constant dense<128> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_22 = arith.constant dense<4096> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %cst_23 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_24 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_25 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_26 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_27 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_28 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_29 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_30 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc72)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc73)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c32_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %29 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %30 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %31 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
    %32 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %33 = arith.extsi %27 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %34 = arith.extsi %28 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %35 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc26)
    %36 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc26)
    %37 = arith.muli %35, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %38 = tt.broadcast %37 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc26)
    %39 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %40 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %41 = arith.extsi %40 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %42 = arith.addi %39, %41 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %43 = tt.expand_dims %42 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi64, #blocked2> loc(#loc26)
    %44 = tt.broadcast %43 : tensor<1x32xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc26)
    %45 = arith.addi %38, %44 : tensor<64x32xi64, #blocked2> loc(#loc26)
    %46 = arith.cmpi sge, %35, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %47 = arith.cmpi sge, %36, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc26)
    %48 = arith.cmpi slt, %35, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %49 = arith.cmpi slt, %36, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc26)
    %50 = arith.andi %46, %48 : tensor<64x1xi1, #blocked2> loc(#loc26)
    %51 = arith.andi %47, %49 : tensor<64x1xi1, #blocked> loc(#loc26)
    %52 = tt.broadcast %50 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc26)
    %53 = arith.cmpi sge, %43, %cst_10 : tensor<1x32xi64, #blocked2> loc(#loc26)
    %54 = arith.cmpi slt, %43, %cst_12 : tensor<1x32xi64, #blocked2> loc(#loc26)
    %55 = arith.andi %53, %54 : tensor<1x32xi1, #blocked2> loc(#loc26)
    %56 = tt.broadcast %55 : tensor<1x32xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc26)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked2> loc(#loc26)
    %58 = arith.addi %29, %cst_16 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc27)
    %59 = arith.addi %31, %cst_14 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc27)
    %60 = arith.addi %33, %cst_13 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc27)
    %61 = tt.expand_dims %58 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc27)
    %62 = tt.expand_dims %59 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc27)
    %63 = arith.muli %61, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %64 = tt.broadcast %63 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc27)
    %65 = arith.addi %64, %44 : tensor<64x32xi64, #blocked2> loc(#loc27)
    %66 = arith.cmpi sge, %61, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %67 = arith.cmpi sge, %62, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc27)
    %68 = arith.cmpi slt, %61, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %69 = arith.cmpi slt, %62, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc27)
    %70 = arith.andi %66, %68 : tensor<64x1xi1, #blocked2> loc(#loc27)
    %71 = arith.andi %67, %69 : tensor<64x1xi1, #blocked> loc(#loc27)
    %72 = tt.broadcast %70 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc27)
    %73 = arith.andi %72, %56 : tensor<64x32xi1, #blocked2> loc(#loc27)
    %74 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %75 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked3> loc(#loc29)
    %76 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc29)
    %77 = tt.broadcast %76 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %78 = tt.splat %74 : i64 -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %79 = tt.splat %74 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %80 = arith.cmpi sge, %76, %cst_20 : tensor<1x64xi64, #blocked3> loc(#loc29)
    %81 = arith.cmpi slt, %76, %cst_21 : tensor<1x64xi64, #blocked3> loc(#loc29)
    %82 = arith.andi %80, %81 : tensor<1x64xi1, #blocked3> loc(#loc29)
    %83 = tt.broadcast %82 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %84 = tt.expand_dims %60 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc30)
    %85 = tt.broadcast %84 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc30)
    %86 = arith.cmpi sge, %84, %cst_20 : tensor<1x64xi64, #blocked3> loc(#loc30)
    %87 = arith.cmpi slt, %84, %cst_21 : tensor<1x64xi64, #blocked3> loc(#loc30)
    %88 = arith.andi %86, %87 : tensor<1x64xi1, #blocked3> loc(#loc30)
    %89 = tt.broadcast %88 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc30)
    %90 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc31)
    %91 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc32)
    %92 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %93 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %94 = tt.addptr %93, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %95 = tt.splat %94 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %96 = tt.splat %74 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %97 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc37)
    %98 = tt.broadcast %36 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %99 = tt.broadcast %51 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %100 = tt.splat %74 : i64 -> tensor<1x64xi64, #blocked> loc(#loc37)
    %101 = tt.broadcast %62 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc38)
    %102 = tt.broadcast %71 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc38)
    %103 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %105 = ttg.local_alloc : () -> !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> loc(#loc31)
    %106 = ttg.local_alloc : () -> !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> loc(#loc36)
    %107 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> loc(#loc37)
    %108 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> loc(#loc38)
    %109 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %110 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %111 = arith.muli %110, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %112 = arith.muli %35, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %113 = tt.broadcast %111 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %114 = arith.addi %113, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
    %115 = tt.addptr %75, %114 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
    %116 = arith.cmpi sge, %110, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %117 = arith.cmpi slt, %110, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %118 = arith.cmpi slt, %35, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %119 = arith.andi %116, %117 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %120 = arith.andi %46, %118 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %121 = tt.broadcast %119 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %122 = arith.andi %121, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
    %123 = ttg.memdesc_subview %103[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %124 = tt.splat %109 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
    %125 = arith.andi %124, %122 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %126 = ttg.async_copy_global_to_local %115, %123 mask %125 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %127 = ttg.async_commit_group %126 loc(#loc29)
    %128 = arith.addi %113, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
    %129 = tt.addptr %75, %128 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
    %130 = arith.andi %121, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
    %131 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %132 = arith.andi %124, %130 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %133 = ttg.async_copy_global_to_local %129, %131 mask %132 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %134 = ttg.async_commit_group %133 loc(#loc30)
    %135 = tt.broadcast %112 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
    %136 = arith.addi %135, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
    %137 = tt.addptr %90, %136 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
    %138 = tt.broadcast %120 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
    %139 = arith.andi %138, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
    %140 = ttg.memdesc_subview %105[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %141 = tt.splat %109 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
    %142 = arith.andi %141, %139 : tensor<64x32xi1, #blocked2> loc(#loc39)
    %143 = ttg.async_copy_global_to_local %137, %140 mask %142 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %144 = ttg.async_commit_group %143 loc(#loc31)
    %145 = arith.muli %32, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %146 = tt.addptr %95, %145 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %147 = arith.cmpi sge, %32, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %148 = arith.cmpi slt, %32, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %149 = arith.andi %147, %148 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %150 = ttg.memdesc_subview %106[%c0_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %151 = tt.splat %109 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %152 = arith.andi %151, %149 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %153 = ttg.async_copy_global_to_local %146, %150 mask %152 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %154 = ttg.async_commit_group %153 loc(#loc36)
    %155 = tt.expand_dims %34 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
    %156 = arith.muli %155, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
    %157 = tt.broadcast %156 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %158 = arith.addi %98, %157 : tensor<64x64xi64, #blocked> loc(#loc37)
    %159 = tt.addptr %97, %158 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
    %160 = arith.cmpi sge, %155, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
    %161 = arith.cmpi slt, %155, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
    %162 = arith.andi %160, %161 : tensor<1x64xi1, #blocked> loc(#loc37)
    %163 = tt.broadcast %162 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %164 = arith.andi %99, %163 : tensor<64x64xi1, #blocked> loc(#loc37)
    %165 = ttg.memdesc_subview %107[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %166 = tt.splat %109 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
    %167 = arith.andi %166, %164 : tensor<64x64xi1, #blocked> loc(#loc39)
    %168 = ttg.async_copy_global_to_local %159, %165 mask %167 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %169 = ttg.async_commit_group %168 loc(#loc37)
    %170 = arith.addi %101, %157 : tensor<64x64xi64, #blocked> loc(#loc38)
    %171 = tt.addptr %97, %170 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
    %172 = arith.andi %102, %163 : tensor<64x64xi1, #blocked> loc(#loc38)
    %173 = ttg.memdesc_subview %108[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %174 = arith.andi %166, %172 : tensor<64x64xi1, #blocked> loc(#loc39)
    %175 = ttg.async_copy_global_to_local %171, %173 mask %174 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %176 = ttg.async_commit_group %175 loc(#loc38)
    %177 = arith.cmpi sgt, %6, %c1_i32 : i32 loc(#loc39)
    %178 = arith.addi %30, %cst_24 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
    %179 = arith.addi %32, %cst_25 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %180 = arith.addi %34, %cst_26 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %181 = tt.expand_dims %178 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %182 = arith.muli %181, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %183 = arith.muli %61, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %184 = tt.broadcast %182 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %185 = arith.addi %184, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
    %186 = tt.addptr %75, %185 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
    %187 = arith.cmpi sge, %181, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %188 = arith.cmpi slt, %181, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %189 = arith.cmpi slt, %61, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %190 = arith.andi %187, %188 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %191 = arith.andi %66, %189 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %192 = tt.broadcast %190 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %193 = arith.andi %192, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
    %194 = ttg.memdesc_subview %103[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %195 = tt.splat %177 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
    %196 = arith.andi %195, %193 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %197 = ttg.async_copy_global_to_local %186, %194 mask %196 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %198 = ttg.async_commit_group %197 loc(#loc29)
    %199 = arith.addi %184, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
    %200 = tt.addptr %75, %199 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
    %201 = arith.andi %192, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
    %202 = ttg.memdesc_subview %104[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %203 = arith.andi %195, %201 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %204 = ttg.async_copy_global_to_local %200, %202 mask %203 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %205 = ttg.async_commit_group %204 loc(#loc30)
    %206 = tt.broadcast %183 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
    %207 = arith.addi %206, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
    %208 = tt.addptr %90, %207 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
    %209 = tt.broadcast %191 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
    %210 = arith.andi %209, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
    %211 = ttg.memdesc_subview %105[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %212 = tt.splat %177 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
    %213 = arith.andi %212, %210 : tensor<64x32xi1, #blocked2> loc(#loc39)
    %214 = ttg.async_copy_global_to_local %208, %211 mask %213 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %215 = ttg.async_commit_group %214 loc(#loc31)
    %216 = arith.muli %179, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %217 = tt.addptr %95, %216 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %218 = arith.cmpi sge, %179, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %219 = arith.cmpi slt, %179, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %220 = arith.andi %218, %219 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %221 = ttg.memdesc_subview %106[%c1_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %222 = tt.splat %177 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %223 = arith.andi %222, %220 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %224 = ttg.async_copy_global_to_local %217, %221 mask %223 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %225 = ttg.async_commit_group %224 loc(#loc36)
    %226 = tt.expand_dims %180 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
    %227 = arith.muli %226, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
    %228 = tt.broadcast %227 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %229 = arith.addi %98, %228 : tensor<64x64xi64, #blocked> loc(#loc37)
    %230 = tt.addptr %97, %229 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
    %231 = arith.cmpi sge, %226, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
    %232 = arith.cmpi slt, %226, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
    %233 = arith.andi %231, %232 : tensor<1x64xi1, #blocked> loc(#loc37)
    %234 = tt.broadcast %233 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %235 = arith.andi %99, %234 : tensor<64x64xi1, #blocked> loc(#loc37)
    %236 = ttg.memdesc_subview %107[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %237 = tt.splat %177 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
    %238 = arith.andi %237, %235 : tensor<64x64xi1, #blocked> loc(#loc39)
    %239 = ttg.async_copy_global_to_local %230, %236 mask %238 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %240 = ttg.async_commit_group %239 loc(#loc37)
    %241 = arith.addi %101, %228 : tensor<64x64xi64, #blocked> loc(#loc38)
    %242 = tt.addptr %97, %241 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
    %243 = arith.andi %102, %234 : tensor<64x64xi1, #blocked> loc(#loc38)
    %244 = ttg.memdesc_subview %108[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %245 = arith.andi %237, %243 : tensor<64x64xi1, #blocked> loc(#loc39)
    %246 = ttg.async_copy_global_to_local %242, %244 mask %245 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %247 = ttg.async_commit_group %246 loc(#loc38)
    %248 = arith.cmpi sgt, %6, %c2_i32 : i32 loc(#loc39)
    %249 = arith.addi %30, %cst_27 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
    %250 = arith.addi %29, %cst_28 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
    %251 = arith.addi %32, %cst_29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %252 = arith.addi %34, %cst_30 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %253 = tt.expand_dims %249 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %254 = tt.expand_dims %250 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %255 = arith.muli %253, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %256 = arith.muli %254, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %257 = tt.broadcast %255 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %258 = arith.addi %257, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
    %259 = tt.addptr %75, %258 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
    %260 = arith.cmpi sge, %253, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %261 = arith.cmpi sge, %254, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %262 = arith.cmpi slt, %253, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %263 = arith.cmpi slt, %254, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %264 = arith.andi %260, %262 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %265 = arith.andi %261, %263 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %266 = tt.broadcast %264 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %267 = arith.andi %266, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
    %268 = ttg.memdesc_subview %103[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %269 = tt.splat %248 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
    %270 = arith.andi %269, %267 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %271 = ttg.async_copy_global_to_local %259, %268 mask %270 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
    %272 = ttg.async_commit_group %271 loc(#loc29)
    %273 = arith.addi %257, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
    %274 = tt.addptr %75, %273 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
    %275 = arith.andi %266, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
    %276 = ttg.memdesc_subview %104[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %277 = arith.andi %269, %275 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %278 = ttg.async_copy_global_to_local %274, %276 mask %277 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
    %279 = ttg.async_commit_group %278 loc(#loc30)
    %280 = tt.broadcast %256 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
    %281 = arith.addi %280, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
    %282 = tt.addptr %90, %281 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
    %283 = tt.broadcast %265 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
    %284 = arith.andi %283, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
    %285 = ttg.memdesc_subview %105[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %286 = tt.splat %248 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
    %287 = arith.andi %286, %284 : tensor<64x32xi1, #blocked2> loc(#loc39)
    %288 = ttg.async_copy_global_to_local %282, %285 mask %287 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
    %289 = ttg.async_commit_group %288 loc(#loc31)
    %290 = arith.muli %251, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %291 = tt.addptr %95, %290 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %292 = arith.cmpi sge, %251, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %293 = arith.cmpi slt, %251, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %294 = arith.andi %292, %293 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %295 = ttg.memdesc_subview %106[%c2_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %296 = tt.splat %248 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %297 = arith.andi %296, %294 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %298 = ttg.async_copy_global_to_local %291, %295 mask %297 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
    %299 = ttg.async_commit_group %298 loc(#loc36)
    %300 = tt.expand_dims %252 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
    %301 = arith.muli %300, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
    %302 = tt.broadcast %301 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %303 = arith.addi %98, %302 : tensor<64x64xi64, #blocked> loc(#loc37)
    %304 = tt.addptr %97, %303 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
    %305 = arith.cmpi sge, %300, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
    %306 = arith.cmpi slt, %300, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
    %307 = arith.andi %305, %306 : tensor<1x64xi1, #blocked> loc(#loc37)
    %308 = tt.broadcast %307 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %309 = arith.andi %99, %308 : tensor<64x64xi1, #blocked> loc(#loc37)
    %310 = ttg.memdesc_subview %107[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %311 = tt.splat %248 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
    %312 = arith.andi %311, %309 : tensor<64x64xi1, #blocked> loc(#loc39)
    %313 = ttg.async_copy_global_to_local %304, %310 mask %312 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
    %314 = ttg.async_commit_group %313 loc(#loc37)
    %315 = arith.addi %101, %302 : tensor<64x64xi64, #blocked> loc(#loc38)
    %316 = tt.addptr %97, %315 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
    %317 = arith.andi %102, %308 : tensor<64x64xi1, #blocked> loc(#loc38)
    %318 = ttg.memdesc_subview %108[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %319 = arith.andi %311, %317 : tensor<64x64xi1, #blocked> loc(#loc39)
    %320 = ttg.async_copy_global_to_local %316, %318 mask %319 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
    %321 = ttg.async_commit_group %320 loc(#loc38)
    %322:33 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_23, %arg10 = %cst_23, %arg11 = %c2_i32, %arg12 = %c-1_i32, %arg13 = %c2_i32, %arg14 = %c-1_i32, %arg15 = %127, %arg16 = %198, %arg17 = %272, %arg18 = %134, %arg19 = %205, %arg20 = %279, %arg21 = %144, %arg22 = %215, %arg23 = %289, %arg24 = %136, %arg25 = %207, %arg26 = %281, %arg27 = %139, %arg28 = %210, %arg29 = %284, %arg30 = %c0_i32, %arg31 = %c64_i32, %arg32 = %c128_i32, %arg33 = %154, %arg34 = %225, %arg35 = %299, %arg36 = %169, %arg37 = %240, %arg38 = %314, %arg39 = %176, %arg40 = %247, %arg41 = %321) -> (tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %360 = arith.subi %6, %c3_i32 : i32 loc(#loc39)
      %361 = arith.cmpi slt, %arg8, %360 : i32 loc(#loc39)
      %362 = arith.addi %arg14, %c1_i32 : i32 loc(#loc39)
      %363 = arith.cmpi sge, %362, %c3_i32 : i32 loc(#loc39)
      %364 = arith.select %363, %c0_i32, %362 : i32 loc(#loc39)
      %365 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %366 = arith.cmpi sge, %365, %c4_i32 : i32 loc(#loc39)
      %367 = arith.select %366, %c0_i32, %365 : i32 loc(#loc39)
      %368 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %369 = tt.addptr %11, %368 : !tt.ptr<bf16>, i32 loc(#loc41)
      %370 = arith.truncf %arg9 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc42)
      %371 = ttg.local_alloc %370 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc42)
      %372 = tt.splat %369 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %373 = tt.addptr %372, %45 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc26)
      %374 = ttg.convert_layout %370 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc26)
      tt.store %373, %374, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %375 = arith.truncf %arg10 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc43)
      %376 = ttg.local_alloc %375 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc43)
      %377 = tt.addptr %372, %65 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc27)
      %378 = ttg.convert_layout %375 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc27)
      tt.store %377, %378, %73 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc27)
      %379 = ttg.async_wait %arg15, %arg18, %arg21, %arg33, %arg36, %arg39 {num = 12 : i32} loc(#loc29)
      %380 = ttg.memdesc_subview %103[%367, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
      ttng.fence_async_shared {bCluster = false} loc(#loc44)
      %381 = ttng.warp_group_dot %380, %371, %cst_23 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc44)
      %382:3 = ttng.warp_group_dot_wait %381, %380, %371 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc44)
      %383 = ttg.memdesc_subview %104[%367, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      ttng.fence_async_shared {bCluster = false} loc(#loc45)
      %384 = ttng.warp_group_dot %383, %376, %382#0 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc45)
      %385:3 = ttng.warp_group_dot_wait %384, %383, %376 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc45)
      %386 = ttg.memdesc_subview %105[%364, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
      %387 = ttg.local_load %386 token %379 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> -> tensor<64x32xbf16, #mma> loc(#loc46)
      %388 = arith.extf %387 : tensor<64x32xbf16, #mma> to tensor<64x32xf32, #mma> loc(#loc46)
      %389 = arith.subf %388, %385#0 : tensor<64x32xf32, #mma> loc(#loc46)
      %390 = arith.truncf %389 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc47)
      %391 = ttg.convert_layout %390 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc47)
      %392 = tt.addptr %91, %arg24 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc32)
      tt.store %392, %391, %arg27 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %393 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %394 = arith.muli %393, %c64_i32 : i32 loc(#loc49)
      %395 = arith.minsi %394, %arg7 : i32 loc(#loc50)
      %396 = arith.subi %395, %c1_i32 : i32 loc(#loc51)
      %397 = tt.splat %arg30 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %398 = arith.addi %397, %26 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %399 = arith.cmpi slt, %398, %92 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %400 = arith.muli %396, %c32_i32 : i32 loc(#loc53)
      %401 = tt.addptr %93, %400 : !tt.ptr<f32>, i32 loc(#loc54)
      %402 = tt.addptr %401, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %403 = tt.load %402 : !tt.ptr<f32> loc(#loc56)
      %404 = ttg.memdesc_subview %106[%364, %c0_i32] : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
      %405 = ttg.local_load %404 token %379 : !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %406 = tt.splat %403 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %407 = arith.subf %406, %405 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %408 = math.exp %407 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %409 = arith.select %399, %408, %cst_1 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %410 = tt.expand_dims %409 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %411 = tt.broadcast %410 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc61)
      %412 = arith.mulf %389, %411 : tensor<64x32xf32, #mma> loc(#loc61)
      %413 = math.exp %403 : f32 loc(#loc62)
      %414 = tt.splat %413 : f32 -> tensor<64x32xf32, #mma> loc(#loc63)
      %415 = arith.mulf %arg9, %414 : tensor<64x32xf32, #mma> loc(#loc63)
      %416 = arith.mulf %arg10, %414 : tensor<64x32xf32, #mma> loc(#loc64)
      %417 = arith.truncf %412 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc65)
      %418 = ttg.local_alloc %417 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc65)
      %419 = ttg.memdesc_subview %107[%367, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
      ttng.fence_async_shared {bCluster = false} loc(#loc66)
      %420 = ttng.warp_group_dot %419, %418, %415 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc66)
      %421:3 = ttng.warp_group_dot_wait %420, %419, %418 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc66)
      %422 = ttg.memdesc_subview %108[%367, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
      ttng.fence_async_shared {bCluster = false} loc(#loc67)
      %423 = ttng.warp_group_dot %422, %418, %416 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc67)
      %424:3 = ttng.warp_group_dot_wait %423, %422, %418 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc67)
      %425 = arith.addi %arg13, %c1_i32 : i32 loc(#loc39)
      %426 = arith.cmpi sge, %425, %c3_i32 : i32 loc(#loc39)
      %427 = arith.select %426, %c0_i32, %425 : i32 loc(#loc39)
      %428 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %429 = arith.cmpi sge, %428, %c4_i32 : i32 loc(#loc39)
      %430 = arith.select %429, %c0_i32, %428 : i32 loc(#loc39)
      %431 = arith.addi %arg8, %c3_i32 : i32 loc(#loc39)
      %432 = arith.muli %431, %c64_i32 : i32 loc(#loc68)
      %433 = arith.extsi %432 : i32 to i64 loc(#loc28)
      %434 = tt.splat %433 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %435 = tt.splat %433 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %436 = tt.splat %433 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %437 = tt.splat %433 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
      %438 = arith.addi %434, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %439 = arith.addi %435, %29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %440 = arith.addi %436, %32 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %441 = arith.addi %437, %34 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
      %442 = tt.expand_dims %438 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
      %443 = tt.expand_dims %439 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %444 = arith.muli %442, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %445 = arith.muli %443, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %446 = tt.broadcast %444 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
      %447 = arith.addi %446, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
      %448 = tt.addptr %75, %447 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
      %449 = arith.cmpi sge, %442, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %450 = arith.cmpi sge, %443, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %451 = arith.cmpi slt, %442, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %452 = arith.cmpi slt, %443, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %453 = arith.andi %449, %451 : tensor<64x1xi1, #blocked3> loc(#loc29)
      %454 = arith.andi %450, %452 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %455 = tt.broadcast %453 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
      %456 = arith.andi %455, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
      %457 = ttg.memdesc_subview %103[%430, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
      %458 = tt.splat %361 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
      %459 = arith.andi %458, %456 : tensor<64x64xi1, #blocked3> loc(#loc39)
      %460 = ttg.async_copy_global_to_local %448, %457 mask %459 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc29)
      %461 = ttg.async_commit_group %460 loc(#loc29)
      %462 = arith.addi %446, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
      %463 = tt.addptr %75, %462 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
      %464 = arith.andi %455, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
      %465 = ttg.memdesc_subview %104[%430, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      %466 = arith.andi %458, %464 : tensor<64x64xi1, #blocked3> loc(#loc39)
      %467 = ttg.async_copy_global_to_local %463, %465 mask %466 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc30)
      %468 = ttg.async_commit_group %467 loc(#loc30)
      %469 = tt.broadcast %445 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
      %470 = arith.addi %469, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
      %471 = tt.addptr %90, %470 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
      %472 = tt.broadcast %454 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
      %473 = arith.andi %472, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
      %474 = ttg.memdesc_subview %105[%427, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
      %475 = tt.splat %361 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
      %476 = arith.andi %475, %473 : tensor<64x32xi1, #blocked2> loc(#loc39)
      %477 = ttg.async_copy_global_to_local %471, %474 mask %476 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 3x64x32> loc(#loc31)
      %478 = ttg.async_commit_group %477 loc(#loc31)
      %479 = arith.muli %440, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %480 = tt.addptr %95, %479 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %481 = arith.cmpi sge, %440, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %482 = arith.cmpi slt, %440, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %483 = arith.andi %481, %482 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %484 = ttg.memdesc_subview %106[%427, %c0_i32] : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
      %485 = tt.splat %361 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %486 = arith.andi %485, %483 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %487 = ttg.async_copy_global_to_local %480, %484 mask %486 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 3x64> loc(#loc36)
      %488 = ttg.async_commit_group %487 loc(#loc36)
      %489 = tt.expand_dims %441 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
      %490 = arith.muli %489, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
      %491 = tt.broadcast %490 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
      %492 = arith.addi %98, %491 : tensor<64x64xi64, #blocked> loc(#loc37)
      %493 = tt.addptr %97, %492 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
      %494 = arith.cmpi sge, %489, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
      %495 = arith.cmpi slt, %489, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
      %496 = arith.andi %494, %495 : tensor<1x64xi1, #blocked> loc(#loc37)
      %497 = tt.broadcast %496 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
      %498 = arith.andi %99, %497 : tensor<64x64xi1, #blocked> loc(#loc37)
      %499 = ttg.memdesc_subview %107[%430, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
      %500 = tt.splat %361 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
      %501 = arith.andi %500, %498 : tensor<64x64xi1, #blocked> loc(#loc39)
      %502 = ttg.async_copy_global_to_local %493, %499 mask %501 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc37)
      %503 = ttg.async_commit_group %502 loc(#loc37)
      %504 = arith.addi %101, %491 : tensor<64x64xi64, #blocked> loc(#loc38)
      %505 = tt.addptr %97, %504 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
      %506 = arith.andi %102, %497 : tensor<64x64xi1, #blocked> loc(#loc38)
      %507 = ttg.memdesc_subview %108[%430, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
      %508 = arith.andi %500, %506 : tensor<64x64xi1, #blocked> loc(#loc39)
      %509 = ttg.async_copy_global_to_local %505, %507 mask %508 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 4x64x64> loc(#loc38)
      %510 = ttg.async_commit_group %509 loc(#loc38)
      scf.yield %421#0, %424#0, %430, %367, %427, %364, %arg16, %arg17, %461, %arg19, %arg20, %468, %arg22, %arg23, %478, %arg25, %arg26, %470, %arg28, %arg29, %473, %arg31, %arg32, %432, %arg34, %arg35, %488, %arg37, %arg38, %503, %arg40, %arg41, %510 : tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %323 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %108 : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %107 : !ttg.memdesc<4x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %106 : !ttg.memdesc<3x64xf32, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %105 : !ttg.memdesc<3x64x32xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %103 : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %324 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc69)
    %325 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc69)
    %326 = arith.extsi %325 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc69)
    %327 = tt.expand_dims %326 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc69)
    %328 = arith.muli %327, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %329 = tt.broadcast %328 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc69)
    %330 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %331 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %332 = arith.extsi %331 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %333 = arith.addi %330, %332 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %334 = tt.expand_dims %333 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc69)
    %335 = tt.broadcast %334 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc69)
    %336 = arith.addi %329, %335 : tensor<64x32xi64, #blocked1> loc(#loc69)
    %337 = tt.addptr %324, %336 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc69)
    %338 = arith.cmpi sge, %327, %cst_7 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %339 = arith.cmpi slt, %327, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %340 = arith.andi %338, %339 : tensor<64x1xi1, #blocked1> loc(#loc69)
    %341 = tt.broadcast %340 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc69)
    %342 = arith.cmpi sge, %334, %cst_9 : tensor<1x32xi64, #blocked1> loc(#loc69)
    %343 = arith.cmpi slt, %334, %cst_11 : tensor<1x32xi64, #blocked1> loc(#loc69)
    %344 = arith.andi %342, %343 : tensor<1x32xi1, #blocked1> loc(#loc69)
    %345 = tt.broadcast %344 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc69)
    %346 = arith.andi %341, %345 : tensor<64x32xi1, #blocked1> loc(#loc69)
    %347 = ttg.convert_layout %322#0 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked1> loc(#loc69)
    tt.store %337, %347, %346 : tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc69)
    %348 = arith.addi %326, %cst_15 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc70)
    %349 = tt.expand_dims %348 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc70)
    %350 = arith.muli %349, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %351 = tt.broadcast %350 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc70)
    %352 = arith.addi %351, %335 : tensor<64x32xi64, #blocked1> loc(#loc70)
    %353 = tt.addptr %324, %352 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc70)
    %354 = arith.cmpi sge, %349, %cst_7 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %355 = arith.cmpi slt, %349, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %356 = arith.andi %354, %355 : tensor<64x1xi1, #blocked1> loc(#loc70)
    %357 = tt.broadcast %356 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc70)
    %358 = arith.andi %357, %345 : tensor<64x32xi1, #blocked1> loc(#loc70)
    %359 = ttg.convert_layout %322#1 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked1> loc(#loc70)
    tt.store %353, %359, %358 : tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc72 = loc(callsite(#loc7 at #loc8))
#loc73 = loc(callsite(#loc9 at #loc8))
