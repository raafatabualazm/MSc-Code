; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 5, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = and i32 %33, 4, !dbg !29
  %35 = and i32 %33, 8, !dbg !29
  %36 = and i32 %33, 16, !dbg !29
  %37 = lshr i32 %33, 2, !dbg !29
  %38 = and i32 %37, 7, !dbg !29
  %39 = and i32 %33, 32, !dbg !29
  %40 = lshr exact i32 %39, 2, !dbg !29
  %41 = or disjoint i32 %38, %40, !dbg !29
  %42 = or disjoint i32 %41, 16, !dbg !29
  %43 = or disjoint i32 %41, 32, !dbg !29
  %44 = or disjoint i32 %41, 48, !dbg !29
  %45 = lshr i32 %33, 3, !dbg !29
  %46 = and i32 %45, 7, !dbg !29
  %47 = or disjoint i32 %46, 8, !dbg !29
  %48 = or disjoint i32 %46, 16, !dbg !29
  %49 = or disjoint i32 %46, 24, !dbg !29
  %50 = or disjoint i32 %46, 32, !dbg !29
  %51 = or disjoint i32 %46, 40, !dbg !29
  %52 = or disjoint i32 %46, 48, !dbg !29
  %53 = or disjoint i32 %46, 56, !dbg !29
  %54 = shl nuw nsw i32 %33, 3, !dbg !29
  %55 = and i32 %54, 24, !dbg !29
  %56 = shl nuw nsw i32 %34, 3, !dbg !29
  %57 = or disjoint i32 %55, %56, !dbg !29
  %58 = lshr exact i32 %39, 1, !dbg !29
  %59 = or disjoint i32 %38, %58, !dbg !29
  %60 = or disjoint i32 %59, 8, !dbg !29
  %61 = or disjoint i32 %59, 32, !dbg !29
  %62 = or disjoint i32 %59, 40, !dbg !29
  %63 = and i32 %33, 63, !dbg !29
  %64 = zext nneg i32 %41 to i64, !dbg !29
  %65 = zext nneg i32 %42 to i64, !dbg !29
  %66 = zext nneg i32 %43 to i64, !dbg !29
  %67 = zext nneg i32 %44 to i64, !dbg !29
  %68 = zext nneg i32 %46 to i64, !dbg !29
  %69 = zext nneg i32 %47 to i64, !dbg !29
  %70 = zext nneg i32 %48 to i64, !dbg !29
  %71 = zext nneg i32 %49 to i64, !dbg !29
  %72 = zext nneg i32 %50 to i64, !dbg !29
  %73 = zext nneg i32 %51 to i64, !dbg !29
  %74 = zext nneg i32 %52 to i64, !dbg !29
  %75 = zext nneg i32 %53 to i64, !dbg !29
  %76 = zext nneg i32 %57 to i64, !dbg !29
  %77 = zext nneg i32 %63 to i64, !dbg !29
  %78 = zext nneg i32 %55 to i64, !dbg !29
  %79 = or disjoint i64 %78, %32, !dbg !29
  %80 = icmp sgt i32 %31, -1, !dbg !29
  %81 = icmp slt i64 %79, 128, !dbg !29
  %82 = and i1 %80, %81, !dbg !29
  %83 = or disjoint i64 %64, 64, !dbg !30
  %84 = or disjoint i64 %65, 64, !dbg !30
  %85 = or disjoint i64 %66, 64, !dbg !30
  %86 = or disjoint i64 %67, 64, !dbg !30
  %87 = or disjoint i64 %76, 64, !dbg !30
  %88 = sext i32 %7 to i64, !dbg !31
  %89 = sext i32 %23 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !32
  %91 = zext nneg i32 %12 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %90, i64 %91, !dbg !33
  %93 = icmp sgt i32 %13, 63, !dbg !34
  %94 = shl nuw nsw i64 %68, 12, !dbg !35
  %95 = shl nuw nsw i64 %69, 12, !dbg !35
  %96 = shl nuw nsw i64 %70, 12, !dbg !35
  %97 = shl nuw nsw i64 %71, 12, !dbg !35
  %98 = shl nuw nsw i64 %72, 12, !dbg !35
  %99 = shl nuw nsw i64 %73, 12, !dbg !35
  %100 = shl nuw nsw i64 %74, 12, !dbg !35
  %101 = shl nuw nsw i64 %75, 12, !dbg !35
  %102 = shl nuw nsw i64 %64, 12, !dbg !35
  %103 = shl nuw nsw i64 %65, 12, !dbg !35
  %104 = shl nuw nsw i64 %66, 12, !dbg !35
  %105 = shl nuw nsw i64 %67, 12, !dbg !35
  %106 = or disjoint i64 %94, %76, !dbg !35
  %107 = or disjoint i64 %95, %76, !dbg !35
  %108 = or disjoint i64 %96, %76, !dbg !35
  %109 = or disjoint i64 %97, %76, !dbg !35
  %110 = or disjoint i64 %98, %76, !dbg !35
  %111 = or disjoint i64 %99, %76, !dbg !35
  %112 = or disjoint i64 %100, %76, !dbg !35
  %113 = or disjoint i64 %101, %76, !dbg !35
  %114 = getelementptr bfloat, ptr addrspace(1) %29, i64 %106, !dbg !35
  %115 = getelementptr bfloat, ptr addrspace(1) %29, i64 %107, !dbg !35
  %116 = getelementptr bfloat, ptr addrspace(1) %29, i64 %108, !dbg !35
  %117 = getelementptr bfloat, ptr addrspace(1) %29, i64 %109, !dbg !35
  %118 = getelementptr bfloat, ptr addrspace(1) %29, i64 %110, !dbg !35
  %119 = getelementptr bfloat, ptr addrspace(1) %29, i64 %111, !dbg !35
  %120 = getelementptr bfloat, ptr addrspace(1) %29, i64 %112, !dbg !35
  %121 = getelementptr bfloat, ptr addrspace(1) %29, i64 %113, !dbg !35
  %122 = icmp slt i32 %46, %7, !dbg !35
  %123 = icmp slt i32 %47, %7, !dbg !35
  %124 = icmp slt i32 %48, %7, !dbg !35
  %125 = icmp slt i32 %49, %7, !dbg !35
  %126 = icmp slt i32 %50, %7, !dbg !35
  %127 = icmp slt i32 %51, %7, !dbg !35
  %128 = icmp slt i32 %52, %7, !dbg !35
  %129 = icmp slt i32 %53, %7, !dbg !35
  %130 = icmp slt i32 %41, %7, !dbg !35
  %131 = icmp slt i32 %42, %7, !dbg !35
  %132 = icmp slt i32 %43, %7, !dbg !35
  %133 = icmp slt i32 %44, %7, !dbg !35
  %134 = and i1 %122, %93, !dbg !34
  %135 = and i1 %123, %93, !dbg !34
  %136 = and i1 %124, %93, !dbg !34
  %137 = and i1 %125, %93, !dbg !34
  %138 = and i1 %126, %93, !dbg !34
  %139 = and i1 %127, %93, !dbg !34
  %140 = and i1 %128, %93, !dbg !34
  %141 = and i1 %129, %93, !dbg !34
  %and.ra659 = and i32 %33, 56, !dbg !35
  %142 = xor i32 %57, %and.ra659, !dbg !35
  %143 = shl nuw nsw i32 %46, 6, !dbg !35
  %144 = or disjoint i32 %142, %143, !dbg !35
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %144, !dbg !35
  %146 = or disjoint i32 %144, 512, !dbg !35
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %146, !dbg !35
  %148 = or disjoint i32 %144, 1024, !dbg !35
  %149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %148, !dbg !35
  %150 = or disjoint i32 %144, 1536, !dbg !35
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %150, !dbg !35
  %152 = or disjoint i32 %144, 2048, !dbg !35
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %152, !dbg !35
  %154 = or disjoint i32 %144, 2560, !dbg !35
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %154, !dbg !35
  %156 = or disjoint i32 %144, 3072, !dbg !35
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %156, !dbg !35
  %158 = or disjoint i32 %144, 3584, !dbg !35
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %158, !dbg !35
  %160 = select i1 %134, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %145, ptr addrspace(1) %114, i32 %160) #2, !dbg !35
  %161 = select i1 %135, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %147, ptr addrspace(1) %115, i32 %161) #2, !dbg !35
  %162 = select i1 %136, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %116, i32 %162) #2, !dbg !35
  %163 = select i1 %137, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %151, ptr addrspace(1) %117, i32 %163) #2, !dbg !35
  %164 = select i1 %138, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %153, ptr addrspace(1) %118, i32 %164) #2, !dbg !35
  %165 = select i1 %139, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %155, ptr addrspace(1) %119, i32 %165) #2, !dbg !35
  %166 = select i1 %140, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %120, i32 %166) #2, !dbg !35
  %167 = select i1 %141, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %121, i32 %167) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %168 = or disjoint i64 %87, %94, !dbg !36
  %169 = or disjoint i64 %95, %87, !dbg !36
  %170 = or disjoint i64 %96, %87, !dbg !36
  %171 = or disjoint i64 %97, %87, !dbg !36
  %172 = or disjoint i64 %98, %87, !dbg !36
  %173 = or disjoint i64 %99, %87, !dbg !36
  %174 = or disjoint i64 %100, %87, !dbg !36
  %175 = or disjoint i64 %101, %87, !dbg !36
  %176 = getelementptr bfloat, ptr addrspace(1) %29, i64 %168, !dbg !36
  %177 = getelementptr bfloat, ptr addrspace(1) %29, i64 %169, !dbg !36
  %178 = getelementptr bfloat, ptr addrspace(1) %29, i64 %170, !dbg !36
  %179 = getelementptr bfloat, ptr addrspace(1) %29, i64 %171, !dbg !36
  %180 = getelementptr bfloat, ptr addrspace(1) %29, i64 %172, !dbg !36
  %181 = getelementptr bfloat, ptr addrspace(1) %29, i64 %173, !dbg !36
  %182 = getelementptr bfloat, ptr addrspace(1) %29, i64 %174, !dbg !36
  %183 = getelementptr bfloat, ptr addrspace(1) %29, i64 %175, !dbg !36
  %184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %144, !dbg !36
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %146, !dbg !36
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %148, !dbg !36
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %150, !dbg !36
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %152, !dbg !36
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %154, !dbg !36
  %190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %156, !dbg !36
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %184, ptr addrspace(1) %176, i32 %160) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %185, ptr addrspace(1) %177, i32 %161) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %178, i32 %162) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %179, i32 %163) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %188, ptr addrspace(1) %180, i32 %164) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %181, i32 %165) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %182, i32 %166) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %183, i32 %167) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %192 = add nsw i64 %102, %79, !dbg !37
  %193 = add nsw i64 %103, %79, !dbg !37
  %194 = add nsw i64 %104, %79, !dbg !37
  %195 = add nsw i64 %105, %79, !dbg !37
  %196 = getelementptr bfloat, ptr addrspace(1) %27, i64 %192, !dbg !37
  %197 = getelementptr bfloat, ptr addrspace(1) %27, i64 %193, !dbg !37
  %198 = getelementptr bfloat, ptr addrspace(1) %27, i64 %194, !dbg !37
  %199 = getelementptr bfloat, ptr addrspace(1) %27, i64 %195, !dbg !37
  %200 = and i1 %82, %130, !dbg !37
  %201 = and i1 %82, %131, !dbg !37
  %202 = and i1 %82, %132, !dbg !37
  %203 = and i1 %82, %133, !dbg !37
  %204 = and i1 %93, %200, !dbg !34
  %205 = and i1 %93, %201, !dbg !34
  %206 = and i1 %93, %202, !dbg !34
  %207 = and i1 %93, %203, !dbg !34
  %208 = xor i32 %54, %33, !dbg !37
  %209 = and i32 %208, 24, !dbg !37
  %210 = shl nuw nsw i32 %41, 5, !dbg !37
  %211 = or disjoint i32 %210, %209, !dbg !37
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %211, !dbg !37
  %213 = or disjoint i32 %211, 512, !dbg !37
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %213, !dbg !37
  %215 = or disjoint i32 %38, 32, !dbg !37
  %216 = or disjoint i32 %215, %40, !dbg !37
  %217 = shl nuw nsw i32 %216, 5, !dbg !37
  %218 = or disjoint i32 %217, %209, !dbg !37
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %218, !dbg !37
  %220 = or disjoint i32 %211, 1536, !dbg !37
  %221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %220, !dbg !37
  %222 = select i1 %204, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %212, ptr addrspace(1) %196, i32 %222) #2, !dbg !37
  %223 = select i1 %205, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %197, i32 %223) #2, !dbg !37
  %224 = select i1 %206, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %198, i32 %224) #2, !dbg !37
  %225 = select i1 %207, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %221, ptr addrspace(1) %199, i32 %225) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx = shl nuw nsw i64 %77, 7, !dbg !38
  %226 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx, !dbg !38
  %227 = icmp slt i32 %63, %7, !dbg !38
  %228 = and i1 %227, %93, !dbg !34
  %229 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 121344), i32 %63, !dbg !38
  %230 = select i1 %228, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %229, ptr addrspace(1) %226, i32 %230) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %231 = getelementptr bfloat, ptr addrspace(1) %28, i64 %106, !dbg !39
  %232 = getelementptr bfloat, ptr addrspace(1) %28, i64 %107, !dbg !39
  %233 = getelementptr bfloat, ptr addrspace(1) %28, i64 %108, !dbg !39
  %234 = getelementptr bfloat, ptr addrspace(1) %28, i64 %109, !dbg !39
  %235 = getelementptr bfloat, ptr addrspace(1) %28, i64 %110, !dbg !39
  %236 = getelementptr bfloat, ptr addrspace(1) %28, i64 %111, !dbg !39
  %237 = getelementptr bfloat, ptr addrspace(1) %28, i64 %112, !dbg !39
  %238 = getelementptr bfloat, ptr addrspace(1) %28, i64 %113, !dbg !39
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %144, !dbg !39
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %146, !dbg !39
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %148, !dbg !39
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %150, !dbg !39
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %152, !dbg !39
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %154, !dbg !39
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %156, !dbg !39
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %239, ptr addrspace(1) %231, i32 %160) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %232, i32 %161) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %241, ptr addrspace(1) %233, i32 %162) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %242, ptr addrspace(1) %234, i32 %163) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %235, i32 %164) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %236, i32 %165) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %237, i32 %166) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %246, ptr addrspace(1) %238, i32 %167) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %247 = getelementptr bfloat, ptr addrspace(1) %28, i64 %168, !dbg !40
  %248 = getelementptr bfloat, ptr addrspace(1) %28, i64 %169, !dbg !40
  %249 = getelementptr bfloat, ptr addrspace(1) %28, i64 %170, !dbg !40
  %250 = getelementptr bfloat, ptr addrspace(1) %28, i64 %171, !dbg !40
  %251 = getelementptr bfloat, ptr addrspace(1) %28, i64 %172, !dbg !40
  %252 = getelementptr bfloat, ptr addrspace(1) %28, i64 %173, !dbg !40
  %253 = getelementptr bfloat, ptr addrspace(1) %28, i64 %174, !dbg !40
  %254 = getelementptr bfloat, ptr addrspace(1) %28, i64 %175, !dbg !40
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %144, !dbg !40
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %146, !dbg !40
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %148, !dbg !40
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %150, !dbg !40
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %152, !dbg !40
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %154, !dbg !40
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %156, !dbg !40
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %255, ptr addrspace(1) %247, i32 %160) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %248, i32 %161) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %249, i32 %162) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %250, i32 %163) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %251, i32 %164) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %252, i32 %165) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %253, i32 %166) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %262, ptr addrspace(1) %254, i32 %167) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %263 = icmp sgt i32 %13, 127, !dbg !34
  %264 = or disjoint i64 %68, 64, !dbg !35
  %265 = or disjoint i64 %69, 64, !dbg !35
  %266 = or disjoint i64 %70, 64, !dbg !35
  %267 = or disjoint i64 %71, 64, !dbg !35
  %268 = or disjoint i64 %72, 64, !dbg !35
  %269 = or disjoint i64 %73, 64, !dbg !35
  %270 = or disjoint i64 %74, 64, !dbg !35
  %271 = or disjoint i64 %75, 64, !dbg !35
  %272 = or disjoint i64 %77, 64, !dbg !35
  %273 = shl nuw nsw i64 %264, 12, !dbg !35
  %274 = shl nuw nsw i64 %265, 12, !dbg !35
  %275 = shl nuw nsw i64 %266, 12, !dbg !35
  %276 = shl nuw nsw i64 %267, 12, !dbg !35
  %277 = shl nuw nsw i64 %268, 12, !dbg !35
  %278 = shl nuw nsw i64 %269, 12, !dbg !35
  %279 = shl nuw nsw i64 %270, 12, !dbg !35
  %280 = shl nuw nsw i64 %271, 12, !dbg !35
  %281 = shl nuw nsw i64 %83, 12, !dbg !35
  %282 = shl nuw nsw i64 %84, 12, !dbg !35
  %283 = shl nuw nsw i64 %85, 12, !dbg !35
  %284 = shl nuw nsw i64 %86, 12, !dbg !35
  %285 = or disjoint i64 %273, %76, !dbg !35
  %286 = or disjoint i64 %274, %76, !dbg !35
  %287 = or disjoint i64 %275, %76, !dbg !35
  %288 = or disjoint i64 %276, %76, !dbg !35
  %289 = or disjoint i64 %277, %76, !dbg !35
  %290 = or disjoint i64 %278, %76, !dbg !35
  %291 = or disjoint i64 %279, %76, !dbg !35
  %292 = or disjoint i64 %280, %76, !dbg !35
  %293 = getelementptr bfloat, ptr addrspace(1) %29, i64 %285, !dbg !35
  %294 = getelementptr bfloat, ptr addrspace(1) %29, i64 %286, !dbg !35
  %295 = getelementptr bfloat, ptr addrspace(1) %29, i64 %287, !dbg !35
  %296 = getelementptr bfloat, ptr addrspace(1) %29, i64 %288, !dbg !35
  %297 = getelementptr bfloat, ptr addrspace(1) %29, i64 %289, !dbg !35
  %298 = getelementptr bfloat, ptr addrspace(1) %29, i64 %290, !dbg !35
  %299 = getelementptr bfloat, ptr addrspace(1) %29, i64 %291, !dbg !35
  %300 = getelementptr bfloat, ptr addrspace(1) %29, i64 %292, !dbg !35
  %301 = icmp slt i64 %264, %88, !dbg !35
  %302 = icmp slt i64 %265, %88, !dbg !35
  %303 = icmp slt i64 %266, %88, !dbg !35
  %304 = icmp slt i64 %267, %88, !dbg !35
  %305 = icmp slt i64 %268, %88, !dbg !35
  %306 = icmp slt i64 %269, %88, !dbg !35
  %307 = icmp slt i64 %270, %88, !dbg !35
  %308 = icmp slt i64 %271, %88, !dbg !35
  %309 = icmp slt i64 %83, %88, !dbg !35
  %310 = icmp slt i64 %84, %88, !dbg !35
  %311 = icmp slt i64 %85, %88, !dbg !35
  %312 = icmp slt i64 %86, %88, !dbg !35
  %313 = and i1 %263, %301, !dbg !34
  %314 = and i1 %263, %302, !dbg !34
  %315 = and i1 %263, %303, !dbg !34
  %316 = and i1 %263, %304, !dbg !34
  %317 = and i1 %263, %305, !dbg !34
  %318 = and i1 %263, %306, !dbg !34
  %319 = and i1 %263, %307, !dbg !34
  %320 = and i1 %263, %308, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %144, !dbg !35
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %146, !dbg !35
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %148, !dbg !35
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %150, !dbg !35
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %152, !dbg !35
  %326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %154, !dbg !35
  %327 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %156, !dbg !35
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %158, !dbg !35
  %329 = select i1 %313, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %321, ptr addrspace(1) %293, i32 %329) #2, !dbg !35
  %330 = select i1 %314, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %322, ptr addrspace(1) %294, i32 %330) #2, !dbg !35
  %331 = select i1 %315, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %323, ptr addrspace(1) %295, i32 %331) #2, !dbg !35
  %332 = select i1 %316, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %324, ptr addrspace(1) %296, i32 %332) #2, !dbg !35
  %333 = select i1 %317, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %325, ptr addrspace(1) %297, i32 %333) #2, !dbg !35
  %334 = select i1 %318, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %326, ptr addrspace(1) %298, i32 %334) #2, !dbg !35
  %335 = select i1 %319, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %327, ptr addrspace(1) %299, i32 %335) #2, !dbg !35
  %336 = select i1 %320, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %328, ptr addrspace(1) %300, i32 %336) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %337 = or disjoint i64 %273, %87, !dbg !36
  %338 = or disjoint i64 %274, %87, !dbg !36
  %339 = or disjoint i64 %275, %87, !dbg !36
  %340 = or disjoint i64 %276, %87, !dbg !36
  %341 = or disjoint i64 %277, %87, !dbg !36
  %342 = or disjoint i64 %278, %87, !dbg !36
  %343 = or disjoint i64 %279, %87, !dbg !36
  %344 = or disjoint i64 %280, %87, !dbg !36
  %345 = getelementptr bfloat, ptr addrspace(1) %29, i64 %337, !dbg !36
  %346 = getelementptr bfloat, ptr addrspace(1) %29, i64 %338, !dbg !36
  %347 = getelementptr bfloat, ptr addrspace(1) %29, i64 %339, !dbg !36
  %348 = getelementptr bfloat, ptr addrspace(1) %29, i64 %340, !dbg !36
  %349 = getelementptr bfloat, ptr addrspace(1) %29, i64 %341, !dbg !36
  %350 = getelementptr bfloat, ptr addrspace(1) %29, i64 %342, !dbg !36
  %351 = getelementptr bfloat, ptr addrspace(1) %29, i64 %343, !dbg !36
  %352 = getelementptr bfloat, ptr addrspace(1) %29, i64 %344, !dbg !36
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %144, !dbg !36
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %146, !dbg !36
  %355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %148, !dbg !36
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %150, !dbg !36
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %152, !dbg !36
  %358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %154, !dbg !36
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %156, !dbg !36
  %360 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %353, ptr addrspace(1) %345, i32 %329) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %354, ptr addrspace(1) %346, i32 %330) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %355, ptr addrspace(1) %347, i32 %331) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %356, ptr addrspace(1) %348, i32 %332) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %357, ptr addrspace(1) %349, i32 %333) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %358, ptr addrspace(1) %350, i32 %334) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %359, ptr addrspace(1) %351, i32 %335) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %360, ptr addrspace(1) %352, i32 %336) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %361 = add nsw i64 %281, %79, !dbg !37
  %362 = add nsw i64 %282, %79, !dbg !37
  %363 = add nsw i64 %283, %79, !dbg !37
  %364 = add nsw i64 %284, %79, !dbg !37
  %365 = getelementptr bfloat, ptr addrspace(1) %27, i64 %361, !dbg !37
  %366 = getelementptr bfloat, ptr addrspace(1) %27, i64 %362, !dbg !37
  %367 = getelementptr bfloat, ptr addrspace(1) %27, i64 %363, !dbg !37
  %368 = getelementptr bfloat, ptr addrspace(1) %27, i64 %364, !dbg !37
  %369 = and i1 %82, %309, !dbg !37
  %370 = and i1 %82, %310, !dbg !37
  %371 = and i1 %82, %311, !dbg !37
  %372 = and i1 %82, %312, !dbg !37
  %373 = and i1 %263, %369, !dbg !34
  %374 = and i1 %263, %370, !dbg !34
  %375 = and i1 %263, %371, !dbg !34
  %376 = and i1 %263, %372, !dbg !34
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102400), i32 %211, !dbg !37
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102400), i32 %213, !dbg !37
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102400), i32 %218, !dbg !37
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102400), i32 %220, !dbg !37
  %381 = select i1 %373, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %377, ptr addrspace(1) %365, i32 %381) #2, !dbg !37
  %382 = select i1 %374, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %378, ptr addrspace(1) %366, i32 %382) #2, !dbg !37
  %383 = select i1 %375, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %379, ptr addrspace(1) %367, i32 %383) #2, !dbg !37
  %384 = select i1 %376, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %380, ptr addrspace(1) %368, i32 %384) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx5 = shl nuw nsw i64 %272, 7, !dbg !38
  %385 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx5, !dbg !38
  %386 = icmp slt i64 %272, %88, !dbg !38
  %387 = and i1 %263, %386, !dbg !34
  %388 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 121600), i32 %63, !dbg !38
  %389 = select i1 %387, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %388, ptr addrspace(1) %385, i32 %389) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %390 = getelementptr bfloat, ptr addrspace(1) %28, i64 %285, !dbg !39
  %391 = getelementptr bfloat, ptr addrspace(1) %28, i64 %286, !dbg !39
  %392 = getelementptr bfloat, ptr addrspace(1) %28, i64 %287, !dbg !39
  %393 = getelementptr bfloat, ptr addrspace(1) %28, i64 %288, !dbg !39
  %394 = getelementptr bfloat, ptr addrspace(1) %28, i64 %289, !dbg !39
  %395 = getelementptr bfloat, ptr addrspace(1) %28, i64 %290, !dbg !39
  %396 = getelementptr bfloat, ptr addrspace(1) %28, i64 %291, !dbg !39
  %397 = getelementptr bfloat, ptr addrspace(1) %28, i64 %292, !dbg !39
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %144, !dbg !39
  %399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %146, !dbg !39
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %148, !dbg !39
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %150, !dbg !39
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %152, !dbg !39
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %154, !dbg !39
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %156, !dbg !39
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %398, ptr addrspace(1) %390, i32 %329) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %399, ptr addrspace(1) %391, i32 %330) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %400, ptr addrspace(1) %392, i32 %331) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %401, ptr addrspace(1) %393, i32 %332) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %402, ptr addrspace(1) %394, i32 %333) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %403, ptr addrspace(1) %395, i32 %334) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %404, ptr addrspace(1) %396, i32 %335) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %405, ptr addrspace(1) %397, i32 %336) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %406 = getelementptr bfloat, ptr addrspace(1) %28, i64 %337, !dbg !40
  %407 = getelementptr bfloat, ptr addrspace(1) %28, i64 %338, !dbg !40
  %408 = getelementptr bfloat, ptr addrspace(1) %28, i64 %339, !dbg !40
  %409 = getelementptr bfloat, ptr addrspace(1) %28, i64 %340, !dbg !40
  %410 = getelementptr bfloat, ptr addrspace(1) %28, i64 %341, !dbg !40
  %411 = getelementptr bfloat, ptr addrspace(1) %28, i64 %342, !dbg !40
  %412 = getelementptr bfloat, ptr addrspace(1) %28, i64 %343, !dbg !40
  %413 = getelementptr bfloat, ptr addrspace(1) %28, i64 %344, !dbg !40
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %144, !dbg !40
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %146, !dbg !40
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %148, !dbg !40
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %150, !dbg !40
  %418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %152, !dbg !40
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %154, !dbg !40
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %156, !dbg !40
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %414, ptr addrspace(1) %406, i32 %329) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %415, ptr addrspace(1) %407, i32 %330) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %416, ptr addrspace(1) %408, i32 %331) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %417, ptr addrspace(1) %409, i32 %332) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %418, ptr addrspace(1) %410, i32 %333) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %419, ptr addrspace(1) %411, i32 %334) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %420, ptr addrspace(1) %412, i32 %335) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %421, ptr addrspace(1) %413, i32 %336) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %422 = icmp sgt i32 %13, 191, !dbg !34
  %423 = or disjoint i64 %68, 128, !dbg !35
  %424 = or disjoint i64 %69, 128, !dbg !35
  %425 = or disjoint i64 %70, 128, !dbg !35
  %426 = or disjoint i64 %71, 128, !dbg !35
  %427 = or disjoint i64 %72, 128, !dbg !35
  %428 = or disjoint i64 %73, 128, !dbg !35
  %429 = or disjoint i64 %74, 128, !dbg !35
  %430 = or disjoint i64 %75, 128, !dbg !35
  %431 = or disjoint i64 %64, 128, !dbg !35
  %432 = or disjoint i64 %65, 128, !dbg !35
  %433 = or disjoint i64 %66, 128, !dbg !35
  %434 = or disjoint i64 %67, 128, !dbg !35
  %435 = or disjoint i64 %77, 128, !dbg !35
  %436 = shl nuw nsw i64 %423, 12, !dbg !35
  %437 = shl nuw nsw i64 %424, 12, !dbg !35
  %438 = shl nuw nsw i64 %425, 12, !dbg !35
  %439 = shl nuw nsw i64 %426, 12, !dbg !35
  %440 = shl nuw nsw i64 %427, 12, !dbg !35
  %441 = shl nuw nsw i64 %428, 12, !dbg !35
  %442 = shl nuw nsw i64 %429, 12, !dbg !35
  %443 = shl nuw nsw i64 %430, 12, !dbg !35
  %444 = shl nuw nsw i64 %431, 12, !dbg !35
  %445 = shl nuw nsw i64 %432, 12, !dbg !35
  %446 = shl nuw nsw i64 %433, 12, !dbg !35
  %447 = shl nuw nsw i64 %434, 12, !dbg !35
  %448 = or disjoint i64 %436, %76, !dbg !35
  %449 = or disjoint i64 %437, %76, !dbg !35
  %450 = or disjoint i64 %438, %76, !dbg !35
  %451 = or disjoint i64 %439, %76, !dbg !35
  %452 = or disjoint i64 %440, %76, !dbg !35
  %453 = or disjoint i64 %441, %76, !dbg !35
  %454 = or disjoint i64 %442, %76, !dbg !35
  %455 = or disjoint i64 %443, %76, !dbg !35
  %456 = getelementptr bfloat, ptr addrspace(1) %29, i64 %448, !dbg !35
  %457 = getelementptr bfloat, ptr addrspace(1) %29, i64 %449, !dbg !35
  %458 = getelementptr bfloat, ptr addrspace(1) %29, i64 %450, !dbg !35
  %459 = getelementptr bfloat, ptr addrspace(1) %29, i64 %451, !dbg !35
  %460 = getelementptr bfloat, ptr addrspace(1) %29, i64 %452, !dbg !35
  %461 = getelementptr bfloat, ptr addrspace(1) %29, i64 %453, !dbg !35
  %462 = getelementptr bfloat, ptr addrspace(1) %29, i64 %454, !dbg !35
  %463 = getelementptr bfloat, ptr addrspace(1) %29, i64 %455, !dbg !35
  %464 = icmp slt i64 %423, %88, !dbg !35
  %465 = icmp slt i64 %424, %88, !dbg !35
  %466 = icmp slt i64 %425, %88, !dbg !35
  %467 = icmp slt i64 %426, %88, !dbg !35
  %468 = icmp slt i64 %427, %88, !dbg !35
  %469 = icmp slt i64 %428, %88, !dbg !35
  %470 = icmp slt i64 %429, %88, !dbg !35
  %471 = icmp slt i64 %430, %88, !dbg !35
  %472 = icmp slt i64 %431, %88, !dbg !35
  %473 = icmp slt i64 %432, %88, !dbg !35
  %474 = icmp slt i64 %433, %88, !dbg !35
  %475 = icmp slt i64 %434, %88, !dbg !35
  %476 = and i1 %422, %464, !dbg !34
  %477 = and i1 %422, %465, !dbg !34
  %478 = and i1 %422, %466, !dbg !34
  %479 = and i1 %422, %467, !dbg !34
  %480 = and i1 %422, %468, !dbg !34
  %481 = and i1 %422, %469, !dbg !34
  %482 = and i1 %422, %470, !dbg !34
  %483 = and i1 %422, %471, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %144, !dbg !35
  %485 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %146, !dbg !35
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %148, !dbg !35
  %487 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %150, !dbg !35
  %488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %152, !dbg !35
  %489 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %154, !dbg !35
  %490 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %156, !dbg !35
  %491 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %158, !dbg !35
  %492 = select i1 %476, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %484, ptr addrspace(1) %456, i32 %492) #2, !dbg !35
  %493 = select i1 %477, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %485, ptr addrspace(1) %457, i32 %493) #2, !dbg !35
  %494 = select i1 %478, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %486, ptr addrspace(1) %458, i32 %494) #2, !dbg !35
  %495 = select i1 %479, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %487, ptr addrspace(1) %459, i32 %495) #2, !dbg !35
  %496 = select i1 %480, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %488, ptr addrspace(1) %460, i32 %496) #2, !dbg !35
  %497 = select i1 %481, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %489, ptr addrspace(1) %461, i32 %497) #2, !dbg !35
  %498 = select i1 %482, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %490, ptr addrspace(1) %462, i32 %498) #2, !dbg !35
  %499 = select i1 %483, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %491, ptr addrspace(1) %463, i32 %499) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %500 = or disjoint i64 %436, %87, !dbg !36
  %501 = or disjoint i64 %437, %87, !dbg !36
  %502 = or disjoint i64 %438, %87, !dbg !36
  %503 = or disjoint i64 %439, %87, !dbg !36
  %504 = or disjoint i64 %440, %87, !dbg !36
  %505 = or disjoint i64 %441, %87, !dbg !36
  %506 = or disjoint i64 %442, %87, !dbg !36
  %507 = or disjoint i64 %443, %87, !dbg !36
  %508 = getelementptr bfloat, ptr addrspace(1) %29, i64 %500, !dbg !36
  %509 = getelementptr bfloat, ptr addrspace(1) %29, i64 %501, !dbg !36
  %510 = getelementptr bfloat, ptr addrspace(1) %29, i64 %502, !dbg !36
  %511 = getelementptr bfloat, ptr addrspace(1) %29, i64 %503, !dbg !36
  %512 = getelementptr bfloat, ptr addrspace(1) %29, i64 %504, !dbg !36
  %513 = getelementptr bfloat, ptr addrspace(1) %29, i64 %505, !dbg !36
  %514 = getelementptr bfloat, ptr addrspace(1) %29, i64 %506, !dbg !36
  %515 = getelementptr bfloat, ptr addrspace(1) %29, i64 %507, !dbg !36
  %516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %144, !dbg !36
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %146, !dbg !36
  %518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %148, !dbg !36
  %519 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %150, !dbg !36
  %520 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %152, !dbg !36
  %521 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %154, !dbg !36
  %522 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %156, !dbg !36
  %523 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %516, ptr addrspace(1) %508, i32 %492) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %517, ptr addrspace(1) %509, i32 %493) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %518, ptr addrspace(1) %510, i32 %494) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %519, ptr addrspace(1) %511, i32 %495) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %520, ptr addrspace(1) %512, i32 %496) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %521, ptr addrspace(1) %513, i32 %497) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %522, ptr addrspace(1) %514, i32 %498) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %523, ptr addrspace(1) %515, i32 %499) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %524 = add nsw i64 %444, %79, !dbg !37
  %525 = add nsw i64 %445, %79, !dbg !37
  %526 = add nsw i64 %446, %79, !dbg !37
  %527 = add nsw i64 %447, %79, !dbg !37
  %528 = getelementptr bfloat, ptr addrspace(1) %27, i64 %524, !dbg !37
  %529 = getelementptr bfloat, ptr addrspace(1) %27, i64 %525, !dbg !37
  %530 = getelementptr bfloat, ptr addrspace(1) %27, i64 %526, !dbg !37
  %531 = getelementptr bfloat, ptr addrspace(1) %27, i64 %527, !dbg !37
  %532 = and i1 %82, %472, !dbg !37
  %533 = and i1 %82, %473, !dbg !37
  %534 = and i1 %82, %474, !dbg !37
  %535 = and i1 %82, %475, !dbg !37
  %536 = and i1 %422, %532, !dbg !34
  %537 = and i1 %422, %533, !dbg !34
  %538 = and i1 %422, %534, !dbg !34
  %539 = and i1 %422, %535, !dbg !34
  %540 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %211, !dbg !37
  %541 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %213, !dbg !37
  %542 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %218, !dbg !37
  %543 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %220, !dbg !37
  %544 = select i1 %536, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %540, ptr addrspace(1) %528, i32 %544) #2, !dbg !37
  %545 = select i1 %537, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %541, ptr addrspace(1) %529, i32 %545) #2, !dbg !37
  %546 = select i1 %538, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %542, ptr addrspace(1) %530, i32 %546) #2, !dbg !37
  %547 = select i1 %539, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %543, ptr addrspace(1) %531, i32 %547) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx6 = shl nuw nsw i64 %435, 7, !dbg !38
  %548 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx6, !dbg !38
  %549 = icmp slt i64 %435, %88, !dbg !38
  %550 = and i1 %422, %549, !dbg !34
  %551 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 121856), i32 %63, !dbg !38
  %552 = select i1 %550, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %551, ptr addrspace(1) %548, i32 %552) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %553 = getelementptr bfloat, ptr addrspace(1) %28, i64 %448, !dbg !39
  %554 = getelementptr bfloat, ptr addrspace(1) %28, i64 %449, !dbg !39
  %555 = getelementptr bfloat, ptr addrspace(1) %28, i64 %450, !dbg !39
  %556 = getelementptr bfloat, ptr addrspace(1) %28, i64 %451, !dbg !39
  %557 = getelementptr bfloat, ptr addrspace(1) %28, i64 %452, !dbg !39
  %558 = getelementptr bfloat, ptr addrspace(1) %28, i64 %453, !dbg !39
  %559 = getelementptr bfloat, ptr addrspace(1) %28, i64 %454, !dbg !39
  %560 = getelementptr bfloat, ptr addrspace(1) %28, i64 %455, !dbg !39
  %561 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %144, !dbg !39
  %562 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %146, !dbg !39
  %563 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %148, !dbg !39
  %564 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %150, !dbg !39
  %565 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %152, !dbg !39
  %566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %154, !dbg !39
  %567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %156, !dbg !39
  %568 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %561, ptr addrspace(1) %553, i32 %492) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %562, ptr addrspace(1) %554, i32 %493) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %563, ptr addrspace(1) %555, i32 %494) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %564, ptr addrspace(1) %556, i32 %495) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %565, ptr addrspace(1) %557, i32 %496) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %566, ptr addrspace(1) %558, i32 %497) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %567, ptr addrspace(1) %559, i32 %498) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %568, ptr addrspace(1) %560, i32 %499) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %569 = getelementptr bfloat, ptr addrspace(1) %28, i64 %500, !dbg !40
  %570 = getelementptr bfloat, ptr addrspace(1) %28, i64 %501, !dbg !40
  %571 = getelementptr bfloat, ptr addrspace(1) %28, i64 %502, !dbg !40
  %572 = getelementptr bfloat, ptr addrspace(1) %28, i64 %503, !dbg !40
  %573 = getelementptr bfloat, ptr addrspace(1) %28, i64 %504, !dbg !40
  %574 = getelementptr bfloat, ptr addrspace(1) %28, i64 %505, !dbg !40
  %575 = getelementptr bfloat, ptr addrspace(1) %28, i64 %506, !dbg !40
  %576 = getelementptr bfloat, ptr addrspace(1) %28, i64 %507, !dbg !40
  %577 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %144, !dbg !40
  %578 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %146, !dbg !40
  %579 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %148, !dbg !40
  %580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %150, !dbg !40
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %152, !dbg !40
  %582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %154, !dbg !40
  %583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %156, !dbg !40
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %577, ptr addrspace(1) %569, i32 %492) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %578, ptr addrspace(1) %570, i32 %493) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %579, ptr addrspace(1) %571, i32 %494) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %580, ptr addrspace(1) %572, i32 %495) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %581, ptr addrspace(1) %573, i32 %496) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %582, ptr addrspace(1) %574, i32 %497) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %583, ptr addrspace(1) %575, i32 %498) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %584, ptr addrspace(1) %576, i32 %499) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %93, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %33, 1, !dbg !41
  %.pre691 = and i32 %.pre, 6, !dbg !41
  %.pre693 = shl nuw nsw i32 %39, 4, !dbg !41
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %585 = and i32 %33, 2, !dbg !29
  %586 = icmp eq i32 %585, 0, !dbg !29
  %.not = icmp eq i32 %34, 0, !dbg !29
  %587 = add nsw i32 %14, -3
  %588 = shl nuw nsw i32 %33, 5
  %589 = and i32 %588, 32
  %590 = select i1 %586, i32 0, i32 72
  %591 = or disjoint i32 %590, %589
  %592 = select i1 %.not, i32 0, i32 144
  %593 = or disjoint i32 %591, %592
  %594 = shl nuw nsw i32 %35, 5
  %595 = or disjoint i32 %593, %594
  %596 = lshr exact i32 %36, 1
  %597 = xor i32 %595, %596
  %598 = shl nuw nsw i32 %39, 4
  %599 = or disjoint i32 %597, %598
  %600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %599
  %601 = ptrtoint ptr addrspace(3) %600 to i32
  %602 = xor i32 %599, 16
  %603 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %602
  %604 = ptrtoint ptr addrspace(3) %603 to i32
  %605 = xor i32 %599, 1024
  %606 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %605
  %607 = ptrtoint ptr addrspace(3) %606 to i32
  %608 = xor i32 %599, 1040
  %609 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %608
  %610 = ptrtoint ptr addrspace(3) %609 to i32
  %.idx407 = shl nuw nsw i64 %64, 8
  %.idx408 = shl nuw nsw i64 %65, 8
  %.idx409 = shl nuw nsw i64 %66, 8
  %.idx410 = shl nuw nsw i64 %67, 8
  %611 = shl nuw nsw i32 %33, 1
  %612 = and i32 %611, 6
  %613 = shl nuw nsw i32 %35, 3
  %614 = or disjoint i32 %612, %613
  %615 = or disjoint i32 %614, %56
  %616 = shl nuw nsw i32 %36, 3
  %617 = or disjoint i32 %615, %616
  %618 = or disjoint i32 %617, %598
  %619 = and i32 %54, 320
  %620 = or disjoint i32 %616, %619
  %621 = or disjoint i32 %620, %57
  %622 = lshr i32 %618, 2
  %623 = and i32 %622, 1073741816
  %624 = add nuw nsw i32 %623, %618
  %625 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %624
  %626 = xor i32 %618, 256
  %627 = lshr i32 %626, 2
  %628 = and i32 %627, 1073741816
  %629 = add nuw nsw i32 %628, %626
  %630 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %629
  %631 = xor i32 %618, 8
  %632 = add nuw nsw i32 %623, %631
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %632
  %634 = xor i32 %618, 264
  %635 = lshr i32 %634, 2
  %636 = and i32 %635, 1073741816
  %637 = add nuw nsw i32 %636, %634
  %638 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %637
  %639 = xor i32 %618, 16
  %640 = add nuw nsw i32 %623, %639
  %641 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %640
  %642 = xor i32 %618, 272
  %643 = lshr i32 %642, 2
  %644 = and i32 %643, 1073741816
  %645 = add nuw nsw i32 %644, %642
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %645
  %647 = xor i32 %618, 24
  %648 = add nuw nsw i32 %623, %647
  %649 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %648
  %650 = xor i32 %618, 280
  %651 = lshr i32 %650, 2
  %652 = and i32 %651, 1073741816
  %653 = add nuw nsw i32 %652, %650
  %654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %653
  %655 = lshr exact i32 %621, 2
  %656 = and i32 %655, 120
  %657 = add nuw nsw i32 %656, %621
  %658 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %657
  %659 = or disjoint i32 %621, 512
  %660 = lshr exact i32 %659, 2
  %661 = and i32 %660, 536870904
  %662 = add nuw nsw i32 %661, %659
  %663 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %662
  %664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %599
  %665 = ptrtoint ptr addrspace(3) %664 to i32
  %666 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %602
  %667 = ptrtoint ptr addrspace(3) %666 to i32
  %668 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %605
  %669 = ptrtoint ptr addrspace(3) %668 to i32
  %670 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %608
  %671 = ptrtoint ptr addrspace(3) %670 to i32
  %.idx457 = shl nuw nsw i64 %83, 8
  %.idx458 = shl nuw nsw i64 %84, 8
  %.idx459 = shl nuw nsw i64 %85, 8
  %.idx460 = shl nuw nsw i64 %86, 8
  %672 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %624
  %673 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %629
  %674 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %632
  %675 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %637
  %676 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %640
  %677 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %645
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %648
  %679 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %653
  %680 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %657
  %681 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 118784), i32 %662
  %682 = and i32 %33, 3
  %683 = mul nuw nsw i32 %682, 72
  %684 = select i1 %.not, i32 0, i32 288
  %685 = xor i32 %684, %683
  %686 = shl nuw nsw i32 %35, 6
  %687 = or disjoint i32 %685, %686
  %688 = xor i32 %687, %596
  %689 = shl nuw nsw i32 %39, 5
  %690 = or disjoint i32 %688, %689
  %691 = xor i32 %690, 16
  %692 = xor i32 %690, 32
  %693 = xor i32 %690, 48
  %694 = xor i32 %690, 2048
  %695 = xor i32 %690, 2064
  %696 = xor i32 %690, 2080
  %697 = xor i32 %690, 2096
  %698 = shl nuw nsw i32 %36, 5
  %699 = or disjoint i32 %595, %698
  %700 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %699
  %701 = ptrtoint ptr addrspace(3) %700 to i32
  %702 = or disjoint i32 %699, 1024
  %703 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %702
  %704 = ptrtoint ptr addrspace(3) %703 to i32
  %705 = xor i32 %699, 8
  %706 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %705
  %707 = ptrtoint ptr addrspace(3) %706 to i32
  %708 = xor i32 %699, 1032
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %708
  %710 = ptrtoint ptr addrspace(3) %709 to i32
  %711 = xor i32 %699, 16
  %712 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %711
  %713 = ptrtoint ptr addrspace(3) %712 to i32
  %714 = xor i32 %699, 1040
  %715 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %714
  %716 = ptrtoint ptr addrspace(3) %715 to i32
  %717 = xor i32 %699, 24
  %718 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %717
  %719 = ptrtoint ptr addrspace(3) %718 to i32
  %720 = xor i32 %699, 1048
  %721 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %720
  %722 = ptrtoint ptr addrspace(3) %721 to i32
  %723 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %699
  %724 = ptrtoint ptr addrspace(3) %723 to i32
  %725 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %702
  %726 = ptrtoint ptr addrspace(3) %725 to i32
  %727 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %705
  %728 = ptrtoint ptr addrspace(3) %727 to i32
  %729 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %708
  %730 = ptrtoint ptr addrspace(3) %729 to i32
  %731 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %711
  %732 = ptrtoint ptr addrspace(3) %731 to i32
  %733 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %714
  %734 = ptrtoint ptr addrspace(3) %733 to i32
  %735 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %717
  %736 = ptrtoint ptr addrspace(3) %735 to i32
  %737 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %720
  %738 = ptrtoint ptr addrspace(3) %737 to i32
  %739 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %624
  %740 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %629
  %741 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %632
  %742 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %637
  %743 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %640
  %744 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %645
  %745 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %648
  %746 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %653
  %747 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %657
  %748 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 110592), i32 %662
  %749 = xor i32 %685, %35
  %750 = or disjoint i32 %749, %698
  %751 = xor i32 %750, %58
  %752 = xor i32 %751, 1024
  %753 = xor i32 %751, 2048
  %754 = xor i32 %751, 3072
  %755 = xor i32 %751, 32
  %756 = xor i32 %751, 1056
  %757 = xor i32 %751, 2080
  %758 = xor i32 %751, 3104
  %759 = sext i32 %587 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  br label %760, !dbg !34

760:                                              ; preds = %.lr.ph, %760
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %760 ]
  %761 = phi i32 [ 128, %.lr.ph ], [ %2403, %760 ]
  %762 = phi i32 [ 64, %.lr.ph ], [ %761, %760 ]
  %763 = phi i32 [ 0, %.lr.ph ], [ %762, %760 ]
  %.pn146687 = phi i1 [ %535, %.lr.ph ], [ %2533, %760 ]
  %.pn162686 = phi i1 [ %534, %.lr.ph ], [ %2532, %760 ]
  %.pn178685 = phi i1 [ %533, %.lr.ph ], [ %2531, %760 ]
  %.pn194684 = phi i1 [ %532, %.lr.ph ], [ %2530, %760 ]
  %.pn146.pn683 = phi i1 [ %372, %.lr.ph ], [ %.pn146687, %760 ]
  %.pn162.pn682 = phi i1 [ %371, %.lr.ph ], [ %.pn162686, %760 ]
  %.pn178.pn681 = phi i1 [ %370, %.lr.ph ], [ %.pn178685, %760 ]
  %.pn194.pn680 = phi i1 [ %369, %.lr.ph ], [ %.pn194684, %760 ]
  %.pn146.pn.pn679 = phi i1 [ %203, %.lr.ph ], [ %.pn146.pn683, %760 ]
  %.pn162.pn.pn678 = phi i1 [ %202, %.lr.ph ], [ %.pn162.pn682, %760 ]
  %.pn178.pn.pn677 = phi i1 [ %201, %.lr.ph ], [ %.pn178.pn681, %760 ]
  %.pn194.pn.pn676 = phi i1 [ %200, %.lr.ph ], [ %.pn194.pn680, %760 ]
  %.pn21675 = phi i64 [ %527, %.lr.ph ], [ %2525, %760 ]
  %.pn37674 = phi i64 [ %526, %.lr.ph ], [ %2524, %760 ]
  %.pn53673 = phi i64 [ %525, %.lr.ph ], [ %2523, %760 ]
  %.pn69672 = phi i64 [ %524, %.lr.ph ], [ %2522, %760 ]
  %.pn21.pn671 = phi i64 [ %364, %.lr.ph ], [ %.pn21675, %760 ]
  %.pn37.pn670 = phi i64 [ %363, %.lr.ph ], [ %.pn37674, %760 ]
  %.pn53.pn669 = phi i64 [ %362, %.lr.ph ], [ %.pn53673, %760 ]
  %.pn69.pn668 = phi i64 [ %361, %.lr.ph ], [ %.pn69672, %760 ]
  %.pn21.pn.pn667 = phi i64 [ %195, %.lr.ph ], [ %.pn21.pn671, %760 ]
  %.pn37.pn.pn666 = phi i64 [ %194, %.lr.ph ], [ %.pn37.pn670, %760 ]
  %.pn53.pn.pn665 = phi i64 [ %193, %.lr.ph ], [ %.pn53.pn669, %760 ]
  %.pn69.pn.pn664 = phi i64 [ %192, %.lr.ph ], [ %.pn69.pn668, %760 ]
  %764 = phi i32 [ -1, %.lr.ph ], [ %833, %760 ]
  %765 = phi i32 [ 2, %.lr.ph ], [ %2401, %760 ]
  %766 = phi float [ 0.000000e+00, %.lr.ph ], [ %2360, %760 ]
  %767 = phi float [ 0.000000e+00, %.lr.ph ], [ %2361, %760 ]
  %768 = phi float [ 0.000000e+00, %.lr.ph ], [ %2362, %760 ]
  %769 = phi float [ 0.000000e+00, %.lr.ph ], [ %2363, %760 ]
  %770 = phi float [ 0.000000e+00, %.lr.ph ], [ %2365, %760 ]
  %771 = phi float [ 0.000000e+00, %.lr.ph ], [ %2366, %760 ]
  %772 = phi float [ 0.000000e+00, %.lr.ph ], [ %2367, %760 ]
  %773 = phi float [ 0.000000e+00, %.lr.ph ], [ %2368, %760 ]
  %774 = phi float [ 0.000000e+00, %.lr.ph ], [ %2370, %760 ]
  %775 = phi float [ 0.000000e+00, %.lr.ph ], [ %2371, %760 ]
  %776 = phi float [ 0.000000e+00, %.lr.ph ], [ %2372, %760 ]
  %777 = phi float [ 0.000000e+00, %.lr.ph ], [ %2373, %760 ]
  %778 = phi float [ 0.000000e+00, %.lr.ph ], [ %2375, %760 ]
  %779 = phi float [ 0.000000e+00, %.lr.ph ], [ %2376, %760 ]
  %780 = phi float [ 0.000000e+00, %.lr.ph ], [ %2377, %760 ]
  %781 = phi float [ 0.000000e+00, %.lr.ph ], [ %2378, %760 ]
  %782 = phi float [ 0.000000e+00, %.lr.ph ], [ %2380, %760 ]
  %783 = phi float [ 0.000000e+00, %.lr.ph ], [ %2381, %760 ]
  %784 = phi float [ 0.000000e+00, %.lr.ph ], [ %2382, %760 ]
  %785 = phi float [ 0.000000e+00, %.lr.ph ], [ %2383, %760 ]
  %786 = phi float [ 0.000000e+00, %.lr.ph ], [ %2385, %760 ]
  %787 = phi float [ 0.000000e+00, %.lr.ph ], [ %2386, %760 ]
  %788 = phi float [ 0.000000e+00, %.lr.ph ], [ %2387, %760 ]
  %789 = phi float [ 0.000000e+00, %.lr.ph ], [ %2388, %760 ]
  %790 = phi float [ 0.000000e+00, %.lr.ph ], [ %2390, %760 ]
  %791 = phi float [ 0.000000e+00, %.lr.ph ], [ %2391, %760 ]
  %792 = phi float [ 0.000000e+00, %.lr.ph ], [ %2392, %760 ]
  %793 = phi float [ 0.000000e+00, %.lr.ph ], [ %2393, %760 ]
  %794 = phi float [ 0.000000e+00, %.lr.ph ], [ %2395, %760 ]
  %795 = phi float [ 0.000000e+00, %.lr.ph ], [ %2396, %760 ]
  %796 = phi float [ 0.000000e+00, %.lr.ph ], [ %2397, %760 ]
  %797 = phi float [ 0.000000e+00, %.lr.ph ], [ %2398, %760 ]
  %798 = phi float [ 0.000000e+00, %.lr.ph ], [ %2143, %760 ]
  %799 = phi float [ 0.000000e+00, %.lr.ph ], [ %2144, %760 ]
  %800 = phi float [ 0.000000e+00, %.lr.ph ], [ %2145, %760 ]
  %801 = phi float [ 0.000000e+00, %.lr.ph ], [ %2146, %760 ]
  %802 = phi float [ 0.000000e+00, %.lr.ph ], [ %2148, %760 ]
  %803 = phi float [ 0.000000e+00, %.lr.ph ], [ %2149, %760 ]
  %804 = phi float [ 0.000000e+00, %.lr.ph ], [ %2150, %760 ]
  %805 = phi float [ 0.000000e+00, %.lr.ph ], [ %2151, %760 ]
  %806 = phi float [ 0.000000e+00, %.lr.ph ], [ %2153, %760 ]
  %807 = phi float [ 0.000000e+00, %.lr.ph ], [ %2154, %760 ]
  %808 = phi float [ 0.000000e+00, %.lr.ph ], [ %2155, %760 ]
  %809 = phi float [ 0.000000e+00, %.lr.ph ], [ %2156, %760 ]
  %810 = phi float [ 0.000000e+00, %.lr.ph ], [ %2158, %760 ]
  %811 = phi float [ 0.000000e+00, %.lr.ph ], [ %2159, %760 ]
  %812 = phi float [ 0.000000e+00, %.lr.ph ], [ %2160, %760 ]
  %813 = phi float [ 0.000000e+00, %.lr.ph ], [ %2161, %760 ]
  %814 = phi float [ 0.000000e+00, %.lr.ph ], [ %2163, %760 ]
  %815 = phi float [ 0.000000e+00, %.lr.ph ], [ %2164, %760 ]
  %816 = phi float [ 0.000000e+00, %.lr.ph ], [ %2165, %760 ]
  %817 = phi float [ 0.000000e+00, %.lr.ph ], [ %2166, %760 ]
  %818 = phi float [ 0.000000e+00, %.lr.ph ], [ %2168, %760 ]
  %819 = phi float [ 0.000000e+00, %.lr.ph ], [ %2169, %760 ]
  %820 = phi float [ 0.000000e+00, %.lr.ph ], [ %2170, %760 ]
  %821 = phi float [ 0.000000e+00, %.lr.ph ], [ %2171, %760 ]
  %822 = phi float [ 0.000000e+00, %.lr.ph ], [ %2173, %760 ]
  %823 = phi float [ 0.000000e+00, %.lr.ph ], [ %2174, %760 ]
  %824 = phi float [ 0.000000e+00, %.lr.ph ], [ %2175, %760 ]
  %825 = phi float [ 0.000000e+00, %.lr.ph ], [ %2176, %760 ]
  %826 = phi float [ 0.000000e+00, %.lr.ph ], [ %2178, %760 ]
  %827 = phi float [ 0.000000e+00, %.lr.ph ], [ %2179, %760 ]
  %828 = phi float [ 0.000000e+00, %.lr.ph ], [ %2180, %760 ]
  %829 = phi float [ 0.000000e+00, %.lr.ph ], [ %2181, %760 ]
  %830 = icmp slt i64 %indvars.iv, %759, !dbg !34
  %831 = add i32 %764, 1, !dbg !34
  %832 = icmp sgt i32 %831, 2, !dbg !34
  %833 = select i1 %832, i32 0, i32 %831, !dbg !34
  %834 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %835 = shl i32 %834, 19, !dbg !42
  %836 = sext i32 %835 to i64, !dbg !43
  %837 = getelementptr bfloat, ptr addrspace(1) %21, i64 %836, !dbg !43
  %838 = fptrunc float %798 to bfloat, !dbg !44
  %839 = fptrunc float %799 to bfloat, !dbg !44
  %840 = fptrunc float %800 to bfloat, !dbg !44
  %841 = fptrunc float %801 to bfloat, !dbg !44
  %842 = fptrunc float %802 to bfloat, !dbg !44
  %843 = fptrunc float %803 to bfloat, !dbg !44
  %844 = fptrunc float %804 to bfloat, !dbg !44
  %845 = fptrunc float %805 to bfloat, !dbg !44
  %846 = fptrunc float %806 to bfloat, !dbg !44
  %847 = fptrunc float %807 to bfloat, !dbg !44
  %848 = fptrunc float %808 to bfloat, !dbg !44
  %849 = fptrunc float %809 to bfloat, !dbg !44
  %850 = fptrunc float %810 to bfloat, !dbg !44
  %851 = fptrunc float %811 to bfloat, !dbg !44
  %852 = fptrunc float %812 to bfloat, !dbg !44
  %853 = fptrunc float %813 to bfloat, !dbg !44
  %854 = fptrunc float %814 to bfloat, !dbg !44
  %855 = fptrunc float %815 to bfloat, !dbg !44
  %856 = fptrunc float %816 to bfloat, !dbg !44
  %857 = fptrunc float %817 to bfloat, !dbg !44
  %858 = fptrunc float %818 to bfloat, !dbg !44
  %859 = fptrunc float %819 to bfloat, !dbg !44
  %860 = fptrunc float %820 to bfloat, !dbg !44
  %861 = fptrunc float %821 to bfloat, !dbg !44
  %862 = fptrunc float %822 to bfloat, !dbg !44
  %863 = fptrunc float %823 to bfloat, !dbg !44
  %864 = fptrunc float %824 to bfloat, !dbg !44
  %865 = fptrunc float %825 to bfloat, !dbg !44
  %866 = fptrunc float %826 to bfloat, !dbg !44
  %867 = fptrunc float %827 to bfloat, !dbg !44
  %868 = fptrunc float %828 to bfloat, !dbg !44
  %869 = fptrunc float %829 to bfloat, !dbg !44
  %870 = insertelement <2 x bfloat> poison, bfloat %838, i64 0, !dbg !44
  %871 = insertelement <2 x bfloat> %870, bfloat %839, i64 1, !dbg !44
  %872 = bitcast <2 x bfloat> %871 to i32, !dbg !44
  %873 = insertelement <2 x bfloat> poison, bfloat %840, i64 0, !dbg !44
  %874 = insertelement <2 x bfloat> %873, bfloat %841, i64 1, !dbg !44
  %875 = bitcast <2 x bfloat> %874 to i32, !dbg !44
  %876 = insertelement <2 x bfloat> poison, bfloat %842, i64 0, !dbg !44
  %877 = insertelement <2 x bfloat> %876, bfloat %843, i64 1, !dbg !44
  %878 = bitcast <2 x bfloat> %877 to i32, !dbg !44
  %879 = insertelement <2 x bfloat> poison, bfloat %844, i64 0, !dbg !44
  %880 = insertelement <2 x bfloat> %879, bfloat %845, i64 1, !dbg !44
  %881 = bitcast <2 x bfloat> %880 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %601, i32 %872, i32 %875, i32 %878, i32 %881) #2, !dbg !44
  %882 = insertelement <2 x bfloat> poison, bfloat %846, i64 0, !dbg !44
  %883 = insertelement <2 x bfloat> %882, bfloat %847, i64 1, !dbg !44
  %884 = bitcast <2 x bfloat> %883 to i32, !dbg !44
  %885 = insertelement <2 x bfloat> poison, bfloat %848, i64 0, !dbg !44
  %886 = insertelement <2 x bfloat> %885, bfloat %849, i64 1, !dbg !44
  %887 = bitcast <2 x bfloat> %886 to i32, !dbg !44
  %888 = insertelement <2 x bfloat> poison, bfloat %850, i64 0, !dbg !44
  %889 = insertelement <2 x bfloat> %888, bfloat %851, i64 1, !dbg !44
  %890 = bitcast <2 x bfloat> %889 to i32, !dbg !44
  %891 = insertelement <2 x bfloat> poison, bfloat %852, i64 0, !dbg !44
  %892 = insertelement <2 x bfloat> %891, bfloat %853, i64 1, !dbg !44
  %893 = bitcast <2 x bfloat> %892 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %604, i32 %884, i32 %887, i32 %890, i32 %893) #2, !dbg !44
  %894 = insertelement <2 x bfloat> poison, bfloat %854, i64 0, !dbg !44
  %895 = insertelement <2 x bfloat> %894, bfloat %855, i64 1, !dbg !44
  %896 = bitcast <2 x bfloat> %895 to i32, !dbg !44
  %897 = insertelement <2 x bfloat> poison, bfloat %856, i64 0, !dbg !44
  %898 = insertelement <2 x bfloat> %897, bfloat %857, i64 1, !dbg !44
  %899 = bitcast <2 x bfloat> %898 to i32, !dbg !44
  %900 = insertelement <2 x bfloat> poison, bfloat %858, i64 0, !dbg !44
  %901 = insertelement <2 x bfloat> %900, bfloat %859, i64 1, !dbg !44
  %902 = bitcast <2 x bfloat> %901 to i32, !dbg !44
  %903 = insertelement <2 x bfloat> poison, bfloat %860, i64 0, !dbg !44
  %904 = insertelement <2 x bfloat> %903, bfloat %861, i64 1, !dbg !44
  %905 = bitcast <2 x bfloat> %904 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %607, i32 %896, i32 %899, i32 %902, i32 %905) #2, !dbg !44
  %906 = insertelement <2 x bfloat> poison, bfloat %862, i64 0, !dbg !44
  %907 = insertelement <2 x bfloat> %906, bfloat %863, i64 1, !dbg !44
  %908 = bitcast <2 x bfloat> %907 to i32, !dbg !44
  %909 = insertelement <2 x bfloat> poison, bfloat %864, i64 0, !dbg !44
  %910 = insertelement <2 x bfloat> %909, bfloat %865, i64 1, !dbg !44
  %911 = bitcast <2 x bfloat> %910 to i32, !dbg !44
  %912 = insertelement <2 x bfloat> poison, bfloat %866, i64 0, !dbg !44
  %913 = insertelement <2 x bfloat> %912, bfloat %867, i64 1, !dbg !44
  %914 = bitcast <2 x bfloat> %913 to i32, !dbg !44
  %915 = insertelement <2 x bfloat> poison, bfloat %868, i64 0, !dbg !44
  %916 = insertelement <2 x bfloat> %915, bfloat %869, i64 1, !dbg !44
  %917 = bitcast <2 x bfloat> %916 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %610, i32 %908, i32 %911, i32 %914, i32 %917) #2, !dbg !44
  %918 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx407, !dbg !29
  %919 = getelementptr bfloat, ptr addrspace(1) %918, i64 %79, !dbg !29
  %920 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx408, !dbg !29
  %921 = getelementptr bfloat, ptr addrspace(1) %920, i64 %79, !dbg !29
  %922 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx409, !dbg !29
  %923 = getelementptr bfloat, ptr addrspace(1) %922, i64 %79, !dbg !29
  %924 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx410, !dbg !29
  %925 = getelementptr bfloat, ptr addrspace(1) %924, i64 %79, !dbg !29
  store <2 x bfloat> %871, ptr addrspace(3) %625, align 4, !dbg !29
  store <2 x bfloat> %874, ptr addrspace(3) %630, align 4, !dbg !29
  store <2 x bfloat> %877, ptr addrspace(3) %633, align 4, !dbg !29
  store <2 x bfloat> %880, ptr addrspace(3) %638, align 4, !dbg !29
  store <2 x bfloat> %883, ptr addrspace(3) %641, align 4, !dbg !29
  store <2 x bfloat> %886, ptr addrspace(3) %646, align 4, !dbg !29
  store <2 x bfloat> %889, ptr addrspace(3) %649, align 4, !dbg !29
  store <2 x bfloat> %892, ptr addrspace(3) %654, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %926 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !29
  %927 = load <4 x i32>, ptr addrspace(3) %663, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  store <2 x bfloat> %895, ptr addrspace(3) %625, align 4, !dbg !29
  store <2 x bfloat> %898, ptr addrspace(3) %630, align 4, !dbg !29
  store <2 x bfloat> %901, ptr addrspace(3) %633, align 4, !dbg !29
  store <2 x bfloat> %904, ptr addrspace(3) %638, align 4, !dbg !29
  store <2 x bfloat> %907, ptr addrspace(3) %641, align 4, !dbg !29
  store <2 x bfloat> %910, ptr addrspace(3) %646, align 4, !dbg !29
  store <2 x bfloat> %913, ptr addrspace(3) %649, align 4, !dbg !29
  store <2 x bfloat> %916, ptr addrspace(3) %654, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %928 = load <4 x i32>, ptr addrspace(3) %658, align 16, !dbg !29
  %929 = load <4 x i32>, ptr addrspace(3) %663, align 16, !dbg !29
  %.extract564 = extractelement <4 x i32> %926, i64 0, !dbg !29
  %.extract566 = extractelement <4 x i32> %926, i64 1, !dbg !29
  %.extract568 = extractelement <4 x i32> %926, i64 2, !dbg !29
  %.extract570 = extractelement <4 x i32> %926, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract564, i32 %.extract566, i32 %.extract568, i32 %.extract570, ptr addrspace(1) %919, i1 %82) #2, !dbg !29
  %.extract572 = extractelement <4 x i32> %927, i64 0, !dbg !29
  %.extract574 = extractelement <4 x i32> %927, i64 1, !dbg !29
  %.extract576 = extractelement <4 x i32> %927, i64 2, !dbg !29
  %.extract578 = extractelement <4 x i32> %927, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract572, i32 %.extract574, i32 %.extract576, i32 %.extract578, ptr addrspace(1) %921, i1 %82) #2, !dbg !29
  %.extract580 = extractelement <4 x i32> %928, i64 0, !dbg !29
  %.extract582 = extractelement <4 x i32> %928, i64 1, !dbg !29
  %.extract584 = extractelement <4 x i32> %928, i64 2, !dbg !29
  %.extract586 = extractelement <4 x i32> %928, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract580, i32 %.extract582, i32 %.extract584, i32 %.extract586, ptr addrspace(1) %923, i1 %82) #2, !dbg !29
  %.extract588 = extractelement <4 x i32> %929, i64 0, !dbg !29
  %.extract590 = extractelement <4 x i32> %929, i64 1, !dbg !29
  %.extract592 = extractelement <4 x i32> %929, i64 2, !dbg !29
  %.extract594 = extractelement <4 x i32> %929, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract588, i32 %.extract590, i32 %.extract592, i32 %.extract594, ptr addrspace(1) %925, i1 %82) #2, !dbg !29
  %930 = fptrunc float %766 to bfloat, !dbg !45
  %931 = fptrunc float %767 to bfloat, !dbg !45
  %932 = fptrunc float %768 to bfloat, !dbg !45
  %933 = fptrunc float %769 to bfloat, !dbg !45
  %934 = fptrunc float %770 to bfloat, !dbg !45
  %935 = fptrunc float %771 to bfloat, !dbg !45
  %936 = fptrunc float %772 to bfloat, !dbg !45
  %937 = fptrunc float %773 to bfloat, !dbg !45
  %938 = fptrunc float %774 to bfloat, !dbg !45
  %939 = fptrunc float %775 to bfloat, !dbg !45
  %940 = fptrunc float %776 to bfloat, !dbg !45
  %941 = fptrunc float %777 to bfloat, !dbg !45
  %942 = fptrunc float %778 to bfloat, !dbg !45
  %943 = fptrunc float %779 to bfloat, !dbg !45
  %944 = fptrunc float %780 to bfloat, !dbg !45
  %945 = fptrunc float %781 to bfloat, !dbg !45
  %946 = fptrunc float %782 to bfloat, !dbg !45
  %947 = fptrunc float %783 to bfloat, !dbg !45
  %948 = fptrunc float %784 to bfloat, !dbg !45
  %949 = fptrunc float %785 to bfloat, !dbg !45
  %950 = fptrunc float %786 to bfloat, !dbg !45
  %951 = fptrunc float %787 to bfloat, !dbg !45
  %952 = fptrunc float %788 to bfloat, !dbg !45
  %953 = fptrunc float %789 to bfloat, !dbg !45
  %954 = fptrunc float %790 to bfloat, !dbg !45
  %955 = fptrunc float %791 to bfloat, !dbg !45
  %956 = fptrunc float %792 to bfloat, !dbg !45
  %957 = fptrunc float %793 to bfloat, !dbg !45
  %958 = fptrunc float %794 to bfloat, !dbg !45
  %959 = fptrunc float %795 to bfloat, !dbg !45
  %960 = fptrunc float %796 to bfloat, !dbg !45
  %961 = fptrunc float %797 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %962 = insertelement <2 x bfloat> poison, bfloat %930, i64 0, !dbg !45
  %963 = insertelement <2 x bfloat> %962, bfloat %931, i64 1, !dbg !45
  %964 = bitcast <2 x bfloat> %963 to i32, !dbg !45
  %965 = insertelement <2 x bfloat> poison, bfloat %932, i64 0, !dbg !45
  %966 = insertelement <2 x bfloat> %965, bfloat %933, i64 1, !dbg !45
  %967 = bitcast <2 x bfloat> %966 to i32, !dbg !45
  %968 = insertelement <2 x bfloat> poison, bfloat %934, i64 0, !dbg !45
  %969 = insertelement <2 x bfloat> %968, bfloat %935, i64 1, !dbg !45
  %970 = bitcast <2 x bfloat> %969 to i32, !dbg !45
  %971 = insertelement <2 x bfloat> poison, bfloat %936, i64 0, !dbg !45
  %972 = insertelement <2 x bfloat> %971, bfloat %937, i64 1, !dbg !45
  %973 = bitcast <2 x bfloat> %972 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %665, i32 %964, i32 %967, i32 %970, i32 %973) #2, !dbg !45
  %974 = insertelement <2 x bfloat> poison, bfloat %938, i64 0, !dbg !45
  %975 = insertelement <2 x bfloat> %974, bfloat %939, i64 1, !dbg !45
  %976 = bitcast <2 x bfloat> %975 to i32, !dbg !45
  %977 = insertelement <2 x bfloat> poison, bfloat %940, i64 0, !dbg !45
  %978 = insertelement <2 x bfloat> %977, bfloat %941, i64 1, !dbg !45
  %979 = bitcast <2 x bfloat> %978 to i32, !dbg !45
  %980 = insertelement <2 x bfloat> poison, bfloat %942, i64 0, !dbg !45
  %981 = insertelement <2 x bfloat> %980, bfloat %943, i64 1, !dbg !45
  %982 = bitcast <2 x bfloat> %981 to i32, !dbg !45
  %983 = insertelement <2 x bfloat> poison, bfloat %944, i64 0, !dbg !45
  %984 = insertelement <2 x bfloat> %983, bfloat %945, i64 1, !dbg !45
  %985 = bitcast <2 x bfloat> %984 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %667, i32 %976, i32 %979, i32 %982, i32 %985) #2, !dbg !45
  %986 = insertelement <2 x bfloat> poison, bfloat %946, i64 0, !dbg !45
  %987 = insertelement <2 x bfloat> %986, bfloat %947, i64 1, !dbg !45
  %988 = bitcast <2 x bfloat> %987 to i32, !dbg !45
  %989 = insertelement <2 x bfloat> poison, bfloat %948, i64 0, !dbg !45
  %990 = insertelement <2 x bfloat> %989, bfloat %949, i64 1, !dbg !45
  %991 = bitcast <2 x bfloat> %990 to i32, !dbg !45
  %992 = insertelement <2 x bfloat> poison, bfloat %950, i64 0, !dbg !45
  %993 = insertelement <2 x bfloat> %992, bfloat %951, i64 1, !dbg !45
  %994 = bitcast <2 x bfloat> %993 to i32, !dbg !45
  %995 = insertelement <2 x bfloat> poison, bfloat %952, i64 0, !dbg !45
  %996 = insertelement <2 x bfloat> %995, bfloat %953, i64 1, !dbg !45
  %997 = bitcast <2 x bfloat> %996 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %669, i32 %988, i32 %991, i32 %994, i32 %997) #2, !dbg !45
  %998 = insertelement <2 x bfloat> poison, bfloat %954, i64 0, !dbg !45
  %999 = insertelement <2 x bfloat> %998, bfloat %955, i64 1, !dbg !45
  %1000 = bitcast <2 x bfloat> %999 to i32, !dbg !45
  %1001 = insertelement <2 x bfloat> poison, bfloat %956, i64 0, !dbg !45
  %1002 = insertelement <2 x bfloat> %1001, bfloat %957, i64 1, !dbg !45
  %1003 = bitcast <2 x bfloat> %1002 to i32, !dbg !45
  %1004 = insertelement <2 x bfloat> poison, bfloat %958, i64 0, !dbg !45
  %1005 = insertelement <2 x bfloat> %1004, bfloat %959, i64 1, !dbg !45
  %1006 = bitcast <2 x bfloat> %1005 to i32, !dbg !45
  %1007 = insertelement <2 x bfloat> poison, bfloat %960, i64 0, !dbg !45
  %1008 = insertelement <2 x bfloat> %1007, bfloat %961, i64 1, !dbg !45
  %1009 = bitcast <2 x bfloat> %1008 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %671, i32 %1000, i32 %1003, i32 %1006, i32 %1009) #2, !dbg !45
  %1010 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx457, !dbg !30
  %1011 = getelementptr bfloat, ptr addrspace(1) %1010, i64 %79, !dbg !30
  %1012 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx458, !dbg !30
  %1013 = getelementptr bfloat, ptr addrspace(1) %1012, i64 %79, !dbg !30
  %1014 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx459, !dbg !30
  %1015 = getelementptr bfloat, ptr addrspace(1) %1014, i64 %79, !dbg !30
  %1016 = getelementptr i8, ptr addrspace(1) %837, i64 %.idx460, !dbg !30
  %1017 = getelementptr bfloat, ptr addrspace(1) %1016, i64 %79, !dbg !30
  store <2 x bfloat> %963, ptr addrspace(3) %672, align 4, !dbg !30
  store <2 x bfloat> %966, ptr addrspace(3) %673, align 4, !dbg !30
  store <2 x bfloat> %969, ptr addrspace(3) %674, align 4, !dbg !30
  store <2 x bfloat> %972, ptr addrspace(3) %675, align 4, !dbg !30
  store <2 x bfloat> %975, ptr addrspace(3) %676, align 4, !dbg !30
  store <2 x bfloat> %978, ptr addrspace(3) %677, align 4, !dbg !30
  store <2 x bfloat> %981, ptr addrspace(3) %678, align 4, !dbg !30
  store <2 x bfloat> %984, ptr addrspace(3) %679, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1018 = load <4 x i32>, ptr addrspace(3) %680, align 16, !dbg !30
  %1019 = load <4 x i32>, ptr addrspace(3) %681, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  store <2 x bfloat> %987, ptr addrspace(3) %672, align 4, !dbg !30
  store <2 x bfloat> %990, ptr addrspace(3) %673, align 4, !dbg !30
  store <2 x bfloat> %993, ptr addrspace(3) %674, align 4, !dbg !30
  store <2 x bfloat> %996, ptr addrspace(3) %675, align 4, !dbg !30
  store <2 x bfloat> %999, ptr addrspace(3) %676, align 4, !dbg !30
  store <2 x bfloat> %1002, ptr addrspace(3) %677, align 4, !dbg !30
  store <2 x bfloat> %1005, ptr addrspace(3) %678, align 4, !dbg !30
  store <2 x bfloat> %1008, ptr addrspace(3) %679, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1020 = load <4 x i32>, ptr addrspace(3) %680, align 16, !dbg !30
  %1021 = load <4 x i32>, ptr addrspace(3) %681, align 16, !dbg !30
  %.extract596 = extractelement <4 x i32> %1018, i64 0, !dbg !30
  %.extract598 = extractelement <4 x i32> %1018, i64 1, !dbg !30
  %.extract600 = extractelement <4 x i32> %1018, i64 2, !dbg !30
  %.extract602 = extractelement <4 x i32> %1018, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract596, i32 %.extract598, i32 %.extract600, i32 %.extract602, ptr addrspace(1) %1011, i1 %82) #2, !dbg !30
  %.extract604 = extractelement <4 x i32> %1019, i64 0, !dbg !30
  %.extract606 = extractelement <4 x i32> %1019, i64 1, !dbg !30
  %.extract608 = extractelement <4 x i32> %1019, i64 2, !dbg !30
  %.extract610 = extractelement <4 x i32> %1019, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract604, i32 %.extract606, i32 %.extract608, i32 %.extract610, ptr addrspace(1) %1013, i1 %82) #2, !dbg !30
  %.extract612 = extractelement <4 x i32> %1020, i64 0, !dbg !30
  %.extract614 = extractelement <4 x i32> %1020, i64 1, !dbg !30
  %.extract616 = extractelement <4 x i32> %1020, i64 2, !dbg !30
  %.extract618 = extractelement <4 x i32> %1020, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract612, i32 %.extract614, i32 %.extract616, i32 %.extract618, ptr addrspace(1) %1015, i1 %82) #2, !dbg !30
  %.extract620 = extractelement <4 x i32> %1021, i64 0, !dbg !30
  %.extract622 = extractelement <4 x i32> %1021, i64 1, !dbg !30
  %.extract624 = extractelement <4 x i32> %1021, i64 2, !dbg !30
  %.extract626 = extractelement <4 x i32> %1021, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract620, i32 %.extract622, i32 %.extract624, i32 %.extract626, ptr addrspace(1) %1017, i1 %82) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 12), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %1022 = shl i32 %833, 12, !dbg !35
  %1023 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1022, !dbg !35
  %1024 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %690, !dbg !35
  %1025 = ptrtoint ptr addrspace(3) %1024 to i32, !dbg !35
  %1026 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1025) #2, !dbg !35
  %1027 = extractvalue { i32, i32, i32, i32 } %1026, 0, !dbg !35
  %1028 = extractvalue { i32, i32, i32, i32 } %1026, 1, !dbg !35
  %1029 = extractvalue { i32, i32, i32, i32 } %1026, 2, !dbg !35
  %1030 = extractvalue { i32, i32, i32, i32 } %1026, 3, !dbg !35
  %1031 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %691, !dbg !35
  %1032 = ptrtoint ptr addrspace(3) %1031 to i32, !dbg !35
  %1033 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1032) #2, !dbg !35
  %1034 = extractvalue { i32, i32, i32, i32 } %1033, 0, !dbg !35
  %1035 = extractvalue { i32, i32, i32, i32 } %1033, 1, !dbg !35
  %1036 = extractvalue { i32, i32, i32, i32 } %1033, 2, !dbg !35
  %1037 = extractvalue { i32, i32, i32, i32 } %1033, 3, !dbg !35
  %1038 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %692, !dbg !35
  %1039 = ptrtoint ptr addrspace(3) %1038 to i32, !dbg !35
  %1040 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1039) #2, !dbg !35
  %1041 = extractvalue { i32, i32, i32, i32 } %1040, 0, !dbg !35
  %1042 = extractvalue { i32, i32, i32, i32 } %1040, 1, !dbg !35
  %1043 = extractvalue { i32, i32, i32, i32 } %1040, 2, !dbg !35
  %1044 = extractvalue { i32, i32, i32, i32 } %1040, 3, !dbg !35
  %1045 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %693, !dbg !35
  %1046 = ptrtoint ptr addrspace(3) %1045 to i32, !dbg !35
  %1047 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1046) #2, !dbg !35
  %1048 = extractvalue { i32, i32, i32, i32 } %1047, 0, !dbg !35
  %1049 = extractvalue { i32, i32, i32, i32 } %1047, 1, !dbg !35
  %1050 = extractvalue { i32, i32, i32, i32 } %1047, 2, !dbg !35
  %1051 = extractvalue { i32, i32, i32, i32 } %1047, 3, !dbg !35
  %1052 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %694, !dbg !35
  %1053 = ptrtoint ptr addrspace(3) %1052 to i32, !dbg !35
  %1054 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1053) #2, !dbg !35
  %1055 = extractvalue { i32, i32, i32, i32 } %1054, 0, !dbg !35
  %1056 = extractvalue { i32, i32, i32, i32 } %1054, 1, !dbg !35
  %1057 = extractvalue { i32, i32, i32, i32 } %1054, 2, !dbg !35
  %1058 = extractvalue { i32, i32, i32, i32 } %1054, 3, !dbg !35
  %1059 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %695, !dbg !35
  %1060 = ptrtoint ptr addrspace(3) %1059 to i32, !dbg !35
  %1061 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1060) #2, !dbg !35
  %1062 = extractvalue { i32, i32, i32, i32 } %1061, 0, !dbg !35
  %1063 = extractvalue { i32, i32, i32, i32 } %1061, 1, !dbg !35
  %1064 = extractvalue { i32, i32, i32, i32 } %1061, 2, !dbg !35
  %1065 = extractvalue { i32, i32, i32, i32 } %1061, 3, !dbg !35
  %1066 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %696, !dbg !35
  %1067 = ptrtoint ptr addrspace(3) %1066 to i32, !dbg !35
  %1068 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1067) #2, !dbg !35
  %1069 = extractvalue { i32, i32, i32, i32 } %1068, 0, !dbg !35
  %1070 = extractvalue { i32, i32, i32, i32 } %1068, 1, !dbg !35
  %1071 = extractvalue { i32, i32, i32, i32 } %1068, 2, !dbg !35
  %1072 = extractvalue { i32, i32, i32, i32 } %1068, 3, !dbg !35
  %1073 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1023, i32 %697, !dbg !35
  %1074 = ptrtoint ptr addrspace(3) %1073 to i32, !dbg !35
  %1075 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1074) #2, !dbg !35
  %1076 = extractvalue { i32, i32, i32, i32 } %1075, 0, !dbg !35
  %1077 = extractvalue { i32, i32, i32, i32 } %1075, 1, !dbg !35
  %1078 = extractvalue { i32, i32, i32, i32 } %1075, 2, !dbg !35
  %1079 = extractvalue { i32, i32, i32, i32 } %1075, 3, !dbg !35
  %1080 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %701) #2, !dbg !44
  %1081 = extractvalue { i32, i32, i32, i32 } %1080, 0, !dbg !44
  %1082 = extractvalue { i32, i32, i32, i32 } %1080, 1, !dbg !44
  %1083 = extractvalue { i32, i32, i32, i32 } %1080, 2, !dbg !44
  %1084 = extractvalue { i32, i32, i32, i32 } %1080, 3, !dbg !44
  %1085 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %704) #2, !dbg !44
  %1086 = extractvalue { i32, i32, i32, i32 } %1085, 0, !dbg !44
  %1087 = extractvalue { i32, i32, i32, i32 } %1085, 1, !dbg !44
  %1088 = extractvalue { i32, i32, i32, i32 } %1085, 2, !dbg !44
  %1089 = extractvalue { i32, i32, i32, i32 } %1085, 3, !dbg !44
  %1090 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %707) #2, !dbg !44
  %1091 = extractvalue { i32, i32, i32, i32 } %1090, 0, !dbg !44
  %1092 = extractvalue { i32, i32, i32, i32 } %1090, 1, !dbg !44
  %1093 = extractvalue { i32, i32, i32, i32 } %1090, 2, !dbg !44
  %1094 = extractvalue { i32, i32, i32, i32 } %1090, 3, !dbg !44
  %1095 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %710) #2, !dbg !44
  %1096 = extractvalue { i32, i32, i32, i32 } %1095, 0, !dbg !44
  %1097 = extractvalue { i32, i32, i32, i32 } %1095, 1, !dbg !44
  %1098 = extractvalue { i32, i32, i32, i32 } %1095, 2, !dbg !44
  %1099 = extractvalue { i32, i32, i32, i32 } %1095, 3, !dbg !44
  %1100 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %713) #2, !dbg !44
  %1101 = extractvalue { i32, i32, i32, i32 } %1100, 0, !dbg !44
  %1102 = extractvalue { i32, i32, i32, i32 } %1100, 1, !dbg !44
  %1103 = extractvalue { i32, i32, i32, i32 } %1100, 2, !dbg !44
  %1104 = extractvalue { i32, i32, i32, i32 } %1100, 3, !dbg !44
  %1105 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %716) #2, !dbg !44
  %1106 = extractvalue { i32, i32, i32, i32 } %1105, 0, !dbg !44
  %1107 = extractvalue { i32, i32, i32, i32 } %1105, 1, !dbg !44
  %1108 = extractvalue { i32, i32, i32, i32 } %1105, 2, !dbg !44
  %1109 = extractvalue { i32, i32, i32, i32 } %1105, 3, !dbg !44
  %1110 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %719) #2, !dbg !44
  %1111 = extractvalue { i32, i32, i32, i32 } %1110, 0, !dbg !44
  %1112 = extractvalue { i32, i32, i32, i32 } %1110, 1, !dbg !44
  %1113 = extractvalue { i32, i32, i32, i32 } %1110, 2, !dbg !44
  %1114 = extractvalue { i32, i32, i32, i32 } %1110, 3, !dbg !44
  %1115 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %722) #2, !dbg !44
  %1116 = extractvalue { i32, i32, i32, i32 } %1115, 0, !dbg !44
  %1117 = extractvalue { i32, i32, i32, i32 } %1115, 1, !dbg !44
  %1118 = extractvalue { i32, i32, i32, i32 } %1115, 2, !dbg !44
  %1119 = extractvalue { i32, i32, i32, i32 } %1115, 3, !dbg !44
  %1120 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1081, i32 %1082) #2, !dbg !46
  %1121 = extractvalue { float, float, float, float } %1120, 0, !dbg !46
  %1122 = extractvalue { float, float, float, float } %1120, 1, !dbg !46
  %1123 = extractvalue { float, float, float, float } %1120, 2, !dbg !46
  %1124 = extractvalue { float, float, float, float } %1120, 3, !dbg !46
  %1125 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1091, i32 %1092) #2, !dbg !46
  %1126 = extractvalue { float, float, float, float } %1125, 0, !dbg !46
  %1127 = extractvalue { float, float, float, float } %1125, 1, !dbg !46
  %1128 = extractvalue { float, float, float, float } %1125, 2, !dbg !46
  %1129 = extractvalue { float, float, float, float } %1125, 3, !dbg !46
  %1130 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1101, i32 %1102) #2, !dbg !46
  %1131 = extractvalue { float, float, float, float } %1130, 0, !dbg !46
  %1132 = extractvalue { float, float, float, float } %1130, 1, !dbg !46
  %1133 = extractvalue { float, float, float, float } %1130, 2, !dbg !46
  %1134 = extractvalue { float, float, float, float } %1130, 3, !dbg !46
  %1135 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1027, i32 %1028, i32 %1029, i32 %1030, i32 %1111, i32 %1112) #2, !dbg !46
  %1136 = extractvalue { float, float, float, float } %1135, 0, !dbg !46
  %1137 = extractvalue { float, float, float, float } %1135, 1, !dbg !46
  %1138 = extractvalue { float, float, float, float } %1135, 2, !dbg !46
  %1139 = extractvalue { float, float, float, float } %1135, 3, !dbg !46
  %1140 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1055, i32 %1056, i32 %1057, i32 %1058, i32 %1081, i32 %1082) #2, !dbg !46
  %1141 = extractvalue { float, float, float, float } %1140, 0, !dbg !46
  %1142 = extractvalue { float, float, float, float } %1140, 1, !dbg !46
  %1143 = extractvalue { float, float, float, float } %1140, 2, !dbg !46
  %1144 = extractvalue { float, float, float, float } %1140, 3, !dbg !46
  %1145 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1055, i32 %1056, i32 %1057, i32 %1058, i32 %1091, i32 %1092) #2, !dbg !46
  %1146 = extractvalue { float, float, float, float } %1145, 0, !dbg !46
  %1147 = extractvalue { float, float, float, float } %1145, 1, !dbg !46
  %1148 = extractvalue { float, float, float, float } %1145, 2, !dbg !46
  %1149 = extractvalue { float, float, float, float } %1145, 3, !dbg !46
  %1150 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1055, i32 %1056, i32 %1057, i32 %1058, i32 %1101, i32 %1102) #2, !dbg !46
  %1151 = extractvalue { float, float, float, float } %1150, 0, !dbg !46
  %1152 = extractvalue { float, float, float, float } %1150, 1, !dbg !46
  %1153 = extractvalue { float, float, float, float } %1150, 2, !dbg !46
  %1154 = extractvalue { float, float, float, float } %1150, 3, !dbg !46
  %1155 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1055, i32 %1056, i32 %1057, i32 %1058, i32 %1111, i32 %1112) #2, !dbg !46
  %1156 = extractvalue { float, float, float, float } %1155, 0, !dbg !46
  %1157 = extractvalue { float, float, float, float } %1155, 1, !dbg !46
  %1158 = extractvalue { float, float, float, float } %1155, 2, !dbg !46
  %1159 = extractvalue { float, float, float, float } %1155, 3, !dbg !46
  %1160 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1121, float %1122, float %1123, float %1124, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1083, i32 %1084) #2, !dbg !46
  %1161 = extractvalue { float, float, float, float } %1160, 0, !dbg !46
  %1162 = extractvalue { float, float, float, float } %1160, 1, !dbg !46
  %1163 = extractvalue { float, float, float, float } %1160, 2, !dbg !46
  %1164 = extractvalue { float, float, float, float } %1160, 3, !dbg !46
  %1165 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1126, float %1127, float %1128, float %1129, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1093, i32 %1094) #2, !dbg !46
  %1166 = extractvalue { float, float, float, float } %1165, 0, !dbg !46
  %1167 = extractvalue { float, float, float, float } %1165, 1, !dbg !46
  %1168 = extractvalue { float, float, float, float } %1165, 2, !dbg !46
  %1169 = extractvalue { float, float, float, float } %1165, 3, !dbg !46
  %1170 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1131, float %1132, float %1133, float %1134, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1103, i32 %1104) #2, !dbg !46
  %1171 = extractvalue { float, float, float, float } %1170, 0, !dbg !46
  %1172 = extractvalue { float, float, float, float } %1170, 1, !dbg !46
  %1173 = extractvalue { float, float, float, float } %1170, 2, !dbg !46
  %1174 = extractvalue { float, float, float, float } %1170, 3, !dbg !46
  %1175 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1136, float %1137, float %1138, float %1139, i32 %1034, i32 %1035, i32 %1036, i32 %1037, i32 %1113, i32 %1114) #2, !dbg !46
  %1176 = extractvalue { float, float, float, float } %1175, 0, !dbg !46
  %1177 = extractvalue { float, float, float, float } %1175, 1, !dbg !46
  %1178 = extractvalue { float, float, float, float } %1175, 2, !dbg !46
  %1179 = extractvalue { float, float, float, float } %1175, 3, !dbg !46
  %1180 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1141, float %1142, float %1143, float %1144, i32 %1062, i32 %1063, i32 %1064, i32 %1065, i32 %1083, i32 %1084) #2, !dbg !46
  %1181 = extractvalue { float, float, float, float } %1180, 0, !dbg !46
  %1182 = extractvalue { float, float, float, float } %1180, 1, !dbg !46
  %1183 = extractvalue { float, float, float, float } %1180, 2, !dbg !46
  %1184 = extractvalue { float, float, float, float } %1180, 3, !dbg !46
  %1185 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1146, float %1147, float %1148, float %1149, i32 %1062, i32 %1063, i32 %1064, i32 %1065, i32 %1093, i32 %1094) #2, !dbg !46
  %1186 = extractvalue { float, float, float, float } %1185, 0, !dbg !46
  %1187 = extractvalue { float, float, float, float } %1185, 1, !dbg !46
  %1188 = extractvalue { float, float, float, float } %1185, 2, !dbg !46
  %1189 = extractvalue { float, float, float, float } %1185, 3, !dbg !46
  %1190 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1151, float %1152, float %1153, float %1154, i32 %1062, i32 %1063, i32 %1064, i32 %1065, i32 %1103, i32 %1104) #2, !dbg !46
  %1191 = extractvalue { float, float, float, float } %1190, 0, !dbg !46
  %1192 = extractvalue { float, float, float, float } %1190, 1, !dbg !46
  %1193 = extractvalue { float, float, float, float } %1190, 2, !dbg !46
  %1194 = extractvalue { float, float, float, float } %1190, 3, !dbg !46
  %1195 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1156, float %1157, float %1158, float %1159, i32 %1062, i32 %1063, i32 %1064, i32 %1065, i32 %1113, i32 %1114) #2, !dbg !46
  %1196 = extractvalue { float, float, float, float } %1195, 0, !dbg !46
  %1197 = extractvalue { float, float, float, float } %1195, 1, !dbg !46
  %1198 = extractvalue { float, float, float, float } %1195, 2, !dbg !46
  %1199 = extractvalue { float, float, float, float } %1195, 3, !dbg !46
  %1200 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1161, float %1162, float %1163, float %1164, i32 %1041, i32 %1042, i32 %1043, i32 %1044, i32 %1086, i32 %1087) #2, !dbg !46
  %1201 = extractvalue { float, float, float, float } %1200, 0, !dbg !46
  %1202 = extractvalue { float, float, float, float } %1200, 1, !dbg !46
  %1203 = extractvalue { float, float, float, float } %1200, 2, !dbg !46
  %1204 = extractvalue { float, float, float, float } %1200, 3, !dbg !46
  %1205 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1166, float %1167, float %1168, float %1169, i32 %1041, i32 %1042, i32 %1043, i32 %1044, i32 %1096, i32 %1097) #2, !dbg !46
  %1206 = extractvalue { float, float, float, float } %1205, 0, !dbg !46
  %1207 = extractvalue { float, float, float, float } %1205, 1, !dbg !46
  %1208 = extractvalue { float, float, float, float } %1205, 2, !dbg !46
  %1209 = extractvalue { float, float, float, float } %1205, 3, !dbg !46
  %1210 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1171, float %1172, float %1173, float %1174, i32 %1041, i32 %1042, i32 %1043, i32 %1044, i32 %1106, i32 %1107) #2, !dbg !46
  %1211 = extractvalue { float, float, float, float } %1210, 0, !dbg !46
  %1212 = extractvalue { float, float, float, float } %1210, 1, !dbg !46
  %1213 = extractvalue { float, float, float, float } %1210, 2, !dbg !46
  %1214 = extractvalue { float, float, float, float } %1210, 3, !dbg !46
  %1215 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1176, float %1177, float %1178, float %1179, i32 %1041, i32 %1042, i32 %1043, i32 %1044, i32 %1116, i32 %1117) #2, !dbg !46
  %1216 = extractvalue { float, float, float, float } %1215, 0, !dbg !46
  %1217 = extractvalue { float, float, float, float } %1215, 1, !dbg !46
  %1218 = extractvalue { float, float, float, float } %1215, 2, !dbg !46
  %1219 = extractvalue { float, float, float, float } %1215, 3, !dbg !46
  %1220 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1181, float %1182, float %1183, float %1184, i32 %1069, i32 %1070, i32 %1071, i32 %1072, i32 %1086, i32 %1087) #2, !dbg !46
  %1221 = extractvalue { float, float, float, float } %1220, 0, !dbg !46
  %1222 = extractvalue { float, float, float, float } %1220, 1, !dbg !46
  %1223 = extractvalue { float, float, float, float } %1220, 2, !dbg !46
  %1224 = extractvalue { float, float, float, float } %1220, 3, !dbg !46
  %1225 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1186, float %1187, float %1188, float %1189, i32 %1069, i32 %1070, i32 %1071, i32 %1072, i32 %1096, i32 %1097) #2, !dbg !46
  %1226 = extractvalue { float, float, float, float } %1225, 0, !dbg !46
  %1227 = extractvalue { float, float, float, float } %1225, 1, !dbg !46
  %1228 = extractvalue { float, float, float, float } %1225, 2, !dbg !46
  %1229 = extractvalue { float, float, float, float } %1225, 3, !dbg !46
  %1230 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1191, float %1192, float %1193, float %1194, i32 %1069, i32 %1070, i32 %1071, i32 %1072, i32 %1106, i32 %1107) #2, !dbg !46
  %1231 = extractvalue { float, float, float, float } %1230, 0, !dbg !46
  %1232 = extractvalue { float, float, float, float } %1230, 1, !dbg !46
  %1233 = extractvalue { float, float, float, float } %1230, 2, !dbg !46
  %1234 = extractvalue { float, float, float, float } %1230, 3, !dbg !46
  %1235 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1196, float %1197, float %1198, float %1199, i32 %1069, i32 %1070, i32 %1071, i32 %1072, i32 %1116, i32 %1117) #2, !dbg !46
  %1236 = extractvalue { float, float, float, float } %1235, 0, !dbg !46
  %1237 = extractvalue { float, float, float, float } %1235, 1, !dbg !46
  %1238 = extractvalue { float, float, float, float } %1235, 2, !dbg !46
  %1239 = extractvalue { float, float, float, float } %1235, 3, !dbg !46
  %1240 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1201, float %1202, float %1203, float %1204, i32 %1048, i32 %1049, i32 %1050, i32 %1051, i32 %1088, i32 %1089) #2, !dbg !46
  %1241 = extractvalue { float, float, float, float } %1240, 0, !dbg !46
  %1242 = extractvalue { float, float, float, float } %1240, 1, !dbg !46
  %1243 = extractvalue { float, float, float, float } %1240, 2, !dbg !46
  %1244 = extractvalue { float, float, float, float } %1240, 3, !dbg !46
  %1245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1206, float %1207, float %1208, float %1209, i32 %1048, i32 %1049, i32 %1050, i32 %1051, i32 %1098, i32 %1099) #2, !dbg !46
  %1246 = extractvalue { float, float, float, float } %1245, 0, !dbg !46
  %1247 = extractvalue { float, float, float, float } %1245, 1, !dbg !46
  %1248 = extractvalue { float, float, float, float } %1245, 2, !dbg !46
  %1249 = extractvalue { float, float, float, float } %1245, 3, !dbg !46
  %1250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1211, float %1212, float %1213, float %1214, i32 %1048, i32 %1049, i32 %1050, i32 %1051, i32 %1108, i32 %1109) #2, !dbg !46
  %1251 = extractvalue { float, float, float, float } %1250, 0, !dbg !46
  %1252 = extractvalue { float, float, float, float } %1250, 1, !dbg !46
  %1253 = extractvalue { float, float, float, float } %1250, 2, !dbg !46
  %1254 = extractvalue { float, float, float, float } %1250, 3, !dbg !46
  %1255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1216, float %1217, float %1218, float %1219, i32 %1048, i32 %1049, i32 %1050, i32 %1051, i32 %1118, i32 %1119) #2, !dbg !46
  %1256 = extractvalue { float, float, float, float } %1255, 0, !dbg !46
  %1257 = extractvalue { float, float, float, float } %1255, 1, !dbg !46
  %1258 = extractvalue { float, float, float, float } %1255, 2, !dbg !46
  %1259 = extractvalue { float, float, float, float } %1255, 3, !dbg !46
  %1260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1221, float %1222, float %1223, float %1224, i32 %1076, i32 %1077, i32 %1078, i32 %1079, i32 %1088, i32 %1089) #2, !dbg !46
  %1261 = extractvalue { float, float, float, float } %1260, 0, !dbg !46
  %1262 = extractvalue { float, float, float, float } %1260, 1, !dbg !46
  %1263 = extractvalue { float, float, float, float } %1260, 2, !dbg !46
  %1264 = extractvalue { float, float, float, float } %1260, 3, !dbg !46
  %1265 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1226, float %1227, float %1228, float %1229, i32 %1076, i32 %1077, i32 %1078, i32 %1079, i32 %1098, i32 %1099) #2, !dbg !46
  %1266 = extractvalue { float, float, float, float } %1265, 0, !dbg !46
  %1267 = extractvalue { float, float, float, float } %1265, 1, !dbg !46
  %1268 = extractvalue { float, float, float, float } %1265, 2, !dbg !46
  %1269 = extractvalue { float, float, float, float } %1265, 3, !dbg !46
  %1270 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1231, float %1232, float %1233, float %1234, i32 %1076, i32 %1077, i32 %1078, i32 %1079, i32 %1108, i32 %1109) #2, !dbg !46
  %1271 = extractvalue { float, float, float, float } %1270, 0, !dbg !46
  %1272 = extractvalue { float, float, float, float } %1270, 1, !dbg !46
  %1273 = extractvalue { float, float, float, float } %1270, 2, !dbg !46
  %1274 = extractvalue { float, float, float, float } %1270, 3, !dbg !46
  %1275 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1236, float %1237, float %1238, float %1239, i32 %1076, i32 %1077, i32 %1078, i32 %1079, i32 %1118, i32 %1119) #2, !dbg !46
  %1276 = extractvalue { float, float, float, float } %1275, 0, !dbg !46
  %1277 = extractvalue { float, float, float, float } %1275, 1, !dbg !46
  %1278 = extractvalue { float, float, float, float } %1275, 2, !dbg !46
  %1279 = extractvalue { float, float, float, float } %1275, 3, !dbg !46
  %1280 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %1022, !dbg !36
  %1281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %690, !dbg !36
  %1282 = ptrtoint ptr addrspace(3) %1281 to i32, !dbg !36
  %1283 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1282) #2, !dbg !36
  %1284 = extractvalue { i32, i32, i32, i32 } %1283, 0, !dbg !36
  %1285 = extractvalue { i32, i32, i32, i32 } %1283, 1, !dbg !36
  %1286 = extractvalue { i32, i32, i32, i32 } %1283, 2, !dbg !36
  %1287 = extractvalue { i32, i32, i32, i32 } %1283, 3, !dbg !36
  %1288 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %691, !dbg !36
  %1289 = ptrtoint ptr addrspace(3) %1288 to i32, !dbg !36
  %1290 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1289) #2, !dbg !36
  %1291 = extractvalue { i32, i32, i32, i32 } %1290, 0, !dbg !36
  %1292 = extractvalue { i32, i32, i32, i32 } %1290, 1, !dbg !36
  %1293 = extractvalue { i32, i32, i32, i32 } %1290, 2, !dbg !36
  %1294 = extractvalue { i32, i32, i32, i32 } %1290, 3, !dbg !36
  %1295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %692, !dbg !36
  %1296 = ptrtoint ptr addrspace(3) %1295 to i32, !dbg !36
  %1297 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1296) #2, !dbg !36
  %1298 = extractvalue { i32, i32, i32, i32 } %1297, 0, !dbg !36
  %1299 = extractvalue { i32, i32, i32, i32 } %1297, 1, !dbg !36
  %1300 = extractvalue { i32, i32, i32, i32 } %1297, 2, !dbg !36
  %1301 = extractvalue { i32, i32, i32, i32 } %1297, 3, !dbg !36
  %1302 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %693, !dbg !36
  %1303 = ptrtoint ptr addrspace(3) %1302 to i32, !dbg !36
  %1304 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1303) #2, !dbg !36
  %1305 = extractvalue { i32, i32, i32, i32 } %1304, 0, !dbg !36
  %1306 = extractvalue { i32, i32, i32, i32 } %1304, 1, !dbg !36
  %1307 = extractvalue { i32, i32, i32, i32 } %1304, 2, !dbg !36
  %1308 = extractvalue { i32, i32, i32, i32 } %1304, 3, !dbg !36
  %1309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %694, !dbg !36
  %1310 = ptrtoint ptr addrspace(3) %1309 to i32, !dbg !36
  %1311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1310) #2, !dbg !36
  %1312 = extractvalue { i32, i32, i32, i32 } %1311, 0, !dbg !36
  %1313 = extractvalue { i32, i32, i32, i32 } %1311, 1, !dbg !36
  %1314 = extractvalue { i32, i32, i32, i32 } %1311, 2, !dbg !36
  %1315 = extractvalue { i32, i32, i32, i32 } %1311, 3, !dbg !36
  %1316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %695, !dbg !36
  %1317 = ptrtoint ptr addrspace(3) %1316 to i32, !dbg !36
  %1318 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1317) #2, !dbg !36
  %1319 = extractvalue { i32, i32, i32, i32 } %1318, 0, !dbg !36
  %1320 = extractvalue { i32, i32, i32, i32 } %1318, 1, !dbg !36
  %1321 = extractvalue { i32, i32, i32, i32 } %1318, 2, !dbg !36
  %1322 = extractvalue { i32, i32, i32, i32 } %1318, 3, !dbg !36
  %1323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %696, !dbg !36
  %1324 = ptrtoint ptr addrspace(3) %1323 to i32, !dbg !36
  %1325 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1324) #2, !dbg !36
  %1326 = extractvalue { i32, i32, i32, i32 } %1325, 0, !dbg !36
  %1327 = extractvalue { i32, i32, i32, i32 } %1325, 1, !dbg !36
  %1328 = extractvalue { i32, i32, i32, i32 } %1325, 2, !dbg !36
  %1329 = extractvalue { i32, i32, i32, i32 } %1325, 3, !dbg !36
  %1330 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1280, i32 %697, !dbg !36
  %1331 = ptrtoint ptr addrspace(3) %1330 to i32, !dbg !36
  %1332 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1331) #2, !dbg !36
  %1333 = extractvalue { i32, i32, i32, i32 } %1332, 0, !dbg !36
  %1334 = extractvalue { i32, i32, i32, i32 } %1332, 1, !dbg !36
  %1335 = extractvalue { i32, i32, i32, i32 } %1332, 2, !dbg !36
  %1336 = extractvalue { i32, i32, i32, i32 } %1332, 3, !dbg !36
  %1337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %724) #2, !dbg !45
  %1338 = extractvalue { i32, i32, i32, i32 } %1337, 0, !dbg !45
  %1339 = extractvalue { i32, i32, i32, i32 } %1337, 1, !dbg !45
  %1340 = extractvalue { i32, i32, i32, i32 } %1337, 2, !dbg !45
  %1341 = extractvalue { i32, i32, i32, i32 } %1337, 3, !dbg !45
  %1342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %726) #2, !dbg !45
  %1343 = extractvalue { i32, i32, i32, i32 } %1342, 0, !dbg !45
  %1344 = extractvalue { i32, i32, i32, i32 } %1342, 1, !dbg !45
  %1345 = extractvalue { i32, i32, i32, i32 } %1342, 2, !dbg !45
  %1346 = extractvalue { i32, i32, i32, i32 } %1342, 3, !dbg !45
  %1347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %728) #2, !dbg !45
  %1348 = extractvalue { i32, i32, i32, i32 } %1347, 0, !dbg !45
  %1349 = extractvalue { i32, i32, i32, i32 } %1347, 1, !dbg !45
  %1350 = extractvalue { i32, i32, i32, i32 } %1347, 2, !dbg !45
  %1351 = extractvalue { i32, i32, i32, i32 } %1347, 3, !dbg !45
  %1352 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %730) #2, !dbg !45
  %1353 = extractvalue { i32, i32, i32, i32 } %1352, 0, !dbg !45
  %1354 = extractvalue { i32, i32, i32, i32 } %1352, 1, !dbg !45
  %1355 = extractvalue { i32, i32, i32, i32 } %1352, 2, !dbg !45
  %1356 = extractvalue { i32, i32, i32, i32 } %1352, 3, !dbg !45
  %1357 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %732) #2, !dbg !45
  %1358 = extractvalue { i32, i32, i32, i32 } %1357, 0, !dbg !45
  %1359 = extractvalue { i32, i32, i32, i32 } %1357, 1, !dbg !45
  %1360 = extractvalue { i32, i32, i32, i32 } %1357, 2, !dbg !45
  %1361 = extractvalue { i32, i32, i32, i32 } %1357, 3, !dbg !45
  %1362 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %734) #2, !dbg !45
  %1363 = extractvalue { i32, i32, i32, i32 } %1362, 0, !dbg !45
  %1364 = extractvalue { i32, i32, i32, i32 } %1362, 1, !dbg !45
  %1365 = extractvalue { i32, i32, i32, i32 } %1362, 2, !dbg !45
  %1366 = extractvalue { i32, i32, i32, i32 } %1362, 3, !dbg !45
  %1367 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %736) #2, !dbg !45
  %1368 = extractvalue { i32, i32, i32, i32 } %1367, 0, !dbg !45
  %1369 = extractvalue { i32, i32, i32, i32 } %1367, 1, !dbg !45
  %1370 = extractvalue { i32, i32, i32, i32 } %1367, 2, !dbg !45
  %1371 = extractvalue { i32, i32, i32, i32 } %1367, 3, !dbg !45
  %1372 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %738) #2, !dbg !45
  %1373 = extractvalue { i32, i32, i32, i32 } %1372, 0, !dbg !45
  %1374 = extractvalue { i32, i32, i32, i32 } %1372, 1, !dbg !45
  %1375 = extractvalue { i32, i32, i32, i32 } %1372, 2, !dbg !45
  %1376 = extractvalue { i32, i32, i32, i32 } %1372, 3, !dbg !45
  %1377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1241, float %1242, float %1243, float %1244, i32 %1284, i32 %1285, i32 %1286, i32 %1287, i32 %1338, i32 %1339) #2, !dbg !47
  %1378 = extractvalue { float, float, float, float } %1377, 0, !dbg !47
  %1379 = extractvalue { float, float, float, float } %1377, 1, !dbg !47
  %1380 = extractvalue { float, float, float, float } %1377, 2, !dbg !47
  %1381 = extractvalue { float, float, float, float } %1377, 3, !dbg !47
  %1382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1246, float %1247, float %1248, float %1249, i32 %1284, i32 %1285, i32 %1286, i32 %1287, i32 %1348, i32 %1349) #2, !dbg !47
  %1383 = extractvalue { float, float, float, float } %1382, 0, !dbg !47
  %1384 = extractvalue { float, float, float, float } %1382, 1, !dbg !47
  %1385 = extractvalue { float, float, float, float } %1382, 2, !dbg !47
  %1386 = extractvalue { float, float, float, float } %1382, 3, !dbg !47
  %1387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1251, float %1252, float %1253, float %1254, i32 %1284, i32 %1285, i32 %1286, i32 %1287, i32 %1358, i32 %1359) #2, !dbg !47
  %1388 = extractvalue { float, float, float, float } %1387, 0, !dbg !47
  %1389 = extractvalue { float, float, float, float } %1387, 1, !dbg !47
  %1390 = extractvalue { float, float, float, float } %1387, 2, !dbg !47
  %1391 = extractvalue { float, float, float, float } %1387, 3, !dbg !47
  %1392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1256, float %1257, float %1258, float %1259, i32 %1284, i32 %1285, i32 %1286, i32 %1287, i32 %1368, i32 %1369) #2, !dbg !47
  %1393 = extractvalue { float, float, float, float } %1392, 0, !dbg !47
  %1394 = extractvalue { float, float, float, float } %1392, 1, !dbg !47
  %1395 = extractvalue { float, float, float, float } %1392, 2, !dbg !47
  %1396 = extractvalue { float, float, float, float } %1392, 3, !dbg !47
  %1397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1261, float %1262, float %1263, float %1264, i32 %1312, i32 %1313, i32 %1314, i32 %1315, i32 %1338, i32 %1339) #2, !dbg !47
  %1398 = extractvalue { float, float, float, float } %1397, 0, !dbg !47
  %1399 = extractvalue { float, float, float, float } %1397, 1, !dbg !47
  %1400 = extractvalue { float, float, float, float } %1397, 2, !dbg !47
  %1401 = extractvalue { float, float, float, float } %1397, 3, !dbg !47
  %1402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1266, float %1267, float %1268, float %1269, i32 %1312, i32 %1313, i32 %1314, i32 %1315, i32 %1348, i32 %1349) #2, !dbg !47
  %1403 = extractvalue { float, float, float, float } %1402, 0, !dbg !47
  %1404 = extractvalue { float, float, float, float } %1402, 1, !dbg !47
  %1405 = extractvalue { float, float, float, float } %1402, 2, !dbg !47
  %1406 = extractvalue { float, float, float, float } %1402, 3, !dbg !47
  %1407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1271, float %1272, float %1273, float %1274, i32 %1312, i32 %1313, i32 %1314, i32 %1315, i32 %1358, i32 %1359) #2, !dbg !47
  %1408 = extractvalue { float, float, float, float } %1407, 0, !dbg !47
  %1409 = extractvalue { float, float, float, float } %1407, 1, !dbg !47
  %1410 = extractvalue { float, float, float, float } %1407, 2, !dbg !47
  %1411 = extractvalue { float, float, float, float } %1407, 3, !dbg !47
  %1412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1276, float %1277, float %1278, float %1279, i32 %1312, i32 %1313, i32 %1314, i32 %1315, i32 %1368, i32 %1369) #2, !dbg !47
  %1413 = extractvalue { float, float, float, float } %1412, 0, !dbg !47
  %1414 = extractvalue { float, float, float, float } %1412, 1, !dbg !47
  %1415 = extractvalue { float, float, float, float } %1412, 2, !dbg !47
  %1416 = extractvalue { float, float, float, float } %1412, 3, !dbg !47
  %1417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1378, float %1379, float %1380, float %1381, i32 %1291, i32 %1292, i32 %1293, i32 %1294, i32 %1340, i32 %1341) #2, !dbg !47
  %1418 = extractvalue { float, float, float, float } %1417, 0, !dbg !47
  %1419 = extractvalue { float, float, float, float } %1417, 1, !dbg !47
  %1420 = extractvalue { float, float, float, float } %1417, 2, !dbg !47
  %1421 = extractvalue { float, float, float, float } %1417, 3, !dbg !47
  %1422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1383, float %1384, float %1385, float %1386, i32 %1291, i32 %1292, i32 %1293, i32 %1294, i32 %1350, i32 %1351) #2, !dbg !47
  %1423 = extractvalue { float, float, float, float } %1422, 0, !dbg !47
  %1424 = extractvalue { float, float, float, float } %1422, 1, !dbg !47
  %1425 = extractvalue { float, float, float, float } %1422, 2, !dbg !47
  %1426 = extractvalue { float, float, float, float } %1422, 3, !dbg !47
  %1427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1388, float %1389, float %1390, float %1391, i32 %1291, i32 %1292, i32 %1293, i32 %1294, i32 %1360, i32 %1361) #2, !dbg !47
  %1428 = extractvalue { float, float, float, float } %1427, 0, !dbg !47
  %1429 = extractvalue { float, float, float, float } %1427, 1, !dbg !47
  %1430 = extractvalue { float, float, float, float } %1427, 2, !dbg !47
  %1431 = extractvalue { float, float, float, float } %1427, 3, !dbg !47
  %1432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1393, float %1394, float %1395, float %1396, i32 %1291, i32 %1292, i32 %1293, i32 %1294, i32 %1370, i32 %1371) #2, !dbg !47
  %1433 = extractvalue { float, float, float, float } %1432, 0, !dbg !47
  %1434 = extractvalue { float, float, float, float } %1432, 1, !dbg !47
  %1435 = extractvalue { float, float, float, float } %1432, 2, !dbg !47
  %1436 = extractvalue { float, float, float, float } %1432, 3, !dbg !47
  %1437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1398, float %1399, float %1400, float %1401, i32 %1319, i32 %1320, i32 %1321, i32 %1322, i32 %1340, i32 %1341) #2, !dbg !47
  %1438 = extractvalue { float, float, float, float } %1437, 0, !dbg !47
  %1439 = extractvalue { float, float, float, float } %1437, 1, !dbg !47
  %1440 = extractvalue { float, float, float, float } %1437, 2, !dbg !47
  %1441 = extractvalue { float, float, float, float } %1437, 3, !dbg !47
  %1442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1403, float %1404, float %1405, float %1406, i32 %1319, i32 %1320, i32 %1321, i32 %1322, i32 %1350, i32 %1351) #2, !dbg !47
  %1443 = extractvalue { float, float, float, float } %1442, 0, !dbg !47
  %1444 = extractvalue { float, float, float, float } %1442, 1, !dbg !47
  %1445 = extractvalue { float, float, float, float } %1442, 2, !dbg !47
  %1446 = extractvalue { float, float, float, float } %1442, 3, !dbg !47
  %1447 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1408, float %1409, float %1410, float %1411, i32 %1319, i32 %1320, i32 %1321, i32 %1322, i32 %1360, i32 %1361) #2, !dbg !47
  %1448 = extractvalue { float, float, float, float } %1447, 0, !dbg !47
  %1449 = extractvalue { float, float, float, float } %1447, 1, !dbg !47
  %1450 = extractvalue { float, float, float, float } %1447, 2, !dbg !47
  %1451 = extractvalue { float, float, float, float } %1447, 3, !dbg !47
  %1452 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1413, float %1414, float %1415, float %1416, i32 %1319, i32 %1320, i32 %1321, i32 %1322, i32 %1370, i32 %1371) #2, !dbg !47
  %1453 = extractvalue { float, float, float, float } %1452, 0, !dbg !47
  %1454 = extractvalue { float, float, float, float } %1452, 1, !dbg !47
  %1455 = extractvalue { float, float, float, float } %1452, 2, !dbg !47
  %1456 = extractvalue { float, float, float, float } %1452, 3, !dbg !47
  %1457 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1418, float %1419, float %1420, float %1421, i32 %1298, i32 %1299, i32 %1300, i32 %1301, i32 %1343, i32 %1344) #2, !dbg !47
  %1458 = extractvalue { float, float, float, float } %1457, 0, !dbg !47
  %1459 = extractvalue { float, float, float, float } %1457, 1, !dbg !47
  %1460 = extractvalue { float, float, float, float } %1457, 2, !dbg !47
  %1461 = extractvalue { float, float, float, float } %1457, 3, !dbg !47
  %1462 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1423, float %1424, float %1425, float %1426, i32 %1298, i32 %1299, i32 %1300, i32 %1301, i32 %1353, i32 %1354) #2, !dbg !47
  %1463 = extractvalue { float, float, float, float } %1462, 0, !dbg !47
  %1464 = extractvalue { float, float, float, float } %1462, 1, !dbg !47
  %1465 = extractvalue { float, float, float, float } %1462, 2, !dbg !47
  %1466 = extractvalue { float, float, float, float } %1462, 3, !dbg !47
  %1467 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1428, float %1429, float %1430, float %1431, i32 %1298, i32 %1299, i32 %1300, i32 %1301, i32 %1363, i32 %1364) #2, !dbg !47
  %1468 = extractvalue { float, float, float, float } %1467, 0, !dbg !47
  %1469 = extractvalue { float, float, float, float } %1467, 1, !dbg !47
  %1470 = extractvalue { float, float, float, float } %1467, 2, !dbg !47
  %1471 = extractvalue { float, float, float, float } %1467, 3, !dbg !47
  %1472 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1433, float %1434, float %1435, float %1436, i32 %1298, i32 %1299, i32 %1300, i32 %1301, i32 %1373, i32 %1374) #2, !dbg !47
  %1473 = extractvalue { float, float, float, float } %1472, 0, !dbg !47
  %1474 = extractvalue { float, float, float, float } %1472, 1, !dbg !47
  %1475 = extractvalue { float, float, float, float } %1472, 2, !dbg !47
  %1476 = extractvalue { float, float, float, float } %1472, 3, !dbg !47
  %1477 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1438, float %1439, float %1440, float %1441, i32 %1326, i32 %1327, i32 %1328, i32 %1329, i32 %1343, i32 %1344) #2, !dbg !47
  %1478 = extractvalue { float, float, float, float } %1477, 0, !dbg !47
  %1479 = extractvalue { float, float, float, float } %1477, 1, !dbg !47
  %1480 = extractvalue { float, float, float, float } %1477, 2, !dbg !47
  %1481 = extractvalue { float, float, float, float } %1477, 3, !dbg !47
  %1482 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1443, float %1444, float %1445, float %1446, i32 %1326, i32 %1327, i32 %1328, i32 %1329, i32 %1353, i32 %1354) #2, !dbg !47
  %1483 = extractvalue { float, float, float, float } %1482, 0, !dbg !47
  %1484 = extractvalue { float, float, float, float } %1482, 1, !dbg !47
  %1485 = extractvalue { float, float, float, float } %1482, 2, !dbg !47
  %1486 = extractvalue { float, float, float, float } %1482, 3, !dbg !47
  %1487 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1448, float %1449, float %1450, float %1451, i32 %1326, i32 %1327, i32 %1328, i32 %1329, i32 %1363, i32 %1364) #2, !dbg !47
  %1488 = extractvalue { float, float, float, float } %1487, 0, !dbg !47
  %1489 = extractvalue { float, float, float, float } %1487, 1, !dbg !47
  %1490 = extractvalue { float, float, float, float } %1487, 2, !dbg !47
  %1491 = extractvalue { float, float, float, float } %1487, 3, !dbg !47
  %1492 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1453, float %1454, float %1455, float %1456, i32 %1326, i32 %1327, i32 %1328, i32 %1329, i32 %1373, i32 %1374) #2, !dbg !47
  %1493 = extractvalue { float, float, float, float } %1492, 0, !dbg !47
  %1494 = extractvalue { float, float, float, float } %1492, 1, !dbg !47
  %1495 = extractvalue { float, float, float, float } %1492, 2, !dbg !47
  %1496 = extractvalue { float, float, float, float } %1492, 3, !dbg !47
  %1497 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1458, float %1459, float %1460, float %1461, i32 %1305, i32 %1306, i32 %1307, i32 %1308, i32 %1345, i32 %1346) #2, !dbg !47
  %1498 = extractvalue { float, float, float, float } %1497, 0, !dbg !47
  %1499 = extractvalue { float, float, float, float } %1497, 1, !dbg !47
  %1500 = extractvalue { float, float, float, float } %1497, 2, !dbg !47
  %1501 = extractvalue { float, float, float, float } %1497, 3, !dbg !47
  %1502 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1463, float %1464, float %1465, float %1466, i32 %1305, i32 %1306, i32 %1307, i32 %1308, i32 %1355, i32 %1356) #2, !dbg !47
  %1503 = extractvalue { float, float, float, float } %1502, 0, !dbg !47
  %1504 = extractvalue { float, float, float, float } %1502, 1, !dbg !47
  %1505 = extractvalue { float, float, float, float } %1502, 2, !dbg !47
  %1506 = extractvalue { float, float, float, float } %1502, 3, !dbg !47
  %1507 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1468, float %1469, float %1470, float %1471, i32 %1305, i32 %1306, i32 %1307, i32 %1308, i32 %1365, i32 %1366) #2, !dbg !47
  %1508 = extractvalue { float, float, float, float } %1507, 0, !dbg !47
  %1509 = extractvalue { float, float, float, float } %1507, 1, !dbg !47
  %1510 = extractvalue { float, float, float, float } %1507, 2, !dbg !47
  %1511 = extractvalue { float, float, float, float } %1507, 3, !dbg !47
  %1512 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1473, float %1474, float %1475, float %1476, i32 %1305, i32 %1306, i32 %1307, i32 %1308, i32 %1375, i32 %1376) #2, !dbg !47
  %1513 = extractvalue { float, float, float, float } %1512, 0, !dbg !47
  %1514 = extractvalue { float, float, float, float } %1512, 1, !dbg !47
  %1515 = extractvalue { float, float, float, float } %1512, 2, !dbg !47
  %1516 = extractvalue { float, float, float, float } %1512, 3, !dbg !47
  %1517 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1478, float %1479, float %1480, float %1481, i32 %1333, i32 %1334, i32 %1335, i32 %1336, i32 %1345, i32 %1346) #2, !dbg !47
  %1518 = extractvalue { float, float, float, float } %1517, 0, !dbg !47
  %1519 = extractvalue { float, float, float, float } %1517, 1, !dbg !47
  %1520 = extractvalue { float, float, float, float } %1517, 2, !dbg !47
  %1521 = extractvalue { float, float, float, float } %1517, 3, !dbg !47
  %1522 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1483, float %1484, float %1485, float %1486, i32 %1333, i32 %1334, i32 %1335, i32 %1336, i32 %1355, i32 %1356) #2, !dbg !47
  %1523 = extractvalue { float, float, float, float } %1522, 0, !dbg !47
  %1524 = extractvalue { float, float, float, float } %1522, 1, !dbg !47
  %1525 = extractvalue { float, float, float, float } %1522, 2, !dbg !47
  %1526 = extractvalue { float, float, float, float } %1522, 3, !dbg !47
  %1527 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1488, float %1489, float %1490, float %1491, i32 %1333, i32 %1334, i32 %1335, i32 %1336, i32 %1365, i32 %1366) #2, !dbg !47
  %1528 = extractvalue { float, float, float, float } %1527, 0, !dbg !47
  %1529 = extractvalue { float, float, float, float } %1527, 1, !dbg !47
  %1530 = extractvalue { float, float, float, float } %1527, 2, !dbg !47
  %1531 = extractvalue { float, float, float, float } %1527, 3, !dbg !47
  %1532 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1493, float %1494, float %1495, float %1496, i32 %1333, i32 %1334, i32 %1335, i32 %1336, i32 %1375, i32 %1376) #2, !dbg !47
  %1533 = extractvalue { float, float, float, float } %1532, 0, !dbg !47
  %1534 = extractvalue { float, float, float, float } %1532, 1, !dbg !47
  %1535 = extractvalue { float, float, float, float } %1532, 2, !dbg !47
  %1536 = extractvalue { float, float, float, float } %1532, 3, !dbg !47
  %1537 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %1022, !dbg !37
  %1538 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1537, i32 %599, !dbg !48
  %1539 = ptrtoint ptr addrspace(3) %1538 to i32, !dbg !48
  %1540 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1539) #2, !dbg !48
  %1541 = extractvalue { i32, i32, i32, i32 } %1540, 0, !dbg !48
  %1542 = bitcast i32 %1541 to <2 x bfloat>, !dbg !48
  %1543 = extractvalue { i32, i32, i32, i32 } %1540, 1, !dbg !48
  %1544 = bitcast i32 %1543 to <2 x bfloat>, !dbg !48
  %1545 = extractvalue { i32, i32, i32, i32 } %1540, 2, !dbg !48
  %1546 = bitcast i32 %1545 to <2 x bfloat>, !dbg !48
  %1547 = extractvalue { i32, i32, i32, i32 } %1540, 3, !dbg !48
  %1548 = bitcast i32 %1547 to <2 x bfloat>, !dbg !48
  %1549 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1537, i32 %602, !dbg !48
  %1550 = ptrtoint ptr addrspace(3) %1549 to i32, !dbg !48
  %1551 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1550) #2, !dbg !48
  %1552 = extractvalue { i32, i32, i32, i32 } %1551, 0, !dbg !48
  %1553 = bitcast i32 %1552 to <2 x bfloat>, !dbg !48
  %1554 = extractvalue { i32, i32, i32, i32 } %1551, 1, !dbg !48
  %1555 = bitcast i32 %1554 to <2 x bfloat>, !dbg !48
  %1556 = extractvalue { i32, i32, i32, i32 } %1551, 2, !dbg !48
  %1557 = bitcast i32 %1556 to <2 x bfloat>, !dbg !48
  %1558 = extractvalue { i32, i32, i32, i32 } %1551, 3, !dbg !48
  %1559 = bitcast i32 %1558 to <2 x bfloat>, !dbg !48
  %1560 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1537, i32 %605, !dbg !48
  %1561 = ptrtoint ptr addrspace(3) %1560 to i32, !dbg !48
  %1562 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1561) #2, !dbg !48
  %1563 = extractvalue { i32, i32, i32, i32 } %1562, 0, !dbg !48
  %1564 = bitcast i32 %1563 to <2 x bfloat>, !dbg !48
  %1565 = extractvalue { i32, i32, i32, i32 } %1562, 1, !dbg !48
  %1566 = bitcast i32 %1565 to <2 x bfloat>, !dbg !48
  %1567 = extractvalue { i32, i32, i32, i32 } %1562, 2, !dbg !48
  %1568 = bitcast i32 %1567 to <2 x bfloat>, !dbg !48
  %1569 = extractvalue { i32, i32, i32, i32 } %1562, 3, !dbg !48
  %1570 = bitcast i32 %1569 to <2 x bfloat>, !dbg !48
  %1571 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1537, i32 %608, !dbg !48
  %1572 = ptrtoint ptr addrspace(3) %1571 to i32, !dbg !48
  %1573 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1572) #2, !dbg !48
  %1574 = extractvalue { i32, i32, i32, i32 } %1573, 0, !dbg !48
  %1575 = bitcast i32 %1574 to <2 x bfloat>, !dbg !48
  %1576 = extractvalue { i32, i32, i32, i32 } %1573, 1, !dbg !48
  %1577 = bitcast i32 %1576 to <2 x bfloat>, !dbg !48
  %1578 = extractvalue { i32, i32, i32, i32 } %1573, 2, !dbg !48
  %1579 = bitcast i32 %1578 to <2 x bfloat>, !dbg !48
  %1580 = extractvalue { i32, i32, i32, i32 } %1573, 3, !dbg !48
  %1581 = bitcast i32 %1580 to <2 x bfloat>, !dbg !48
  %1582 = fpext <2 x bfloat> %1542 to <2 x float>, !dbg !48
  %1583 = insertelement <2 x float> poison, float %1498, i64 0, !dbg !48
  %1584 = insertelement <2 x float> %1583, float %1499, i64 1, !dbg !48
  %1585 = fsub <2 x float> %1582, %1584, !dbg !48
  %1586 = fptrunc <2 x float> %1585 to <2 x bfloat>, !dbg !49
  %1587 = fpext <2 x bfloat> %1544 to <2 x float>, !dbg !48
  %1588 = insertelement <2 x float> poison, float %1500, i64 0, !dbg !48
  %1589 = insertelement <2 x float> %1588, float %1501, i64 1, !dbg !48
  %1590 = fsub <2 x float> %1587, %1589, !dbg !48
  %1591 = fptrunc <2 x float> %1590 to <2 x bfloat>, !dbg !49
  %1592 = fpext <2 x bfloat> %1546 to <2 x float>, !dbg !48
  %1593 = insertelement <2 x float> poison, float %1503, i64 0, !dbg !48
  %1594 = insertelement <2 x float> %1593, float %1504, i64 1, !dbg !48
  %1595 = fsub <2 x float> %1592, %1594, !dbg !48
  %1596 = fptrunc <2 x float> %1595 to <2 x bfloat>, !dbg !49
  %1597 = fpext <2 x bfloat> %1548 to <2 x float>, !dbg !48
  %1598 = insertelement <2 x float> poison, float %1505, i64 0, !dbg !48
  %1599 = insertelement <2 x float> %1598, float %1506, i64 1, !dbg !48
  %1600 = fsub <2 x float> %1597, %1599, !dbg !48
  %1601 = fptrunc <2 x float> %1600 to <2 x bfloat>, !dbg !49
  %1602 = fpext <2 x bfloat> %1553 to <2 x float>, !dbg !48
  %1603 = insertelement <2 x float> poison, float %1508, i64 0, !dbg !48
  %1604 = insertelement <2 x float> %1603, float %1509, i64 1, !dbg !48
  %1605 = fsub <2 x float> %1602, %1604, !dbg !48
  %1606 = fptrunc <2 x float> %1605 to <2 x bfloat>, !dbg !49
  %1607 = fpext <2 x bfloat> %1555 to <2 x float>, !dbg !48
  %1608 = insertelement <2 x float> poison, float %1510, i64 0, !dbg !48
  %1609 = insertelement <2 x float> %1608, float %1511, i64 1, !dbg !48
  %1610 = fsub <2 x float> %1607, %1609, !dbg !48
  %1611 = fptrunc <2 x float> %1610 to <2 x bfloat>, !dbg !49
  %1612 = fpext <2 x bfloat> %1557 to <2 x float>, !dbg !48
  %1613 = insertelement <2 x float> poison, float %1513, i64 0, !dbg !48
  %1614 = insertelement <2 x float> %1613, float %1514, i64 1, !dbg !48
  %1615 = fsub <2 x float> %1612, %1614, !dbg !48
  %1616 = fptrunc <2 x float> %1615 to <2 x bfloat>, !dbg !49
  %1617 = fpext <2 x bfloat> %1559 to <2 x float>, !dbg !48
  %1618 = insertelement <2 x float> poison, float %1515, i64 0, !dbg !48
  %1619 = insertelement <2 x float> %1618, float %1516, i64 1, !dbg !48
  %1620 = fsub <2 x float> %1617, %1619, !dbg !48
  %1621 = fptrunc <2 x float> %1620 to <2 x bfloat>, !dbg !49
  %1622 = fpext <2 x bfloat> %1564 to <2 x float>, !dbg !48
  %1623 = insertelement <2 x float> poison, float %1518, i64 0, !dbg !48
  %1624 = insertelement <2 x float> %1623, float %1519, i64 1, !dbg !48
  %1625 = fsub <2 x float> %1622, %1624, !dbg !48
  %1626 = fptrunc <2 x float> %1625 to <2 x bfloat>, !dbg !49
  %1627 = fpext <2 x bfloat> %1566 to <2 x float>, !dbg !48
  %1628 = insertelement <2 x float> poison, float %1520, i64 0, !dbg !48
  %1629 = insertelement <2 x float> %1628, float %1521, i64 1, !dbg !48
  %1630 = fsub <2 x float> %1627, %1629, !dbg !48
  %1631 = fptrunc <2 x float> %1630 to <2 x bfloat>, !dbg !49
  %1632 = fpext <2 x bfloat> %1568 to <2 x float>, !dbg !48
  %1633 = insertelement <2 x float> poison, float %1523, i64 0, !dbg !48
  %1634 = insertelement <2 x float> %1633, float %1524, i64 1, !dbg !48
  %1635 = fsub <2 x float> %1632, %1634, !dbg !48
  %1636 = fptrunc <2 x float> %1635 to <2 x bfloat>, !dbg !49
  %1637 = fpext <2 x bfloat> %1570 to <2 x float>, !dbg !48
  %1638 = insertelement <2 x float> poison, float %1525, i64 0, !dbg !48
  %1639 = insertelement <2 x float> %1638, float %1526, i64 1, !dbg !48
  %1640 = fsub <2 x float> %1637, %1639, !dbg !48
  %1641 = fptrunc <2 x float> %1640 to <2 x bfloat>, !dbg !49
  %1642 = fpext <2 x bfloat> %1575 to <2 x float>, !dbg !48
  %1643 = insertelement <2 x float> poison, float %1528, i64 0, !dbg !48
  %1644 = insertelement <2 x float> %1643, float %1529, i64 1, !dbg !48
  %1645 = fsub <2 x float> %1642, %1644, !dbg !48
  %1646 = fptrunc <2 x float> %1645 to <2 x bfloat>, !dbg !49
  %1647 = fpext <2 x bfloat> %1577 to <2 x float>, !dbg !48
  %1648 = insertelement <2 x float> poison, float %1530, i64 0, !dbg !48
  %1649 = insertelement <2 x float> %1648, float %1531, i64 1, !dbg !48
  %1650 = fsub <2 x float> %1647, %1649, !dbg !48
  %1651 = fptrunc <2 x float> %1650 to <2 x bfloat>, !dbg !49
  %1652 = fpext <2 x bfloat> %1579 to <2 x float>, !dbg !48
  %1653 = insertelement <2 x float> poison, float %1533, i64 0, !dbg !48
  %1654 = insertelement <2 x float> %1653, float %1534, i64 1, !dbg !48
  %1655 = fsub <2 x float> %1652, %1654, !dbg !48
  %1656 = fptrunc <2 x float> %1655 to <2 x bfloat>, !dbg !49
  %1657 = fpext <2 x bfloat> %1581 to <2 x float>, !dbg !48
  %1658 = insertelement <2 x float> poison, float %1535, i64 0, !dbg !48
  %1659 = insertelement <2 x float> %1658, float %1536, i64 1, !dbg !48
  %1660 = fsub <2 x float> %1657, %1659, !dbg !48
  %1661 = fptrunc <2 x float> %1660 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1586, ptr addrspace(3) %739, align 4, !dbg !49
  store <2 x bfloat> %1591, ptr addrspace(3) %740, align 4, !dbg !49
  store <2 x bfloat> %1596, ptr addrspace(3) %741, align 4, !dbg !49
  store <2 x bfloat> %1601, ptr addrspace(3) %742, align 4, !dbg !49
  store <2 x bfloat> %1606, ptr addrspace(3) %743, align 4, !dbg !49
  store <2 x bfloat> %1611, ptr addrspace(3) %744, align 4, !dbg !49
  store <2 x bfloat> %1616, ptr addrspace(3) %745, align 4, !dbg !49
  store <2 x bfloat> %1621, ptr addrspace(3) %746, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1662 = load <4 x i32>, ptr addrspace(3) %747, align 16, !dbg !49
  %1663 = load <4 x i32>, ptr addrspace(3) %748, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1626, ptr addrspace(3) %739, align 4, !dbg !49
  store <2 x bfloat> %1631, ptr addrspace(3) %740, align 4, !dbg !49
  store <2 x bfloat> %1636, ptr addrspace(3) %741, align 4, !dbg !49
  store <2 x bfloat> %1641, ptr addrspace(3) %742, align 4, !dbg !49
  store <2 x bfloat> %1646, ptr addrspace(3) %743, align 4, !dbg !49
  store <2 x bfloat> %1651, ptr addrspace(3) %744, align 4, !dbg !49
  store <2 x bfloat> %1656, ptr addrspace(3) %745, align 4, !dbg !49
  store <2 x bfloat> %1661, ptr addrspace(3) %746, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1664 = load <4 x i32>, ptr addrspace(3) %747, align 16, !dbg !49
  %1665 = load <4 x i32>, ptr addrspace(3) %748, align 16, !dbg !49
  %1666 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn69.pn.pn664, !dbg !50
  %1667 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn53.pn.pn665, !dbg !50
  %1668 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn37.pn.pn666, !dbg !50
  %1669 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn21.pn.pn667, !dbg !50
  %.extract628 = extractelement <4 x i32> %1662, i64 0, !dbg !50
  %.extract630 = extractelement <4 x i32> %1662, i64 1, !dbg !50
  %.extract632 = extractelement <4 x i32> %1662, i64 2, !dbg !50
  %.extract634 = extractelement <4 x i32> %1662, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract628, i32 %.extract630, i32 %.extract632, i32 %.extract634, ptr addrspace(1) %1666, i1 %.pn194.pn.pn676) #2, !dbg !50
  %.extract636 = extractelement <4 x i32> %1663, i64 0, !dbg !50
  %.extract638 = extractelement <4 x i32> %1663, i64 1, !dbg !50
  %.extract640 = extractelement <4 x i32> %1663, i64 2, !dbg !50
  %.extract642 = extractelement <4 x i32> %1663, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract636, i32 %.extract638, i32 %.extract640, i32 %.extract642, ptr addrspace(1) %1667, i1 %.pn178.pn.pn677) #2, !dbg !50
  %.extract644 = extractelement <4 x i32> %1664, i64 0, !dbg !50
  %.extract646 = extractelement <4 x i32> %1664, i64 1, !dbg !50
  %.extract648 = extractelement <4 x i32> %1664, i64 2, !dbg !50
  %.extract650 = extractelement <4 x i32> %1664, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract644, i32 %.extract646, i32 %.extract648, i32 %.extract650, ptr addrspace(1) %1668, i1 %.pn162.pn.pn678) #2, !dbg !50
  %.extract652 = extractelement <4 x i32> %1665, i64 0, !dbg !50
  %.extract654 = extractelement <4 x i32> %1665, i64 1, !dbg !50
  %.extract656 = extractelement <4 x i32> %1665, i64 2, !dbg !50
  %.extract658 = extractelement <4 x i32> %1665, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract652, i32 %.extract654, i32 %.extract656, i32 %.extract658, ptr addrspace(1) %1669, i1 %.pn146.pn.pn679) #2, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !51
  %indvars.iv.next.tr = trunc i64 %indvars.iv.next to i32, !dbg !52
  %1670 = shl i32 %indvars.iv.next.tr, 6, !dbg !52
  %1671 = tail call i32 @llvm.smin.i32(i32 %1670, i32 %7), !dbg !52
  %1672 = add nuw nsw i32 %763, %59, !dbg !53
  %1673 = add nuw nsw i32 %60, %763, !dbg !53
  %1674 = add nuw nsw i32 %61, %763, !dbg !53
  %1675 = add nuw nsw i32 %62, %763, !dbg !53
  %1676 = icmp slt i32 %1672, %7, !dbg !54
  %1677 = icmp slt i32 %1673, %7, !dbg !54
  %1678 = icmp slt i32 %1674, %7, !dbg !54
  %1679 = icmp slt i32 %1675, %7, !dbg !54
  %1680 = shl i32 %1671, 5, !dbg !55
  %1681 = add i32 %1680, -32, !dbg !55
  %1682 = sext i32 %1681 to i64, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %92, i64 %1682, !dbg !57
  %1683 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !58
  %1684 = bitcast i32 %1683 to float, !dbg !58
  %.idx558 = shl i32 %833, 8, !dbg !38
  %1685 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 121344), i32 %.idx558, !dbg !38
  %1686 = getelementptr inbounds nuw float, ptr addrspace(3) %1685, i32 %59, !dbg !38
  %1687 = load float, ptr addrspace(3) %1686, align 4, !dbg !38
  %1688 = getelementptr inbounds nuw i8, ptr addrspace(3) %1685, i32 %34, !dbg !38
  %1689 = getelementptr inbounds nuw i8, ptr addrspace(3) %1688, i32 %35, !dbg !38
  %1690 = getelementptr inbounds nuw i8, ptr addrspace(3) %1689, i32 %36, !dbg !38
  %1691 = getelementptr inbounds nuw float, ptr addrspace(3) %1690, i32 %58, !dbg !38
  %1692 = getelementptr inbounds nuw i8, ptr addrspace(3) %1691, i32 32, !dbg !38
  %1693 = load float, ptr addrspace(3) %1692, align 4, !dbg !38
  %1694 = getelementptr inbounds nuw float, ptr addrspace(3) %1685, i32 %215, !dbg !38
  %1695 = getelementptr inbounds nuw float, ptr addrspace(3) %1694, i32 %58, !dbg !38
  %1696 = load float, ptr addrspace(3) %1695, align 4, !dbg !38
  %1697 = getelementptr inbounds nuw i8, ptr addrspace(3) %1691, i32 160, !dbg !38
  %1698 = load float, ptr addrspace(3) %1697, align 4, !dbg !38
  %1699 = fsub float %1684, %1687, !dbg !59
  %1700 = fsub float %1684, %1693, !dbg !59
  %1701 = fsub float %1684, %1696, !dbg !59
  %1702 = fsub float %1684, %1698, !dbg !59
  %1703 = fmul float %1699, 0x3FF7154760000000, !dbg !60
  %1704 = tail call float @llvm.nvvm.ex2.approx.f(float %1703), !dbg !60
  %1705 = fmul float %1700, 0x3FF7154760000000, !dbg !60
  %1706 = tail call float @llvm.nvvm.ex2.approx.f(float %1705), !dbg !60
  %1707 = fmul float %1701, 0x3FF7154760000000, !dbg !60
  %1708 = tail call float @llvm.nvvm.ex2.approx.f(float %1707), !dbg !60
  %1709 = fmul float %1702, 0x3FF7154760000000, !dbg !60
  %1710 = tail call float @llvm.nvvm.ex2.approx.f(float %1709), !dbg !60
  %1711 = select i1 %1676, float %1704, float 0.000000e+00, !dbg !61
  %1712 = select i1 %1677, float %1706, float 0.000000e+00, !dbg !61
  %1713 = select i1 %1678, float %1708, float 0.000000e+00, !dbg !61
  %1714 = select i1 %1679, float %1710, float 0.000000e+00, !dbg !61
  %1715 = extractelement <2 x float> %1585, i64 0, !dbg !62
  %1716 = fmul float %1715, %1711, !dbg !62
  %1717 = extractelement <2 x float> %1585, i64 1, !dbg !62
  %1718 = fmul float %1717, %1711, !dbg !62
  %1719 = extractelement <2 x float> %1590, i64 0, !dbg !62
  %1720 = fmul float %1719, %1712, !dbg !62
  %1721 = extractelement <2 x float> %1590, i64 1, !dbg !62
  %1722 = fmul float %1721, %1712, !dbg !62
  %1723 = extractelement <2 x float> %1595, i64 0, !dbg !62
  %1724 = fmul float %1723, %1711, !dbg !62
  %1725 = extractelement <2 x float> %1595, i64 1, !dbg !62
  %1726 = fmul float %1725, %1711, !dbg !62
  %1727 = extractelement <2 x float> %1600, i64 0, !dbg !62
  %1728 = fmul float %1727, %1712, !dbg !62
  %1729 = extractelement <2 x float> %1600, i64 1, !dbg !62
  %1730 = fmul float %1729, %1712, !dbg !62
  %1731 = extractelement <2 x float> %1605, i64 0, !dbg !62
  %1732 = fmul float %1731, %1711, !dbg !62
  %1733 = extractelement <2 x float> %1605, i64 1, !dbg !62
  %1734 = fmul float %1733, %1711, !dbg !62
  %1735 = extractelement <2 x float> %1610, i64 0, !dbg !62
  %1736 = fmul float %1735, %1712, !dbg !62
  %1737 = extractelement <2 x float> %1610, i64 1, !dbg !62
  %1738 = fmul float %1737, %1712, !dbg !62
  %1739 = extractelement <2 x float> %1615, i64 0, !dbg !62
  %1740 = fmul float %1739, %1711, !dbg !62
  %1741 = extractelement <2 x float> %1615, i64 1, !dbg !62
  %1742 = fmul float %1741, %1711, !dbg !62
  %1743 = extractelement <2 x float> %1620, i64 0, !dbg !62
  %1744 = fmul float %1743, %1712, !dbg !62
  %1745 = extractelement <2 x float> %1620, i64 1, !dbg !62
  %1746 = fmul float %1745, %1712, !dbg !62
  %1747 = extractelement <2 x float> %1625, i64 0, !dbg !62
  %1748 = fmul float %1747, %1713, !dbg !62
  %1749 = extractelement <2 x float> %1625, i64 1, !dbg !62
  %1750 = fmul float %1749, %1713, !dbg !62
  %1751 = extractelement <2 x float> %1630, i64 0, !dbg !62
  %1752 = fmul float %1751, %1714, !dbg !62
  %1753 = extractelement <2 x float> %1630, i64 1, !dbg !62
  %1754 = fmul float %1753, %1714, !dbg !62
  %1755 = extractelement <2 x float> %1635, i64 0, !dbg !62
  %1756 = fmul float %1755, %1713, !dbg !62
  %1757 = extractelement <2 x float> %1635, i64 1, !dbg !62
  %1758 = fmul float %1757, %1713, !dbg !62
  %1759 = extractelement <2 x float> %1640, i64 0, !dbg !62
  %1760 = fmul float %1759, %1714, !dbg !62
  %1761 = extractelement <2 x float> %1640, i64 1, !dbg !62
  %1762 = fmul float %1761, %1714, !dbg !62
  %1763 = extractelement <2 x float> %1645, i64 0, !dbg !62
  %1764 = fmul float %1763, %1713, !dbg !62
  %1765 = extractelement <2 x float> %1645, i64 1, !dbg !62
  %1766 = fmul float %1765, %1713, !dbg !62
  %1767 = extractelement <2 x float> %1650, i64 0, !dbg !62
  %1768 = fmul float %1767, %1714, !dbg !62
  %1769 = extractelement <2 x float> %1650, i64 1, !dbg !62
  %1770 = fmul float %1769, %1714, !dbg !62
  %1771 = extractelement <2 x float> %1655, i64 0, !dbg !62
  %1772 = fmul float %1771, %1713, !dbg !62
  %1773 = extractelement <2 x float> %1655, i64 1, !dbg !62
  %1774 = fmul float %1773, %1713, !dbg !62
  %1775 = extractelement <2 x float> %1660, i64 0, !dbg !62
  %1776 = fmul float %1775, %1714, !dbg !62
  %1777 = extractelement <2 x float> %1660, i64 1, !dbg !62
  %1778 = fmul float %1777, %1714, !dbg !62
  %1779 = fmul float %1684, 0x3FF7154760000000, !dbg !63
  %1780 = tail call float @llvm.nvvm.ex2.approx.f(float %1779), !dbg !63
  %1781 = fmul float %798, %1780, !dbg !64
  %1782 = fmul float %799, %1780, !dbg !64
  %1783 = fmul float %800, %1780, !dbg !64
  %1784 = fmul float %801, %1780, !dbg !64
  %1785 = fmul float %802, %1780, !dbg !64
  %1786 = fmul float %803, %1780, !dbg !64
  %1787 = fmul float %804, %1780, !dbg !64
  %1788 = fmul float %805, %1780, !dbg !64
  %1789 = fmul float %806, %1780, !dbg !64
  %1790 = fmul float %807, %1780, !dbg !64
  %1791 = fmul float %808, %1780, !dbg !64
  %1792 = fmul float %809, %1780, !dbg !64
  %1793 = fmul float %810, %1780, !dbg !64
  %1794 = fmul float %811, %1780, !dbg !64
  %1795 = fmul float %812, %1780, !dbg !64
  %1796 = fmul float %813, %1780, !dbg !64
  %1797 = fmul float %814, %1780, !dbg !64
  %1798 = fmul float %815, %1780, !dbg !64
  %1799 = fmul float %816, %1780, !dbg !64
  %1800 = fmul float %817, %1780, !dbg !64
  %1801 = fmul float %818, %1780, !dbg !64
  %1802 = fmul float %819, %1780, !dbg !64
  %1803 = fmul float %820, %1780, !dbg !64
  %1804 = fmul float %821, %1780, !dbg !64
  %1805 = fmul float %822, %1780, !dbg !64
  %1806 = fmul float %823, %1780, !dbg !64
  %1807 = fmul float %824, %1780, !dbg !64
  %1808 = fmul float %825, %1780, !dbg !64
  %1809 = fmul float %826, %1780, !dbg !64
  %1810 = fmul float %827, %1780, !dbg !64
  %1811 = fmul float %828, %1780, !dbg !64
  %1812 = fmul float %829, %1780, !dbg !64
  %1813 = fmul float %766, %1780, !dbg !65
  %1814 = fmul float %767, %1780, !dbg !65
  %1815 = fmul float %768, %1780, !dbg !65
  %1816 = fmul float %769, %1780, !dbg !65
  %1817 = fmul float %770, %1780, !dbg !65
  %1818 = fmul float %771, %1780, !dbg !65
  %1819 = fmul float %772, %1780, !dbg !65
  %1820 = fmul float %773, %1780, !dbg !65
  %1821 = fmul float %774, %1780, !dbg !65
  %1822 = fmul float %775, %1780, !dbg !65
  %1823 = fmul float %776, %1780, !dbg !65
  %1824 = fmul float %777, %1780, !dbg !65
  %1825 = fmul float %778, %1780, !dbg !65
  %1826 = fmul float %779, %1780, !dbg !65
  %1827 = fmul float %780, %1780, !dbg !65
  %1828 = fmul float %781, %1780, !dbg !65
  %1829 = fmul float %782, %1780, !dbg !65
  %1830 = fmul float %783, %1780, !dbg !65
  %1831 = fmul float %784, %1780, !dbg !65
  %1832 = fmul float %785, %1780, !dbg !65
  %1833 = fmul float %786, %1780, !dbg !65
  %1834 = fmul float %787, %1780, !dbg !65
  %1835 = fmul float %788, %1780, !dbg !65
  %1836 = fmul float %789, %1780, !dbg !65
  %1837 = fmul float %790, %1780, !dbg !65
  %1838 = fmul float %791, %1780, !dbg !65
  %1839 = fmul float %792, %1780, !dbg !65
  %1840 = fmul float %793, %1780, !dbg !65
  %1841 = fmul float %794, %1780, !dbg !65
  %1842 = fmul float %795, %1780, !dbg !65
  %1843 = fmul float %796, %1780, !dbg !65
  %1844 = fmul float %797, %1780, !dbg !65
  %1845 = fptrunc float %1716 to bfloat, !dbg !66
  %1846 = fptrunc float %1718 to bfloat, !dbg !66
  %1847 = fptrunc float %1720 to bfloat, !dbg !66
  %1848 = fptrunc float %1722 to bfloat, !dbg !66
  %1849 = fptrunc float %1724 to bfloat, !dbg !66
  %1850 = fptrunc float %1726 to bfloat, !dbg !66
  %1851 = fptrunc float %1728 to bfloat, !dbg !66
  %1852 = fptrunc float %1730 to bfloat, !dbg !66
  %1853 = fptrunc float %1732 to bfloat, !dbg !66
  %1854 = fptrunc float %1734 to bfloat, !dbg !66
  %1855 = fptrunc float %1736 to bfloat, !dbg !66
  %1856 = fptrunc float %1738 to bfloat, !dbg !66
  %1857 = fptrunc float %1740 to bfloat, !dbg !66
  %1858 = fptrunc float %1742 to bfloat, !dbg !66
  %1859 = fptrunc float %1744 to bfloat, !dbg !66
  %1860 = fptrunc float %1746 to bfloat, !dbg !66
  %1861 = fptrunc float %1748 to bfloat, !dbg !66
  %1862 = fptrunc float %1750 to bfloat, !dbg !66
  %1863 = fptrunc float %1752 to bfloat, !dbg !66
  %1864 = fptrunc float %1754 to bfloat, !dbg !66
  %1865 = fptrunc float %1756 to bfloat, !dbg !66
  %1866 = fptrunc float %1758 to bfloat, !dbg !66
  %1867 = fptrunc float %1760 to bfloat, !dbg !66
  %1868 = fptrunc float %1762 to bfloat, !dbg !66
  %1869 = fptrunc float %1764 to bfloat, !dbg !66
  %1870 = fptrunc float %1766 to bfloat, !dbg !66
  %1871 = fptrunc float %1768 to bfloat, !dbg !66
  %1872 = fptrunc float %1770 to bfloat, !dbg !66
  %1873 = fptrunc float %1772 to bfloat, !dbg !66
  %1874 = fptrunc float %1774 to bfloat, !dbg !66
  %1875 = fptrunc float %1776 to bfloat, !dbg !66
  %1876 = fptrunc float %1778 to bfloat, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %1877 = insertelement <2 x bfloat> poison, bfloat %1845, i64 0, !dbg !66
  %1878 = insertelement <2 x bfloat> %1877, bfloat %1846, i64 1, !dbg !66
  %1879 = bitcast <2 x bfloat> %1878 to i32, !dbg !66
  %1880 = insertelement <2 x bfloat> poison, bfloat %1847, i64 0, !dbg !66
  %1881 = insertelement <2 x bfloat> %1880, bfloat %1848, i64 1, !dbg !66
  %1882 = bitcast <2 x bfloat> %1881 to i32, !dbg !66
  %1883 = insertelement <2 x bfloat> poison, bfloat %1849, i64 0, !dbg !66
  %1884 = insertelement <2 x bfloat> %1883, bfloat %1850, i64 1, !dbg !66
  %1885 = bitcast <2 x bfloat> %1884 to i32, !dbg !66
  %1886 = insertelement <2 x bfloat> poison, bfloat %1851, i64 0, !dbg !66
  %1887 = insertelement <2 x bfloat> %1886, bfloat %1852, i64 1, !dbg !66
  %1888 = bitcast <2 x bfloat> %1887 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %601, i32 %1879, i32 %1882, i32 %1885, i32 %1888) #2, !dbg !66
  %1889 = insertelement <2 x bfloat> poison, bfloat %1853, i64 0, !dbg !66
  %1890 = insertelement <2 x bfloat> %1889, bfloat %1854, i64 1, !dbg !66
  %1891 = bitcast <2 x bfloat> %1890 to i32, !dbg !66
  %1892 = insertelement <2 x bfloat> poison, bfloat %1855, i64 0, !dbg !66
  %1893 = insertelement <2 x bfloat> %1892, bfloat %1856, i64 1, !dbg !66
  %1894 = bitcast <2 x bfloat> %1893 to i32, !dbg !66
  %1895 = insertelement <2 x bfloat> poison, bfloat %1857, i64 0, !dbg !66
  %1896 = insertelement <2 x bfloat> %1895, bfloat %1858, i64 1, !dbg !66
  %1897 = bitcast <2 x bfloat> %1896 to i32, !dbg !66
  %1898 = insertelement <2 x bfloat> poison, bfloat %1859, i64 0, !dbg !66
  %1899 = insertelement <2 x bfloat> %1898, bfloat %1860, i64 1, !dbg !66
  %1900 = bitcast <2 x bfloat> %1899 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %604, i32 %1891, i32 %1894, i32 %1897, i32 %1900) #2, !dbg !66
  %1901 = insertelement <2 x bfloat> poison, bfloat %1861, i64 0, !dbg !66
  %1902 = insertelement <2 x bfloat> %1901, bfloat %1862, i64 1, !dbg !66
  %1903 = bitcast <2 x bfloat> %1902 to i32, !dbg !66
  %1904 = insertelement <2 x bfloat> poison, bfloat %1863, i64 0, !dbg !66
  %1905 = insertelement <2 x bfloat> %1904, bfloat %1864, i64 1, !dbg !66
  %1906 = bitcast <2 x bfloat> %1905 to i32, !dbg !66
  %1907 = insertelement <2 x bfloat> poison, bfloat %1865, i64 0, !dbg !66
  %1908 = insertelement <2 x bfloat> %1907, bfloat %1866, i64 1, !dbg !66
  %1909 = bitcast <2 x bfloat> %1908 to i32, !dbg !66
  %1910 = insertelement <2 x bfloat> poison, bfloat %1867, i64 0, !dbg !66
  %1911 = insertelement <2 x bfloat> %1910, bfloat %1868, i64 1, !dbg !66
  %1912 = bitcast <2 x bfloat> %1911 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %607, i32 %1903, i32 %1906, i32 %1909, i32 %1912) #2, !dbg !66
  %1913 = insertelement <2 x bfloat> poison, bfloat %1869, i64 0, !dbg !66
  %1914 = insertelement <2 x bfloat> %1913, bfloat %1870, i64 1, !dbg !66
  %1915 = bitcast <2 x bfloat> %1914 to i32, !dbg !66
  %1916 = insertelement <2 x bfloat> poison, bfloat %1871, i64 0, !dbg !66
  %1917 = insertelement <2 x bfloat> %1916, bfloat %1872, i64 1, !dbg !66
  %1918 = bitcast <2 x bfloat> %1917 to i32, !dbg !66
  %1919 = insertelement <2 x bfloat> poison, bfloat %1873, i64 0, !dbg !66
  %1920 = insertelement <2 x bfloat> %1919, bfloat %1874, i64 1, !dbg !66
  %1921 = bitcast <2 x bfloat> %1920 to i32, !dbg !66
  %1922 = insertelement <2 x bfloat> poison, bfloat %1875, i64 0, !dbg !66
  %1923 = insertelement <2 x bfloat> %1922, bfloat %1876, i64 1, !dbg !66
  %1924 = bitcast <2 x bfloat> %1923 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %610, i32 %1915, i32 %1918, i32 %1921, i32 %1924) #2, !dbg !66
  %1925 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1022, !dbg !39
  %1926 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %751, !dbg !39
  %1927 = ptrtoint ptr addrspace(3) %1926 to i32, !dbg !39
  %1928 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1927) #2, !dbg !39
  %1929 = extractvalue { i32, i32, i32, i32 } %1928, 0, !dbg !39
  %1930 = extractvalue { i32, i32, i32, i32 } %1928, 1, !dbg !39
  %1931 = extractvalue { i32, i32, i32, i32 } %1928, 2, !dbg !39
  %1932 = extractvalue { i32, i32, i32, i32 } %1928, 3, !dbg !39
  %1933 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %752, !dbg !39
  %1934 = ptrtoint ptr addrspace(3) %1933 to i32, !dbg !39
  %1935 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1934) #2, !dbg !39
  %1936 = extractvalue { i32, i32, i32, i32 } %1935, 0, !dbg !39
  %1937 = extractvalue { i32, i32, i32, i32 } %1935, 1, !dbg !39
  %1938 = extractvalue { i32, i32, i32, i32 } %1935, 2, !dbg !39
  %1939 = extractvalue { i32, i32, i32, i32 } %1935, 3, !dbg !39
  %1940 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %753, !dbg !39
  %1941 = ptrtoint ptr addrspace(3) %1940 to i32, !dbg !39
  %1942 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1941) #2, !dbg !39
  %1943 = extractvalue { i32, i32, i32, i32 } %1942, 0, !dbg !39
  %1944 = extractvalue { i32, i32, i32, i32 } %1942, 1, !dbg !39
  %1945 = extractvalue { i32, i32, i32, i32 } %1942, 2, !dbg !39
  %1946 = extractvalue { i32, i32, i32, i32 } %1942, 3, !dbg !39
  %1947 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %754, !dbg !39
  %1948 = ptrtoint ptr addrspace(3) %1947 to i32, !dbg !39
  %1949 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1948) #2, !dbg !39
  %1950 = extractvalue { i32, i32, i32, i32 } %1949, 0, !dbg !39
  %1951 = extractvalue { i32, i32, i32, i32 } %1949, 1, !dbg !39
  %1952 = extractvalue { i32, i32, i32, i32 } %1949, 2, !dbg !39
  %1953 = extractvalue { i32, i32, i32, i32 } %1949, 3, !dbg !39
  %1954 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %755, !dbg !39
  %1955 = ptrtoint ptr addrspace(3) %1954 to i32, !dbg !39
  %1956 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1955) #2, !dbg !39
  %1957 = extractvalue { i32, i32, i32, i32 } %1956, 0, !dbg !39
  %1958 = extractvalue { i32, i32, i32, i32 } %1956, 1, !dbg !39
  %1959 = extractvalue { i32, i32, i32, i32 } %1956, 2, !dbg !39
  %1960 = extractvalue { i32, i32, i32, i32 } %1956, 3, !dbg !39
  %1961 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %756, !dbg !39
  %1962 = ptrtoint ptr addrspace(3) %1961 to i32, !dbg !39
  %1963 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1962) #2, !dbg !39
  %1964 = extractvalue { i32, i32, i32, i32 } %1963, 0, !dbg !39
  %1965 = extractvalue { i32, i32, i32, i32 } %1963, 1, !dbg !39
  %1966 = extractvalue { i32, i32, i32, i32 } %1963, 2, !dbg !39
  %1967 = extractvalue { i32, i32, i32, i32 } %1963, 3, !dbg !39
  %1968 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %757, !dbg !39
  %1969 = ptrtoint ptr addrspace(3) %1968 to i32, !dbg !39
  %1970 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1969) #2, !dbg !39
  %1971 = extractvalue { i32, i32, i32, i32 } %1970, 0, !dbg !39
  %1972 = extractvalue { i32, i32, i32, i32 } %1970, 1, !dbg !39
  %1973 = extractvalue { i32, i32, i32, i32 } %1970, 2, !dbg !39
  %1974 = extractvalue { i32, i32, i32, i32 } %1970, 3, !dbg !39
  %1975 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1925, i32 %758, !dbg !39
  %1976 = ptrtoint ptr addrspace(3) %1975 to i32, !dbg !39
  %1977 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1976) #2, !dbg !39
  %1978 = extractvalue { i32, i32, i32, i32 } %1977, 0, !dbg !39
  %1979 = extractvalue { i32, i32, i32, i32 } %1977, 1, !dbg !39
  %1980 = extractvalue { i32, i32, i32, i32 } %1977, 2, !dbg !39
  %1981 = extractvalue { i32, i32, i32, i32 } %1977, 3, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %1982 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %701) #2, !dbg !66
  %1983 = extractvalue { i32, i32, i32, i32 } %1982, 0, !dbg !66
  %1984 = extractvalue { i32, i32, i32, i32 } %1982, 1, !dbg !66
  %1985 = extractvalue { i32, i32, i32, i32 } %1982, 2, !dbg !66
  %1986 = extractvalue { i32, i32, i32, i32 } %1982, 3, !dbg !66
  %1987 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %704) #2, !dbg !66
  %1988 = extractvalue { i32, i32, i32, i32 } %1987, 0, !dbg !66
  %1989 = extractvalue { i32, i32, i32, i32 } %1987, 1, !dbg !66
  %1990 = extractvalue { i32, i32, i32, i32 } %1987, 2, !dbg !66
  %1991 = extractvalue { i32, i32, i32, i32 } %1987, 3, !dbg !66
  %1992 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %707) #2, !dbg !66
  %1993 = extractvalue { i32, i32, i32, i32 } %1992, 0, !dbg !66
  %1994 = extractvalue { i32, i32, i32, i32 } %1992, 1, !dbg !66
  %1995 = extractvalue { i32, i32, i32, i32 } %1992, 2, !dbg !66
  %1996 = extractvalue { i32, i32, i32, i32 } %1992, 3, !dbg !66
  %1997 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %710) #2, !dbg !66
  %1998 = extractvalue { i32, i32, i32, i32 } %1997, 0, !dbg !66
  %1999 = extractvalue { i32, i32, i32, i32 } %1997, 1, !dbg !66
  %2000 = extractvalue { i32, i32, i32, i32 } %1997, 2, !dbg !66
  %2001 = extractvalue { i32, i32, i32, i32 } %1997, 3, !dbg !66
  %2002 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %713) #2, !dbg !66
  %2003 = extractvalue { i32, i32, i32, i32 } %2002, 0, !dbg !66
  %2004 = extractvalue { i32, i32, i32, i32 } %2002, 1, !dbg !66
  %2005 = extractvalue { i32, i32, i32, i32 } %2002, 2, !dbg !66
  %2006 = extractvalue { i32, i32, i32, i32 } %2002, 3, !dbg !66
  %2007 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %716) #2, !dbg !66
  %2008 = extractvalue { i32, i32, i32, i32 } %2007, 0, !dbg !66
  %2009 = extractvalue { i32, i32, i32, i32 } %2007, 1, !dbg !66
  %2010 = extractvalue { i32, i32, i32, i32 } %2007, 2, !dbg !66
  %2011 = extractvalue { i32, i32, i32, i32 } %2007, 3, !dbg !66
  %2012 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %719) #2, !dbg !66
  %2013 = extractvalue { i32, i32, i32, i32 } %2012, 0, !dbg !66
  %2014 = extractvalue { i32, i32, i32, i32 } %2012, 1, !dbg !66
  %2015 = extractvalue { i32, i32, i32, i32 } %2012, 2, !dbg !66
  %2016 = extractvalue { i32, i32, i32, i32 } %2012, 3, !dbg !66
  %2017 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %722) #2, !dbg !66
  %2018 = extractvalue { i32, i32, i32, i32 } %2017, 0, !dbg !66
  %2019 = extractvalue { i32, i32, i32, i32 } %2017, 1, !dbg !66
  %2020 = extractvalue { i32, i32, i32, i32 } %2017, 2, !dbg !66
  %2021 = extractvalue { i32, i32, i32, i32 } %2017, 3, !dbg !66
  %2022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1781, float %1782, float %1783, float %1784, i32 %1929, i32 %1930, i32 %1931, i32 %1932, i32 %1983, i32 %1984) #2, !dbg !67
  %2023 = extractvalue { float, float, float, float } %2022, 0, !dbg !67
  %2024 = extractvalue { float, float, float, float } %2022, 1, !dbg !67
  %2025 = extractvalue { float, float, float, float } %2022, 2, !dbg !67
  %2026 = extractvalue { float, float, float, float } %2022, 3, !dbg !67
  %2027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1785, float %1786, float %1787, float %1788, i32 %1929, i32 %1930, i32 %1931, i32 %1932, i32 %1993, i32 %1994) #2, !dbg !67
  %2028 = extractvalue { float, float, float, float } %2027, 0, !dbg !67
  %2029 = extractvalue { float, float, float, float } %2027, 1, !dbg !67
  %2030 = extractvalue { float, float, float, float } %2027, 2, !dbg !67
  %2031 = extractvalue { float, float, float, float } %2027, 3, !dbg !67
  %2032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1789, float %1790, float %1791, float %1792, i32 %1929, i32 %1930, i32 %1931, i32 %1932, i32 %2003, i32 %2004) #2, !dbg !67
  %2033 = extractvalue { float, float, float, float } %2032, 0, !dbg !67
  %2034 = extractvalue { float, float, float, float } %2032, 1, !dbg !67
  %2035 = extractvalue { float, float, float, float } %2032, 2, !dbg !67
  %2036 = extractvalue { float, float, float, float } %2032, 3, !dbg !67
  %2037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1793, float %1794, float %1795, float %1796, i32 %1929, i32 %1930, i32 %1931, i32 %1932, i32 %2013, i32 %2014) #2, !dbg !67
  %2038 = extractvalue { float, float, float, float } %2037, 0, !dbg !67
  %2039 = extractvalue { float, float, float, float } %2037, 1, !dbg !67
  %2040 = extractvalue { float, float, float, float } %2037, 2, !dbg !67
  %2041 = extractvalue { float, float, float, float } %2037, 3, !dbg !67
  %2042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1797, float %1798, float %1799, float %1800, i32 %1957, i32 %1958, i32 %1959, i32 %1960, i32 %1983, i32 %1984) #2, !dbg !67
  %2043 = extractvalue { float, float, float, float } %2042, 0, !dbg !67
  %2044 = extractvalue { float, float, float, float } %2042, 1, !dbg !67
  %2045 = extractvalue { float, float, float, float } %2042, 2, !dbg !67
  %2046 = extractvalue { float, float, float, float } %2042, 3, !dbg !67
  %2047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1801, float %1802, float %1803, float %1804, i32 %1957, i32 %1958, i32 %1959, i32 %1960, i32 %1993, i32 %1994) #2, !dbg !67
  %2048 = extractvalue { float, float, float, float } %2047, 0, !dbg !67
  %2049 = extractvalue { float, float, float, float } %2047, 1, !dbg !67
  %2050 = extractvalue { float, float, float, float } %2047, 2, !dbg !67
  %2051 = extractvalue { float, float, float, float } %2047, 3, !dbg !67
  %2052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1805, float %1806, float %1807, float %1808, i32 %1957, i32 %1958, i32 %1959, i32 %1960, i32 %2003, i32 %2004) #2, !dbg !67
  %2053 = extractvalue { float, float, float, float } %2052, 0, !dbg !67
  %2054 = extractvalue { float, float, float, float } %2052, 1, !dbg !67
  %2055 = extractvalue { float, float, float, float } %2052, 2, !dbg !67
  %2056 = extractvalue { float, float, float, float } %2052, 3, !dbg !67
  %2057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1809, float %1810, float %1811, float %1812, i32 %1957, i32 %1958, i32 %1959, i32 %1960, i32 %2013, i32 %2014) #2, !dbg !67
  %2058 = extractvalue { float, float, float, float } %2057, 0, !dbg !67
  %2059 = extractvalue { float, float, float, float } %2057, 1, !dbg !67
  %2060 = extractvalue { float, float, float, float } %2057, 2, !dbg !67
  %2061 = extractvalue { float, float, float, float } %2057, 3, !dbg !67
  %2062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2023, float %2024, float %2025, float %2026, i32 %1936, i32 %1937, i32 %1938, i32 %1939, i32 %1985, i32 %1986) #2, !dbg !67
  %2063 = extractvalue { float, float, float, float } %2062, 0, !dbg !67
  %2064 = extractvalue { float, float, float, float } %2062, 1, !dbg !67
  %2065 = extractvalue { float, float, float, float } %2062, 2, !dbg !67
  %2066 = extractvalue { float, float, float, float } %2062, 3, !dbg !67
  %2067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2028, float %2029, float %2030, float %2031, i32 %1936, i32 %1937, i32 %1938, i32 %1939, i32 %1995, i32 %1996) #2, !dbg !67
  %2068 = extractvalue { float, float, float, float } %2067, 0, !dbg !67
  %2069 = extractvalue { float, float, float, float } %2067, 1, !dbg !67
  %2070 = extractvalue { float, float, float, float } %2067, 2, !dbg !67
  %2071 = extractvalue { float, float, float, float } %2067, 3, !dbg !67
  %2072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2033, float %2034, float %2035, float %2036, i32 %1936, i32 %1937, i32 %1938, i32 %1939, i32 %2005, i32 %2006) #2, !dbg !67
  %2073 = extractvalue { float, float, float, float } %2072, 0, !dbg !67
  %2074 = extractvalue { float, float, float, float } %2072, 1, !dbg !67
  %2075 = extractvalue { float, float, float, float } %2072, 2, !dbg !67
  %2076 = extractvalue { float, float, float, float } %2072, 3, !dbg !67
  %2077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2038, float %2039, float %2040, float %2041, i32 %1936, i32 %1937, i32 %1938, i32 %1939, i32 %2015, i32 %2016) #2, !dbg !67
  %2078 = extractvalue { float, float, float, float } %2077, 0, !dbg !67
  %2079 = extractvalue { float, float, float, float } %2077, 1, !dbg !67
  %2080 = extractvalue { float, float, float, float } %2077, 2, !dbg !67
  %2081 = extractvalue { float, float, float, float } %2077, 3, !dbg !67
  %2082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2043, float %2044, float %2045, float %2046, i32 %1964, i32 %1965, i32 %1966, i32 %1967, i32 %1985, i32 %1986) #2, !dbg !67
  %2083 = extractvalue { float, float, float, float } %2082, 0, !dbg !67
  %2084 = extractvalue { float, float, float, float } %2082, 1, !dbg !67
  %2085 = extractvalue { float, float, float, float } %2082, 2, !dbg !67
  %2086 = extractvalue { float, float, float, float } %2082, 3, !dbg !67
  %2087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2048, float %2049, float %2050, float %2051, i32 %1964, i32 %1965, i32 %1966, i32 %1967, i32 %1995, i32 %1996) #2, !dbg !67
  %2088 = extractvalue { float, float, float, float } %2087, 0, !dbg !67
  %2089 = extractvalue { float, float, float, float } %2087, 1, !dbg !67
  %2090 = extractvalue { float, float, float, float } %2087, 2, !dbg !67
  %2091 = extractvalue { float, float, float, float } %2087, 3, !dbg !67
  %2092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2053, float %2054, float %2055, float %2056, i32 %1964, i32 %1965, i32 %1966, i32 %1967, i32 %2005, i32 %2006) #2, !dbg !67
  %2093 = extractvalue { float, float, float, float } %2092, 0, !dbg !67
  %2094 = extractvalue { float, float, float, float } %2092, 1, !dbg !67
  %2095 = extractvalue { float, float, float, float } %2092, 2, !dbg !67
  %2096 = extractvalue { float, float, float, float } %2092, 3, !dbg !67
  %2097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2058, float %2059, float %2060, float %2061, i32 %1964, i32 %1965, i32 %1966, i32 %1967, i32 %2015, i32 %2016) #2, !dbg !67
  %2098 = extractvalue { float, float, float, float } %2097, 0, !dbg !67
  %2099 = extractvalue { float, float, float, float } %2097, 1, !dbg !67
  %2100 = extractvalue { float, float, float, float } %2097, 2, !dbg !67
  %2101 = extractvalue { float, float, float, float } %2097, 3, !dbg !67
  %2102 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2063, float %2064, float %2065, float %2066, i32 %1943, i32 %1944, i32 %1945, i32 %1946, i32 %1988, i32 %1989) #2, !dbg !67
  %2103 = extractvalue { float, float, float, float } %2102, 0, !dbg !67
  %2104 = extractvalue { float, float, float, float } %2102, 1, !dbg !67
  %2105 = extractvalue { float, float, float, float } %2102, 2, !dbg !67
  %2106 = extractvalue { float, float, float, float } %2102, 3, !dbg !67
  %2107 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2068, float %2069, float %2070, float %2071, i32 %1943, i32 %1944, i32 %1945, i32 %1946, i32 %1998, i32 %1999) #2, !dbg !67
  %2108 = extractvalue { float, float, float, float } %2107, 0, !dbg !67
  %2109 = extractvalue { float, float, float, float } %2107, 1, !dbg !67
  %2110 = extractvalue { float, float, float, float } %2107, 2, !dbg !67
  %2111 = extractvalue { float, float, float, float } %2107, 3, !dbg !67
  %2112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2073, float %2074, float %2075, float %2076, i32 %1943, i32 %1944, i32 %1945, i32 %1946, i32 %2008, i32 %2009) #2, !dbg !67
  %2113 = extractvalue { float, float, float, float } %2112, 0, !dbg !67
  %2114 = extractvalue { float, float, float, float } %2112, 1, !dbg !67
  %2115 = extractvalue { float, float, float, float } %2112, 2, !dbg !67
  %2116 = extractvalue { float, float, float, float } %2112, 3, !dbg !67
  %2117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2078, float %2079, float %2080, float %2081, i32 %1943, i32 %1944, i32 %1945, i32 %1946, i32 %2018, i32 %2019) #2, !dbg !67
  %2118 = extractvalue { float, float, float, float } %2117, 0, !dbg !67
  %2119 = extractvalue { float, float, float, float } %2117, 1, !dbg !67
  %2120 = extractvalue { float, float, float, float } %2117, 2, !dbg !67
  %2121 = extractvalue { float, float, float, float } %2117, 3, !dbg !67
  %2122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2083, float %2084, float %2085, float %2086, i32 %1971, i32 %1972, i32 %1973, i32 %1974, i32 %1988, i32 %1989) #2, !dbg !67
  %2123 = extractvalue { float, float, float, float } %2122, 0, !dbg !67
  %2124 = extractvalue { float, float, float, float } %2122, 1, !dbg !67
  %2125 = extractvalue { float, float, float, float } %2122, 2, !dbg !67
  %2126 = extractvalue { float, float, float, float } %2122, 3, !dbg !67
  %2127 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2088, float %2089, float %2090, float %2091, i32 %1971, i32 %1972, i32 %1973, i32 %1974, i32 %1998, i32 %1999) #2, !dbg !67
  %2128 = extractvalue { float, float, float, float } %2127, 0, !dbg !67
  %2129 = extractvalue { float, float, float, float } %2127, 1, !dbg !67
  %2130 = extractvalue { float, float, float, float } %2127, 2, !dbg !67
  %2131 = extractvalue { float, float, float, float } %2127, 3, !dbg !67
  %2132 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2093, float %2094, float %2095, float %2096, i32 %1971, i32 %1972, i32 %1973, i32 %1974, i32 %2008, i32 %2009) #2, !dbg !67
  %2133 = extractvalue { float, float, float, float } %2132, 0, !dbg !67
  %2134 = extractvalue { float, float, float, float } %2132, 1, !dbg !67
  %2135 = extractvalue { float, float, float, float } %2132, 2, !dbg !67
  %2136 = extractvalue { float, float, float, float } %2132, 3, !dbg !67
  %2137 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2098, float %2099, float %2100, float %2101, i32 %1971, i32 %1972, i32 %1973, i32 %1974, i32 %2018, i32 %2019) #2, !dbg !67
  %2138 = extractvalue { float, float, float, float } %2137, 0, !dbg !67
  %2139 = extractvalue { float, float, float, float } %2137, 1, !dbg !67
  %2140 = extractvalue { float, float, float, float } %2137, 2, !dbg !67
  %2141 = extractvalue { float, float, float, float } %2137, 3, !dbg !67
  %2142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2103, float %2104, float %2105, float %2106, i32 %1950, i32 %1951, i32 %1952, i32 %1953, i32 %1990, i32 %1991) #2, !dbg !67
  %2143 = extractvalue { float, float, float, float } %2142, 0, !dbg !67
  %2144 = extractvalue { float, float, float, float } %2142, 1, !dbg !67
  %2145 = extractvalue { float, float, float, float } %2142, 2, !dbg !67
  %2146 = extractvalue { float, float, float, float } %2142, 3, !dbg !67
  %2147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2108, float %2109, float %2110, float %2111, i32 %1950, i32 %1951, i32 %1952, i32 %1953, i32 %2000, i32 %2001) #2, !dbg !67
  %2148 = extractvalue { float, float, float, float } %2147, 0, !dbg !67
  %2149 = extractvalue { float, float, float, float } %2147, 1, !dbg !67
  %2150 = extractvalue { float, float, float, float } %2147, 2, !dbg !67
  %2151 = extractvalue { float, float, float, float } %2147, 3, !dbg !67
  %2152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2113, float %2114, float %2115, float %2116, i32 %1950, i32 %1951, i32 %1952, i32 %1953, i32 %2010, i32 %2011) #2, !dbg !67
  %2153 = extractvalue { float, float, float, float } %2152, 0, !dbg !67
  %2154 = extractvalue { float, float, float, float } %2152, 1, !dbg !67
  %2155 = extractvalue { float, float, float, float } %2152, 2, !dbg !67
  %2156 = extractvalue { float, float, float, float } %2152, 3, !dbg !67
  %2157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2118, float %2119, float %2120, float %2121, i32 %1950, i32 %1951, i32 %1952, i32 %1953, i32 %2020, i32 %2021) #2, !dbg !67
  %2158 = extractvalue { float, float, float, float } %2157, 0, !dbg !67
  %2159 = extractvalue { float, float, float, float } %2157, 1, !dbg !67
  %2160 = extractvalue { float, float, float, float } %2157, 2, !dbg !67
  %2161 = extractvalue { float, float, float, float } %2157, 3, !dbg !67
  %2162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2123, float %2124, float %2125, float %2126, i32 %1978, i32 %1979, i32 %1980, i32 %1981, i32 %1990, i32 %1991) #2, !dbg !67
  %2163 = extractvalue { float, float, float, float } %2162, 0, !dbg !67
  %2164 = extractvalue { float, float, float, float } %2162, 1, !dbg !67
  %2165 = extractvalue { float, float, float, float } %2162, 2, !dbg !67
  %2166 = extractvalue { float, float, float, float } %2162, 3, !dbg !67
  %2167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2128, float %2129, float %2130, float %2131, i32 %1978, i32 %1979, i32 %1980, i32 %1981, i32 %2000, i32 %2001) #2, !dbg !67
  %2168 = extractvalue { float, float, float, float } %2167, 0, !dbg !67
  %2169 = extractvalue { float, float, float, float } %2167, 1, !dbg !67
  %2170 = extractvalue { float, float, float, float } %2167, 2, !dbg !67
  %2171 = extractvalue { float, float, float, float } %2167, 3, !dbg !67
  %2172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2133, float %2134, float %2135, float %2136, i32 %1978, i32 %1979, i32 %1980, i32 %1981, i32 %2010, i32 %2011) #2, !dbg !67
  %2173 = extractvalue { float, float, float, float } %2172, 0, !dbg !67
  %2174 = extractvalue { float, float, float, float } %2172, 1, !dbg !67
  %2175 = extractvalue { float, float, float, float } %2172, 2, !dbg !67
  %2176 = extractvalue { float, float, float, float } %2172, 3, !dbg !67
  %2177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2138, float %2139, float %2140, float %2141, i32 %1978, i32 %1979, i32 %1980, i32 %1981, i32 %2020, i32 %2021) #2, !dbg !67
  %2178 = extractvalue { float, float, float, float } %2177, 0, !dbg !67
  %2179 = extractvalue { float, float, float, float } %2177, 1, !dbg !67
  %2180 = extractvalue { float, float, float, float } %2177, 2, !dbg !67
  %2181 = extractvalue { float, float, float, float } %2177, 3, !dbg !67
  %2182 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %1022, !dbg !40
  %2183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %751, !dbg !40
  %2184 = ptrtoint ptr addrspace(3) %2183 to i32, !dbg !40
  %2185 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2184) #2, !dbg !40
  %2186 = extractvalue { i32, i32, i32, i32 } %2185, 0, !dbg !40
  %2187 = extractvalue { i32, i32, i32, i32 } %2185, 1, !dbg !40
  %2188 = extractvalue { i32, i32, i32, i32 } %2185, 2, !dbg !40
  %2189 = extractvalue { i32, i32, i32, i32 } %2185, 3, !dbg !40
  %2190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %752, !dbg !40
  %2191 = ptrtoint ptr addrspace(3) %2190 to i32, !dbg !40
  %2192 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2191) #2, !dbg !40
  %2193 = extractvalue { i32, i32, i32, i32 } %2192, 0, !dbg !40
  %2194 = extractvalue { i32, i32, i32, i32 } %2192, 1, !dbg !40
  %2195 = extractvalue { i32, i32, i32, i32 } %2192, 2, !dbg !40
  %2196 = extractvalue { i32, i32, i32, i32 } %2192, 3, !dbg !40
  %2197 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %753, !dbg !40
  %2198 = ptrtoint ptr addrspace(3) %2197 to i32, !dbg !40
  %2199 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2198) #2, !dbg !40
  %2200 = extractvalue { i32, i32, i32, i32 } %2199, 0, !dbg !40
  %2201 = extractvalue { i32, i32, i32, i32 } %2199, 1, !dbg !40
  %2202 = extractvalue { i32, i32, i32, i32 } %2199, 2, !dbg !40
  %2203 = extractvalue { i32, i32, i32, i32 } %2199, 3, !dbg !40
  %2204 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %754, !dbg !40
  %2205 = ptrtoint ptr addrspace(3) %2204 to i32, !dbg !40
  %2206 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2205) #2, !dbg !40
  %2207 = extractvalue { i32, i32, i32, i32 } %2206, 0, !dbg !40
  %2208 = extractvalue { i32, i32, i32, i32 } %2206, 1, !dbg !40
  %2209 = extractvalue { i32, i32, i32, i32 } %2206, 2, !dbg !40
  %2210 = extractvalue { i32, i32, i32, i32 } %2206, 3, !dbg !40
  %2211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %755, !dbg !40
  %2212 = ptrtoint ptr addrspace(3) %2211 to i32, !dbg !40
  %2213 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2212) #2, !dbg !40
  %2214 = extractvalue { i32, i32, i32, i32 } %2213, 0, !dbg !40
  %2215 = extractvalue { i32, i32, i32, i32 } %2213, 1, !dbg !40
  %2216 = extractvalue { i32, i32, i32, i32 } %2213, 2, !dbg !40
  %2217 = extractvalue { i32, i32, i32, i32 } %2213, 3, !dbg !40
  %2218 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %756, !dbg !40
  %2219 = ptrtoint ptr addrspace(3) %2218 to i32, !dbg !40
  %2220 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2219) #2, !dbg !40
  %2221 = extractvalue { i32, i32, i32, i32 } %2220, 0, !dbg !40
  %2222 = extractvalue { i32, i32, i32, i32 } %2220, 1, !dbg !40
  %2223 = extractvalue { i32, i32, i32, i32 } %2220, 2, !dbg !40
  %2224 = extractvalue { i32, i32, i32, i32 } %2220, 3, !dbg !40
  %2225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %757, !dbg !40
  %2226 = ptrtoint ptr addrspace(3) %2225 to i32, !dbg !40
  %2227 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2226) #2, !dbg !40
  %2228 = extractvalue { i32, i32, i32, i32 } %2227, 0, !dbg !40
  %2229 = extractvalue { i32, i32, i32, i32 } %2227, 1, !dbg !40
  %2230 = extractvalue { i32, i32, i32, i32 } %2227, 2, !dbg !40
  %2231 = extractvalue { i32, i32, i32, i32 } %2227, 3, !dbg !40
  %2232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2182, i32 %758, !dbg !40
  %2233 = ptrtoint ptr addrspace(3) %2232 to i32, !dbg !40
  %2234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2233) #2, !dbg !40
  %2235 = extractvalue { i32, i32, i32, i32 } %2234, 0, !dbg !40
  %2236 = extractvalue { i32, i32, i32, i32 } %2234, 1, !dbg !40
  %2237 = extractvalue { i32, i32, i32, i32 } %2234, 2, !dbg !40
  %2238 = extractvalue { i32, i32, i32, i32 } %2234, 3, !dbg !40
  %2239 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1813, float %1814, float %1815, float %1816, i32 %2186, i32 %2187, i32 %2188, i32 %2189, i32 %1983, i32 %1984) #2, !dbg !68
  %2240 = extractvalue { float, float, float, float } %2239, 0, !dbg !68
  %2241 = extractvalue { float, float, float, float } %2239, 1, !dbg !68
  %2242 = extractvalue { float, float, float, float } %2239, 2, !dbg !68
  %2243 = extractvalue { float, float, float, float } %2239, 3, !dbg !68
  %2244 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1817, float %1818, float %1819, float %1820, i32 %2186, i32 %2187, i32 %2188, i32 %2189, i32 %1993, i32 %1994) #2, !dbg !68
  %2245 = extractvalue { float, float, float, float } %2244, 0, !dbg !68
  %2246 = extractvalue { float, float, float, float } %2244, 1, !dbg !68
  %2247 = extractvalue { float, float, float, float } %2244, 2, !dbg !68
  %2248 = extractvalue { float, float, float, float } %2244, 3, !dbg !68
  %2249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1821, float %1822, float %1823, float %1824, i32 %2186, i32 %2187, i32 %2188, i32 %2189, i32 %2003, i32 %2004) #2, !dbg !68
  %2250 = extractvalue { float, float, float, float } %2249, 0, !dbg !68
  %2251 = extractvalue { float, float, float, float } %2249, 1, !dbg !68
  %2252 = extractvalue { float, float, float, float } %2249, 2, !dbg !68
  %2253 = extractvalue { float, float, float, float } %2249, 3, !dbg !68
  %2254 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1825, float %1826, float %1827, float %1828, i32 %2186, i32 %2187, i32 %2188, i32 %2189, i32 %2013, i32 %2014) #2, !dbg !68
  %2255 = extractvalue { float, float, float, float } %2254, 0, !dbg !68
  %2256 = extractvalue { float, float, float, float } %2254, 1, !dbg !68
  %2257 = extractvalue { float, float, float, float } %2254, 2, !dbg !68
  %2258 = extractvalue { float, float, float, float } %2254, 3, !dbg !68
  %2259 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1829, float %1830, float %1831, float %1832, i32 %2214, i32 %2215, i32 %2216, i32 %2217, i32 %1983, i32 %1984) #2, !dbg !68
  %2260 = extractvalue { float, float, float, float } %2259, 0, !dbg !68
  %2261 = extractvalue { float, float, float, float } %2259, 1, !dbg !68
  %2262 = extractvalue { float, float, float, float } %2259, 2, !dbg !68
  %2263 = extractvalue { float, float, float, float } %2259, 3, !dbg !68
  %2264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1833, float %1834, float %1835, float %1836, i32 %2214, i32 %2215, i32 %2216, i32 %2217, i32 %1993, i32 %1994) #2, !dbg !68
  %2265 = extractvalue { float, float, float, float } %2264, 0, !dbg !68
  %2266 = extractvalue { float, float, float, float } %2264, 1, !dbg !68
  %2267 = extractvalue { float, float, float, float } %2264, 2, !dbg !68
  %2268 = extractvalue { float, float, float, float } %2264, 3, !dbg !68
  %2269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1837, float %1838, float %1839, float %1840, i32 %2214, i32 %2215, i32 %2216, i32 %2217, i32 %2003, i32 %2004) #2, !dbg !68
  %2270 = extractvalue { float, float, float, float } %2269, 0, !dbg !68
  %2271 = extractvalue { float, float, float, float } %2269, 1, !dbg !68
  %2272 = extractvalue { float, float, float, float } %2269, 2, !dbg !68
  %2273 = extractvalue { float, float, float, float } %2269, 3, !dbg !68
  %2274 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1841, float %1842, float %1843, float %1844, i32 %2214, i32 %2215, i32 %2216, i32 %2217, i32 %2013, i32 %2014) #2, !dbg !68
  %2275 = extractvalue { float, float, float, float } %2274, 0, !dbg !68
  %2276 = extractvalue { float, float, float, float } %2274, 1, !dbg !68
  %2277 = extractvalue { float, float, float, float } %2274, 2, !dbg !68
  %2278 = extractvalue { float, float, float, float } %2274, 3, !dbg !68
  %2279 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2240, float %2241, float %2242, float %2243, i32 %2193, i32 %2194, i32 %2195, i32 %2196, i32 %1985, i32 %1986) #2, !dbg !68
  %2280 = extractvalue { float, float, float, float } %2279, 0, !dbg !68
  %2281 = extractvalue { float, float, float, float } %2279, 1, !dbg !68
  %2282 = extractvalue { float, float, float, float } %2279, 2, !dbg !68
  %2283 = extractvalue { float, float, float, float } %2279, 3, !dbg !68
  %2284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2245, float %2246, float %2247, float %2248, i32 %2193, i32 %2194, i32 %2195, i32 %2196, i32 %1995, i32 %1996) #2, !dbg !68
  %2285 = extractvalue { float, float, float, float } %2284, 0, !dbg !68
  %2286 = extractvalue { float, float, float, float } %2284, 1, !dbg !68
  %2287 = extractvalue { float, float, float, float } %2284, 2, !dbg !68
  %2288 = extractvalue { float, float, float, float } %2284, 3, !dbg !68
  %2289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2250, float %2251, float %2252, float %2253, i32 %2193, i32 %2194, i32 %2195, i32 %2196, i32 %2005, i32 %2006) #2, !dbg !68
  %2290 = extractvalue { float, float, float, float } %2289, 0, !dbg !68
  %2291 = extractvalue { float, float, float, float } %2289, 1, !dbg !68
  %2292 = extractvalue { float, float, float, float } %2289, 2, !dbg !68
  %2293 = extractvalue { float, float, float, float } %2289, 3, !dbg !68
  %2294 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2255, float %2256, float %2257, float %2258, i32 %2193, i32 %2194, i32 %2195, i32 %2196, i32 %2015, i32 %2016) #2, !dbg !68
  %2295 = extractvalue { float, float, float, float } %2294, 0, !dbg !68
  %2296 = extractvalue { float, float, float, float } %2294, 1, !dbg !68
  %2297 = extractvalue { float, float, float, float } %2294, 2, !dbg !68
  %2298 = extractvalue { float, float, float, float } %2294, 3, !dbg !68
  %2299 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2260, float %2261, float %2262, float %2263, i32 %2221, i32 %2222, i32 %2223, i32 %2224, i32 %1985, i32 %1986) #2, !dbg !68
  %2300 = extractvalue { float, float, float, float } %2299, 0, !dbg !68
  %2301 = extractvalue { float, float, float, float } %2299, 1, !dbg !68
  %2302 = extractvalue { float, float, float, float } %2299, 2, !dbg !68
  %2303 = extractvalue { float, float, float, float } %2299, 3, !dbg !68
  %2304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2265, float %2266, float %2267, float %2268, i32 %2221, i32 %2222, i32 %2223, i32 %2224, i32 %1995, i32 %1996) #2, !dbg !68
  %2305 = extractvalue { float, float, float, float } %2304, 0, !dbg !68
  %2306 = extractvalue { float, float, float, float } %2304, 1, !dbg !68
  %2307 = extractvalue { float, float, float, float } %2304, 2, !dbg !68
  %2308 = extractvalue { float, float, float, float } %2304, 3, !dbg !68
  %2309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2270, float %2271, float %2272, float %2273, i32 %2221, i32 %2222, i32 %2223, i32 %2224, i32 %2005, i32 %2006) #2, !dbg !68
  %2310 = extractvalue { float, float, float, float } %2309, 0, !dbg !68
  %2311 = extractvalue { float, float, float, float } %2309, 1, !dbg !68
  %2312 = extractvalue { float, float, float, float } %2309, 2, !dbg !68
  %2313 = extractvalue { float, float, float, float } %2309, 3, !dbg !68
  %2314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2275, float %2276, float %2277, float %2278, i32 %2221, i32 %2222, i32 %2223, i32 %2224, i32 %2015, i32 %2016) #2, !dbg !68
  %2315 = extractvalue { float, float, float, float } %2314, 0, !dbg !68
  %2316 = extractvalue { float, float, float, float } %2314, 1, !dbg !68
  %2317 = extractvalue { float, float, float, float } %2314, 2, !dbg !68
  %2318 = extractvalue { float, float, float, float } %2314, 3, !dbg !68
  %2319 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2280, float %2281, float %2282, float %2283, i32 %2200, i32 %2201, i32 %2202, i32 %2203, i32 %1988, i32 %1989) #2, !dbg !68
  %2320 = extractvalue { float, float, float, float } %2319, 0, !dbg !68
  %2321 = extractvalue { float, float, float, float } %2319, 1, !dbg !68
  %2322 = extractvalue { float, float, float, float } %2319, 2, !dbg !68
  %2323 = extractvalue { float, float, float, float } %2319, 3, !dbg !68
  %2324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2285, float %2286, float %2287, float %2288, i32 %2200, i32 %2201, i32 %2202, i32 %2203, i32 %1998, i32 %1999) #2, !dbg !68
  %2325 = extractvalue { float, float, float, float } %2324, 0, !dbg !68
  %2326 = extractvalue { float, float, float, float } %2324, 1, !dbg !68
  %2327 = extractvalue { float, float, float, float } %2324, 2, !dbg !68
  %2328 = extractvalue { float, float, float, float } %2324, 3, !dbg !68
  %2329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2290, float %2291, float %2292, float %2293, i32 %2200, i32 %2201, i32 %2202, i32 %2203, i32 %2008, i32 %2009) #2, !dbg !68
  %2330 = extractvalue { float, float, float, float } %2329, 0, !dbg !68
  %2331 = extractvalue { float, float, float, float } %2329, 1, !dbg !68
  %2332 = extractvalue { float, float, float, float } %2329, 2, !dbg !68
  %2333 = extractvalue { float, float, float, float } %2329, 3, !dbg !68
  %2334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2295, float %2296, float %2297, float %2298, i32 %2200, i32 %2201, i32 %2202, i32 %2203, i32 %2018, i32 %2019) #2, !dbg !68
  %2335 = extractvalue { float, float, float, float } %2334, 0, !dbg !68
  %2336 = extractvalue { float, float, float, float } %2334, 1, !dbg !68
  %2337 = extractvalue { float, float, float, float } %2334, 2, !dbg !68
  %2338 = extractvalue { float, float, float, float } %2334, 3, !dbg !68
  %2339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2300, float %2301, float %2302, float %2303, i32 %2228, i32 %2229, i32 %2230, i32 %2231, i32 %1988, i32 %1989) #2, !dbg !68
  %2340 = extractvalue { float, float, float, float } %2339, 0, !dbg !68
  %2341 = extractvalue { float, float, float, float } %2339, 1, !dbg !68
  %2342 = extractvalue { float, float, float, float } %2339, 2, !dbg !68
  %2343 = extractvalue { float, float, float, float } %2339, 3, !dbg !68
  %2344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2305, float %2306, float %2307, float %2308, i32 %2228, i32 %2229, i32 %2230, i32 %2231, i32 %1998, i32 %1999) #2, !dbg !68
  %2345 = extractvalue { float, float, float, float } %2344, 0, !dbg !68
  %2346 = extractvalue { float, float, float, float } %2344, 1, !dbg !68
  %2347 = extractvalue { float, float, float, float } %2344, 2, !dbg !68
  %2348 = extractvalue { float, float, float, float } %2344, 3, !dbg !68
  %2349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2310, float %2311, float %2312, float %2313, i32 %2228, i32 %2229, i32 %2230, i32 %2231, i32 %2008, i32 %2009) #2, !dbg !68
  %2350 = extractvalue { float, float, float, float } %2349, 0, !dbg !68
  %2351 = extractvalue { float, float, float, float } %2349, 1, !dbg !68
  %2352 = extractvalue { float, float, float, float } %2349, 2, !dbg !68
  %2353 = extractvalue { float, float, float, float } %2349, 3, !dbg !68
  %2354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2315, float %2316, float %2317, float %2318, i32 %2228, i32 %2229, i32 %2230, i32 %2231, i32 %2018, i32 %2019) #2, !dbg !68
  %2355 = extractvalue { float, float, float, float } %2354, 0, !dbg !68
  %2356 = extractvalue { float, float, float, float } %2354, 1, !dbg !68
  %2357 = extractvalue { float, float, float, float } %2354, 2, !dbg !68
  %2358 = extractvalue { float, float, float, float } %2354, 3, !dbg !68
  %2359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2320, float %2321, float %2322, float %2323, i32 %2207, i32 %2208, i32 %2209, i32 %2210, i32 %1990, i32 %1991) #2, !dbg !68
  %2360 = extractvalue { float, float, float, float } %2359, 0, !dbg !68
  %2361 = extractvalue { float, float, float, float } %2359, 1, !dbg !68
  %2362 = extractvalue { float, float, float, float } %2359, 2, !dbg !68
  %2363 = extractvalue { float, float, float, float } %2359, 3, !dbg !68
  %2364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2325, float %2326, float %2327, float %2328, i32 %2207, i32 %2208, i32 %2209, i32 %2210, i32 %2000, i32 %2001) #2, !dbg !68
  %2365 = extractvalue { float, float, float, float } %2364, 0, !dbg !68
  %2366 = extractvalue { float, float, float, float } %2364, 1, !dbg !68
  %2367 = extractvalue { float, float, float, float } %2364, 2, !dbg !68
  %2368 = extractvalue { float, float, float, float } %2364, 3, !dbg !68
  %2369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2330, float %2331, float %2332, float %2333, i32 %2207, i32 %2208, i32 %2209, i32 %2210, i32 %2010, i32 %2011) #2, !dbg !68
  %2370 = extractvalue { float, float, float, float } %2369, 0, !dbg !68
  %2371 = extractvalue { float, float, float, float } %2369, 1, !dbg !68
  %2372 = extractvalue { float, float, float, float } %2369, 2, !dbg !68
  %2373 = extractvalue { float, float, float, float } %2369, 3, !dbg !68
  %2374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2335, float %2336, float %2337, float %2338, i32 %2207, i32 %2208, i32 %2209, i32 %2210, i32 %2020, i32 %2021) #2, !dbg !68
  %2375 = extractvalue { float, float, float, float } %2374, 0, !dbg !68
  %2376 = extractvalue { float, float, float, float } %2374, 1, !dbg !68
  %2377 = extractvalue { float, float, float, float } %2374, 2, !dbg !68
  %2378 = extractvalue { float, float, float, float } %2374, 3, !dbg !68
  %2379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2340, float %2341, float %2342, float %2343, i32 %2235, i32 %2236, i32 %2237, i32 %2238, i32 %1990, i32 %1991) #2, !dbg !68
  %2380 = extractvalue { float, float, float, float } %2379, 0, !dbg !68
  %2381 = extractvalue { float, float, float, float } %2379, 1, !dbg !68
  %2382 = extractvalue { float, float, float, float } %2379, 2, !dbg !68
  %2383 = extractvalue { float, float, float, float } %2379, 3, !dbg !68
  %2384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2345, float %2346, float %2347, float %2348, i32 %2235, i32 %2236, i32 %2237, i32 %2238, i32 %2000, i32 %2001) #2, !dbg !68
  %2385 = extractvalue { float, float, float, float } %2384, 0, !dbg !68
  %2386 = extractvalue { float, float, float, float } %2384, 1, !dbg !68
  %2387 = extractvalue { float, float, float, float } %2384, 2, !dbg !68
  %2388 = extractvalue { float, float, float, float } %2384, 3, !dbg !68
  %2389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2350, float %2351, float %2352, float %2353, i32 %2235, i32 %2236, i32 %2237, i32 %2238, i32 %2010, i32 %2011) #2, !dbg !68
  %2390 = extractvalue { float, float, float, float } %2389, 0, !dbg !68
  %2391 = extractvalue { float, float, float, float } %2389, 1, !dbg !68
  %2392 = extractvalue { float, float, float, float } %2389, 2, !dbg !68
  %2393 = extractvalue { float, float, float, float } %2389, 3, !dbg !68
  %2394 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2355, float %2356, float %2357, float %2358, i32 %2235, i32 %2236, i32 %2237, i32 %2238, i32 %2020, i32 %2021) #2, !dbg !68
  %2395 = extractvalue { float, float, float, float } %2394, 0, !dbg !68
  %2396 = extractvalue { float, float, float, float } %2394, 1, !dbg !68
  %2397 = extractvalue { float, float, float, float } %2394, 2, !dbg !68
  %2398 = extractvalue { float, float, float, float } %2394, 3, !dbg !68
  %2399 = add i32 %765, 1, !dbg !34
  %2400 = icmp sgt i32 %2399, 2, !dbg !34
  %2401 = select i1 %2400, i32 0, i32 %2399, !dbg !34
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !31
  %2402 = shl i32 %indvars.iv.tr, 6, !dbg !31
  %2403 = add i32 %2402, 192, !dbg !31
  %2404 = sext i32 %2403 to i64, !dbg !31
  %2405 = or disjoint i64 %2404, %68, !dbg !35
  %2406 = or disjoint i64 %2404, %69, !dbg !35
  %2407 = or disjoint i64 %2404, %70, !dbg !35
  %2408 = or disjoint i64 %2404, %71, !dbg !35
  %2409 = or disjoint i64 %2404, %72, !dbg !35
  %2410 = or disjoint i64 %2404, %73, !dbg !35
  %2411 = or disjoint i64 %2404, %74, !dbg !35
  %2412 = or disjoint i64 %2404, %75, !dbg !35
  %2413 = or disjoint i64 %2404, %64, !dbg !35
  %2414 = or disjoint i64 %2404, %65, !dbg !35
  %2415 = or disjoint i64 %2404, %66, !dbg !35
  %2416 = or disjoint i64 %2404, %67, !dbg !35
  %2417 = or disjoint i64 %2404, %77, !dbg !35
  %2418 = shl nsw i64 %2405, 12, !dbg !35
  %2419 = shl nsw i64 %2406, 12, !dbg !35
  %2420 = shl nsw i64 %2407, 12, !dbg !35
  %2421 = shl nsw i64 %2408, 12, !dbg !35
  %2422 = shl nsw i64 %2409, 12, !dbg !35
  %2423 = shl nsw i64 %2410, 12, !dbg !35
  %2424 = shl nsw i64 %2411, 12, !dbg !35
  %2425 = shl nsw i64 %2412, 12, !dbg !35
  %2426 = shl nsw i64 %2413, 12, !dbg !35
  %2427 = shl nsw i64 %2414, 12, !dbg !35
  %2428 = shl nsw i64 %2415, 12, !dbg !35
  %2429 = shl nsw i64 %2416, 12, !dbg !35
  %2430 = or disjoint i64 %2418, %76, !dbg !35
  %2431 = or disjoint i64 %2419, %76, !dbg !35
  %2432 = or disjoint i64 %2420, %76, !dbg !35
  %2433 = or disjoint i64 %2421, %76, !dbg !35
  %2434 = or disjoint i64 %2422, %76, !dbg !35
  %2435 = or disjoint i64 %2423, %76, !dbg !35
  %2436 = or disjoint i64 %2424, %76, !dbg !35
  %2437 = or disjoint i64 %2425, %76, !dbg !35
  %2438 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2430, !dbg !35
  %2439 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2431, !dbg !35
  %2440 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2432, !dbg !35
  %2441 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2433, !dbg !35
  %2442 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2434, !dbg !35
  %2443 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2435, !dbg !35
  %2444 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2436, !dbg !35
  %2445 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2437, !dbg !35
  %2446 = icmp sgt i32 %2403, -1, !dbg !35
  %2447 = icmp slt i64 %2405, %88, !dbg !35
  %2448 = icmp slt i64 %2406, %88, !dbg !35
  %2449 = icmp slt i64 %2407, %88, !dbg !35
  %2450 = icmp slt i64 %2408, %88, !dbg !35
  %2451 = icmp slt i64 %2409, %88, !dbg !35
  %2452 = icmp slt i64 %2410, %88, !dbg !35
  %2453 = icmp slt i64 %2411, %88, !dbg !35
  %2454 = icmp slt i64 %2412, %88, !dbg !35
  %2455 = icmp slt i64 %2413, %88, !dbg !35
  %2456 = icmp slt i64 %2414, %88, !dbg !35
  %2457 = icmp slt i64 %2415, %88, !dbg !35
  %2458 = icmp slt i64 %2416, %88, !dbg !35
  %2459 = and i1 %2446, %2447, !dbg !35
  %2460 = and i1 %2446, %2448, !dbg !35
  %2461 = and i1 %2446, %2449, !dbg !35
  %2462 = and i1 %2446, %2450, !dbg !35
  %2463 = and i1 %2446, %2451, !dbg !35
  %2464 = and i1 %2446, %2452, !dbg !35
  %2465 = and i1 %2446, %2453, !dbg !35
  %2466 = and i1 %2446, %2454, !dbg !35
  %2467 = and i1 %2446, %2455, !dbg !35
  %2468 = and i1 %2446, %2456, !dbg !35
  %2469 = and i1 %2446, %2457, !dbg !35
  %2470 = and i1 %2446, %2458, !dbg !35
  %2471 = shl i32 %2401, 12, !dbg !35
  %2472 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %2471, !dbg !35
  %2473 = and i1 %830, %2459, !dbg !34
  %2474 = and i1 %830, %2460, !dbg !34
  %2475 = and i1 %830, %2461, !dbg !34
  %2476 = and i1 %830, %2462, !dbg !34
  %2477 = and i1 %830, %2463, !dbg !34
  %2478 = and i1 %830, %2464, !dbg !34
  %2479 = and i1 %830, %2465, !dbg !34
  %2480 = and i1 %830, %2466, !dbg !34
  %2481 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %144, !dbg !35
  %2482 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %146, !dbg !35
  %2483 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %148, !dbg !35
  %2484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %150, !dbg !35
  %2485 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %152, !dbg !35
  %2486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %154, !dbg !35
  %2487 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %156, !dbg !35
  %2488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2472, i32 %158, !dbg !35
  %2489 = select i1 %2473, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2481, ptr addrspace(1) %2438, i32 %2489) #2, !dbg !35
  %2490 = select i1 %2474, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2482, ptr addrspace(1) %2439, i32 %2490) #2, !dbg !35
  %2491 = select i1 %2475, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2483, ptr addrspace(1) %2440, i32 %2491) #2, !dbg !35
  %2492 = select i1 %2476, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2484, ptr addrspace(1) %2441, i32 %2492) #2, !dbg !35
  %2493 = select i1 %2477, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2485, ptr addrspace(1) %2442, i32 %2493) #2, !dbg !35
  %2494 = select i1 %2478, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2486, ptr addrspace(1) %2443, i32 %2494) #2, !dbg !35
  %2495 = select i1 %2479, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2487, ptr addrspace(1) %2444, i32 %2495) #2, !dbg !35
  %2496 = select i1 %2480, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2488, ptr addrspace(1) %2445, i32 %2496) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %2497 = or disjoint i64 %2418, %87, !dbg !36
  %2498 = or disjoint i64 %2419, %87, !dbg !36
  %2499 = or disjoint i64 %2420, %87, !dbg !36
  %2500 = or disjoint i64 %2421, %87, !dbg !36
  %2501 = or disjoint i64 %2422, %87, !dbg !36
  %2502 = or disjoint i64 %2423, %87, !dbg !36
  %2503 = or disjoint i64 %2424, %87, !dbg !36
  %2504 = or disjoint i64 %2425, %87, !dbg !36
  %2505 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2497, !dbg !36
  %2506 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2498, !dbg !36
  %2507 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2499, !dbg !36
  %2508 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2500, !dbg !36
  %2509 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2501, !dbg !36
  %2510 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2502, !dbg !36
  %2511 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2503, !dbg !36
  %2512 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2504, !dbg !36
  %2513 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %2471, !dbg !36
  %2514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %144, !dbg !36
  %2515 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %146, !dbg !36
  %2516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %148, !dbg !36
  %2517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %150, !dbg !36
  %2518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %152, !dbg !36
  %2519 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %154, !dbg !36
  %2520 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %156, !dbg !36
  %2521 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2513, i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2514, ptr addrspace(1) %2505, i32 %2489) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2515, ptr addrspace(1) %2506, i32 %2490) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2516, ptr addrspace(1) %2507, i32 %2491) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2517, ptr addrspace(1) %2508, i32 %2492) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2518, ptr addrspace(1) %2509, i32 %2493) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2519, ptr addrspace(1) %2510, i32 %2494) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2520, ptr addrspace(1) %2511, i32 %2495) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2521, ptr addrspace(1) %2512, i32 %2496) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %2522 = add nsw i64 %2426, %79, !dbg !37
  %2523 = add nsw i64 %2427, %79, !dbg !37
  %2524 = add nsw i64 %2428, %79, !dbg !37
  %2525 = add nsw i64 %2429, %79, !dbg !37
  %2526 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2522, !dbg !37
  %2527 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2523, !dbg !37
  %2528 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2524, !dbg !37
  %2529 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2525, !dbg !37
  %2530 = and i1 %82, %2467, !dbg !37
  %2531 = and i1 %82, %2468, !dbg !37
  %2532 = and i1 %82, %2469, !dbg !37
  %2533 = and i1 %82, %2470, !dbg !37
  %2534 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %2471, !dbg !37
  %2535 = and i1 %830, %2530, !dbg !34
  %2536 = and i1 %830, %2531, !dbg !34
  %2537 = and i1 %830, %2532, !dbg !34
  %2538 = and i1 %830, %2533, !dbg !34
  %2539 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2534, i32 %211, !dbg !37
  %2540 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2534, i32 %213, !dbg !37
  %2541 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2534, i32 %218, !dbg !37
  %2542 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2534, i32 %220, !dbg !37
  %2543 = select i1 %2535, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2539, ptr addrspace(1) %2526, i32 %2543) #2, !dbg !37
  %2544 = select i1 %2536, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2540, ptr addrspace(1) %2527, i32 %2544) #2, !dbg !37
  %2545 = select i1 %2537, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2541, ptr addrspace(1) %2528, i32 %2545) #2, !dbg !37
  %2546 = select i1 %2538, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2542, ptr addrspace(1) %2529, i32 %2546) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx560 = shl nsw i64 %2417, 7, !dbg !38
  %2547 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx560, !dbg !38
  %2548 = icmp slt i64 %2417, %88, !dbg !38
  %2549 = and i1 %2446, %2548, !dbg !38
  %.idx561 = shl i32 %2401, 8, !dbg !38
  %2550 = and i1 %830, %2549, !dbg !34
  %gep663 = getelementptr i8, ptr addrspace(3) %229, i32 %.idx561, !dbg !38
  %2551 = select i1 %2550, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep663, ptr addrspace(1) %2547, i32 %2551) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %2552 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2430, !dbg !39
  %2553 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2431, !dbg !39
  %2554 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2432, !dbg !39
  %2555 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2433, !dbg !39
  %2556 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2434, !dbg !39
  %2557 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2435, !dbg !39
  %2558 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2436, !dbg !39
  %2559 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2437, !dbg !39
  %2560 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %2471, !dbg !39
  %2561 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %144, !dbg !39
  %2562 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %146, !dbg !39
  %2563 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %148, !dbg !39
  %2564 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %150, !dbg !39
  %2565 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %152, !dbg !39
  %2566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %154, !dbg !39
  %2567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %156, !dbg !39
  %2568 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2560, i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2561, ptr addrspace(1) %2552, i32 %2489) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2562, ptr addrspace(1) %2553, i32 %2490) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2563, ptr addrspace(1) %2554, i32 %2491) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2564, ptr addrspace(1) %2555, i32 %2492) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2565, ptr addrspace(1) %2556, i32 %2493) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2566, ptr addrspace(1) %2557, i32 %2494) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2567, ptr addrspace(1) %2558, i32 %2495) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2568, ptr addrspace(1) %2559, i32 %2496) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %2569 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2497, !dbg !40
  %2570 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2498, !dbg !40
  %2571 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2499, !dbg !40
  %2572 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2500, !dbg !40
  %2573 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2501, !dbg !40
  %2574 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2502, !dbg !40
  %2575 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2503, !dbg !40
  %2576 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2504, !dbg !40
  %2577 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %2471, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %2578 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %144, !dbg !40
  %2579 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %146, !dbg !40
  %2580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %148, !dbg !40
  %2581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %150, !dbg !40
  %2582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %152, !dbg !40
  %2583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %154, !dbg !40
  %2584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %156, !dbg !40
  %2585 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2577, i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2578, ptr addrspace(1) %2569, i32 %2489) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2579, ptr addrspace(1) %2570, i32 %2490) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2580, ptr addrspace(1) %2571, i32 %2491) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2581, ptr addrspace(1) %2572, i32 %2492) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2582, ptr addrspace(1) %2573, i32 %2493) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2583, ptr addrspace(1) %2574, i32 %2494) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2584, ptr addrspace(1) %2575, i32 %2495) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2585, ptr addrspace(1) %2576, i32 %2496) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %760, !dbg !34

._crit_edge:                                      ; preds = %760, %.._crit_edge_crit_edge
  %.pre-phi694 = phi i32 [ %.pre693, %.._crit_edge_crit_edge ], [ %598, %760 ], !dbg !41
  %.pre-phi692 = phi i32 [ %.pre691, %.._crit_edge_crit_edge ], [ %612, %760 ], !dbg !41
  %2586 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2143, %760 ]
  %2587 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2144, %760 ]
  %2588 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2145, %760 ]
  %2589 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2146, %760 ]
  %2590 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2148, %760 ]
  %2591 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2149, %760 ]
  %2592 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2150, %760 ]
  %2593 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2151, %760 ]
  %2594 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2153, %760 ]
  %2595 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2154, %760 ]
  %2596 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2155, %760 ]
  %2597 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2156, %760 ]
  %2598 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2158, %760 ]
  %2599 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2159, %760 ]
  %2600 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2160, %760 ]
  %2601 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2161, %760 ]
  %2602 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2163, %760 ]
  %2603 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2164, %760 ]
  %2604 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2165, %760 ]
  %2605 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2166, %760 ]
  %2606 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2168, %760 ]
  %2607 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2169, %760 ]
  %2608 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2170, %760 ]
  %2609 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2171, %760 ]
  %2610 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2173, %760 ]
  %2611 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2174, %760 ]
  %2612 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2175, %760 ]
  %2613 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2176, %760 ]
  %2614 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2178, %760 ]
  %2615 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2179, %760 ]
  %2616 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2180, %760 ]
  %2617 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2181, %760 ]
  %2618 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2360, %760 ]
  %2619 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2361, %760 ]
  %2620 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2362, %760 ]
  %2621 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2363, %760 ]
  %2622 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2365, %760 ]
  %2623 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2366, %760 ]
  %2624 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2367, %760 ]
  %2625 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2368, %760 ]
  %2626 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2370, %760 ]
  %2627 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2371, %760 ]
  %2628 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2372, %760 ]
  %2629 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2373, %760 ]
  %2630 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2375, %760 ]
  %2631 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2376, %760 ]
  %2632 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2377, %760 ]
  %2633 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2378, %760 ]
  %2634 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2380, %760 ]
  %2635 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2381, %760 ]
  %2636 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2382, %760 ]
  %2637 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2383, %760 ]
  %2638 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2385, %760 ]
  %2639 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2386, %760 ]
  %2640 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2387, %760 ]
  %2641 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2388, %760 ]
  %2642 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2390, %760 ]
  %2643 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2391, %760 ]
  %2644 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2392, %760 ]
  %2645 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2393, %760 ]
  %2646 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2395, %760 ]
  %2647 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2396, %760 ]
  %2648 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2397, %760 ]
  %2649 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2398, %760 ]
  %2650 = zext nneg i32 %15 to i64, !dbg !69
  %2651 = getelementptr float, ptr addrspace(1) %6, i64 %2650, !dbg !69
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %2652 = shl nuw nsw i32 %33, 2, !dbg !41
  %2653 = and i32 %2652, 28, !dbg !41
  %2654 = zext nneg i32 %2653 to i64, !dbg !41
  %2655 = or disjoint i64 %2654, %32, !dbg !41
  %.idx266 = shl nuw nsw i64 %68, 9, !dbg !41
  %2656 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx266, !dbg !41
  %2657 = getelementptr float, ptr addrspace(1) %2656, i64 %2655, !dbg !41
  %.idx267 = shl nuw nsw i64 %69, 9, !dbg !41
  %2658 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx267, !dbg !41
  %2659 = getelementptr float, ptr addrspace(1) %2658, i64 %2655, !dbg !41
  %.idx268 = shl nuw nsw i64 %70, 9, !dbg !41
  %2660 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx268, !dbg !41
  %2661 = getelementptr float, ptr addrspace(1) %2660, i64 %2655, !dbg !41
  %.idx269 = shl nuw nsw i64 %71, 9, !dbg !41
  %2662 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx269, !dbg !41
  %2663 = getelementptr float, ptr addrspace(1) %2662, i64 %2655, !dbg !41
  %.idx270 = shl nuw nsw i64 %72, 9, !dbg !41
  %2664 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx270, !dbg !41
  %2665 = getelementptr float, ptr addrspace(1) %2664, i64 %2655, !dbg !41
  %.idx271 = shl nuw nsw i64 %73, 9, !dbg !41
  %2666 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx271, !dbg !41
  %2667 = getelementptr float, ptr addrspace(1) %2666, i64 %2655, !dbg !41
  %.idx272 = shl nuw nsw i64 %74, 9, !dbg !41
  %2668 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx272, !dbg !41
  %2669 = getelementptr float, ptr addrspace(1) %2668, i64 %2655, !dbg !41
  %.idx273 = shl nuw nsw i64 %75, 9, !dbg !41
  %2670 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx273, !dbg !41
  %2671 = getelementptr float, ptr addrspace(1) %2670, i64 %2655, !dbg !41
  %2672 = icmp slt i64 %2655, 128, !dbg !41
  %2673 = and i1 %80, %2672, !dbg !41
  %2674 = and i32 %54, 192, !dbg !41
  %2675 = or disjoint i32 %2674, %.pre-phi692, !dbg !41
  %2676 = or disjoint i32 %2675, %.pre-phi694, !dbg !41
  %2677 = or disjoint i32 %2676, %56, !dbg !41
  %2678 = and i32 %2652, 252, !dbg !41
  %2679 = lshr i32 %2677, 3, !dbg !41
  %2680 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2679, !dbg !41
  %2681 = getelementptr inbounds nuw float, ptr addrspace(3) %2680, i32 %2677, !dbg !41
  %2682 = insertelement <2 x float> poison, float %2586, i64 0, !dbg !41
  %2683 = insertelement <2 x float> %2682, float %2587, i64 1, !dbg !41
  store <2 x float> %2683, ptr addrspace(3) %2681, align 8, !dbg !41
  %2684 = or disjoint i32 %2677, 256, !dbg !41
  %2685 = lshr i32 %2684, 3, !dbg !41
  %2686 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2685, !dbg !41
  %2687 = getelementptr inbounds nuw float, ptr addrspace(3) %2686, i32 %2684, !dbg !41
  %2688 = insertelement <2 x float> poison, float %2588, i64 0, !dbg !41
  %2689 = insertelement <2 x float> %2688, float %2589, i64 1, !dbg !41
  store <2 x float> %2689, ptr addrspace(3) %2687, align 8, !dbg !41
  %2690 = getelementptr inbounds nuw i8, ptr addrspace(3) %2681, i32 32, !dbg !41
  %2691 = insertelement <2 x float> poison, float %2590, i64 0, !dbg !41
  %2692 = insertelement <2 x float> %2691, float %2591, i64 1, !dbg !41
  store <2 x float> %2692, ptr addrspace(3) %2690, align 8, !dbg !41
  %2693 = or disjoint i32 %2677, 264, !dbg !41
  %2694 = lshr i32 %2693, 3, !dbg !41
  %2695 = and i32 %2694, 536870908, !dbg !41
  %2696 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2695, !dbg !41
  %2697 = getelementptr inbounds nuw float, ptr addrspace(3) %2696, i32 %2693, !dbg !41
  %2698 = insertelement <2 x float> poison, float %2592, i64 0, !dbg !41
  %2699 = insertelement <2 x float> %2698, float %2593, i64 1, !dbg !41
  store <2 x float> %2699, ptr addrspace(3) %2697, align 8, !dbg !41
  %2700 = getelementptr inbounds nuw i8, ptr addrspace(3) %2681, i32 64, !dbg !41
  %2701 = insertelement <2 x float> poison, float %2594, i64 0, !dbg !41
  %2702 = insertelement <2 x float> %2701, float %2595, i64 1, !dbg !41
  store <2 x float> %2702, ptr addrspace(3) %2700, align 8, !dbg !41
  %2703 = or disjoint i32 %2677, 272, !dbg !41
  %2704 = lshr i32 %2703, 3, !dbg !41
  %2705 = and i32 %2704, 536870908, !dbg !41
  %2706 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2705, !dbg !41
  %2707 = getelementptr inbounds nuw float, ptr addrspace(3) %2706, i32 %2703, !dbg !41
  %2708 = insertelement <2 x float> poison, float %2596, i64 0, !dbg !41
  %2709 = insertelement <2 x float> %2708, float %2597, i64 1, !dbg !41
  store <2 x float> %2709, ptr addrspace(3) %2707, align 8, !dbg !41
  %2710 = getelementptr inbounds nuw i8, ptr addrspace(3) %2681, i32 96, !dbg !41
  %2711 = insertelement <2 x float> poison, float %2598, i64 0, !dbg !41
  %2712 = insertelement <2 x float> %2711, float %2599, i64 1, !dbg !41
  store <2 x float> %2712, ptr addrspace(3) %2710, align 8, !dbg !41
  %2713 = or disjoint i32 %2677, 280, !dbg !41
  %2714 = lshr i32 %2713, 3, !dbg !41
  %2715 = and i32 %2714, 536870908, !dbg !41
  %2716 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2715, !dbg !41
  %2717 = getelementptr inbounds nuw float, ptr addrspace(3) %2716, i32 %2713, !dbg !41
  %2718 = insertelement <2 x float> poison, float %2600, i64 0, !dbg !41
  %2719 = insertelement <2 x float> %2718, float %2601, i64 1, !dbg !41
  store <2 x float> %2719, ptr addrspace(3) %2717, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2720 = lshr i32 %33, 1, !dbg !41
  %2721 = and i32 %2720, 28, !dbg !41
  %2722 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2721, !dbg !41
  %2723 = getelementptr inbounds nuw float, ptr addrspace(3) %2722, i32 %2678, !dbg !41
  %2724 = load <4 x i32>, ptr addrspace(3) %2723, align 16, !dbg !41
  %2725 = or disjoint i32 %2678, 256, !dbg !41
  %2726 = lshr i32 %2725, 3, !dbg !41
  %2727 = and i32 %2726, 60, !dbg !41
  %2728 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2727, !dbg !41
  %2729 = getelementptr inbounds nuw float, ptr addrspace(3) %2728, i32 %2725, !dbg !41
  %2730 = load <4 x i32>, ptr addrspace(3) %2729, align 16, !dbg !41
  %2731 = or disjoint i32 %2678, 512, !dbg !41
  %2732 = lshr i32 %2731, 3, !dbg !41
  %2733 = and i32 %2732, 92, !dbg !41
  %2734 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2733, !dbg !41
  %2735 = getelementptr inbounds nuw float, ptr addrspace(3) %2734, i32 %2731, !dbg !41
  %2736 = load <4 x i32>, ptr addrspace(3) %2735, align 16, !dbg !41
  %2737 = or disjoint i32 %2678, 768, !dbg !41
  %2738 = lshr i32 %2737, 3, !dbg !41
  %2739 = and i32 %2738, 124, !dbg !41
  %2740 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2739, !dbg !41
  %2741 = getelementptr inbounds nuw float, ptr addrspace(3) %2740, i32 %2737, !dbg !41
  %2742 = load <4 x i32>, ptr addrspace(3) %2741, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2743 = insertelement <2 x float> poison, float %2602, i64 0, !dbg !41
  %2744 = insertelement <2 x float> %2743, float %2603, i64 1, !dbg !41
  store <2 x float> %2744, ptr addrspace(3) %2681, align 8, !dbg !41
  %2745 = insertelement <2 x float> poison, float %2604, i64 0, !dbg !41
  %2746 = insertelement <2 x float> %2745, float %2605, i64 1, !dbg !41
  store <2 x float> %2746, ptr addrspace(3) %2687, align 8, !dbg !41
  %2747 = insertelement <2 x float> poison, float %2606, i64 0, !dbg !41
  %2748 = insertelement <2 x float> %2747, float %2607, i64 1, !dbg !41
  store <2 x float> %2748, ptr addrspace(3) %2690, align 8, !dbg !41
  %2749 = insertelement <2 x float> poison, float %2608, i64 0, !dbg !41
  %2750 = insertelement <2 x float> %2749, float %2609, i64 1, !dbg !41
  store <2 x float> %2750, ptr addrspace(3) %2697, align 8, !dbg !41
  %2751 = insertelement <2 x float> poison, float %2610, i64 0, !dbg !41
  %2752 = insertelement <2 x float> %2751, float %2611, i64 1, !dbg !41
  store <2 x float> %2752, ptr addrspace(3) %2700, align 8, !dbg !41
  %2753 = insertelement <2 x float> poison, float %2612, i64 0, !dbg !41
  %2754 = insertelement <2 x float> %2753, float %2613, i64 1, !dbg !41
  store <2 x float> %2754, ptr addrspace(3) %2707, align 8, !dbg !41
  %2755 = insertelement <2 x float> poison, float %2614, i64 0, !dbg !41
  %2756 = insertelement <2 x float> %2755, float %2615, i64 1, !dbg !41
  store <2 x float> %2756, ptr addrspace(3) %2710, align 8, !dbg !41
  %2757 = insertelement <2 x float> poison, float %2616, i64 0, !dbg !41
  %2758 = insertelement <2 x float> %2757, float %2617, i64 1, !dbg !41
  store <2 x float> %2758, ptr addrspace(3) %2717, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2759 = load <4 x i32>, ptr addrspace(3) %2723, align 16, !dbg !41
  %2760 = load <4 x i32>, ptr addrspace(3) %2729, align 16, !dbg !41
  %2761 = load <4 x i32>, ptr addrspace(3) %2735, align 16, !dbg !41
  %2762 = load <4 x i32>, ptr addrspace(3) %2741, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %2724, i64 0, !dbg !41
  %.extract305 = extractelement <4 x i32> %2724, i64 1, !dbg !41
  %.extract306 = extractelement <4 x i32> %2724, i64 2, !dbg !41
  %.extract307 = extractelement <4 x i32> %2724, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract305, i32 %.extract306, i32 %.extract307, ptr addrspace(1) %2657, i1 %2673) #2, !dbg !41
  %.extract308 = extractelement <4 x i32> %2730, i64 0, !dbg !41
  %.extract309 = extractelement <4 x i32> %2730, i64 1, !dbg !41
  %.extract310 = extractelement <4 x i32> %2730, i64 2, !dbg !41
  %.extract311 = extractelement <4 x i32> %2730, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract308, i32 %.extract309, i32 %.extract310, i32 %.extract311, ptr addrspace(1) %2659, i1 %2673) #2, !dbg !41
  %.extract312 = extractelement <4 x i32> %2736, i64 0, !dbg !41
  %.extract313 = extractelement <4 x i32> %2736, i64 1, !dbg !41
  %.extract314 = extractelement <4 x i32> %2736, i64 2, !dbg !41
  %.extract315 = extractelement <4 x i32> %2736, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract312, i32 %.extract313, i32 %.extract314, i32 %.extract315, ptr addrspace(1) %2661, i1 %2673) #2, !dbg !41
  %.extract316 = extractelement <4 x i32> %2742, i64 0, !dbg !41
  %.extract317 = extractelement <4 x i32> %2742, i64 1, !dbg !41
  %.extract318 = extractelement <4 x i32> %2742, i64 2, !dbg !41
  %.extract319 = extractelement <4 x i32> %2742, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract316, i32 %.extract317, i32 %.extract318, i32 %.extract319, ptr addrspace(1) %2663, i1 %2673) #2, !dbg !41
  %.extract320 = extractelement <4 x i32> %2759, i64 0, !dbg !41
  %.extract321 = extractelement <4 x i32> %2759, i64 1, !dbg !41
  %.extract322 = extractelement <4 x i32> %2759, i64 2, !dbg !41
  %.extract323 = extractelement <4 x i32> %2759, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract320, i32 %.extract321, i32 %.extract322, i32 %.extract323, ptr addrspace(1) %2665, i1 %2673) #2, !dbg !41
  %.extract324 = extractelement <4 x i32> %2760, i64 0, !dbg !41
  %.extract325 = extractelement <4 x i32> %2760, i64 1, !dbg !41
  %.extract326 = extractelement <4 x i32> %2760, i64 2, !dbg !41
  %.extract327 = extractelement <4 x i32> %2760, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract324, i32 %.extract325, i32 %.extract326, i32 %.extract327, ptr addrspace(1) %2667, i1 %2673) #2, !dbg !41
  %.extract328 = extractelement <4 x i32> %2761, i64 0, !dbg !41
  %.extract329 = extractelement <4 x i32> %2761, i64 1, !dbg !41
  %.extract330 = extractelement <4 x i32> %2761, i64 2, !dbg !41
  %.extract331 = extractelement <4 x i32> %2761, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract328, i32 %.extract329, i32 %.extract330, i32 %.extract331, ptr addrspace(1) %2669, i1 %2673) #2, !dbg !41
  %.extract332 = extractelement <4 x i32> %2762, i64 0, !dbg !41
  %.extract333 = extractelement <4 x i32> %2762, i64 1, !dbg !41
  %.extract334 = extractelement <4 x i32> %2762, i64 2, !dbg !41
  %.extract335 = extractelement <4 x i32> %2762, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract332, i32 %.extract333, i32 %.extract334, i32 %.extract335, ptr addrspace(1) %2671, i1 %2673) #2, !dbg !41
  %.idx336 = shl nuw nsw i64 %264, 9, !dbg !70
  %2763 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx336, !dbg !70
  %2764 = getelementptr float, ptr addrspace(1) %2763, i64 %2655, !dbg !70
  %.idx337 = shl nuw nsw i64 %265, 9, !dbg !70
  %2765 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx337, !dbg !70
  %2766 = getelementptr float, ptr addrspace(1) %2765, i64 %2655, !dbg !70
  %.idx338 = shl nuw nsw i64 %266, 9, !dbg !70
  %2767 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx338, !dbg !70
  %2768 = getelementptr float, ptr addrspace(1) %2767, i64 %2655, !dbg !70
  %.idx339 = shl nuw nsw i64 %267, 9, !dbg !70
  %2769 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx339, !dbg !70
  %2770 = getelementptr float, ptr addrspace(1) %2769, i64 %2655, !dbg !70
  %.idx340 = shl nuw nsw i64 %268, 9, !dbg !70
  %2771 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx340, !dbg !70
  %2772 = getelementptr float, ptr addrspace(1) %2771, i64 %2655, !dbg !70
  %.idx341 = shl nuw nsw i64 %269, 9, !dbg !70
  %2773 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx341, !dbg !70
  %2774 = getelementptr float, ptr addrspace(1) %2773, i64 %2655, !dbg !70
  %.idx342 = shl nuw nsw i64 %270, 9, !dbg !70
  %2775 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx342, !dbg !70
  %2776 = getelementptr float, ptr addrspace(1) %2775, i64 %2655, !dbg !70
  %.idx343 = shl nuw nsw i64 %271, 9, !dbg !70
  %2777 = getelementptr i8, ptr addrspace(1) %2651, i64 %.idx343, !dbg !70
  %2778 = getelementptr float, ptr addrspace(1) %2777, i64 %2655, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2779 = insertelement <2 x float> poison, float %2618, i64 0, !dbg !70
  %2780 = insertelement <2 x float> %2779, float %2619, i64 1, !dbg !70
  store <2 x float> %2780, ptr addrspace(3) %2681, align 8, !dbg !70
  %2781 = insertelement <2 x float> poison, float %2620, i64 0, !dbg !70
  %2782 = insertelement <2 x float> %2781, float %2621, i64 1, !dbg !70
  store <2 x float> %2782, ptr addrspace(3) %2687, align 8, !dbg !70
  %2783 = insertelement <2 x float> poison, float %2622, i64 0, !dbg !70
  %2784 = insertelement <2 x float> %2783, float %2623, i64 1, !dbg !70
  store <2 x float> %2784, ptr addrspace(3) %2690, align 8, !dbg !70
  %2785 = insertelement <2 x float> poison, float %2624, i64 0, !dbg !70
  %2786 = insertelement <2 x float> %2785, float %2625, i64 1, !dbg !70
  store <2 x float> %2786, ptr addrspace(3) %2697, align 8, !dbg !70
  %2787 = insertelement <2 x float> poison, float %2626, i64 0, !dbg !70
  %2788 = insertelement <2 x float> %2787, float %2627, i64 1, !dbg !70
  store <2 x float> %2788, ptr addrspace(3) %2700, align 8, !dbg !70
  %2789 = insertelement <2 x float> poison, float %2628, i64 0, !dbg !70
  %2790 = insertelement <2 x float> %2789, float %2629, i64 1, !dbg !70
  store <2 x float> %2790, ptr addrspace(3) %2707, align 8, !dbg !70
  %2791 = insertelement <2 x float> poison, float %2630, i64 0, !dbg !70
  %2792 = insertelement <2 x float> %2791, float %2631, i64 1, !dbg !70
  store <2 x float> %2792, ptr addrspace(3) %2710, align 8, !dbg !70
  %2793 = insertelement <2 x float> poison, float %2632, i64 0, !dbg !70
  %2794 = insertelement <2 x float> %2793, float %2633, i64 1, !dbg !70
  store <2 x float> %2794, ptr addrspace(3) %2717, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2795 = load <4 x i32>, ptr addrspace(3) %2723, align 16, !dbg !70
  %2796 = load <4 x i32>, ptr addrspace(3) %2729, align 16, !dbg !70
  %2797 = load <4 x i32>, ptr addrspace(3) %2735, align 16, !dbg !70
  %2798 = load <4 x i32>, ptr addrspace(3) %2741, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2799 = insertelement <2 x float> poison, float %2634, i64 0, !dbg !70
  %2800 = insertelement <2 x float> %2799, float %2635, i64 1, !dbg !70
  store <2 x float> %2800, ptr addrspace(3) %2681, align 8, !dbg !70
  %2801 = insertelement <2 x float> poison, float %2636, i64 0, !dbg !70
  %2802 = insertelement <2 x float> %2801, float %2637, i64 1, !dbg !70
  store <2 x float> %2802, ptr addrspace(3) %2687, align 8, !dbg !70
  %2803 = insertelement <2 x float> poison, float %2638, i64 0, !dbg !70
  %2804 = insertelement <2 x float> %2803, float %2639, i64 1, !dbg !70
  store <2 x float> %2804, ptr addrspace(3) %2690, align 8, !dbg !70
  %2805 = insertelement <2 x float> poison, float %2640, i64 0, !dbg !70
  %2806 = insertelement <2 x float> %2805, float %2641, i64 1, !dbg !70
  store <2 x float> %2806, ptr addrspace(3) %2697, align 8, !dbg !70
  %2807 = insertelement <2 x float> poison, float %2642, i64 0, !dbg !70
  %2808 = insertelement <2 x float> %2807, float %2643, i64 1, !dbg !70
  store <2 x float> %2808, ptr addrspace(3) %2700, align 8, !dbg !70
  %2809 = insertelement <2 x float> poison, float %2644, i64 0, !dbg !70
  %2810 = insertelement <2 x float> %2809, float %2645, i64 1, !dbg !70
  store <2 x float> %2810, ptr addrspace(3) %2707, align 8, !dbg !70
  %2811 = insertelement <2 x float> poison, float %2646, i64 0, !dbg !70
  %2812 = insertelement <2 x float> %2811, float %2647, i64 1, !dbg !70
  store <2 x float> %2812, ptr addrspace(3) %2710, align 8, !dbg !70
  %2813 = insertelement <2 x float> poison, float %2648, i64 0, !dbg !70
  %2814 = insertelement <2 x float> %2813, float %2649, i64 1, !dbg !70
  store <2 x float> %2814, ptr addrspace(3) %2717, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2815 = load <4 x i32>, ptr addrspace(3) %2723, align 16, !dbg !70
  %2816 = load <4 x i32>, ptr addrspace(3) %2729, align 16, !dbg !70
  %2817 = load <4 x i32>, ptr addrspace(3) %2735, align 16, !dbg !70
  %2818 = load <4 x i32>, ptr addrspace(3) %2741, align 16, !dbg !70
  %.extract375 = extractelement <4 x i32> %2795, i64 0, !dbg !70
  %.extract376 = extractelement <4 x i32> %2795, i64 1, !dbg !70
  %.extract377 = extractelement <4 x i32> %2795, i64 2, !dbg !70
  %.extract378 = extractelement <4 x i32> %2795, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract375, i32 %.extract376, i32 %.extract377, i32 %.extract378, ptr addrspace(1) %2764, i1 %2673) #2, !dbg !70
  %.extract379 = extractelement <4 x i32> %2796, i64 0, !dbg !70
  %.extract380 = extractelement <4 x i32> %2796, i64 1, !dbg !70
  %.extract381 = extractelement <4 x i32> %2796, i64 2, !dbg !70
  %.extract382 = extractelement <4 x i32> %2796, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract379, i32 %.extract380, i32 %.extract381, i32 %.extract382, ptr addrspace(1) %2766, i1 %2673) #2, !dbg !70
  %.extract383 = extractelement <4 x i32> %2797, i64 0, !dbg !70
  %.extract384 = extractelement <4 x i32> %2797, i64 1, !dbg !70
  %.extract385 = extractelement <4 x i32> %2797, i64 2, !dbg !70
  %.extract386 = extractelement <4 x i32> %2797, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract383, i32 %.extract384, i32 %.extract385, i32 %.extract386, ptr addrspace(1) %2768, i1 %2673) #2, !dbg !70
  %.extract387 = extractelement <4 x i32> %2798, i64 0, !dbg !70
  %.extract388 = extractelement <4 x i32> %2798, i64 1, !dbg !70
  %.extract389 = extractelement <4 x i32> %2798, i64 2, !dbg !70
  %.extract390 = extractelement <4 x i32> %2798, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract387, i32 %.extract388, i32 %.extract389, i32 %.extract390, ptr addrspace(1) %2770, i1 %2673) #2, !dbg !70
  %.extract391 = extractelement <4 x i32> %2815, i64 0, !dbg !70
  %.extract392 = extractelement <4 x i32> %2815, i64 1, !dbg !70
  %.extract393 = extractelement <4 x i32> %2815, i64 2, !dbg !70
  %.extract394 = extractelement <4 x i32> %2815, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract391, i32 %.extract392, i32 %.extract393, i32 %.extract394, ptr addrspace(1) %2772, i1 %2673) #2, !dbg !70
  %.extract395 = extractelement <4 x i32> %2816, i64 0, !dbg !70
  %.extract396 = extractelement <4 x i32> %2816, i64 1, !dbg !70
  %.extract397 = extractelement <4 x i32> %2816, i64 2, !dbg !70
  %.extract398 = extractelement <4 x i32> %2816, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract395, i32 %.extract396, i32 %.extract397, i32 %.extract398, ptr addrspace(1) %2774, i1 %2673) #2, !dbg !70
  %.extract399 = extractelement <4 x i32> %2817, i64 0, !dbg !70
  %.extract400 = extractelement <4 x i32> %2817, i64 1, !dbg !70
  %.extract401 = extractelement <4 x i32> %2817, i64 2, !dbg !70
  %.extract402 = extractelement <4 x i32> %2817, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract399, i32 %.extract400, i32 %.extract401, i32 %.extract402, ptr addrspace(1) %2776, i1 %2673) #2, !dbg !70
  %.extract403 = extractelement <4 x i32> %2818, i64 0, !dbg !70
  %.extract404 = extractelement <4 x i32> %2818, i64 1, !dbg !70
  %.extract405 = extractelement <4 x i32> %2818, i64 2, !dbg !70
  %.extract406 = extractelement <4 x i32> %2818, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract403, i32 %.extract404, i32 %.extract405, i32 %.extract406, ptr addrspace(1) %2778, i1 %2673) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 211, column: 23, scope: !5)
!42 = !DILocation(line: 113, column: 43, scope: !5)
!43 = !DILocation(line: 113, column: 37, scope: !5)
!44 = !DILocation(line: 114, column: 31, scope: !5)
!45 = !DILocation(line: 117, column: 35, scope: !5)
!46 = !DILocation(line: 127, column: 26, scope: !5)
!47 = !DILocation(line: 131, column: 31, scope: !5)
!48 = !DILocation(line: 141, column: 52, scope: !5)
!49 = !DILocation(line: 145, column: 33, scope: !5)
!50 = !DILocation(line: 145, column: 26, scope: !5)
!51 = !DILocation(line: 147, column: 30, scope: !5)
!52 = !DILocation(line: 147, column: 39, scope: !5)
!53 = !DILocation(line: 149, column: 30, scope: !5)
!54 = !DILocation(line: 149, column: 50, scope: !5)
!55 = !DILocation(line: 150, column: 56, scope: !5)
!56 = !DILocation(line: 150, column: 45, scope: !5)
!57 = !DILocation(line: 150, column: 60, scope: !5)
!58 = !DILocation(line: 150, column: 31, scope: !5)
!59 = !DILocation(line: 153, column: 53, scope: !5)
!60 = !DILocation(line: 153, column: 42, scope: !5)
!61 = !DILocation(line: 153, column: 59, scope: !5)
!62 = !DILocation(line: 153, column: 24, scope: !5)
!63 = !DILocation(line: 154, column: 27, scope: !5)
!64 = !DILocation(line: 155, column: 20, scope: !5)
!65 = !DILocation(line: 157, column: 24, scope: !5)
!66 = !DILocation(line: 179, column: 21, scope: !5)
!67 = !DILocation(line: 186, column: 28, scope: !5)
!68 = !DILocation(line: 193, column: 32, scope: !5)
!69 = !DILocation(line: 95, column: 18, scope: !5)
!70 = !DILocation(line: 214, column: 27, scope: !5)
!71 = !DILocation(line: 209, column: 4, scope: !5)
