//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_scaled_dot_kkt_fwd_kernel // -- Begin function chunk_scaled_dot_kkt_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_scaled_dot_kkt_fwd_kernel
.visible .entry chunk_scaled_dot_kkt_fwd_kernel(
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_3,
	.param .u32 chunk_scaled_dot_kkt_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_5
)
.reqntid 256
{
	.reg .pred 	%p<60>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<597>;
	.reg .b64 	%rd<109>;
	.loc	1 28 0                          // chunk_scaled_dot_kkt.py:28:0
$L__func_begin0:
	.loc	1 28 0                          // chunk_scaled_dot_kkt.py:28:0

// %bb.0:
	ld.param.b64 	%rd37, [chunk_scaled_dot_kkt_fwd_kernel_param_0];
	ld.param.b64 	%rd38, [chunk_scaled_dot_kkt_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 43 30                         // chunk_scaled_dot_kkt.py:43:30
	mov.u32 	%r315, %ctaid.x;
	ld.param.b64 	%rd39, [chunk_scaled_dot_kkt_fwd_kernel_param_2];
	.loc	1 43 48                         // chunk_scaled_dot_kkt.py:43:48
	mov.u32 	%r316, %ctaid.y;
	.loc	1 50 25                         // chunk_scaled_dot_kkt.py:50:25
	and.b32 	%r317, %r316, 65504;
	ld.param.b64 	%rd40, [chunk_scaled_dot_kkt_fwd_kernel_param_3];
	.loc	1 44 33                         // chunk_scaled_dot_kkt.py:44:33
	and.b32 	%r318, %r316, 31;
	ld.param.b32 	%r319, [chunk_scaled_dot_kkt_fwd_kernel_param_4];
	.loc	1 51 16                         // chunk_scaled_dot_kkt.py:51:16
	shl.b32 	%r320, %r315, 6;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	mov.u32 	%r321, %tid.x;
	shr.u32 	%r322, %r321, 5;
	bfe.s32 	%r323, %r321, 4, 1;
	bfe.s32 	%r324, %r321, 5, 1;
	bfe.s32 	%r325, %r321, 6, 1;
	and.b32 	%r326, %r321, 128;
	shr.u32 	%r327, %r321, 4;
	bfe.u32 	%r328, %r321, 4, 4;
	or.b32 	%r329, %r328, 16;
	or.b32 	%r330, %r328, 32;
	or.b32 	%r331, %r327, 48;
	bfe.u32 	%r332, %r321, 2, 3;
	shr.u32 	%r333, %r321, 1;
	and.b32 	%r334, %r333, 48;
	or.b32 	%r335, %r334, %r332;
	or.b32 	%r336, %r335, 8;
	shl.b32 	%r337, %r321, 1;
	and.b32 	%r338, %r337, 6;
	shr.u32 	%r339, %r326, 2;
	shl.b32 	%r340, %r321, 2;
	and.b32 	%r341, %r340, 60;
	.loc	1 51 21                         // chunk_scaled_dot_kkt.py:51:21
	or.b32 	%r342, %r335, %r320;
	or.b32 	%r343, %r336, %r320;
	.loc	1 52 16                         // chunk_scaled_dot_kkt.py:52:16
	setp.lt.s32 	%p28, %r342, %r319;
	setp.lt.s32 	%p29, %r343, %r319;
	.loc	1 54 42                         // chunk_scaled_dot_kkt.py:54:42
	mul.lo.s32 	%r344, %r317, %r319;
	.loc	1 54 38                         // chunk_scaled_dot_kkt.py:54:38
	mul.wide.s32 	%rd41, %r344, 2;
	add.s64 	%rd42, %rd39, %rd41;
	.loc	1 54 46                         // chunk_scaled_dot_kkt.py:54:46
	mul.wide.u32 	%rd43, %r318, 2;
	add.s64 	%rd44, %rd42, %rd43;
	.loc	1 54 83                         // chunk_scaled_dot_kkt.py:54:83
	cvt.s64.s32 	%rd45, %r319;
	cvt.s64.s32 	%rd46, %r320;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd47, %r328;
	cvt.u64.u32 	%rd48, %r329;
	cvt.u64.u32 	%rd49, %r330;
	cvt.u64.u32 	%rd50, %r331;
	cvt.u64.u32 	%rd51, %r335;
	cvt.u64.u32 	%rd52, %r336;
	or.b64 	%rd53, %rd47, %rd46;
	or.b64 	%rd54, %rd48, %rd46;
	or.b64 	%rd55, %rd49, %rd46;
	or.b64 	%rd56, %rd50, %rd46;
	or.b64 	%rd57, %rd51, %rd46;
	or.b64 	%rd58, %rd52, %rd46;
	shl.b64 	%rd59, %rd57, 6;
	add.s64 	%rd1, %rd44, %rd59;
	shl.b64 	%rd60, %rd58, 6;
	add.s64 	%rd2, %rd44, %rd60;
	setp.gt.s32 	%p30, %r320, -1;
	setp.lt.s64 	%p31, %rd57, %rd45;
	setp.lt.s64 	%p32, %rd58, %rd45;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	or.b32 	%r345, %r338, %r339;
	or.b32 	%r346, %r345, 1;
	or.b32 	%r347, %r345, 8;
	or.b32 	%r348, %r345, 9;
	or.b32 	%r349, %r345, 16;
	or.b32 	%r350, %r345, 17;
	or.b32 	%r351, %r345, 24;
	or.b32 	%r352, %r345, 25;
	.loc	1 51 21                         // chunk_scaled_dot_kkt.py:51:21
	or.b32 	%r353, %r345, %r320;
	or.b32 	%r354, %r346, %r320;
	or.b32 	%r355, %r347, %r320;
	or.b32 	%r356, %r348, %r320;
	or.b32 	%r357, %r349, %r320;
	or.b32 	%r358, %r350, %r320;
	or.b32 	%r359, %r351, %r320;
	or.b32 	%r360, %r352, %r320;
	.loc	1 52 16                         // chunk_scaled_dot_kkt.py:52:16
	setp.lt.s32 	%p33, %r360, %r319;
	setp.lt.s32 	%p34, %r359, %r319;
	setp.lt.s32 	%p35, %r358, %r319;
	setp.lt.s32 	%p36, %r357, %r319;
	setp.lt.s32 	%p37, %r356, %r319;
	setp.lt.s32 	%p38, %r355, %r319;
	setp.lt.s32 	%p39, %r354, %r319;
	setp.lt.s32 	%p40, %r353, %r319;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	and.pred 	%p1, %p30, %p31;
	and.pred 	%p2, %p30, %p32;
	and.pred 	%p16, %p30, %p40;
	and.pred 	%p17, %p30, %p39;
	and.pred 	%p18, %p30, %p38;
	and.pred 	%p19, %p30, %p37;
	and.pred 	%p20, %p30, %p36;
	and.pred 	%p21, %p30, %p35;
	and.pred 	%p22, %p30, %p34;
	and.pred 	%p23, %p30, %p33;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p1 ld.global.b16 { %rs1 }, [ %rd1 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p2 ld.global.b16 { %rs2 }, [ %rd2 + 0 ];
	// end inline asm
	.loc	1 59 45                         // chunk_scaled_dot_kkt.py:59:45
	or.b32 	%r361, %r344, %r318;
	.loc	1 59 52                         // chunk_scaled_dot_kkt.py:59:52
	shl.b32 	%r362, %r361, 7;
	.loc	1 59 36                         // chunk_scaled_dot_kkt.py:59:36
	mul.wide.s32 	%rd61, %r362, 2;
	add.s64 	%rd62, %rd37, %rd61;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	shl.b32 	%r363, %r321, 3;
	and.b32 	%r364, %r363, 56;
	and.b32 	%r365, %r363, 120;
	shl.b64 	%rd63, %rd53, 13;
	add.s64 	%rd64, %rd62, %rd63;
	mul.wide.u32 	%rd65, %r365, 2;
	add.s64 	%rd3, %rd64, %rd65;
	shl.b64 	%rd66, %rd54, 13;
	add.s64 	%rd67, %rd62, %rd66;
	add.s64 	%rd4, %rd67, %rd65;
	shl.b64 	%rd68, %rd55, 13;
	add.s64 	%rd69, %rd62, %rd68;
	add.s64 	%rd5, %rd69, %rd65;
	shl.b64 	%rd70, %rd56, 13;
	add.s64 	%rd71, %rd62, %rd70;
	add.s64 	%rd6, %rd71, %rd65;
	setp.lt.s64 	%p41, %rd53, %rd45;
	setp.lt.s64 	%p42, %rd54, %rd45;
	setp.lt.s64 	%p43, %rd55, %rd45;
	setp.lt.s64 	%p44, %rd56, %rd45;
	and.pred 	%p3, %p30, %p41;
	and.pred 	%p4, %p30, %p42;
	and.pred 	%p5, %p30, %p43;
	and.pred 	%p6, %p30, %p44;
	// begin inline asm
	mov.u32 %r1, 0x0;
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	@%p3 ld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd3 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	@%p4 ld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd4 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	@%p5 ld.global.v4.b32 { %r9, %r10, %r11, %r12 }, [ %rd5 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	mov.u32 %r16, 0x0;
	@%p6 ld.global.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd6 + 0 ];
	// end inline asm
	shl.b32 	%r366, %r321, 9;
	and.b32 	%r367, %r366, 4096;
	or.b32 	%r368, %r364, %r367;
	and.b32 	%r369, %r323, 72;
	and.b32 	%r370, %r324, 144;
	and.b32 	%r371, %r325, 288;
	or.b32 	%r372, %r370, %r369;
	xor.b32 	%r373, %r372, %r368;
	xor.b32 	%r374, %r373, %r371;
	shl.b32 	%r375, %r326, 2;
	shl.b32 	%r376, %r374, 1;
	mov.b32 	%r377, global_smem;
	add.s32 	%r378, %r377, %r376;
	shl.b32 	%r379, %r326, 3;
	add.s32 	%r380, %r378, %r379;
	st.shared.v4.b32 	[%r380], {%r1, %r2, %r3, %r4};
	or.b32 	%r381, %r368, 1024;
	or.b32 	%r382, %r372, %r375;
	or.b32 	%r383, %r382, %r371;
	xor.b32 	%r384, %r383, %r381;
	shl.b32 	%r385, %r384, 1;
	add.s32 	%r386, %r377, %r385;
	st.shared.v4.b32 	[%r386], {%r5, %r6, %r7, %r8};
	or.b32 	%r387, %r368, 2048;
	xor.b32 	%r388, %r383, %r387;
	shl.b32 	%r389, %r388, 1;
	add.s32 	%r390, %r377, %r389;
	st.shared.v4.b32 	[%r390], {%r9, %r10, %r11, %r12};
	or.b32 	%r391, %r368, 3072;
	xor.b32 	%r392, %r383, %r391;
	shl.b32 	%r393, %r392, 1;
	add.s32 	%r394, %r377, %r393;
	st.shared.v4.b32 	[%r394], {%r13, %r14, %r15, %r16};
	.loc	1 61 27                         // chunk_scaled_dot_kkt.py:61:27
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r395, %r322, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r396, %r377, 4, 14;
	cvt.u64.u32 	%rd72, %r396;
	or.b64 	%rd7, %rd72, 4611686293338849280;
	shl.b32 	%r397, %r395, 10;
	and.b32 	%r398, %r397, 4096;
	add.s32 	%r399, %r398, %r377;
	bfe.u32 	%r400, %r399, 4, 14;
	cvt.u64.u32 	%rd73, %r400;
	or.b64 	%rd8, %rd73, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd7, %rd8, 0, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r401, %r377, 32;
	bfe.u32 	%r402, %r401, 4, 14;
	cvt.u64.u32 	%rd74, %r402;
	or.b64 	%rd9, %rd74, 4611686293338849280;
	add.s32 	%r403, %r398, %r401;
	bfe.u32 	%r404, %r403, 4, 14;
	cvt.u64.u32 	%rd75, %r404;
	or.b64 	%rd10, %rd75, 4611686293338849280;
	mov.pred 	%p7, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd9, %rd10, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r405, %r377, 64;
	bfe.u32 	%r406, %r405, 4, 14;
	cvt.u64.u32 	%rd76, %r406;
	or.b64 	%rd11, %rd76, 4611686293338849280;
	add.s32 	%r407, %r398, %r405;
	bfe.u32 	%r408, %r407, 4, 14;
	cvt.u64.u32 	%rd77, %r408;
	or.b64 	%rd12, %rd77, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd11, %rd12, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r409, %r377, 96;
	bfe.u32 	%r410, %r409, 4, 14;
	cvt.u64.u32 	%rd78, %r410;
	or.b64 	%rd13, %rd78, 4611686293338849280;
	add.s32 	%r411, %r398, %r409;
	bfe.u32 	%r412, %r411, 4, 14;
	cvt.u64.u32 	%rd79, %r412;
	or.b64 	%rd14, %rd79, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd13, %rd14, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r413, %r377, 8192;
	bfe.u32 	%r414, %r413, 4, 14;
	cvt.u64.u32 	%rd80, %r414;
	or.b64 	%rd15, %rd80, 4611686293338849280;
	add.s32 	%r415, %r398, %r413;
	bfe.u32 	%r416, %r415, 4, 14;
	cvt.u64.u32 	%rd81, %r416;
	or.b64 	%rd16, %rd81, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd15, %rd16, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r417, %r377, 8224;
	bfe.u32 	%r418, %r417, 4, 14;
	cvt.u64.u32 	%rd82, %r418;
	or.b64 	%rd17, %rd82, 4611686293338849280;
	add.s32 	%r419, %r398, %r417;
	bfe.u32 	%r420, %r419, 4, 14;
	cvt.u64.u32 	%rd83, %r420;
	or.b64 	%rd18, %rd83, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd17, %rd18, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r421, %r377, 8256;
	bfe.u32 	%r422, %r421, 4, 14;
	cvt.u64.u32 	%rd84, %r422;
	or.b64 	%rd19, %rd84, 4611686293338849280;
	add.s32 	%r423, %r398, %r421;
	bfe.u32 	%r424, %r423, 4, 14;
	cvt.u64.u32 	%rd85, %r424;
	or.b64 	%rd20, %rd85, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd19, %rd20, %p7, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r425, %r377, 8288;
	bfe.u32 	%r426, %r425, 4, 14;
	cvt.u64.u32 	%rd86, %r426;
	or.b64 	%rd21, %rd86, 4611686293338849280;
	add.s32 	%r427, %r398, %r425;
	bfe.u32 	%r428, %r427, 4, 14;
	cvt.u64.u32 	%rd87, %r428;
	or.b64 	%rd22, %rd87, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80}, %rd21, %rd22, %p7, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %r65,%r66,%r67,%r68,%r69,%r70,%r71,%r72,%r73,%r74,%r75,%r76,%r77,%r78,%r79,%r80
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 64 36                         // chunk_scaled_dot_kkt.py:64:36
	mul.wide.s32 	%rd88, %r344, 4;
	add.s64 	%rd89, %rd38, %rd88;
	.loc	1 64 44                         // chunk_scaled_dot_kkt.py:64:44
	mul.wide.u32 	%rd90, %r318, 4;
	add.s64 	%rd91, %rd89, %rd90;
	.loc	1 65 22                         // chunk_scaled_dot_kkt.py:65:22
	shl.b64 	%rd92, %rd57, 7;
	add.s64 	%rd23, %rd91, %rd92;
	shl.b64 	%rd93, %rd58, 7;
	add.s64 	%rd24, %rd91, %rd93;
	mul.wide.s32 	%rd94, %r353, 128;
	add.s64 	%rd25, %rd91, %rd94;
	mul.wide.s32 	%rd95, %r354, 128;
	add.s64 	%rd26, %rd91, %rd95;
	mul.wide.s32 	%rd96, %r355, 128;
	add.s64 	%rd27, %rd91, %rd96;
	mul.wide.s32 	%rd97, %r356, 128;
	add.s64 	%rd28, %rd91, %rd97;
	mul.wide.s32 	%rd98, %r357, 128;
	add.s64 	%rd29, %rd91, %rd98;
	mul.wide.s32 	%rd99, %r358, 128;
	add.s64 	%rd30, %rd91, %rd99;
	mul.wide.s32 	%rd100, %r359, 128;
	add.s64 	%rd31, %rd91, %rd100;
	mul.wide.s32 	%rd101, %r360, 128;
	add.s64 	%rd32, %rd91, %rd101;
	// begin inline asm
	mov.u32 %r289, 0x0;
	@%p1 ld.global.b32 { %r289 }, [ %rd23 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r290, 0x0;
	@%p2 ld.global.b32 { %r290 }, [ %rd24 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r291, 0x0;
	@%p16 ld.global.b32 { %r291 }, [ %rd25 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r292, 0x0;
	@%p17 ld.global.b32 { %r292 }, [ %rd26 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r293, 0x0;
	@%p18 ld.global.b32 { %r293 }, [ %rd27 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r294, 0x0;
	@%p19 ld.global.b32 { %r294 }, [ %rd28 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r295, 0x0;
	@%p20 ld.global.b32 { %r295 }, [ %rd29 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r296, 0x0;
	@%p21 ld.global.b32 { %r296 }, [ %rd30 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r297, 0x0;
	@%p22 ld.global.b32 { %r297 }, [ %rd31 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r298, 0x0;
	@%p23 ld.global.b32 { %r298 }, [ %rd32 + 0 ];
	// end inline asm
	.loc	1 66 34                         // chunk_scaled_dot_kkt.py:66:34
	sub.f32 	%r429, %r289, %r291;
	sub.f32 	%r430, %r289, %r292;
	sub.f32 	%r431, %r290, %r291;
	sub.f32 	%r432, %r290, %r292;
	sub.f32 	%r433, %r289, %r293;
	sub.f32 	%r434, %r289, %r294;
	sub.f32 	%r435, %r290, %r293;
	sub.f32 	%r436, %r290, %r294;
	sub.f32 	%r437, %r289, %r295;
	sub.f32 	%r438, %r289, %r296;
	sub.f32 	%r439, %r290, %r295;
	sub.f32 	%r440, %r290, %r296;
	sub.f32 	%r441, %r289, %r297;
	sub.f32 	%r442, %r289, %r298;
	sub.f32 	%r443, %r290, %r297;
	sub.f32 	%r444, %r290, %r298;
	.loc	1 67 19                         // chunk_scaled_dot_kkt.py:67:19
	mul.f32 	%r445, %r429, 0f3FB8AA3B;
	ex2.approx.f32 	%r446, %r445;
	mul.f32 	%r447, %r430, 0f3FB8AA3B;
	ex2.approx.f32 	%r448, %r447;
	mul.f32 	%r449, %r431, 0f3FB8AA3B;
	ex2.approx.f32 	%r450, %r449;
	mul.f32 	%r451, %r432, 0f3FB8AA3B;
	ex2.approx.f32 	%r452, %r451;
	mul.f32 	%r453, %r433, 0f3FB8AA3B;
	ex2.approx.f32 	%r454, %r453;
	mul.f32 	%r455, %r434, 0f3FB8AA3B;
	ex2.approx.f32 	%r456, %r455;
	mul.f32 	%r457, %r435, 0f3FB8AA3B;
	ex2.approx.f32 	%r458, %r457;
	mul.f32 	%r459, %r436, 0f3FB8AA3B;
	ex2.approx.f32 	%r460, %r459;
	mul.f32 	%r461, %r437, 0f3FB8AA3B;
	ex2.approx.f32 	%r462, %r461;
	mul.f32 	%r463, %r438, 0f3FB8AA3B;
	ex2.approx.f32 	%r464, %r463;
	mul.f32 	%r465, %r439, 0f3FB8AA3B;
	ex2.approx.f32 	%r466, %r465;
	mul.f32 	%r467, %r440, 0f3FB8AA3B;
	ex2.approx.f32 	%r468, %r467;
	mul.f32 	%r469, %r441, 0f3FB8AA3B;
	ex2.approx.f32 	%r470, %r469;
	mul.f32 	%r471, %r442, 0f3FB8AA3B;
	ex2.approx.f32 	%r472, %r471;
	mul.f32 	%r473, %r443, 0f3FB8AA3B;
	ex2.approx.f32 	%r474, %r473;
	mul.f32 	%r475, %r444, 0f3FB8AA3B;
	ex2.approx.f32 	%r476, %r475;
	.loc	1 67 15                         // chunk_scaled_dot_kkt.py:67:15
	mul.f32 	%r477, %r65, %r446;
	mul.f32 	%r478, %r66, %r448;
	mul.f32 	%r479, %r67, %r450;
	mul.f32 	%r480, %r68, %r452;
	mul.f32 	%r481, %r69, %r454;
	mul.f32 	%r482, %r70, %r456;
	mul.f32 	%r483, %r71, %r458;
	mul.f32 	%r484, %r72, %r460;
	mul.f32 	%r485, %r73, %r462;
	mul.f32 	%r486, %r74, %r464;
	mul.f32 	%r487, %r75, %r466;
	mul.f32 	%r488, %r76, %r468;
	mul.f32 	%r489, %r77, %r470;
	mul.f32 	%r490, %r78, %r472;
	mul.f32 	%r491, %r79, %r474;
	mul.f32 	%r492, %r80, %r476;
	.loc	1 68 11                         // chunk_scaled_dot_kkt.py:68:11
	cvt.f32.bf16 	%r493, %rs1;
	cvt.f32.bf16 	%r494, %rs2;
	mul.f32 	%r495, %r477, %r493;
	mul.f32 	%r496, %r478, %r493;
	mul.f32 	%r497, %r479, %r494;
	mul.f32 	%r498, %r480, %r494;
	mul.f32 	%r499, %r481, %r493;
	mul.f32 	%r500, %r482, %r493;
	mul.f32 	%r501, %r483, %r494;
	mul.f32 	%r502, %r484, %r494;
	mul.f32 	%r503, %r485, %r493;
	mul.f32 	%r504, %r486, %r493;
	mul.f32 	%r505, %r487, %r494;
	mul.f32 	%r506, %r488, %r494;
	mul.f32 	%r507, %r489, %r493;
	mul.f32 	%r508, %r490, %r493;
	mul.f32 	%r509, %r491, %r494;
	mul.f32 	%r510, %r492, %r494;
	.loc	1 70 26                         // chunk_scaled_dot_kkt.py:70:26
	setp.gt.u32 	%p45, %r335, %r345;
	setp.gt.u32 	%p46, %r335, %r346;
	setp.gt.u32 	%p47, %r336, %r345;
	setp.gt.u32 	%p48, %r336, %r346;
	setp.gt.u32 	%p49, %r335, %r347;
	setp.gt.u32 	%p50, %r335, %r348;
	setp.gt.u32 	%p51, %r336, %r348;
	setp.gt.u32 	%p52, %r335, %r349;
	setp.gt.u32 	%p53, %r335, %r350;
	setp.gt.u32 	%p54, %r336, %r349;
	setp.gt.u32 	%p55, %r336, %r350;
	setp.gt.u32 	%p56, %r335, %r351;
	setp.gt.u32 	%p57, %r335, %r352;
	setp.gt.u32 	%p58, %r336, %r351;
	setp.gt.u32 	%p59, %r336, %r352;
	.loc	1 72 48                         // chunk_scaled_dot_kkt.py:72:48
	shl.b32 	%r511, %r361, 6;
	.loc	1 72 32                         // chunk_scaled_dot_kkt.py:72:32
	mul.wide.s32 	%rd102, %r511, 4;
	add.s64 	%rd103, %rd40, %rd102;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	add.s64 	%rd104, %rd103, %rd63;
	mul.wide.u32 	%rd105, %r341, 4;
	add.s64 	%rd33, %rd104, %rd105;
	add.s64 	%rd106, %rd103, %rd66;
	add.s64 	%rd34, %rd106, %rd105;
	add.s64 	%rd107, %rd103, %rd68;
	add.s64 	%rd35, %rd107, %rd105;
	add.s64 	%rd108, %rd103, %rd70;
	add.s64 	%rd36, %rd108, %rd105;
	bar.sync 	0;
	shl.b32 	%r512, %r321, 4;
	and.b32 	%r513, %r512, 448;
	shl.b32 	%r514, %r321, 5;
	and.b32 	%r515, %r514, 3072;
	or.b32 	%r516, %r515, %r513;
	or.b32 	%r517, %r345, %r516;
	and.b32 	%r518, %r340, 508;
	or.b32 	%r519, %r518, %r375;
	shr.u32 	%r520, %r516, 2;
	add.s32 	%r521, %r377, %r520;
	shl.b32 	%r522, %r517, 2;
	add.s32 	%r523, %r521, %r522;
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r524, %r495, 0, %p40;
	selp.b32 	%r525, %r524, 0, %p45;
	selp.b32 	%r526, %r525, 0, %p28;
	selp.b32 	%r527, %r496, 0, %p39;
	selp.b32 	%r528, %r527, 0, %p46;
	selp.b32 	%r529, %r528, 0, %p28;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r523], {%r526, %r529};
	or.b32 	%r530, %r517, 512;
	shr.u32 	%r531, %r530, 2;
	and.b32 	%r532, %r531, 1008;
	add.s32 	%r533, %r377, %r532;
	add.s32 	%r534, %r533, %r522;
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r535, %r497, 0, %p40;
	selp.b32 	%r536, %r535, 0, %p47;
	selp.b32 	%r537, %r536, 0, %p29;
	selp.b32 	%r538, %r498, 0, %p39;
	selp.b32 	%r539, %r538, 0, %p48;
	selp.b32 	%r540, %r539, 0, %p29;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r534+2048], {%r537, %r540};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r541, %r499, 0, %p38;
	selp.b32 	%r542, %r541, 0, %p49;
	selp.b32 	%r543, %r542, 0, %p28;
	selp.b32 	%r544, %r500, 0, %p37;
	selp.b32 	%r545, %r544, 0, %p50;
	selp.b32 	%r546, %r545, 0, %p28;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r523+32], {%r543, %r546};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r547, %r501, 0, %p38;
	selp.b32 	%r548, %r547, 0, %p45;
	selp.b32 	%r549, %r548, 0, %p29;
	selp.b32 	%r550, %r502, 0, %p37;
	selp.b32 	%r551, %r550, 0, %p51;
	selp.b32 	%r552, %r551, 0, %p29;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r534+2080], {%r549, %r552};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r553, %r503, 0, %p36;
	selp.b32 	%r554, %r553, 0, %p52;
	selp.b32 	%r555, %r554, 0, %p28;
	selp.b32 	%r556, %r504, 0, %p35;
	selp.b32 	%r557, %r556, 0, %p53;
	selp.b32 	%r558, %r557, 0, %p28;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r523+64], {%r555, %r558};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r559, %r505, 0, %p36;
	selp.b32 	%r560, %r559, 0, %p54;
	selp.b32 	%r561, %r560, 0, %p29;
	selp.b32 	%r562, %r506, 0, %p35;
	selp.b32 	%r563, %r562, 0, %p55;
	selp.b32 	%r564, %r563, 0, %p29;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r534+2112], {%r561, %r564};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r565, %r507, 0, %p34;
	selp.b32 	%r566, %r565, 0, %p56;
	selp.b32 	%r567, %r566, 0, %p28;
	selp.b32 	%r568, %r508, 0, %p33;
	selp.b32 	%r569, %r568, 0, %p57;
	selp.b32 	%r570, %r569, 0, %p28;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r523+96], {%r567, %r570};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r571, %r509, 0, %p34;
	selp.b32 	%r572, %r571, 0, %p58;
	selp.b32 	%r573, %r572, 0, %p29;
	selp.b32 	%r574, %r510, 0, %p33;
	selp.b32 	%r575, %r574, 0, %p59;
	selp.b32 	%r576, %r575, 0, %p29;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r534+2144], {%r573, %r576};
	bar.sync 	0;
	shr.u32 	%r577, %r519, 2;
	and.b32 	%r578, %r577, 240;
	add.s32 	%r579, %r377, %r578;
	shl.b32 	%r580, %r519, 2;
	add.s32 	%r581, %r579, %r580;
	or.b32 	%r582, %r519, 1024;
	shr.u32 	%r583, %r582, 2;
	and.b32 	%r584, %r583, 496;
	add.s32 	%r585, %r377, %r584;
	add.s32 	%r586, %r585, %r580;
	ld.shared.v4.b32 	{%r303, %r304, %r305, %r306}, [%r586+4096];
	or.b32 	%r587, %r519, 2048;
	shr.u32 	%r588, %r587, 2;
	and.b32 	%r589, %r588, 752;
	add.s32 	%r590, %r377, %r589;
	add.s32 	%r591, %r590, %r580;
	ld.shared.v4.b32 	{%r307, %r308, %r309, %r310}, [%r591+8192];
	or.b32 	%r592, %r519, 3072;
	shr.u32 	%r593, %r592, 2;
	and.b32 	%r594, %r593, 1008;
	add.s32 	%r595, %r377, %r594;
	add.s32 	%r596, %r595, %r580;
	ld.shared.v4.b32 	{%r311, %r312, %r313, %r314}, [%r596+12288];
	ld.shared.v4.b32 	{%r299, %r300, %r301, %r302}, [%r581];
	// begin inline asm
	@%p3 st.global.v4.b32 [ %rd33 + 0 ], { %r299, %r300, %r301, %r302 };
	// end inline asm
	// begin inline asm
	@%p4 st.global.v4.b32 [ %rd34 + 0 ], { %r303, %r304, %r305, %r306 };
	// end inline asm
	// begin inline asm
	@%p5 st.global.v4.b32 [ %rd35 + 0 ], { %r307, %r308, %r309, %r310 };
	// end inline asm
	// begin inline asm
	@%p6 st.global.v4.b32 [ %rd36 + 0 ], { %r311, %r312, %r313, %r314 };
	// end inline asm
	.loc	1 73 4                          // chunk_scaled_dot_kkt.py:73:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 127                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x78 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 115
.b8 99
.b8 97
.b8 108
.b8 101
.b8 100
.b8 95
.b8 100
.b8 111
.b8 116
.b8 95
.b8 107
.b8 107
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
	}
	.section	.debug_macinfo	{	}
