; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 32, !dbg !13
  %15 = icmp eq i32 %14, 0, !dbg !13
  %16 = lshr i32 %12, 3, !dbg !13
  %17 = and i32 %16, 15, !dbg !13
  %18 = or disjoint i32 %17, 16, !dbg !13
  %19 = or disjoint i32 %17, 32, !dbg !13
  %20 = or disjoint i32 %17, 48, !dbg !13
  %21 = lshr i32 %12, 2, !dbg !13
  %22 = and i32 %21, 7, !dbg !13
  %23 = lshr i32 %12, 1, !dbg !13
  %24 = and i32 %23, 48, !dbg !13
  %25 = or disjoint i32 %24, %22, !dbg !13
  %26 = or disjoint i32 %25, 8, !dbg !13
  %27 = shl nuw nsw i32 %12, 3, !dbg !13
  %28 = and i32 %27, 56, !dbg !13
  %29 = mul i32 %9, %4, !dbg !14
  %30 = sext i32 %29 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %2, i64 %30, !dbg !15
  %32 = zext nneg i32 %10 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %31, i64 %32, !dbg !16
  %34 = sext i32 %4 to i64, !dbg !17
  %35 = sext i32 %11 to i64, !dbg !17
  %36 = zext nneg i32 %17 to i64, !dbg !18
  %37 = zext nneg i32 %18 to i64, !dbg !18
  %38 = zext nneg i32 %19 to i64, !dbg !18
  %39 = zext nneg i32 %20 to i64, !dbg !18
  %40 = zext nneg i32 %25 to i64, !dbg !18
  %41 = zext nneg i32 %26 to i64, !dbg !18
  %42 = zext nneg i32 %28 to i64, !dbg !18
  %43 = or disjoint i64 %36, %35, !dbg !18
  %44 = or disjoint i64 %37, %35, !dbg !18
  %45 = or disjoint i64 %38, %35, !dbg !18
  %46 = or disjoint i64 %39, %35, !dbg !18
  %47 = or disjoint i64 %40, %35, !dbg !18
  %48 = or disjoint i64 %41, %35, !dbg !18
  %49 = shl nsw i64 %47, 5, !dbg !18
  %50 = shl nsw i64 %48, 5, !dbg !18
  %51 = getelementptr bfloat, ptr addrspace(1) %33, i64 %49, !dbg !18
  %52 = getelementptr bfloat, ptr addrspace(1) %33, i64 %50, !dbg !18
  %53 = icmp sgt i32 %11, -1, !dbg !18
  %54 = icmp slt i64 %47, %34, !dbg !18
  %55 = icmp slt i64 %48, %34, !dbg !18
  %56 = and i1 %53, %54, !dbg !18
  %57 = and i1 %53, %55, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %51, i1 %56) #2, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !18
  %60 = or disjoint i32 %29, %10, !dbg !19
  %61 = shl i32 %60, 7, !dbg !20
  %62 = sext i32 %61 to i64, !dbg !21
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = icmp slt i64 %43, %34, !dbg !22
  %65 = icmp slt i64 %44, %34, !dbg !22
  %66 = icmp slt i64 %45, %34, !dbg !22
  %67 = icmp slt i64 %46, %34, !dbg !22
  %68 = and i1 %53, %64, !dbg !22
  %69 = and i1 %53, %65, !dbg !22
  %70 = and i1 %53, %66, !dbg !22
  %71 = and i1 %53, %67, !dbg !22
  %.idx93 = shl nsw i64 %43, 13, !dbg !22
  %72 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx93, !dbg !22
  %73 = getelementptr bfloat, ptr addrspace(1) %72, i64 %42, !dbg !22
  %.idx94 = shl nsw i64 %44, 13, !dbg !22
  %74 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx94, !dbg !22
  %75 = getelementptr bfloat, ptr addrspace(1) %74, i64 %42, !dbg !22
  %.idx95 = shl nsw i64 %45, 13, !dbg !22
  %76 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx95, !dbg !22
  %77 = getelementptr bfloat, ptr addrspace(1) %76, i64 %42, !dbg !22
  %.idx96 = shl nsw i64 %46, 13, !dbg !22
  %78 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx96, !dbg !22
  %79 = getelementptr bfloat, ptr addrspace(1) %78, i64 %42, !dbg !22
  %80 = select i1 %15, i32 0, i32 288, !dbg !22
  %81 = and i32 %12, 24, !dbg !22
  %82 = mul nuw nsw i32 %81, 9, !dbg !22
  %83 = xor i32 %82, %28, !dbg !22
  %84 = xor i32 %83, %80, !dbg !22
  %85 = and i32 %27, 512, !dbg !22
  %86 = or disjoint i32 %84, %85, !dbg !22
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !22
  %88 = or disjoint i32 %28, 1024, !dbg !22
  %89 = xor i32 %82, %88, !dbg !22
  %90 = xor i32 %89, %80, !dbg !22
  %91 = or disjoint i32 %90, %85, !dbg !22
  %92 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %91, !dbg !22
  %93 = or disjoint i32 %28, 2048, !dbg !22
  %94 = xor i32 %82, %93, !dbg !22
  %95 = xor i32 %94, %80, !dbg !22
  %96 = or disjoint i32 %95, %85, !dbg !22
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %96, !dbg !22
  %98 = or disjoint i32 %28, 3072, !dbg !22
  %99 = xor i32 %82, %98, !dbg !22
  %100 = xor i32 %99, %80, !dbg !22
  %101 = or disjoint i32 %100, %85, !dbg !22
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %101, !dbg !22
  %103 = select i1 %68, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %87, ptr addrspace(1) %73, i32 %103) #2, !dbg !22
  %104 = select i1 %69, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %92, ptr addrspace(1) %75, i32 %104) #2, !dbg !22
  %105 = select i1 %70, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %77, i32 %105) #2, !dbg !22
  %106 = select i1 %71, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %102, ptr addrspace(1) %79, i32 %106) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %107 = or disjoint i64 %42, 64, !dbg !22
  %108 = getelementptr bfloat, ptr addrspace(1) %72, i64 %107, !dbg !22
  %109 = getelementptr bfloat, ptr addrspace(1) %74, i64 %107, !dbg !22
  %110 = getelementptr bfloat, ptr addrspace(1) %76, i64 %107, !dbg !22
  %111 = getelementptr bfloat, ptr addrspace(1) %78, i64 %107, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %86, !dbg !22
  %113 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %91, !dbg !22
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %96, !dbg !22
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %101, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %112, ptr addrspace(1) %108, i32 %103) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %113, ptr addrspace(1) %109, i32 %104) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %110, i32 %105) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %115, ptr addrspace(1) %111, i32 %106) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %116 = or disjoint i64 %42, 128, !dbg !22
  %117 = getelementptr bfloat, ptr addrspace(1) %72, i64 %116, !dbg !22
  %118 = getelementptr bfloat, ptr addrspace(1) %74, i64 %116, !dbg !22
  %119 = getelementptr bfloat, ptr addrspace(1) %76, i64 %116, !dbg !22
  %120 = getelementptr bfloat, ptr addrspace(1) %78, i64 %116, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %86, !dbg !22
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %91, !dbg !22
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %96, !dbg !22
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %101, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %121, ptr addrspace(1) %117, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %122, ptr addrspace(1) %118, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %123, ptr addrspace(1) %119, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %124, ptr addrspace(1) %120, i32 0) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %invariant.op = or disjoint i32 %28, 192, !dbg !23
  %125 = zext nneg i32 %invariant.op to i64, !dbg !23
  br label %126, !dbg !23

126:                                              ; preds = %6, %126
  %127 = phi i1 [ true, %6 ], [ false, %126 ]
  %indvars.iv = phi i64 [ 0, %6 ], [ 64, %126 ]
  %128 = phi i32 [ -1, %6 ], [ %164, %126 ]
  %129 = phi i32 [ 2, %6 ], [ %354, %126 ]
  %130 = phi float [ 0.000000e+00, %6 ], [ %320, %126 ]
  %131 = phi float [ 0.000000e+00, %6 ], [ %321, %126 ]
  %132 = phi float [ 0.000000e+00, %6 ], [ %322, %126 ]
  %133 = phi float [ 0.000000e+00, %6 ], [ %323, %126 ]
  %134 = phi float [ 0.000000e+00, %6 ], [ %324, %126 ]
  %135 = phi float [ 0.000000e+00, %6 ], [ %325, %126 ]
  %136 = phi float [ 0.000000e+00, %6 ], [ %326, %126 ]
  %137 = phi float [ 0.000000e+00, %6 ], [ %327, %126 ]
  %138 = phi float [ 0.000000e+00, %6 ], [ %328, %126 ]
  %139 = phi float [ 0.000000e+00, %6 ], [ %329, %126 ]
  %140 = phi float [ 0.000000e+00, %6 ], [ %330, %126 ]
  %141 = phi float [ 0.000000e+00, %6 ], [ %331, %126 ]
  %142 = phi float [ 0.000000e+00, %6 ], [ %332, %126 ]
  %143 = phi float [ 0.000000e+00, %6 ], [ %333, %126 ]
  %144 = phi float [ 0.000000e+00, %6 ], [ %334, %126 ]
  %145 = phi float [ 0.000000e+00, %6 ], [ %335, %126 ]
  %146 = phi float [ 0.000000e+00, %6 ], [ %336, %126 ]
  %147 = phi float [ 0.000000e+00, %6 ], [ %337, %126 ]
  %148 = phi float [ 0.000000e+00, %6 ], [ %338, %126 ]
  %149 = phi float [ 0.000000e+00, %6 ], [ %339, %126 ]
  %150 = phi float [ 0.000000e+00, %6 ], [ %340, %126 ]
  %151 = phi float [ 0.000000e+00, %6 ], [ %341, %126 ]
  %152 = phi float [ 0.000000e+00, %6 ], [ %342, %126 ]
  %153 = phi float [ 0.000000e+00, %6 ], [ %343, %126 ]
  %154 = phi float [ 0.000000e+00, %6 ], [ %344, %126 ]
  %155 = phi float [ 0.000000e+00, %6 ], [ %345, %126 ]
  %156 = phi float [ 0.000000e+00, %6 ], [ %346, %126 ]
  %157 = phi float [ 0.000000e+00, %6 ], [ %347, %126 ]
  %158 = phi float [ 0.000000e+00, %6 ], [ %348, %126 ]
  %159 = phi float [ 0.000000e+00, %6 ], [ %349, %126 ]
  %160 = phi float [ 0.000000e+00, %6 ], [ %350, %126 ]
  %161 = phi float [ 0.000000e+00, %6 ], [ %351, %126 ]
  %162 = add i32 %128, 1, !dbg !23
  %163 = icmp sgt i32 %162, 3, !dbg !23
  %164 = select i1 %163, i32 0, i32 %162, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx91 = shl i32 %164, 13, !dbg !22
  %165 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx91, !dbg !22
  %166 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %167 = ptrtoint ptr addrspace(3) %165 to i32, !dbg !24
  %168 = lshr exact i32 %167, 4, !dbg !24
  %169 = and i32 %168, 16383, !dbg !24
  %170 = zext nneg i32 %169 to i64, !dbg !24
  %171 = or disjoint i64 %170, 4611686293338849280, !dbg !24
  %172 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, i64 %171, i64 %171, i1 true) #2, !dbg !24
  %173 = add i32 %167, 32, !dbg !24
  %174 = lshr exact i32 %173, 4, !dbg !24
  %175 = and i32 %174, 16383, !dbg !24
  %176 = zext nneg i32 %175 to i64, !dbg !24
  %177 = or disjoint i64 %176, 4611686293338849280, !dbg !24
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 0, !dbg !24
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 1, !dbg !24
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 2, !dbg !24
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 3, !dbg !24
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 4, !dbg !24
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 5, !dbg !24
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 6, !dbg !24
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 7, !dbg !24
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 8, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 9, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 10, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 11, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 12, !dbg !24
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 13, !dbg !24
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 14, !dbg !24
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 15, !dbg !24
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 16, !dbg !24
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 17, !dbg !24
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 18, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 19, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 20, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 21, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 22, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 23, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 24, !dbg !24
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 25, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 26, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 27, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 28, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 29, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 30, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %172, 31, !dbg !24
  %210 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, i64 %177, i64 %177, i1 true) #2, !dbg !24
  %211 = add i32 %167, 64, !dbg !24
  %212 = lshr exact i32 %211, 4, !dbg !24
  %213 = and i32 %212, 16383, !dbg !24
  %214 = zext nneg i32 %213 to i64, !dbg !24
  %215 = or disjoint i64 %214, 4611686293338849280, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 0, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 1, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 2, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 3, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 4, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 5, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 6, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 7, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 8, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 9, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 10, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 11, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 12, !dbg !24
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 13, !dbg !24
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 14, !dbg !24
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 15, !dbg !24
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 16, !dbg !24
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 17, !dbg !24
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 18, !dbg !24
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 19, !dbg !24
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 20, !dbg !24
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 21, !dbg !24
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 22, !dbg !24
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 23, !dbg !24
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 24, !dbg !24
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 25, !dbg !24
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 26, !dbg !24
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 27, !dbg !24
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 28, !dbg !24
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 29, !dbg !24
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 30, !dbg !24
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %210, 31, !dbg !24
  %248 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, i64 %215, i64 %215, i1 true) #2, !dbg !24
  %249 = add i32 %167, 96, !dbg !24
  %250 = lshr exact i32 %249, 4, !dbg !24
  %251 = and i32 %250, 16383, !dbg !24
  %252 = zext nneg i32 %251 to i64, !dbg !24
  %253 = or disjoint i64 %252, 4611686293338849280, !dbg !24
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 0, !dbg !24
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 1, !dbg !24
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 2, !dbg !24
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 3, !dbg !24
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 4, !dbg !24
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 5, !dbg !24
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 6, !dbg !24
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 7, !dbg !24
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 8, !dbg !24
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 9, !dbg !24
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 10, !dbg !24
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 11, !dbg !24
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 12, !dbg !24
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 13, !dbg !24
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 14, !dbg !24
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 15, !dbg !24
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 16, !dbg !24
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 17, !dbg !24
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 18, !dbg !24
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 19, !dbg !24
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 20, !dbg !24
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 21, !dbg !24
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 22, !dbg !24
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 23, !dbg !24
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 24, !dbg !24
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 25, !dbg !24
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 26, !dbg !24
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 27, !dbg !24
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 28, !dbg !24
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 29, !dbg !24
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 30, !dbg !24
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 31, !dbg !24
  %286 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %254, float %255, float %256, float %257, float %258, float %259, float %260, float %261, float %262, float %263, float %264, float %265, float %266, float %267, float %268, float %269, float %270, float %271, float %272, float %273, float %274, float %275, float %276, float %277, float %278, float %279, float %280, float %281, float %282, float %283, float %284, float %285, i64 %253, i64 %253, i1 true) #2, !dbg !24
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 0, !dbg !24
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 1, !dbg !24
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 2, !dbg !24
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 3, !dbg !24
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 4, !dbg !24
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 5, !dbg !24
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 6, !dbg !24
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 7, !dbg !24
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 8, !dbg !24
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 9, !dbg !24
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 10, !dbg !24
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 11, !dbg !24
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 12, !dbg !24
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 13, !dbg !24
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 14, !dbg !24
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 15, !dbg !24
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 16, !dbg !24
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 17, !dbg !24
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 18, !dbg !24
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 19, !dbg !24
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 20, !dbg !24
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 21, !dbg !24
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 22, !dbg !24
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 23, !dbg !24
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 24, !dbg !24
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 25, !dbg !24
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 26, !dbg !24
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 27, !dbg !24
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 28, !dbg !24
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 29, !dbg !24
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 30, !dbg !24
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 31, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %319 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"(float %287, float %288, float %289, float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, ptr addrspace(3) %165, i32 0, i32 0, ptr addrspace(3) %165, i32 0, i32 0) #2, !dbg !24
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 0, !dbg !24
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 1, !dbg !24
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 2, !dbg !24
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 3, !dbg !24
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 4, !dbg !24
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 5, !dbg !24
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 6, !dbg !24
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 7, !dbg !24
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 8, !dbg !24
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 9, !dbg !24
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 10, !dbg !24
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 11, !dbg !24
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 12, !dbg !24
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 13, !dbg !24
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 14, !dbg !24
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 15, !dbg !24
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 16, !dbg !24
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 17, !dbg !24
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 18, !dbg !24
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 19, !dbg !24
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 20, !dbg !24
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 21, !dbg !24
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 22, !dbg !24
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 23, !dbg !24
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 24, !dbg !24
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 25, !dbg !24
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 26, !dbg !24
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 27, !dbg !24
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 28, !dbg !24
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 29, !dbg !24
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 30, !dbg !24
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %319, 31, !dbg !24
  %352 = add i32 %129, 1, !dbg !23
  %353 = icmp sgt i32 %352, 3, !dbg !23
  %354 = select i1 %353, i32 0, i32 %352, !dbg !23
  %355 = add nuw nsw i64 %indvars.iv, %125
  %356 = getelementptr bfloat, ptr addrspace(1) %72, i64 %355, !dbg !22
  %357 = getelementptr bfloat, ptr addrspace(1) %74, i64 %355, !dbg !22
  %358 = getelementptr bfloat, ptr addrspace(1) %76, i64 %355, !dbg !22
  %359 = getelementptr bfloat, ptr addrspace(1) %78, i64 %355, !dbg !22
  %.idx92 = shl i32 %354, 13, !dbg !22
  %360 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx92, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %360, i32 %86, !dbg !22
  %362 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %360, i32 %91, !dbg !22
  %363 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %360, i32 %96, !dbg !22
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %360, i32 %101, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %361, ptr addrspace(1) %356, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %362, ptr addrspace(1) %357, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %363, ptr addrspace(1) %358, i32 0) #2, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %364, ptr addrspace(1) %359, i32 0) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br i1 %127, label %126, label %365, !dbg !23

365:                                              ; preds = %126
  %366 = bitcast i16 %59 to bfloat, !dbg !18
  %367 = bitcast i16 %58 to bfloat, !dbg !18
  %368 = shl nuw nsw i32 %12, 1, !dbg !13
  %369 = and i32 %368, 6, !dbg !13
  %370 = or disjoint i32 %369, 57, !dbg !13
  %371 = zext nneg i32 %370 to i64, !dbg !18
  %372 = or disjoint i64 %371, %35, !dbg !18
  %373 = icmp slt i64 %372, %34, !dbg !18
  %374 = and i1 %53, %373, !dbg !18
  %375 = or disjoint i32 %369, 56, !dbg !13
  %376 = zext nneg i32 %375 to i64, !dbg !18
  %377 = or disjoint i64 %376, %35, !dbg !18
  %378 = icmp slt i64 %377, %34, !dbg !18
  %379 = and i1 %53, %378, !dbg !18
  %380 = or disjoint i32 %369, 1, !dbg !13
  %381 = lshr i32 %12, 4, !dbg !13
  %382 = and i32 %381, 7, !dbg !13
  %383 = or disjoint i32 %382, 8, !dbg !13
  %384 = shl nuw nsw i32 %12, 2, !dbg !13
  %385 = and i32 %384, 60, !dbg !13
  %386 = zext nneg i32 %385 to i64, !dbg !18
  %387 = or disjoint i32 %370, %11, !dbg !25
  %388 = icmp slt i32 %387, %4, !dbg !26
  %389 = or disjoint i32 %375, %11, !dbg !25
  %390 = icmp slt i32 %389, %4, !dbg !26
  %391 = insertelement <8 x i32> poison, i32 %369, i64 0, !dbg !13
  %392 = shufflevector <8 x i32> %391, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %393 = or disjoint <8 x i32> %392, <i32 24, i32 25, i32 32, i32 33, i32 40, i32 41, i32 48, i32 49>, !dbg !13
  %394 = extractelement <8 x i32> %393, i64 7, !dbg !27
  %395 = zext nneg i32 %394 to i64, !dbg !18
  %396 = or disjoint i64 %395, %35, !dbg !18
  %397 = icmp slt i64 %396, %34, !dbg !18
  %398 = and i1 %53, %397, !dbg !18
  %399 = extractelement <8 x i32> %393, i64 6, !dbg !27
  %400 = zext nneg i32 %399 to i64, !dbg !18
  %401 = or disjoint i64 %400, %35, !dbg !18
  %402 = icmp slt i64 %401, %34, !dbg !18
  %403 = and i1 %53, %402, !dbg !18
  %404 = extractelement <8 x i32> %393, i64 5, !dbg !27
  %405 = zext nneg i32 %404 to i64, !dbg !18
  %406 = or disjoint i64 %405, %35, !dbg !18
  %407 = icmp slt i64 %406, %34, !dbg !18
  %408 = and i1 %53, %407, !dbg !18
  %409 = extractelement <8 x i32> %393, i64 4, !dbg !27
  %410 = zext nneg i32 %409 to i64, !dbg !18
  %411 = or disjoint i64 %410, %35, !dbg !18
  %412 = icmp slt i64 %411, %34, !dbg !18
  %413 = and i1 %53, %412, !dbg !18
  %414 = extractelement <8 x i32> %393, i64 3, !dbg !27
  %415 = zext nneg i32 %414 to i64, !dbg !18
  %416 = or disjoint i64 %415, %35, !dbg !18
  %417 = icmp slt i64 %416, %34, !dbg !18
  %418 = and i1 %53, %417, !dbg !18
  %419 = extractelement <8 x i32> %393, i64 2, !dbg !27
  %420 = zext nneg i32 %419 to i64, !dbg !18
  %421 = or disjoint i64 %420, %35, !dbg !18
  %422 = icmp slt i64 %421, %34, !dbg !18
  %423 = and i1 %53, %422, !dbg !18
  %424 = extractelement <8 x i32> %393, i64 1, !dbg !27
  %425 = extractelement <8 x i32> %393, i64 0, !dbg !27
  %426 = insertelement <4 x i32> poison, i32 %369, i64 0, !dbg !13
  %427 = shufflevector <4 x i32> %426, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %428 = or disjoint <4 x i32> %427, <i32 8, i32 9, i32 16, i32 17>, !dbg !13
  %429 = extractelement <4 x i32> %428, i64 3, !dbg !27
  %430 = extractelement <4 x i32> %428, i64 2, !dbg !27
  %431 = extractelement <4 x i32> %428, i64 1, !dbg !27
  %432 = extractelement <4 x i32> %428, i64 0, !dbg !27
  %433 = insertelement <16 x i32> poison, i32 %25, i64 0, !dbg !25
  %434 = insertelement <16 x i32> %433, i32 %26, i64 1, !dbg !25
  %435 = insertelement <16 x i32> %434, i32 %369, i64 2, !dbg !25
  %436 = insertelement <16 x i32> %435, i32 %380, i64 3, !dbg !25
  %437 = shufflevector <8 x i32> %393, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %438 = shufflevector <16 x i32> %436, <16 x i32> %437, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !25
  %439 = shufflevector <4 x i32> %428, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %440 = shufflevector <16 x i32> %438, <16 x i32> %439, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %441 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !25
  %442 = shufflevector <16 x i32> %441, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !25
  %443 = or disjoint <16 x i32> %440, %442, !dbg !25
  %444 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !26
  %445 = shufflevector <16 x i32> %444, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %446 = icmp slt <16 x i32> %443, %445, !dbg !26
  %447 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %320, float %321, float %322, float %323, float %324, float %325, float %326, float %327, float %328, float %329, float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %448 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %449 = getelementptr float, ptr addrspace(1) %448, i64 %32, !dbg !29
  %450 = getelementptr float, ptr addrspace(1) %449, i64 %49, !dbg !30
  %451 = getelementptr float, ptr addrspace(1) %449, i64 %50, !dbg !30
  %.idx13 = shl nsw i64 %421, 7, !dbg !30
  %452 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx13, !dbg !30
  %.idx14 = shl nsw i64 %416, 7, !dbg !30
  %453 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx14, !dbg !30
  %.idx15 = shl nsw i64 %411, 7, !dbg !30
  %454 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx15, !dbg !30
  %.idx16 = shl nsw i64 %406, 7, !dbg !30
  %455 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx16, !dbg !30
  %.idx17 = shl nsw i64 %401, 7, !dbg !30
  %456 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx17, !dbg !30
  %.idx18 = shl nsw i64 %396, 7, !dbg !30
  %457 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx18, !dbg !30
  %.idx19 = shl nsw i64 %377, 7, !dbg !30
  %458 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx19, !dbg !30
  %.idx20 = shl nsw i64 %372, 7, !dbg !30
  %459 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx20, !dbg !30
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %450, i1 %56) #2, !dbg !30
  %461 = bitcast i32 %460 to float, !dbg !30
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %451, i1 %57) #2, !dbg !30
  %463 = bitcast i32 %462 to float, !dbg !30
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 0, !dbg !31
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 1, !dbg !31
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 2, !dbg !31
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 3, !dbg !31
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 4, !dbg !31
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 5, !dbg !31
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 6, !dbg !31
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 7, !dbg !31
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 8, !dbg !31
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 9, !dbg !31
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 10, !dbg !31
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 11, !dbg !31
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 12, !dbg !31
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 13, !dbg !31
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 14, !dbg !31
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 15, !dbg !31
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 16, !dbg !31
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 17, !dbg !31
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 18, !dbg !31
  %483 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 19, !dbg !31
  %484 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 20, !dbg !31
  %485 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 21, !dbg !31
  %486 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 22, !dbg !31
  %487 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 23, !dbg !31
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 24, !dbg !31
  %489 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 25, !dbg !31
  %490 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 26, !dbg !31
  %491 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 27, !dbg !31
  %492 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 30, !dbg !31
  %493 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 31, !dbg !31
  %494 = fpext bfloat %367 to float, !dbg !32
  %495 = fpext bfloat %366 to float, !dbg !32
  %496 = icmp samesign ugt i32 %25, %369, !dbg !27
  %497 = icmp samesign ugt i32 %25, %380, !dbg !27
  %498 = icmp samesign ugt i32 %25, %432, !dbg !27
  %499 = icmp samesign ugt i32 %25, %431, !dbg !27
  %500 = icmp samesign ugt i32 %26, %431, !dbg !27
  %501 = icmp samesign ugt i32 %25, %430, !dbg !27
  %502 = icmp samesign ugt i32 %25, %429, !dbg !27
  %503 = icmp samesign ugt i32 %26, %430, !dbg !27
  %504 = icmp samesign ugt i32 %26, %429, !dbg !27
  %505 = icmp samesign ugt i32 %25, %425, !dbg !27
  %506 = icmp samesign ugt i32 %25, %424, !dbg !27
  %507 = icmp samesign ugt i32 %26, %425, !dbg !27
  %508 = icmp samesign ugt i32 %26, %424, !dbg !27
  %509 = icmp samesign ugt i32 %25, %419, !dbg !27
  %510 = icmp samesign ugt i32 %25, %414, !dbg !27
  %511 = icmp samesign ugt i32 %26, %419, !dbg !27
  %512 = icmp samesign ugt i32 %26, %414, !dbg !27
  %513 = icmp samesign ugt i32 %25, %409, !dbg !27
  %514 = icmp samesign ugt i32 %25, %404, !dbg !27
  %515 = icmp samesign ugt i32 %26, %409, !dbg !27
  %516 = icmp samesign ugt i32 %26, %404, !dbg !27
  %517 = icmp samesign ugt i32 %25, %399, !dbg !27
  %518 = icmp samesign ugt i32 %25, %394, !dbg !27
  %519 = icmp samesign ugt i32 %26, %399, !dbg !27
  %520 = icmp samesign ugt i32 %26, %394, !dbg !27
  %521 = icmp samesign ugt i32 %26, %375, !dbg !27
  %522 = icmp samesign ugt i32 %26, %370, !dbg !27
  %523 = extractelement <16 x i1> %446, i64 1, !dbg !33
  %524 = extractelement <16 x i1> %446, i64 2, !dbg !33
  %525 = and i1 %523, %524, !dbg !34
  %526 = extractelement <16 x i1> %446, i64 3, !dbg !33
  %527 = and i1 %523, %526, !dbg !34
  %528 = and i1 %496, %524, !dbg !33
  %529 = extractelement <16 x i1> %446, i64 0, !dbg !33
  %530 = and i1 %529, %528, !dbg !33
  %531 = and i1 %497, %526, !dbg !33
  %532 = and i1 %529, %531, !dbg !33
  %533 = extractelement <16 x i1> %446, i64 4, !dbg !33
  %534 = and i1 %498, %533, !dbg !33
  %535 = and i1 %529, %534, !dbg !33
  %536 = extractelement <16 x i1> %446, i64 5, !dbg !33
  %537 = and i1 %499, %536, !dbg !33
  %538 = and i1 %529, %537, !dbg !33
  %539 = and i1 %496, %533, !dbg !33
  %540 = and i1 %523, %539, !dbg !33
  %541 = and i1 %500, %536, !dbg !33
  %542 = and i1 %523, %541, !dbg !33
  %543 = extractelement <16 x i1> %446, i64 6, !dbg !33
  %544 = and i1 %501, %543, !dbg !33
  %545 = and i1 %529, %544, !dbg !33
  %546 = extractelement <16 x i1> %446, i64 7, !dbg !33
  %547 = and i1 %502, %546, !dbg !33
  %548 = and i1 %529, %547, !dbg !33
  %549 = and i1 %503, %543, !dbg !33
  %550 = and i1 %523, %549, !dbg !33
  %551 = and i1 %504, %546, !dbg !33
  %552 = and i1 %523, %551, !dbg !33
  %553 = extractelement <16 x i1> %446, i64 8, !dbg !33
  %554 = and i1 %505, %553, !dbg !33
  %555 = and i1 %529, %554, !dbg !33
  %556 = extractelement <16 x i1> %446, i64 9, !dbg !33
  %557 = and i1 %506, %556, !dbg !33
  %558 = and i1 %529, %557, !dbg !33
  %559 = and i1 %507, %553, !dbg !33
  %560 = and i1 %523, %559, !dbg !33
  %561 = and i1 %508, %556, !dbg !33
  %562 = and i1 %523, %561, !dbg !33
  %563 = extractelement <16 x i1> %446, i64 10, !dbg !33
  %564 = and i1 %509, %563, !dbg !33
  %565 = and i1 %529, %564, !dbg !33
  %566 = extractelement <16 x i1> %446, i64 11, !dbg !33
  %567 = and i1 %510, %566, !dbg !33
  %568 = and i1 %529, %567, !dbg !33
  %569 = and i1 %511, %563, !dbg !33
  %570 = and i1 %523, %569, !dbg !33
  %571 = and i1 %512, %566, !dbg !33
  %572 = and i1 %523, %571, !dbg !33
  %573 = extractelement <16 x i1> %446, i64 12, !dbg !33
  %574 = and i1 %513, %573, !dbg !33
  %575 = and i1 %529, %574, !dbg !33
  %576 = extractelement <16 x i1> %446, i64 13, !dbg !33
  %577 = and i1 %514, %576, !dbg !33
  %578 = and i1 %529, %577, !dbg !33
  %579 = and i1 %515, %573, !dbg !33
  %580 = and i1 %523, %579, !dbg !33
  %581 = and i1 %516, %576, !dbg !33
  %582 = and i1 %523, %581, !dbg !33
  %583 = extractelement <16 x i1> %446, i64 14, !dbg !33
  %584 = and i1 %517, %583, !dbg !33
  %585 = and i1 %529, %584, !dbg !33
  %586 = extractelement <16 x i1> %446, i64 15, !dbg !33
  %587 = and i1 %518, %586, !dbg !33
  %588 = and i1 %529, %587, !dbg !33
  %589 = and i1 %519, %583, !dbg !33
  %590 = and i1 %523, %589, !dbg !33
  %591 = and i1 %520, %586, !dbg !33
  %592 = and i1 %523, %591, !dbg !33
  %593 = and i1 %521, %390, !dbg !33
  %594 = and i1 %523, %593, !dbg !33
  %595 = and i1 %522, %388, !dbg !33
  %596 = and i1 %523, %595, !dbg !33
  %597 = shl i32 %60, 6, !dbg !35
  %598 = sext i32 %597 to i64, !dbg !36
  %599 = getelementptr float, ptr addrspace(1) %3, i64 %598, !dbg !36
  %600 = insertelement <4 x i32> poison, i32 %381, i64 0, !dbg !13
  %601 = insertelement <4 x i32> %600, i32 %382, i64 1, !dbg !13
  %602 = shufflevector <4 x i32> %601, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>, !dbg !13
  %603 = or <4 x i32> %602, <i32 56, i32 48, i32 40, i32 32>, !dbg !13
  %604 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !13
  %605 = shufflevector <2 x i32> %604, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %606 = or disjoint <2 x i32> %605, <i32 24, i32 16>, !dbg !13
  %607 = shufflevector <4 x i32> %428, <4 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %608 = shufflevector <8 x i32> %607, <8 x i32> %393, <4 x i32> <i32 2, i32 3, i32 8, i32 9>, !dbg !18
  %609 = shufflevector <4 x i32> %428, <4 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %610 = insertelement <16 x i32> %609, i32 %383, i64 6, !dbg !18
  %611 = insertelement <16 x i32> %610, i32 %382, i64 7, !dbg !18
  %612 = insertelement <16 x i32> %611, i32 %369, i64 8, !dbg !18
  %613 = insertelement <16 x i32> %612, i32 %380, i64 9, !dbg !18
  %614 = shufflevector <4 x i32> %603, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %615 = shufflevector <16 x i32> %614, <16 x i32> %613, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %616 = shufflevector <4 x i32> %608, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %617 = shufflevector <16 x i32> %615, <16 x i32> %616, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !18
  %618 = shufflevector <2 x i32> %606, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %619 = shufflevector <16 x i32> %617, <16 x i32> %618, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !18
  %620 = or disjoint <16 x i32> %619, %442, !dbg !18
  %621 = icmp slt <16 x i32> %620, %445, !dbg !37
  %622 = extractelement <16 x i1> %621, i64 9, !dbg !18
  %623 = and i1 %53, %622, !dbg !18
  %624 = extractelement <16 x i1> %621, i64 8, !dbg !18
  %625 = and i1 %53, %624, !dbg !18
  %626 = extractelement <16 x i1> %621, i64 15, !dbg !18
  %627 = and i1 %53, %626, !dbg !18
  %628 = extractelement <16 x i1> %621, i64 14, !dbg !18
  %629 = and i1 %53, %628, !dbg !18
  %630 = extractelement <16 x i1> %621, i64 13, !dbg !18
  %631 = and i1 %53, %630, !dbg !18
  %632 = extractelement <16 x i1> %621, i64 12, !dbg !18
  %633 = and i1 %53, %632, !dbg !18
  %634 = extractelement <16 x i1> %621, i64 11, !dbg !18
  %635 = and i1 %53, %634, !dbg !18
  %636 = extractelement <16 x i1> %621, i64 10, !dbg !18
  %637 = and i1 %53, %636, !dbg !18
  %638 = extractelement <16 x i32> %620, i64 8, !dbg !30
  %639 = sext i32 %638 to i64, !dbg !30
  %.idx = shl nsw i64 %639, 7, !dbg !30
  %640 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx, !dbg !30
  %641 = extractelement <16 x i32> %620, i64 9, !dbg !30
  %642 = sext i32 %641 to i64, !dbg !30
  %.idx6 = shl nsw i64 %642, 7, !dbg !30
  %643 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx6, !dbg !30
  %644 = extractelement <16 x i32> %620, i64 10, !dbg !30
  %645 = sext i32 %644 to i64, !dbg !30
  %.idx7 = shl nsw i64 %645, 7, !dbg !30
  %646 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx7, !dbg !30
  %647 = extractelement <16 x i32> %620, i64 11, !dbg !30
  %648 = sext i32 %647 to i64, !dbg !30
  %.idx8 = shl nsw i64 %648, 7, !dbg !30
  %649 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx8, !dbg !30
  %650 = extractelement <16 x i32> %620, i64 12, !dbg !30
  %651 = sext i32 %650 to i64, !dbg !30
  %.idx9 = shl nsw i64 %651, 7, !dbg !30
  %652 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx9, !dbg !30
  %653 = extractelement <16 x i32> %620, i64 13, !dbg !30
  %654 = sext i32 %653 to i64, !dbg !30
  %.idx10 = shl nsw i64 %654, 7, !dbg !30
  %655 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx10, !dbg !30
  %656 = extractelement <16 x i32> %620, i64 14, !dbg !30
  %657 = sext i32 %656 to i64, !dbg !30
  %.idx11 = shl nsw i64 %657, 7, !dbg !30
  %658 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx11, !dbg !30
  %659 = extractelement <16 x i32> %620, i64 15, !dbg !30
  %660 = sext i32 %659 to i64, !dbg !30
  %.idx12 = shl nsw i64 %660, 7, !dbg !30
  %661 = getelementptr i8, ptr addrspace(1) %449, i64 %.idx12, !dbg !30
  %662 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %640, i1 %625) #2, !dbg !30
  %663 = bitcast i32 %662 to float, !dbg !30
  %664 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %643, i1 %623) #2, !dbg !30
  %665 = bitcast i32 %664 to float, !dbg !30
  %666 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %646, i1 %637) #2, !dbg !30
  %667 = bitcast i32 %666 to float, !dbg !30
  %668 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %649, i1 %635) #2, !dbg !30
  %669 = bitcast i32 %668 to float, !dbg !30
  %670 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %652, i1 %633) #2, !dbg !30
  %671 = bitcast i32 %670 to float, !dbg !30
  %672 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %655, i1 %631) #2, !dbg !30
  %673 = bitcast i32 %672 to float, !dbg !30
  %674 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %658, i1 %629) #2, !dbg !30
  %675 = bitcast i32 %674 to float, !dbg !30
  %676 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %661, i1 %627) #2, !dbg !30
  %677 = bitcast i32 %676 to float, !dbg !30
  %678 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %452, i1 %423) #2, !dbg !30
  %679 = bitcast i32 %678 to float, !dbg !30
  %680 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %453, i1 %418) #2, !dbg !30
  %681 = bitcast i32 %680 to float, !dbg !30
  %682 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %454, i1 %413) #2, !dbg !30
  %683 = bitcast i32 %682 to float, !dbg !30
  %684 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 %408) #2, !dbg !30
  %685 = bitcast i32 %684 to float, !dbg !30
  %686 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %456, i1 %403) #2, !dbg !30
  %687 = bitcast i32 %686 to float, !dbg !30
  %688 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %457, i1 %398) #2, !dbg !30
  %689 = bitcast i32 %688 to float, !dbg !30
  %690 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %458, i1 %379) #2, !dbg !30
  %691 = bitcast i32 %690 to float, !dbg !30
  %692 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 %374) #2, !dbg !30
  %693 = bitcast i32 %692 to float, !dbg !30
  %694 = fsub float %461, %663, !dbg !38
  %695 = fsub float %461, %665, !dbg !38
  %696 = fsub float %463, %663, !dbg !38
  %697 = fsub float %463, %665, !dbg !38
  %698 = fsub float %461, %667, !dbg !38
  %699 = fsub float %461, %669, !dbg !38
  %700 = fsub float %463, %667, !dbg !38
  %701 = fsub float %463, %669, !dbg !38
  %702 = fsub float %461, %671, !dbg !38
  %703 = fsub float %461, %673, !dbg !38
  %704 = fsub float %463, %671, !dbg !38
  %705 = fsub float %463, %673, !dbg !38
  %706 = fsub float %461, %675, !dbg !38
  %707 = fsub float %461, %677, !dbg !38
  %708 = fsub float %463, %675, !dbg !38
  %709 = fsub float %463, %677, !dbg !38
  %710 = fsub float %461, %679, !dbg !38
  %711 = fsub float %461, %681, !dbg !38
  %712 = fsub float %463, %679, !dbg !38
  %713 = fsub float %463, %681, !dbg !38
  %714 = fsub float %461, %683, !dbg !38
  %715 = fsub float %461, %685, !dbg !38
  %716 = fsub float %463, %683, !dbg !38
  %717 = fsub float %463, %685, !dbg !38
  %718 = fsub float %461, %687, !dbg !38
  %719 = fsub float %461, %689, !dbg !38
  %720 = fsub float %463, %687, !dbg !38
  %721 = fsub float %463, %689, !dbg !38
  %722 = fsub float %463, %691, !dbg !38
  %723 = fsub float %463, %693, !dbg !38
  %724 = fmul float %694, 0x3FF7154760000000, !dbg !39
  %725 = tail call float @llvm.nvvm.ex2.approx.f(float %724), !dbg !39
  %726 = fmul float %695, 0x3FF7154760000000, !dbg !39
  %727 = tail call float @llvm.nvvm.ex2.approx.f(float %726), !dbg !39
  %728 = fmul float %696, 0x3FF7154760000000, !dbg !39
  %729 = tail call float @llvm.nvvm.ex2.approx.f(float %728), !dbg !39
  %730 = fmul float %697, 0x3FF7154760000000, !dbg !39
  %731 = tail call float @llvm.nvvm.ex2.approx.f(float %730), !dbg !39
  %732 = fmul float %698, 0x3FF7154760000000, !dbg !39
  %733 = tail call float @llvm.nvvm.ex2.approx.f(float %732), !dbg !39
  %734 = fmul float %699, 0x3FF7154760000000, !dbg !39
  %735 = tail call float @llvm.nvvm.ex2.approx.f(float %734), !dbg !39
  %736 = fmul float %700, 0x3FF7154760000000, !dbg !39
  %737 = tail call float @llvm.nvvm.ex2.approx.f(float %736), !dbg !39
  %738 = fmul float %701, 0x3FF7154760000000, !dbg !39
  %739 = tail call float @llvm.nvvm.ex2.approx.f(float %738), !dbg !39
  %740 = fmul float %702, 0x3FF7154760000000, !dbg !39
  %741 = tail call float @llvm.nvvm.ex2.approx.f(float %740), !dbg !39
  %742 = fmul float %703, 0x3FF7154760000000, !dbg !39
  %743 = tail call float @llvm.nvvm.ex2.approx.f(float %742), !dbg !39
  %744 = fmul float %704, 0x3FF7154760000000, !dbg !39
  %745 = tail call float @llvm.nvvm.ex2.approx.f(float %744), !dbg !39
  %746 = fmul float %705, 0x3FF7154760000000, !dbg !39
  %747 = tail call float @llvm.nvvm.ex2.approx.f(float %746), !dbg !39
  %748 = fmul float %706, 0x3FF7154760000000, !dbg !39
  %749 = tail call float @llvm.nvvm.ex2.approx.f(float %748), !dbg !39
  %750 = fmul float %707, 0x3FF7154760000000, !dbg !39
  %751 = tail call float @llvm.nvvm.ex2.approx.f(float %750), !dbg !39
  %752 = fmul float %708, 0x3FF7154760000000, !dbg !39
  %753 = tail call float @llvm.nvvm.ex2.approx.f(float %752), !dbg !39
  %754 = fmul float %709, 0x3FF7154760000000, !dbg !39
  %755 = tail call float @llvm.nvvm.ex2.approx.f(float %754), !dbg !39
  %756 = fmul float %710, 0x3FF7154760000000, !dbg !39
  %757 = tail call float @llvm.nvvm.ex2.approx.f(float %756), !dbg !39
  %758 = fmul float %711, 0x3FF7154760000000, !dbg !39
  %759 = tail call float @llvm.nvvm.ex2.approx.f(float %758), !dbg !39
  %760 = fmul float %712, 0x3FF7154760000000, !dbg !39
  %761 = tail call float @llvm.nvvm.ex2.approx.f(float %760), !dbg !39
  %762 = fmul float %713, 0x3FF7154760000000, !dbg !39
  %763 = tail call float @llvm.nvvm.ex2.approx.f(float %762), !dbg !39
  %764 = fmul float %714, 0x3FF7154760000000, !dbg !39
  %765 = tail call float @llvm.nvvm.ex2.approx.f(float %764), !dbg !39
  %766 = fmul float %715, 0x3FF7154760000000, !dbg !39
  %767 = tail call float @llvm.nvvm.ex2.approx.f(float %766), !dbg !39
  %768 = fmul float %716, 0x3FF7154760000000, !dbg !39
  %769 = tail call float @llvm.nvvm.ex2.approx.f(float %768), !dbg !39
  %770 = fmul float %717, 0x3FF7154760000000, !dbg !39
  %771 = tail call float @llvm.nvvm.ex2.approx.f(float %770), !dbg !39
  %772 = fmul float %718, 0x3FF7154760000000, !dbg !39
  %773 = tail call float @llvm.nvvm.ex2.approx.f(float %772), !dbg !39
  %774 = fmul float %719, 0x3FF7154760000000, !dbg !39
  %775 = tail call float @llvm.nvvm.ex2.approx.f(float %774), !dbg !39
  %776 = fmul float %720, 0x3FF7154760000000, !dbg !39
  %777 = tail call float @llvm.nvvm.ex2.approx.f(float %776), !dbg !39
  %778 = fmul float %721, 0x3FF7154760000000, !dbg !39
  %779 = tail call float @llvm.nvvm.ex2.approx.f(float %778), !dbg !39
  %780 = fmul float %722, 0x3FF7154760000000, !dbg !39
  %781 = tail call float @llvm.nvvm.ex2.approx.f(float %780), !dbg !39
  %782 = fmul float %723, 0x3FF7154760000000, !dbg !39
  %783 = tail call float @llvm.nvvm.ex2.approx.f(float %782), !dbg !39
  %784 = fmul float %464, %725, !dbg !31
  %785 = fmul float %465, %727, !dbg !31
  %786 = fmul float %466, %729, !dbg !31
  %787 = fmul float %467, %731, !dbg !31
  %788 = fmul float %468, %733, !dbg !31
  %789 = fmul float %469, %735, !dbg !31
  %790 = fmul float %470, %737, !dbg !31
  %791 = fmul float %471, %739, !dbg !31
  %792 = fmul float %472, %741, !dbg !31
  %793 = fmul float %473, %743, !dbg !31
  %794 = fmul float %474, %745, !dbg !31
  %795 = fmul float %475, %747, !dbg !31
  %796 = fmul float %476, %749, !dbg !31
  %797 = fmul float %477, %751, !dbg !31
  %798 = fmul float %478, %753, !dbg !31
  %799 = fmul float %479, %755, !dbg !31
  %800 = fmul float %480, %757, !dbg !31
  %801 = fmul float %481, %759, !dbg !31
  %802 = fmul float %482, %761, !dbg !31
  %803 = fmul float %483, %763, !dbg !31
  %804 = fmul float %484, %765, !dbg !31
  %805 = fmul float %485, %767, !dbg !31
  %806 = fmul float %486, %769, !dbg !31
  %807 = fmul float %487, %771, !dbg !31
  %808 = fmul float %488, %773, !dbg !31
  %809 = fmul float %489, %775, !dbg !31
  %810 = fmul float %490, %777, !dbg !31
  %811 = fmul float %491, %779, !dbg !31
  %812 = fmul float %492, %781, !dbg !31
  %813 = fmul float %493, %783, !dbg !31
  %814 = fmul float %784, %494, !dbg !32
  %815 = fmul float %785, %494, !dbg !32
  %816 = fmul float %786, %495, !dbg !32
  %817 = fmul float %787, %495, !dbg !32
  %818 = fmul float %788, %494, !dbg !32
  %819 = fmul float %789, %494, !dbg !32
  %820 = fmul float %790, %495, !dbg !32
  %821 = fmul float %791, %495, !dbg !32
  %822 = fmul float %792, %494, !dbg !32
  %823 = fmul float %793, %494, !dbg !32
  %824 = fmul float %794, %495, !dbg !32
  %825 = fmul float %795, %495, !dbg !32
  %826 = fmul float %796, %494, !dbg !32
  %827 = fmul float %797, %494, !dbg !32
  %828 = fmul float %798, %495, !dbg !32
  %829 = fmul float %799, %495, !dbg !32
  %830 = fmul float %800, %494, !dbg !32
  %831 = fmul float %801, %494, !dbg !32
  %832 = fmul float %802, %495, !dbg !32
  %833 = fmul float %803, %495, !dbg !32
  %834 = fmul float %804, %494, !dbg !32
  %835 = fmul float %805, %494, !dbg !32
  %836 = fmul float %806, %495, !dbg !32
  %837 = fmul float %807, %495, !dbg !32
  %838 = fmul float %808, %494, !dbg !32
  %839 = fmul float %809, %494, !dbg !32
  %840 = fmul float %810, %495, !dbg !32
  %841 = fmul float %811, %495, !dbg !32
  %842 = fmul float %812, %495, !dbg !32
  %843 = fmul float %813, %495, !dbg !32
  %844 = extractelement <16 x i32> %620, i64 7, !dbg !37
  %845 = sext i32 %844 to i64, !dbg !37
  %.idx21 = shl nsw i64 %845, 13, !dbg !37
  %846 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx21, !dbg !37
  %847 = getelementptr float, ptr addrspace(1) %846, i64 %386, !dbg !37
  %848 = extractelement <16 x i32> %620, i64 6, !dbg !37
  %849 = sext i32 %848 to i64, !dbg !37
  %.idx22 = shl nsw i64 %849, 13, !dbg !37
  %850 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx22, !dbg !37
  %851 = getelementptr float, ptr addrspace(1) %850, i64 %386, !dbg !37
  %852 = extractelement <16 x i32> %620, i64 5, !dbg !37
  %853 = sext i32 %852 to i64, !dbg !37
  %.idx23 = shl nsw i64 %853, 13, !dbg !37
  %854 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx23, !dbg !37
  %855 = getelementptr float, ptr addrspace(1) %854, i64 %386, !dbg !37
  %856 = extractelement <16 x i32> %620, i64 4, !dbg !37
  %857 = sext i32 %856 to i64, !dbg !37
  %.idx24 = shl nsw i64 %857, 13, !dbg !37
  %858 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx24, !dbg !37
  %859 = getelementptr float, ptr addrspace(1) %858, i64 %386, !dbg !37
  %860 = extractelement <16 x i32> %620, i64 3, !dbg !37
  %861 = sext i32 %860 to i64, !dbg !37
  %.idx25 = shl nsw i64 %861, 13, !dbg !37
  %862 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx25, !dbg !37
  %863 = getelementptr float, ptr addrspace(1) %862, i64 %386, !dbg !37
  %864 = extractelement <16 x i32> %620, i64 2, !dbg !37
  %865 = sext i32 %864 to i64, !dbg !37
  %.idx26 = shl nsw i64 %865, 13, !dbg !37
  %866 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx26, !dbg !37
  %867 = getelementptr float, ptr addrspace(1) %866, i64 %386, !dbg !37
  %868 = extractelement <16 x i32> %620, i64 1, !dbg !37
  %869 = sext i32 %868 to i64, !dbg !37
  %.idx27 = shl nsw i64 %869, 13, !dbg !37
  %870 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx27, !dbg !37
  %871 = getelementptr float, ptr addrspace(1) %870, i64 %386, !dbg !37
  %872 = extractelement <16 x i32> %620, i64 0, !dbg !37
  %873 = sext i32 %872 to i64, !dbg !37
  %.idx28 = shl nsw i64 %873, 13, !dbg !37
  %874 = getelementptr i8, ptr addrspace(1) %599, i64 %.idx28, !dbg !37
  %875 = getelementptr float, ptr addrspace(1) %874, i64 %386, !dbg !37
  %876 = extractelement <16 x i1> %621, i64 7, !dbg !37
  %877 = and i1 %53, %876, !dbg !37
  %878 = extractelement <16 x i1> %621, i64 6, !dbg !37
  %879 = and i1 %53, %878, !dbg !37
  %880 = extractelement <16 x i1> %621, i64 5, !dbg !37
  %881 = and i1 %53, %880, !dbg !37
  %882 = extractelement <16 x i1> %621, i64 4, !dbg !37
  %883 = and i1 %53, %882, !dbg !37
  %884 = extractelement <16 x i1> %621, i64 3, !dbg !37
  %885 = and i1 %53, %884, !dbg !37
  %886 = extractelement <16 x i1> %621, i64 2, !dbg !37
  %887 = and i1 %53, %886, !dbg !37
  %888 = extractelement <16 x i1> %621, i64 1, !dbg !37
  %889 = and i1 %53, %888, !dbg !37
  %890 = extractelement <16 x i1> %621, i64 0, !dbg !37
  %891 = and i1 %53, %890, !dbg !37
  %892 = shl nuw nsw i32 %12, 4, !dbg !37
  %893 = and i32 %892, 448, !dbg !37
  %894 = shl nuw nsw i32 %12, 5, !dbg !37
  %895 = and i32 %894, 3072, !dbg !37
  %896 = or disjoint i32 %895, %893, !dbg !37
  %897 = or disjoint i32 %896, %369, !dbg !37
  %898 = and i32 %384, 508, !dbg !37
  %899 = lshr exact i32 %896, 2, !dbg !37
  %900 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %899, !dbg !37
  %901 = getelementptr inbounds nuw float, ptr addrspace(3) %900, i32 %897, !dbg !37
  %902 = bitcast float %814 to i32, !dbg !37
  %903 = select i1 %530, i32 %902, i32 0, !dbg !40
  %904 = bitcast float %815 to i32, !dbg !37
  %905 = select i1 %532, i32 %904, i32 0, !dbg !40
  %906 = insertelement <2 x i32> poison, i32 %903, i64 0, !dbg !37
  %907 = insertelement <2 x i32> %906, i32 %905, i64 1, !dbg !37
  store <2 x i32> %907, ptr addrspace(3) %901, align 8, !dbg !37
  %908 = or disjoint i32 %897, 512, !dbg !37
  %909 = lshr i32 %908, 4, !dbg !37
  %910 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %909, !dbg !37
  %911 = getelementptr inbounds nuw float, ptr addrspace(3) %910, i32 %908, !dbg !37
  %912 = bitcast float %816 to i32, !dbg !37
  %913 = select i1 %525, i32 %912, i32 0, !dbg !40
  %914 = bitcast float %817 to i32, !dbg !37
  %915 = select i1 %527, i32 %914, i32 0, !dbg !40
  %916 = insertelement <2 x i32> poison, i32 %913, i64 0, !dbg !37
  %917 = insertelement <2 x i32> %916, i32 %915, i64 1, !dbg !37
  store <2 x i32> %917, ptr addrspace(3) %911, align 8, !dbg !37
  %918 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 32, !dbg !37
  %919 = bitcast float %818 to i32, !dbg !37
  %920 = select i1 %535, i32 %919, i32 0, !dbg !40
  %921 = bitcast float %819 to i32, !dbg !37
  %922 = select i1 %538, i32 %921, i32 0, !dbg !40
  %923 = insertelement <2 x i32> poison, i32 %920, i64 0, !dbg !37
  %924 = insertelement <2 x i32> %923, i32 %922, i64 1, !dbg !37
  store <2 x i32> %924, ptr addrspace(3) %918, align 8, !dbg !37
  %925 = or disjoint i32 %897, 520, !dbg !37
  %926 = lshr i32 %925, 4, !dbg !37
  %927 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %926, !dbg !37
  %928 = getelementptr inbounds nuw float, ptr addrspace(3) %927, i32 %925, !dbg !37
  %929 = bitcast float %820 to i32, !dbg !37
  %930 = select i1 %540, i32 %929, i32 0, !dbg !40
  %931 = bitcast float %821 to i32, !dbg !37
  %932 = select i1 %542, i32 %931, i32 0, !dbg !40
  %933 = insertelement <2 x i32> poison, i32 %930, i64 0, !dbg !37
  %934 = insertelement <2 x i32> %933, i32 %932, i64 1, !dbg !37
  store <2 x i32> %934, ptr addrspace(3) %928, align 8, !dbg !37
  %935 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 64, !dbg !37
  %936 = bitcast float %822 to i32, !dbg !37
  %937 = select i1 %545, i32 %936, i32 0, !dbg !40
  %938 = bitcast float %823 to i32, !dbg !37
  %939 = select i1 %548, i32 %938, i32 0, !dbg !40
  %940 = insertelement <2 x i32> poison, i32 %937, i64 0, !dbg !37
  %941 = insertelement <2 x i32> %940, i32 %939, i64 1, !dbg !37
  store <2 x i32> %941, ptr addrspace(3) %935, align 8, !dbg !37
  %942 = or disjoint i32 %897, 528, !dbg !37
  %943 = lshr i32 %942, 4, !dbg !37
  %944 = and i32 %943, 252, !dbg !37
  %945 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %944, !dbg !37
  %946 = getelementptr inbounds nuw float, ptr addrspace(3) %945, i32 %942, !dbg !37
  %947 = bitcast float %824 to i32, !dbg !37
  %948 = select i1 %550, i32 %947, i32 0, !dbg !40
  %949 = bitcast float %825 to i32, !dbg !37
  %950 = select i1 %552, i32 %949, i32 0, !dbg !40
  %951 = insertelement <2 x i32> poison, i32 %948, i64 0, !dbg !37
  %952 = insertelement <2 x i32> %951, i32 %950, i64 1, !dbg !37
  store <2 x i32> %952, ptr addrspace(3) %946, align 8, !dbg !37
  %953 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 96, !dbg !37
  %954 = bitcast float %826 to i32, !dbg !37
  %955 = select i1 %555, i32 %954, i32 0, !dbg !40
  %956 = bitcast float %827 to i32, !dbg !37
  %957 = select i1 %558, i32 %956, i32 0, !dbg !40
  %958 = insertelement <2 x i32> poison, i32 %955, i64 0, !dbg !37
  %959 = insertelement <2 x i32> %958, i32 %957, i64 1, !dbg !37
  store <2 x i32> %959, ptr addrspace(3) %953, align 8, !dbg !37
  %960 = or disjoint i32 %897, 536, !dbg !37
  %961 = lshr i32 %960, 4, !dbg !37
  %962 = and i32 %961, 252, !dbg !37
  %963 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %962, !dbg !37
  %964 = getelementptr inbounds nuw float, ptr addrspace(3) %963, i32 %960, !dbg !37
  %965 = bitcast float %828 to i32, !dbg !37
  %966 = select i1 %560, i32 %965, i32 0, !dbg !40
  %967 = bitcast float %829 to i32, !dbg !37
  %968 = select i1 %562, i32 %967, i32 0, !dbg !40
  %969 = insertelement <2 x i32> poison, i32 %966, i64 0, !dbg !37
  %970 = insertelement <2 x i32> %969, i32 %968, i64 1, !dbg !37
  store <2 x i32> %970, ptr addrspace(3) %964, align 8, !dbg !37
  %971 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 128, !dbg !37
  %972 = bitcast float %830 to i32, !dbg !37
  %973 = select i1 %565, i32 %972, i32 0, !dbg !40
  %974 = bitcast float %831 to i32, !dbg !37
  %975 = select i1 %568, i32 %974, i32 0, !dbg !40
  %976 = insertelement <2 x i32> poison, i32 %973, i64 0, !dbg !37
  %977 = insertelement <2 x i32> %976, i32 %975, i64 1, !dbg !37
  store <2 x i32> %977, ptr addrspace(3) %971, align 8, !dbg !37
  %978 = or disjoint i32 %897, 544, !dbg !37
  %979 = lshr i32 %978, 4, !dbg !37
  %980 = and i32 %979, 252, !dbg !37
  %981 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %980, !dbg !37
  %982 = getelementptr inbounds nuw float, ptr addrspace(3) %981, i32 %978, !dbg !37
  %983 = bitcast float %832 to i32, !dbg !37
  %984 = select i1 %570, i32 %983, i32 0, !dbg !40
  %985 = bitcast float %833 to i32, !dbg !37
  %986 = select i1 %572, i32 %985, i32 0, !dbg !40
  %987 = insertelement <2 x i32> poison, i32 %984, i64 0, !dbg !37
  %988 = insertelement <2 x i32> %987, i32 %986, i64 1, !dbg !37
  store <2 x i32> %988, ptr addrspace(3) %982, align 8, !dbg !37
  %989 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 160, !dbg !37
  %990 = bitcast float %834 to i32, !dbg !37
  %991 = select i1 %575, i32 %990, i32 0, !dbg !40
  %992 = bitcast float %835 to i32, !dbg !37
  %993 = select i1 %578, i32 %992, i32 0, !dbg !40
  %994 = insertelement <2 x i32> poison, i32 %991, i64 0, !dbg !37
  %995 = insertelement <2 x i32> %994, i32 %993, i64 1, !dbg !37
  store <2 x i32> %995, ptr addrspace(3) %989, align 8, !dbg !37
  %996 = or disjoint i32 %897, 552, !dbg !37
  %997 = lshr i32 %996, 4, !dbg !37
  %998 = and i32 %997, 252, !dbg !37
  %999 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %998, !dbg !37
  %1000 = getelementptr inbounds nuw float, ptr addrspace(3) %999, i32 %996, !dbg !37
  %1001 = bitcast float %836 to i32, !dbg !37
  %1002 = select i1 %580, i32 %1001, i32 0, !dbg !40
  %1003 = bitcast float %837 to i32, !dbg !37
  %1004 = select i1 %582, i32 %1003, i32 0, !dbg !40
  %1005 = insertelement <2 x i32> poison, i32 %1002, i64 0, !dbg !37
  %1006 = insertelement <2 x i32> %1005, i32 %1004, i64 1, !dbg !37
  store <2 x i32> %1006, ptr addrspace(3) %1000, align 8, !dbg !37
  %1007 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 192, !dbg !37
  %1008 = bitcast float %838 to i32, !dbg !37
  %1009 = select i1 %585, i32 %1008, i32 0, !dbg !40
  %1010 = bitcast float %839 to i32, !dbg !37
  %1011 = select i1 %588, i32 %1010, i32 0, !dbg !40
  %1012 = insertelement <2 x i32> poison, i32 %1009, i64 0, !dbg !37
  %1013 = insertelement <2 x i32> %1012, i32 %1011, i64 1, !dbg !37
  store <2 x i32> %1013, ptr addrspace(3) %1007, align 8, !dbg !37
  %1014 = or disjoint i32 %897, 560, !dbg !37
  %1015 = lshr i32 %1014, 4, !dbg !37
  %1016 = and i32 %1015, 252, !dbg !37
  %1017 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1016, !dbg !37
  %1018 = getelementptr inbounds nuw float, ptr addrspace(3) %1017, i32 %1014, !dbg !37
  %1019 = bitcast float %840 to i32, !dbg !37
  %1020 = select i1 %590, i32 %1019, i32 0, !dbg !40
  %1021 = bitcast float %841 to i32, !dbg !37
  %1022 = select i1 %592, i32 %1021, i32 0, !dbg !40
  %1023 = insertelement <2 x i32> poison, i32 %1020, i64 0, !dbg !37
  %1024 = insertelement <2 x i32> %1023, i32 %1022, i64 1, !dbg !37
  store <2 x i32> %1024, ptr addrspace(3) %1018, align 8, !dbg !37
  %1025 = getelementptr inbounds nuw i8, ptr addrspace(3) %901, i32 224, !dbg !37
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1025, align 8, !dbg !37
  %1026 = or disjoint i32 %897, 568, !dbg !37
  %1027 = lshr i32 %1026, 4, !dbg !37
  %1028 = and i32 %1027, 252, !dbg !37
  %1029 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1028, !dbg !37
  %1030 = getelementptr inbounds nuw float, ptr addrspace(3) %1029, i32 %1026, !dbg !37
  %1031 = bitcast float %842 to i32, !dbg !37
  %1032 = select i1 %594, i32 %1031, i32 0, !dbg !40
  %1033 = bitcast float %843 to i32, !dbg !37
  %1034 = select i1 %596, i32 %1033, i32 0, !dbg !40
  %1035 = insertelement <2 x i32> poison, i32 %1032, i64 0, !dbg !37
  %1036 = insertelement <2 x i32> %1035, i32 %1034, i64 1, !dbg !37
  store <2 x i32> %1036, ptr addrspace(3) %1030, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %1037 = and i32 %21, 28, !dbg !37
  %1038 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1037, !dbg !37
  %1039 = getelementptr inbounds nuw float, ptr addrspace(3) %1038, i32 %898, !dbg !37
  %1040 = load <4 x i32>, ptr addrspace(3) %1039, align 16, !dbg !37
  %1041 = or disjoint i32 %898, 512, !dbg !37
  %1042 = lshr i32 %1041, 4, !dbg !37
  %1043 = and i32 %1042, 60, !dbg !37
  %1044 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1043, !dbg !37
  %1045 = getelementptr inbounds nuw float, ptr addrspace(3) %1044, i32 %1041, !dbg !37
  %1046 = load <4 x i32>, ptr addrspace(3) %1045, align 16, !dbg !37
  %1047 = or disjoint i32 %898, 1024, !dbg !37
  %1048 = lshr i32 %1047, 4, !dbg !37
  %1049 = and i32 %1048, 92, !dbg !37
  %1050 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1049, !dbg !37
  %1051 = getelementptr inbounds nuw float, ptr addrspace(3) %1050, i32 %1047, !dbg !37
  %1052 = load <4 x i32>, ptr addrspace(3) %1051, align 16, !dbg !37
  %1053 = or disjoint i32 %898, 1536, !dbg !37
  %1054 = lshr i32 %1053, 4, !dbg !37
  %1055 = and i32 %1054, 124, !dbg !37
  %1056 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1055, !dbg !37
  %1057 = getelementptr inbounds nuw float, ptr addrspace(3) %1056, i32 %1053, !dbg !37
  %1058 = load <4 x i32>, ptr addrspace(3) %1057, align 16, !dbg !37
  %1059 = or disjoint i32 %898, 2048, !dbg !37
  %1060 = lshr i32 %1059, 4, !dbg !37
  %1061 = and i32 %1060, 156, !dbg !37
  %1062 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1061, !dbg !37
  %1063 = getelementptr inbounds nuw float, ptr addrspace(3) %1062, i32 %1059, !dbg !37
  %1064 = load <4 x i32>, ptr addrspace(3) %1063, align 16, !dbg !37
  %1065 = or disjoint i32 %898, 2560, !dbg !37
  %1066 = lshr i32 %1065, 4, !dbg !37
  %1067 = and i32 %1066, 188, !dbg !37
  %1068 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1067, !dbg !37
  %1069 = getelementptr inbounds nuw float, ptr addrspace(3) %1068, i32 %1065, !dbg !37
  %1070 = load <4 x i32>, ptr addrspace(3) %1069, align 16, !dbg !37
  %1071 = or disjoint i32 %898, 3072, !dbg !37
  %1072 = lshr i32 %1071, 4, !dbg !37
  %1073 = and i32 %1072, 220, !dbg !37
  %1074 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1073, !dbg !37
  %1075 = getelementptr inbounds nuw float, ptr addrspace(3) %1074, i32 %1071, !dbg !37
  %1076 = load <4 x i32>, ptr addrspace(3) %1075, align 16, !dbg !37
  %1077 = or i32 %384, 3584, !dbg !37
  %1078 = lshr i32 %1077, 4, !dbg !37
  %1079 = and i32 %1078, 252, !dbg !37
  %1080 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1079, !dbg !37
  %1081 = getelementptr inbounds nuw float, ptr addrspace(3) %1080, i32 %1077, !dbg !37
  %1082 = load <4 x i32>, ptr addrspace(3) %1081, align 16, !dbg !37
  %.extract = extractelement <4 x i32> %1040, i64 0, !dbg !37
  %.extract60 = extractelement <4 x i32> %1040, i64 1, !dbg !37
  %.extract61 = extractelement <4 x i32> %1040, i64 2, !dbg !37
  %.extract62 = extractelement <4 x i32> %1040, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %847, i1 %877) #2, !dbg !37
  %.extract63 = extractelement <4 x i32> %1046, i64 0, !dbg !37
  %.extract64 = extractelement <4 x i32> %1046, i64 1, !dbg !37
  %.extract65 = extractelement <4 x i32> %1046, i64 2, !dbg !37
  %.extract66 = extractelement <4 x i32> %1046, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %851, i1 %879) #2, !dbg !37
  %.extract67 = extractelement <4 x i32> %1052, i64 0, !dbg !37
  %.extract68 = extractelement <4 x i32> %1052, i64 1, !dbg !37
  %.extract69 = extractelement <4 x i32> %1052, i64 2, !dbg !37
  %.extract70 = extractelement <4 x i32> %1052, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract68, i32 %.extract69, i32 %.extract70, ptr addrspace(1) %855, i1 %881) #2, !dbg !37
  %.extract71 = extractelement <4 x i32> %1058, i64 0, !dbg !37
  %.extract72 = extractelement <4 x i32> %1058, i64 1, !dbg !37
  %.extract73 = extractelement <4 x i32> %1058, i64 2, !dbg !37
  %.extract74 = extractelement <4 x i32> %1058, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract72, i32 %.extract73, i32 %.extract74, ptr addrspace(1) %859, i1 %883) #2, !dbg !37
  %.extract75 = extractelement <4 x i32> %1064, i64 0, !dbg !37
  %.extract76 = extractelement <4 x i32> %1064, i64 1, !dbg !37
  %.extract77 = extractelement <4 x i32> %1064, i64 2, !dbg !37
  %.extract78 = extractelement <4 x i32> %1064, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract76, i32 %.extract77, i32 %.extract78, ptr addrspace(1) %863, i1 %885) #2, !dbg !37
  %.extract79 = extractelement <4 x i32> %1070, i64 0, !dbg !37
  %.extract80 = extractelement <4 x i32> %1070, i64 1, !dbg !37
  %.extract81 = extractelement <4 x i32> %1070, i64 2, !dbg !37
  %.extract82 = extractelement <4 x i32> %1070, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract80, i32 %.extract81, i32 %.extract82, ptr addrspace(1) %867, i1 %887) #2, !dbg !37
  %.extract83 = extractelement <4 x i32> %1076, i64 0, !dbg !37
  %.extract84 = extractelement <4 x i32> %1076, i64 1, !dbg !37
  %.extract85 = extractelement <4 x i32> %1076, i64 2, !dbg !37
  %.extract86 = extractelement <4 x i32> %1076, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract83, i32 %.extract84, i32 %.extract85, i32 %.extract86, ptr addrspace(1) %871, i1 %889) #2, !dbg !37
  %.extract87 = extractelement <4 x i32> %1082, i64 0, !dbg !37
  %.extract88 = extractelement <4 x i32> %1082, i64 1, !dbg !37
  %.extract89 = extractelement <4 x i32> %1082, i64 2, !dbg !37
  %.extract90 = extractelement <4 x i32> %1082, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract88, i32 %.extract89, i32 %.extract90, ptr addrspace(1) %875, i1 %891) #2, !dbg !37
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 51, column: 21, scope: !5)
!26 = !DILocation(line: 52, column: 16, scope: !5)
!27 = !DILocation(line: 70, column: 26, scope: !5)
!28 = !DILocation(line: 64, column: 36, scope: !5)
!29 = !DILocation(line: 64, column: 44, scope: !5)
!30 = !DILocation(line: 65, column: 22, scope: !5)
!31 = !DILocation(line: 67, column: 15, scope: !5)
!32 = !DILocation(line: 68, column: 11, scope: !5)
!33 = !DILocation(line: 70, column: 43, scope: !5)
!34 = !DILocation(line: 70, column: 58, scope: !5)
!35 = !DILocation(line: 72, column: 48, scope: !5)
!36 = !DILocation(line: 72, column: 32, scope: !5)
!37 = !DILocation(line: 73, column: 18, scope: !5)
!38 = !DILocation(line: 66, column: 34, scope: !5)
!39 = !DILocation(line: 67, column: 19, scope: !5)
!40 = !DILocation(line: 71, column: 29, scope: !5)
!41 = !DILocation(line: 73, column: 4, scope: !5)
