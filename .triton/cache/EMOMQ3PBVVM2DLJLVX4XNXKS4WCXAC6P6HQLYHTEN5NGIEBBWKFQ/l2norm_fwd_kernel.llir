; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 3, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 4, !dbg !11
  %.lobit = and i32 %10, 1, !dbg !11
  %11 = or disjoint i32 %.lobit, 2, !dbg !11
  %12 = or disjoint i32 %.lobit, 4, !dbg !11
  %13 = or disjoint i32 %.lobit, 6, !dbg !11
  %14 = zext nneg i32 %.lobit to i64, !dbg !11
  %15 = zext nneg i32 %11 to i64, !dbg !11
  %16 = zext nneg i32 %12 to i64, !dbg !11
  %17 = zext nneg i32 %13 to i64, !dbg !11
  %18 = or disjoint i64 %14, %8, !dbg !11
  %19 = or disjoint i64 %15, %8, !dbg !11
  %20 = or disjoint i64 %16, %8, !dbg !11
  %21 = or disjoint i64 %17, %8, !dbg !11
  %22 = shl nsw i64 %18, 7, !dbg !11
  %23 = shl nsw i64 %19, 7, !dbg !11
  %24 = shl nsw i64 %20, 7, !dbg !11
  %25 = shl nsw i64 %21, 7, !dbg !11
  %26 = shl nuw nsw i32 %9, 3, !dbg !11
  %27 = and i32 %26, 120, !dbg !11
  %28 = zext nneg i32 %27 to i64, !dbg !11
  %29 = or disjoint i64 %22, %28, !dbg !11
  %30 = or disjoint i64 %23, %28, !dbg !11
  %31 = or disjoint i64 %24, %28, !dbg !11
  %32 = or disjoint i64 %25, %28, !dbg !11
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %29, !dbg !11
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !11
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !11
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !11
  %37 = icmp sgt i32 %7, -1, !dbg !11
  %38 = icmp slt i64 %18, 49152, !dbg !11
  %39 = icmp slt i64 %19, 49152, !dbg !11
  %40 = icmp slt i64 %20, 49152, !dbg !11
  %41 = icmp slt i64 %21, 49152, !dbg !11
  %42 = and i1 %37, %38, !dbg !11
  %43 = and i1 %37, %39, !dbg !11
  %44 = and i1 %37, %40, !dbg !11
  %45 = and i1 %37, %41, !dbg !11
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %42) #6, !dbg !11
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !11
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !11
  %49 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !11
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !11
  %51 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !11
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !11
  %53 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !11
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !11
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !11
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !11
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !11
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !11
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !11
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !11
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !11
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !11
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %43) #6, !dbg !11
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !11
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !11
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !11
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !11
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !11
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !11
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !11
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !11
  %72 = extractelement <2 x bfloat> %65, i64 0, !dbg !11
  %73 = extractelement <2 x bfloat> %65, i64 1, !dbg !11
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !11
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !11
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !11
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !11
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !11
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !11
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %44) #6, !dbg !11
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !11
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !11
  %83 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !11
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !11
  %85 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !11
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !11
  %87 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !11
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !11
  %89 = extractelement <2 x bfloat> %82, i64 0, !dbg !11
  %90 = extractelement <2 x bfloat> %82, i64 1, !dbg !11
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !11
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !11
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !11
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !11
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !11
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !11
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %45) #6, !dbg !11
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !11
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !11
  %100 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !11
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !11
  %102 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !11
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !11
  %104 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !11
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !11
  %106 = extractelement <2 x bfloat> %99, i64 0, !dbg !11
  %107 = extractelement <2 x bfloat> %99, i64 1, !dbg !11
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !11
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !11
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !11
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !11
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !11
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !11
  %114 = fpext bfloat %55 to float, !dbg !12
  %115 = fpext bfloat %56 to float, !dbg !12
  %116 = fpext bfloat %57 to float, !dbg !12
  %117 = fpext bfloat %58 to float, !dbg !12
  %118 = fpext bfloat %59 to float, !dbg !12
  %119 = fpext bfloat %60 to float, !dbg !12
  %120 = fpext bfloat %61 to float, !dbg !12
  %121 = fpext bfloat %62 to float, !dbg !12
  %122 = fpext bfloat %72 to float, !dbg !12
  %123 = fpext bfloat %73 to float, !dbg !12
  %124 = fpext bfloat %74 to float, !dbg !12
  %125 = fpext bfloat %75 to float, !dbg !12
  %126 = fpext bfloat %76 to float, !dbg !12
  %127 = fpext bfloat %77 to float, !dbg !12
  %128 = fpext bfloat %78 to float, !dbg !12
  %129 = fpext bfloat %79 to float, !dbg !12
  %130 = fpext bfloat %89 to float, !dbg !12
  %131 = fpext bfloat %90 to float, !dbg !12
  %132 = fpext bfloat %91 to float, !dbg !12
  %133 = fpext bfloat %92 to float, !dbg !12
  %134 = fpext bfloat %93 to float, !dbg !12
  %135 = fpext bfloat %94 to float, !dbg !12
  %136 = fpext bfloat %95 to float, !dbg !12
  %137 = fpext bfloat %96 to float, !dbg !12
  %138 = fpext bfloat %106 to float, !dbg !12
  %139 = fpext bfloat %107 to float, !dbg !12
  %140 = fpext bfloat %108 to float, !dbg !12
  %141 = fpext bfloat %109 to float, !dbg !12
  %142 = fpext bfloat %110 to float, !dbg !12
  %143 = fpext bfloat %111 to float, !dbg !12
  %144 = fpext bfloat %112 to float, !dbg !12
  %145 = fpext bfloat %113 to float, !dbg !12
  %146 = fmul float %114, %114, !dbg !13
  %147 = fmul float %115, %115, !dbg !13
  %148 = fmul float %116, %116, !dbg !13
  %149 = fmul float %117, %117, !dbg !13
  %150 = fmul float %118, %118, !dbg !13
  %151 = fmul float %119, %119, !dbg !13
  %152 = fmul float %120, %120, !dbg !13
  %153 = fmul float %121, %121, !dbg !13
  %154 = fmul float %122, %122, !dbg !13
  %155 = fmul float %123, %123, !dbg !13
  %156 = fmul float %124, %124, !dbg !13
  %157 = fmul float %125, %125, !dbg !13
  %158 = fmul float %126, %126, !dbg !13
  %159 = fmul float %127, %127, !dbg !13
  %160 = fmul float %128, %128, !dbg !13
  %161 = fmul float %129, %129, !dbg !13
  %162 = fmul float %130, %130, !dbg !13
  %163 = fmul float %131, %131, !dbg !13
  %164 = fmul float %132, %132, !dbg !13
  %165 = fmul float %133, %133, !dbg !13
  %166 = fmul float %134, %134, !dbg !13
  %167 = fmul float %135, %135, !dbg !13
  %168 = fmul float %136, %136, !dbg !13
  %169 = fmul float %137, %137, !dbg !13
  %170 = fmul float %138, %138, !dbg !13
  %171 = fmul float %139, %139, !dbg !13
  %172 = fmul float %140, %140, !dbg !13
  %173 = fmul float %141, %141, !dbg !13
  %174 = fmul float %142, %142, !dbg !13
  %175 = fmul float %143, %143, !dbg !13
  %176 = fmul float %144, %144, !dbg !13
  %177 = fmul float %145, %145, !dbg !13
  %178 = fadd float %146, %147, !dbg !14
  %179 = fadd float %148, %178, !dbg !14
  %180 = fadd float %149, %179, !dbg !14
  %181 = fadd float %150, %180, !dbg !14
  %182 = fadd float %151, %181, !dbg !14
  %183 = fadd float %152, %182, !dbg !14
  %184 = fadd float %153, %183, !dbg !14
  %185 = fadd float %154, %155, !dbg !14
  %186 = fadd float %156, %185, !dbg !14
  %187 = fadd float %157, %186, !dbg !14
  %188 = fadd float %158, %187, !dbg !14
  %189 = fadd float %159, %188, !dbg !14
  %190 = fadd float %160, %189, !dbg !14
  %191 = fadd float %161, %190, !dbg !14
  %192 = fadd float %162, %163, !dbg !14
  %193 = fadd float %164, %192, !dbg !14
  %194 = fadd float %165, %193, !dbg !14
  %195 = fadd float %166, %194, !dbg !14
  %196 = fadd float %167, %195, !dbg !14
  %197 = fadd float %168, %196, !dbg !14
  %198 = fadd float %169, %197, !dbg !14
  %199 = fadd float %170, %171, !dbg !14
  %200 = fadd float %172, %199, !dbg !14
  %201 = fadd float %173, %200, !dbg !14
  %202 = fadd float %174, %201, !dbg !14
  %203 = fadd float %175, %202, !dbg !14
  %204 = fadd float %176, %203, !dbg !14
  %205 = fadd float %177, %204, !dbg !14
  %206 = bitcast float %184 to i32, !dbg !18
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !18
  %208 = bitcast i32 %207 to float, !dbg !18
  %209 = fadd float %184, %208, !dbg !14
  %210 = bitcast float %209 to i32, !dbg !18
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 4, i32 31), !dbg !18
  %212 = bitcast i32 %211 to float, !dbg !18
  %213 = fadd float %209, %212, !dbg !14
  %214 = bitcast float %213 to i32, !dbg !18
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !18
  %216 = bitcast i32 %215 to float, !dbg !18
  %217 = fadd float %213, %216, !dbg !14
  %218 = bitcast float %217 to i32, !dbg !18
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !18
  %220 = bitcast i32 %219 to float, !dbg !18
  %221 = fadd float %217, %220, !dbg !14
  %222 = bitcast float %191 to i32, !dbg !18
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !18
  %224 = bitcast i32 %223 to float, !dbg !18
  %225 = fadd float %191, %224, !dbg !14
  %226 = bitcast float %225 to i32, !dbg !18
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !18
  %228 = bitcast i32 %227 to float, !dbg !18
  %229 = fadd float %225, %228, !dbg !14
  %230 = bitcast float %229 to i32, !dbg !18
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !18
  %232 = bitcast i32 %231 to float, !dbg !18
  %233 = fadd float %229, %232, !dbg !14
  %234 = bitcast float %233 to i32, !dbg !18
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !18
  %236 = bitcast i32 %235 to float, !dbg !18
  %237 = fadd float %233, %236, !dbg !14
  %238 = bitcast float %198 to i32, !dbg !18
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !18
  %240 = bitcast i32 %239 to float, !dbg !18
  %241 = fadd float %198, %240, !dbg !14
  %242 = bitcast float %241 to i32, !dbg !18
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !18
  %244 = bitcast i32 %243 to float, !dbg !18
  %245 = fadd float %241, %244, !dbg !14
  %246 = bitcast float %245 to i32, !dbg !18
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !18
  %248 = bitcast i32 %247 to float, !dbg !18
  %249 = fadd float %245, %248, !dbg !14
  %250 = bitcast float %249 to i32, !dbg !18
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !18
  %252 = bitcast i32 %251 to float, !dbg !18
  %253 = fadd float %249, %252, !dbg !14
  %254 = bitcast float %205 to i32, !dbg !18
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !18
  %256 = bitcast i32 %255 to float, !dbg !18
  %257 = fadd float %205, %256, !dbg !14
  %258 = bitcast float %257 to i32, !dbg !18
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !18
  %260 = bitcast i32 %259 to float, !dbg !18
  %261 = fadd float %257, %260, !dbg !14
  %262 = bitcast float %261 to i32, !dbg !18
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !18
  %264 = bitcast i32 %263 to float, !dbg !18
  %265 = fadd float %261, %264, !dbg !14
  %266 = bitcast float %265 to i32, !dbg !18
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !18
  %268 = bitcast i32 %267 to float, !dbg !18
  %269 = fadd float %265, %268, !dbg !14
  %270 = fadd float %3, %221, !dbg !19
  %271 = fadd float %3, %237, !dbg !19
  %272 = fadd float %3, %253, !dbg !19
  %273 = fadd float %3, %269, !dbg !19
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %274, 0, !dbg !20
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %275, 0, !dbg !20
  br i1 %.not.i, label %281, label %276, !dbg !20

276:                                              ; preds = %5
  br i1 %.not1.i, label %279, label %277, !dbg !20

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

281:                                              ; preds = %5
  br i1 %.not1.i, label %284, label %282, !dbg !20

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %277, %279, %282, %284
  %.0.i = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !20
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i1 = icmp eq i32 %286, 0, !dbg !20
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i4 = icmp eq i32 %287, 0, !dbg !20
  br i1 %.not.i1, label %293, label %288, !dbg !20

288:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %291, label %289, !dbg !20

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

293:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %296, label %294, !dbg !20

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

__nv_sqrtf.exit5:                                 ; preds = %289, %291, %294, %296
  %.0.i3 = phi float [ %290, %289 ], [ %292, %291 ], [ %295, %294 ], [ %297, %296 ], !dbg !20
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i6 = icmp eq i32 %298, 0, !dbg !20
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i9 = icmp eq i32 %299, 0, !dbg !20
  br i1 %.not.i6, label %305, label %300, !dbg !20

300:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %303, label %301, !dbg !20

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

305:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %308, label %306, !dbg !20

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

__nv_sqrtf.exit10:                                ; preds = %301, %303, %306, %308
  %.0.i8 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !20
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i11 = icmp eq i32 %310, 0, !dbg !20
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i14 = icmp eq i32 %311, 0, !dbg !20
  br i1 %.not.i11, label %317, label %312, !dbg !20

312:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %315, label %313, !dbg !20

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

317:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %320, label %318, !dbg !20

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

__nv_sqrtf.exit15:                                ; preds = %313, %315, %318, %320
  %.0.i13 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !20
  %322 = and i32 %9, 7, !dbg !11
  %323 = zext nneg i32 %322 to i64, !dbg !11
  %324 = or disjoint i64 %8, %323, !dbg !11
  %325 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %326 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i3), !dbg !21
  %327 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i8), !dbg !21
  %328 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i13), !dbg !21
  %329 = fmul float %325, %114, !dbg !22
  %330 = fmul float %325, %115, !dbg !22
  %331 = fmul float %325, %116, !dbg !22
  %332 = fmul float %325, %117, !dbg !22
  %333 = fmul float %325, %118, !dbg !22
  %334 = fmul float %325, %119, !dbg !22
  %335 = fmul float %325, %120, !dbg !22
  %336 = fmul float %325, %121, !dbg !22
  %337 = fmul float %326, %122, !dbg !22
  %338 = fmul float %326, %123, !dbg !22
  %339 = fmul float %326, %124, !dbg !22
  %340 = fmul float %326, %125, !dbg !22
  %341 = fmul float %326, %126, !dbg !22
  %342 = fmul float %326, %127, !dbg !22
  %343 = fmul float %326, %128, !dbg !22
  %344 = fmul float %326, %129, !dbg !22
  %345 = fmul float %327, %130, !dbg !22
  %346 = fmul float %327, %131, !dbg !22
  %347 = fmul float %327, %132, !dbg !22
  %348 = fmul float %327, %133, !dbg !22
  %349 = fmul float %327, %134, !dbg !22
  %350 = fmul float %327, %135, !dbg !22
  %351 = fmul float %327, %136, !dbg !22
  %352 = fmul float %327, %137, !dbg !22
  %353 = fmul float %328, %138, !dbg !22
  %354 = fmul float %328, %139, !dbg !22
  %355 = fmul float %328, %140, !dbg !22
  %356 = fmul float %328, %141, !dbg !22
  %357 = fmul float %328, %142, !dbg !22
  %358 = fmul float %328, %143, !dbg !22
  %359 = fmul float %328, %144, !dbg !22
  %360 = fmul float %328, %145, !dbg !22
  %361 = fptrunc float %329 to bfloat, !dbg !23
  %362 = fptrunc float %330 to bfloat, !dbg !23
  %363 = fptrunc float %331 to bfloat, !dbg !23
  %364 = fptrunc float %332 to bfloat, !dbg !23
  %365 = fptrunc float %333 to bfloat, !dbg !23
  %366 = fptrunc float %334 to bfloat, !dbg !23
  %367 = fptrunc float %335 to bfloat, !dbg !23
  %368 = fptrunc float %336 to bfloat, !dbg !23
  %369 = fptrunc float %337 to bfloat, !dbg !23
  %370 = fptrunc float %338 to bfloat, !dbg !23
  %371 = fptrunc float %339 to bfloat, !dbg !23
  %372 = fptrunc float %340 to bfloat, !dbg !23
  %373 = fptrunc float %341 to bfloat, !dbg !23
  %374 = fptrunc float %342 to bfloat, !dbg !23
  %375 = fptrunc float %343 to bfloat, !dbg !23
  %376 = fptrunc float %344 to bfloat, !dbg !23
  %377 = fptrunc float %345 to bfloat, !dbg !23
  %378 = fptrunc float %346 to bfloat, !dbg !23
  %379 = fptrunc float %347 to bfloat, !dbg !23
  %380 = fptrunc float %348 to bfloat, !dbg !23
  %381 = fptrunc float %349 to bfloat, !dbg !23
  %382 = fptrunc float %350 to bfloat, !dbg !23
  %383 = fptrunc float %351 to bfloat, !dbg !23
  %384 = fptrunc float %352 to bfloat, !dbg !23
  %385 = fptrunc float %353 to bfloat, !dbg !23
  %386 = fptrunc float %354 to bfloat, !dbg !23
  %387 = fptrunc float %355 to bfloat, !dbg !23
  %388 = fptrunc float %356 to bfloat, !dbg !23
  %389 = fptrunc float %357 to bfloat, !dbg !23
  %390 = fptrunc float %358 to bfloat, !dbg !23
  %391 = fptrunc float %359 to bfloat, !dbg !23
  %392 = fptrunc float %360 to bfloat, !dbg !23
  %393 = getelementptr bfloat, ptr addrspace(1) %1, i64 %29, !dbg !24
  %394 = getelementptr bfloat, ptr addrspace(1) %1, i64 %30, !dbg !24
  %395 = getelementptr bfloat, ptr addrspace(1) %1, i64 %31, !dbg !24
  %396 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !24
  %397 = insertelement <2 x bfloat> poison, bfloat %361, i64 0, !dbg !24
  %398 = insertelement <2 x bfloat> %397, bfloat %362, i64 1, !dbg !24
  %399 = bitcast <2 x bfloat> %398 to i32, !dbg !24
  %400 = insertelement <2 x bfloat> poison, bfloat %363, i64 0, !dbg !24
  %401 = insertelement <2 x bfloat> %400, bfloat %364, i64 1, !dbg !24
  %402 = bitcast <2 x bfloat> %401 to i32, !dbg !24
  %403 = insertelement <2 x bfloat> poison, bfloat %365, i64 0, !dbg !24
  %404 = insertelement <2 x bfloat> %403, bfloat %366, i64 1, !dbg !24
  %405 = bitcast <2 x bfloat> %404 to i32, !dbg !24
  %406 = insertelement <2 x bfloat> poison, bfloat %367, i64 0, !dbg !24
  %407 = insertelement <2 x bfloat> %406, bfloat %368, i64 1, !dbg !24
  %408 = bitcast <2 x bfloat> %407 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %399, i32 %402, i32 %405, i32 %408, ptr addrspace(1) %393, i1 %42) #6, !dbg !24
  %409 = insertelement <2 x bfloat> poison, bfloat %369, i64 0, !dbg !24
  %410 = insertelement <2 x bfloat> %409, bfloat %370, i64 1, !dbg !24
  %411 = bitcast <2 x bfloat> %410 to i32, !dbg !24
  %412 = insertelement <2 x bfloat> poison, bfloat %371, i64 0, !dbg !24
  %413 = insertelement <2 x bfloat> %412, bfloat %372, i64 1, !dbg !24
  %414 = bitcast <2 x bfloat> %413 to i32, !dbg !24
  %415 = insertelement <2 x bfloat> poison, bfloat %373, i64 0, !dbg !24
  %416 = insertelement <2 x bfloat> %415, bfloat %374, i64 1, !dbg !24
  %417 = bitcast <2 x bfloat> %416 to i32, !dbg !24
  %418 = insertelement <2 x bfloat> poison, bfloat %375, i64 0, !dbg !24
  %419 = insertelement <2 x bfloat> %418, bfloat %376, i64 1, !dbg !24
  %420 = bitcast <2 x bfloat> %419 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %411, i32 %414, i32 %417, i32 %420, ptr addrspace(1) %394, i1 %43) #6, !dbg !24
  %421 = insertelement <2 x bfloat> poison, bfloat %377, i64 0, !dbg !24
  %422 = insertelement <2 x bfloat> %421, bfloat %378, i64 1, !dbg !24
  %423 = bitcast <2 x bfloat> %422 to i32, !dbg !24
  %424 = insertelement <2 x bfloat> poison, bfloat %379, i64 0, !dbg !24
  %425 = insertelement <2 x bfloat> %424, bfloat %380, i64 1, !dbg !24
  %426 = bitcast <2 x bfloat> %425 to i32, !dbg !24
  %427 = insertelement <2 x bfloat> poison, bfloat %381, i64 0, !dbg !24
  %428 = insertelement <2 x bfloat> %427, bfloat %382, i64 1, !dbg !24
  %429 = bitcast <2 x bfloat> %428 to i32, !dbg !24
  %430 = insertelement <2 x bfloat> poison, bfloat %383, i64 0, !dbg !24
  %431 = insertelement <2 x bfloat> %430, bfloat %384, i64 1, !dbg !24
  %432 = bitcast <2 x bfloat> %431 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %423, i32 %426, i32 %429, i32 %432, ptr addrspace(1) %395, i1 %44) #6, !dbg !24
  %433 = insertelement <2 x bfloat> poison, bfloat %385, i64 0, !dbg !24
  %434 = insertelement <2 x bfloat> %433, bfloat %386, i64 1, !dbg !24
  %435 = bitcast <2 x bfloat> %434 to i32, !dbg !24
  %436 = insertelement <2 x bfloat> poison, bfloat %387, i64 0, !dbg !24
  %437 = insertelement <2 x bfloat> %436, bfloat %388, i64 1, !dbg !24
  %438 = bitcast <2 x bfloat> %437 to i32, !dbg !24
  %439 = insertelement <2 x bfloat> poison, bfloat %389, i64 0, !dbg !24
  %440 = insertelement <2 x bfloat> %439, bfloat %390, i64 1, !dbg !24
  %441 = bitcast <2 x bfloat> %440 to i32, !dbg !24
  %442 = insertelement <2 x bfloat> poison, bfloat %391, i64 0, !dbg !24
  %443 = insertelement <2 x bfloat> %442, bfloat %392, i64 1, !dbg !24
  %444 = bitcast <2 x bfloat> %443 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %435, i32 %438, i32 %441, i32 %444, ptr addrspace(1) %396, i1 %45) #6, !dbg !24
  %445 = getelementptr float, ptr addrspace(1) %2, i64 %324, !dbg !25
  %446 = icmp slt i64 %324, 49152, !dbg !25
  %447 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !25
  store float %325, ptr addrspace(3) %447, align 4, !dbg !25
  %448 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %326, ptr addrspace(3) %448, align 4, !dbg !25
  %449 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %327, ptr addrspace(3) %449, align 4, !dbg !25
  %450 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  store float %328, ptr addrspace(3) %450, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %451 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %322, !dbg !25
  %452 = load i32, ptr addrspace(3) %451, align 4, !dbg !25
  %453 = and i32 %9, 24, !dbg !25
  %454 = icmp eq i32 %453, 0, !dbg !25
  %455 = and i1 %454, %446, !dbg !25
  %456 = and i1 %37, %455, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %452, ptr addrspace(1) %445, i1 %456) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="32" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
