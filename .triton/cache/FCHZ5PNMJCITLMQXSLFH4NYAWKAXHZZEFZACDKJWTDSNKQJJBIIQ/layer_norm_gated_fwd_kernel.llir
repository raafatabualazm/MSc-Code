; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @layer_norm_gated_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = shl nuw nsw i32 %10, 3, !dbg !9
  %12 = and i32 %11, 120, !dbg !9
  %13 = shl i32 %9, 6, !dbg !10
  %14 = sext i32 %6 to i64, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !11
  %.lobit1 = lshr i32 %10, 4, !dbg !12
  %16 = and i32 %.lobit1, 31, !dbg !12
  %17 = or i32 %.lobit1, 32, !dbg !12
  %18 = zext nneg i32 %16 to i64, !dbg !12
  %19 = zext nneg i32 %17 to i64, !dbg !12
  %20 = or disjoint i64 %18, %15, !dbg !12
  %21 = or disjoint i64 %19, %15, !dbg !12
  %22 = shl nsw i64 %20, 7, !dbg !12
  %23 = shl nsw i64 %21, 7, !dbg !12
  %24 = zext nneg i32 %12 to i64, !dbg !12
  %25 = or disjoint i64 %22, %24, !dbg !12
  %26 = or disjoint i64 %23, %24, !dbg !12
  %27 = getelementptr bfloat, ptr addrspace(1) %0, i64 %25, !dbg !12
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !12
  %29 = icmp sgt i32 %13, -1, !dbg !12
  %30 = icmp slt i64 %20, %14, !dbg !12
  %31 = icmp slt i64 %21, %14, !dbg !12
  %32 = and i1 %29, %30, !dbg !12
  %33 = and i1 %29, %31, !dbg !12
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %32) #6, !dbg !12
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !12
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !12
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !12
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !12
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !12
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !12
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !12
  %42 = bitcast i32 %41 to <2 x bfloat>, !dbg !12
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !12
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !12
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !12
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !12
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !12
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !12
  %49 = extractelement <2 x bfloat> %42, i64 0, !dbg !12
  %50 = extractelement <2 x bfloat> %42, i64 1, !dbg !12
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %33) #6, !dbg !12
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !12
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !12
  %54 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !12
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !12
  %56 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !12
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !12
  %58 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !12
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !12
  %60 = extractelement <2 x bfloat> %53, i64 0, !dbg !12
  %61 = extractelement <2 x bfloat> %53, i64 1, !dbg !12
  %62 = extractelement <2 x bfloat> %55, i64 0, !dbg !12
  %63 = extractelement <2 x bfloat> %55, i64 1, !dbg !12
  %64 = extractelement <2 x bfloat> %57, i64 0, !dbg !12
  %65 = extractelement <2 x bfloat> %57, i64 1, !dbg !12
  %66 = extractelement <2 x bfloat> %59, i64 0, !dbg !12
  %67 = extractelement <2 x bfloat> %59, i64 1, !dbg !12
  %68 = fpext bfloat %43 to float, !dbg !13
  %69 = fpext bfloat %44 to float, !dbg !13
  %70 = fpext bfloat %45 to float, !dbg !13
  %71 = fpext bfloat %46 to float, !dbg !13
  %72 = fpext bfloat %47 to float, !dbg !13
  %73 = fpext bfloat %48 to float, !dbg !13
  %74 = fpext bfloat %49 to float, !dbg !13
  %75 = fpext bfloat %50 to float, !dbg !13
  %76 = fpext bfloat %60 to float, !dbg !13
  %77 = fpext bfloat %61 to float, !dbg !13
  %78 = fpext bfloat %62 to float, !dbg !13
  %79 = fpext bfloat %63 to float, !dbg !13
  %80 = fpext bfloat %64 to float, !dbg !13
  %81 = fpext bfloat %65 to float, !dbg !13
  %82 = fpext bfloat %66 to float, !dbg !13
  %83 = fpext bfloat %67 to float, !dbg !13
  %84 = fmul float %68, %68, !dbg !14
  %85 = fmul float %69, %69, !dbg !14
  %86 = fmul float %70, %70, !dbg !14
  %87 = fmul float %71, %71, !dbg !14
  %88 = fmul float %72, %72, !dbg !14
  %89 = fmul float %73, %73, !dbg !14
  %90 = fmul float %74, %74, !dbg !14
  %91 = fmul float %75, %75, !dbg !14
  %92 = fmul float %76, %76, !dbg !14
  %93 = fmul float %77, %77, !dbg !14
  %94 = fmul float %78, %78, !dbg !14
  %95 = fmul float %79, %79, !dbg !14
  %96 = fmul float %80, %80, !dbg !14
  %97 = fmul float %81, %81, !dbg !14
  %98 = fmul float %82, %82, !dbg !14
  %99 = fmul float %83, %83, !dbg !14
  %100 = fadd float %84, %85, !dbg !15
  %101 = fadd float %86, %100, !dbg !15
  %102 = fadd float %87, %101, !dbg !15
  %103 = fadd float %88, %102, !dbg !15
  %104 = fadd float %89, %103, !dbg !15
  %105 = fadd float %90, %104, !dbg !15
  %106 = fadd float %91, %105, !dbg !15
  %107 = fadd float %92, %93, !dbg !15
  %108 = fadd float %94, %107, !dbg !15
  %109 = fadd float %95, %108, !dbg !15
  %110 = fadd float %96, %109, !dbg !15
  %111 = fadd float %97, %110, !dbg !15
  %112 = fadd float %98, %111, !dbg !15
  %113 = fadd float %99, %112, !dbg !15
  %114 = bitcast float %106 to i32, !dbg !19
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !19
  %116 = bitcast i32 %115 to float, !dbg !19
  %117 = fadd float %106, %116, !dbg !15
  %118 = bitcast float %117 to i32, !dbg !19
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !19
  %120 = bitcast i32 %119 to float, !dbg !19
  %121 = fadd float %117, %120, !dbg !15
  %122 = bitcast float %121 to i32, !dbg !19
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !19
  %124 = bitcast i32 %123 to float, !dbg !19
  %125 = fadd float %121, %124, !dbg !15
  %126 = bitcast float %125 to i32, !dbg !19
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !19
  %128 = bitcast i32 %127 to float, !dbg !19
  %129 = fadd float %125, %128, !dbg !15
  %130 = bitcast float %113 to i32, !dbg !19
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !19
  %132 = bitcast i32 %131 to float, !dbg !19
  %133 = fadd float %113, %132, !dbg !15
  %134 = bitcast float %133 to i32, !dbg !19
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 4, i32 31), !dbg !19
  %136 = bitcast i32 %135 to float, !dbg !19
  %137 = fadd float %133, %136, !dbg !15
  %138 = bitcast float %137 to i32, !dbg !19
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !19
  %140 = bitcast i32 %139 to float, !dbg !19
  %141 = fadd float %137, %140, !dbg !15
  %142 = bitcast float %141 to i32, !dbg !19
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !19
  %144 = bitcast i32 %143 to float, !dbg !19
  %145 = fadd float %141, %144, !dbg !15
  %146 = tail call float @llvm.nvvm.div.full(float %129, float 1.280000e+02), !dbg !20
  %147 = tail call float @llvm.nvvm.div.full(float %145, float 1.280000e+02), !dbg !20
  %148 = fadd float %5, %146, !dbg !21
  %149 = fadd float %5, %147, !dbg !21
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i = icmp eq i32 %150, 0, !dbg !22
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i = icmp eq i32 %151, 0, !dbg !22
  br i1 %.not.i, label %157, label %152, !dbg !22

152:                                              ; preds = %8
  br i1 %.not1.i, label %155, label %153, !dbg !22

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

157:                                              ; preds = %8
  br i1 %.not1.i, label %160, label %158, !dbg !22

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %153, %155, %158, %160
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !22
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i2 = icmp eq i32 %162, 0, !dbg !22
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i5 = icmp eq i32 %163, 0, !dbg !22
  br i1 %.not.i2, label %169, label %164, !dbg !22

164:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %167, label %165, !dbg !22

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

169:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %172, label %170, !dbg !22

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

__nv_sqrtf.exit6:                                 ; preds = %165, %167, %170, %172
  %.0.i4 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !22
  %174 = and i32 %10, 63, !dbg !12
  %175 = zext nneg i32 %174 to i64, !dbg !12
  %176 = or disjoint i64 %15, %175, !dbg !12
  %177 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !23
  %178 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i4), !dbg !23
  %179 = getelementptr float, ptr addrspace(1) %4, i64 %176, !dbg !24
  %180 = icmp slt i64 %176, %14, !dbg !24
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !24
  store float %177, ptr addrspace(3) %181, align 4, !dbg !24
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !24
  store float %178, ptr addrspace(3) %182, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %183 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %174, !dbg !24
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !24
  %185 = and i32 %10, 448, !dbg !24
  %186 = icmp eq i32 %185, 0, !dbg !24
  %187 = and i1 %186, %180, !dbg !24
  %188 = and i1 %29, %187, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %179, i1 %188) #6, !dbg !24
  %189 = getelementptr bfloat, ptr addrspace(1) %3, i64 %24, !dbg !25
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 true) #6, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !26
  %192 = bitcast i32 %191 to <2 x bfloat>, !dbg !26
  %193 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !26
  %194 = bitcast i32 %193 to <2 x bfloat>, !dbg !26
  %195 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !26
  %196 = bitcast i32 %195 to <2 x bfloat>, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !26
  %198 = bitcast i32 %197 to <2 x bfloat>, !dbg !26
  %199 = extractelement <2 x bfloat> %192, i64 0, !dbg !26
  %200 = extractelement <2 x bfloat> %192, i64 1, !dbg !26
  %201 = extractelement <2 x bfloat> %194, i64 0, !dbg !26
  %202 = extractelement <2 x bfloat> %194, i64 1, !dbg !26
  %203 = extractelement <2 x bfloat> %196, i64 0, !dbg !26
  %204 = extractelement <2 x bfloat> %196, i64 1, !dbg !26
  %205 = extractelement <2 x bfloat> %198, i64 0, !dbg !26
  %206 = extractelement <2 x bfloat> %198, i64 1, !dbg !26
  %207 = fpext bfloat %199 to float, !dbg !27
  %208 = fpext bfloat %200 to float, !dbg !27
  %209 = fpext bfloat %201 to float, !dbg !27
  %210 = fpext bfloat %202 to float, !dbg !27
  %211 = fpext bfloat %203 to float, !dbg !27
  %212 = fpext bfloat %204 to float, !dbg !27
  %213 = fpext bfloat %205 to float, !dbg !27
  %214 = fpext bfloat %206 to float, !dbg !27
  %215 = fmul float %177, %68, !dbg !28
  %216 = fmul float %177, %69, !dbg !28
  %217 = fmul float %177, %70, !dbg !28
  %218 = fmul float %177, %71, !dbg !28
  %219 = fmul float %177, %72, !dbg !28
  %220 = fmul float %177, %73, !dbg !28
  %221 = fmul float %177, %74, !dbg !28
  %222 = fmul float %177, %75, !dbg !28
  %223 = fmul float %178, %76, !dbg !28
  %224 = fmul float %178, %77, !dbg !28
  %225 = fmul float %178, %78, !dbg !28
  %226 = fmul float %178, %79, !dbg !28
  %227 = fmul float %178, %80, !dbg !28
  %228 = fmul float %178, %81, !dbg !28
  %229 = fmul float %178, %82, !dbg !28
  %230 = fmul float %178, %83, !dbg !28
  %231 = fmul float %215, %207, !dbg !29
  %232 = fmul float %216, %208, !dbg !29
  %233 = fmul float %217, %209, !dbg !29
  %234 = fmul float %218, %210, !dbg !29
  %235 = fmul float %219, %211, !dbg !29
  %236 = fmul float %220, %212, !dbg !29
  %237 = fmul float %221, %213, !dbg !29
  %238 = fmul float %222, %214, !dbg !29
  %239 = fmul float %223, %207, !dbg !29
  %240 = fmul float %224, %208, !dbg !29
  %241 = fmul float %225, %209, !dbg !29
  %242 = fmul float %226, %210, !dbg !29
  %243 = fmul float %227, %211, !dbg !29
  %244 = fmul float %228, %212, !dbg !29
  %245 = fmul float %229, %213, !dbg !29
  %246 = fmul float %230, %214, !dbg !29
  %247 = getelementptr bfloat, ptr addrspace(1) %1, i64 %25, !dbg !30
  %248 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !30
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 %32) #6, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !30
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !30
  %252 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !30
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !30
  %254 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !30
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !30
  %256 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !30
  %257 = bitcast i32 %256 to <2 x bfloat>, !dbg !30
  %258 = extractelement <2 x bfloat> %251, i64 0, !dbg !30
  %259 = extractelement <2 x bfloat> %251, i64 1, !dbg !30
  %260 = extractelement <2 x bfloat> %253, i64 0, !dbg !30
  %261 = extractelement <2 x bfloat> %253, i64 1, !dbg !30
  %262 = extractelement <2 x bfloat> %255, i64 0, !dbg !30
  %263 = extractelement <2 x bfloat> %255, i64 1, !dbg !30
  %264 = extractelement <2 x bfloat> %257, i64 0, !dbg !30
  %265 = extractelement <2 x bfloat> %257, i64 1, !dbg !30
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %248, i1 %33) #6, !dbg !30
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !30
  %268 = bitcast i32 %267 to <2 x bfloat>, !dbg !30
  %269 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !30
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !30
  %271 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !30
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !30
  %273 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !30
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !30
  %275 = extractelement <2 x bfloat> %268, i64 0, !dbg !30
  %276 = extractelement <2 x bfloat> %268, i64 1, !dbg !30
  %277 = extractelement <2 x bfloat> %270, i64 0, !dbg !30
  %278 = extractelement <2 x bfloat> %270, i64 1, !dbg !30
  %279 = extractelement <2 x bfloat> %272, i64 0, !dbg !30
  %280 = extractelement <2 x bfloat> %272, i64 1, !dbg !30
  %281 = extractelement <2 x bfloat> %274, i64 0, !dbg !30
  %282 = extractelement <2 x bfloat> %274, i64 1, !dbg !30
  %283 = fpext bfloat %258 to float, !dbg !31
  %284 = fpext bfloat %259 to float, !dbg !31
  %285 = fpext bfloat %260 to float, !dbg !31
  %286 = fpext bfloat %261 to float, !dbg !31
  %287 = fpext bfloat %262 to float, !dbg !31
  %288 = fpext bfloat %263 to float, !dbg !31
  %289 = fpext bfloat %264 to float, !dbg !31
  %290 = fpext bfloat %265 to float, !dbg !31
  %291 = fpext bfloat %275 to float, !dbg !31
  %292 = fpext bfloat %276 to float, !dbg !31
  %293 = fpext bfloat %277 to float, !dbg !31
  %294 = fpext bfloat %278 to float, !dbg !31
  %295 = fpext bfloat %279 to float, !dbg !31
  %296 = fpext bfloat %280 to float, !dbg !31
  %297 = fpext bfloat %281 to float, !dbg !31
  %298 = fpext bfloat %282 to float, !dbg !31
  %299 = fmul float %231, %283, !dbg !32
  %300 = fmul float %232, %284, !dbg !32
  %301 = fmul float %233, %285, !dbg !32
  %302 = fmul float %234, %286, !dbg !32
  %303 = fmul float %235, %287, !dbg !32
  %304 = fmul float %236, %288, !dbg !32
  %305 = fmul float %237, %289, !dbg !32
  %306 = fmul float %238, %290, !dbg !32
  %307 = fmul float %239, %291, !dbg !32
  %308 = fmul float %240, %292, !dbg !32
  %309 = fmul float %241, %293, !dbg !32
  %310 = fmul float %242, %294, !dbg !32
  %311 = fmul float %243, %295, !dbg !32
  %312 = fmul float %244, %296, !dbg !32
  %313 = fmul float %245, %297, !dbg !32
  %314 = fmul float %246, %298, !dbg !32
  %315 = fsub float 0.000000e+00, %283, !dbg !33
  %316 = fsub float 0.000000e+00, %284, !dbg !33
  %317 = fsub float 0.000000e+00, %285, !dbg !33
  %318 = fsub float 0.000000e+00, %286, !dbg !33
  %319 = fsub float 0.000000e+00, %287, !dbg !33
  %320 = fsub float 0.000000e+00, %288, !dbg !33
  %321 = fsub float 0.000000e+00, %289, !dbg !33
  %322 = fsub float 0.000000e+00, %290, !dbg !33
  %323 = fsub float 0.000000e+00, %291, !dbg !33
  %324 = fsub float 0.000000e+00, %292, !dbg !33
  %325 = fsub float 0.000000e+00, %293, !dbg !33
  %326 = fsub float 0.000000e+00, %294, !dbg !33
  %327 = fsub float 0.000000e+00, %295, !dbg !33
  %328 = fsub float 0.000000e+00, %296, !dbg !33
  %329 = fsub float 0.000000e+00, %297, !dbg !33
  %330 = fsub float 0.000000e+00, %298, !dbg !33
  %331 = fmul float %315, 0x3FF7154760000000, !dbg !35
  %332 = tail call float @llvm.nvvm.ex2.approx.f(float %331), !dbg !35
  %333 = fmul float %316, 0x3FF7154760000000, !dbg !35
  %334 = tail call float @llvm.nvvm.ex2.approx.f(float %333), !dbg !35
  %335 = fmul float %317, 0x3FF7154760000000, !dbg !35
  %336 = tail call float @llvm.nvvm.ex2.approx.f(float %335), !dbg !35
  %337 = fmul float %318, 0x3FF7154760000000, !dbg !35
  %338 = tail call float @llvm.nvvm.ex2.approx.f(float %337), !dbg !35
  %339 = fmul float %319, 0x3FF7154760000000, !dbg !35
  %340 = tail call float @llvm.nvvm.ex2.approx.f(float %339), !dbg !35
  %341 = fmul float %320, 0x3FF7154760000000, !dbg !35
  %342 = tail call float @llvm.nvvm.ex2.approx.f(float %341), !dbg !35
  %343 = fmul float %321, 0x3FF7154760000000, !dbg !35
  %344 = tail call float @llvm.nvvm.ex2.approx.f(float %343), !dbg !35
  %345 = fmul float %322, 0x3FF7154760000000, !dbg !35
  %346 = tail call float @llvm.nvvm.ex2.approx.f(float %345), !dbg !35
  %347 = fmul float %323, 0x3FF7154760000000, !dbg !35
  %348 = tail call float @llvm.nvvm.ex2.approx.f(float %347), !dbg !35
  %349 = fmul float %324, 0x3FF7154760000000, !dbg !35
  %350 = tail call float @llvm.nvvm.ex2.approx.f(float %349), !dbg !35
  %351 = fmul float %325, 0x3FF7154760000000, !dbg !35
  %352 = tail call float @llvm.nvvm.ex2.approx.f(float %351), !dbg !35
  %353 = fmul float %326, 0x3FF7154760000000, !dbg !35
  %354 = tail call float @llvm.nvvm.ex2.approx.f(float %353), !dbg !35
  %355 = fmul float %327, 0x3FF7154760000000, !dbg !35
  %356 = tail call float @llvm.nvvm.ex2.approx.f(float %355), !dbg !35
  %357 = fmul float %328, 0x3FF7154760000000, !dbg !35
  %358 = tail call float @llvm.nvvm.ex2.approx.f(float %357), !dbg !35
  %359 = fmul float %329, 0x3FF7154760000000, !dbg !35
  %360 = tail call float @llvm.nvvm.ex2.approx.f(float %359), !dbg !35
  %361 = fmul float %330, 0x3FF7154760000000, !dbg !35
  %362 = tail call float @llvm.nvvm.ex2.approx.f(float %361), !dbg !35
  %363 = fadd float %332, 1.000000e+00, !dbg !36
  %364 = fadd float %334, 1.000000e+00, !dbg !36
  %365 = fadd float %336, 1.000000e+00, !dbg !36
  %366 = fadd float %338, 1.000000e+00, !dbg !36
  %367 = fadd float %340, 1.000000e+00, !dbg !36
  %368 = fadd float %342, 1.000000e+00, !dbg !36
  %369 = fadd float %344, 1.000000e+00, !dbg !36
  %370 = fadd float %346, 1.000000e+00, !dbg !36
  %371 = fadd float %348, 1.000000e+00, !dbg !36
  %372 = fadd float %350, 1.000000e+00, !dbg !36
  %373 = fadd float %352, 1.000000e+00, !dbg !36
  %374 = fadd float %354, 1.000000e+00, !dbg !36
  %375 = fadd float %356, 1.000000e+00, !dbg !36
  %376 = fadd float %358, 1.000000e+00, !dbg !36
  %377 = fadd float %360, 1.000000e+00, !dbg !36
  %378 = fadd float %362, 1.000000e+00, !dbg !36
  %379 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %363), !dbg !37
  %380 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %364), !dbg !37
  %381 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %365), !dbg !37
  %382 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %366), !dbg !37
  %383 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %367), !dbg !37
  %384 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %368), !dbg !37
  %385 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %369), !dbg !37
  %386 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %370), !dbg !37
  %387 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %371), !dbg !37
  %388 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %372), !dbg !37
  %389 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %373), !dbg !37
  %390 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %374), !dbg !37
  %391 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %375), !dbg !37
  %392 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %376), !dbg !37
  %393 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %377), !dbg !37
  %394 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %378), !dbg !37
  %395 = fmul float %299, %379, !dbg !38
  %396 = fmul float %300, %380, !dbg !38
  %397 = fmul float %301, %381, !dbg !38
  %398 = fmul float %302, %382, !dbg !38
  %399 = fmul float %303, %383, !dbg !38
  %400 = fmul float %304, %384, !dbg !38
  %401 = fmul float %305, %385, !dbg !38
  %402 = fmul float %306, %386, !dbg !38
  %403 = fmul float %307, %387, !dbg !38
  %404 = fmul float %308, %388, !dbg !38
  %405 = fmul float %309, %389, !dbg !38
  %406 = fmul float %310, %390, !dbg !38
  %407 = fmul float %311, %391, !dbg !38
  %408 = fmul float %312, %392, !dbg !38
  %409 = fmul float %313, %393, !dbg !38
  %410 = fmul float %314, %394, !dbg !38
  %411 = fptrunc float %395 to bfloat, !dbg !39
  %412 = fptrunc float %396 to bfloat, !dbg !39
  %413 = fptrunc float %397 to bfloat, !dbg !39
  %414 = fptrunc float %398 to bfloat, !dbg !39
  %415 = fptrunc float %399 to bfloat, !dbg !39
  %416 = fptrunc float %400 to bfloat, !dbg !39
  %417 = fptrunc float %401 to bfloat, !dbg !39
  %418 = fptrunc float %402 to bfloat, !dbg !39
  %419 = fptrunc float %403 to bfloat, !dbg !39
  %420 = fptrunc float %404 to bfloat, !dbg !39
  %421 = fptrunc float %405 to bfloat, !dbg !39
  %422 = fptrunc float %406 to bfloat, !dbg !39
  %423 = fptrunc float %407 to bfloat, !dbg !39
  %424 = fptrunc float %408 to bfloat, !dbg !39
  %425 = fptrunc float %409 to bfloat, !dbg !39
  %426 = fptrunc float %410 to bfloat, !dbg !39
  %427 = getelementptr bfloat, ptr addrspace(1) %2, i64 %25, !dbg !40
  %428 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !40
  %429 = insertelement <2 x bfloat> poison, bfloat %411, i64 0, !dbg !40
  %430 = insertelement <2 x bfloat> %429, bfloat %412, i64 1, !dbg !40
  %431 = bitcast <2 x bfloat> %430 to i32, !dbg !40
  %432 = insertelement <2 x bfloat> poison, bfloat %413, i64 0, !dbg !40
  %433 = insertelement <2 x bfloat> %432, bfloat %414, i64 1, !dbg !40
  %434 = bitcast <2 x bfloat> %433 to i32, !dbg !40
  %435 = insertelement <2 x bfloat> poison, bfloat %415, i64 0, !dbg !40
  %436 = insertelement <2 x bfloat> %435, bfloat %416, i64 1, !dbg !40
  %437 = bitcast <2 x bfloat> %436 to i32, !dbg !40
  %438 = insertelement <2 x bfloat> poison, bfloat %417, i64 0, !dbg !40
  %439 = insertelement <2 x bfloat> %438, bfloat %418, i64 1, !dbg !40
  %440 = bitcast <2 x bfloat> %439 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %431, i32 %434, i32 %437, i32 %440, ptr addrspace(1) %427, i1 %32) #6, !dbg !40
  %441 = insertelement <2 x bfloat> poison, bfloat %419, i64 0, !dbg !40
  %442 = insertelement <2 x bfloat> %441, bfloat %420, i64 1, !dbg !40
  %443 = bitcast <2 x bfloat> %442 to i32, !dbg !40
  %444 = insertelement <2 x bfloat> poison, bfloat %421, i64 0, !dbg !40
  %445 = insertelement <2 x bfloat> %444, bfloat %422, i64 1, !dbg !40
  %446 = bitcast <2 x bfloat> %445 to i32, !dbg !40
  %447 = insertelement <2 x bfloat> poison, bfloat %423, i64 0, !dbg !40
  %448 = insertelement <2 x bfloat> %447, bfloat %424, i64 1, !dbg !40
  %449 = bitcast <2 x bfloat> %448 to i32, !dbg !40
  %450 = insertelement <2 x bfloat> poison, bfloat %425, i64 0, !dbg !40
  %451 = insertelement <2 x bfloat> %450, bfloat %426, i64 1, !dbg !40
  %452 = bitcast <2 x bfloat> %451 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %446, i32 %449, i32 %452, ptr addrspace(1) %428, i1 %33) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_norm_gate.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "layer_norm_gated_fwd_kernel", linkageName: "layer_norm_gated_fwd_kernel", scope: !1, file: !1, line: 33, type: !6, scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 56, column: 24, scope: !5)
!9 = !DILocation(line: 58, column: 23, scope: !5)
!10 = !DILocation(line: 61, column: 54, scope: !5)
!11 = !DILocation(line: 61, column: 72, scope: !5)
!12 = !DILocation(line: 62, column: 18, scope: !5)
!13 = !DILocation(line: 62, column: 49, scope: !5)
!14 = !DILocation(line: 77, column: 32, scope: !5)
!15 = !DILocation(line: 260, column: 15, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !5, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!18 = !DILocation(line: 77, column: 23, scope: !5)
!19 = !DILocation(line: 290, column: 36, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 77, column: 50, scope: !5)
!21 = !DILocation(line: 78, column: 33, scope: !5)
!22 = !DILocation(line: 78, column: 25, scope: !5)
!23 = !DILocation(line: 78, column: 17, scope: !5)
!24 = !DILocation(line: 81, column: 21, scope: !5)
!25 = !DILocation(line: 84, column: 26, scope: !5)
!26 = !DILocation(line: 84, column: 22, scope: !5)
!27 = !DILocation(line: 84, column: 44, scope: !5)
!28 = !DILocation(line: 87, column: 86, scope: !5)
!29 = !DILocation(line: 88, column: 20, scope: !5)
!30 = !DILocation(line: 94, column: 18, scope: !5)
!31 = !DILocation(line: 94, column: 49, scope: !5)
!32 = !DILocation(line: 98, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !34)
!34 = !DILocation(line: 98, column: 37, scope: !5)
!35 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !34)
!38 = !DILocation(line: 98, column: 26, scope: !5)
!39 = !DILocation(line: 104, column: 25, scope: !5)
!40 = !DILocation(line: 104, column: 18, scope: !5)
!41 = !DILocation(line: 104, column: 4, scope: !5)
