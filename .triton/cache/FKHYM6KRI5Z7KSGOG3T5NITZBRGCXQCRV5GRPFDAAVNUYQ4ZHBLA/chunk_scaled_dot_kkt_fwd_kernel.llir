; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 8, !dbg !13
  %15 = icmp eq i32 %14, 0, !dbg !13
  %16 = and i32 %12, 16, !dbg !13
  %.not2 = icmp eq i32 %16, 0, !dbg !13
  %17 = lshr i32 %12, 2, !dbg !13
  %18 = and i32 %17, 7, !dbg !13
  %19 = and i32 %17, 31, !dbg !13
  %20 = and i32 %12, 128, !dbg !13
  %21 = lshr exact i32 %20, 2, !dbg !13
  %22 = or disjoint i32 %19, %21, !dbg !13
  %23 = lshr i32 %12, 1, !dbg !13
  %24 = and i32 %23, 48, !dbg !13
  %25 = or disjoint i32 %24, %18, !dbg !13
  %26 = or disjoint i32 %25, 8, !dbg !13
  %27 = mul i32 %9, %4, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !15
  %30 = zext nneg i32 %10 to i64, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %29, i64 %30, !dbg !16
  %32 = sext i32 %4 to i64, !dbg !17
  %33 = sext i32 %11 to i64, !dbg !17
  %34 = zext nneg i32 %22 to i64, !dbg !18
  %35 = zext nneg i32 %25 to i64, !dbg !18
  %36 = zext nneg i32 %26 to i64, !dbg !18
  %37 = or disjoint i64 %34, %33, !dbg !18
  %38 = or disjoint i64 %35, %33, !dbg !18
  %39 = or disjoint i64 %36, %33, !dbg !18
  %40 = shl nsw i64 %38, 5, !dbg !18
  %41 = shl nsw i64 %39, 5, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %31, i64 %40, !dbg !18
  %43 = getelementptr bfloat, ptr addrspace(1) %31, i64 %41, !dbg !18
  %44 = icmp sgt i32 %11, -1, !dbg !18
  %45 = icmp slt i64 %38, %32, !dbg !18
  %46 = icmp slt i64 %39, %32, !dbg !18
  %47 = and i1 %44, %45, !dbg !18
  %48 = and i1 %44, %46, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %47) #2, !dbg !18
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %48) #2, !dbg !18
  %51 = or disjoint i32 %27, %10, !dbg !19
  %52 = shl i32 %51, 7, !dbg !20
  %53 = sext i32 %52 to i64, !dbg !21
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = shl nuw nsw i32 %12, 3, !dbg !22
  %56 = and i32 %55, 24, !dbg !22
  %57 = zext nneg i32 %56 to i64, !dbg !22
  %58 = icmp slt i64 %37, %32, !dbg !22
  %59 = and i1 %44, %58, !dbg !22
  %.idx47 = shl nsw i64 %37, 13, !dbg !22
  %60 = getelementptr i8, ptr addrspace(1) %54, i64 %.idx47, !dbg !22
  %61 = getelementptr bfloat, ptr addrspace(1) %60, i64 %57, !dbg !22
  %62 = and i32 %55, 56, !dbg !22
  %63 = select i1 %15, i32 0, i32 72, !dbg !22
  %64 = xor i32 %63, %62, !dbg !22
  %65 = select i1 %.not2, i32 0, i32 144, !dbg !22
  %66 = xor i32 %64, %65, !dbg !22
  %67 = and i32 %55, 1792, !dbg !22
  %68 = or disjoint i32 %66, %67, !dbg !22
  %69 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !22
  %70 = select i1 %59, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %61, i32 %70) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %71 = getelementptr i8, ptr addrspace(1) %61, i64 64, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %68, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %71, i32 %70) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %73 = zext nneg i32 %56 to i64
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %60, i64 %73, !dbg !23
  %invariant.gep81 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 128, !dbg !23
  br label %74, !dbg !23

74:                                               ; preds = %6, %74
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %74 ]
  %75 = phi i32 [ -1, %6 ], [ %95, %74 ]
  %76 = phi i32 [ 1, %6 ], [ %173, %74 ]
  %77 = phi float [ 0.000000e+00, %6 ], [ %155, %74 ]
  %78 = phi float [ 0.000000e+00, %6 ], [ %156, %74 ]
  %79 = phi float [ 0.000000e+00, %6 ], [ %157, %74 ]
  %80 = phi float [ 0.000000e+00, %6 ], [ %158, %74 ]
  %81 = phi float [ 0.000000e+00, %6 ], [ %159, %74 ]
  %82 = phi float [ 0.000000e+00, %6 ], [ %160, %74 ]
  %83 = phi float [ 0.000000e+00, %6 ], [ %161, %74 ]
  %84 = phi float [ 0.000000e+00, %6 ], [ %162, %74 ]
  %85 = phi float [ 0.000000e+00, %6 ], [ %163, %74 ]
  %86 = phi float [ 0.000000e+00, %6 ], [ %164, %74 ]
  %87 = phi float [ 0.000000e+00, %6 ], [ %165, %74 ]
  %88 = phi float [ 0.000000e+00, %6 ], [ %166, %74 ]
  %89 = phi float [ 0.000000e+00, %6 ], [ %167, %74 ]
  %90 = phi float [ 0.000000e+00, %6 ], [ %168, %74 ]
  %91 = phi float [ 0.000000e+00, %6 ], [ %169, %74 ]
  %92 = phi float [ 0.000000e+00, %6 ], [ %170, %74 ]
  %93 = add i32 %75, 1, !dbg !23
  %94 = icmp sgt i32 %93, 2, !dbg !23
  %95 = select i1 %94, i32 0, i32 %93, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 1), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx45 = shl i32 %95, 12, !dbg !22
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx45, !dbg !22
  %97 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %98 = ptrtoint ptr addrspace(3) %96 to i32, !dbg !24
  %99 = lshr exact i32 %98, 4, !dbg !24
  %100 = and i32 %99, 16383, !dbg !24
  %101 = zext nneg i32 %100 to i64, !dbg !24
  %102 = or disjoint i64 %101, -9223371899399045120, !dbg !24
  %103 = shl i32 %97, 9, !dbg !24
  %104 = and i32 %103, 2048, !dbg !24
  %105 = add i32 %104, %98, !dbg !24
  %106 = lshr exact i32 %105, 4, !dbg !24
  %107 = and i32 %106, 16383, !dbg !24
  %108 = zext nneg i32 %107 to i64, !dbg !24
  %109 = or disjoint i64 %108, -9223371899399045120, !dbg !24
  %110 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, i64 %102, i64 %109, i1 true) #2, !dbg !24
  %111 = add i32 %98, 32, !dbg !24
  %112 = lshr exact i32 %111, 4, !dbg !24
  %113 = and i32 %112, 16383, !dbg !24
  %114 = zext nneg i32 %113 to i64, !dbg !24
  %115 = or disjoint i64 %114, -9223371899399045120, !dbg !24
  %116 = add i32 %111, %104, !dbg !24
  %117 = lshr exact i32 %116, 4, !dbg !24
  %118 = and i32 %117, 16383, !dbg !24
  %119 = zext nneg i32 %118 to i64, !dbg !24
  %120 = or disjoint i64 %119, -9223371899399045120, !dbg !24
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 0, !dbg !24
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 1, !dbg !24
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 2, !dbg !24
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 3, !dbg !24
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 4, !dbg !24
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 5, !dbg !24
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 6, !dbg !24
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 7, !dbg !24
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 8, !dbg !24
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 9, !dbg !24
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 10, !dbg !24
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 11, !dbg !24
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 12, !dbg !24
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 13, !dbg !24
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 14, !dbg !24
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 15, !dbg !24
  %137 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, i64 %115, i64 %120, i1 true) #2, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 0, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 1, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 2, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 3, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 4, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 5, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 6, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 7, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 8, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 9, !dbg !24
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 10, !dbg !24
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 11, !dbg !24
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 12, !dbg !24
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 13, !dbg !24
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 14, !dbg !24
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %154 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, ptr addrspace(3) %96, i32 0, i32 0, ptr addrspace(3) %96, i32 0, i32 0) #2, !dbg !24
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 0, !dbg !24
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 1, !dbg !24
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 2, !dbg !24
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 3, !dbg !24
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 4, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 5, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 6, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 7, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 8, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 9, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 10, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 11, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 12, !dbg !24
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 13, !dbg !24
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 14, !dbg !24
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %154, 15, !dbg !24
  %171 = add i32 %76, 1, !dbg !23
  %172 = icmp sgt i32 %171, 2, !dbg !23
  %173 = select i1 %172, i32 0, i32 %171, !dbg !23
  %.idx64 = shl i64 %indvars.iv, 6, !dbg !22
  %gep82 = getelementptr i8, ptr addrspace(1) %invariant.gep81, i64 %.idx64, !dbg !22
  %174 = icmp samesign ult i64 %indvars.iv, 2, !dbg !22
  %175 = and i1 %59, %174, !dbg !22
  %.idx46 = shl i32 %173, 12, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %gep = getelementptr i8, ptr addrspace(3) %69, i32 %.idx46, !dbg !22
  %176 = select i1 %175, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep82, i32 %176) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !23
  br i1 %exitcond.not, label %177, label %74, !dbg !23

177:                                              ; preds = %74
  %178 = bitcast i16 %50 to bfloat, !dbg !18
  %179 = bitcast i16 %49 to bfloat, !dbg !18
  %180 = shl nuw nsw i32 %12, 1, !dbg !13
  %181 = and i32 %180, 6, !dbg !13
  %182 = lshr i32 %12, 4, !dbg !13
  %183 = shl nuw nsw i32 %12, 2, !dbg !13
  %184 = and i32 %183, 60, !dbg !13
  %185 = zext nneg i32 %184 to i64, !dbg !18
  %186 = insertelement <8 x i32> poison, i32 %11, i64 0, !dbg !25
  %187 = shufflevector <8 x i32> %186, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !25
  %188 = insertelement <8 x i32> poison, i32 %4, i64 0, !dbg !26
  %189 = shufflevector <8 x i32> %188, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !26
  %190 = or disjoint i32 %26, %11, !dbg !25
  %191 = icmp slt i32 %190, %4, !dbg !26
  %192 = or disjoint i32 %25, %11, !dbg !25
  %193 = icmp slt i32 %192, %4, !dbg !26
  %194 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %30, !dbg !28
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %40, !dbg !29
  %198 = getelementptr float, ptr addrspace(1) %196, i64 %41, !dbg !29
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %47) #2, !dbg !29
  %200 = bitcast i32 %199 to float, !dbg !29
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %48) #2, !dbg !29
  %202 = bitcast i32 %201 to float, !dbg !29
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 0, !dbg !30
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 1, !dbg !30
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 2, !dbg !30
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 3, !dbg !30
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 4, !dbg !30
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 5, !dbg !30
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 6, !dbg !30
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 7, !dbg !30
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 8, !dbg !30
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 9, !dbg !30
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 10, !dbg !30
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 11, !dbg !30
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 12, !dbg !30
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 13, !dbg !30
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 14, !dbg !30
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %194, 15, !dbg !30
  %219 = fpext bfloat %179 to float, !dbg !31
  %220 = fpext bfloat %178 to float, !dbg !31
  %221 = shl i32 %51, 6, !dbg !32
  %222 = sext i32 %221 to i64, !dbg !33
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !33
  %224 = and i32 %182, 15, !dbg !13
  %225 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !13
  %226 = insertelement <2 x i32> %225, i32 %224, i64 1, !dbg !13
  %227 = or <2 x i32> %226, <i32 48, i32 32>, !dbg !13
  %228 = or disjoint i32 %224, 16, !dbg !13
  %229 = or disjoint i32 %181, %21, !dbg !13
  %230 = or disjoint i32 %229, 25, !dbg !13
  %231 = zext nneg i32 %230 to i64, !dbg !18
  %232 = or disjoint i64 %231, %33, !dbg !18
  %233 = icmp slt i64 %232, %32, !dbg !18
  %234 = and i1 %44, %233, !dbg !18
  %235 = or disjoint i32 %229, 24, !dbg !13
  %236 = zext nneg i32 %235 to i64, !dbg !18
  %237 = or disjoint i64 %236, %33, !dbg !18
  %238 = icmp slt i64 %237, %32, !dbg !18
  %239 = and i1 %44, %238, !dbg !18
  %240 = or disjoint i32 %229, 17, !dbg !13
  %241 = zext nneg i32 %240 to i64, !dbg !18
  %242 = or disjoint i64 %241, %33, !dbg !18
  %243 = icmp slt i64 %242, %32, !dbg !18
  %244 = and i1 %44, %243, !dbg !18
  %245 = or disjoint i32 %229, 16, !dbg !13
  %246 = zext nneg i32 %245 to i64, !dbg !18
  %247 = or disjoint i64 %246, %33, !dbg !18
  %248 = icmp slt i64 %247, %32, !dbg !18
  %249 = and i1 %44, %248, !dbg !18
  %250 = or disjoint i32 %229, 9, !dbg !13
  %251 = or disjoint i32 %229, 8, !dbg !13
  %252 = or disjoint i32 %229, 1, !dbg !13
  %253 = shufflevector <2 x i32> %227, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %254 = insertelement <8 x i32> %253, i32 %228, i64 2, !dbg !18
  %255 = insertelement <8 x i32> %254, i32 %224, i64 3, !dbg !18
  %256 = insertelement <8 x i32> %255, i32 %229, i64 4, !dbg !18
  %257 = insertelement <8 x i32> %256, i32 %252, i64 5, !dbg !18
  %258 = insertelement <8 x i32> %257, i32 %251, i64 6, !dbg !18
  %259 = insertelement <8 x i32> %258, i32 %250, i64 7, !dbg !18
  %260 = or disjoint <8 x i32> %259, %187, !dbg !18
  %261 = icmp slt <8 x i32> %260, %189, !dbg !34
  %262 = extractelement <8 x i1> %261, i64 7, !dbg !18
  %263 = and i1 %44, %262, !dbg !18
  %264 = extractelement <8 x i1> %261, i64 6, !dbg !18
  %265 = and i1 %44, %264, !dbg !18
  %266 = extractelement <8 x i1> %261, i64 5, !dbg !18
  %267 = and i1 %44, %266, !dbg !18
  %268 = extractelement <8 x i1> %261, i64 4, !dbg !18
  %269 = and i1 %44, %268, !dbg !18
  %270 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !25
  %271 = insertelement <8 x i32> %270, i32 %252, i64 1, !dbg !25
  %272 = insertelement <8 x i32> %271, i32 %251, i64 2, !dbg !25
  %273 = insertelement <8 x i32> %272, i32 %250, i64 3, !dbg !25
  %274 = insertelement <8 x i32> %273, i32 %245, i64 4, !dbg !25
  %275 = insertelement <8 x i32> %274, i32 %240, i64 5, !dbg !25
  %276 = insertelement <8 x i32> %275, i32 %235, i64 6, !dbg !25
  %277 = insertelement <8 x i32> %276, i32 %230, i64 7, !dbg !25
  %278 = or disjoint <8 x i32> %277, %187, !dbg !25
  %279 = icmp slt <8 x i32> %278, %189, !dbg !26
  %280 = extractelement <8 x i32> %260, i64 4, !dbg !29
  %281 = sext i32 %280 to i64, !dbg !29
  %.idx = shl nsw i64 %281, 7, !dbg !29
  %282 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx, !dbg !29
  %283 = extractelement <8 x i32> %260, i64 5, !dbg !29
  %284 = sext i32 %283 to i64, !dbg !29
  %.idx4 = shl nsw i64 %284, 7, !dbg !29
  %285 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx4, !dbg !29
  %286 = extractelement <8 x i32> %260, i64 6, !dbg !29
  %287 = sext i32 %286 to i64, !dbg !29
  %.idx5 = shl nsw i64 %287, 7, !dbg !29
  %288 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx5, !dbg !29
  %289 = extractelement <8 x i32> %260, i64 7, !dbg !29
  %290 = sext i32 %289 to i64, !dbg !29
  %.idx6 = shl nsw i64 %290, 7, !dbg !29
  %291 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx6, !dbg !29
  %.idx7 = shl nsw i64 %247, 7, !dbg !29
  %292 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx7, !dbg !29
  %.idx8 = shl nsw i64 %242, 7, !dbg !29
  %293 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx8, !dbg !29
  %.idx9 = shl nsw i64 %237, 7, !dbg !29
  %294 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx9, !dbg !29
  %.idx10 = shl nsw i64 %232, 7, !dbg !29
  %295 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx10, !dbg !29
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %269) #2, !dbg !29
  %297 = bitcast i32 %296 to float, !dbg !29
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %267) #2, !dbg !29
  %299 = bitcast i32 %298 to float, !dbg !29
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %265) #2, !dbg !29
  %301 = bitcast i32 %300 to float, !dbg !29
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %263) #2, !dbg !29
  %303 = bitcast i32 %302 to float, !dbg !29
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %249) #2, !dbg !29
  %305 = bitcast i32 %304 to float, !dbg !29
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %244) #2, !dbg !29
  %307 = bitcast i32 %306 to float, !dbg !29
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %239) #2, !dbg !29
  %309 = bitcast i32 %308 to float, !dbg !29
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %234) #2, !dbg !29
  %311 = bitcast i32 %310 to float, !dbg !29
  %312 = fsub float %200, %297, !dbg !35
  %313 = fsub float %200, %299, !dbg !35
  %314 = fsub float %202, %297, !dbg !35
  %315 = fsub float %202, %299, !dbg !35
  %316 = fsub float %200, %301, !dbg !35
  %317 = fsub float %200, %303, !dbg !35
  %318 = fsub float %202, %301, !dbg !35
  %319 = fsub float %202, %303, !dbg !35
  %320 = fsub float %200, %305, !dbg !35
  %321 = fsub float %200, %307, !dbg !35
  %322 = fsub float %202, %305, !dbg !35
  %323 = fsub float %202, %307, !dbg !35
  %324 = fsub float %200, %309, !dbg !35
  %325 = fsub float %200, %311, !dbg !35
  %326 = fsub float %202, %309, !dbg !35
  %327 = fsub float %202, %311, !dbg !35
  %328 = fmul float %312, 0x3FF7154760000000, !dbg !36
  %329 = tail call float @llvm.nvvm.ex2.approx.f(float %328), !dbg !36
  %330 = fmul float %313, 0x3FF7154760000000, !dbg !36
  %331 = tail call float @llvm.nvvm.ex2.approx.f(float %330), !dbg !36
  %332 = fmul float %314, 0x3FF7154760000000, !dbg !36
  %333 = tail call float @llvm.nvvm.ex2.approx.f(float %332), !dbg !36
  %334 = fmul float %315, 0x3FF7154760000000, !dbg !36
  %335 = tail call float @llvm.nvvm.ex2.approx.f(float %334), !dbg !36
  %336 = fmul float %316, 0x3FF7154760000000, !dbg !36
  %337 = tail call float @llvm.nvvm.ex2.approx.f(float %336), !dbg !36
  %338 = fmul float %317, 0x3FF7154760000000, !dbg !36
  %339 = tail call float @llvm.nvvm.ex2.approx.f(float %338), !dbg !36
  %340 = fmul float %318, 0x3FF7154760000000, !dbg !36
  %341 = tail call float @llvm.nvvm.ex2.approx.f(float %340), !dbg !36
  %342 = fmul float %319, 0x3FF7154760000000, !dbg !36
  %343 = tail call float @llvm.nvvm.ex2.approx.f(float %342), !dbg !36
  %344 = fmul float %320, 0x3FF7154760000000, !dbg !36
  %345 = tail call float @llvm.nvvm.ex2.approx.f(float %344), !dbg !36
  %346 = fmul float %321, 0x3FF7154760000000, !dbg !36
  %347 = tail call float @llvm.nvvm.ex2.approx.f(float %346), !dbg !36
  %348 = fmul float %322, 0x3FF7154760000000, !dbg !36
  %349 = tail call float @llvm.nvvm.ex2.approx.f(float %348), !dbg !36
  %350 = fmul float %323, 0x3FF7154760000000, !dbg !36
  %351 = tail call float @llvm.nvvm.ex2.approx.f(float %350), !dbg !36
  %352 = fmul float %324, 0x3FF7154760000000, !dbg !36
  %353 = tail call float @llvm.nvvm.ex2.approx.f(float %352), !dbg !36
  %354 = fmul float %325, 0x3FF7154760000000, !dbg !36
  %355 = tail call float @llvm.nvvm.ex2.approx.f(float %354), !dbg !36
  %356 = fmul float %326, 0x3FF7154760000000, !dbg !36
  %357 = tail call float @llvm.nvvm.ex2.approx.f(float %356), !dbg !36
  %358 = fmul float %327, 0x3FF7154760000000, !dbg !36
  %359 = tail call float @llvm.nvvm.ex2.approx.f(float %358), !dbg !36
  %360 = fmul float %203, %329, !dbg !30
  %361 = fmul float %204, %331, !dbg !30
  %362 = fmul float %205, %333, !dbg !30
  %363 = fmul float %206, %335, !dbg !30
  %364 = fmul float %207, %337, !dbg !30
  %365 = fmul float %208, %339, !dbg !30
  %366 = fmul float %209, %341, !dbg !30
  %367 = fmul float %210, %343, !dbg !30
  %368 = fmul float %211, %345, !dbg !30
  %369 = fmul float %212, %347, !dbg !30
  %370 = fmul float %213, %349, !dbg !30
  %371 = fmul float %214, %351, !dbg !30
  %372 = fmul float %215, %353, !dbg !30
  %373 = fmul float %216, %355, !dbg !30
  %374 = fmul float %217, %357, !dbg !30
  %375 = fmul float %218, %359, !dbg !30
  %376 = fmul float %360, %219, !dbg !31
  %377 = fmul float %361, %219, !dbg !31
  %378 = fmul float %362, %220, !dbg !31
  %379 = fmul float %363, %220, !dbg !31
  %380 = fmul float %364, %219, !dbg !31
  %381 = fmul float %365, %219, !dbg !31
  %382 = fmul float %366, %220, !dbg !31
  %383 = fmul float %367, %220, !dbg !31
  %384 = fmul float %368, %219, !dbg !31
  %385 = fmul float %369, %219, !dbg !31
  %386 = fmul float %370, %220, !dbg !31
  %387 = fmul float %371, %220, !dbg !31
  %388 = fmul float %372, %219, !dbg !31
  %389 = fmul float %373, %219, !dbg !31
  %390 = fmul float %374, %220, !dbg !31
  %391 = fmul float %375, %220, !dbg !31
  %392 = icmp samesign ugt i32 %25, %229, !dbg !37
  %393 = icmp samesign ugt i32 %25, %252, !dbg !37
  %394 = icmp samesign ugt i32 %26, %229, !dbg !37
  %395 = icmp samesign ugt i32 %26, %252, !dbg !37
  %396 = icmp samesign ugt i32 %25, %251, !dbg !37
  %397 = icmp samesign ugt i32 %25, %250, !dbg !37
  %398 = icmp samesign ugt i32 %26, %250, !dbg !37
  %399 = icmp samesign ugt i32 %25, %245, !dbg !37
  %400 = icmp samesign ugt i32 %25, %240, !dbg !37
  %401 = icmp samesign ugt i32 %26, %245, !dbg !37
  %402 = icmp samesign ugt i32 %26, %240, !dbg !37
  %403 = icmp samesign ugt i32 %25, %235, !dbg !37
  %404 = icmp samesign ugt i32 %25, %230, !dbg !37
  %405 = icmp samesign ugt i32 %26, %235, !dbg !37
  %406 = icmp samesign ugt i32 %26, %230, !dbg !37
  %407 = extractelement <8 x i1> %279, i64 0, !dbg !38
  %408 = and i1 %392, %407, !dbg !38
  %409 = and i1 %193, %408, !dbg !38
  %410 = extractelement <8 x i1> %279, i64 1, !dbg !38
  %411 = and i1 %393, %410, !dbg !38
  %412 = and i1 %193, %411, !dbg !38
  %413 = and i1 %394, %407, !dbg !38
  %414 = and i1 %191, %413, !dbg !38
  %415 = and i1 %395, %410, !dbg !38
  %416 = and i1 %191, %415, !dbg !38
  %417 = extractelement <8 x i1> %279, i64 2, !dbg !38
  %418 = and i1 %396, %417, !dbg !38
  %419 = and i1 %193, %418, !dbg !38
  %420 = extractelement <8 x i1> %279, i64 3, !dbg !38
  %421 = and i1 %397, %420, !dbg !38
  %422 = and i1 %193, %421, !dbg !38
  %423 = and i1 %392, %417, !dbg !38
  %424 = and i1 %191, %423, !dbg !38
  %425 = and i1 %398, %420, !dbg !38
  %426 = and i1 %191, %425, !dbg !38
  %427 = extractelement <8 x i1> %279, i64 4, !dbg !38
  %428 = and i1 %399, %427, !dbg !38
  %429 = and i1 %193, %428, !dbg !38
  %430 = extractelement <8 x i1> %279, i64 5, !dbg !38
  %431 = and i1 %400, %430, !dbg !38
  %432 = and i1 %193, %431, !dbg !38
  %433 = and i1 %401, %427, !dbg !38
  %434 = and i1 %191, %433, !dbg !38
  %435 = and i1 %402, %430, !dbg !38
  %436 = and i1 %191, %435, !dbg !38
  %437 = extractelement <8 x i1> %279, i64 6, !dbg !38
  %438 = and i1 %403, %437, !dbg !38
  %439 = and i1 %193, %438, !dbg !38
  %440 = extractelement <8 x i1> %279, i64 7, !dbg !38
  %441 = and i1 %404, %440, !dbg !38
  %442 = and i1 %193, %441, !dbg !38
  %443 = and i1 %405, %437, !dbg !38
  %444 = and i1 %191, %443, !dbg !38
  %445 = and i1 %406, %440, !dbg !38
  %446 = and i1 %191, %445, !dbg !38
  %447 = extractelement <8 x i32> %260, i64 3, !dbg !34
  %448 = sext i32 %447 to i64, !dbg !34
  %.idx11 = shl nsw i64 %448, 13, !dbg !34
  %449 = getelementptr i8, ptr addrspace(1) %223, i64 %.idx11, !dbg !34
  %450 = getelementptr float, ptr addrspace(1) %449, i64 %185, !dbg !34
  %451 = extractelement <8 x i32> %260, i64 2, !dbg !34
  %452 = sext i32 %451 to i64, !dbg !34
  %.idx12 = shl nsw i64 %452, 13, !dbg !34
  %453 = getelementptr i8, ptr addrspace(1) %223, i64 %.idx12, !dbg !34
  %454 = getelementptr float, ptr addrspace(1) %453, i64 %185, !dbg !34
  %455 = extractelement <8 x i32> %260, i64 1, !dbg !34
  %456 = sext i32 %455 to i64, !dbg !34
  %.idx13 = shl nsw i64 %456, 13, !dbg !34
  %457 = getelementptr i8, ptr addrspace(1) %223, i64 %.idx13, !dbg !34
  %458 = getelementptr float, ptr addrspace(1) %457, i64 %185, !dbg !34
  %459 = extractelement <8 x i32> %260, i64 0, !dbg !34
  %460 = sext i32 %459 to i64, !dbg !34
  %.idx14 = shl nsw i64 %460, 13, !dbg !34
  %461 = getelementptr i8, ptr addrspace(1) %223, i64 %.idx14, !dbg !34
  %462 = getelementptr float, ptr addrspace(1) %461, i64 %185, !dbg !34
  %463 = extractelement <8 x i1> %261, i64 3, !dbg !34
  %464 = and i1 %44, %463, !dbg !34
  %465 = extractelement <8 x i1> %261, i64 2, !dbg !34
  %466 = and i1 %44, %465, !dbg !34
  %467 = extractelement <8 x i1> %261, i64 1, !dbg !34
  %468 = and i1 %44, %467, !dbg !34
  %469 = extractelement <8 x i1> %261, i64 0, !dbg !34
  %470 = and i1 %44, %469, !dbg !34
  %471 = shl nuw nsw i32 %12, 4, !dbg !34
  %472 = and i32 %471, 448, !dbg !34
  %473 = shl nuw nsw i32 %12, 5, !dbg !34
  %474 = and i32 %473, 3072, !dbg !34
  %475 = or disjoint i32 %474, %472, !dbg !34
  %476 = or disjoint i32 %229, %475, !dbg !34
  %477 = and i32 %183, 508, !dbg !34
  %478 = shl nuw nsw i32 %20, 2, !dbg !34
  %479 = or disjoint i32 %477, %478, !dbg !34
  %480 = lshr exact i32 %475, 2, !dbg !34
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %480, !dbg !34
  %482 = getelementptr inbounds nuw float, ptr addrspace(3) %481, i32 %476, !dbg !34
  %483 = bitcast float %376 to i32, !dbg !34
  %484 = select i1 %409, i32 %483, i32 0, !dbg !39
  %485 = bitcast float %377 to i32, !dbg !34
  %486 = select i1 %412, i32 %485, i32 0, !dbg !39
  %487 = insertelement <2 x i32> poison, i32 %484, i64 0, !dbg !34
  %488 = insertelement <2 x i32> %487, i32 %486, i64 1, !dbg !34
  store <2 x i32> %488, ptr addrspace(3) %482, align 8, !dbg !34
  %489 = or disjoint i32 %476, 512, !dbg !34
  %490 = lshr i32 %489, 4, !dbg !34
  %491 = and i32 %490, 67108860, !dbg !34
  %492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %491, !dbg !34
  %493 = getelementptr inbounds nuw float, ptr addrspace(3) %492, i32 %489, !dbg !34
  %494 = bitcast float %378 to i32, !dbg !34
  %495 = select i1 %414, i32 %494, i32 0, !dbg !39
  %496 = bitcast float %379 to i32, !dbg !34
  %497 = select i1 %416, i32 %496, i32 0, !dbg !39
  %498 = insertelement <2 x i32> poison, i32 %495, i64 0, !dbg !34
  %499 = insertelement <2 x i32> %498, i32 %497, i64 1, !dbg !34
  store <2 x i32> %499, ptr addrspace(3) %493, align 8, !dbg !34
  %500 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 32, !dbg !34
  %501 = bitcast float %380 to i32, !dbg !34
  %502 = select i1 %419, i32 %501, i32 0, !dbg !39
  %503 = bitcast float %381 to i32, !dbg !34
  %504 = select i1 %422, i32 %503, i32 0, !dbg !39
  %505 = insertelement <2 x i32> poison, i32 %502, i64 0, !dbg !34
  %506 = insertelement <2 x i32> %505, i32 %504, i64 1, !dbg !34
  store <2 x i32> %506, ptr addrspace(3) %500, align 8, !dbg !34
  %507 = or disjoint i32 %476, 520, !dbg !34
  %508 = lshr i32 %507, 4, !dbg !34
  %509 = and i32 %508, 67108860, !dbg !34
  %510 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %509, !dbg !34
  %511 = getelementptr inbounds nuw float, ptr addrspace(3) %510, i32 %507, !dbg !34
  %512 = bitcast float %382 to i32, !dbg !34
  %513 = select i1 %424, i32 %512, i32 0, !dbg !39
  %514 = bitcast float %383 to i32, !dbg !34
  %515 = select i1 %426, i32 %514, i32 0, !dbg !39
  %516 = insertelement <2 x i32> poison, i32 %513, i64 0, !dbg !34
  %517 = insertelement <2 x i32> %516, i32 %515, i64 1, !dbg !34
  store <2 x i32> %517, ptr addrspace(3) %511, align 8, !dbg !34
  %518 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 64, !dbg !34
  %519 = bitcast float %384 to i32, !dbg !34
  %520 = select i1 %429, i32 %519, i32 0, !dbg !39
  %521 = bitcast float %385 to i32, !dbg !34
  %522 = select i1 %432, i32 %521, i32 0, !dbg !39
  %523 = insertelement <2 x i32> poison, i32 %520, i64 0, !dbg !34
  %524 = insertelement <2 x i32> %523, i32 %522, i64 1, !dbg !34
  store <2 x i32> %524, ptr addrspace(3) %518, align 8, !dbg !34
  %525 = or disjoint i32 %476, 528, !dbg !34
  %526 = lshr i32 %525, 4, !dbg !34
  %527 = and i32 %526, 67108860, !dbg !34
  %528 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %527, !dbg !34
  %529 = getelementptr inbounds nuw float, ptr addrspace(3) %528, i32 %525, !dbg !34
  %530 = bitcast float %386 to i32, !dbg !34
  %531 = select i1 %434, i32 %530, i32 0, !dbg !39
  %532 = bitcast float %387 to i32, !dbg !34
  %533 = select i1 %436, i32 %532, i32 0, !dbg !39
  %534 = insertelement <2 x i32> poison, i32 %531, i64 0, !dbg !34
  %535 = insertelement <2 x i32> %534, i32 %533, i64 1, !dbg !34
  store <2 x i32> %535, ptr addrspace(3) %529, align 8, !dbg !34
  %536 = getelementptr inbounds nuw i8, ptr addrspace(3) %482, i32 96, !dbg !34
  %537 = bitcast float %388 to i32, !dbg !34
  %538 = select i1 %439, i32 %537, i32 0, !dbg !39
  %539 = bitcast float %389 to i32, !dbg !34
  %540 = select i1 %442, i32 %539, i32 0, !dbg !39
  %541 = insertelement <2 x i32> poison, i32 %538, i64 0, !dbg !34
  %542 = insertelement <2 x i32> %541, i32 %540, i64 1, !dbg !34
  store <2 x i32> %542, ptr addrspace(3) %536, align 8, !dbg !34
  %543 = or disjoint i32 %476, 536, !dbg !34
  %544 = lshr i32 %543, 4, !dbg !34
  %545 = and i32 %544, 67108860, !dbg !34
  %546 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %545, !dbg !34
  %547 = getelementptr inbounds nuw float, ptr addrspace(3) %546, i32 %543, !dbg !34
  %548 = bitcast float %390 to i32, !dbg !34
  %549 = select i1 %444, i32 %548, i32 0, !dbg !39
  %550 = bitcast float %391 to i32, !dbg !34
  %551 = select i1 %446, i32 %550, i32 0, !dbg !39
  %552 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !34
  %553 = insertelement <2 x i32> %552, i32 %551, i64 1, !dbg !34
  store <2 x i32> %553, ptr addrspace(3) %547, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %554 = lshr i32 %479, 4, !dbg !34
  %555 = and i32 %554, 60, !dbg !34
  %556 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %555, !dbg !34
  %557 = getelementptr inbounds nuw float, ptr addrspace(3) %556, i32 %479, !dbg !34
  %558 = or disjoint i32 %479, 1024, !dbg !34
  %559 = lshr i32 %558, 4, !dbg !34
  %560 = and i32 %559, 124, !dbg !34
  %561 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %560, !dbg !34
  %562 = getelementptr inbounds nuw float, ptr addrspace(3) %561, i32 %558, !dbg !34
  %563 = load <4 x i32>, ptr addrspace(3) %562, align 16, !dbg !34
  %564 = or disjoint i32 %479, 2048, !dbg !34
  %565 = lshr i32 %564, 4, !dbg !34
  %566 = and i32 %565, 188, !dbg !34
  %567 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %566, !dbg !34
  %568 = getelementptr inbounds nuw float, ptr addrspace(3) %567, i32 %564, !dbg !34
  %569 = load <4 x i32>, ptr addrspace(3) %568, align 16, !dbg !34
  %570 = or disjoint i32 %479, 3072, !dbg !34
  %571 = lshr i32 %570, 4, !dbg !34
  %572 = and i32 %571, 252, !dbg !34
  %573 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %572, !dbg !34
  %574 = getelementptr inbounds nuw float, ptr addrspace(3) %573, i32 %570, !dbg !34
  %575 = load <4 x i32>, ptr addrspace(3) %574, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %557, align 16, !dbg !34
  %576 = getelementptr inbounds nuw i8, ptr addrspace(3) %557, i32 4, !dbg !34
  %.extract30 = load i32, ptr addrspace(3) %576, align 4, !dbg !34
  %577 = getelementptr inbounds nuw i8, ptr addrspace(3) %557, i32 8, !dbg !34
  %.extract31 = load i32, ptr addrspace(3) %577, align 8, !dbg !34
  %578 = getelementptr inbounds nuw i8, ptr addrspace(3) %557, i32 12, !dbg !34
  %.extract32 = load i32, ptr addrspace(3) %578, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %450, i1 %464) #2, !dbg !34
  %.extract33 = extractelement <4 x i32> %563, i64 0, !dbg !34
  %.extract34 = extractelement <4 x i32> %563, i64 1, !dbg !34
  %.extract35 = extractelement <4 x i32> %563, i64 2, !dbg !34
  %.extract36 = extractelement <4 x i32> %563, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %454, i1 %466) #2, !dbg !34
  %.extract37 = extractelement <4 x i32> %569, i64 0, !dbg !34
  %.extract38 = extractelement <4 x i32> %569, i64 1, !dbg !34
  %.extract39 = extractelement <4 x i32> %569, i64 2, !dbg !34
  %.extract40 = extractelement <4 x i32> %569, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %458, i1 %468) #2, !dbg !34
  %.extract41 = extractelement <4 x i32> %575, i64 0, !dbg !34
  %.extract42 = extractelement <4 x i32> %575, i64 1, !dbg !34
  %.extract43 = extractelement <4 x i32> %575, i64 2, !dbg !34
  %.extract44 = extractelement <4 x i32> %575, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %462, i1 %470) #2, !dbg !34
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 51, column: 21, scope: !5)
!26 = !DILocation(line: 52, column: 16, scope: !5)
!27 = !DILocation(line: 64, column: 36, scope: !5)
!28 = !DILocation(line: 64, column: 44, scope: !5)
!29 = !DILocation(line: 65, column: 22, scope: !5)
!30 = !DILocation(line: 67, column: 15, scope: !5)
!31 = !DILocation(line: 68, column: 11, scope: !5)
!32 = !DILocation(line: 72, column: 48, scope: !5)
!33 = !DILocation(line: 72, column: 32, scope: !5)
!34 = !DILocation(line: 73, column: 18, scope: !5)
!35 = !DILocation(line: 66, column: 34, scope: !5)
!36 = !DILocation(line: 67, column: 19, scope: !5)
!37 = !DILocation(line: 70, column: 26, scope: !5)
!38 = !DILocation(line: 70, column: 43, scope: !5)
!39 = !DILocation(line: 71, column: 29, scope: !5)
!40 = !DILocation(line: 73, column: 4, scope: !5)
