; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 8, !dbg !13
  %15 = icmp eq i32 %14, 0, !dbg !13
  %16 = and i32 %12, 16, !dbg !13
  %.not2 = icmp eq i32 %16, 0, !dbg !13
  %17 = lshr i32 %12, 2, !dbg !13
  %18 = and i32 %17, 7, !dbg !13
  %19 = and i32 %17, 31, !dbg !13
  %20 = and i32 %12, 128, !dbg !13
  %21 = lshr exact i32 %20, 2, !dbg !13
  %22 = or disjoint i32 %19, %21, !dbg !13
  %23 = lshr i32 %12, 1, !dbg !13
  %24 = and i32 %23, 48, !dbg !13
  %25 = or disjoint i32 %24, %18, !dbg !13
  %26 = or disjoint i32 %25, 8, !dbg !13
  %27 = mul i32 %9, %4, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !15
  %30 = zext nneg i32 %10 to i64, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %29, i64 %30, !dbg !16
  %32 = sext i32 %4 to i64, !dbg !17
  %33 = sext i32 %11 to i64, !dbg !17
  %34 = zext nneg i32 %22 to i64, !dbg !18
  %35 = zext nneg i32 %25 to i64, !dbg !18
  %36 = zext nneg i32 %26 to i64, !dbg !18
  %37 = or disjoint i64 %34, %33, !dbg !18
  %38 = or disjoint i64 %35, %33, !dbg !18
  %39 = or disjoint i64 %36, %33, !dbg !18
  %40 = shl nsw i64 %38, 5, !dbg !18
  %41 = shl nsw i64 %39, 5, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %31, i64 %40, !dbg !18
  %43 = getelementptr bfloat, ptr addrspace(1) %31, i64 %41, !dbg !18
  %44 = icmp sgt i32 %11, -1, !dbg !18
  %45 = icmp slt i64 %38, %32, !dbg !18
  %46 = icmp slt i64 %39, %32, !dbg !18
  %47 = and i1 %44, %45, !dbg !18
  %48 = and i1 %44, %46, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %47) #2, !dbg !18
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %43, i1 %48) #2, !dbg !18
  %51 = or disjoint i32 %27, %10, !dbg !19
  %52 = shl i32 %51, 7, !dbg !20
  %53 = sext i32 %52 to i64, !dbg !21
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = shl nuw nsw i32 %12, 3, !dbg !22
  %56 = and i32 %55, 24, !dbg !22
  %57 = zext nneg i32 %56 to i64, !dbg !22
  %58 = icmp slt i64 %37, %32, !dbg !22
  %59 = and i1 %44, %58, !dbg !22
  %.idx47 = shl nsw i64 %37, 13, !dbg !22
  %60 = getelementptr i8, ptr addrspace(1) %54, i64 %.idx47, !dbg !22
  %61 = getelementptr bfloat, ptr addrspace(1) %60, i64 %57, !dbg !22
  %62 = and i32 %55, 56, !dbg !22
  %63 = select i1 %15, i32 0, i32 72, !dbg !22
  %64 = xor i32 %63, %62, !dbg !22
  %65 = select i1 %.not2, i32 0, i32 144, !dbg !22
  %66 = xor i32 %64, %65, !dbg !22
  %67 = and i32 %55, 1792, !dbg !22
  %68 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %66, !dbg !22
  %69 = getelementptr bfloat, ptr addrspace(3) %68, i32 %67, !dbg !22
  %70 = select i1 %59, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %61, i32 %70) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %60, i64 %57, !dbg !23
  br label %71, !dbg !23

71:                                               ; preds = %6, %71
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %71 ]
  %72 = phi i32 [ -1, %6 ], [ %92, %71 ]
  %73 = phi i32 [ 0, %6 ], [ %170, %71 ]
  %74 = phi float [ 0.000000e+00, %6 ], [ %152, %71 ]
  %75 = phi float [ 0.000000e+00, %6 ], [ %153, %71 ]
  %76 = phi float [ 0.000000e+00, %6 ], [ %154, %71 ]
  %77 = phi float [ 0.000000e+00, %6 ], [ %155, %71 ]
  %78 = phi float [ 0.000000e+00, %6 ], [ %156, %71 ]
  %79 = phi float [ 0.000000e+00, %6 ], [ %157, %71 ]
  %80 = phi float [ 0.000000e+00, %6 ], [ %158, %71 ]
  %81 = phi float [ 0.000000e+00, %6 ], [ %159, %71 ]
  %82 = phi float [ 0.000000e+00, %6 ], [ %160, %71 ]
  %83 = phi float [ 0.000000e+00, %6 ], [ %161, %71 ]
  %84 = phi float [ 0.000000e+00, %6 ], [ %162, %71 ]
  %85 = phi float [ 0.000000e+00, %6 ], [ %163, %71 ]
  %86 = phi float [ 0.000000e+00, %6 ], [ %164, %71 ]
  %87 = phi float [ 0.000000e+00, %6 ], [ %165, %71 ]
  %88 = phi float [ 0.000000e+00, %6 ], [ %166, %71 ]
  %89 = phi float [ 0.000000e+00, %6 ], [ %167, %71 ]
  %90 = add i32 %72, 1, !dbg !23
  %91 = icmp sgt i32 %90, 1, !dbg !23
  %92 = select i1 %91, i32 0, i32 %90, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx45 = shl i32 %92, 12, !dbg !22
  %93 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx45, !dbg !22
  %94 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %95 = ptrtoint ptr addrspace(3) %93 to i32, !dbg !24
  %96 = lshr exact i32 %95, 4, !dbg !24
  %97 = and i32 %96, 16383, !dbg !24
  %98 = zext nneg i32 %97 to i64, !dbg !24
  %99 = or disjoint i64 %98, -9223371899399045120, !dbg !24
  %100 = shl i32 %94, 9, !dbg !24
  %101 = and i32 %100, 2048, !dbg !24
  %102 = add i32 %101, %95, !dbg !24
  %103 = lshr exact i32 %102, 4, !dbg !24
  %104 = and i32 %103, 16383, !dbg !24
  %105 = zext nneg i32 %104 to i64, !dbg !24
  %106 = or disjoint i64 %105, -9223371899399045120, !dbg !24
  %107 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, i64 %99, i64 %106, i1 true) #2, !dbg !24
  %108 = add i32 %95, 32, !dbg !24
  %109 = lshr exact i32 %108, 4, !dbg !24
  %110 = and i32 %109, 16383, !dbg !24
  %111 = zext nneg i32 %110 to i64, !dbg !24
  %112 = or disjoint i64 %111, -9223371899399045120, !dbg !24
  %113 = add i32 %108, %101, !dbg !24
  %114 = lshr exact i32 %113, 4, !dbg !24
  %115 = and i32 %114, 16383, !dbg !24
  %116 = zext nneg i32 %115 to i64, !dbg !24
  %117 = or disjoint i64 %116, -9223371899399045120, !dbg !24
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 0, !dbg !24
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 1, !dbg !24
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 2, !dbg !24
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 3, !dbg !24
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 4, !dbg !24
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 5, !dbg !24
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 6, !dbg !24
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 7, !dbg !24
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 8, !dbg !24
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 9, !dbg !24
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 10, !dbg !24
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 11, !dbg !24
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 12, !dbg !24
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 13, !dbg !24
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 14, !dbg !24
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 15, !dbg !24
  %134 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, i64 %112, i64 %117, i1 true) #2, !dbg !24
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 0, !dbg !24
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 1, !dbg !24
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 2, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 3, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 4, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 5, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 6, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 7, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 8, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 9, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 10, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 11, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 12, !dbg !24
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 13, !dbg !24
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 14, !dbg !24
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %134, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %151 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, ptr addrspace(3) %93, i32 0, i32 0, ptr addrspace(3) %93, i32 0, i32 0) #2, !dbg !24
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 0, !dbg !24
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 1, !dbg !24
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 2, !dbg !24
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 3, !dbg !24
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 4, !dbg !24
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 5, !dbg !24
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 6, !dbg !24
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 7, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 8, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 9, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 10, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 11, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 12, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 13, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 14, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %151, 15, !dbg !24
  %168 = add i32 %73, 1, !dbg !23
  %169 = icmp sgt i32 %168, 1, !dbg !23
  %170 = select i1 %169, i32 0, i32 %168, !dbg !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %.idx64 = shl i64 %indvars.iv.next, 6, !dbg !22
  %gep82 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx64, !dbg !22
  %.idx46 = shl i32 %170, 12, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %gep = getelementptr i8, ptr addrspace(3) %69, i32 %.idx46, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep82, i32 %70) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3, !dbg !23
  br i1 %exitcond.not, label %.peel.begin, label %71, !dbg !23, !llvm.loop !25

.peel.begin:                                      ; preds = %71
  %171 = add i32 %92, 1, !dbg !23
  %172 = icmp sgt i32 %171, 1, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %173 = shl i32 %171, 12, !dbg !22
  %.idx45.peel = select i1 %172, i32 0, i32 %173, !dbg !23
  %174 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx45.peel, !dbg !22
  %175 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %176 = ptrtoint ptr addrspace(3) %174 to i32, !dbg !24
  %177 = lshr exact i32 %176, 4, !dbg !24
  %178 = and i32 %177, 16383, !dbg !24
  %179 = zext nneg i32 %178 to i64, !dbg !24
  %180 = or disjoint i64 %179, -9223371899399045120, !dbg !24
  %181 = shl i32 %175, 9, !dbg !24
  %182 = and i32 %181, 2048, !dbg !24
  %183 = add i32 %182, %176, !dbg !24
  %184 = lshr exact i32 %183, 4, !dbg !24
  %185 = and i32 %184, 16383, !dbg !24
  %186 = zext nneg i32 %185 to i64, !dbg !24
  %187 = or disjoint i64 %186, -9223371899399045120, !dbg !24
  %188 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, i64 %180, i64 %187, i1 true) #2, !dbg !24
  %189 = add i32 %176, 32, !dbg !24
  %190 = lshr exact i32 %189, 4, !dbg !24
  %191 = and i32 %190, 16383, !dbg !24
  %192 = zext nneg i32 %191 to i64, !dbg !24
  %193 = or disjoint i64 %192, -9223371899399045120, !dbg !24
  %194 = add i32 %189, %182, !dbg !24
  %195 = lshr exact i32 %194, 4, !dbg !24
  %196 = and i32 %195, 16383, !dbg !24
  %197 = zext nneg i32 %196 to i64, !dbg !24
  %198 = or disjoint i64 %197, -9223371899399045120, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 0, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 1, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 2, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 3, !dbg !24
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 4, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 5, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 6, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 7, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 8, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 9, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 10, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 11, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 12, !dbg !24
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 13, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 14, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 15, !dbg !24
  %215 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, i64 %193, i64 %198, i1 true) #2, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 0, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 1, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 2, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 3, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 4, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 5, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 6, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 7, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 8, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 9, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 10, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 11, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 12, !dbg !24
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 13, !dbg !24
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 14, !dbg !24
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %215, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %232 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, ptr addrspace(3) %174, i32 0, i32 0, ptr addrspace(3) %174, i32 0, i32 0) #2, !dbg !24
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 0, !dbg !24
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 1, !dbg !24
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 2, !dbg !24
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 3, !dbg !24
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 4, !dbg !24
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 5, !dbg !24
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 6, !dbg !24
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 7, !dbg !24
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 8, !dbg !24
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 9, !dbg !24
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 10, !dbg !24
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 11, !dbg !24
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 12, !dbg !24
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 13, !dbg !24
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 14, !dbg !24
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %232, 15, !dbg !24
  %249 = add i32 %170, 1, !dbg !23
  %250 = icmp sgt i32 %249, 1, !dbg !23
  %251 = getelementptr bfloat, ptr addrspace(1) %60, i64 %57, !dbg !22
  %252 = getelementptr i8, ptr addrspace(1) %251, i64 256, !dbg !22
  %253 = shl i32 %249, 12, !dbg !22
  %.idx46.peel = select i1 %250, i32 0, i32 %253, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %gep.peel = getelementptr i8, ptr addrspace(3) %69, i32 %.idx46.peel, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep.peel, ptr addrspace(1) %252, i32 0) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %254 = bitcast i16 %50 to bfloat, !dbg !18
  %255 = bitcast i16 %49 to bfloat, !dbg !18
  %256 = shl nuw nsw i32 %12, 1, !dbg !13
  %257 = and i32 %256, 6, !dbg !13
  %258 = lshr i32 %12, 4, !dbg !13
  %259 = shl nuw nsw i32 %12, 2, !dbg !13
  %260 = and i32 %259, 60, !dbg !13
  %261 = zext nneg i32 %260 to i64, !dbg !18
  %262 = insertelement <8 x i32> poison, i32 %11, i64 0, !dbg !27
  %263 = shufflevector <8 x i32> %262, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !27
  %264 = insertelement <8 x i32> poison, i32 %4, i64 0, !dbg !28
  %265 = shufflevector <8 x i32> %264, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !28
  %266 = or disjoint i32 %26, %11, !dbg !27
  %267 = icmp slt i32 %266, %4, !dbg !28
  %268 = or disjoint i32 %25, %11, !dbg !27
  %269 = icmp slt i32 %268, %4, !dbg !28
  %270 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !29
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %30, !dbg !30
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %40, !dbg !31
  %274 = getelementptr float, ptr addrspace(1) %272, i64 %41, !dbg !31
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %47) #2, !dbg !31
  %276 = bitcast i32 %275 to float, !dbg !31
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %48) #2, !dbg !31
  %278 = bitcast i32 %277 to float, !dbg !31
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 0, !dbg !32
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 1, !dbg !32
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 2, !dbg !32
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 3, !dbg !32
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 4, !dbg !32
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 5, !dbg !32
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 6, !dbg !32
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 7, !dbg !32
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 8, !dbg !32
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 9, !dbg !32
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 10, !dbg !32
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 11, !dbg !32
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 12, !dbg !32
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 13, !dbg !32
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 14, !dbg !32
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %270, 15, !dbg !32
  %295 = fpext bfloat %255 to float, !dbg !33
  %296 = fpext bfloat %254 to float, !dbg !33
  %297 = shl i32 %51, 6, !dbg !34
  %298 = sext i32 %297 to i64, !dbg !35
  %299 = getelementptr float, ptr addrspace(1) %3, i64 %298, !dbg !35
  %300 = and i32 %258, 15, !dbg !13
  %301 = insertelement <2 x i32> poison, i32 %258, i64 0, !dbg !13
  %302 = insertelement <2 x i32> %301, i32 %300, i64 1, !dbg !13
  %303 = or <2 x i32> %302, <i32 48, i32 32>, !dbg !13
  %304 = or disjoint i32 %300, 16, !dbg !13
  %305 = or disjoint i32 %257, %21, !dbg !13
  %306 = or disjoint i32 %305, 25, !dbg !13
  %307 = zext nneg i32 %306 to i64, !dbg !18
  %308 = or disjoint i64 %307, %33, !dbg !18
  %309 = icmp slt i64 %308, %32, !dbg !18
  %310 = and i1 %44, %309, !dbg !18
  %311 = or disjoint i32 %305, 24, !dbg !13
  %312 = zext nneg i32 %311 to i64, !dbg !18
  %313 = or disjoint i64 %312, %33, !dbg !18
  %314 = icmp slt i64 %313, %32, !dbg !18
  %315 = and i1 %44, %314, !dbg !18
  %316 = or disjoint i32 %305, 17, !dbg !13
  %317 = zext nneg i32 %316 to i64, !dbg !18
  %318 = or disjoint i64 %317, %33, !dbg !18
  %319 = icmp slt i64 %318, %32, !dbg !18
  %320 = and i1 %44, %319, !dbg !18
  %321 = or disjoint i32 %305, 16, !dbg !13
  %322 = zext nneg i32 %321 to i64, !dbg !18
  %323 = or disjoint i64 %322, %33, !dbg !18
  %324 = icmp slt i64 %323, %32, !dbg !18
  %325 = and i1 %44, %324, !dbg !18
  %326 = or disjoint i32 %305, 9, !dbg !13
  %327 = or disjoint i32 %305, 8, !dbg !13
  %328 = or disjoint i32 %305, 1, !dbg !13
  %329 = shufflevector <2 x i32> %303, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %330 = insertelement <8 x i32> %329, i32 %304, i64 2, !dbg !18
  %331 = insertelement <8 x i32> %330, i32 %300, i64 3, !dbg !18
  %332 = insertelement <8 x i32> %331, i32 %305, i64 4, !dbg !18
  %333 = insertelement <8 x i32> %332, i32 %328, i64 5, !dbg !18
  %334 = insertelement <8 x i32> %333, i32 %327, i64 6, !dbg !18
  %335 = insertelement <8 x i32> %334, i32 %326, i64 7, !dbg !18
  %336 = or disjoint <8 x i32> %335, %263, !dbg !18
  %337 = icmp slt <8 x i32> %336, %265, !dbg !36
  %338 = extractelement <8 x i1> %337, i64 7, !dbg !18
  %339 = and i1 %44, %338, !dbg !18
  %340 = extractelement <8 x i1> %337, i64 6, !dbg !18
  %341 = and i1 %44, %340, !dbg !18
  %342 = extractelement <8 x i1> %337, i64 5, !dbg !18
  %343 = and i1 %44, %342, !dbg !18
  %344 = extractelement <8 x i1> %337, i64 4, !dbg !18
  %345 = and i1 %44, %344, !dbg !18
  %346 = insertelement <8 x i32> poison, i32 %305, i64 0, !dbg !27
  %347 = insertelement <8 x i32> %346, i32 %328, i64 1, !dbg !27
  %348 = insertelement <8 x i32> %347, i32 %327, i64 2, !dbg !27
  %349 = insertelement <8 x i32> %348, i32 %326, i64 3, !dbg !27
  %350 = insertelement <8 x i32> %349, i32 %321, i64 4, !dbg !27
  %351 = insertelement <8 x i32> %350, i32 %316, i64 5, !dbg !27
  %352 = insertelement <8 x i32> %351, i32 %311, i64 6, !dbg !27
  %353 = insertelement <8 x i32> %352, i32 %306, i64 7, !dbg !27
  %354 = or disjoint <8 x i32> %353, %263, !dbg !27
  %355 = icmp slt <8 x i32> %354, %265, !dbg !28
  %356 = extractelement <8 x i32> %336, i64 4, !dbg !31
  %357 = sext i32 %356 to i64, !dbg !31
  %.idx = shl nsw i64 %357, 7, !dbg !31
  %358 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx, !dbg !31
  %359 = extractelement <8 x i32> %336, i64 5, !dbg !31
  %360 = sext i32 %359 to i64, !dbg !31
  %.idx4 = shl nsw i64 %360, 7, !dbg !31
  %361 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx4, !dbg !31
  %362 = extractelement <8 x i32> %336, i64 6, !dbg !31
  %363 = sext i32 %362 to i64, !dbg !31
  %.idx5 = shl nsw i64 %363, 7, !dbg !31
  %364 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx5, !dbg !31
  %365 = extractelement <8 x i32> %336, i64 7, !dbg !31
  %366 = sext i32 %365 to i64, !dbg !31
  %.idx6 = shl nsw i64 %366, 7, !dbg !31
  %367 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx6, !dbg !31
  %.idx7 = shl nsw i64 %323, 7, !dbg !31
  %368 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx7, !dbg !31
  %.idx8 = shl nsw i64 %318, 7, !dbg !31
  %369 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx8, !dbg !31
  %.idx9 = shl nsw i64 %313, 7, !dbg !31
  %370 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx9, !dbg !31
  %.idx10 = shl nsw i64 %308, 7, !dbg !31
  %371 = getelementptr i8, ptr addrspace(1) %272, i64 %.idx10, !dbg !31
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 %345) #2, !dbg !31
  %373 = bitcast i32 %372 to float, !dbg !31
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %343) #2, !dbg !31
  %375 = bitcast i32 %374 to float, !dbg !31
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %341) #2, !dbg !31
  %377 = bitcast i32 %376 to float, !dbg !31
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %339) #2, !dbg !31
  %379 = bitcast i32 %378 to float, !dbg !31
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 %325) #2, !dbg !31
  %381 = bitcast i32 %380 to float, !dbg !31
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %320) #2, !dbg !31
  %383 = bitcast i32 %382 to float, !dbg !31
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 %315) #2, !dbg !31
  %385 = bitcast i32 %384 to float, !dbg !31
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %310) #2, !dbg !31
  %387 = bitcast i32 %386 to float, !dbg !31
  %388 = fsub float %276, %373, !dbg !37
  %389 = fsub float %276, %375, !dbg !37
  %390 = fsub float %278, %373, !dbg !37
  %391 = fsub float %278, %375, !dbg !37
  %392 = fsub float %276, %377, !dbg !37
  %393 = fsub float %276, %379, !dbg !37
  %394 = fsub float %278, %377, !dbg !37
  %395 = fsub float %278, %379, !dbg !37
  %396 = fsub float %276, %381, !dbg !37
  %397 = fsub float %276, %383, !dbg !37
  %398 = fsub float %278, %381, !dbg !37
  %399 = fsub float %278, %383, !dbg !37
  %400 = fsub float %276, %385, !dbg !37
  %401 = fsub float %276, %387, !dbg !37
  %402 = fsub float %278, %385, !dbg !37
  %403 = fsub float %278, %387, !dbg !37
  %404 = fmul float %388, 0x3FF7154760000000, !dbg !38
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %404), !dbg !38
  %406 = fmul float %389, 0x3FF7154760000000, !dbg !38
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !38
  %408 = fmul float %390, 0x3FF7154760000000, !dbg !38
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !38
  %410 = fmul float %391, 0x3FF7154760000000, !dbg !38
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !38
  %412 = fmul float %392, 0x3FF7154760000000, !dbg !38
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !38
  %414 = fmul float %393, 0x3FF7154760000000, !dbg !38
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %414), !dbg !38
  %416 = fmul float %394, 0x3FF7154760000000, !dbg !38
  %417 = tail call float @llvm.nvvm.ex2.approx.f(float %416), !dbg !38
  %418 = fmul float %395, 0x3FF7154760000000, !dbg !38
  %419 = tail call float @llvm.nvvm.ex2.approx.f(float %418), !dbg !38
  %420 = fmul float %396, 0x3FF7154760000000, !dbg !38
  %421 = tail call float @llvm.nvvm.ex2.approx.f(float %420), !dbg !38
  %422 = fmul float %397, 0x3FF7154760000000, !dbg !38
  %423 = tail call float @llvm.nvvm.ex2.approx.f(float %422), !dbg !38
  %424 = fmul float %398, 0x3FF7154760000000, !dbg !38
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %424), !dbg !38
  %426 = fmul float %399, 0x3FF7154760000000, !dbg !38
  %427 = tail call float @llvm.nvvm.ex2.approx.f(float %426), !dbg !38
  %428 = fmul float %400, 0x3FF7154760000000, !dbg !38
  %429 = tail call float @llvm.nvvm.ex2.approx.f(float %428), !dbg !38
  %430 = fmul float %401, 0x3FF7154760000000, !dbg !38
  %431 = tail call float @llvm.nvvm.ex2.approx.f(float %430), !dbg !38
  %432 = fmul float %402, 0x3FF7154760000000, !dbg !38
  %433 = tail call float @llvm.nvvm.ex2.approx.f(float %432), !dbg !38
  %434 = fmul float %403, 0x3FF7154760000000, !dbg !38
  %435 = tail call float @llvm.nvvm.ex2.approx.f(float %434), !dbg !38
  %436 = fmul float %279, %405, !dbg !32
  %437 = fmul float %280, %407, !dbg !32
  %438 = fmul float %281, %409, !dbg !32
  %439 = fmul float %282, %411, !dbg !32
  %440 = fmul float %283, %413, !dbg !32
  %441 = fmul float %284, %415, !dbg !32
  %442 = fmul float %285, %417, !dbg !32
  %443 = fmul float %286, %419, !dbg !32
  %444 = fmul float %287, %421, !dbg !32
  %445 = fmul float %288, %423, !dbg !32
  %446 = fmul float %289, %425, !dbg !32
  %447 = fmul float %290, %427, !dbg !32
  %448 = fmul float %291, %429, !dbg !32
  %449 = fmul float %292, %431, !dbg !32
  %450 = fmul float %293, %433, !dbg !32
  %451 = fmul float %294, %435, !dbg !32
  %452 = fmul float %436, %295, !dbg !33
  %453 = fmul float %437, %295, !dbg !33
  %454 = fmul float %438, %296, !dbg !33
  %455 = fmul float %439, %296, !dbg !33
  %456 = fmul float %440, %295, !dbg !33
  %457 = fmul float %441, %295, !dbg !33
  %458 = fmul float %442, %296, !dbg !33
  %459 = fmul float %443, %296, !dbg !33
  %460 = fmul float %444, %295, !dbg !33
  %461 = fmul float %445, %295, !dbg !33
  %462 = fmul float %446, %296, !dbg !33
  %463 = fmul float %447, %296, !dbg !33
  %464 = fmul float %448, %295, !dbg !33
  %465 = fmul float %449, %295, !dbg !33
  %466 = fmul float %450, %296, !dbg !33
  %467 = fmul float %451, %296, !dbg !33
  %468 = icmp samesign ugt i32 %25, %305, !dbg !39
  %469 = icmp samesign ugt i32 %25, %328, !dbg !39
  %470 = icmp samesign ugt i32 %26, %305, !dbg !39
  %471 = icmp samesign ugt i32 %26, %328, !dbg !39
  %472 = icmp samesign ugt i32 %25, %327, !dbg !39
  %473 = icmp samesign ugt i32 %25, %326, !dbg !39
  %474 = icmp samesign ugt i32 %26, %326, !dbg !39
  %475 = icmp samesign ugt i32 %25, %321, !dbg !39
  %476 = icmp samesign ugt i32 %25, %316, !dbg !39
  %477 = icmp samesign ugt i32 %26, %321, !dbg !39
  %478 = icmp samesign ugt i32 %26, %316, !dbg !39
  %479 = icmp samesign ugt i32 %25, %311, !dbg !39
  %480 = icmp samesign ugt i32 %25, %306, !dbg !39
  %481 = icmp samesign ugt i32 %26, %311, !dbg !39
  %482 = icmp samesign ugt i32 %26, %306, !dbg !39
  %483 = extractelement <8 x i1> %355, i64 0, !dbg !40
  %484 = and i1 %468, %483, !dbg !40
  %485 = and i1 %269, %484, !dbg !40
  %486 = extractelement <8 x i1> %355, i64 1, !dbg !40
  %487 = and i1 %469, %486, !dbg !40
  %488 = and i1 %269, %487, !dbg !40
  %489 = and i1 %470, %483, !dbg !40
  %490 = and i1 %267, %489, !dbg !40
  %491 = and i1 %471, %486, !dbg !40
  %492 = and i1 %267, %491, !dbg !40
  %493 = extractelement <8 x i1> %355, i64 2, !dbg !40
  %494 = and i1 %472, %493, !dbg !40
  %495 = and i1 %269, %494, !dbg !40
  %496 = extractelement <8 x i1> %355, i64 3, !dbg !40
  %497 = and i1 %473, %496, !dbg !40
  %498 = and i1 %269, %497, !dbg !40
  %499 = and i1 %468, %493, !dbg !40
  %500 = and i1 %267, %499, !dbg !40
  %501 = and i1 %474, %496, !dbg !40
  %502 = and i1 %267, %501, !dbg !40
  %503 = extractelement <8 x i1> %355, i64 4, !dbg !40
  %504 = and i1 %475, %503, !dbg !40
  %505 = and i1 %269, %504, !dbg !40
  %506 = extractelement <8 x i1> %355, i64 5, !dbg !40
  %507 = and i1 %476, %506, !dbg !40
  %508 = and i1 %269, %507, !dbg !40
  %509 = and i1 %477, %503, !dbg !40
  %510 = and i1 %267, %509, !dbg !40
  %511 = and i1 %478, %506, !dbg !40
  %512 = and i1 %267, %511, !dbg !40
  %513 = extractelement <8 x i1> %355, i64 6, !dbg !40
  %514 = and i1 %479, %513, !dbg !40
  %515 = and i1 %269, %514, !dbg !40
  %516 = extractelement <8 x i1> %355, i64 7, !dbg !40
  %517 = and i1 %480, %516, !dbg !40
  %518 = and i1 %269, %517, !dbg !40
  %519 = and i1 %481, %513, !dbg !40
  %520 = and i1 %267, %519, !dbg !40
  %521 = and i1 %482, %516, !dbg !40
  %522 = and i1 %267, %521, !dbg !40
  %523 = extractelement <8 x i32> %336, i64 3, !dbg !36
  %524 = sext i32 %523 to i64, !dbg !36
  %.idx11 = shl nsw i64 %524, 13, !dbg !36
  %525 = getelementptr i8, ptr addrspace(1) %299, i64 %.idx11, !dbg !36
  %526 = getelementptr float, ptr addrspace(1) %525, i64 %261, !dbg !36
  %527 = extractelement <8 x i32> %336, i64 2, !dbg !36
  %528 = sext i32 %527 to i64, !dbg !36
  %.idx12 = shl nsw i64 %528, 13, !dbg !36
  %529 = getelementptr i8, ptr addrspace(1) %299, i64 %.idx12, !dbg !36
  %530 = getelementptr float, ptr addrspace(1) %529, i64 %261, !dbg !36
  %531 = extractelement <8 x i32> %336, i64 1, !dbg !36
  %532 = sext i32 %531 to i64, !dbg !36
  %.idx13 = shl nsw i64 %532, 13, !dbg !36
  %533 = getelementptr i8, ptr addrspace(1) %299, i64 %.idx13, !dbg !36
  %534 = getelementptr float, ptr addrspace(1) %533, i64 %261, !dbg !36
  %535 = extractelement <8 x i32> %336, i64 0, !dbg !36
  %536 = sext i32 %535 to i64, !dbg !36
  %.idx14 = shl nsw i64 %536, 13, !dbg !36
  %537 = getelementptr i8, ptr addrspace(1) %299, i64 %.idx14, !dbg !36
  %538 = getelementptr float, ptr addrspace(1) %537, i64 %261, !dbg !36
  %539 = extractelement <8 x i1> %337, i64 3, !dbg !36
  %540 = and i1 %44, %539, !dbg !36
  %541 = extractelement <8 x i1> %337, i64 2, !dbg !36
  %542 = and i1 %44, %541, !dbg !36
  %543 = extractelement <8 x i1> %337, i64 1, !dbg !36
  %544 = and i1 %44, %543, !dbg !36
  %545 = extractelement <8 x i1> %337, i64 0, !dbg !36
  %546 = and i1 %44, %545, !dbg !36
  %547 = shl nuw nsw i32 %12, 4, !dbg !36
  %548 = and i32 %547, 448, !dbg !36
  %549 = shl nuw nsw i32 %12, 5, !dbg !36
  %550 = and i32 %549, 3072, !dbg !36
  %551 = or disjoint i32 %550, %548, !dbg !36
  %552 = or disjoint i32 %305, %551, !dbg !36
  %553 = and i32 %259, 508, !dbg !36
  %554 = shl nuw nsw i32 %20, 2, !dbg !36
  %555 = or disjoint i32 %553, %554, !dbg !36
  %556 = lshr exact i32 %551, 2, !dbg !36
  %557 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %556, !dbg !36
  %558 = getelementptr inbounds nuw float, ptr addrspace(3) %557, i32 %552, !dbg !36
  %559 = bitcast float %452 to i32, !dbg !36
  %560 = select i1 %485, i32 %559, i32 0, !dbg !41
  %561 = bitcast float %453 to i32, !dbg !36
  %562 = select i1 %488, i32 %561, i32 0, !dbg !41
  %563 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !36
  %564 = insertelement <2 x i32> %563, i32 %562, i64 1, !dbg !36
  store <2 x i32> %564, ptr addrspace(3) %558, align 8, !dbg !36
  %565 = or disjoint i32 %552, 512, !dbg !36
  %566 = lshr i32 %565, 4, !dbg !36
  %567 = and i32 %566, 67108860, !dbg !36
  %568 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %567, !dbg !36
  %569 = getelementptr inbounds nuw float, ptr addrspace(3) %568, i32 %565, !dbg !36
  %570 = bitcast float %454 to i32, !dbg !36
  %571 = select i1 %490, i32 %570, i32 0, !dbg !41
  %572 = bitcast float %455 to i32, !dbg !36
  %573 = select i1 %492, i32 %572, i32 0, !dbg !41
  %574 = insertelement <2 x i32> poison, i32 %571, i64 0, !dbg !36
  %575 = insertelement <2 x i32> %574, i32 %573, i64 1, !dbg !36
  store <2 x i32> %575, ptr addrspace(3) %569, align 8, !dbg !36
  %576 = getelementptr inbounds nuw i8, ptr addrspace(3) %558, i32 32, !dbg !36
  %577 = bitcast float %456 to i32, !dbg !36
  %578 = select i1 %495, i32 %577, i32 0, !dbg !41
  %579 = bitcast float %457 to i32, !dbg !36
  %580 = select i1 %498, i32 %579, i32 0, !dbg !41
  %581 = insertelement <2 x i32> poison, i32 %578, i64 0, !dbg !36
  %582 = insertelement <2 x i32> %581, i32 %580, i64 1, !dbg !36
  store <2 x i32> %582, ptr addrspace(3) %576, align 8, !dbg !36
  %583 = or disjoint i32 %552, 520, !dbg !36
  %584 = lshr i32 %583, 4, !dbg !36
  %585 = and i32 %584, 67108860, !dbg !36
  %586 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %585, !dbg !36
  %587 = getelementptr inbounds nuw float, ptr addrspace(3) %586, i32 %583, !dbg !36
  %588 = bitcast float %458 to i32, !dbg !36
  %589 = select i1 %500, i32 %588, i32 0, !dbg !41
  %590 = bitcast float %459 to i32, !dbg !36
  %591 = select i1 %502, i32 %590, i32 0, !dbg !41
  %592 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !36
  %593 = insertelement <2 x i32> %592, i32 %591, i64 1, !dbg !36
  store <2 x i32> %593, ptr addrspace(3) %587, align 8, !dbg !36
  %594 = getelementptr inbounds nuw i8, ptr addrspace(3) %558, i32 64, !dbg !36
  %595 = bitcast float %460 to i32, !dbg !36
  %596 = select i1 %505, i32 %595, i32 0, !dbg !41
  %597 = bitcast float %461 to i32, !dbg !36
  %598 = select i1 %508, i32 %597, i32 0, !dbg !41
  %599 = insertelement <2 x i32> poison, i32 %596, i64 0, !dbg !36
  %600 = insertelement <2 x i32> %599, i32 %598, i64 1, !dbg !36
  store <2 x i32> %600, ptr addrspace(3) %594, align 8, !dbg !36
  %601 = or disjoint i32 %552, 528, !dbg !36
  %602 = lshr i32 %601, 4, !dbg !36
  %603 = and i32 %602, 67108860, !dbg !36
  %604 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %603, !dbg !36
  %605 = getelementptr inbounds nuw float, ptr addrspace(3) %604, i32 %601, !dbg !36
  %606 = bitcast float %462 to i32, !dbg !36
  %607 = select i1 %510, i32 %606, i32 0, !dbg !41
  %608 = bitcast float %463 to i32, !dbg !36
  %609 = select i1 %512, i32 %608, i32 0, !dbg !41
  %610 = insertelement <2 x i32> poison, i32 %607, i64 0, !dbg !36
  %611 = insertelement <2 x i32> %610, i32 %609, i64 1, !dbg !36
  store <2 x i32> %611, ptr addrspace(3) %605, align 8, !dbg !36
  %612 = getelementptr inbounds nuw i8, ptr addrspace(3) %558, i32 96, !dbg !36
  %613 = bitcast float %464 to i32, !dbg !36
  %614 = select i1 %515, i32 %613, i32 0, !dbg !41
  %615 = bitcast float %465 to i32, !dbg !36
  %616 = select i1 %518, i32 %615, i32 0, !dbg !41
  %617 = insertelement <2 x i32> poison, i32 %614, i64 0, !dbg !36
  %618 = insertelement <2 x i32> %617, i32 %616, i64 1, !dbg !36
  store <2 x i32> %618, ptr addrspace(3) %612, align 8, !dbg !36
  %619 = or disjoint i32 %552, 536, !dbg !36
  %620 = lshr i32 %619, 4, !dbg !36
  %621 = and i32 %620, 67108860, !dbg !36
  %622 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %621, !dbg !36
  %623 = getelementptr inbounds nuw float, ptr addrspace(3) %622, i32 %619, !dbg !36
  %624 = bitcast float %466 to i32, !dbg !36
  %625 = select i1 %520, i32 %624, i32 0, !dbg !41
  %626 = bitcast float %467 to i32, !dbg !36
  %627 = select i1 %522, i32 %626, i32 0, !dbg !41
  %628 = insertelement <2 x i32> poison, i32 %625, i64 0, !dbg !36
  %629 = insertelement <2 x i32> %628, i32 %627, i64 1, !dbg !36
  store <2 x i32> %629, ptr addrspace(3) %623, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %630 = lshr i32 %555, 4, !dbg !36
  %631 = and i32 %630, 60, !dbg !36
  %632 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %631, !dbg !36
  %633 = getelementptr inbounds nuw float, ptr addrspace(3) %632, i32 %555, !dbg !36
  %634 = or disjoint i32 %555, 1024, !dbg !36
  %635 = lshr i32 %634, 4, !dbg !36
  %636 = and i32 %635, 124, !dbg !36
  %637 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %636, !dbg !36
  %638 = getelementptr inbounds nuw float, ptr addrspace(3) %637, i32 %634, !dbg !36
  %639 = load <4 x i32>, ptr addrspace(3) %638, align 16, !dbg !36
  %640 = or disjoint i32 %555, 2048, !dbg !36
  %641 = lshr i32 %640, 4, !dbg !36
  %642 = and i32 %641, 188, !dbg !36
  %643 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %642, !dbg !36
  %644 = getelementptr inbounds nuw float, ptr addrspace(3) %643, i32 %640, !dbg !36
  %645 = load <4 x i32>, ptr addrspace(3) %644, align 16, !dbg !36
  %646 = or disjoint i32 %555, 3072, !dbg !36
  %647 = lshr i32 %646, 4, !dbg !36
  %648 = and i32 %647, 252, !dbg !36
  %649 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %648, !dbg !36
  %650 = getelementptr inbounds nuw float, ptr addrspace(3) %649, i32 %646, !dbg !36
  %651 = load <4 x i32>, ptr addrspace(3) %650, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %633, align 16, !dbg !36
  %652 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 4, !dbg !36
  %.extract30 = load i32, ptr addrspace(3) %652, align 4, !dbg !36
  %653 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 8, !dbg !36
  %.extract31 = load i32, ptr addrspace(3) %653, align 8, !dbg !36
  %654 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i32 12, !dbg !36
  %.extract32 = load i32, ptr addrspace(3) %654, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %526, i1 %540) #2, !dbg !36
  %.extract33 = extractelement <4 x i32> %639, i64 0, !dbg !36
  %.extract34 = extractelement <4 x i32> %639, i64 1, !dbg !36
  %.extract35 = extractelement <4 x i32> %639, i64 2, !dbg !36
  %.extract36 = extractelement <4 x i32> %639, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %530, i1 %542) #2, !dbg !36
  %.extract37 = extractelement <4 x i32> %645, i64 0, !dbg !36
  %.extract38 = extractelement <4 x i32> %645, i64 1, !dbg !36
  %.extract39 = extractelement <4 x i32> %645, i64 2, !dbg !36
  %.extract40 = extractelement <4 x i32> %645, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %534, i1 %544) #2, !dbg !36
  %.extract41 = extractelement <4 x i32> %651, i64 0, !dbg !36
  %.extract42 = extractelement <4 x i32> %651, i64 1, !dbg !36
  %.extract43 = extractelement <4 x i32> %651, i64 2, !dbg !36
  %.extract44 = extractelement <4 x i32> %651, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %538, i1 %546) #2, !dbg !36
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.peeled.count", i32 1}
!27 = !DILocation(line: 51, column: 21, scope: !5)
!28 = !DILocation(line: 52, column: 16, scope: !5)
!29 = !DILocation(line: 64, column: 36, scope: !5)
!30 = !DILocation(line: 64, column: 44, scope: !5)
!31 = !DILocation(line: 65, column: 22, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 72, column: 48, scope: !5)
!35 = !DILocation(line: 72, column: 32, scope: !5)
!36 = !DILocation(line: 73, column: 18, scope: !5)
!37 = !DILocation(line: 66, column: 34, scope: !5)
!38 = !DILocation(line: 67, column: 19, scope: !5)
!39 = !DILocation(line: 70, column: 26, scope: !5)
!40 = !DILocation(line: 70, column: 43, scope: !5)
!41 = !DILocation(line: 71, column: 29, scope: !5)
!42 = !DILocation(line: 73, column: 4, scope: !5)
