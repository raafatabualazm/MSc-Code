//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_scaled_dot_kkt_fwd_kernel // -- Begin function chunk_scaled_dot_kkt_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_scaled_dot_kkt_fwd_kernel
.visible .entry chunk_scaled_dot_kkt_fwd_kernel(
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_3,
	.param .u32 chunk_scaled_dot_kkt_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 chunk_scaled_dot_kkt_fwd_kernel_param_5
)
.reqntid 256
{
	.reg .pred 	%p<66>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<611>;
	.reg .b64 	%rd<107>;
	.loc	1 28 0                          // chunk_scaled_dot_kkt.py:28:0
$L__func_begin0:
	.loc	1 28 0                          // chunk_scaled_dot_kkt.py:28:0

// %bb.0:
	ld.param.b32 	%r46, [chunk_scaled_dot_kkt_fwd_kernel_param_4];
	ld.param.b64 	%rd12, [chunk_scaled_dot_kkt_fwd_kernel_param_3];
	ld.param.b64 	%rd11, [chunk_scaled_dot_kkt_fwd_kernel_param_1];
	ld.param.b64 	%rd17, [chunk_scaled_dot_kkt_fwd_kernel_param_0];
$L__tmp0:
	.loc	1 43 30                         // chunk_scaled_dot_kkt.py:43:30
	mov.u32 	%r52, %ctaid.x;
	ld.param.b64 	%rd18, [chunk_scaled_dot_kkt_fwd_kernel_param_2];
	.loc	1 43 48                         // chunk_scaled_dot_kkt.py:43:48
	mov.u32 	%r53, %ctaid.y;
	.loc	1 50 25                         // chunk_scaled_dot_kkt.py:50:25
	and.b32 	%r54, %r53, 65504;
	.loc	1 44 33                         // chunk_scaled_dot_kkt.py:44:33
	and.b32 	%r55, %r53, 31;
	.loc	1 51 16                         // chunk_scaled_dot_kkt.py:51:16
	shl.b32 	%r56, %r52, 6;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	mov.u32 	%r1, %tid.x;
	shr.u32 	%r2, %r1, 5;
	bfe.s32 	%r57, %r1, 3, 1;
	bfe.s32 	%r58, %r1, 4, 1;
	bfe.u32 	%r59, %r1, 2, 3;
	bfe.u32 	%r60, %r1, 2, 5;
	and.b32 	%r3, %r1, 128;
	shr.u32 	%r4, %r3, 2;
	or.b32 	%r61, %r60, %r4;
	shr.u32 	%r62, %r1, 1;
	and.b32 	%r63, %r62, 48;
	or.b32 	%r5, %r63, %r59;
	or.b32 	%r6, %r5, 8;
	.loc	1 54 42                         // chunk_scaled_dot_kkt.py:54:42
	mul.lo.s32 	%r64, %r54, %r46;
	.loc	1 54 38                         // chunk_scaled_dot_kkt.py:54:38
	cvt.s64.s32 	%rd1, %r64;
	mul.wide.s32 	%rd19, %r64, 2;
	add.s64 	%rd20, %rd18, %rd19;
	.loc	1 54 46                         // chunk_scaled_dot_kkt.py:54:46
	cvt.u64.u32 	%rd2, %r55;
	mul.wide.u32 	%rd21, %r55, 2;
	add.s64 	%rd22, %rd20, %rd21;
	.loc	1 54 83                         // chunk_scaled_dot_kkt.py:54:83
	cvt.s64.s32 	%rd3, %r46;
	cvt.s64.s32 	%rd4, %r56;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd23, %r61;
	cvt.u64.u32 	%rd24, %r5;
	cvt.u64.u32 	%rd25, %r6;
	or.b64 	%rd26, %rd24, %rd4;
	or.b64 	%rd27, %rd25, %rd4;
	shl.b64 	%rd5, %rd26, 5;
	shl.b64 	%rd6, %rd27, 5;
	shl.b64 	%rd28, %rd26, 6;
	add.s64 	%rd13, %rd22, %rd28;
	shl.b64 	%rd29, %rd27, 6;
	add.s64 	%rd14, %rd22, %rd29;
	setp.gt.s32 	%p5, %r56, -1;
	setp.lt.s64 	%p6, %rd26, %rd3;
	setp.lt.s64 	%p7, %rd27, %rd3;
	and.pred 	%p16, %p5, %p6;
	and.pred 	%p17, %p5, %p7;
	// begin inline asm
	mov.u16 %rs3, 0x0;
	@%p16 ld.global.b16 { %rs3 }, [ %rd13 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs4, 0x0;
	@%p17 ld.global.b16 { %rs4 }, [ %rd14 + 0 ];
	// end inline asm
	.loc	1 59 45                         // chunk_scaled_dot_kkt.py:59:45
	or.b32 	%r7, %r64, %r55;
	.loc	1 59 52                         // chunk_scaled_dot_kkt.py:59:52
	shl.b32 	%r65, %r7, 7;
	.loc	1 59 36                         // chunk_scaled_dot_kkt.py:59:36
	mul.wide.s32 	%rd30, %r65, 2;
	add.s64 	%rd31, %rd17, %rd30;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	shl.b32 	%r66, %r1, 3;
	and.b32 	%r67, %r66, 24;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	or.b64 	%rd32, %rd4, %rd23;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	setp.lt.s64 	%p8, %rd32, %rd3;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	shl.b64 	%rd33, %rd32, 13;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	add.s64 	%rd34, %rd31, %rd33;
	mul.wide.u32 	%rd35, %r67, 2;
	add.s64 	%rd15, %rd34, %rd35;
	and.b32 	%r68, %r66, 56;
	and.b32 	%r69, %r57, 72;
	xor.b32 	%r70, %r69, %r68;
	and.b32 	%r71, %r58, 144;
	xor.b32 	%r72, %r70, %r71;
	shl.b32 	%r73, %r72, 1;
	mov.b32 	%r74, global_smem;
	add.s32 	%r75, %r74, %r73;
	shl.b32 	%r76, %r1, 4;
	and.b32 	%r77, %r76, 3584;
	add.s32 	%r47, %r75, %r77;
	selp.b32 	%r78, 16, 0, %p8;
	selp.b32 	%r48, %r78, 0, %p5;
	// begin inline asm
	cp.async.cg.shared.global [ %r47 + 0 ], [ %rd15 + 0 ], 0x10, %r48;
	// end inline asm
	cp.async.commit_group;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	and.b32 	%r79, %r1, 3;
	mul.wide.u32 	%rd36, %r79, 16;
	or.b64 	%rd37, %rd33, %rd36;
	shr.u32 	%r80, %r53, 5;
	mul.lo.s32 	%r81, %r46, %r80;
	shl.b32 	%r82, %r81, 12;
	shl.b32 	%r83, %r55, 7;
	or.b32 	%r84, %r82, %r83;
	mul.wide.s32 	%rd38, %r84, 2;
	add.s64 	%rd39, %rd37, %rd38;
	add.s64 	%rd40, %rd39, %rd17;
	add.s64 	%rd8, %rd40, 64;
	mov.b32 	%r595, 0f00000000;
	mov.b32 	%r188, 0;
	mov.b32 	%r593, -1;
	mov.b64 	%rd106, 0;
	mov.b32 	%r594, %r188;
	mov.b32 	%r596, %r595;
	mov.b32 	%r597, %r595;
	mov.b32 	%r598, %r595;
	mov.b32 	%r599, %r595;
	mov.b32 	%r600, %r595;
	mov.b32 	%r601, %r595;
	mov.b32 	%r602, %r595;
	mov.b32 	%r603, %r595;
	mov.b32 	%r604, %r595;
	mov.b32 	%r605, %r595;
	mov.b32 	%r606, %r595;
	mov.b32 	%r607, %r595;
	mov.b32 	%r608, %r595;
	mov.b32 	%r609, %r595;
	mov.b32 	%r610, %r595;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	add.s32 	%r195, %r593, 1;
	setp.gt.s32 	%p11, %r195, 1;
	selp.b32 	%r593, 0, %r195, %p11;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	shl.b32 	%r196, %r593, 12;
	add.s32 	%r165, %r74, %r196;
	.loc	1 61 27                         // chunk_scaled_dot_kkt.py:61:27
	shfl.sync.idx.b32 	%r198, %r2, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r199, %r165, 4, 14;
	cvt.u64.u32 	%rd46, %r199;
	or.b64 	%rd41, %rd46, -9223371899399045120;
	shl.b32 	%r200, %r198, 9;
	and.b32 	%r201, %r200, 2048;
	add.s32 	%r202, %r201, %r165;
	bfe.u32 	%r203, %r202, 4, 14;
	cvt.u64.u32 	%rd47, %r203;
	or.b64 	%rd42, %rd47, -9223371899399045120;
	mov.pred 	%p14, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd41, %rd42, %p14, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r204, %r165, 32;
	bfe.u32 	%r205, %r204, 4, 14;
	cvt.u64.u32 	%rd48, %r205;
	or.b64 	%rd43, %rd48, -9223371899399045120;
	add.s32 	%r206, %r204, %r201;
	bfe.u32 	%r207, %r206, 4, 14;
	cvt.u64.u32 	%rd49, %r207;
	or.b64 	%rd44, %rd49, -9223371899399045120;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd43, %rd44, %p14, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r170, %r188;
	mov.b32 	%r166, %r188;
	mov.b32 	%r167, %r188;
	mov.b32 	%r169, %r188;
	mov.b32 	%r168, %r165;
	// begin inline asm
	// wait for regs: %r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610,%r165,%r166,%r167,%r168,%r169,%r170
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	add.s32 	%r208, %r594, 1;
	setp.gt.s32 	%p12, %r208, 1;
	selp.b32 	%r594, 0, %r208, %p12;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	add.s64 	%rd45, %rd8, %rd106;
	shl.b32 	%r209, %r594, 12;
	bar.sync 	0;
	add.s32 	%r193, %r47, %r209;
	// begin inline asm
	cp.async.cg.shared.global [ %r193 + 0 ], [ %rd45 + 0 ], 0x10, %r48;
	// end inline asm
	cp.async.commit_group;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	add.s64 	%rd106, %rd106, 64;
	setp.ne.s64 	%p13, %rd106, 192;
	@%p13 bra 	$L__BB0_1;
// %bb.2:                               // %.peel.begin
	.loc	1 0 21                          // chunk_scaled_dot_kkt.py:0:21
	cvt.u32.u64 	%r378, %rd4;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	setp.gt.s32 	%p30, %r378, -1;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	add.s32 	%r379, %r593, 1;
	setp.gt.s32 	%p31, %r379, 1;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	shl.b32 	%r380, %r379, 12;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	selp.b32 	%r381, 0, %r380, %p31;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	add.s32 	%r293, %r74, %r381;
	.loc	1 61 27                         // chunk_scaled_dot_kkt.py:61:27
	shfl.sync.idx.b32 	%r383, %r2, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r384, %r293, 4, 14;
	cvt.u64.u32 	%rd69, %r384;
	or.b64 	%rd50, %rd69, -9223371899399045120;
	shl.b32 	%r385, %r383, 9;
	and.b32 	%r386, %r385, 2048;
	add.s32 	%r387, %r386, %r293;
	bfe.u32 	%r388, %r387, 4, 14;
	cvt.u64.u32 	%rd70, %r388;
	or.b64 	%rd51, %rd70, -9223371899399045120;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd50, %rd51, %p14, 1, 1, 0, 0;
	// end inline asm
	add.s32 	%r389, %r293, 32;
	bfe.u32 	%r390, %r389, 4, 14;
	cvt.u64.u32 	%rd71, %r390;
	or.b64 	%rd52, %rd71, -9223371899399045120;
	add.s32 	%r391, %r389, %r386;
	bfe.u32 	%r392, %r391, 4, 14;
	cvt.u64.u32 	%rd72, %r392;
	or.b64 	%rd53, %rd72, -9223371899399045120;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610}, %rd52, %rd53, %p14, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r313, 0;
	mov.b32 	%r291, %r313;
	mov.b32 	%r292, %r313;
	mov.b32 	%r294, %r313;
	mov.b32 	%r295, %r313;
	mov.b32 	%r290, %r293;
	// begin inline asm
	// wait for regs: %r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610,%r290,%r291,%r292,%r293,%r294,%r295
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	add.s32 	%r393, %r594, 1;
	setp.gt.s32 	%p32, %r393, 1;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	add.s64 	%rd54, %rd15, 256;
	shl.b32 	%r394, %r393, 12;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	selp.b32 	%r395, 0, %r394, %p32;
	.loc	1 60 22                         // chunk_scaled_dot_kkt.py:60:22
	bar.sync 	0;
	add.s32 	%r318, %r47, %r395;
	// begin inline asm
	cp.async.cg.shared.global [ %r318 + 0 ], [ %rd54 + 0 ], 0x10, %r313;
	// end inline asm
	cp.async.commit_group;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	shl.b32 	%r396, %r1, 1;
	and.b32 	%r397, %r396, 6;
	shr.u32 	%r398, %r1, 4;
	shl.b32 	%r399, %r1, 2;
	and.b32 	%r400, %r399, 60;
	.loc	1 51 21                         // chunk_scaled_dot_kkt.py:51:21
	or.b32 	%r401, %r6, %r378;
	.loc	1 52 16                         // chunk_scaled_dot_kkt.py:52:16
	setp.lt.s32 	%p33, %r401, %r46;
	.loc	1 51 21                         // chunk_scaled_dot_kkt.py:51:21
	or.b32 	%r402, %r5, %r378;
	.loc	1 52 16                         // chunk_scaled_dot_kkt.py:52:16
	setp.lt.s32 	%p34, %r402, %r46;
	.loc	1 58 21                         // chunk_scaled_dot_kkt.py:58:21
	// begin inline asm
	// wait for regs: %r595,%r596,%r597,%r598,%r599,%r600,%r601,%r602,%r603,%r604,%r605,%r606,%r607,%r608,%r609,%r610
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 64 36                         // chunk_scaled_dot_kkt.py:64:36
	shl.b64 	%rd73, %rd1, 2;
	add.s64 	%rd74, %rd11, %rd73;
	.loc	1 64 44                         // chunk_scaled_dot_kkt.py:64:44
	shl.b64 	%rd75, %rd2, 2;
	add.s64 	%rd76, %rd74, %rd75;
	.loc	1 65 22                         // chunk_scaled_dot_kkt.py:65:22
	shl.b64 	%rd77, %rd5, 2;
	add.s64 	%rd55, %rd76, %rd77;
	shl.b64 	%rd78, %rd6, 2;
	add.s64 	%rd56, %rd76, %rd78;
	// begin inline asm
	mov.u32 %r352, 0x0;
	@%p16 ld.global.b32 { %r352 }, [ %rd55 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r353, 0x0;
	@%p17 ld.global.b32 { %r353 }, [ %rd56 + 0 ];
	// end inline asm
	.loc	1 68 11                         // chunk_scaled_dot_kkt.py:68:11
	cvt.f32.bf16 	%r403, %rs3;
	cvt.f32.bf16 	%r404, %rs4;
	.loc	1 72 48                         // chunk_scaled_dot_kkt.py:72:48
	shl.b32 	%r405, %r7, 6;
	.loc	1 72 32                         // chunk_scaled_dot_kkt.py:72:32
	mul.wide.s32 	%rd79, %r405, 4;
	add.s64 	%rd80, %rd12, %rd79;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	bfe.u32 	%r406, %r1, 4, 4;
	or.b32 	%r407, %r398, %r378;
	or.b32 	%r408, %r397, %r4;
	or.b32 	%r409, %r408, 25;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd81, %r409;
	or.b64 	%rd82, %rd81, %rd4;
	setp.lt.s64 	%p35, %rd82, %rd3;
	and.pred 	%p25, %p30, %p35;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	or.b32 	%r410, %r408, 24;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd83, %r410;
	or.b64 	%rd84, %rd83, %rd4;
	setp.lt.s64 	%p36, %rd84, %rd3;
	and.pred 	%p24, %p30, %p36;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	or.b32 	%r411, %r408, 17;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd85, %r411;
	or.b64 	%rd86, %rd85, %rd4;
	setp.lt.s64 	%p37, %rd86, %rd3;
	and.pred 	%p23, %p30, %p37;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	or.b32 	%r412, %r408, 16;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	cvt.u64.u32 	%rd87, %r412;
	or.b64 	%rd88, %rd87, %rd4;
	setp.lt.s64 	%p38, %rd88, %rd3;
	and.pred 	%p22, %p30, %p38;
	.loc	1 51 34                         // chunk_scaled_dot_kkt.py:51:34
	or.b32 	%r413, %r408, 9;
	or.b32 	%r414, %r408, 8;
	or.b32 	%r415, %r408, 1;
	or.b32 	%r416, %r406, %r378;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	or.b32 	%r417, %r416, 16;
	or.b32 	%r418, %r416, 32;
	or.b32 	%r419, %r407, 48;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	setp.lt.s32 	%p39, %r419, %r46;
	setp.lt.s32 	%p40, %r418, %r46;
	setp.lt.s32 	%p41, %r417, %r46;
	setp.lt.s32 	%p42, %r416, %r46;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	or.b32 	%r420, %r413, %r378;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	setp.lt.s32 	%p43, %r420, %r46;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	and.pred 	%p21, %p30, %p43;
	or.b32 	%r421, %r414, %r378;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	setp.lt.s32 	%p44, %r421, %r46;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	and.pred 	%p20, %p30, %p44;
	or.b32 	%r422, %r415, %r378;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	setp.lt.s32 	%p45, %r422, %r46;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	and.pred 	%p19, %p30, %p45;
	or.b32 	%r423, %r408, %r378;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	setp.lt.s32 	%p46, %r423, %r46;
	.loc	1 55 21                         // chunk_scaled_dot_kkt.py:55:21
	and.pred 	%p18, %p30, %p46;
	.loc	1 51 21                         // chunk_scaled_dot_kkt.py:51:21
	or.b32 	%r424, %r412, %r378;
	or.b32 	%r425, %r411, %r378;
	or.b32 	%r426, %r410, %r378;
	or.b32 	%r427, %r409, %r378;
	.loc	1 52 16                         // chunk_scaled_dot_kkt.py:52:16
	setp.lt.s32 	%p47, %r427, %r46;
	setp.lt.s32 	%p48, %r426, %r46;
	setp.lt.s32 	%p49, %r425, %r46;
	setp.lt.s32 	%p50, %r424, %r46;
	.loc	1 65 22                         // chunk_scaled_dot_kkt.py:65:22
	mul.wide.s32 	%rd89, %r423, 128;
	add.s64 	%rd57, %rd76, %rd89;
	mul.wide.s32 	%rd90, %r422, 128;
	add.s64 	%rd58, %rd76, %rd90;
	mul.wide.s32 	%rd91, %r421, 128;
	add.s64 	%rd59, %rd76, %rd91;
	mul.wide.s32 	%rd92, %r420, 128;
	add.s64 	%rd60, %rd76, %rd92;
	shl.b64 	%rd93, %rd88, 7;
	add.s64 	%rd61, %rd76, %rd93;
	shl.b64 	%rd94, %rd86, 7;
	add.s64 	%rd62, %rd76, %rd94;
	shl.b64 	%rd95, %rd84, 7;
	add.s64 	%rd63, %rd76, %rd95;
	shl.b64 	%rd96, %rd82, 7;
	add.s64 	%rd64, %rd76, %rd96;
	// begin inline asm
	mov.u32 %r354, 0x0;
	@%p18 ld.global.b32 { %r354 }, [ %rd57 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r355, 0x0;
	@%p19 ld.global.b32 { %r355 }, [ %rd58 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r356, 0x0;
	@%p20 ld.global.b32 { %r356 }, [ %rd59 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r357, 0x0;
	@%p21 ld.global.b32 { %r357 }, [ %rd60 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r358, 0x0;
	@%p22 ld.global.b32 { %r358 }, [ %rd61 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r359, 0x0;
	@%p23 ld.global.b32 { %r359 }, [ %rd62 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r360, 0x0;
	@%p24 ld.global.b32 { %r360 }, [ %rd63 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r361, 0x0;
	@%p25 ld.global.b32 { %r361 }, [ %rd64 + 0 ];
	// end inline asm
	.loc	1 66 34                         // chunk_scaled_dot_kkt.py:66:34
	sub.f32 	%r428, %r352, %r354;
	sub.f32 	%r429, %r352, %r355;
	sub.f32 	%r430, %r353, %r354;
	sub.f32 	%r431, %r353, %r355;
	sub.f32 	%r432, %r352, %r356;
	sub.f32 	%r433, %r352, %r357;
	sub.f32 	%r434, %r353, %r356;
	sub.f32 	%r435, %r353, %r357;
	sub.f32 	%r436, %r352, %r358;
	sub.f32 	%r437, %r352, %r359;
	sub.f32 	%r438, %r353, %r358;
	sub.f32 	%r439, %r353, %r359;
	sub.f32 	%r440, %r352, %r360;
	sub.f32 	%r441, %r352, %r361;
	sub.f32 	%r442, %r353, %r360;
	sub.f32 	%r443, %r353, %r361;
	.loc	1 67 19                         // chunk_scaled_dot_kkt.py:67:19
	mul.f32 	%r444, %r428, 0f3FB8AA3B;
	ex2.approx.f32 	%r445, %r444;
	mul.f32 	%r446, %r429, 0f3FB8AA3B;
	ex2.approx.f32 	%r447, %r446;
	mul.f32 	%r448, %r430, 0f3FB8AA3B;
	ex2.approx.f32 	%r449, %r448;
	mul.f32 	%r450, %r431, 0f3FB8AA3B;
	ex2.approx.f32 	%r451, %r450;
	mul.f32 	%r452, %r432, 0f3FB8AA3B;
	ex2.approx.f32 	%r453, %r452;
	mul.f32 	%r454, %r433, 0f3FB8AA3B;
	ex2.approx.f32 	%r455, %r454;
	mul.f32 	%r456, %r434, 0f3FB8AA3B;
	ex2.approx.f32 	%r457, %r456;
	mul.f32 	%r458, %r435, 0f3FB8AA3B;
	ex2.approx.f32 	%r459, %r458;
	mul.f32 	%r460, %r436, 0f3FB8AA3B;
	ex2.approx.f32 	%r461, %r460;
	mul.f32 	%r462, %r437, 0f3FB8AA3B;
	ex2.approx.f32 	%r463, %r462;
	mul.f32 	%r464, %r438, 0f3FB8AA3B;
	ex2.approx.f32 	%r465, %r464;
	mul.f32 	%r466, %r439, 0f3FB8AA3B;
	ex2.approx.f32 	%r467, %r466;
	mul.f32 	%r468, %r440, 0f3FB8AA3B;
	ex2.approx.f32 	%r469, %r468;
	mul.f32 	%r470, %r441, 0f3FB8AA3B;
	ex2.approx.f32 	%r471, %r470;
	mul.f32 	%r472, %r442, 0f3FB8AA3B;
	ex2.approx.f32 	%r473, %r472;
	mul.f32 	%r474, %r443, 0f3FB8AA3B;
	ex2.approx.f32 	%r475, %r474;
	.loc	1 67 15                         // chunk_scaled_dot_kkt.py:67:15
	mul.f32 	%r476, %r595, %r445;
	mul.f32 	%r477, %r596, %r447;
	mul.f32 	%r478, %r597, %r449;
	mul.f32 	%r479, %r598, %r451;
	mul.f32 	%r480, %r599, %r453;
	mul.f32 	%r481, %r600, %r455;
	mul.f32 	%r482, %r601, %r457;
	mul.f32 	%r483, %r602, %r459;
	mul.f32 	%r484, %r603, %r461;
	mul.f32 	%r485, %r604, %r463;
	mul.f32 	%r486, %r605, %r465;
	mul.f32 	%r487, %r606, %r467;
	mul.f32 	%r488, %r607, %r469;
	mul.f32 	%r489, %r608, %r471;
	mul.f32 	%r490, %r609, %r473;
	mul.f32 	%r491, %r610, %r475;
	.loc	1 68 11                         // chunk_scaled_dot_kkt.py:68:11
	mul.f32 	%r492, %r476, %r403;
	mul.f32 	%r493, %r477, %r403;
	mul.f32 	%r494, %r478, %r404;
	mul.f32 	%r495, %r479, %r404;
	mul.f32 	%r496, %r480, %r403;
	mul.f32 	%r497, %r481, %r403;
	mul.f32 	%r498, %r482, %r404;
	mul.f32 	%r499, %r483, %r404;
	mul.f32 	%r500, %r484, %r403;
	mul.f32 	%r501, %r485, %r403;
	mul.f32 	%r502, %r486, %r404;
	mul.f32 	%r503, %r487, %r404;
	mul.f32 	%r504, %r488, %r403;
	mul.f32 	%r505, %r489, %r403;
	mul.f32 	%r506, %r490, %r404;
	mul.f32 	%r507, %r491, %r404;
	.loc	1 70 26                         // chunk_scaled_dot_kkt.py:70:26
	setp.gt.u32 	%p51, %r5, %r408;
	setp.gt.u32 	%p52, %r5, %r415;
	setp.gt.u32 	%p53, %r6, %r408;
	setp.gt.u32 	%p54, %r6, %r415;
	setp.gt.u32 	%p55, %r5, %r414;
	setp.gt.u32 	%p56, %r5, %r413;
	setp.gt.u32 	%p57, %r6, %r413;
	setp.gt.u32 	%p58, %r5, %r412;
	setp.gt.u32 	%p59, %r5, %r411;
	setp.gt.u32 	%p60, %r6, %r412;
	setp.gt.u32 	%p61, %r6, %r411;
	setp.gt.u32 	%p62, %r5, %r410;
	setp.gt.u32 	%p63, %r5, %r409;
	setp.gt.u32 	%p64, %r6, %r410;
	setp.gt.u32 	%p65, %r6, %r409;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	mul.wide.s32 	%rd97, %r416, 8192;
	add.s64 	%rd98, %rd80, %rd97;
	mul.wide.u32 	%rd99, %r400, 4;
	add.s64 	%rd65, %rd98, %rd99;
	mul.wide.s32 	%rd100, %r417, 8192;
	add.s64 	%rd101, %rd80, %rd100;
	add.s64 	%rd66, %rd101, %rd99;
	mul.wide.s32 	%rd102, %r418, 8192;
	add.s64 	%rd103, %rd80, %rd102;
	add.s64 	%rd67, %rd103, %rd99;
	mul.wide.s32 	%rd104, %r419, 8192;
	add.s64 	%rd105, %rd80, %rd104;
	add.s64 	%rd68, %rd105, %rd99;
	and.pred 	%p26, %p30, %p42;
	and.pred 	%p27, %p30, %p41;
	and.pred 	%p28, %p30, %p40;
	and.pred 	%p29, %p30, %p39;
	and.b32 	%r509, %r76, 448;
	shl.b32 	%r510, %r1, 5;
	and.b32 	%r511, %r510, 3072;
	or.b32 	%r512, %r511, %r509;
	or.b32 	%r513, %r408, %r512;
	and.b32 	%r514, %r399, 508;
	shl.b32 	%r515, %r3, 2;
	or.b32 	%r516, %r514, %r515;
	shr.u32 	%r517, %r512, 2;
	add.s32 	%r518, %r74, %r517;
	shl.b32 	%r519, %r513, 2;
	add.s32 	%r520, %r518, %r519;
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r521, %r492, 0, %p46;
	selp.b32 	%r522, %r521, 0, %p51;
	selp.b32 	%r523, %r522, 0, %p34;
	selp.b32 	%r524, %r493, 0, %p45;
	selp.b32 	%r525, %r524, 0, %p52;
	selp.b32 	%r526, %r525, 0, %p34;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r520], {%r523, %r526};
	or.b32 	%r527, %r512, 512;
	shr.u32 	%r528, %r527, 2;
	add.s32 	%r529, %r74, %r528;
	add.s32 	%r530, %r529, %r519;
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r531, %r494, 0, %p46;
	selp.b32 	%r532, %r531, 0, %p53;
	selp.b32 	%r533, %r532, 0, %p33;
	selp.b32 	%r534, %r495, 0, %p45;
	selp.b32 	%r535, %r534, 0, %p54;
	selp.b32 	%r536, %r535, 0, %p33;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r530+2048], {%r533, %r536};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r537, %r496, 0, %p44;
	selp.b32 	%r538, %r537, 0, %p55;
	selp.b32 	%r539, %r538, 0, %p34;
	selp.b32 	%r540, %r497, 0, %p43;
	selp.b32 	%r541, %r540, 0, %p56;
	selp.b32 	%r542, %r541, 0, %p34;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r520+32], {%r539, %r542};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r543, %r498, 0, %p44;
	selp.b32 	%r544, %r543, 0, %p51;
	selp.b32 	%r545, %r544, 0, %p33;
	selp.b32 	%r546, %r499, 0, %p43;
	selp.b32 	%r547, %r546, 0, %p57;
	selp.b32 	%r548, %r547, 0, %p33;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r530+2080], {%r545, %r548};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r549, %r500, 0, %p50;
	selp.b32 	%r550, %r549, 0, %p58;
	selp.b32 	%r551, %r550, 0, %p34;
	selp.b32 	%r552, %r501, 0, %p49;
	selp.b32 	%r553, %r552, 0, %p59;
	selp.b32 	%r554, %r553, 0, %p34;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r520+64], {%r551, %r554};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r555, %r502, 0, %p50;
	selp.b32 	%r556, %r555, 0, %p60;
	selp.b32 	%r557, %r556, 0, %p33;
	selp.b32 	%r558, %r503, 0, %p49;
	selp.b32 	%r559, %r558, 0, %p61;
	selp.b32 	%r560, %r559, 0, %p33;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r530+2112], {%r557, %r560};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r561, %r504, 0, %p48;
	selp.b32 	%r562, %r561, 0, %p62;
	selp.b32 	%r563, %r562, 0, %p34;
	selp.b32 	%r564, %r505, 0, %p47;
	selp.b32 	%r565, %r564, 0, %p63;
	selp.b32 	%r566, %r565, 0, %p34;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r520+96], {%r563, %r566};
	.loc	1 71 29                         // chunk_scaled_dot_kkt.py:71:29
	selp.b32 	%r567, %r506, 0, %p48;
	selp.b32 	%r568, %r567, 0, %p64;
	selp.b32 	%r569, %r568, 0, %p33;
	selp.b32 	%r570, %r507, 0, %p47;
	selp.b32 	%r571, %r570, 0, %p65;
	selp.b32 	%r572, %r571, 0, %p33;
	.loc	1 73 18                         // chunk_scaled_dot_kkt.py:73:18
	st.shared.v2.b32 	[%r530+2144], {%r569, %r572};
	bar.sync 	0;
	shr.u32 	%r573, %r516, 2;
	and.b32 	%r574, %r573, 240;
	add.s32 	%r575, %r74, %r574;
	shl.b32 	%r576, %r516, 2;
	add.s32 	%r577, %r575, %r576;
	or.b32 	%r578, %r516, 1024;
	shr.u32 	%r579, %r578, 2;
	and.b32 	%r580, %r579, 496;
	add.s32 	%r581, %r74, %r580;
	add.s32 	%r582, %r581, %r576;
	ld.shared.v4.b32 	{%r366, %r367, %r368, %r369}, [%r582+4096];
	or.b32 	%r583, %r516, 2048;
	shr.u32 	%r584, %r583, 2;
	and.b32 	%r585, %r584, 752;
	add.s32 	%r586, %r74, %r585;
	add.s32 	%r587, %r586, %r576;
	ld.shared.v4.b32 	{%r370, %r371, %r372, %r373}, [%r587+8192];
	or.b32 	%r588, %r516, 3072;
	shr.u32 	%r589, %r588, 2;
	and.b32 	%r590, %r589, 1008;
	add.s32 	%r591, %r74, %r590;
	add.s32 	%r592, %r591, %r576;
	ld.shared.v4.b32 	{%r374, %r375, %r376, %r377}, [%r592+12288];
	ld.shared.v4.b32 	{%r362, %r363, %r364, %r365}, [%r577];
	// begin inline asm
	@%p26 st.global.v4.b32 [ %rd65 + 0 ], { %r362, %r363, %r364, %r365 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd66 + 0 ], { %r366, %r367, %r368, %r369 };
	// end inline asm
	// begin inline asm
	@%p28 st.global.v4.b32 [ %rd67 + 0 ], { %r370, %r371, %r372, %r373 };
	// end inline asm
	// begin inline asm
	@%p29 st.global.v4.b32 [ %rd68 + 0 ], { %r374, %r375, %r376, %r377 };
	// end inline asm
	.loc	1 73 4                          // chunk_scaled_dot_kkt.py:73:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 127                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x78 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 115
.b8 99
.b8 97
.b8 108
.b8 101
.b8 100
.b8 95
.b8 100
.b8 111
.b8 116
.b8 95
.b8 107
.b8 107
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
	}
	.section	.debug_macinfo	{	}
