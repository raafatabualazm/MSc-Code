; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 6, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = and i32 %33, 8, !dbg !29
  %35 = and i32 %33, 16, !dbg !29
  %36 = and i32 %33, 32, !dbg !29
  %37 = lshr i32 %33, 3, !dbg !29
  %38 = and i32 %37, 7, !dbg !29
  %39 = or disjoint i32 %38, 8, !dbg !29
  %40 = or disjoint i32 %38, 16, !dbg !29
  %41 = or disjoint i32 %38, 24, !dbg !29
  %42 = or disjoint i32 %38, 32, !dbg !29
  %43 = or disjoint i32 %38, 40, !dbg !29
  %44 = or disjoint i32 %38, 48, !dbg !29
  %45 = or disjoint i32 %38, 56, !dbg !29
  %46 = and i32 %33, 4, !dbg !29
  %47 = shl nuw nsw i32 %33, 3, !dbg !29
  %48 = and i32 %47, 56, !dbg !29
  %49 = lshr i32 %33, 2, !dbg !29
  %50 = and i32 %49, 7, !dbg !29
  %51 = lshr exact i32 %36, 1, !dbg !29
  %52 = or disjoint i32 %50, %51, !dbg !29
  %53 = or disjoint i32 %52, 8, !dbg !29
  %54 = or disjoint i32 %52, 32, !dbg !29
  %55 = or disjoint i32 %52, 40, !dbg !29
  %56 = and i32 %33, 63, !dbg !29
  %57 = zext nneg i32 %38 to i64, !dbg !29
  %58 = zext nneg i32 %39 to i64, !dbg !29
  %59 = zext nneg i32 %40 to i64, !dbg !29
  %60 = zext nneg i32 %41 to i64, !dbg !29
  %61 = zext nneg i32 %42 to i64, !dbg !29
  %62 = zext nneg i32 %43 to i64, !dbg !29
  %63 = zext nneg i32 %44 to i64, !dbg !29
  %64 = zext nneg i32 %45 to i64, !dbg !29
  %65 = zext nneg i32 %48 to i64, !dbg !29
  %66 = zext nneg i32 %56 to i64, !dbg !29
  %67 = or disjoint i64 %65, %32, !dbg !29
  %68 = icmp sgt i32 %31, -1, !dbg !29
  %69 = icmp slt i64 %67, 128, !dbg !29
  %70 = and i1 %68, %69, !dbg !29
  %71 = or disjoint i64 %57, 64, !dbg !30
  %72 = or disjoint i64 %58, 64, !dbg !30
  %73 = or disjoint i64 %59, 64, !dbg !30
  %74 = or disjoint i64 %60, 64, !dbg !30
  %75 = or disjoint i64 %61, 64, !dbg !30
  %76 = or disjoint i64 %62, 64, !dbg !30
  %77 = or disjoint i64 %63, 64, !dbg !30
  %78 = or disjoint i64 %64, 64, !dbg !30
  %79 = or disjoint i64 %65, 64, !dbg !30
  %80 = sext i32 %7 to i64, !dbg !31
  %81 = sext i32 %23 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !32
  %83 = zext nneg i32 %12 to i64, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %82, i64 %83, !dbg !33
  %85 = icmp sgt i32 %13, 63, !dbg !34
  %86 = shl nuw nsw i64 %57, 12, !dbg !35
  %87 = shl nuw nsw i64 %58, 12, !dbg !35
  %88 = shl nuw nsw i64 %59, 12, !dbg !35
  %89 = shl nuw nsw i64 %60, 12, !dbg !35
  %90 = shl nuw nsw i64 %61, 12, !dbg !35
  %91 = shl nuw nsw i64 %62, 12, !dbg !35
  %92 = shl nuw nsw i64 %63, 12, !dbg !35
  %93 = shl nuw nsw i64 %64, 12, !dbg !35
  %94 = or disjoint i64 %86, %65, !dbg !35
  %95 = or disjoint i64 %87, %65, !dbg !35
  %96 = or disjoint i64 %88, %65, !dbg !35
  %97 = or disjoint i64 %89, %65, !dbg !35
  %98 = or disjoint i64 %90, %65, !dbg !35
  %99 = or disjoint i64 %91, %65, !dbg !35
  %100 = or disjoint i64 %92, %65, !dbg !35
  %101 = or disjoint i64 %93, %65, !dbg !35
  %102 = getelementptr bfloat, ptr addrspace(1) %29, i64 %94, !dbg !35
  %103 = getelementptr bfloat, ptr addrspace(1) %29, i64 %95, !dbg !35
  %104 = getelementptr bfloat, ptr addrspace(1) %29, i64 %96, !dbg !35
  %105 = getelementptr bfloat, ptr addrspace(1) %29, i64 %97, !dbg !35
  %106 = getelementptr bfloat, ptr addrspace(1) %29, i64 %98, !dbg !35
  %107 = getelementptr bfloat, ptr addrspace(1) %29, i64 %99, !dbg !35
  %108 = getelementptr bfloat, ptr addrspace(1) %29, i64 %100, !dbg !35
  %109 = getelementptr bfloat, ptr addrspace(1) %29, i64 %101, !dbg !35
  %110 = icmp slt i32 %38, %7, !dbg !35
  %111 = icmp slt i32 %39, %7, !dbg !35
  %112 = icmp slt i32 %40, %7, !dbg !35
  %113 = icmp slt i32 %41, %7, !dbg !35
  %114 = icmp slt i32 %42, %7, !dbg !35
  %115 = icmp slt i32 %43, %7, !dbg !35
  %116 = icmp slt i32 %44, %7, !dbg !35
  %117 = icmp slt i32 %45, %7, !dbg !35
  %118 = and i1 %110, %85, !dbg !34
  %119 = and i1 %111, %85, !dbg !34
  %120 = and i1 %112, %85, !dbg !34
  %121 = and i1 %113, %85, !dbg !34
  %122 = and i1 %114, %85, !dbg !34
  %123 = and i1 %115, %85, !dbg !34
  %124 = and i1 %116, %85, !dbg !34
  %125 = and i1 %117, %85, !dbg !34
  %126 = xor i32 %47, %33, !dbg !35
  %127 = and i32 %126, 56, !dbg !35
  %128 = shl nuw nsw i32 %38, 6, !dbg !35
  %129 = or disjoint i32 %127, %128, !dbg !35
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %129, !dbg !35
  %131 = or disjoint i32 %129, 512, !dbg !35
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %131, !dbg !35
  %133 = or disjoint i32 %129, 1024, !dbg !35
  %134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %133, !dbg !35
  %135 = or disjoint i32 %129, 1536, !dbg !35
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = or disjoint i32 %129, 2048, !dbg !35
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %137, !dbg !35
  %139 = or disjoint i32 %129, 2560, !dbg !35
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139, !dbg !35
  %141 = or disjoint i32 %129, 3072, !dbg !35
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %141, !dbg !35
  %143 = or disjoint i32 %129, 3584, !dbg !35
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %143, !dbg !35
  %145 = select i1 %118, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %130, ptr addrspace(1) %102, i32 %145) #2, !dbg !35
  %146 = select i1 %119, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %132, ptr addrspace(1) %103, i32 %146) #2, !dbg !35
  %147 = select i1 %120, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %134, ptr addrspace(1) %104, i32 %147) #2, !dbg !35
  %148 = select i1 %121, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %136, ptr addrspace(1) %105, i32 %148) #2, !dbg !35
  %149 = select i1 %122, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %106, i32 %149) #2, !dbg !35
  %150 = select i1 %123, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %107, i32 %150) #2, !dbg !35
  %151 = select i1 %124, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %108, i32 %151) #2, !dbg !35
  %152 = select i1 %125, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %109, i32 %152) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %153 = or disjoint i64 %86, %79, !dbg !36
  %154 = or disjoint i64 %87, %79, !dbg !36
  %155 = or disjoint i64 %88, %79, !dbg !36
  %156 = or disjoint i64 %89, %79, !dbg !36
  %157 = or disjoint i64 %90, %79, !dbg !36
  %158 = or disjoint i64 %91, %79, !dbg !36
  %159 = or disjoint i64 %92, %79, !dbg !36
  %160 = or disjoint i64 %93, %79, !dbg !36
  %161 = getelementptr bfloat, ptr addrspace(1) %29, i64 %153, !dbg !36
  %162 = getelementptr bfloat, ptr addrspace(1) %29, i64 %154, !dbg !36
  %163 = getelementptr bfloat, ptr addrspace(1) %29, i64 %155, !dbg !36
  %164 = getelementptr bfloat, ptr addrspace(1) %29, i64 %156, !dbg !36
  %165 = getelementptr bfloat, ptr addrspace(1) %29, i64 %157, !dbg !36
  %166 = getelementptr bfloat, ptr addrspace(1) %29, i64 %158, !dbg !36
  %167 = getelementptr bfloat, ptr addrspace(1) %29, i64 %159, !dbg !36
  %168 = getelementptr bfloat, ptr addrspace(1) %29, i64 %160, !dbg !36
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %129, !dbg !36
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %131, !dbg !36
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %133, !dbg !36
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %135, !dbg !36
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %137, !dbg !36
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %139, !dbg !36
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %141, !dbg !36
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %169, ptr addrspace(1) %161, i32 %145) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %162, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %171, ptr addrspace(1) %163, i32 %147) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %172, ptr addrspace(1) %164, i32 %148) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %173, ptr addrspace(1) %165, i32 %149) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %174, ptr addrspace(1) %166, i32 %150) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %175, ptr addrspace(1) %167, i32 %151) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %168, i32 %152) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %177 = add nsw i64 %86, %67, !dbg !37
  %178 = add nsw i64 %87, %67, !dbg !37
  %179 = add nsw i64 %88, %67, !dbg !37
  %180 = add nsw i64 %89, %67, !dbg !37
  %181 = add nsw i64 %90, %67, !dbg !37
  %182 = add nsw i64 %91, %67, !dbg !37
  %183 = add nsw i64 %92, %67, !dbg !37
  %184 = add nsw i64 %93, %67, !dbg !37
  %185 = getelementptr bfloat, ptr addrspace(1) %27, i64 %177, !dbg !37
  %186 = getelementptr bfloat, ptr addrspace(1) %27, i64 %178, !dbg !37
  %187 = getelementptr bfloat, ptr addrspace(1) %27, i64 %179, !dbg !37
  %188 = getelementptr bfloat, ptr addrspace(1) %27, i64 %180, !dbg !37
  %189 = getelementptr bfloat, ptr addrspace(1) %27, i64 %181, !dbg !37
  %190 = getelementptr bfloat, ptr addrspace(1) %27, i64 %182, !dbg !37
  %191 = getelementptr bfloat, ptr addrspace(1) %27, i64 %183, !dbg !37
  %192 = getelementptr bfloat, ptr addrspace(1) %27, i64 %184, !dbg !37
  %193 = and i1 %70, %110, !dbg !37
  %194 = and i1 %70, %111, !dbg !37
  %195 = and i1 %70, %112, !dbg !37
  %196 = and i1 %70, %113, !dbg !37
  %197 = and i1 %70, %114, !dbg !37
  %198 = and i1 %70, %115, !dbg !37
  %199 = and i1 %70, %116, !dbg !37
  %200 = and i1 %70, %117, !dbg !37
  %201 = and i1 %85, %193, !dbg !34
  %202 = and i1 %85, %194, !dbg !34
  %203 = and i1 %85, %195, !dbg !34
  %204 = and i1 %85, %196, !dbg !34
  %205 = and i1 %85, %197, !dbg !34
  %206 = and i1 %85, %198, !dbg !34
  %207 = and i1 %85, %199, !dbg !34
  %208 = and i1 %85, %200, !dbg !34
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %129, !dbg !37
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %131, !dbg !37
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %133, !dbg !37
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %135, !dbg !37
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %137, !dbg !37
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %139, !dbg !37
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %141, !dbg !37
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %143, !dbg !37
  %217 = select i1 %201, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %209, ptr addrspace(1) %185, i32 %217) #2, !dbg !37
  %218 = select i1 %202, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %186, i32 %218) #2, !dbg !37
  %219 = select i1 %203, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %211, ptr addrspace(1) %187, i32 %219) #2, !dbg !37
  %220 = select i1 %204, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %188, i32 %220) #2, !dbg !37
  %221 = select i1 %205, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %213, ptr addrspace(1) %189, i32 %221) #2, !dbg !37
  %222 = select i1 %206, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %190, i32 %222) #2, !dbg !37
  %223 = select i1 %207, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %215, ptr addrspace(1) %191, i32 %223) #2, !dbg !37
  %224 = select i1 %208, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %192, i32 %224) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx = shl nuw nsw i64 %66, 7, !dbg !38
  %225 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx, !dbg !38
  %226 = icmp slt i32 %56, %7, !dbg !38
  %227 = and i1 %226, %85, !dbg !34
  %228 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143872), i32 %56, !dbg !38
  %229 = select i1 %227, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %228, ptr addrspace(1) %225, i32 %229) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %230 = getelementptr bfloat, ptr addrspace(1) %28, i64 %94, !dbg !39
  %231 = getelementptr bfloat, ptr addrspace(1) %28, i64 %95, !dbg !39
  %232 = getelementptr bfloat, ptr addrspace(1) %28, i64 %96, !dbg !39
  %233 = getelementptr bfloat, ptr addrspace(1) %28, i64 %97, !dbg !39
  %234 = getelementptr bfloat, ptr addrspace(1) %28, i64 %98, !dbg !39
  %235 = getelementptr bfloat, ptr addrspace(1) %28, i64 %99, !dbg !39
  %236 = getelementptr bfloat, ptr addrspace(1) %28, i64 %100, !dbg !39
  %237 = getelementptr bfloat, ptr addrspace(1) %28, i64 %101, !dbg !39
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %129, !dbg !39
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %131, !dbg !39
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %133, !dbg !39
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %135, !dbg !39
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %137, !dbg !39
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %139, !dbg !39
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %141, !dbg !39
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %238, ptr addrspace(1) %230, i32 %145) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %239, ptr addrspace(1) %231, i32 %146) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %232, i32 %147) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %241, ptr addrspace(1) %233, i32 %148) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %242, ptr addrspace(1) %234, i32 %149) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %235, i32 %150) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %236, i32 %151) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %237, i32 %152) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %246 = getelementptr bfloat, ptr addrspace(1) %28, i64 %153, !dbg !40
  %247 = getelementptr bfloat, ptr addrspace(1) %28, i64 %154, !dbg !40
  %248 = getelementptr bfloat, ptr addrspace(1) %28, i64 %155, !dbg !40
  %249 = getelementptr bfloat, ptr addrspace(1) %28, i64 %156, !dbg !40
  %250 = getelementptr bfloat, ptr addrspace(1) %28, i64 %157, !dbg !40
  %251 = getelementptr bfloat, ptr addrspace(1) %28, i64 %158, !dbg !40
  %252 = getelementptr bfloat, ptr addrspace(1) %28, i64 %159, !dbg !40
  %253 = getelementptr bfloat, ptr addrspace(1) %28, i64 %160, !dbg !40
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %129, !dbg !40
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %131, !dbg !40
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %133, !dbg !40
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %135, !dbg !40
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %137, !dbg !40
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %139, !dbg !40
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %141, !dbg !40
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %254, ptr addrspace(1) %246, i32 %145) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %247, i32 %146) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %248, i32 %147) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %249, i32 %148) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %250, i32 %149) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %251, i32 %150) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %252, i32 %151) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %253, i32 %152) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %262 = icmp sgt i32 %13, 127, !dbg !34
  %263 = or disjoint i64 %66, 64, !dbg !35
  %264 = shl nuw nsw i64 %71, 12, !dbg !35
  %265 = shl nuw nsw i64 %72, 12, !dbg !35
  %266 = shl nuw nsw i64 %73, 12, !dbg !35
  %267 = shl nuw nsw i64 %74, 12, !dbg !35
  %268 = shl nuw nsw i64 %75, 12, !dbg !35
  %269 = shl nuw nsw i64 %76, 12, !dbg !35
  %270 = shl nuw nsw i64 %77, 12, !dbg !35
  %271 = shl nuw nsw i64 %78, 12, !dbg !35
  %272 = or disjoint i64 %264, %65, !dbg !35
  %273 = or disjoint i64 %265, %65, !dbg !35
  %274 = or disjoint i64 %266, %65, !dbg !35
  %275 = or disjoint i64 %267, %65, !dbg !35
  %276 = or disjoint i64 %268, %65, !dbg !35
  %277 = or disjoint i64 %269, %65, !dbg !35
  %278 = or disjoint i64 %270, %65, !dbg !35
  %279 = or disjoint i64 %271, %65, !dbg !35
  %280 = getelementptr bfloat, ptr addrspace(1) %29, i64 %272, !dbg !35
  %281 = getelementptr bfloat, ptr addrspace(1) %29, i64 %273, !dbg !35
  %282 = getelementptr bfloat, ptr addrspace(1) %29, i64 %274, !dbg !35
  %283 = getelementptr bfloat, ptr addrspace(1) %29, i64 %275, !dbg !35
  %284 = getelementptr bfloat, ptr addrspace(1) %29, i64 %276, !dbg !35
  %285 = getelementptr bfloat, ptr addrspace(1) %29, i64 %277, !dbg !35
  %286 = getelementptr bfloat, ptr addrspace(1) %29, i64 %278, !dbg !35
  %287 = getelementptr bfloat, ptr addrspace(1) %29, i64 %279, !dbg !35
  %288 = icmp slt i64 %71, %80, !dbg !35
  %289 = icmp slt i64 %72, %80, !dbg !35
  %290 = icmp slt i64 %73, %80, !dbg !35
  %291 = icmp slt i64 %74, %80, !dbg !35
  %292 = icmp slt i64 %75, %80, !dbg !35
  %293 = icmp slt i64 %76, %80, !dbg !35
  %294 = icmp slt i64 %77, %80, !dbg !35
  %295 = icmp slt i64 %78, %80, !dbg !35
  %296 = and i1 %262, %288, !dbg !34
  %297 = and i1 %262, %289, !dbg !34
  %298 = and i1 %262, %290, !dbg !34
  %299 = and i1 %262, %291, !dbg !34
  %300 = and i1 %262, %292, !dbg !34
  %301 = and i1 %262, %293, !dbg !34
  %302 = and i1 %262, %294, !dbg !34
  %303 = and i1 %262, %295, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %304 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %129, !dbg !35
  %305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %131, !dbg !35
  %306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %133, !dbg !35
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %135, !dbg !35
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %137, !dbg !35
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %139, !dbg !35
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %141, !dbg !35
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %143, !dbg !35
  %312 = select i1 %296, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %304, ptr addrspace(1) %280, i32 %312) #2, !dbg !35
  %313 = select i1 %297, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %305, ptr addrspace(1) %281, i32 %313) #2, !dbg !35
  %314 = select i1 %298, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %306, ptr addrspace(1) %282, i32 %314) #2, !dbg !35
  %315 = select i1 %299, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %307, ptr addrspace(1) %283, i32 %315) #2, !dbg !35
  %316 = select i1 %300, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %308, ptr addrspace(1) %284, i32 %316) #2, !dbg !35
  %317 = select i1 %301, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %309, ptr addrspace(1) %285, i32 %317) #2, !dbg !35
  %318 = select i1 %302, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %286, i32 %318) #2, !dbg !35
  %319 = select i1 %303, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %287, i32 %319) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %320 = or disjoint i64 %264, %79, !dbg !36
  %321 = or disjoint i64 %265, %79, !dbg !36
  %322 = or disjoint i64 %266, %79, !dbg !36
  %323 = or disjoint i64 %267, %79, !dbg !36
  %324 = or disjoint i64 %268, %79, !dbg !36
  %325 = or disjoint i64 %269, %79, !dbg !36
  %326 = or disjoint i64 %270, %79, !dbg !36
  %327 = or disjoint i64 %271, %79, !dbg !36
  %328 = getelementptr bfloat, ptr addrspace(1) %29, i64 %320, !dbg !36
  %329 = getelementptr bfloat, ptr addrspace(1) %29, i64 %321, !dbg !36
  %330 = getelementptr bfloat, ptr addrspace(1) %29, i64 %322, !dbg !36
  %331 = getelementptr bfloat, ptr addrspace(1) %29, i64 %323, !dbg !36
  %332 = getelementptr bfloat, ptr addrspace(1) %29, i64 %324, !dbg !36
  %333 = getelementptr bfloat, ptr addrspace(1) %29, i64 %325, !dbg !36
  %334 = getelementptr bfloat, ptr addrspace(1) %29, i64 %326, !dbg !36
  %335 = getelementptr bfloat, ptr addrspace(1) %29, i64 %327, !dbg !36
  %336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %129, !dbg !36
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %131, !dbg !36
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %133, !dbg !36
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %135, !dbg !36
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %137, !dbg !36
  %341 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %139, !dbg !36
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %141, !dbg !36
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %336, ptr addrspace(1) %328, i32 %312) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %337, ptr addrspace(1) %329, i32 %313) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %338, ptr addrspace(1) %330, i32 %314) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %339, ptr addrspace(1) %331, i32 %315) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %340, ptr addrspace(1) %332, i32 %316) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %341, ptr addrspace(1) %333, i32 %317) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %342, ptr addrspace(1) %334, i32 %318) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %343, ptr addrspace(1) %335, i32 %319) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %344 = add nsw i64 %264, %67, !dbg !37
  %345 = add nsw i64 %265, %67, !dbg !37
  %346 = add nsw i64 %266, %67, !dbg !37
  %347 = add nsw i64 %267, %67, !dbg !37
  %348 = add nsw i64 %268, %67, !dbg !37
  %349 = add nsw i64 %269, %67, !dbg !37
  %350 = add nsw i64 %270, %67, !dbg !37
  %351 = add nsw i64 %271, %67, !dbg !37
  %352 = getelementptr bfloat, ptr addrspace(1) %27, i64 %344, !dbg !37
  %353 = getelementptr bfloat, ptr addrspace(1) %27, i64 %345, !dbg !37
  %354 = getelementptr bfloat, ptr addrspace(1) %27, i64 %346, !dbg !37
  %355 = getelementptr bfloat, ptr addrspace(1) %27, i64 %347, !dbg !37
  %356 = getelementptr bfloat, ptr addrspace(1) %27, i64 %348, !dbg !37
  %357 = getelementptr bfloat, ptr addrspace(1) %27, i64 %349, !dbg !37
  %358 = getelementptr bfloat, ptr addrspace(1) %27, i64 %350, !dbg !37
  %359 = getelementptr bfloat, ptr addrspace(1) %27, i64 %351, !dbg !37
  %360 = and i1 %70, %288, !dbg !37
  %361 = and i1 %70, %289, !dbg !37
  %362 = and i1 %70, %290, !dbg !37
  %363 = and i1 %70, %291, !dbg !37
  %364 = and i1 %70, %292, !dbg !37
  %365 = and i1 %70, %293, !dbg !37
  %366 = and i1 %70, %294, !dbg !37
  %367 = and i1 %70, %295, !dbg !37
  %368 = and i1 %262, %360, !dbg !34
  %369 = and i1 %262, %361, !dbg !34
  %370 = and i1 %262, %362, !dbg !34
  %371 = and i1 %262, %363, !dbg !34
  %372 = and i1 %262, %364, !dbg !34
  %373 = and i1 %262, %365, !dbg !34
  %374 = and i1 %262, %366, !dbg !34
  %375 = and i1 %262, %367, !dbg !34
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %129, !dbg !37
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %131, !dbg !37
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %133, !dbg !37
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %135, !dbg !37
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %137, !dbg !37
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %139, !dbg !37
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %141, !dbg !37
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %143, !dbg !37
  %384 = select i1 %368, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %376, ptr addrspace(1) %352, i32 %384) #2, !dbg !37
  %385 = select i1 %369, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %377, ptr addrspace(1) %353, i32 %385) #2, !dbg !37
  %386 = select i1 %370, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %378, ptr addrspace(1) %354, i32 %386) #2, !dbg !37
  %387 = select i1 %371, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %379, ptr addrspace(1) %355, i32 %387) #2, !dbg !37
  %388 = select i1 %372, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %380, ptr addrspace(1) %356, i32 %388) #2, !dbg !37
  %389 = select i1 %373, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %381, ptr addrspace(1) %357, i32 %389) #2, !dbg !37
  %390 = select i1 %374, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %382, ptr addrspace(1) %358, i32 %390) #2, !dbg !37
  %391 = select i1 %375, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %383, ptr addrspace(1) %359, i32 %391) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx5 = shl nuw nsw i64 %263, 7, !dbg !38
  %392 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx5, !dbg !38
  %393 = icmp slt i64 %263, %80, !dbg !38
  %394 = and i1 %262, %393, !dbg !34
  %395 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 144128), i32 %56, !dbg !38
  %396 = select i1 %394, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %395, ptr addrspace(1) %392, i32 %396) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %397 = getelementptr bfloat, ptr addrspace(1) %28, i64 %272, !dbg !39
  %398 = getelementptr bfloat, ptr addrspace(1) %28, i64 %273, !dbg !39
  %399 = getelementptr bfloat, ptr addrspace(1) %28, i64 %274, !dbg !39
  %400 = getelementptr bfloat, ptr addrspace(1) %28, i64 %275, !dbg !39
  %401 = getelementptr bfloat, ptr addrspace(1) %28, i64 %276, !dbg !39
  %402 = getelementptr bfloat, ptr addrspace(1) %28, i64 %277, !dbg !39
  %403 = getelementptr bfloat, ptr addrspace(1) %28, i64 %278, !dbg !39
  %404 = getelementptr bfloat, ptr addrspace(1) %28, i64 %279, !dbg !39
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %129, !dbg !39
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %131, !dbg !39
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %133, !dbg !39
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %135, !dbg !39
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %137, !dbg !39
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %139, !dbg !39
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %141, !dbg !39
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %405, ptr addrspace(1) %397, i32 %312) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %406, ptr addrspace(1) %398, i32 %313) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %407, ptr addrspace(1) %399, i32 %314) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %408, ptr addrspace(1) %400, i32 %315) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %409, ptr addrspace(1) %401, i32 %316) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %410, ptr addrspace(1) %402, i32 %317) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %411, ptr addrspace(1) %403, i32 %318) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %412, ptr addrspace(1) %404, i32 %319) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %413 = getelementptr bfloat, ptr addrspace(1) %28, i64 %320, !dbg !40
  %414 = getelementptr bfloat, ptr addrspace(1) %28, i64 %321, !dbg !40
  %415 = getelementptr bfloat, ptr addrspace(1) %28, i64 %322, !dbg !40
  %416 = getelementptr bfloat, ptr addrspace(1) %28, i64 %323, !dbg !40
  %417 = getelementptr bfloat, ptr addrspace(1) %28, i64 %324, !dbg !40
  %418 = getelementptr bfloat, ptr addrspace(1) %28, i64 %325, !dbg !40
  %419 = getelementptr bfloat, ptr addrspace(1) %28, i64 %326, !dbg !40
  %420 = getelementptr bfloat, ptr addrspace(1) %28, i64 %327, !dbg !40
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %129, !dbg !40
  %422 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %131, !dbg !40
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %133, !dbg !40
  %424 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %135, !dbg !40
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %137, !dbg !40
  %426 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %139, !dbg !40
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %141, !dbg !40
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 106496), i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %421, ptr addrspace(1) %413, i32 %312) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %422, ptr addrspace(1) %414, i32 %313) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %423, ptr addrspace(1) %415, i32 %314) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %424, ptr addrspace(1) %416, i32 %315) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %425, ptr addrspace(1) %417, i32 %316) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %426, ptr addrspace(1) %418, i32 %317) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %427, ptr addrspace(1) %419, i32 %318) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %428, ptr addrspace(1) %420, i32 %319) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %429 = icmp sgt i32 %13, 191, !dbg !34
  %430 = or disjoint i64 %57, 128, !dbg !35
  %431 = or disjoint i64 %58, 128, !dbg !35
  %432 = or disjoint i64 %59, 128, !dbg !35
  %433 = or disjoint i64 %60, 128, !dbg !35
  %434 = or disjoint i64 %61, 128, !dbg !35
  %435 = or disjoint i64 %62, 128, !dbg !35
  %436 = or disjoint i64 %63, 128, !dbg !35
  %437 = or disjoint i64 %64, 128, !dbg !35
  %438 = or disjoint i64 %66, 128, !dbg !35
  %439 = shl nuw nsw i64 %430, 12, !dbg !35
  %440 = shl nuw nsw i64 %431, 12, !dbg !35
  %441 = shl nuw nsw i64 %432, 12, !dbg !35
  %442 = shl nuw nsw i64 %433, 12, !dbg !35
  %443 = shl nuw nsw i64 %434, 12, !dbg !35
  %444 = shl nuw nsw i64 %435, 12, !dbg !35
  %445 = shl nuw nsw i64 %436, 12, !dbg !35
  %446 = shl nuw nsw i64 %437, 12, !dbg !35
  %447 = or disjoint i64 %439, %65, !dbg !35
  %448 = or disjoint i64 %440, %65, !dbg !35
  %449 = or disjoint i64 %441, %65, !dbg !35
  %450 = or disjoint i64 %442, %65, !dbg !35
  %451 = or disjoint i64 %443, %65, !dbg !35
  %452 = or disjoint i64 %444, %65, !dbg !35
  %453 = or disjoint i64 %445, %65, !dbg !35
  %454 = or disjoint i64 %446, %65, !dbg !35
  %455 = getelementptr bfloat, ptr addrspace(1) %29, i64 %447, !dbg !35
  %456 = getelementptr bfloat, ptr addrspace(1) %29, i64 %448, !dbg !35
  %457 = getelementptr bfloat, ptr addrspace(1) %29, i64 %449, !dbg !35
  %458 = getelementptr bfloat, ptr addrspace(1) %29, i64 %450, !dbg !35
  %459 = getelementptr bfloat, ptr addrspace(1) %29, i64 %451, !dbg !35
  %460 = getelementptr bfloat, ptr addrspace(1) %29, i64 %452, !dbg !35
  %461 = getelementptr bfloat, ptr addrspace(1) %29, i64 %453, !dbg !35
  %462 = getelementptr bfloat, ptr addrspace(1) %29, i64 %454, !dbg !35
  %463 = icmp slt i64 %430, %80, !dbg !35
  %464 = icmp slt i64 %431, %80, !dbg !35
  %465 = icmp slt i64 %432, %80, !dbg !35
  %466 = icmp slt i64 %433, %80, !dbg !35
  %467 = icmp slt i64 %434, %80, !dbg !35
  %468 = icmp slt i64 %435, %80, !dbg !35
  %469 = icmp slt i64 %436, %80, !dbg !35
  %470 = icmp slt i64 %437, %80, !dbg !35
  %471 = and i1 %429, %463, !dbg !34
  %472 = and i1 %429, %464, !dbg !34
  %473 = and i1 %429, %465, !dbg !34
  %474 = and i1 %429, %466, !dbg !34
  %475 = and i1 %429, %467, !dbg !34
  %476 = and i1 %429, %468, !dbg !34
  %477 = and i1 %429, %469, !dbg !34
  %478 = and i1 %429, %470, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %479 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %129, !dbg !35
  %480 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %131, !dbg !35
  %481 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %133, !dbg !35
  %482 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %135, !dbg !35
  %483 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %137, !dbg !35
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %139, !dbg !35
  %485 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %141, !dbg !35
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %143, !dbg !35
  %487 = select i1 %471, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %479, ptr addrspace(1) %455, i32 %487) #2, !dbg !35
  %488 = select i1 %472, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %480, ptr addrspace(1) %456, i32 %488) #2, !dbg !35
  %489 = select i1 %473, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %481, ptr addrspace(1) %457, i32 %489) #2, !dbg !35
  %490 = select i1 %474, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %482, ptr addrspace(1) %458, i32 %490) #2, !dbg !35
  %491 = select i1 %475, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %483, ptr addrspace(1) %459, i32 %491) #2, !dbg !35
  %492 = select i1 %476, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %484, ptr addrspace(1) %460, i32 %492) #2, !dbg !35
  %493 = select i1 %477, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %485, ptr addrspace(1) %461, i32 %493) #2, !dbg !35
  %494 = select i1 %478, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %486, ptr addrspace(1) %462, i32 %494) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %495 = or disjoint i64 %439, %79, !dbg !36
  %496 = or disjoint i64 %440, %79, !dbg !36
  %497 = or disjoint i64 %441, %79, !dbg !36
  %498 = or disjoint i64 %442, %79, !dbg !36
  %499 = or disjoint i64 %443, %79, !dbg !36
  %500 = or disjoint i64 %444, %79, !dbg !36
  %501 = or disjoint i64 %445, %79, !dbg !36
  %502 = or disjoint i64 %446, %79, !dbg !36
  %503 = getelementptr bfloat, ptr addrspace(1) %29, i64 %495, !dbg !36
  %504 = getelementptr bfloat, ptr addrspace(1) %29, i64 %496, !dbg !36
  %505 = getelementptr bfloat, ptr addrspace(1) %29, i64 %497, !dbg !36
  %506 = getelementptr bfloat, ptr addrspace(1) %29, i64 %498, !dbg !36
  %507 = getelementptr bfloat, ptr addrspace(1) %29, i64 %499, !dbg !36
  %508 = getelementptr bfloat, ptr addrspace(1) %29, i64 %500, !dbg !36
  %509 = getelementptr bfloat, ptr addrspace(1) %29, i64 %501, !dbg !36
  %510 = getelementptr bfloat, ptr addrspace(1) %29, i64 %502, !dbg !36
  %511 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %129, !dbg !36
  %512 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %131, !dbg !36
  %513 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %133, !dbg !36
  %514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %135, !dbg !36
  %515 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %137, !dbg !36
  %516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %139, !dbg !36
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %141, !dbg !36
  %518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %511, ptr addrspace(1) %503, i32 %487) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %512, ptr addrspace(1) %504, i32 %488) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %513, ptr addrspace(1) %505, i32 %489) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %514, ptr addrspace(1) %506, i32 %490) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %515, ptr addrspace(1) %507, i32 %491) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %516, ptr addrspace(1) %508, i32 %492) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %517, ptr addrspace(1) %509, i32 %493) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %518, ptr addrspace(1) %510, i32 %494) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %519 = add nsw i64 %439, %67, !dbg !37
  %520 = add nsw i64 %440, %67, !dbg !37
  %521 = add nsw i64 %441, %67, !dbg !37
  %522 = add nsw i64 %442, %67, !dbg !37
  %523 = add nsw i64 %443, %67, !dbg !37
  %524 = add nsw i64 %444, %67, !dbg !37
  %525 = add nsw i64 %445, %67, !dbg !37
  %526 = add nsw i64 %446, %67, !dbg !37
  %527 = getelementptr bfloat, ptr addrspace(1) %27, i64 %519, !dbg !37
  %528 = getelementptr bfloat, ptr addrspace(1) %27, i64 %520, !dbg !37
  %529 = getelementptr bfloat, ptr addrspace(1) %27, i64 %521, !dbg !37
  %530 = getelementptr bfloat, ptr addrspace(1) %27, i64 %522, !dbg !37
  %531 = getelementptr bfloat, ptr addrspace(1) %27, i64 %523, !dbg !37
  %532 = getelementptr bfloat, ptr addrspace(1) %27, i64 %524, !dbg !37
  %533 = getelementptr bfloat, ptr addrspace(1) %27, i64 %525, !dbg !37
  %534 = getelementptr bfloat, ptr addrspace(1) %27, i64 %526, !dbg !37
  %535 = and i1 %70, %463, !dbg !37
  %536 = and i1 %70, %464, !dbg !37
  %537 = and i1 %70, %465, !dbg !37
  %538 = and i1 %70, %466, !dbg !37
  %539 = and i1 %70, %467, !dbg !37
  %540 = and i1 %70, %468, !dbg !37
  %541 = and i1 %70, %469, !dbg !37
  %542 = and i1 %70, %470, !dbg !37
  %543 = and i1 %429, %535, !dbg !34
  %544 = and i1 %429, %536, !dbg !34
  %545 = and i1 %429, %537, !dbg !34
  %546 = and i1 %429, %538, !dbg !34
  %547 = and i1 %429, %539, !dbg !34
  %548 = and i1 %429, %540, !dbg !34
  %549 = and i1 %429, %541, !dbg !34
  %550 = and i1 %429, %542, !dbg !34
  %551 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %129, !dbg !37
  %552 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %131, !dbg !37
  %553 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %133, !dbg !37
  %554 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %135, !dbg !37
  %555 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %137, !dbg !37
  %556 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %139, !dbg !37
  %557 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %141, !dbg !37
  %558 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %143, !dbg !37
  %559 = select i1 %543, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %551, ptr addrspace(1) %527, i32 %559) #2, !dbg !37
  %560 = select i1 %544, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %552, ptr addrspace(1) %528, i32 %560) #2, !dbg !37
  %561 = select i1 %545, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %553, ptr addrspace(1) %529, i32 %561) #2, !dbg !37
  %562 = select i1 %546, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %554, ptr addrspace(1) %530, i32 %562) #2, !dbg !37
  %563 = select i1 %547, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %555, ptr addrspace(1) %531, i32 %563) #2, !dbg !37
  %564 = select i1 %548, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %556, ptr addrspace(1) %532, i32 %564) #2, !dbg !37
  %565 = select i1 %549, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %557, ptr addrspace(1) %533, i32 %565) #2, !dbg !37
  %566 = select i1 %550, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %558, ptr addrspace(1) %534, i32 %566) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx6 = shl nuw nsw i64 %438, 7, !dbg !38
  %567 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx6, !dbg !38
  %568 = icmp slt i64 %438, %80, !dbg !38
  %569 = and i1 %429, %568, !dbg !34
  %570 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 144384), i32 %56, !dbg !38
  %571 = select i1 %569, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %570, ptr addrspace(1) %567, i32 %571) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %572 = getelementptr bfloat, ptr addrspace(1) %28, i64 %447, !dbg !39
  %573 = getelementptr bfloat, ptr addrspace(1) %28, i64 %448, !dbg !39
  %574 = getelementptr bfloat, ptr addrspace(1) %28, i64 %449, !dbg !39
  %575 = getelementptr bfloat, ptr addrspace(1) %28, i64 %450, !dbg !39
  %576 = getelementptr bfloat, ptr addrspace(1) %28, i64 %451, !dbg !39
  %577 = getelementptr bfloat, ptr addrspace(1) %28, i64 %452, !dbg !39
  %578 = getelementptr bfloat, ptr addrspace(1) %28, i64 %453, !dbg !39
  %579 = getelementptr bfloat, ptr addrspace(1) %28, i64 %454, !dbg !39
  %580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %129, !dbg !39
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %131, !dbg !39
  %582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %133, !dbg !39
  %583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %135, !dbg !39
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %137, !dbg !39
  %585 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %139, !dbg !39
  %586 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %141, !dbg !39
  %587 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %580, ptr addrspace(1) %572, i32 %487) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %581, ptr addrspace(1) %573, i32 %488) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %582, ptr addrspace(1) %574, i32 %489) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %583, ptr addrspace(1) %575, i32 %490) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %584, ptr addrspace(1) %576, i32 %491) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %585, ptr addrspace(1) %577, i32 %492) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %586, ptr addrspace(1) %578, i32 %493) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %587, ptr addrspace(1) %579, i32 %494) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %588 = getelementptr bfloat, ptr addrspace(1) %28, i64 %495, !dbg !40
  %589 = getelementptr bfloat, ptr addrspace(1) %28, i64 %496, !dbg !40
  %590 = getelementptr bfloat, ptr addrspace(1) %28, i64 %497, !dbg !40
  %591 = getelementptr bfloat, ptr addrspace(1) %28, i64 %498, !dbg !40
  %592 = getelementptr bfloat, ptr addrspace(1) %28, i64 %499, !dbg !40
  %593 = getelementptr bfloat, ptr addrspace(1) %28, i64 %500, !dbg !40
  %594 = getelementptr bfloat, ptr addrspace(1) %28, i64 %501, !dbg !40
  %595 = getelementptr bfloat, ptr addrspace(1) %28, i64 %502, !dbg !40
  %596 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %129, !dbg !40
  %597 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %131, !dbg !40
  %598 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %133, !dbg !40
  %599 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %135, !dbg !40
  %600 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %137, !dbg !40
  %601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %139, !dbg !40
  %602 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %141, !dbg !40
  %603 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 114688), i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %596, ptr addrspace(1) %588, i32 %487) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %597, ptr addrspace(1) %589, i32 %488) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %598, ptr addrspace(1) %590, i32 %489) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %599, ptr addrspace(1) %591, i32 %490) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %600, ptr addrspace(1) %592, i32 %491) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %601, ptr addrspace(1) %593, i32 %492) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %602, ptr addrspace(1) %594, i32 %493) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %603, ptr addrspace(1) %595, i32 %494) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %85, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %33, 1, !dbg !41
  %.pre1367 = and i32 %.pre, 6, !dbg !41
  %.pre1369 = shl nuw nsw i32 %33, 4, !dbg !41
  %.pre1371 = and i32 %.pre1369, 192, !dbg !41
  %.pre1373 = or disjoint i32 %.pre1371, %.pre1367, !dbg !41
  %.pre1375 = shl nuw nsw i32 %35, 4, !dbg !41
  %.pre1377 = or disjoint i32 %.pre1373, %.pre1375, !dbg !41
  %.pre1379 = shl nuw nsw i32 %36, 5, !dbg !41
  %.pre1381 = or disjoint i32 %.pre1377, %.pre1379, !dbg !41
  %.pre1383 = or disjoint i32 %.pre1381, 512, !dbg !41
  %.pre1385 = or disjoint i32 %.pre1381, 520, !dbg !41
  %.pre1387 = or disjoint i32 %.pre1381, 528, !dbg !41
  %.pre1389 = or disjoint i32 %.pre1381, 536, !dbg !41
  %.pre1391 = or disjoint i32 %.pre1381, 544, !dbg !41
  %.pre1393 = or disjoint i32 %.pre1381, 552, !dbg !41
  %.pre1395 = or disjoint i32 %.pre1381, 560, !dbg !41
  %.pre1397 = or disjoint i32 %.pre1381, 568, !dbg !41
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %.not3 = icmp eq i32 %46, 0, !dbg !29
  %604 = add nsw i32 %14, -3
  %605 = and i32 %33, 3
  %606 = mul nuw nsw i32 %605, 72
  %607 = select i1 %.not3, i32 0, i32 288
  %608 = xor i32 %607, %606
  %609 = shl nuw nsw i32 %34, 6
  %610 = or disjoint i32 %608, %609
  %611 = lshr exact i32 %35, 1
  %612 = xor i32 %610, %611
  %613 = shl nuw nsw i32 %36, 5
  %614 = or disjoint i32 %612, %613
  %615 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %614
  %616 = ptrtoint ptr addrspace(3) %615 to i32
  %617 = xor i32 %614, 16
  %618 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %617
  %619 = ptrtoint ptr addrspace(3) %618 to i32
  %620 = xor i32 %614, 32
  %621 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %620
  %622 = ptrtoint ptr addrspace(3) %621 to i32
  %623 = xor i32 %614, 48
  %624 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %623
  %625 = ptrtoint ptr addrspace(3) %624 to i32
  %626 = xor i32 %614, 2048
  %627 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %626
  %628 = ptrtoint ptr addrspace(3) %627 to i32
  %629 = xor i32 %614, 2064
  %630 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %629
  %631 = ptrtoint ptr addrspace(3) %630 to i32
  %632 = xor i32 %614, 2080
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %632
  %634 = ptrtoint ptr addrspace(3) %633 to i32
  %635 = xor i32 %614, 2096
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %635
  %637 = ptrtoint ptr addrspace(3) %636 to i32
  %.idx814 = shl nuw nsw i64 %57, 8
  %.idx815 = shl nuw nsw i64 %58, 8
  %.idx816 = shl nuw nsw i64 %59, 8
  %.idx817 = shl nuw nsw i64 %60, 8
  %.idx818 = shl nuw nsw i64 %61, 8
  %.idx819 = shl nuw nsw i64 %62, 8
  %.idx820 = shl nuw nsw i64 %63, 8
  %.idx821 = shl nuw nsw i64 %64, 8
  %638 = shl nuw nsw i32 %33, 1
  %639 = and i32 %638, 6
  %640 = shl nuw nsw i32 %33, 4
  %641 = and i32 %640, 192
  %642 = or disjoint i32 %641, %639
  %643 = shl nuw nsw i32 %35, 4
  %644 = or disjoint i32 %642, %643
  %645 = or disjoint i32 %644, %613
  %646 = and i32 %47, 504
  %647 = lshr i32 %645, 3
  %648 = add nuw nsw i32 %647, %645
  %649 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %648
  %650 = or disjoint i32 %645, 512
  %651 = lshr i32 %650, 3
  %652 = add nuw nsw i32 %651, %650
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %652
  %654 = or disjoint i32 %645, 8
  %655 = add nuw nsw i32 %647, %654
  %656 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %655
  %657 = or disjoint i32 %645, 520
  %658 = lshr i32 %657, 3
  %659 = and i32 %658, 536870904
  %660 = add nuw nsw i32 %659, %657
  %661 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %660
  %662 = or disjoint i32 %645, 16
  %663 = add nuw nsw i32 %647, %662
  %664 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %663
  %665 = or disjoint i32 %645, 528
  %666 = lshr i32 %665, 3
  %667 = and i32 %666, 536870904
  %668 = add nuw nsw i32 %667, %665
  %669 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %668
  %670 = or disjoint i32 %645, 24
  %671 = add nuw nsw i32 %647, %670
  %672 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %671
  %673 = or disjoint i32 %645, 536
  %674 = lshr i32 %673, 3
  %675 = and i32 %674, 536870904
  %676 = add nuw nsw i32 %675, %673
  %677 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %676
  %678 = or disjoint i32 %645, 32
  %679 = add nuw nsw i32 %647, %678
  %680 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %679
  %681 = or disjoint i32 %645, 544
  %682 = lshr i32 %681, 3
  %683 = and i32 %682, 536870904
  %684 = add nuw nsw i32 %683, %681
  %685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %684
  %686 = or disjoint i32 %645, 40
  %687 = add nuw nsw i32 %647, %686
  %688 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %687
  %689 = or disjoint i32 %645, 552
  %690 = lshr i32 %689, 3
  %691 = and i32 %690, 536870904
  %692 = add nuw nsw i32 %691, %689
  %693 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %692
  %694 = or disjoint i32 %645, 48
  %695 = add nuw nsw i32 %647, %694
  %696 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %695
  %697 = or disjoint i32 %645, 560
  %698 = lshr i32 %697, 3
  %699 = and i32 %698, 536870904
  %700 = add nuw nsw i32 %699, %697
  %701 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %700
  %702 = or disjoint i32 %645, 56
  %703 = add nuw nsw i32 %647, %702
  %704 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %703
  %705 = or disjoint i32 %645, 568
  %706 = lshr i32 %705, 3
  %707 = and i32 %706, 536870904
  %708 = add nuw nsw i32 %707, %705
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %708
  %710 = and i32 %33, 56
  %711 = add nuw nsw i32 %646, %710
  %712 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %711
  %713 = or disjoint i32 %646, 512
  %714 = lshr exact i32 %713, 3
  %715 = and i32 %714, 120
  %716 = add nuw nsw i32 %715, %713
  %717 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %716
  %718 = or disjoint i32 %646, 1024
  %719 = lshr exact i32 %718, 3
  %720 = and i32 %719, 184
  %721 = add nuw nsw i32 %720, %718
  %722 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %721
  %723 = or disjoint i32 %646, 1536
  %724 = lshr exact i32 %723, 3
  %725 = and i32 %724, 248
  %726 = add nuw nsw i32 %725, %723
  %727 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %726
  %728 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %614
  %729 = ptrtoint ptr addrspace(3) %728 to i32
  %730 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %617
  %731 = ptrtoint ptr addrspace(3) %730 to i32
  %732 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %620
  %733 = ptrtoint ptr addrspace(3) %732 to i32
  %734 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %623
  %735 = ptrtoint ptr addrspace(3) %734 to i32
  %736 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %626
  %737 = ptrtoint ptr addrspace(3) %736 to i32
  %738 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %629
  %739 = ptrtoint ptr addrspace(3) %738 to i32
  %740 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %632
  %741 = ptrtoint ptr addrspace(3) %740 to i32
  %742 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %635
  %743 = ptrtoint ptr addrspace(3) %742 to i32
  %.idx916 = shl nuw nsw i64 %71, 8
  %.idx917 = shl nuw nsw i64 %72, 8
  %.idx918 = shl nuw nsw i64 %73, 8
  %.idx919 = shl nuw nsw i64 %74, 8
  %.idx920 = shl nuw nsw i64 %75, 8
  %.idx921 = shl nuw nsw i64 %76, 8
  %.idx922 = shl nuw nsw i64 %77, 8
  %.idx923 = shl nuw nsw i64 %78, 8
  %744 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %648
  %745 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %652
  %746 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %655
  %747 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %660
  %748 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %663
  %749 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %668
  %750 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %671
  %751 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %676
  %752 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %679
  %753 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %684
  %754 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %687
  %755 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %692
  %756 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %695
  %757 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %700
  %758 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %703
  %759 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %708
  %760 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %711
  %761 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %716
  %762 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %721
  %763 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 139264), i32 %726
  %764 = shl nuw nsw i32 %33, 6
  %765 = and i32 %764, 1536
  %766 = or disjoint i32 %608, %765
  %767 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %766
  %768 = ptrtoint ptr addrspace(3) %767 to i32
  %769 = or disjoint i32 %766, 2048
  %770 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %769
  %771 = ptrtoint ptr addrspace(3) %770 to i32
  %772 = xor i32 %766, 8
  %773 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %772
  %774 = ptrtoint ptr addrspace(3) %773 to i32
  %775 = xor i32 %766, 2056
  %776 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %775
  %777 = ptrtoint ptr addrspace(3) %776 to i32
  %778 = xor i32 %766, 16
  %779 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %778
  %780 = ptrtoint ptr addrspace(3) %779 to i32
  %781 = xor i32 %766, 2064
  %782 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %781
  %783 = ptrtoint ptr addrspace(3) %782 to i32
  %784 = xor i32 %766, 24
  %785 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %784
  %786 = ptrtoint ptr addrspace(3) %785 to i32
  %787 = xor i32 %766, 2072
  %788 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %787
  %789 = ptrtoint ptr addrspace(3) %788 to i32
  %790 = xor i32 %766, 32
  %791 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %790
  %792 = ptrtoint ptr addrspace(3) %791 to i32
  %793 = xor i32 %766, 2080
  %794 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %793
  %795 = ptrtoint ptr addrspace(3) %794 to i32
  %796 = xor i32 %766, 40
  %797 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %796
  %798 = ptrtoint ptr addrspace(3) %797 to i32
  %799 = xor i32 %766, 2088
  %800 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %799
  %801 = ptrtoint ptr addrspace(3) %800 to i32
  %802 = xor i32 %766, 48
  %803 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %802
  %804 = ptrtoint ptr addrspace(3) %803 to i32
  %805 = xor i32 %766, 2096
  %806 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %805
  %807 = ptrtoint ptr addrspace(3) %806 to i32
  %808 = xor i32 %766, 56
  %809 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %808
  %810 = ptrtoint ptr addrspace(3) %809 to i32
  %811 = xor i32 %766, 2104
  %812 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %811
  %813 = ptrtoint ptr addrspace(3) %812 to i32
  %814 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %766
  %815 = ptrtoint ptr addrspace(3) %814 to i32
  %816 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %769
  %817 = ptrtoint ptr addrspace(3) %816 to i32
  %818 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %772
  %819 = ptrtoint ptr addrspace(3) %818 to i32
  %820 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %775
  %821 = ptrtoint ptr addrspace(3) %820 to i32
  %822 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %778
  %823 = ptrtoint ptr addrspace(3) %822 to i32
  %824 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %781
  %825 = ptrtoint ptr addrspace(3) %824 to i32
  %826 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %784
  %827 = ptrtoint ptr addrspace(3) %826 to i32
  %828 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %787
  %829 = ptrtoint ptr addrspace(3) %828 to i32
  %830 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %790
  %831 = ptrtoint ptr addrspace(3) %830 to i32
  %832 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %793
  %833 = ptrtoint ptr addrspace(3) %832 to i32
  %834 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %796
  %835 = ptrtoint ptr addrspace(3) %834 to i32
  %836 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %799
  %837 = ptrtoint ptr addrspace(3) %836 to i32
  %838 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %802
  %839 = ptrtoint ptr addrspace(3) %838 to i32
  %840 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %805
  %841 = ptrtoint ptr addrspace(3) %840 to i32
  %842 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %808
  %843 = ptrtoint ptr addrspace(3) %842 to i32
  %844 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %811
  %845 = ptrtoint ptr addrspace(3) %844 to i32
  %846 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %648
  %847 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %652
  %848 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %655
  %849 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %660
  %850 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %663
  %851 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %668
  %852 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %671
  %853 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %676
  %854 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %679
  %855 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %684
  %856 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %687
  %857 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %692
  %858 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %695
  %859 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %700
  %860 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %703
  %861 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %708
  %862 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %711
  %863 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %716
  %864 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %721
  %865 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 122880), i32 %726
  %866 = xor i32 %608, %34
  %867 = shl nuw nsw i32 %35, 5
  %868 = or disjoint i32 %866, %867
  %869 = xor i32 %868, %51
  %870 = xor i32 %869, 1024
  %871 = xor i32 %869, 2048
  %872 = xor i32 %869, 3072
  %873 = xor i32 %869, 32
  %874 = xor i32 %869, 1056
  %875 = xor i32 %869, 2080
  %876 = xor i32 %869, 3104
  %877 = sext i32 %604 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  br label %878, !dbg !34

878:                                              ; preds = %.lr.ph, %878
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %878 ]
  %879 = phi i32 [ 128, %.lr.ph ], [ %3868, %878 ]
  %880 = phi i32 [ 64, %.lr.ph ], [ %879, %878 ]
  %881 = phi i32 [ 0, %.lr.ph ], [ %880, %878 ]
  %.pn2861363 = phi i1 [ %542, %.lr.ph ], [ %3994, %878 ]
  %.pn3021362 = phi i1 [ %541, %.lr.ph ], [ %3993, %878 ]
  %.pn3181361 = phi i1 [ %540, %.lr.ph ], [ %3992, %878 ]
  %.pn3341360 = phi i1 [ %539, %.lr.ph ], [ %3991, %878 ]
  %.pn3501359 = phi i1 [ %538, %.lr.ph ], [ %3990, %878 ]
  %.pn3661358 = phi i1 [ %537, %.lr.ph ], [ %3989, %878 ]
  %.pn3821357 = phi i1 [ %536, %.lr.ph ], [ %3988, %878 ]
  %.pn3981356 = phi i1 [ %535, %.lr.ph ], [ %3987, %878 ]
  %.pn286.pn1355 = phi i1 [ %367, %.lr.ph ], [ %.pn2861363, %878 ]
  %.pn302.pn1354 = phi i1 [ %366, %.lr.ph ], [ %.pn3021362, %878 ]
  %.pn318.pn1353 = phi i1 [ %365, %.lr.ph ], [ %.pn3181361, %878 ]
  %.pn334.pn1352 = phi i1 [ %364, %.lr.ph ], [ %.pn3341360, %878 ]
  %.pn350.pn1351 = phi i1 [ %363, %.lr.ph ], [ %.pn3501359, %878 ]
  %.pn366.pn1350 = phi i1 [ %362, %.lr.ph ], [ %.pn3661358, %878 ]
  %.pn382.pn1349 = phi i1 [ %361, %.lr.ph ], [ %.pn3821357, %878 ]
  %.pn398.pn1348 = phi i1 [ %360, %.lr.ph ], [ %.pn3981356, %878 ]
  %.pn286.pn.pn1347 = phi i1 [ %200, %.lr.ph ], [ %.pn286.pn1355, %878 ]
  %.pn302.pn.pn1346 = phi i1 [ %199, %.lr.ph ], [ %.pn302.pn1354, %878 ]
  %.pn318.pn.pn1345 = phi i1 [ %198, %.lr.ph ], [ %.pn318.pn1353, %878 ]
  %.pn334.pn.pn1344 = phi i1 [ %197, %.lr.ph ], [ %.pn334.pn1352, %878 ]
  %.pn350.pn.pn1343 = phi i1 [ %196, %.lr.ph ], [ %.pn350.pn1351, %878 ]
  %.pn366.pn.pn1342 = phi i1 [ %195, %.lr.ph ], [ %.pn366.pn1350, %878 ]
  %.pn382.pn.pn1341 = phi i1 [ %194, %.lr.ph ], [ %.pn382.pn1349, %878 ]
  %.pn398.pn.pn1340 = phi i1 [ %193, %.lr.ph ], [ %.pn398.pn1348, %878 ]
  %.pn211339 = phi i64 [ %526, %.lr.ph ], [ %3978, %878 ]
  %.pn371338 = phi i64 [ %525, %.lr.ph ], [ %3977, %878 ]
  %.pn531337 = phi i64 [ %524, %.lr.ph ], [ %3976, %878 ]
  %.pn691336 = phi i64 [ %523, %.lr.ph ], [ %3975, %878 ]
  %.pn851335 = phi i64 [ %522, %.lr.ph ], [ %3974, %878 ]
  %.pn1011334 = phi i64 [ %521, %.lr.ph ], [ %3973, %878 ]
  %.pn1171333 = phi i64 [ %520, %.lr.ph ], [ %3972, %878 ]
  %.pn1331332 = phi i64 [ %519, %.lr.ph ], [ %3971, %878 ]
  %.pn21.pn1331 = phi i64 [ %351, %.lr.ph ], [ %.pn211339, %878 ]
  %.pn37.pn1330 = phi i64 [ %350, %.lr.ph ], [ %.pn371338, %878 ]
  %.pn53.pn1329 = phi i64 [ %349, %.lr.ph ], [ %.pn531337, %878 ]
  %.pn69.pn1328 = phi i64 [ %348, %.lr.ph ], [ %.pn691336, %878 ]
  %.pn85.pn1327 = phi i64 [ %347, %.lr.ph ], [ %.pn851335, %878 ]
  %.pn101.pn1326 = phi i64 [ %346, %.lr.ph ], [ %.pn1011334, %878 ]
  %.pn117.pn1325 = phi i64 [ %345, %.lr.ph ], [ %.pn1171333, %878 ]
  %.pn133.pn1324 = phi i64 [ %344, %.lr.ph ], [ %.pn1331332, %878 ]
  %.pn21.pn.pn1323 = phi i64 [ %184, %.lr.ph ], [ %.pn21.pn1331, %878 ]
  %.pn37.pn.pn1322 = phi i64 [ %183, %.lr.ph ], [ %.pn37.pn1330, %878 ]
  %.pn53.pn.pn1321 = phi i64 [ %182, %.lr.ph ], [ %.pn53.pn1329, %878 ]
  %.pn69.pn.pn1320 = phi i64 [ %181, %.lr.ph ], [ %.pn69.pn1328, %878 ]
  %.pn85.pn.pn1319 = phi i64 [ %180, %.lr.ph ], [ %.pn85.pn1327, %878 ]
  %.pn101.pn.pn1318 = phi i64 [ %179, %.lr.ph ], [ %.pn101.pn1326, %878 ]
  %.pn117.pn.pn1317 = phi i64 [ %178, %.lr.ph ], [ %.pn117.pn1325, %878 ]
  %.pn133.pn.pn1316 = phi i64 [ %177, %.lr.ph ], [ %.pn133.pn1324, %878 ]
  %882 = phi i32 [ -1, %.lr.ph ], [ %1015, %878 ]
  %883 = phi i32 [ 2, %.lr.ph ], [ %3866, %878 ]
  %884 = phi float [ 0.000000e+00, %.lr.ph ], [ %3785, %878 ]
  %885 = phi float [ 0.000000e+00, %.lr.ph ], [ %3786, %878 ]
  %886 = phi float [ 0.000000e+00, %.lr.ph ], [ %3787, %878 ]
  %887 = phi float [ 0.000000e+00, %.lr.ph ], [ %3788, %878 ]
  %888 = phi float [ 0.000000e+00, %.lr.ph ], [ %3790, %878 ]
  %889 = phi float [ 0.000000e+00, %.lr.ph ], [ %3791, %878 ]
  %890 = phi float [ 0.000000e+00, %.lr.ph ], [ %3792, %878 ]
  %891 = phi float [ 0.000000e+00, %.lr.ph ], [ %3793, %878 ]
  %892 = phi float [ 0.000000e+00, %.lr.ph ], [ %3795, %878 ]
  %893 = phi float [ 0.000000e+00, %.lr.ph ], [ %3796, %878 ]
  %894 = phi float [ 0.000000e+00, %.lr.ph ], [ %3797, %878 ]
  %895 = phi float [ 0.000000e+00, %.lr.ph ], [ %3798, %878 ]
  %896 = phi float [ 0.000000e+00, %.lr.ph ], [ %3800, %878 ]
  %897 = phi float [ 0.000000e+00, %.lr.ph ], [ %3801, %878 ]
  %898 = phi float [ 0.000000e+00, %.lr.ph ], [ %3802, %878 ]
  %899 = phi float [ 0.000000e+00, %.lr.ph ], [ %3803, %878 ]
  %900 = phi float [ 0.000000e+00, %.lr.ph ], [ %3805, %878 ]
  %901 = phi float [ 0.000000e+00, %.lr.ph ], [ %3806, %878 ]
  %902 = phi float [ 0.000000e+00, %.lr.ph ], [ %3807, %878 ]
  %903 = phi float [ 0.000000e+00, %.lr.ph ], [ %3808, %878 ]
  %904 = phi float [ 0.000000e+00, %.lr.ph ], [ %3810, %878 ]
  %905 = phi float [ 0.000000e+00, %.lr.ph ], [ %3811, %878 ]
  %906 = phi float [ 0.000000e+00, %.lr.ph ], [ %3812, %878 ]
  %907 = phi float [ 0.000000e+00, %.lr.ph ], [ %3813, %878 ]
  %908 = phi float [ 0.000000e+00, %.lr.ph ], [ %3815, %878 ]
  %909 = phi float [ 0.000000e+00, %.lr.ph ], [ %3816, %878 ]
  %910 = phi float [ 0.000000e+00, %.lr.ph ], [ %3817, %878 ]
  %911 = phi float [ 0.000000e+00, %.lr.ph ], [ %3818, %878 ]
  %912 = phi float [ 0.000000e+00, %.lr.ph ], [ %3820, %878 ]
  %913 = phi float [ 0.000000e+00, %.lr.ph ], [ %3821, %878 ]
  %914 = phi float [ 0.000000e+00, %.lr.ph ], [ %3822, %878 ]
  %915 = phi float [ 0.000000e+00, %.lr.ph ], [ %3823, %878 ]
  %916 = phi float [ 0.000000e+00, %.lr.ph ], [ %3825, %878 ]
  %917 = phi float [ 0.000000e+00, %.lr.ph ], [ %3826, %878 ]
  %918 = phi float [ 0.000000e+00, %.lr.ph ], [ %3827, %878 ]
  %919 = phi float [ 0.000000e+00, %.lr.ph ], [ %3828, %878 ]
  %920 = phi float [ 0.000000e+00, %.lr.ph ], [ %3830, %878 ]
  %921 = phi float [ 0.000000e+00, %.lr.ph ], [ %3831, %878 ]
  %922 = phi float [ 0.000000e+00, %.lr.ph ], [ %3832, %878 ]
  %923 = phi float [ 0.000000e+00, %.lr.ph ], [ %3833, %878 ]
  %924 = phi float [ 0.000000e+00, %.lr.ph ], [ %3835, %878 ]
  %925 = phi float [ 0.000000e+00, %.lr.ph ], [ %3836, %878 ]
  %926 = phi float [ 0.000000e+00, %.lr.ph ], [ %3837, %878 ]
  %927 = phi float [ 0.000000e+00, %.lr.ph ], [ %3838, %878 ]
  %928 = phi float [ 0.000000e+00, %.lr.ph ], [ %3840, %878 ]
  %929 = phi float [ 0.000000e+00, %.lr.ph ], [ %3841, %878 ]
  %930 = phi float [ 0.000000e+00, %.lr.ph ], [ %3842, %878 ]
  %931 = phi float [ 0.000000e+00, %.lr.ph ], [ %3843, %878 ]
  %932 = phi float [ 0.000000e+00, %.lr.ph ], [ %3845, %878 ]
  %933 = phi float [ 0.000000e+00, %.lr.ph ], [ %3846, %878 ]
  %934 = phi float [ 0.000000e+00, %.lr.ph ], [ %3847, %878 ]
  %935 = phi float [ 0.000000e+00, %.lr.ph ], [ %3848, %878 ]
  %936 = phi float [ 0.000000e+00, %.lr.ph ], [ %3850, %878 ]
  %937 = phi float [ 0.000000e+00, %.lr.ph ], [ %3851, %878 ]
  %938 = phi float [ 0.000000e+00, %.lr.ph ], [ %3852, %878 ]
  %939 = phi float [ 0.000000e+00, %.lr.ph ], [ %3853, %878 ]
  %940 = phi float [ 0.000000e+00, %.lr.ph ], [ %3855, %878 ]
  %941 = phi float [ 0.000000e+00, %.lr.ph ], [ %3856, %878 ]
  %942 = phi float [ 0.000000e+00, %.lr.ph ], [ %3857, %878 ]
  %943 = phi float [ 0.000000e+00, %.lr.ph ], [ %3858, %878 ]
  %944 = phi float [ 0.000000e+00, %.lr.ph ], [ %3860, %878 ]
  %945 = phi float [ 0.000000e+00, %.lr.ph ], [ %3861, %878 ]
  %946 = phi float [ 0.000000e+00, %.lr.ph ], [ %3862, %878 ]
  %947 = phi float [ 0.000000e+00, %.lr.ph ], [ %3863, %878 ]
  %948 = phi float [ 0.000000e+00, %.lr.ph ], [ %3408, %878 ]
  %949 = phi float [ 0.000000e+00, %.lr.ph ], [ %3409, %878 ]
  %950 = phi float [ 0.000000e+00, %.lr.ph ], [ %3410, %878 ]
  %951 = phi float [ 0.000000e+00, %.lr.ph ], [ %3411, %878 ]
  %952 = phi float [ 0.000000e+00, %.lr.ph ], [ %3413, %878 ]
  %953 = phi float [ 0.000000e+00, %.lr.ph ], [ %3414, %878 ]
  %954 = phi float [ 0.000000e+00, %.lr.ph ], [ %3415, %878 ]
  %955 = phi float [ 0.000000e+00, %.lr.ph ], [ %3416, %878 ]
  %956 = phi float [ 0.000000e+00, %.lr.ph ], [ %3418, %878 ]
  %957 = phi float [ 0.000000e+00, %.lr.ph ], [ %3419, %878 ]
  %958 = phi float [ 0.000000e+00, %.lr.ph ], [ %3420, %878 ]
  %959 = phi float [ 0.000000e+00, %.lr.ph ], [ %3421, %878 ]
  %960 = phi float [ 0.000000e+00, %.lr.ph ], [ %3423, %878 ]
  %961 = phi float [ 0.000000e+00, %.lr.ph ], [ %3424, %878 ]
  %962 = phi float [ 0.000000e+00, %.lr.ph ], [ %3425, %878 ]
  %963 = phi float [ 0.000000e+00, %.lr.ph ], [ %3426, %878 ]
  %964 = phi float [ 0.000000e+00, %.lr.ph ], [ %3428, %878 ]
  %965 = phi float [ 0.000000e+00, %.lr.ph ], [ %3429, %878 ]
  %966 = phi float [ 0.000000e+00, %.lr.ph ], [ %3430, %878 ]
  %967 = phi float [ 0.000000e+00, %.lr.ph ], [ %3431, %878 ]
  %968 = phi float [ 0.000000e+00, %.lr.ph ], [ %3433, %878 ]
  %969 = phi float [ 0.000000e+00, %.lr.ph ], [ %3434, %878 ]
  %970 = phi float [ 0.000000e+00, %.lr.ph ], [ %3435, %878 ]
  %971 = phi float [ 0.000000e+00, %.lr.ph ], [ %3436, %878 ]
  %972 = phi float [ 0.000000e+00, %.lr.ph ], [ %3438, %878 ]
  %973 = phi float [ 0.000000e+00, %.lr.ph ], [ %3439, %878 ]
  %974 = phi float [ 0.000000e+00, %.lr.ph ], [ %3440, %878 ]
  %975 = phi float [ 0.000000e+00, %.lr.ph ], [ %3441, %878 ]
  %976 = phi float [ 0.000000e+00, %.lr.ph ], [ %3443, %878 ]
  %977 = phi float [ 0.000000e+00, %.lr.ph ], [ %3444, %878 ]
  %978 = phi float [ 0.000000e+00, %.lr.ph ], [ %3445, %878 ]
  %979 = phi float [ 0.000000e+00, %.lr.ph ], [ %3446, %878 ]
  %980 = phi float [ 0.000000e+00, %.lr.ph ], [ %3448, %878 ]
  %981 = phi float [ 0.000000e+00, %.lr.ph ], [ %3449, %878 ]
  %982 = phi float [ 0.000000e+00, %.lr.ph ], [ %3450, %878 ]
  %983 = phi float [ 0.000000e+00, %.lr.ph ], [ %3451, %878 ]
  %984 = phi float [ 0.000000e+00, %.lr.ph ], [ %3453, %878 ]
  %985 = phi float [ 0.000000e+00, %.lr.ph ], [ %3454, %878 ]
  %986 = phi float [ 0.000000e+00, %.lr.ph ], [ %3455, %878 ]
  %987 = phi float [ 0.000000e+00, %.lr.ph ], [ %3456, %878 ]
  %988 = phi float [ 0.000000e+00, %.lr.ph ], [ %3458, %878 ]
  %989 = phi float [ 0.000000e+00, %.lr.ph ], [ %3459, %878 ]
  %990 = phi float [ 0.000000e+00, %.lr.ph ], [ %3460, %878 ]
  %991 = phi float [ 0.000000e+00, %.lr.ph ], [ %3461, %878 ]
  %992 = phi float [ 0.000000e+00, %.lr.ph ], [ %3463, %878 ]
  %993 = phi float [ 0.000000e+00, %.lr.ph ], [ %3464, %878 ]
  %994 = phi float [ 0.000000e+00, %.lr.ph ], [ %3465, %878 ]
  %995 = phi float [ 0.000000e+00, %.lr.ph ], [ %3466, %878 ]
  %996 = phi float [ 0.000000e+00, %.lr.ph ], [ %3468, %878 ]
  %997 = phi float [ 0.000000e+00, %.lr.ph ], [ %3469, %878 ]
  %998 = phi float [ 0.000000e+00, %.lr.ph ], [ %3470, %878 ]
  %999 = phi float [ 0.000000e+00, %.lr.ph ], [ %3471, %878 ]
  %1000 = phi float [ 0.000000e+00, %.lr.ph ], [ %3473, %878 ]
  %1001 = phi float [ 0.000000e+00, %.lr.ph ], [ %3474, %878 ]
  %1002 = phi float [ 0.000000e+00, %.lr.ph ], [ %3475, %878 ]
  %1003 = phi float [ 0.000000e+00, %.lr.ph ], [ %3476, %878 ]
  %1004 = phi float [ 0.000000e+00, %.lr.ph ], [ %3478, %878 ]
  %1005 = phi float [ 0.000000e+00, %.lr.ph ], [ %3479, %878 ]
  %1006 = phi float [ 0.000000e+00, %.lr.ph ], [ %3480, %878 ]
  %1007 = phi float [ 0.000000e+00, %.lr.ph ], [ %3481, %878 ]
  %1008 = phi float [ 0.000000e+00, %.lr.ph ], [ %3483, %878 ]
  %1009 = phi float [ 0.000000e+00, %.lr.ph ], [ %3484, %878 ]
  %1010 = phi float [ 0.000000e+00, %.lr.ph ], [ %3485, %878 ]
  %1011 = phi float [ 0.000000e+00, %.lr.ph ], [ %3486, %878 ]
  %1012 = icmp slt i64 %indvars.iv, %877, !dbg !34
  %1013 = add i32 %882, 1, !dbg !34
  %1014 = icmp sgt i32 %1013, 2, !dbg !34
  %1015 = select i1 %1014, i32 0, i32 %1013, !dbg !34
  %1016 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %1017 = shl i32 %1016, 19, !dbg !42
  %1018 = sext i32 %1017 to i64, !dbg !43
  %1019 = getelementptr bfloat, ptr addrspace(1) %21, i64 %1018, !dbg !43
  %1020 = fptrunc float %948 to bfloat, !dbg !44
  %1021 = fptrunc float %949 to bfloat, !dbg !44
  %1022 = fptrunc float %950 to bfloat, !dbg !44
  %1023 = fptrunc float %951 to bfloat, !dbg !44
  %1024 = fptrunc float %952 to bfloat, !dbg !44
  %1025 = fptrunc float %953 to bfloat, !dbg !44
  %1026 = fptrunc float %954 to bfloat, !dbg !44
  %1027 = fptrunc float %955 to bfloat, !dbg !44
  %1028 = fptrunc float %956 to bfloat, !dbg !44
  %1029 = fptrunc float %957 to bfloat, !dbg !44
  %1030 = fptrunc float %958 to bfloat, !dbg !44
  %1031 = fptrunc float %959 to bfloat, !dbg !44
  %1032 = fptrunc float %960 to bfloat, !dbg !44
  %1033 = fptrunc float %961 to bfloat, !dbg !44
  %1034 = fptrunc float %962 to bfloat, !dbg !44
  %1035 = fptrunc float %963 to bfloat, !dbg !44
  %1036 = fptrunc float %964 to bfloat, !dbg !44
  %1037 = fptrunc float %965 to bfloat, !dbg !44
  %1038 = fptrunc float %966 to bfloat, !dbg !44
  %1039 = fptrunc float %967 to bfloat, !dbg !44
  %1040 = fptrunc float %968 to bfloat, !dbg !44
  %1041 = fptrunc float %969 to bfloat, !dbg !44
  %1042 = fptrunc float %970 to bfloat, !dbg !44
  %1043 = fptrunc float %971 to bfloat, !dbg !44
  %1044 = fptrunc float %972 to bfloat, !dbg !44
  %1045 = fptrunc float %973 to bfloat, !dbg !44
  %1046 = fptrunc float %974 to bfloat, !dbg !44
  %1047 = fptrunc float %975 to bfloat, !dbg !44
  %1048 = fptrunc float %976 to bfloat, !dbg !44
  %1049 = fptrunc float %977 to bfloat, !dbg !44
  %1050 = fptrunc float %978 to bfloat, !dbg !44
  %1051 = fptrunc float %979 to bfloat, !dbg !44
  %1052 = fptrunc float %980 to bfloat, !dbg !44
  %1053 = fptrunc float %981 to bfloat, !dbg !44
  %1054 = fptrunc float %982 to bfloat, !dbg !44
  %1055 = fptrunc float %983 to bfloat, !dbg !44
  %1056 = fptrunc float %984 to bfloat, !dbg !44
  %1057 = fptrunc float %985 to bfloat, !dbg !44
  %1058 = fptrunc float %986 to bfloat, !dbg !44
  %1059 = fptrunc float %987 to bfloat, !dbg !44
  %1060 = fptrunc float %988 to bfloat, !dbg !44
  %1061 = fptrunc float %989 to bfloat, !dbg !44
  %1062 = fptrunc float %990 to bfloat, !dbg !44
  %1063 = fptrunc float %991 to bfloat, !dbg !44
  %1064 = fptrunc float %992 to bfloat, !dbg !44
  %1065 = fptrunc float %993 to bfloat, !dbg !44
  %1066 = fptrunc float %994 to bfloat, !dbg !44
  %1067 = fptrunc float %995 to bfloat, !dbg !44
  %1068 = fptrunc float %996 to bfloat, !dbg !44
  %1069 = fptrunc float %997 to bfloat, !dbg !44
  %1070 = fptrunc float %998 to bfloat, !dbg !44
  %1071 = fptrunc float %999 to bfloat, !dbg !44
  %1072 = fptrunc float %1000 to bfloat, !dbg !44
  %1073 = fptrunc float %1001 to bfloat, !dbg !44
  %1074 = fptrunc float %1002 to bfloat, !dbg !44
  %1075 = fptrunc float %1003 to bfloat, !dbg !44
  %1076 = fptrunc float %1004 to bfloat, !dbg !44
  %1077 = fptrunc float %1005 to bfloat, !dbg !44
  %1078 = fptrunc float %1006 to bfloat, !dbg !44
  %1079 = fptrunc float %1007 to bfloat, !dbg !44
  %1080 = fptrunc float %1008 to bfloat, !dbg !44
  %1081 = fptrunc float %1009 to bfloat, !dbg !44
  %1082 = fptrunc float %1010 to bfloat, !dbg !44
  %1083 = fptrunc float %1011 to bfloat, !dbg !44
  %1084 = insertelement <2 x bfloat> poison, bfloat %1020, i64 0, !dbg !44
  %1085 = insertelement <2 x bfloat> %1084, bfloat %1021, i64 1, !dbg !44
  %1086 = bitcast <2 x bfloat> %1085 to i32, !dbg !44
  %1087 = insertelement <2 x bfloat> poison, bfloat %1022, i64 0, !dbg !44
  %1088 = insertelement <2 x bfloat> %1087, bfloat %1023, i64 1, !dbg !44
  %1089 = bitcast <2 x bfloat> %1088 to i32, !dbg !44
  %1090 = insertelement <2 x bfloat> poison, bfloat %1024, i64 0, !dbg !44
  %1091 = insertelement <2 x bfloat> %1090, bfloat %1025, i64 1, !dbg !44
  %1092 = bitcast <2 x bfloat> %1091 to i32, !dbg !44
  %1093 = insertelement <2 x bfloat> poison, bfloat %1026, i64 0, !dbg !44
  %1094 = insertelement <2 x bfloat> %1093, bfloat %1027, i64 1, !dbg !44
  %1095 = bitcast <2 x bfloat> %1094 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %616, i32 %1086, i32 %1089, i32 %1092, i32 %1095) #2, !dbg !44
  %1096 = insertelement <2 x bfloat> poison, bfloat %1028, i64 0, !dbg !44
  %1097 = insertelement <2 x bfloat> %1096, bfloat %1029, i64 1, !dbg !44
  %1098 = bitcast <2 x bfloat> %1097 to i32, !dbg !44
  %1099 = insertelement <2 x bfloat> poison, bfloat %1030, i64 0, !dbg !44
  %1100 = insertelement <2 x bfloat> %1099, bfloat %1031, i64 1, !dbg !44
  %1101 = bitcast <2 x bfloat> %1100 to i32, !dbg !44
  %1102 = insertelement <2 x bfloat> poison, bfloat %1032, i64 0, !dbg !44
  %1103 = insertelement <2 x bfloat> %1102, bfloat %1033, i64 1, !dbg !44
  %1104 = bitcast <2 x bfloat> %1103 to i32, !dbg !44
  %1105 = insertelement <2 x bfloat> poison, bfloat %1034, i64 0, !dbg !44
  %1106 = insertelement <2 x bfloat> %1105, bfloat %1035, i64 1, !dbg !44
  %1107 = bitcast <2 x bfloat> %1106 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %619, i32 %1098, i32 %1101, i32 %1104, i32 %1107) #2, !dbg !44
  %1108 = insertelement <2 x bfloat> poison, bfloat %1036, i64 0, !dbg !44
  %1109 = insertelement <2 x bfloat> %1108, bfloat %1037, i64 1, !dbg !44
  %1110 = bitcast <2 x bfloat> %1109 to i32, !dbg !44
  %1111 = insertelement <2 x bfloat> poison, bfloat %1038, i64 0, !dbg !44
  %1112 = insertelement <2 x bfloat> %1111, bfloat %1039, i64 1, !dbg !44
  %1113 = bitcast <2 x bfloat> %1112 to i32, !dbg !44
  %1114 = insertelement <2 x bfloat> poison, bfloat %1040, i64 0, !dbg !44
  %1115 = insertelement <2 x bfloat> %1114, bfloat %1041, i64 1, !dbg !44
  %1116 = bitcast <2 x bfloat> %1115 to i32, !dbg !44
  %1117 = insertelement <2 x bfloat> poison, bfloat %1042, i64 0, !dbg !44
  %1118 = insertelement <2 x bfloat> %1117, bfloat %1043, i64 1, !dbg !44
  %1119 = bitcast <2 x bfloat> %1118 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %622, i32 %1110, i32 %1113, i32 %1116, i32 %1119) #2, !dbg !44
  %1120 = insertelement <2 x bfloat> poison, bfloat %1044, i64 0, !dbg !44
  %1121 = insertelement <2 x bfloat> %1120, bfloat %1045, i64 1, !dbg !44
  %1122 = bitcast <2 x bfloat> %1121 to i32, !dbg !44
  %1123 = insertelement <2 x bfloat> poison, bfloat %1046, i64 0, !dbg !44
  %1124 = insertelement <2 x bfloat> %1123, bfloat %1047, i64 1, !dbg !44
  %1125 = bitcast <2 x bfloat> %1124 to i32, !dbg !44
  %1126 = insertelement <2 x bfloat> poison, bfloat %1048, i64 0, !dbg !44
  %1127 = insertelement <2 x bfloat> %1126, bfloat %1049, i64 1, !dbg !44
  %1128 = bitcast <2 x bfloat> %1127 to i32, !dbg !44
  %1129 = insertelement <2 x bfloat> poison, bfloat %1050, i64 0, !dbg !44
  %1130 = insertelement <2 x bfloat> %1129, bfloat %1051, i64 1, !dbg !44
  %1131 = bitcast <2 x bfloat> %1130 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %625, i32 %1122, i32 %1125, i32 %1128, i32 %1131) #2, !dbg !44
  %1132 = insertelement <2 x bfloat> poison, bfloat %1052, i64 0, !dbg !44
  %1133 = insertelement <2 x bfloat> %1132, bfloat %1053, i64 1, !dbg !44
  %1134 = bitcast <2 x bfloat> %1133 to i32, !dbg !44
  %1135 = insertelement <2 x bfloat> poison, bfloat %1054, i64 0, !dbg !44
  %1136 = insertelement <2 x bfloat> %1135, bfloat %1055, i64 1, !dbg !44
  %1137 = bitcast <2 x bfloat> %1136 to i32, !dbg !44
  %1138 = insertelement <2 x bfloat> poison, bfloat %1056, i64 0, !dbg !44
  %1139 = insertelement <2 x bfloat> %1138, bfloat %1057, i64 1, !dbg !44
  %1140 = bitcast <2 x bfloat> %1139 to i32, !dbg !44
  %1141 = insertelement <2 x bfloat> poison, bfloat %1058, i64 0, !dbg !44
  %1142 = insertelement <2 x bfloat> %1141, bfloat %1059, i64 1, !dbg !44
  %1143 = bitcast <2 x bfloat> %1142 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %628, i32 %1134, i32 %1137, i32 %1140, i32 %1143) #2, !dbg !44
  %1144 = insertelement <2 x bfloat> poison, bfloat %1060, i64 0, !dbg !44
  %1145 = insertelement <2 x bfloat> %1144, bfloat %1061, i64 1, !dbg !44
  %1146 = bitcast <2 x bfloat> %1145 to i32, !dbg !44
  %1147 = insertelement <2 x bfloat> poison, bfloat %1062, i64 0, !dbg !44
  %1148 = insertelement <2 x bfloat> %1147, bfloat %1063, i64 1, !dbg !44
  %1149 = bitcast <2 x bfloat> %1148 to i32, !dbg !44
  %1150 = insertelement <2 x bfloat> poison, bfloat %1064, i64 0, !dbg !44
  %1151 = insertelement <2 x bfloat> %1150, bfloat %1065, i64 1, !dbg !44
  %1152 = bitcast <2 x bfloat> %1151 to i32, !dbg !44
  %1153 = insertelement <2 x bfloat> poison, bfloat %1066, i64 0, !dbg !44
  %1154 = insertelement <2 x bfloat> %1153, bfloat %1067, i64 1, !dbg !44
  %1155 = bitcast <2 x bfloat> %1154 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %631, i32 %1146, i32 %1149, i32 %1152, i32 %1155) #2, !dbg !44
  %1156 = insertelement <2 x bfloat> poison, bfloat %1068, i64 0, !dbg !44
  %1157 = insertelement <2 x bfloat> %1156, bfloat %1069, i64 1, !dbg !44
  %1158 = bitcast <2 x bfloat> %1157 to i32, !dbg !44
  %1159 = insertelement <2 x bfloat> poison, bfloat %1070, i64 0, !dbg !44
  %1160 = insertelement <2 x bfloat> %1159, bfloat %1071, i64 1, !dbg !44
  %1161 = bitcast <2 x bfloat> %1160 to i32, !dbg !44
  %1162 = insertelement <2 x bfloat> poison, bfloat %1072, i64 0, !dbg !44
  %1163 = insertelement <2 x bfloat> %1162, bfloat %1073, i64 1, !dbg !44
  %1164 = bitcast <2 x bfloat> %1163 to i32, !dbg !44
  %1165 = insertelement <2 x bfloat> poison, bfloat %1074, i64 0, !dbg !44
  %1166 = insertelement <2 x bfloat> %1165, bfloat %1075, i64 1, !dbg !44
  %1167 = bitcast <2 x bfloat> %1166 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %634, i32 %1158, i32 %1161, i32 %1164, i32 %1167) #2, !dbg !44
  %1168 = insertelement <2 x bfloat> poison, bfloat %1076, i64 0, !dbg !44
  %1169 = insertelement <2 x bfloat> %1168, bfloat %1077, i64 1, !dbg !44
  %1170 = bitcast <2 x bfloat> %1169 to i32, !dbg !44
  %1171 = insertelement <2 x bfloat> poison, bfloat %1078, i64 0, !dbg !44
  %1172 = insertelement <2 x bfloat> %1171, bfloat %1079, i64 1, !dbg !44
  %1173 = bitcast <2 x bfloat> %1172 to i32, !dbg !44
  %1174 = insertelement <2 x bfloat> poison, bfloat %1080, i64 0, !dbg !44
  %1175 = insertelement <2 x bfloat> %1174, bfloat %1081, i64 1, !dbg !44
  %1176 = bitcast <2 x bfloat> %1175 to i32, !dbg !44
  %1177 = insertelement <2 x bfloat> poison, bfloat %1082, i64 0, !dbg !44
  %1178 = insertelement <2 x bfloat> %1177, bfloat %1083, i64 1, !dbg !44
  %1179 = bitcast <2 x bfloat> %1178 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %637, i32 %1170, i32 %1173, i32 %1176, i32 %1179) #2, !dbg !44
  %1180 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx814, !dbg !29
  %1181 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %67, !dbg !29
  %1182 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx815, !dbg !29
  %1183 = getelementptr bfloat, ptr addrspace(1) %1182, i64 %67, !dbg !29
  %1184 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx816, !dbg !29
  %1185 = getelementptr bfloat, ptr addrspace(1) %1184, i64 %67, !dbg !29
  %1186 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx817, !dbg !29
  %1187 = getelementptr bfloat, ptr addrspace(1) %1186, i64 %67, !dbg !29
  %1188 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx818, !dbg !29
  %1189 = getelementptr bfloat, ptr addrspace(1) %1188, i64 %67, !dbg !29
  %1190 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx819, !dbg !29
  %1191 = getelementptr bfloat, ptr addrspace(1) %1190, i64 %67, !dbg !29
  %1192 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx820, !dbg !29
  %1193 = getelementptr bfloat, ptr addrspace(1) %1192, i64 %67, !dbg !29
  %1194 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx821, !dbg !29
  %1195 = getelementptr bfloat, ptr addrspace(1) %1194, i64 %67, !dbg !29
  store <2 x bfloat> %1085, ptr addrspace(3) %649, align 4, !dbg !29
  store <2 x bfloat> %1088, ptr addrspace(3) %653, align 4, !dbg !29
  store <2 x bfloat> %1091, ptr addrspace(3) %656, align 4, !dbg !29
  store <2 x bfloat> %1094, ptr addrspace(3) %661, align 4, !dbg !29
  store <2 x bfloat> %1097, ptr addrspace(3) %664, align 4, !dbg !29
  store <2 x bfloat> %1100, ptr addrspace(3) %669, align 4, !dbg !29
  store <2 x bfloat> %1103, ptr addrspace(3) %672, align 4, !dbg !29
  store <2 x bfloat> %1106, ptr addrspace(3) %677, align 4, !dbg !29
  store <2 x bfloat> %1109, ptr addrspace(3) %680, align 4, !dbg !29
  store <2 x bfloat> %1112, ptr addrspace(3) %685, align 4, !dbg !29
  store <2 x bfloat> %1115, ptr addrspace(3) %688, align 4, !dbg !29
  store <2 x bfloat> %1118, ptr addrspace(3) %693, align 4, !dbg !29
  store <2 x bfloat> %1121, ptr addrspace(3) %696, align 4, !dbg !29
  store <2 x bfloat> %1124, ptr addrspace(3) %701, align 4, !dbg !29
  store <2 x bfloat> %1127, ptr addrspace(3) %704, align 4, !dbg !29
  store <2 x bfloat> %1130, ptr addrspace(3) %709, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %1196 = load <4 x i32>, ptr addrspace(3) %712, align 16, !dbg !29
  %1197 = load <4 x i32>, ptr addrspace(3) %717, align 16, !dbg !29
  %1198 = load <4 x i32>, ptr addrspace(3) %722, align 16, !dbg !29
  %1199 = load <4 x i32>, ptr addrspace(3) %727, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  store <2 x bfloat> %1133, ptr addrspace(3) %649, align 4, !dbg !29
  store <2 x bfloat> %1136, ptr addrspace(3) %653, align 4, !dbg !29
  store <2 x bfloat> %1139, ptr addrspace(3) %656, align 4, !dbg !29
  store <2 x bfloat> %1142, ptr addrspace(3) %661, align 4, !dbg !29
  store <2 x bfloat> %1145, ptr addrspace(3) %664, align 4, !dbg !29
  store <2 x bfloat> %1148, ptr addrspace(3) %669, align 4, !dbg !29
  store <2 x bfloat> %1151, ptr addrspace(3) %672, align 4, !dbg !29
  store <2 x bfloat> %1154, ptr addrspace(3) %677, align 4, !dbg !29
  store <2 x bfloat> %1157, ptr addrspace(3) %680, align 4, !dbg !29
  store <2 x bfloat> %1160, ptr addrspace(3) %685, align 4, !dbg !29
  store <2 x bfloat> %1163, ptr addrspace(3) %688, align 4, !dbg !29
  store <2 x bfloat> %1166, ptr addrspace(3) %693, align 4, !dbg !29
  store <2 x bfloat> %1169, ptr addrspace(3) %696, align 4, !dbg !29
  store <2 x bfloat> %1172, ptr addrspace(3) %701, align 4, !dbg !29
  store <2 x bfloat> %1175, ptr addrspace(3) %704, align 4, !dbg !29
  store <2 x bfloat> %1178, ptr addrspace(3) %709, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %1200 = load <4 x i32>, ptr addrspace(3) %712, align 16, !dbg !29
  %1201 = load <4 x i32>, ptr addrspace(3) %717, align 16, !dbg !29
  %1202 = load <4 x i32>, ptr addrspace(3) %722, align 16, !dbg !29
  %1203 = load <4 x i32>, ptr addrspace(3) %727, align 16, !dbg !29
  %.extract1121 = extractelement <4 x i32> %1196, i64 0, !dbg !29
  %.extract1123 = extractelement <4 x i32> %1196, i64 1, !dbg !29
  %.extract1125 = extractelement <4 x i32> %1196, i64 2, !dbg !29
  %.extract1127 = extractelement <4 x i32> %1196, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1121, i32 %.extract1123, i32 %.extract1125, i32 %.extract1127, ptr addrspace(1) %1181, i1 %70) #2, !dbg !29
  %.extract1129 = extractelement <4 x i32> %1197, i64 0, !dbg !29
  %.extract1131 = extractelement <4 x i32> %1197, i64 1, !dbg !29
  %.extract1133 = extractelement <4 x i32> %1197, i64 2, !dbg !29
  %.extract1135 = extractelement <4 x i32> %1197, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1129, i32 %.extract1131, i32 %.extract1133, i32 %.extract1135, ptr addrspace(1) %1183, i1 %70) #2, !dbg !29
  %.extract1137 = extractelement <4 x i32> %1198, i64 0, !dbg !29
  %.extract1139 = extractelement <4 x i32> %1198, i64 1, !dbg !29
  %.extract1141 = extractelement <4 x i32> %1198, i64 2, !dbg !29
  %.extract1143 = extractelement <4 x i32> %1198, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1137, i32 %.extract1139, i32 %.extract1141, i32 %.extract1143, ptr addrspace(1) %1185, i1 %70) #2, !dbg !29
  %.extract1145 = extractelement <4 x i32> %1199, i64 0, !dbg !29
  %.extract1147 = extractelement <4 x i32> %1199, i64 1, !dbg !29
  %.extract1149 = extractelement <4 x i32> %1199, i64 2, !dbg !29
  %.extract1151 = extractelement <4 x i32> %1199, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1145, i32 %.extract1147, i32 %.extract1149, i32 %.extract1151, ptr addrspace(1) %1187, i1 %70) #2, !dbg !29
  %.extract1153 = extractelement <4 x i32> %1200, i64 0, !dbg !29
  %.extract1155 = extractelement <4 x i32> %1200, i64 1, !dbg !29
  %.extract1157 = extractelement <4 x i32> %1200, i64 2, !dbg !29
  %.extract1159 = extractelement <4 x i32> %1200, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1153, i32 %.extract1155, i32 %.extract1157, i32 %.extract1159, ptr addrspace(1) %1189, i1 %70) #2, !dbg !29
  %.extract1161 = extractelement <4 x i32> %1201, i64 0, !dbg !29
  %.extract1163 = extractelement <4 x i32> %1201, i64 1, !dbg !29
  %.extract1165 = extractelement <4 x i32> %1201, i64 2, !dbg !29
  %.extract1167 = extractelement <4 x i32> %1201, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1161, i32 %.extract1163, i32 %.extract1165, i32 %.extract1167, ptr addrspace(1) %1191, i1 %70) #2, !dbg !29
  %.extract1169 = extractelement <4 x i32> %1202, i64 0, !dbg !29
  %.extract1171 = extractelement <4 x i32> %1202, i64 1, !dbg !29
  %.extract1173 = extractelement <4 x i32> %1202, i64 2, !dbg !29
  %.extract1175 = extractelement <4 x i32> %1202, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1169, i32 %.extract1171, i32 %.extract1173, i32 %.extract1175, ptr addrspace(1) %1193, i1 %70) #2, !dbg !29
  %.extract1177 = extractelement <4 x i32> %1203, i64 0, !dbg !29
  %.extract1179 = extractelement <4 x i32> %1203, i64 1, !dbg !29
  %.extract1181 = extractelement <4 x i32> %1203, i64 2, !dbg !29
  %.extract1183 = extractelement <4 x i32> %1203, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1177, i32 %.extract1179, i32 %.extract1181, i32 %.extract1183, ptr addrspace(1) %1195, i1 %70) #2, !dbg !29
  %1204 = fptrunc float %884 to bfloat, !dbg !45
  %1205 = fptrunc float %885 to bfloat, !dbg !45
  %1206 = fptrunc float %886 to bfloat, !dbg !45
  %1207 = fptrunc float %887 to bfloat, !dbg !45
  %1208 = fptrunc float %888 to bfloat, !dbg !45
  %1209 = fptrunc float %889 to bfloat, !dbg !45
  %1210 = fptrunc float %890 to bfloat, !dbg !45
  %1211 = fptrunc float %891 to bfloat, !dbg !45
  %1212 = fptrunc float %892 to bfloat, !dbg !45
  %1213 = fptrunc float %893 to bfloat, !dbg !45
  %1214 = fptrunc float %894 to bfloat, !dbg !45
  %1215 = fptrunc float %895 to bfloat, !dbg !45
  %1216 = fptrunc float %896 to bfloat, !dbg !45
  %1217 = fptrunc float %897 to bfloat, !dbg !45
  %1218 = fptrunc float %898 to bfloat, !dbg !45
  %1219 = fptrunc float %899 to bfloat, !dbg !45
  %1220 = fptrunc float %900 to bfloat, !dbg !45
  %1221 = fptrunc float %901 to bfloat, !dbg !45
  %1222 = fptrunc float %902 to bfloat, !dbg !45
  %1223 = fptrunc float %903 to bfloat, !dbg !45
  %1224 = fptrunc float %904 to bfloat, !dbg !45
  %1225 = fptrunc float %905 to bfloat, !dbg !45
  %1226 = fptrunc float %906 to bfloat, !dbg !45
  %1227 = fptrunc float %907 to bfloat, !dbg !45
  %1228 = fptrunc float %908 to bfloat, !dbg !45
  %1229 = fptrunc float %909 to bfloat, !dbg !45
  %1230 = fptrunc float %910 to bfloat, !dbg !45
  %1231 = fptrunc float %911 to bfloat, !dbg !45
  %1232 = fptrunc float %912 to bfloat, !dbg !45
  %1233 = fptrunc float %913 to bfloat, !dbg !45
  %1234 = fptrunc float %914 to bfloat, !dbg !45
  %1235 = fptrunc float %915 to bfloat, !dbg !45
  %1236 = fptrunc float %916 to bfloat, !dbg !45
  %1237 = fptrunc float %917 to bfloat, !dbg !45
  %1238 = fptrunc float %918 to bfloat, !dbg !45
  %1239 = fptrunc float %919 to bfloat, !dbg !45
  %1240 = fptrunc float %920 to bfloat, !dbg !45
  %1241 = fptrunc float %921 to bfloat, !dbg !45
  %1242 = fptrunc float %922 to bfloat, !dbg !45
  %1243 = fptrunc float %923 to bfloat, !dbg !45
  %1244 = fptrunc float %924 to bfloat, !dbg !45
  %1245 = fptrunc float %925 to bfloat, !dbg !45
  %1246 = fptrunc float %926 to bfloat, !dbg !45
  %1247 = fptrunc float %927 to bfloat, !dbg !45
  %1248 = fptrunc float %928 to bfloat, !dbg !45
  %1249 = fptrunc float %929 to bfloat, !dbg !45
  %1250 = fptrunc float %930 to bfloat, !dbg !45
  %1251 = fptrunc float %931 to bfloat, !dbg !45
  %1252 = fptrunc float %932 to bfloat, !dbg !45
  %1253 = fptrunc float %933 to bfloat, !dbg !45
  %1254 = fptrunc float %934 to bfloat, !dbg !45
  %1255 = fptrunc float %935 to bfloat, !dbg !45
  %1256 = fptrunc float %936 to bfloat, !dbg !45
  %1257 = fptrunc float %937 to bfloat, !dbg !45
  %1258 = fptrunc float %938 to bfloat, !dbg !45
  %1259 = fptrunc float %939 to bfloat, !dbg !45
  %1260 = fptrunc float %940 to bfloat, !dbg !45
  %1261 = fptrunc float %941 to bfloat, !dbg !45
  %1262 = fptrunc float %942 to bfloat, !dbg !45
  %1263 = fptrunc float %943 to bfloat, !dbg !45
  %1264 = fptrunc float %944 to bfloat, !dbg !45
  %1265 = fptrunc float %945 to bfloat, !dbg !45
  %1266 = fptrunc float %946 to bfloat, !dbg !45
  %1267 = fptrunc float %947 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %1268 = insertelement <2 x bfloat> poison, bfloat %1204, i64 0, !dbg !45
  %1269 = insertelement <2 x bfloat> %1268, bfloat %1205, i64 1, !dbg !45
  %1270 = bitcast <2 x bfloat> %1269 to i32, !dbg !45
  %1271 = insertelement <2 x bfloat> poison, bfloat %1206, i64 0, !dbg !45
  %1272 = insertelement <2 x bfloat> %1271, bfloat %1207, i64 1, !dbg !45
  %1273 = bitcast <2 x bfloat> %1272 to i32, !dbg !45
  %1274 = insertelement <2 x bfloat> poison, bfloat %1208, i64 0, !dbg !45
  %1275 = insertelement <2 x bfloat> %1274, bfloat %1209, i64 1, !dbg !45
  %1276 = bitcast <2 x bfloat> %1275 to i32, !dbg !45
  %1277 = insertelement <2 x bfloat> poison, bfloat %1210, i64 0, !dbg !45
  %1278 = insertelement <2 x bfloat> %1277, bfloat %1211, i64 1, !dbg !45
  %1279 = bitcast <2 x bfloat> %1278 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %729, i32 %1270, i32 %1273, i32 %1276, i32 %1279) #2, !dbg !45
  %1280 = insertelement <2 x bfloat> poison, bfloat %1212, i64 0, !dbg !45
  %1281 = insertelement <2 x bfloat> %1280, bfloat %1213, i64 1, !dbg !45
  %1282 = bitcast <2 x bfloat> %1281 to i32, !dbg !45
  %1283 = insertelement <2 x bfloat> poison, bfloat %1214, i64 0, !dbg !45
  %1284 = insertelement <2 x bfloat> %1283, bfloat %1215, i64 1, !dbg !45
  %1285 = bitcast <2 x bfloat> %1284 to i32, !dbg !45
  %1286 = insertelement <2 x bfloat> poison, bfloat %1216, i64 0, !dbg !45
  %1287 = insertelement <2 x bfloat> %1286, bfloat %1217, i64 1, !dbg !45
  %1288 = bitcast <2 x bfloat> %1287 to i32, !dbg !45
  %1289 = insertelement <2 x bfloat> poison, bfloat %1218, i64 0, !dbg !45
  %1290 = insertelement <2 x bfloat> %1289, bfloat %1219, i64 1, !dbg !45
  %1291 = bitcast <2 x bfloat> %1290 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %731, i32 %1282, i32 %1285, i32 %1288, i32 %1291) #2, !dbg !45
  %1292 = insertelement <2 x bfloat> poison, bfloat %1220, i64 0, !dbg !45
  %1293 = insertelement <2 x bfloat> %1292, bfloat %1221, i64 1, !dbg !45
  %1294 = bitcast <2 x bfloat> %1293 to i32, !dbg !45
  %1295 = insertelement <2 x bfloat> poison, bfloat %1222, i64 0, !dbg !45
  %1296 = insertelement <2 x bfloat> %1295, bfloat %1223, i64 1, !dbg !45
  %1297 = bitcast <2 x bfloat> %1296 to i32, !dbg !45
  %1298 = insertelement <2 x bfloat> poison, bfloat %1224, i64 0, !dbg !45
  %1299 = insertelement <2 x bfloat> %1298, bfloat %1225, i64 1, !dbg !45
  %1300 = bitcast <2 x bfloat> %1299 to i32, !dbg !45
  %1301 = insertelement <2 x bfloat> poison, bfloat %1226, i64 0, !dbg !45
  %1302 = insertelement <2 x bfloat> %1301, bfloat %1227, i64 1, !dbg !45
  %1303 = bitcast <2 x bfloat> %1302 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %733, i32 %1294, i32 %1297, i32 %1300, i32 %1303) #2, !dbg !45
  %1304 = insertelement <2 x bfloat> poison, bfloat %1228, i64 0, !dbg !45
  %1305 = insertelement <2 x bfloat> %1304, bfloat %1229, i64 1, !dbg !45
  %1306 = bitcast <2 x bfloat> %1305 to i32, !dbg !45
  %1307 = insertelement <2 x bfloat> poison, bfloat %1230, i64 0, !dbg !45
  %1308 = insertelement <2 x bfloat> %1307, bfloat %1231, i64 1, !dbg !45
  %1309 = bitcast <2 x bfloat> %1308 to i32, !dbg !45
  %1310 = insertelement <2 x bfloat> poison, bfloat %1232, i64 0, !dbg !45
  %1311 = insertelement <2 x bfloat> %1310, bfloat %1233, i64 1, !dbg !45
  %1312 = bitcast <2 x bfloat> %1311 to i32, !dbg !45
  %1313 = insertelement <2 x bfloat> poison, bfloat %1234, i64 0, !dbg !45
  %1314 = insertelement <2 x bfloat> %1313, bfloat %1235, i64 1, !dbg !45
  %1315 = bitcast <2 x bfloat> %1314 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %735, i32 %1306, i32 %1309, i32 %1312, i32 %1315) #2, !dbg !45
  %1316 = insertelement <2 x bfloat> poison, bfloat %1236, i64 0, !dbg !45
  %1317 = insertelement <2 x bfloat> %1316, bfloat %1237, i64 1, !dbg !45
  %1318 = bitcast <2 x bfloat> %1317 to i32, !dbg !45
  %1319 = insertelement <2 x bfloat> poison, bfloat %1238, i64 0, !dbg !45
  %1320 = insertelement <2 x bfloat> %1319, bfloat %1239, i64 1, !dbg !45
  %1321 = bitcast <2 x bfloat> %1320 to i32, !dbg !45
  %1322 = insertelement <2 x bfloat> poison, bfloat %1240, i64 0, !dbg !45
  %1323 = insertelement <2 x bfloat> %1322, bfloat %1241, i64 1, !dbg !45
  %1324 = bitcast <2 x bfloat> %1323 to i32, !dbg !45
  %1325 = insertelement <2 x bfloat> poison, bfloat %1242, i64 0, !dbg !45
  %1326 = insertelement <2 x bfloat> %1325, bfloat %1243, i64 1, !dbg !45
  %1327 = bitcast <2 x bfloat> %1326 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %737, i32 %1318, i32 %1321, i32 %1324, i32 %1327) #2, !dbg !45
  %1328 = insertelement <2 x bfloat> poison, bfloat %1244, i64 0, !dbg !45
  %1329 = insertelement <2 x bfloat> %1328, bfloat %1245, i64 1, !dbg !45
  %1330 = bitcast <2 x bfloat> %1329 to i32, !dbg !45
  %1331 = insertelement <2 x bfloat> poison, bfloat %1246, i64 0, !dbg !45
  %1332 = insertelement <2 x bfloat> %1331, bfloat %1247, i64 1, !dbg !45
  %1333 = bitcast <2 x bfloat> %1332 to i32, !dbg !45
  %1334 = insertelement <2 x bfloat> poison, bfloat %1248, i64 0, !dbg !45
  %1335 = insertelement <2 x bfloat> %1334, bfloat %1249, i64 1, !dbg !45
  %1336 = bitcast <2 x bfloat> %1335 to i32, !dbg !45
  %1337 = insertelement <2 x bfloat> poison, bfloat %1250, i64 0, !dbg !45
  %1338 = insertelement <2 x bfloat> %1337, bfloat %1251, i64 1, !dbg !45
  %1339 = bitcast <2 x bfloat> %1338 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %739, i32 %1330, i32 %1333, i32 %1336, i32 %1339) #2, !dbg !45
  %1340 = insertelement <2 x bfloat> poison, bfloat %1252, i64 0, !dbg !45
  %1341 = insertelement <2 x bfloat> %1340, bfloat %1253, i64 1, !dbg !45
  %1342 = bitcast <2 x bfloat> %1341 to i32, !dbg !45
  %1343 = insertelement <2 x bfloat> poison, bfloat %1254, i64 0, !dbg !45
  %1344 = insertelement <2 x bfloat> %1343, bfloat %1255, i64 1, !dbg !45
  %1345 = bitcast <2 x bfloat> %1344 to i32, !dbg !45
  %1346 = insertelement <2 x bfloat> poison, bfloat %1256, i64 0, !dbg !45
  %1347 = insertelement <2 x bfloat> %1346, bfloat %1257, i64 1, !dbg !45
  %1348 = bitcast <2 x bfloat> %1347 to i32, !dbg !45
  %1349 = insertelement <2 x bfloat> poison, bfloat %1258, i64 0, !dbg !45
  %1350 = insertelement <2 x bfloat> %1349, bfloat %1259, i64 1, !dbg !45
  %1351 = bitcast <2 x bfloat> %1350 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %741, i32 %1342, i32 %1345, i32 %1348, i32 %1351) #2, !dbg !45
  %1352 = insertelement <2 x bfloat> poison, bfloat %1260, i64 0, !dbg !45
  %1353 = insertelement <2 x bfloat> %1352, bfloat %1261, i64 1, !dbg !45
  %1354 = bitcast <2 x bfloat> %1353 to i32, !dbg !45
  %1355 = insertelement <2 x bfloat> poison, bfloat %1262, i64 0, !dbg !45
  %1356 = insertelement <2 x bfloat> %1355, bfloat %1263, i64 1, !dbg !45
  %1357 = bitcast <2 x bfloat> %1356 to i32, !dbg !45
  %1358 = insertelement <2 x bfloat> poison, bfloat %1264, i64 0, !dbg !45
  %1359 = insertelement <2 x bfloat> %1358, bfloat %1265, i64 1, !dbg !45
  %1360 = bitcast <2 x bfloat> %1359 to i32, !dbg !45
  %1361 = insertelement <2 x bfloat> poison, bfloat %1266, i64 0, !dbg !45
  %1362 = insertelement <2 x bfloat> %1361, bfloat %1267, i64 1, !dbg !45
  %1363 = bitcast <2 x bfloat> %1362 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %743, i32 %1354, i32 %1357, i32 %1360, i32 %1363) #2, !dbg !45
  %1364 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx916, !dbg !30
  %1365 = getelementptr bfloat, ptr addrspace(1) %1364, i64 %67, !dbg !30
  %1366 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx917, !dbg !30
  %1367 = getelementptr bfloat, ptr addrspace(1) %1366, i64 %67, !dbg !30
  %1368 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx918, !dbg !30
  %1369 = getelementptr bfloat, ptr addrspace(1) %1368, i64 %67, !dbg !30
  %1370 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx919, !dbg !30
  %1371 = getelementptr bfloat, ptr addrspace(1) %1370, i64 %67, !dbg !30
  %1372 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx920, !dbg !30
  %1373 = getelementptr bfloat, ptr addrspace(1) %1372, i64 %67, !dbg !30
  %1374 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx921, !dbg !30
  %1375 = getelementptr bfloat, ptr addrspace(1) %1374, i64 %67, !dbg !30
  %1376 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx922, !dbg !30
  %1377 = getelementptr bfloat, ptr addrspace(1) %1376, i64 %67, !dbg !30
  %1378 = getelementptr i8, ptr addrspace(1) %1019, i64 %.idx923, !dbg !30
  %1379 = getelementptr bfloat, ptr addrspace(1) %1378, i64 %67, !dbg !30
  store <2 x bfloat> %1269, ptr addrspace(3) %744, align 4, !dbg !30
  store <2 x bfloat> %1272, ptr addrspace(3) %745, align 4, !dbg !30
  store <2 x bfloat> %1275, ptr addrspace(3) %746, align 4, !dbg !30
  store <2 x bfloat> %1278, ptr addrspace(3) %747, align 4, !dbg !30
  store <2 x bfloat> %1281, ptr addrspace(3) %748, align 4, !dbg !30
  store <2 x bfloat> %1284, ptr addrspace(3) %749, align 4, !dbg !30
  store <2 x bfloat> %1287, ptr addrspace(3) %750, align 4, !dbg !30
  store <2 x bfloat> %1290, ptr addrspace(3) %751, align 4, !dbg !30
  store <2 x bfloat> %1293, ptr addrspace(3) %752, align 4, !dbg !30
  store <2 x bfloat> %1296, ptr addrspace(3) %753, align 4, !dbg !30
  store <2 x bfloat> %1299, ptr addrspace(3) %754, align 4, !dbg !30
  store <2 x bfloat> %1302, ptr addrspace(3) %755, align 4, !dbg !30
  store <2 x bfloat> %1305, ptr addrspace(3) %756, align 4, !dbg !30
  store <2 x bfloat> %1308, ptr addrspace(3) %757, align 4, !dbg !30
  store <2 x bfloat> %1311, ptr addrspace(3) %758, align 4, !dbg !30
  store <2 x bfloat> %1314, ptr addrspace(3) %759, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1380 = load <4 x i32>, ptr addrspace(3) %760, align 16, !dbg !30
  %1381 = load <4 x i32>, ptr addrspace(3) %761, align 16, !dbg !30
  %1382 = load <4 x i32>, ptr addrspace(3) %762, align 16, !dbg !30
  %1383 = load <4 x i32>, ptr addrspace(3) %763, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  store <2 x bfloat> %1317, ptr addrspace(3) %744, align 4, !dbg !30
  store <2 x bfloat> %1320, ptr addrspace(3) %745, align 4, !dbg !30
  store <2 x bfloat> %1323, ptr addrspace(3) %746, align 4, !dbg !30
  store <2 x bfloat> %1326, ptr addrspace(3) %747, align 4, !dbg !30
  store <2 x bfloat> %1329, ptr addrspace(3) %748, align 4, !dbg !30
  store <2 x bfloat> %1332, ptr addrspace(3) %749, align 4, !dbg !30
  store <2 x bfloat> %1335, ptr addrspace(3) %750, align 4, !dbg !30
  store <2 x bfloat> %1338, ptr addrspace(3) %751, align 4, !dbg !30
  store <2 x bfloat> %1341, ptr addrspace(3) %752, align 4, !dbg !30
  store <2 x bfloat> %1344, ptr addrspace(3) %753, align 4, !dbg !30
  store <2 x bfloat> %1347, ptr addrspace(3) %754, align 4, !dbg !30
  store <2 x bfloat> %1350, ptr addrspace(3) %755, align 4, !dbg !30
  store <2 x bfloat> %1353, ptr addrspace(3) %756, align 4, !dbg !30
  store <2 x bfloat> %1356, ptr addrspace(3) %757, align 4, !dbg !30
  store <2 x bfloat> %1359, ptr addrspace(3) %758, align 4, !dbg !30
  store <2 x bfloat> %1362, ptr addrspace(3) %759, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1384 = load <4 x i32>, ptr addrspace(3) %760, align 16, !dbg !30
  %1385 = load <4 x i32>, ptr addrspace(3) %761, align 16, !dbg !30
  %1386 = load <4 x i32>, ptr addrspace(3) %762, align 16, !dbg !30
  %1387 = load <4 x i32>, ptr addrspace(3) %763, align 16, !dbg !30
  %.extract1185 = extractelement <4 x i32> %1380, i64 0, !dbg !30
  %.extract1187 = extractelement <4 x i32> %1380, i64 1, !dbg !30
  %.extract1189 = extractelement <4 x i32> %1380, i64 2, !dbg !30
  %.extract1191 = extractelement <4 x i32> %1380, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1185, i32 %.extract1187, i32 %.extract1189, i32 %.extract1191, ptr addrspace(1) %1365, i1 %70) #2, !dbg !30
  %.extract1193 = extractelement <4 x i32> %1381, i64 0, !dbg !30
  %.extract1195 = extractelement <4 x i32> %1381, i64 1, !dbg !30
  %.extract1197 = extractelement <4 x i32> %1381, i64 2, !dbg !30
  %.extract1199 = extractelement <4 x i32> %1381, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1193, i32 %.extract1195, i32 %.extract1197, i32 %.extract1199, ptr addrspace(1) %1367, i1 %70) #2, !dbg !30
  %.extract1201 = extractelement <4 x i32> %1382, i64 0, !dbg !30
  %.extract1203 = extractelement <4 x i32> %1382, i64 1, !dbg !30
  %.extract1205 = extractelement <4 x i32> %1382, i64 2, !dbg !30
  %.extract1207 = extractelement <4 x i32> %1382, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1201, i32 %.extract1203, i32 %.extract1205, i32 %.extract1207, ptr addrspace(1) %1369, i1 %70) #2, !dbg !30
  %.extract1209 = extractelement <4 x i32> %1383, i64 0, !dbg !30
  %.extract1211 = extractelement <4 x i32> %1383, i64 1, !dbg !30
  %.extract1213 = extractelement <4 x i32> %1383, i64 2, !dbg !30
  %.extract1215 = extractelement <4 x i32> %1383, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1209, i32 %.extract1211, i32 %.extract1213, i32 %.extract1215, ptr addrspace(1) %1371, i1 %70) #2, !dbg !30
  %.extract1217 = extractelement <4 x i32> %1384, i64 0, !dbg !30
  %.extract1219 = extractelement <4 x i32> %1384, i64 1, !dbg !30
  %.extract1221 = extractelement <4 x i32> %1384, i64 2, !dbg !30
  %.extract1223 = extractelement <4 x i32> %1384, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1217, i32 %.extract1219, i32 %.extract1221, i32 %.extract1223, ptr addrspace(1) %1373, i1 %70) #2, !dbg !30
  %.extract1225 = extractelement <4 x i32> %1385, i64 0, !dbg !30
  %.extract1227 = extractelement <4 x i32> %1385, i64 1, !dbg !30
  %.extract1229 = extractelement <4 x i32> %1385, i64 2, !dbg !30
  %.extract1231 = extractelement <4 x i32> %1385, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1225, i32 %.extract1227, i32 %.extract1229, i32 %.extract1231, ptr addrspace(1) %1375, i1 %70) #2, !dbg !30
  %.extract1233 = extractelement <4 x i32> %1386, i64 0, !dbg !30
  %.extract1235 = extractelement <4 x i32> %1386, i64 1, !dbg !30
  %.extract1237 = extractelement <4 x i32> %1386, i64 2, !dbg !30
  %.extract1239 = extractelement <4 x i32> %1386, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1233, i32 %.extract1235, i32 %.extract1237, i32 %.extract1239, ptr addrspace(1) %1377, i1 %70) #2, !dbg !30
  %.extract1241 = extractelement <4 x i32> %1387, i64 0, !dbg !30
  %.extract1243 = extractelement <4 x i32> %1387, i64 1, !dbg !30
  %.extract1245 = extractelement <4 x i32> %1387, i64 2, !dbg !30
  %.extract1247 = extractelement <4 x i32> %1387, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1241, i32 %.extract1243, i32 %.extract1245, i32 %.extract1247, ptr addrspace(1) %1379, i1 %70) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 12), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %1388 = shl i32 %1015, 12, !dbg !35
  %1389 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1388, !dbg !35
  %1390 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %614, !dbg !35
  %1391 = ptrtoint ptr addrspace(3) %1390 to i32, !dbg !35
  %1392 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1391) #2, !dbg !35
  %1393 = extractvalue { i32, i32, i32, i32 } %1392, 0, !dbg !35
  %1394 = extractvalue { i32, i32, i32, i32 } %1392, 1, !dbg !35
  %1395 = extractvalue { i32, i32, i32, i32 } %1392, 2, !dbg !35
  %1396 = extractvalue { i32, i32, i32, i32 } %1392, 3, !dbg !35
  %1397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %617, !dbg !35
  %1398 = ptrtoint ptr addrspace(3) %1397 to i32, !dbg !35
  %1399 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1398) #2, !dbg !35
  %1400 = extractvalue { i32, i32, i32, i32 } %1399, 0, !dbg !35
  %1401 = extractvalue { i32, i32, i32, i32 } %1399, 1, !dbg !35
  %1402 = extractvalue { i32, i32, i32, i32 } %1399, 2, !dbg !35
  %1403 = extractvalue { i32, i32, i32, i32 } %1399, 3, !dbg !35
  %1404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %620, !dbg !35
  %1405 = ptrtoint ptr addrspace(3) %1404 to i32, !dbg !35
  %1406 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1405) #2, !dbg !35
  %1407 = extractvalue { i32, i32, i32, i32 } %1406, 0, !dbg !35
  %1408 = extractvalue { i32, i32, i32, i32 } %1406, 1, !dbg !35
  %1409 = extractvalue { i32, i32, i32, i32 } %1406, 2, !dbg !35
  %1410 = extractvalue { i32, i32, i32, i32 } %1406, 3, !dbg !35
  %1411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %623, !dbg !35
  %1412 = ptrtoint ptr addrspace(3) %1411 to i32, !dbg !35
  %1413 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1412) #2, !dbg !35
  %1414 = extractvalue { i32, i32, i32, i32 } %1413, 0, !dbg !35
  %1415 = extractvalue { i32, i32, i32, i32 } %1413, 1, !dbg !35
  %1416 = extractvalue { i32, i32, i32, i32 } %1413, 2, !dbg !35
  %1417 = extractvalue { i32, i32, i32, i32 } %1413, 3, !dbg !35
  %1418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %626, !dbg !35
  %1419 = ptrtoint ptr addrspace(3) %1418 to i32, !dbg !35
  %1420 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1419) #2, !dbg !35
  %1421 = extractvalue { i32, i32, i32, i32 } %1420, 0, !dbg !35
  %1422 = extractvalue { i32, i32, i32, i32 } %1420, 1, !dbg !35
  %1423 = extractvalue { i32, i32, i32, i32 } %1420, 2, !dbg !35
  %1424 = extractvalue { i32, i32, i32, i32 } %1420, 3, !dbg !35
  %1425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %629, !dbg !35
  %1426 = ptrtoint ptr addrspace(3) %1425 to i32, !dbg !35
  %1427 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1426) #2, !dbg !35
  %1428 = extractvalue { i32, i32, i32, i32 } %1427, 0, !dbg !35
  %1429 = extractvalue { i32, i32, i32, i32 } %1427, 1, !dbg !35
  %1430 = extractvalue { i32, i32, i32, i32 } %1427, 2, !dbg !35
  %1431 = extractvalue { i32, i32, i32, i32 } %1427, 3, !dbg !35
  %1432 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %632, !dbg !35
  %1433 = ptrtoint ptr addrspace(3) %1432 to i32, !dbg !35
  %1434 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1433) #2, !dbg !35
  %1435 = extractvalue { i32, i32, i32, i32 } %1434, 0, !dbg !35
  %1436 = extractvalue { i32, i32, i32, i32 } %1434, 1, !dbg !35
  %1437 = extractvalue { i32, i32, i32, i32 } %1434, 2, !dbg !35
  %1438 = extractvalue { i32, i32, i32, i32 } %1434, 3, !dbg !35
  %1439 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1389, i32 %635, !dbg !35
  %1440 = ptrtoint ptr addrspace(3) %1439 to i32, !dbg !35
  %1441 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1440) #2, !dbg !35
  %1442 = extractvalue { i32, i32, i32, i32 } %1441, 0, !dbg !35
  %1443 = extractvalue { i32, i32, i32, i32 } %1441, 1, !dbg !35
  %1444 = extractvalue { i32, i32, i32, i32 } %1441, 2, !dbg !35
  %1445 = extractvalue { i32, i32, i32, i32 } %1441, 3, !dbg !35
  %1446 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %768) #2, !dbg !44
  %1447 = extractvalue { i32, i32, i32, i32 } %1446, 0, !dbg !44
  %1448 = extractvalue { i32, i32, i32, i32 } %1446, 1, !dbg !44
  %1449 = extractvalue { i32, i32, i32, i32 } %1446, 2, !dbg !44
  %1450 = extractvalue { i32, i32, i32, i32 } %1446, 3, !dbg !44
  %1451 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %771) #2, !dbg !44
  %1452 = extractvalue { i32, i32, i32, i32 } %1451, 0, !dbg !44
  %1453 = extractvalue { i32, i32, i32, i32 } %1451, 1, !dbg !44
  %1454 = extractvalue { i32, i32, i32, i32 } %1451, 2, !dbg !44
  %1455 = extractvalue { i32, i32, i32, i32 } %1451, 3, !dbg !44
  %1456 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %774) #2, !dbg !44
  %1457 = extractvalue { i32, i32, i32, i32 } %1456, 0, !dbg !44
  %1458 = extractvalue { i32, i32, i32, i32 } %1456, 1, !dbg !44
  %1459 = extractvalue { i32, i32, i32, i32 } %1456, 2, !dbg !44
  %1460 = extractvalue { i32, i32, i32, i32 } %1456, 3, !dbg !44
  %1461 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %777) #2, !dbg !44
  %1462 = extractvalue { i32, i32, i32, i32 } %1461, 0, !dbg !44
  %1463 = extractvalue { i32, i32, i32, i32 } %1461, 1, !dbg !44
  %1464 = extractvalue { i32, i32, i32, i32 } %1461, 2, !dbg !44
  %1465 = extractvalue { i32, i32, i32, i32 } %1461, 3, !dbg !44
  %1466 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %780) #2, !dbg !44
  %1467 = extractvalue { i32, i32, i32, i32 } %1466, 0, !dbg !44
  %1468 = extractvalue { i32, i32, i32, i32 } %1466, 1, !dbg !44
  %1469 = extractvalue { i32, i32, i32, i32 } %1466, 2, !dbg !44
  %1470 = extractvalue { i32, i32, i32, i32 } %1466, 3, !dbg !44
  %1471 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %783) #2, !dbg !44
  %1472 = extractvalue { i32, i32, i32, i32 } %1471, 0, !dbg !44
  %1473 = extractvalue { i32, i32, i32, i32 } %1471, 1, !dbg !44
  %1474 = extractvalue { i32, i32, i32, i32 } %1471, 2, !dbg !44
  %1475 = extractvalue { i32, i32, i32, i32 } %1471, 3, !dbg !44
  %1476 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %786) #2, !dbg !44
  %1477 = extractvalue { i32, i32, i32, i32 } %1476, 0, !dbg !44
  %1478 = extractvalue { i32, i32, i32, i32 } %1476, 1, !dbg !44
  %1479 = extractvalue { i32, i32, i32, i32 } %1476, 2, !dbg !44
  %1480 = extractvalue { i32, i32, i32, i32 } %1476, 3, !dbg !44
  %1481 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %789) #2, !dbg !44
  %1482 = extractvalue { i32, i32, i32, i32 } %1481, 0, !dbg !44
  %1483 = extractvalue { i32, i32, i32, i32 } %1481, 1, !dbg !44
  %1484 = extractvalue { i32, i32, i32, i32 } %1481, 2, !dbg !44
  %1485 = extractvalue { i32, i32, i32, i32 } %1481, 3, !dbg !44
  %1486 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %792) #2, !dbg !44
  %1487 = extractvalue { i32, i32, i32, i32 } %1486, 0, !dbg !44
  %1488 = extractvalue { i32, i32, i32, i32 } %1486, 1, !dbg !44
  %1489 = extractvalue { i32, i32, i32, i32 } %1486, 2, !dbg !44
  %1490 = extractvalue { i32, i32, i32, i32 } %1486, 3, !dbg !44
  %1491 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %795) #2, !dbg !44
  %1492 = extractvalue { i32, i32, i32, i32 } %1491, 0, !dbg !44
  %1493 = extractvalue { i32, i32, i32, i32 } %1491, 1, !dbg !44
  %1494 = extractvalue { i32, i32, i32, i32 } %1491, 2, !dbg !44
  %1495 = extractvalue { i32, i32, i32, i32 } %1491, 3, !dbg !44
  %1496 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %798) #2, !dbg !44
  %1497 = extractvalue { i32, i32, i32, i32 } %1496, 0, !dbg !44
  %1498 = extractvalue { i32, i32, i32, i32 } %1496, 1, !dbg !44
  %1499 = extractvalue { i32, i32, i32, i32 } %1496, 2, !dbg !44
  %1500 = extractvalue { i32, i32, i32, i32 } %1496, 3, !dbg !44
  %1501 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %801) #2, !dbg !44
  %1502 = extractvalue { i32, i32, i32, i32 } %1501, 0, !dbg !44
  %1503 = extractvalue { i32, i32, i32, i32 } %1501, 1, !dbg !44
  %1504 = extractvalue { i32, i32, i32, i32 } %1501, 2, !dbg !44
  %1505 = extractvalue { i32, i32, i32, i32 } %1501, 3, !dbg !44
  %1506 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %804) #2, !dbg !44
  %1507 = extractvalue { i32, i32, i32, i32 } %1506, 0, !dbg !44
  %1508 = extractvalue { i32, i32, i32, i32 } %1506, 1, !dbg !44
  %1509 = extractvalue { i32, i32, i32, i32 } %1506, 2, !dbg !44
  %1510 = extractvalue { i32, i32, i32, i32 } %1506, 3, !dbg !44
  %1511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %807) #2, !dbg !44
  %1512 = extractvalue { i32, i32, i32, i32 } %1511, 0, !dbg !44
  %1513 = extractvalue { i32, i32, i32, i32 } %1511, 1, !dbg !44
  %1514 = extractvalue { i32, i32, i32, i32 } %1511, 2, !dbg !44
  %1515 = extractvalue { i32, i32, i32, i32 } %1511, 3, !dbg !44
  %1516 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %810) #2, !dbg !44
  %1517 = extractvalue { i32, i32, i32, i32 } %1516, 0, !dbg !44
  %1518 = extractvalue { i32, i32, i32, i32 } %1516, 1, !dbg !44
  %1519 = extractvalue { i32, i32, i32, i32 } %1516, 2, !dbg !44
  %1520 = extractvalue { i32, i32, i32, i32 } %1516, 3, !dbg !44
  %1521 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %813) #2, !dbg !44
  %1522 = extractvalue { i32, i32, i32, i32 } %1521, 0, !dbg !44
  %1523 = extractvalue { i32, i32, i32, i32 } %1521, 1, !dbg !44
  %1524 = extractvalue { i32, i32, i32, i32 } %1521, 2, !dbg !44
  %1525 = extractvalue { i32, i32, i32, i32 } %1521, 3, !dbg !44
  %1526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1447, i32 %1448) #2, !dbg !46
  %1527 = extractvalue { float, float, float, float } %1526, 0, !dbg !46
  %1528 = extractvalue { float, float, float, float } %1526, 1, !dbg !46
  %1529 = extractvalue { float, float, float, float } %1526, 2, !dbg !46
  %1530 = extractvalue { float, float, float, float } %1526, 3, !dbg !46
  %1531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1457, i32 %1458) #2, !dbg !46
  %1532 = extractvalue { float, float, float, float } %1531, 0, !dbg !46
  %1533 = extractvalue { float, float, float, float } %1531, 1, !dbg !46
  %1534 = extractvalue { float, float, float, float } %1531, 2, !dbg !46
  %1535 = extractvalue { float, float, float, float } %1531, 3, !dbg !46
  %1536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1467, i32 %1468) #2, !dbg !46
  %1537 = extractvalue { float, float, float, float } %1536, 0, !dbg !46
  %1538 = extractvalue { float, float, float, float } %1536, 1, !dbg !46
  %1539 = extractvalue { float, float, float, float } %1536, 2, !dbg !46
  %1540 = extractvalue { float, float, float, float } %1536, 3, !dbg !46
  %1541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1477, i32 %1478) #2, !dbg !46
  %1542 = extractvalue { float, float, float, float } %1541, 0, !dbg !46
  %1543 = extractvalue { float, float, float, float } %1541, 1, !dbg !46
  %1544 = extractvalue { float, float, float, float } %1541, 2, !dbg !46
  %1545 = extractvalue { float, float, float, float } %1541, 3, !dbg !46
  %1546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1487, i32 %1488) #2, !dbg !46
  %1547 = extractvalue { float, float, float, float } %1546, 0, !dbg !46
  %1548 = extractvalue { float, float, float, float } %1546, 1, !dbg !46
  %1549 = extractvalue { float, float, float, float } %1546, 2, !dbg !46
  %1550 = extractvalue { float, float, float, float } %1546, 3, !dbg !46
  %1551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1497, i32 %1498) #2, !dbg !46
  %1552 = extractvalue { float, float, float, float } %1551, 0, !dbg !46
  %1553 = extractvalue { float, float, float, float } %1551, 1, !dbg !46
  %1554 = extractvalue { float, float, float, float } %1551, 2, !dbg !46
  %1555 = extractvalue { float, float, float, float } %1551, 3, !dbg !46
  %1556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1507, i32 %1508) #2, !dbg !46
  %1557 = extractvalue { float, float, float, float } %1556, 0, !dbg !46
  %1558 = extractvalue { float, float, float, float } %1556, 1, !dbg !46
  %1559 = extractvalue { float, float, float, float } %1556, 2, !dbg !46
  %1560 = extractvalue { float, float, float, float } %1556, 3, !dbg !46
  %1561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1393, i32 %1394, i32 %1395, i32 %1396, i32 %1517, i32 %1518) #2, !dbg !46
  %1562 = extractvalue { float, float, float, float } %1561, 0, !dbg !46
  %1563 = extractvalue { float, float, float, float } %1561, 1, !dbg !46
  %1564 = extractvalue { float, float, float, float } %1561, 2, !dbg !46
  %1565 = extractvalue { float, float, float, float } %1561, 3, !dbg !46
  %1566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1447, i32 %1448) #2, !dbg !46
  %1567 = extractvalue { float, float, float, float } %1566, 0, !dbg !46
  %1568 = extractvalue { float, float, float, float } %1566, 1, !dbg !46
  %1569 = extractvalue { float, float, float, float } %1566, 2, !dbg !46
  %1570 = extractvalue { float, float, float, float } %1566, 3, !dbg !46
  %1571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1457, i32 %1458) #2, !dbg !46
  %1572 = extractvalue { float, float, float, float } %1571, 0, !dbg !46
  %1573 = extractvalue { float, float, float, float } %1571, 1, !dbg !46
  %1574 = extractvalue { float, float, float, float } %1571, 2, !dbg !46
  %1575 = extractvalue { float, float, float, float } %1571, 3, !dbg !46
  %1576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1467, i32 %1468) #2, !dbg !46
  %1577 = extractvalue { float, float, float, float } %1576, 0, !dbg !46
  %1578 = extractvalue { float, float, float, float } %1576, 1, !dbg !46
  %1579 = extractvalue { float, float, float, float } %1576, 2, !dbg !46
  %1580 = extractvalue { float, float, float, float } %1576, 3, !dbg !46
  %1581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1477, i32 %1478) #2, !dbg !46
  %1582 = extractvalue { float, float, float, float } %1581, 0, !dbg !46
  %1583 = extractvalue { float, float, float, float } %1581, 1, !dbg !46
  %1584 = extractvalue { float, float, float, float } %1581, 2, !dbg !46
  %1585 = extractvalue { float, float, float, float } %1581, 3, !dbg !46
  %1586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1487, i32 %1488) #2, !dbg !46
  %1587 = extractvalue { float, float, float, float } %1586, 0, !dbg !46
  %1588 = extractvalue { float, float, float, float } %1586, 1, !dbg !46
  %1589 = extractvalue { float, float, float, float } %1586, 2, !dbg !46
  %1590 = extractvalue { float, float, float, float } %1586, 3, !dbg !46
  %1591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1497, i32 %1498) #2, !dbg !46
  %1592 = extractvalue { float, float, float, float } %1591, 0, !dbg !46
  %1593 = extractvalue { float, float, float, float } %1591, 1, !dbg !46
  %1594 = extractvalue { float, float, float, float } %1591, 2, !dbg !46
  %1595 = extractvalue { float, float, float, float } %1591, 3, !dbg !46
  %1596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1507, i32 %1508) #2, !dbg !46
  %1597 = extractvalue { float, float, float, float } %1596, 0, !dbg !46
  %1598 = extractvalue { float, float, float, float } %1596, 1, !dbg !46
  %1599 = extractvalue { float, float, float, float } %1596, 2, !dbg !46
  %1600 = extractvalue { float, float, float, float } %1596, 3, !dbg !46
  %1601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1421, i32 %1422, i32 %1423, i32 %1424, i32 %1517, i32 %1518) #2, !dbg !46
  %1602 = extractvalue { float, float, float, float } %1601, 0, !dbg !46
  %1603 = extractvalue { float, float, float, float } %1601, 1, !dbg !46
  %1604 = extractvalue { float, float, float, float } %1601, 2, !dbg !46
  %1605 = extractvalue { float, float, float, float } %1601, 3, !dbg !46
  %1606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1527, float %1528, float %1529, float %1530, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1449, i32 %1450) #2, !dbg !46
  %1607 = extractvalue { float, float, float, float } %1606, 0, !dbg !46
  %1608 = extractvalue { float, float, float, float } %1606, 1, !dbg !46
  %1609 = extractvalue { float, float, float, float } %1606, 2, !dbg !46
  %1610 = extractvalue { float, float, float, float } %1606, 3, !dbg !46
  %1611 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1532, float %1533, float %1534, float %1535, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1459, i32 %1460) #2, !dbg !46
  %1612 = extractvalue { float, float, float, float } %1611, 0, !dbg !46
  %1613 = extractvalue { float, float, float, float } %1611, 1, !dbg !46
  %1614 = extractvalue { float, float, float, float } %1611, 2, !dbg !46
  %1615 = extractvalue { float, float, float, float } %1611, 3, !dbg !46
  %1616 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1537, float %1538, float %1539, float %1540, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1469, i32 %1470) #2, !dbg !46
  %1617 = extractvalue { float, float, float, float } %1616, 0, !dbg !46
  %1618 = extractvalue { float, float, float, float } %1616, 1, !dbg !46
  %1619 = extractvalue { float, float, float, float } %1616, 2, !dbg !46
  %1620 = extractvalue { float, float, float, float } %1616, 3, !dbg !46
  %1621 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1542, float %1543, float %1544, float %1545, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1479, i32 %1480) #2, !dbg !46
  %1622 = extractvalue { float, float, float, float } %1621, 0, !dbg !46
  %1623 = extractvalue { float, float, float, float } %1621, 1, !dbg !46
  %1624 = extractvalue { float, float, float, float } %1621, 2, !dbg !46
  %1625 = extractvalue { float, float, float, float } %1621, 3, !dbg !46
  %1626 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1547, float %1548, float %1549, float %1550, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1489, i32 %1490) #2, !dbg !46
  %1627 = extractvalue { float, float, float, float } %1626, 0, !dbg !46
  %1628 = extractvalue { float, float, float, float } %1626, 1, !dbg !46
  %1629 = extractvalue { float, float, float, float } %1626, 2, !dbg !46
  %1630 = extractvalue { float, float, float, float } %1626, 3, !dbg !46
  %1631 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1552, float %1553, float %1554, float %1555, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1499, i32 %1500) #2, !dbg !46
  %1632 = extractvalue { float, float, float, float } %1631, 0, !dbg !46
  %1633 = extractvalue { float, float, float, float } %1631, 1, !dbg !46
  %1634 = extractvalue { float, float, float, float } %1631, 2, !dbg !46
  %1635 = extractvalue { float, float, float, float } %1631, 3, !dbg !46
  %1636 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1557, float %1558, float %1559, float %1560, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1509, i32 %1510) #2, !dbg !46
  %1637 = extractvalue { float, float, float, float } %1636, 0, !dbg !46
  %1638 = extractvalue { float, float, float, float } %1636, 1, !dbg !46
  %1639 = extractvalue { float, float, float, float } %1636, 2, !dbg !46
  %1640 = extractvalue { float, float, float, float } %1636, 3, !dbg !46
  %1641 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1562, float %1563, float %1564, float %1565, i32 %1400, i32 %1401, i32 %1402, i32 %1403, i32 %1519, i32 %1520) #2, !dbg !46
  %1642 = extractvalue { float, float, float, float } %1641, 0, !dbg !46
  %1643 = extractvalue { float, float, float, float } %1641, 1, !dbg !46
  %1644 = extractvalue { float, float, float, float } %1641, 2, !dbg !46
  %1645 = extractvalue { float, float, float, float } %1641, 3, !dbg !46
  %1646 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1567, float %1568, float %1569, float %1570, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1449, i32 %1450) #2, !dbg !46
  %1647 = extractvalue { float, float, float, float } %1646, 0, !dbg !46
  %1648 = extractvalue { float, float, float, float } %1646, 1, !dbg !46
  %1649 = extractvalue { float, float, float, float } %1646, 2, !dbg !46
  %1650 = extractvalue { float, float, float, float } %1646, 3, !dbg !46
  %1651 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1572, float %1573, float %1574, float %1575, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1459, i32 %1460) #2, !dbg !46
  %1652 = extractvalue { float, float, float, float } %1651, 0, !dbg !46
  %1653 = extractvalue { float, float, float, float } %1651, 1, !dbg !46
  %1654 = extractvalue { float, float, float, float } %1651, 2, !dbg !46
  %1655 = extractvalue { float, float, float, float } %1651, 3, !dbg !46
  %1656 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1577, float %1578, float %1579, float %1580, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1469, i32 %1470) #2, !dbg !46
  %1657 = extractvalue { float, float, float, float } %1656, 0, !dbg !46
  %1658 = extractvalue { float, float, float, float } %1656, 1, !dbg !46
  %1659 = extractvalue { float, float, float, float } %1656, 2, !dbg !46
  %1660 = extractvalue { float, float, float, float } %1656, 3, !dbg !46
  %1661 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1582, float %1583, float %1584, float %1585, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1479, i32 %1480) #2, !dbg !46
  %1662 = extractvalue { float, float, float, float } %1661, 0, !dbg !46
  %1663 = extractvalue { float, float, float, float } %1661, 1, !dbg !46
  %1664 = extractvalue { float, float, float, float } %1661, 2, !dbg !46
  %1665 = extractvalue { float, float, float, float } %1661, 3, !dbg !46
  %1666 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1587, float %1588, float %1589, float %1590, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1489, i32 %1490) #2, !dbg !46
  %1667 = extractvalue { float, float, float, float } %1666, 0, !dbg !46
  %1668 = extractvalue { float, float, float, float } %1666, 1, !dbg !46
  %1669 = extractvalue { float, float, float, float } %1666, 2, !dbg !46
  %1670 = extractvalue { float, float, float, float } %1666, 3, !dbg !46
  %1671 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1592, float %1593, float %1594, float %1595, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1499, i32 %1500) #2, !dbg !46
  %1672 = extractvalue { float, float, float, float } %1671, 0, !dbg !46
  %1673 = extractvalue { float, float, float, float } %1671, 1, !dbg !46
  %1674 = extractvalue { float, float, float, float } %1671, 2, !dbg !46
  %1675 = extractvalue { float, float, float, float } %1671, 3, !dbg !46
  %1676 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1597, float %1598, float %1599, float %1600, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1509, i32 %1510) #2, !dbg !46
  %1677 = extractvalue { float, float, float, float } %1676, 0, !dbg !46
  %1678 = extractvalue { float, float, float, float } %1676, 1, !dbg !46
  %1679 = extractvalue { float, float, float, float } %1676, 2, !dbg !46
  %1680 = extractvalue { float, float, float, float } %1676, 3, !dbg !46
  %1681 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1602, float %1603, float %1604, float %1605, i32 %1428, i32 %1429, i32 %1430, i32 %1431, i32 %1519, i32 %1520) #2, !dbg !46
  %1682 = extractvalue { float, float, float, float } %1681, 0, !dbg !46
  %1683 = extractvalue { float, float, float, float } %1681, 1, !dbg !46
  %1684 = extractvalue { float, float, float, float } %1681, 2, !dbg !46
  %1685 = extractvalue { float, float, float, float } %1681, 3, !dbg !46
  %1686 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1607, float %1608, float %1609, float %1610, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1452, i32 %1453) #2, !dbg !46
  %1687 = extractvalue { float, float, float, float } %1686, 0, !dbg !46
  %1688 = extractvalue { float, float, float, float } %1686, 1, !dbg !46
  %1689 = extractvalue { float, float, float, float } %1686, 2, !dbg !46
  %1690 = extractvalue { float, float, float, float } %1686, 3, !dbg !46
  %1691 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1612, float %1613, float %1614, float %1615, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1462, i32 %1463) #2, !dbg !46
  %1692 = extractvalue { float, float, float, float } %1691, 0, !dbg !46
  %1693 = extractvalue { float, float, float, float } %1691, 1, !dbg !46
  %1694 = extractvalue { float, float, float, float } %1691, 2, !dbg !46
  %1695 = extractvalue { float, float, float, float } %1691, 3, !dbg !46
  %1696 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1617, float %1618, float %1619, float %1620, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1472, i32 %1473) #2, !dbg !46
  %1697 = extractvalue { float, float, float, float } %1696, 0, !dbg !46
  %1698 = extractvalue { float, float, float, float } %1696, 1, !dbg !46
  %1699 = extractvalue { float, float, float, float } %1696, 2, !dbg !46
  %1700 = extractvalue { float, float, float, float } %1696, 3, !dbg !46
  %1701 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1622, float %1623, float %1624, float %1625, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1482, i32 %1483) #2, !dbg !46
  %1702 = extractvalue { float, float, float, float } %1701, 0, !dbg !46
  %1703 = extractvalue { float, float, float, float } %1701, 1, !dbg !46
  %1704 = extractvalue { float, float, float, float } %1701, 2, !dbg !46
  %1705 = extractvalue { float, float, float, float } %1701, 3, !dbg !46
  %1706 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1627, float %1628, float %1629, float %1630, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1492, i32 %1493) #2, !dbg !46
  %1707 = extractvalue { float, float, float, float } %1706, 0, !dbg !46
  %1708 = extractvalue { float, float, float, float } %1706, 1, !dbg !46
  %1709 = extractvalue { float, float, float, float } %1706, 2, !dbg !46
  %1710 = extractvalue { float, float, float, float } %1706, 3, !dbg !46
  %1711 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1632, float %1633, float %1634, float %1635, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1502, i32 %1503) #2, !dbg !46
  %1712 = extractvalue { float, float, float, float } %1711, 0, !dbg !46
  %1713 = extractvalue { float, float, float, float } %1711, 1, !dbg !46
  %1714 = extractvalue { float, float, float, float } %1711, 2, !dbg !46
  %1715 = extractvalue { float, float, float, float } %1711, 3, !dbg !46
  %1716 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1637, float %1638, float %1639, float %1640, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1512, i32 %1513) #2, !dbg !46
  %1717 = extractvalue { float, float, float, float } %1716, 0, !dbg !46
  %1718 = extractvalue { float, float, float, float } %1716, 1, !dbg !46
  %1719 = extractvalue { float, float, float, float } %1716, 2, !dbg !46
  %1720 = extractvalue { float, float, float, float } %1716, 3, !dbg !46
  %1721 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1642, float %1643, float %1644, float %1645, i32 %1407, i32 %1408, i32 %1409, i32 %1410, i32 %1522, i32 %1523) #2, !dbg !46
  %1722 = extractvalue { float, float, float, float } %1721, 0, !dbg !46
  %1723 = extractvalue { float, float, float, float } %1721, 1, !dbg !46
  %1724 = extractvalue { float, float, float, float } %1721, 2, !dbg !46
  %1725 = extractvalue { float, float, float, float } %1721, 3, !dbg !46
  %1726 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1647, float %1648, float %1649, float %1650, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1452, i32 %1453) #2, !dbg !46
  %1727 = extractvalue { float, float, float, float } %1726, 0, !dbg !46
  %1728 = extractvalue { float, float, float, float } %1726, 1, !dbg !46
  %1729 = extractvalue { float, float, float, float } %1726, 2, !dbg !46
  %1730 = extractvalue { float, float, float, float } %1726, 3, !dbg !46
  %1731 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1652, float %1653, float %1654, float %1655, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1462, i32 %1463) #2, !dbg !46
  %1732 = extractvalue { float, float, float, float } %1731, 0, !dbg !46
  %1733 = extractvalue { float, float, float, float } %1731, 1, !dbg !46
  %1734 = extractvalue { float, float, float, float } %1731, 2, !dbg !46
  %1735 = extractvalue { float, float, float, float } %1731, 3, !dbg !46
  %1736 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1657, float %1658, float %1659, float %1660, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1472, i32 %1473) #2, !dbg !46
  %1737 = extractvalue { float, float, float, float } %1736, 0, !dbg !46
  %1738 = extractvalue { float, float, float, float } %1736, 1, !dbg !46
  %1739 = extractvalue { float, float, float, float } %1736, 2, !dbg !46
  %1740 = extractvalue { float, float, float, float } %1736, 3, !dbg !46
  %1741 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1662, float %1663, float %1664, float %1665, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1482, i32 %1483) #2, !dbg !46
  %1742 = extractvalue { float, float, float, float } %1741, 0, !dbg !46
  %1743 = extractvalue { float, float, float, float } %1741, 1, !dbg !46
  %1744 = extractvalue { float, float, float, float } %1741, 2, !dbg !46
  %1745 = extractvalue { float, float, float, float } %1741, 3, !dbg !46
  %1746 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1667, float %1668, float %1669, float %1670, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1492, i32 %1493) #2, !dbg !46
  %1747 = extractvalue { float, float, float, float } %1746, 0, !dbg !46
  %1748 = extractvalue { float, float, float, float } %1746, 1, !dbg !46
  %1749 = extractvalue { float, float, float, float } %1746, 2, !dbg !46
  %1750 = extractvalue { float, float, float, float } %1746, 3, !dbg !46
  %1751 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1672, float %1673, float %1674, float %1675, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1502, i32 %1503) #2, !dbg !46
  %1752 = extractvalue { float, float, float, float } %1751, 0, !dbg !46
  %1753 = extractvalue { float, float, float, float } %1751, 1, !dbg !46
  %1754 = extractvalue { float, float, float, float } %1751, 2, !dbg !46
  %1755 = extractvalue { float, float, float, float } %1751, 3, !dbg !46
  %1756 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1677, float %1678, float %1679, float %1680, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1512, i32 %1513) #2, !dbg !46
  %1757 = extractvalue { float, float, float, float } %1756, 0, !dbg !46
  %1758 = extractvalue { float, float, float, float } %1756, 1, !dbg !46
  %1759 = extractvalue { float, float, float, float } %1756, 2, !dbg !46
  %1760 = extractvalue { float, float, float, float } %1756, 3, !dbg !46
  %1761 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1682, float %1683, float %1684, float %1685, i32 %1435, i32 %1436, i32 %1437, i32 %1438, i32 %1522, i32 %1523) #2, !dbg !46
  %1762 = extractvalue { float, float, float, float } %1761, 0, !dbg !46
  %1763 = extractvalue { float, float, float, float } %1761, 1, !dbg !46
  %1764 = extractvalue { float, float, float, float } %1761, 2, !dbg !46
  %1765 = extractvalue { float, float, float, float } %1761, 3, !dbg !46
  %1766 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1687, float %1688, float %1689, float %1690, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1454, i32 %1455) #2, !dbg !46
  %1767 = extractvalue { float, float, float, float } %1766, 0, !dbg !46
  %1768 = extractvalue { float, float, float, float } %1766, 1, !dbg !46
  %1769 = extractvalue { float, float, float, float } %1766, 2, !dbg !46
  %1770 = extractvalue { float, float, float, float } %1766, 3, !dbg !46
  %1771 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1692, float %1693, float %1694, float %1695, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1464, i32 %1465) #2, !dbg !46
  %1772 = extractvalue { float, float, float, float } %1771, 0, !dbg !46
  %1773 = extractvalue { float, float, float, float } %1771, 1, !dbg !46
  %1774 = extractvalue { float, float, float, float } %1771, 2, !dbg !46
  %1775 = extractvalue { float, float, float, float } %1771, 3, !dbg !46
  %1776 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1697, float %1698, float %1699, float %1700, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1474, i32 %1475) #2, !dbg !46
  %1777 = extractvalue { float, float, float, float } %1776, 0, !dbg !46
  %1778 = extractvalue { float, float, float, float } %1776, 1, !dbg !46
  %1779 = extractvalue { float, float, float, float } %1776, 2, !dbg !46
  %1780 = extractvalue { float, float, float, float } %1776, 3, !dbg !46
  %1781 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1702, float %1703, float %1704, float %1705, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1484, i32 %1485) #2, !dbg !46
  %1782 = extractvalue { float, float, float, float } %1781, 0, !dbg !46
  %1783 = extractvalue { float, float, float, float } %1781, 1, !dbg !46
  %1784 = extractvalue { float, float, float, float } %1781, 2, !dbg !46
  %1785 = extractvalue { float, float, float, float } %1781, 3, !dbg !46
  %1786 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1707, float %1708, float %1709, float %1710, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1494, i32 %1495) #2, !dbg !46
  %1787 = extractvalue { float, float, float, float } %1786, 0, !dbg !46
  %1788 = extractvalue { float, float, float, float } %1786, 1, !dbg !46
  %1789 = extractvalue { float, float, float, float } %1786, 2, !dbg !46
  %1790 = extractvalue { float, float, float, float } %1786, 3, !dbg !46
  %1791 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1712, float %1713, float %1714, float %1715, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1504, i32 %1505) #2, !dbg !46
  %1792 = extractvalue { float, float, float, float } %1791, 0, !dbg !46
  %1793 = extractvalue { float, float, float, float } %1791, 1, !dbg !46
  %1794 = extractvalue { float, float, float, float } %1791, 2, !dbg !46
  %1795 = extractvalue { float, float, float, float } %1791, 3, !dbg !46
  %1796 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1717, float %1718, float %1719, float %1720, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1514, i32 %1515) #2, !dbg !46
  %1797 = extractvalue { float, float, float, float } %1796, 0, !dbg !46
  %1798 = extractvalue { float, float, float, float } %1796, 1, !dbg !46
  %1799 = extractvalue { float, float, float, float } %1796, 2, !dbg !46
  %1800 = extractvalue { float, float, float, float } %1796, 3, !dbg !46
  %1801 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1722, float %1723, float %1724, float %1725, i32 %1414, i32 %1415, i32 %1416, i32 %1417, i32 %1524, i32 %1525) #2, !dbg !46
  %1802 = extractvalue { float, float, float, float } %1801, 0, !dbg !46
  %1803 = extractvalue { float, float, float, float } %1801, 1, !dbg !46
  %1804 = extractvalue { float, float, float, float } %1801, 2, !dbg !46
  %1805 = extractvalue { float, float, float, float } %1801, 3, !dbg !46
  %1806 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1727, float %1728, float %1729, float %1730, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1454, i32 %1455) #2, !dbg !46
  %1807 = extractvalue { float, float, float, float } %1806, 0, !dbg !46
  %1808 = extractvalue { float, float, float, float } %1806, 1, !dbg !46
  %1809 = extractvalue { float, float, float, float } %1806, 2, !dbg !46
  %1810 = extractvalue { float, float, float, float } %1806, 3, !dbg !46
  %1811 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1732, float %1733, float %1734, float %1735, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1464, i32 %1465) #2, !dbg !46
  %1812 = extractvalue { float, float, float, float } %1811, 0, !dbg !46
  %1813 = extractvalue { float, float, float, float } %1811, 1, !dbg !46
  %1814 = extractvalue { float, float, float, float } %1811, 2, !dbg !46
  %1815 = extractvalue { float, float, float, float } %1811, 3, !dbg !46
  %1816 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1737, float %1738, float %1739, float %1740, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1474, i32 %1475) #2, !dbg !46
  %1817 = extractvalue { float, float, float, float } %1816, 0, !dbg !46
  %1818 = extractvalue { float, float, float, float } %1816, 1, !dbg !46
  %1819 = extractvalue { float, float, float, float } %1816, 2, !dbg !46
  %1820 = extractvalue { float, float, float, float } %1816, 3, !dbg !46
  %1821 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1742, float %1743, float %1744, float %1745, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1484, i32 %1485) #2, !dbg !46
  %1822 = extractvalue { float, float, float, float } %1821, 0, !dbg !46
  %1823 = extractvalue { float, float, float, float } %1821, 1, !dbg !46
  %1824 = extractvalue { float, float, float, float } %1821, 2, !dbg !46
  %1825 = extractvalue { float, float, float, float } %1821, 3, !dbg !46
  %1826 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1747, float %1748, float %1749, float %1750, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1494, i32 %1495) #2, !dbg !46
  %1827 = extractvalue { float, float, float, float } %1826, 0, !dbg !46
  %1828 = extractvalue { float, float, float, float } %1826, 1, !dbg !46
  %1829 = extractvalue { float, float, float, float } %1826, 2, !dbg !46
  %1830 = extractvalue { float, float, float, float } %1826, 3, !dbg !46
  %1831 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1752, float %1753, float %1754, float %1755, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1504, i32 %1505) #2, !dbg !46
  %1832 = extractvalue { float, float, float, float } %1831, 0, !dbg !46
  %1833 = extractvalue { float, float, float, float } %1831, 1, !dbg !46
  %1834 = extractvalue { float, float, float, float } %1831, 2, !dbg !46
  %1835 = extractvalue { float, float, float, float } %1831, 3, !dbg !46
  %1836 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1757, float %1758, float %1759, float %1760, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1514, i32 %1515) #2, !dbg !46
  %1837 = extractvalue { float, float, float, float } %1836, 0, !dbg !46
  %1838 = extractvalue { float, float, float, float } %1836, 1, !dbg !46
  %1839 = extractvalue { float, float, float, float } %1836, 2, !dbg !46
  %1840 = extractvalue { float, float, float, float } %1836, 3, !dbg !46
  %1841 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1762, float %1763, float %1764, float %1765, i32 %1442, i32 %1443, i32 %1444, i32 %1445, i32 %1524, i32 %1525) #2, !dbg !46
  %1842 = extractvalue { float, float, float, float } %1841, 0, !dbg !46
  %1843 = extractvalue { float, float, float, float } %1841, 1, !dbg !46
  %1844 = extractvalue { float, float, float, float } %1841, 2, !dbg !46
  %1845 = extractvalue { float, float, float, float } %1841, 3, !dbg !46
  %1846 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %1388, !dbg !36
  %1847 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %614, !dbg !36
  %1848 = ptrtoint ptr addrspace(3) %1847 to i32, !dbg !36
  %1849 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1848) #2, !dbg !36
  %1850 = extractvalue { i32, i32, i32, i32 } %1849, 0, !dbg !36
  %1851 = extractvalue { i32, i32, i32, i32 } %1849, 1, !dbg !36
  %1852 = extractvalue { i32, i32, i32, i32 } %1849, 2, !dbg !36
  %1853 = extractvalue { i32, i32, i32, i32 } %1849, 3, !dbg !36
  %1854 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %617, !dbg !36
  %1855 = ptrtoint ptr addrspace(3) %1854 to i32, !dbg !36
  %1856 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1855) #2, !dbg !36
  %1857 = extractvalue { i32, i32, i32, i32 } %1856, 0, !dbg !36
  %1858 = extractvalue { i32, i32, i32, i32 } %1856, 1, !dbg !36
  %1859 = extractvalue { i32, i32, i32, i32 } %1856, 2, !dbg !36
  %1860 = extractvalue { i32, i32, i32, i32 } %1856, 3, !dbg !36
  %1861 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %620, !dbg !36
  %1862 = ptrtoint ptr addrspace(3) %1861 to i32, !dbg !36
  %1863 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1862) #2, !dbg !36
  %1864 = extractvalue { i32, i32, i32, i32 } %1863, 0, !dbg !36
  %1865 = extractvalue { i32, i32, i32, i32 } %1863, 1, !dbg !36
  %1866 = extractvalue { i32, i32, i32, i32 } %1863, 2, !dbg !36
  %1867 = extractvalue { i32, i32, i32, i32 } %1863, 3, !dbg !36
  %1868 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %623, !dbg !36
  %1869 = ptrtoint ptr addrspace(3) %1868 to i32, !dbg !36
  %1870 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1869) #2, !dbg !36
  %1871 = extractvalue { i32, i32, i32, i32 } %1870, 0, !dbg !36
  %1872 = extractvalue { i32, i32, i32, i32 } %1870, 1, !dbg !36
  %1873 = extractvalue { i32, i32, i32, i32 } %1870, 2, !dbg !36
  %1874 = extractvalue { i32, i32, i32, i32 } %1870, 3, !dbg !36
  %1875 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %626, !dbg !36
  %1876 = ptrtoint ptr addrspace(3) %1875 to i32, !dbg !36
  %1877 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1876) #2, !dbg !36
  %1878 = extractvalue { i32, i32, i32, i32 } %1877, 0, !dbg !36
  %1879 = extractvalue { i32, i32, i32, i32 } %1877, 1, !dbg !36
  %1880 = extractvalue { i32, i32, i32, i32 } %1877, 2, !dbg !36
  %1881 = extractvalue { i32, i32, i32, i32 } %1877, 3, !dbg !36
  %1882 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %629, !dbg !36
  %1883 = ptrtoint ptr addrspace(3) %1882 to i32, !dbg !36
  %1884 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1883) #2, !dbg !36
  %1885 = extractvalue { i32, i32, i32, i32 } %1884, 0, !dbg !36
  %1886 = extractvalue { i32, i32, i32, i32 } %1884, 1, !dbg !36
  %1887 = extractvalue { i32, i32, i32, i32 } %1884, 2, !dbg !36
  %1888 = extractvalue { i32, i32, i32, i32 } %1884, 3, !dbg !36
  %1889 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %632, !dbg !36
  %1890 = ptrtoint ptr addrspace(3) %1889 to i32, !dbg !36
  %1891 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1890) #2, !dbg !36
  %1892 = extractvalue { i32, i32, i32, i32 } %1891, 0, !dbg !36
  %1893 = extractvalue { i32, i32, i32, i32 } %1891, 1, !dbg !36
  %1894 = extractvalue { i32, i32, i32, i32 } %1891, 2, !dbg !36
  %1895 = extractvalue { i32, i32, i32, i32 } %1891, 3, !dbg !36
  %1896 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1846, i32 %635, !dbg !36
  %1897 = ptrtoint ptr addrspace(3) %1896 to i32, !dbg !36
  %1898 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1897) #2, !dbg !36
  %1899 = extractvalue { i32, i32, i32, i32 } %1898, 0, !dbg !36
  %1900 = extractvalue { i32, i32, i32, i32 } %1898, 1, !dbg !36
  %1901 = extractvalue { i32, i32, i32, i32 } %1898, 2, !dbg !36
  %1902 = extractvalue { i32, i32, i32, i32 } %1898, 3, !dbg !36
  %1903 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %815) #2, !dbg !45
  %1904 = extractvalue { i32, i32, i32, i32 } %1903, 0, !dbg !45
  %1905 = extractvalue { i32, i32, i32, i32 } %1903, 1, !dbg !45
  %1906 = extractvalue { i32, i32, i32, i32 } %1903, 2, !dbg !45
  %1907 = extractvalue { i32, i32, i32, i32 } %1903, 3, !dbg !45
  %1908 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %817) #2, !dbg !45
  %1909 = extractvalue { i32, i32, i32, i32 } %1908, 0, !dbg !45
  %1910 = extractvalue { i32, i32, i32, i32 } %1908, 1, !dbg !45
  %1911 = extractvalue { i32, i32, i32, i32 } %1908, 2, !dbg !45
  %1912 = extractvalue { i32, i32, i32, i32 } %1908, 3, !dbg !45
  %1913 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %819) #2, !dbg !45
  %1914 = extractvalue { i32, i32, i32, i32 } %1913, 0, !dbg !45
  %1915 = extractvalue { i32, i32, i32, i32 } %1913, 1, !dbg !45
  %1916 = extractvalue { i32, i32, i32, i32 } %1913, 2, !dbg !45
  %1917 = extractvalue { i32, i32, i32, i32 } %1913, 3, !dbg !45
  %1918 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %821) #2, !dbg !45
  %1919 = extractvalue { i32, i32, i32, i32 } %1918, 0, !dbg !45
  %1920 = extractvalue { i32, i32, i32, i32 } %1918, 1, !dbg !45
  %1921 = extractvalue { i32, i32, i32, i32 } %1918, 2, !dbg !45
  %1922 = extractvalue { i32, i32, i32, i32 } %1918, 3, !dbg !45
  %1923 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %823) #2, !dbg !45
  %1924 = extractvalue { i32, i32, i32, i32 } %1923, 0, !dbg !45
  %1925 = extractvalue { i32, i32, i32, i32 } %1923, 1, !dbg !45
  %1926 = extractvalue { i32, i32, i32, i32 } %1923, 2, !dbg !45
  %1927 = extractvalue { i32, i32, i32, i32 } %1923, 3, !dbg !45
  %1928 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %825) #2, !dbg !45
  %1929 = extractvalue { i32, i32, i32, i32 } %1928, 0, !dbg !45
  %1930 = extractvalue { i32, i32, i32, i32 } %1928, 1, !dbg !45
  %1931 = extractvalue { i32, i32, i32, i32 } %1928, 2, !dbg !45
  %1932 = extractvalue { i32, i32, i32, i32 } %1928, 3, !dbg !45
  %1933 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %827) #2, !dbg !45
  %1934 = extractvalue { i32, i32, i32, i32 } %1933, 0, !dbg !45
  %1935 = extractvalue { i32, i32, i32, i32 } %1933, 1, !dbg !45
  %1936 = extractvalue { i32, i32, i32, i32 } %1933, 2, !dbg !45
  %1937 = extractvalue { i32, i32, i32, i32 } %1933, 3, !dbg !45
  %1938 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %829) #2, !dbg !45
  %1939 = extractvalue { i32, i32, i32, i32 } %1938, 0, !dbg !45
  %1940 = extractvalue { i32, i32, i32, i32 } %1938, 1, !dbg !45
  %1941 = extractvalue { i32, i32, i32, i32 } %1938, 2, !dbg !45
  %1942 = extractvalue { i32, i32, i32, i32 } %1938, 3, !dbg !45
  %1943 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %831) #2, !dbg !45
  %1944 = extractvalue { i32, i32, i32, i32 } %1943, 0, !dbg !45
  %1945 = extractvalue { i32, i32, i32, i32 } %1943, 1, !dbg !45
  %1946 = extractvalue { i32, i32, i32, i32 } %1943, 2, !dbg !45
  %1947 = extractvalue { i32, i32, i32, i32 } %1943, 3, !dbg !45
  %1948 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %833) #2, !dbg !45
  %1949 = extractvalue { i32, i32, i32, i32 } %1948, 0, !dbg !45
  %1950 = extractvalue { i32, i32, i32, i32 } %1948, 1, !dbg !45
  %1951 = extractvalue { i32, i32, i32, i32 } %1948, 2, !dbg !45
  %1952 = extractvalue { i32, i32, i32, i32 } %1948, 3, !dbg !45
  %1953 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %835) #2, !dbg !45
  %1954 = extractvalue { i32, i32, i32, i32 } %1953, 0, !dbg !45
  %1955 = extractvalue { i32, i32, i32, i32 } %1953, 1, !dbg !45
  %1956 = extractvalue { i32, i32, i32, i32 } %1953, 2, !dbg !45
  %1957 = extractvalue { i32, i32, i32, i32 } %1953, 3, !dbg !45
  %1958 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %837) #2, !dbg !45
  %1959 = extractvalue { i32, i32, i32, i32 } %1958, 0, !dbg !45
  %1960 = extractvalue { i32, i32, i32, i32 } %1958, 1, !dbg !45
  %1961 = extractvalue { i32, i32, i32, i32 } %1958, 2, !dbg !45
  %1962 = extractvalue { i32, i32, i32, i32 } %1958, 3, !dbg !45
  %1963 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %839) #2, !dbg !45
  %1964 = extractvalue { i32, i32, i32, i32 } %1963, 0, !dbg !45
  %1965 = extractvalue { i32, i32, i32, i32 } %1963, 1, !dbg !45
  %1966 = extractvalue { i32, i32, i32, i32 } %1963, 2, !dbg !45
  %1967 = extractvalue { i32, i32, i32, i32 } %1963, 3, !dbg !45
  %1968 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %841) #2, !dbg !45
  %1969 = extractvalue { i32, i32, i32, i32 } %1968, 0, !dbg !45
  %1970 = extractvalue { i32, i32, i32, i32 } %1968, 1, !dbg !45
  %1971 = extractvalue { i32, i32, i32, i32 } %1968, 2, !dbg !45
  %1972 = extractvalue { i32, i32, i32, i32 } %1968, 3, !dbg !45
  %1973 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %843) #2, !dbg !45
  %1974 = extractvalue { i32, i32, i32, i32 } %1973, 0, !dbg !45
  %1975 = extractvalue { i32, i32, i32, i32 } %1973, 1, !dbg !45
  %1976 = extractvalue { i32, i32, i32, i32 } %1973, 2, !dbg !45
  %1977 = extractvalue { i32, i32, i32, i32 } %1973, 3, !dbg !45
  %1978 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %845) #2, !dbg !45
  %1979 = extractvalue { i32, i32, i32, i32 } %1978, 0, !dbg !45
  %1980 = extractvalue { i32, i32, i32, i32 } %1978, 1, !dbg !45
  %1981 = extractvalue { i32, i32, i32, i32 } %1978, 2, !dbg !45
  %1982 = extractvalue { i32, i32, i32, i32 } %1978, 3, !dbg !45
  %1983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1767, float %1768, float %1769, float %1770, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1904, i32 %1905) #2, !dbg !47
  %1984 = extractvalue { float, float, float, float } %1983, 0, !dbg !47
  %1985 = extractvalue { float, float, float, float } %1983, 1, !dbg !47
  %1986 = extractvalue { float, float, float, float } %1983, 2, !dbg !47
  %1987 = extractvalue { float, float, float, float } %1983, 3, !dbg !47
  %1988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1772, float %1773, float %1774, float %1775, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1914, i32 %1915) #2, !dbg !47
  %1989 = extractvalue { float, float, float, float } %1988, 0, !dbg !47
  %1990 = extractvalue { float, float, float, float } %1988, 1, !dbg !47
  %1991 = extractvalue { float, float, float, float } %1988, 2, !dbg !47
  %1992 = extractvalue { float, float, float, float } %1988, 3, !dbg !47
  %1993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1777, float %1778, float %1779, float %1780, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1924, i32 %1925) #2, !dbg !47
  %1994 = extractvalue { float, float, float, float } %1993, 0, !dbg !47
  %1995 = extractvalue { float, float, float, float } %1993, 1, !dbg !47
  %1996 = extractvalue { float, float, float, float } %1993, 2, !dbg !47
  %1997 = extractvalue { float, float, float, float } %1993, 3, !dbg !47
  %1998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1782, float %1783, float %1784, float %1785, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1934, i32 %1935) #2, !dbg !47
  %1999 = extractvalue { float, float, float, float } %1998, 0, !dbg !47
  %2000 = extractvalue { float, float, float, float } %1998, 1, !dbg !47
  %2001 = extractvalue { float, float, float, float } %1998, 2, !dbg !47
  %2002 = extractvalue { float, float, float, float } %1998, 3, !dbg !47
  %2003 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1787, float %1788, float %1789, float %1790, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1944, i32 %1945) #2, !dbg !47
  %2004 = extractvalue { float, float, float, float } %2003, 0, !dbg !47
  %2005 = extractvalue { float, float, float, float } %2003, 1, !dbg !47
  %2006 = extractvalue { float, float, float, float } %2003, 2, !dbg !47
  %2007 = extractvalue { float, float, float, float } %2003, 3, !dbg !47
  %2008 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1792, float %1793, float %1794, float %1795, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1954, i32 %1955) #2, !dbg !47
  %2009 = extractvalue { float, float, float, float } %2008, 0, !dbg !47
  %2010 = extractvalue { float, float, float, float } %2008, 1, !dbg !47
  %2011 = extractvalue { float, float, float, float } %2008, 2, !dbg !47
  %2012 = extractvalue { float, float, float, float } %2008, 3, !dbg !47
  %2013 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1797, float %1798, float %1799, float %1800, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1964, i32 %1965) #2, !dbg !47
  %2014 = extractvalue { float, float, float, float } %2013, 0, !dbg !47
  %2015 = extractvalue { float, float, float, float } %2013, 1, !dbg !47
  %2016 = extractvalue { float, float, float, float } %2013, 2, !dbg !47
  %2017 = extractvalue { float, float, float, float } %2013, 3, !dbg !47
  %2018 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1802, float %1803, float %1804, float %1805, i32 %1850, i32 %1851, i32 %1852, i32 %1853, i32 %1974, i32 %1975) #2, !dbg !47
  %2019 = extractvalue { float, float, float, float } %2018, 0, !dbg !47
  %2020 = extractvalue { float, float, float, float } %2018, 1, !dbg !47
  %2021 = extractvalue { float, float, float, float } %2018, 2, !dbg !47
  %2022 = extractvalue { float, float, float, float } %2018, 3, !dbg !47
  %2023 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1807, float %1808, float %1809, float %1810, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1904, i32 %1905) #2, !dbg !47
  %2024 = extractvalue { float, float, float, float } %2023, 0, !dbg !47
  %2025 = extractvalue { float, float, float, float } %2023, 1, !dbg !47
  %2026 = extractvalue { float, float, float, float } %2023, 2, !dbg !47
  %2027 = extractvalue { float, float, float, float } %2023, 3, !dbg !47
  %2028 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1812, float %1813, float %1814, float %1815, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1914, i32 %1915) #2, !dbg !47
  %2029 = extractvalue { float, float, float, float } %2028, 0, !dbg !47
  %2030 = extractvalue { float, float, float, float } %2028, 1, !dbg !47
  %2031 = extractvalue { float, float, float, float } %2028, 2, !dbg !47
  %2032 = extractvalue { float, float, float, float } %2028, 3, !dbg !47
  %2033 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1817, float %1818, float %1819, float %1820, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1924, i32 %1925) #2, !dbg !47
  %2034 = extractvalue { float, float, float, float } %2033, 0, !dbg !47
  %2035 = extractvalue { float, float, float, float } %2033, 1, !dbg !47
  %2036 = extractvalue { float, float, float, float } %2033, 2, !dbg !47
  %2037 = extractvalue { float, float, float, float } %2033, 3, !dbg !47
  %2038 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1822, float %1823, float %1824, float %1825, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1934, i32 %1935) #2, !dbg !47
  %2039 = extractvalue { float, float, float, float } %2038, 0, !dbg !47
  %2040 = extractvalue { float, float, float, float } %2038, 1, !dbg !47
  %2041 = extractvalue { float, float, float, float } %2038, 2, !dbg !47
  %2042 = extractvalue { float, float, float, float } %2038, 3, !dbg !47
  %2043 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1827, float %1828, float %1829, float %1830, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1944, i32 %1945) #2, !dbg !47
  %2044 = extractvalue { float, float, float, float } %2043, 0, !dbg !47
  %2045 = extractvalue { float, float, float, float } %2043, 1, !dbg !47
  %2046 = extractvalue { float, float, float, float } %2043, 2, !dbg !47
  %2047 = extractvalue { float, float, float, float } %2043, 3, !dbg !47
  %2048 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1832, float %1833, float %1834, float %1835, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1954, i32 %1955) #2, !dbg !47
  %2049 = extractvalue { float, float, float, float } %2048, 0, !dbg !47
  %2050 = extractvalue { float, float, float, float } %2048, 1, !dbg !47
  %2051 = extractvalue { float, float, float, float } %2048, 2, !dbg !47
  %2052 = extractvalue { float, float, float, float } %2048, 3, !dbg !47
  %2053 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1837, float %1838, float %1839, float %1840, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1964, i32 %1965) #2, !dbg !47
  %2054 = extractvalue { float, float, float, float } %2053, 0, !dbg !47
  %2055 = extractvalue { float, float, float, float } %2053, 1, !dbg !47
  %2056 = extractvalue { float, float, float, float } %2053, 2, !dbg !47
  %2057 = extractvalue { float, float, float, float } %2053, 3, !dbg !47
  %2058 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1842, float %1843, float %1844, float %1845, i32 %1878, i32 %1879, i32 %1880, i32 %1881, i32 %1974, i32 %1975) #2, !dbg !47
  %2059 = extractvalue { float, float, float, float } %2058, 0, !dbg !47
  %2060 = extractvalue { float, float, float, float } %2058, 1, !dbg !47
  %2061 = extractvalue { float, float, float, float } %2058, 2, !dbg !47
  %2062 = extractvalue { float, float, float, float } %2058, 3, !dbg !47
  %2063 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1984, float %1985, float %1986, float %1987, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1906, i32 %1907) #2, !dbg !47
  %2064 = extractvalue { float, float, float, float } %2063, 0, !dbg !47
  %2065 = extractvalue { float, float, float, float } %2063, 1, !dbg !47
  %2066 = extractvalue { float, float, float, float } %2063, 2, !dbg !47
  %2067 = extractvalue { float, float, float, float } %2063, 3, !dbg !47
  %2068 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1989, float %1990, float %1991, float %1992, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1916, i32 %1917) #2, !dbg !47
  %2069 = extractvalue { float, float, float, float } %2068, 0, !dbg !47
  %2070 = extractvalue { float, float, float, float } %2068, 1, !dbg !47
  %2071 = extractvalue { float, float, float, float } %2068, 2, !dbg !47
  %2072 = extractvalue { float, float, float, float } %2068, 3, !dbg !47
  %2073 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1994, float %1995, float %1996, float %1997, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1926, i32 %1927) #2, !dbg !47
  %2074 = extractvalue { float, float, float, float } %2073, 0, !dbg !47
  %2075 = extractvalue { float, float, float, float } %2073, 1, !dbg !47
  %2076 = extractvalue { float, float, float, float } %2073, 2, !dbg !47
  %2077 = extractvalue { float, float, float, float } %2073, 3, !dbg !47
  %2078 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1999, float %2000, float %2001, float %2002, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1936, i32 %1937) #2, !dbg !47
  %2079 = extractvalue { float, float, float, float } %2078, 0, !dbg !47
  %2080 = extractvalue { float, float, float, float } %2078, 1, !dbg !47
  %2081 = extractvalue { float, float, float, float } %2078, 2, !dbg !47
  %2082 = extractvalue { float, float, float, float } %2078, 3, !dbg !47
  %2083 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2004, float %2005, float %2006, float %2007, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1946, i32 %1947) #2, !dbg !47
  %2084 = extractvalue { float, float, float, float } %2083, 0, !dbg !47
  %2085 = extractvalue { float, float, float, float } %2083, 1, !dbg !47
  %2086 = extractvalue { float, float, float, float } %2083, 2, !dbg !47
  %2087 = extractvalue { float, float, float, float } %2083, 3, !dbg !47
  %2088 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2009, float %2010, float %2011, float %2012, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1956, i32 %1957) #2, !dbg !47
  %2089 = extractvalue { float, float, float, float } %2088, 0, !dbg !47
  %2090 = extractvalue { float, float, float, float } %2088, 1, !dbg !47
  %2091 = extractvalue { float, float, float, float } %2088, 2, !dbg !47
  %2092 = extractvalue { float, float, float, float } %2088, 3, !dbg !47
  %2093 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2014, float %2015, float %2016, float %2017, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1966, i32 %1967) #2, !dbg !47
  %2094 = extractvalue { float, float, float, float } %2093, 0, !dbg !47
  %2095 = extractvalue { float, float, float, float } %2093, 1, !dbg !47
  %2096 = extractvalue { float, float, float, float } %2093, 2, !dbg !47
  %2097 = extractvalue { float, float, float, float } %2093, 3, !dbg !47
  %2098 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2019, float %2020, float %2021, float %2022, i32 %1857, i32 %1858, i32 %1859, i32 %1860, i32 %1976, i32 %1977) #2, !dbg !47
  %2099 = extractvalue { float, float, float, float } %2098, 0, !dbg !47
  %2100 = extractvalue { float, float, float, float } %2098, 1, !dbg !47
  %2101 = extractvalue { float, float, float, float } %2098, 2, !dbg !47
  %2102 = extractvalue { float, float, float, float } %2098, 3, !dbg !47
  %2103 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2024, float %2025, float %2026, float %2027, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1906, i32 %1907) #2, !dbg !47
  %2104 = extractvalue { float, float, float, float } %2103, 0, !dbg !47
  %2105 = extractvalue { float, float, float, float } %2103, 1, !dbg !47
  %2106 = extractvalue { float, float, float, float } %2103, 2, !dbg !47
  %2107 = extractvalue { float, float, float, float } %2103, 3, !dbg !47
  %2108 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2029, float %2030, float %2031, float %2032, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1916, i32 %1917) #2, !dbg !47
  %2109 = extractvalue { float, float, float, float } %2108, 0, !dbg !47
  %2110 = extractvalue { float, float, float, float } %2108, 1, !dbg !47
  %2111 = extractvalue { float, float, float, float } %2108, 2, !dbg !47
  %2112 = extractvalue { float, float, float, float } %2108, 3, !dbg !47
  %2113 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2034, float %2035, float %2036, float %2037, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1926, i32 %1927) #2, !dbg !47
  %2114 = extractvalue { float, float, float, float } %2113, 0, !dbg !47
  %2115 = extractvalue { float, float, float, float } %2113, 1, !dbg !47
  %2116 = extractvalue { float, float, float, float } %2113, 2, !dbg !47
  %2117 = extractvalue { float, float, float, float } %2113, 3, !dbg !47
  %2118 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2039, float %2040, float %2041, float %2042, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1936, i32 %1937) #2, !dbg !47
  %2119 = extractvalue { float, float, float, float } %2118, 0, !dbg !47
  %2120 = extractvalue { float, float, float, float } %2118, 1, !dbg !47
  %2121 = extractvalue { float, float, float, float } %2118, 2, !dbg !47
  %2122 = extractvalue { float, float, float, float } %2118, 3, !dbg !47
  %2123 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2044, float %2045, float %2046, float %2047, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1946, i32 %1947) #2, !dbg !47
  %2124 = extractvalue { float, float, float, float } %2123, 0, !dbg !47
  %2125 = extractvalue { float, float, float, float } %2123, 1, !dbg !47
  %2126 = extractvalue { float, float, float, float } %2123, 2, !dbg !47
  %2127 = extractvalue { float, float, float, float } %2123, 3, !dbg !47
  %2128 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2049, float %2050, float %2051, float %2052, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1956, i32 %1957) #2, !dbg !47
  %2129 = extractvalue { float, float, float, float } %2128, 0, !dbg !47
  %2130 = extractvalue { float, float, float, float } %2128, 1, !dbg !47
  %2131 = extractvalue { float, float, float, float } %2128, 2, !dbg !47
  %2132 = extractvalue { float, float, float, float } %2128, 3, !dbg !47
  %2133 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2054, float %2055, float %2056, float %2057, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1966, i32 %1967) #2, !dbg !47
  %2134 = extractvalue { float, float, float, float } %2133, 0, !dbg !47
  %2135 = extractvalue { float, float, float, float } %2133, 1, !dbg !47
  %2136 = extractvalue { float, float, float, float } %2133, 2, !dbg !47
  %2137 = extractvalue { float, float, float, float } %2133, 3, !dbg !47
  %2138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2059, float %2060, float %2061, float %2062, i32 %1885, i32 %1886, i32 %1887, i32 %1888, i32 %1976, i32 %1977) #2, !dbg !47
  %2139 = extractvalue { float, float, float, float } %2138, 0, !dbg !47
  %2140 = extractvalue { float, float, float, float } %2138, 1, !dbg !47
  %2141 = extractvalue { float, float, float, float } %2138, 2, !dbg !47
  %2142 = extractvalue { float, float, float, float } %2138, 3, !dbg !47
  %2143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2064, float %2065, float %2066, float %2067, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1909, i32 %1910) #2, !dbg !47
  %2144 = extractvalue { float, float, float, float } %2143, 0, !dbg !47
  %2145 = extractvalue { float, float, float, float } %2143, 1, !dbg !47
  %2146 = extractvalue { float, float, float, float } %2143, 2, !dbg !47
  %2147 = extractvalue { float, float, float, float } %2143, 3, !dbg !47
  %2148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2069, float %2070, float %2071, float %2072, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1919, i32 %1920) #2, !dbg !47
  %2149 = extractvalue { float, float, float, float } %2148, 0, !dbg !47
  %2150 = extractvalue { float, float, float, float } %2148, 1, !dbg !47
  %2151 = extractvalue { float, float, float, float } %2148, 2, !dbg !47
  %2152 = extractvalue { float, float, float, float } %2148, 3, !dbg !47
  %2153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2074, float %2075, float %2076, float %2077, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1929, i32 %1930) #2, !dbg !47
  %2154 = extractvalue { float, float, float, float } %2153, 0, !dbg !47
  %2155 = extractvalue { float, float, float, float } %2153, 1, !dbg !47
  %2156 = extractvalue { float, float, float, float } %2153, 2, !dbg !47
  %2157 = extractvalue { float, float, float, float } %2153, 3, !dbg !47
  %2158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2079, float %2080, float %2081, float %2082, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1939, i32 %1940) #2, !dbg !47
  %2159 = extractvalue { float, float, float, float } %2158, 0, !dbg !47
  %2160 = extractvalue { float, float, float, float } %2158, 1, !dbg !47
  %2161 = extractvalue { float, float, float, float } %2158, 2, !dbg !47
  %2162 = extractvalue { float, float, float, float } %2158, 3, !dbg !47
  %2163 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2084, float %2085, float %2086, float %2087, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1949, i32 %1950) #2, !dbg !47
  %2164 = extractvalue { float, float, float, float } %2163, 0, !dbg !47
  %2165 = extractvalue { float, float, float, float } %2163, 1, !dbg !47
  %2166 = extractvalue { float, float, float, float } %2163, 2, !dbg !47
  %2167 = extractvalue { float, float, float, float } %2163, 3, !dbg !47
  %2168 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2089, float %2090, float %2091, float %2092, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1959, i32 %1960) #2, !dbg !47
  %2169 = extractvalue { float, float, float, float } %2168, 0, !dbg !47
  %2170 = extractvalue { float, float, float, float } %2168, 1, !dbg !47
  %2171 = extractvalue { float, float, float, float } %2168, 2, !dbg !47
  %2172 = extractvalue { float, float, float, float } %2168, 3, !dbg !47
  %2173 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2094, float %2095, float %2096, float %2097, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1969, i32 %1970) #2, !dbg !47
  %2174 = extractvalue { float, float, float, float } %2173, 0, !dbg !47
  %2175 = extractvalue { float, float, float, float } %2173, 1, !dbg !47
  %2176 = extractvalue { float, float, float, float } %2173, 2, !dbg !47
  %2177 = extractvalue { float, float, float, float } %2173, 3, !dbg !47
  %2178 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2099, float %2100, float %2101, float %2102, i32 %1864, i32 %1865, i32 %1866, i32 %1867, i32 %1979, i32 %1980) #2, !dbg !47
  %2179 = extractvalue { float, float, float, float } %2178, 0, !dbg !47
  %2180 = extractvalue { float, float, float, float } %2178, 1, !dbg !47
  %2181 = extractvalue { float, float, float, float } %2178, 2, !dbg !47
  %2182 = extractvalue { float, float, float, float } %2178, 3, !dbg !47
  %2183 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2104, float %2105, float %2106, float %2107, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1909, i32 %1910) #2, !dbg !47
  %2184 = extractvalue { float, float, float, float } %2183, 0, !dbg !47
  %2185 = extractvalue { float, float, float, float } %2183, 1, !dbg !47
  %2186 = extractvalue { float, float, float, float } %2183, 2, !dbg !47
  %2187 = extractvalue { float, float, float, float } %2183, 3, !dbg !47
  %2188 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2109, float %2110, float %2111, float %2112, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1919, i32 %1920) #2, !dbg !47
  %2189 = extractvalue { float, float, float, float } %2188, 0, !dbg !47
  %2190 = extractvalue { float, float, float, float } %2188, 1, !dbg !47
  %2191 = extractvalue { float, float, float, float } %2188, 2, !dbg !47
  %2192 = extractvalue { float, float, float, float } %2188, 3, !dbg !47
  %2193 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2114, float %2115, float %2116, float %2117, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1929, i32 %1930) #2, !dbg !47
  %2194 = extractvalue { float, float, float, float } %2193, 0, !dbg !47
  %2195 = extractvalue { float, float, float, float } %2193, 1, !dbg !47
  %2196 = extractvalue { float, float, float, float } %2193, 2, !dbg !47
  %2197 = extractvalue { float, float, float, float } %2193, 3, !dbg !47
  %2198 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2119, float %2120, float %2121, float %2122, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1939, i32 %1940) #2, !dbg !47
  %2199 = extractvalue { float, float, float, float } %2198, 0, !dbg !47
  %2200 = extractvalue { float, float, float, float } %2198, 1, !dbg !47
  %2201 = extractvalue { float, float, float, float } %2198, 2, !dbg !47
  %2202 = extractvalue { float, float, float, float } %2198, 3, !dbg !47
  %2203 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2124, float %2125, float %2126, float %2127, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1949, i32 %1950) #2, !dbg !47
  %2204 = extractvalue { float, float, float, float } %2203, 0, !dbg !47
  %2205 = extractvalue { float, float, float, float } %2203, 1, !dbg !47
  %2206 = extractvalue { float, float, float, float } %2203, 2, !dbg !47
  %2207 = extractvalue { float, float, float, float } %2203, 3, !dbg !47
  %2208 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2129, float %2130, float %2131, float %2132, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1959, i32 %1960) #2, !dbg !47
  %2209 = extractvalue { float, float, float, float } %2208, 0, !dbg !47
  %2210 = extractvalue { float, float, float, float } %2208, 1, !dbg !47
  %2211 = extractvalue { float, float, float, float } %2208, 2, !dbg !47
  %2212 = extractvalue { float, float, float, float } %2208, 3, !dbg !47
  %2213 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2134, float %2135, float %2136, float %2137, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1969, i32 %1970) #2, !dbg !47
  %2214 = extractvalue { float, float, float, float } %2213, 0, !dbg !47
  %2215 = extractvalue { float, float, float, float } %2213, 1, !dbg !47
  %2216 = extractvalue { float, float, float, float } %2213, 2, !dbg !47
  %2217 = extractvalue { float, float, float, float } %2213, 3, !dbg !47
  %2218 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2139, float %2140, float %2141, float %2142, i32 %1892, i32 %1893, i32 %1894, i32 %1895, i32 %1979, i32 %1980) #2, !dbg !47
  %2219 = extractvalue { float, float, float, float } %2218, 0, !dbg !47
  %2220 = extractvalue { float, float, float, float } %2218, 1, !dbg !47
  %2221 = extractvalue { float, float, float, float } %2218, 2, !dbg !47
  %2222 = extractvalue { float, float, float, float } %2218, 3, !dbg !47
  %2223 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2144, float %2145, float %2146, float %2147, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1911, i32 %1912) #2, !dbg !47
  %2224 = extractvalue { float, float, float, float } %2223, 0, !dbg !47
  %2225 = extractvalue { float, float, float, float } %2223, 1, !dbg !47
  %2226 = extractvalue { float, float, float, float } %2223, 2, !dbg !47
  %2227 = extractvalue { float, float, float, float } %2223, 3, !dbg !47
  %2228 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2149, float %2150, float %2151, float %2152, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1921, i32 %1922) #2, !dbg !47
  %2229 = extractvalue { float, float, float, float } %2228, 0, !dbg !47
  %2230 = extractvalue { float, float, float, float } %2228, 1, !dbg !47
  %2231 = extractvalue { float, float, float, float } %2228, 2, !dbg !47
  %2232 = extractvalue { float, float, float, float } %2228, 3, !dbg !47
  %2233 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2154, float %2155, float %2156, float %2157, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1931, i32 %1932) #2, !dbg !47
  %2234 = extractvalue { float, float, float, float } %2233, 0, !dbg !47
  %2235 = extractvalue { float, float, float, float } %2233, 1, !dbg !47
  %2236 = extractvalue { float, float, float, float } %2233, 2, !dbg !47
  %2237 = extractvalue { float, float, float, float } %2233, 3, !dbg !47
  %2238 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2159, float %2160, float %2161, float %2162, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1941, i32 %1942) #2, !dbg !47
  %2239 = extractvalue { float, float, float, float } %2238, 0, !dbg !47
  %2240 = extractvalue { float, float, float, float } %2238, 1, !dbg !47
  %2241 = extractvalue { float, float, float, float } %2238, 2, !dbg !47
  %2242 = extractvalue { float, float, float, float } %2238, 3, !dbg !47
  %2243 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2164, float %2165, float %2166, float %2167, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1951, i32 %1952) #2, !dbg !47
  %2244 = extractvalue { float, float, float, float } %2243, 0, !dbg !47
  %2245 = extractvalue { float, float, float, float } %2243, 1, !dbg !47
  %2246 = extractvalue { float, float, float, float } %2243, 2, !dbg !47
  %2247 = extractvalue { float, float, float, float } %2243, 3, !dbg !47
  %2248 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2169, float %2170, float %2171, float %2172, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1961, i32 %1962) #2, !dbg !47
  %2249 = extractvalue { float, float, float, float } %2248, 0, !dbg !47
  %2250 = extractvalue { float, float, float, float } %2248, 1, !dbg !47
  %2251 = extractvalue { float, float, float, float } %2248, 2, !dbg !47
  %2252 = extractvalue { float, float, float, float } %2248, 3, !dbg !47
  %2253 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2174, float %2175, float %2176, float %2177, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1971, i32 %1972) #2, !dbg !47
  %2254 = extractvalue { float, float, float, float } %2253, 0, !dbg !47
  %2255 = extractvalue { float, float, float, float } %2253, 1, !dbg !47
  %2256 = extractvalue { float, float, float, float } %2253, 2, !dbg !47
  %2257 = extractvalue { float, float, float, float } %2253, 3, !dbg !47
  %2258 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2179, float %2180, float %2181, float %2182, i32 %1871, i32 %1872, i32 %1873, i32 %1874, i32 %1981, i32 %1982) #2, !dbg !47
  %2259 = extractvalue { float, float, float, float } %2258, 0, !dbg !47
  %2260 = extractvalue { float, float, float, float } %2258, 1, !dbg !47
  %2261 = extractvalue { float, float, float, float } %2258, 2, !dbg !47
  %2262 = extractvalue { float, float, float, float } %2258, 3, !dbg !47
  %2263 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2184, float %2185, float %2186, float %2187, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1911, i32 %1912) #2, !dbg !47
  %2264 = extractvalue { float, float, float, float } %2263, 0, !dbg !47
  %2265 = extractvalue { float, float, float, float } %2263, 1, !dbg !47
  %2266 = extractvalue { float, float, float, float } %2263, 2, !dbg !47
  %2267 = extractvalue { float, float, float, float } %2263, 3, !dbg !47
  %2268 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2189, float %2190, float %2191, float %2192, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1921, i32 %1922) #2, !dbg !47
  %2269 = extractvalue { float, float, float, float } %2268, 0, !dbg !47
  %2270 = extractvalue { float, float, float, float } %2268, 1, !dbg !47
  %2271 = extractvalue { float, float, float, float } %2268, 2, !dbg !47
  %2272 = extractvalue { float, float, float, float } %2268, 3, !dbg !47
  %2273 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2194, float %2195, float %2196, float %2197, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1931, i32 %1932) #2, !dbg !47
  %2274 = extractvalue { float, float, float, float } %2273, 0, !dbg !47
  %2275 = extractvalue { float, float, float, float } %2273, 1, !dbg !47
  %2276 = extractvalue { float, float, float, float } %2273, 2, !dbg !47
  %2277 = extractvalue { float, float, float, float } %2273, 3, !dbg !47
  %2278 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2199, float %2200, float %2201, float %2202, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1941, i32 %1942) #2, !dbg !47
  %2279 = extractvalue { float, float, float, float } %2278, 0, !dbg !47
  %2280 = extractvalue { float, float, float, float } %2278, 1, !dbg !47
  %2281 = extractvalue { float, float, float, float } %2278, 2, !dbg !47
  %2282 = extractvalue { float, float, float, float } %2278, 3, !dbg !47
  %2283 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2204, float %2205, float %2206, float %2207, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1951, i32 %1952) #2, !dbg !47
  %2284 = extractvalue { float, float, float, float } %2283, 0, !dbg !47
  %2285 = extractvalue { float, float, float, float } %2283, 1, !dbg !47
  %2286 = extractvalue { float, float, float, float } %2283, 2, !dbg !47
  %2287 = extractvalue { float, float, float, float } %2283, 3, !dbg !47
  %2288 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2209, float %2210, float %2211, float %2212, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1961, i32 %1962) #2, !dbg !47
  %2289 = extractvalue { float, float, float, float } %2288, 0, !dbg !47
  %2290 = extractvalue { float, float, float, float } %2288, 1, !dbg !47
  %2291 = extractvalue { float, float, float, float } %2288, 2, !dbg !47
  %2292 = extractvalue { float, float, float, float } %2288, 3, !dbg !47
  %2293 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2214, float %2215, float %2216, float %2217, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1971, i32 %1972) #2, !dbg !47
  %2294 = extractvalue { float, float, float, float } %2293, 0, !dbg !47
  %2295 = extractvalue { float, float, float, float } %2293, 1, !dbg !47
  %2296 = extractvalue { float, float, float, float } %2293, 2, !dbg !47
  %2297 = extractvalue { float, float, float, float } %2293, 3, !dbg !47
  %2298 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2219, float %2220, float %2221, float %2222, i32 %1899, i32 %1900, i32 %1901, i32 %1902, i32 %1981, i32 %1982) #2, !dbg !47
  %2299 = extractvalue { float, float, float, float } %2298, 0, !dbg !47
  %2300 = extractvalue { float, float, float, float } %2298, 1, !dbg !47
  %2301 = extractvalue { float, float, float, float } %2298, 2, !dbg !47
  %2302 = extractvalue { float, float, float, float } %2298, 3, !dbg !47
  %2303 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1388, !dbg !37
  %2304 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %614, !dbg !48
  %2305 = ptrtoint ptr addrspace(3) %2304 to i32, !dbg !48
  %2306 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2305) #2, !dbg !48
  %2307 = extractvalue { i32, i32, i32, i32 } %2306, 0, !dbg !48
  %2308 = bitcast i32 %2307 to <2 x bfloat>, !dbg !48
  %2309 = extractvalue { i32, i32, i32, i32 } %2306, 1, !dbg !48
  %2310 = bitcast i32 %2309 to <2 x bfloat>, !dbg !48
  %2311 = extractvalue { i32, i32, i32, i32 } %2306, 2, !dbg !48
  %2312 = bitcast i32 %2311 to <2 x bfloat>, !dbg !48
  %2313 = extractvalue { i32, i32, i32, i32 } %2306, 3, !dbg !48
  %2314 = bitcast i32 %2313 to <2 x bfloat>, !dbg !48
  %2315 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %617, !dbg !48
  %2316 = ptrtoint ptr addrspace(3) %2315 to i32, !dbg !48
  %2317 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2316) #2, !dbg !48
  %2318 = extractvalue { i32, i32, i32, i32 } %2317, 0, !dbg !48
  %2319 = bitcast i32 %2318 to <2 x bfloat>, !dbg !48
  %2320 = extractvalue { i32, i32, i32, i32 } %2317, 1, !dbg !48
  %2321 = bitcast i32 %2320 to <2 x bfloat>, !dbg !48
  %2322 = extractvalue { i32, i32, i32, i32 } %2317, 2, !dbg !48
  %2323 = bitcast i32 %2322 to <2 x bfloat>, !dbg !48
  %2324 = extractvalue { i32, i32, i32, i32 } %2317, 3, !dbg !48
  %2325 = bitcast i32 %2324 to <2 x bfloat>, !dbg !48
  %2326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %620, !dbg !48
  %2327 = ptrtoint ptr addrspace(3) %2326 to i32, !dbg !48
  %2328 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2327) #2, !dbg !48
  %2329 = extractvalue { i32, i32, i32, i32 } %2328, 0, !dbg !48
  %2330 = bitcast i32 %2329 to <2 x bfloat>, !dbg !48
  %2331 = extractvalue { i32, i32, i32, i32 } %2328, 1, !dbg !48
  %2332 = bitcast i32 %2331 to <2 x bfloat>, !dbg !48
  %2333 = extractvalue { i32, i32, i32, i32 } %2328, 2, !dbg !48
  %2334 = bitcast i32 %2333 to <2 x bfloat>, !dbg !48
  %2335 = extractvalue { i32, i32, i32, i32 } %2328, 3, !dbg !48
  %2336 = bitcast i32 %2335 to <2 x bfloat>, !dbg !48
  %2337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %623, !dbg !48
  %2338 = ptrtoint ptr addrspace(3) %2337 to i32, !dbg !48
  %2339 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2338) #2, !dbg !48
  %2340 = extractvalue { i32, i32, i32, i32 } %2339, 0, !dbg !48
  %2341 = bitcast i32 %2340 to <2 x bfloat>, !dbg !48
  %2342 = extractvalue { i32, i32, i32, i32 } %2339, 1, !dbg !48
  %2343 = bitcast i32 %2342 to <2 x bfloat>, !dbg !48
  %2344 = extractvalue { i32, i32, i32, i32 } %2339, 2, !dbg !48
  %2345 = bitcast i32 %2344 to <2 x bfloat>, !dbg !48
  %2346 = extractvalue { i32, i32, i32, i32 } %2339, 3, !dbg !48
  %2347 = bitcast i32 %2346 to <2 x bfloat>, !dbg !48
  %2348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %626, !dbg !48
  %2349 = ptrtoint ptr addrspace(3) %2348 to i32, !dbg !48
  %2350 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2349) #2, !dbg !48
  %2351 = extractvalue { i32, i32, i32, i32 } %2350, 0, !dbg !48
  %2352 = bitcast i32 %2351 to <2 x bfloat>, !dbg !48
  %2353 = extractvalue { i32, i32, i32, i32 } %2350, 1, !dbg !48
  %2354 = bitcast i32 %2353 to <2 x bfloat>, !dbg !48
  %2355 = extractvalue { i32, i32, i32, i32 } %2350, 2, !dbg !48
  %2356 = bitcast i32 %2355 to <2 x bfloat>, !dbg !48
  %2357 = extractvalue { i32, i32, i32, i32 } %2350, 3, !dbg !48
  %2358 = bitcast i32 %2357 to <2 x bfloat>, !dbg !48
  %2359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %629, !dbg !48
  %2360 = ptrtoint ptr addrspace(3) %2359 to i32, !dbg !48
  %2361 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2360) #2, !dbg !48
  %2362 = extractvalue { i32, i32, i32, i32 } %2361, 0, !dbg !48
  %2363 = bitcast i32 %2362 to <2 x bfloat>, !dbg !48
  %2364 = extractvalue { i32, i32, i32, i32 } %2361, 1, !dbg !48
  %2365 = bitcast i32 %2364 to <2 x bfloat>, !dbg !48
  %2366 = extractvalue { i32, i32, i32, i32 } %2361, 2, !dbg !48
  %2367 = bitcast i32 %2366 to <2 x bfloat>, !dbg !48
  %2368 = extractvalue { i32, i32, i32, i32 } %2361, 3, !dbg !48
  %2369 = bitcast i32 %2368 to <2 x bfloat>, !dbg !48
  %2370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %632, !dbg !48
  %2371 = ptrtoint ptr addrspace(3) %2370 to i32, !dbg !48
  %2372 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2371) #2, !dbg !48
  %2373 = extractvalue { i32, i32, i32, i32 } %2372, 0, !dbg !48
  %2374 = bitcast i32 %2373 to <2 x bfloat>, !dbg !48
  %2375 = extractvalue { i32, i32, i32, i32 } %2372, 1, !dbg !48
  %2376 = bitcast i32 %2375 to <2 x bfloat>, !dbg !48
  %2377 = extractvalue { i32, i32, i32, i32 } %2372, 2, !dbg !48
  %2378 = bitcast i32 %2377 to <2 x bfloat>, !dbg !48
  %2379 = extractvalue { i32, i32, i32, i32 } %2372, 3, !dbg !48
  %2380 = bitcast i32 %2379 to <2 x bfloat>, !dbg !48
  %2381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2303, i32 %635, !dbg !48
  %2382 = ptrtoint ptr addrspace(3) %2381 to i32, !dbg !48
  %2383 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2382) #2, !dbg !48
  %2384 = extractvalue { i32, i32, i32, i32 } %2383, 0, !dbg !48
  %2385 = bitcast i32 %2384 to <2 x bfloat>, !dbg !48
  %2386 = extractvalue { i32, i32, i32, i32 } %2383, 1, !dbg !48
  %2387 = bitcast i32 %2386 to <2 x bfloat>, !dbg !48
  %2388 = extractvalue { i32, i32, i32, i32 } %2383, 2, !dbg !48
  %2389 = bitcast i32 %2388 to <2 x bfloat>, !dbg !48
  %2390 = extractvalue { i32, i32, i32, i32 } %2383, 3, !dbg !48
  %2391 = bitcast i32 %2390 to <2 x bfloat>, !dbg !48
  %2392 = fpext <2 x bfloat> %2308 to <2 x float>, !dbg !48
  %2393 = insertelement <2 x float> poison, float %2224, i64 0, !dbg !48
  %2394 = insertelement <2 x float> %2393, float %2225, i64 1, !dbg !48
  %2395 = fsub <2 x float> %2392, %2394, !dbg !48
  %2396 = fptrunc <2 x float> %2395 to <2 x bfloat>, !dbg !49
  %2397 = fpext <2 x bfloat> %2310 to <2 x float>, !dbg !48
  %2398 = insertelement <2 x float> poison, float %2226, i64 0, !dbg !48
  %2399 = insertelement <2 x float> %2398, float %2227, i64 1, !dbg !48
  %2400 = fsub <2 x float> %2397, %2399, !dbg !48
  %2401 = fptrunc <2 x float> %2400 to <2 x bfloat>, !dbg !49
  %2402 = fpext <2 x bfloat> %2312 to <2 x float>, !dbg !48
  %2403 = insertelement <2 x float> poison, float %2229, i64 0, !dbg !48
  %2404 = insertelement <2 x float> %2403, float %2230, i64 1, !dbg !48
  %2405 = fsub <2 x float> %2402, %2404, !dbg !48
  %2406 = fptrunc <2 x float> %2405 to <2 x bfloat>, !dbg !49
  %2407 = fpext <2 x bfloat> %2314 to <2 x float>, !dbg !48
  %2408 = insertelement <2 x float> poison, float %2231, i64 0, !dbg !48
  %2409 = insertelement <2 x float> %2408, float %2232, i64 1, !dbg !48
  %2410 = fsub <2 x float> %2407, %2409, !dbg !48
  %2411 = fptrunc <2 x float> %2410 to <2 x bfloat>, !dbg !49
  %2412 = fpext <2 x bfloat> %2319 to <2 x float>, !dbg !48
  %2413 = insertelement <2 x float> poison, float %2234, i64 0, !dbg !48
  %2414 = insertelement <2 x float> %2413, float %2235, i64 1, !dbg !48
  %2415 = fsub <2 x float> %2412, %2414, !dbg !48
  %2416 = fptrunc <2 x float> %2415 to <2 x bfloat>, !dbg !49
  %2417 = fpext <2 x bfloat> %2321 to <2 x float>, !dbg !48
  %2418 = insertelement <2 x float> poison, float %2236, i64 0, !dbg !48
  %2419 = insertelement <2 x float> %2418, float %2237, i64 1, !dbg !48
  %2420 = fsub <2 x float> %2417, %2419, !dbg !48
  %2421 = fptrunc <2 x float> %2420 to <2 x bfloat>, !dbg !49
  %2422 = fpext <2 x bfloat> %2323 to <2 x float>, !dbg !48
  %2423 = insertelement <2 x float> poison, float %2239, i64 0, !dbg !48
  %2424 = insertelement <2 x float> %2423, float %2240, i64 1, !dbg !48
  %2425 = fsub <2 x float> %2422, %2424, !dbg !48
  %2426 = fptrunc <2 x float> %2425 to <2 x bfloat>, !dbg !49
  %2427 = fpext <2 x bfloat> %2325 to <2 x float>, !dbg !48
  %2428 = insertelement <2 x float> poison, float %2241, i64 0, !dbg !48
  %2429 = insertelement <2 x float> %2428, float %2242, i64 1, !dbg !48
  %2430 = fsub <2 x float> %2427, %2429, !dbg !48
  %2431 = fptrunc <2 x float> %2430 to <2 x bfloat>, !dbg !49
  %2432 = fpext <2 x bfloat> %2330 to <2 x float>, !dbg !48
  %2433 = insertelement <2 x float> poison, float %2244, i64 0, !dbg !48
  %2434 = insertelement <2 x float> %2433, float %2245, i64 1, !dbg !48
  %2435 = fsub <2 x float> %2432, %2434, !dbg !48
  %2436 = fptrunc <2 x float> %2435 to <2 x bfloat>, !dbg !49
  %2437 = fpext <2 x bfloat> %2332 to <2 x float>, !dbg !48
  %2438 = insertelement <2 x float> poison, float %2246, i64 0, !dbg !48
  %2439 = insertelement <2 x float> %2438, float %2247, i64 1, !dbg !48
  %2440 = fsub <2 x float> %2437, %2439, !dbg !48
  %2441 = fptrunc <2 x float> %2440 to <2 x bfloat>, !dbg !49
  %2442 = fpext <2 x bfloat> %2334 to <2 x float>, !dbg !48
  %2443 = insertelement <2 x float> poison, float %2249, i64 0, !dbg !48
  %2444 = insertelement <2 x float> %2443, float %2250, i64 1, !dbg !48
  %2445 = fsub <2 x float> %2442, %2444, !dbg !48
  %2446 = fptrunc <2 x float> %2445 to <2 x bfloat>, !dbg !49
  %2447 = fpext <2 x bfloat> %2336 to <2 x float>, !dbg !48
  %2448 = insertelement <2 x float> poison, float %2251, i64 0, !dbg !48
  %2449 = insertelement <2 x float> %2448, float %2252, i64 1, !dbg !48
  %2450 = fsub <2 x float> %2447, %2449, !dbg !48
  %2451 = fptrunc <2 x float> %2450 to <2 x bfloat>, !dbg !49
  %2452 = fpext <2 x bfloat> %2341 to <2 x float>, !dbg !48
  %2453 = insertelement <2 x float> poison, float %2254, i64 0, !dbg !48
  %2454 = insertelement <2 x float> %2453, float %2255, i64 1, !dbg !48
  %2455 = fsub <2 x float> %2452, %2454, !dbg !48
  %2456 = fptrunc <2 x float> %2455 to <2 x bfloat>, !dbg !49
  %2457 = fpext <2 x bfloat> %2343 to <2 x float>, !dbg !48
  %2458 = insertelement <2 x float> poison, float %2256, i64 0, !dbg !48
  %2459 = insertelement <2 x float> %2458, float %2257, i64 1, !dbg !48
  %2460 = fsub <2 x float> %2457, %2459, !dbg !48
  %2461 = fptrunc <2 x float> %2460 to <2 x bfloat>, !dbg !49
  %2462 = fpext <2 x bfloat> %2345 to <2 x float>, !dbg !48
  %2463 = insertelement <2 x float> poison, float %2259, i64 0, !dbg !48
  %2464 = insertelement <2 x float> %2463, float %2260, i64 1, !dbg !48
  %2465 = fsub <2 x float> %2462, %2464, !dbg !48
  %2466 = fptrunc <2 x float> %2465 to <2 x bfloat>, !dbg !49
  %2467 = fpext <2 x bfloat> %2347 to <2 x float>, !dbg !48
  %2468 = insertelement <2 x float> poison, float %2261, i64 0, !dbg !48
  %2469 = insertelement <2 x float> %2468, float %2262, i64 1, !dbg !48
  %2470 = fsub <2 x float> %2467, %2469, !dbg !48
  %2471 = fptrunc <2 x float> %2470 to <2 x bfloat>, !dbg !49
  %2472 = fpext <2 x bfloat> %2352 to <2 x float>, !dbg !48
  %2473 = insertelement <2 x float> poison, float %2264, i64 0, !dbg !48
  %2474 = insertelement <2 x float> %2473, float %2265, i64 1, !dbg !48
  %2475 = fsub <2 x float> %2472, %2474, !dbg !48
  %2476 = fptrunc <2 x float> %2475 to <2 x bfloat>, !dbg !49
  %2477 = fpext <2 x bfloat> %2354 to <2 x float>, !dbg !48
  %2478 = insertelement <2 x float> poison, float %2266, i64 0, !dbg !48
  %2479 = insertelement <2 x float> %2478, float %2267, i64 1, !dbg !48
  %2480 = fsub <2 x float> %2477, %2479, !dbg !48
  %2481 = fptrunc <2 x float> %2480 to <2 x bfloat>, !dbg !49
  %2482 = fpext <2 x bfloat> %2356 to <2 x float>, !dbg !48
  %2483 = insertelement <2 x float> poison, float %2269, i64 0, !dbg !48
  %2484 = insertelement <2 x float> %2483, float %2270, i64 1, !dbg !48
  %2485 = fsub <2 x float> %2482, %2484, !dbg !48
  %2486 = fptrunc <2 x float> %2485 to <2 x bfloat>, !dbg !49
  %2487 = fpext <2 x bfloat> %2358 to <2 x float>, !dbg !48
  %2488 = insertelement <2 x float> poison, float %2271, i64 0, !dbg !48
  %2489 = insertelement <2 x float> %2488, float %2272, i64 1, !dbg !48
  %2490 = fsub <2 x float> %2487, %2489, !dbg !48
  %2491 = fptrunc <2 x float> %2490 to <2 x bfloat>, !dbg !49
  %2492 = fpext <2 x bfloat> %2363 to <2 x float>, !dbg !48
  %2493 = insertelement <2 x float> poison, float %2274, i64 0, !dbg !48
  %2494 = insertelement <2 x float> %2493, float %2275, i64 1, !dbg !48
  %2495 = fsub <2 x float> %2492, %2494, !dbg !48
  %2496 = fptrunc <2 x float> %2495 to <2 x bfloat>, !dbg !49
  %2497 = fpext <2 x bfloat> %2365 to <2 x float>, !dbg !48
  %2498 = insertelement <2 x float> poison, float %2276, i64 0, !dbg !48
  %2499 = insertelement <2 x float> %2498, float %2277, i64 1, !dbg !48
  %2500 = fsub <2 x float> %2497, %2499, !dbg !48
  %2501 = fptrunc <2 x float> %2500 to <2 x bfloat>, !dbg !49
  %2502 = fpext <2 x bfloat> %2367 to <2 x float>, !dbg !48
  %2503 = insertelement <2 x float> poison, float %2279, i64 0, !dbg !48
  %2504 = insertelement <2 x float> %2503, float %2280, i64 1, !dbg !48
  %2505 = fsub <2 x float> %2502, %2504, !dbg !48
  %2506 = fptrunc <2 x float> %2505 to <2 x bfloat>, !dbg !49
  %2507 = fpext <2 x bfloat> %2369 to <2 x float>, !dbg !48
  %2508 = insertelement <2 x float> poison, float %2281, i64 0, !dbg !48
  %2509 = insertelement <2 x float> %2508, float %2282, i64 1, !dbg !48
  %2510 = fsub <2 x float> %2507, %2509, !dbg !48
  %2511 = fptrunc <2 x float> %2510 to <2 x bfloat>, !dbg !49
  %2512 = fpext <2 x bfloat> %2374 to <2 x float>, !dbg !48
  %2513 = insertelement <2 x float> poison, float %2284, i64 0, !dbg !48
  %2514 = insertelement <2 x float> %2513, float %2285, i64 1, !dbg !48
  %2515 = fsub <2 x float> %2512, %2514, !dbg !48
  %2516 = fptrunc <2 x float> %2515 to <2 x bfloat>, !dbg !49
  %2517 = fpext <2 x bfloat> %2376 to <2 x float>, !dbg !48
  %2518 = insertelement <2 x float> poison, float %2286, i64 0, !dbg !48
  %2519 = insertelement <2 x float> %2518, float %2287, i64 1, !dbg !48
  %2520 = fsub <2 x float> %2517, %2519, !dbg !48
  %2521 = fptrunc <2 x float> %2520 to <2 x bfloat>, !dbg !49
  %2522 = fpext <2 x bfloat> %2378 to <2 x float>, !dbg !48
  %2523 = insertelement <2 x float> poison, float %2289, i64 0, !dbg !48
  %2524 = insertelement <2 x float> %2523, float %2290, i64 1, !dbg !48
  %2525 = fsub <2 x float> %2522, %2524, !dbg !48
  %2526 = fptrunc <2 x float> %2525 to <2 x bfloat>, !dbg !49
  %2527 = fpext <2 x bfloat> %2380 to <2 x float>, !dbg !48
  %2528 = insertelement <2 x float> poison, float %2291, i64 0, !dbg !48
  %2529 = insertelement <2 x float> %2528, float %2292, i64 1, !dbg !48
  %2530 = fsub <2 x float> %2527, %2529, !dbg !48
  %2531 = fptrunc <2 x float> %2530 to <2 x bfloat>, !dbg !49
  %2532 = fpext <2 x bfloat> %2385 to <2 x float>, !dbg !48
  %2533 = insertelement <2 x float> poison, float %2294, i64 0, !dbg !48
  %2534 = insertelement <2 x float> %2533, float %2295, i64 1, !dbg !48
  %2535 = fsub <2 x float> %2532, %2534, !dbg !48
  %2536 = fptrunc <2 x float> %2535 to <2 x bfloat>, !dbg !49
  %2537 = fpext <2 x bfloat> %2387 to <2 x float>, !dbg !48
  %2538 = insertelement <2 x float> poison, float %2296, i64 0, !dbg !48
  %2539 = insertelement <2 x float> %2538, float %2297, i64 1, !dbg !48
  %2540 = fsub <2 x float> %2537, %2539, !dbg !48
  %2541 = fptrunc <2 x float> %2540 to <2 x bfloat>, !dbg !49
  %2542 = fpext <2 x bfloat> %2389 to <2 x float>, !dbg !48
  %2543 = insertelement <2 x float> poison, float %2299, i64 0, !dbg !48
  %2544 = insertelement <2 x float> %2543, float %2300, i64 1, !dbg !48
  %2545 = fsub <2 x float> %2542, %2544, !dbg !48
  %2546 = fptrunc <2 x float> %2545 to <2 x bfloat>, !dbg !49
  %2547 = fpext <2 x bfloat> %2391 to <2 x float>, !dbg !48
  %2548 = insertelement <2 x float> poison, float %2301, i64 0, !dbg !48
  %2549 = insertelement <2 x float> %2548, float %2302, i64 1, !dbg !48
  %2550 = fsub <2 x float> %2547, %2549, !dbg !48
  %2551 = fptrunc <2 x float> %2550 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %2396, ptr addrspace(3) %846, align 4, !dbg !49
  store <2 x bfloat> %2401, ptr addrspace(3) %847, align 4, !dbg !49
  store <2 x bfloat> %2406, ptr addrspace(3) %848, align 4, !dbg !49
  store <2 x bfloat> %2411, ptr addrspace(3) %849, align 4, !dbg !49
  store <2 x bfloat> %2416, ptr addrspace(3) %850, align 4, !dbg !49
  store <2 x bfloat> %2421, ptr addrspace(3) %851, align 4, !dbg !49
  store <2 x bfloat> %2426, ptr addrspace(3) %852, align 4, !dbg !49
  store <2 x bfloat> %2431, ptr addrspace(3) %853, align 4, !dbg !49
  store <2 x bfloat> %2436, ptr addrspace(3) %854, align 4, !dbg !49
  store <2 x bfloat> %2441, ptr addrspace(3) %855, align 4, !dbg !49
  store <2 x bfloat> %2446, ptr addrspace(3) %856, align 4, !dbg !49
  store <2 x bfloat> %2451, ptr addrspace(3) %857, align 4, !dbg !49
  store <2 x bfloat> %2456, ptr addrspace(3) %858, align 4, !dbg !49
  store <2 x bfloat> %2461, ptr addrspace(3) %859, align 4, !dbg !49
  store <2 x bfloat> %2466, ptr addrspace(3) %860, align 4, !dbg !49
  store <2 x bfloat> %2471, ptr addrspace(3) %861, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %2552 = load <4 x i32>, ptr addrspace(3) %862, align 16, !dbg !49
  %2553 = load <4 x i32>, ptr addrspace(3) %863, align 16, !dbg !49
  %2554 = load <4 x i32>, ptr addrspace(3) %864, align 16, !dbg !49
  %2555 = load <4 x i32>, ptr addrspace(3) %865, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %2476, ptr addrspace(3) %846, align 4, !dbg !49
  store <2 x bfloat> %2481, ptr addrspace(3) %847, align 4, !dbg !49
  store <2 x bfloat> %2486, ptr addrspace(3) %848, align 4, !dbg !49
  store <2 x bfloat> %2491, ptr addrspace(3) %849, align 4, !dbg !49
  store <2 x bfloat> %2496, ptr addrspace(3) %850, align 4, !dbg !49
  store <2 x bfloat> %2501, ptr addrspace(3) %851, align 4, !dbg !49
  store <2 x bfloat> %2506, ptr addrspace(3) %852, align 4, !dbg !49
  store <2 x bfloat> %2511, ptr addrspace(3) %853, align 4, !dbg !49
  store <2 x bfloat> %2516, ptr addrspace(3) %854, align 4, !dbg !49
  store <2 x bfloat> %2521, ptr addrspace(3) %855, align 4, !dbg !49
  store <2 x bfloat> %2526, ptr addrspace(3) %856, align 4, !dbg !49
  store <2 x bfloat> %2531, ptr addrspace(3) %857, align 4, !dbg !49
  store <2 x bfloat> %2536, ptr addrspace(3) %858, align 4, !dbg !49
  store <2 x bfloat> %2541, ptr addrspace(3) %859, align 4, !dbg !49
  store <2 x bfloat> %2546, ptr addrspace(3) %860, align 4, !dbg !49
  store <2 x bfloat> %2551, ptr addrspace(3) %861, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %2556 = load <4 x i32>, ptr addrspace(3) %862, align 16, !dbg !49
  %2557 = load <4 x i32>, ptr addrspace(3) %863, align 16, !dbg !49
  %2558 = load <4 x i32>, ptr addrspace(3) %864, align 16, !dbg !49
  %2559 = load <4 x i32>, ptr addrspace(3) %865, align 16, !dbg !49
  %2560 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn133.pn.pn1316, !dbg !50
  %2561 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn117.pn.pn1317, !dbg !50
  %2562 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn101.pn.pn1318, !dbg !50
  %2563 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn85.pn.pn1319, !dbg !50
  %2564 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn69.pn.pn1320, !dbg !50
  %2565 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn53.pn.pn1321, !dbg !50
  %2566 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn37.pn.pn1322, !dbg !50
  %2567 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn21.pn.pn1323, !dbg !50
  %.extract1249 = extractelement <4 x i32> %2552, i64 0, !dbg !50
  %.extract1251 = extractelement <4 x i32> %2552, i64 1, !dbg !50
  %.extract1253 = extractelement <4 x i32> %2552, i64 2, !dbg !50
  %.extract1255 = extractelement <4 x i32> %2552, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1249, i32 %.extract1251, i32 %.extract1253, i32 %.extract1255, ptr addrspace(1) %2560, i1 %.pn398.pn.pn1340) #2, !dbg !50
  %.extract1257 = extractelement <4 x i32> %2553, i64 0, !dbg !50
  %.extract1259 = extractelement <4 x i32> %2553, i64 1, !dbg !50
  %.extract1261 = extractelement <4 x i32> %2553, i64 2, !dbg !50
  %.extract1263 = extractelement <4 x i32> %2553, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1257, i32 %.extract1259, i32 %.extract1261, i32 %.extract1263, ptr addrspace(1) %2561, i1 %.pn382.pn.pn1341) #2, !dbg !50
  %.extract1265 = extractelement <4 x i32> %2554, i64 0, !dbg !50
  %.extract1267 = extractelement <4 x i32> %2554, i64 1, !dbg !50
  %.extract1269 = extractelement <4 x i32> %2554, i64 2, !dbg !50
  %.extract1271 = extractelement <4 x i32> %2554, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1265, i32 %.extract1267, i32 %.extract1269, i32 %.extract1271, ptr addrspace(1) %2562, i1 %.pn366.pn.pn1342) #2, !dbg !50
  %.extract1273 = extractelement <4 x i32> %2555, i64 0, !dbg !50
  %.extract1275 = extractelement <4 x i32> %2555, i64 1, !dbg !50
  %.extract1277 = extractelement <4 x i32> %2555, i64 2, !dbg !50
  %.extract1279 = extractelement <4 x i32> %2555, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1273, i32 %.extract1275, i32 %.extract1277, i32 %.extract1279, ptr addrspace(1) %2563, i1 %.pn350.pn.pn1343) #2, !dbg !50
  %.extract1281 = extractelement <4 x i32> %2556, i64 0, !dbg !50
  %.extract1283 = extractelement <4 x i32> %2556, i64 1, !dbg !50
  %.extract1285 = extractelement <4 x i32> %2556, i64 2, !dbg !50
  %.extract1287 = extractelement <4 x i32> %2556, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1281, i32 %.extract1283, i32 %.extract1285, i32 %.extract1287, ptr addrspace(1) %2564, i1 %.pn334.pn.pn1344) #2, !dbg !50
  %.extract1289 = extractelement <4 x i32> %2557, i64 0, !dbg !50
  %.extract1291 = extractelement <4 x i32> %2557, i64 1, !dbg !50
  %.extract1293 = extractelement <4 x i32> %2557, i64 2, !dbg !50
  %.extract1295 = extractelement <4 x i32> %2557, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1289, i32 %.extract1291, i32 %.extract1293, i32 %.extract1295, ptr addrspace(1) %2565, i1 %.pn318.pn.pn1345) #2, !dbg !50
  %.extract1297 = extractelement <4 x i32> %2558, i64 0, !dbg !50
  %.extract1299 = extractelement <4 x i32> %2558, i64 1, !dbg !50
  %.extract1301 = extractelement <4 x i32> %2558, i64 2, !dbg !50
  %.extract1303 = extractelement <4 x i32> %2558, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1297, i32 %.extract1299, i32 %.extract1301, i32 %.extract1303, ptr addrspace(1) %2566, i1 %.pn302.pn.pn1346) #2, !dbg !50
  %.extract1305 = extractelement <4 x i32> %2559, i64 0, !dbg !50
  %.extract1307 = extractelement <4 x i32> %2559, i64 1, !dbg !50
  %.extract1309 = extractelement <4 x i32> %2559, i64 2, !dbg !50
  %.extract1311 = extractelement <4 x i32> %2559, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1305, i32 %.extract1307, i32 %.extract1309, i32 %.extract1311, ptr addrspace(1) %2567, i1 %.pn286.pn.pn1347) #2, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !51
  %indvars.iv.next.tr = trunc i64 %indvars.iv.next to i32, !dbg !52
  %2568 = shl i32 %indvars.iv.next.tr, 6, !dbg !52
  %2569 = tail call i32 @llvm.smin.i32(i32 %2568, i32 %7), !dbg !52
  %2570 = add nuw nsw i32 %881, %52, !dbg !53
  %2571 = add nuw nsw i32 %53, %881, !dbg !53
  %2572 = add nuw nsw i32 %54, %881, !dbg !53
  %2573 = add nuw nsw i32 %55, %881, !dbg !53
  %2574 = icmp slt i32 %2570, %7, !dbg !54
  %2575 = icmp slt i32 %2571, %7, !dbg !54
  %2576 = icmp slt i32 %2572, %7, !dbg !54
  %2577 = icmp slt i32 %2573, %7, !dbg !54
  %2578 = shl i32 %2569, 5, !dbg !55
  %2579 = add i32 %2578, -32, !dbg !55
  %2580 = sext i32 %2579 to i64, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %84, i64 %2580, !dbg !57
  %2581 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !58
  %2582 = bitcast i32 %2581 to float, !dbg !58
  %.idx1116 = shl i32 %1015, 8, !dbg !38
  %2583 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 143872), i32 %.idx1116, !dbg !38
  %2584 = getelementptr inbounds nuw float, ptr addrspace(3) %2583, i32 %52, !dbg !38
  %2585 = load float, ptr addrspace(3) %2584, align 4, !dbg !38
  %2586 = getelementptr inbounds nuw i8, ptr addrspace(3) %2583, i32 %46, !dbg !38
  %2587 = getelementptr inbounds nuw i8, ptr addrspace(3) %2586, i32 %34, !dbg !38
  %2588 = getelementptr inbounds nuw i8, ptr addrspace(3) %2587, i32 %35, !dbg !38
  %2589 = getelementptr inbounds nuw float, ptr addrspace(3) %2588, i32 %51, !dbg !38
  %2590 = getelementptr inbounds nuw i8, ptr addrspace(3) %2589, i32 32, !dbg !38
  %2591 = load float, ptr addrspace(3) %2590, align 4, !dbg !38
  %2592 = getelementptr inbounds nuw i8, ptr addrspace(3) %2589, i32 128, !dbg !38
  %2593 = load float, ptr addrspace(3) %2592, align 4, !dbg !38
  %2594 = getelementptr inbounds nuw i8, ptr addrspace(3) %2589, i32 160, !dbg !38
  %2595 = load float, ptr addrspace(3) %2594, align 4, !dbg !38
  %2596 = fsub float %2582, %2585, !dbg !59
  %2597 = fsub float %2582, %2591, !dbg !59
  %2598 = fsub float %2582, %2593, !dbg !59
  %2599 = fsub float %2582, %2595, !dbg !59
  %2600 = fmul float %2596, 0x3FF7154760000000, !dbg !60
  %2601 = tail call float @llvm.nvvm.ex2.approx.f(float %2600), !dbg !60
  %2602 = fmul float %2597, 0x3FF7154760000000, !dbg !60
  %2603 = tail call float @llvm.nvvm.ex2.approx.f(float %2602), !dbg !60
  %2604 = fmul float %2598, 0x3FF7154760000000, !dbg !60
  %2605 = tail call float @llvm.nvvm.ex2.approx.f(float %2604), !dbg !60
  %2606 = fmul float %2599, 0x3FF7154760000000, !dbg !60
  %2607 = tail call float @llvm.nvvm.ex2.approx.f(float %2606), !dbg !60
  %2608 = select i1 %2574, float %2601, float 0.000000e+00, !dbg !61
  %2609 = select i1 %2575, float %2603, float 0.000000e+00, !dbg !61
  %2610 = select i1 %2576, float %2605, float 0.000000e+00, !dbg !61
  %2611 = select i1 %2577, float %2607, float 0.000000e+00, !dbg !61
  %2612 = extractelement <2 x float> %2395, i64 0, !dbg !62
  %2613 = fmul float %2612, %2608, !dbg !62
  %2614 = extractelement <2 x float> %2395, i64 1, !dbg !62
  %2615 = fmul float %2614, %2608, !dbg !62
  %2616 = extractelement <2 x float> %2400, i64 0, !dbg !62
  %2617 = fmul float %2616, %2609, !dbg !62
  %2618 = extractelement <2 x float> %2400, i64 1, !dbg !62
  %2619 = fmul float %2618, %2609, !dbg !62
  %2620 = extractelement <2 x float> %2405, i64 0, !dbg !62
  %2621 = fmul float %2620, %2608, !dbg !62
  %2622 = extractelement <2 x float> %2405, i64 1, !dbg !62
  %2623 = fmul float %2622, %2608, !dbg !62
  %2624 = extractelement <2 x float> %2410, i64 0, !dbg !62
  %2625 = fmul float %2624, %2609, !dbg !62
  %2626 = extractelement <2 x float> %2410, i64 1, !dbg !62
  %2627 = fmul float %2626, %2609, !dbg !62
  %2628 = extractelement <2 x float> %2415, i64 0, !dbg !62
  %2629 = fmul float %2628, %2608, !dbg !62
  %2630 = extractelement <2 x float> %2415, i64 1, !dbg !62
  %2631 = fmul float %2630, %2608, !dbg !62
  %2632 = extractelement <2 x float> %2420, i64 0, !dbg !62
  %2633 = fmul float %2632, %2609, !dbg !62
  %2634 = extractelement <2 x float> %2420, i64 1, !dbg !62
  %2635 = fmul float %2634, %2609, !dbg !62
  %2636 = extractelement <2 x float> %2425, i64 0, !dbg !62
  %2637 = fmul float %2636, %2608, !dbg !62
  %2638 = extractelement <2 x float> %2425, i64 1, !dbg !62
  %2639 = fmul float %2638, %2608, !dbg !62
  %2640 = extractelement <2 x float> %2430, i64 0, !dbg !62
  %2641 = fmul float %2640, %2609, !dbg !62
  %2642 = extractelement <2 x float> %2430, i64 1, !dbg !62
  %2643 = fmul float %2642, %2609, !dbg !62
  %2644 = extractelement <2 x float> %2435, i64 0, !dbg !62
  %2645 = fmul float %2644, %2608, !dbg !62
  %2646 = extractelement <2 x float> %2435, i64 1, !dbg !62
  %2647 = fmul float %2646, %2608, !dbg !62
  %2648 = extractelement <2 x float> %2440, i64 0, !dbg !62
  %2649 = fmul float %2648, %2609, !dbg !62
  %2650 = extractelement <2 x float> %2440, i64 1, !dbg !62
  %2651 = fmul float %2650, %2609, !dbg !62
  %2652 = extractelement <2 x float> %2445, i64 0, !dbg !62
  %2653 = fmul float %2652, %2608, !dbg !62
  %2654 = extractelement <2 x float> %2445, i64 1, !dbg !62
  %2655 = fmul float %2654, %2608, !dbg !62
  %2656 = extractelement <2 x float> %2450, i64 0, !dbg !62
  %2657 = fmul float %2656, %2609, !dbg !62
  %2658 = extractelement <2 x float> %2450, i64 1, !dbg !62
  %2659 = fmul float %2658, %2609, !dbg !62
  %2660 = extractelement <2 x float> %2455, i64 0, !dbg !62
  %2661 = fmul float %2660, %2608, !dbg !62
  %2662 = extractelement <2 x float> %2455, i64 1, !dbg !62
  %2663 = fmul float %2662, %2608, !dbg !62
  %2664 = extractelement <2 x float> %2460, i64 0, !dbg !62
  %2665 = fmul float %2664, %2609, !dbg !62
  %2666 = extractelement <2 x float> %2460, i64 1, !dbg !62
  %2667 = fmul float %2666, %2609, !dbg !62
  %2668 = extractelement <2 x float> %2465, i64 0, !dbg !62
  %2669 = fmul float %2668, %2608, !dbg !62
  %2670 = extractelement <2 x float> %2465, i64 1, !dbg !62
  %2671 = fmul float %2670, %2608, !dbg !62
  %2672 = extractelement <2 x float> %2470, i64 0, !dbg !62
  %2673 = fmul float %2672, %2609, !dbg !62
  %2674 = extractelement <2 x float> %2470, i64 1, !dbg !62
  %2675 = fmul float %2674, %2609, !dbg !62
  %2676 = extractelement <2 x float> %2475, i64 0, !dbg !62
  %2677 = fmul float %2676, %2610, !dbg !62
  %2678 = extractelement <2 x float> %2475, i64 1, !dbg !62
  %2679 = fmul float %2678, %2610, !dbg !62
  %2680 = extractelement <2 x float> %2480, i64 0, !dbg !62
  %2681 = fmul float %2680, %2611, !dbg !62
  %2682 = extractelement <2 x float> %2480, i64 1, !dbg !62
  %2683 = fmul float %2682, %2611, !dbg !62
  %2684 = extractelement <2 x float> %2485, i64 0, !dbg !62
  %2685 = fmul float %2684, %2610, !dbg !62
  %2686 = extractelement <2 x float> %2485, i64 1, !dbg !62
  %2687 = fmul float %2686, %2610, !dbg !62
  %2688 = extractelement <2 x float> %2490, i64 0, !dbg !62
  %2689 = fmul float %2688, %2611, !dbg !62
  %2690 = extractelement <2 x float> %2490, i64 1, !dbg !62
  %2691 = fmul float %2690, %2611, !dbg !62
  %2692 = extractelement <2 x float> %2495, i64 0, !dbg !62
  %2693 = fmul float %2692, %2610, !dbg !62
  %2694 = extractelement <2 x float> %2495, i64 1, !dbg !62
  %2695 = fmul float %2694, %2610, !dbg !62
  %2696 = extractelement <2 x float> %2500, i64 0, !dbg !62
  %2697 = fmul float %2696, %2611, !dbg !62
  %2698 = extractelement <2 x float> %2500, i64 1, !dbg !62
  %2699 = fmul float %2698, %2611, !dbg !62
  %2700 = extractelement <2 x float> %2505, i64 0, !dbg !62
  %2701 = fmul float %2700, %2610, !dbg !62
  %2702 = extractelement <2 x float> %2505, i64 1, !dbg !62
  %2703 = fmul float %2702, %2610, !dbg !62
  %2704 = extractelement <2 x float> %2510, i64 0, !dbg !62
  %2705 = fmul float %2704, %2611, !dbg !62
  %2706 = extractelement <2 x float> %2510, i64 1, !dbg !62
  %2707 = fmul float %2706, %2611, !dbg !62
  %2708 = extractelement <2 x float> %2515, i64 0, !dbg !62
  %2709 = fmul float %2708, %2610, !dbg !62
  %2710 = extractelement <2 x float> %2515, i64 1, !dbg !62
  %2711 = fmul float %2710, %2610, !dbg !62
  %2712 = extractelement <2 x float> %2520, i64 0, !dbg !62
  %2713 = fmul float %2712, %2611, !dbg !62
  %2714 = extractelement <2 x float> %2520, i64 1, !dbg !62
  %2715 = fmul float %2714, %2611, !dbg !62
  %2716 = extractelement <2 x float> %2525, i64 0, !dbg !62
  %2717 = fmul float %2716, %2610, !dbg !62
  %2718 = extractelement <2 x float> %2525, i64 1, !dbg !62
  %2719 = fmul float %2718, %2610, !dbg !62
  %2720 = extractelement <2 x float> %2530, i64 0, !dbg !62
  %2721 = fmul float %2720, %2611, !dbg !62
  %2722 = extractelement <2 x float> %2530, i64 1, !dbg !62
  %2723 = fmul float %2722, %2611, !dbg !62
  %2724 = extractelement <2 x float> %2535, i64 0, !dbg !62
  %2725 = fmul float %2724, %2610, !dbg !62
  %2726 = extractelement <2 x float> %2535, i64 1, !dbg !62
  %2727 = fmul float %2726, %2610, !dbg !62
  %2728 = extractelement <2 x float> %2540, i64 0, !dbg !62
  %2729 = fmul float %2728, %2611, !dbg !62
  %2730 = extractelement <2 x float> %2540, i64 1, !dbg !62
  %2731 = fmul float %2730, %2611, !dbg !62
  %2732 = extractelement <2 x float> %2545, i64 0, !dbg !62
  %2733 = fmul float %2732, %2610, !dbg !62
  %2734 = extractelement <2 x float> %2545, i64 1, !dbg !62
  %2735 = fmul float %2734, %2610, !dbg !62
  %2736 = extractelement <2 x float> %2550, i64 0, !dbg !62
  %2737 = fmul float %2736, %2611, !dbg !62
  %2738 = extractelement <2 x float> %2550, i64 1, !dbg !62
  %2739 = fmul float %2738, %2611, !dbg !62
  %2740 = fmul float %2582, 0x3FF7154760000000, !dbg !63
  %2741 = tail call float @llvm.nvvm.ex2.approx.f(float %2740), !dbg !63
  %2742 = fmul float %948, %2741, !dbg !64
  %2743 = fmul float %949, %2741, !dbg !64
  %2744 = fmul float %950, %2741, !dbg !64
  %2745 = fmul float %951, %2741, !dbg !64
  %2746 = fmul float %952, %2741, !dbg !64
  %2747 = fmul float %953, %2741, !dbg !64
  %2748 = fmul float %954, %2741, !dbg !64
  %2749 = fmul float %955, %2741, !dbg !64
  %2750 = fmul float %956, %2741, !dbg !64
  %2751 = fmul float %957, %2741, !dbg !64
  %2752 = fmul float %958, %2741, !dbg !64
  %2753 = fmul float %959, %2741, !dbg !64
  %2754 = fmul float %960, %2741, !dbg !64
  %2755 = fmul float %961, %2741, !dbg !64
  %2756 = fmul float %962, %2741, !dbg !64
  %2757 = fmul float %963, %2741, !dbg !64
  %2758 = fmul float %964, %2741, !dbg !64
  %2759 = fmul float %965, %2741, !dbg !64
  %2760 = fmul float %966, %2741, !dbg !64
  %2761 = fmul float %967, %2741, !dbg !64
  %2762 = fmul float %968, %2741, !dbg !64
  %2763 = fmul float %969, %2741, !dbg !64
  %2764 = fmul float %970, %2741, !dbg !64
  %2765 = fmul float %971, %2741, !dbg !64
  %2766 = fmul float %972, %2741, !dbg !64
  %2767 = fmul float %973, %2741, !dbg !64
  %2768 = fmul float %974, %2741, !dbg !64
  %2769 = fmul float %975, %2741, !dbg !64
  %2770 = fmul float %976, %2741, !dbg !64
  %2771 = fmul float %977, %2741, !dbg !64
  %2772 = fmul float %978, %2741, !dbg !64
  %2773 = fmul float %979, %2741, !dbg !64
  %2774 = fmul float %980, %2741, !dbg !64
  %2775 = fmul float %981, %2741, !dbg !64
  %2776 = fmul float %982, %2741, !dbg !64
  %2777 = fmul float %983, %2741, !dbg !64
  %2778 = fmul float %984, %2741, !dbg !64
  %2779 = fmul float %985, %2741, !dbg !64
  %2780 = fmul float %986, %2741, !dbg !64
  %2781 = fmul float %987, %2741, !dbg !64
  %2782 = fmul float %988, %2741, !dbg !64
  %2783 = fmul float %989, %2741, !dbg !64
  %2784 = fmul float %990, %2741, !dbg !64
  %2785 = fmul float %991, %2741, !dbg !64
  %2786 = fmul float %992, %2741, !dbg !64
  %2787 = fmul float %993, %2741, !dbg !64
  %2788 = fmul float %994, %2741, !dbg !64
  %2789 = fmul float %995, %2741, !dbg !64
  %2790 = fmul float %996, %2741, !dbg !64
  %2791 = fmul float %997, %2741, !dbg !64
  %2792 = fmul float %998, %2741, !dbg !64
  %2793 = fmul float %999, %2741, !dbg !64
  %2794 = fmul float %1000, %2741, !dbg !64
  %2795 = fmul float %1001, %2741, !dbg !64
  %2796 = fmul float %1002, %2741, !dbg !64
  %2797 = fmul float %1003, %2741, !dbg !64
  %2798 = fmul float %1004, %2741, !dbg !64
  %2799 = fmul float %1005, %2741, !dbg !64
  %2800 = fmul float %1006, %2741, !dbg !64
  %2801 = fmul float %1007, %2741, !dbg !64
  %2802 = fmul float %1008, %2741, !dbg !64
  %2803 = fmul float %1009, %2741, !dbg !64
  %2804 = fmul float %1010, %2741, !dbg !64
  %2805 = fmul float %1011, %2741, !dbg !64
  %2806 = fmul float %884, %2741, !dbg !65
  %2807 = fmul float %885, %2741, !dbg !65
  %2808 = fmul float %886, %2741, !dbg !65
  %2809 = fmul float %887, %2741, !dbg !65
  %2810 = fmul float %888, %2741, !dbg !65
  %2811 = fmul float %889, %2741, !dbg !65
  %2812 = fmul float %890, %2741, !dbg !65
  %2813 = fmul float %891, %2741, !dbg !65
  %2814 = fmul float %892, %2741, !dbg !65
  %2815 = fmul float %893, %2741, !dbg !65
  %2816 = fmul float %894, %2741, !dbg !65
  %2817 = fmul float %895, %2741, !dbg !65
  %2818 = fmul float %896, %2741, !dbg !65
  %2819 = fmul float %897, %2741, !dbg !65
  %2820 = fmul float %898, %2741, !dbg !65
  %2821 = fmul float %899, %2741, !dbg !65
  %2822 = fmul float %900, %2741, !dbg !65
  %2823 = fmul float %901, %2741, !dbg !65
  %2824 = fmul float %902, %2741, !dbg !65
  %2825 = fmul float %903, %2741, !dbg !65
  %2826 = fmul float %904, %2741, !dbg !65
  %2827 = fmul float %905, %2741, !dbg !65
  %2828 = fmul float %906, %2741, !dbg !65
  %2829 = fmul float %907, %2741, !dbg !65
  %2830 = fmul float %908, %2741, !dbg !65
  %2831 = fmul float %909, %2741, !dbg !65
  %2832 = fmul float %910, %2741, !dbg !65
  %2833 = fmul float %911, %2741, !dbg !65
  %2834 = fmul float %912, %2741, !dbg !65
  %2835 = fmul float %913, %2741, !dbg !65
  %2836 = fmul float %914, %2741, !dbg !65
  %2837 = fmul float %915, %2741, !dbg !65
  %2838 = fmul float %916, %2741, !dbg !65
  %2839 = fmul float %917, %2741, !dbg !65
  %2840 = fmul float %918, %2741, !dbg !65
  %2841 = fmul float %919, %2741, !dbg !65
  %2842 = fmul float %920, %2741, !dbg !65
  %2843 = fmul float %921, %2741, !dbg !65
  %2844 = fmul float %922, %2741, !dbg !65
  %2845 = fmul float %923, %2741, !dbg !65
  %2846 = fmul float %924, %2741, !dbg !65
  %2847 = fmul float %925, %2741, !dbg !65
  %2848 = fmul float %926, %2741, !dbg !65
  %2849 = fmul float %927, %2741, !dbg !65
  %2850 = fmul float %928, %2741, !dbg !65
  %2851 = fmul float %929, %2741, !dbg !65
  %2852 = fmul float %930, %2741, !dbg !65
  %2853 = fmul float %931, %2741, !dbg !65
  %2854 = fmul float %932, %2741, !dbg !65
  %2855 = fmul float %933, %2741, !dbg !65
  %2856 = fmul float %934, %2741, !dbg !65
  %2857 = fmul float %935, %2741, !dbg !65
  %2858 = fmul float %936, %2741, !dbg !65
  %2859 = fmul float %937, %2741, !dbg !65
  %2860 = fmul float %938, %2741, !dbg !65
  %2861 = fmul float %939, %2741, !dbg !65
  %2862 = fmul float %940, %2741, !dbg !65
  %2863 = fmul float %941, %2741, !dbg !65
  %2864 = fmul float %942, %2741, !dbg !65
  %2865 = fmul float %943, %2741, !dbg !65
  %2866 = fmul float %944, %2741, !dbg !65
  %2867 = fmul float %945, %2741, !dbg !65
  %2868 = fmul float %946, %2741, !dbg !65
  %2869 = fmul float %947, %2741, !dbg !65
  %2870 = fptrunc float %2613 to bfloat, !dbg !66
  %2871 = fptrunc float %2615 to bfloat, !dbg !66
  %2872 = fptrunc float %2617 to bfloat, !dbg !66
  %2873 = fptrunc float %2619 to bfloat, !dbg !66
  %2874 = fptrunc float %2621 to bfloat, !dbg !66
  %2875 = fptrunc float %2623 to bfloat, !dbg !66
  %2876 = fptrunc float %2625 to bfloat, !dbg !66
  %2877 = fptrunc float %2627 to bfloat, !dbg !66
  %2878 = fptrunc float %2629 to bfloat, !dbg !66
  %2879 = fptrunc float %2631 to bfloat, !dbg !66
  %2880 = fptrunc float %2633 to bfloat, !dbg !66
  %2881 = fptrunc float %2635 to bfloat, !dbg !66
  %2882 = fptrunc float %2637 to bfloat, !dbg !66
  %2883 = fptrunc float %2639 to bfloat, !dbg !66
  %2884 = fptrunc float %2641 to bfloat, !dbg !66
  %2885 = fptrunc float %2643 to bfloat, !dbg !66
  %2886 = fptrunc float %2645 to bfloat, !dbg !66
  %2887 = fptrunc float %2647 to bfloat, !dbg !66
  %2888 = fptrunc float %2649 to bfloat, !dbg !66
  %2889 = fptrunc float %2651 to bfloat, !dbg !66
  %2890 = fptrunc float %2653 to bfloat, !dbg !66
  %2891 = fptrunc float %2655 to bfloat, !dbg !66
  %2892 = fptrunc float %2657 to bfloat, !dbg !66
  %2893 = fptrunc float %2659 to bfloat, !dbg !66
  %2894 = fptrunc float %2661 to bfloat, !dbg !66
  %2895 = fptrunc float %2663 to bfloat, !dbg !66
  %2896 = fptrunc float %2665 to bfloat, !dbg !66
  %2897 = fptrunc float %2667 to bfloat, !dbg !66
  %2898 = fptrunc float %2669 to bfloat, !dbg !66
  %2899 = fptrunc float %2671 to bfloat, !dbg !66
  %2900 = fptrunc float %2673 to bfloat, !dbg !66
  %2901 = fptrunc float %2675 to bfloat, !dbg !66
  %2902 = fptrunc float %2677 to bfloat, !dbg !66
  %2903 = fptrunc float %2679 to bfloat, !dbg !66
  %2904 = fptrunc float %2681 to bfloat, !dbg !66
  %2905 = fptrunc float %2683 to bfloat, !dbg !66
  %2906 = fptrunc float %2685 to bfloat, !dbg !66
  %2907 = fptrunc float %2687 to bfloat, !dbg !66
  %2908 = fptrunc float %2689 to bfloat, !dbg !66
  %2909 = fptrunc float %2691 to bfloat, !dbg !66
  %2910 = fptrunc float %2693 to bfloat, !dbg !66
  %2911 = fptrunc float %2695 to bfloat, !dbg !66
  %2912 = fptrunc float %2697 to bfloat, !dbg !66
  %2913 = fptrunc float %2699 to bfloat, !dbg !66
  %2914 = fptrunc float %2701 to bfloat, !dbg !66
  %2915 = fptrunc float %2703 to bfloat, !dbg !66
  %2916 = fptrunc float %2705 to bfloat, !dbg !66
  %2917 = fptrunc float %2707 to bfloat, !dbg !66
  %2918 = fptrunc float %2709 to bfloat, !dbg !66
  %2919 = fptrunc float %2711 to bfloat, !dbg !66
  %2920 = fptrunc float %2713 to bfloat, !dbg !66
  %2921 = fptrunc float %2715 to bfloat, !dbg !66
  %2922 = fptrunc float %2717 to bfloat, !dbg !66
  %2923 = fptrunc float %2719 to bfloat, !dbg !66
  %2924 = fptrunc float %2721 to bfloat, !dbg !66
  %2925 = fptrunc float %2723 to bfloat, !dbg !66
  %2926 = fptrunc float %2725 to bfloat, !dbg !66
  %2927 = fptrunc float %2727 to bfloat, !dbg !66
  %2928 = fptrunc float %2729 to bfloat, !dbg !66
  %2929 = fptrunc float %2731 to bfloat, !dbg !66
  %2930 = fptrunc float %2733 to bfloat, !dbg !66
  %2931 = fptrunc float %2735 to bfloat, !dbg !66
  %2932 = fptrunc float %2737 to bfloat, !dbg !66
  %2933 = fptrunc float %2739 to bfloat, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %2934 = insertelement <2 x bfloat> poison, bfloat %2870, i64 0, !dbg !66
  %2935 = insertelement <2 x bfloat> %2934, bfloat %2871, i64 1, !dbg !66
  %2936 = bitcast <2 x bfloat> %2935 to i32, !dbg !66
  %2937 = insertelement <2 x bfloat> poison, bfloat %2872, i64 0, !dbg !66
  %2938 = insertelement <2 x bfloat> %2937, bfloat %2873, i64 1, !dbg !66
  %2939 = bitcast <2 x bfloat> %2938 to i32, !dbg !66
  %2940 = insertelement <2 x bfloat> poison, bfloat %2874, i64 0, !dbg !66
  %2941 = insertelement <2 x bfloat> %2940, bfloat %2875, i64 1, !dbg !66
  %2942 = bitcast <2 x bfloat> %2941 to i32, !dbg !66
  %2943 = insertelement <2 x bfloat> poison, bfloat %2876, i64 0, !dbg !66
  %2944 = insertelement <2 x bfloat> %2943, bfloat %2877, i64 1, !dbg !66
  %2945 = bitcast <2 x bfloat> %2944 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %616, i32 %2936, i32 %2939, i32 %2942, i32 %2945) #2, !dbg !66
  %2946 = insertelement <2 x bfloat> poison, bfloat %2878, i64 0, !dbg !66
  %2947 = insertelement <2 x bfloat> %2946, bfloat %2879, i64 1, !dbg !66
  %2948 = bitcast <2 x bfloat> %2947 to i32, !dbg !66
  %2949 = insertelement <2 x bfloat> poison, bfloat %2880, i64 0, !dbg !66
  %2950 = insertelement <2 x bfloat> %2949, bfloat %2881, i64 1, !dbg !66
  %2951 = bitcast <2 x bfloat> %2950 to i32, !dbg !66
  %2952 = insertelement <2 x bfloat> poison, bfloat %2882, i64 0, !dbg !66
  %2953 = insertelement <2 x bfloat> %2952, bfloat %2883, i64 1, !dbg !66
  %2954 = bitcast <2 x bfloat> %2953 to i32, !dbg !66
  %2955 = insertelement <2 x bfloat> poison, bfloat %2884, i64 0, !dbg !66
  %2956 = insertelement <2 x bfloat> %2955, bfloat %2885, i64 1, !dbg !66
  %2957 = bitcast <2 x bfloat> %2956 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %619, i32 %2948, i32 %2951, i32 %2954, i32 %2957) #2, !dbg !66
  %2958 = insertelement <2 x bfloat> poison, bfloat %2886, i64 0, !dbg !66
  %2959 = insertelement <2 x bfloat> %2958, bfloat %2887, i64 1, !dbg !66
  %2960 = bitcast <2 x bfloat> %2959 to i32, !dbg !66
  %2961 = insertelement <2 x bfloat> poison, bfloat %2888, i64 0, !dbg !66
  %2962 = insertelement <2 x bfloat> %2961, bfloat %2889, i64 1, !dbg !66
  %2963 = bitcast <2 x bfloat> %2962 to i32, !dbg !66
  %2964 = insertelement <2 x bfloat> poison, bfloat %2890, i64 0, !dbg !66
  %2965 = insertelement <2 x bfloat> %2964, bfloat %2891, i64 1, !dbg !66
  %2966 = bitcast <2 x bfloat> %2965 to i32, !dbg !66
  %2967 = insertelement <2 x bfloat> poison, bfloat %2892, i64 0, !dbg !66
  %2968 = insertelement <2 x bfloat> %2967, bfloat %2893, i64 1, !dbg !66
  %2969 = bitcast <2 x bfloat> %2968 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %622, i32 %2960, i32 %2963, i32 %2966, i32 %2969) #2, !dbg !66
  %2970 = insertelement <2 x bfloat> poison, bfloat %2894, i64 0, !dbg !66
  %2971 = insertelement <2 x bfloat> %2970, bfloat %2895, i64 1, !dbg !66
  %2972 = bitcast <2 x bfloat> %2971 to i32, !dbg !66
  %2973 = insertelement <2 x bfloat> poison, bfloat %2896, i64 0, !dbg !66
  %2974 = insertelement <2 x bfloat> %2973, bfloat %2897, i64 1, !dbg !66
  %2975 = bitcast <2 x bfloat> %2974 to i32, !dbg !66
  %2976 = insertelement <2 x bfloat> poison, bfloat %2898, i64 0, !dbg !66
  %2977 = insertelement <2 x bfloat> %2976, bfloat %2899, i64 1, !dbg !66
  %2978 = bitcast <2 x bfloat> %2977 to i32, !dbg !66
  %2979 = insertelement <2 x bfloat> poison, bfloat %2900, i64 0, !dbg !66
  %2980 = insertelement <2 x bfloat> %2979, bfloat %2901, i64 1, !dbg !66
  %2981 = bitcast <2 x bfloat> %2980 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %625, i32 %2972, i32 %2975, i32 %2978, i32 %2981) #2, !dbg !66
  %2982 = insertelement <2 x bfloat> poison, bfloat %2902, i64 0, !dbg !66
  %2983 = insertelement <2 x bfloat> %2982, bfloat %2903, i64 1, !dbg !66
  %2984 = bitcast <2 x bfloat> %2983 to i32, !dbg !66
  %2985 = insertelement <2 x bfloat> poison, bfloat %2904, i64 0, !dbg !66
  %2986 = insertelement <2 x bfloat> %2985, bfloat %2905, i64 1, !dbg !66
  %2987 = bitcast <2 x bfloat> %2986 to i32, !dbg !66
  %2988 = insertelement <2 x bfloat> poison, bfloat %2906, i64 0, !dbg !66
  %2989 = insertelement <2 x bfloat> %2988, bfloat %2907, i64 1, !dbg !66
  %2990 = bitcast <2 x bfloat> %2989 to i32, !dbg !66
  %2991 = insertelement <2 x bfloat> poison, bfloat %2908, i64 0, !dbg !66
  %2992 = insertelement <2 x bfloat> %2991, bfloat %2909, i64 1, !dbg !66
  %2993 = bitcast <2 x bfloat> %2992 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %628, i32 %2984, i32 %2987, i32 %2990, i32 %2993) #2, !dbg !66
  %2994 = insertelement <2 x bfloat> poison, bfloat %2910, i64 0, !dbg !66
  %2995 = insertelement <2 x bfloat> %2994, bfloat %2911, i64 1, !dbg !66
  %2996 = bitcast <2 x bfloat> %2995 to i32, !dbg !66
  %2997 = insertelement <2 x bfloat> poison, bfloat %2912, i64 0, !dbg !66
  %2998 = insertelement <2 x bfloat> %2997, bfloat %2913, i64 1, !dbg !66
  %2999 = bitcast <2 x bfloat> %2998 to i32, !dbg !66
  %3000 = insertelement <2 x bfloat> poison, bfloat %2914, i64 0, !dbg !66
  %3001 = insertelement <2 x bfloat> %3000, bfloat %2915, i64 1, !dbg !66
  %3002 = bitcast <2 x bfloat> %3001 to i32, !dbg !66
  %3003 = insertelement <2 x bfloat> poison, bfloat %2916, i64 0, !dbg !66
  %3004 = insertelement <2 x bfloat> %3003, bfloat %2917, i64 1, !dbg !66
  %3005 = bitcast <2 x bfloat> %3004 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %631, i32 %2996, i32 %2999, i32 %3002, i32 %3005) #2, !dbg !66
  %3006 = insertelement <2 x bfloat> poison, bfloat %2918, i64 0, !dbg !66
  %3007 = insertelement <2 x bfloat> %3006, bfloat %2919, i64 1, !dbg !66
  %3008 = bitcast <2 x bfloat> %3007 to i32, !dbg !66
  %3009 = insertelement <2 x bfloat> poison, bfloat %2920, i64 0, !dbg !66
  %3010 = insertelement <2 x bfloat> %3009, bfloat %2921, i64 1, !dbg !66
  %3011 = bitcast <2 x bfloat> %3010 to i32, !dbg !66
  %3012 = insertelement <2 x bfloat> poison, bfloat %2922, i64 0, !dbg !66
  %3013 = insertelement <2 x bfloat> %3012, bfloat %2923, i64 1, !dbg !66
  %3014 = bitcast <2 x bfloat> %3013 to i32, !dbg !66
  %3015 = insertelement <2 x bfloat> poison, bfloat %2924, i64 0, !dbg !66
  %3016 = insertelement <2 x bfloat> %3015, bfloat %2925, i64 1, !dbg !66
  %3017 = bitcast <2 x bfloat> %3016 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %634, i32 %3008, i32 %3011, i32 %3014, i32 %3017) #2, !dbg !66
  %3018 = insertelement <2 x bfloat> poison, bfloat %2926, i64 0, !dbg !66
  %3019 = insertelement <2 x bfloat> %3018, bfloat %2927, i64 1, !dbg !66
  %3020 = bitcast <2 x bfloat> %3019 to i32, !dbg !66
  %3021 = insertelement <2 x bfloat> poison, bfloat %2928, i64 0, !dbg !66
  %3022 = insertelement <2 x bfloat> %3021, bfloat %2929, i64 1, !dbg !66
  %3023 = bitcast <2 x bfloat> %3022 to i32, !dbg !66
  %3024 = insertelement <2 x bfloat> poison, bfloat %2930, i64 0, !dbg !66
  %3025 = insertelement <2 x bfloat> %3024, bfloat %2931, i64 1, !dbg !66
  %3026 = bitcast <2 x bfloat> %3025 to i32, !dbg !66
  %3027 = insertelement <2 x bfloat> poison, bfloat %2932, i64 0, !dbg !66
  %3028 = insertelement <2 x bfloat> %3027, bfloat %2933, i64 1, !dbg !66
  %3029 = bitcast <2 x bfloat> %3028 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %637, i32 %3020, i32 %3023, i32 %3026, i32 %3029) #2, !dbg !66
  %3030 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %1388, !dbg !39
  %3031 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %869, !dbg !39
  %3032 = ptrtoint ptr addrspace(3) %3031 to i32, !dbg !39
  %3033 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3032) #2, !dbg !39
  %3034 = extractvalue { i32, i32, i32, i32 } %3033, 0, !dbg !39
  %3035 = extractvalue { i32, i32, i32, i32 } %3033, 1, !dbg !39
  %3036 = extractvalue { i32, i32, i32, i32 } %3033, 2, !dbg !39
  %3037 = extractvalue { i32, i32, i32, i32 } %3033, 3, !dbg !39
  %3038 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %870, !dbg !39
  %3039 = ptrtoint ptr addrspace(3) %3038 to i32, !dbg !39
  %3040 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3039) #2, !dbg !39
  %3041 = extractvalue { i32, i32, i32, i32 } %3040, 0, !dbg !39
  %3042 = extractvalue { i32, i32, i32, i32 } %3040, 1, !dbg !39
  %3043 = extractvalue { i32, i32, i32, i32 } %3040, 2, !dbg !39
  %3044 = extractvalue { i32, i32, i32, i32 } %3040, 3, !dbg !39
  %3045 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %871, !dbg !39
  %3046 = ptrtoint ptr addrspace(3) %3045 to i32, !dbg !39
  %3047 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3046) #2, !dbg !39
  %3048 = extractvalue { i32, i32, i32, i32 } %3047, 0, !dbg !39
  %3049 = extractvalue { i32, i32, i32, i32 } %3047, 1, !dbg !39
  %3050 = extractvalue { i32, i32, i32, i32 } %3047, 2, !dbg !39
  %3051 = extractvalue { i32, i32, i32, i32 } %3047, 3, !dbg !39
  %3052 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %872, !dbg !39
  %3053 = ptrtoint ptr addrspace(3) %3052 to i32, !dbg !39
  %3054 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3053) #2, !dbg !39
  %3055 = extractvalue { i32, i32, i32, i32 } %3054, 0, !dbg !39
  %3056 = extractvalue { i32, i32, i32, i32 } %3054, 1, !dbg !39
  %3057 = extractvalue { i32, i32, i32, i32 } %3054, 2, !dbg !39
  %3058 = extractvalue { i32, i32, i32, i32 } %3054, 3, !dbg !39
  %3059 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %873, !dbg !39
  %3060 = ptrtoint ptr addrspace(3) %3059 to i32, !dbg !39
  %3061 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3060) #2, !dbg !39
  %3062 = extractvalue { i32, i32, i32, i32 } %3061, 0, !dbg !39
  %3063 = extractvalue { i32, i32, i32, i32 } %3061, 1, !dbg !39
  %3064 = extractvalue { i32, i32, i32, i32 } %3061, 2, !dbg !39
  %3065 = extractvalue { i32, i32, i32, i32 } %3061, 3, !dbg !39
  %3066 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %874, !dbg !39
  %3067 = ptrtoint ptr addrspace(3) %3066 to i32, !dbg !39
  %3068 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3067) #2, !dbg !39
  %3069 = extractvalue { i32, i32, i32, i32 } %3068, 0, !dbg !39
  %3070 = extractvalue { i32, i32, i32, i32 } %3068, 1, !dbg !39
  %3071 = extractvalue { i32, i32, i32, i32 } %3068, 2, !dbg !39
  %3072 = extractvalue { i32, i32, i32, i32 } %3068, 3, !dbg !39
  %3073 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %875, !dbg !39
  %3074 = ptrtoint ptr addrspace(3) %3073 to i32, !dbg !39
  %3075 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3074) #2, !dbg !39
  %3076 = extractvalue { i32, i32, i32, i32 } %3075, 0, !dbg !39
  %3077 = extractvalue { i32, i32, i32, i32 } %3075, 1, !dbg !39
  %3078 = extractvalue { i32, i32, i32, i32 } %3075, 2, !dbg !39
  %3079 = extractvalue { i32, i32, i32, i32 } %3075, 3, !dbg !39
  %3080 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3030, i32 %876, !dbg !39
  %3081 = ptrtoint ptr addrspace(3) %3080 to i32, !dbg !39
  %3082 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3081) #2, !dbg !39
  %3083 = extractvalue { i32, i32, i32, i32 } %3082, 0, !dbg !39
  %3084 = extractvalue { i32, i32, i32, i32 } %3082, 1, !dbg !39
  %3085 = extractvalue { i32, i32, i32, i32 } %3082, 2, !dbg !39
  %3086 = extractvalue { i32, i32, i32, i32 } %3082, 3, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %3087 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %768) #2, !dbg !66
  %3088 = extractvalue { i32, i32, i32, i32 } %3087, 0, !dbg !66
  %3089 = extractvalue { i32, i32, i32, i32 } %3087, 1, !dbg !66
  %3090 = extractvalue { i32, i32, i32, i32 } %3087, 2, !dbg !66
  %3091 = extractvalue { i32, i32, i32, i32 } %3087, 3, !dbg !66
  %3092 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %771) #2, !dbg !66
  %3093 = extractvalue { i32, i32, i32, i32 } %3092, 0, !dbg !66
  %3094 = extractvalue { i32, i32, i32, i32 } %3092, 1, !dbg !66
  %3095 = extractvalue { i32, i32, i32, i32 } %3092, 2, !dbg !66
  %3096 = extractvalue { i32, i32, i32, i32 } %3092, 3, !dbg !66
  %3097 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %774) #2, !dbg !66
  %3098 = extractvalue { i32, i32, i32, i32 } %3097, 0, !dbg !66
  %3099 = extractvalue { i32, i32, i32, i32 } %3097, 1, !dbg !66
  %3100 = extractvalue { i32, i32, i32, i32 } %3097, 2, !dbg !66
  %3101 = extractvalue { i32, i32, i32, i32 } %3097, 3, !dbg !66
  %3102 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %777) #2, !dbg !66
  %3103 = extractvalue { i32, i32, i32, i32 } %3102, 0, !dbg !66
  %3104 = extractvalue { i32, i32, i32, i32 } %3102, 1, !dbg !66
  %3105 = extractvalue { i32, i32, i32, i32 } %3102, 2, !dbg !66
  %3106 = extractvalue { i32, i32, i32, i32 } %3102, 3, !dbg !66
  %3107 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %780) #2, !dbg !66
  %3108 = extractvalue { i32, i32, i32, i32 } %3107, 0, !dbg !66
  %3109 = extractvalue { i32, i32, i32, i32 } %3107, 1, !dbg !66
  %3110 = extractvalue { i32, i32, i32, i32 } %3107, 2, !dbg !66
  %3111 = extractvalue { i32, i32, i32, i32 } %3107, 3, !dbg !66
  %3112 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %783) #2, !dbg !66
  %3113 = extractvalue { i32, i32, i32, i32 } %3112, 0, !dbg !66
  %3114 = extractvalue { i32, i32, i32, i32 } %3112, 1, !dbg !66
  %3115 = extractvalue { i32, i32, i32, i32 } %3112, 2, !dbg !66
  %3116 = extractvalue { i32, i32, i32, i32 } %3112, 3, !dbg !66
  %3117 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %786) #2, !dbg !66
  %3118 = extractvalue { i32, i32, i32, i32 } %3117, 0, !dbg !66
  %3119 = extractvalue { i32, i32, i32, i32 } %3117, 1, !dbg !66
  %3120 = extractvalue { i32, i32, i32, i32 } %3117, 2, !dbg !66
  %3121 = extractvalue { i32, i32, i32, i32 } %3117, 3, !dbg !66
  %3122 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %789) #2, !dbg !66
  %3123 = extractvalue { i32, i32, i32, i32 } %3122, 0, !dbg !66
  %3124 = extractvalue { i32, i32, i32, i32 } %3122, 1, !dbg !66
  %3125 = extractvalue { i32, i32, i32, i32 } %3122, 2, !dbg !66
  %3126 = extractvalue { i32, i32, i32, i32 } %3122, 3, !dbg !66
  %3127 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %792) #2, !dbg !66
  %3128 = extractvalue { i32, i32, i32, i32 } %3127, 0, !dbg !66
  %3129 = extractvalue { i32, i32, i32, i32 } %3127, 1, !dbg !66
  %3130 = extractvalue { i32, i32, i32, i32 } %3127, 2, !dbg !66
  %3131 = extractvalue { i32, i32, i32, i32 } %3127, 3, !dbg !66
  %3132 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %795) #2, !dbg !66
  %3133 = extractvalue { i32, i32, i32, i32 } %3132, 0, !dbg !66
  %3134 = extractvalue { i32, i32, i32, i32 } %3132, 1, !dbg !66
  %3135 = extractvalue { i32, i32, i32, i32 } %3132, 2, !dbg !66
  %3136 = extractvalue { i32, i32, i32, i32 } %3132, 3, !dbg !66
  %3137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %798) #2, !dbg !66
  %3138 = extractvalue { i32, i32, i32, i32 } %3137, 0, !dbg !66
  %3139 = extractvalue { i32, i32, i32, i32 } %3137, 1, !dbg !66
  %3140 = extractvalue { i32, i32, i32, i32 } %3137, 2, !dbg !66
  %3141 = extractvalue { i32, i32, i32, i32 } %3137, 3, !dbg !66
  %3142 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %801) #2, !dbg !66
  %3143 = extractvalue { i32, i32, i32, i32 } %3142, 0, !dbg !66
  %3144 = extractvalue { i32, i32, i32, i32 } %3142, 1, !dbg !66
  %3145 = extractvalue { i32, i32, i32, i32 } %3142, 2, !dbg !66
  %3146 = extractvalue { i32, i32, i32, i32 } %3142, 3, !dbg !66
  %3147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %804) #2, !dbg !66
  %3148 = extractvalue { i32, i32, i32, i32 } %3147, 0, !dbg !66
  %3149 = extractvalue { i32, i32, i32, i32 } %3147, 1, !dbg !66
  %3150 = extractvalue { i32, i32, i32, i32 } %3147, 2, !dbg !66
  %3151 = extractvalue { i32, i32, i32, i32 } %3147, 3, !dbg !66
  %3152 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %807) #2, !dbg !66
  %3153 = extractvalue { i32, i32, i32, i32 } %3152, 0, !dbg !66
  %3154 = extractvalue { i32, i32, i32, i32 } %3152, 1, !dbg !66
  %3155 = extractvalue { i32, i32, i32, i32 } %3152, 2, !dbg !66
  %3156 = extractvalue { i32, i32, i32, i32 } %3152, 3, !dbg !66
  %3157 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %810) #2, !dbg !66
  %3158 = extractvalue { i32, i32, i32, i32 } %3157, 0, !dbg !66
  %3159 = extractvalue { i32, i32, i32, i32 } %3157, 1, !dbg !66
  %3160 = extractvalue { i32, i32, i32, i32 } %3157, 2, !dbg !66
  %3161 = extractvalue { i32, i32, i32, i32 } %3157, 3, !dbg !66
  %3162 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %813) #2, !dbg !66
  %3163 = extractvalue { i32, i32, i32, i32 } %3162, 0, !dbg !66
  %3164 = extractvalue { i32, i32, i32, i32 } %3162, 1, !dbg !66
  %3165 = extractvalue { i32, i32, i32, i32 } %3162, 2, !dbg !66
  %3166 = extractvalue { i32, i32, i32, i32 } %3162, 3, !dbg !66
  %3167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2742, float %2743, float %2744, float %2745, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3088, i32 %3089) #2, !dbg !67
  %3168 = extractvalue { float, float, float, float } %3167, 0, !dbg !67
  %3169 = extractvalue { float, float, float, float } %3167, 1, !dbg !67
  %3170 = extractvalue { float, float, float, float } %3167, 2, !dbg !67
  %3171 = extractvalue { float, float, float, float } %3167, 3, !dbg !67
  %3172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2746, float %2747, float %2748, float %2749, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3098, i32 %3099) #2, !dbg !67
  %3173 = extractvalue { float, float, float, float } %3172, 0, !dbg !67
  %3174 = extractvalue { float, float, float, float } %3172, 1, !dbg !67
  %3175 = extractvalue { float, float, float, float } %3172, 2, !dbg !67
  %3176 = extractvalue { float, float, float, float } %3172, 3, !dbg !67
  %3177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2750, float %2751, float %2752, float %2753, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3108, i32 %3109) #2, !dbg !67
  %3178 = extractvalue { float, float, float, float } %3177, 0, !dbg !67
  %3179 = extractvalue { float, float, float, float } %3177, 1, !dbg !67
  %3180 = extractvalue { float, float, float, float } %3177, 2, !dbg !67
  %3181 = extractvalue { float, float, float, float } %3177, 3, !dbg !67
  %3182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2754, float %2755, float %2756, float %2757, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3118, i32 %3119) #2, !dbg !67
  %3183 = extractvalue { float, float, float, float } %3182, 0, !dbg !67
  %3184 = extractvalue { float, float, float, float } %3182, 1, !dbg !67
  %3185 = extractvalue { float, float, float, float } %3182, 2, !dbg !67
  %3186 = extractvalue { float, float, float, float } %3182, 3, !dbg !67
  %3187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2758, float %2759, float %2760, float %2761, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3128, i32 %3129) #2, !dbg !67
  %3188 = extractvalue { float, float, float, float } %3187, 0, !dbg !67
  %3189 = extractvalue { float, float, float, float } %3187, 1, !dbg !67
  %3190 = extractvalue { float, float, float, float } %3187, 2, !dbg !67
  %3191 = extractvalue { float, float, float, float } %3187, 3, !dbg !67
  %3192 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2762, float %2763, float %2764, float %2765, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3138, i32 %3139) #2, !dbg !67
  %3193 = extractvalue { float, float, float, float } %3192, 0, !dbg !67
  %3194 = extractvalue { float, float, float, float } %3192, 1, !dbg !67
  %3195 = extractvalue { float, float, float, float } %3192, 2, !dbg !67
  %3196 = extractvalue { float, float, float, float } %3192, 3, !dbg !67
  %3197 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2766, float %2767, float %2768, float %2769, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3148, i32 %3149) #2, !dbg !67
  %3198 = extractvalue { float, float, float, float } %3197, 0, !dbg !67
  %3199 = extractvalue { float, float, float, float } %3197, 1, !dbg !67
  %3200 = extractvalue { float, float, float, float } %3197, 2, !dbg !67
  %3201 = extractvalue { float, float, float, float } %3197, 3, !dbg !67
  %3202 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2770, float %2771, float %2772, float %2773, i32 %3034, i32 %3035, i32 %3036, i32 %3037, i32 %3158, i32 %3159) #2, !dbg !67
  %3203 = extractvalue { float, float, float, float } %3202, 0, !dbg !67
  %3204 = extractvalue { float, float, float, float } %3202, 1, !dbg !67
  %3205 = extractvalue { float, float, float, float } %3202, 2, !dbg !67
  %3206 = extractvalue { float, float, float, float } %3202, 3, !dbg !67
  %3207 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2774, float %2775, float %2776, float %2777, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3088, i32 %3089) #2, !dbg !67
  %3208 = extractvalue { float, float, float, float } %3207, 0, !dbg !67
  %3209 = extractvalue { float, float, float, float } %3207, 1, !dbg !67
  %3210 = extractvalue { float, float, float, float } %3207, 2, !dbg !67
  %3211 = extractvalue { float, float, float, float } %3207, 3, !dbg !67
  %3212 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2778, float %2779, float %2780, float %2781, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3098, i32 %3099) #2, !dbg !67
  %3213 = extractvalue { float, float, float, float } %3212, 0, !dbg !67
  %3214 = extractvalue { float, float, float, float } %3212, 1, !dbg !67
  %3215 = extractvalue { float, float, float, float } %3212, 2, !dbg !67
  %3216 = extractvalue { float, float, float, float } %3212, 3, !dbg !67
  %3217 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2782, float %2783, float %2784, float %2785, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3108, i32 %3109) #2, !dbg !67
  %3218 = extractvalue { float, float, float, float } %3217, 0, !dbg !67
  %3219 = extractvalue { float, float, float, float } %3217, 1, !dbg !67
  %3220 = extractvalue { float, float, float, float } %3217, 2, !dbg !67
  %3221 = extractvalue { float, float, float, float } %3217, 3, !dbg !67
  %3222 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2786, float %2787, float %2788, float %2789, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3118, i32 %3119) #2, !dbg !67
  %3223 = extractvalue { float, float, float, float } %3222, 0, !dbg !67
  %3224 = extractvalue { float, float, float, float } %3222, 1, !dbg !67
  %3225 = extractvalue { float, float, float, float } %3222, 2, !dbg !67
  %3226 = extractvalue { float, float, float, float } %3222, 3, !dbg !67
  %3227 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2790, float %2791, float %2792, float %2793, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3128, i32 %3129) #2, !dbg !67
  %3228 = extractvalue { float, float, float, float } %3227, 0, !dbg !67
  %3229 = extractvalue { float, float, float, float } %3227, 1, !dbg !67
  %3230 = extractvalue { float, float, float, float } %3227, 2, !dbg !67
  %3231 = extractvalue { float, float, float, float } %3227, 3, !dbg !67
  %3232 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2794, float %2795, float %2796, float %2797, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3138, i32 %3139) #2, !dbg !67
  %3233 = extractvalue { float, float, float, float } %3232, 0, !dbg !67
  %3234 = extractvalue { float, float, float, float } %3232, 1, !dbg !67
  %3235 = extractvalue { float, float, float, float } %3232, 2, !dbg !67
  %3236 = extractvalue { float, float, float, float } %3232, 3, !dbg !67
  %3237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2798, float %2799, float %2800, float %2801, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3148, i32 %3149) #2, !dbg !67
  %3238 = extractvalue { float, float, float, float } %3237, 0, !dbg !67
  %3239 = extractvalue { float, float, float, float } %3237, 1, !dbg !67
  %3240 = extractvalue { float, float, float, float } %3237, 2, !dbg !67
  %3241 = extractvalue { float, float, float, float } %3237, 3, !dbg !67
  %3242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2802, float %2803, float %2804, float %2805, i32 %3062, i32 %3063, i32 %3064, i32 %3065, i32 %3158, i32 %3159) #2, !dbg !67
  %3243 = extractvalue { float, float, float, float } %3242, 0, !dbg !67
  %3244 = extractvalue { float, float, float, float } %3242, 1, !dbg !67
  %3245 = extractvalue { float, float, float, float } %3242, 2, !dbg !67
  %3246 = extractvalue { float, float, float, float } %3242, 3, !dbg !67
  %3247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3168, float %3169, float %3170, float %3171, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3090, i32 %3091) #2, !dbg !67
  %3248 = extractvalue { float, float, float, float } %3247, 0, !dbg !67
  %3249 = extractvalue { float, float, float, float } %3247, 1, !dbg !67
  %3250 = extractvalue { float, float, float, float } %3247, 2, !dbg !67
  %3251 = extractvalue { float, float, float, float } %3247, 3, !dbg !67
  %3252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3173, float %3174, float %3175, float %3176, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3100, i32 %3101) #2, !dbg !67
  %3253 = extractvalue { float, float, float, float } %3252, 0, !dbg !67
  %3254 = extractvalue { float, float, float, float } %3252, 1, !dbg !67
  %3255 = extractvalue { float, float, float, float } %3252, 2, !dbg !67
  %3256 = extractvalue { float, float, float, float } %3252, 3, !dbg !67
  %3257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3178, float %3179, float %3180, float %3181, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3110, i32 %3111) #2, !dbg !67
  %3258 = extractvalue { float, float, float, float } %3257, 0, !dbg !67
  %3259 = extractvalue { float, float, float, float } %3257, 1, !dbg !67
  %3260 = extractvalue { float, float, float, float } %3257, 2, !dbg !67
  %3261 = extractvalue { float, float, float, float } %3257, 3, !dbg !67
  %3262 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3183, float %3184, float %3185, float %3186, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3120, i32 %3121) #2, !dbg !67
  %3263 = extractvalue { float, float, float, float } %3262, 0, !dbg !67
  %3264 = extractvalue { float, float, float, float } %3262, 1, !dbg !67
  %3265 = extractvalue { float, float, float, float } %3262, 2, !dbg !67
  %3266 = extractvalue { float, float, float, float } %3262, 3, !dbg !67
  %3267 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3188, float %3189, float %3190, float %3191, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3130, i32 %3131) #2, !dbg !67
  %3268 = extractvalue { float, float, float, float } %3267, 0, !dbg !67
  %3269 = extractvalue { float, float, float, float } %3267, 1, !dbg !67
  %3270 = extractvalue { float, float, float, float } %3267, 2, !dbg !67
  %3271 = extractvalue { float, float, float, float } %3267, 3, !dbg !67
  %3272 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3193, float %3194, float %3195, float %3196, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3140, i32 %3141) #2, !dbg !67
  %3273 = extractvalue { float, float, float, float } %3272, 0, !dbg !67
  %3274 = extractvalue { float, float, float, float } %3272, 1, !dbg !67
  %3275 = extractvalue { float, float, float, float } %3272, 2, !dbg !67
  %3276 = extractvalue { float, float, float, float } %3272, 3, !dbg !67
  %3277 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3198, float %3199, float %3200, float %3201, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3150, i32 %3151) #2, !dbg !67
  %3278 = extractvalue { float, float, float, float } %3277, 0, !dbg !67
  %3279 = extractvalue { float, float, float, float } %3277, 1, !dbg !67
  %3280 = extractvalue { float, float, float, float } %3277, 2, !dbg !67
  %3281 = extractvalue { float, float, float, float } %3277, 3, !dbg !67
  %3282 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3203, float %3204, float %3205, float %3206, i32 %3041, i32 %3042, i32 %3043, i32 %3044, i32 %3160, i32 %3161) #2, !dbg !67
  %3283 = extractvalue { float, float, float, float } %3282, 0, !dbg !67
  %3284 = extractvalue { float, float, float, float } %3282, 1, !dbg !67
  %3285 = extractvalue { float, float, float, float } %3282, 2, !dbg !67
  %3286 = extractvalue { float, float, float, float } %3282, 3, !dbg !67
  %3287 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3208, float %3209, float %3210, float %3211, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3090, i32 %3091) #2, !dbg !67
  %3288 = extractvalue { float, float, float, float } %3287, 0, !dbg !67
  %3289 = extractvalue { float, float, float, float } %3287, 1, !dbg !67
  %3290 = extractvalue { float, float, float, float } %3287, 2, !dbg !67
  %3291 = extractvalue { float, float, float, float } %3287, 3, !dbg !67
  %3292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3213, float %3214, float %3215, float %3216, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3100, i32 %3101) #2, !dbg !67
  %3293 = extractvalue { float, float, float, float } %3292, 0, !dbg !67
  %3294 = extractvalue { float, float, float, float } %3292, 1, !dbg !67
  %3295 = extractvalue { float, float, float, float } %3292, 2, !dbg !67
  %3296 = extractvalue { float, float, float, float } %3292, 3, !dbg !67
  %3297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3218, float %3219, float %3220, float %3221, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3110, i32 %3111) #2, !dbg !67
  %3298 = extractvalue { float, float, float, float } %3297, 0, !dbg !67
  %3299 = extractvalue { float, float, float, float } %3297, 1, !dbg !67
  %3300 = extractvalue { float, float, float, float } %3297, 2, !dbg !67
  %3301 = extractvalue { float, float, float, float } %3297, 3, !dbg !67
  %3302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3223, float %3224, float %3225, float %3226, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3120, i32 %3121) #2, !dbg !67
  %3303 = extractvalue { float, float, float, float } %3302, 0, !dbg !67
  %3304 = extractvalue { float, float, float, float } %3302, 1, !dbg !67
  %3305 = extractvalue { float, float, float, float } %3302, 2, !dbg !67
  %3306 = extractvalue { float, float, float, float } %3302, 3, !dbg !67
  %3307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3228, float %3229, float %3230, float %3231, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3130, i32 %3131) #2, !dbg !67
  %3308 = extractvalue { float, float, float, float } %3307, 0, !dbg !67
  %3309 = extractvalue { float, float, float, float } %3307, 1, !dbg !67
  %3310 = extractvalue { float, float, float, float } %3307, 2, !dbg !67
  %3311 = extractvalue { float, float, float, float } %3307, 3, !dbg !67
  %3312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3233, float %3234, float %3235, float %3236, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3140, i32 %3141) #2, !dbg !67
  %3313 = extractvalue { float, float, float, float } %3312, 0, !dbg !67
  %3314 = extractvalue { float, float, float, float } %3312, 1, !dbg !67
  %3315 = extractvalue { float, float, float, float } %3312, 2, !dbg !67
  %3316 = extractvalue { float, float, float, float } %3312, 3, !dbg !67
  %3317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3238, float %3239, float %3240, float %3241, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3150, i32 %3151) #2, !dbg !67
  %3318 = extractvalue { float, float, float, float } %3317, 0, !dbg !67
  %3319 = extractvalue { float, float, float, float } %3317, 1, !dbg !67
  %3320 = extractvalue { float, float, float, float } %3317, 2, !dbg !67
  %3321 = extractvalue { float, float, float, float } %3317, 3, !dbg !67
  %3322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3243, float %3244, float %3245, float %3246, i32 %3069, i32 %3070, i32 %3071, i32 %3072, i32 %3160, i32 %3161) #2, !dbg !67
  %3323 = extractvalue { float, float, float, float } %3322, 0, !dbg !67
  %3324 = extractvalue { float, float, float, float } %3322, 1, !dbg !67
  %3325 = extractvalue { float, float, float, float } %3322, 2, !dbg !67
  %3326 = extractvalue { float, float, float, float } %3322, 3, !dbg !67
  %3327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3248, float %3249, float %3250, float %3251, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3093, i32 %3094) #2, !dbg !67
  %3328 = extractvalue { float, float, float, float } %3327, 0, !dbg !67
  %3329 = extractvalue { float, float, float, float } %3327, 1, !dbg !67
  %3330 = extractvalue { float, float, float, float } %3327, 2, !dbg !67
  %3331 = extractvalue { float, float, float, float } %3327, 3, !dbg !67
  %3332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3253, float %3254, float %3255, float %3256, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3103, i32 %3104) #2, !dbg !67
  %3333 = extractvalue { float, float, float, float } %3332, 0, !dbg !67
  %3334 = extractvalue { float, float, float, float } %3332, 1, !dbg !67
  %3335 = extractvalue { float, float, float, float } %3332, 2, !dbg !67
  %3336 = extractvalue { float, float, float, float } %3332, 3, !dbg !67
  %3337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3258, float %3259, float %3260, float %3261, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3113, i32 %3114) #2, !dbg !67
  %3338 = extractvalue { float, float, float, float } %3337, 0, !dbg !67
  %3339 = extractvalue { float, float, float, float } %3337, 1, !dbg !67
  %3340 = extractvalue { float, float, float, float } %3337, 2, !dbg !67
  %3341 = extractvalue { float, float, float, float } %3337, 3, !dbg !67
  %3342 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3263, float %3264, float %3265, float %3266, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3123, i32 %3124) #2, !dbg !67
  %3343 = extractvalue { float, float, float, float } %3342, 0, !dbg !67
  %3344 = extractvalue { float, float, float, float } %3342, 1, !dbg !67
  %3345 = extractvalue { float, float, float, float } %3342, 2, !dbg !67
  %3346 = extractvalue { float, float, float, float } %3342, 3, !dbg !67
  %3347 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3268, float %3269, float %3270, float %3271, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3133, i32 %3134) #2, !dbg !67
  %3348 = extractvalue { float, float, float, float } %3347, 0, !dbg !67
  %3349 = extractvalue { float, float, float, float } %3347, 1, !dbg !67
  %3350 = extractvalue { float, float, float, float } %3347, 2, !dbg !67
  %3351 = extractvalue { float, float, float, float } %3347, 3, !dbg !67
  %3352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3273, float %3274, float %3275, float %3276, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3143, i32 %3144) #2, !dbg !67
  %3353 = extractvalue { float, float, float, float } %3352, 0, !dbg !67
  %3354 = extractvalue { float, float, float, float } %3352, 1, !dbg !67
  %3355 = extractvalue { float, float, float, float } %3352, 2, !dbg !67
  %3356 = extractvalue { float, float, float, float } %3352, 3, !dbg !67
  %3357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3278, float %3279, float %3280, float %3281, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3153, i32 %3154) #2, !dbg !67
  %3358 = extractvalue { float, float, float, float } %3357, 0, !dbg !67
  %3359 = extractvalue { float, float, float, float } %3357, 1, !dbg !67
  %3360 = extractvalue { float, float, float, float } %3357, 2, !dbg !67
  %3361 = extractvalue { float, float, float, float } %3357, 3, !dbg !67
  %3362 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3283, float %3284, float %3285, float %3286, i32 %3048, i32 %3049, i32 %3050, i32 %3051, i32 %3163, i32 %3164) #2, !dbg !67
  %3363 = extractvalue { float, float, float, float } %3362, 0, !dbg !67
  %3364 = extractvalue { float, float, float, float } %3362, 1, !dbg !67
  %3365 = extractvalue { float, float, float, float } %3362, 2, !dbg !67
  %3366 = extractvalue { float, float, float, float } %3362, 3, !dbg !67
  %3367 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3288, float %3289, float %3290, float %3291, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3093, i32 %3094) #2, !dbg !67
  %3368 = extractvalue { float, float, float, float } %3367, 0, !dbg !67
  %3369 = extractvalue { float, float, float, float } %3367, 1, !dbg !67
  %3370 = extractvalue { float, float, float, float } %3367, 2, !dbg !67
  %3371 = extractvalue { float, float, float, float } %3367, 3, !dbg !67
  %3372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3293, float %3294, float %3295, float %3296, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3103, i32 %3104) #2, !dbg !67
  %3373 = extractvalue { float, float, float, float } %3372, 0, !dbg !67
  %3374 = extractvalue { float, float, float, float } %3372, 1, !dbg !67
  %3375 = extractvalue { float, float, float, float } %3372, 2, !dbg !67
  %3376 = extractvalue { float, float, float, float } %3372, 3, !dbg !67
  %3377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3298, float %3299, float %3300, float %3301, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3113, i32 %3114) #2, !dbg !67
  %3378 = extractvalue { float, float, float, float } %3377, 0, !dbg !67
  %3379 = extractvalue { float, float, float, float } %3377, 1, !dbg !67
  %3380 = extractvalue { float, float, float, float } %3377, 2, !dbg !67
  %3381 = extractvalue { float, float, float, float } %3377, 3, !dbg !67
  %3382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3303, float %3304, float %3305, float %3306, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3123, i32 %3124) #2, !dbg !67
  %3383 = extractvalue { float, float, float, float } %3382, 0, !dbg !67
  %3384 = extractvalue { float, float, float, float } %3382, 1, !dbg !67
  %3385 = extractvalue { float, float, float, float } %3382, 2, !dbg !67
  %3386 = extractvalue { float, float, float, float } %3382, 3, !dbg !67
  %3387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3308, float %3309, float %3310, float %3311, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3133, i32 %3134) #2, !dbg !67
  %3388 = extractvalue { float, float, float, float } %3387, 0, !dbg !67
  %3389 = extractvalue { float, float, float, float } %3387, 1, !dbg !67
  %3390 = extractvalue { float, float, float, float } %3387, 2, !dbg !67
  %3391 = extractvalue { float, float, float, float } %3387, 3, !dbg !67
  %3392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3313, float %3314, float %3315, float %3316, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3143, i32 %3144) #2, !dbg !67
  %3393 = extractvalue { float, float, float, float } %3392, 0, !dbg !67
  %3394 = extractvalue { float, float, float, float } %3392, 1, !dbg !67
  %3395 = extractvalue { float, float, float, float } %3392, 2, !dbg !67
  %3396 = extractvalue { float, float, float, float } %3392, 3, !dbg !67
  %3397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3318, float %3319, float %3320, float %3321, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3153, i32 %3154) #2, !dbg !67
  %3398 = extractvalue { float, float, float, float } %3397, 0, !dbg !67
  %3399 = extractvalue { float, float, float, float } %3397, 1, !dbg !67
  %3400 = extractvalue { float, float, float, float } %3397, 2, !dbg !67
  %3401 = extractvalue { float, float, float, float } %3397, 3, !dbg !67
  %3402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3323, float %3324, float %3325, float %3326, i32 %3076, i32 %3077, i32 %3078, i32 %3079, i32 %3163, i32 %3164) #2, !dbg !67
  %3403 = extractvalue { float, float, float, float } %3402, 0, !dbg !67
  %3404 = extractvalue { float, float, float, float } %3402, 1, !dbg !67
  %3405 = extractvalue { float, float, float, float } %3402, 2, !dbg !67
  %3406 = extractvalue { float, float, float, float } %3402, 3, !dbg !67
  %3407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3328, float %3329, float %3330, float %3331, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3095, i32 %3096) #2, !dbg !67
  %3408 = extractvalue { float, float, float, float } %3407, 0, !dbg !67
  %3409 = extractvalue { float, float, float, float } %3407, 1, !dbg !67
  %3410 = extractvalue { float, float, float, float } %3407, 2, !dbg !67
  %3411 = extractvalue { float, float, float, float } %3407, 3, !dbg !67
  %3412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3333, float %3334, float %3335, float %3336, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3105, i32 %3106) #2, !dbg !67
  %3413 = extractvalue { float, float, float, float } %3412, 0, !dbg !67
  %3414 = extractvalue { float, float, float, float } %3412, 1, !dbg !67
  %3415 = extractvalue { float, float, float, float } %3412, 2, !dbg !67
  %3416 = extractvalue { float, float, float, float } %3412, 3, !dbg !67
  %3417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3338, float %3339, float %3340, float %3341, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3115, i32 %3116) #2, !dbg !67
  %3418 = extractvalue { float, float, float, float } %3417, 0, !dbg !67
  %3419 = extractvalue { float, float, float, float } %3417, 1, !dbg !67
  %3420 = extractvalue { float, float, float, float } %3417, 2, !dbg !67
  %3421 = extractvalue { float, float, float, float } %3417, 3, !dbg !67
  %3422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3343, float %3344, float %3345, float %3346, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3125, i32 %3126) #2, !dbg !67
  %3423 = extractvalue { float, float, float, float } %3422, 0, !dbg !67
  %3424 = extractvalue { float, float, float, float } %3422, 1, !dbg !67
  %3425 = extractvalue { float, float, float, float } %3422, 2, !dbg !67
  %3426 = extractvalue { float, float, float, float } %3422, 3, !dbg !67
  %3427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3348, float %3349, float %3350, float %3351, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3135, i32 %3136) #2, !dbg !67
  %3428 = extractvalue { float, float, float, float } %3427, 0, !dbg !67
  %3429 = extractvalue { float, float, float, float } %3427, 1, !dbg !67
  %3430 = extractvalue { float, float, float, float } %3427, 2, !dbg !67
  %3431 = extractvalue { float, float, float, float } %3427, 3, !dbg !67
  %3432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3353, float %3354, float %3355, float %3356, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3145, i32 %3146) #2, !dbg !67
  %3433 = extractvalue { float, float, float, float } %3432, 0, !dbg !67
  %3434 = extractvalue { float, float, float, float } %3432, 1, !dbg !67
  %3435 = extractvalue { float, float, float, float } %3432, 2, !dbg !67
  %3436 = extractvalue { float, float, float, float } %3432, 3, !dbg !67
  %3437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3358, float %3359, float %3360, float %3361, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3155, i32 %3156) #2, !dbg !67
  %3438 = extractvalue { float, float, float, float } %3437, 0, !dbg !67
  %3439 = extractvalue { float, float, float, float } %3437, 1, !dbg !67
  %3440 = extractvalue { float, float, float, float } %3437, 2, !dbg !67
  %3441 = extractvalue { float, float, float, float } %3437, 3, !dbg !67
  %3442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3363, float %3364, float %3365, float %3366, i32 %3055, i32 %3056, i32 %3057, i32 %3058, i32 %3165, i32 %3166) #2, !dbg !67
  %3443 = extractvalue { float, float, float, float } %3442, 0, !dbg !67
  %3444 = extractvalue { float, float, float, float } %3442, 1, !dbg !67
  %3445 = extractvalue { float, float, float, float } %3442, 2, !dbg !67
  %3446 = extractvalue { float, float, float, float } %3442, 3, !dbg !67
  %3447 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3368, float %3369, float %3370, float %3371, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3095, i32 %3096) #2, !dbg !67
  %3448 = extractvalue { float, float, float, float } %3447, 0, !dbg !67
  %3449 = extractvalue { float, float, float, float } %3447, 1, !dbg !67
  %3450 = extractvalue { float, float, float, float } %3447, 2, !dbg !67
  %3451 = extractvalue { float, float, float, float } %3447, 3, !dbg !67
  %3452 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3373, float %3374, float %3375, float %3376, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3105, i32 %3106) #2, !dbg !67
  %3453 = extractvalue { float, float, float, float } %3452, 0, !dbg !67
  %3454 = extractvalue { float, float, float, float } %3452, 1, !dbg !67
  %3455 = extractvalue { float, float, float, float } %3452, 2, !dbg !67
  %3456 = extractvalue { float, float, float, float } %3452, 3, !dbg !67
  %3457 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3378, float %3379, float %3380, float %3381, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3115, i32 %3116) #2, !dbg !67
  %3458 = extractvalue { float, float, float, float } %3457, 0, !dbg !67
  %3459 = extractvalue { float, float, float, float } %3457, 1, !dbg !67
  %3460 = extractvalue { float, float, float, float } %3457, 2, !dbg !67
  %3461 = extractvalue { float, float, float, float } %3457, 3, !dbg !67
  %3462 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3383, float %3384, float %3385, float %3386, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3125, i32 %3126) #2, !dbg !67
  %3463 = extractvalue { float, float, float, float } %3462, 0, !dbg !67
  %3464 = extractvalue { float, float, float, float } %3462, 1, !dbg !67
  %3465 = extractvalue { float, float, float, float } %3462, 2, !dbg !67
  %3466 = extractvalue { float, float, float, float } %3462, 3, !dbg !67
  %3467 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3388, float %3389, float %3390, float %3391, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3135, i32 %3136) #2, !dbg !67
  %3468 = extractvalue { float, float, float, float } %3467, 0, !dbg !67
  %3469 = extractvalue { float, float, float, float } %3467, 1, !dbg !67
  %3470 = extractvalue { float, float, float, float } %3467, 2, !dbg !67
  %3471 = extractvalue { float, float, float, float } %3467, 3, !dbg !67
  %3472 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3393, float %3394, float %3395, float %3396, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3145, i32 %3146) #2, !dbg !67
  %3473 = extractvalue { float, float, float, float } %3472, 0, !dbg !67
  %3474 = extractvalue { float, float, float, float } %3472, 1, !dbg !67
  %3475 = extractvalue { float, float, float, float } %3472, 2, !dbg !67
  %3476 = extractvalue { float, float, float, float } %3472, 3, !dbg !67
  %3477 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3398, float %3399, float %3400, float %3401, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3155, i32 %3156) #2, !dbg !67
  %3478 = extractvalue { float, float, float, float } %3477, 0, !dbg !67
  %3479 = extractvalue { float, float, float, float } %3477, 1, !dbg !67
  %3480 = extractvalue { float, float, float, float } %3477, 2, !dbg !67
  %3481 = extractvalue { float, float, float, float } %3477, 3, !dbg !67
  %3482 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3403, float %3404, float %3405, float %3406, i32 %3083, i32 %3084, i32 %3085, i32 %3086, i32 %3165, i32 %3166) #2, !dbg !67
  %3483 = extractvalue { float, float, float, float } %3482, 0, !dbg !67
  %3484 = extractvalue { float, float, float, float } %3482, 1, !dbg !67
  %3485 = extractvalue { float, float, float, float } %3482, 2, !dbg !67
  %3486 = extractvalue { float, float, float, float } %3482, 3, !dbg !67
  %3487 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %1388, !dbg !40
  %3488 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %869, !dbg !40
  %3489 = ptrtoint ptr addrspace(3) %3488 to i32, !dbg !40
  %3490 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3489) #2, !dbg !40
  %3491 = extractvalue { i32, i32, i32, i32 } %3490, 0, !dbg !40
  %3492 = extractvalue { i32, i32, i32, i32 } %3490, 1, !dbg !40
  %3493 = extractvalue { i32, i32, i32, i32 } %3490, 2, !dbg !40
  %3494 = extractvalue { i32, i32, i32, i32 } %3490, 3, !dbg !40
  %3495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %870, !dbg !40
  %3496 = ptrtoint ptr addrspace(3) %3495 to i32, !dbg !40
  %3497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3496) #2, !dbg !40
  %3498 = extractvalue { i32, i32, i32, i32 } %3497, 0, !dbg !40
  %3499 = extractvalue { i32, i32, i32, i32 } %3497, 1, !dbg !40
  %3500 = extractvalue { i32, i32, i32, i32 } %3497, 2, !dbg !40
  %3501 = extractvalue { i32, i32, i32, i32 } %3497, 3, !dbg !40
  %3502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %871, !dbg !40
  %3503 = ptrtoint ptr addrspace(3) %3502 to i32, !dbg !40
  %3504 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3503) #2, !dbg !40
  %3505 = extractvalue { i32, i32, i32, i32 } %3504, 0, !dbg !40
  %3506 = extractvalue { i32, i32, i32, i32 } %3504, 1, !dbg !40
  %3507 = extractvalue { i32, i32, i32, i32 } %3504, 2, !dbg !40
  %3508 = extractvalue { i32, i32, i32, i32 } %3504, 3, !dbg !40
  %3509 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %872, !dbg !40
  %3510 = ptrtoint ptr addrspace(3) %3509 to i32, !dbg !40
  %3511 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3510) #2, !dbg !40
  %3512 = extractvalue { i32, i32, i32, i32 } %3511, 0, !dbg !40
  %3513 = extractvalue { i32, i32, i32, i32 } %3511, 1, !dbg !40
  %3514 = extractvalue { i32, i32, i32, i32 } %3511, 2, !dbg !40
  %3515 = extractvalue { i32, i32, i32, i32 } %3511, 3, !dbg !40
  %3516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %873, !dbg !40
  %3517 = ptrtoint ptr addrspace(3) %3516 to i32, !dbg !40
  %3518 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3517) #2, !dbg !40
  %3519 = extractvalue { i32, i32, i32, i32 } %3518, 0, !dbg !40
  %3520 = extractvalue { i32, i32, i32, i32 } %3518, 1, !dbg !40
  %3521 = extractvalue { i32, i32, i32, i32 } %3518, 2, !dbg !40
  %3522 = extractvalue { i32, i32, i32, i32 } %3518, 3, !dbg !40
  %3523 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %874, !dbg !40
  %3524 = ptrtoint ptr addrspace(3) %3523 to i32, !dbg !40
  %3525 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3524) #2, !dbg !40
  %3526 = extractvalue { i32, i32, i32, i32 } %3525, 0, !dbg !40
  %3527 = extractvalue { i32, i32, i32, i32 } %3525, 1, !dbg !40
  %3528 = extractvalue { i32, i32, i32, i32 } %3525, 2, !dbg !40
  %3529 = extractvalue { i32, i32, i32, i32 } %3525, 3, !dbg !40
  %3530 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %875, !dbg !40
  %3531 = ptrtoint ptr addrspace(3) %3530 to i32, !dbg !40
  %3532 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3531) #2, !dbg !40
  %3533 = extractvalue { i32, i32, i32, i32 } %3532, 0, !dbg !40
  %3534 = extractvalue { i32, i32, i32, i32 } %3532, 1, !dbg !40
  %3535 = extractvalue { i32, i32, i32, i32 } %3532, 2, !dbg !40
  %3536 = extractvalue { i32, i32, i32, i32 } %3532, 3, !dbg !40
  %3537 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3487, i32 %876, !dbg !40
  %3538 = ptrtoint ptr addrspace(3) %3537 to i32, !dbg !40
  %3539 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3538) #2, !dbg !40
  %3540 = extractvalue { i32, i32, i32, i32 } %3539, 0, !dbg !40
  %3541 = extractvalue { i32, i32, i32, i32 } %3539, 1, !dbg !40
  %3542 = extractvalue { i32, i32, i32, i32 } %3539, 2, !dbg !40
  %3543 = extractvalue { i32, i32, i32, i32 } %3539, 3, !dbg !40
  %3544 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2806, float %2807, float %2808, float %2809, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3088, i32 %3089) #2, !dbg !68
  %3545 = extractvalue { float, float, float, float } %3544, 0, !dbg !68
  %3546 = extractvalue { float, float, float, float } %3544, 1, !dbg !68
  %3547 = extractvalue { float, float, float, float } %3544, 2, !dbg !68
  %3548 = extractvalue { float, float, float, float } %3544, 3, !dbg !68
  %3549 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2810, float %2811, float %2812, float %2813, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3098, i32 %3099) #2, !dbg !68
  %3550 = extractvalue { float, float, float, float } %3549, 0, !dbg !68
  %3551 = extractvalue { float, float, float, float } %3549, 1, !dbg !68
  %3552 = extractvalue { float, float, float, float } %3549, 2, !dbg !68
  %3553 = extractvalue { float, float, float, float } %3549, 3, !dbg !68
  %3554 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2814, float %2815, float %2816, float %2817, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3108, i32 %3109) #2, !dbg !68
  %3555 = extractvalue { float, float, float, float } %3554, 0, !dbg !68
  %3556 = extractvalue { float, float, float, float } %3554, 1, !dbg !68
  %3557 = extractvalue { float, float, float, float } %3554, 2, !dbg !68
  %3558 = extractvalue { float, float, float, float } %3554, 3, !dbg !68
  %3559 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2818, float %2819, float %2820, float %2821, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3118, i32 %3119) #2, !dbg !68
  %3560 = extractvalue { float, float, float, float } %3559, 0, !dbg !68
  %3561 = extractvalue { float, float, float, float } %3559, 1, !dbg !68
  %3562 = extractvalue { float, float, float, float } %3559, 2, !dbg !68
  %3563 = extractvalue { float, float, float, float } %3559, 3, !dbg !68
  %3564 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2822, float %2823, float %2824, float %2825, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3128, i32 %3129) #2, !dbg !68
  %3565 = extractvalue { float, float, float, float } %3564, 0, !dbg !68
  %3566 = extractvalue { float, float, float, float } %3564, 1, !dbg !68
  %3567 = extractvalue { float, float, float, float } %3564, 2, !dbg !68
  %3568 = extractvalue { float, float, float, float } %3564, 3, !dbg !68
  %3569 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2826, float %2827, float %2828, float %2829, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3138, i32 %3139) #2, !dbg !68
  %3570 = extractvalue { float, float, float, float } %3569, 0, !dbg !68
  %3571 = extractvalue { float, float, float, float } %3569, 1, !dbg !68
  %3572 = extractvalue { float, float, float, float } %3569, 2, !dbg !68
  %3573 = extractvalue { float, float, float, float } %3569, 3, !dbg !68
  %3574 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2830, float %2831, float %2832, float %2833, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3148, i32 %3149) #2, !dbg !68
  %3575 = extractvalue { float, float, float, float } %3574, 0, !dbg !68
  %3576 = extractvalue { float, float, float, float } %3574, 1, !dbg !68
  %3577 = extractvalue { float, float, float, float } %3574, 2, !dbg !68
  %3578 = extractvalue { float, float, float, float } %3574, 3, !dbg !68
  %3579 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2834, float %2835, float %2836, float %2837, i32 %3491, i32 %3492, i32 %3493, i32 %3494, i32 %3158, i32 %3159) #2, !dbg !68
  %3580 = extractvalue { float, float, float, float } %3579, 0, !dbg !68
  %3581 = extractvalue { float, float, float, float } %3579, 1, !dbg !68
  %3582 = extractvalue { float, float, float, float } %3579, 2, !dbg !68
  %3583 = extractvalue { float, float, float, float } %3579, 3, !dbg !68
  %3584 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2838, float %2839, float %2840, float %2841, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3088, i32 %3089) #2, !dbg !68
  %3585 = extractvalue { float, float, float, float } %3584, 0, !dbg !68
  %3586 = extractvalue { float, float, float, float } %3584, 1, !dbg !68
  %3587 = extractvalue { float, float, float, float } %3584, 2, !dbg !68
  %3588 = extractvalue { float, float, float, float } %3584, 3, !dbg !68
  %3589 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2842, float %2843, float %2844, float %2845, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3098, i32 %3099) #2, !dbg !68
  %3590 = extractvalue { float, float, float, float } %3589, 0, !dbg !68
  %3591 = extractvalue { float, float, float, float } %3589, 1, !dbg !68
  %3592 = extractvalue { float, float, float, float } %3589, 2, !dbg !68
  %3593 = extractvalue { float, float, float, float } %3589, 3, !dbg !68
  %3594 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2846, float %2847, float %2848, float %2849, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3108, i32 %3109) #2, !dbg !68
  %3595 = extractvalue { float, float, float, float } %3594, 0, !dbg !68
  %3596 = extractvalue { float, float, float, float } %3594, 1, !dbg !68
  %3597 = extractvalue { float, float, float, float } %3594, 2, !dbg !68
  %3598 = extractvalue { float, float, float, float } %3594, 3, !dbg !68
  %3599 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2850, float %2851, float %2852, float %2853, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3118, i32 %3119) #2, !dbg !68
  %3600 = extractvalue { float, float, float, float } %3599, 0, !dbg !68
  %3601 = extractvalue { float, float, float, float } %3599, 1, !dbg !68
  %3602 = extractvalue { float, float, float, float } %3599, 2, !dbg !68
  %3603 = extractvalue { float, float, float, float } %3599, 3, !dbg !68
  %3604 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2854, float %2855, float %2856, float %2857, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3128, i32 %3129) #2, !dbg !68
  %3605 = extractvalue { float, float, float, float } %3604, 0, !dbg !68
  %3606 = extractvalue { float, float, float, float } %3604, 1, !dbg !68
  %3607 = extractvalue { float, float, float, float } %3604, 2, !dbg !68
  %3608 = extractvalue { float, float, float, float } %3604, 3, !dbg !68
  %3609 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2858, float %2859, float %2860, float %2861, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3138, i32 %3139) #2, !dbg !68
  %3610 = extractvalue { float, float, float, float } %3609, 0, !dbg !68
  %3611 = extractvalue { float, float, float, float } %3609, 1, !dbg !68
  %3612 = extractvalue { float, float, float, float } %3609, 2, !dbg !68
  %3613 = extractvalue { float, float, float, float } %3609, 3, !dbg !68
  %3614 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2862, float %2863, float %2864, float %2865, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3148, i32 %3149) #2, !dbg !68
  %3615 = extractvalue { float, float, float, float } %3614, 0, !dbg !68
  %3616 = extractvalue { float, float, float, float } %3614, 1, !dbg !68
  %3617 = extractvalue { float, float, float, float } %3614, 2, !dbg !68
  %3618 = extractvalue { float, float, float, float } %3614, 3, !dbg !68
  %3619 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2866, float %2867, float %2868, float %2869, i32 %3519, i32 %3520, i32 %3521, i32 %3522, i32 %3158, i32 %3159) #2, !dbg !68
  %3620 = extractvalue { float, float, float, float } %3619, 0, !dbg !68
  %3621 = extractvalue { float, float, float, float } %3619, 1, !dbg !68
  %3622 = extractvalue { float, float, float, float } %3619, 2, !dbg !68
  %3623 = extractvalue { float, float, float, float } %3619, 3, !dbg !68
  %3624 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3545, float %3546, float %3547, float %3548, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3090, i32 %3091) #2, !dbg !68
  %3625 = extractvalue { float, float, float, float } %3624, 0, !dbg !68
  %3626 = extractvalue { float, float, float, float } %3624, 1, !dbg !68
  %3627 = extractvalue { float, float, float, float } %3624, 2, !dbg !68
  %3628 = extractvalue { float, float, float, float } %3624, 3, !dbg !68
  %3629 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3550, float %3551, float %3552, float %3553, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3100, i32 %3101) #2, !dbg !68
  %3630 = extractvalue { float, float, float, float } %3629, 0, !dbg !68
  %3631 = extractvalue { float, float, float, float } %3629, 1, !dbg !68
  %3632 = extractvalue { float, float, float, float } %3629, 2, !dbg !68
  %3633 = extractvalue { float, float, float, float } %3629, 3, !dbg !68
  %3634 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3555, float %3556, float %3557, float %3558, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3110, i32 %3111) #2, !dbg !68
  %3635 = extractvalue { float, float, float, float } %3634, 0, !dbg !68
  %3636 = extractvalue { float, float, float, float } %3634, 1, !dbg !68
  %3637 = extractvalue { float, float, float, float } %3634, 2, !dbg !68
  %3638 = extractvalue { float, float, float, float } %3634, 3, !dbg !68
  %3639 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3560, float %3561, float %3562, float %3563, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3120, i32 %3121) #2, !dbg !68
  %3640 = extractvalue { float, float, float, float } %3639, 0, !dbg !68
  %3641 = extractvalue { float, float, float, float } %3639, 1, !dbg !68
  %3642 = extractvalue { float, float, float, float } %3639, 2, !dbg !68
  %3643 = extractvalue { float, float, float, float } %3639, 3, !dbg !68
  %3644 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3565, float %3566, float %3567, float %3568, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3130, i32 %3131) #2, !dbg !68
  %3645 = extractvalue { float, float, float, float } %3644, 0, !dbg !68
  %3646 = extractvalue { float, float, float, float } %3644, 1, !dbg !68
  %3647 = extractvalue { float, float, float, float } %3644, 2, !dbg !68
  %3648 = extractvalue { float, float, float, float } %3644, 3, !dbg !68
  %3649 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3570, float %3571, float %3572, float %3573, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3140, i32 %3141) #2, !dbg !68
  %3650 = extractvalue { float, float, float, float } %3649, 0, !dbg !68
  %3651 = extractvalue { float, float, float, float } %3649, 1, !dbg !68
  %3652 = extractvalue { float, float, float, float } %3649, 2, !dbg !68
  %3653 = extractvalue { float, float, float, float } %3649, 3, !dbg !68
  %3654 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3575, float %3576, float %3577, float %3578, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3150, i32 %3151) #2, !dbg !68
  %3655 = extractvalue { float, float, float, float } %3654, 0, !dbg !68
  %3656 = extractvalue { float, float, float, float } %3654, 1, !dbg !68
  %3657 = extractvalue { float, float, float, float } %3654, 2, !dbg !68
  %3658 = extractvalue { float, float, float, float } %3654, 3, !dbg !68
  %3659 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3580, float %3581, float %3582, float %3583, i32 %3498, i32 %3499, i32 %3500, i32 %3501, i32 %3160, i32 %3161) #2, !dbg !68
  %3660 = extractvalue { float, float, float, float } %3659, 0, !dbg !68
  %3661 = extractvalue { float, float, float, float } %3659, 1, !dbg !68
  %3662 = extractvalue { float, float, float, float } %3659, 2, !dbg !68
  %3663 = extractvalue { float, float, float, float } %3659, 3, !dbg !68
  %3664 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3585, float %3586, float %3587, float %3588, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3090, i32 %3091) #2, !dbg !68
  %3665 = extractvalue { float, float, float, float } %3664, 0, !dbg !68
  %3666 = extractvalue { float, float, float, float } %3664, 1, !dbg !68
  %3667 = extractvalue { float, float, float, float } %3664, 2, !dbg !68
  %3668 = extractvalue { float, float, float, float } %3664, 3, !dbg !68
  %3669 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3590, float %3591, float %3592, float %3593, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3100, i32 %3101) #2, !dbg !68
  %3670 = extractvalue { float, float, float, float } %3669, 0, !dbg !68
  %3671 = extractvalue { float, float, float, float } %3669, 1, !dbg !68
  %3672 = extractvalue { float, float, float, float } %3669, 2, !dbg !68
  %3673 = extractvalue { float, float, float, float } %3669, 3, !dbg !68
  %3674 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3595, float %3596, float %3597, float %3598, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3110, i32 %3111) #2, !dbg !68
  %3675 = extractvalue { float, float, float, float } %3674, 0, !dbg !68
  %3676 = extractvalue { float, float, float, float } %3674, 1, !dbg !68
  %3677 = extractvalue { float, float, float, float } %3674, 2, !dbg !68
  %3678 = extractvalue { float, float, float, float } %3674, 3, !dbg !68
  %3679 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3600, float %3601, float %3602, float %3603, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3120, i32 %3121) #2, !dbg !68
  %3680 = extractvalue { float, float, float, float } %3679, 0, !dbg !68
  %3681 = extractvalue { float, float, float, float } %3679, 1, !dbg !68
  %3682 = extractvalue { float, float, float, float } %3679, 2, !dbg !68
  %3683 = extractvalue { float, float, float, float } %3679, 3, !dbg !68
  %3684 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3605, float %3606, float %3607, float %3608, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3130, i32 %3131) #2, !dbg !68
  %3685 = extractvalue { float, float, float, float } %3684, 0, !dbg !68
  %3686 = extractvalue { float, float, float, float } %3684, 1, !dbg !68
  %3687 = extractvalue { float, float, float, float } %3684, 2, !dbg !68
  %3688 = extractvalue { float, float, float, float } %3684, 3, !dbg !68
  %3689 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3610, float %3611, float %3612, float %3613, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3140, i32 %3141) #2, !dbg !68
  %3690 = extractvalue { float, float, float, float } %3689, 0, !dbg !68
  %3691 = extractvalue { float, float, float, float } %3689, 1, !dbg !68
  %3692 = extractvalue { float, float, float, float } %3689, 2, !dbg !68
  %3693 = extractvalue { float, float, float, float } %3689, 3, !dbg !68
  %3694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3615, float %3616, float %3617, float %3618, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3150, i32 %3151) #2, !dbg !68
  %3695 = extractvalue { float, float, float, float } %3694, 0, !dbg !68
  %3696 = extractvalue { float, float, float, float } %3694, 1, !dbg !68
  %3697 = extractvalue { float, float, float, float } %3694, 2, !dbg !68
  %3698 = extractvalue { float, float, float, float } %3694, 3, !dbg !68
  %3699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3620, float %3621, float %3622, float %3623, i32 %3526, i32 %3527, i32 %3528, i32 %3529, i32 %3160, i32 %3161) #2, !dbg !68
  %3700 = extractvalue { float, float, float, float } %3699, 0, !dbg !68
  %3701 = extractvalue { float, float, float, float } %3699, 1, !dbg !68
  %3702 = extractvalue { float, float, float, float } %3699, 2, !dbg !68
  %3703 = extractvalue { float, float, float, float } %3699, 3, !dbg !68
  %3704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3625, float %3626, float %3627, float %3628, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3093, i32 %3094) #2, !dbg !68
  %3705 = extractvalue { float, float, float, float } %3704, 0, !dbg !68
  %3706 = extractvalue { float, float, float, float } %3704, 1, !dbg !68
  %3707 = extractvalue { float, float, float, float } %3704, 2, !dbg !68
  %3708 = extractvalue { float, float, float, float } %3704, 3, !dbg !68
  %3709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3630, float %3631, float %3632, float %3633, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3103, i32 %3104) #2, !dbg !68
  %3710 = extractvalue { float, float, float, float } %3709, 0, !dbg !68
  %3711 = extractvalue { float, float, float, float } %3709, 1, !dbg !68
  %3712 = extractvalue { float, float, float, float } %3709, 2, !dbg !68
  %3713 = extractvalue { float, float, float, float } %3709, 3, !dbg !68
  %3714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3635, float %3636, float %3637, float %3638, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3113, i32 %3114) #2, !dbg !68
  %3715 = extractvalue { float, float, float, float } %3714, 0, !dbg !68
  %3716 = extractvalue { float, float, float, float } %3714, 1, !dbg !68
  %3717 = extractvalue { float, float, float, float } %3714, 2, !dbg !68
  %3718 = extractvalue { float, float, float, float } %3714, 3, !dbg !68
  %3719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3640, float %3641, float %3642, float %3643, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3123, i32 %3124) #2, !dbg !68
  %3720 = extractvalue { float, float, float, float } %3719, 0, !dbg !68
  %3721 = extractvalue { float, float, float, float } %3719, 1, !dbg !68
  %3722 = extractvalue { float, float, float, float } %3719, 2, !dbg !68
  %3723 = extractvalue { float, float, float, float } %3719, 3, !dbg !68
  %3724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3645, float %3646, float %3647, float %3648, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3133, i32 %3134) #2, !dbg !68
  %3725 = extractvalue { float, float, float, float } %3724, 0, !dbg !68
  %3726 = extractvalue { float, float, float, float } %3724, 1, !dbg !68
  %3727 = extractvalue { float, float, float, float } %3724, 2, !dbg !68
  %3728 = extractvalue { float, float, float, float } %3724, 3, !dbg !68
  %3729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3650, float %3651, float %3652, float %3653, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3143, i32 %3144) #2, !dbg !68
  %3730 = extractvalue { float, float, float, float } %3729, 0, !dbg !68
  %3731 = extractvalue { float, float, float, float } %3729, 1, !dbg !68
  %3732 = extractvalue { float, float, float, float } %3729, 2, !dbg !68
  %3733 = extractvalue { float, float, float, float } %3729, 3, !dbg !68
  %3734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3655, float %3656, float %3657, float %3658, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3153, i32 %3154) #2, !dbg !68
  %3735 = extractvalue { float, float, float, float } %3734, 0, !dbg !68
  %3736 = extractvalue { float, float, float, float } %3734, 1, !dbg !68
  %3737 = extractvalue { float, float, float, float } %3734, 2, !dbg !68
  %3738 = extractvalue { float, float, float, float } %3734, 3, !dbg !68
  %3739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3660, float %3661, float %3662, float %3663, i32 %3505, i32 %3506, i32 %3507, i32 %3508, i32 %3163, i32 %3164) #2, !dbg !68
  %3740 = extractvalue { float, float, float, float } %3739, 0, !dbg !68
  %3741 = extractvalue { float, float, float, float } %3739, 1, !dbg !68
  %3742 = extractvalue { float, float, float, float } %3739, 2, !dbg !68
  %3743 = extractvalue { float, float, float, float } %3739, 3, !dbg !68
  %3744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3665, float %3666, float %3667, float %3668, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3093, i32 %3094) #2, !dbg !68
  %3745 = extractvalue { float, float, float, float } %3744, 0, !dbg !68
  %3746 = extractvalue { float, float, float, float } %3744, 1, !dbg !68
  %3747 = extractvalue { float, float, float, float } %3744, 2, !dbg !68
  %3748 = extractvalue { float, float, float, float } %3744, 3, !dbg !68
  %3749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3670, float %3671, float %3672, float %3673, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3103, i32 %3104) #2, !dbg !68
  %3750 = extractvalue { float, float, float, float } %3749, 0, !dbg !68
  %3751 = extractvalue { float, float, float, float } %3749, 1, !dbg !68
  %3752 = extractvalue { float, float, float, float } %3749, 2, !dbg !68
  %3753 = extractvalue { float, float, float, float } %3749, 3, !dbg !68
  %3754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3675, float %3676, float %3677, float %3678, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3113, i32 %3114) #2, !dbg !68
  %3755 = extractvalue { float, float, float, float } %3754, 0, !dbg !68
  %3756 = extractvalue { float, float, float, float } %3754, 1, !dbg !68
  %3757 = extractvalue { float, float, float, float } %3754, 2, !dbg !68
  %3758 = extractvalue { float, float, float, float } %3754, 3, !dbg !68
  %3759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3680, float %3681, float %3682, float %3683, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3123, i32 %3124) #2, !dbg !68
  %3760 = extractvalue { float, float, float, float } %3759, 0, !dbg !68
  %3761 = extractvalue { float, float, float, float } %3759, 1, !dbg !68
  %3762 = extractvalue { float, float, float, float } %3759, 2, !dbg !68
  %3763 = extractvalue { float, float, float, float } %3759, 3, !dbg !68
  %3764 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3685, float %3686, float %3687, float %3688, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3133, i32 %3134) #2, !dbg !68
  %3765 = extractvalue { float, float, float, float } %3764, 0, !dbg !68
  %3766 = extractvalue { float, float, float, float } %3764, 1, !dbg !68
  %3767 = extractvalue { float, float, float, float } %3764, 2, !dbg !68
  %3768 = extractvalue { float, float, float, float } %3764, 3, !dbg !68
  %3769 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3690, float %3691, float %3692, float %3693, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3143, i32 %3144) #2, !dbg !68
  %3770 = extractvalue { float, float, float, float } %3769, 0, !dbg !68
  %3771 = extractvalue { float, float, float, float } %3769, 1, !dbg !68
  %3772 = extractvalue { float, float, float, float } %3769, 2, !dbg !68
  %3773 = extractvalue { float, float, float, float } %3769, 3, !dbg !68
  %3774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3695, float %3696, float %3697, float %3698, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3153, i32 %3154) #2, !dbg !68
  %3775 = extractvalue { float, float, float, float } %3774, 0, !dbg !68
  %3776 = extractvalue { float, float, float, float } %3774, 1, !dbg !68
  %3777 = extractvalue { float, float, float, float } %3774, 2, !dbg !68
  %3778 = extractvalue { float, float, float, float } %3774, 3, !dbg !68
  %3779 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3700, float %3701, float %3702, float %3703, i32 %3533, i32 %3534, i32 %3535, i32 %3536, i32 %3163, i32 %3164) #2, !dbg !68
  %3780 = extractvalue { float, float, float, float } %3779, 0, !dbg !68
  %3781 = extractvalue { float, float, float, float } %3779, 1, !dbg !68
  %3782 = extractvalue { float, float, float, float } %3779, 2, !dbg !68
  %3783 = extractvalue { float, float, float, float } %3779, 3, !dbg !68
  %3784 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3705, float %3706, float %3707, float %3708, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3095, i32 %3096) #2, !dbg !68
  %3785 = extractvalue { float, float, float, float } %3784, 0, !dbg !68
  %3786 = extractvalue { float, float, float, float } %3784, 1, !dbg !68
  %3787 = extractvalue { float, float, float, float } %3784, 2, !dbg !68
  %3788 = extractvalue { float, float, float, float } %3784, 3, !dbg !68
  %3789 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3710, float %3711, float %3712, float %3713, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3105, i32 %3106) #2, !dbg !68
  %3790 = extractvalue { float, float, float, float } %3789, 0, !dbg !68
  %3791 = extractvalue { float, float, float, float } %3789, 1, !dbg !68
  %3792 = extractvalue { float, float, float, float } %3789, 2, !dbg !68
  %3793 = extractvalue { float, float, float, float } %3789, 3, !dbg !68
  %3794 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3715, float %3716, float %3717, float %3718, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3115, i32 %3116) #2, !dbg !68
  %3795 = extractvalue { float, float, float, float } %3794, 0, !dbg !68
  %3796 = extractvalue { float, float, float, float } %3794, 1, !dbg !68
  %3797 = extractvalue { float, float, float, float } %3794, 2, !dbg !68
  %3798 = extractvalue { float, float, float, float } %3794, 3, !dbg !68
  %3799 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3720, float %3721, float %3722, float %3723, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3125, i32 %3126) #2, !dbg !68
  %3800 = extractvalue { float, float, float, float } %3799, 0, !dbg !68
  %3801 = extractvalue { float, float, float, float } %3799, 1, !dbg !68
  %3802 = extractvalue { float, float, float, float } %3799, 2, !dbg !68
  %3803 = extractvalue { float, float, float, float } %3799, 3, !dbg !68
  %3804 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3725, float %3726, float %3727, float %3728, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3135, i32 %3136) #2, !dbg !68
  %3805 = extractvalue { float, float, float, float } %3804, 0, !dbg !68
  %3806 = extractvalue { float, float, float, float } %3804, 1, !dbg !68
  %3807 = extractvalue { float, float, float, float } %3804, 2, !dbg !68
  %3808 = extractvalue { float, float, float, float } %3804, 3, !dbg !68
  %3809 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3730, float %3731, float %3732, float %3733, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3145, i32 %3146) #2, !dbg !68
  %3810 = extractvalue { float, float, float, float } %3809, 0, !dbg !68
  %3811 = extractvalue { float, float, float, float } %3809, 1, !dbg !68
  %3812 = extractvalue { float, float, float, float } %3809, 2, !dbg !68
  %3813 = extractvalue { float, float, float, float } %3809, 3, !dbg !68
  %3814 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3735, float %3736, float %3737, float %3738, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3155, i32 %3156) #2, !dbg !68
  %3815 = extractvalue { float, float, float, float } %3814, 0, !dbg !68
  %3816 = extractvalue { float, float, float, float } %3814, 1, !dbg !68
  %3817 = extractvalue { float, float, float, float } %3814, 2, !dbg !68
  %3818 = extractvalue { float, float, float, float } %3814, 3, !dbg !68
  %3819 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3740, float %3741, float %3742, float %3743, i32 %3512, i32 %3513, i32 %3514, i32 %3515, i32 %3165, i32 %3166) #2, !dbg !68
  %3820 = extractvalue { float, float, float, float } %3819, 0, !dbg !68
  %3821 = extractvalue { float, float, float, float } %3819, 1, !dbg !68
  %3822 = extractvalue { float, float, float, float } %3819, 2, !dbg !68
  %3823 = extractvalue { float, float, float, float } %3819, 3, !dbg !68
  %3824 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3745, float %3746, float %3747, float %3748, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3095, i32 %3096) #2, !dbg !68
  %3825 = extractvalue { float, float, float, float } %3824, 0, !dbg !68
  %3826 = extractvalue { float, float, float, float } %3824, 1, !dbg !68
  %3827 = extractvalue { float, float, float, float } %3824, 2, !dbg !68
  %3828 = extractvalue { float, float, float, float } %3824, 3, !dbg !68
  %3829 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3750, float %3751, float %3752, float %3753, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3105, i32 %3106) #2, !dbg !68
  %3830 = extractvalue { float, float, float, float } %3829, 0, !dbg !68
  %3831 = extractvalue { float, float, float, float } %3829, 1, !dbg !68
  %3832 = extractvalue { float, float, float, float } %3829, 2, !dbg !68
  %3833 = extractvalue { float, float, float, float } %3829, 3, !dbg !68
  %3834 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3755, float %3756, float %3757, float %3758, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3115, i32 %3116) #2, !dbg !68
  %3835 = extractvalue { float, float, float, float } %3834, 0, !dbg !68
  %3836 = extractvalue { float, float, float, float } %3834, 1, !dbg !68
  %3837 = extractvalue { float, float, float, float } %3834, 2, !dbg !68
  %3838 = extractvalue { float, float, float, float } %3834, 3, !dbg !68
  %3839 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3760, float %3761, float %3762, float %3763, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3125, i32 %3126) #2, !dbg !68
  %3840 = extractvalue { float, float, float, float } %3839, 0, !dbg !68
  %3841 = extractvalue { float, float, float, float } %3839, 1, !dbg !68
  %3842 = extractvalue { float, float, float, float } %3839, 2, !dbg !68
  %3843 = extractvalue { float, float, float, float } %3839, 3, !dbg !68
  %3844 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3765, float %3766, float %3767, float %3768, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3135, i32 %3136) #2, !dbg !68
  %3845 = extractvalue { float, float, float, float } %3844, 0, !dbg !68
  %3846 = extractvalue { float, float, float, float } %3844, 1, !dbg !68
  %3847 = extractvalue { float, float, float, float } %3844, 2, !dbg !68
  %3848 = extractvalue { float, float, float, float } %3844, 3, !dbg !68
  %3849 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3770, float %3771, float %3772, float %3773, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3145, i32 %3146) #2, !dbg !68
  %3850 = extractvalue { float, float, float, float } %3849, 0, !dbg !68
  %3851 = extractvalue { float, float, float, float } %3849, 1, !dbg !68
  %3852 = extractvalue { float, float, float, float } %3849, 2, !dbg !68
  %3853 = extractvalue { float, float, float, float } %3849, 3, !dbg !68
  %3854 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3775, float %3776, float %3777, float %3778, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3155, i32 %3156) #2, !dbg !68
  %3855 = extractvalue { float, float, float, float } %3854, 0, !dbg !68
  %3856 = extractvalue { float, float, float, float } %3854, 1, !dbg !68
  %3857 = extractvalue { float, float, float, float } %3854, 2, !dbg !68
  %3858 = extractvalue { float, float, float, float } %3854, 3, !dbg !68
  %3859 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3780, float %3781, float %3782, float %3783, i32 %3540, i32 %3541, i32 %3542, i32 %3543, i32 %3165, i32 %3166) #2, !dbg !68
  %3860 = extractvalue { float, float, float, float } %3859, 0, !dbg !68
  %3861 = extractvalue { float, float, float, float } %3859, 1, !dbg !68
  %3862 = extractvalue { float, float, float, float } %3859, 2, !dbg !68
  %3863 = extractvalue { float, float, float, float } %3859, 3, !dbg !68
  %3864 = add i32 %883, 1, !dbg !34
  %3865 = icmp sgt i32 %3864, 2, !dbg !34
  %3866 = select i1 %3865, i32 0, i32 %3864, !dbg !34
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !31
  %3867 = shl i32 %indvars.iv.tr, 6, !dbg !31
  %3868 = add i32 %3867, 192, !dbg !31
  %3869 = sext i32 %3868 to i64, !dbg !31
  %3870 = or disjoint i64 %3869, %57, !dbg !35
  %3871 = or disjoint i64 %3869, %58, !dbg !35
  %3872 = or disjoint i64 %3869, %59, !dbg !35
  %3873 = or disjoint i64 %3869, %60, !dbg !35
  %3874 = or disjoint i64 %3869, %61, !dbg !35
  %3875 = or disjoint i64 %3869, %62, !dbg !35
  %3876 = or disjoint i64 %3869, %63, !dbg !35
  %3877 = or disjoint i64 %3869, %64, !dbg !35
  %3878 = or disjoint i64 %3869, %66, !dbg !35
  %3879 = shl nsw i64 %3870, 12, !dbg !35
  %3880 = shl nsw i64 %3871, 12, !dbg !35
  %3881 = shl nsw i64 %3872, 12, !dbg !35
  %3882 = shl nsw i64 %3873, 12, !dbg !35
  %3883 = shl nsw i64 %3874, 12, !dbg !35
  %3884 = shl nsw i64 %3875, 12, !dbg !35
  %3885 = shl nsw i64 %3876, 12, !dbg !35
  %3886 = shl nsw i64 %3877, 12, !dbg !35
  %3887 = or disjoint i64 %3879, %65, !dbg !35
  %3888 = or disjoint i64 %3880, %65, !dbg !35
  %3889 = or disjoint i64 %3881, %65, !dbg !35
  %3890 = or disjoint i64 %3882, %65, !dbg !35
  %3891 = or disjoint i64 %3883, %65, !dbg !35
  %3892 = or disjoint i64 %3884, %65, !dbg !35
  %3893 = or disjoint i64 %3885, %65, !dbg !35
  %3894 = or disjoint i64 %3886, %65, !dbg !35
  %3895 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3887, !dbg !35
  %3896 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3888, !dbg !35
  %3897 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3889, !dbg !35
  %3898 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3890, !dbg !35
  %3899 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3891, !dbg !35
  %3900 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3892, !dbg !35
  %3901 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3893, !dbg !35
  %3902 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3894, !dbg !35
  %3903 = icmp sgt i32 %3868, -1, !dbg !35
  %3904 = icmp slt i64 %3870, %80, !dbg !35
  %3905 = icmp slt i64 %3871, %80, !dbg !35
  %3906 = icmp slt i64 %3872, %80, !dbg !35
  %3907 = icmp slt i64 %3873, %80, !dbg !35
  %3908 = icmp slt i64 %3874, %80, !dbg !35
  %3909 = icmp slt i64 %3875, %80, !dbg !35
  %3910 = icmp slt i64 %3876, %80, !dbg !35
  %3911 = icmp slt i64 %3877, %80, !dbg !35
  %3912 = and i1 %3903, %3904, !dbg !35
  %3913 = and i1 %3903, %3905, !dbg !35
  %3914 = and i1 %3903, %3906, !dbg !35
  %3915 = and i1 %3903, %3907, !dbg !35
  %3916 = and i1 %3903, %3908, !dbg !35
  %3917 = and i1 %3903, %3909, !dbg !35
  %3918 = and i1 %3903, %3910, !dbg !35
  %3919 = and i1 %3903, %3911, !dbg !35
  %3920 = shl i32 %3866, 12, !dbg !35
  %3921 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %3920, !dbg !35
  %3922 = and i1 %1012, %3912, !dbg !34
  %3923 = and i1 %1012, %3913, !dbg !34
  %3924 = and i1 %1012, %3914, !dbg !34
  %3925 = and i1 %1012, %3915, !dbg !34
  %3926 = and i1 %1012, %3916, !dbg !34
  %3927 = and i1 %1012, %3917, !dbg !34
  %3928 = and i1 %1012, %3918, !dbg !34
  %3929 = and i1 %1012, %3919, !dbg !34
  %3930 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %129, !dbg !35
  %3931 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %131, !dbg !35
  %3932 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %133, !dbg !35
  %3933 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %135, !dbg !35
  %3934 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %137, !dbg !35
  %3935 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %139, !dbg !35
  %3936 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %141, !dbg !35
  %3937 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3921, i32 %143, !dbg !35
  %3938 = select i1 %3922, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3930, ptr addrspace(1) %3895, i32 %3938) #2, !dbg !35
  %3939 = select i1 %3923, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3931, ptr addrspace(1) %3896, i32 %3939) #2, !dbg !35
  %3940 = select i1 %3924, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3932, ptr addrspace(1) %3897, i32 %3940) #2, !dbg !35
  %3941 = select i1 %3925, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3933, ptr addrspace(1) %3898, i32 %3941) #2, !dbg !35
  %3942 = select i1 %3926, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3934, ptr addrspace(1) %3899, i32 %3942) #2, !dbg !35
  %3943 = select i1 %3927, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3935, ptr addrspace(1) %3900, i32 %3943) #2, !dbg !35
  %3944 = select i1 %3928, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3936, ptr addrspace(1) %3901, i32 %3944) #2, !dbg !35
  %3945 = select i1 %3929, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3937, ptr addrspace(1) %3902, i32 %3945) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %3946 = or disjoint i64 %3879, %79, !dbg !36
  %3947 = or disjoint i64 %3880, %79, !dbg !36
  %3948 = or disjoint i64 %3881, %79, !dbg !36
  %3949 = or disjoint i64 %3882, %79, !dbg !36
  %3950 = or disjoint i64 %3883, %79, !dbg !36
  %3951 = or disjoint i64 %3884, %79, !dbg !36
  %3952 = or disjoint i64 %3885, %79, !dbg !36
  %3953 = or disjoint i64 %3886, %79, !dbg !36
  %3954 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3946, !dbg !36
  %3955 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3947, !dbg !36
  %3956 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3948, !dbg !36
  %3957 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3949, !dbg !36
  %3958 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3950, !dbg !36
  %3959 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3951, !dbg !36
  %3960 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3952, !dbg !36
  %3961 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3953, !dbg !36
  %3962 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %3920, !dbg !36
  %3963 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %129, !dbg !36
  %3964 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %131, !dbg !36
  %3965 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %133, !dbg !36
  %3966 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %135, !dbg !36
  %3967 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %137, !dbg !36
  %3968 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %139, !dbg !36
  %3969 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %141, !dbg !36
  %3970 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3962, i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3963, ptr addrspace(1) %3954, i32 %3938) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3964, ptr addrspace(1) %3955, i32 %3939) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3965, ptr addrspace(1) %3956, i32 %3940) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3966, ptr addrspace(1) %3957, i32 %3941) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3967, ptr addrspace(1) %3958, i32 %3942) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3968, ptr addrspace(1) %3959, i32 %3943) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3969, ptr addrspace(1) %3960, i32 %3944) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3970, ptr addrspace(1) %3961, i32 %3945) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %3971 = add nsw i64 %3879, %67, !dbg !37
  %3972 = add nsw i64 %3880, %67, !dbg !37
  %3973 = add nsw i64 %3881, %67, !dbg !37
  %3974 = add nsw i64 %3882, %67, !dbg !37
  %3975 = add nsw i64 %3883, %67, !dbg !37
  %3976 = add nsw i64 %3884, %67, !dbg !37
  %3977 = add nsw i64 %3885, %67, !dbg !37
  %3978 = add nsw i64 %3886, %67, !dbg !37
  %3979 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3971, !dbg !37
  %3980 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3972, !dbg !37
  %3981 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3973, !dbg !37
  %3982 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3974, !dbg !37
  %3983 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3975, !dbg !37
  %3984 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3976, !dbg !37
  %3985 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3977, !dbg !37
  %3986 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3978, !dbg !37
  %3987 = and i1 %70, %3912, !dbg !37
  %3988 = and i1 %70, %3913, !dbg !37
  %3989 = and i1 %70, %3914, !dbg !37
  %3990 = and i1 %70, %3915, !dbg !37
  %3991 = and i1 %70, %3916, !dbg !37
  %3992 = and i1 %70, %3917, !dbg !37
  %3993 = and i1 %70, %3918, !dbg !37
  %3994 = and i1 %70, %3919, !dbg !37
  %3995 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %3920, !dbg !37
  %3996 = and i1 %1012, %3987, !dbg !34
  %3997 = and i1 %1012, %3988, !dbg !34
  %3998 = and i1 %1012, %3989, !dbg !34
  %3999 = and i1 %1012, %3990, !dbg !34
  %4000 = and i1 %1012, %3991, !dbg !34
  %4001 = and i1 %1012, %3992, !dbg !34
  %4002 = and i1 %1012, %3993, !dbg !34
  %4003 = and i1 %1012, %3994, !dbg !34
  %4004 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %129, !dbg !37
  %4005 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %131, !dbg !37
  %4006 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %133, !dbg !37
  %4007 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %135, !dbg !37
  %4008 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %137, !dbg !37
  %4009 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %139, !dbg !37
  %4010 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %141, !dbg !37
  %4011 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3995, i32 %143, !dbg !37
  %4012 = select i1 %3996, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %4004, ptr addrspace(1) %3979, i32 %4012) #2, !dbg !37
  %4013 = select i1 %3997, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4005, ptr addrspace(1) %3980, i32 %4013) #2, !dbg !37
  %4014 = select i1 %3998, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4006, ptr addrspace(1) %3981, i32 %4014) #2, !dbg !37
  %4015 = select i1 %3999, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4007, ptr addrspace(1) %3982, i32 %4015) #2, !dbg !37
  %4016 = select i1 %4000, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4008, ptr addrspace(1) %3983, i32 %4016) #2, !dbg !37
  %4017 = select i1 %4001, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4009, ptr addrspace(1) %3984, i32 %4017) #2, !dbg !37
  %4018 = select i1 %4002, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4010, ptr addrspace(1) %3985, i32 %4018) #2, !dbg !37
  %4019 = select i1 %4003, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4011, ptr addrspace(1) %3986, i32 %4019) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx1118 = shl nsw i64 %3878, 7, !dbg !38
  %4020 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx1118, !dbg !38
  %4021 = icmp slt i64 %3878, %80, !dbg !38
  %4022 = and i1 %3903, %4021, !dbg !38
  %.idx1119 = shl i32 %3866, 8, !dbg !38
  %4023 = and i1 %1012, %4022, !dbg !34
  %gep1315 = getelementptr i8, ptr addrspace(3) %228, i32 %.idx1119, !dbg !38
  %4024 = select i1 %4023, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep1315, ptr addrspace(1) %4020, i32 %4024) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %4025 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3887, !dbg !39
  %4026 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3888, !dbg !39
  %4027 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3889, !dbg !39
  %4028 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3890, !dbg !39
  %4029 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3891, !dbg !39
  %4030 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3892, !dbg !39
  %4031 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3893, !dbg !39
  %4032 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3894, !dbg !39
  %4033 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %3920, !dbg !39
  %4034 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %129, !dbg !39
  %4035 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %131, !dbg !39
  %4036 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %133, !dbg !39
  %4037 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %135, !dbg !39
  %4038 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %137, !dbg !39
  %4039 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %139, !dbg !39
  %4040 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %141, !dbg !39
  %4041 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4033, i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %4034, ptr addrspace(1) %4025, i32 %3938) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4035, ptr addrspace(1) %4026, i32 %3939) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4036, ptr addrspace(1) %4027, i32 %3940) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4037, ptr addrspace(1) %4028, i32 %3941) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4038, ptr addrspace(1) %4029, i32 %3942) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4039, ptr addrspace(1) %4030, i32 %3943) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4040, ptr addrspace(1) %4031, i32 %3944) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4041, ptr addrspace(1) %4032, i32 %3945) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %4042 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3946, !dbg !40
  %4043 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3947, !dbg !40
  %4044 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3948, !dbg !40
  %4045 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3949, !dbg !40
  %4046 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3950, !dbg !40
  %4047 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3951, !dbg !40
  %4048 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3952, !dbg !40
  %4049 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3953, !dbg !40
  %4050 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %3920, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %4051 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %129, !dbg !40
  %4052 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %131, !dbg !40
  %4053 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %133, !dbg !40
  %4054 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %135, !dbg !40
  %4055 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %137, !dbg !40
  %4056 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %139, !dbg !40
  %4057 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %141, !dbg !40
  %4058 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %4050, i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %4051, ptr addrspace(1) %4042, i32 %3938) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4052, ptr addrspace(1) %4043, i32 %3939) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4053, ptr addrspace(1) %4044, i32 %3940) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4054, ptr addrspace(1) %4045, i32 %3941) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4055, ptr addrspace(1) %4046, i32 %3942) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4056, ptr addrspace(1) %4047, i32 %3943) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4057, ptr addrspace(1) %4048, i32 %3944) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %4058, ptr addrspace(1) %4049, i32 %3945) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %878, !dbg !34

._crit_edge:                                      ; preds = %878, %.._crit_edge_crit_edge
  %.pre-phi1398 = phi i32 [ %.pre1397, %.._crit_edge_crit_edge ], [ %705, %878 ], !dbg !41
  %.pre-phi1396 = phi i32 [ %.pre1395, %.._crit_edge_crit_edge ], [ %697, %878 ], !dbg !41
  %.pre-phi1394 = phi i32 [ %.pre1393, %.._crit_edge_crit_edge ], [ %689, %878 ], !dbg !41
  %.pre-phi1392 = phi i32 [ %.pre1391, %.._crit_edge_crit_edge ], [ %681, %878 ], !dbg !41
  %.pre-phi1390 = phi i32 [ %.pre1389, %.._crit_edge_crit_edge ], [ %673, %878 ], !dbg !41
  %.pre-phi1388 = phi i32 [ %.pre1387, %.._crit_edge_crit_edge ], [ %665, %878 ], !dbg !41
  %.pre-phi1386 = phi i32 [ %.pre1385, %.._crit_edge_crit_edge ], [ %657, %878 ], !dbg !41
  %.pre-phi1384 = phi i32 [ %.pre1383, %.._crit_edge_crit_edge ], [ %650, %878 ], !dbg !41
  %.pre-phi1382 = phi i32 [ %.pre1381, %.._crit_edge_crit_edge ], [ %645, %878 ], !dbg !41
  %4059 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3408, %878 ]
  %4060 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3409, %878 ]
  %4061 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3410, %878 ]
  %4062 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3411, %878 ]
  %4063 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3413, %878 ]
  %4064 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3414, %878 ]
  %4065 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3415, %878 ]
  %4066 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3416, %878 ]
  %4067 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3418, %878 ]
  %4068 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3419, %878 ]
  %4069 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3420, %878 ]
  %4070 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3421, %878 ]
  %4071 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3423, %878 ]
  %4072 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3424, %878 ]
  %4073 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3425, %878 ]
  %4074 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3426, %878 ]
  %4075 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3428, %878 ]
  %4076 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3429, %878 ]
  %4077 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3430, %878 ]
  %4078 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3431, %878 ]
  %4079 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3433, %878 ]
  %4080 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3434, %878 ]
  %4081 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3435, %878 ]
  %4082 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3436, %878 ]
  %4083 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3438, %878 ]
  %4084 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3439, %878 ]
  %4085 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3440, %878 ]
  %4086 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3441, %878 ]
  %4087 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3443, %878 ]
  %4088 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3444, %878 ]
  %4089 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3445, %878 ]
  %4090 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3446, %878 ]
  %4091 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3448, %878 ]
  %4092 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3449, %878 ]
  %4093 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3450, %878 ]
  %4094 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3451, %878 ]
  %4095 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3453, %878 ]
  %4096 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3454, %878 ]
  %4097 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3455, %878 ]
  %4098 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3456, %878 ]
  %4099 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3458, %878 ]
  %4100 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3459, %878 ]
  %4101 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3460, %878 ]
  %4102 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3461, %878 ]
  %4103 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3463, %878 ]
  %4104 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3464, %878 ]
  %4105 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3465, %878 ]
  %4106 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3466, %878 ]
  %4107 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3468, %878 ]
  %4108 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3469, %878 ]
  %4109 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3470, %878 ]
  %4110 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3471, %878 ]
  %4111 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3473, %878 ]
  %4112 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3474, %878 ]
  %4113 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3475, %878 ]
  %4114 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3476, %878 ]
  %4115 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3478, %878 ]
  %4116 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3479, %878 ]
  %4117 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3480, %878 ]
  %4118 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3481, %878 ]
  %4119 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3483, %878 ]
  %4120 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3484, %878 ]
  %4121 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3485, %878 ]
  %4122 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3486, %878 ]
  %4123 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3785, %878 ]
  %4124 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3786, %878 ]
  %4125 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3787, %878 ]
  %4126 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3788, %878 ]
  %4127 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3790, %878 ]
  %4128 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3791, %878 ]
  %4129 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3792, %878 ]
  %4130 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3793, %878 ]
  %4131 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3795, %878 ]
  %4132 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3796, %878 ]
  %4133 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3797, %878 ]
  %4134 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3798, %878 ]
  %4135 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3800, %878 ]
  %4136 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3801, %878 ]
  %4137 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3802, %878 ]
  %4138 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3803, %878 ]
  %4139 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3805, %878 ]
  %4140 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3806, %878 ]
  %4141 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3807, %878 ]
  %4142 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3808, %878 ]
  %4143 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3810, %878 ]
  %4144 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3811, %878 ]
  %4145 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3812, %878 ]
  %4146 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3813, %878 ]
  %4147 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3815, %878 ]
  %4148 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3816, %878 ]
  %4149 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3817, %878 ]
  %4150 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3818, %878 ]
  %4151 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3820, %878 ]
  %4152 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3821, %878 ]
  %4153 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3822, %878 ]
  %4154 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3823, %878 ]
  %4155 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3825, %878 ]
  %4156 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3826, %878 ]
  %4157 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3827, %878 ]
  %4158 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3828, %878 ]
  %4159 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3830, %878 ]
  %4160 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3831, %878 ]
  %4161 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3832, %878 ]
  %4162 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3833, %878 ]
  %4163 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3835, %878 ]
  %4164 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3836, %878 ]
  %4165 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3837, %878 ]
  %4166 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3838, %878 ]
  %4167 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3840, %878 ]
  %4168 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3841, %878 ]
  %4169 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3842, %878 ]
  %4170 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3843, %878 ]
  %4171 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3845, %878 ]
  %4172 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3846, %878 ]
  %4173 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3847, %878 ]
  %4174 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3848, %878 ]
  %4175 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3850, %878 ]
  %4176 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3851, %878 ]
  %4177 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3852, %878 ]
  %4178 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3853, %878 ]
  %4179 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3855, %878 ]
  %4180 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3856, %878 ]
  %4181 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3857, %878 ]
  %4182 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3858, %878 ]
  %4183 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3860, %878 ]
  %4184 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3861, %878 ]
  %4185 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3862, %878 ]
  %4186 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3863, %878 ]
  %4187 = zext nneg i32 %15 to i64, !dbg !69
  %4188 = getelementptr float, ptr addrspace(1) %6, i64 %4187, !dbg !69
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %.lobit526528 = lshr i32 %33, 4, !dbg !41
  %4189 = shl nuw nsw i32 %33, 2, !dbg !41
  %4190 = and i32 %4189, 60, !dbg !41
  %4191 = zext nneg i32 %4190 to i64, !dbg !41
  %4192 = or disjoint i64 %4191, %32, !dbg !41
  %4193 = shl nuw nsw i32 %.lobit526528, 9, !dbg !41
  %4194 = and i32 %4193, 1536, !dbg !41
  %.idx529 = zext nneg i32 %4194 to i64, !dbg !41
  %4195 = getelementptr i8, ptr addrspace(1) %4188, i64 %.idx529, !dbg !41
  %4196 = getelementptr float, ptr addrspace(1) %4195, i64 %4192, !dbg !41
  %4197 = getelementptr i8, ptr addrspace(1) %4195, i64 2048, !dbg !41
  %4198 = getelementptr float, ptr addrspace(1) %4197, i64 %4192, !dbg !41
  %4199 = getelementptr i8, ptr addrspace(1) %4195, i64 4096, !dbg !41
  %4200 = getelementptr float, ptr addrspace(1) %4199, i64 %4192, !dbg !41
  %4201 = getelementptr i8, ptr addrspace(1) %4195, i64 6144, !dbg !41
  %4202 = getelementptr float, ptr addrspace(1) %4201, i64 %4192, !dbg !41
  %4203 = getelementptr i8, ptr addrspace(1) %4195, i64 8192, !dbg !41
  %4204 = getelementptr float, ptr addrspace(1) %4203, i64 %4192, !dbg !41
  %4205 = getelementptr i8, ptr addrspace(1) %4195, i64 10240, !dbg !41
  %4206 = getelementptr float, ptr addrspace(1) %4205, i64 %4192, !dbg !41
  %4207 = getelementptr i8, ptr addrspace(1) %4195, i64 12288, !dbg !41
  %4208 = getelementptr float, ptr addrspace(1) %4207, i64 %4192, !dbg !41
  %4209 = getelementptr i8, ptr addrspace(1) %4195, i64 14336, !dbg !41
  %4210 = getelementptr float, ptr addrspace(1) %4209, i64 %4192, !dbg !41
  %4211 = getelementptr i8, ptr addrspace(1) %4195, i64 16384, !dbg !41
  %4212 = getelementptr float, ptr addrspace(1) %4211, i64 %4192, !dbg !41
  %4213 = getelementptr i8, ptr addrspace(1) %4195, i64 18432, !dbg !41
  %4214 = getelementptr float, ptr addrspace(1) %4213, i64 %4192, !dbg !41
  %4215 = getelementptr i8, ptr addrspace(1) %4195, i64 20480, !dbg !41
  %4216 = getelementptr float, ptr addrspace(1) %4215, i64 %4192, !dbg !41
  %4217 = getelementptr i8, ptr addrspace(1) %4195, i64 22528, !dbg !41
  %4218 = getelementptr float, ptr addrspace(1) %4217, i64 %4192, !dbg !41
  %4219 = getelementptr i8, ptr addrspace(1) %4195, i64 24576, !dbg !41
  %4220 = getelementptr float, ptr addrspace(1) %4219, i64 %4192, !dbg !41
  %4221 = getelementptr i8, ptr addrspace(1) %4195, i64 26624, !dbg !41
  %4222 = getelementptr float, ptr addrspace(1) %4221, i64 %4192, !dbg !41
  %4223 = getelementptr i8, ptr addrspace(1) %4195, i64 28672, !dbg !41
  %4224 = getelementptr float, ptr addrspace(1) %4223, i64 %4192, !dbg !41
  %4225 = shl nuw nsw i32 %.lobit526528, 9, !dbg !41
  %4226 = or i32 %4225, 30720, !dbg !41
  %.idx544 = zext nneg i32 %4226 to i64, !dbg !41
  %4227 = getelementptr i8, ptr addrspace(1) %4188, i64 %.idx544, !dbg !41
  %4228 = getelementptr float, ptr addrspace(1) %4227, i64 %4192, !dbg !41
  %4229 = icmp slt i64 %4192, 128, !dbg !41
  %4230 = and i1 %68, %4229, !dbg !41
  %4231 = and i32 %4189, 252, !dbg !41
  %4232 = lshr i32 %.pre-phi1382, 4, !dbg !41
  %4233 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4232, !dbg !41
  %4234 = getelementptr inbounds nuw float, ptr addrspace(3) %4233, i32 %.pre-phi1382, !dbg !41
  %4235 = insertelement <2 x float> poison, float %4059, i64 0, !dbg !41
  %4236 = insertelement <2 x float> %4235, float %4060, i64 1, !dbg !41
  store <2 x float> %4236, ptr addrspace(3) %4234, align 8, !dbg !41
  %4237 = lshr i32 %.pre-phi1384, 4, !dbg !41
  %4238 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4237, !dbg !41
  %4239 = getelementptr inbounds nuw float, ptr addrspace(3) %4238, i32 %.pre-phi1384, !dbg !41
  %4240 = insertelement <2 x float> poison, float %4061, i64 0, !dbg !41
  %4241 = insertelement <2 x float> %4240, float %4062, i64 1, !dbg !41
  store <2 x float> %4241, ptr addrspace(3) %4239, align 8, !dbg !41
  %4242 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 32, !dbg !41
  %4243 = insertelement <2 x float> poison, float %4063, i64 0, !dbg !41
  %4244 = insertelement <2 x float> %4243, float %4064, i64 1, !dbg !41
  store <2 x float> %4244, ptr addrspace(3) %4242, align 8, !dbg !41
  %4245 = lshr i32 %.pre-phi1386, 4, !dbg !41
  %4246 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4245, !dbg !41
  %4247 = getelementptr inbounds nuw float, ptr addrspace(3) %4246, i32 %.pre-phi1386, !dbg !41
  %4248 = insertelement <2 x float> poison, float %4065, i64 0, !dbg !41
  %4249 = insertelement <2 x float> %4248, float %4066, i64 1, !dbg !41
  store <2 x float> %4249, ptr addrspace(3) %4247, align 8, !dbg !41
  %4250 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 64, !dbg !41
  %4251 = insertelement <2 x float> poison, float %4067, i64 0, !dbg !41
  %4252 = insertelement <2 x float> %4251, float %4068, i64 1, !dbg !41
  store <2 x float> %4252, ptr addrspace(3) %4250, align 8, !dbg !41
  %4253 = lshr i32 %.pre-phi1388, 4, !dbg !41
  %4254 = and i32 %4253, 268435452, !dbg !41
  %4255 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4254, !dbg !41
  %4256 = getelementptr inbounds nuw float, ptr addrspace(3) %4255, i32 %.pre-phi1388, !dbg !41
  %4257 = insertelement <2 x float> poison, float %4069, i64 0, !dbg !41
  %4258 = insertelement <2 x float> %4257, float %4070, i64 1, !dbg !41
  store <2 x float> %4258, ptr addrspace(3) %4256, align 8, !dbg !41
  %4259 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 96, !dbg !41
  %4260 = insertelement <2 x float> poison, float %4071, i64 0, !dbg !41
  %4261 = insertelement <2 x float> %4260, float %4072, i64 1, !dbg !41
  store <2 x float> %4261, ptr addrspace(3) %4259, align 8, !dbg !41
  %4262 = lshr i32 %.pre-phi1390, 4, !dbg !41
  %4263 = and i32 %4262, 268435452, !dbg !41
  %4264 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4263, !dbg !41
  %4265 = getelementptr inbounds nuw float, ptr addrspace(3) %4264, i32 %.pre-phi1390, !dbg !41
  %4266 = insertelement <2 x float> poison, float %4073, i64 0, !dbg !41
  %4267 = insertelement <2 x float> %4266, float %4074, i64 1, !dbg !41
  store <2 x float> %4267, ptr addrspace(3) %4265, align 8, !dbg !41
  %4268 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 128, !dbg !41
  %4269 = insertelement <2 x float> poison, float %4075, i64 0, !dbg !41
  %4270 = insertelement <2 x float> %4269, float %4076, i64 1, !dbg !41
  store <2 x float> %4270, ptr addrspace(3) %4268, align 8, !dbg !41
  %4271 = lshr i32 %.pre-phi1392, 4, !dbg !41
  %4272 = and i32 %4271, 268435452, !dbg !41
  %4273 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4272, !dbg !41
  %4274 = getelementptr inbounds nuw float, ptr addrspace(3) %4273, i32 %.pre-phi1392, !dbg !41
  %4275 = insertelement <2 x float> poison, float %4077, i64 0, !dbg !41
  %4276 = insertelement <2 x float> %4275, float %4078, i64 1, !dbg !41
  store <2 x float> %4276, ptr addrspace(3) %4274, align 8, !dbg !41
  %4277 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 160, !dbg !41
  %4278 = insertelement <2 x float> poison, float %4079, i64 0, !dbg !41
  %4279 = insertelement <2 x float> %4278, float %4080, i64 1, !dbg !41
  store <2 x float> %4279, ptr addrspace(3) %4277, align 8, !dbg !41
  %4280 = lshr i32 %.pre-phi1394, 4, !dbg !41
  %4281 = and i32 %4280, 268435452, !dbg !41
  %4282 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4281, !dbg !41
  %4283 = getelementptr inbounds nuw float, ptr addrspace(3) %4282, i32 %.pre-phi1394, !dbg !41
  %4284 = insertelement <2 x float> poison, float %4081, i64 0, !dbg !41
  %4285 = insertelement <2 x float> %4284, float %4082, i64 1, !dbg !41
  store <2 x float> %4285, ptr addrspace(3) %4283, align 8, !dbg !41
  %4286 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 192, !dbg !41
  %4287 = insertelement <2 x float> poison, float %4083, i64 0, !dbg !41
  %4288 = insertelement <2 x float> %4287, float %4084, i64 1, !dbg !41
  store <2 x float> %4288, ptr addrspace(3) %4286, align 8, !dbg !41
  %4289 = lshr i32 %.pre-phi1396, 4, !dbg !41
  %4290 = and i32 %4289, 268435452, !dbg !41
  %4291 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4290, !dbg !41
  %4292 = getelementptr inbounds nuw float, ptr addrspace(3) %4291, i32 %.pre-phi1396, !dbg !41
  %4293 = insertelement <2 x float> poison, float %4085, i64 0, !dbg !41
  %4294 = insertelement <2 x float> %4293, float %4086, i64 1, !dbg !41
  store <2 x float> %4294, ptr addrspace(3) %4292, align 8, !dbg !41
  %4295 = getelementptr inbounds nuw i8, ptr addrspace(3) %4234, i32 224, !dbg !41
  %4296 = insertelement <2 x float> poison, float %4087, i64 0, !dbg !41
  %4297 = insertelement <2 x float> %4296, float %4088, i64 1, !dbg !41
  store <2 x float> %4297, ptr addrspace(3) %4295, align 8, !dbg !41
  %4298 = lshr i32 %.pre-phi1398, 4, !dbg !41
  %4299 = and i32 %4298, 268435452, !dbg !41
  %4300 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4299, !dbg !41
  %4301 = getelementptr inbounds nuw float, ptr addrspace(3) %4300, i32 %.pre-phi1398, !dbg !41
  %4302 = insertelement <2 x float> poison, float %4089, i64 0, !dbg !41
  %4303 = insertelement <2 x float> %4302, float %4090, i64 1, !dbg !41
  store <2 x float> %4303, ptr addrspace(3) %4301, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4304 = and i32 %49, 12, !dbg !41
  %4305 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4304, !dbg !41
  %4306 = getelementptr inbounds nuw float, ptr addrspace(3) %4305, i32 %4231, !dbg !41
  %4307 = load <4 x i32>, ptr addrspace(3) %4306, align 16, !dbg !41
  %4308 = or disjoint i32 %4231, 256, !dbg !41
  %4309 = lshr i32 %4308, 4, !dbg !41
  %4310 = and i32 %4309, 28, !dbg !41
  %4311 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4310, !dbg !41
  %4312 = getelementptr inbounds nuw float, ptr addrspace(3) %4311, i32 %4308, !dbg !41
  %4313 = load <4 x i32>, ptr addrspace(3) %4312, align 16, !dbg !41
  %4314 = or disjoint i32 %4231, 512, !dbg !41
  %4315 = lshr i32 %4314, 4, !dbg !41
  %4316 = and i32 %4315, 44, !dbg !41
  %4317 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4316, !dbg !41
  %4318 = getelementptr inbounds nuw float, ptr addrspace(3) %4317, i32 %4314, !dbg !41
  %4319 = load <4 x i32>, ptr addrspace(3) %4318, align 16, !dbg !41
  %4320 = or disjoint i32 %4231, 768, !dbg !41
  %4321 = lshr i32 %4320, 4, !dbg !41
  %4322 = and i32 %4321, 60, !dbg !41
  %4323 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4322, !dbg !41
  %4324 = getelementptr inbounds nuw float, ptr addrspace(3) %4323, i32 %4320, !dbg !41
  %4325 = load <4 x i32>, ptr addrspace(3) %4324, align 16, !dbg !41
  %4326 = or disjoint i32 %4231, 1024, !dbg !41
  %4327 = lshr i32 %4326, 4, !dbg !41
  %4328 = and i32 %4327, 76, !dbg !41
  %4329 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4328, !dbg !41
  %4330 = getelementptr inbounds nuw float, ptr addrspace(3) %4329, i32 %4326, !dbg !41
  %4331 = load <4 x i32>, ptr addrspace(3) %4330, align 16, !dbg !41
  %4332 = or disjoint i32 %4231, 1280, !dbg !41
  %4333 = lshr i32 %4332, 4, !dbg !41
  %4334 = and i32 %4333, 92, !dbg !41
  %4335 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4334, !dbg !41
  %4336 = getelementptr inbounds nuw float, ptr addrspace(3) %4335, i32 %4332, !dbg !41
  %4337 = load <4 x i32>, ptr addrspace(3) %4336, align 16, !dbg !41
  %4338 = or disjoint i32 %4231, 1536, !dbg !41
  %4339 = lshr i32 %4338, 4, !dbg !41
  %4340 = and i32 %4339, 108, !dbg !41
  %4341 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4340, !dbg !41
  %4342 = getelementptr inbounds nuw float, ptr addrspace(3) %4341, i32 %4338, !dbg !41
  %4343 = load <4 x i32>, ptr addrspace(3) %4342, align 16, !dbg !41
  %4344 = or disjoint i32 %4231, 1792, !dbg !41
  %4345 = lshr i32 %4344, 4, !dbg !41
  %4346 = and i32 %4345, 124, !dbg !41
  %4347 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4346, !dbg !41
  %4348 = getelementptr inbounds nuw float, ptr addrspace(3) %4347, i32 %4344, !dbg !41
  %4349 = load <4 x i32>, ptr addrspace(3) %4348, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4350 = insertelement <2 x float> poison, float %4091, i64 0, !dbg !41
  %4351 = insertelement <2 x float> %4350, float %4092, i64 1, !dbg !41
  store <2 x float> %4351, ptr addrspace(3) %4234, align 8, !dbg !41
  %4352 = insertelement <2 x float> poison, float %4093, i64 0, !dbg !41
  %4353 = insertelement <2 x float> %4352, float %4094, i64 1, !dbg !41
  store <2 x float> %4353, ptr addrspace(3) %4239, align 8, !dbg !41
  %4354 = insertelement <2 x float> poison, float %4095, i64 0, !dbg !41
  %4355 = insertelement <2 x float> %4354, float %4096, i64 1, !dbg !41
  store <2 x float> %4355, ptr addrspace(3) %4242, align 8, !dbg !41
  %4356 = insertelement <2 x float> poison, float %4097, i64 0, !dbg !41
  %4357 = insertelement <2 x float> %4356, float %4098, i64 1, !dbg !41
  store <2 x float> %4357, ptr addrspace(3) %4247, align 8, !dbg !41
  %4358 = insertelement <2 x float> poison, float %4099, i64 0, !dbg !41
  %4359 = insertelement <2 x float> %4358, float %4100, i64 1, !dbg !41
  store <2 x float> %4359, ptr addrspace(3) %4250, align 8, !dbg !41
  %4360 = insertelement <2 x float> poison, float %4101, i64 0, !dbg !41
  %4361 = insertelement <2 x float> %4360, float %4102, i64 1, !dbg !41
  store <2 x float> %4361, ptr addrspace(3) %4256, align 8, !dbg !41
  %4362 = insertelement <2 x float> poison, float %4103, i64 0, !dbg !41
  %4363 = insertelement <2 x float> %4362, float %4104, i64 1, !dbg !41
  store <2 x float> %4363, ptr addrspace(3) %4259, align 8, !dbg !41
  %4364 = insertelement <2 x float> poison, float %4105, i64 0, !dbg !41
  %4365 = insertelement <2 x float> %4364, float %4106, i64 1, !dbg !41
  store <2 x float> %4365, ptr addrspace(3) %4265, align 8, !dbg !41
  %4366 = insertelement <2 x float> poison, float %4107, i64 0, !dbg !41
  %4367 = insertelement <2 x float> %4366, float %4108, i64 1, !dbg !41
  store <2 x float> %4367, ptr addrspace(3) %4268, align 8, !dbg !41
  %4368 = insertelement <2 x float> poison, float %4109, i64 0, !dbg !41
  %4369 = insertelement <2 x float> %4368, float %4110, i64 1, !dbg !41
  store <2 x float> %4369, ptr addrspace(3) %4274, align 8, !dbg !41
  %4370 = insertelement <2 x float> poison, float %4111, i64 0, !dbg !41
  %4371 = insertelement <2 x float> %4370, float %4112, i64 1, !dbg !41
  store <2 x float> %4371, ptr addrspace(3) %4277, align 8, !dbg !41
  %4372 = insertelement <2 x float> poison, float %4113, i64 0, !dbg !41
  %4373 = insertelement <2 x float> %4372, float %4114, i64 1, !dbg !41
  store <2 x float> %4373, ptr addrspace(3) %4283, align 8, !dbg !41
  %4374 = insertelement <2 x float> poison, float %4115, i64 0, !dbg !41
  %4375 = insertelement <2 x float> %4374, float %4116, i64 1, !dbg !41
  store <2 x float> %4375, ptr addrspace(3) %4286, align 8, !dbg !41
  %4376 = insertelement <2 x float> poison, float %4117, i64 0, !dbg !41
  %4377 = insertelement <2 x float> %4376, float %4118, i64 1, !dbg !41
  store <2 x float> %4377, ptr addrspace(3) %4292, align 8, !dbg !41
  %4378 = insertelement <2 x float> poison, float %4119, i64 0, !dbg !41
  %4379 = insertelement <2 x float> %4378, float %4120, i64 1, !dbg !41
  store <2 x float> %4379, ptr addrspace(3) %4295, align 8, !dbg !41
  %4380 = insertelement <2 x float> poison, float %4121, i64 0, !dbg !41
  %4381 = insertelement <2 x float> %4380, float %4122, i64 1, !dbg !41
  store <2 x float> %4381, ptr addrspace(3) %4301, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4382 = load <4 x i32>, ptr addrspace(3) %4306, align 16, !dbg !41
  %4383 = load <4 x i32>, ptr addrspace(3) %4312, align 16, !dbg !41
  %4384 = load <4 x i32>, ptr addrspace(3) %4318, align 16, !dbg !41
  %4385 = load <4 x i32>, ptr addrspace(3) %4324, align 16, !dbg !41
  %4386 = load <4 x i32>, ptr addrspace(3) %4330, align 16, !dbg !41
  %4387 = load <4 x i32>, ptr addrspace(3) %4336, align 16, !dbg !41
  %4388 = load <4 x i32>, ptr addrspace(3) %4342, align 16, !dbg !41
  %4389 = load <4 x i32>, ptr addrspace(3) %4348, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %4307, i64 0, !dbg !41
  %.extract608 = extractelement <4 x i32> %4307, i64 1, !dbg !41
  %.extract609 = extractelement <4 x i32> %4307, i64 2, !dbg !41
  %.extract610 = extractelement <4 x i32> %4307, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract608, i32 %.extract609, i32 %.extract610, ptr addrspace(1) %4196, i1 %4230) #2, !dbg !41
  %.extract611 = extractelement <4 x i32> %4313, i64 0, !dbg !41
  %.extract612 = extractelement <4 x i32> %4313, i64 1, !dbg !41
  %.extract613 = extractelement <4 x i32> %4313, i64 2, !dbg !41
  %.extract614 = extractelement <4 x i32> %4313, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract611, i32 %.extract612, i32 %.extract613, i32 %.extract614, ptr addrspace(1) %4198, i1 %4230) #2, !dbg !41
  %.extract615 = extractelement <4 x i32> %4319, i64 0, !dbg !41
  %.extract616 = extractelement <4 x i32> %4319, i64 1, !dbg !41
  %.extract617 = extractelement <4 x i32> %4319, i64 2, !dbg !41
  %.extract618 = extractelement <4 x i32> %4319, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract615, i32 %.extract616, i32 %.extract617, i32 %.extract618, ptr addrspace(1) %4200, i1 %4230) #2, !dbg !41
  %.extract619 = extractelement <4 x i32> %4325, i64 0, !dbg !41
  %.extract620 = extractelement <4 x i32> %4325, i64 1, !dbg !41
  %.extract621 = extractelement <4 x i32> %4325, i64 2, !dbg !41
  %.extract622 = extractelement <4 x i32> %4325, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract619, i32 %.extract620, i32 %.extract621, i32 %.extract622, ptr addrspace(1) %4202, i1 %4230) #2, !dbg !41
  %.extract623 = extractelement <4 x i32> %4331, i64 0, !dbg !41
  %.extract624 = extractelement <4 x i32> %4331, i64 1, !dbg !41
  %.extract625 = extractelement <4 x i32> %4331, i64 2, !dbg !41
  %.extract626 = extractelement <4 x i32> %4331, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract623, i32 %.extract624, i32 %.extract625, i32 %.extract626, ptr addrspace(1) %4204, i1 %4230) #2, !dbg !41
  %.extract627 = extractelement <4 x i32> %4337, i64 0, !dbg !41
  %.extract628 = extractelement <4 x i32> %4337, i64 1, !dbg !41
  %.extract629 = extractelement <4 x i32> %4337, i64 2, !dbg !41
  %.extract630 = extractelement <4 x i32> %4337, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract627, i32 %.extract628, i32 %.extract629, i32 %.extract630, ptr addrspace(1) %4206, i1 %4230) #2, !dbg !41
  %.extract631 = extractelement <4 x i32> %4343, i64 0, !dbg !41
  %.extract632 = extractelement <4 x i32> %4343, i64 1, !dbg !41
  %.extract633 = extractelement <4 x i32> %4343, i64 2, !dbg !41
  %.extract634 = extractelement <4 x i32> %4343, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract631, i32 %.extract632, i32 %.extract633, i32 %.extract634, ptr addrspace(1) %4208, i1 %4230) #2, !dbg !41
  %.extract635 = extractelement <4 x i32> %4349, i64 0, !dbg !41
  %.extract636 = extractelement <4 x i32> %4349, i64 1, !dbg !41
  %.extract637 = extractelement <4 x i32> %4349, i64 2, !dbg !41
  %.extract638 = extractelement <4 x i32> %4349, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract635, i32 %.extract636, i32 %.extract637, i32 %.extract638, ptr addrspace(1) %4210, i1 %4230) #2, !dbg !41
  %.extract639 = extractelement <4 x i32> %4382, i64 0, !dbg !41
  %.extract640 = extractelement <4 x i32> %4382, i64 1, !dbg !41
  %.extract641 = extractelement <4 x i32> %4382, i64 2, !dbg !41
  %.extract642 = extractelement <4 x i32> %4382, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract639, i32 %.extract640, i32 %.extract641, i32 %.extract642, ptr addrspace(1) %4212, i1 %4230) #2, !dbg !41
  %.extract643 = extractelement <4 x i32> %4383, i64 0, !dbg !41
  %.extract644 = extractelement <4 x i32> %4383, i64 1, !dbg !41
  %.extract645 = extractelement <4 x i32> %4383, i64 2, !dbg !41
  %.extract646 = extractelement <4 x i32> %4383, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract643, i32 %.extract644, i32 %.extract645, i32 %.extract646, ptr addrspace(1) %4214, i1 %4230) #2, !dbg !41
  %.extract647 = extractelement <4 x i32> %4384, i64 0, !dbg !41
  %.extract648 = extractelement <4 x i32> %4384, i64 1, !dbg !41
  %.extract649 = extractelement <4 x i32> %4384, i64 2, !dbg !41
  %.extract650 = extractelement <4 x i32> %4384, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract647, i32 %.extract648, i32 %.extract649, i32 %.extract650, ptr addrspace(1) %4216, i1 %4230) #2, !dbg !41
  %.extract651 = extractelement <4 x i32> %4385, i64 0, !dbg !41
  %.extract652 = extractelement <4 x i32> %4385, i64 1, !dbg !41
  %.extract653 = extractelement <4 x i32> %4385, i64 2, !dbg !41
  %.extract654 = extractelement <4 x i32> %4385, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract651, i32 %.extract652, i32 %.extract653, i32 %.extract654, ptr addrspace(1) %4218, i1 %4230) #2, !dbg !41
  %.extract655 = extractelement <4 x i32> %4386, i64 0, !dbg !41
  %.extract656 = extractelement <4 x i32> %4386, i64 1, !dbg !41
  %.extract657 = extractelement <4 x i32> %4386, i64 2, !dbg !41
  %.extract658 = extractelement <4 x i32> %4386, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract655, i32 %.extract656, i32 %.extract657, i32 %.extract658, ptr addrspace(1) %4220, i1 %4230) #2, !dbg !41
  %.extract659 = extractelement <4 x i32> %4387, i64 0, !dbg !41
  %.extract660 = extractelement <4 x i32> %4387, i64 1, !dbg !41
  %.extract661 = extractelement <4 x i32> %4387, i64 2, !dbg !41
  %.extract662 = extractelement <4 x i32> %4387, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract659, i32 %.extract660, i32 %.extract661, i32 %.extract662, ptr addrspace(1) %4222, i1 %4230) #2, !dbg !41
  %.extract663 = extractelement <4 x i32> %4388, i64 0, !dbg !41
  %.extract664 = extractelement <4 x i32> %4388, i64 1, !dbg !41
  %.extract665 = extractelement <4 x i32> %4388, i64 2, !dbg !41
  %.extract666 = extractelement <4 x i32> %4388, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract663, i32 %.extract664, i32 %.extract665, i32 %.extract666, ptr addrspace(1) %4224, i1 %4230) #2, !dbg !41
  %.extract667 = extractelement <4 x i32> %4389, i64 0, !dbg !41
  %.extract668 = extractelement <4 x i32> %4389, i64 1, !dbg !41
  %.extract669 = extractelement <4 x i32> %4389, i64 2, !dbg !41
  %.extract670 = extractelement <4 x i32> %4389, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract667, i32 %.extract668, i32 %.extract669, i32 %.extract670, ptr addrspace(1) %4228, i1 %4230) #2, !dbg !41
  %4390 = getelementptr i8, ptr addrspace(1) %4195, i64 32768, !dbg !70
  %4391 = getelementptr float, ptr addrspace(1) %4390, i64 %4192, !dbg !70
  %4392 = getelementptr i8, ptr addrspace(1) %4195, i64 34816, !dbg !70
  %4393 = getelementptr float, ptr addrspace(1) %4392, i64 %4192, !dbg !70
  %4394 = getelementptr i8, ptr addrspace(1) %4195, i64 36864, !dbg !70
  %4395 = getelementptr float, ptr addrspace(1) %4394, i64 %4192, !dbg !70
  %4396 = getelementptr i8, ptr addrspace(1) %4195, i64 38912, !dbg !70
  %4397 = getelementptr float, ptr addrspace(1) %4396, i64 %4192, !dbg !70
  %4398 = getelementptr i8, ptr addrspace(1) %4195, i64 40960, !dbg !70
  %4399 = getelementptr float, ptr addrspace(1) %4398, i64 %4192, !dbg !70
  %4400 = getelementptr i8, ptr addrspace(1) %4195, i64 43008, !dbg !70
  %4401 = getelementptr float, ptr addrspace(1) %4400, i64 %4192, !dbg !70
  %4402 = getelementptr i8, ptr addrspace(1) %4195, i64 45056, !dbg !70
  %4403 = getelementptr float, ptr addrspace(1) %4402, i64 %4192, !dbg !70
  %4404 = getelementptr i8, ptr addrspace(1) %4195, i64 47104, !dbg !70
  %4405 = getelementptr float, ptr addrspace(1) %4404, i64 %4192, !dbg !70
  %4406 = getelementptr i8, ptr addrspace(1) %4195, i64 49152, !dbg !70
  %4407 = getelementptr float, ptr addrspace(1) %4406, i64 %4192, !dbg !70
  %4408 = getelementptr i8, ptr addrspace(1) %4195, i64 51200, !dbg !70
  %4409 = getelementptr float, ptr addrspace(1) %4408, i64 %4192, !dbg !70
  %4410 = getelementptr i8, ptr addrspace(1) %4195, i64 53248, !dbg !70
  %4411 = getelementptr float, ptr addrspace(1) %4410, i64 %4192, !dbg !70
  %4412 = getelementptr i8, ptr addrspace(1) %4195, i64 55296, !dbg !70
  %4413 = getelementptr float, ptr addrspace(1) %4412, i64 %4192, !dbg !70
  %4414 = getelementptr i8, ptr addrspace(1) %4195, i64 57344, !dbg !70
  %4415 = getelementptr float, ptr addrspace(1) %4414, i64 %4192, !dbg !70
  %4416 = getelementptr i8, ptr addrspace(1) %4195, i64 59392, !dbg !70
  %4417 = getelementptr float, ptr addrspace(1) %4416, i64 %4192, !dbg !70
  %4418 = getelementptr i8, ptr addrspace(1) %4195, i64 61440, !dbg !70
  %4419 = getelementptr float, ptr addrspace(1) %4418, i64 %4192, !dbg !70
  %4420 = getelementptr i8, ptr addrspace(1) %4227, i64 32768, !dbg !70
  %4421 = getelementptr float, ptr addrspace(1) %4420, i64 %4192, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4422 = insertelement <2 x float> poison, float %4123, i64 0, !dbg !70
  %4423 = insertelement <2 x float> %4422, float %4124, i64 1, !dbg !70
  store <2 x float> %4423, ptr addrspace(3) %4234, align 8, !dbg !70
  %4424 = insertelement <2 x float> poison, float %4125, i64 0, !dbg !70
  %4425 = insertelement <2 x float> %4424, float %4126, i64 1, !dbg !70
  store <2 x float> %4425, ptr addrspace(3) %4239, align 8, !dbg !70
  %4426 = insertelement <2 x float> poison, float %4127, i64 0, !dbg !70
  %4427 = insertelement <2 x float> %4426, float %4128, i64 1, !dbg !70
  store <2 x float> %4427, ptr addrspace(3) %4242, align 8, !dbg !70
  %4428 = insertelement <2 x float> poison, float %4129, i64 0, !dbg !70
  %4429 = insertelement <2 x float> %4428, float %4130, i64 1, !dbg !70
  store <2 x float> %4429, ptr addrspace(3) %4247, align 8, !dbg !70
  %4430 = insertelement <2 x float> poison, float %4131, i64 0, !dbg !70
  %4431 = insertelement <2 x float> %4430, float %4132, i64 1, !dbg !70
  store <2 x float> %4431, ptr addrspace(3) %4250, align 8, !dbg !70
  %4432 = insertelement <2 x float> poison, float %4133, i64 0, !dbg !70
  %4433 = insertelement <2 x float> %4432, float %4134, i64 1, !dbg !70
  store <2 x float> %4433, ptr addrspace(3) %4256, align 8, !dbg !70
  %4434 = insertelement <2 x float> poison, float %4135, i64 0, !dbg !70
  %4435 = insertelement <2 x float> %4434, float %4136, i64 1, !dbg !70
  store <2 x float> %4435, ptr addrspace(3) %4259, align 8, !dbg !70
  %4436 = insertelement <2 x float> poison, float %4137, i64 0, !dbg !70
  %4437 = insertelement <2 x float> %4436, float %4138, i64 1, !dbg !70
  store <2 x float> %4437, ptr addrspace(3) %4265, align 8, !dbg !70
  %4438 = insertelement <2 x float> poison, float %4139, i64 0, !dbg !70
  %4439 = insertelement <2 x float> %4438, float %4140, i64 1, !dbg !70
  store <2 x float> %4439, ptr addrspace(3) %4268, align 8, !dbg !70
  %4440 = insertelement <2 x float> poison, float %4141, i64 0, !dbg !70
  %4441 = insertelement <2 x float> %4440, float %4142, i64 1, !dbg !70
  store <2 x float> %4441, ptr addrspace(3) %4274, align 8, !dbg !70
  %4442 = insertelement <2 x float> poison, float %4143, i64 0, !dbg !70
  %4443 = insertelement <2 x float> %4442, float %4144, i64 1, !dbg !70
  store <2 x float> %4443, ptr addrspace(3) %4277, align 8, !dbg !70
  %4444 = insertelement <2 x float> poison, float %4145, i64 0, !dbg !70
  %4445 = insertelement <2 x float> %4444, float %4146, i64 1, !dbg !70
  store <2 x float> %4445, ptr addrspace(3) %4283, align 8, !dbg !70
  %4446 = insertelement <2 x float> poison, float %4147, i64 0, !dbg !70
  %4447 = insertelement <2 x float> %4446, float %4148, i64 1, !dbg !70
  store <2 x float> %4447, ptr addrspace(3) %4286, align 8, !dbg !70
  %4448 = insertelement <2 x float> poison, float %4149, i64 0, !dbg !70
  %4449 = insertelement <2 x float> %4448, float %4150, i64 1, !dbg !70
  store <2 x float> %4449, ptr addrspace(3) %4292, align 8, !dbg !70
  %4450 = insertelement <2 x float> poison, float %4151, i64 0, !dbg !70
  %4451 = insertelement <2 x float> %4450, float %4152, i64 1, !dbg !70
  store <2 x float> %4451, ptr addrspace(3) %4295, align 8, !dbg !70
  %4452 = insertelement <2 x float> poison, float %4153, i64 0, !dbg !70
  %4453 = insertelement <2 x float> %4452, float %4154, i64 1, !dbg !70
  store <2 x float> %4453, ptr addrspace(3) %4301, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4454 = load <4 x i32>, ptr addrspace(3) %4306, align 16, !dbg !70
  %4455 = load <4 x i32>, ptr addrspace(3) %4312, align 16, !dbg !70
  %4456 = load <4 x i32>, ptr addrspace(3) %4318, align 16, !dbg !70
  %4457 = load <4 x i32>, ptr addrspace(3) %4324, align 16, !dbg !70
  %4458 = load <4 x i32>, ptr addrspace(3) %4330, align 16, !dbg !70
  %4459 = load <4 x i32>, ptr addrspace(3) %4336, align 16, !dbg !70
  %4460 = load <4 x i32>, ptr addrspace(3) %4342, align 16, !dbg !70
  %4461 = load <4 x i32>, ptr addrspace(3) %4348, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4462 = insertelement <2 x float> poison, float %4155, i64 0, !dbg !70
  %4463 = insertelement <2 x float> %4462, float %4156, i64 1, !dbg !70
  store <2 x float> %4463, ptr addrspace(3) %4234, align 8, !dbg !70
  %4464 = insertelement <2 x float> poison, float %4157, i64 0, !dbg !70
  %4465 = insertelement <2 x float> %4464, float %4158, i64 1, !dbg !70
  store <2 x float> %4465, ptr addrspace(3) %4239, align 8, !dbg !70
  %4466 = insertelement <2 x float> poison, float %4159, i64 0, !dbg !70
  %4467 = insertelement <2 x float> %4466, float %4160, i64 1, !dbg !70
  store <2 x float> %4467, ptr addrspace(3) %4242, align 8, !dbg !70
  %4468 = insertelement <2 x float> poison, float %4161, i64 0, !dbg !70
  %4469 = insertelement <2 x float> %4468, float %4162, i64 1, !dbg !70
  store <2 x float> %4469, ptr addrspace(3) %4247, align 8, !dbg !70
  %4470 = insertelement <2 x float> poison, float %4163, i64 0, !dbg !70
  %4471 = insertelement <2 x float> %4470, float %4164, i64 1, !dbg !70
  store <2 x float> %4471, ptr addrspace(3) %4250, align 8, !dbg !70
  %4472 = insertelement <2 x float> poison, float %4165, i64 0, !dbg !70
  %4473 = insertelement <2 x float> %4472, float %4166, i64 1, !dbg !70
  store <2 x float> %4473, ptr addrspace(3) %4256, align 8, !dbg !70
  %4474 = insertelement <2 x float> poison, float %4167, i64 0, !dbg !70
  %4475 = insertelement <2 x float> %4474, float %4168, i64 1, !dbg !70
  store <2 x float> %4475, ptr addrspace(3) %4259, align 8, !dbg !70
  %4476 = insertelement <2 x float> poison, float %4169, i64 0, !dbg !70
  %4477 = insertelement <2 x float> %4476, float %4170, i64 1, !dbg !70
  store <2 x float> %4477, ptr addrspace(3) %4265, align 8, !dbg !70
  %4478 = insertelement <2 x float> poison, float %4171, i64 0, !dbg !70
  %4479 = insertelement <2 x float> %4478, float %4172, i64 1, !dbg !70
  store <2 x float> %4479, ptr addrspace(3) %4268, align 8, !dbg !70
  %4480 = insertelement <2 x float> poison, float %4173, i64 0, !dbg !70
  %4481 = insertelement <2 x float> %4480, float %4174, i64 1, !dbg !70
  store <2 x float> %4481, ptr addrspace(3) %4274, align 8, !dbg !70
  %4482 = insertelement <2 x float> poison, float %4175, i64 0, !dbg !70
  %4483 = insertelement <2 x float> %4482, float %4176, i64 1, !dbg !70
  store <2 x float> %4483, ptr addrspace(3) %4277, align 8, !dbg !70
  %4484 = insertelement <2 x float> poison, float %4177, i64 0, !dbg !70
  %4485 = insertelement <2 x float> %4484, float %4178, i64 1, !dbg !70
  store <2 x float> %4485, ptr addrspace(3) %4283, align 8, !dbg !70
  %4486 = insertelement <2 x float> poison, float %4179, i64 0, !dbg !70
  %4487 = insertelement <2 x float> %4486, float %4180, i64 1, !dbg !70
  store <2 x float> %4487, ptr addrspace(3) %4286, align 8, !dbg !70
  %4488 = insertelement <2 x float> poison, float %4181, i64 0, !dbg !70
  %4489 = insertelement <2 x float> %4488, float %4182, i64 1, !dbg !70
  store <2 x float> %4489, ptr addrspace(3) %4292, align 8, !dbg !70
  %4490 = insertelement <2 x float> poison, float %4183, i64 0, !dbg !70
  %4491 = insertelement <2 x float> %4490, float %4184, i64 1, !dbg !70
  store <2 x float> %4491, ptr addrspace(3) %4295, align 8, !dbg !70
  %4492 = insertelement <2 x float> poison, float %4185, i64 0, !dbg !70
  %4493 = insertelement <2 x float> %4492, float %4186, i64 1, !dbg !70
  store <2 x float> %4493, ptr addrspace(3) %4301, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4494 = load <4 x i32>, ptr addrspace(3) %4306, align 16, !dbg !70
  %4495 = load <4 x i32>, ptr addrspace(3) %4312, align 16, !dbg !70
  %4496 = load <4 x i32>, ptr addrspace(3) %4318, align 16, !dbg !70
  %4497 = load <4 x i32>, ptr addrspace(3) %4324, align 16, !dbg !70
  %4498 = load <4 x i32>, ptr addrspace(3) %4330, align 16, !dbg !70
  %4499 = load <4 x i32>, ptr addrspace(3) %4336, align 16, !dbg !70
  %4500 = load <4 x i32>, ptr addrspace(3) %4342, align 16, !dbg !70
  %4501 = load <4 x i32>, ptr addrspace(3) %4348, align 16, !dbg !70
  %.extract750 = extractelement <4 x i32> %4454, i64 0, !dbg !70
  %.extract751 = extractelement <4 x i32> %4454, i64 1, !dbg !70
  %.extract752 = extractelement <4 x i32> %4454, i64 2, !dbg !70
  %.extract753 = extractelement <4 x i32> %4454, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract750, i32 %.extract751, i32 %.extract752, i32 %.extract753, ptr addrspace(1) %4391, i1 %4230) #2, !dbg !70
  %.extract754 = extractelement <4 x i32> %4455, i64 0, !dbg !70
  %.extract755 = extractelement <4 x i32> %4455, i64 1, !dbg !70
  %.extract756 = extractelement <4 x i32> %4455, i64 2, !dbg !70
  %.extract757 = extractelement <4 x i32> %4455, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract754, i32 %.extract755, i32 %.extract756, i32 %.extract757, ptr addrspace(1) %4393, i1 %4230) #2, !dbg !70
  %.extract758 = extractelement <4 x i32> %4456, i64 0, !dbg !70
  %.extract759 = extractelement <4 x i32> %4456, i64 1, !dbg !70
  %.extract760 = extractelement <4 x i32> %4456, i64 2, !dbg !70
  %.extract761 = extractelement <4 x i32> %4456, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract758, i32 %.extract759, i32 %.extract760, i32 %.extract761, ptr addrspace(1) %4395, i1 %4230) #2, !dbg !70
  %.extract762 = extractelement <4 x i32> %4457, i64 0, !dbg !70
  %.extract763 = extractelement <4 x i32> %4457, i64 1, !dbg !70
  %.extract764 = extractelement <4 x i32> %4457, i64 2, !dbg !70
  %.extract765 = extractelement <4 x i32> %4457, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract762, i32 %.extract763, i32 %.extract764, i32 %.extract765, ptr addrspace(1) %4397, i1 %4230) #2, !dbg !70
  %.extract766 = extractelement <4 x i32> %4458, i64 0, !dbg !70
  %.extract767 = extractelement <4 x i32> %4458, i64 1, !dbg !70
  %.extract768 = extractelement <4 x i32> %4458, i64 2, !dbg !70
  %.extract769 = extractelement <4 x i32> %4458, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract766, i32 %.extract767, i32 %.extract768, i32 %.extract769, ptr addrspace(1) %4399, i1 %4230) #2, !dbg !70
  %.extract770 = extractelement <4 x i32> %4459, i64 0, !dbg !70
  %.extract771 = extractelement <4 x i32> %4459, i64 1, !dbg !70
  %.extract772 = extractelement <4 x i32> %4459, i64 2, !dbg !70
  %.extract773 = extractelement <4 x i32> %4459, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract770, i32 %.extract771, i32 %.extract772, i32 %.extract773, ptr addrspace(1) %4401, i1 %4230) #2, !dbg !70
  %.extract774 = extractelement <4 x i32> %4460, i64 0, !dbg !70
  %.extract775 = extractelement <4 x i32> %4460, i64 1, !dbg !70
  %.extract776 = extractelement <4 x i32> %4460, i64 2, !dbg !70
  %.extract777 = extractelement <4 x i32> %4460, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract774, i32 %.extract775, i32 %.extract776, i32 %.extract777, ptr addrspace(1) %4403, i1 %4230) #2, !dbg !70
  %.extract778 = extractelement <4 x i32> %4461, i64 0, !dbg !70
  %.extract779 = extractelement <4 x i32> %4461, i64 1, !dbg !70
  %.extract780 = extractelement <4 x i32> %4461, i64 2, !dbg !70
  %.extract781 = extractelement <4 x i32> %4461, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract778, i32 %.extract779, i32 %.extract780, i32 %.extract781, ptr addrspace(1) %4405, i1 %4230) #2, !dbg !70
  %.extract782 = extractelement <4 x i32> %4494, i64 0, !dbg !70
  %.extract783 = extractelement <4 x i32> %4494, i64 1, !dbg !70
  %.extract784 = extractelement <4 x i32> %4494, i64 2, !dbg !70
  %.extract785 = extractelement <4 x i32> %4494, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract782, i32 %.extract783, i32 %.extract784, i32 %.extract785, ptr addrspace(1) %4407, i1 %4230) #2, !dbg !70
  %.extract786 = extractelement <4 x i32> %4495, i64 0, !dbg !70
  %.extract787 = extractelement <4 x i32> %4495, i64 1, !dbg !70
  %.extract788 = extractelement <4 x i32> %4495, i64 2, !dbg !70
  %.extract789 = extractelement <4 x i32> %4495, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract786, i32 %.extract787, i32 %.extract788, i32 %.extract789, ptr addrspace(1) %4409, i1 %4230) #2, !dbg !70
  %.extract790 = extractelement <4 x i32> %4496, i64 0, !dbg !70
  %.extract791 = extractelement <4 x i32> %4496, i64 1, !dbg !70
  %.extract792 = extractelement <4 x i32> %4496, i64 2, !dbg !70
  %.extract793 = extractelement <4 x i32> %4496, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract790, i32 %.extract791, i32 %.extract792, i32 %.extract793, ptr addrspace(1) %4411, i1 %4230) #2, !dbg !70
  %.extract794 = extractelement <4 x i32> %4497, i64 0, !dbg !70
  %.extract795 = extractelement <4 x i32> %4497, i64 1, !dbg !70
  %.extract796 = extractelement <4 x i32> %4497, i64 2, !dbg !70
  %.extract797 = extractelement <4 x i32> %4497, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract794, i32 %.extract795, i32 %.extract796, i32 %.extract797, ptr addrspace(1) %4413, i1 %4230) #2, !dbg !70
  %.extract798 = extractelement <4 x i32> %4498, i64 0, !dbg !70
  %.extract799 = extractelement <4 x i32> %4498, i64 1, !dbg !70
  %.extract800 = extractelement <4 x i32> %4498, i64 2, !dbg !70
  %.extract801 = extractelement <4 x i32> %4498, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract798, i32 %.extract799, i32 %.extract800, i32 %.extract801, ptr addrspace(1) %4415, i1 %4230) #2, !dbg !70
  %.extract802 = extractelement <4 x i32> %4499, i64 0, !dbg !70
  %.extract803 = extractelement <4 x i32> %4499, i64 1, !dbg !70
  %.extract804 = extractelement <4 x i32> %4499, i64 2, !dbg !70
  %.extract805 = extractelement <4 x i32> %4499, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract802, i32 %.extract803, i32 %.extract804, i32 %.extract805, ptr addrspace(1) %4417, i1 %4230) #2, !dbg !70
  %.extract806 = extractelement <4 x i32> %4500, i64 0, !dbg !70
  %.extract807 = extractelement <4 x i32> %4500, i64 1, !dbg !70
  %.extract808 = extractelement <4 x i32> %4500, i64 2, !dbg !70
  %.extract809 = extractelement <4 x i32> %4500, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract806, i32 %.extract807, i32 %.extract808, i32 %.extract809, ptr addrspace(1) %4419, i1 %4230) #2, !dbg !70
  %.extract810 = extractelement <4 x i32> %4501, i64 0, !dbg !70
  %.extract811 = extractelement <4 x i32> %4501, i64 1, !dbg !70
  %.extract812 = extractelement <4 x i32> %4501, i64 2, !dbg !70
  %.extract813 = extractelement <4 x i32> %4501, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract810, i32 %.extract811, i32 %.extract812, i32 %.extract813, ptr addrspace(1) %4421, i1 %4230) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 211, column: 23, scope: !5)
!42 = !DILocation(line: 113, column: 43, scope: !5)
!43 = !DILocation(line: 113, column: 37, scope: !5)
!44 = !DILocation(line: 114, column: 31, scope: !5)
!45 = !DILocation(line: 117, column: 35, scope: !5)
!46 = !DILocation(line: 127, column: 26, scope: !5)
!47 = !DILocation(line: 131, column: 31, scope: !5)
!48 = !DILocation(line: 141, column: 52, scope: !5)
!49 = !DILocation(line: 145, column: 33, scope: !5)
!50 = !DILocation(line: 145, column: 26, scope: !5)
!51 = !DILocation(line: 147, column: 30, scope: !5)
!52 = !DILocation(line: 147, column: 39, scope: !5)
!53 = !DILocation(line: 149, column: 30, scope: !5)
!54 = !DILocation(line: 149, column: 50, scope: !5)
!55 = !DILocation(line: 150, column: 56, scope: !5)
!56 = !DILocation(line: 150, column: 45, scope: !5)
!57 = !DILocation(line: 150, column: 60, scope: !5)
!58 = !DILocation(line: 150, column: 31, scope: !5)
!59 = !DILocation(line: 153, column: 53, scope: !5)
!60 = !DILocation(line: 153, column: 42, scope: !5)
!61 = !DILocation(line: 153, column: 59, scope: !5)
!62 = !DILocation(line: 153, column: 24, scope: !5)
!63 = !DILocation(line: 154, column: 27, scope: !5)
!64 = !DILocation(line: 155, column: 20, scope: !5)
!65 = !DILocation(line: 157, column: 24, scope: !5)
!66 = !DILocation(line: 179, column: 21, scope: !5)
!67 = !DILocation(line: 186, column: 28, scope: !5)
!68 = !DILocation(line: 193, column: 32, scope: !5)
!69 = !DILocation(line: 95, column: 18, scope: !5)
!70 = !DILocation(line: 214, column: 27, scope: !5)
!71 = !DILocation(line: 209, column: 4, scope: !5)
