#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64xi64, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<128> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<0> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_16 = arith.constant dense<128> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_17 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_18 = arith.constant dense<128> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_19 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_20 = arith.constant dense<64> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_22 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_23 = arith.constant dense<128> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc72)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc73)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c64_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc26)
    %29 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %30 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %31 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %32 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %33 = arith.extsi %28 : tensor<64xi32, #blocked> to tensor<64xi64, #blocked> loc(#loc26)
    %34 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc26)
    %35 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc26)
    %36 = arith.muli %34, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %37 = tt.broadcast %36 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %38 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %39 = arith.addi %38, %31 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc26)
    %41 = tt.broadcast %40 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %42 = arith.addi %37, %41 : tensor<64x64xi64, #blocked2> loc(#loc26)
    %43 = arith.cmpi sge, %34, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %44 = arith.cmpi sge, %35, %cst_14 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %45 = arith.cmpi slt, %34, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %46 = arith.cmpi slt, %35, %cst_17 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %47 = arith.andi %43, %45 : tensor<64x1xi1, #blocked2> loc(#loc26)
    %48 = arith.andi %44, %46 : tensor<64x1xi1, #blocked1> loc(#loc26)
    %49 = tt.broadcast %47 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %50 = tt.broadcast %48 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc26)
    %51 = arith.cmpi sge, %40, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %52 = arith.cmpi slt, %40, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %53 = arith.andi %51, %52 : tensor<1x64xi1, #blocked2> loc(#loc26)
    %54 = tt.broadcast %53 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %55 = arith.andi %49, %54 : tensor<64x64xi1, #blocked2> loc(#loc26)
    %56 = arith.addi %29, %cst_4 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc27)
    %57 = arith.addi %30, %cst_5 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %58 = arith.addi %31, %cst_7 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %59 = tt.expand_dims %56 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc27)
    %60 = tt.expand_dims %57 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc27)
    %61 = arith.muli %59, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %62 = tt.broadcast %61 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc27)
    %63 = arith.addi %62, %41 : tensor<64x64xi64, #blocked2> loc(#loc27)
    %64 = arith.cmpi sge, %59, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %65 = arith.cmpi sge, %60, %cst_14 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %66 = arith.cmpi slt, %59, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %67 = arith.cmpi slt, %60, %cst_17 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %68 = arith.andi %64, %66 : tensor<64x1xi1, #blocked2> loc(#loc27)
    %69 = arith.andi %65, %67 : tensor<64x1xi1, #blocked1> loc(#loc27)
    %70 = tt.broadcast %68 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc27)
    %71 = tt.broadcast %69 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc27)
    %72 = arith.andi %70, %54 : tensor<64x64xi1, #blocked2> loc(#loc27)
    %73 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %74 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc29)
    %75 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc29)
    %76 = tt.broadcast %75 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %77 = tt.splat %73 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %78 = arith.cmpi sge, %75, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %79 = arith.cmpi slt, %75, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %80 = arith.andi %78, %79 : tensor<1x64xi1, #blocked2> loc(#loc29)
    %81 = tt.broadcast %80 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %82 = tt.expand_dims %58 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc30)
    %83 = tt.broadcast %82 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc30)
    %84 = arith.cmpi sge, %82, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %85 = arith.cmpi slt, %82, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %86 = arith.andi %84, %85 : tensor<1x64xi1, #blocked2> loc(#loc30)
    %87 = tt.broadcast %86 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc30)
    %88 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc31)
    %89 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
    %90 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %91 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %92 = tt.addptr %91, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %93 = tt.splat %92 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %94 = tt.splat %73 : i64 -> tensor<64xi64, #blocked> loc(#loc36)
    %95 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    %96 = tt.broadcast %35 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %97 = tt.splat %73 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %98 = tt.broadcast %60 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc38)
    %99 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %100 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %101 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc31)
    %102 = ttg.local_alloc : () -> !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> loc(#loc36)
    %103 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> loc(#loc37)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> loc(#loc38)
    %105 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %106 = arith.muli %34, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %107 = tt.broadcast %106 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %108 = arith.addi %107, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %109 = tt.addptr %74, %108 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %110 = arith.cmpi slt, %34, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %111 = arith.andi %43, %110 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %112 = tt.broadcast %111 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %113 = arith.andi %112, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %114 = ttg.memdesc_subview %99[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %115 = tt.splat %105 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %116 = arith.andi %115, %113 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %117 = ttg.async_copy_global_to_local %109, %114 mask %116 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %118 = ttg.async_commit_group %117 loc(#loc29)
    %119 = arith.addi %107, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %120 = tt.addptr %74, %119 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %121 = arith.andi %112, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %122 = ttg.memdesc_subview %100[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %123 = arith.andi %115, %121 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %124 = ttg.async_copy_global_to_local %120, %122 mask %123 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %125 = ttg.async_commit_group %124 loc(#loc30)
    %126 = arith.addi %107, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %127 = tt.addptr %88, %126 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %128 = arith.andi %112, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %129 = ttg.memdesc_subview %101[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %130 = arith.andi %115, %128 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %131 = ttg.async_copy_global_to_local %127, %129 mask %130 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %132 = ttg.async_commit_group %131 loc(#loc31)
    %133 = arith.muli %33, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %134 = tt.addptr %93, %133 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %135 = arith.cmpi sge, %33, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %136 = arith.cmpi slt, %33, %94 : tensor<64xi64, #blocked> loc(#loc36)
    %137 = arith.andi %135, %136 : tensor<64xi1, #blocked> loc(#loc36)
    %138 = ttg.memdesc_subview %102[%c0_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %139 = tt.splat %105 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %140 = arith.andi %139, %137 : tensor<64xi1, #blocked> loc(#loc39)
    %141 = ttg.async_copy_global_to_local %134, %138 mask %140 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %142 = ttg.async_commit_group %141 loc(#loc36)
    %143 = tt.expand_dims %32 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %144 = arith.muli %143, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %145 = tt.broadcast %144 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %146 = arith.addi %96, %145 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %147 = tt.addptr %95, %146 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %148 = arith.cmpi sge, %143, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %149 = arith.cmpi slt, %143, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %150 = arith.andi %148, %149 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %151 = tt.broadcast %150 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %152 = arith.andi %50, %151 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %153 = ttg.memdesc_subview %103[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %154 = tt.splat %105 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %155 = arith.andi %154, %152 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %156 = ttg.async_copy_global_to_local %147, %153 mask %155 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %157 = ttg.async_commit_group %156 loc(#loc37)
    %158 = arith.addi %98, %145 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %159 = tt.addptr %95, %158 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %160 = arith.andi %71, %151 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %161 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %162 = arith.andi %154, %160 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %163 = ttg.async_copy_global_to_local %159, %161 mask %162 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %164 = ttg.async_commit_group %163 loc(#loc38)
    %165 = arith.cmpi sgt, %6, %c1_i32 : i32 loc(#loc39)
    %166 = arith.addi %32, %cst_19 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %167 = arith.addi %33, %cst_20 : tensor<64xi64, #blocked> loc(#loc29)
    %168 = arith.muli %59, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %169 = tt.broadcast %168 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %170 = arith.addi %169, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %171 = tt.addptr %74, %170 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %172 = arith.cmpi slt, %59, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %173 = arith.andi %64, %172 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %174 = tt.broadcast %173 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %175 = arith.andi %174, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %176 = ttg.memdesc_subview %99[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %177 = tt.splat %165 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %178 = arith.andi %177, %175 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %179 = ttg.async_copy_global_to_local %171, %176 mask %178 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %180 = ttg.async_commit_group %179 loc(#loc29)
    %181 = arith.addi %169, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %182 = tt.addptr %74, %181 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %183 = arith.andi %174, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %184 = ttg.memdesc_subview %100[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %185 = arith.andi %177, %183 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %186 = ttg.async_copy_global_to_local %182, %184 mask %185 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %187 = ttg.async_commit_group %186 loc(#loc30)
    %188 = arith.addi %169, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %189 = tt.addptr %88, %188 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %190 = arith.andi %174, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %191 = ttg.memdesc_subview %101[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %192 = arith.andi %177, %190 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %193 = ttg.async_copy_global_to_local %189, %191 mask %192 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %194 = ttg.async_commit_group %193 loc(#loc31)
    %195 = arith.muli %167, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %196 = tt.addptr %93, %195 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %197 = arith.cmpi sge, %167, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %198 = arith.cmpi slt, %167, %94 : tensor<64xi64, #blocked> loc(#loc36)
    %199 = arith.andi %197, %198 : tensor<64xi1, #blocked> loc(#loc36)
    %200 = ttg.memdesc_subview %102[%c1_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %201 = tt.splat %165 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %202 = arith.andi %201, %199 : tensor<64xi1, #blocked> loc(#loc39)
    %203 = ttg.async_copy_global_to_local %196, %200 mask %202 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %204 = ttg.async_commit_group %203 loc(#loc36)
    %205 = tt.expand_dims %166 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %206 = arith.muli %205, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %207 = tt.broadcast %206 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %208 = arith.addi %96, %207 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %209 = tt.addptr %95, %208 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %210 = arith.cmpi sge, %205, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %211 = arith.cmpi slt, %205, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %212 = arith.andi %210, %211 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %213 = tt.broadcast %212 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %214 = arith.andi %50, %213 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %215 = ttg.memdesc_subview %103[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %216 = tt.splat %165 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %217 = arith.andi %216, %214 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %218 = ttg.async_copy_global_to_local %209, %215 mask %217 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %219 = ttg.async_commit_group %218 loc(#loc37)
    %220 = arith.addi %98, %207 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %221 = tt.addptr %95, %220 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %222 = arith.andi %71, %213 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %223 = ttg.memdesc_subview %104[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %224 = arith.andi %216, %222 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %225 = ttg.async_copy_global_to_local %221, %223 mask %224 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %226 = ttg.async_commit_group %225 loc(#loc38)
    %227 = arith.cmpi sgt, %6, %c2_i32 : i32 loc(#loc39)
    %228 = arith.addi %29, %cst_21 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
    %229 = arith.addi %32, %cst_22 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %230 = arith.addi %33, %cst_23 : tensor<64xi64, #blocked> loc(#loc29)
    %231 = tt.expand_dims %228 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %232 = arith.muli %231, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %233 = tt.broadcast %232 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %234 = arith.addi %233, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %235 = tt.addptr %74, %234 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %236 = arith.cmpi sge, %231, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %237 = arith.cmpi slt, %231, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %238 = arith.andi %236, %237 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %239 = tt.broadcast %238 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %240 = arith.andi %239, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %241 = ttg.memdesc_subview %99[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %242 = tt.splat %227 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %243 = arith.andi %242, %240 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %244 = ttg.async_copy_global_to_local %235, %241 mask %243 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %245 = ttg.async_commit_group %244 loc(#loc29)
    %246 = arith.addi %233, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %247 = tt.addptr %74, %246 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %248 = arith.andi %239, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %249 = ttg.memdesc_subview %100[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %250 = arith.andi %242, %248 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %251 = ttg.async_copy_global_to_local %247, %249 mask %250 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %252 = ttg.async_commit_group %251 loc(#loc30)
    %253 = arith.addi %233, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %254 = tt.addptr %88, %253 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %255 = arith.andi %239, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %256 = ttg.memdesc_subview %101[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %257 = arith.andi %242, %255 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %258 = ttg.async_copy_global_to_local %254, %256 mask %257 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
    %259 = ttg.async_commit_group %258 loc(#loc31)
    %260 = arith.muli %230, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %261 = tt.addptr %93, %260 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %262 = arith.cmpi sge, %230, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %263 = arith.cmpi slt, %230, %94 : tensor<64xi64, #blocked> loc(#loc36)
    %264 = arith.andi %262, %263 : tensor<64xi1, #blocked> loc(#loc36)
    %265 = ttg.memdesc_subview %102[%c2_i32, %c0_i32] : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %266 = tt.splat %227 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %267 = arith.andi %266, %264 : tensor<64xi1, #blocked> loc(#loc39)
    %268 = ttg.async_copy_global_to_local %261, %265 mask %267 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
    %269 = ttg.async_commit_group %268 loc(#loc36)
    %270 = tt.expand_dims %229 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %271 = arith.muli %270, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %272 = tt.broadcast %271 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %273 = arith.addi %96, %272 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %274 = tt.addptr %95, %273 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %275 = arith.cmpi sge, %270, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %276 = arith.cmpi slt, %270, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %277 = arith.andi %275, %276 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %278 = tt.broadcast %277 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %279 = arith.andi %50, %278 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %280 = ttg.memdesc_subview %103[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %281 = tt.splat %227 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %282 = arith.andi %281, %279 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %283 = ttg.async_copy_global_to_local %274, %280 mask %282 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
    %284 = ttg.async_commit_group %283 loc(#loc37)
    %285 = arith.addi %98, %272 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %286 = tt.addptr %95, %285 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %287 = arith.andi %71, %278 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %288 = ttg.memdesc_subview %104[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %289 = arith.andi %281, %287 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %290 = ttg.async_copy_global_to_local %286, %288 mask %289 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
    %291 = ttg.async_commit_group %290 loc(#loc38)
    %292:31 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_24, %arg10 = %cst_24, %arg11 = %c2_i32, %arg12 = %c-1_i32, %arg13 = %118, %arg14 = %180, %arg15 = %245, %arg16 = %125, %arg17 = %187, %arg18 = %252, %arg19 = %132, %arg20 = %194, %arg21 = %259, %arg22 = %126, %arg23 = %188, %arg24 = %253, %arg25 = %128, %arg26 = %190, %arg27 = %255, %arg28 = %c0_i32, %arg29 = %c64_i32, %arg30 = %c128_i32, %arg31 = %142, %arg32 = %204, %arg33 = %269, %arg34 = %157, %arg35 = %219, %arg36 = %284, %arg37 = %164, %arg38 = %226, %arg39 = %291) -> (tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %330 = arith.subi %6, %c3_i32 : i32 loc(#loc39)
      %331 = arith.cmpi slt, %arg8, %330 : i32 loc(#loc39)
      %332 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %333 = arith.cmpi sge, %332, %c3_i32 : i32 loc(#loc39)
      %334 = arith.select %333, %c0_i32, %332 : i32 loc(#loc39)
      %335 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %336 = tt.addptr %11, %335 : !tt.ptr<bf16>, i32 loc(#loc41)
      %337 = arith.truncf %arg9 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc42)
      %338 = ttg.local_alloc %337 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc42)
      %339 = tt.splat %336 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %340 = tt.addptr %339, %42 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc26)
      %341 = ttg.convert_layout %337 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc26)
      tt.store %340, %341, %55 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %342 = arith.truncf %arg10 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc43)
      %343 = ttg.local_alloc %342 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc43)
      %344 = tt.addptr %339, %63 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc27)
      %345 = ttg.convert_layout %342 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc27)
      tt.store %344, %345, %72 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc27)
      %346 = ttg.async_wait %arg13, %arg16, %arg19, %arg31, %arg34, %arg37 {num = 12 : i32} loc(#loc29)
      %347 = ttg.memdesc_subview %99[%334, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %348 = ttg.local_load %347 token %346 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %349 = ttg.local_load %338 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc42)
      %350 = tt.dot %348, %349, %cst_24, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc44)
      %351 = ttg.memdesc_subview %100[%334, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      %352 = ttg.local_load %351 token %346 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc30)
      %353 = ttg.local_load %343 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc43)
      %354 = tt.dot %352, %353, %350, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc45)
      %355 = ttg.memdesc_subview %101[%334, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %356 = ttg.local_load %355 token %346 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #mma> loc(#loc46)
      %357 = arith.extf %356 : tensor<64x64xbf16, #mma> to tensor<64x64xf32, #mma> loc(#loc46)
      %358 = arith.subf %357, %354 : tensor<64x64xf32, #mma> loc(#loc46)
      %359 = arith.truncf %358 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc47)
      %360 = ttg.convert_layout %359 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc47)
      %361 = tt.addptr %89, %arg22 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc32)
      tt.store %361, %360, %arg25 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %362 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %363 = arith.muli %362, %c64_i32 : i32 loc(#loc49)
      %364 = arith.minsi %363, %arg7 : i32 loc(#loc50)
      %365 = arith.subi %364, %c1_i32 : i32 loc(#loc51)
      %366 = tt.splat %arg28 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %367 = arith.addi %366, %27 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %368 = arith.cmpi slt, %367, %90 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %369 = arith.muli %365, %c32_i32 : i32 loc(#loc53)
      %370 = tt.addptr %91, %369 : !tt.ptr<f32>, i32 loc(#loc54)
      %371 = tt.addptr %370, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %372 = tt.load %371 : !tt.ptr<f32> loc(#loc56)
      %373 = ttg.memdesc_subview %102[%334, %c0_i32] : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
      %374 = ttg.local_load %373 token %346 : !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %375 = tt.splat %372 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %376 = arith.subf %375, %374 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %377 = math.exp %376 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %378 = arith.select %368, %377, %cst : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %379 = tt.expand_dims %378 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %380 = tt.broadcast %379 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc61)
      %381 = arith.mulf %358, %380 : tensor<64x64xf32, #mma> loc(#loc61)
      %382 = math.exp %372 : f32 loc(#loc62)
      %383 = tt.splat %382 : f32 -> tensor<64x64xf32, #mma> loc(#loc63)
      %384 = arith.mulf %arg9, %383 : tensor<64x64xf32, #mma> loc(#loc63)
      %385 = arith.mulf %arg10, %383 : tensor<64x64xf32, #mma> loc(#loc64)
      %386 = arith.truncf %381 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc65)
      %387 = ttg.local_alloc %386 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc65)
      %388 = ttg.memdesc_subview %103[%334, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
      %389 = ttg.local_load %388 token %346 : !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc37)
      %390 = ttg.local_load %387 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc65)
      %391 = tt.dot %389, %390, %384, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc66)
      %392 = ttg.memdesc_subview %104[%334, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
      %393 = ttg.local_load %392 token %346 : !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc38)
      %394 = tt.dot %393, %390, %385, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc67)
      %395 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %396 = arith.cmpi sge, %395, %c3_i32 : i32 loc(#loc39)
      %397 = arith.select %396, %c0_i32, %395 : i32 loc(#loc39)
      %398 = arith.addi %arg8, %c3_i32 : i32 loc(#loc39)
      %399 = arith.muli %398, %c64_i32 : i32 loc(#loc68)
      %400 = arith.extsi %399 : i32 to i64 loc(#loc28)
      %401 = tt.splat %400 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %402 = tt.splat %400 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %403 = tt.splat %400 : i64 -> tensor<64xi64, #blocked> loc(#loc29)
      %404 = arith.addi %401, %29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %405 = arith.addi %402, %32 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %406 = arith.addi %403, %33 : tensor<64xi64, #blocked> loc(#loc29)
      %407 = tt.expand_dims %404 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %408 = arith.muli %407, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %409 = tt.broadcast %408 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
      %410 = arith.addi %409, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
      %411 = tt.addptr %74, %410 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
      %412 = arith.cmpi sge, %407, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %413 = arith.cmpi slt, %407, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %414 = arith.andi %412, %413 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %415 = tt.broadcast %414 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
      %416 = arith.andi %415, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
      %417 = ttg.memdesc_subview %99[%397, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %418 = tt.splat %331 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
      %419 = arith.andi %418, %416 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %420 = ttg.async_copy_global_to_local %411, %417 mask %419 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %421 = ttg.async_commit_group %420 loc(#loc29)
      %422 = arith.addi %409, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
      %423 = tt.addptr %74, %422 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
      %424 = arith.andi %415, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
      %425 = ttg.memdesc_subview %100[%397, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      %426 = arith.andi %418, %424 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %427 = ttg.async_copy_global_to_local %423, %425 mask %426 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      %428 = ttg.async_commit_group %427 loc(#loc30)
      %429 = arith.addi %409, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
      %430 = tt.addptr %88, %429 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
      %431 = arith.andi %415, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
      %432 = ttg.memdesc_subview %101[%397, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %433 = arith.andi %418, %431 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %434 = ttg.async_copy_global_to_local %430, %432 mask %433 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc31)
      %435 = ttg.async_commit_group %434 loc(#loc31)
      %436 = arith.muli %406, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
      %437 = tt.addptr %93, %436 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
      %438 = arith.cmpi sge, %406, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
      %439 = arith.cmpi slt, %406, %94 : tensor<64xi64, #blocked> loc(#loc36)
      %440 = arith.andi %438, %439 : tensor<64xi1, #blocked> loc(#loc36)
      %441 = ttg.memdesc_subview %102[%397, %c0_i32] : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
      %442 = tt.splat %331 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
      %443 = arith.andi %442, %440 : tensor<64xi1, #blocked> loc(#loc39)
      %444 = ttg.async_copy_global_to_local %437, %441 mask %443 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 3x64> loc(#loc36)
      %445 = ttg.async_commit_group %444 loc(#loc36)
      %446 = tt.expand_dims %405 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
      %447 = arith.muli %446, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %448 = tt.broadcast %447 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
      %449 = arith.addi %96, %448 : tensor<64x64xi64, #blocked1> loc(#loc37)
      %450 = tt.addptr %95, %449 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
      %451 = arith.cmpi sge, %446, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %452 = arith.cmpi slt, %446, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %453 = arith.andi %451, %452 : tensor<1x64xi1, #blocked1> loc(#loc37)
      %454 = tt.broadcast %453 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %455 = arith.andi %50, %454 : tensor<64x64xi1, #blocked1> loc(#loc37)
      %456 = ttg.memdesc_subview %103[%397, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
      %457 = tt.splat %331 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %458 = arith.andi %457, %455 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %459 = ttg.async_copy_global_to_local %450, %456 mask %458 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc37)
      %460 = ttg.async_commit_group %459 loc(#loc37)
      %461 = arith.addi %98, %448 : tensor<64x64xi64, #blocked1> loc(#loc38)
      %462 = tt.addptr %95, %461 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
      %463 = arith.andi %71, %454 : tensor<64x64xi1, #blocked1> loc(#loc38)
      %464 = ttg.memdesc_subview %104[%397, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
      %465 = arith.andi %457, %463 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %466 = ttg.async_copy_global_to_local %462, %464 mask %465 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 3x64x64> loc(#loc38)
      %467 = ttg.async_commit_group %466 loc(#loc38)
      scf.yield %391, %394, %397, %334, %arg14, %arg15, %421, %arg17, %arg18, %428, %arg20, %arg21, %435, %arg23, %arg24, %429, %arg26, %arg27, %431, %arg29, %arg30, %399, %arg32, %arg33, %445, %arg35, %arg36, %460, %arg38, %arg39, %467 : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %293 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %103 : !ttg.memdesc<3x64x64xbf16, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %102 : !ttg.memdesc<3x64xf32, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %101 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %100 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %99 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %294 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc69)
    %295 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc69)
    %296 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %297 = arith.extsi %295 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc69)
    %298 = arith.extsi %296 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %299 = tt.expand_dims %297 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc69)
    %300 = arith.muli %299, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %301 = tt.broadcast %300 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc69)
    %302 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %303 = arith.addi %302, %298 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %304 = tt.expand_dims %303 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc69)
    %305 = tt.broadcast %304 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc69)
    %306 = arith.addi %301, %305 : tensor<64x64xi64, #blocked3> loc(#loc69)
    %307 = tt.addptr %294, %306 : tensor<64x64x!tt.ptr<f32>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc69)
    %308 = arith.cmpi sge, %299, %cst_15 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %309 = arith.cmpi slt, %299, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %310 = arith.andi %308, %309 : tensor<64x1xi1, #blocked3> loc(#loc69)
    %311 = tt.broadcast %310 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc69)
    %312 = arith.cmpi sge, %304, %cst_12 : tensor<1x64xi64, #blocked3> loc(#loc69)
    %313 = arith.cmpi slt, %304, %cst_9 : tensor<1x64xi64, #blocked3> loc(#loc69)
    %314 = arith.andi %312, %313 : tensor<1x64xi1, #blocked3> loc(#loc69)
    %315 = tt.broadcast %314 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc69)
    %316 = arith.andi %311, %315 : tensor<64x64xi1, #blocked3> loc(#loc69)
    %317 = ttg.convert_layout %292#0 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked3> loc(#loc69)
    tt.store %307, %317, %316 : tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc69)
    %318 = arith.addi %297, %cst_6 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc70)
    %319 = tt.expand_dims %318 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc70)
    %320 = arith.muli %319, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %321 = tt.broadcast %320 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc70)
    %322 = arith.addi %321, %305 : tensor<64x64xi64, #blocked3> loc(#loc70)
    %323 = tt.addptr %294, %322 : tensor<64x64x!tt.ptr<f32>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc70)
    %324 = arith.cmpi sge, %319, %cst_15 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %325 = arith.cmpi slt, %319, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %326 = arith.andi %324, %325 : tensor<64x1xi1, #blocked3> loc(#loc70)
    %327 = tt.broadcast %326 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc70)
    %328 = arith.andi %327, %315 : tensor<64x64xi1, #blocked3> loc(#loc70)
    %329 = ttg.convert_layout %292#1 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked3> loc(#loc70)
    tt.store %323, %329, %328 : tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc72 = loc(callsite(#loc7 at #loc8))
#loc73 = loc(callsite(#loc9 at #loc8))
