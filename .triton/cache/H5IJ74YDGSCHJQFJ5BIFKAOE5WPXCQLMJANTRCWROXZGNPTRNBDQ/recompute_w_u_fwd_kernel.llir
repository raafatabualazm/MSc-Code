; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 3, !dbg !17
  %24 = and i32 %23, 7, !dbg !17
  %25 = or disjoint i32 %24, 8, !dbg !17
  %26 = or disjoint i32 %24, 16, !dbg !17
  %27 = or disjoint i32 %24, 24, !dbg !17
  %28 = or disjoint i32 %24, 32, !dbg !17
  %29 = or disjoint i32 %24, 40, !dbg !17
  %30 = or disjoint i32 %24, 48, !dbg !17
  %31 = or disjoint i32 %24, 56, !dbg !17
  %32 = and i32 %22, 4, !dbg !17
  %33 = icmp eq i32 %32, 0, !dbg !17
  %34 = shl nuw nsw i32 %22, 3, !dbg !17
  %35 = and i32 %34, 56, !dbg !17
  %36 = and i32 %22, 63, !dbg !17
  %37 = zext nneg i32 %24 to i64, !dbg !17
  %38 = zext nneg i32 %25 to i64, !dbg !17
  %39 = zext nneg i32 %26 to i64, !dbg !17
  %40 = zext nneg i32 %27 to i64, !dbg !17
  %41 = zext nneg i32 %28 to i64, !dbg !17
  %42 = zext nneg i32 %29 to i64, !dbg !17
  %43 = zext nneg i32 %30 to i64, !dbg !17
  %44 = zext nneg i32 %31 to i64, !dbg !17
  %45 = zext nneg i32 %35 to i64, !dbg !17
  %46 = zext nneg i32 %36 to i64, !dbg !17
  %47 = or disjoint i64 %37, %21, !dbg !17
  %48 = or disjoint i64 %38, %21, !dbg !17
  %49 = or disjoint i64 %39, %21, !dbg !17
  %50 = or disjoint i64 %40, %21, !dbg !17
  %51 = or disjoint i64 %41, %21, !dbg !17
  %52 = or disjoint i64 %42, %21, !dbg !17
  %53 = or disjoint i64 %43, %21, !dbg !17
  %54 = or disjoint i64 %44, %21, !dbg !17
  %55 = or disjoint i64 %21, %46, !dbg !17
  %56 = shl nsw i64 %55, 5, !dbg !17
  %57 = getelementptr bfloat, ptr addrspace(1) %18, i64 %56, !dbg !17
  %58 = icmp sgt i32 %19, -1, !dbg !17
  %59 = icmp slt i64 %55, %20, !dbg !17
  %60 = and i1 %58, %59, !dbg !17
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %60) #3, !dbg !17
  %62 = shl nuw nsw i32 %22, 1, !dbg !18
  %63 = and i32 %62, 6, !dbg !18
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %36, !dbg !18
  %65 = insertelement <1 x i16> poison, i16 %61, i64 0, !dbg !18
  store <1 x i16> %65, ptr addrspace(3) %64, align 2, !dbg !18
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63, !dbg !18
  %67 = load <2 x bfloat>, ptr addrspace(3) %66, align 4, !dbg !18
  %68 = or disjoint i32 %63, 8, !dbg !18
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !18
  %70 = load <2 x bfloat>, ptr addrspace(3) %69, align 4, !dbg !18
  %71 = or disjoint i32 %63, 16, !dbg !18
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !18
  %73 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !18
  %74 = or disjoint i32 %63, 24, !dbg !18
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74, !dbg !18
  %76 = load <2 x bfloat>, ptr addrspace(3) %75, align 4, !dbg !18
  %77 = or disjoint i32 %63, 32, !dbg !18
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77, !dbg !18
  %79 = load <2 x bfloat>, ptr addrspace(3) %78, align 4, !dbg !18
  %80 = or disjoint i32 %63, 40, !dbg !18
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %80, !dbg !18
  %82 = load <2 x bfloat>, ptr addrspace(3) %81, align 4, !dbg !18
  %83 = or disjoint i32 %63, 48, !dbg !18
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %83, !dbg !18
  %85 = load <2 x bfloat>, ptr addrspace(3) %84, align 4, !dbg !18
  %86 = or disjoint i32 %63, 56, !dbg !18
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !18
  %88 = load <2 x bfloat>, ptr addrspace(3) %87, align 4, !dbg !18
  %89 = or disjoint i32 %14, %13, !dbg !19
  %90 = shl i32 %89, 6, !dbg !20
  %91 = sext i32 %90 to i64, !dbg !21
  %92 = getelementptr bfloat, ptr addrspace(1) %5, i64 %91, !dbg !21
  %.idx = shl nsw i64 %47, 12, !dbg !22
  %93 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx, !dbg !22
  %94 = getelementptr bfloat, ptr addrspace(1) %93, i64 %45, !dbg !22
  %.idx18 = shl nsw i64 %48, 12, !dbg !22
  %95 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx18, !dbg !22
  %96 = getelementptr bfloat, ptr addrspace(1) %95, i64 %45, !dbg !22
  %.idx19 = shl nsw i64 %49, 12, !dbg !22
  %97 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx19, !dbg !22
  %98 = getelementptr bfloat, ptr addrspace(1) %97, i64 %45, !dbg !22
  %.idx20 = shl nsw i64 %50, 12, !dbg !22
  %99 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx20, !dbg !22
  %100 = getelementptr bfloat, ptr addrspace(1) %99, i64 %45, !dbg !22
  %.idx21 = shl nsw i64 %51, 12, !dbg !22
  %101 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx21, !dbg !22
  %102 = getelementptr bfloat, ptr addrspace(1) %101, i64 %45, !dbg !22
  %.idx22 = shl nsw i64 %52, 12, !dbg !22
  %103 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx22, !dbg !22
  %104 = getelementptr bfloat, ptr addrspace(1) %103, i64 %45, !dbg !22
  %.idx23 = shl nsw i64 %53, 12, !dbg !22
  %105 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx23, !dbg !22
  %106 = getelementptr bfloat, ptr addrspace(1) %105, i64 %45, !dbg !22
  %.idx24 = shl nsw i64 %54, 12, !dbg !22
  %107 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx24, !dbg !22
  %108 = getelementptr bfloat, ptr addrspace(1) %107, i64 %45, !dbg !22
  %109 = icmp slt i64 %47, %20, !dbg !22
  %110 = icmp slt i64 %48, %20, !dbg !22
  %111 = icmp slt i64 %49, %20, !dbg !22
  %112 = icmp slt i64 %50, %20, !dbg !22
  %113 = icmp slt i64 %51, %20, !dbg !22
  %114 = icmp slt i64 %52, %20, !dbg !22
  %115 = icmp slt i64 %53, %20, !dbg !22
  %116 = icmp slt i64 %54, %20, !dbg !22
  %117 = and i1 %58, %109, !dbg !22
  %118 = and i1 %58, %110, !dbg !22
  %119 = and i1 %58, %111, !dbg !22
  %120 = and i1 %58, %112, !dbg !22
  %121 = and i1 %58, %113, !dbg !22
  %122 = and i1 %58, %114, !dbg !22
  %123 = and i1 %58, %115, !dbg !22
  %124 = and i1 %58, %116, !dbg !22
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %117) #3, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !22
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !22
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !22
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !22
  %132 = shufflevector <2 x bfloat> %131, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %133 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !22
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !22
  %135 = shufflevector <2 x bfloat> %134, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %118) #3, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !22
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !22
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !22
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !22
  %143 = shufflevector <2 x bfloat> %142, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %144 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !22
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !22
  %146 = shufflevector <2 x bfloat> %145, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %119) #3, !dbg !22
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !22
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !22
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !22
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !22
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !22
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !22
  %154 = shufflevector <2 x bfloat> %153, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %155 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !22
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !22
  %157 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %120) #3, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !22
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !22
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !22
  %163 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !22
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !22
  %165 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %166 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !22
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !22
  %168 = shufflevector <2 x bfloat> %167, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %121) #3, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !22
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !22
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = shufflevector <2 x bfloat> %175, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %177 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !22
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !22
  %179 = shufflevector <2 x bfloat> %178, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %122) #3, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !22
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = shufflevector <2 x bfloat> %186, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %188 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !22
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !22
  %190 = shufflevector <2 x bfloat> %189, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %123) #3, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !22
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !22
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !22
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !22
  %198 = shufflevector <2 x bfloat> %197, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %199 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !22
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !22
  %201 = shufflevector <2 x bfloat> %200, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %124) #3, !dbg !22
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !22
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !22
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !22
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !22
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !22
  %209 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %210 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !22
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !22
  %212 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %213 = xor i32 %34, %22, !dbg !22
  %214 = and i32 %213, 56, !dbg !22
  %215 = shl nuw nsw i32 %24, 6, !dbg !22
  %216 = or disjoint i32 %214, %215, !dbg !22
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %216, !dbg !22
  %218 = shufflevector <2 x bfloat> %127, <2 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %219 = shufflevector <8 x bfloat> %218, <8 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %220 = shufflevector <8 x bfloat> %219, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %220, ptr addrspace(3) %217, align 16, !dbg !22
  %221 = or disjoint i32 %216, 512, !dbg !22
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %221, !dbg !22
  %223 = shufflevector <2 x bfloat> %138, <2 x bfloat> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %224 = shufflevector <8 x bfloat> %223, <8 x bfloat> %143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %225 = shufflevector <8 x bfloat> %224, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %225, ptr addrspace(3) %222, align 16, !dbg !22
  %226 = or disjoint i32 %216, 1024, !dbg !22
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %226, !dbg !22
  %228 = shufflevector <2 x bfloat> %149, <2 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %229 = shufflevector <8 x bfloat> %228, <8 x bfloat> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %230 = shufflevector <8 x bfloat> %229, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %230, ptr addrspace(3) %227, align 16, !dbg !22
  %231 = or disjoint i32 %216, 1536, !dbg !22
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %231, !dbg !22
  %233 = shufflevector <2 x bfloat> %160, <2 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %234 = shufflevector <8 x bfloat> %233, <8 x bfloat> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %235 = shufflevector <8 x bfloat> %234, <8 x bfloat> %168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %235, ptr addrspace(3) %232, align 16, !dbg !22
  %236 = or disjoint i32 %216, 2048, !dbg !22
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %236, !dbg !22
  %238 = shufflevector <2 x bfloat> %171, <2 x bfloat> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %239 = shufflevector <8 x bfloat> %238, <8 x bfloat> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %240 = shufflevector <8 x bfloat> %239, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %240, ptr addrspace(3) %237, align 16, !dbg !22
  %241 = or disjoint i32 %216, 2560, !dbg !22
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %241, !dbg !22
  %243 = shufflevector <2 x bfloat> %182, <2 x bfloat> %184, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %244 = shufflevector <8 x bfloat> %243, <8 x bfloat> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %245 = shufflevector <8 x bfloat> %244, <8 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %245, ptr addrspace(3) %242, align 16, !dbg !22
  %246 = or disjoint i32 %216, 3072, !dbg !22
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %246, !dbg !22
  %248 = shufflevector <2 x bfloat> %193, <2 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %249 = shufflevector <8 x bfloat> %248, <8 x bfloat> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %250 = shufflevector <8 x bfloat> %249, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %250, ptr addrspace(3) %247, align 16, !dbg !22
  %251 = or disjoint i32 %216, 3584, !dbg !22
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %251, !dbg !22
  %253 = shufflevector <2 x bfloat> %204, <2 x bfloat> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %254 = shufflevector <8 x bfloat> %253, <8 x bfloat> %209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %255 = shufflevector <8 x bfloat> %254, <8 x bfloat> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %255, ptr addrspace(3) %252, align 16, !dbg !22
  %256 = shl i32 %89, 7, !dbg !23
  %257 = sext i32 %256 to i64, !dbg !24
  %258 = getelementptr bfloat, ptr addrspace(1) %1, i64 %257, !dbg !24
  %259 = getelementptr bfloat, ptr addrspace(1) %4, i64 %257, !dbg !25
  %260 = or disjoint i64 %.idx, %45, !dbg !26
  %261 = or disjoint i64 %.idx18, %45, !dbg !26
  %262 = or disjoint i64 %.idx19, %45, !dbg !26
  %263 = or disjoint i64 %.idx20, %45, !dbg !26
  %264 = or disjoint i64 %.idx21, %45, !dbg !26
  %265 = or disjoint i64 %.idx22, %45, !dbg !26
  %266 = or disjoint i64 %.idx23, %45, !dbg !26
  %267 = or disjoint i64 %.idx24, %45, !dbg !26
  %268 = getelementptr bfloat, ptr addrspace(1) %258, i64 %260, !dbg !26
  %269 = getelementptr bfloat, ptr addrspace(1) %258, i64 %261, !dbg !26
  %270 = getelementptr bfloat, ptr addrspace(1) %258, i64 %262, !dbg !26
  %271 = getelementptr bfloat, ptr addrspace(1) %258, i64 %263, !dbg !26
  %272 = getelementptr bfloat, ptr addrspace(1) %258, i64 %264, !dbg !26
  %273 = getelementptr bfloat, ptr addrspace(1) %258, i64 %265, !dbg !26
  %274 = getelementptr bfloat, ptr addrspace(1) %258, i64 %266, !dbg !26
  %275 = getelementptr bfloat, ptr addrspace(1) %258, i64 %267, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %221, !dbg !26
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %231, !dbg !26
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %236, !dbg !26
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %241, !dbg !26
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %246, !dbg !26
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %251, !dbg !26
  %284 = select i1 %117, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %268, i32 %284) #3, !dbg !26
  %285 = select i1 %118, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %269, i32 %285) #3, !dbg !26
  %286 = select i1 %119, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %270, i32 %286) #3, !dbg !26
  %287 = select i1 %120, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %271, i32 %287) #3, !dbg !26
  %288 = select i1 %121, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %272, i32 %288) #3, !dbg !26
  %289 = select i1 %122, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %273, i32 %289) #3, !dbg !26
  %290 = select i1 %123, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %274, i32 %290) #3, !dbg !26
  %291 = select i1 %124, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %275, i32 %291) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %292 = or disjoint i64 %45, 64, !dbg !26
  %293 = or disjoint i64 %.idx, %292, !dbg !26
  %294 = or disjoint i64 %.idx18, %292, !dbg !26
  %295 = or disjoint i64 %.idx19, %292, !dbg !26
  %296 = or disjoint i64 %.idx20, %292, !dbg !26
  %297 = or disjoint i64 %.idx21, %292, !dbg !26
  %298 = or disjoint i64 %.idx22, %292, !dbg !26
  %299 = or disjoint i64 %.idx23, %292, !dbg !26
  %300 = or disjoint i64 %.idx24, %292, !dbg !26
  %301 = getelementptr bfloat, ptr addrspace(1) %258, i64 %293, !dbg !26
  %302 = getelementptr bfloat, ptr addrspace(1) %258, i64 %294, !dbg !26
  %303 = getelementptr bfloat, ptr addrspace(1) %258, i64 %295, !dbg !26
  %304 = getelementptr bfloat, ptr addrspace(1) %258, i64 %296, !dbg !26
  %305 = getelementptr bfloat, ptr addrspace(1) %258, i64 %297, !dbg !26
  %306 = getelementptr bfloat, ptr addrspace(1) %258, i64 %298, !dbg !26
  %307 = getelementptr bfloat, ptr addrspace(1) %258, i64 %299, !dbg !26
  %308 = getelementptr bfloat, ptr addrspace(1) %258, i64 %300, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %216, !dbg !26
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %221, !dbg !26
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %226, !dbg !26
  %312 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %231, !dbg !26
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %236, !dbg !26
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %241, !dbg !26
  %315 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %246, !dbg !26
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %251, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %309, ptr addrspace(1) %301, i32 %284) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %302, i32 %285) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %303, i32 %286) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %312, ptr addrspace(1) %304, i32 %287) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %313, ptr addrspace(1) %305, i32 %288) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %314, ptr addrspace(1) %306, i32 %289) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %315, ptr addrspace(1) %307, i32 %290) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %316, ptr addrspace(1) %308, i32 %291) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %317 = or disjoint i64 %45, 128, !dbg !26
  %318 = or disjoint i64 %.idx, %317, !dbg !26
  %319 = or disjoint i64 %.idx18, %317, !dbg !26
  %320 = or disjoint i64 %.idx19, %317, !dbg !26
  %321 = or disjoint i64 %.idx20, %317, !dbg !26
  %322 = or disjoint i64 %.idx21, %317, !dbg !26
  %323 = or disjoint i64 %.idx22, %317, !dbg !26
  %324 = or disjoint i64 %.idx23, %317, !dbg !26
  %325 = or disjoint i64 %.idx24, %317, !dbg !26
  %326 = getelementptr bfloat, ptr addrspace(1) %258, i64 %318, !dbg !26
  %327 = getelementptr bfloat, ptr addrspace(1) %258, i64 %319, !dbg !26
  %328 = getelementptr bfloat, ptr addrspace(1) %258, i64 %320, !dbg !26
  %329 = getelementptr bfloat, ptr addrspace(1) %258, i64 %321, !dbg !26
  %330 = getelementptr bfloat, ptr addrspace(1) %258, i64 %322, !dbg !26
  %331 = getelementptr bfloat, ptr addrspace(1) %258, i64 %323, !dbg !26
  %332 = getelementptr bfloat, ptr addrspace(1) %258, i64 %324, !dbg !26
  %333 = getelementptr bfloat, ptr addrspace(1) %258, i64 %325, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %334 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %216, !dbg !26
  %335 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %221, !dbg !26
  %336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %226, !dbg !26
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %231, !dbg !26
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %236, !dbg !26
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %241, !dbg !26
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %246, !dbg !26
  %341 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %251, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %334, ptr addrspace(1) %326, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %335, ptr addrspace(1) %327, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %336, ptr addrspace(1) %328, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %337, ptr addrspace(1) %329, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %338, ptr addrspace(1) %330, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %339, ptr addrspace(1) %331, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %340, ptr addrspace(1) %332, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %341, ptr addrspace(1) %333, i32 0) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %342 = and i32 %22, 3
  %343 = mul nuw nsw i32 %342, 72
  %344 = select i1 %33, i32 0, i32 288
  %345 = xor i32 %344, %343
  %346 = shl nuw nsw i32 %22, 6
  %347 = and i32 %346, 512
  %348 = or disjoint i32 %345, %347
  %349 = shl nuw nsw i32 %22, 6
  %350 = and i32 %349, 1536
  %351 = or disjoint i32 %345, %350
  %352 = lshr i32 %22, 2
  %353 = and i32 %352, 8
  %354 = xor i32 %351, %353
  %355 = xor i32 %354, 16
  %356 = xor i32 %354, 2064
  %357 = xor i32 %354, 32
  %358 = xor i32 %354, 2080
  %359 = xor i32 %354, 48
  %360 = xor i32 %354, 2096
  %361 = lshr i32 %22, 1
  %362 = and i32 %361, 8
  %363 = xor i32 %348, %362
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %363
  %365 = ptrtoint ptr addrspace(3) %364 to i32
  %366 = xor i32 %363, 16
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %366
  %368 = ptrtoint ptr addrspace(3) %367 to i32
  %369 = xor i32 %363, 32
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %369
  %371 = ptrtoint ptr addrspace(3) %370 to i32
  %372 = xor i32 %363, 48
  %373 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %372
  %374 = ptrtoint ptr addrspace(3) %373 to i32
  %375 = getelementptr inbounds nuw i8, ptr addrspace(3) %364, i32 2048
  %376 = ptrtoint ptr addrspace(3) %375 to i32
  %377 = xor i32 %363, 1040
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %377
  %379 = ptrtoint ptr addrspace(3) %378 to i32
  %380 = xor i32 %363, 1056
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %380
  %382 = ptrtoint ptr addrspace(3) %381 to i32
  %383 = xor i32 %363, 1072
  %384 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %383
  %385 = ptrtoint ptr addrspace(3) %384 to i32
  %386 = getelementptr inbounds nuw i8, ptr addrspace(3) %364, i32 4096
  %387 = ptrtoint ptr addrspace(3) %386 to i32
  %388 = xor i32 %363, 2064
  %389 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %388
  %390 = ptrtoint ptr addrspace(3) %389 to i32
  %391 = xor i32 %363, 2080
  %392 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %391
  %393 = ptrtoint ptr addrspace(3) %392 to i32
  %394 = xor i32 %363, 2096
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %394
  %396 = ptrtoint ptr addrspace(3) %395 to i32
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) %364, i32 6144
  %398 = ptrtoint ptr addrspace(3) %397 to i32
  %399 = xor i32 %363, 3088
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %399
  %401 = ptrtoint ptr addrspace(3) %400 to i32
  %402 = xor i32 %363, 3104
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %402
  %404 = ptrtoint ptr addrspace(3) %403 to i32
  %405 = xor i32 %363, 3120
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 26880), i32 %405
  %407 = ptrtoint ptr addrspace(3) %406 to i32
  %408 = shl nuw nsw i32 %22, 4
  %409 = and i32 %408, 448
  %410 = or disjoint i32 %409, %63
  %411 = or disjoint i32 %410, %353
  %412 = and i32 %34, 504
  %413 = lshr exact i32 %409, 2
  %414 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %413
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %414, i32 %411
  %416 = or disjoint i32 %411, 512
  %417 = lshr i32 %416, 3
  %418 = and i32 %417, 120
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %418
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %419, i32 %416
  %421 = getelementptr inbounds nuw i8, ptr addrspace(3) %415, i32 32
  %422 = or disjoint i32 %411, 528
  %423 = lshr i32 %422, 3
  %424 = and i32 %423, 120
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %424
  %426 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %425, i32 %422
  %427 = getelementptr inbounds nuw i8, ptr addrspace(3) %415, i32 64
  %428 = or disjoint i32 %411, 544
  %429 = lshr i32 %428, 3
  %430 = and i32 %429, 120
  %431 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %430
  %432 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %431, i32 %428
  %433 = getelementptr inbounds nuw i8, ptr addrspace(3) %415, i32 96
  %434 = or disjoint i32 %411, 560
  %435 = lshr i32 %434, 3
  %436 = and i32 %435, 120
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %436
  %438 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %437, i32 %434
  %439 = and i32 %22, 56
  %440 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %439
  %441 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %440, i32 %412
  %442 = or disjoint i32 %412, 512
  %443 = lshr exact i32 %442, 3
  %444 = and i32 %443, 120
  %445 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %444
  %446 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %445, i32 %442
  br label %447, !dbg !27

447:                                              ; preds = %9, %447
  %448 = phi i1 [ true, %9 ], [ false, %447 ]
  %indvars.iv = phi i64 [ 192, %9 ], [ 256, %447 ]
  %449 = phi i1 [ %117, %9 ], [ false, %447 ]
  %450 = phi i1 [ %118, %9 ], [ false, %447 ]
  %451 = phi i1 [ %119, %9 ], [ false, %447 ]
  %452 = phi i1 [ %120, %9 ], [ false, %447 ]
  %453 = phi i1 [ %121, %9 ], [ false, %447 ]
  %454 = phi i1 [ %122, %9 ], [ false, %447 ]
  %455 = phi i1 [ %123, %9 ], [ false, %447 ]
  %456 = phi i1 [ %124, %9 ], [ false, %447 ]
  %457 = phi i1 [ %117, %9 ], [ %449, %447 ]
  %458 = phi i1 [ %118, %9 ], [ %450, %447 ]
  %459 = phi i1 [ %119, %9 ], [ %451, %447 ]
  %460 = phi i1 [ %120, %9 ], [ %452, %447 ]
  %461 = phi i1 [ %121, %9 ], [ %453, %447 ]
  %462 = phi i1 [ %122, %9 ], [ %454, %447 ]
  %463 = phi i1 [ %123, %9 ], [ %455, %447 ]
  %464 = phi i1 [ %124, %9 ], [ %456, %447 ]
  %465 = phi i64 [ %318, %9 ], [ %1163, %447 ]
  %466 = phi i64 [ %319, %9 ], [ %1164, %447 ]
  %467 = phi i64 [ %320, %9 ], [ %1165, %447 ]
  %468 = phi i64 [ %321, %9 ], [ %1166, %447 ]
  %469 = phi i64 [ %322, %9 ], [ %1167, %447 ]
  %470 = phi i64 [ %323, %9 ], [ %1168, %447 ]
  %471 = phi i64 [ %324, %9 ], [ %1169, %447 ]
  %472 = phi i64 [ %325, %9 ], [ %1170, %447 ]
  %473 = phi i64 [ %293, %9 ], [ %465, %447 ]
  %474 = phi i64 [ %294, %9 ], [ %466, %447 ]
  %475 = phi i64 [ %295, %9 ], [ %467, %447 ]
  %476 = phi i64 [ %296, %9 ], [ %468, %447 ]
  %477 = phi i64 [ %297, %9 ], [ %469, %447 ]
  %478 = phi i64 [ %298, %9 ], [ %470, %447 ]
  %479 = phi i64 [ %299, %9 ], [ %471, %447 ]
  %480 = phi i64 [ %300, %9 ], [ %472, %447 ]
  %481 = phi i64 [ %260, %9 ], [ %473, %447 ]
  %482 = phi i64 [ %261, %9 ], [ %474, %447 ]
  %483 = phi i64 [ %262, %9 ], [ %475, %447 ]
  %484 = phi i64 [ %263, %9 ], [ %476, %447 ]
  %485 = phi i64 [ %264, %9 ], [ %477, %447 ]
  %486 = phi i64 [ %265, %9 ], [ %478, %447 ]
  %487 = phi i64 [ %266, %9 ], [ %479, %447 ]
  %488 = phi i64 [ %267, %9 ], [ %480, %447 ]
  %489 = phi i32 [ -1, %9 ], [ %493, %447 ]
  %490 = phi i32 [ 2, %9 ], [ %1161, %447 ]
  %491 = add i32 %489, 1, !dbg !27
  %492 = icmp sgt i32 %491, 2, !dbg !27
  %493 = select i1 %492, i32 0, i32 %491, !dbg !27
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %.idx139 = shl i32 %493, 13, !dbg !26
  %494 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx139, !dbg !26
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %354, !dbg !28
  %496 = ptrtoint ptr addrspace(3) %495 to i32, !dbg !28
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %496) #3, !dbg !28
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !28
  %499 = bitcast i32 %498 to <2 x bfloat>, !dbg !28
  %500 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !28
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !28
  %502 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !28
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !28
  %504 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !28
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !28
  %506 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 4096, !dbg !28
  %507 = ptrtoint ptr addrspace(3) %506 to i32, !dbg !28
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %507) #3, !dbg !28
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !28
  %510 = bitcast i32 %509 to <2 x bfloat>, !dbg !28
  %511 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !28
  %512 = bitcast i32 %511 to <2 x bfloat>, !dbg !28
  %513 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !28
  %514 = bitcast i32 %513 to <2 x bfloat>, !dbg !28
  %515 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !28
  %516 = bitcast i32 %515 to <2 x bfloat>, !dbg !28
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %355, !dbg !28
  %518 = ptrtoint ptr addrspace(3) %517 to i32, !dbg !28
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #3, !dbg !28
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !28
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !28
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !28
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !28
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !28
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !28
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !28
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !28
  %528 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %356, !dbg !28
  %529 = ptrtoint ptr addrspace(3) %528 to i32, !dbg !28
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %529) #3, !dbg !28
  %531 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !28
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !28
  %533 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !28
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !28
  %535 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !28
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !28
  %537 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !28
  %538 = bitcast i32 %537 to <2 x bfloat>, !dbg !28
  %539 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %357, !dbg !28
  %540 = ptrtoint ptr addrspace(3) %539 to i32, !dbg !28
  %541 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %540) #3, !dbg !28
  %542 = extractvalue { i32, i32, i32, i32 } %541, 0, !dbg !28
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !28
  %544 = extractvalue { i32, i32, i32, i32 } %541, 1, !dbg !28
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !28
  %546 = extractvalue { i32, i32, i32, i32 } %541, 2, !dbg !28
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !28
  %548 = extractvalue { i32, i32, i32, i32 } %541, 3, !dbg !28
  %549 = bitcast i32 %548 to <2 x bfloat>, !dbg !28
  %550 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %358, !dbg !28
  %551 = ptrtoint ptr addrspace(3) %550 to i32, !dbg !28
  %552 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %551) #3, !dbg !28
  %553 = extractvalue { i32, i32, i32, i32 } %552, 0, !dbg !28
  %554 = bitcast i32 %553 to <2 x bfloat>, !dbg !28
  %555 = extractvalue { i32, i32, i32, i32 } %552, 1, !dbg !28
  %556 = bitcast i32 %555 to <2 x bfloat>, !dbg !28
  %557 = extractvalue { i32, i32, i32, i32 } %552, 2, !dbg !28
  %558 = bitcast i32 %557 to <2 x bfloat>, !dbg !28
  %559 = extractvalue { i32, i32, i32, i32 } %552, 3, !dbg !28
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !28
  %561 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %359, !dbg !28
  %562 = ptrtoint ptr addrspace(3) %561 to i32, !dbg !28
  %563 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %562) #3, !dbg !28
  %564 = extractvalue { i32, i32, i32, i32 } %563, 0, !dbg !28
  %565 = bitcast i32 %564 to <2 x bfloat>, !dbg !28
  %566 = extractvalue { i32, i32, i32, i32 } %563, 1, !dbg !28
  %567 = bitcast i32 %566 to <2 x bfloat>, !dbg !28
  %568 = extractvalue { i32, i32, i32, i32 } %563, 2, !dbg !28
  %569 = bitcast i32 %568 to <2 x bfloat>, !dbg !28
  %570 = extractvalue { i32, i32, i32, i32 } %563, 3, !dbg !28
  %571 = bitcast i32 %570 to <2 x bfloat>, !dbg !28
  %572 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %360, !dbg !28
  %573 = ptrtoint ptr addrspace(3) %572 to i32, !dbg !28
  %574 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %573) #3, !dbg !28
  %575 = extractvalue { i32, i32, i32, i32 } %574, 0, !dbg !28
  %576 = bitcast i32 %575 to <2 x bfloat>, !dbg !28
  %577 = extractvalue { i32, i32, i32, i32 } %574, 1, !dbg !28
  %578 = bitcast i32 %577 to <2 x bfloat>, !dbg !28
  %579 = extractvalue { i32, i32, i32, i32 } %574, 2, !dbg !28
  %580 = bitcast i32 %579 to <2 x bfloat>, !dbg !28
  %581 = extractvalue { i32, i32, i32, i32 } %574, 3, !dbg !28
  %582 = bitcast i32 %581 to <2 x bfloat>, !dbg !28
  %583 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #3, !dbg !22
  %584 = extractvalue { i32, i32, i32, i32 } %583, 0, !dbg !22
  %585 = extractvalue { i32, i32, i32, i32 } %583, 1, !dbg !22
  %586 = extractvalue { i32, i32, i32, i32 } %583, 2, !dbg !22
  %587 = extractvalue { i32, i32, i32, i32 } %583, 3, !dbg !22
  %588 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #3, !dbg !22
  %589 = extractvalue { i32, i32, i32, i32 } %588, 0, !dbg !22
  %590 = extractvalue { i32, i32, i32, i32 } %588, 1, !dbg !22
  %591 = extractvalue { i32, i32, i32, i32 } %588, 2, !dbg !22
  %592 = extractvalue { i32, i32, i32, i32 } %588, 3, !dbg !22
  %593 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #3, !dbg !22
  %594 = extractvalue { i32, i32, i32, i32 } %593, 0, !dbg !22
  %595 = extractvalue { i32, i32, i32, i32 } %593, 1, !dbg !22
  %596 = extractvalue { i32, i32, i32, i32 } %593, 2, !dbg !22
  %597 = extractvalue { i32, i32, i32, i32 } %593, 3, !dbg !22
  %598 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #3, !dbg !22
  %599 = extractvalue { i32, i32, i32, i32 } %598, 0, !dbg !22
  %600 = extractvalue { i32, i32, i32, i32 } %598, 1, !dbg !22
  %601 = extractvalue { i32, i32, i32, i32 } %598, 2, !dbg !22
  %602 = extractvalue { i32, i32, i32, i32 } %598, 3, !dbg !22
  %603 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #3, !dbg !22
  %604 = extractvalue { i32, i32, i32, i32 } %603, 0, !dbg !22
  %605 = extractvalue { i32, i32, i32, i32 } %603, 1, !dbg !22
  %606 = extractvalue { i32, i32, i32, i32 } %603, 2, !dbg !22
  %607 = extractvalue { i32, i32, i32, i32 } %603, 3, !dbg !22
  %608 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #3, !dbg !22
  %609 = extractvalue { i32, i32, i32, i32 } %608, 0, !dbg !22
  %610 = extractvalue { i32, i32, i32, i32 } %608, 1, !dbg !22
  %611 = extractvalue { i32, i32, i32, i32 } %608, 2, !dbg !22
  %612 = extractvalue { i32, i32, i32, i32 } %608, 3, !dbg !22
  %613 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #3, !dbg !22
  %614 = extractvalue { i32, i32, i32, i32 } %613, 0, !dbg !22
  %615 = extractvalue { i32, i32, i32, i32 } %613, 1, !dbg !22
  %616 = extractvalue { i32, i32, i32, i32 } %613, 2, !dbg !22
  %617 = extractvalue { i32, i32, i32, i32 } %613, 3, !dbg !22
  %618 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %385) #3, !dbg !22
  %619 = extractvalue { i32, i32, i32, i32 } %618, 0, !dbg !22
  %620 = extractvalue { i32, i32, i32, i32 } %618, 1, !dbg !22
  %621 = extractvalue { i32, i32, i32, i32 } %618, 2, !dbg !22
  %622 = extractvalue { i32, i32, i32, i32 } %618, 3, !dbg !22
  %623 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %387) #3, !dbg !22
  %624 = extractvalue { i32, i32, i32, i32 } %623, 0, !dbg !22
  %625 = extractvalue { i32, i32, i32, i32 } %623, 1, !dbg !22
  %626 = extractvalue { i32, i32, i32, i32 } %623, 2, !dbg !22
  %627 = extractvalue { i32, i32, i32, i32 } %623, 3, !dbg !22
  %628 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %390) #3, !dbg !22
  %629 = extractvalue { i32, i32, i32, i32 } %628, 0, !dbg !22
  %630 = extractvalue { i32, i32, i32, i32 } %628, 1, !dbg !22
  %631 = extractvalue { i32, i32, i32, i32 } %628, 2, !dbg !22
  %632 = extractvalue { i32, i32, i32, i32 } %628, 3, !dbg !22
  %633 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %393) #3, !dbg !22
  %634 = extractvalue { i32, i32, i32, i32 } %633, 0, !dbg !22
  %635 = extractvalue { i32, i32, i32, i32 } %633, 1, !dbg !22
  %636 = extractvalue { i32, i32, i32, i32 } %633, 2, !dbg !22
  %637 = extractvalue { i32, i32, i32, i32 } %633, 3, !dbg !22
  %638 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #3, !dbg !22
  %639 = extractvalue { i32, i32, i32, i32 } %638, 0, !dbg !22
  %640 = extractvalue { i32, i32, i32, i32 } %638, 1, !dbg !22
  %641 = extractvalue { i32, i32, i32, i32 } %638, 2, !dbg !22
  %642 = extractvalue { i32, i32, i32, i32 } %638, 3, !dbg !22
  %643 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %398) #3, !dbg !22
  %644 = extractvalue { i32, i32, i32, i32 } %643, 0, !dbg !22
  %645 = extractvalue { i32, i32, i32, i32 } %643, 1, !dbg !22
  %646 = extractvalue { i32, i32, i32, i32 } %643, 2, !dbg !22
  %647 = extractvalue { i32, i32, i32, i32 } %643, 3, !dbg !22
  %648 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %401) #3, !dbg !22
  %649 = extractvalue { i32, i32, i32, i32 } %648, 0, !dbg !22
  %650 = extractvalue { i32, i32, i32, i32 } %648, 1, !dbg !22
  %651 = extractvalue { i32, i32, i32, i32 } %648, 2, !dbg !22
  %652 = extractvalue { i32, i32, i32, i32 } %648, 3, !dbg !22
  %653 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #3, !dbg !22
  %654 = extractvalue { i32, i32, i32, i32 } %653, 0, !dbg !22
  %655 = extractvalue { i32, i32, i32, i32 } %653, 1, !dbg !22
  %656 = extractvalue { i32, i32, i32, i32 } %653, 2, !dbg !22
  %657 = extractvalue { i32, i32, i32, i32 } %653, 3, !dbg !22
  %658 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %407) #3, !dbg !22
  %659 = extractvalue { i32, i32, i32, i32 } %658, 0, !dbg !22
  %660 = extractvalue { i32, i32, i32, i32 } %658, 1, !dbg !22
  %661 = extractvalue { i32, i32, i32, i32 } %658, 2, !dbg !22
  %662 = extractvalue { i32, i32, i32, i32 } %658, 3, !dbg !22
  %663 = fmul <2 x bfloat> %67, %499, !dbg !29
  %664 = bitcast <2 x bfloat> %663 to i32, !dbg !29
  %665 = fmul <2 x bfloat> %70, %501, !dbg !29
  %666 = bitcast <2 x bfloat> %665 to i32, !dbg !29
  %667 = fmul <2 x bfloat> %73, %503, !dbg !29
  %668 = bitcast <2 x bfloat> %667 to i32, !dbg !29
  %669 = fmul <2 x bfloat> %76, %505, !dbg !29
  %670 = bitcast <2 x bfloat> %669 to i32, !dbg !29
  %671 = fmul <2 x bfloat> %79, %510, !dbg !29
  %672 = bitcast <2 x bfloat> %671 to i32, !dbg !29
  %673 = fmul <2 x bfloat> %82, %512, !dbg !29
  %674 = bitcast <2 x bfloat> %673 to i32, !dbg !29
  %675 = fmul <2 x bfloat> %85, %514, !dbg !29
  %676 = bitcast <2 x bfloat> %675 to i32, !dbg !29
  %677 = fmul <2 x bfloat> %88, %516, !dbg !29
  %678 = bitcast <2 x bfloat> %677 to i32, !dbg !29
  %679 = fmul <2 x bfloat> %67, %521, !dbg !29
  %680 = bitcast <2 x bfloat> %679 to i32, !dbg !29
  %681 = fmul <2 x bfloat> %70, %523, !dbg !29
  %682 = bitcast <2 x bfloat> %681 to i32, !dbg !29
  %683 = fmul <2 x bfloat> %73, %525, !dbg !29
  %684 = bitcast <2 x bfloat> %683 to i32, !dbg !29
  %685 = fmul <2 x bfloat> %76, %527, !dbg !29
  %686 = bitcast <2 x bfloat> %685 to i32, !dbg !29
  %687 = fmul <2 x bfloat> %79, %532, !dbg !29
  %688 = bitcast <2 x bfloat> %687 to i32, !dbg !29
  %689 = fmul <2 x bfloat> %82, %534, !dbg !29
  %690 = bitcast <2 x bfloat> %689 to i32, !dbg !29
  %691 = fmul <2 x bfloat> %85, %536, !dbg !29
  %692 = bitcast <2 x bfloat> %691 to i32, !dbg !29
  %693 = fmul <2 x bfloat> %88, %538, !dbg !29
  %694 = bitcast <2 x bfloat> %693 to i32, !dbg !29
  %695 = fmul <2 x bfloat> %67, %543, !dbg !29
  %696 = bitcast <2 x bfloat> %695 to i32, !dbg !29
  %697 = fmul <2 x bfloat> %70, %545, !dbg !29
  %698 = bitcast <2 x bfloat> %697 to i32, !dbg !29
  %699 = fmul <2 x bfloat> %73, %547, !dbg !29
  %700 = bitcast <2 x bfloat> %699 to i32, !dbg !29
  %701 = fmul <2 x bfloat> %76, %549, !dbg !29
  %702 = bitcast <2 x bfloat> %701 to i32, !dbg !29
  %703 = fmul <2 x bfloat> %79, %554, !dbg !29
  %704 = bitcast <2 x bfloat> %703 to i32, !dbg !29
  %705 = fmul <2 x bfloat> %82, %556, !dbg !29
  %706 = bitcast <2 x bfloat> %705 to i32, !dbg !29
  %707 = fmul <2 x bfloat> %85, %558, !dbg !29
  %708 = bitcast <2 x bfloat> %707 to i32, !dbg !29
  %709 = fmul <2 x bfloat> %88, %560, !dbg !29
  %710 = bitcast <2 x bfloat> %709 to i32, !dbg !29
  %711 = fmul <2 x bfloat> %67, %565, !dbg !29
  %712 = bitcast <2 x bfloat> %711 to i32, !dbg !29
  %713 = fmul <2 x bfloat> %70, %567, !dbg !29
  %714 = bitcast <2 x bfloat> %713 to i32, !dbg !29
  %715 = fmul <2 x bfloat> %73, %569, !dbg !29
  %716 = bitcast <2 x bfloat> %715 to i32, !dbg !29
  %717 = fmul <2 x bfloat> %76, %571, !dbg !29
  %718 = bitcast <2 x bfloat> %717 to i32, !dbg !29
  %719 = fmul <2 x bfloat> %79, %576, !dbg !29
  %720 = bitcast <2 x bfloat> %719 to i32, !dbg !29
  %721 = fmul <2 x bfloat> %82, %578, !dbg !29
  %722 = bitcast <2 x bfloat> %721 to i32, !dbg !29
  %723 = fmul <2 x bfloat> %85, %580, !dbg !29
  %724 = bitcast <2 x bfloat> %723 to i32, !dbg !29
  %725 = fmul <2 x bfloat> %88, %582, !dbg !29
  %726 = bitcast <2 x bfloat> %725 to i32, !dbg !29
  %727 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %584, i32 %585, i32 %586, i32 %587, i32 %664, i32 %666) #3, !dbg !29
  %728 = extractvalue { float, float, float, float } %727, 0, !dbg !29
  %729 = extractvalue { float, float, float, float } %727, 1, !dbg !29
  %730 = extractvalue { float, float, float, float } %727, 2, !dbg !29
  %731 = extractvalue { float, float, float, float } %727, 3, !dbg !29
  %732 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %584, i32 %585, i32 %586, i32 %587, i32 %680, i32 %682) #3, !dbg !29
  %733 = extractvalue { float, float, float, float } %732, 0, !dbg !29
  %734 = extractvalue { float, float, float, float } %732, 1, !dbg !29
  %735 = extractvalue { float, float, float, float } %732, 2, !dbg !29
  %736 = extractvalue { float, float, float, float } %732, 3, !dbg !29
  %737 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %584, i32 %585, i32 %586, i32 %587, i32 %696, i32 %698) #3, !dbg !29
  %738 = extractvalue { float, float, float, float } %737, 0, !dbg !29
  %739 = extractvalue { float, float, float, float } %737, 1, !dbg !29
  %740 = extractvalue { float, float, float, float } %737, 2, !dbg !29
  %741 = extractvalue { float, float, float, float } %737, 3, !dbg !29
  %742 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %584, i32 %585, i32 %586, i32 %587, i32 %712, i32 %714) #3, !dbg !29
  %743 = extractvalue { float, float, float, float } %742, 0, !dbg !29
  %744 = extractvalue { float, float, float, float } %742, 1, !dbg !29
  %745 = extractvalue { float, float, float, float } %742, 2, !dbg !29
  %746 = extractvalue { float, float, float, float } %742, 3, !dbg !29
  %747 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %604, i32 %605, i32 %606, i32 %607, i32 %664, i32 %666) #3, !dbg !29
  %748 = extractvalue { float, float, float, float } %747, 0, !dbg !29
  %749 = extractvalue { float, float, float, float } %747, 1, !dbg !29
  %750 = extractvalue { float, float, float, float } %747, 2, !dbg !29
  %751 = extractvalue { float, float, float, float } %747, 3, !dbg !29
  %752 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %604, i32 %605, i32 %606, i32 %607, i32 %680, i32 %682) #3, !dbg !29
  %753 = extractvalue { float, float, float, float } %752, 0, !dbg !29
  %754 = extractvalue { float, float, float, float } %752, 1, !dbg !29
  %755 = extractvalue { float, float, float, float } %752, 2, !dbg !29
  %756 = extractvalue { float, float, float, float } %752, 3, !dbg !29
  %757 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %604, i32 %605, i32 %606, i32 %607, i32 %696, i32 %698) #3, !dbg !29
  %758 = extractvalue { float, float, float, float } %757, 0, !dbg !29
  %759 = extractvalue { float, float, float, float } %757, 1, !dbg !29
  %760 = extractvalue { float, float, float, float } %757, 2, !dbg !29
  %761 = extractvalue { float, float, float, float } %757, 3, !dbg !29
  %762 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %604, i32 %605, i32 %606, i32 %607, i32 %712, i32 %714) #3, !dbg !29
  %763 = extractvalue { float, float, float, float } %762, 0, !dbg !29
  %764 = extractvalue { float, float, float, float } %762, 1, !dbg !29
  %765 = extractvalue { float, float, float, float } %762, 2, !dbg !29
  %766 = extractvalue { float, float, float, float } %762, 3, !dbg !29
  %767 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %624, i32 %625, i32 %626, i32 %627, i32 %664, i32 %666) #3, !dbg !29
  %768 = extractvalue { float, float, float, float } %767, 0, !dbg !29
  %769 = extractvalue { float, float, float, float } %767, 1, !dbg !29
  %770 = extractvalue { float, float, float, float } %767, 2, !dbg !29
  %771 = extractvalue { float, float, float, float } %767, 3, !dbg !29
  %772 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %624, i32 %625, i32 %626, i32 %627, i32 %680, i32 %682) #3, !dbg !29
  %773 = extractvalue { float, float, float, float } %772, 0, !dbg !29
  %774 = extractvalue { float, float, float, float } %772, 1, !dbg !29
  %775 = extractvalue { float, float, float, float } %772, 2, !dbg !29
  %776 = extractvalue { float, float, float, float } %772, 3, !dbg !29
  %777 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %624, i32 %625, i32 %626, i32 %627, i32 %696, i32 %698) #3, !dbg !29
  %778 = extractvalue { float, float, float, float } %777, 0, !dbg !29
  %779 = extractvalue { float, float, float, float } %777, 1, !dbg !29
  %780 = extractvalue { float, float, float, float } %777, 2, !dbg !29
  %781 = extractvalue { float, float, float, float } %777, 3, !dbg !29
  %782 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %624, i32 %625, i32 %626, i32 %627, i32 %712, i32 %714) #3, !dbg !29
  %783 = extractvalue { float, float, float, float } %782, 0, !dbg !29
  %784 = extractvalue { float, float, float, float } %782, 1, !dbg !29
  %785 = extractvalue { float, float, float, float } %782, 2, !dbg !29
  %786 = extractvalue { float, float, float, float } %782, 3, !dbg !29
  %787 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %644, i32 %645, i32 %646, i32 %647, i32 %664, i32 %666) #3, !dbg !29
  %788 = extractvalue { float, float, float, float } %787, 0, !dbg !29
  %789 = extractvalue { float, float, float, float } %787, 1, !dbg !29
  %790 = extractvalue { float, float, float, float } %787, 2, !dbg !29
  %791 = extractvalue { float, float, float, float } %787, 3, !dbg !29
  %792 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %644, i32 %645, i32 %646, i32 %647, i32 %680, i32 %682) #3, !dbg !29
  %793 = extractvalue { float, float, float, float } %792, 0, !dbg !29
  %794 = extractvalue { float, float, float, float } %792, 1, !dbg !29
  %795 = extractvalue { float, float, float, float } %792, 2, !dbg !29
  %796 = extractvalue { float, float, float, float } %792, 3, !dbg !29
  %797 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %644, i32 %645, i32 %646, i32 %647, i32 %696, i32 %698) #3, !dbg !29
  %798 = extractvalue { float, float, float, float } %797, 0, !dbg !29
  %799 = extractvalue { float, float, float, float } %797, 1, !dbg !29
  %800 = extractvalue { float, float, float, float } %797, 2, !dbg !29
  %801 = extractvalue { float, float, float, float } %797, 3, !dbg !29
  %802 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %644, i32 %645, i32 %646, i32 %647, i32 %712, i32 %714) #3, !dbg !29
  %803 = extractvalue { float, float, float, float } %802, 0, !dbg !29
  %804 = extractvalue { float, float, float, float } %802, 1, !dbg !29
  %805 = extractvalue { float, float, float, float } %802, 2, !dbg !29
  %806 = extractvalue { float, float, float, float } %802, 3, !dbg !29
  %807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %728, float %729, float %730, float %731, i32 %589, i32 %590, i32 %591, i32 %592, i32 %668, i32 %670) #3, !dbg !29
  %808 = extractvalue { float, float, float, float } %807, 0, !dbg !29
  %809 = extractvalue { float, float, float, float } %807, 1, !dbg !29
  %810 = extractvalue { float, float, float, float } %807, 2, !dbg !29
  %811 = extractvalue { float, float, float, float } %807, 3, !dbg !29
  %812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %733, float %734, float %735, float %736, i32 %589, i32 %590, i32 %591, i32 %592, i32 %684, i32 %686) #3, !dbg !29
  %813 = extractvalue { float, float, float, float } %812, 0, !dbg !29
  %814 = extractvalue { float, float, float, float } %812, 1, !dbg !29
  %815 = extractvalue { float, float, float, float } %812, 2, !dbg !29
  %816 = extractvalue { float, float, float, float } %812, 3, !dbg !29
  %817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %738, float %739, float %740, float %741, i32 %589, i32 %590, i32 %591, i32 %592, i32 %700, i32 %702) #3, !dbg !29
  %818 = extractvalue { float, float, float, float } %817, 0, !dbg !29
  %819 = extractvalue { float, float, float, float } %817, 1, !dbg !29
  %820 = extractvalue { float, float, float, float } %817, 2, !dbg !29
  %821 = extractvalue { float, float, float, float } %817, 3, !dbg !29
  %822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %743, float %744, float %745, float %746, i32 %589, i32 %590, i32 %591, i32 %592, i32 %716, i32 %718) #3, !dbg !29
  %823 = extractvalue { float, float, float, float } %822, 0, !dbg !29
  %824 = extractvalue { float, float, float, float } %822, 1, !dbg !29
  %825 = extractvalue { float, float, float, float } %822, 2, !dbg !29
  %826 = extractvalue { float, float, float, float } %822, 3, !dbg !29
  %827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %748, float %749, float %750, float %751, i32 %609, i32 %610, i32 %611, i32 %612, i32 %668, i32 %670) #3, !dbg !29
  %828 = extractvalue { float, float, float, float } %827, 0, !dbg !29
  %829 = extractvalue { float, float, float, float } %827, 1, !dbg !29
  %830 = extractvalue { float, float, float, float } %827, 2, !dbg !29
  %831 = extractvalue { float, float, float, float } %827, 3, !dbg !29
  %832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %753, float %754, float %755, float %756, i32 %609, i32 %610, i32 %611, i32 %612, i32 %684, i32 %686) #3, !dbg !29
  %833 = extractvalue { float, float, float, float } %832, 0, !dbg !29
  %834 = extractvalue { float, float, float, float } %832, 1, !dbg !29
  %835 = extractvalue { float, float, float, float } %832, 2, !dbg !29
  %836 = extractvalue { float, float, float, float } %832, 3, !dbg !29
  %837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %758, float %759, float %760, float %761, i32 %609, i32 %610, i32 %611, i32 %612, i32 %700, i32 %702) #3, !dbg !29
  %838 = extractvalue { float, float, float, float } %837, 0, !dbg !29
  %839 = extractvalue { float, float, float, float } %837, 1, !dbg !29
  %840 = extractvalue { float, float, float, float } %837, 2, !dbg !29
  %841 = extractvalue { float, float, float, float } %837, 3, !dbg !29
  %842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %763, float %764, float %765, float %766, i32 %609, i32 %610, i32 %611, i32 %612, i32 %716, i32 %718) #3, !dbg !29
  %843 = extractvalue { float, float, float, float } %842, 0, !dbg !29
  %844 = extractvalue { float, float, float, float } %842, 1, !dbg !29
  %845 = extractvalue { float, float, float, float } %842, 2, !dbg !29
  %846 = extractvalue { float, float, float, float } %842, 3, !dbg !29
  %847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %768, float %769, float %770, float %771, i32 %629, i32 %630, i32 %631, i32 %632, i32 %668, i32 %670) #3, !dbg !29
  %848 = extractvalue { float, float, float, float } %847, 0, !dbg !29
  %849 = extractvalue { float, float, float, float } %847, 1, !dbg !29
  %850 = extractvalue { float, float, float, float } %847, 2, !dbg !29
  %851 = extractvalue { float, float, float, float } %847, 3, !dbg !29
  %852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %773, float %774, float %775, float %776, i32 %629, i32 %630, i32 %631, i32 %632, i32 %684, i32 %686) #3, !dbg !29
  %853 = extractvalue { float, float, float, float } %852, 0, !dbg !29
  %854 = extractvalue { float, float, float, float } %852, 1, !dbg !29
  %855 = extractvalue { float, float, float, float } %852, 2, !dbg !29
  %856 = extractvalue { float, float, float, float } %852, 3, !dbg !29
  %857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %778, float %779, float %780, float %781, i32 %629, i32 %630, i32 %631, i32 %632, i32 %700, i32 %702) #3, !dbg !29
  %858 = extractvalue { float, float, float, float } %857, 0, !dbg !29
  %859 = extractvalue { float, float, float, float } %857, 1, !dbg !29
  %860 = extractvalue { float, float, float, float } %857, 2, !dbg !29
  %861 = extractvalue { float, float, float, float } %857, 3, !dbg !29
  %862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %783, float %784, float %785, float %786, i32 %629, i32 %630, i32 %631, i32 %632, i32 %716, i32 %718) #3, !dbg !29
  %863 = extractvalue { float, float, float, float } %862, 0, !dbg !29
  %864 = extractvalue { float, float, float, float } %862, 1, !dbg !29
  %865 = extractvalue { float, float, float, float } %862, 2, !dbg !29
  %866 = extractvalue { float, float, float, float } %862, 3, !dbg !29
  %867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %788, float %789, float %790, float %791, i32 %649, i32 %650, i32 %651, i32 %652, i32 %668, i32 %670) #3, !dbg !29
  %868 = extractvalue { float, float, float, float } %867, 0, !dbg !29
  %869 = extractvalue { float, float, float, float } %867, 1, !dbg !29
  %870 = extractvalue { float, float, float, float } %867, 2, !dbg !29
  %871 = extractvalue { float, float, float, float } %867, 3, !dbg !29
  %872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %793, float %794, float %795, float %796, i32 %649, i32 %650, i32 %651, i32 %652, i32 %684, i32 %686) #3, !dbg !29
  %873 = extractvalue { float, float, float, float } %872, 0, !dbg !29
  %874 = extractvalue { float, float, float, float } %872, 1, !dbg !29
  %875 = extractvalue { float, float, float, float } %872, 2, !dbg !29
  %876 = extractvalue { float, float, float, float } %872, 3, !dbg !29
  %877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %798, float %799, float %800, float %801, i32 %649, i32 %650, i32 %651, i32 %652, i32 %700, i32 %702) #3, !dbg !29
  %878 = extractvalue { float, float, float, float } %877, 0, !dbg !29
  %879 = extractvalue { float, float, float, float } %877, 1, !dbg !29
  %880 = extractvalue { float, float, float, float } %877, 2, !dbg !29
  %881 = extractvalue { float, float, float, float } %877, 3, !dbg !29
  %882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %803, float %804, float %805, float %806, i32 %649, i32 %650, i32 %651, i32 %652, i32 %716, i32 %718) #3, !dbg !29
  %883 = extractvalue { float, float, float, float } %882, 0, !dbg !29
  %884 = extractvalue { float, float, float, float } %882, 1, !dbg !29
  %885 = extractvalue { float, float, float, float } %882, 2, !dbg !29
  %886 = extractvalue { float, float, float, float } %882, 3, !dbg !29
  %887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %808, float %809, float %810, float %811, i32 %594, i32 %595, i32 %596, i32 %597, i32 %672, i32 %674) #3, !dbg !29
  %888 = extractvalue { float, float, float, float } %887, 0, !dbg !29
  %889 = extractvalue { float, float, float, float } %887, 1, !dbg !29
  %890 = extractvalue { float, float, float, float } %887, 2, !dbg !29
  %891 = extractvalue { float, float, float, float } %887, 3, !dbg !29
  %892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %813, float %814, float %815, float %816, i32 %594, i32 %595, i32 %596, i32 %597, i32 %688, i32 %690) #3, !dbg !29
  %893 = extractvalue { float, float, float, float } %892, 0, !dbg !29
  %894 = extractvalue { float, float, float, float } %892, 1, !dbg !29
  %895 = extractvalue { float, float, float, float } %892, 2, !dbg !29
  %896 = extractvalue { float, float, float, float } %892, 3, !dbg !29
  %897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %818, float %819, float %820, float %821, i32 %594, i32 %595, i32 %596, i32 %597, i32 %704, i32 %706) #3, !dbg !29
  %898 = extractvalue { float, float, float, float } %897, 0, !dbg !29
  %899 = extractvalue { float, float, float, float } %897, 1, !dbg !29
  %900 = extractvalue { float, float, float, float } %897, 2, !dbg !29
  %901 = extractvalue { float, float, float, float } %897, 3, !dbg !29
  %902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %823, float %824, float %825, float %826, i32 %594, i32 %595, i32 %596, i32 %597, i32 %720, i32 %722) #3, !dbg !29
  %903 = extractvalue { float, float, float, float } %902, 0, !dbg !29
  %904 = extractvalue { float, float, float, float } %902, 1, !dbg !29
  %905 = extractvalue { float, float, float, float } %902, 2, !dbg !29
  %906 = extractvalue { float, float, float, float } %902, 3, !dbg !29
  %907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %828, float %829, float %830, float %831, i32 %614, i32 %615, i32 %616, i32 %617, i32 %672, i32 %674) #3, !dbg !29
  %908 = extractvalue { float, float, float, float } %907, 0, !dbg !29
  %909 = extractvalue { float, float, float, float } %907, 1, !dbg !29
  %910 = extractvalue { float, float, float, float } %907, 2, !dbg !29
  %911 = extractvalue { float, float, float, float } %907, 3, !dbg !29
  %912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %833, float %834, float %835, float %836, i32 %614, i32 %615, i32 %616, i32 %617, i32 %688, i32 %690) #3, !dbg !29
  %913 = extractvalue { float, float, float, float } %912, 0, !dbg !29
  %914 = extractvalue { float, float, float, float } %912, 1, !dbg !29
  %915 = extractvalue { float, float, float, float } %912, 2, !dbg !29
  %916 = extractvalue { float, float, float, float } %912, 3, !dbg !29
  %917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %838, float %839, float %840, float %841, i32 %614, i32 %615, i32 %616, i32 %617, i32 %704, i32 %706) #3, !dbg !29
  %918 = extractvalue { float, float, float, float } %917, 0, !dbg !29
  %919 = extractvalue { float, float, float, float } %917, 1, !dbg !29
  %920 = extractvalue { float, float, float, float } %917, 2, !dbg !29
  %921 = extractvalue { float, float, float, float } %917, 3, !dbg !29
  %922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %843, float %844, float %845, float %846, i32 %614, i32 %615, i32 %616, i32 %617, i32 %720, i32 %722) #3, !dbg !29
  %923 = extractvalue { float, float, float, float } %922, 0, !dbg !29
  %924 = extractvalue { float, float, float, float } %922, 1, !dbg !29
  %925 = extractvalue { float, float, float, float } %922, 2, !dbg !29
  %926 = extractvalue { float, float, float, float } %922, 3, !dbg !29
  %927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %848, float %849, float %850, float %851, i32 %634, i32 %635, i32 %636, i32 %637, i32 %672, i32 %674) #3, !dbg !29
  %928 = extractvalue { float, float, float, float } %927, 0, !dbg !29
  %929 = extractvalue { float, float, float, float } %927, 1, !dbg !29
  %930 = extractvalue { float, float, float, float } %927, 2, !dbg !29
  %931 = extractvalue { float, float, float, float } %927, 3, !dbg !29
  %932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %853, float %854, float %855, float %856, i32 %634, i32 %635, i32 %636, i32 %637, i32 %688, i32 %690) #3, !dbg !29
  %933 = extractvalue { float, float, float, float } %932, 0, !dbg !29
  %934 = extractvalue { float, float, float, float } %932, 1, !dbg !29
  %935 = extractvalue { float, float, float, float } %932, 2, !dbg !29
  %936 = extractvalue { float, float, float, float } %932, 3, !dbg !29
  %937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %858, float %859, float %860, float %861, i32 %634, i32 %635, i32 %636, i32 %637, i32 %704, i32 %706) #3, !dbg !29
  %938 = extractvalue { float, float, float, float } %937, 0, !dbg !29
  %939 = extractvalue { float, float, float, float } %937, 1, !dbg !29
  %940 = extractvalue { float, float, float, float } %937, 2, !dbg !29
  %941 = extractvalue { float, float, float, float } %937, 3, !dbg !29
  %942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %863, float %864, float %865, float %866, i32 %634, i32 %635, i32 %636, i32 %637, i32 %720, i32 %722) #3, !dbg !29
  %943 = extractvalue { float, float, float, float } %942, 0, !dbg !29
  %944 = extractvalue { float, float, float, float } %942, 1, !dbg !29
  %945 = extractvalue { float, float, float, float } %942, 2, !dbg !29
  %946 = extractvalue { float, float, float, float } %942, 3, !dbg !29
  %947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %868, float %869, float %870, float %871, i32 %654, i32 %655, i32 %656, i32 %657, i32 %672, i32 %674) #3, !dbg !29
  %948 = extractvalue { float, float, float, float } %947, 0, !dbg !29
  %949 = extractvalue { float, float, float, float } %947, 1, !dbg !29
  %950 = extractvalue { float, float, float, float } %947, 2, !dbg !29
  %951 = extractvalue { float, float, float, float } %947, 3, !dbg !29
  %952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %873, float %874, float %875, float %876, i32 %654, i32 %655, i32 %656, i32 %657, i32 %688, i32 %690) #3, !dbg !29
  %953 = extractvalue { float, float, float, float } %952, 0, !dbg !29
  %954 = extractvalue { float, float, float, float } %952, 1, !dbg !29
  %955 = extractvalue { float, float, float, float } %952, 2, !dbg !29
  %956 = extractvalue { float, float, float, float } %952, 3, !dbg !29
  %957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %878, float %879, float %880, float %881, i32 %654, i32 %655, i32 %656, i32 %657, i32 %704, i32 %706) #3, !dbg !29
  %958 = extractvalue { float, float, float, float } %957, 0, !dbg !29
  %959 = extractvalue { float, float, float, float } %957, 1, !dbg !29
  %960 = extractvalue { float, float, float, float } %957, 2, !dbg !29
  %961 = extractvalue { float, float, float, float } %957, 3, !dbg !29
  %962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %883, float %884, float %885, float %886, i32 %654, i32 %655, i32 %656, i32 %657, i32 %720, i32 %722) #3, !dbg !29
  %963 = extractvalue { float, float, float, float } %962, 0, !dbg !29
  %964 = extractvalue { float, float, float, float } %962, 1, !dbg !29
  %965 = extractvalue { float, float, float, float } %962, 2, !dbg !29
  %966 = extractvalue { float, float, float, float } %962, 3, !dbg !29
  %967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %888, float %889, float %890, float %891, i32 %599, i32 %600, i32 %601, i32 %602, i32 %676, i32 %678) #3, !dbg !29
  %968 = extractvalue { float, float, float, float } %967, 0, !dbg !29
  %969 = extractvalue { float, float, float, float } %967, 1, !dbg !29
  %970 = extractvalue { float, float, float, float } %967, 2, !dbg !29
  %971 = extractvalue { float, float, float, float } %967, 3, !dbg !29
  %972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %893, float %894, float %895, float %896, i32 %599, i32 %600, i32 %601, i32 %602, i32 %692, i32 %694) #3, !dbg !29
  %973 = extractvalue { float, float, float, float } %972, 0, !dbg !29
  %974 = extractvalue { float, float, float, float } %972, 1, !dbg !29
  %975 = extractvalue { float, float, float, float } %972, 2, !dbg !29
  %976 = extractvalue { float, float, float, float } %972, 3, !dbg !29
  %977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %898, float %899, float %900, float %901, i32 %599, i32 %600, i32 %601, i32 %602, i32 %708, i32 %710) #3, !dbg !29
  %978 = extractvalue { float, float, float, float } %977, 0, !dbg !29
  %979 = extractvalue { float, float, float, float } %977, 1, !dbg !29
  %980 = extractvalue { float, float, float, float } %977, 2, !dbg !29
  %981 = extractvalue { float, float, float, float } %977, 3, !dbg !29
  %982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %903, float %904, float %905, float %906, i32 %599, i32 %600, i32 %601, i32 %602, i32 %724, i32 %726) #3, !dbg !29
  %983 = extractvalue { float, float, float, float } %982, 0, !dbg !29
  %984 = extractvalue { float, float, float, float } %982, 1, !dbg !29
  %985 = extractvalue { float, float, float, float } %982, 2, !dbg !29
  %986 = extractvalue { float, float, float, float } %982, 3, !dbg !29
  %987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %908, float %909, float %910, float %911, i32 %619, i32 %620, i32 %621, i32 %622, i32 %676, i32 %678) #3, !dbg !29
  %988 = extractvalue { float, float, float, float } %987, 0, !dbg !29
  %989 = extractvalue { float, float, float, float } %987, 1, !dbg !29
  %990 = extractvalue { float, float, float, float } %987, 2, !dbg !29
  %991 = extractvalue { float, float, float, float } %987, 3, !dbg !29
  %992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %913, float %914, float %915, float %916, i32 %619, i32 %620, i32 %621, i32 %622, i32 %692, i32 %694) #3, !dbg !29
  %993 = extractvalue { float, float, float, float } %992, 0, !dbg !29
  %994 = extractvalue { float, float, float, float } %992, 1, !dbg !29
  %995 = extractvalue { float, float, float, float } %992, 2, !dbg !29
  %996 = extractvalue { float, float, float, float } %992, 3, !dbg !29
  %997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %918, float %919, float %920, float %921, i32 %619, i32 %620, i32 %621, i32 %622, i32 %708, i32 %710) #3, !dbg !29
  %998 = extractvalue { float, float, float, float } %997, 0, !dbg !29
  %999 = extractvalue { float, float, float, float } %997, 1, !dbg !29
  %1000 = extractvalue { float, float, float, float } %997, 2, !dbg !29
  %1001 = extractvalue { float, float, float, float } %997, 3, !dbg !29
  %1002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %923, float %924, float %925, float %926, i32 %619, i32 %620, i32 %621, i32 %622, i32 %724, i32 %726) #3, !dbg !29
  %1003 = extractvalue { float, float, float, float } %1002, 0, !dbg !29
  %1004 = extractvalue { float, float, float, float } %1002, 1, !dbg !29
  %1005 = extractvalue { float, float, float, float } %1002, 2, !dbg !29
  %1006 = extractvalue { float, float, float, float } %1002, 3, !dbg !29
  %1007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %928, float %929, float %930, float %931, i32 %639, i32 %640, i32 %641, i32 %642, i32 %676, i32 %678) #3, !dbg !29
  %1008 = extractvalue { float, float, float, float } %1007, 0, !dbg !29
  %1009 = extractvalue { float, float, float, float } %1007, 1, !dbg !29
  %1010 = extractvalue { float, float, float, float } %1007, 2, !dbg !29
  %1011 = extractvalue { float, float, float, float } %1007, 3, !dbg !29
  %1012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %933, float %934, float %935, float %936, i32 %639, i32 %640, i32 %641, i32 %642, i32 %692, i32 %694) #3, !dbg !29
  %1013 = extractvalue { float, float, float, float } %1012, 0, !dbg !29
  %1014 = extractvalue { float, float, float, float } %1012, 1, !dbg !29
  %1015 = extractvalue { float, float, float, float } %1012, 2, !dbg !29
  %1016 = extractvalue { float, float, float, float } %1012, 3, !dbg !29
  %1017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %938, float %939, float %940, float %941, i32 %639, i32 %640, i32 %641, i32 %642, i32 %708, i32 %710) #3, !dbg !29
  %1018 = extractvalue { float, float, float, float } %1017, 0, !dbg !29
  %1019 = extractvalue { float, float, float, float } %1017, 1, !dbg !29
  %1020 = extractvalue { float, float, float, float } %1017, 2, !dbg !29
  %1021 = extractvalue { float, float, float, float } %1017, 3, !dbg !29
  %1022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %943, float %944, float %945, float %946, i32 %639, i32 %640, i32 %641, i32 %642, i32 %724, i32 %726) #3, !dbg !29
  %1023 = extractvalue { float, float, float, float } %1022, 0, !dbg !29
  %1024 = extractvalue { float, float, float, float } %1022, 1, !dbg !29
  %1025 = extractvalue { float, float, float, float } %1022, 2, !dbg !29
  %1026 = extractvalue { float, float, float, float } %1022, 3, !dbg !29
  %1027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %948, float %949, float %950, float %951, i32 %659, i32 %660, i32 %661, i32 %662, i32 %676, i32 %678) #3, !dbg !29
  %1028 = extractvalue { float, float, float, float } %1027, 0, !dbg !29
  %1029 = extractvalue { float, float, float, float } %1027, 1, !dbg !29
  %1030 = extractvalue { float, float, float, float } %1027, 2, !dbg !29
  %1031 = extractvalue { float, float, float, float } %1027, 3, !dbg !29
  %1032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %953, float %954, float %955, float %956, i32 %659, i32 %660, i32 %661, i32 %662, i32 %692, i32 %694) #3, !dbg !29
  %1033 = extractvalue { float, float, float, float } %1032, 0, !dbg !29
  %1034 = extractvalue { float, float, float, float } %1032, 1, !dbg !29
  %1035 = extractvalue { float, float, float, float } %1032, 2, !dbg !29
  %1036 = extractvalue { float, float, float, float } %1032, 3, !dbg !29
  %1037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %958, float %959, float %960, float %961, i32 %659, i32 %660, i32 %661, i32 %662, i32 %708, i32 %710) #3, !dbg !29
  %1038 = extractvalue { float, float, float, float } %1037, 0, !dbg !29
  %1039 = extractvalue { float, float, float, float } %1037, 1, !dbg !29
  %1040 = extractvalue { float, float, float, float } %1037, 2, !dbg !29
  %1041 = extractvalue { float, float, float, float } %1037, 3, !dbg !29
  %1042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %963, float %964, float %965, float %966, i32 %659, i32 %660, i32 %661, i32 %662, i32 %724, i32 %726) #3, !dbg !29
  %1043 = extractvalue { float, float, float, float } %1042, 0, !dbg !29
  %1044 = extractvalue { float, float, float, float } %1042, 1, !dbg !29
  %1045 = extractvalue { float, float, float, float } %1042, 2, !dbg !29
  %1046 = extractvalue { float, float, float, float } %1042, 3, !dbg !29
  %1047 = insertelement <2 x float> poison, float %968, i64 0, !dbg !30
  %1048 = insertelement <2 x float> %1047, float %969, i64 1, !dbg !30
  %1049 = fptrunc <2 x float> %1048 to <2 x bfloat>, !dbg !30
  %1050 = insertelement <2 x float> poison, float %970, i64 0, !dbg !30
  %1051 = insertelement <2 x float> %1050, float %971, i64 1, !dbg !30
  %1052 = fptrunc <2 x float> %1051 to <2 x bfloat>, !dbg !30
  %1053 = insertelement <2 x float> poison, float %973, i64 0, !dbg !30
  %1054 = insertelement <2 x float> %1053, float %974, i64 1, !dbg !30
  %1055 = fptrunc <2 x float> %1054 to <2 x bfloat>, !dbg !30
  %1056 = insertelement <2 x float> poison, float %975, i64 0, !dbg !30
  %1057 = insertelement <2 x float> %1056, float %976, i64 1, !dbg !30
  %1058 = fptrunc <2 x float> %1057 to <2 x bfloat>, !dbg !30
  %1059 = insertelement <2 x float> poison, float %978, i64 0, !dbg !30
  %1060 = insertelement <2 x float> %1059, float %979, i64 1, !dbg !30
  %1061 = fptrunc <2 x float> %1060 to <2 x bfloat>, !dbg !30
  %1062 = insertelement <2 x float> poison, float %980, i64 0, !dbg !30
  %1063 = insertelement <2 x float> %1062, float %981, i64 1, !dbg !30
  %1064 = fptrunc <2 x float> %1063 to <2 x bfloat>, !dbg !30
  %1065 = insertelement <2 x float> poison, float %983, i64 0, !dbg !30
  %1066 = insertelement <2 x float> %1065, float %984, i64 1, !dbg !30
  %1067 = fptrunc <2 x float> %1066 to <2 x bfloat>, !dbg !30
  %1068 = insertelement <2 x float> poison, float %985, i64 0, !dbg !30
  %1069 = insertelement <2 x float> %1068, float %986, i64 1, !dbg !30
  %1070 = fptrunc <2 x float> %1069 to <2 x bfloat>, !dbg !30
  %1071 = insertelement <2 x float> poison, float %988, i64 0, !dbg !30
  %1072 = insertelement <2 x float> %1071, float %989, i64 1, !dbg !30
  %1073 = fptrunc <2 x float> %1072 to <2 x bfloat>, !dbg !30
  %1074 = insertelement <2 x float> poison, float %990, i64 0, !dbg !30
  %1075 = insertelement <2 x float> %1074, float %991, i64 1, !dbg !30
  %1076 = fptrunc <2 x float> %1075 to <2 x bfloat>, !dbg !30
  %1077 = insertelement <2 x float> poison, float %993, i64 0, !dbg !30
  %1078 = insertelement <2 x float> %1077, float %994, i64 1, !dbg !30
  %1079 = fptrunc <2 x float> %1078 to <2 x bfloat>, !dbg !30
  %1080 = insertelement <2 x float> poison, float %995, i64 0, !dbg !30
  %1081 = insertelement <2 x float> %1080, float %996, i64 1, !dbg !30
  %1082 = fptrunc <2 x float> %1081 to <2 x bfloat>, !dbg !30
  %1083 = insertelement <2 x float> poison, float %998, i64 0, !dbg !30
  %1084 = insertelement <2 x float> %1083, float %999, i64 1, !dbg !30
  %1085 = fptrunc <2 x float> %1084 to <2 x bfloat>, !dbg !30
  %1086 = insertelement <2 x float> poison, float %1000, i64 0, !dbg !30
  %1087 = insertelement <2 x float> %1086, float %1001, i64 1, !dbg !30
  %1088 = fptrunc <2 x float> %1087 to <2 x bfloat>, !dbg !30
  %1089 = insertelement <2 x float> poison, float %1003, i64 0, !dbg !30
  %1090 = insertelement <2 x float> %1089, float %1004, i64 1, !dbg !30
  %1091 = fptrunc <2 x float> %1090 to <2 x bfloat>, !dbg !30
  %1092 = insertelement <2 x float> poison, float %1005, i64 0, !dbg !30
  %1093 = insertelement <2 x float> %1092, float %1006, i64 1, !dbg !30
  %1094 = fptrunc <2 x float> %1093 to <2 x bfloat>, !dbg !30
  %1095 = insertelement <2 x float> poison, float %1008, i64 0, !dbg !30
  %1096 = insertelement <2 x float> %1095, float %1009, i64 1, !dbg !30
  %1097 = fptrunc <2 x float> %1096 to <2 x bfloat>, !dbg !30
  %1098 = insertelement <2 x float> poison, float %1010, i64 0, !dbg !30
  %1099 = insertelement <2 x float> %1098, float %1011, i64 1, !dbg !30
  %1100 = fptrunc <2 x float> %1099 to <2 x bfloat>, !dbg !30
  %1101 = insertelement <2 x float> poison, float %1013, i64 0, !dbg !30
  %1102 = insertelement <2 x float> %1101, float %1014, i64 1, !dbg !30
  %1103 = fptrunc <2 x float> %1102 to <2 x bfloat>, !dbg !30
  %1104 = insertelement <2 x float> poison, float %1015, i64 0, !dbg !30
  %1105 = insertelement <2 x float> %1104, float %1016, i64 1, !dbg !30
  %1106 = fptrunc <2 x float> %1105 to <2 x bfloat>, !dbg !30
  %1107 = insertelement <2 x float> poison, float %1018, i64 0, !dbg !30
  %1108 = insertelement <2 x float> %1107, float %1019, i64 1, !dbg !30
  %1109 = fptrunc <2 x float> %1108 to <2 x bfloat>, !dbg !30
  %1110 = insertelement <2 x float> poison, float %1020, i64 0, !dbg !30
  %1111 = insertelement <2 x float> %1110, float %1021, i64 1, !dbg !30
  %1112 = fptrunc <2 x float> %1111 to <2 x bfloat>, !dbg !30
  %1113 = insertelement <2 x float> poison, float %1023, i64 0, !dbg !30
  %1114 = insertelement <2 x float> %1113, float %1024, i64 1, !dbg !30
  %1115 = fptrunc <2 x float> %1114 to <2 x bfloat>, !dbg !30
  %1116 = insertelement <2 x float> poison, float %1025, i64 0, !dbg !30
  %1117 = insertelement <2 x float> %1116, float %1026, i64 1, !dbg !30
  %1118 = fptrunc <2 x float> %1117 to <2 x bfloat>, !dbg !30
  %1119 = insertelement <2 x float> poison, float %1028, i64 0, !dbg !30
  %1120 = insertelement <2 x float> %1119, float %1029, i64 1, !dbg !30
  %1121 = fptrunc <2 x float> %1120 to <2 x bfloat>, !dbg !30
  %1122 = insertelement <2 x float> poison, float %1030, i64 0, !dbg !30
  %1123 = insertelement <2 x float> %1122, float %1031, i64 1, !dbg !30
  %1124 = fptrunc <2 x float> %1123 to <2 x bfloat>, !dbg !30
  %1125 = insertelement <2 x float> poison, float %1033, i64 0, !dbg !30
  %1126 = insertelement <2 x float> %1125, float %1034, i64 1, !dbg !30
  %1127 = fptrunc <2 x float> %1126 to <2 x bfloat>, !dbg !30
  %1128 = insertelement <2 x float> poison, float %1035, i64 0, !dbg !30
  %1129 = insertelement <2 x float> %1128, float %1036, i64 1, !dbg !30
  %1130 = fptrunc <2 x float> %1129 to <2 x bfloat>, !dbg !30
  %1131 = insertelement <2 x float> poison, float %1038, i64 0, !dbg !30
  %1132 = insertelement <2 x float> %1131, float %1039, i64 1, !dbg !30
  %1133 = fptrunc <2 x float> %1132 to <2 x bfloat>, !dbg !30
  %1134 = insertelement <2 x float> poison, float %1040, i64 0, !dbg !30
  %1135 = insertelement <2 x float> %1134, float %1041, i64 1, !dbg !30
  %1136 = fptrunc <2 x float> %1135 to <2 x bfloat>, !dbg !30
  %1137 = insertelement <2 x float> poison, float %1043, i64 0, !dbg !30
  %1138 = insertelement <2 x float> %1137, float %1044, i64 1, !dbg !30
  %1139 = fptrunc <2 x float> %1138 to <2 x bfloat>, !dbg !30
  %1140 = insertelement <2 x float> poison, float %1045, i64 0, !dbg !30
  %1141 = insertelement <2 x float> %1140, float %1046, i64 1, !dbg !30
  %1142 = fptrunc <2 x float> %1141 to <2 x bfloat>, !dbg !30
  %1143 = getelementptr bfloat, ptr addrspace(1) %259, i64 %481, !dbg !31
  %1144 = getelementptr bfloat, ptr addrspace(1) %259, i64 %482, !dbg !31
  %1145 = getelementptr bfloat, ptr addrspace(1) %259, i64 %483, !dbg !31
  %1146 = getelementptr bfloat, ptr addrspace(1) %259, i64 %484, !dbg !31
  %1147 = getelementptr bfloat, ptr addrspace(1) %259, i64 %485, !dbg !31
  %1148 = getelementptr bfloat, ptr addrspace(1) %259, i64 %486, !dbg !31
  %1149 = getelementptr bfloat, ptr addrspace(1) %259, i64 %487, !dbg !31
  %1150 = getelementptr bfloat, ptr addrspace(1) %259, i64 %488, !dbg !31
  store <2 x bfloat> %1049, ptr addrspace(3) %415, align 4, !dbg !31
  store <2 x bfloat> %1052, ptr addrspace(3) %420, align 4, !dbg !31
  store <2 x bfloat> %1055, ptr addrspace(3) %421, align 4, !dbg !31
  store <2 x bfloat> %1058, ptr addrspace(3) %426, align 4, !dbg !31
  store <2 x bfloat> %1061, ptr addrspace(3) %427, align 4, !dbg !31
  store <2 x bfloat> %1064, ptr addrspace(3) %432, align 4, !dbg !31
  store <2 x bfloat> %1067, ptr addrspace(3) %433, align 4, !dbg !31
  store <2 x bfloat> %1070, ptr addrspace(3) %438, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1151 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !31
  %1152 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1073, ptr addrspace(3) %415, align 4, !dbg !31
  store <2 x bfloat> %1076, ptr addrspace(3) %420, align 4, !dbg !31
  store <2 x bfloat> %1079, ptr addrspace(3) %421, align 4, !dbg !31
  store <2 x bfloat> %1082, ptr addrspace(3) %426, align 4, !dbg !31
  store <2 x bfloat> %1085, ptr addrspace(3) %427, align 4, !dbg !31
  store <2 x bfloat> %1088, ptr addrspace(3) %432, align 4, !dbg !31
  store <2 x bfloat> %1091, ptr addrspace(3) %433, align 4, !dbg !31
  store <2 x bfloat> %1094, ptr addrspace(3) %438, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1153 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !31
  %1154 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1097, ptr addrspace(3) %415, align 4, !dbg !31
  store <2 x bfloat> %1100, ptr addrspace(3) %420, align 4, !dbg !31
  store <2 x bfloat> %1103, ptr addrspace(3) %421, align 4, !dbg !31
  store <2 x bfloat> %1106, ptr addrspace(3) %426, align 4, !dbg !31
  store <2 x bfloat> %1109, ptr addrspace(3) %427, align 4, !dbg !31
  store <2 x bfloat> %1112, ptr addrspace(3) %432, align 4, !dbg !31
  store <2 x bfloat> %1115, ptr addrspace(3) %433, align 4, !dbg !31
  store <2 x bfloat> %1118, ptr addrspace(3) %438, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1155 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !31
  %1156 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1121, ptr addrspace(3) %415, align 4, !dbg !31
  store <2 x bfloat> %1124, ptr addrspace(3) %420, align 4, !dbg !31
  store <2 x bfloat> %1127, ptr addrspace(3) %421, align 4, !dbg !31
  store <2 x bfloat> %1130, ptr addrspace(3) %426, align 4, !dbg !31
  store <2 x bfloat> %1133, ptr addrspace(3) %427, align 4, !dbg !31
  store <2 x bfloat> %1136, ptr addrspace(3) %432, align 4, !dbg !31
  store <2 x bfloat> %1139, ptr addrspace(3) %433, align 4, !dbg !31
  store <2 x bfloat> %1142, ptr addrspace(3) %438, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1157 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !31
  %1158 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !31
  %.extract301 = extractelement <4 x i32> %1151, i64 0, !dbg !31
  %.extract303 = extractelement <4 x i32> %1151, i64 1, !dbg !31
  %.extract305 = extractelement <4 x i32> %1151, i64 2, !dbg !31
  %.extract307 = extractelement <4 x i32> %1151, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract301, i32 %.extract303, i32 %.extract305, i32 %.extract307, ptr addrspace(1) %1143, i1 %457) #3, !dbg !31
  %.extract309 = extractelement <4 x i32> %1152, i64 0, !dbg !31
  %.extract311 = extractelement <4 x i32> %1152, i64 1, !dbg !31
  %.extract313 = extractelement <4 x i32> %1152, i64 2, !dbg !31
  %.extract315 = extractelement <4 x i32> %1152, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract309, i32 %.extract311, i32 %.extract313, i32 %.extract315, ptr addrspace(1) %1144, i1 %458) #3, !dbg !31
  %.extract317 = extractelement <4 x i32> %1153, i64 0, !dbg !31
  %.extract319 = extractelement <4 x i32> %1153, i64 1, !dbg !31
  %.extract321 = extractelement <4 x i32> %1153, i64 2, !dbg !31
  %.extract323 = extractelement <4 x i32> %1153, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract317, i32 %.extract319, i32 %.extract321, i32 %.extract323, ptr addrspace(1) %1145, i1 %459) #3, !dbg !31
  %.extract325 = extractelement <4 x i32> %1154, i64 0, !dbg !31
  %.extract327 = extractelement <4 x i32> %1154, i64 1, !dbg !31
  %.extract329 = extractelement <4 x i32> %1154, i64 2, !dbg !31
  %.extract331 = extractelement <4 x i32> %1154, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract325, i32 %.extract327, i32 %.extract329, i32 %.extract331, ptr addrspace(1) %1146, i1 %460) #3, !dbg !31
  %.extract333 = extractelement <4 x i32> %1155, i64 0, !dbg !31
  %.extract335 = extractelement <4 x i32> %1155, i64 1, !dbg !31
  %.extract337 = extractelement <4 x i32> %1155, i64 2, !dbg !31
  %.extract339 = extractelement <4 x i32> %1155, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract333, i32 %.extract335, i32 %.extract337, i32 %.extract339, ptr addrspace(1) %1147, i1 %461) #3, !dbg !31
  %.extract341 = extractelement <4 x i32> %1156, i64 0, !dbg !31
  %.extract343 = extractelement <4 x i32> %1156, i64 1, !dbg !31
  %.extract345 = extractelement <4 x i32> %1156, i64 2, !dbg !31
  %.extract347 = extractelement <4 x i32> %1156, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract341, i32 %.extract343, i32 %.extract345, i32 %.extract347, ptr addrspace(1) %1148, i1 %462) #3, !dbg !31
  %.extract349 = extractelement <4 x i32> %1157, i64 0, !dbg !31
  %.extract351 = extractelement <4 x i32> %1157, i64 1, !dbg !31
  %.extract353 = extractelement <4 x i32> %1157, i64 2, !dbg !31
  %.extract355 = extractelement <4 x i32> %1157, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract349, i32 %.extract351, i32 %.extract353, i32 %.extract355, ptr addrspace(1) %1149, i1 %463) #3, !dbg !31
  %.extract357 = extractelement <4 x i32> %1158, i64 0, !dbg !31
  %.extract359 = extractelement <4 x i32> %1158, i64 1, !dbg !31
  %.extract361 = extractelement <4 x i32> %1158, i64 2, !dbg !31
  %.extract363 = extractelement <4 x i32> %1158, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract357, i32 %.extract359, i32 %.extract361, i32 %.extract363, ptr addrspace(1) %1150, i1 %464) #3, !dbg !31
  %1159 = add i32 %490, 1, !dbg !27
  %1160 = icmp sgt i32 %1159, 2, !dbg !27
  %1161 = select i1 %1160, i32 0, i32 %1159, !dbg !27
  %1162 = or disjoint i64 %indvars.iv, %45, !dbg !26
  %1163 = or disjoint i64 %1162, %.idx, !dbg !26
  %1164 = or disjoint i64 %1162, %.idx18, !dbg !26
  %1165 = or disjoint i64 %1162, %.idx19, !dbg !26
  %1166 = or disjoint i64 %1162, %.idx20, !dbg !26
  %1167 = or disjoint i64 %1162, %.idx21, !dbg !26
  %1168 = or disjoint i64 %1162, %.idx22, !dbg !26
  %1169 = or disjoint i64 %1162, %.idx23, !dbg !26
  %1170 = or disjoint i64 %1162, %.idx24, !dbg !26
  %1171 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1163, !dbg !26
  %1172 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1164, !dbg !26
  %1173 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1165, !dbg !26
  %1174 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1166, !dbg !26
  %1175 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1167, !dbg !26
  %1176 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1168, !dbg !26
  %1177 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1169, !dbg !26
  %1178 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1170, !dbg !26
  %.idx236 = shl i32 %1161, 13, !dbg !26
  %1179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx236, !dbg !26
  %1180 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %216, !dbg !26
  %1181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %221, !dbg !26
  %1182 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %226, !dbg !26
  %1183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %231, !dbg !26
  %1184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %236, !dbg !26
  %1185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %241, !dbg !26
  %1186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %246, !dbg !26
  %1187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1179, i32 %251, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1180, ptr addrspace(1) %1171, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1181, ptr addrspace(1) %1172, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1182, ptr addrspace(1) %1173, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1183, ptr addrspace(1) %1174, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1184, ptr addrspace(1) %1175, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1185, ptr addrspace(1) %1176, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1186, ptr addrspace(1) %1177, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1187, ptr addrspace(1) %1178, i32 0) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  br i1 %448, label %447, label %1188, !dbg !27

1188:                                             ; preds = %447
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %1189 = sext i32 %89 to i64, !dbg !32
  %1190 = getelementptr float, ptr addrspace(1) %6, i64 %1189, !dbg !32
  %1191 = getelementptr float, ptr addrspace(1) %1190, i64 %56, !dbg !33
  %1192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1191, i1 %60) #3, !dbg !33
  %1193 = bitcast i32 %1192 to float, !dbg !33
  %1194 = fmul float %1193, 0x3FF7154760000000, !dbg !34
  %1195 = tail call float @llvm.nvvm.ex2.approx.f(float %1194), !dbg !34
  %1196 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %36, !dbg !34
  store float %1195, ptr addrspace(3) %1196, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %1197 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63, !dbg !34
  %1198 = load <2 x float>, ptr addrspace(3) %1197, align 8, !dbg !34
  %1199 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %68, !dbg !34
  %1200 = load <2 x float>, ptr addrspace(3) %1199, align 8, !dbg !34
  %1201 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %71, !dbg !34
  %1202 = load <2 x float>, ptr addrspace(3) %1201, align 8, !dbg !34
  %1203 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %74, !dbg !34
  %1204 = load <2 x float>, ptr addrspace(3) %1203, align 8, !dbg !34
  %1205 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %77, !dbg !34
  %1206 = load <2 x float>, ptr addrspace(3) %1205, align 8, !dbg !34
  %1207 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %80, !dbg !34
  %1208 = load <2 x float>, ptr addrspace(3) %1207, align 8, !dbg !34
  %1209 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %83, !dbg !34
  %1210 = load <2 x float>, ptr addrspace(3) %1209, align 8, !dbg !34
  %1211 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %86, !dbg !34
  %1212 = load <2 x float>, ptr addrspace(3) %1211, align 8, !dbg !34
  %1213 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !35
  %1214 = getelementptr bfloat, ptr addrspace(1) %3, i64 %257, !dbg !36
  %1215 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %260, !dbg !37
  %1216 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %261, !dbg !37
  %1217 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %262, !dbg !37
  %1218 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %263, !dbg !37
  %1219 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %264, !dbg !37
  %1220 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %265, !dbg !37
  %1221 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %266, !dbg !37
  %1222 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %267, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %1215, i32 %284) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %1216, i32 %285) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %1217, i32 %286) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %1218, i32 %287) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %1219, i32 %288) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %1220, i32 %289) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %1221, i32 %290) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %1222, i32 %291) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1223 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %293, !dbg !37
  %1224 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %294, !dbg !37
  %1225 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %295, !dbg !37
  %1226 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %296, !dbg !37
  %1227 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %297, !dbg !37
  %1228 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %298, !dbg !37
  %1229 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %299, !dbg !37
  %1230 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %300, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %309, ptr addrspace(1) %1223, i32 %284) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %1224, i32 %285) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %1225, i32 %286) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %312, ptr addrspace(1) %1226, i32 %287) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %313, ptr addrspace(1) %1227, i32 %288) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %314, ptr addrspace(1) %1228, i32 %289) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %315, ptr addrspace(1) %1229, i32 %290) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %316, ptr addrspace(1) %1230, i32 %291) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1231 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %318, !dbg !37
  %1232 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %319, !dbg !37
  %1233 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %320, !dbg !37
  %1234 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %321, !dbg !37
  %1235 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %322, !dbg !37
  %1236 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %323, !dbg !37
  %1237 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %324, !dbg !37
  %1238 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %325, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %334, ptr addrspace(1) %1231, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %335, ptr addrspace(1) %1232, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %336, ptr addrspace(1) %1233, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %337, ptr addrspace(1) %1234, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %338, ptr addrspace(1) %1235, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %339, ptr addrspace(1) %1236, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %340, ptr addrspace(1) %1237, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %341, ptr addrspace(1) %1238, i32 0) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1239 = extractelement <2 x float> %1212, i64 0, !dbg !38
  %1240 = extractelement <2 x float> %1212, i64 1, !dbg !38
  %1241 = extractelement <2 x float> %1210, i64 0, !dbg !38
  %1242 = extractelement <2 x float> %1210, i64 1, !dbg !38
  %1243 = extractelement <2 x float> %1208, i64 0, !dbg !38
  %1244 = extractelement <2 x float> %1208, i64 1, !dbg !38
  %1245 = extractelement <2 x float> %1206, i64 0, !dbg !38
  %1246 = extractelement <2 x float> %1206, i64 1, !dbg !38
  %1247 = extractelement <2 x float> %1204, i64 0, !dbg !38
  %1248 = extractelement <2 x float> %1204, i64 1, !dbg !38
  %1249 = extractelement <2 x float> %1202, i64 0, !dbg !38
  %1250 = extractelement <2 x float> %1202, i64 1, !dbg !38
  %1251 = extractelement <2 x float> %1200, i64 0, !dbg !38
  %1252 = extractelement <2 x float> %1200, i64 1, !dbg !38
  %1253 = extractelement <2 x float> %1198, i64 0, !dbg !38
  %1254 = extractelement <2 x float> %1198, i64 1, !dbg !38
  br label %1255, !dbg !39

1255:                                             ; preds = %1188, %1255
  %1256 = phi i1 [ true, %1188 ], [ false, %1255 ]
  %indvars.iv365 = phi i64 [ 192, %1188 ], [ 256, %1255 ]
  %1257 = phi i1 [ %117, %1188 ], [ false, %1255 ]
  %1258 = phi i1 [ %118, %1188 ], [ false, %1255 ]
  %1259 = phi i1 [ %119, %1188 ], [ false, %1255 ]
  %1260 = phi i1 [ %120, %1188 ], [ false, %1255 ]
  %1261 = phi i1 [ %121, %1188 ], [ false, %1255 ]
  %1262 = phi i1 [ %122, %1188 ], [ false, %1255 ]
  %1263 = phi i1 [ %123, %1188 ], [ false, %1255 ]
  %1264 = phi i1 [ %124, %1188 ], [ false, %1255 ]
  %1265 = phi i1 [ %117, %1188 ], [ %1257, %1255 ]
  %1266 = phi i1 [ %118, %1188 ], [ %1258, %1255 ]
  %1267 = phi i1 [ %119, %1188 ], [ %1259, %1255 ]
  %1268 = phi i1 [ %120, %1188 ], [ %1260, %1255 ]
  %1269 = phi i1 [ %121, %1188 ], [ %1261, %1255 ]
  %1270 = phi i1 [ %122, %1188 ], [ %1262, %1255 ]
  %1271 = phi i1 [ %123, %1188 ], [ %1263, %1255 ]
  %1272 = phi i1 [ %124, %1188 ], [ %1264, %1255 ]
  %1273 = phi i64 [ %318, %1188 ], [ %2259, %1255 ]
  %1274 = phi i64 [ %319, %1188 ], [ %2260, %1255 ]
  %1275 = phi i64 [ %320, %1188 ], [ %2261, %1255 ]
  %1276 = phi i64 [ %321, %1188 ], [ %2262, %1255 ]
  %1277 = phi i64 [ %322, %1188 ], [ %2263, %1255 ]
  %1278 = phi i64 [ %323, %1188 ], [ %2264, %1255 ]
  %1279 = phi i64 [ %324, %1188 ], [ %2265, %1255 ]
  %1280 = phi i64 [ %325, %1188 ], [ %2266, %1255 ]
  %1281 = phi i64 [ %293, %1188 ], [ %1273, %1255 ]
  %1282 = phi i64 [ %294, %1188 ], [ %1274, %1255 ]
  %1283 = phi i64 [ %295, %1188 ], [ %1275, %1255 ]
  %1284 = phi i64 [ %296, %1188 ], [ %1276, %1255 ]
  %1285 = phi i64 [ %297, %1188 ], [ %1277, %1255 ]
  %1286 = phi i64 [ %298, %1188 ], [ %1278, %1255 ]
  %1287 = phi i64 [ %299, %1188 ], [ %1279, %1255 ]
  %1288 = phi i64 [ %300, %1188 ], [ %1280, %1255 ]
  %1289 = phi i64 [ %260, %1188 ], [ %1281, %1255 ]
  %1290 = phi i64 [ %261, %1188 ], [ %1282, %1255 ]
  %1291 = phi i64 [ %262, %1188 ], [ %1283, %1255 ]
  %1292 = phi i64 [ %263, %1188 ], [ %1284, %1255 ]
  %1293 = phi i64 [ %264, %1188 ], [ %1285, %1255 ]
  %1294 = phi i64 [ %265, %1188 ], [ %1286, %1255 ]
  %1295 = phi i64 [ %266, %1188 ], [ %1287, %1255 ]
  %1296 = phi i64 [ %267, %1188 ], [ %1288, %1255 ]
  %1297 = phi i32 [ -1, %1188 ], [ %1301, %1255 ]
  %1298 = phi i32 [ 2, %1188 ], [ %2257, %1255 ]
  %1299 = add i32 %1297, 1, !dbg !39
  %1300 = icmp sgt i32 %1299, 2, !dbg !39
  %1301 = select i1 %1300, i32 0, i32 %1299, !dbg !39
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %.idx41 = shl i32 %1301, 13, !dbg !37
  %1302 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx41, !dbg !37
  %1303 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %354, !dbg !40
  %1304 = ptrtoint ptr addrspace(3) %1303 to i32, !dbg !40
  %1305 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1304) #3, !dbg !40
  %1306 = extractvalue { i32, i32, i32, i32 } %1305, 0, !dbg !40
  %1307 = bitcast i32 %1306 to <2 x bfloat>, !dbg !40
  %1308 = extractvalue { i32, i32, i32, i32 } %1305, 1, !dbg !40
  %1309 = bitcast i32 %1308 to <2 x bfloat>, !dbg !40
  %1310 = extractvalue { i32, i32, i32, i32 } %1305, 2, !dbg !40
  %1311 = bitcast i32 %1310 to <2 x bfloat>, !dbg !40
  %1312 = extractvalue { i32, i32, i32, i32 } %1305, 3, !dbg !40
  %1313 = bitcast i32 %1312 to <2 x bfloat>, !dbg !40
  %1314 = getelementptr inbounds nuw i8, ptr addrspace(3) %1303, i32 4096, !dbg !40
  %1315 = ptrtoint ptr addrspace(3) %1314 to i32, !dbg !40
  %1316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1315) #3, !dbg !40
  %1317 = extractvalue { i32, i32, i32, i32 } %1316, 0, !dbg !40
  %1318 = bitcast i32 %1317 to <2 x bfloat>, !dbg !40
  %1319 = extractvalue { i32, i32, i32, i32 } %1316, 1, !dbg !40
  %1320 = bitcast i32 %1319 to <2 x bfloat>, !dbg !40
  %1321 = extractvalue { i32, i32, i32, i32 } %1316, 2, !dbg !40
  %1322 = bitcast i32 %1321 to <2 x bfloat>, !dbg !40
  %1323 = extractvalue { i32, i32, i32, i32 } %1316, 3, !dbg !40
  %1324 = bitcast i32 %1323 to <2 x bfloat>, !dbg !40
  %1325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %355, !dbg !40
  %1326 = ptrtoint ptr addrspace(3) %1325 to i32, !dbg !40
  %1327 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1326) #3, !dbg !40
  %1328 = extractvalue { i32, i32, i32, i32 } %1327, 0, !dbg !40
  %1329 = bitcast i32 %1328 to <2 x bfloat>, !dbg !40
  %1330 = extractvalue { i32, i32, i32, i32 } %1327, 1, !dbg !40
  %1331 = bitcast i32 %1330 to <2 x bfloat>, !dbg !40
  %1332 = extractvalue { i32, i32, i32, i32 } %1327, 2, !dbg !40
  %1333 = bitcast i32 %1332 to <2 x bfloat>, !dbg !40
  %1334 = extractvalue { i32, i32, i32, i32 } %1327, 3, !dbg !40
  %1335 = bitcast i32 %1334 to <2 x bfloat>, !dbg !40
  %1336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %356, !dbg !40
  %1337 = ptrtoint ptr addrspace(3) %1336 to i32, !dbg !40
  %1338 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1337) #3, !dbg !40
  %1339 = extractvalue { i32, i32, i32, i32 } %1338, 0, !dbg !40
  %1340 = bitcast i32 %1339 to <2 x bfloat>, !dbg !40
  %1341 = extractvalue { i32, i32, i32, i32 } %1338, 1, !dbg !40
  %1342 = bitcast i32 %1341 to <2 x bfloat>, !dbg !40
  %1343 = extractvalue { i32, i32, i32, i32 } %1338, 2, !dbg !40
  %1344 = bitcast i32 %1343 to <2 x bfloat>, !dbg !40
  %1345 = extractvalue { i32, i32, i32, i32 } %1338, 3, !dbg !40
  %1346 = bitcast i32 %1345 to <2 x bfloat>, !dbg !40
  %1347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %357, !dbg !40
  %1348 = ptrtoint ptr addrspace(3) %1347 to i32, !dbg !40
  %1349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1348) #3, !dbg !40
  %1350 = extractvalue { i32, i32, i32, i32 } %1349, 0, !dbg !40
  %1351 = bitcast i32 %1350 to <2 x bfloat>, !dbg !40
  %1352 = extractvalue { i32, i32, i32, i32 } %1349, 1, !dbg !40
  %1353 = bitcast i32 %1352 to <2 x bfloat>, !dbg !40
  %1354 = extractvalue { i32, i32, i32, i32 } %1349, 2, !dbg !40
  %1355 = bitcast i32 %1354 to <2 x bfloat>, !dbg !40
  %1356 = extractvalue { i32, i32, i32, i32 } %1349, 3, !dbg !40
  %1357 = bitcast i32 %1356 to <2 x bfloat>, !dbg !40
  %1358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %358, !dbg !40
  %1359 = ptrtoint ptr addrspace(3) %1358 to i32, !dbg !40
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1359) #3, !dbg !40
  %1361 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !40
  %1362 = bitcast i32 %1361 to <2 x bfloat>, !dbg !40
  %1363 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !40
  %1364 = bitcast i32 %1363 to <2 x bfloat>, !dbg !40
  %1365 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !40
  %1366 = bitcast i32 %1365 to <2 x bfloat>, !dbg !40
  %1367 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !40
  %1368 = bitcast i32 %1367 to <2 x bfloat>, !dbg !40
  %1369 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %359, !dbg !40
  %1370 = ptrtoint ptr addrspace(3) %1369 to i32, !dbg !40
  %1371 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1370) #3, !dbg !40
  %1372 = extractvalue { i32, i32, i32, i32 } %1371, 0, !dbg !40
  %1373 = bitcast i32 %1372 to <2 x bfloat>, !dbg !40
  %1374 = extractvalue { i32, i32, i32, i32 } %1371, 1, !dbg !40
  %1375 = bitcast i32 %1374 to <2 x bfloat>, !dbg !40
  %1376 = extractvalue { i32, i32, i32, i32 } %1371, 2, !dbg !40
  %1377 = bitcast i32 %1376 to <2 x bfloat>, !dbg !40
  %1378 = extractvalue { i32, i32, i32, i32 } %1371, 3, !dbg !40
  %1379 = bitcast i32 %1378 to <2 x bfloat>, !dbg !40
  %1380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1302, i32 %360, !dbg !40
  %1381 = ptrtoint ptr addrspace(3) %1380 to i32, !dbg !40
  %1382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1381) #3, !dbg !40
  %1383 = extractvalue { i32, i32, i32, i32 } %1382, 0, !dbg !40
  %1384 = bitcast i32 %1383 to <2 x bfloat>, !dbg !40
  %1385 = extractvalue { i32, i32, i32, i32 } %1382, 1, !dbg !40
  %1386 = bitcast i32 %1385 to <2 x bfloat>, !dbg !40
  %1387 = extractvalue { i32, i32, i32, i32 } %1382, 2, !dbg !40
  %1388 = bitcast i32 %1387 to <2 x bfloat>, !dbg !40
  %1389 = extractvalue { i32, i32, i32, i32 } %1382, 3, !dbg !40
  %1390 = bitcast i32 %1389 to <2 x bfloat>, !dbg !40
  %1391 = fmul <2 x bfloat> %67, %1307, !dbg !18
  %1392 = extractelement <2 x bfloat> %1391, i64 0, !dbg !18
  %1393 = fmul <2 x bfloat> %67, %1307, !dbg !18
  %1394 = extractelement <2 x bfloat> %1393, i64 1, !dbg !18
  %1395 = fmul <2 x bfloat> %70, %1309, !dbg !18
  %1396 = extractelement <2 x bfloat> %1395, i64 0, !dbg !18
  %1397 = fmul <2 x bfloat> %70, %1309, !dbg !18
  %1398 = extractelement <2 x bfloat> %1397, i64 1, !dbg !18
  %1399 = fmul <2 x bfloat> %73, %1311, !dbg !18
  %1400 = extractelement <2 x bfloat> %1399, i64 0, !dbg !18
  %1401 = fmul <2 x bfloat> %73, %1311, !dbg !18
  %1402 = extractelement <2 x bfloat> %1401, i64 1, !dbg !18
  %1403 = fmul <2 x bfloat> %76, %1313, !dbg !18
  %1404 = extractelement <2 x bfloat> %1403, i64 0, !dbg !18
  %1405 = fmul <2 x bfloat> %76, %1313, !dbg !18
  %1406 = extractelement <2 x bfloat> %1405, i64 1, !dbg !18
  %1407 = fmul <2 x bfloat> %79, %1318, !dbg !18
  %1408 = extractelement <2 x bfloat> %1407, i64 0, !dbg !18
  %1409 = fmul <2 x bfloat> %79, %1318, !dbg !18
  %1410 = extractelement <2 x bfloat> %1409, i64 1, !dbg !18
  %1411 = fmul <2 x bfloat> %82, %1320, !dbg !18
  %1412 = extractelement <2 x bfloat> %1411, i64 0, !dbg !18
  %1413 = fmul <2 x bfloat> %82, %1320, !dbg !18
  %1414 = extractelement <2 x bfloat> %1413, i64 1, !dbg !18
  %1415 = fmul <2 x bfloat> %85, %1322, !dbg !18
  %1416 = extractelement <2 x bfloat> %1415, i64 0, !dbg !18
  %1417 = fmul <2 x bfloat> %85, %1322, !dbg !18
  %1418 = extractelement <2 x bfloat> %1417, i64 1, !dbg !18
  %1419 = fmul <2 x bfloat> %88, %1324, !dbg !18
  %1420 = extractelement <2 x bfloat> %1419, i64 0, !dbg !18
  %1421 = fmul <2 x bfloat> %88, %1324, !dbg !18
  %1422 = extractelement <2 x bfloat> %1421, i64 1, !dbg !18
  %1423 = fmul <2 x bfloat> %67, %1329, !dbg !18
  %1424 = extractelement <2 x bfloat> %1423, i64 0, !dbg !18
  %1425 = fmul <2 x bfloat> %67, %1329, !dbg !18
  %1426 = extractelement <2 x bfloat> %1425, i64 1, !dbg !18
  %1427 = fmul <2 x bfloat> %70, %1331, !dbg !18
  %1428 = extractelement <2 x bfloat> %1427, i64 0, !dbg !18
  %1429 = fmul <2 x bfloat> %70, %1331, !dbg !18
  %1430 = extractelement <2 x bfloat> %1429, i64 1, !dbg !18
  %1431 = fmul <2 x bfloat> %73, %1333, !dbg !18
  %1432 = extractelement <2 x bfloat> %1431, i64 0, !dbg !18
  %1433 = fmul <2 x bfloat> %73, %1333, !dbg !18
  %1434 = extractelement <2 x bfloat> %1433, i64 1, !dbg !18
  %1435 = fmul <2 x bfloat> %76, %1335, !dbg !18
  %1436 = extractelement <2 x bfloat> %1435, i64 0, !dbg !18
  %1437 = fmul <2 x bfloat> %76, %1335, !dbg !18
  %1438 = extractelement <2 x bfloat> %1437, i64 1, !dbg !18
  %1439 = fmul <2 x bfloat> %79, %1340, !dbg !18
  %1440 = extractelement <2 x bfloat> %1439, i64 0, !dbg !18
  %1441 = fmul <2 x bfloat> %79, %1340, !dbg !18
  %1442 = extractelement <2 x bfloat> %1441, i64 1, !dbg !18
  %1443 = fmul <2 x bfloat> %82, %1342, !dbg !18
  %1444 = extractelement <2 x bfloat> %1443, i64 0, !dbg !18
  %1445 = fmul <2 x bfloat> %82, %1342, !dbg !18
  %1446 = extractelement <2 x bfloat> %1445, i64 1, !dbg !18
  %1447 = fmul <2 x bfloat> %85, %1344, !dbg !18
  %1448 = extractelement <2 x bfloat> %1447, i64 0, !dbg !18
  %1449 = fmul <2 x bfloat> %85, %1344, !dbg !18
  %1450 = extractelement <2 x bfloat> %1449, i64 1, !dbg !18
  %1451 = fmul <2 x bfloat> %88, %1346, !dbg !18
  %1452 = extractelement <2 x bfloat> %1451, i64 0, !dbg !18
  %1453 = fmul <2 x bfloat> %88, %1346, !dbg !18
  %1454 = extractelement <2 x bfloat> %1453, i64 1, !dbg !18
  %1455 = fmul <2 x bfloat> %67, %1351, !dbg !18
  %1456 = extractelement <2 x bfloat> %1455, i64 0, !dbg !18
  %1457 = fmul <2 x bfloat> %67, %1351, !dbg !18
  %1458 = extractelement <2 x bfloat> %1457, i64 1, !dbg !18
  %1459 = fmul <2 x bfloat> %70, %1353, !dbg !18
  %1460 = extractelement <2 x bfloat> %1459, i64 0, !dbg !18
  %1461 = fmul <2 x bfloat> %70, %1353, !dbg !18
  %1462 = extractelement <2 x bfloat> %1461, i64 1, !dbg !18
  %1463 = fmul <2 x bfloat> %73, %1355, !dbg !18
  %1464 = extractelement <2 x bfloat> %1463, i64 0, !dbg !18
  %1465 = fmul <2 x bfloat> %73, %1355, !dbg !18
  %1466 = extractelement <2 x bfloat> %1465, i64 1, !dbg !18
  %1467 = fmul <2 x bfloat> %76, %1357, !dbg !18
  %1468 = extractelement <2 x bfloat> %1467, i64 0, !dbg !18
  %1469 = fmul <2 x bfloat> %76, %1357, !dbg !18
  %1470 = extractelement <2 x bfloat> %1469, i64 1, !dbg !18
  %1471 = fmul <2 x bfloat> %79, %1362, !dbg !18
  %1472 = extractelement <2 x bfloat> %1471, i64 0, !dbg !18
  %1473 = fmul <2 x bfloat> %79, %1362, !dbg !18
  %1474 = extractelement <2 x bfloat> %1473, i64 1, !dbg !18
  %1475 = fmul <2 x bfloat> %82, %1364, !dbg !18
  %1476 = extractelement <2 x bfloat> %1475, i64 0, !dbg !18
  %1477 = fmul <2 x bfloat> %82, %1364, !dbg !18
  %1478 = extractelement <2 x bfloat> %1477, i64 1, !dbg !18
  %1479 = fmul <2 x bfloat> %85, %1366, !dbg !18
  %1480 = extractelement <2 x bfloat> %1479, i64 0, !dbg !18
  %1481 = fmul <2 x bfloat> %85, %1366, !dbg !18
  %1482 = extractelement <2 x bfloat> %1481, i64 1, !dbg !18
  %1483 = fmul <2 x bfloat> %88, %1368, !dbg !18
  %1484 = extractelement <2 x bfloat> %1483, i64 0, !dbg !18
  %1485 = fmul <2 x bfloat> %88, %1368, !dbg !18
  %1486 = extractelement <2 x bfloat> %1485, i64 1, !dbg !18
  %1487 = fpext bfloat %1392 to float, !dbg !38
  %1488 = fpext bfloat %1394 to float, !dbg !38
  %1489 = fpext bfloat %1396 to float, !dbg !38
  %1490 = fpext bfloat %1398 to float, !dbg !38
  %1491 = fpext bfloat %1400 to float, !dbg !38
  %1492 = fpext bfloat %1402 to float, !dbg !38
  %1493 = fpext bfloat %1404 to float, !dbg !38
  %1494 = fpext bfloat %1406 to float, !dbg !38
  %1495 = fpext bfloat %1408 to float, !dbg !38
  %1496 = fpext bfloat %1410 to float, !dbg !38
  %1497 = fpext bfloat %1412 to float, !dbg !38
  %1498 = fpext bfloat %1414 to float, !dbg !38
  %1499 = fpext bfloat %1416 to float, !dbg !38
  %1500 = fpext bfloat %1418 to float, !dbg !38
  %1501 = fpext bfloat %1420 to float, !dbg !38
  %1502 = fpext bfloat %1422 to float, !dbg !38
  %1503 = fpext bfloat %1424 to float, !dbg !38
  %1504 = fpext bfloat %1426 to float, !dbg !38
  %1505 = fpext bfloat %1428 to float, !dbg !38
  %1506 = fpext bfloat %1430 to float, !dbg !38
  %1507 = fpext bfloat %1432 to float, !dbg !38
  %1508 = fpext bfloat %1434 to float, !dbg !38
  %1509 = fpext bfloat %1436 to float, !dbg !38
  %1510 = fpext bfloat %1438 to float, !dbg !38
  %1511 = fpext bfloat %1440 to float, !dbg !38
  %1512 = fpext bfloat %1442 to float, !dbg !38
  %1513 = fpext bfloat %1444 to float, !dbg !38
  %1514 = fpext bfloat %1446 to float, !dbg !38
  %1515 = fpext bfloat %1448 to float, !dbg !38
  %1516 = fpext bfloat %1450 to float, !dbg !38
  %1517 = fpext bfloat %1452 to float, !dbg !38
  %1518 = fpext bfloat %1454 to float, !dbg !38
  %1519 = fpext bfloat %1456 to float, !dbg !38
  %1520 = fpext bfloat %1458 to float, !dbg !38
  %1521 = fpext bfloat %1460 to float, !dbg !38
  %1522 = fpext bfloat %1462 to float, !dbg !38
  %1523 = fpext bfloat %1464 to float, !dbg !38
  %1524 = fpext bfloat %1466 to float, !dbg !38
  %1525 = fpext bfloat %1468 to float, !dbg !38
  %1526 = fpext bfloat %1470 to float, !dbg !38
  %1527 = fpext bfloat %1472 to float, !dbg !38
  %1528 = fpext bfloat %1474 to float, !dbg !38
  %1529 = fpext bfloat %1476 to float, !dbg !38
  %1530 = fpext bfloat %1478 to float, !dbg !38
  %1531 = fpext bfloat %1480 to float, !dbg !38
  %1532 = fpext bfloat %1482 to float, !dbg !38
  %1533 = fpext bfloat %1484 to float, !dbg !38
  %1534 = fpext bfloat %1486 to float, !dbg !38
  %1535 = fmul float %1253, %1487, !dbg !38
  %1536 = fmul float %1254, %1488, !dbg !38
  %1537 = fmul float %1251, %1489, !dbg !38
  %1538 = fmul float %1252, %1490, !dbg !38
  %1539 = fmul float %1249, %1491, !dbg !38
  %1540 = fmul float %1250, %1492, !dbg !38
  %1541 = fmul float %1247, %1493, !dbg !38
  %1542 = fmul float %1248, %1494, !dbg !38
  %1543 = fmul float %1245, %1495, !dbg !38
  %1544 = fmul float %1246, %1496, !dbg !38
  %1545 = fmul float %1243, %1497, !dbg !38
  %1546 = fmul float %1244, %1498, !dbg !38
  %1547 = fmul float %1241, %1499, !dbg !38
  %1548 = fmul float %1242, %1500, !dbg !38
  %1549 = fmul float %1239, %1501, !dbg !38
  %1550 = fmul float %1240, %1502, !dbg !38
  %1551 = fmul float %1253, %1503, !dbg !38
  %1552 = fmul float %1254, %1504, !dbg !38
  %1553 = fmul float %1251, %1505, !dbg !38
  %1554 = fmul float %1252, %1506, !dbg !38
  %1555 = fmul float %1249, %1507, !dbg !38
  %1556 = fmul float %1250, %1508, !dbg !38
  %1557 = fmul float %1247, %1509, !dbg !38
  %1558 = fmul float %1248, %1510, !dbg !38
  %1559 = fmul float %1245, %1511, !dbg !38
  %1560 = fmul float %1246, %1512, !dbg !38
  %1561 = fmul float %1243, %1513, !dbg !38
  %1562 = fmul float %1244, %1514, !dbg !38
  %1563 = fmul float %1241, %1515, !dbg !38
  %1564 = fmul float %1242, %1516, !dbg !38
  %1565 = fmul float %1239, %1517, !dbg !38
  %1566 = fmul float %1240, %1518, !dbg !38
  %1567 = fmul float %1253, %1519, !dbg !38
  %1568 = fmul float %1254, %1520, !dbg !38
  %1569 = fmul float %1251, %1521, !dbg !38
  %1570 = fmul float %1252, %1522, !dbg !38
  %1571 = fmul float %1249, %1523, !dbg !38
  %1572 = fmul float %1250, %1524, !dbg !38
  %1573 = fmul float %1247, %1525, !dbg !38
  %1574 = fmul float %1248, %1526, !dbg !38
  %1575 = fmul float %1245, %1527, !dbg !38
  %1576 = fmul float %1246, %1528, !dbg !38
  %1577 = fmul float %1243, %1529, !dbg !38
  %1578 = fmul float %1244, %1530, !dbg !38
  %1579 = fmul float %1241, %1531, !dbg !38
  %1580 = fmul float %1242, %1532, !dbg !38
  %1581 = fmul float %1239, %1533, !dbg !38
  %1582 = fmul float %1240, %1534, !dbg !38
  %1583 = fptrunc float %1535 to bfloat, !dbg !40
  %1584 = fptrunc float %1536 to bfloat, !dbg !40
  %1585 = fptrunc float %1537 to bfloat, !dbg !40
  %1586 = fptrunc float %1538 to bfloat, !dbg !40
  %1587 = fptrunc float %1539 to bfloat, !dbg !40
  %1588 = fptrunc float %1540 to bfloat, !dbg !40
  %1589 = fptrunc float %1541 to bfloat, !dbg !40
  %1590 = fptrunc float %1542 to bfloat, !dbg !40
  %1591 = fptrunc float %1543 to bfloat, !dbg !40
  %1592 = fptrunc float %1544 to bfloat, !dbg !40
  %1593 = fptrunc float %1545 to bfloat, !dbg !40
  %1594 = fptrunc float %1546 to bfloat, !dbg !40
  %1595 = fptrunc float %1547 to bfloat, !dbg !40
  %1596 = fptrunc float %1548 to bfloat, !dbg !40
  %1597 = fptrunc float %1549 to bfloat, !dbg !40
  %1598 = fptrunc float %1550 to bfloat, !dbg !40
  %1599 = fptrunc float %1551 to bfloat, !dbg !40
  %1600 = fptrunc float %1552 to bfloat, !dbg !40
  %1601 = fptrunc float %1553 to bfloat, !dbg !40
  %1602 = fptrunc float %1554 to bfloat, !dbg !40
  %1603 = fptrunc float %1555 to bfloat, !dbg !40
  %1604 = fptrunc float %1556 to bfloat, !dbg !40
  %1605 = fptrunc float %1557 to bfloat, !dbg !40
  %1606 = fptrunc float %1558 to bfloat, !dbg !40
  %1607 = fptrunc float %1559 to bfloat, !dbg !40
  %1608 = fptrunc float %1560 to bfloat, !dbg !40
  %1609 = fptrunc float %1561 to bfloat, !dbg !40
  %1610 = fptrunc float %1562 to bfloat, !dbg !40
  %1611 = fptrunc float %1563 to bfloat, !dbg !40
  %1612 = fptrunc float %1564 to bfloat, !dbg !40
  %1613 = fptrunc float %1565 to bfloat, !dbg !40
  %1614 = fptrunc float %1566 to bfloat, !dbg !40
  %1615 = fptrunc float %1567 to bfloat, !dbg !40
  %1616 = fptrunc float %1568 to bfloat, !dbg !40
  %1617 = fptrunc float %1569 to bfloat, !dbg !40
  %1618 = fptrunc float %1570 to bfloat, !dbg !40
  %1619 = fptrunc float %1571 to bfloat, !dbg !40
  %1620 = fptrunc float %1572 to bfloat, !dbg !40
  %1621 = fptrunc float %1573 to bfloat, !dbg !40
  %1622 = fptrunc float %1574 to bfloat, !dbg !40
  %1623 = fptrunc float %1575 to bfloat, !dbg !40
  %1624 = fptrunc float %1576 to bfloat, !dbg !40
  %1625 = fptrunc float %1577 to bfloat, !dbg !40
  %1626 = fptrunc float %1578 to bfloat, !dbg !40
  %1627 = fptrunc float %1579 to bfloat, !dbg !40
  %1628 = fptrunc float %1580 to bfloat, !dbg !40
  %1629 = fptrunc float %1581 to bfloat, !dbg !40
  %1630 = fptrunc float %1582 to bfloat, !dbg !40
  %1631 = fmul <2 x bfloat> %67, %1373, !dbg !18
  %1632 = fpext <2 x bfloat> %1631 to <2 x float>, !dbg !38
  %1633 = fmul <2 x float> %1198, %1632, !dbg !38
  %1634 = fptrunc <2 x float> %1633 to <2 x bfloat>, !dbg !40
  %1635 = fmul <2 x bfloat> %70, %1375, !dbg !18
  %1636 = fpext <2 x bfloat> %1635 to <2 x float>, !dbg !38
  %1637 = fmul <2 x float> %1200, %1636, !dbg !38
  %1638 = fptrunc <2 x float> %1637 to <2 x bfloat>, !dbg !40
  %1639 = fmul <2 x bfloat> %73, %1377, !dbg !18
  %1640 = fpext <2 x bfloat> %1639 to <2 x float>, !dbg !38
  %1641 = fmul <2 x float> %1202, %1640, !dbg !38
  %1642 = fptrunc <2 x float> %1641 to <2 x bfloat>, !dbg !40
  %1643 = fmul <2 x bfloat> %76, %1379, !dbg !18
  %1644 = fpext <2 x bfloat> %1643 to <2 x float>, !dbg !38
  %1645 = fmul <2 x float> %1204, %1644, !dbg !38
  %1646 = fptrunc <2 x float> %1645 to <2 x bfloat>, !dbg !40
  %1647 = fmul <2 x bfloat> %79, %1384, !dbg !18
  %1648 = fpext <2 x bfloat> %1647 to <2 x float>, !dbg !38
  %1649 = fmul <2 x float> %1206, %1648, !dbg !38
  %1650 = fptrunc <2 x float> %1649 to <2 x bfloat>, !dbg !40
  %1651 = fmul <2 x bfloat> %82, %1386, !dbg !18
  %1652 = fpext <2 x bfloat> %1651 to <2 x float>, !dbg !38
  %1653 = fmul <2 x float> %1208, %1652, !dbg !38
  %1654 = fptrunc <2 x float> %1653 to <2 x bfloat>, !dbg !40
  %1655 = fmul <2 x bfloat> %85, %1388, !dbg !18
  %1656 = fpext <2 x bfloat> %1655 to <2 x float>, !dbg !38
  %1657 = fmul <2 x float> %1210, %1656, !dbg !38
  %1658 = fptrunc <2 x float> %1657 to <2 x bfloat>, !dbg !40
  %1659 = fmul <2 x bfloat> %88, %1390, !dbg !18
  %1660 = fpext <2 x bfloat> %1659 to <2 x float>, !dbg !38
  %1661 = fmul <2 x float> %1212, %1660, !dbg !38
  %1662 = fptrunc <2 x float> %1661 to <2 x bfloat>, !dbg !40
  %1663 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #3, !dbg !22
  %1664 = extractvalue { i32, i32, i32, i32 } %1663, 0, !dbg !22
  %1665 = extractvalue { i32, i32, i32, i32 } %1663, 1, !dbg !22
  %1666 = extractvalue { i32, i32, i32, i32 } %1663, 2, !dbg !22
  %1667 = extractvalue { i32, i32, i32, i32 } %1663, 3, !dbg !22
  %1668 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #3, !dbg !22
  %1669 = extractvalue { i32, i32, i32, i32 } %1668, 0, !dbg !22
  %1670 = extractvalue { i32, i32, i32, i32 } %1668, 1, !dbg !22
  %1671 = extractvalue { i32, i32, i32, i32 } %1668, 2, !dbg !22
  %1672 = extractvalue { i32, i32, i32, i32 } %1668, 3, !dbg !22
  %1673 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #3, !dbg !22
  %1674 = extractvalue { i32, i32, i32, i32 } %1673, 0, !dbg !22
  %1675 = extractvalue { i32, i32, i32, i32 } %1673, 1, !dbg !22
  %1676 = extractvalue { i32, i32, i32, i32 } %1673, 2, !dbg !22
  %1677 = extractvalue { i32, i32, i32, i32 } %1673, 3, !dbg !22
  %1678 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %374) #3, !dbg !22
  %1679 = extractvalue { i32, i32, i32, i32 } %1678, 0, !dbg !22
  %1680 = extractvalue { i32, i32, i32, i32 } %1678, 1, !dbg !22
  %1681 = extractvalue { i32, i32, i32, i32 } %1678, 2, !dbg !22
  %1682 = extractvalue { i32, i32, i32, i32 } %1678, 3, !dbg !22
  %1683 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #3, !dbg !22
  %1684 = extractvalue { i32, i32, i32, i32 } %1683, 0, !dbg !22
  %1685 = extractvalue { i32, i32, i32, i32 } %1683, 1, !dbg !22
  %1686 = extractvalue { i32, i32, i32, i32 } %1683, 2, !dbg !22
  %1687 = extractvalue { i32, i32, i32, i32 } %1683, 3, !dbg !22
  %1688 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #3, !dbg !22
  %1689 = extractvalue { i32, i32, i32, i32 } %1688, 0, !dbg !22
  %1690 = extractvalue { i32, i32, i32, i32 } %1688, 1, !dbg !22
  %1691 = extractvalue { i32, i32, i32, i32 } %1688, 2, !dbg !22
  %1692 = extractvalue { i32, i32, i32, i32 } %1688, 3, !dbg !22
  %1693 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #3, !dbg !22
  %1694 = extractvalue { i32, i32, i32, i32 } %1693, 0, !dbg !22
  %1695 = extractvalue { i32, i32, i32, i32 } %1693, 1, !dbg !22
  %1696 = extractvalue { i32, i32, i32, i32 } %1693, 2, !dbg !22
  %1697 = extractvalue { i32, i32, i32, i32 } %1693, 3, !dbg !22
  %1698 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %385) #3, !dbg !22
  %1699 = extractvalue { i32, i32, i32, i32 } %1698, 0, !dbg !22
  %1700 = extractvalue { i32, i32, i32, i32 } %1698, 1, !dbg !22
  %1701 = extractvalue { i32, i32, i32, i32 } %1698, 2, !dbg !22
  %1702 = extractvalue { i32, i32, i32, i32 } %1698, 3, !dbg !22
  %1703 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %387) #3, !dbg !22
  %1704 = extractvalue { i32, i32, i32, i32 } %1703, 0, !dbg !22
  %1705 = extractvalue { i32, i32, i32, i32 } %1703, 1, !dbg !22
  %1706 = extractvalue { i32, i32, i32, i32 } %1703, 2, !dbg !22
  %1707 = extractvalue { i32, i32, i32, i32 } %1703, 3, !dbg !22
  %1708 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %390) #3, !dbg !22
  %1709 = extractvalue { i32, i32, i32, i32 } %1708, 0, !dbg !22
  %1710 = extractvalue { i32, i32, i32, i32 } %1708, 1, !dbg !22
  %1711 = extractvalue { i32, i32, i32, i32 } %1708, 2, !dbg !22
  %1712 = extractvalue { i32, i32, i32, i32 } %1708, 3, !dbg !22
  %1713 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %393) #3, !dbg !22
  %1714 = extractvalue { i32, i32, i32, i32 } %1713, 0, !dbg !22
  %1715 = extractvalue { i32, i32, i32, i32 } %1713, 1, !dbg !22
  %1716 = extractvalue { i32, i32, i32, i32 } %1713, 2, !dbg !22
  %1717 = extractvalue { i32, i32, i32, i32 } %1713, 3, !dbg !22
  %1718 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %396) #3, !dbg !22
  %1719 = extractvalue { i32, i32, i32, i32 } %1718, 0, !dbg !22
  %1720 = extractvalue { i32, i32, i32, i32 } %1718, 1, !dbg !22
  %1721 = extractvalue { i32, i32, i32, i32 } %1718, 2, !dbg !22
  %1722 = extractvalue { i32, i32, i32, i32 } %1718, 3, !dbg !22
  %1723 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %398) #3, !dbg !22
  %1724 = extractvalue { i32, i32, i32, i32 } %1723, 0, !dbg !22
  %1725 = extractvalue { i32, i32, i32, i32 } %1723, 1, !dbg !22
  %1726 = extractvalue { i32, i32, i32, i32 } %1723, 2, !dbg !22
  %1727 = extractvalue { i32, i32, i32, i32 } %1723, 3, !dbg !22
  %1728 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %401) #3, !dbg !22
  %1729 = extractvalue { i32, i32, i32, i32 } %1728, 0, !dbg !22
  %1730 = extractvalue { i32, i32, i32, i32 } %1728, 1, !dbg !22
  %1731 = extractvalue { i32, i32, i32, i32 } %1728, 2, !dbg !22
  %1732 = extractvalue { i32, i32, i32, i32 } %1728, 3, !dbg !22
  %1733 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %404) #3, !dbg !22
  %1734 = extractvalue { i32, i32, i32, i32 } %1733, 0, !dbg !22
  %1735 = extractvalue { i32, i32, i32, i32 } %1733, 1, !dbg !22
  %1736 = extractvalue { i32, i32, i32, i32 } %1733, 2, !dbg !22
  %1737 = extractvalue { i32, i32, i32, i32 } %1733, 3, !dbg !22
  %1738 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %407) #3, !dbg !22
  %1739 = extractvalue { i32, i32, i32, i32 } %1738, 0, !dbg !22
  %1740 = extractvalue { i32, i32, i32, i32 } %1738, 1, !dbg !22
  %1741 = extractvalue { i32, i32, i32, i32 } %1738, 2, !dbg !22
  %1742 = extractvalue { i32, i32, i32, i32 } %1738, 3, !dbg !22
  %1743 = insertelement <2 x bfloat> poison, bfloat %1583, i64 0, !dbg !41
  %1744 = insertelement <2 x bfloat> %1743, bfloat %1584, i64 1, !dbg !41
  %1745 = bitcast <2 x bfloat> %1744 to i32, !dbg !41
  %1746 = insertelement <2 x bfloat> poison, bfloat %1585, i64 0, !dbg !41
  %1747 = insertelement <2 x bfloat> %1746, bfloat %1586, i64 1, !dbg !41
  %1748 = bitcast <2 x bfloat> %1747 to i32, !dbg !41
  %1749 = insertelement <2 x bfloat> poison, bfloat %1587, i64 0, !dbg !41
  %1750 = insertelement <2 x bfloat> %1749, bfloat %1588, i64 1, !dbg !41
  %1751 = bitcast <2 x bfloat> %1750 to i32, !dbg !41
  %1752 = insertelement <2 x bfloat> poison, bfloat %1589, i64 0, !dbg !41
  %1753 = insertelement <2 x bfloat> %1752, bfloat %1590, i64 1, !dbg !41
  %1754 = bitcast <2 x bfloat> %1753 to i32, !dbg !41
  %1755 = insertelement <2 x bfloat> poison, bfloat %1591, i64 0, !dbg !41
  %1756 = insertelement <2 x bfloat> %1755, bfloat %1592, i64 1, !dbg !41
  %1757 = bitcast <2 x bfloat> %1756 to i32, !dbg !41
  %1758 = insertelement <2 x bfloat> poison, bfloat %1593, i64 0, !dbg !41
  %1759 = insertelement <2 x bfloat> %1758, bfloat %1594, i64 1, !dbg !41
  %1760 = bitcast <2 x bfloat> %1759 to i32, !dbg !41
  %1761 = insertelement <2 x bfloat> poison, bfloat %1595, i64 0, !dbg !41
  %1762 = insertelement <2 x bfloat> %1761, bfloat %1596, i64 1, !dbg !41
  %1763 = bitcast <2 x bfloat> %1762 to i32, !dbg !41
  %1764 = insertelement <2 x bfloat> poison, bfloat %1597, i64 0, !dbg !41
  %1765 = insertelement <2 x bfloat> %1764, bfloat %1598, i64 1, !dbg !41
  %1766 = bitcast <2 x bfloat> %1765 to i32, !dbg !41
  %1767 = insertelement <2 x bfloat> poison, bfloat %1599, i64 0, !dbg !41
  %1768 = insertelement <2 x bfloat> %1767, bfloat %1600, i64 1, !dbg !41
  %1769 = bitcast <2 x bfloat> %1768 to i32, !dbg !41
  %1770 = insertelement <2 x bfloat> poison, bfloat %1601, i64 0, !dbg !41
  %1771 = insertelement <2 x bfloat> %1770, bfloat %1602, i64 1, !dbg !41
  %1772 = bitcast <2 x bfloat> %1771 to i32, !dbg !41
  %1773 = insertelement <2 x bfloat> poison, bfloat %1603, i64 0, !dbg !41
  %1774 = insertelement <2 x bfloat> %1773, bfloat %1604, i64 1, !dbg !41
  %1775 = bitcast <2 x bfloat> %1774 to i32, !dbg !41
  %1776 = insertelement <2 x bfloat> poison, bfloat %1605, i64 0, !dbg !41
  %1777 = insertelement <2 x bfloat> %1776, bfloat %1606, i64 1, !dbg !41
  %1778 = bitcast <2 x bfloat> %1777 to i32, !dbg !41
  %1779 = insertelement <2 x bfloat> poison, bfloat %1607, i64 0, !dbg !41
  %1780 = insertelement <2 x bfloat> %1779, bfloat %1608, i64 1, !dbg !41
  %1781 = bitcast <2 x bfloat> %1780 to i32, !dbg !41
  %1782 = insertelement <2 x bfloat> poison, bfloat %1609, i64 0, !dbg !41
  %1783 = insertelement <2 x bfloat> %1782, bfloat %1610, i64 1, !dbg !41
  %1784 = bitcast <2 x bfloat> %1783 to i32, !dbg !41
  %1785 = insertelement <2 x bfloat> poison, bfloat %1611, i64 0, !dbg !41
  %1786 = insertelement <2 x bfloat> %1785, bfloat %1612, i64 1, !dbg !41
  %1787 = bitcast <2 x bfloat> %1786 to i32, !dbg !41
  %1788 = insertelement <2 x bfloat> poison, bfloat %1613, i64 0, !dbg !41
  %1789 = insertelement <2 x bfloat> %1788, bfloat %1614, i64 1, !dbg !41
  %1790 = bitcast <2 x bfloat> %1789 to i32, !dbg !41
  %1791 = insertelement <2 x bfloat> poison, bfloat %1615, i64 0, !dbg !41
  %1792 = insertelement <2 x bfloat> %1791, bfloat %1616, i64 1, !dbg !41
  %1793 = bitcast <2 x bfloat> %1792 to i32, !dbg !41
  %1794 = insertelement <2 x bfloat> poison, bfloat %1617, i64 0, !dbg !41
  %1795 = insertelement <2 x bfloat> %1794, bfloat %1618, i64 1, !dbg !41
  %1796 = bitcast <2 x bfloat> %1795 to i32, !dbg !41
  %1797 = insertelement <2 x bfloat> poison, bfloat %1619, i64 0, !dbg !41
  %1798 = insertelement <2 x bfloat> %1797, bfloat %1620, i64 1, !dbg !41
  %1799 = bitcast <2 x bfloat> %1798 to i32, !dbg !41
  %1800 = insertelement <2 x bfloat> poison, bfloat %1621, i64 0, !dbg !41
  %1801 = insertelement <2 x bfloat> %1800, bfloat %1622, i64 1, !dbg !41
  %1802 = bitcast <2 x bfloat> %1801 to i32, !dbg !41
  %1803 = insertelement <2 x bfloat> poison, bfloat %1623, i64 0, !dbg !41
  %1804 = insertelement <2 x bfloat> %1803, bfloat %1624, i64 1, !dbg !41
  %1805 = bitcast <2 x bfloat> %1804 to i32, !dbg !41
  %1806 = insertelement <2 x bfloat> poison, bfloat %1625, i64 0, !dbg !41
  %1807 = insertelement <2 x bfloat> %1806, bfloat %1626, i64 1, !dbg !41
  %1808 = bitcast <2 x bfloat> %1807 to i32, !dbg !41
  %1809 = insertelement <2 x bfloat> poison, bfloat %1627, i64 0, !dbg !41
  %1810 = insertelement <2 x bfloat> %1809, bfloat %1628, i64 1, !dbg !41
  %1811 = bitcast <2 x bfloat> %1810 to i32, !dbg !41
  %1812 = insertelement <2 x bfloat> poison, bfloat %1629, i64 0, !dbg !41
  %1813 = insertelement <2 x bfloat> %1812, bfloat %1630, i64 1, !dbg !41
  %1814 = bitcast <2 x bfloat> %1813 to i32, !dbg !41
  %1815 = bitcast <2 x bfloat> %1634 to i32, !dbg !41
  %1816 = bitcast <2 x bfloat> %1638 to i32, !dbg !41
  %1817 = bitcast <2 x bfloat> %1642 to i32, !dbg !41
  %1818 = bitcast <2 x bfloat> %1646 to i32, !dbg !41
  %1819 = bitcast <2 x bfloat> %1650 to i32, !dbg !41
  %1820 = bitcast <2 x bfloat> %1654 to i32, !dbg !41
  %1821 = bitcast <2 x bfloat> %1658 to i32, !dbg !41
  %1822 = bitcast <2 x bfloat> %1662 to i32, !dbg !41
  %1823 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1664, i32 %1665, i32 %1666, i32 %1667, i32 %1745, i32 %1748) #3, !dbg !41
  %1824 = extractvalue { float, float, float, float } %1823, 0, !dbg !41
  %1825 = extractvalue { float, float, float, float } %1823, 1, !dbg !41
  %1826 = extractvalue { float, float, float, float } %1823, 2, !dbg !41
  %1827 = extractvalue { float, float, float, float } %1823, 3, !dbg !41
  %1828 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1664, i32 %1665, i32 %1666, i32 %1667, i32 %1769, i32 %1772) #3, !dbg !41
  %1829 = extractvalue { float, float, float, float } %1828, 0, !dbg !41
  %1830 = extractvalue { float, float, float, float } %1828, 1, !dbg !41
  %1831 = extractvalue { float, float, float, float } %1828, 2, !dbg !41
  %1832 = extractvalue { float, float, float, float } %1828, 3, !dbg !41
  %1833 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1664, i32 %1665, i32 %1666, i32 %1667, i32 %1793, i32 %1796) #3, !dbg !41
  %1834 = extractvalue { float, float, float, float } %1833, 0, !dbg !41
  %1835 = extractvalue { float, float, float, float } %1833, 1, !dbg !41
  %1836 = extractvalue { float, float, float, float } %1833, 2, !dbg !41
  %1837 = extractvalue { float, float, float, float } %1833, 3, !dbg !41
  %1838 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1664, i32 %1665, i32 %1666, i32 %1667, i32 %1815, i32 %1816) #3, !dbg !41
  %1839 = extractvalue { float, float, float, float } %1838, 0, !dbg !41
  %1840 = extractvalue { float, float, float, float } %1838, 1, !dbg !41
  %1841 = extractvalue { float, float, float, float } %1838, 2, !dbg !41
  %1842 = extractvalue { float, float, float, float } %1838, 3, !dbg !41
  %1843 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1684, i32 %1685, i32 %1686, i32 %1687, i32 %1745, i32 %1748) #3, !dbg !41
  %1844 = extractvalue { float, float, float, float } %1843, 0, !dbg !41
  %1845 = extractvalue { float, float, float, float } %1843, 1, !dbg !41
  %1846 = extractvalue { float, float, float, float } %1843, 2, !dbg !41
  %1847 = extractvalue { float, float, float, float } %1843, 3, !dbg !41
  %1848 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1684, i32 %1685, i32 %1686, i32 %1687, i32 %1769, i32 %1772) #3, !dbg !41
  %1849 = extractvalue { float, float, float, float } %1848, 0, !dbg !41
  %1850 = extractvalue { float, float, float, float } %1848, 1, !dbg !41
  %1851 = extractvalue { float, float, float, float } %1848, 2, !dbg !41
  %1852 = extractvalue { float, float, float, float } %1848, 3, !dbg !41
  %1853 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1684, i32 %1685, i32 %1686, i32 %1687, i32 %1793, i32 %1796) #3, !dbg !41
  %1854 = extractvalue { float, float, float, float } %1853, 0, !dbg !41
  %1855 = extractvalue { float, float, float, float } %1853, 1, !dbg !41
  %1856 = extractvalue { float, float, float, float } %1853, 2, !dbg !41
  %1857 = extractvalue { float, float, float, float } %1853, 3, !dbg !41
  %1858 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1684, i32 %1685, i32 %1686, i32 %1687, i32 %1815, i32 %1816) #3, !dbg !41
  %1859 = extractvalue { float, float, float, float } %1858, 0, !dbg !41
  %1860 = extractvalue { float, float, float, float } %1858, 1, !dbg !41
  %1861 = extractvalue { float, float, float, float } %1858, 2, !dbg !41
  %1862 = extractvalue { float, float, float, float } %1858, 3, !dbg !41
  %1863 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1704, i32 %1705, i32 %1706, i32 %1707, i32 %1745, i32 %1748) #3, !dbg !41
  %1864 = extractvalue { float, float, float, float } %1863, 0, !dbg !41
  %1865 = extractvalue { float, float, float, float } %1863, 1, !dbg !41
  %1866 = extractvalue { float, float, float, float } %1863, 2, !dbg !41
  %1867 = extractvalue { float, float, float, float } %1863, 3, !dbg !41
  %1868 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1704, i32 %1705, i32 %1706, i32 %1707, i32 %1769, i32 %1772) #3, !dbg !41
  %1869 = extractvalue { float, float, float, float } %1868, 0, !dbg !41
  %1870 = extractvalue { float, float, float, float } %1868, 1, !dbg !41
  %1871 = extractvalue { float, float, float, float } %1868, 2, !dbg !41
  %1872 = extractvalue { float, float, float, float } %1868, 3, !dbg !41
  %1873 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1704, i32 %1705, i32 %1706, i32 %1707, i32 %1793, i32 %1796) #3, !dbg !41
  %1874 = extractvalue { float, float, float, float } %1873, 0, !dbg !41
  %1875 = extractvalue { float, float, float, float } %1873, 1, !dbg !41
  %1876 = extractvalue { float, float, float, float } %1873, 2, !dbg !41
  %1877 = extractvalue { float, float, float, float } %1873, 3, !dbg !41
  %1878 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1704, i32 %1705, i32 %1706, i32 %1707, i32 %1815, i32 %1816) #3, !dbg !41
  %1879 = extractvalue { float, float, float, float } %1878, 0, !dbg !41
  %1880 = extractvalue { float, float, float, float } %1878, 1, !dbg !41
  %1881 = extractvalue { float, float, float, float } %1878, 2, !dbg !41
  %1882 = extractvalue { float, float, float, float } %1878, 3, !dbg !41
  %1883 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1724, i32 %1725, i32 %1726, i32 %1727, i32 %1745, i32 %1748) #3, !dbg !41
  %1884 = extractvalue { float, float, float, float } %1883, 0, !dbg !41
  %1885 = extractvalue { float, float, float, float } %1883, 1, !dbg !41
  %1886 = extractvalue { float, float, float, float } %1883, 2, !dbg !41
  %1887 = extractvalue { float, float, float, float } %1883, 3, !dbg !41
  %1888 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1724, i32 %1725, i32 %1726, i32 %1727, i32 %1769, i32 %1772) #3, !dbg !41
  %1889 = extractvalue { float, float, float, float } %1888, 0, !dbg !41
  %1890 = extractvalue { float, float, float, float } %1888, 1, !dbg !41
  %1891 = extractvalue { float, float, float, float } %1888, 2, !dbg !41
  %1892 = extractvalue { float, float, float, float } %1888, 3, !dbg !41
  %1893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1724, i32 %1725, i32 %1726, i32 %1727, i32 %1793, i32 %1796) #3, !dbg !41
  %1894 = extractvalue { float, float, float, float } %1893, 0, !dbg !41
  %1895 = extractvalue { float, float, float, float } %1893, 1, !dbg !41
  %1896 = extractvalue { float, float, float, float } %1893, 2, !dbg !41
  %1897 = extractvalue { float, float, float, float } %1893, 3, !dbg !41
  %1898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1724, i32 %1725, i32 %1726, i32 %1727, i32 %1815, i32 %1816) #3, !dbg !41
  %1899 = extractvalue { float, float, float, float } %1898, 0, !dbg !41
  %1900 = extractvalue { float, float, float, float } %1898, 1, !dbg !41
  %1901 = extractvalue { float, float, float, float } %1898, 2, !dbg !41
  %1902 = extractvalue { float, float, float, float } %1898, 3, !dbg !41
  %1903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1824, float %1825, float %1826, float %1827, i32 %1669, i32 %1670, i32 %1671, i32 %1672, i32 %1751, i32 %1754) #3, !dbg !41
  %1904 = extractvalue { float, float, float, float } %1903, 0, !dbg !41
  %1905 = extractvalue { float, float, float, float } %1903, 1, !dbg !41
  %1906 = extractvalue { float, float, float, float } %1903, 2, !dbg !41
  %1907 = extractvalue { float, float, float, float } %1903, 3, !dbg !41
  %1908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1829, float %1830, float %1831, float %1832, i32 %1669, i32 %1670, i32 %1671, i32 %1672, i32 %1775, i32 %1778) #3, !dbg !41
  %1909 = extractvalue { float, float, float, float } %1908, 0, !dbg !41
  %1910 = extractvalue { float, float, float, float } %1908, 1, !dbg !41
  %1911 = extractvalue { float, float, float, float } %1908, 2, !dbg !41
  %1912 = extractvalue { float, float, float, float } %1908, 3, !dbg !41
  %1913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1834, float %1835, float %1836, float %1837, i32 %1669, i32 %1670, i32 %1671, i32 %1672, i32 %1799, i32 %1802) #3, !dbg !41
  %1914 = extractvalue { float, float, float, float } %1913, 0, !dbg !41
  %1915 = extractvalue { float, float, float, float } %1913, 1, !dbg !41
  %1916 = extractvalue { float, float, float, float } %1913, 2, !dbg !41
  %1917 = extractvalue { float, float, float, float } %1913, 3, !dbg !41
  %1918 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1839, float %1840, float %1841, float %1842, i32 %1669, i32 %1670, i32 %1671, i32 %1672, i32 %1817, i32 %1818) #3, !dbg !41
  %1919 = extractvalue { float, float, float, float } %1918, 0, !dbg !41
  %1920 = extractvalue { float, float, float, float } %1918, 1, !dbg !41
  %1921 = extractvalue { float, float, float, float } %1918, 2, !dbg !41
  %1922 = extractvalue { float, float, float, float } %1918, 3, !dbg !41
  %1923 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1844, float %1845, float %1846, float %1847, i32 %1689, i32 %1690, i32 %1691, i32 %1692, i32 %1751, i32 %1754) #3, !dbg !41
  %1924 = extractvalue { float, float, float, float } %1923, 0, !dbg !41
  %1925 = extractvalue { float, float, float, float } %1923, 1, !dbg !41
  %1926 = extractvalue { float, float, float, float } %1923, 2, !dbg !41
  %1927 = extractvalue { float, float, float, float } %1923, 3, !dbg !41
  %1928 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1849, float %1850, float %1851, float %1852, i32 %1689, i32 %1690, i32 %1691, i32 %1692, i32 %1775, i32 %1778) #3, !dbg !41
  %1929 = extractvalue { float, float, float, float } %1928, 0, !dbg !41
  %1930 = extractvalue { float, float, float, float } %1928, 1, !dbg !41
  %1931 = extractvalue { float, float, float, float } %1928, 2, !dbg !41
  %1932 = extractvalue { float, float, float, float } %1928, 3, !dbg !41
  %1933 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1854, float %1855, float %1856, float %1857, i32 %1689, i32 %1690, i32 %1691, i32 %1692, i32 %1799, i32 %1802) #3, !dbg !41
  %1934 = extractvalue { float, float, float, float } %1933, 0, !dbg !41
  %1935 = extractvalue { float, float, float, float } %1933, 1, !dbg !41
  %1936 = extractvalue { float, float, float, float } %1933, 2, !dbg !41
  %1937 = extractvalue { float, float, float, float } %1933, 3, !dbg !41
  %1938 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1859, float %1860, float %1861, float %1862, i32 %1689, i32 %1690, i32 %1691, i32 %1692, i32 %1817, i32 %1818) #3, !dbg !41
  %1939 = extractvalue { float, float, float, float } %1938, 0, !dbg !41
  %1940 = extractvalue { float, float, float, float } %1938, 1, !dbg !41
  %1941 = extractvalue { float, float, float, float } %1938, 2, !dbg !41
  %1942 = extractvalue { float, float, float, float } %1938, 3, !dbg !41
  %1943 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1864, float %1865, float %1866, float %1867, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1751, i32 %1754) #3, !dbg !41
  %1944 = extractvalue { float, float, float, float } %1943, 0, !dbg !41
  %1945 = extractvalue { float, float, float, float } %1943, 1, !dbg !41
  %1946 = extractvalue { float, float, float, float } %1943, 2, !dbg !41
  %1947 = extractvalue { float, float, float, float } %1943, 3, !dbg !41
  %1948 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1869, float %1870, float %1871, float %1872, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1775, i32 %1778) #3, !dbg !41
  %1949 = extractvalue { float, float, float, float } %1948, 0, !dbg !41
  %1950 = extractvalue { float, float, float, float } %1948, 1, !dbg !41
  %1951 = extractvalue { float, float, float, float } %1948, 2, !dbg !41
  %1952 = extractvalue { float, float, float, float } %1948, 3, !dbg !41
  %1953 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1874, float %1875, float %1876, float %1877, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1799, i32 %1802) #3, !dbg !41
  %1954 = extractvalue { float, float, float, float } %1953, 0, !dbg !41
  %1955 = extractvalue { float, float, float, float } %1953, 1, !dbg !41
  %1956 = extractvalue { float, float, float, float } %1953, 2, !dbg !41
  %1957 = extractvalue { float, float, float, float } %1953, 3, !dbg !41
  %1958 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1879, float %1880, float %1881, float %1882, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1817, i32 %1818) #3, !dbg !41
  %1959 = extractvalue { float, float, float, float } %1958, 0, !dbg !41
  %1960 = extractvalue { float, float, float, float } %1958, 1, !dbg !41
  %1961 = extractvalue { float, float, float, float } %1958, 2, !dbg !41
  %1962 = extractvalue { float, float, float, float } %1958, 3, !dbg !41
  %1963 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1884, float %1885, float %1886, float %1887, i32 %1729, i32 %1730, i32 %1731, i32 %1732, i32 %1751, i32 %1754) #3, !dbg !41
  %1964 = extractvalue { float, float, float, float } %1963, 0, !dbg !41
  %1965 = extractvalue { float, float, float, float } %1963, 1, !dbg !41
  %1966 = extractvalue { float, float, float, float } %1963, 2, !dbg !41
  %1967 = extractvalue { float, float, float, float } %1963, 3, !dbg !41
  %1968 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1889, float %1890, float %1891, float %1892, i32 %1729, i32 %1730, i32 %1731, i32 %1732, i32 %1775, i32 %1778) #3, !dbg !41
  %1969 = extractvalue { float, float, float, float } %1968, 0, !dbg !41
  %1970 = extractvalue { float, float, float, float } %1968, 1, !dbg !41
  %1971 = extractvalue { float, float, float, float } %1968, 2, !dbg !41
  %1972 = extractvalue { float, float, float, float } %1968, 3, !dbg !41
  %1973 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1894, float %1895, float %1896, float %1897, i32 %1729, i32 %1730, i32 %1731, i32 %1732, i32 %1799, i32 %1802) #3, !dbg !41
  %1974 = extractvalue { float, float, float, float } %1973, 0, !dbg !41
  %1975 = extractvalue { float, float, float, float } %1973, 1, !dbg !41
  %1976 = extractvalue { float, float, float, float } %1973, 2, !dbg !41
  %1977 = extractvalue { float, float, float, float } %1973, 3, !dbg !41
  %1978 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1899, float %1900, float %1901, float %1902, i32 %1729, i32 %1730, i32 %1731, i32 %1732, i32 %1817, i32 %1818) #3, !dbg !41
  %1979 = extractvalue { float, float, float, float } %1978, 0, !dbg !41
  %1980 = extractvalue { float, float, float, float } %1978, 1, !dbg !41
  %1981 = extractvalue { float, float, float, float } %1978, 2, !dbg !41
  %1982 = extractvalue { float, float, float, float } %1978, 3, !dbg !41
  %1983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1904, float %1905, float %1906, float %1907, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1757, i32 %1760) #3, !dbg !41
  %1984 = extractvalue { float, float, float, float } %1983, 0, !dbg !41
  %1985 = extractvalue { float, float, float, float } %1983, 1, !dbg !41
  %1986 = extractvalue { float, float, float, float } %1983, 2, !dbg !41
  %1987 = extractvalue { float, float, float, float } %1983, 3, !dbg !41
  %1988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1909, float %1910, float %1911, float %1912, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1781, i32 %1784) #3, !dbg !41
  %1989 = extractvalue { float, float, float, float } %1988, 0, !dbg !41
  %1990 = extractvalue { float, float, float, float } %1988, 1, !dbg !41
  %1991 = extractvalue { float, float, float, float } %1988, 2, !dbg !41
  %1992 = extractvalue { float, float, float, float } %1988, 3, !dbg !41
  %1993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1914, float %1915, float %1916, float %1917, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1805, i32 %1808) #3, !dbg !41
  %1994 = extractvalue { float, float, float, float } %1993, 0, !dbg !41
  %1995 = extractvalue { float, float, float, float } %1993, 1, !dbg !41
  %1996 = extractvalue { float, float, float, float } %1993, 2, !dbg !41
  %1997 = extractvalue { float, float, float, float } %1993, 3, !dbg !41
  %1998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1919, float %1920, float %1921, float %1922, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1819, i32 %1820) #3, !dbg !41
  %1999 = extractvalue { float, float, float, float } %1998, 0, !dbg !41
  %2000 = extractvalue { float, float, float, float } %1998, 1, !dbg !41
  %2001 = extractvalue { float, float, float, float } %1998, 2, !dbg !41
  %2002 = extractvalue { float, float, float, float } %1998, 3, !dbg !41
  %2003 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1924, float %1925, float %1926, float %1927, i32 %1694, i32 %1695, i32 %1696, i32 %1697, i32 %1757, i32 %1760) #3, !dbg !41
  %2004 = extractvalue { float, float, float, float } %2003, 0, !dbg !41
  %2005 = extractvalue { float, float, float, float } %2003, 1, !dbg !41
  %2006 = extractvalue { float, float, float, float } %2003, 2, !dbg !41
  %2007 = extractvalue { float, float, float, float } %2003, 3, !dbg !41
  %2008 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1929, float %1930, float %1931, float %1932, i32 %1694, i32 %1695, i32 %1696, i32 %1697, i32 %1781, i32 %1784) #3, !dbg !41
  %2009 = extractvalue { float, float, float, float } %2008, 0, !dbg !41
  %2010 = extractvalue { float, float, float, float } %2008, 1, !dbg !41
  %2011 = extractvalue { float, float, float, float } %2008, 2, !dbg !41
  %2012 = extractvalue { float, float, float, float } %2008, 3, !dbg !41
  %2013 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1934, float %1935, float %1936, float %1937, i32 %1694, i32 %1695, i32 %1696, i32 %1697, i32 %1805, i32 %1808) #3, !dbg !41
  %2014 = extractvalue { float, float, float, float } %2013, 0, !dbg !41
  %2015 = extractvalue { float, float, float, float } %2013, 1, !dbg !41
  %2016 = extractvalue { float, float, float, float } %2013, 2, !dbg !41
  %2017 = extractvalue { float, float, float, float } %2013, 3, !dbg !41
  %2018 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1939, float %1940, float %1941, float %1942, i32 %1694, i32 %1695, i32 %1696, i32 %1697, i32 %1819, i32 %1820) #3, !dbg !41
  %2019 = extractvalue { float, float, float, float } %2018, 0, !dbg !41
  %2020 = extractvalue { float, float, float, float } %2018, 1, !dbg !41
  %2021 = extractvalue { float, float, float, float } %2018, 2, !dbg !41
  %2022 = extractvalue { float, float, float, float } %2018, 3, !dbg !41
  %2023 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1944, float %1945, float %1946, float %1947, i32 %1714, i32 %1715, i32 %1716, i32 %1717, i32 %1757, i32 %1760) #3, !dbg !41
  %2024 = extractvalue { float, float, float, float } %2023, 0, !dbg !41
  %2025 = extractvalue { float, float, float, float } %2023, 1, !dbg !41
  %2026 = extractvalue { float, float, float, float } %2023, 2, !dbg !41
  %2027 = extractvalue { float, float, float, float } %2023, 3, !dbg !41
  %2028 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1949, float %1950, float %1951, float %1952, i32 %1714, i32 %1715, i32 %1716, i32 %1717, i32 %1781, i32 %1784) #3, !dbg !41
  %2029 = extractvalue { float, float, float, float } %2028, 0, !dbg !41
  %2030 = extractvalue { float, float, float, float } %2028, 1, !dbg !41
  %2031 = extractvalue { float, float, float, float } %2028, 2, !dbg !41
  %2032 = extractvalue { float, float, float, float } %2028, 3, !dbg !41
  %2033 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1954, float %1955, float %1956, float %1957, i32 %1714, i32 %1715, i32 %1716, i32 %1717, i32 %1805, i32 %1808) #3, !dbg !41
  %2034 = extractvalue { float, float, float, float } %2033, 0, !dbg !41
  %2035 = extractvalue { float, float, float, float } %2033, 1, !dbg !41
  %2036 = extractvalue { float, float, float, float } %2033, 2, !dbg !41
  %2037 = extractvalue { float, float, float, float } %2033, 3, !dbg !41
  %2038 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1959, float %1960, float %1961, float %1962, i32 %1714, i32 %1715, i32 %1716, i32 %1717, i32 %1819, i32 %1820) #3, !dbg !41
  %2039 = extractvalue { float, float, float, float } %2038, 0, !dbg !41
  %2040 = extractvalue { float, float, float, float } %2038, 1, !dbg !41
  %2041 = extractvalue { float, float, float, float } %2038, 2, !dbg !41
  %2042 = extractvalue { float, float, float, float } %2038, 3, !dbg !41
  %2043 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1964, float %1965, float %1966, float %1967, i32 %1734, i32 %1735, i32 %1736, i32 %1737, i32 %1757, i32 %1760) #3, !dbg !41
  %2044 = extractvalue { float, float, float, float } %2043, 0, !dbg !41
  %2045 = extractvalue { float, float, float, float } %2043, 1, !dbg !41
  %2046 = extractvalue { float, float, float, float } %2043, 2, !dbg !41
  %2047 = extractvalue { float, float, float, float } %2043, 3, !dbg !41
  %2048 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1969, float %1970, float %1971, float %1972, i32 %1734, i32 %1735, i32 %1736, i32 %1737, i32 %1781, i32 %1784) #3, !dbg !41
  %2049 = extractvalue { float, float, float, float } %2048, 0, !dbg !41
  %2050 = extractvalue { float, float, float, float } %2048, 1, !dbg !41
  %2051 = extractvalue { float, float, float, float } %2048, 2, !dbg !41
  %2052 = extractvalue { float, float, float, float } %2048, 3, !dbg !41
  %2053 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1974, float %1975, float %1976, float %1977, i32 %1734, i32 %1735, i32 %1736, i32 %1737, i32 %1805, i32 %1808) #3, !dbg !41
  %2054 = extractvalue { float, float, float, float } %2053, 0, !dbg !41
  %2055 = extractvalue { float, float, float, float } %2053, 1, !dbg !41
  %2056 = extractvalue { float, float, float, float } %2053, 2, !dbg !41
  %2057 = extractvalue { float, float, float, float } %2053, 3, !dbg !41
  %2058 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1979, float %1980, float %1981, float %1982, i32 %1734, i32 %1735, i32 %1736, i32 %1737, i32 %1819, i32 %1820) #3, !dbg !41
  %2059 = extractvalue { float, float, float, float } %2058, 0, !dbg !41
  %2060 = extractvalue { float, float, float, float } %2058, 1, !dbg !41
  %2061 = extractvalue { float, float, float, float } %2058, 2, !dbg !41
  %2062 = extractvalue { float, float, float, float } %2058, 3, !dbg !41
  %2063 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1984, float %1985, float %1986, float %1987, i32 %1679, i32 %1680, i32 %1681, i32 %1682, i32 %1763, i32 %1766) #3, !dbg !41
  %2064 = extractvalue { float, float, float, float } %2063, 0, !dbg !41
  %2065 = extractvalue { float, float, float, float } %2063, 1, !dbg !41
  %2066 = extractvalue { float, float, float, float } %2063, 2, !dbg !41
  %2067 = extractvalue { float, float, float, float } %2063, 3, !dbg !41
  %2068 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1989, float %1990, float %1991, float %1992, i32 %1679, i32 %1680, i32 %1681, i32 %1682, i32 %1787, i32 %1790) #3, !dbg !41
  %2069 = extractvalue { float, float, float, float } %2068, 0, !dbg !41
  %2070 = extractvalue { float, float, float, float } %2068, 1, !dbg !41
  %2071 = extractvalue { float, float, float, float } %2068, 2, !dbg !41
  %2072 = extractvalue { float, float, float, float } %2068, 3, !dbg !41
  %2073 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1994, float %1995, float %1996, float %1997, i32 %1679, i32 %1680, i32 %1681, i32 %1682, i32 %1811, i32 %1814) #3, !dbg !41
  %2074 = extractvalue { float, float, float, float } %2073, 0, !dbg !41
  %2075 = extractvalue { float, float, float, float } %2073, 1, !dbg !41
  %2076 = extractvalue { float, float, float, float } %2073, 2, !dbg !41
  %2077 = extractvalue { float, float, float, float } %2073, 3, !dbg !41
  %2078 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1999, float %2000, float %2001, float %2002, i32 %1679, i32 %1680, i32 %1681, i32 %1682, i32 %1821, i32 %1822) #3, !dbg !41
  %2079 = extractvalue { float, float, float, float } %2078, 0, !dbg !41
  %2080 = extractvalue { float, float, float, float } %2078, 1, !dbg !41
  %2081 = extractvalue { float, float, float, float } %2078, 2, !dbg !41
  %2082 = extractvalue { float, float, float, float } %2078, 3, !dbg !41
  %2083 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2004, float %2005, float %2006, float %2007, i32 %1699, i32 %1700, i32 %1701, i32 %1702, i32 %1763, i32 %1766) #3, !dbg !41
  %2084 = extractvalue { float, float, float, float } %2083, 0, !dbg !41
  %2085 = extractvalue { float, float, float, float } %2083, 1, !dbg !41
  %2086 = extractvalue { float, float, float, float } %2083, 2, !dbg !41
  %2087 = extractvalue { float, float, float, float } %2083, 3, !dbg !41
  %2088 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2009, float %2010, float %2011, float %2012, i32 %1699, i32 %1700, i32 %1701, i32 %1702, i32 %1787, i32 %1790) #3, !dbg !41
  %2089 = extractvalue { float, float, float, float } %2088, 0, !dbg !41
  %2090 = extractvalue { float, float, float, float } %2088, 1, !dbg !41
  %2091 = extractvalue { float, float, float, float } %2088, 2, !dbg !41
  %2092 = extractvalue { float, float, float, float } %2088, 3, !dbg !41
  %2093 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2014, float %2015, float %2016, float %2017, i32 %1699, i32 %1700, i32 %1701, i32 %1702, i32 %1811, i32 %1814) #3, !dbg !41
  %2094 = extractvalue { float, float, float, float } %2093, 0, !dbg !41
  %2095 = extractvalue { float, float, float, float } %2093, 1, !dbg !41
  %2096 = extractvalue { float, float, float, float } %2093, 2, !dbg !41
  %2097 = extractvalue { float, float, float, float } %2093, 3, !dbg !41
  %2098 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2019, float %2020, float %2021, float %2022, i32 %1699, i32 %1700, i32 %1701, i32 %1702, i32 %1821, i32 %1822) #3, !dbg !41
  %2099 = extractvalue { float, float, float, float } %2098, 0, !dbg !41
  %2100 = extractvalue { float, float, float, float } %2098, 1, !dbg !41
  %2101 = extractvalue { float, float, float, float } %2098, 2, !dbg !41
  %2102 = extractvalue { float, float, float, float } %2098, 3, !dbg !41
  %2103 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2024, float %2025, float %2026, float %2027, i32 %1719, i32 %1720, i32 %1721, i32 %1722, i32 %1763, i32 %1766) #3, !dbg !41
  %2104 = extractvalue { float, float, float, float } %2103, 0, !dbg !41
  %2105 = extractvalue { float, float, float, float } %2103, 1, !dbg !41
  %2106 = extractvalue { float, float, float, float } %2103, 2, !dbg !41
  %2107 = extractvalue { float, float, float, float } %2103, 3, !dbg !41
  %2108 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2029, float %2030, float %2031, float %2032, i32 %1719, i32 %1720, i32 %1721, i32 %1722, i32 %1787, i32 %1790) #3, !dbg !41
  %2109 = extractvalue { float, float, float, float } %2108, 0, !dbg !41
  %2110 = extractvalue { float, float, float, float } %2108, 1, !dbg !41
  %2111 = extractvalue { float, float, float, float } %2108, 2, !dbg !41
  %2112 = extractvalue { float, float, float, float } %2108, 3, !dbg !41
  %2113 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2034, float %2035, float %2036, float %2037, i32 %1719, i32 %1720, i32 %1721, i32 %1722, i32 %1811, i32 %1814) #3, !dbg !41
  %2114 = extractvalue { float, float, float, float } %2113, 0, !dbg !41
  %2115 = extractvalue { float, float, float, float } %2113, 1, !dbg !41
  %2116 = extractvalue { float, float, float, float } %2113, 2, !dbg !41
  %2117 = extractvalue { float, float, float, float } %2113, 3, !dbg !41
  %2118 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2039, float %2040, float %2041, float %2042, i32 %1719, i32 %1720, i32 %1721, i32 %1722, i32 %1821, i32 %1822) #3, !dbg !41
  %2119 = extractvalue { float, float, float, float } %2118, 0, !dbg !41
  %2120 = extractvalue { float, float, float, float } %2118, 1, !dbg !41
  %2121 = extractvalue { float, float, float, float } %2118, 2, !dbg !41
  %2122 = extractvalue { float, float, float, float } %2118, 3, !dbg !41
  %2123 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2044, float %2045, float %2046, float %2047, i32 %1739, i32 %1740, i32 %1741, i32 %1742, i32 %1763, i32 %1766) #3, !dbg !41
  %2124 = extractvalue { float, float, float, float } %2123, 0, !dbg !41
  %2125 = extractvalue { float, float, float, float } %2123, 1, !dbg !41
  %2126 = extractvalue { float, float, float, float } %2123, 2, !dbg !41
  %2127 = extractvalue { float, float, float, float } %2123, 3, !dbg !41
  %2128 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2049, float %2050, float %2051, float %2052, i32 %1739, i32 %1740, i32 %1741, i32 %1742, i32 %1787, i32 %1790) #3, !dbg !41
  %2129 = extractvalue { float, float, float, float } %2128, 0, !dbg !41
  %2130 = extractvalue { float, float, float, float } %2128, 1, !dbg !41
  %2131 = extractvalue { float, float, float, float } %2128, 2, !dbg !41
  %2132 = extractvalue { float, float, float, float } %2128, 3, !dbg !41
  %2133 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2054, float %2055, float %2056, float %2057, i32 %1739, i32 %1740, i32 %1741, i32 %1742, i32 %1811, i32 %1814) #3, !dbg !41
  %2134 = extractvalue { float, float, float, float } %2133, 0, !dbg !41
  %2135 = extractvalue { float, float, float, float } %2133, 1, !dbg !41
  %2136 = extractvalue { float, float, float, float } %2133, 2, !dbg !41
  %2137 = extractvalue { float, float, float, float } %2133, 3, !dbg !41
  %2138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2059, float %2060, float %2061, float %2062, i32 %1739, i32 %1740, i32 %1741, i32 %1742, i32 %1821, i32 %1822) #3, !dbg !41
  %2139 = extractvalue { float, float, float, float } %2138, 0, !dbg !41
  %2140 = extractvalue { float, float, float, float } %2138, 1, !dbg !41
  %2141 = extractvalue { float, float, float, float } %2138, 2, !dbg !41
  %2142 = extractvalue { float, float, float, float } %2138, 3, !dbg !41
  %2143 = insertelement <2 x float> poison, float %2064, i64 0, !dbg !42
  %2144 = insertelement <2 x float> %2143, float %2065, i64 1, !dbg !42
  %2145 = fptrunc <2 x float> %2144 to <2 x bfloat>, !dbg !42
  %2146 = insertelement <2 x float> poison, float %2066, i64 0, !dbg !42
  %2147 = insertelement <2 x float> %2146, float %2067, i64 1, !dbg !42
  %2148 = fptrunc <2 x float> %2147 to <2 x bfloat>, !dbg !42
  %2149 = insertelement <2 x float> poison, float %2069, i64 0, !dbg !42
  %2150 = insertelement <2 x float> %2149, float %2070, i64 1, !dbg !42
  %2151 = fptrunc <2 x float> %2150 to <2 x bfloat>, !dbg !42
  %2152 = insertelement <2 x float> poison, float %2071, i64 0, !dbg !42
  %2153 = insertelement <2 x float> %2152, float %2072, i64 1, !dbg !42
  %2154 = fptrunc <2 x float> %2153 to <2 x bfloat>, !dbg !42
  %2155 = insertelement <2 x float> poison, float %2074, i64 0, !dbg !42
  %2156 = insertelement <2 x float> %2155, float %2075, i64 1, !dbg !42
  %2157 = fptrunc <2 x float> %2156 to <2 x bfloat>, !dbg !42
  %2158 = insertelement <2 x float> poison, float %2076, i64 0, !dbg !42
  %2159 = insertelement <2 x float> %2158, float %2077, i64 1, !dbg !42
  %2160 = fptrunc <2 x float> %2159 to <2 x bfloat>, !dbg !42
  %2161 = insertelement <2 x float> poison, float %2079, i64 0, !dbg !42
  %2162 = insertelement <2 x float> %2161, float %2080, i64 1, !dbg !42
  %2163 = fptrunc <2 x float> %2162 to <2 x bfloat>, !dbg !42
  %2164 = insertelement <2 x float> poison, float %2081, i64 0, !dbg !42
  %2165 = insertelement <2 x float> %2164, float %2082, i64 1, !dbg !42
  %2166 = fptrunc <2 x float> %2165 to <2 x bfloat>, !dbg !42
  %2167 = insertelement <2 x float> poison, float %2084, i64 0, !dbg !42
  %2168 = insertelement <2 x float> %2167, float %2085, i64 1, !dbg !42
  %2169 = fptrunc <2 x float> %2168 to <2 x bfloat>, !dbg !42
  %2170 = insertelement <2 x float> poison, float %2086, i64 0, !dbg !42
  %2171 = insertelement <2 x float> %2170, float %2087, i64 1, !dbg !42
  %2172 = fptrunc <2 x float> %2171 to <2 x bfloat>, !dbg !42
  %2173 = insertelement <2 x float> poison, float %2089, i64 0, !dbg !42
  %2174 = insertelement <2 x float> %2173, float %2090, i64 1, !dbg !42
  %2175 = fptrunc <2 x float> %2174 to <2 x bfloat>, !dbg !42
  %2176 = insertelement <2 x float> poison, float %2091, i64 0, !dbg !42
  %2177 = insertelement <2 x float> %2176, float %2092, i64 1, !dbg !42
  %2178 = fptrunc <2 x float> %2177 to <2 x bfloat>, !dbg !42
  %2179 = insertelement <2 x float> poison, float %2094, i64 0, !dbg !42
  %2180 = insertelement <2 x float> %2179, float %2095, i64 1, !dbg !42
  %2181 = fptrunc <2 x float> %2180 to <2 x bfloat>, !dbg !42
  %2182 = insertelement <2 x float> poison, float %2096, i64 0, !dbg !42
  %2183 = insertelement <2 x float> %2182, float %2097, i64 1, !dbg !42
  %2184 = fptrunc <2 x float> %2183 to <2 x bfloat>, !dbg !42
  %2185 = insertelement <2 x float> poison, float %2099, i64 0, !dbg !42
  %2186 = insertelement <2 x float> %2185, float %2100, i64 1, !dbg !42
  %2187 = fptrunc <2 x float> %2186 to <2 x bfloat>, !dbg !42
  %2188 = insertelement <2 x float> poison, float %2101, i64 0, !dbg !42
  %2189 = insertelement <2 x float> %2188, float %2102, i64 1, !dbg !42
  %2190 = fptrunc <2 x float> %2189 to <2 x bfloat>, !dbg !42
  %2191 = insertelement <2 x float> poison, float %2104, i64 0, !dbg !42
  %2192 = insertelement <2 x float> %2191, float %2105, i64 1, !dbg !42
  %2193 = fptrunc <2 x float> %2192 to <2 x bfloat>, !dbg !42
  %2194 = insertelement <2 x float> poison, float %2106, i64 0, !dbg !42
  %2195 = insertelement <2 x float> %2194, float %2107, i64 1, !dbg !42
  %2196 = fptrunc <2 x float> %2195 to <2 x bfloat>, !dbg !42
  %2197 = insertelement <2 x float> poison, float %2109, i64 0, !dbg !42
  %2198 = insertelement <2 x float> %2197, float %2110, i64 1, !dbg !42
  %2199 = fptrunc <2 x float> %2198 to <2 x bfloat>, !dbg !42
  %2200 = insertelement <2 x float> poison, float %2111, i64 0, !dbg !42
  %2201 = insertelement <2 x float> %2200, float %2112, i64 1, !dbg !42
  %2202 = fptrunc <2 x float> %2201 to <2 x bfloat>, !dbg !42
  %2203 = insertelement <2 x float> poison, float %2114, i64 0, !dbg !42
  %2204 = insertelement <2 x float> %2203, float %2115, i64 1, !dbg !42
  %2205 = fptrunc <2 x float> %2204 to <2 x bfloat>, !dbg !42
  %2206 = insertelement <2 x float> poison, float %2116, i64 0, !dbg !42
  %2207 = insertelement <2 x float> %2206, float %2117, i64 1, !dbg !42
  %2208 = fptrunc <2 x float> %2207 to <2 x bfloat>, !dbg !42
  %2209 = insertelement <2 x float> poison, float %2119, i64 0, !dbg !42
  %2210 = insertelement <2 x float> %2209, float %2120, i64 1, !dbg !42
  %2211 = fptrunc <2 x float> %2210 to <2 x bfloat>, !dbg !42
  %2212 = insertelement <2 x float> poison, float %2121, i64 0, !dbg !42
  %2213 = insertelement <2 x float> %2212, float %2122, i64 1, !dbg !42
  %2214 = fptrunc <2 x float> %2213 to <2 x bfloat>, !dbg !42
  %2215 = insertelement <2 x float> poison, float %2124, i64 0, !dbg !42
  %2216 = insertelement <2 x float> %2215, float %2125, i64 1, !dbg !42
  %2217 = fptrunc <2 x float> %2216 to <2 x bfloat>, !dbg !42
  %2218 = insertelement <2 x float> poison, float %2126, i64 0, !dbg !42
  %2219 = insertelement <2 x float> %2218, float %2127, i64 1, !dbg !42
  %2220 = fptrunc <2 x float> %2219 to <2 x bfloat>, !dbg !42
  %2221 = insertelement <2 x float> poison, float %2129, i64 0, !dbg !42
  %2222 = insertelement <2 x float> %2221, float %2130, i64 1, !dbg !42
  %2223 = fptrunc <2 x float> %2222 to <2 x bfloat>, !dbg !42
  %2224 = insertelement <2 x float> poison, float %2131, i64 0, !dbg !42
  %2225 = insertelement <2 x float> %2224, float %2132, i64 1, !dbg !42
  %2226 = fptrunc <2 x float> %2225 to <2 x bfloat>, !dbg !42
  %2227 = insertelement <2 x float> poison, float %2134, i64 0, !dbg !42
  %2228 = insertelement <2 x float> %2227, float %2135, i64 1, !dbg !42
  %2229 = fptrunc <2 x float> %2228 to <2 x bfloat>, !dbg !42
  %2230 = insertelement <2 x float> poison, float %2136, i64 0, !dbg !42
  %2231 = insertelement <2 x float> %2230, float %2137, i64 1, !dbg !42
  %2232 = fptrunc <2 x float> %2231 to <2 x bfloat>, !dbg !42
  %2233 = insertelement <2 x float> poison, float %2139, i64 0, !dbg !42
  %2234 = insertelement <2 x float> %2233, float %2140, i64 1, !dbg !42
  %2235 = fptrunc <2 x float> %2234 to <2 x bfloat>, !dbg !42
  %2236 = insertelement <2 x float> poison, float %2141, i64 0, !dbg !42
  %2237 = insertelement <2 x float> %2236, float %2142, i64 1, !dbg !42
  %2238 = fptrunc <2 x float> %2237 to <2 x bfloat>, !dbg !42
  %2239 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1289, !dbg !43
  %2240 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1290, !dbg !43
  %2241 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1291, !dbg !43
  %2242 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1292, !dbg !43
  %2243 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1293, !dbg !43
  %2244 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1294, !dbg !43
  %2245 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1295, !dbg !43
  %2246 = getelementptr bfloat, ptr addrspace(1) %1214, i64 %1296, !dbg !43
  store <2 x bfloat> %2145, ptr addrspace(3) %415, align 4, !dbg !43
  store <2 x bfloat> %2148, ptr addrspace(3) %420, align 4, !dbg !43
  store <2 x bfloat> %2151, ptr addrspace(3) %421, align 4, !dbg !43
  store <2 x bfloat> %2154, ptr addrspace(3) %426, align 4, !dbg !43
  store <2 x bfloat> %2157, ptr addrspace(3) %427, align 4, !dbg !43
  store <2 x bfloat> %2160, ptr addrspace(3) %432, align 4, !dbg !43
  store <2 x bfloat> %2163, ptr addrspace(3) %433, align 4, !dbg !43
  store <2 x bfloat> %2166, ptr addrspace(3) %438, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2247 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !43
  %2248 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2169, ptr addrspace(3) %415, align 4, !dbg !43
  store <2 x bfloat> %2172, ptr addrspace(3) %420, align 4, !dbg !43
  store <2 x bfloat> %2175, ptr addrspace(3) %421, align 4, !dbg !43
  store <2 x bfloat> %2178, ptr addrspace(3) %426, align 4, !dbg !43
  store <2 x bfloat> %2181, ptr addrspace(3) %427, align 4, !dbg !43
  store <2 x bfloat> %2184, ptr addrspace(3) %432, align 4, !dbg !43
  store <2 x bfloat> %2187, ptr addrspace(3) %433, align 4, !dbg !43
  store <2 x bfloat> %2190, ptr addrspace(3) %438, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2249 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !43
  %2250 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2193, ptr addrspace(3) %415, align 4, !dbg !43
  store <2 x bfloat> %2196, ptr addrspace(3) %420, align 4, !dbg !43
  store <2 x bfloat> %2199, ptr addrspace(3) %421, align 4, !dbg !43
  store <2 x bfloat> %2202, ptr addrspace(3) %426, align 4, !dbg !43
  store <2 x bfloat> %2205, ptr addrspace(3) %427, align 4, !dbg !43
  store <2 x bfloat> %2208, ptr addrspace(3) %432, align 4, !dbg !43
  store <2 x bfloat> %2211, ptr addrspace(3) %433, align 4, !dbg !43
  store <2 x bfloat> %2214, ptr addrspace(3) %438, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2251 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !43
  %2252 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2217, ptr addrspace(3) %415, align 4, !dbg !43
  store <2 x bfloat> %2220, ptr addrspace(3) %420, align 4, !dbg !43
  store <2 x bfloat> %2223, ptr addrspace(3) %421, align 4, !dbg !43
  store <2 x bfloat> %2226, ptr addrspace(3) %426, align 4, !dbg !43
  store <2 x bfloat> %2229, ptr addrspace(3) %427, align 4, !dbg !43
  store <2 x bfloat> %2232, ptr addrspace(3) %432, align 4, !dbg !43
  store <2 x bfloat> %2235, ptr addrspace(3) %433, align 4, !dbg !43
  store <2 x bfloat> %2238, ptr addrspace(3) %438, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2253 = load <4 x i32>, ptr addrspace(3) %441, align 16, !dbg !43
  %2254 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %2247, i64 0, !dbg !43
  %.extract239 = extractelement <4 x i32> %2247, i64 1, !dbg !43
  %.extract241 = extractelement <4 x i32> %2247, i64 2, !dbg !43
  %.extract243 = extractelement <4 x i32> %2247, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract239, i32 %.extract241, i32 %.extract243, ptr addrspace(1) %2239, i1 %1265) #3, !dbg !43
  %.extract245 = extractelement <4 x i32> %2248, i64 0, !dbg !43
  %.extract247 = extractelement <4 x i32> %2248, i64 1, !dbg !43
  %.extract249 = extractelement <4 x i32> %2248, i64 2, !dbg !43
  %.extract251 = extractelement <4 x i32> %2248, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract245, i32 %.extract247, i32 %.extract249, i32 %.extract251, ptr addrspace(1) %2240, i1 %1266) #3, !dbg !43
  %.extract253 = extractelement <4 x i32> %2249, i64 0, !dbg !43
  %.extract255 = extractelement <4 x i32> %2249, i64 1, !dbg !43
  %.extract257 = extractelement <4 x i32> %2249, i64 2, !dbg !43
  %.extract259 = extractelement <4 x i32> %2249, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract253, i32 %.extract255, i32 %.extract257, i32 %.extract259, ptr addrspace(1) %2241, i1 %1267) #3, !dbg !43
  %.extract261 = extractelement <4 x i32> %2250, i64 0, !dbg !43
  %.extract263 = extractelement <4 x i32> %2250, i64 1, !dbg !43
  %.extract265 = extractelement <4 x i32> %2250, i64 2, !dbg !43
  %.extract267 = extractelement <4 x i32> %2250, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract261, i32 %.extract263, i32 %.extract265, i32 %.extract267, ptr addrspace(1) %2242, i1 %1268) #3, !dbg !43
  %.extract269 = extractelement <4 x i32> %2251, i64 0, !dbg !43
  %.extract271 = extractelement <4 x i32> %2251, i64 1, !dbg !43
  %.extract273 = extractelement <4 x i32> %2251, i64 2, !dbg !43
  %.extract275 = extractelement <4 x i32> %2251, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract269, i32 %.extract271, i32 %.extract273, i32 %.extract275, ptr addrspace(1) %2243, i1 %1269) #3, !dbg !43
  %.extract277 = extractelement <4 x i32> %2252, i64 0, !dbg !43
  %.extract279 = extractelement <4 x i32> %2252, i64 1, !dbg !43
  %.extract281 = extractelement <4 x i32> %2252, i64 2, !dbg !43
  %.extract283 = extractelement <4 x i32> %2252, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract277, i32 %.extract279, i32 %.extract281, i32 %.extract283, ptr addrspace(1) %2244, i1 %1270) #3, !dbg !43
  %.extract285 = extractelement <4 x i32> %2253, i64 0, !dbg !43
  %.extract287 = extractelement <4 x i32> %2253, i64 1, !dbg !43
  %.extract289 = extractelement <4 x i32> %2253, i64 2, !dbg !43
  %.extract291 = extractelement <4 x i32> %2253, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract285, i32 %.extract287, i32 %.extract289, i32 %.extract291, ptr addrspace(1) %2245, i1 %1271) #3, !dbg !43
  %.extract293 = extractelement <4 x i32> %2254, i64 0, !dbg !43
  %.extract295 = extractelement <4 x i32> %2254, i64 1, !dbg !43
  %.extract297 = extractelement <4 x i32> %2254, i64 2, !dbg !43
  %.extract299 = extractelement <4 x i32> %2254, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract293, i32 %.extract295, i32 %.extract297, i32 %.extract299, ptr addrspace(1) %2246, i1 %1272) #3, !dbg !43
  %2255 = add i32 %1298, 1, !dbg !39
  %2256 = icmp sgt i32 %2255, 2, !dbg !39
  %2257 = select i1 %2256, i32 0, i32 %2255, !dbg !39
  %2258 = or disjoint i64 %indvars.iv365, %45, !dbg !37
  %2259 = or disjoint i64 %2258, %.idx, !dbg !37
  %2260 = or disjoint i64 %2258, %.idx18, !dbg !37
  %2261 = or disjoint i64 %2258, %.idx19, !dbg !37
  %2262 = or disjoint i64 %2258, %.idx20, !dbg !37
  %2263 = or disjoint i64 %2258, %.idx21, !dbg !37
  %2264 = or disjoint i64 %2258, %.idx22, !dbg !37
  %2265 = or disjoint i64 %2258, %.idx23, !dbg !37
  %2266 = or disjoint i64 %2258, %.idx24, !dbg !37
  %2267 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2259, !dbg !37
  %2268 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2260, !dbg !37
  %2269 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2261, !dbg !37
  %2270 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2262, !dbg !37
  %2271 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2263, !dbg !37
  %2272 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2264, !dbg !37
  %2273 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2265, !dbg !37
  %2274 = getelementptr bfloat, ptr addrspace(1) %1213, i64 %2266, !dbg !37
  %.idx138 = shl i32 %2257, 13, !dbg !37
  %2275 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx138, !dbg !37
  %2276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %216, !dbg !37
  %2277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %221, !dbg !37
  %2278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %226, !dbg !37
  %2279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %231, !dbg !37
  %2280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %236, !dbg !37
  %2281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %241, !dbg !37
  %2282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %246, !dbg !37
  %2283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2275, i32 %251, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2276, ptr addrspace(1) %2267, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2277, ptr addrspace(1) %2268, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2278, ptr addrspace(1) %2269, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2279, ptr addrspace(1) %2270, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2280, ptr addrspace(1) %2271, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2281, ptr addrspace(1) %2272, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2282, ptr addrspace(1) %2273, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2283, ptr addrspace(1) %2274, i32 0) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  br i1 %1256, label %1255, label %2284, !dbg !39

2284:                                             ; preds = %1255
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 196, column: 21, scope: !5)
!19 = !DILocation(line: 177, column: 41, scope: !5)
!20 = !DILocation(line: 177, column: 48, scope: !5)
!21 = !DILocation(line: 177, column: 32, scope: !5)
!22 = !DILocation(line: 178, column: 18, scope: !5)
!23 = !DILocation(line: 181, column: 52, scope: !5)
!24 = !DILocation(line: 181, column: 36, scope: !5)
!25 = !DILocation(line: 182, column: 36, scope: !5)
!26 = !DILocation(line: 183, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 184, column: 22, scope: !5)
!29 = !DILocation(line: 185, column: 26, scope: !5)
!30 = !DILocation(line: 186, column: 29, scope: !5)
!31 = !DILocation(line: 186, column: 22, scope: !5)
!32 = !DILocation(line: 189, column: 37, scope: !5)
!33 = !DILocation(line: 190, column: 26, scope: !5)
!34 = !DILocation(line: 190, column: 18, scope: !5)
!35 = !DILocation(line: 193, column: 36, scope: !5)
!36 = !DILocation(line: 194, column: 36, scope: !5)
!37 = !DILocation(line: 195, column: 22, scope: !5)
!38 = !DILocation(line: 198, column: 20, scope: !5)
!39 = !DILocation(line: 192, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
