#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)
module {
  tt.func public @recompute_w_u_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c32_i32 = arith.constant 32 : i32 loc(#loc3)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32_0 : i32 loc(#loc3)
    %c32_i32_1 = arith.constant 32 : i32 loc(#loc4)
    %c32_i32_2 = arith.constant 32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32_2 : i32 loc(#loc4)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc5)
    %5 = arith.extsi %arg7 : i32 to i64 loc(#loc5)
    %6 = arith.muli %4, %5 : i64 loc(#loc5)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc5)
    %7 = arith.cmpi sle, %6, %c2147483647_i64 : i64 loc(#loc5)
    %8 = arith.cmpi sge, %6, %c-2147483648_i64 : i64 loc(#loc5)
    %9 = arith.andi %7, %8 : i1 loc(#loc5)
    %10 = arith.muli %2, %arg7 : i32 loc(#loc5)
    %11 = arith.extsi %2 : i32 to i64 loc(#loc6)
    %12 = arith.extsi %arg7 : i32 to i64 loc(#loc6)
    %13 = arith.muli %11, %12 : i64 loc(#loc6)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc6)
    %14 = arith.cmpi sle, %13, %c2147483647_i64_3 : i64 loc(#loc6)
    %15 = arith.cmpi sge, %13, %c-2147483648_i64_4 : i64 loc(#loc6)
    %16 = arith.andi %14, %15 : i1 loc(#loc6)
    %17 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %18 = arith.extsi %17 : i32 to i64 loc(#loc7)
    %19 = arith.extsi %arg7 : i32 to i64 loc(#loc7)
    %20 = arith.addi %18, %19 : i64 loc(#loc7)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc7)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc7)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_5 : i64 loc(#loc7)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_6 : i64 loc(#loc7)
    %23 = arith.andi %21, %22 : i1 loc(#loc7)
    %24 = arith.addi %17, %arg7 : i32 loc(#loc7)
    %c32_i32_7 = arith.constant 32 : i32 loc(#loc8)
    %c32_i32_8 = arith.constant 32 : i32 loc(#loc8)
    %25 = arith.extsi %10 : i32 to i64 loc(#loc8)
    %26 = arith.extsi %c32_i32_8 : i32 to i64 loc(#loc8)
    %27 = arith.muli %25, %26 : i64 loc(#loc8)
    %c2147483647_i64_9 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_10 = arith.constant -2147483648 : i64 loc(#loc8)
    %28 = arith.cmpi sle, %27, %c2147483647_i64_9 : i64 loc(#loc8)
    %29 = arith.cmpi sge, %27, %c-2147483648_i64_10 : i64 loc(#loc8)
    %30 = arith.andi %28, %29 : i1 loc(#loc8)
    %31 = arith.muli %10, %c32_i32_8 : i32 loc(#loc8)
    %32 = tt.addptr %arg2, %31 : !tt.ptr<bf16>, i32 loc(#loc9)
    %33 = tt.addptr %32, %3 : !tt.ptr<bf16>, i32 loc(#loc10)
    %c64_i32 = arith.constant 64 : i32 loc(#loc11)
    %c64_i32_11 = arith.constant 64 : i32 loc(#loc11)
    %34 = arith.extsi %0 : i32 to i64 loc(#loc11)
    %35 = arith.extsi %c64_i32_11 : i32 to i64 loc(#loc11)
    %36 = arith.muli %34, %35 : i64 loc(#loc11)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc11)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc11)
    %37 = arith.cmpi sle, %36, %c2147483647_i64_12 : i64 loc(#loc11)
    %38 = arith.cmpi sge, %36, %c-2147483648_i64_13 : i64 loc(#loc11)
    %39 = arith.andi %37, %38 : i1 loc(#loc11)
    %40 = arith.muli %0, %c64_i32_11 : i32 loc(#loc11)
    %41 = arith.extsi %arg7 : i32 to i64 loc(#loc12)
    %c32_i64 = arith.constant 32 : i64 loc(#loc12)
    %42 = tt.make_tensor_ptr %33, [%41], [%c32_i64], [%40] {order = array<i32: 0>} : <tensor<64xbf16>> loc(#loc12)
    %43 = tt.load %42 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xbf16>> loc(#loc13)
    %c32_i32_14 = arith.constant 32 : i32 loc(#loc14)
    %c32_i32_15 = arith.constant 32 : i32 loc(#loc14)
    %44 = arith.extsi %10 : i32 to i64 loc(#loc14)
    %45 = arith.extsi %c32_i32_15 : i32 to i64 loc(#loc14)
    %46 = arith.muli %44, %45 : i64 loc(#loc14)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc14)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc14)
    %47 = arith.cmpi sle, %46, %c2147483647_i64_16 : i64 loc(#loc14)
    %48 = arith.cmpi sge, %46, %c-2147483648_i64_17 : i64 loc(#loc14)
    %49 = arith.andi %47, %48 : i1 loc(#loc14)
    %50 = arith.muli %10, %c32_i32_15 : i32 loc(#loc14)
    %51 = arith.extsi %50 : i32 to i64 loc(#loc15)
    %52 = arith.extsi %3 : i32 to i64 loc(#loc15)
    %53 = arith.addi %51, %52 : i64 loc(#loc15)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc15)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc15)
    %54 = arith.cmpi sle, %53, %c2147483647_i64_18 : i64 loc(#loc15)
    %55 = arith.cmpi sge, %53, %c-2147483648_i64_19 : i64 loc(#loc15)
    %56 = arith.andi %54, %55 : i1 loc(#loc15)
    %57 = arith.addi %50, %3 : i32 loc(#loc15)
    %c64_i32_20 = arith.constant 64 : i32 loc(#loc16)
    %c64_i32_21 = arith.constant 64 : i32 loc(#loc16)
    %58 = arith.extsi %57 : i32 to i64 loc(#loc16)
    %59 = arith.extsi %c64_i32_21 : i32 to i64 loc(#loc16)
    %60 = arith.muli %58, %59 : i64 loc(#loc16)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc16)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc16)
    %61 = arith.cmpi sle, %60, %c2147483647_i64_22 : i64 loc(#loc16)
    %62 = arith.cmpi sge, %60, %c-2147483648_i64_23 : i64 loc(#loc16)
    %63 = arith.andi %61, %62 : i1 loc(#loc16)
    %64 = arith.muli %57, %c64_i32_21 : i32 loc(#loc16)
    %65 = tt.addptr %arg5, %64 : !tt.ptr<bf16>, i32 loc(#loc17)
    %c64_i32_24 = arith.constant 64 : i32 loc(#loc18)
    %c64_i32_25 = arith.constant 64 : i32 loc(#loc18)
    %66 = arith.extsi %0 : i32 to i64 loc(#loc18)
    %67 = arith.extsi %c64_i32_25 : i32 to i64 loc(#loc18)
    %68 = arith.muli %66, %67 : i64 loc(#loc18)
    %c2147483647_i64_26 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_27 = arith.constant -2147483648 : i64 loc(#loc18)
    %69 = arith.cmpi sle, %68, %c2147483647_i64_26 : i64 loc(#loc18)
    %70 = arith.cmpi sge, %68, %c-2147483648_i64_27 : i64 loc(#loc18)
    %71 = arith.andi %69, %70 : i1 loc(#loc18)
    %72 = arith.muli %0, %c64_i32_25 : i32 loc(#loc18)
    %73 = arith.extsi %arg7 : i32 to i64 loc(#loc19)
    %c64_i64 = arith.constant 64 : i64 loc(#loc19)
    %c2048_i64 = arith.constant 2048 : i64 loc(#loc19)
    %c1_i64 = arith.constant 1 : i64 loc(#loc19)
    %c0_i32 = arith.constant 0 : i32 loc(#loc19)
    %74 = tt.make_tensor_ptr %65, [%73, %c64_i64], [%c2048_i64, %c1_i64], [%72, %c0_i32] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc19)
    %75 = tt.load %74 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc20)
    %76 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_64_"() : () -> i32 loc(#loc21)
    %77 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_64_"() : () -> i32 loc(#loc21)
    %c0_i32_28 = arith.constant 0 : i32 loc(#loc22)
    %c1_i32 = arith.constant 1 : i32 loc(#loc22)
    %78 = arith.bitcast %c0_i32_28 : i32 to i32 loc(#loc22)
    %79 = arith.bitcast %77 : i32 to i32 loc(#loc22)
    %80 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc22)
    %81 = ub.poison : i32 loc(#loc22)
    scf.for %arg8 = %78 to %79 step %80  : i32 {
      %c32_i32_42 = arith.constant 32 : i32 loc(#loc23)
      %c32_i32_43 = arith.constant 32 : i32 loc(#loc23)
      %114 = arith.extsi %10 : i32 to i64 loc(#loc23)
      %115 = arith.extsi %c32_i32_43 : i32 to i64 loc(#loc23)
      %116 = arith.muli %114, %115 : i64 loc(#loc23)
      %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc23)
      %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc23)
      %117 = arith.cmpi sle, %116, %c2147483647_i64_44 : i64 loc(#loc23)
      %118 = arith.cmpi sge, %116, %c-2147483648_i64_45 : i64 loc(#loc23)
      %119 = arith.andi %117, %118 : i1 loc(#loc23)
      %120 = arith.muli %10, %c32_i32_43 : i32 loc(#loc23)
      %121 = arith.extsi %120 : i32 to i64 loc(#loc24)
      %122 = arith.extsi %3 : i32 to i64 loc(#loc24)
      %123 = arith.addi %121, %122 : i64 loc(#loc24)
      %c2147483647_i64_46 = arith.constant 2147483647 : i64 loc(#loc24)
      %c-2147483648_i64_47 = arith.constant -2147483648 : i64 loc(#loc24)
      %124 = arith.cmpi sle, %123, %c2147483647_i64_46 : i64 loc(#loc24)
      %125 = arith.cmpi sge, %123, %c-2147483648_i64_47 : i64 loc(#loc24)
      %126 = arith.andi %124, %125 : i1 loc(#loc24)
      %127 = arith.addi %120, %3 : i32 loc(#loc24)
      %c128_i32 = arith.constant 128 : i32 loc(#loc25)
      %c128_i32_48 = arith.constant 128 : i32 loc(#loc25)
      %128 = arith.extsi %127 : i32 to i64 loc(#loc25)
      %129 = arith.extsi %c128_i32_48 : i32 to i64 loc(#loc25)
      %130 = arith.muli %128, %129 : i64 loc(#loc25)
      %c2147483647_i64_49 = arith.constant 2147483647 : i64 loc(#loc25)
      %c-2147483648_i64_50 = arith.constant -2147483648 : i64 loc(#loc25)
      %131 = arith.cmpi sle, %130, %c2147483647_i64_49 : i64 loc(#loc25)
      %132 = arith.cmpi sge, %130, %c-2147483648_i64_50 : i64 loc(#loc25)
      %133 = arith.andi %131, %132 : i1 loc(#loc25)
      %134 = arith.muli %127, %c128_i32_48 : i32 loc(#loc25)
      %135 = tt.addptr %arg1, %134 : !tt.ptr<bf16>, i32 loc(#loc26)
      %c64_i32_51 = arith.constant 64 : i32 loc(#loc27)
      %c64_i32_52 = arith.constant 64 : i32 loc(#loc27)
      %136 = arith.extsi %0 : i32 to i64 loc(#loc27)
      %137 = arith.extsi %c64_i32_52 : i32 to i64 loc(#loc27)
      %138 = arith.muli %136, %137 : i64 loc(#loc27)
      %c2147483647_i64_53 = arith.constant 2147483647 : i64 loc(#loc27)
      %c-2147483648_i64_54 = arith.constant -2147483648 : i64 loc(#loc27)
      %139 = arith.cmpi sle, %138, %c2147483647_i64_53 : i64 loc(#loc27)
      %140 = arith.cmpi sge, %138, %c-2147483648_i64_54 : i64 loc(#loc27)
      %141 = arith.andi %139, %140 : i1 loc(#loc27)
      %142 = arith.muli %0, %c64_i32_52 : i32 loc(#loc27)
      %c64_i32_55 = arith.constant 64 : i32 loc(#loc28)
      %c64_i32_56 = arith.constant 64 : i32 loc(#loc28)
      %143 = arith.extsi %arg8 : i32 to i64 loc(#loc28)
      %144 = arith.extsi %c64_i32_56 : i32 to i64 loc(#loc28)
      %145 = arith.muli %143, %144 : i64 loc(#loc28)
      %c2147483647_i64_57 = arith.constant 2147483647 : i64 loc(#loc28)
      %c-2147483648_i64_58 = arith.constant -2147483648 : i64 loc(#loc28)
      %146 = arith.cmpi sle, %145, %c2147483647_i64_57 : i64 loc(#loc28)
      %147 = arith.cmpi sge, %145, %c-2147483648_i64_58 : i64 loc(#loc28)
      %148 = arith.andi %146, %147 : i1 loc(#loc28)
      %149 = arith.muli %arg8, %c64_i32_56 : i32 loc(#loc28)
      %150 = arith.extsi %arg7 : i32 to i64 loc(#loc29)
      %c128_i64 = arith.constant 128 : i64 loc(#loc29)
      %c4096_i64 = arith.constant 4096 : i64 loc(#loc29)
      %c1_i64_59 = arith.constant 1 : i64 loc(#loc29)
      %151 = tt.make_tensor_ptr %135, [%150, %c128_i64], [%c4096_i64, %c1_i64_59], [%142, %149] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc29)
      %c32_i32_60 = arith.constant 32 : i32 loc(#loc30)
      %c32_i32_61 = arith.constant 32 : i32 loc(#loc30)
      %152 = arith.extsi %10 : i32 to i64 loc(#loc30)
      %153 = arith.extsi %c32_i32_61 : i32 to i64 loc(#loc30)
      %154 = arith.muli %152, %153 : i64 loc(#loc30)
      %c2147483647_i64_62 = arith.constant 2147483647 : i64 loc(#loc30)
      %c-2147483648_i64_63 = arith.constant -2147483648 : i64 loc(#loc30)
      %155 = arith.cmpi sle, %154, %c2147483647_i64_62 : i64 loc(#loc30)
      %156 = arith.cmpi sge, %154, %c-2147483648_i64_63 : i64 loc(#loc30)
      %157 = arith.andi %155, %156 : i1 loc(#loc30)
      %158 = arith.muli %10, %c32_i32_61 : i32 loc(#loc30)
      %159 = arith.extsi %158 : i32 to i64 loc(#loc31)
      %160 = arith.extsi %3 : i32 to i64 loc(#loc31)
      %161 = arith.addi %159, %160 : i64 loc(#loc31)
      %c2147483647_i64_64 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_65 = arith.constant -2147483648 : i64 loc(#loc31)
      %162 = arith.cmpi sle, %161, %c2147483647_i64_64 : i64 loc(#loc31)
      %163 = arith.cmpi sge, %161, %c-2147483648_i64_65 : i64 loc(#loc31)
      %164 = arith.andi %162, %163 : i1 loc(#loc31)
      %165 = arith.addi %158, %3 : i32 loc(#loc31)
      %c128_i32_66 = arith.constant 128 : i32 loc(#loc32)
      %c128_i32_67 = arith.constant 128 : i32 loc(#loc32)
      %166 = arith.extsi %165 : i32 to i64 loc(#loc32)
      %167 = arith.extsi %c128_i32_67 : i32 to i64 loc(#loc32)
      %168 = arith.muli %166, %167 : i64 loc(#loc32)
      %c2147483647_i64_68 = arith.constant 2147483647 : i64 loc(#loc32)
      %c-2147483648_i64_69 = arith.constant -2147483648 : i64 loc(#loc32)
      %169 = arith.cmpi sle, %168, %c2147483647_i64_68 : i64 loc(#loc32)
      %170 = arith.cmpi sge, %168, %c-2147483648_i64_69 : i64 loc(#loc32)
      %171 = arith.andi %169, %170 : i1 loc(#loc32)
      %172 = arith.muli %165, %c128_i32_67 : i32 loc(#loc32)
      %173 = tt.addptr %arg4, %172 : !tt.ptr<bf16>, i32 loc(#loc33)
      %c64_i32_70 = arith.constant 64 : i32 loc(#loc34)
      %c64_i32_71 = arith.constant 64 : i32 loc(#loc34)
      %174 = arith.extsi %0 : i32 to i64 loc(#loc34)
      %175 = arith.extsi %c64_i32_71 : i32 to i64 loc(#loc34)
      %176 = arith.muli %174, %175 : i64 loc(#loc34)
      %c2147483647_i64_72 = arith.constant 2147483647 : i64 loc(#loc34)
      %c-2147483648_i64_73 = arith.constant -2147483648 : i64 loc(#loc34)
      %177 = arith.cmpi sle, %176, %c2147483647_i64_72 : i64 loc(#loc34)
      %178 = arith.cmpi sge, %176, %c-2147483648_i64_73 : i64 loc(#loc34)
      %179 = arith.andi %177, %178 : i1 loc(#loc34)
      %180 = arith.muli %0, %c64_i32_71 : i32 loc(#loc34)
      %c64_i32_74 = arith.constant 64 : i32 loc(#loc35)
      %c64_i32_75 = arith.constant 64 : i32 loc(#loc35)
      %181 = arith.extsi %arg8 : i32 to i64 loc(#loc35)
      %182 = arith.extsi %c64_i32_75 : i32 to i64 loc(#loc35)
      %183 = arith.muli %181, %182 : i64 loc(#loc35)
      %c2147483647_i64_76 = arith.constant 2147483647 : i64 loc(#loc35)
      %c-2147483648_i64_77 = arith.constant -2147483648 : i64 loc(#loc35)
      %184 = arith.cmpi sle, %183, %c2147483647_i64_76 : i64 loc(#loc35)
      %185 = arith.cmpi sge, %183, %c-2147483648_i64_77 : i64 loc(#loc35)
      %186 = arith.andi %184, %185 : i1 loc(#loc35)
      %187 = arith.muli %arg8, %c64_i32_75 : i32 loc(#loc35)
      %188 = arith.extsi %arg7 : i32 to i64 loc(#loc36)
      %c128_i64_78 = arith.constant 128 : i64 loc(#loc36)
      %c4096_i64_79 = arith.constant 4096 : i64 loc(#loc36)
      %c1_i64_80 = arith.constant 1 : i64 loc(#loc36)
      %189 = tt.make_tensor_ptr %173, [%188, %c128_i64_78], [%c4096_i64_79, %c1_i64_80], [%180, %187] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc36)
      %190 = tt.load %151 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc37)
      %191 = tt.expand_dims %43 {axis = 1 : i32} : tensor<64xbf16> -> tensor<64x1xbf16> loc(#loc38)
      %192 = tt.broadcast %191 : tensor<64x1xbf16> -> tensor<64x64xbf16> loc(#loc39)
      %193 = arith.mulf %190, %192 : tensor<64x64xbf16> loc(#loc39)
      %cst = arith.constant 0.000000e+00 : f32 loc(#loc40)
      %cst_81 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc40)
      %194 = tt.dot %75, %193, %cst_81 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc40)
      %195 = arith.truncf %194 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc41)
      tt.store %189, %195 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc42)
    } loc(#loc22)
    %c32_i32_29 = arith.constant 32 : i32 loc(#loc43)
    %c32_i32_30 = arith.constant 32 : i32 loc(#loc43)
    %82 = arith.extsi %10 : i32 to i64 loc(#loc43)
    %83 = arith.extsi %c32_i32_30 : i32 to i64 loc(#loc43)
    %84 = arith.muli %82, %83 : i64 loc(#loc43)
    %c2147483647_i64_31 = arith.constant 2147483647 : i64 loc(#loc43)
    %c-2147483648_i64_32 = arith.constant -2147483648 : i64 loc(#loc43)
    %85 = arith.cmpi sle, %84, %c2147483647_i64_31 : i64 loc(#loc43)
    %86 = arith.cmpi sge, %84, %c-2147483648_i64_32 : i64 loc(#loc43)
    %87 = arith.andi %85, %86 : i1 loc(#loc43)
    %88 = arith.muli %10, %c32_i32_30 : i32 loc(#loc43)
    %89 = arith.extsi %88 : i32 to i64 loc(#loc44)
    %90 = arith.extsi %3 : i32 to i64 loc(#loc44)
    %91 = arith.addi %89, %90 : i64 loc(#loc44)
    %c2147483647_i64_33 = arith.constant 2147483647 : i64 loc(#loc44)
    %c-2147483648_i64_34 = arith.constant -2147483648 : i64 loc(#loc44)
    %92 = arith.cmpi sle, %91, %c2147483647_i64_33 : i64 loc(#loc44)
    %93 = arith.cmpi sge, %91, %c-2147483648_i64_34 : i64 loc(#loc44)
    %94 = arith.andi %92, %93 : i1 loc(#loc44)
    %95 = arith.addi %88, %3 : i32 loc(#loc44)
    %96 = tt.addptr %arg6, %95 : !tt.ptr<f32>, i32 loc(#loc45)
    %c64_i32_35 = arith.constant 64 : i32 loc(#loc46)
    %c64_i32_36 = arith.constant 64 : i32 loc(#loc46)
    %97 = arith.extsi %0 : i32 to i64 loc(#loc46)
    %98 = arith.extsi %c64_i32_36 : i32 to i64 loc(#loc46)
    %99 = arith.muli %97, %98 : i64 loc(#loc46)
    %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc46)
    %100 = arith.cmpi sle, %99, %c2147483647_i64_37 : i64 loc(#loc46)
    %101 = arith.cmpi sge, %99, %c-2147483648_i64_38 : i64 loc(#loc46)
    %102 = arith.andi %100, %101 : i1 loc(#loc46)
    %103 = arith.muli %0, %c64_i32_36 : i32 loc(#loc46)
    %104 = arith.extsi %arg7 : i32 to i64 loc(#loc47)
    %c32_i64_39 = arith.constant 32 : i64 loc(#loc47)
    %105 = tt.make_tensor_ptr %96, [%104], [%c32_i64_39], [%103] {order = array<i32: 0>} : <tensor<64xf32>> loc(#loc47)
    %106 = tt.load %105 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xf32>> loc(#loc48)
    %107 = math.exp %106 : tensor<64xf32> loc(#loc49)
    %108 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_64_"() : () -> i32 loc(#loc50)
    %109 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_64_"() : () -> i32 loc(#loc50)
    %c0_i32_40 = arith.constant 0 : i32 loc(#loc51)
    %c1_i32_41 = arith.constant 1 : i32 loc(#loc51)
    %110 = arith.bitcast %c0_i32_40 : i32 to i32 loc(#loc51)
    %111 = arith.bitcast %109 : i32 to i32 loc(#loc51)
    %112 = arith.bitcast %c1_i32_41 : i32 to i32 loc(#loc51)
    %113 = ub.poison : i32 loc(#loc51)
    scf.for %arg8 = %110 to %111 step %112  : i32 {
      %c32_i32_42 = arith.constant 32 : i32 loc(#loc52)
      %c32_i32_43 = arith.constant 32 : i32 loc(#loc52)
      %114 = arith.extsi %10 : i32 to i64 loc(#loc52)
      %115 = arith.extsi %c32_i32_43 : i32 to i64 loc(#loc52)
      %116 = arith.muli %114, %115 : i64 loc(#loc52)
      %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc52)
      %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc52)
      %117 = arith.cmpi sle, %116, %c2147483647_i64_44 : i64 loc(#loc52)
      %118 = arith.cmpi sge, %116, %c-2147483648_i64_45 : i64 loc(#loc52)
      %119 = arith.andi %117, %118 : i1 loc(#loc52)
      %120 = arith.muli %10, %c32_i32_43 : i32 loc(#loc52)
      %121 = arith.extsi %120 : i32 to i64 loc(#loc53)
      %122 = arith.extsi %3 : i32 to i64 loc(#loc53)
      %123 = arith.addi %121, %122 : i64 loc(#loc53)
      %c2147483647_i64_46 = arith.constant 2147483647 : i64 loc(#loc53)
      %c-2147483648_i64_47 = arith.constant -2147483648 : i64 loc(#loc53)
      %124 = arith.cmpi sle, %123, %c2147483647_i64_46 : i64 loc(#loc53)
      %125 = arith.cmpi sge, %123, %c-2147483648_i64_47 : i64 loc(#loc53)
      %126 = arith.andi %124, %125 : i1 loc(#loc53)
      %127 = arith.addi %120, %3 : i32 loc(#loc53)
      %c128_i32 = arith.constant 128 : i32 loc(#loc54)
      %c128_i32_48 = arith.constant 128 : i32 loc(#loc54)
      %128 = arith.extsi %127 : i32 to i64 loc(#loc54)
      %129 = arith.extsi %c128_i32_48 : i32 to i64 loc(#loc54)
      %130 = arith.muli %128, %129 : i64 loc(#loc54)
      %c2147483647_i64_49 = arith.constant 2147483647 : i64 loc(#loc54)
      %c-2147483648_i64_50 = arith.constant -2147483648 : i64 loc(#loc54)
      %131 = arith.cmpi sle, %130, %c2147483647_i64_49 : i64 loc(#loc54)
      %132 = arith.cmpi sge, %130, %c-2147483648_i64_50 : i64 loc(#loc54)
      %133 = arith.andi %131, %132 : i1 loc(#loc54)
      %134 = arith.muli %127, %c128_i32_48 : i32 loc(#loc54)
      %135 = tt.addptr %arg0, %134 : !tt.ptr<bf16>, i32 loc(#loc55)
      %c64_i32_51 = arith.constant 64 : i32 loc(#loc56)
      %c64_i32_52 = arith.constant 64 : i32 loc(#loc56)
      %136 = arith.extsi %0 : i32 to i64 loc(#loc56)
      %137 = arith.extsi %c64_i32_52 : i32 to i64 loc(#loc56)
      %138 = arith.muli %136, %137 : i64 loc(#loc56)
      %c2147483647_i64_53 = arith.constant 2147483647 : i64 loc(#loc56)
      %c-2147483648_i64_54 = arith.constant -2147483648 : i64 loc(#loc56)
      %139 = arith.cmpi sle, %138, %c2147483647_i64_53 : i64 loc(#loc56)
      %140 = arith.cmpi sge, %138, %c-2147483648_i64_54 : i64 loc(#loc56)
      %141 = arith.andi %139, %140 : i1 loc(#loc56)
      %142 = arith.muli %0, %c64_i32_52 : i32 loc(#loc56)
      %c64_i32_55 = arith.constant 64 : i32 loc(#loc57)
      %c64_i32_56 = arith.constant 64 : i32 loc(#loc57)
      %143 = arith.extsi %arg8 : i32 to i64 loc(#loc57)
      %144 = arith.extsi %c64_i32_56 : i32 to i64 loc(#loc57)
      %145 = arith.muli %143, %144 : i64 loc(#loc57)
      %c2147483647_i64_57 = arith.constant 2147483647 : i64 loc(#loc57)
      %c-2147483648_i64_58 = arith.constant -2147483648 : i64 loc(#loc57)
      %146 = arith.cmpi sle, %145, %c2147483647_i64_57 : i64 loc(#loc57)
      %147 = arith.cmpi sge, %145, %c-2147483648_i64_58 : i64 loc(#loc57)
      %148 = arith.andi %146, %147 : i1 loc(#loc57)
      %149 = arith.muli %arg8, %c64_i32_56 : i32 loc(#loc57)
      %150 = arith.extsi %arg7 : i32 to i64 loc(#loc58)
      %c128_i64 = arith.constant 128 : i64 loc(#loc58)
      %c4096_i64 = arith.constant 4096 : i64 loc(#loc58)
      %c1_i64_59 = arith.constant 1 : i64 loc(#loc58)
      %151 = tt.make_tensor_ptr %135, [%150, %c128_i64], [%c4096_i64, %c1_i64_59], [%142, %149] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc58)
      %c32_i32_60 = arith.constant 32 : i32 loc(#loc59)
      %c32_i32_61 = arith.constant 32 : i32 loc(#loc59)
      %152 = arith.extsi %10 : i32 to i64 loc(#loc59)
      %153 = arith.extsi %c32_i32_61 : i32 to i64 loc(#loc59)
      %154 = arith.muli %152, %153 : i64 loc(#loc59)
      %c2147483647_i64_62 = arith.constant 2147483647 : i64 loc(#loc59)
      %c-2147483648_i64_63 = arith.constant -2147483648 : i64 loc(#loc59)
      %155 = arith.cmpi sle, %154, %c2147483647_i64_62 : i64 loc(#loc59)
      %156 = arith.cmpi sge, %154, %c-2147483648_i64_63 : i64 loc(#loc59)
      %157 = arith.andi %155, %156 : i1 loc(#loc59)
      %158 = arith.muli %10, %c32_i32_61 : i32 loc(#loc59)
      %159 = arith.extsi %158 : i32 to i64 loc(#loc60)
      %160 = arith.extsi %3 : i32 to i64 loc(#loc60)
      %161 = arith.addi %159, %160 : i64 loc(#loc60)
      %c2147483647_i64_64 = arith.constant 2147483647 : i64 loc(#loc60)
      %c-2147483648_i64_65 = arith.constant -2147483648 : i64 loc(#loc60)
      %162 = arith.cmpi sle, %161, %c2147483647_i64_64 : i64 loc(#loc60)
      %163 = arith.cmpi sge, %161, %c-2147483648_i64_65 : i64 loc(#loc60)
      %164 = arith.andi %162, %163 : i1 loc(#loc60)
      %165 = arith.addi %158, %3 : i32 loc(#loc60)
      %c128_i32_66 = arith.constant 128 : i32 loc(#loc61)
      %c128_i32_67 = arith.constant 128 : i32 loc(#loc61)
      %166 = arith.extsi %165 : i32 to i64 loc(#loc61)
      %167 = arith.extsi %c128_i32_67 : i32 to i64 loc(#loc61)
      %168 = arith.muli %166, %167 : i64 loc(#loc61)
      %c2147483647_i64_68 = arith.constant 2147483647 : i64 loc(#loc61)
      %c-2147483648_i64_69 = arith.constant -2147483648 : i64 loc(#loc61)
      %169 = arith.cmpi sle, %168, %c2147483647_i64_68 : i64 loc(#loc61)
      %170 = arith.cmpi sge, %168, %c-2147483648_i64_69 : i64 loc(#loc61)
      %171 = arith.andi %169, %170 : i1 loc(#loc61)
      %172 = arith.muli %165, %c128_i32_67 : i32 loc(#loc61)
      %173 = tt.addptr %arg3, %172 : !tt.ptr<bf16>, i32 loc(#loc62)
      %c64_i32_70 = arith.constant 64 : i32 loc(#loc63)
      %c64_i32_71 = arith.constant 64 : i32 loc(#loc63)
      %174 = arith.extsi %0 : i32 to i64 loc(#loc63)
      %175 = arith.extsi %c64_i32_71 : i32 to i64 loc(#loc63)
      %176 = arith.muli %174, %175 : i64 loc(#loc63)
      %c2147483647_i64_72 = arith.constant 2147483647 : i64 loc(#loc63)
      %c-2147483648_i64_73 = arith.constant -2147483648 : i64 loc(#loc63)
      %177 = arith.cmpi sle, %176, %c2147483647_i64_72 : i64 loc(#loc63)
      %178 = arith.cmpi sge, %176, %c-2147483648_i64_73 : i64 loc(#loc63)
      %179 = arith.andi %177, %178 : i1 loc(#loc63)
      %180 = arith.muli %0, %c64_i32_71 : i32 loc(#loc63)
      %c64_i32_74 = arith.constant 64 : i32 loc(#loc64)
      %c64_i32_75 = arith.constant 64 : i32 loc(#loc64)
      %181 = arith.extsi %arg8 : i32 to i64 loc(#loc64)
      %182 = arith.extsi %c64_i32_75 : i32 to i64 loc(#loc64)
      %183 = arith.muli %181, %182 : i64 loc(#loc64)
      %c2147483647_i64_76 = arith.constant 2147483647 : i64 loc(#loc64)
      %c-2147483648_i64_77 = arith.constant -2147483648 : i64 loc(#loc64)
      %184 = arith.cmpi sle, %183, %c2147483647_i64_76 : i64 loc(#loc64)
      %185 = arith.cmpi sge, %183, %c-2147483648_i64_77 : i64 loc(#loc64)
      %186 = arith.andi %184, %185 : i1 loc(#loc64)
      %187 = arith.muli %arg8, %c64_i32_75 : i32 loc(#loc64)
      %188 = arith.extsi %arg7 : i32 to i64 loc(#loc65)
      %c128_i64_78 = arith.constant 128 : i64 loc(#loc65)
      %c4096_i64_79 = arith.constant 4096 : i64 loc(#loc65)
      %c1_i64_80 = arith.constant 1 : i64 loc(#loc65)
      %189 = tt.make_tensor_ptr %173, [%188, %c128_i64_78], [%c4096_i64_79, %c1_i64_80], [%180, %187] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc65)
      %190 = tt.load %151 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc66)
      %191 = tt.expand_dims %43 {axis = 1 : i32} : tensor<64xbf16> -> tensor<64x1xbf16> loc(#loc67)
      %192 = tt.broadcast %191 : tensor<64x1xbf16> -> tensor<64x64xbf16> loc(#loc68)
      %193 = arith.mulf %190, %192 : tensor<64x64xbf16> loc(#loc68)
      %194 = tt.expand_dims %107 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc69)
      %195 = arith.extf %193 : tensor<64x64xbf16> to tensor<64x64xf32> loc(#loc70)
      %196 = tt.broadcast %194 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc70)
      %197 = arith.mulf %195, %196 : tensor<64x64xf32> loc(#loc70)
      %198 = arith.truncf %197 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc71)
      %cst = arith.constant 0.000000e+00 : f32 loc(#loc72)
      %cst_81 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc72)
      %199 = tt.dot %75, %198, %cst_81, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc72)
      %200 = arith.truncf %199 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc73)
      tt.store %189, %200 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc74)
    } loc(#loc51)
    tt.return loc(#loc75)
  } loc(#loc)
  tt.func private @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_64_"() -> i32 attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc77)
    tt.return %c2_i32 : i32 loc(#loc77)
  ^bb1:  // no predecessors
    %0 = ub.poison : i32 loc(#loc78)
    tt.return %0 : i32 loc(#loc78)
  } loc(#loc76)
} loc(#loc)
#loc1 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:30)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:48)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:23)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:33)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:25)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:34)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:38)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:42)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:38)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:46)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:70)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:83)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":175:21)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:37)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:41)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:48)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:32)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:79)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:97)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":178:18)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":180:32)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":180:21)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:41)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:45)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:52)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:36)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:80)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:90)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:105)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:41)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:45)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:52)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:36)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:80)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:90)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:105)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":183:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:29)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:22)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":185:26)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:29)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:22)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:41)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:45)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:37)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:70)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:83)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:26)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:18)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:32)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:21)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:41)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:45)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:52)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:36)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:80)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:90)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:105)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:41)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:45)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:52)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:36)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:80)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:90)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:105)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":195:22)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:28)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:21)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:24)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:20)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:34)
#loc72 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:26)
#loc73 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:29)
#loc74 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:22)
#loc75 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:4)
#loc76 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)
#loc77 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:11)
#loc78 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:4)
