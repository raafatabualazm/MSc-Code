#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @recompute_w_u_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2048> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64xi64, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<32> : tensor<64xi64, #blocked1> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_9 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_10 = arith.constant dense<false> : tensor<64x64xi1, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.muli %4, %c32_i32 : i32 loc(#loc7)
    %6 = tt.addptr %arg2, %5 : !tt.ptr<bf16>, i32 loc(#loc8)
    %7 = tt.addptr %6, %3 : !tt.ptr<bf16>, i32 loc(#loc9)
    %8 = arith.muli %0, %c64_i32 : i32 loc(#loc10)
    %9 = arith.extsi %arg7 : i32 to i64 loc(#loc11)
    %10 = arith.extsi %8 : i32 to i64 loc(#loc11)
    %11 = tt.splat %7 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>, #blocked1> loc(#loc12)
    %12 = tt.splat %10 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %13 = tt.splat %10 : i64 -> tensor<64xi64, #blocked1> loc(#loc12)
    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked1> loc(#loc12)
    %17 = arith.extsi %14 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %18 = arith.extsi %15 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %19 = arith.extsi %16 : tensor<64xi32, #blocked1> to tensor<64xi64, #blocked1> loc(#loc12)
    %20 = arith.addi %12, %17 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %21 = arith.addi %13, %19 : tensor<64xi64, #blocked1> loc(#loc12)
    %22 = arith.muli %21, %cst_6 : tensor<64xi64, #blocked1> loc(#loc12)
    %23 = tt.addptr %11, %22 : tensor<64x!tt.ptr<bf16>, #blocked1>, tensor<64xi64, #blocked1> loc(#loc12)
    %24 = arith.cmpi sge, %21, %cst_5 : tensor<64xi64, #blocked1> loc(#loc12)
    %25 = tt.splat %9 : i64 -> tensor<64xi64, #blocked1> loc(#loc12)
    %26 = arith.cmpi slt, %21, %25 : tensor<64xi64, #blocked1> loc(#loc12)
    %27 = arith.andi %24, %26 : tensor<64xi1, #blocked1> loc(#loc12)
    %28 = tt.load %23, %27 : tensor<64x!tt.ptr<bf16>, #blocked1> loc(#loc12)
    %29 = ttg.convert_layout %28 : tensor<64xbf16, #blocked1> -> tensor<64xbf16, #ttg.slice<{dim = 1, parent = #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>}>> loc(#loc13)
    %30 = arith.addi %5, %3 : i32 loc(#loc14)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc15)
    %32 = tt.addptr %arg5, %31 : !tt.ptr<bf16>, i32 loc(#loc16)
    %33 = tt.splat %32 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %34 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc17)
    %35 = arith.muli %34, %cst : tensor<64x1xi64, #blocked> loc(#loc17)
    %36 = tt.broadcast %35 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc17)
    %37 = tt.expand_dims %18 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc17)
    %38 = tt.broadcast %37 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc17)
    %39 = arith.addi %36, %38 : tensor<64x64xi64, #blocked> loc(#loc17)
    %40 = tt.addptr %33, %39 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc17)
    %41 = arith.cmpi sge, %34, %cst_0 : tensor<64x1xi64, #blocked> loc(#loc17)
    %42 = tt.splat %9 : i64 -> tensor<64x1xi64, #blocked> loc(#loc17)
    %43 = arith.cmpi slt, %34, %42 : tensor<64x1xi64, #blocked> loc(#loc17)
    %44 = arith.andi %41, %43 : tensor<64x1xi1, #blocked> loc(#loc17)
    %45 = tt.broadcast %44 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc17)
    %46 = arith.cmpi sge, %37, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc17)
    %47 = arith.cmpi slt, %37, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc17)
    %48 = arith.andi %46, %47 : tensor<1x64xi1, #blocked> loc(#loc17)
    %49 = tt.broadcast %48 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc17)
    %50 = arith.andi %45, %49 : tensor<64x64xi1, #blocked> loc(#loc17)
    %51 = tt.load %40, %50 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %52 = ttg.local_alloc %51 : (tensor<64x64xbf16, #blocked>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc17)
    %53 = arith.muli %30, %c128_i32 : i32 loc(#loc18)
    %54 = tt.addptr %arg1, %53 : !tt.ptr<bf16>, i32 loc(#loc19)
    %55 = tt.addptr %arg4, %53 : !tt.ptr<bf16>, i32 loc(#loc20)
    %56 = tt.splat %54 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc21)
    %57 = arith.muli %34, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc21)
    %58 = tt.broadcast %57 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc21)
    %59 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xbf16, #ttg.slice<{dim = 1, parent = #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>}>> -> tensor<64x1xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc22)
    %60 = tt.broadcast %59 : tensor<64x1xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
    %61 = tt.splat %55 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %62 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc21)
    %63 = arith.addi %58, %38 : tensor<64x64xi64, #blocked> loc(#loc21)
    %64 = tt.addptr %56, %63 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc21)
    %65 = arith.cmpi slt, %37, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc21)
    %66 = arith.andi %46, %65 : tensor<1x64xi1, #blocked> loc(#loc21)
    %67 = tt.broadcast %66 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc21)
    %68 = arith.andi %45, %67 : tensor<64x64xi1, #blocked> loc(#loc21)
    %69 = ttg.memdesc_subview %62[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %70 = ttg.async_copy_global_to_local %64, %69 mask %68 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %71 = ttg.async_commit_group %70 loc(#loc21)
    %72 = arith.addi %18, %cst_8 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %73 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc21)
    %74 = tt.broadcast %73 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc21)
    %75 = arith.addi %58, %74 : tensor<64x64xi64, #blocked> loc(#loc21)
    %76 = tt.addptr %56, %75 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc21)
    %77 = arith.cmpi sge, %73, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc21)
    %78 = arith.cmpi slt, %73, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc21)
    %79 = arith.andi %77, %78 : tensor<1x64xi1, #blocked> loc(#loc21)
    %80 = tt.broadcast %79 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc21)
    %81 = arith.andi %45, %80 : tensor<64x64xi1, #blocked> loc(#loc21)
    %82 = ttg.memdesc_subview %62[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %83 = ttg.async_copy_global_to_local %76, %82 mask %81 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %84 = ttg.async_commit_group %83 loc(#loc21)
    %85 = arith.addi %18, %cst_9 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %86 = tt.expand_dims %85 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc21)
    %87 = tt.broadcast %86 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc21)
    %88 = arith.addi %58, %87 : tensor<64x64xi64, #blocked> loc(#loc21)
    %89 = tt.addptr %56, %88 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc21)
    %90 = arith.cmpi sge, %86, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc21)
    %91 = arith.cmpi slt, %86, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc21)
    %92 = arith.andi %90, %91 : tensor<1x64xi1, #blocked> loc(#loc21)
    %93 = tt.broadcast %92 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc21)
    %94 = arith.andi %45, %93 : tensor<64x64xi1, #blocked> loc(#loc21)
    %95 = ttg.memdesc_subview %62[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %96 = ttg.async_copy_global_to_local %89, %95 mask %cst_10 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
    %97 = ttg.async_commit_group %96 loc(#loc21)
    %98:11 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %c2_i32, %arg10 = %c-1_i32, %arg11 = %71, %arg12 = %84, %arg13 = %97, %arg14 = %63, %arg15 = %75, %arg16 = %88, %arg17 = %68, %arg18 = %81, %arg19 = %94) -> (i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>)  : i32 {
      %127 = arith.cmpi slt, %arg8, %c-1_i32 : i32 loc(#loc25)
      %128 = arith.addi %arg10, %c1_i32 : i32 loc(#loc25)
      %129 = arith.cmpi sge, %128, %c3_i32 : i32 loc(#loc25)
      %130 = arith.select %129, %c0_i32, %128 : i32 loc(#loc25)
      %131 = ttg.async_wait %arg11 {num = 2 : i32} loc(#loc21)
      %132 = ttg.memdesc_subview %62[%130, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
      %133 = ttg.local_load %132 token %131 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
      %134 = arith.mulf %133, %60 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
      %135 = ttg.local_load %52 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc17)
      %136 = tt.dot %135, %134, %cst_7 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc26)
      %137 = arith.truncf %136 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc27)
      %138 = tt.addptr %61, %arg14 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc24)
      %139 = ttg.convert_layout %137 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked> loc(#loc24)
      tt.store %138, %139, %arg17 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %140 = arith.addi %arg9, %c1_i32 : i32 loc(#loc25)
      %141 = arith.cmpi sge, %140, %c3_i32 : i32 loc(#loc25)
      %142 = arith.select %141, %c0_i32, %140 : i32 loc(#loc25)
      %143 = arith.addi %arg8, %c3_i32 : i32 loc(#loc25)
      %144 = arith.muli %143, %c64_i32 : i32 loc(#loc28)
      %145 = arith.extsi %144 : i32 to i64 loc(#loc29)
      %146 = tt.splat %145 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
      %147 = arith.addi %146, %18 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
      %148 = tt.expand_dims %147 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc21)
      %149 = tt.broadcast %148 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc21)
      %150 = arith.addi %58, %149 : tensor<64x64xi64, #blocked> loc(#loc21)
      %151 = tt.addptr %56, %150 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc21)
      %152 = arith.cmpi sge, %148, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc21)
      %153 = arith.cmpi slt, %148, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc21)
      %154 = arith.andi %152, %153 : tensor<1x64xi1, #blocked> loc(#loc21)
      %155 = tt.broadcast %154 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc21)
      %156 = arith.andi %45, %155 : tensor<64x64xi1, #blocked> loc(#loc21)
      %157 = ttg.memdesc_subview %62[%142, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
      %158 = tt.splat %127 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
      %159 = arith.andi %158, %156 : tensor<64x64xi1, #blocked> loc(#loc25)
      %160 = ttg.async_copy_global_to_local %151, %157 mask %159 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc21)
      %161 = ttg.async_commit_group %160 loc(#loc21)
      scf.yield %142, %130, %arg12, %arg13, %161, %arg15, %arg16, %150, %arg18, %arg19, %156 : i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked> loc(#loc25)
    } loc(#loc25)
    %99 = ttg.async_wait  {num = 0 : i32} loc(#loc25)
    ttg.local_dealloc %62 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc25)
    %100 = tt.addptr %arg6, %30 : !tt.ptr<f32>, i32 loc(#loc30)
    %101 = tt.splat %100 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %102 = tt.addptr %101, %22 : tensor<64x!tt.ptr<f32>, #blocked1>, tensor<64xi64, #blocked1> loc(#loc31)
    %103 = tt.load %102, %27 : tensor<64x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %104 = math.exp %103 : tensor<64xf32, #blocked1> loc(#loc32)
    %105 = ttg.convert_layout %104 : tensor<64xf32, #blocked1> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>}>> loc(#loc32)
    %106 = tt.addptr %arg0, %53 : !tt.ptr<bf16>, i32 loc(#loc33)
    %107 = tt.addptr %arg3, %53 : !tt.ptr<bf16>, i32 loc(#loc34)
    %108 = tt.splat %106 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc35)
    %109 = tt.expand_dims %105 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>}>> -> tensor<64x1xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
    %110 = tt.broadcast %109 : tensor<64x1xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc37)
    %111 = tt.splat %107 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc38)
    %112 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc35)
    %113 = tt.addptr %108, %63 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc35)
    %114 = ttg.memdesc_subview %112[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %115 = ttg.async_copy_global_to_local %113, %114 mask %68 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %116 = ttg.async_commit_group %115 loc(#loc35)
    %117 = tt.addptr %108, %75 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc35)
    %118 = ttg.memdesc_subview %112[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %119 = ttg.async_copy_global_to_local %117, %118 mask %81 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %120 = ttg.async_commit_group %119 loc(#loc35)
    %121 = tt.addptr %108, %88 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc35)
    %122 = ttg.memdesc_subview %112[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %123 = ttg.async_copy_global_to_local %121, %122 mask %cst_10 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
    %124 = ttg.async_commit_group %123 loc(#loc35)
    %125:11 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %c2_i32, %arg10 = %c-1_i32, %arg11 = %116, %arg12 = %120, %arg13 = %124, %arg14 = %63, %arg15 = %75, %arg16 = %88, %arg17 = %68, %arg18 = %81, %arg19 = %94) -> (i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>)  : i32 {
      %127 = arith.cmpi slt, %arg8, %c-1_i32 : i32 loc(#loc39)
      %128 = arith.addi %arg10, %c1_i32 : i32 loc(#loc39)
      %129 = arith.cmpi sge, %128, %c3_i32 : i32 loc(#loc39)
      %130 = arith.select %129, %c0_i32, %128 : i32 loc(#loc39)
      %131 = ttg.async_wait %arg11 {num = 2 : i32} loc(#loc35)
      %132 = ttg.memdesc_subview %112[%130, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
      %133 = ttg.local_load %132 token %131 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc40)
      %134 = arith.mulf %133, %60 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc13)
      %135 = arith.extf %134 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> to tensor<64x64xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc37)
      %136 = arith.mulf %135, %110 : tensor<64x64xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc37)
      %137 = arith.truncf %136 : tensor<64x64xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> to tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc40)
      %138 = ttg.local_load %52 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc17)
      %139 = tt.dot %138, %137, %cst_7, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc41)
      %140 = arith.truncf %139 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc42)
      %141 = tt.addptr %111, %arg14 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
      %142 = ttg.convert_layout %140 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked> loc(#loc38)
      tt.store %141, %142, %arg17 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc38)
      %143 = arith.addi %arg9, %c1_i32 : i32 loc(#loc39)
      %144 = arith.cmpi sge, %143, %c3_i32 : i32 loc(#loc39)
      %145 = arith.select %144, %c0_i32, %143 : i32 loc(#loc39)
      %146 = arith.addi %arg8, %c3_i32 : i32 loc(#loc39)
      %147 = arith.muli %146, %c64_i32 : i32 loc(#loc43)
      %148 = arith.extsi %147 : i32 to i64 loc(#loc44)
      %149 = tt.splat %148 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc35)
      %150 = arith.addi %149, %18 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc35)
      %151 = tt.expand_dims %150 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc35)
      %152 = tt.broadcast %151 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc35)
      %153 = arith.addi %58, %152 : tensor<64x64xi64, #blocked> loc(#loc35)
      %154 = tt.addptr %108, %153 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc35)
      %155 = arith.cmpi sge, %151, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc35)
      %156 = arith.cmpi slt, %151, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc35)
      %157 = arith.andi %155, %156 : tensor<1x64xi1, #blocked> loc(#loc35)
      %158 = tt.broadcast %157 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc35)
      %159 = arith.andi %45, %158 : tensor<64x64xi1, #blocked> loc(#loc35)
      %160 = ttg.memdesc_subview %112[%145, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
      %161 = tt.splat %127 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
      %162 = arith.andi %161, %159 : tensor<64x64xi1, #blocked> loc(#loc39)
      %163 = ttg.async_copy_global_to_local %154, %160 mask %162 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc35)
      %164 = ttg.async_commit_group %163 loc(#loc35)
      scf.yield %145, %130, %arg12, %arg13, %164, %arg15, %arg16, %153, %arg18, %arg19, %159 : i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked> loc(#loc39)
    } loc(#loc39)
    %126 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %112 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:42)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:38)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:46)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:70)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:83)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":175:21)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:21)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:41)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:48)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:32)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":178:18)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:52)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:36)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:36)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":183:22)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:29)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:22)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:22)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":180:21)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":185:26)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:29)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:90)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:105)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:37)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:26)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:18)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:36)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:36)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":195:22)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:24)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:20)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:22)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:34)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:26)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:29)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:90)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:105)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:4)
