; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @layer_norm_gated_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = shl nuw nsw i32 %10, 3, !dbg !9
  %12 = and i32 %11, 120, !dbg !9
  %13 = shl i32 %9, 4, !dbg !10
  %14 = sext i32 %6 to i64, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !11
  %16 = lshr i32 %10, 4, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = zext nneg i32 %17 to i64, !dbg !12
  %19 = or disjoint i64 %18, %15, !dbg !12
  %20 = shl nsw i64 %19, 7, !dbg !12
  %21 = zext nneg i32 %12 to i64, !dbg !12
  %22 = or disjoint i64 %20, %21, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !12
  %24 = icmp sgt i32 %13, -1, !dbg !12
  %25 = icmp slt i64 %19, %14, !dbg !12
  %26 = and i1 %24, %25, !dbg !12
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %26) #6, !dbg !12
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !12
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !12
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !12
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !12
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !12
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !12
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !12
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !12
  %36 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !13
  %37 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !13
  %38 = fpext <2 x bfloat> %33 to <2 x float>, !dbg !13
  %39 = fpext <2 x bfloat> %35 to <2 x float>, !dbg !13
  %40 = fmul <2 x float> %36, %36, !dbg !14
  %41 = fmul <2 x float> %36, %36, !dbg !14
  %42 = fmul <2 x float> %37, %37, !dbg !14
  %43 = fmul <2 x float> %37, %37, !dbg !14
  %44 = fmul <2 x float> %38, %38, !dbg !14
  %45 = fmul <2 x float> %38, %38, !dbg !14
  %46 = fmul <2 x float> %39, %39, !dbg !14
  %47 = fmul <2 x float> %39, %39, !dbg !14
  %shift = shufflevector <2 x float> %41, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %48 = fadd <2 x float> %40, %shift, !dbg !15
  %49 = fadd <2 x float> %42, %48, !dbg !15
  %shift2 = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %50 = fadd <2 x float> %shift2, %49, !dbg !15
  %51 = fadd <2 x float> %44, %50, !dbg !15
  %shift3 = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %52 = fadd <2 x float> %shift3, %51, !dbg !15
  %53 = fadd <2 x float> %46, %52, !dbg !15
  %shift4 = shufflevector <2 x float> %47, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %54 = fadd <2 x float> %shift4, %53, !dbg !15
  %55 = extractelement <2 x float> %54, i64 0, !dbg !15
  %56 = bitcast float %55 to i32, !dbg !19
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = fadd float %55, %58, !dbg !15
  %60 = bitcast float %59 to i32, !dbg !19
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !19
  %62 = bitcast i32 %61 to float, !dbg !19
  %63 = fadd float %59, %62, !dbg !15
  %64 = bitcast float %63 to i32, !dbg !19
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !19
  %66 = bitcast i32 %65 to float, !dbg !19
  %67 = fadd float %63, %66, !dbg !15
  %68 = bitcast float %67 to i32, !dbg !19
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !19
  %70 = bitcast i32 %69 to float, !dbg !19
  %71 = fadd float %67, %70, !dbg !15
  %72 = tail call float @llvm.nvvm.div.full(float %71, float 1.280000e+02), !dbg !20
  %73 = fadd float %5, %72, !dbg !21
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i = icmp eq i32 %74, 0, !dbg !22
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i = icmp eq i32 %75, 0, !dbg !22
  br i1 %.not.i, label %81, label %76, !dbg !22

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !22

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !22

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !22
  %86 = and i32 %10, 15, !dbg !12
  %87 = zext nneg i32 %86 to i64, !dbg !12
  %88 = or disjoint i64 %15, %87, !dbg !12
  %89 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !23
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !24
  %91 = icmp slt i64 %88, %14, !dbg !24
  %92 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !24
  store float %89, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %93 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %86, !dbg !24
  %94 = load i32, ptr addrspace(3) %93, align 4, !dbg !24
  %95 = and i32 %10, 240, !dbg !24
  %96 = icmp eq i32 %95, 0, !dbg !24
  %97 = and i1 %96, %91, !dbg !24
  %98 = and i1 %24, %97, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %90, i1 %98) #6, !dbg !24
  %99 = getelementptr bfloat, ptr addrspace(1) %3, i64 %21, !dbg !25
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #6, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !26
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !26
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !26
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !26
  %108 = bitcast i32 %107 to <2 x bfloat>, !dbg !26
  %109 = getelementptr bfloat, ptr addrspace(1) %1, i64 %22, !dbg !27
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %26) #6, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !27
  %112 = bitcast i32 %111 to <2 x bfloat>, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !27
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !27
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !27
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !27
  %119 = fpext <2 x bfloat> %102 to <2 x float>, !dbg !28
  %120 = insertelement <2 x float> poison, float %89, i64 0, !dbg !29
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !29
  %122 = fmul <2 x float> %121, %36, !dbg !29
  %123 = fmul <2 x float> %122, %119, !dbg !30
  %124 = fpext <2 x bfloat> %112 to <2 x float>, !dbg !31
  %125 = fmul <2 x float> %123, %124, !dbg !32
  %126 = extractelement <2 x float> %124, i64 0, !dbg !33
  %127 = fsub float 0.000000e+00, %126, !dbg !33
  %128 = extractelement <2 x float> %124, i64 1, !dbg !33
  %129 = fsub float 0.000000e+00, %128, !dbg !33
  %130 = fmul float %127, 0x3FF7154760000000, !dbg !35
  %131 = tail call float @llvm.nvvm.ex2.approx.f(float %130), !dbg !35
  %132 = fmul float %129, 0x3FF7154760000000, !dbg !35
  %133 = tail call float @llvm.nvvm.ex2.approx.f(float %132), !dbg !35
  %134 = fadd float %131, 1.000000e+00, !dbg !36
  %135 = fadd float %133, 1.000000e+00, !dbg !36
  %136 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %134), !dbg !37
  %137 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %135), !dbg !37
  %138 = insertelement <2 x float> poison, float %136, i64 0, !dbg !38
  %139 = insertelement <2 x float> %138, float %137, i64 1, !dbg !38
  %140 = fmul <2 x float> %125, %139, !dbg !38
  %141 = fptrunc <2 x float> %140 to <2 x bfloat>, !dbg !39
  %142 = fpext <2 x bfloat> %104 to <2 x float>, !dbg !28
  %143 = fmul <2 x float> %121, %37, !dbg !29
  %144 = fmul <2 x float> %143, %142, !dbg !30
  %145 = fpext <2 x bfloat> %114 to <2 x float>, !dbg !31
  %146 = fmul <2 x float> %144, %145, !dbg !32
  %147 = extractelement <2 x float> %145, i64 0, !dbg !33
  %148 = fsub float 0.000000e+00, %147, !dbg !33
  %149 = extractelement <2 x float> %145, i64 1, !dbg !33
  %150 = fsub float 0.000000e+00, %149, !dbg !33
  %151 = fmul float %148, 0x3FF7154760000000, !dbg !35
  %152 = tail call float @llvm.nvvm.ex2.approx.f(float %151), !dbg !35
  %153 = fmul float %150, 0x3FF7154760000000, !dbg !35
  %154 = tail call float @llvm.nvvm.ex2.approx.f(float %153), !dbg !35
  %155 = fadd float %152, 1.000000e+00, !dbg !36
  %156 = fadd float %154, 1.000000e+00, !dbg !36
  %157 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %155), !dbg !37
  %158 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %156), !dbg !37
  %159 = insertelement <2 x float> poison, float %157, i64 0, !dbg !38
  %160 = insertelement <2 x float> %159, float %158, i64 1, !dbg !38
  %161 = fmul <2 x float> %146, %160, !dbg !38
  %162 = fptrunc <2 x float> %161 to <2 x bfloat>, !dbg !39
  %163 = fpext <2 x bfloat> %106 to <2 x float>, !dbg !28
  %164 = fmul <2 x float> %121, %38, !dbg !29
  %165 = fmul <2 x float> %164, %163, !dbg !30
  %166 = fpext <2 x bfloat> %116 to <2 x float>, !dbg !31
  %167 = fmul <2 x float> %165, %166, !dbg !32
  %168 = extractelement <2 x float> %166, i64 0, !dbg !33
  %169 = fsub float 0.000000e+00, %168, !dbg !33
  %170 = extractelement <2 x float> %166, i64 1, !dbg !33
  %171 = fsub float 0.000000e+00, %170, !dbg !33
  %172 = fmul float %169, 0x3FF7154760000000, !dbg !35
  %173 = tail call float @llvm.nvvm.ex2.approx.f(float %172), !dbg !35
  %174 = fmul float %171, 0x3FF7154760000000, !dbg !35
  %175 = tail call float @llvm.nvvm.ex2.approx.f(float %174), !dbg !35
  %176 = fadd float %173, 1.000000e+00, !dbg !36
  %177 = fadd float %175, 1.000000e+00, !dbg !36
  %178 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %176), !dbg !37
  %179 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %177), !dbg !37
  %180 = insertelement <2 x float> poison, float %178, i64 0, !dbg !38
  %181 = insertelement <2 x float> %180, float %179, i64 1, !dbg !38
  %182 = fmul <2 x float> %167, %181, !dbg !38
  %183 = fptrunc <2 x float> %182 to <2 x bfloat>, !dbg !39
  %184 = fpext <2 x bfloat> %108 to <2 x float>, !dbg !28
  %185 = fmul <2 x float> %121, %39, !dbg !29
  %186 = fmul <2 x float> %185, %184, !dbg !30
  %187 = fpext <2 x bfloat> %118 to <2 x float>, !dbg !31
  %188 = fmul <2 x float> %186, %187, !dbg !32
  %189 = extractelement <2 x float> %187, i64 0, !dbg !33
  %190 = fsub float 0.000000e+00, %189, !dbg !33
  %191 = extractelement <2 x float> %187, i64 1, !dbg !33
  %192 = fsub float 0.000000e+00, %191, !dbg !33
  %193 = fmul float %190, 0x3FF7154760000000, !dbg !35
  %194 = tail call float @llvm.nvvm.ex2.approx.f(float %193), !dbg !35
  %195 = fmul float %192, 0x3FF7154760000000, !dbg !35
  %196 = tail call float @llvm.nvvm.ex2.approx.f(float %195), !dbg !35
  %197 = fadd float %194, 1.000000e+00, !dbg !36
  %198 = fadd float %196, 1.000000e+00, !dbg !36
  %199 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %197), !dbg !37
  %200 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %198), !dbg !37
  %201 = insertelement <2 x float> poison, float %199, i64 0, !dbg !38
  %202 = insertelement <2 x float> %201, float %200, i64 1, !dbg !38
  %203 = fmul <2 x float> %188, %202, !dbg !38
  %204 = fptrunc <2 x float> %203 to <2 x bfloat>, !dbg !39
  %205 = getelementptr bfloat, ptr addrspace(1) %2, i64 %22, !dbg !40
  %206 = bitcast <2 x bfloat> %141 to i32, !dbg !40
  %207 = bitcast <2 x bfloat> %162 to i32, !dbg !40
  %208 = bitcast <2 x bfloat> %183 to i32, !dbg !40
  %209 = bitcast <2 x bfloat> %204 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %205, i1 %26) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_norm_gate.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "layer_norm_gated_fwd_kernel", linkageName: "layer_norm_gated_fwd_kernel", scope: !1, file: !1, line: 33, type: !6, scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 56, column: 24, scope: !5)
!9 = !DILocation(line: 58, column: 23, scope: !5)
!10 = !DILocation(line: 61, column: 54, scope: !5)
!11 = !DILocation(line: 61, column: 72, scope: !5)
!12 = !DILocation(line: 62, column: 18, scope: !5)
!13 = !DILocation(line: 62, column: 49, scope: !5)
!14 = !DILocation(line: 77, column: 32, scope: !5)
!15 = !DILocation(line: 260, column: 15, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !5, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!18 = !DILocation(line: 77, column: 23, scope: !5)
!19 = !DILocation(line: 290, column: 36, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 77, column: 50, scope: !5)
!21 = !DILocation(line: 78, column: 33, scope: !5)
!22 = !DILocation(line: 78, column: 25, scope: !5)
!23 = !DILocation(line: 78, column: 17, scope: !5)
!24 = !DILocation(line: 81, column: 21, scope: !5)
!25 = !DILocation(line: 84, column: 26, scope: !5)
!26 = !DILocation(line: 84, column: 22, scope: !5)
!27 = !DILocation(line: 94, column: 18, scope: !5)
!28 = !DILocation(line: 84, column: 44, scope: !5)
!29 = !DILocation(line: 87, column: 86, scope: !5)
!30 = !DILocation(line: 88, column: 20, scope: !5)
!31 = !DILocation(line: 94, column: 49, scope: !5)
!32 = !DILocation(line: 98, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !34)
!34 = !DILocation(line: 98, column: 37, scope: !5)
!35 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !34)
!38 = !DILocation(line: 98, column: 26, scope: !5)
!39 = !DILocation(line: 104, column: 25, scope: !5)
!40 = !DILocation(line: 104, column: 18, scope: !5)
!41 = !DILocation(line: 104, column: 4, scope: !5)
