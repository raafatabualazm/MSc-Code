#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":284:0)
#loc40 = loc(unknown)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":259:0)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":46:0)
module {
  tt.func public @layer_norm_gated_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg5: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":33:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc3)
    %cst = arith.constant dense<128> : tensor<128xi32> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst : tensor<128xi32> loc(#loc3)
    %c16_i32 = arith.constant 16 : i32 loc(#loc4)
    %c16_i32_0 = arith.constant 16 : i32 loc(#loc4)
    %3 = arith.extsi %0 : i32 to i64 loc(#loc4)
    %4 = arith.extsi %c16_i32_0 : i32 to i64 loc(#loc4)
    %5 = arith.muli %3, %4 : i64 loc(#loc4)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc4)
    %6 = arith.cmpi sle, %5, %c2147483647_i64 : i64 loc(#loc4)
    %7 = arith.cmpi sge, %5, %c-2147483648_i64 : i64 loc(#loc4)
    %8 = arith.andi %6, %7 : i1 loc(#loc4)
    %9 = arith.muli %0, %c16_i32_0 : i32 loc(#loc4)
    %10 = arith.extsi %arg6 : i32 to i64 loc(#loc5)
    %c128_i64 = arith.constant 128 : i64 loc(#loc5)
    %c128_i64_1 = arith.constant 128 : i64 loc(#loc5)
    %c1_i64 = arith.constant 1 : i64 loc(#loc5)
    %c0_i32 = arith.constant 0 : i32 loc(#loc5)
    %11 = tt.make_tensor_ptr %arg0, [%10, %c128_i64], [%c128_i64_1, %c1_i64], [%9, %c0_i32] {order = array<i32: 1, 0>} : <tensor<16x128xbf16>> loc(#loc5)
    %12 = tt.load %11 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<16x128xbf16>> loc(#loc6)
    %13 = arith.extf %12 : tensor<16x128xbf16> to tensor<16x128xf32> loc(#loc7)
    %14 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi1> -> tensor<1x128xi1> loc(#loc8)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc9)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc9)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<16x128xf32> loc(#loc9)
    %15 = tt.broadcast %14 : tensor<1x128xi1> -> tensor<16x128xi1> loc(#loc9)
    %16 = arith.select %15, %13, %cst_4 : tensor<16x128xi1>, tensor<16x128xf32> loc(#loc9)
    %17 = arith.mulf %16, %16 : tensor<16x128xf32> loc(#loc10)
    %18 = tt.call @"triton.language.standard.sum__fp32S16_128S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%17) : (tensor<16x128xf32>) -> tensor<16xf32> loc(#loc11)
    %c128_i32_5 = arith.constant 128 : i32 loc(#loc12)
    %cst_6 = arith.constant 1.280000e+02 : f32 loc(#loc12)
    %cst_7 = arith.constant dense<1.280000e+02> : tensor<16xf32> loc(#loc12)
    %19 = arith.divf %18, %cst_7 : tensor<16xf32> loc(#loc12)
    %20 = tt.splat %arg5 : f32 -> tensor<16xf32> loc(#loc13)
    %21 = arith.addf %19, %20 : tensor<16xf32> loc(#loc13)
    %22 = math.sqrt %21 : tensor<16xf32> loc(#loc14)
    %c1_i32 = arith.constant 1 : i32 loc(#loc15)
    %cst_8 = arith.constant 1.000000e+00 : f32 loc(#loc15)
    %cst_9 = arith.constant dense<1.000000e+00> : tensor<16xf32> loc(#loc15)
    %23 = arith.divf %cst_9, %22 : tensor<16xf32> loc(#loc15)
    %c16_i32_10 = arith.constant 16 : i32 loc(#loc16)
    %c16_i32_11 = arith.constant 16 : i32 loc(#loc16)
    %24 = arith.extsi %0 : i32 to i64 loc(#loc16)
    %25 = arith.extsi %c16_i32_11 : i32 to i64 loc(#loc16)
    %26 = arith.muli %24, %25 : i64 loc(#loc16)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc16)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc16)
    %27 = arith.cmpi sle, %26, %c2147483647_i64_12 : i64 loc(#loc16)
    %28 = arith.cmpi sge, %26, %c-2147483648_i64_13 : i64 loc(#loc16)
    %29 = arith.andi %27, %28 : i1 loc(#loc16)
    %30 = arith.muli %0, %c16_i32_11 : i32 loc(#loc16)
    %31 = arith.extsi %arg6 : i32 to i64 loc(#loc17)
    %c1_i64_14 = arith.constant 1 : i64 loc(#loc17)
    %32 = tt.make_tensor_ptr %arg4, [%31], [%c1_i64_14], [%30] {order = array<i32: 0>} : <tensor<16xf32>> loc(#loc17)
    tt.store %32, %23 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<16xf32>> loc(#loc18)
    %33 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<128x!tt.ptr<bf16>> loc(#loc19)
    %34 = tt.addptr %33, %1 : tensor<128x!tt.ptr<bf16>>, tensor<128xi32> loc(#loc19)
    %35 = tt.load %34, %2 : tensor<128x!tt.ptr<bf16>> loc(#loc20)
    %36 = arith.extf %35 : tensor<128xbf16> to tensor<128xf32> loc(#loc21)
    %37 = tt.expand_dims %23 {axis = 1 : i32} : tensor<16xf32> -> tensor<16x1xf32> loc(#loc22)
    %38 = tt.broadcast %37 : tensor<16x1xf32> -> tensor<16x128xf32> loc(#loc23)
    %39 = arith.mulf %13, %38 : tensor<16x128xf32> loc(#loc23)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<128xf32> -> tensor<1x128xf32> loc(#loc24)
    %41 = tt.broadcast %40 : tensor<1x128xf32> -> tensor<16x128xf32> loc(#loc25)
    %42 = arith.mulf %39, %41 : tensor<16x128xf32> loc(#loc25)
    %c16_i32_15 = arith.constant 16 : i32 loc(#loc26)
    %c16_i32_16 = arith.constant 16 : i32 loc(#loc26)
    %43 = arith.extsi %0 : i32 to i64 loc(#loc26)
    %44 = arith.extsi %c16_i32_16 : i32 to i64 loc(#loc26)
    %45 = arith.muli %43, %44 : i64 loc(#loc26)
    %c2147483647_i64_17 = arith.constant 2147483647 : i64 loc(#loc26)
    %c-2147483648_i64_18 = arith.constant -2147483648 : i64 loc(#loc26)
    %46 = arith.cmpi sle, %45, %c2147483647_i64_17 : i64 loc(#loc26)
    %47 = arith.cmpi sge, %45, %c-2147483648_i64_18 : i64 loc(#loc26)
    %48 = arith.andi %46, %47 : i1 loc(#loc26)
    %49 = arith.muli %0, %c16_i32_16 : i32 loc(#loc26)
    %50 = arith.extsi %arg6 : i32 to i64 loc(#loc27)
    %c128_i64_19 = arith.constant 128 : i64 loc(#loc27)
    %c128_i64_20 = arith.constant 128 : i64 loc(#loc27)
    %c1_i64_21 = arith.constant 1 : i64 loc(#loc27)
    %c0_i32_22 = arith.constant 0 : i32 loc(#loc27)
    %51 = tt.make_tensor_ptr %arg1, [%50, %c128_i64_19], [%c128_i64_20, %c1_i64_21], [%49, %c0_i32_22] {order = array<i32: 1, 0>} : <tensor<16x128xbf16>> loc(#loc27)
    %52 = tt.load %51 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<16x128xbf16>> loc(#loc28)
    %53 = arith.extf %52 : tensor<16x128xbf16> to tensor<16x128xf32> loc(#loc29)
    %54 = arith.mulf %42, %53 : tensor<16x128xf32> loc(#loc30)
    %55 = tt.call @triton.language.standard.sigmoid__fp32S16_128S__(%53) : (tensor<16x128xf32>) -> tensor<16x128xf32> loc(#loc31)
    %56 = arith.mulf %54, %55 : tensor<16x128xf32> loc(#loc32)
    %c16_i32_23 = arith.constant 16 : i32 loc(#loc33)
    %c16_i32_24 = arith.constant 16 : i32 loc(#loc33)
    %57 = arith.extsi %0 : i32 to i64 loc(#loc33)
    %58 = arith.extsi %c16_i32_24 : i32 to i64 loc(#loc33)
    %59 = arith.muli %57, %58 : i64 loc(#loc33)
    %c2147483647_i64_25 = arith.constant 2147483647 : i64 loc(#loc33)
    %c-2147483648_i64_26 = arith.constant -2147483648 : i64 loc(#loc33)
    %60 = arith.cmpi sle, %59, %c2147483647_i64_25 : i64 loc(#loc33)
    %61 = arith.cmpi sge, %59, %c-2147483648_i64_26 : i64 loc(#loc33)
    %62 = arith.andi %60, %61 : i1 loc(#loc33)
    %63 = arith.muli %0, %c16_i32_24 : i32 loc(#loc33)
    %64 = arith.extsi %arg6 : i32 to i64 loc(#loc34)
    %c128_i64_27 = arith.constant 128 : i64 loc(#loc34)
    %c128_i64_28 = arith.constant 128 : i64 loc(#loc34)
    %c1_i64_29 = arith.constant 1 : i64 loc(#loc34)
    %c0_i32_30 = arith.constant 0 : i32 loc(#loc34)
    %65 = tt.make_tensor_ptr %arg2, [%64, %c128_i64_27], [%c128_i64_28, %c1_i64_29], [%63, %c0_i32_30] {order = array<i32: 1, 0>} : <tensor<16x128xbf16>> loc(#loc34)
    %66 = arith.truncf %56 : tensor<16x128xf32> to tensor<16x128xbf16> loc(#loc35)
    tt.store %65, %66 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<16x128xbf16>> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
  tt.func private @"triton.language.standard.sum__fp32S16_128S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<16x128xf32> loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":284:0)) -> tensor<16xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc39)
      tt.reduce.return %2 : f32 loc(#loc39)
    }) : (tensor<16x128xf32>) -> tensor<16xf32> loc(#loc39)
    tt.return %0 : tensor<16xf32> loc(#loc41)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<16xf32> loc(#loc42)
    tt.return %1 : tensor<16xf32> loc(#loc42)
  } loc(#loc38)
  tt.func private @triton.language.standard._sum_combine__fp32_fp32__(%arg0: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":259:0), %arg1: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":259:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc44)
    tt.return %0 : f32 loc(#loc45)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc46)
    tt.return %1 : f32 loc(#loc46)
  } loc(#loc43)
  tt.func private @triton.language.standard.sigmoid__fp32S16_128S__(%arg0: tensor<16x128xf32> loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":46:0)) -> tensor<16x128xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc48)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x128xf32> loc(#loc48)
    %0 = arith.subf %cst_0, %arg0 : tensor<16x128xf32> loc(#loc48)
    %1 = math.exp %0 : tensor<16x128xf32> loc(#loc49)
    %c1_i32 = arith.constant 1 : i32 loc(#loc50)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc50)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<16x128xf32> loc(#loc50)
    %2 = arith.addf %cst_2, %1 : tensor<16x128xf32> loc(#loc50)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc51)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc51)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<16x128xf32> loc(#loc51)
    %3 = arith.divf %cst_5, %2 : tensor<16x128xf32> loc(#loc51)
    tt.return %3 : tensor<16x128xf32> loc(#loc52)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<16x128xf32> loc(#loc53)
    tt.return %4 : tensor<16x128xf32> loc(#loc53)
  } loc(#loc47)
} loc(#loc)
#loc1 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":56:24)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":58:23)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":59:16)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":61:54)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":61:72)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":62:18)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":62:49)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":76:30)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":76:45)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":77:32)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":77:23)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":77:50)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":78:33)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":78:25)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":78:17)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":80:56)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":80:69)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":81:21)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":84:26)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":84:22)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":84:44)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":87:93)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":87:86)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":88:24)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":88:20)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":93:54)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":93:72)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":94:18)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":94:49)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":98:20)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":98:37)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":98:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":103:54)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":103:72)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":104:25)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":104:18)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules/fused_norm_gate.py":104:4)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":290:36)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":290:11)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":290:4)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":260:15)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":260:11)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":260:4)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:29)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:20)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:16)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:11)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":47:4)
