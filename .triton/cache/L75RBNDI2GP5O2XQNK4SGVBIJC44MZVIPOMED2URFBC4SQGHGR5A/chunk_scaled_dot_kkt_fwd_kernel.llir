; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 4, !dbg !13
  %.not = icmp eq i32 %13, 0, !dbg !13
  %.lobit172 = lshr i32 %12, 2, !dbg !13
  %14 = and i32 %.lobit172, 3, !dbg !13
  %15 = and i32 %12, 16, !dbg !13
  %16 = lshr exact i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = and i32 %12, 32, !dbg !13
  %19 = lshr exact i32 %18, 2, !dbg !13
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = or disjoint i32 %20, 16, !dbg !13
  %22 = or disjoint i32 %20, 32, !dbg !13
  %23 = or disjoint i32 %20, 48, !dbg !13
  %24 = and i32 %12, 2, !dbg !13
  %25 = icmp eq i32 %24, 0, !dbg !13
  %26 = and i32 %12, 63, !dbg !13
  %27 = mul i32 %9, %4, !dbg !14
  %28 = sext i32 %27 to i64, !dbg !15
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %28, !dbg !15
  %30 = zext nneg i32 %10 to i64, !dbg !16
  %31 = getelementptr bfloat, ptr addrspace(1) %29, i64 %30, !dbg !16
  %32 = sext i32 %4 to i64, !dbg !17
  %33 = sext i32 %11 to i64, !dbg !17
  %34 = zext nneg i32 %20 to i64, !dbg !18
  %35 = zext nneg i32 %21 to i64, !dbg !18
  %36 = zext nneg i32 %22 to i64, !dbg !18
  %37 = zext nneg i32 %23 to i64, !dbg !18
  %38 = zext nneg i32 %26 to i64, !dbg !18
  %39 = or disjoint i64 %34, %33, !dbg !18
  %40 = or disjoint i64 %35, %33, !dbg !18
  %41 = or disjoint i64 %36, %33, !dbg !18
  %42 = or disjoint i64 %37, %33, !dbg !18
  %43 = or disjoint i64 %33, %38, !dbg !18
  %44 = shl nsw i64 %43, 5, !dbg !18
  %45 = getelementptr bfloat, ptr addrspace(1) %31, i64 %44, !dbg !18
  %46 = icmp sgt i32 %11, -1, !dbg !18
  %47 = icmp slt i64 %43, %32, !dbg !18
  %48 = and i1 %46, %47, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %45, i1 %48) #2, !dbg !18
  %50 = or disjoint i32 %27, %10, !dbg !19
  %51 = shl i32 %50, 7, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !21
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = shl nuw nsw i32 %12, 3, !dbg !22
  %55 = and i32 %54, 24, !dbg !22
  %56 = zext nneg i32 %55 to i64, !dbg !22
  %57 = icmp slt i64 %39, %32, !dbg !22
  %58 = icmp slt i64 %40, %32, !dbg !22
  %59 = icmp slt i64 %41, %32, !dbg !22
  %60 = icmp slt i64 %42, %32, !dbg !22
  %61 = and i1 %46, %57, !dbg !22
  %62 = and i1 %46, %58, !dbg !22
  %63 = and i1 %46, %59, !dbg !22
  %64 = and i1 %46, %60, !dbg !22
  %.idx173 = shl nsw i64 %39, 13, !dbg !22
  %65 = getelementptr i8, ptr addrspace(1) %53, i64 %.idx173, !dbg !22
  %66 = getelementptr bfloat, ptr addrspace(1) %65, i64 %56, !dbg !22
  %.idx174 = shl nsw i64 %40, 13, !dbg !22
  %67 = getelementptr i8, ptr addrspace(1) %53, i64 %.idx174, !dbg !22
  %68 = getelementptr bfloat, ptr addrspace(1) %67, i64 %56, !dbg !22
  %.idx175 = shl nsw i64 %41, 13, !dbg !22
  %69 = getelementptr i8, ptr addrspace(1) %53, i64 %.idx175, !dbg !22
  %70 = getelementptr bfloat, ptr addrspace(1) %69, i64 %56, !dbg !22
  %.idx176 = shl nsw i64 %42, 13, !dbg !22
  %71 = getelementptr i8, ptr addrspace(1) %53, i64 %.idx176, !dbg !22
  %72 = getelementptr bfloat, ptr addrspace(1) %71, i64 %56, !dbg !22
  %73 = xor i32 %54, %12, !dbg !22
  %74 = and i32 %73, 24, !dbg !22
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74, !dbg !22
  %.idx = shl nuw nsw i32 %20, 6, !dbg !22
  %76 = getelementptr inbounds nuw i8, ptr addrspace(3) %75, i32 %.idx, !dbg !22
  %.idx217 = shl nuw nsw i32 %20, 6, !dbg !22
  %77 = getelementptr inbounds nuw i8, ptr addrspace(3) %75, i32 %.idx217, !dbg !22
  %78 = getelementptr inbounds nuw i8, ptr addrspace(3) %77, i32 1024, !dbg !22
  %79 = getelementptr inbounds nuw i8, ptr addrspace(3) %77, i32 2048, !dbg !22
  %80 = getelementptr inbounds nuw i8, ptr addrspace(3) %77, i32 3072, !dbg !22
  %81 = select i1 %61, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %66, i32 %81) #2, !dbg !22
  %82 = select i1 %62, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %68, i32 %82) #2, !dbg !22
  %83 = select i1 %63, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %79, ptr addrspace(1) %70, i32 %83) #2, !dbg !22
  %84 = select i1 %64, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %72, i32 %84) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %85 = shl nuw nsw i32 %12, 5
  %86 = and i32 %85, 32
  %87 = select i1 %25, i32 0, i32 72
  %88 = or disjoint i32 %87, %86
  %89 = select i1 %.not, i32 0, i32 144
  %90 = or disjoint i32 %88, %89
  %and.ra177 = and i32 %12, 24
  %91 = xor i32 %90, %and.ra177
  %92 = and i32 %85, 256
  %93 = or disjoint i32 %90, %92
  %94 = lshr exact i32 %15, 1
  %95 = xor i32 %93, %94
  %96 = xor i32 %95, 16
  %97 = xor i32 %95, 528
  %98 = xor i32 %95, 1040
  %99 = xor i32 %95, 1552
  %100 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %91
  %.idx218 = shl nuw nsw i32 %18, 4
  %101 = getelementptr inbounds nuw i8, ptr addrspace(3) %100, i32 %.idx218
  %102 = ptrtoint ptr addrspace(3) %101 to i32
  %103 = getelementptr inbounds nuw i8, ptr addrspace(3) %101, i32 1024
  %104 = ptrtoint ptr addrspace(3) %103 to i32
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %101, i32 2048
  %106 = ptrtoint ptr addrspace(3) %105 to i32
  %107 = getelementptr inbounds nuw i8, ptr addrspace(3) %101, i32 3072
  %108 = ptrtoint ptr addrspace(3) %107 to i32
  %109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %95
  %110 = ptrtoint ptr addrspace(3) %109 to i32
  %111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %96
  %112 = ptrtoint ptr addrspace(3) %111 to i32
  %113 = getelementptr inbounds nuw i8, ptr addrspace(3) %109, i32 1024
  %114 = ptrtoint ptr addrspace(3) %113 to i32
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %97
  %116 = ptrtoint ptr addrspace(3) %115 to i32
  %117 = getelementptr inbounds nuw i8, ptr addrspace(3) %109, i32 2048
  %118 = ptrtoint ptr addrspace(3) %117 to i32
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %98
  %120 = ptrtoint ptr addrspace(3) %119 to i32
  %121 = getelementptr inbounds nuw i8, ptr addrspace(3) %109, i32 3072
  %122 = ptrtoint ptr addrspace(3) %121 to i32
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %99
  %124 = ptrtoint ptr addrspace(3) %123 to i32
  br label %125, !dbg !23

125:                                              ; preds = %6, %125
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %125 ]
  %126 = phi float [ 0.000000e+00, %6 ], [ %331, %125 ]
  %127 = phi float [ 0.000000e+00, %6 ], [ %332, %125 ]
  %128 = phi float [ 0.000000e+00, %6 ], [ %333, %125 ]
  %129 = phi float [ 0.000000e+00, %6 ], [ %334, %125 ]
  %130 = phi float [ 0.000000e+00, %6 ], [ %336, %125 ]
  %131 = phi float [ 0.000000e+00, %6 ], [ %337, %125 ]
  %132 = phi float [ 0.000000e+00, %6 ], [ %338, %125 ]
  %133 = phi float [ 0.000000e+00, %6 ], [ %339, %125 ]
  %134 = phi float [ 0.000000e+00, %6 ], [ %341, %125 ]
  %135 = phi float [ 0.000000e+00, %6 ], [ %342, %125 ]
  %136 = phi float [ 0.000000e+00, %6 ], [ %343, %125 ]
  %137 = phi float [ 0.000000e+00, %6 ], [ %344, %125 ]
  %138 = phi float [ 0.000000e+00, %6 ], [ %346, %125 ]
  %139 = phi float [ 0.000000e+00, %6 ], [ %347, %125 ]
  %140 = phi float [ 0.000000e+00, %6 ], [ %348, %125 ]
  %141 = phi float [ 0.000000e+00, %6 ], [ %349, %125 ]
  %142 = phi float [ 0.000000e+00, %6 ], [ %351, %125 ]
  %143 = phi float [ 0.000000e+00, %6 ], [ %352, %125 ]
  %144 = phi float [ 0.000000e+00, %6 ], [ %353, %125 ]
  %145 = phi float [ 0.000000e+00, %6 ], [ %354, %125 ]
  %146 = phi float [ 0.000000e+00, %6 ], [ %356, %125 ]
  %147 = phi float [ 0.000000e+00, %6 ], [ %357, %125 ]
  %148 = phi float [ 0.000000e+00, %6 ], [ %358, %125 ]
  %149 = phi float [ 0.000000e+00, %6 ], [ %359, %125 ]
  %150 = phi float [ 0.000000e+00, %6 ], [ %361, %125 ]
  %151 = phi float [ 0.000000e+00, %6 ], [ %362, %125 ]
  %152 = phi float [ 0.000000e+00, %6 ], [ %363, %125 ]
  %153 = phi float [ 0.000000e+00, %6 ], [ %364, %125 ]
  %154 = phi float [ 0.000000e+00, %6 ], [ %366, %125 ]
  %155 = phi float [ 0.000000e+00, %6 ], [ %367, %125 ]
  %156 = phi float [ 0.000000e+00, %6 ], [ %368, %125 ]
  %157 = phi float [ 0.000000e+00, %6 ], [ %369, %125 ]
  %158 = phi float [ 0.000000e+00, %6 ], [ %371, %125 ]
  %159 = phi float [ 0.000000e+00, %6 ], [ %372, %125 ]
  %160 = phi float [ 0.000000e+00, %6 ], [ %373, %125 ]
  %161 = phi float [ 0.000000e+00, %6 ], [ %374, %125 ]
  %162 = phi float [ 0.000000e+00, %6 ], [ %376, %125 ]
  %163 = phi float [ 0.000000e+00, %6 ], [ %377, %125 ]
  %164 = phi float [ 0.000000e+00, %6 ], [ %378, %125 ]
  %165 = phi float [ 0.000000e+00, %6 ], [ %379, %125 ]
  %166 = phi float [ 0.000000e+00, %6 ], [ %381, %125 ]
  %167 = phi float [ 0.000000e+00, %6 ], [ %382, %125 ]
  %168 = phi float [ 0.000000e+00, %6 ], [ %383, %125 ]
  %169 = phi float [ 0.000000e+00, %6 ], [ %384, %125 ]
  %170 = phi float [ 0.000000e+00, %6 ], [ %386, %125 ]
  %171 = phi float [ 0.000000e+00, %6 ], [ %387, %125 ]
  %172 = phi float [ 0.000000e+00, %6 ], [ %388, %125 ]
  %173 = phi float [ 0.000000e+00, %6 ], [ %389, %125 ]
  %174 = phi float [ 0.000000e+00, %6 ], [ %391, %125 ]
  %175 = phi float [ 0.000000e+00, %6 ], [ %392, %125 ]
  %176 = phi float [ 0.000000e+00, %6 ], [ %393, %125 ]
  %177 = phi float [ 0.000000e+00, %6 ], [ %394, %125 ]
  %178 = phi float [ 0.000000e+00, %6 ], [ %396, %125 ]
  %179 = phi float [ 0.000000e+00, %6 ], [ %397, %125 ]
  %180 = phi float [ 0.000000e+00, %6 ], [ %398, %125 ]
  %181 = phi float [ 0.000000e+00, %6 ], [ %399, %125 ]
  %182 = phi float [ 0.000000e+00, %6 ], [ %401, %125 ]
  %183 = phi float [ 0.000000e+00, %6 ], [ %402, %125 ]
  %184 = phi float [ 0.000000e+00, %6 ], [ %403, %125 ]
  %185 = phi float [ 0.000000e+00, %6 ], [ %404, %125 ]
  %186 = phi float [ 0.000000e+00, %6 ], [ %406, %125 ]
  %187 = phi float [ 0.000000e+00, %6 ], [ %407, %125 ]
  %188 = phi float [ 0.000000e+00, %6 ], [ %408, %125 ]
  %189 = phi float [ 0.000000e+00, %6 ], [ %409, %125 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %102) #2, !dbg !24
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !24
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %104) #2, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !24
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !24
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !24
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %106) #2, !dbg !24
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !24
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !24
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %108) #2, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !24
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !24
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !24
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %110) #2, !dbg !22
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !22
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !22
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !22
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !22
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %112) #2, !dbg !22
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !22
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !22
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !22
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !22
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %114) #2, !dbg !22
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !22
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !22
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !22
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !22
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %116) #2, !dbg !22
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !22
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !22
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !22
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !22
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %118) #2, !dbg !22
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !22
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !22
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !22
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !22
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %120) #2, !dbg !22
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !22
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !22
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !22
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !22
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %122) #2, !dbg !22
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !22
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !22
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !22
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !22
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %124) #2, !dbg !22
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !22
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !22
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !22
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !22
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %126, float %127, float %128, float %129, i32 %211, i32 %212, i32 %213, i32 %214, i32 %191, i32 %192) #2, !dbg !24
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !24
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !24
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !24
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !24
  %255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %130, float %131, float %132, float %133, i32 %211, i32 %212, i32 %213, i32 %214, i32 %196, i32 %197) #2, !dbg !24
  %256 = extractvalue { float, float, float, float } %255, 0, !dbg !24
  %257 = extractvalue { float, float, float, float } %255, 1, !dbg !24
  %258 = extractvalue { float, float, float, float } %255, 2, !dbg !24
  %259 = extractvalue { float, float, float, float } %255, 3, !dbg !24
  %260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %134, float %135, float %136, float %137, i32 %211, i32 %212, i32 %213, i32 %214, i32 %201, i32 %202) #2, !dbg !24
  %261 = extractvalue { float, float, float, float } %260, 0, !dbg !24
  %262 = extractvalue { float, float, float, float } %260, 1, !dbg !24
  %263 = extractvalue { float, float, float, float } %260, 2, !dbg !24
  %264 = extractvalue { float, float, float, float } %260, 3, !dbg !24
  %265 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %138, float %139, float %140, float %141, i32 %211, i32 %212, i32 %213, i32 %214, i32 %206, i32 %207) #2, !dbg !24
  %266 = extractvalue { float, float, float, float } %265, 0, !dbg !24
  %267 = extractvalue { float, float, float, float } %265, 1, !dbg !24
  %268 = extractvalue { float, float, float, float } %265, 2, !dbg !24
  %269 = extractvalue { float, float, float, float } %265, 3, !dbg !24
  %270 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %221, i32 %222, i32 %223, i32 %224, i32 %191, i32 %192) #2, !dbg !24
  %271 = extractvalue { float, float, float, float } %270, 0, !dbg !24
  %272 = extractvalue { float, float, float, float } %270, 1, !dbg !24
  %273 = extractvalue { float, float, float, float } %270, 2, !dbg !24
  %274 = extractvalue { float, float, float, float } %270, 3, !dbg !24
  %275 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %146, float %147, float %148, float %149, i32 %221, i32 %222, i32 %223, i32 %224, i32 %196, i32 %197) #2, !dbg !24
  %276 = extractvalue { float, float, float, float } %275, 0, !dbg !24
  %277 = extractvalue { float, float, float, float } %275, 1, !dbg !24
  %278 = extractvalue { float, float, float, float } %275, 2, !dbg !24
  %279 = extractvalue { float, float, float, float } %275, 3, !dbg !24
  %280 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %221, i32 %222, i32 %223, i32 %224, i32 %201, i32 %202) #2, !dbg !24
  %281 = extractvalue { float, float, float, float } %280, 0, !dbg !24
  %282 = extractvalue { float, float, float, float } %280, 1, !dbg !24
  %283 = extractvalue { float, float, float, float } %280, 2, !dbg !24
  %284 = extractvalue { float, float, float, float } %280, 3, !dbg !24
  %285 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %154, float %155, float %156, float %157, i32 %221, i32 %222, i32 %223, i32 %224, i32 %206, i32 %207) #2, !dbg !24
  %286 = extractvalue { float, float, float, float } %285, 0, !dbg !24
  %287 = extractvalue { float, float, float, float } %285, 1, !dbg !24
  %288 = extractvalue { float, float, float, float } %285, 2, !dbg !24
  %289 = extractvalue { float, float, float, float } %285, 3, !dbg !24
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %158, float %159, float %160, float %161, i32 %231, i32 %232, i32 %233, i32 %234, i32 %191, i32 %192) #2, !dbg !24
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !24
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !24
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !24
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !24
  %295 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %162, float %163, float %164, float %165, i32 %231, i32 %232, i32 %233, i32 %234, i32 %196, i32 %197) #2, !dbg !24
  %296 = extractvalue { float, float, float, float } %295, 0, !dbg !24
  %297 = extractvalue { float, float, float, float } %295, 1, !dbg !24
  %298 = extractvalue { float, float, float, float } %295, 2, !dbg !24
  %299 = extractvalue { float, float, float, float } %295, 3, !dbg !24
  %300 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %166, float %167, float %168, float %169, i32 %231, i32 %232, i32 %233, i32 %234, i32 %201, i32 %202) #2, !dbg !24
  %301 = extractvalue { float, float, float, float } %300, 0, !dbg !24
  %302 = extractvalue { float, float, float, float } %300, 1, !dbg !24
  %303 = extractvalue { float, float, float, float } %300, 2, !dbg !24
  %304 = extractvalue { float, float, float, float } %300, 3, !dbg !24
  %305 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %170, float %171, float %172, float %173, i32 %231, i32 %232, i32 %233, i32 %234, i32 %206, i32 %207) #2, !dbg !24
  %306 = extractvalue { float, float, float, float } %305, 0, !dbg !24
  %307 = extractvalue { float, float, float, float } %305, 1, !dbg !24
  %308 = extractvalue { float, float, float, float } %305, 2, !dbg !24
  %309 = extractvalue { float, float, float, float } %305, 3, !dbg !24
  %310 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %174, float %175, float %176, float %177, i32 %241, i32 %242, i32 %243, i32 %244, i32 %191, i32 %192) #2, !dbg !24
  %311 = extractvalue { float, float, float, float } %310, 0, !dbg !24
  %312 = extractvalue { float, float, float, float } %310, 1, !dbg !24
  %313 = extractvalue { float, float, float, float } %310, 2, !dbg !24
  %314 = extractvalue { float, float, float, float } %310, 3, !dbg !24
  %315 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %241, i32 %242, i32 %243, i32 %244, i32 %196, i32 %197) #2, !dbg !24
  %316 = extractvalue { float, float, float, float } %315, 0, !dbg !24
  %317 = extractvalue { float, float, float, float } %315, 1, !dbg !24
  %318 = extractvalue { float, float, float, float } %315, 2, !dbg !24
  %319 = extractvalue { float, float, float, float } %315, 3, !dbg !24
  %320 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %241, i32 %242, i32 %243, i32 %244, i32 %201, i32 %202) #2, !dbg !24
  %321 = extractvalue { float, float, float, float } %320, 0, !dbg !24
  %322 = extractvalue { float, float, float, float } %320, 1, !dbg !24
  %323 = extractvalue { float, float, float, float } %320, 2, !dbg !24
  %324 = extractvalue { float, float, float, float } %320, 3, !dbg !24
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %186, float %187, float %188, float %189, i32 %241, i32 %242, i32 %243, i32 %244, i32 %206, i32 %207) #2, !dbg !24
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !24
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !24
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !24
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !24
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %216, i32 %217, i32 %218, i32 %219, i32 %193, i32 %194) #2, !dbg !24
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !24
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !24
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !24
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !24
  %335 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %256, float %257, float %258, float %259, i32 %216, i32 %217, i32 %218, i32 %219, i32 %198, i32 %199) #2, !dbg !24
  %336 = extractvalue { float, float, float, float } %335, 0, !dbg !24
  %337 = extractvalue { float, float, float, float } %335, 1, !dbg !24
  %338 = extractvalue { float, float, float, float } %335, 2, !dbg !24
  %339 = extractvalue { float, float, float, float } %335, 3, !dbg !24
  %340 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %261, float %262, float %263, float %264, i32 %216, i32 %217, i32 %218, i32 %219, i32 %203, i32 %204) #2, !dbg !24
  %341 = extractvalue { float, float, float, float } %340, 0, !dbg !24
  %342 = extractvalue { float, float, float, float } %340, 1, !dbg !24
  %343 = extractvalue { float, float, float, float } %340, 2, !dbg !24
  %344 = extractvalue { float, float, float, float } %340, 3, !dbg !24
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %266, float %267, float %268, float %269, i32 %216, i32 %217, i32 %218, i32 %219, i32 %208, i32 %209) #2, !dbg !24
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !24
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !24
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !24
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !24
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %271, float %272, float %273, float %274, i32 %226, i32 %227, i32 %228, i32 %229, i32 %193, i32 %194) #2, !dbg !24
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !24
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !24
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !24
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !24
  %355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %276, float %277, float %278, float %279, i32 %226, i32 %227, i32 %228, i32 %229, i32 %198, i32 %199) #2, !dbg !24
  %356 = extractvalue { float, float, float, float } %355, 0, !dbg !24
  %357 = extractvalue { float, float, float, float } %355, 1, !dbg !24
  %358 = extractvalue { float, float, float, float } %355, 2, !dbg !24
  %359 = extractvalue { float, float, float, float } %355, 3, !dbg !24
  %360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %281, float %282, float %283, float %284, i32 %226, i32 %227, i32 %228, i32 %229, i32 %203, i32 %204) #2, !dbg !24
  %361 = extractvalue { float, float, float, float } %360, 0, !dbg !24
  %362 = extractvalue { float, float, float, float } %360, 1, !dbg !24
  %363 = extractvalue { float, float, float, float } %360, 2, !dbg !24
  %364 = extractvalue { float, float, float, float } %360, 3, !dbg !24
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %286, float %287, float %288, float %289, i32 %226, i32 %227, i32 %228, i32 %229, i32 %208, i32 %209) #2, !dbg !24
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !24
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !24
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !24
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !24
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %236, i32 %237, i32 %238, i32 %239, i32 %193, i32 %194) #2, !dbg !24
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !24
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !24
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !24
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !24
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %296, float %297, float %298, float %299, i32 %236, i32 %237, i32 %238, i32 %239, i32 %198, i32 %199) #2, !dbg !24
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !24
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !24
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !24
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !24
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %301, float %302, float %303, float %304, i32 %236, i32 %237, i32 %238, i32 %239, i32 %203, i32 %204) #2, !dbg !24
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !24
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !24
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !24
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !24
  %385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %236, i32 %237, i32 %238, i32 %239, i32 %208, i32 %209) #2, !dbg !24
  %386 = extractvalue { float, float, float, float } %385, 0, !dbg !24
  %387 = extractvalue { float, float, float, float } %385, 1, !dbg !24
  %388 = extractvalue { float, float, float, float } %385, 2, !dbg !24
  %389 = extractvalue { float, float, float, float } %385, 3, !dbg !24
  %390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %246, i32 %247, i32 %248, i32 %249, i32 %193, i32 %194) #2, !dbg !24
  %391 = extractvalue { float, float, float, float } %390, 0, !dbg !24
  %392 = extractvalue { float, float, float, float } %390, 1, !dbg !24
  %393 = extractvalue { float, float, float, float } %390, 2, !dbg !24
  %394 = extractvalue { float, float, float, float } %390, 3, !dbg !24
  %395 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %316, float %317, float %318, float %319, i32 %246, i32 %247, i32 %248, i32 %249, i32 %198, i32 %199) #2, !dbg !24
  %396 = extractvalue { float, float, float, float } %395, 0, !dbg !24
  %397 = extractvalue { float, float, float, float } %395, 1, !dbg !24
  %398 = extractvalue { float, float, float, float } %395, 2, !dbg !24
  %399 = extractvalue { float, float, float, float } %395, 3, !dbg !24
  %400 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %321, float %322, float %323, float %324, i32 %246, i32 %247, i32 %248, i32 %249, i32 %203, i32 %204) #2, !dbg !24
  %401 = extractvalue { float, float, float, float } %400, 0, !dbg !24
  %402 = extractvalue { float, float, float, float } %400, 1, !dbg !24
  %403 = extractvalue { float, float, float, float } %400, 2, !dbg !24
  %404 = extractvalue { float, float, float, float } %400, 3, !dbg !24
  %405 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %246, i32 %247, i32 %248, i32 %249, i32 %208, i32 %209) #2, !dbg !24
  %406 = extractvalue { float, float, float, float } %405, 0, !dbg !24
  %407 = extractvalue { float, float, float, float } %405, 1, !dbg !24
  %408 = extractvalue { float, float, float, float } %405, 2, !dbg !24
  %409 = extractvalue { float, float, float, float } %405, 3, !dbg !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %410 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !25
  %411 = or disjoint i64 %410, %56, !dbg !22
  %412 = getelementptr bfloat, ptr addrspace(1) %65, i64 %411, !dbg !22
  %413 = getelementptr bfloat, ptr addrspace(1) %67, i64 %411, !dbg !22
  %414 = getelementptr bfloat, ptr addrspace(1) %69, i64 %411, !dbg !22
  %415 = getelementptr bfloat, ptr addrspace(1) %71, i64 %411, !dbg !22
  %416 = icmp ne i64 %indvars.iv, 3, !dbg !22
  %417 = and i1 %61, %416, !dbg !22
  %418 = and i1 %62, %416, !dbg !22
  %419 = and i1 %63, %416, !dbg !22
  %420 = and i1 %64, %416, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %421 = select i1 %417, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %412, i32 %421) #2, !dbg !22
  %422 = select i1 %418, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %78, ptr addrspace(1) %413, i32 %422) #2, !dbg !22
  %423 = select i1 %419, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %79, ptr addrspace(1) %414, i32 %423) #2, !dbg !22
  %424 = select i1 %420, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %80, ptr addrspace(1) %415, i32 %424) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !23
  br i1 %exitcond.not, label %425, label %125, !dbg !23

425:                                              ; preds = %125
  %.lobit13 = lshr i32 %12, 4, !dbg !13
  %426 = shl nuw nsw i32 %12, 2, !dbg !13
  %427 = and i32 %426, 60, !dbg !13
  %428 = zext nneg i32 %427 to i64, !dbg !18
  %429 = shl nuw nsw i32 %12, 1, !dbg !13
  %430 = and i32 %429, 6, !dbg !13
  %431 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !13
  %432 = shufflevector <4 x i32> %431, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %433 = or disjoint <4 x i32> %432, <i32 32, i32 40, i32 48, i32 56>, !dbg !13
  %434 = or disjoint i32 %17, 24, !dbg !13
  %435 = or disjoint i32 %17, 16, !dbg !13
  %436 = or disjoint i32 %17, 8, !dbg !13
  %437 = or disjoint i32 %430, %19, !dbg !13
  %438 = insertelement <4 x i32> poison, i32 %437, i64 0, !dbg !13
  %439 = shufflevector <4 x i32> %438, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %440 = or disjoint <4 x i32> %439, <i32 32, i32 33, i32 48, i32 49>, !dbg !13
  %441 = or disjoint i32 %437, 17, !dbg !13
  %442 = or disjoint i32 %437, 16, !dbg !13
  %443 = or disjoint i32 %437, 1, !dbg !13
  %444 = insertelement <16 x i32> poison, i32 %17, i64 0, !dbg !26
  %445 = insertelement <16 x i32> %444, i32 %436, i64 1, !dbg !26
  %446 = insertelement <16 x i32> %445, i32 %435, i64 2, !dbg !26
  %447 = insertelement <16 x i32> %446, i32 %434, i64 3, !dbg !26
  %448 = insertelement <16 x i32> %447, i32 %437, i64 8, !dbg !26
  %449 = insertelement <16 x i32> %448, i32 %443, i64 9, !dbg !26
  %450 = insertelement <16 x i32> %449, i32 %442, i64 10, !dbg !26
  %451 = insertelement <16 x i32> %450, i32 %441, i64 11, !dbg !26
  %452 = shufflevector <4 x i32> %433, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %453 = shufflevector <16 x i32> %451, <16 x i32> %452, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %454 = shufflevector <4 x i32> %440, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %455 = shufflevector <16 x i32> %453, <16 x i32> %454, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !26
  %456 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !26
  %457 = shufflevector <16 x i32> %456, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %458 = or disjoint <16 x i32> %455, %457, !dbg !26
  %459 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !27
  %460 = shufflevector <16 x i32> %459, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !27
  %461 = icmp slt <16 x i32> %458, %460, !dbg !27
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %462 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !28
  %463 = getelementptr float, ptr addrspace(1) %462, i64 %30, !dbg !29
  %464 = getelementptr float, ptr addrspace(1) %463, i64 %44, !dbg !30
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %464, i1 %48) #2, !dbg !30
  %466 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %26, !dbg !31
  %467 = insertelement <1 x i32> poison, i32 %465, i64 0, !dbg !31
  store <1 x i32> %467, ptr addrspace(3) %466, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %468 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !31
  %469 = load float, ptr addrspace(3) %468, align 4, !dbg !31
  %470 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %436, !dbg !31
  %471 = load float, ptr addrspace(3) %470, align 4, !dbg !31
  %472 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %435, !dbg !31
  %473 = load float, ptr addrspace(3) %472, align 4, !dbg !31
  %474 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %434, !dbg !31
  %475 = load float, ptr addrspace(3) %474, align 4, !dbg !31
  %476 = extractelement <4 x i32> %433, i64 0, !dbg !32
  %477 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %476, !dbg !31
  %478 = load float, ptr addrspace(3) %477, align 4, !dbg !31
  %479 = extractelement <4 x i32> %433, i64 1, !dbg !32
  %480 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %479, !dbg !31
  %481 = load float, ptr addrspace(3) %480, align 4, !dbg !31
  %482 = extractelement <4 x i32> %433, i64 2, !dbg !32
  %483 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %482, !dbg !31
  %484 = load float, ptr addrspace(3) %483, align 4, !dbg !31
  %485 = extractelement <4 x i32> %433, i64 3, !dbg !32
  %486 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %485, !dbg !31
  %487 = load float, ptr addrspace(3) %486, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store <1 x i32> %467, ptr addrspace(3) %466, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %488 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %437, !dbg !33
  %489 = load float, ptr addrspace(3) %488, align 8, !dbg !33
  %490 = getelementptr inbounds nuw i8, ptr addrspace(3) %488, i32 4, !dbg !33
  %491 = load float, ptr addrspace(3) %490, align 4, !dbg !33
  %492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %442, !dbg !33
  %493 = load float, ptr addrspace(3) %492, align 8, !dbg !33
  %494 = getelementptr inbounds nuw i8, ptr addrspace(3) %492, i32 4, !dbg !33
  %495 = load float, ptr addrspace(3) %494, align 4, !dbg !33
  %496 = extractelement <4 x i32> %440, i64 0, !dbg !32
  %497 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %496, !dbg !33
  %498 = load float, ptr addrspace(3) %497, align 8, !dbg !33
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %497, i32 4, !dbg !33
  %500 = load float, ptr addrspace(3) %499, align 4, !dbg !33
  %501 = extractelement <4 x i32> %440, i64 2, !dbg !32
  %502 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %501, !dbg !33
  %503 = load float, ptr addrspace(3) %502, align 8, !dbg !33
  %504 = getelementptr inbounds nuw i8, ptr addrspace(3) %502, i32 4, !dbg !33
  %505 = load float, ptr addrspace(3) %504, align 4, !dbg !33
  %506 = fsub float %469, %489, !dbg !31
  %507 = fsub float %469, %491, !dbg !31
  %508 = fsub float %471, %489, !dbg !31
  %509 = fsub float %471, %491, !dbg !31
  %510 = fsub float %473, %489, !dbg !31
  %511 = fsub float %473, %491, !dbg !31
  %512 = fsub float %475, %489, !dbg !31
  %513 = fsub float %475, %491, !dbg !31
  %514 = fsub float %473, %493, !dbg !31
  %515 = fsub float %473, %495, !dbg !31
  %516 = fsub float %475, %493, !dbg !31
  %517 = fsub float %475, %495, !dbg !31
  %518 = fsub float %478, %489, !dbg !31
  %519 = fsub float %478, %491, !dbg !31
  %520 = fsub float %481, %489, !dbg !31
  %521 = fsub float %481, %491, !dbg !31
  %522 = fsub float %478, %493, !dbg !31
  %523 = fsub float %478, %495, !dbg !31
  %524 = fsub float %481, %493, !dbg !31
  %525 = fsub float %481, %495, !dbg !31
  %526 = fsub float %478, %498, !dbg !31
  %527 = fsub float %478, %500, !dbg !31
  %528 = fsub float %481, %498, !dbg !31
  %529 = fsub float %481, %500, !dbg !31
  %530 = fsub float %484, %489, !dbg !31
  %531 = fsub float %484, %491, !dbg !31
  %532 = fsub float %487, %489, !dbg !31
  %533 = fsub float %487, %491, !dbg !31
  %534 = fsub float %484, %493, !dbg !31
  %535 = fsub float %484, %495, !dbg !31
  %536 = fsub float %487, %493, !dbg !31
  %537 = fsub float %487, %495, !dbg !31
  %538 = fsub float %484, %498, !dbg !31
  %539 = fsub float %484, %500, !dbg !31
  %540 = fsub float %487, %498, !dbg !31
  %541 = fsub float %487, %500, !dbg !31
  %542 = fsub float %484, %503, !dbg !31
  %543 = fsub float %484, %505, !dbg !31
  %544 = fsub float %487, %503, !dbg !31
  %545 = fsub float %487, %505, !dbg !31
  %546 = fmul float %506, 0x3FF7154760000000, !dbg !33
  %547 = tail call float @llvm.nvvm.ex2.approx.f(float %546), !dbg !33
  %548 = fmul float %507, 0x3FF7154760000000, !dbg !33
  %549 = tail call float @llvm.nvvm.ex2.approx.f(float %548), !dbg !33
  %550 = fmul float %508, 0x3FF7154760000000, !dbg !33
  %551 = tail call float @llvm.nvvm.ex2.approx.f(float %550), !dbg !33
  %552 = fmul float %509, 0x3FF7154760000000, !dbg !33
  %553 = tail call float @llvm.nvvm.ex2.approx.f(float %552), !dbg !33
  %554 = fmul float %510, 0x3FF7154760000000, !dbg !33
  %555 = tail call float @llvm.nvvm.ex2.approx.f(float %554), !dbg !33
  %556 = fmul float %511, 0x3FF7154760000000, !dbg !33
  %557 = tail call float @llvm.nvvm.ex2.approx.f(float %556), !dbg !33
  %558 = fmul float %512, 0x3FF7154760000000, !dbg !33
  %559 = tail call float @llvm.nvvm.ex2.approx.f(float %558), !dbg !33
  %560 = fmul float %513, 0x3FF7154760000000, !dbg !33
  %561 = tail call float @llvm.nvvm.ex2.approx.f(float %560), !dbg !33
  %562 = fmul float %514, 0x3FF7154760000000, !dbg !33
  %563 = tail call float @llvm.nvvm.ex2.approx.f(float %562), !dbg !33
  %564 = fmul float %515, 0x3FF7154760000000, !dbg !33
  %565 = tail call float @llvm.nvvm.ex2.approx.f(float %564), !dbg !33
  %566 = fmul float %516, 0x3FF7154760000000, !dbg !33
  %567 = tail call float @llvm.nvvm.ex2.approx.f(float %566), !dbg !33
  %568 = fmul float %517, 0x3FF7154760000000, !dbg !33
  %569 = tail call float @llvm.nvvm.ex2.approx.f(float %568), !dbg !33
  %570 = fmul float %518, 0x3FF7154760000000, !dbg !33
  %571 = tail call float @llvm.nvvm.ex2.approx.f(float %570), !dbg !33
  %572 = fmul float %519, 0x3FF7154760000000, !dbg !33
  %573 = tail call float @llvm.nvvm.ex2.approx.f(float %572), !dbg !33
  %574 = fmul float %520, 0x3FF7154760000000, !dbg !33
  %575 = tail call float @llvm.nvvm.ex2.approx.f(float %574), !dbg !33
  %576 = fmul float %521, 0x3FF7154760000000, !dbg !33
  %577 = tail call float @llvm.nvvm.ex2.approx.f(float %576), !dbg !33
  %578 = fmul float %522, 0x3FF7154760000000, !dbg !33
  %579 = tail call float @llvm.nvvm.ex2.approx.f(float %578), !dbg !33
  %580 = fmul float %523, 0x3FF7154760000000, !dbg !33
  %581 = tail call float @llvm.nvvm.ex2.approx.f(float %580), !dbg !33
  %582 = fmul float %524, 0x3FF7154760000000, !dbg !33
  %583 = tail call float @llvm.nvvm.ex2.approx.f(float %582), !dbg !33
  %584 = fmul float %525, 0x3FF7154760000000, !dbg !33
  %585 = tail call float @llvm.nvvm.ex2.approx.f(float %584), !dbg !33
  %586 = fmul float %526, 0x3FF7154760000000, !dbg !33
  %587 = tail call float @llvm.nvvm.ex2.approx.f(float %586), !dbg !33
  %588 = fmul float %527, 0x3FF7154760000000, !dbg !33
  %589 = tail call float @llvm.nvvm.ex2.approx.f(float %588), !dbg !33
  %590 = fmul float %528, 0x3FF7154760000000, !dbg !33
  %591 = tail call float @llvm.nvvm.ex2.approx.f(float %590), !dbg !33
  %592 = fmul float %529, 0x3FF7154760000000, !dbg !33
  %593 = tail call float @llvm.nvvm.ex2.approx.f(float %592), !dbg !33
  %594 = fmul float %530, 0x3FF7154760000000, !dbg !33
  %595 = tail call float @llvm.nvvm.ex2.approx.f(float %594), !dbg !33
  %596 = fmul float %531, 0x3FF7154760000000, !dbg !33
  %597 = tail call float @llvm.nvvm.ex2.approx.f(float %596), !dbg !33
  %598 = fmul float %532, 0x3FF7154760000000, !dbg !33
  %599 = tail call float @llvm.nvvm.ex2.approx.f(float %598), !dbg !33
  %600 = fmul float %533, 0x3FF7154760000000, !dbg !33
  %601 = tail call float @llvm.nvvm.ex2.approx.f(float %600), !dbg !33
  %602 = fmul float %534, 0x3FF7154760000000, !dbg !33
  %603 = tail call float @llvm.nvvm.ex2.approx.f(float %602), !dbg !33
  %604 = fmul float %535, 0x3FF7154760000000, !dbg !33
  %605 = tail call float @llvm.nvvm.ex2.approx.f(float %604), !dbg !33
  %606 = fmul float %536, 0x3FF7154760000000, !dbg !33
  %607 = tail call float @llvm.nvvm.ex2.approx.f(float %606), !dbg !33
  %608 = fmul float %537, 0x3FF7154760000000, !dbg !33
  %609 = tail call float @llvm.nvvm.ex2.approx.f(float %608), !dbg !33
  %610 = fmul float %538, 0x3FF7154760000000, !dbg !33
  %611 = tail call float @llvm.nvvm.ex2.approx.f(float %610), !dbg !33
  %612 = fmul float %539, 0x3FF7154760000000, !dbg !33
  %613 = tail call float @llvm.nvvm.ex2.approx.f(float %612), !dbg !33
  %614 = fmul float %540, 0x3FF7154760000000, !dbg !33
  %615 = tail call float @llvm.nvvm.ex2.approx.f(float %614), !dbg !33
  %616 = fmul float %541, 0x3FF7154760000000, !dbg !33
  %617 = tail call float @llvm.nvvm.ex2.approx.f(float %616), !dbg !33
  %618 = fmul float %542, 0x3FF7154760000000, !dbg !33
  %619 = tail call float @llvm.nvvm.ex2.approx.f(float %618), !dbg !33
  %620 = fmul float %543, 0x3FF7154760000000, !dbg !33
  %621 = tail call float @llvm.nvvm.ex2.approx.f(float %620), !dbg !33
  %622 = fmul float %544, 0x3FF7154760000000, !dbg !33
  %623 = tail call float @llvm.nvvm.ex2.approx.f(float %622), !dbg !33
  %624 = fmul float %545, 0x3FF7154760000000, !dbg !33
  %625 = tail call float @llvm.nvvm.ex2.approx.f(float %624), !dbg !33
  %626 = fmul float %331, %547, !dbg !34
  %627 = fmul float %332, %549, !dbg !34
  %628 = fmul float %333, %551, !dbg !34
  %629 = fmul float %334, %553, !dbg !34
  %630 = fmul float %351, %555, !dbg !34
  %631 = fmul float %352, %557, !dbg !34
  %632 = fmul float %353, %559, !dbg !34
  %633 = fmul float %354, %561, !dbg !34
  %634 = fmul float %356, %563, !dbg !34
  %635 = fmul float %357, %565, !dbg !34
  %636 = fmul float %358, %567, !dbg !34
  %637 = fmul float %359, %569, !dbg !34
  %638 = fmul float %371, %571, !dbg !34
  %639 = fmul float %372, %573, !dbg !34
  %640 = fmul float %373, %575, !dbg !34
  %641 = fmul float %374, %577, !dbg !34
  %642 = fmul float %376, %579, !dbg !34
  %643 = fmul float %377, %581, !dbg !34
  %644 = fmul float %378, %583, !dbg !34
  %645 = fmul float %379, %585, !dbg !34
  %646 = fmul float %381, %587, !dbg !34
  %647 = fmul float %382, %589, !dbg !34
  %648 = fmul float %383, %591, !dbg !34
  %649 = fmul float %384, %593, !dbg !34
  %650 = fmul float %391, %595, !dbg !34
  %651 = fmul float %392, %597, !dbg !34
  %652 = fmul float %393, %599, !dbg !34
  %653 = fmul float %394, %601, !dbg !34
  %654 = fmul float %396, %603, !dbg !34
  %655 = fmul float %397, %605, !dbg !34
  %656 = fmul float %398, %607, !dbg !34
  %657 = fmul float %399, %609, !dbg !34
  %658 = fmul float %401, %611, !dbg !34
  %659 = fmul float %402, %613, !dbg !34
  %660 = fmul float %403, %615, !dbg !34
  %661 = fmul float %404, %617, !dbg !34
  %662 = fmul float %406, %619, !dbg !34
  %663 = fmul float %407, %621, !dbg !34
  %664 = fmul float %408, %623, !dbg !34
  %665 = fmul float %409, %625, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %666 = or disjoint i32 %16, %19, !dbg !35
  %667 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %26, !dbg !35
  %668 = insertelement <1 x i16> poison, i16 %49, i64 0, !dbg !35
  store <1 x i16> %668, ptr addrspace(3) %667, align 2, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %669 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %666, !dbg !35
  %670 = load bfloat, ptr addrspace(3) %669, align 8, !dbg !35
  %671 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 2, !dbg !35
  %672 = load bfloat, ptr addrspace(3) %671, align 2, !dbg !35
  %673 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 4, !dbg !35
  %674 = load bfloat, ptr addrspace(3) %673, align 4, !dbg !35
  %675 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 6, !dbg !35
  %676 = load bfloat, ptr addrspace(3) %675, align 2, !dbg !35
  %677 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 32, !dbg !35
  %678 = load bfloat, ptr addrspace(3) %677, align 8, !dbg !35
  %679 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 34, !dbg !35
  %680 = load bfloat, ptr addrspace(3) %679, align 2, !dbg !35
  %681 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 36, !dbg !35
  %682 = load bfloat, ptr addrspace(3) %681, align 4, !dbg !35
  %683 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 38, !dbg !35
  %684 = load bfloat, ptr addrspace(3) %683, align 2, !dbg !35
  %685 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 64, !dbg !35
  %686 = load bfloat, ptr addrspace(3) %685, align 8, !dbg !35
  %687 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 66, !dbg !35
  %688 = load bfloat, ptr addrspace(3) %687, align 2, !dbg !35
  %689 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 68, !dbg !35
  %690 = load bfloat, ptr addrspace(3) %689, align 4, !dbg !35
  %691 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 70, !dbg !35
  %692 = load bfloat, ptr addrspace(3) %691, align 2, !dbg !35
  %693 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 96, !dbg !35
  %694 = load bfloat, ptr addrspace(3) %693, align 8, !dbg !35
  %695 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 98, !dbg !35
  %696 = load bfloat, ptr addrspace(3) %695, align 2, !dbg !35
  %697 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 100, !dbg !35
  %698 = load bfloat, ptr addrspace(3) %697, align 4, !dbg !35
  %699 = getelementptr inbounds nuw i8, ptr addrspace(3) %669, i32 102, !dbg !35
  %700 = load bfloat, ptr addrspace(3) %699, align 2, !dbg !35
  %701 = fpext bfloat %670 to float, !dbg !35
  %702 = fpext bfloat %672 to float, !dbg !35
  %703 = fpext bfloat %674 to float, !dbg !35
  %704 = fpext bfloat %676 to float, !dbg !35
  %705 = fpext bfloat %678 to float, !dbg !35
  %706 = fpext bfloat %680 to float, !dbg !35
  %707 = fpext bfloat %682 to float, !dbg !35
  %708 = fpext bfloat %684 to float, !dbg !35
  %709 = fpext bfloat %686 to float, !dbg !35
  %710 = fpext bfloat %688 to float, !dbg !35
  %711 = fpext bfloat %690 to float, !dbg !35
  %712 = fpext bfloat %692 to float, !dbg !35
  %713 = fpext bfloat %694 to float, !dbg !35
  %714 = fpext bfloat %696 to float, !dbg !35
  %715 = fpext bfloat %698 to float, !dbg !35
  %716 = fpext bfloat %700 to float, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %717 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %666, !dbg !35
  store float %701, ptr addrspace(3) %717, align 16, !dbg !35
  %718 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 4, !dbg !35
  store float %702, ptr addrspace(3) %718, align 4, !dbg !35
  %719 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 8, !dbg !35
  store float %703, ptr addrspace(3) %719, align 8, !dbg !35
  %720 = getelementptr inbounds nuw i8, ptr addrspace(3) %717, i32 12, !dbg !35
  store float %704, ptr addrspace(3) %720, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %721 = load float, ptr addrspace(3) %468, align 4, !dbg !35
  %722 = load float, ptr addrspace(3) %470, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  store float %705, ptr addrspace(3) %717, align 16, !dbg !35
  store float %706, ptr addrspace(3) %718, align 4, !dbg !35
  store float %707, ptr addrspace(3) %719, align 8, !dbg !35
  store float %708, ptr addrspace(3) %720, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %723 = load float, ptr addrspace(3) %468, align 4, !dbg !35
  %724 = load float, ptr addrspace(3) %470, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  store float %709, ptr addrspace(3) %717, align 16, !dbg !35
  store float %710, ptr addrspace(3) %718, align 4, !dbg !35
  store float %711, ptr addrspace(3) %719, align 8, !dbg !35
  store float %712, ptr addrspace(3) %720, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %725 = load float, ptr addrspace(3) %468, align 4, !dbg !35
  %726 = load float, ptr addrspace(3) %470, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  store float %713, ptr addrspace(3) %717, align 16, !dbg !35
  store float %714, ptr addrspace(3) %718, align 4, !dbg !35
  store float %715, ptr addrspace(3) %719, align 8, !dbg !35
  store float %716, ptr addrspace(3) %720, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %727 = load float, ptr addrspace(3) %468, align 4, !dbg !35
  %728 = load float, ptr addrspace(3) %470, align 4, !dbg !35
  %729 = fmul float %626, %721, !dbg !35
  %730 = fmul float %627, %721, !dbg !35
  %731 = fmul float %628, %722, !dbg !35
  %732 = fmul float %629, %722, !dbg !35
  %733 = fmul float %630, %723, !dbg !35
  %734 = fmul float %631, %723, !dbg !35
  %735 = fmul float %632, %724, !dbg !35
  %736 = fmul float %633, %724, !dbg !35
  %737 = fmul float %634, %723, !dbg !35
  %738 = fmul float %635, %723, !dbg !35
  %739 = fmul float %636, %724, !dbg !35
  %740 = fmul float %637, %724, !dbg !35
  %741 = fmul float %638, %725, !dbg !35
  %742 = fmul float %639, %725, !dbg !35
  %743 = fmul float %640, %726, !dbg !35
  %744 = fmul float %641, %726, !dbg !35
  %745 = fmul float %642, %725, !dbg !35
  %746 = fmul float %643, %725, !dbg !35
  %747 = fmul float %644, %726, !dbg !35
  %748 = fmul float %645, %726, !dbg !35
  %749 = fmul float %646, %725, !dbg !35
  %750 = fmul float %647, %725, !dbg !35
  %751 = fmul float %648, %726, !dbg !35
  %752 = fmul float %649, %726, !dbg !35
  %753 = fmul float %650, %727, !dbg !35
  %754 = fmul float %651, %727, !dbg !35
  %755 = fmul float %652, %728, !dbg !35
  %756 = fmul float %653, %728, !dbg !35
  %757 = fmul float %654, %727, !dbg !35
  %758 = fmul float %655, %727, !dbg !35
  %759 = fmul float %656, %728, !dbg !35
  %760 = fmul float %657, %728, !dbg !35
  %761 = fmul float %658, %727, !dbg !35
  %762 = fmul float %659, %727, !dbg !35
  %763 = fmul float %660, %728, !dbg !35
  %764 = fmul float %661, %728, !dbg !35
  %765 = fmul float %662, %727, !dbg !35
  %766 = fmul float %663, %727, !dbg !35
  %767 = fmul float %664, %728, !dbg !35
  %768 = fmul float %665, %728, !dbg !35
  %769 = icmp samesign ugt i32 %17, %437, !dbg !32
  %770 = icmp samesign ugt i32 %17, %443, !dbg !32
  %771 = icmp samesign ugt i32 %436, %437, !dbg !32
  %772 = icmp samesign ugt i32 %436, %443, !dbg !32
  %773 = icmp samesign ugt i32 %435, %441, !dbg !32
  %774 = icmp samesign ugt i32 %434, %442, !dbg !32
  %775 = icmp samesign ugt i32 %434, %441, !dbg !32
  %776 = extractelement <4 x i32> %440, i64 1, !dbg !32
  %777 = icmp samesign ugt i32 %476, %776, !dbg !32
  %778 = icmp samesign ugt i32 %479, %496, !dbg !32
  %779 = icmp samesign ugt i32 %479, %776, !dbg !32
  %780 = extractelement <4 x i32> %440, i64 3, !dbg !32
  %781 = icmp samesign ugt i32 %482, %780, !dbg !32
  %782 = icmp samesign ugt i32 %485, %501, !dbg !32
  %783 = icmp samesign ugt i32 %485, %780, !dbg !32
  %784 = extractelement <16 x i1> %461, i64 2, !dbg !36
  %785 = extractelement <16 x i1> %461, i64 8, !dbg !36
  %786 = and i1 %784, %785, !dbg !37
  %787 = extractelement <16 x i1> %461, i64 9, !dbg !36
  %788 = and i1 %784, %787, !dbg !37
  %789 = extractelement <16 x i1> %461, i64 3, !dbg !36
  %790 = and i1 %789, %785, !dbg !37
  %791 = and i1 %789, %787, !dbg !37
  %792 = extractelement <16 x i1> %461, i64 4, !dbg !36
  %793 = and i1 %792, %785, !dbg !37
  %794 = and i1 %792, %787, !dbg !37
  %795 = extractelement <16 x i1> %461, i64 5, !dbg !36
  %796 = and i1 %795, %785, !dbg !37
  %797 = and i1 %795, %787, !dbg !37
  %798 = extractelement <16 x i1> %461, i64 10, !dbg !36
  %799 = and i1 %792, %798, !dbg !37
  %800 = extractelement <16 x i1> %461, i64 11, !dbg !36
  %801 = and i1 %792, %800, !dbg !37
  %802 = and i1 %795, %798, !dbg !37
  %803 = and i1 %795, %800, !dbg !37
  %804 = extractelement <16 x i1> %461, i64 6, !dbg !36
  %805 = and i1 %804, %785, !dbg !37
  %806 = and i1 %804, %787, !dbg !37
  %807 = extractelement <16 x i1> %461, i64 7, !dbg !36
  %808 = and i1 %807, %785, !dbg !37
  %809 = and i1 %807, %787, !dbg !37
  %810 = and i1 %804, %798, !dbg !37
  %811 = and i1 %804, %800, !dbg !37
  %812 = and i1 %807, %798, !dbg !37
  %813 = and i1 %807, %800, !dbg !37
  %814 = extractelement <16 x i1> %461, i64 12, !dbg !36
  %815 = and i1 %804, %814, !dbg !37
  %816 = extractelement <16 x i1> %461, i64 13, !dbg !36
  %817 = and i1 %804, %816, !dbg !37
  %818 = and i1 %807, %814, !dbg !37
  %819 = and i1 %807, %816, !dbg !37
  %820 = and i1 %769, %785, !dbg !36
  %821 = extractelement <16 x i1> %461, i64 0, !dbg !36
  %822 = and i1 %821, %820, !dbg !36
  %823 = and i1 %770, %787, !dbg !36
  %824 = and i1 %821, %823, !dbg !36
  %825 = and i1 %771, %785, !dbg !36
  %826 = extractelement <16 x i1> %461, i64 1, !dbg !36
  %827 = and i1 %826, %825, !dbg !36
  %828 = and i1 %772, %787, !dbg !36
  %829 = and i1 %826, %828, !dbg !36
  %830 = and i1 %769, %798, !dbg !36
  %831 = and i1 %784, %830, !dbg !36
  %832 = and i1 %773, %800, !dbg !36
  %833 = and i1 %784, %832, !dbg !36
  %834 = and i1 %774, %798, !dbg !36
  %835 = and i1 %789, %834, !dbg !36
  %836 = and i1 %775, %800, !dbg !36
  %837 = and i1 %789, %836, !dbg !36
  %838 = and i1 %769, %814, !dbg !36
  %839 = and i1 %792, %838, !dbg !36
  %840 = and i1 %777, %816, !dbg !36
  %841 = and i1 %792, %840, !dbg !36
  %842 = and i1 %778, %814, !dbg !36
  %843 = and i1 %795, %842, !dbg !36
  %844 = and i1 %779, %816, !dbg !36
  %845 = and i1 %795, %844, !dbg !36
  %846 = extractelement <16 x i1> %461, i64 14, !dbg !36
  %847 = and i1 %769, %846, !dbg !36
  %848 = and i1 %804, %847, !dbg !36
  %849 = extractelement <16 x i1> %461, i64 15, !dbg !36
  %850 = and i1 %781, %849, !dbg !36
  %851 = and i1 %804, %850, !dbg !36
  %852 = and i1 %782, %846, !dbg !36
  %853 = and i1 %807, %852, !dbg !36
  %854 = and i1 %783, %849, !dbg !36
  %855 = and i1 %807, %854, !dbg !36
  %856 = shl i32 %50, 6, !dbg !38
  %857 = sext i32 %856 to i64, !dbg !39
  %858 = getelementptr float, ptr addrspace(1) %3, i64 %857, !dbg !39
  %859 = and i32 %.lobit13, 3, !dbg !13
  %860 = insertelement <8 x i32> poison, i32 %.lobit13, i64 0, !dbg !13
  %861 = insertelement <8 x i32> %860, i32 %859, i64 1, !dbg !13
  %862 = shufflevector <8 x i32> %861, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !13
  %863 = or <8 x i32> %862, <i32 60, i32 56, i32 52, i32 48, i32 44, i32 40, i32 36, i32 32>, !dbg !13
  %864 = insertelement <4 x i32> poison, i32 %859, i64 0, !dbg !13
  %865 = shufflevector <4 x i32> %864, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %866 = or disjoint <4 x i32> %865, <i32 28, i32 24, i32 20, i32 16>, !dbg !13
  %867 = insertelement <2 x i32> poison, i32 %859, i64 0, !dbg !13
  %868 = shufflevector <2 x i32> %867, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %869 = or disjoint <2 x i32> %868, <i32 12, i32 8>, !dbg !13
  %870 = or disjoint i32 %859, 4, !dbg !13
  %871 = insertelement <16 x i32> poison, i32 %870, i64 14, !dbg !18
  %872 = insertelement <16 x i32> %871, i32 %859, i64 15, !dbg !18
  %873 = shufflevector <8 x i32> %863, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %874 = shufflevector <16 x i32> %873, <16 x i32> %872, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !18
  %875 = shufflevector <4 x i32> %866, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %876 = shufflevector <16 x i32> %874, <16 x i32> %875, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !18
  %877 = shufflevector <2 x i32> %869, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %878 = shufflevector <16 x i32> %876, <16 x i32> %877, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !18
  %879 = or disjoint <16 x i32> %878, %457, !dbg !18
  %880 = extractelement <16 x i32> %879, i64 15, !dbg !40
  %881 = sext i32 %880 to i64, !dbg !40
  %.idx28 = shl nsw i64 %881, 13, !dbg !40
  %882 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx28, !dbg !40
  %883 = getelementptr float, ptr addrspace(1) %882, i64 %428, !dbg !40
  %884 = extractelement <16 x i32> %879, i64 14, !dbg !40
  %885 = sext i32 %884 to i64, !dbg !40
  %.idx29 = shl nsw i64 %885, 13, !dbg !40
  %886 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx29, !dbg !40
  %887 = getelementptr float, ptr addrspace(1) %886, i64 %428, !dbg !40
  %888 = extractelement <16 x i32> %879, i64 13, !dbg !40
  %889 = sext i32 %888 to i64, !dbg !40
  %.idx30 = shl nsw i64 %889, 13, !dbg !40
  %890 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx30, !dbg !40
  %891 = getelementptr float, ptr addrspace(1) %890, i64 %428, !dbg !40
  %892 = extractelement <16 x i32> %879, i64 12, !dbg !40
  %893 = sext i32 %892 to i64, !dbg !40
  %.idx31 = shl nsw i64 %893, 13, !dbg !40
  %894 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx31, !dbg !40
  %895 = getelementptr float, ptr addrspace(1) %894, i64 %428, !dbg !40
  %896 = extractelement <16 x i32> %879, i64 11, !dbg !40
  %897 = sext i32 %896 to i64, !dbg !40
  %.idx32 = shl nsw i64 %897, 13, !dbg !40
  %898 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx32, !dbg !40
  %899 = getelementptr float, ptr addrspace(1) %898, i64 %428, !dbg !40
  %900 = extractelement <16 x i32> %879, i64 10, !dbg !40
  %901 = sext i32 %900 to i64, !dbg !40
  %.idx33 = shl nsw i64 %901, 13, !dbg !40
  %902 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx33, !dbg !40
  %903 = getelementptr float, ptr addrspace(1) %902, i64 %428, !dbg !40
  %904 = extractelement <16 x i32> %879, i64 9, !dbg !40
  %905 = sext i32 %904 to i64, !dbg !40
  %.idx34 = shl nsw i64 %905, 13, !dbg !40
  %906 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx34, !dbg !40
  %907 = getelementptr float, ptr addrspace(1) %906, i64 %428, !dbg !40
  %908 = extractelement <16 x i32> %879, i64 8, !dbg !40
  %909 = sext i32 %908 to i64, !dbg !40
  %.idx35 = shl nsw i64 %909, 13, !dbg !40
  %910 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx35, !dbg !40
  %911 = getelementptr float, ptr addrspace(1) %910, i64 %428, !dbg !40
  %912 = extractelement <16 x i32> %879, i64 7, !dbg !40
  %913 = sext i32 %912 to i64, !dbg !40
  %.idx36 = shl nsw i64 %913, 13, !dbg !40
  %914 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx36, !dbg !40
  %915 = getelementptr float, ptr addrspace(1) %914, i64 %428, !dbg !40
  %916 = extractelement <16 x i32> %879, i64 6, !dbg !40
  %917 = sext i32 %916 to i64, !dbg !40
  %.idx37 = shl nsw i64 %917, 13, !dbg !40
  %918 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx37, !dbg !40
  %919 = getelementptr float, ptr addrspace(1) %918, i64 %428, !dbg !40
  %920 = extractelement <16 x i32> %879, i64 5, !dbg !40
  %921 = sext i32 %920 to i64, !dbg !40
  %.idx38 = shl nsw i64 %921, 13, !dbg !40
  %922 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx38, !dbg !40
  %923 = getelementptr float, ptr addrspace(1) %922, i64 %428, !dbg !40
  %924 = extractelement <16 x i32> %879, i64 4, !dbg !40
  %925 = sext i32 %924 to i64, !dbg !40
  %.idx39 = shl nsw i64 %925, 13, !dbg !40
  %926 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx39, !dbg !40
  %927 = getelementptr float, ptr addrspace(1) %926, i64 %428, !dbg !40
  %928 = extractelement <16 x i32> %879, i64 3, !dbg !40
  %929 = sext i32 %928 to i64, !dbg !40
  %.idx40 = shl nsw i64 %929, 13, !dbg !40
  %930 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx40, !dbg !40
  %931 = getelementptr float, ptr addrspace(1) %930, i64 %428, !dbg !40
  %932 = extractelement <16 x i32> %879, i64 2, !dbg !40
  %933 = sext i32 %932 to i64, !dbg !40
  %.idx41 = shl nsw i64 %933, 13, !dbg !40
  %934 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx41, !dbg !40
  %935 = getelementptr float, ptr addrspace(1) %934, i64 %428, !dbg !40
  %936 = extractelement <16 x i32> %879, i64 1, !dbg !40
  %937 = sext i32 %936 to i64, !dbg !40
  %.idx42 = shl nsw i64 %937, 13, !dbg !40
  %938 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx42, !dbg !40
  %939 = getelementptr float, ptr addrspace(1) %938, i64 %428, !dbg !40
  %940 = extractelement <16 x i32> %879, i64 0, !dbg !40
  %941 = sext i32 %940 to i64, !dbg !40
  %.idx43 = shl nsw i64 %941, 13, !dbg !40
  %942 = getelementptr i8, ptr addrspace(1) %858, i64 %.idx43, !dbg !40
  %943 = getelementptr float, ptr addrspace(1) %942, i64 %428, !dbg !40
  %944 = icmp slt <16 x i32> %879, %460, !dbg !40
  %945 = extractelement <16 x i1> %944, i64 15, !dbg !40
  %946 = and i1 %46, %945, !dbg !40
  %947 = extractelement <16 x i1> %944, i64 14, !dbg !40
  %948 = and i1 %46, %947, !dbg !40
  %949 = extractelement <16 x i1> %944, i64 13, !dbg !40
  %950 = and i1 %46, %949, !dbg !40
  %951 = extractelement <16 x i1> %944, i64 12, !dbg !40
  %952 = and i1 %46, %951, !dbg !40
  %953 = extractelement <16 x i1> %944, i64 11, !dbg !40
  %954 = and i1 %46, %953, !dbg !40
  %955 = extractelement <16 x i1> %944, i64 10, !dbg !40
  %956 = and i1 %46, %955, !dbg !40
  %957 = extractelement <16 x i1> %944, i64 9, !dbg !40
  %958 = and i1 %46, %957, !dbg !40
  %959 = extractelement <16 x i1> %944, i64 8, !dbg !40
  %960 = and i1 %46, %959, !dbg !40
  %961 = extractelement <16 x i1> %944, i64 7, !dbg !40
  %962 = and i1 %46, %961, !dbg !40
  %963 = extractelement <16 x i1> %944, i64 6, !dbg !40
  %964 = and i1 %46, %963, !dbg !40
  %965 = extractelement <16 x i1> %944, i64 5, !dbg !40
  %966 = and i1 %46, %965, !dbg !40
  %967 = extractelement <16 x i1> %944, i64 4, !dbg !40
  %968 = and i1 %46, %967, !dbg !40
  %969 = extractelement <16 x i1> %944, i64 3, !dbg !40
  %970 = and i1 %46, %969, !dbg !40
  %971 = extractelement <16 x i1> %944, i64 2, !dbg !40
  %972 = and i1 %46, %971, !dbg !40
  %973 = extractelement <16 x i1> %944, i64 1, !dbg !40
  %974 = and i1 %46, %973, !dbg !40
  %975 = extractelement <16 x i1> %944, i64 0, !dbg !40
  %976 = and i1 %46, %975, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %977 = shl nuw nsw i32 %12, 4, !dbg !40
  %978 = and i32 %977, 448, !dbg !40
  %979 = or disjoint i32 %978, %430, !dbg !40
  %980 = or disjoint i32 %979, %19, !dbg !40
  %981 = and i32 %426, 252, !dbg !40
  %982 = lshr exact i32 %978, 2, !dbg !40
  %983 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %982, !dbg !40
  %984 = getelementptr inbounds nuw float, ptr addrspace(3) %983, i32 %980, !dbg !40
  %985 = bitcast float %729 to i32, !dbg !40
  %986 = select i1 %822, i32 %985, i32 0, !dbg !41
  %987 = bitcast float %730 to i32, !dbg !40
  %988 = select i1 %824, i32 %987, i32 0, !dbg !41
  %989 = insertelement <2 x i32> poison, i32 %986, i64 0, !dbg !40
  %990 = insertelement <2 x i32> %989, i32 %988, i64 1, !dbg !40
  store <2 x i32> %990, ptr addrspace(3) %984, align 8, !dbg !40
  %991 = or disjoint i32 %980, 512, !dbg !40
  %992 = lshr i32 %991, 4, !dbg !40
  %993 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %992, !dbg !40
  %994 = getelementptr inbounds nuw float, ptr addrspace(3) %993, i32 %991, !dbg !40
  %995 = bitcast float %731 to i32, !dbg !40
  %996 = select i1 %827, i32 %995, i32 0, !dbg !41
  %997 = bitcast float %732 to i32, !dbg !40
  %998 = select i1 %829, i32 %997, i32 0, !dbg !41
  %999 = insertelement <2 x i32> poison, i32 %996, i64 0, !dbg !40
  %1000 = insertelement <2 x i32> %999, i32 %998, i64 1, !dbg !40
  store <2 x i32> %1000, ptr addrspace(3) %994, align 8, !dbg !40
  %1001 = getelementptr inbounds nuw i8, ptr addrspace(3) %984, i32 64, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1001, align 8, !dbg !40
  %1002 = or disjoint i32 %980, 528, !dbg !40
  %1003 = lshr i32 %1002, 4, !dbg !40
  %1004 = and i32 %1003, 60, !dbg !40
  %1005 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1004, !dbg !40
  %1006 = getelementptr inbounds nuw float, ptr addrspace(3) %1005, i32 %1002, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1006, align 8, !dbg !40
  %1007 = getelementptr inbounds nuw i8, ptr addrspace(3) %984, i32 128, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1007, align 8, !dbg !40
  %1008 = or disjoint i32 %980, 544, !dbg !40
  %1009 = lshr i32 %1008, 4, !dbg !40
  %1010 = and i32 %1009, 60, !dbg !40
  %1011 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1010, !dbg !40
  %1012 = getelementptr inbounds nuw float, ptr addrspace(3) %1011, i32 %1008, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1012, align 8, !dbg !40
  %1013 = getelementptr inbounds nuw i8, ptr addrspace(3) %984, i32 192, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1013, align 8, !dbg !40
  %1014 = or disjoint i32 %980, 560, !dbg !40
  %1015 = lshr i32 %1014, 4, !dbg !40
  %1016 = and i32 %1015, 60, !dbg !40
  %1017 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1016, !dbg !40
  %1018 = getelementptr inbounds nuw float, ptr addrspace(3) %1017, i32 %1014, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1018, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1019 = and i32 %.lobit172, 12, !dbg !40
  %1020 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1019, !dbg !40
  %1021 = getelementptr inbounds nuw float, ptr addrspace(3) %1020, i32 %981, !dbg !40
  %1022 = load <4 x i32>, ptr addrspace(3) %1021, align 16, !dbg !40
  %1023 = or disjoint i32 %981, 256, !dbg !40
  %1024 = lshr i32 %1023, 4, !dbg !40
  %1025 = and i32 %1024, 28, !dbg !40
  %1026 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1025, !dbg !40
  %1027 = getelementptr inbounds nuw float, ptr addrspace(3) %1026, i32 %1023, !dbg !40
  %1028 = load <4 x i32>, ptr addrspace(3) %1027, align 16, !dbg !40
  %1029 = or disjoint i32 %981, 512, !dbg !40
  %1030 = lshr i32 %1029, 4, !dbg !40
  %1031 = and i32 %1030, 44, !dbg !40
  %1032 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1031, !dbg !40
  %1033 = getelementptr inbounds nuw float, ptr addrspace(3) %1032, i32 %1029, !dbg !40
  %1034 = load <4 x i32>, ptr addrspace(3) %1033, align 16, !dbg !40
  %1035 = or disjoint i32 %981, 768, !dbg !40
  %1036 = lshr i32 %1035, 4, !dbg !40
  %1037 = and i32 %1036, 60, !dbg !40
  %1038 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1037, !dbg !40
  %1039 = getelementptr inbounds nuw float, ptr addrspace(3) %1038, i32 %1035, !dbg !40
  %1040 = load <4 x i32>, ptr addrspace(3) %1039, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1041 = bitcast float %733 to i32, !dbg !40
  %1042 = select i1 %786, i32 %1041, i32 0, !dbg !41
  %1043 = bitcast float %734 to i32, !dbg !40
  %1044 = select i1 %788, i32 %1043, i32 0, !dbg !41
  %1045 = insertelement <2 x i32> poison, i32 %1042, i64 0, !dbg !40
  %1046 = insertelement <2 x i32> %1045, i32 %1044, i64 1, !dbg !40
  store <2 x i32> %1046, ptr addrspace(3) %984, align 8, !dbg !40
  %1047 = bitcast float %735 to i32, !dbg !40
  %1048 = select i1 %790, i32 %1047, i32 0, !dbg !41
  %1049 = bitcast float %736 to i32, !dbg !40
  %1050 = select i1 %791, i32 %1049, i32 0, !dbg !41
  %1051 = insertelement <2 x i32> poison, i32 %1048, i64 0, !dbg !40
  %1052 = insertelement <2 x i32> %1051, i32 %1050, i64 1, !dbg !40
  store <2 x i32> %1052, ptr addrspace(3) %994, align 8, !dbg !40
  %1053 = bitcast float %737 to i32, !dbg !40
  %1054 = select i1 %831, i32 %1053, i32 0, !dbg !41
  %1055 = bitcast float %738 to i32, !dbg !40
  %1056 = select i1 %833, i32 %1055, i32 0, !dbg !41
  %1057 = insertelement <2 x i32> poison, i32 %1054, i64 0, !dbg !40
  %1058 = insertelement <2 x i32> %1057, i32 %1056, i64 1, !dbg !40
  store <2 x i32> %1058, ptr addrspace(3) %1001, align 8, !dbg !40
  %1059 = bitcast float %739 to i32, !dbg !40
  %1060 = select i1 %835, i32 %1059, i32 0, !dbg !41
  %1061 = bitcast float %740 to i32, !dbg !40
  %1062 = select i1 %837, i32 %1061, i32 0, !dbg !41
  %1063 = insertelement <2 x i32> poison, i32 %1060, i64 0, !dbg !40
  %1064 = insertelement <2 x i32> %1063, i32 %1062, i64 1, !dbg !40
  store <2 x i32> %1064, ptr addrspace(3) %1006, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1007, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1012, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1013, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1018, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1065 = load <4 x i32>, ptr addrspace(3) %1021, align 16, !dbg !40
  %1066 = load <4 x i32>, ptr addrspace(3) %1027, align 16, !dbg !40
  %1067 = load <4 x i32>, ptr addrspace(3) %1033, align 16, !dbg !40
  %1068 = load <4 x i32>, ptr addrspace(3) %1039, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1069 = bitcast float %741 to i32, !dbg !40
  %1070 = select i1 %793, i32 %1069, i32 0, !dbg !41
  %1071 = bitcast float %742 to i32, !dbg !40
  %1072 = select i1 %794, i32 %1071, i32 0, !dbg !41
  %1073 = insertelement <2 x i32> poison, i32 %1070, i64 0, !dbg !40
  %1074 = insertelement <2 x i32> %1073, i32 %1072, i64 1, !dbg !40
  store <2 x i32> %1074, ptr addrspace(3) %984, align 8, !dbg !40
  %1075 = bitcast float %743 to i32, !dbg !40
  %1076 = select i1 %796, i32 %1075, i32 0, !dbg !41
  %1077 = bitcast float %744 to i32, !dbg !40
  %1078 = select i1 %797, i32 %1077, i32 0, !dbg !41
  %1079 = insertelement <2 x i32> poison, i32 %1076, i64 0, !dbg !40
  %1080 = insertelement <2 x i32> %1079, i32 %1078, i64 1, !dbg !40
  store <2 x i32> %1080, ptr addrspace(3) %994, align 8, !dbg !40
  %1081 = bitcast float %745 to i32, !dbg !40
  %1082 = select i1 %799, i32 %1081, i32 0, !dbg !41
  %1083 = bitcast float %746 to i32, !dbg !40
  %1084 = select i1 %801, i32 %1083, i32 0, !dbg !41
  %1085 = insertelement <2 x i32> poison, i32 %1082, i64 0, !dbg !40
  %1086 = insertelement <2 x i32> %1085, i32 %1084, i64 1, !dbg !40
  store <2 x i32> %1086, ptr addrspace(3) %1001, align 8, !dbg !40
  %1087 = bitcast float %747 to i32, !dbg !40
  %1088 = select i1 %802, i32 %1087, i32 0, !dbg !41
  %1089 = bitcast float %748 to i32, !dbg !40
  %1090 = select i1 %803, i32 %1089, i32 0, !dbg !41
  %1091 = insertelement <2 x i32> poison, i32 %1088, i64 0, !dbg !40
  %1092 = insertelement <2 x i32> %1091, i32 %1090, i64 1, !dbg !40
  store <2 x i32> %1092, ptr addrspace(3) %1006, align 8, !dbg !40
  %1093 = bitcast float %749 to i32, !dbg !40
  %1094 = select i1 %839, i32 %1093, i32 0, !dbg !41
  %1095 = bitcast float %750 to i32, !dbg !40
  %1096 = select i1 %841, i32 %1095, i32 0, !dbg !41
  %1097 = insertelement <2 x i32> poison, i32 %1094, i64 0, !dbg !40
  %1098 = insertelement <2 x i32> %1097, i32 %1096, i64 1, !dbg !40
  store <2 x i32> %1098, ptr addrspace(3) %1007, align 8, !dbg !40
  %1099 = bitcast float %751 to i32, !dbg !40
  %1100 = select i1 %843, i32 %1099, i32 0, !dbg !41
  %1101 = bitcast float %752 to i32, !dbg !40
  %1102 = select i1 %845, i32 %1101, i32 0, !dbg !41
  %1103 = insertelement <2 x i32> poison, i32 %1100, i64 0, !dbg !40
  %1104 = insertelement <2 x i32> %1103, i32 %1102, i64 1, !dbg !40
  store <2 x i32> %1104, ptr addrspace(3) %1012, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1013, align 8, !dbg !40
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1018, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1105 = load <4 x i32>, ptr addrspace(3) %1021, align 16, !dbg !40
  %1106 = load <4 x i32>, ptr addrspace(3) %1027, align 16, !dbg !40
  %1107 = load <4 x i32>, ptr addrspace(3) %1033, align 16, !dbg !40
  %1108 = load <4 x i32>, ptr addrspace(3) %1039, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1109 = bitcast float %753 to i32, !dbg !40
  %1110 = select i1 %805, i32 %1109, i32 0, !dbg !41
  %1111 = bitcast float %754 to i32, !dbg !40
  %1112 = select i1 %806, i32 %1111, i32 0, !dbg !41
  %1113 = insertelement <2 x i32> poison, i32 %1110, i64 0, !dbg !40
  %1114 = insertelement <2 x i32> %1113, i32 %1112, i64 1, !dbg !40
  store <2 x i32> %1114, ptr addrspace(3) %984, align 8, !dbg !40
  %1115 = bitcast float %755 to i32, !dbg !40
  %1116 = select i1 %808, i32 %1115, i32 0, !dbg !41
  %1117 = bitcast float %756 to i32, !dbg !40
  %1118 = select i1 %809, i32 %1117, i32 0, !dbg !41
  %1119 = insertelement <2 x i32> poison, i32 %1116, i64 0, !dbg !40
  %1120 = insertelement <2 x i32> %1119, i32 %1118, i64 1, !dbg !40
  store <2 x i32> %1120, ptr addrspace(3) %994, align 8, !dbg !40
  %1121 = bitcast float %757 to i32, !dbg !40
  %1122 = select i1 %810, i32 %1121, i32 0, !dbg !41
  %1123 = bitcast float %758 to i32, !dbg !40
  %1124 = select i1 %811, i32 %1123, i32 0, !dbg !41
  %1125 = insertelement <2 x i32> poison, i32 %1122, i64 0, !dbg !40
  %1126 = insertelement <2 x i32> %1125, i32 %1124, i64 1, !dbg !40
  store <2 x i32> %1126, ptr addrspace(3) %1001, align 8, !dbg !40
  %1127 = bitcast float %759 to i32, !dbg !40
  %1128 = select i1 %812, i32 %1127, i32 0, !dbg !41
  %1129 = bitcast float %760 to i32, !dbg !40
  %1130 = select i1 %813, i32 %1129, i32 0, !dbg !41
  %1131 = insertelement <2 x i32> poison, i32 %1128, i64 0, !dbg !40
  %1132 = insertelement <2 x i32> %1131, i32 %1130, i64 1, !dbg !40
  store <2 x i32> %1132, ptr addrspace(3) %1006, align 8, !dbg !40
  %1133 = bitcast float %761 to i32, !dbg !40
  %1134 = select i1 %815, i32 %1133, i32 0, !dbg !41
  %1135 = bitcast float %762 to i32, !dbg !40
  %1136 = select i1 %817, i32 %1135, i32 0, !dbg !41
  %1137 = insertelement <2 x i32> poison, i32 %1134, i64 0, !dbg !40
  %1138 = insertelement <2 x i32> %1137, i32 %1136, i64 1, !dbg !40
  store <2 x i32> %1138, ptr addrspace(3) %1007, align 8, !dbg !40
  %1139 = bitcast float %763 to i32, !dbg !40
  %1140 = select i1 %818, i32 %1139, i32 0, !dbg !41
  %1141 = bitcast float %764 to i32, !dbg !40
  %1142 = select i1 %819, i32 %1141, i32 0, !dbg !41
  %1143 = insertelement <2 x i32> poison, i32 %1140, i64 0, !dbg !40
  %1144 = insertelement <2 x i32> %1143, i32 %1142, i64 1, !dbg !40
  store <2 x i32> %1144, ptr addrspace(3) %1012, align 8, !dbg !40
  %1145 = bitcast float %765 to i32, !dbg !40
  %1146 = select i1 %848, i32 %1145, i32 0, !dbg !41
  %1147 = bitcast float %766 to i32, !dbg !40
  %1148 = select i1 %851, i32 %1147, i32 0, !dbg !41
  %1149 = insertelement <2 x i32> poison, i32 %1146, i64 0, !dbg !40
  %1150 = insertelement <2 x i32> %1149, i32 %1148, i64 1, !dbg !40
  store <2 x i32> %1150, ptr addrspace(3) %1013, align 8, !dbg !40
  %1151 = bitcast float %767 to i32, !dbg !40
  %1152 = select i1 %853, i32 %1151, i32 0, !dbg !41
  %1153 = bitcast float %768 to i32, !dbg !40
  %1154 = select i1 %855, i32 %1153, i32 0, !dbg !41
  %1155 = insertelement <2 x i32> poison, i32 %1152, i64 0, !dbg !40
  %1156 = insertelement <2 x i32> %1155, i32 %1154, i64 1, !dbg !40
  store <2 x i32> %1156, ptr addrspace(3) %1018, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %1157 = load <4 x i32>, ptr addrspace(3) %1021, align 16, !dbg !40
  %1158 = load <4 x i32>, ptr addrspace(3) %1027, align 16, !dbg !40
  %1159 = load <4 x i32>, ptr addrspace(3) %1033, align 16, !dbg !40
  %1160 = load <4 x i32>, ptr addrspace(3) %1039, align 16, !dbg !40
  %.extract = extractelement <4 x i32> %1022, i64 0, !dbg !40
  %.extract108 = extractelement <4 x i32> %1022, i64 1, !dbg !40
  %.extract109 = extractelement <4 x i32> %1022, i64 2, !dbg !40
  %.extract110 = extractelement <4 x i32> %1022, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract108, i32 %.extract109, i32 %.extract110, ptr addrspace(1) %883, i1 %946) #2, !dbg !40
  %.extract111 = extractelement <4 x i32> %1028, i64 0, !dbg !40
  %.extract112 = extractelement <4 x i32> %1028, i64 1, !dbg !40
  %.extract113 = extractelement <4 x i32> %1028, i64 2, !dbg !40
  %.extract114 = extractelement <4 x i32> %1028, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract111, i32 %.extract112, i32 %.extract113, i32 %.extract114, ptr addrspace(1) %887, i1 %948) #2, !dbg !40
  %.extract115 = extractelement <4 x i32> %1034, i64 0, !dbg !40
  %.extract116 = extractelement <4 x i32> %1034, i64 1, !dbg !40
  %.extract117 = extractelement <4 x i32> %1034, i64 2, !dbg !40
  %.extract118 = extractelement <4 x i32> %1034, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract115, i32 %.extract116, i32 %.extract117, i32 %.extract118, ptr addrspace(1) %891, i1 %950) #2, !dbg !40
  %.extract119 = extractelement <4 x i32> %1040, i64 0, !dbg !40
  %.extract120 = extractelement <4 x i32> %1040, i64 1, !dbg !40
  %.extract121 = extractelement <4 x i32> %1040, i64 2, !dbg !40
  %.extract122 = extractelement <4 x i32> %1040, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract119, i32 %.extract120, i32 %.extract121, i32 %.extract122, ptr addrspace(1) %895, i1 %952) #2, !dbg !40
  %.extract123 = extractelement <4 x i32> %1065, i64 0, !dbg !40
  %.extract124 = extractelement <4 x i32> %1065, i64 1, !dbg !40
  %.extract125 = extractelement <4 x i32> %1065, i64 2, !dbg !40
  %.extract126 = extractelement <4 x i32> %1065, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract123, i32 %.extract124, i32 %.extract125, i32 %.extract126, ptr addrspace(1) %899, i1 %954) #2, !dbg !40
  %.extract127 = extractelement <4 x i32> %1066, i64 0, !dbg !40
  %.extract128 = extractelement <4 x i32> %1066, i64 1, !dbg !40
  %.extract129 = extractelement <4 x i32> %1066, i64 2, !dbg !40
  %.extract130 = extractelement <4 x i32> %1066, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract127, i32 %.extract128, i32 %.extract129, i32 %.extract130, ptr addrspace(1) %903, i1 %956) #2, !dbg !40
  %.extract131 = extractelement <4 x i32> %1067, i64 0, !dbg !40
  %.extract132 = extractelement <4 x i32> %1067, i64 1, !dbg !40
  %.extract133 = extractelement <4 x i32> %1067, i64 2, !dbg !40
  %.extract134 = extractelement <4 x i32> %1067, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract131, i32 %.extract132, i32 %.extract133, i32 %.extract134, ptr addrspace(1) %907, i1 %958) #2, !dbg !40
  %.extract135 = extractelement <4 x i32> %1068, i64 0, !dbg !40
  %.extract136 = extractelement <4 x i32> %1068, i64 1, !dbg !40
  %.extract137 = extractelement <4 x i32> %1068, i64 2, !dbg !40
  %.extract138 = extractelement <4 x i32> %1068, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract135, i32 %.extract136, i32 %.extract137, i32 %.extract138, ptr addrspace(1) %911, i1 %960) #2, !dbg !40
  %.extract139 = extractelement <4 x i32> %1105, i64 0, !dbg !40
  %.extract140 = extractelement <4 x i32> %1105, i64 1, !dbg !40
  %.extract141 = extractelement <4 x i32> %1105, i64 2, !dbg !40
  %.extract142 = extractelement <4 x i32> %1105, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract139, i32 %.extract140, i32 %.extract141, i32 %.extract142, ptr addrspace(1) %915, i1 %962) #2, !dbg !40
  %.extract143 = extractelement <4 x i32> %1106, i64 0, !dbg !40
  %.extract144 = extractelement <4 x i32> %1106, i64 1, !dbg !40
  %.extract145 = extractelement <4 x i32> %1106, i64 2, !dbg !40
  %.extract146 = extractelement <4 x i32> %1106, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract143, i32 %.extract144, i32 %.extract145, i32 %.extract146, ptr addrspace(1) %919, i1 %964) #2, !dbg !40
  %.extract147 = extractelement <4 x i32> %1107, i64 0, !dbg !40
  %.extract148 = extractelement <4 x i32> %1107, i64 1, !dbg !40
  %.extract149 = extractelement <4 x i32> %1107, i64 2, !dbg !40
  %.extract150 = extractelement <4 x i32> %1107, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract147, i32 %.extract148, i32 %.extract149, i32 %.extract150, ptr addrspace(1) %923, i1 %966) #2, !dbg !40
  %.extract151 = extractelement <4 x i32> %1108, i64 0, !dbg !40
  %.extract152 = extractelement <4 x i32> %1108, i64 1, !dbg !40
  %.extract153 = extractelement <4 x i32> %1108, i64 2, !dbg !40
  %.extract154 = extractelement <4 x i32> %1108, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract151, i32 %.extract152, i32 %.extract153, i32 %.extract154, ptr addrspace(1) %927, i1 %968) #2, !dbg !40
  %.extract155 = extractelement <4 x i32> %1157, i64 0, !dbg !40
  %.extract156 = extractelement <4 x i32> %1157, i64 1, !dbg !40
  %.extract157 = extractelement <4 x i32> %1157, i64 2, !dbg !40
  %.extract158 = extractelement <4 x i32> %1157, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract155, i32 %.extract156, i32 %.extract157, i32 %.extract158, ptr addrspace(1) %931, i1 %970) #2, !dbg !40
  %.extract159 = extractelement <4 x i32> %1158, i64 0, !dbg !40
  %.extract160 = extractelement <4 x i32> %1158, i64 1, !dbg !40
  %.extract161 = extractelement <4 x i32> %1158, i64 2, !dbg !40
  %.extract162 = extractelement <4 x i32> %1158, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract159, i32 %.extract160, i32 %.extract161, i32 %.extract162, ptr addrspace(1) %935, i1 %972) #2, !dbg !40
  %.extract163 = extractelement <4 x i32> %1159, i64 0, !dbg !40
  %.extract164 = extractelement <4 x i32> %1159, i64 1, !dbg !40
  %.extract165 = extractelement <4 x i32> %1159, i64 2, !dbg !40
  %.extract166 = extractelement <4 x i32> %1159, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract163, i32 %.extract164, i32 %.extract165, i32 %.extract166, ptr addrspace(1) %939, i1 %974) #2, !dbg !40
  %.extract167 = extractelement <4 x i32> %1160, i64 0, !dbg !40
  %.extract168 = extractelement <4 x i32> %1160, i64 1, !dbg !40
  %.extract169 = extractelement <4 x i32> %1160, i64 2, !dbg !40
  %.extract170 = extractelement <4 x i32> %1160, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract167, i32 %.extract168, i32 %.extract169, i32 %.extract170, ptr addrspace(1) %943, i1 %976) #2, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 59, column: 90, scope: !5)
!26 = !DILocation(line: 51, column: 21, scope: !5)
!27 = !DILocation(line: 52, column: 16, scope: !5)
!28 = !DILocation(line: 64, column: 36, scope: !5)
!29 = !DILocation(line: 64, column: 44, scope: !5)
!30 = !DILocation(line: 65, column: 22, scope: !5)
!31 = !DILocation(line: 66, column: 34, scope: !5)
!32 = !DILocation(line: 70, column: 26, scope: !5)
!33 = !DILocation(line: 67, column: 19, scope: !5)
!34 = !DILocation(line: 67, column: 15, scope: !5)
!35 = !DILocation(line: 68, column: 11, scope: !5)
!36 = !DILocation(line: 70, column: 43, scope: !5)
!37 = !DILocation(line: 70, column: 58, scope: !5)
!38 = !DILocation(line: 72, column: 48, scope: !5)
!39 = !DILocation(line: 72, column: 32, scope: !5)
!40 = !DILocation(line: 73, column: 18, scope: !5)
!41 = !DILocation(line: 71, column: 29, scope: !5)
!42 = !DILocation(line: 73, column: 4, scope: !5)
