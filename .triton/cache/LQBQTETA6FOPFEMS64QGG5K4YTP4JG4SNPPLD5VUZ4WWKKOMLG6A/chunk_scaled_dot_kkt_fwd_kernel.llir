; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 16, !dbg !13
  %.not = icmp eq i32 %14, 0, !dbg !13
  %15 = and i32 %12, 32, !dbg !13
  %16 = icmp eq i32 %15, 0, !dbg !13
  %17 = and i32 %12, 64, !dbg !13
  %18 = icmp eq i32 %17, 0, !dbg !13
  %19 = lshr i32 %12, 4, !dbg !13
  %20 = and i32 %19, 7, !dbg !13
  %21 = or i32 %19, 56, !dbg !13
  %22 = lshr i32 %12, 2, !dbg !13
  %23 = and i32 %22, 7, !dbg !13
  %24 = lshr i32 %12, 1, !dbg !13
  %25 = and i32 %24, 48, !dbg !13
  %26 = or disjoint i32 %25, %23, !dbg !13
  %27 = or disjoint i32 %26, 8, !dbg !13
  %28 = shl nuw nsw i32 %12, 1, !dbg !13
  %29 = shl nuw nsw i32 %12, 2, !dbg !13
  %30 = and i32 %29, 60, !dbg !13
  %31 = or disjoint i32 %26, %11, !dbg !14
  %32 = or disjoint i32 %27, %11, !dbg !14
  %33 = icmp slt i32 %31, %4, !dbg !15
  %34 = icmp slt i32 %32, %4, !dbg !15
  %35 = and i32 %28, 6, !dbg !13
  %36 = or disjoint i32 %35, 1, !dbg !13
  %37 = or disjoint i32 %35, 8, !dbg !13
  %38 = or disjoint i32 %35, 9, !dbg !13
  %39 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !13
  %40 = shufflevector <4 x i32> %39, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %41 = or disjoint <4 x i32> %40, <i32 25, i32 24, i32 17, i32 16>, !dbg !13
  %42 = insertelement <8 x i32> poison, i32 %35, i64 0, !dbg !13
  %43 = shufflevector <8 x i32> %42, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %44 = or disjoint <8 x i32> %43, <i32 57, i32 56, i32 49, i32 48, i32 41, i32 40, i32 33, i32 32>, !dbg !13
  %45 = insertelement <16 x i32> poison, i32 %38, i64 12, !dbg !14
  %46 = insertelement <16 x i32> %45, i32 %37, i64 13, !dbg !14
  %47 = insertelement <16 x i32> %46, i32 %36, i64 14, !dbg !14
  %48 = insertelement <16 x i32> %47, i32 %35, i64 15, !dbg !14
  %49 = shufflevector <8 x i32> %44, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !14
  %50 = shufflevector <16 x i32> %49, <16 x i32> %48, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !14
  %51 = shufflevector <4 x i32> %41, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !14
  %52 = shufflevector <16 x i32> %50, <16 x i32> %51, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 12, i32 13, i32 14, i32 15>, !dbg !14
  %53 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !14
  %54 = shufflevector <16 x i32> %53, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !14
  %55 = or disjoint <16 x i32> %52, %54, !dbg !14
  %56 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !15
  %57 = shufflevector <16 x i32> %56, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !15
  %58 = icmp slt <16 x i32> %55, %57, !dbg !15
  %59 = mul i32 %9, %4, !dbg !16
  %60 = sext i32 %59 to i64, !dbg !17
  %61 = getelementptr bfloat, ptr addrspace(1) %2, i64 %60, !dbg !17
  %62 = zext nneg i32 %10 to i64, !dbg !18
  %63 = getelementptr bfloat, ptr addrspace(1) %61, i64 %62, !dbg !18
  %64 = sext i32 %4 to i64, !dbg !19
  %65 = sext i32 %11 to i64, !dbg !19
  %66 = zext nneg i32 %21 to i64, !dbg !20
  %67 = zext nneg i32 %26 to i64, !dbg !20
  %68 = zext nneg i32 %27 to i64, !dbg !20
  %69 = zext nneg i32 %35 to i64, !dbg !20
  %70 = zext nneg i32 %36 to i64, !dbg !20
  %71 = zext nneg i32 %37 to i64, !dbg !20
  %72 = zext nneg i32 %38 to i64, !dbg !20
  %73 = extractelement <4 x i32> %41, i64 3, !dbg !21
  %74 = zext nneg i32 %73 to i64, !dbg !20
  %75 = extractelement <4 x i32> %41, i64 2, !dbg !21
  %76 = zext nneg i32 %75 to i64, !dbg !20
  %77 = extractelement <4 x i32> %41, i64 1, !dbg !21
  %78 = zext nneg i32 %77 to i64, !dbg !20
  %79 = extractelement <4 x i32> %41, i64 0, !dbg !21
  %80 = extractelement <8 x i32> %44, i64 7, !dbg !21
  %81 = extractelement <8 x i32> %44, i64 6, !dbg !21
  %82 = extractelement <8 x i32> %44, i64 5, !dbg !21
  %83 = extractelement <8 x i32> %44, i64 4, !dbg !21
  %84 = extractelement <8 x i32> %44, i64 3, !dbg !21
  %85 = extractelement <8 x i32> %44, i64 2, !dbg !21
  %86 = extractelement <8 x i32> %44, i64 1, !dbg !21
  %87 = extractelement <8 x i32> %44, i64 0, !dbg !21
  %88 = zext nneg i32 %30 to i64, !dbg !20
  %89 = or disjoint i64 %66, %65, !dbg !20
  %90 = or disjoint i64 %67, %65, !dbg !20
  %91 = or disjoint i64 %68, %65, !dbg !20
  %92 = or disjoint i64 %69, %65, !dbg !20
  %93 = or disjoint i64 %70, %65, !dbg !20
  %94 = or disjoint i64 %71, %65, !dbg !20
  %95 = or disjoint i64 %72, %65, !dbg !20
  %96 = or disjoint i64 %74, %65, !dbg !20
  %97 = or disjoint i64 %76, %65, !dbg !20
  %98 = or disjoint i64 %78, %65, !dbg !20
  %99 = shl nsw i64 %90, 5, !dbg !20
  %100 = shl nsw i64 %91, 5, !dbg !20
  %101 = getelementptr bfloat, ptr addrspace(1) %63, i64 %99, !dbg !20
  %102 = getelementptr bfloat, ptr addrspace(1) %63, i64 %100, !dbg !20
  %103 = icmp sgt i32 %11, -1, !dbg !20
  %104 = icmp slt i64 %90, %64, !dbg !20
  %105 = icmp slt i64 %91, %64, !dbg !20
  %106 = icmp slt i64 %92, %64, !dbg !20
  %107 = icmp slt i64 %93, %64, !dbg !20
  %108 = icmp slt i64 %94, %64, !dbg !20
  %109 = icmp slt i64 %95, %64, !dbg !20
  %110 = icmp slt i64 %96, %64, !dbg !20
  %111 = icmp slt i64 %97, %64, !dbg !20
  %112 = icmp slt i64 %98, %64, !dbg !20
  %113 = and i1 %103, %104, !dbg !20
  %114 = and i1 %103, %105, !dbg !20
  %115 = and i1 %103, %106, !dbg !20
  %116 = and i1 %103, %107, !dbg !20
  %117 = and i1 %103, %108, !dbg !20
  %118 = and i1 %103, %109, !dbg !20
  %119 = and i1 %103, %110, !dbg !20
  %120 = and i1 %103, %111, !dbg !20
  %121 = and i1 %103, %112, !dbg !20
  %122 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %101, i1 %113) #5, !dbg !20
  %123 = bitcast i16 %122 to bfloat, !dbg !20
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %102, i1 %114) #5, !dbg !20
  %125 = bitcast i16 %124 to bfloat, !dbg !20
  %126 = or disjoint i32 %59, %10, !dbg !22
  %127 = shl i32 %126, 7, !dbg !23
  %128 = sext i32 %127 to i64, !dbg !24
  %129 = getelementptr bfloat, ptr addrspace(1) %0, i64 %128, !dbg !24
  %130 = shl nuw nsw i32 %12, 3, !dbg !25
  %131 = and i32 %130, 56, !dbg !25
  %132 = and i32 %130, 120, !dbg !25
  %133 = zext nneg i32 %132 to i64, !dbg !25
  %.idx10 = shl nsw i64 %89, 13, !dbg !25
  %134 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx10, !dbg !25
  %135 = getelementptr bfloat, ptr addrspace(1) %134, i64 %133, !dbg !25
  %136 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !13
  %137 = shufflevector <2 x i32> %136, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %138 = or disjoint <2 x i32> %137, <i32 16, i32 8>, !dbg !13
  %139 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !13
  %140 = shufflevector <4 x i32> %139, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %141 = or disjoint <4 x i32> %140, <i32 48, i32 40, i32 32, i32 24>, !dbg !13
  %142 = shufflevector <4 x i32> %41, <4 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %143 = shufflevector <8 x i32> %44, <8 x i32> %142, <8 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>, !dbg !20
  %144 = shufflevector <8 x i32> %44, <8 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %145 = insertelement <16 x i32> %144, i32 %20, i64 6, !dbg !20
  %146 = shufflevector <8 x i32> %143, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %147 = shufflevector <16 x i32> %145, <16 x i32> %146, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !20
  %148 = shufflevector <4 x i32> %141, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %149 = shufflevector <16 x i32> %148, <16 x i32> %147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !20
  %150 = shufflevector <2 x i32> %138, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %151 = shufflevector <16 x i32> %149, <16 x i32> %150, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !20
  %152 = or disjoint <16 x i32> %151, %54, !dbg !20
  %153 = icmp slt <16 x i32> %152, %57, !dbg !25
  %154 = extractelement <16 x i1> %153, i64 15, !dbg !20
  %155 = and i1 %103, %154, !dbg !20
  %156 = extractelement <16 x i1> %153, i64 14, !dbg !20
  %157 = and i1 %103, %156, !dbg !20
  %158 = extractelement <16 x i1> %153, i64 13, !dbg !20
  %159 = and i1 %103, %158, !dbg !20
  %160 = extractelement <16 x i1> %153, i64 12, !dbg !20
  %161 = and i1 %103, %160, !dbg !20
  %162 = extractelement <16 x i1> %153, i64 11, !dbg !20
  %163 = and i1 %103, %162, !dbg !20
  %164 = extractelement <16 x i1> %153, i64 10, !dbg !20
  %165 = and i1 %103, %164, !dbg !20
  %166 = extractelement <16 x i1> %153, i64 9, !dbg !20
  %167 = and i1 %103, %166, !dbg !20
  %168 = extractelement <16 x i1> %153, i64 8, !dbg !20
  %169 = and i1 %103, %168, !dbg !20
  %170 = extractelement <16 x i1> %153, i64 7, !dbg !20
  %171 = and i1 %103, %170, !dbg !20
  %172 = extractelement <16 x i32> %152, i64 6, !dbg !25
  %173 = sext i32 %172 to i64, !dbg !25
  %.idx = shl nsw i64 %173, 13, !dbg !25
  %174 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx, !dbg !25
  %175 = getelementptr bfloat, ptr addrspace(1) %174, i64 %133, !dbg !25
  %176 = extractelement <16 x i32> %152, i64 5, !dbg !25
  %177 = sext i32 %176 to i64, !dbg !25
  %.idx4 = shl nsw i64 %177, 13, !dbg !25
  %178 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx4, !dbg !25
  %179 = getelementptr bfloat, ptr addrspace(1) %178, i64 %133, !dbg !25
  %180 = extractelement <16 x i32> %152, i64 4, !dbg !25
  %181 = sext i32 %180 to i64, !dbg !25
  %.idx5 = shl nsw i64 %181, 13, !dbg !25
  %182 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx5, !dbg !25
  %183 = getelementptr bfloat, ptr addrspace(1) %182, i64 %133, !dbg !25
  %184 = extractelement <16 x i32> %152, i64 3, !dbg !25
  %185 = sext i32 %184 to i64, !dbg !25
  %.idx6 = shl nsw i64 %185, 13, !dbg !25
  %186 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx6, !dbg !25
  %187 = getelementptr bfloat, ptr addrspace(1) %186, i64 %133, !dbg !25
  %188 = extractelement <16 x i32> %152, i64 2, !dbg !25
  %189 = sext i32 %188 to i64, !dbg !25
  %.idx7 = shl nsw i64 %189, 13, !dbg !25
  %190 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx7, !dbg !25
  %191 = getelementptr bfloat, ptr addrspace(1) %190, i64 %133, !dbg !25
  %192 = extractelement <16 x i32> %152, i64 1, !dbg !25
  %193 = sext i32 %192 to i64, !dbg !25
  %.idx8 = shl nsw i64 %193, 13, !dbg !25
  %194 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx8, !dbg !25
  %195 = getelementptr bfloat, ptr addrspace(1) %194, i64 %133, !dbg !25
  %196 = extractelement <16 x i32> %152, i64 0, !dbg !25
  %197 = sext i32 %196 to i64, !dbg !25
  %.idx9 = shl nsw i64 %197, 13, !dbg !25
  %198 = getelementptr i8, ptr addrspace(1) %129, i64 %.idx9, !dbg !25
  %199 = getelementptr bfloat, ptr addrspace(1) %198, i64 %133, !dbg !25
  %200 = icmp slt i64 %89, %64, !dbg !25
  %201 = extractelement <16 x i1> %153, i64 6, !dbg !25
  %202 = and i1 %103, %201, !dbg !25
  %203 = extractelement <16 x i1> %153, i64 5, !dbg !25
  %204 = and i1 %103, %203, !dbg !25
  %205 = extractelement <16 x i1> %153, i64 4, !dbg !25
  %206 = and i1 %103, %205, !dbg !25
  %207 = extractelement <16 x i1> %153, i64 3, !dbg !25
  %208 = and i1 %103, %207, !dbg !25
  %209 = extractelement <16 x i1> %153, i64 2, !dbg !25
  %210 = and i1 %103, %209, !dbg !25
  %211 = extractelement <16 x i1> %153, i64 1, !dbg !25
  %212 = and i1 %103, %211, !dbg !25
  %213 = extractelement <16 x i1> %153, i64 0, !dbg !25
  %214 = and i1 %103, %213, !dbg !25
  %215 = and i1 %103, %200, !dbg !25
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %202) #5, !dbg !25
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !25
  %218 = bitcast i32 %217 to <2 x bfloat>, !dbg !25
  %219 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !25
  %220 = bitcast i32 %219 to <2 x bfloat>, !dbg !25
  %221 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !25
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !25
  %223 = shufflevector <2 x bfloat> %222, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %224 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !25
  %225 = bitcast i32 %224 to <2 x bfloat>, !dbg !25
  %226 = shufflevector <2 x bfloat> %225, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %204) #5, !dbg !25
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !25
  %229 = bitcast i32 %228 to <2 x bfloat>, !dbg !25
  %230 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !25
  %231 = bitcast i32 %230 to <2 x bfloat>, !dbg !25
  %232 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !25
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !25
  %234 = shufflevector <2 x bfloat> %233, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %235 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !25
  %236 = bitcast i32 %235 to <2 x bfloat>, !dbg !25
  %237 = shufflevector <2 x bfloat> %236, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %206) #5, !dbg !25
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !25
  %240 = bitcast i32 %239 to <2 x bfloat>, !dbg !25
  %241 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !25
  %242 = bitcast i32 %241 to <2 x bfloat>, !dbg !25
  %243 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !25
  %244 = bitcast i32 %243 to <2 x bfloat>, !dbg !25
  %245 = shufflevector <2 x bfloat> %244, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %246 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !25
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !25
  %248 = shufflevector <2 x bfloat> %247, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %208) #5, !dbg !25
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !25
  %251 = bitcast i32 %250 to <2 x bfloat>, !dbg !25
  %252 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !25
  %253 = bitcast i32 %252 to <2 x bfloat>, !dbg !25
  %254 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !25
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !25
  %256 = shufflevector <2 x bfloat> %255, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %257 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !25
  %258 = bitcast i32 %257 to <2 x bfloat>, !dbg !25
  %259 = shufflevector <2 x bfloat> %258, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %210) #5, !dbg !25
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !25
  %262 = bitcast i32 %261 to <2 x bfloat>, !dbg !25
  %263 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !25
  %264 = bitcast i32 %263 to <2 x bfloat>, !dbg !25
  %265 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !25
  %266 = bitcast i32 %265 to <2 x bfloat>, !dbg !25
  %267 = shufflevector <2 x bfloat> %266, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %268 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !25
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !25
  %270 = shufflevector <2 x bfloat> %269, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %212) #5, !dbg !25
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !25
  %273 = bitcast i32 %272 to <2 x bfloat>, !dbg !25
  %274 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !25
  %275 = bitcast i32 %274 to <2 x bfloat>, !dbg !25
  %276 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !25
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !25
  %278 = shufflevector <2 x bfloat> %277, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %279 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !25
  %280 = bitcast i32 %279 to <2 x bfloat>, !dbg !25
  %281 = shufflevector <2 x bfloat> %280, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %214) #5, !dbg !25
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !25
  %284 = bitcast i32 %283 to <2 x bfloat>, !dbg !25
  %285 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !25
  %286 = bitcast i32 %285 to <2 x bfloat>, !dbg !25
  %287 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !25
  %288 = bitcast i32 %287 to <2 x bfloat>, !dbg !25
  %289 = shufflevector <2 x bfloat> %288, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %290 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !25
  %291 = bitcast i32 %290 to <2 x bfloat>, !dbg !25
  %292 = shufflevector <2 x bfloat> %291, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %215) #5, !dbg !25
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !25
  %295 = bitcast i32 %294 to <2 x bfloat>, !dbg !25
  %296 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !25
  %297 = bitcast i32 %296 to <2 x bfloat>, !dbg !25
  %298 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !25
  %299 = bitcast i32 %298 to <2 x bfloat>, !dbg !25
  %300 = shufflevector <2 x bfloat> %299, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %301 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !25
  %302 = bitcast i32 %301 to <2 x bfloat>, !dbg !25
  %303 = shufflevector <2 x bfloat> %302, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %304 = shl nuw nsw i32 %12, 9, !dbg !25
  %305 = and i32 %304, 4096, !dbg !25
  %306 = or disjoint i32 %131, %305, !dbg !25
  %307 = select i1 %.not, i32 0, i32 72, !dbg !25
  %308 = select i1 %16, i32 0, i32 144, !dbg !25
  %309 = select i1 %18, i32 0, i32 288, !dbg !25
  %310 = or disjoint i32 %308, %307, !dbg !25
  %311 = xor i32 %310, %306, !dbg !25
  %312 = xor i32 %311, %309, !dbg !25
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %312, !dbg !25
  %314 = shufflevector <2 x bfloat> %218, <2 x bfloat> %220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %315 = shufflevector <8 x bfloat> %314, <8 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %316 = shufflevector <8 x bfloat> %315, <8 x bfloat> %226, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %316, ptr addrspace(3) %313, align 16, !dbg !25
  %317 = or disjoint i32 %306, 512, !dbg !25
  %318 = or disjoint i32 %310, %309, !dbg !25
  %319 = xor i32 %318, %317, !dbg !25
  %320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %319, !dbg !25
  %321 = shufflevector <2 x bfloat> %229, <2 x bfloat> %231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %322 = shufflevector <8 x bfloat> %321, <8 x bfloat> %234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %323 = shufflevector <8 x bfloat> %322, <8 x bfloat> %237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %323, ptr addrspace(3) %320, align 16, !dbg !25
  %324 = or disjoint i32 %306, 1024, !dbg !25
  %325 = xor i32 %318, %324, !dbg !25
  %326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %325, !dbg !25
  %327 = shufflevector <2 x bfloat> %240, <2 x bfloat> %242, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %328 = shufflevector <8 x bfloat> %327, <8 x bfloat> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %329 = shufflevector <8 x bfloat> %328, <8 x bfloat> %248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %329, ptr addrspace(3) %326, align 16, !dbg !25
  %330 = or disjoint i32 %306, 1536, !dbg !25
  %331 = xor i32 %318, %330, !dbg !25
  %332 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %331, !dbg !25
  %333 = shufflevector <2 x bfloat> %251, <2 x bfloat> %253, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %334 = shufflevector <8 x bfloat> %333, <8 x bfloat> %256, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %335 = shufflevector <8 x bfloat> %334, <8 x bfloat> %259, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %335, ptr addrspace(3) %332, align 16, !dbg !25
  %336 = or disjoint i32 %306, 2048, !dbg !25
  %337 = xor i32 %318, %336, !dbg !25
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %337, !dbg !25
  %339 = shufflevector <2 x bfloat> %262, <2 x bfloat> %264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %340 = shufflevector <8 x bfloat> %339, <8 x bfloat> %267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %341 = shufflevector <8 x bfloat> %340, <8 x bfloat> %270, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %341, ptr addrspace(3) %338, align 16, !dbg !25
  %342 = or disjoint i32 %306, 2560, !dbg !25
  %343 = xor i32 %318, %342, !dbg !25
  %344 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %343, !dbg !25
  %345 = shufflevector <2 x bfloat> %273, <2 x bfloat> %275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %346 = shufflevector <8 x bfloat> %345, <8 x bfloat> %278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %347 = shufflevector <8 x bfloat> %346, <8 x bfloat> %281, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %347, ptr addrspace(3) %344, align 16, !dbg !25
  %348 = or disjoint i32 %306, 3072, !dbg !25
  %349 = xor i32 %318, %348, !dbg !25
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %349, !dbg !25
  %351 = shufflevector <2 x bfloat> %284, <2 x bfloat> %286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %352 = shufflevector <8 x bfloat> %351, <8 x bfloat> %289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %353 = shufflevector <8 x bfloat> %352, <8 x bfloat> %292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %353, ptr addrspace(3) %350, align 16, !dbg !25
  %354 = or disjoint i32 %306, 3584, !dbg !25
  %355 = xor i32 %318, %354, !dbg !25
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %355, !dbg !25
  %357 = shufflevector <2 x bfloat> %295, <2 x bfloat> %297, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %358 = shufflevector <8 x bfloat> %357, <8 x bfloat> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !25
  %359 = shufflevector <8 x bfloat> %358, <8 x bfloat> %303, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !25
  store <8 x bfloat> %359, ptr addrspace(3) %356, align 16, !dbg !25
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #5, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %360 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !26
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #5, !dbg !26
  %361 = lshr exact i32 ptrtoint (ptr addrspace(3) @global_smem to i32), 4, !dbg !26
  %362 = and i32 %361, 16383, !dbg !26
  %363 = zext nneg i32 %362 to i64, !dbg !26
  %364 = or disjoint i64 %363, 4611686293338849280, !dbg !26
  %365 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $32, $33, 0, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %364, i64 %364) #5, !dbg !26
  %366 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 32), 4, !dbg !26
  %367 = and i32 %366, 16383, !dbg !26
  %368 = zext nneg i32 %367 to i64, !dbg !26
  %369 = or disjoint i64 %368, 4611686293338849280, !dbg !26
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 0, !dbg !26
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 1, !dbg !26
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 2, !dbg !26
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 3, !dbg !26
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 4, !dbg !26
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 5, !dbg !26
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 6, !dbg !26
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 7, !dbg !26
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 8, !dbg !26
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 9, !dbg !26
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 10, !dbg !26
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 11, !dbg !26
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 12, !dbg !26
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 13, !dbg !26
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 14, !dbg !26
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 15, !dbg !26
  %386 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 16, !dbg !26
  %387 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 17, !dbg !26
  %388 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 18, !dbg !26
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 19, !dbg !26
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 20, !dbg !26
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 21, !dbg !26
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 22, !dbg !26
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 23, !dbg !26
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 24, !dbg !26
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 25, !dbg !26
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 26, !dbg !26
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 27, !dbg !26
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 28, !dbg !26
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 29, !dbg !26
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 30, !dbg !26
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 31, !dbg !26
  %402 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, float %385, float %386, float %387, float %388, float %389, float %390, float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, i64 %369, i64 %369, i1 true) #5, !dbg !26
  %403 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 64), 4, !dbg !26
  %404 = and i32 %403, 16383, !dbg !26
  %405 = zext nneg i32 %404 to i64, !dbg !26
  %406 = or disjoint i64 %405, 4611686293338849280, !dbg !26
  %407 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 0, !dbg !26
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 1, !dbg !26
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 2, !dbg !26
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 3, !dbg !26
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 4, !dbg !26
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 5, !dbg !26
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 6, !dbg !26
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 7, !dbg !26
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 8, !dbg !26
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 9, !dbg !26
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 10, !dbg !26
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 11, !dbg !26
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 12, !dbg !26
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 13, !dbg !26
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 14, !dbg !26
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 15, !dbg !26
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 16, !dbg !26
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 17, !dbg !26
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 18, !dbg !26
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 19, !dbg !26
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 20, !dbg !26
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 21, !dbg !26
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 22, !dbg !26
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 23, !dbg !26
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 24, !dbg !26
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 25, !dbg !26
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 26, !dbg !26
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 27, !dbg !26
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 28, !dbg !26
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 29, !dbg !26
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 30, !dbg !26
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %402, 31, !dbg !26
  %439 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %407, float %408, float %409, float %410, float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, float %426, float %427, float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, i64 %406, i64 %406, i1 true) #5, !dbg !26
  %440 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 96), 4, !dbg !26
  %441 = and i32 %440, 16383, !dbg !26
  %442 = zext nneg i32 %441 to i64, !dbg !26
  %443 = or disjoint i64 %442, 4611686293338849280, !dbg !26
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 0, !dbg !26
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 1, !dbg !26
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 2, !dbg !26
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 3, !dbg !26
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 4, !dbg !26
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 5, !dbg !26
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 6, !dbg !26
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 7, !dbg !26
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 8, !dbg !26
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 9, !dbg !26
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 10, !dbg !26
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 11, !dbg !26
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 12, !dbg !26
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 13, !dbg !26
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 14, !dbg !26
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 15, !dbg !26
  %460 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 16, !dbg !26
  %461 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 17, !dbg !26
  %462 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 18, !dbg !26
  %463 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 19, !dbg !26
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 20, !dbg !26
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 21, !dbg !26
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 22, !dbg !26
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 23, !dbg !26
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 24, !dbg !26
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 25, !dbg !26
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 26, !dbg !26
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 27, !dbg !26
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 28, !dbg !26
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 29, !dbg !26
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 30, !dbg !26
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %439, 31, !dbg !26
  %476 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458, float %459, float %460, float %461, float %462, float %463, float %464, float %465, float %466, float %467, float %468, float %469, float %470, float %471, float %472, float %473, float %474, float %475, i64 %443, i64 %443, i1 true) #5, !dbg !26
  %477 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8192), 4, !dbg !26
  %478 = and i32 %477, 16383, !dbg !26
  %479 = zext nneg i32 %478 to i64, !dbg !26
  %480 = or disjoint i64 %479, 4611686293338849280, !dbg !26
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 0, !dbg !26
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 1, !dbg !26
  %483 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 2, !dbg !26
  %484 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 3, !dbg !26
  %485 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 4, !dbg !26
  %486 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 5, !dbg !26
  %487 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 6, !dbg !26
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 7, !dbg !26
  %489 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 8, !dbg !26
  %490 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 9, !dbg !26
  %491 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 10, !dbg !26
  %492 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 11, !dbg !26
  %493 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 12, !dbg !26
  %494 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 13, !dbg !26
  %495 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 14, !dbg !26
  %496 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 15, !dbg !26
  %497 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 16, !dbg !26
  %498 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 17, !dbg !26
  %499 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 18, !dbg !26
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 19, !dbg !26
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 20, !dbg !26
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 21, !dbg !26
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 22, !dbg !26
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 23, !dbg !26
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 24, !dbg !26
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 25, !dbg !26
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 26, !dbg !26
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 27, !dbg !26
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 28, !dbg !26
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 29, !dbg !26
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 30, !dbg !26
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %476, 31, !dbg !26
  %513 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %481, float %482, float %483, float %484, float %485, float %486, float %487, float %488, float %489, float %490, float %491, float %492, float %493, float %494, float %495, float %496, float %497, float %498, float %499, float %500, float %501, float %502, float %503, float %504, float %505, float %506, float %507, float %508, float %509, float %510, float %511, float %512, i64 %480, i64 %480, i1 true) #5, !dbg !26
  %514 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8224), 4, !dbg !26
  %515 = and i32 %514, 16383, !dbg !26
  %516 = zext nneg i32 %515 to i64, !dbg !26
  %517 = or disjoint i64 %516, 4611686293338849280, !dbg !26
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 0, !dbg !26
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 1, !dbg !26
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 2, !dbg !26
  %521 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 3, !dbg !26
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 4, !dbg !26
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 5, !dbg !26
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 6, !dbg !26
  %525 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 7, !dbg !26
  %526 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 8, !dbg !26
  %527 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 9, !dbg !26
  %528 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 10, !dbg !26
  %529 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 11, !dbg !26
  %530 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 12, !dbg !26
  %531 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 13, !dbg !26
  %532 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 14, !dbg !26
  %533 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 15, !dbg !26
  %534 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 16, !dbg !26
  %535 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 17, !dbg !26
  %536 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 18, !dbg !26
  %537 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 19, !dbg !26
  %538 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 20, !dbg !26
  %539 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 21, !dbg !26
  %540 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 22, !dbg !26
  %541 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 23, !dbg !26
  %542 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 24, !dbg !26
  %543 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 25, !dbg !26
  %544 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 26, !dbg !26
  %545 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 27, !dbg !26
  %546 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 28, !dbg !26
  %547 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 29, !dbg !26
  %548 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 30, !dbg !26
  %549 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %513, 31, !dbg !26
  %550 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %518, float %519, float %520, float %521, float %522, float %523, float %524, float %525, float %526, float %527, float %528, float %529, float %530, float %531, float %532, float %533, float %534, float %535, float %536, float %537, float %538, float %539, float %540, float %541, float %542, float %543, float %544, float %545, float %546, float %547, float %548, float %549, i64 %517, i64 %517, i1 true) #5, !dbg !26
  %551 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8256), 4, !dbg !26
  %552 = and i32 %551, 16383, !dbg !26
  %553 = zext nneg i32 %552 to i64, !dbg !26
  %554 = or disjoint i64 %553, 4611686293338849280, !dbg !26
  %555 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 0, !dbg !26
  %556 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 1, !dbg !26
  %557 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 2, !dbg !26
  %558 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 3, !dbg !26
  %559 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 4, !dbg !26
  %560 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 5, !dbg !26
  %561 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 6, !dbg !26
  %562 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 7, !dbg !26
  %563 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 8, !dbg !26
  %564 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 9, !dbg !26
  %565 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 10, !dbg !26
  %566 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 11, !dbg !26
  %567 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 12, !dbg !26
  %568 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 13, !dbg !26
  %569 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 14, !dbg !26
  %570 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 15, !dbg !26
  %571 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 16, !dbg !26
  %572 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 17, !dbg !26
  %573 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 18, !dbg !26
  %574 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 19, !dbg !26
  %575 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 20, !dbg !26
  %576 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 21, !dbg !26
  %577 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 22, !dbg !26
  %578 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 23, !dbg !26
  %579 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 24, !dbg !26
  %580 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 25, !dbg !26
  %581 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 26, !dbg !26
  %582 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 27, !dbg !26
  %583 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 28, !dbg !26
  %584 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 29, !dbg !26
  %585 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 30, !dbg !26
  %586 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, 31, !dbg !26
  %587 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %555, float %556, float %557, float %558, float %559, float %560, float %561, float %562, float %563, float %564, float %565, float %566, float %567, float %568, float %569, float %570, float %571, float %572, float %573, float %574, float %575, float %576, float %577, float %578, float %579, float %580, float %581, float %582, float %583, float %584, float %585, float %586, i64 %554, i64 %554, i1 true) #5, !dbg !26
  %588 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8288), 4, !dbg !26
  %589 = and i32 %588, 16383, !dbg !26
  %590 = zext nneg i32 %589 to i64, !dbg !26
  %591 = or disjoint i64 %590, 4611686293338849280, !dbg !26
  %592 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 0, !dbg !26
  %593 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 1, !dbg !26
  %594 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 2, !dbg !26
  %595 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 3, !dbg !26
  %596 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 4, !dbg !26
  %597 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 5, !dbg !26
  %598 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 6, !dbg !26
  %599 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 7, !dbg !26
  %600 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 8, !dbg !26
  %601 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 9, !dbg !26
  %602 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 10, !dbg !26
  %603 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 11, !dbg !26
  %604 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 12, !dbg !26
  %605 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 13, !dbg !26
  %606 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 14, !dbg !26
  %607 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 15, !dbg !26
  %608 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 16, !dbg !26
  %609 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 17, !dbg !26
  %610 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 18, !dbg !26
  %611 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 19, !dbg !26
  %612 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 20, !dbg !26
  %613 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 21, !dbg !26
  %614 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 22, !dbg !26
  %615 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 23, !dbg !26
  %616 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 24, !dbg !26
  %617 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 25, !dbg !26
  %618 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 26, !dbg !26
  %619 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 27, !dbg !26
  %620 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 28, !dbg !26
  %621 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 29, !dbg !26
  %622 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 30, !dbg !26
  %623 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, 31, !dbg !26
  %624 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %592, float %593, float %594, float %595, float %596, float %597, float %598, float %599, float %600, float %601, float %602, float %603, float %604, float %605, float %606, float %607, float %608, float %609, float %610, float %611, float %612, float %613, float %614, float %615, float %616, float %617, float %618, float %619, float %620, float %621, float %622, float %623, i64 %591, i64 %591, i1 true) #5, !dbg !26
  %625 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 0, !dbg !26
  %626 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 1, !dbg !26
  %627 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 2, !dbg !26
  %628 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 3, !dbg !26
  %629 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 4, !dbg !26
  %630 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 5, !dbg !26
  %631 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 6, !dbg !26
  %632 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 7, !dbg !26
  %633 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 8, !dbg !26
  %634 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 9, !dbg !26
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 10, !dbg !26
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 11, !dbg !26
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 12, !dbg !26
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 13, !dbg !26
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 14, !dbg !26
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 15, !dbg !26
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 16, !dbg !26
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 17, !dbg !26
  %643 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 18, !dbg !26
  %644 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 19, !dbg !26
  %645 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 20, !dbg !26
  %646 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 21, !dbg !26
  %647 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 22, !dbg !26
  %648 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 23, !dbg !26
  %649 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 24, !dbg !26
  %650 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 25, !dbg !26
  %651 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 26, !dbg !26
  %652 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 27, !dbg !26
  %653 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 28, !dbg !26
  %654 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 29, !dbg !26
  %655 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 30, !dbg !26
  %656 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %624, 31, !dbg !26
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #5, !dbg !26
  %657 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %625, float %626, float %627, float %628, float %629, float %630, float %631, float %632, float %633, float %634, float %635, float %636, float %637, float %638, float %639, float %640, float %641, float %642, float %643, float %644, float %645, float %646, float %647, float %648, float %649, float %650, float %651, float %652, float %653, float %654, float %655, float %656) #5, !dbg !26
  %658 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 0, !dbg !26
  %659 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 1, !dbg !26
  %660 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 2, !dbg !26
  %661 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 3, !dbg !26
  %662 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 4, !dbg !26
  %663 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 5, !dbg !26
  %664 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 6, !dbg !26
  %665 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 7, !dbg !26
  %666 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 8, !dbg !26
  %667 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 9, !dbg !26
  %668 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 10, !dbg !26
  %669 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 11, !dbg !26
  %670 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 12, !dbg !26
  %671 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 13, !dbg !26
  %672 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 14, !dbg !26
  %673 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 15, !dbg !26
  %674 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 16, !dbg !26
  %675 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 17, !dbg !26
  %676 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 18, !dbg !26
  %677 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 19, !dbg !26
  %678 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 20, !dbg !26
  %679 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 21, !dbg !26
  %680 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 22, !dbg !26
  %681 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 23, !dbg !26
  %682 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 24, !dbg !26
  %683 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 25, !dbg !26
  %684 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 26, !dbg !26
  %685 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 27, !dbg !26
  %686 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 30, !dbg !26
  %687 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %657, 31, !dbg !26
  %688 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %689 = getelementptr float, ptr addrspace(1) %688, i64 %62, !dbg !28
  %690 = getelementptr float, ptr addrspace(1) %689, i64 %99, !dbg !29
  %691 = getelementptr float, ptr addrspace(1) %689, i64 %100, !dbg !29
  %.idx11 = shl nsw i64 %92, 7, !dbg !29
  %692 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx11, !dbg !29
  %.idx12 = shl nsw i64 %93, 7, !dbg !29
  %693 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx12, !dbg !29
  %.idx13 = shl nsw i64 %94, 7, !dbg !29
  %694 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx13, !dbg !29
  %.idx14 = shl nsw i64 %95, 7, !dbg !29
  %695 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx14, !dbg !29
  %.idx15 = shl nsw i64 %96, 7, !dbg !29
  %696 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx15, !dbg !29
  %.idx16 = shl nsw i64 %97, 7, !dbg !29
  %697 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx16, !dbg !29
  %.idx17 = shl nsw i64 %98, 7, !dbg !29
  %698 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx17, !dbg !29
  %699 = extractelement <16 x i32> %152, i64 15, !dbg !29
  %700 = sext i32 %699 to i64, !dbg !29
  %.idx18 = shl nsw i64 %700, 7, !dbg !29
  %701 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx18, !dbg !29
  %702 = extractelement <16 x i32> %152, i64 14, !dbg !29
  %703 = sext i32 %702 to i64, !dbg !29
  %.idx19 = shl nsw i64 %703, 7, !dbg !29
  %704 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx19, !dbg !29
  %705 = extractelement <16 x i32> %152, i64 13, !dbg !29
  %706 = sext i32 %705 to i64, !dbg !29
  %.idx20 = shl nsw i64 %706, 7, !dbg !29
  %707 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx20, !dbg !29
  %708 = extractelement <16 x i32> %152, i64 12, !dbg !29
  %709 = sext i32 %708 to i64, !dbg !29
  %.idx21 = shl nsw i64 %709, 7, !dbg !29
  %710 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx21, !dbg !29
  %711 = extractelement <16 x i32> %152, i64 11, !dbg !29
  %712 = sext i32 %711 to i64, !dbg !29
  %.idx22 = shl nsw i64 %712, 7, !dbg !29
  %713 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx22, !dbg !29
  %714 = extractelement <16 x i32> %152, i64 10, !dbg !29
  %715 = sext i32 %714 to i64, !dbg !29
  %.idx23 = shl nsw i64 %715, 7, !dbg !29
  %716 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx23, !dbg !29
  %717 = extractelement <16 x i32> %152, i64 9, !dbg !29
  %718 = sext i32 %717 to i64, !dbg !29
  %.idx24 = shl nsw i64 %718, 7, !dbg !29
  %719 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx24, !dbg !29
  %720 = extractelement <16 x i32> %152, i64 8, !dbg !29
  %721 = sext i32 %720 to i64, !dbg !29
  %.idx25 = shl nsw i64 %721, 7, !dbg !29
  %722 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx25, !dbg !29
  %723 = extractelement <16 x i32> %152, i64 7, !dbg !29
  %724 = sext i32 %723 to i64, !dbg !29
  %.idx26 = shl nsw i64 %724, 7, !dbg !29
  %725 = getelementptr i8, ptr addrspace(1) %689, i64 %.idx26, !dbg !29
  %726 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %690, i1 %113) #5, !dbg !29
  %727 = bitcast i32 %726 to float, !dbg !29
  %728 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %691, i1 %114) #5, !dbg !29
  %729 = bitcast i32 %728 to float, !dbg !29
  %730 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %692, i1 %115) #5, !dbg !29
  %731 = bitcast i32 %730 to float, !dbg !29
  %732 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %693, i1 %116) #5, !dbg !29
  %733 = bitcast i32 %732 to float, !dbg !29
  %734 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %694, i1 %117) #5, !dbg !29
  %735 = bitcast i32 %734 to float, !dbg !29
  %736 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %695, i1 %118) #5, !dbg !29
  %737 = bitcast i32 %736 to float, !dbg !29
  %738 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %696, i1 %119) #5, !dbg !29
  %739 = bitcast i32 %738 to float, !dbg !29
  %740 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %697, i1 %120) #5, !dbg !29
  %741 = bitcast i32 %740 to float, !dbg !29
  %742 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %698, i1 %121) #5, !dbg !29
  %743 = bitcast i32 %742 to float, !dbg !29
  %744 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %701, i1 %155) #5, !dbg !29
  %745 = bitcast i32 %744 to float, !dbg !29
  %746 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %704, i1 %157) #5, !dbg !29
  %747 = bitcast i32 %746 to float, !dbg !29
  %748 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %707, i1 %159) #5, !dbg !29
  %749 = bitcast i32 %748 to float, !dbg !29
  %750 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %710, i1 %161) #5, !dbg !29
  %751 = bitcast i32 %750 to float, !dbg !29
  %752 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %713, i1 %163) #5, !dbg !29
  %753 = bitcast i32 %752 to float, !dbg !29
  %754 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %716, i1 %165) #5, !dbg !29
  %755 = bitcast i32 %754 to float, !dbg !29
  %756 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %719, i1 %167) #5, !dbg !29
  %757 = bitcast i32 %756 to float, !dbg !29
  %758 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %722, i1 %169) #5, !dbg !29
  %759 = bitcast i32 %758 to float, !dbg !29
  %760 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %725, i1 %171) #5, !dbg !29
  %761 = bitcast i32 %760 to float, !dbg !29
  %762 = fsub float %727, %731, !dbg !30
  %763 = fsub float %727, %733, !dbg !30
  %764 = fsub float %729, %731, !dbg !30
  %765 = fsub float %729, %733, !dbg !30
  %766 = fsub float %727, %735, !dbg !30
  %767 = fsub float %727, %737, !dbg !30
  %768 = fsub float %729, %735, !dbg !30
  %769 = fsub float %729, %737, !dbg !30
  %770 = fsub float %727, %739, !dbg !30
  %771 = fsub float %727, %741, !dbg !30
  %772 = fsub float %729, %739, !dbg !30
  %773 = fsub float %729, %741, !dbg !30
  %774 = fsub float %727, %743, !dbg !30
  %775 = fsub float %727, %745, !dbg !30
  %776 = fsub float %729, %743, !dbg !30
  %777 = fsub float %729, %745, !dbg !30
  %778 = fsub float %727, %747, !dbg !30
  %779 = fsub float %727, %749, !dbg !30
  %780 = fsub float %729, %747, !dbg !30
  %781 = fsub float %729, %749, !dbg !30
  %782 = fsub float %727, %751, !dbg !30
  %783 = fsub float %727, %753, !dbg !30
  %784 = fsub float %729, %751, !dbg !30
  %785 = fsub float %729, %753, !dbg !30
  %786 = fsub float %727, %755, !dbg !30
  %787 = fsub float %727, %757, !dbg !30
  %788 = fsub float %729, %755, !dbg !30
  %789 = fsub float %729, %757, !dbg !30
  %790 = fsub float %729, %759, !dbg !30
  %791 = fsub float %729, %761, !dbg !30
  %792 = fmul float %762, 0x3FF7154760000000, !dbg !31
  %793 = tail call float @llvm.nvvm.ex2.approx.f(float %792), !dbg !31
  %794 = fmul float %763, 0x3FF7154760000000, !dbg !31
  %795 = tail call float @llvm.nvvm.ex2.approx.f(float %794), !dbg !31
  %796 = fmul float %764, 0x3FF7154760000000, !dbg !31
  %797 = tail call float @llvm.nvvm.ex2.approx.f(float %796), !dbg !31
  %798 = fmul float %765, 0x3FF7154760000000, !dbg !31
  %799 = tail call float @llvm.nvvm.ex2.approx.f(float %798), !dbg !31
  %800 = fmul float %766, 0x3FF7154760000000, !dbg !31
  %801 = tail call float @llvm.nvvm.ex2.approx.f(float %800), !dbg !31
  %802 = fmul float %767, 0x3FF7154760000000, !dbg !31
  %803 = tail call float @llvm.nvvm.ex2.approx.f(float %802), !dbg !31
  %804 = fmul float %768, 0x3FF7154760000000, !dbg !31
  %805 = tail call float @llvm.nvvm.ex2.approx.f(float %804), !dbg !31
  %806 = fmul float %769, 0x3FF7154760000000, !dbg !31
  %807 = tail call float @llvm.nvvm.ex2.approx.f(float %806), !dbg !31
  %808 = fmul float %770, 0x3FF7154760000000, !dbg !31
  %809 = tail call float @llvm.nvvm.ex2.approx.f(float %808), !dbg !31
  %810 = fmul float %771, 0x3FF7154760000000, !dbg !31
  %811 = tail call float @llvm.nvvm.ex2.approx.f(float %810), !dbg !31
  %812 = fmul float %772, 0x3FF7154760000000, !dbg !31
  %813 = tail call float @llvm.nvvm.ex2.approx.f(float %812), !dbg !31
  %814 = fmul float %773, 0x3FF7154760000000, !dbg !31
  %815 = tail call float @llvm.nvvm.ex2.approx.f(float %814), !dbg !31
  %816 = fmul float %774, 0x3FF7154760000000, !dbg !31
  %817 = tail call float @llvm.nvvm.ex2.approx.f(float %816), !dbg !31
  %818 = fmul float %775, 0x3FF7154760000000, !dbg !31
  %819 = tail call float @llvm.nvvm.ex2.approx.f(float %818), !dbg !31
  %820 = fmul float %776, 0x3FF7154760000000, !dbg !31
  %821 = tail call float @llvm.nvvm.ex2.approx.f(float %820), !dbg !31
  %822 = fmul float %777, 0x3FF7154760000000, !dbg !31
  %823 = tail call float @llvm.nvvm.ex2.approx.f(float %822), !dbg !31
  %824 = fmul float %778, 0x3FF7154760000000, !dbg !31
  %825 = tail call float @llvm.nvvm.ex2.approx.f(float %824), !dbg !31
  %826 = fmul float %779, 0x3FF7154760000000, !dbg !31
  %827 = tail call float @llvm.nvvm.ex2.approx.f(float %826), !dbg !31
  %828 = fmul float %780, 0x3FF7154760000000, !dbg !31
  %829 = tail call float @llvm.nvvm.ex2.approx.f(float %828), !dbg !31
  %830 = fmul float %781, 0x3FF7154760000000, !dbg !31
  %831 = tail call float @llvm.nvvm.ex2.approx.f(float %830), !dbg !31
  %832 = fmul float %782, 0x3FF7154760000000, !dbg !31
  %833 = tail call float @llvm.nvvm.ex2.approx.f(float %832), !dbg !31
  %834 = fmul float %783, 0x3FF7154760000000, !dbg !31
  %835 = tail call float @llvm.nvvm.ex2.approx.f(float %834), !dbg !31
  %836 = fmul float %784, 0x3FF7154760000000, !dbg !31
  %837 = tail call float @llvm.nvvm.ex2.approx.f(float %836), !dbg !31
  %838 = fmul float %785, 0x3FF7154760000000, !dbg !31
  %839 = tail call float @llvm.nvvm.ex2.approx.f(float %838), !dbg !31
  %840 = fmul float %786, 0x3FF7154760000000, !dbg !31
  %841 = tail call float @llvm.nvvm.ex2.approx.f(float %840), !dbg !31
  %842 = fmul float %787, 0x3FF7154760000000, !dbg !31
  %843 = tail call float @llvm.nvvm.ex2.approx.f(float %842), !dbg !31
  %844 = fmul float %788, 0x3FF7154760000000, !dbg !31
  %845 = tail call float @llvm.nvvm.ex2.approx.f(float %844), !dbg !31
  %846 = fmul float %789, 0x3FF7154760000000, !dbg !31
  %847 = tail call float @llvm.nvvm.ex2.approx.f(float %846), !dbg !31
  %848 = fmul float %790, 0x3FF7154760000000, !dbg !31
  %849 = tail call float @llvm.nvvm.ex2.approx.f(float %848), !dbg !31
  %850 = fmul float %791, 0x3FF7154760000000, !dbg !31
  %851 = tail call float @llvm.nvvm.ex2.approx.f(float %850), !dbg !31
  %852 = fmul float %658, %793, !dbg !32
  %853 = fmul float %659, %795, !dbg !32
  %854 = fmul float %660, %797, !dbg !32
  %855 = fmul float %661, %799, !dbg !32
  %856 = fmul float %662, %801, !dbg !32
  %857 = fmul float %663, %803, !dbg !32
  %858 = fmul float %664, %805, !dbg !32
  %859 = fmul float %665, %807, !dbg !32
  %860 = fmul float %666, %809, !dbg !32
  %861 = fmul float %667, %811, !dbg !32
  %862 = fmul float %668, %813, !dbg !32
  %863 = fmul float %669, %815, !dbg !32
  %864 = fmul float %670, %817, !dbg !32
  %865 = fmul float %671, %819, !dbg !32
  %866 = fmul float %672, %821, !dbg !32
  %867 = fmul float %673, %823, !dbg !32
  %868 = fmul float %674, %825, !dbg !32
  %869 = fmul float %675, %827, !dbg !32
  %870 = fmul float %676, %829, !dbg !32
  %871 = fmul float %677, %831, !dbg !32
  %872 = fmul float %678, %833, !dbg !32
  %873 = fmul float %679, %835, !dbg !32
  %874 = fmul float %680, %837, !dbg !32
  %875 = fmul float %681, %839, !dbg !32
  %876 = fmul float %682, %841, !dbg !32
  %877 = fmul float %683, %843, !dbg !32
  %878 = fmul float %684, %845, !dbg !32
  %879 = fmul float %685, %847, !dbg !32
  %880 = fmul float %686, %849, !dbg !32
  %881 = fmul float %687, %851, !dbg !32
  %882 = fpext bfloat %123 to float, !dbg !33
  %883 = fpext bfloat %125 to float, !dbg !33
  %884 = fmul float %852, %882, !dbg !33
  %885 = fmul float %853, %882, !dbg !33
  %886 = fmul float %854, %883, !dbg !33
  %887 = fmul float %855, %883, !dbg !33
  %888 = fmul float %856, %882, !dbg !33
  %889 = fmul float %857, %882, !dbg !33
  %890 = fmul float %858, %883, !dbg !33
  %891 = fmul float %859, %883, !dbg !33
  %892 = fmul float %860, %882, !dbg !33
  %893 = fmul float %861, %882, !dbg !33
  %894 = fmul float %862, %883, !dbg !33
  %895 = fmul float %863, %883, !dbg !33
  %896 = fmul float %864, %882, !dbg !33
  %897 = fmul float %865, %882, !dbg !33
  %898 = fmul float %866, %883, !dbg !33
  %899 = fmul float %867, %883, !dbg !33
  %900 = fmul float %868, %882, !dbg !33
  %901 = fmul float %869, %882, !dbg !33
  %902 = fmul float %870, %883, !dbg !33
  %903 = fmul float %871, %883, !dbg !33
  %904 = fmul float %872, %882, !dbg !33
  %905 = fmul float %873, %882, !dbg !33
  %906 = fmul float %874, %883, !dbg !33
  %907 = fmul float %875, %883, !dbg !33
  %908 = fmul float %876, %882, !dbg !33
  %909 = fmul float %877, %882, !dbg !33
  %910 = fmul float %878, %883, !dbg !33
  %911 = fmul float %879, %883, !dbg !33
  %912 = fmul float %880, %883, !dbg !33
  %913 = fmul float %881, %883, !dbg !33
  %914 = icmp samesign ugt i32 %26, %35, !dbg !21
  %915 = icmp samesign ugt i32 %26, %36, !dbg !21
  %916 = icmp samesign ugt i32 %26, %37, !dbg !21
  %917 = icmp samesign ugt i32 %26, %38, !dbg !21
  %918 = icmp samesign ugt i32 %27, %38, !dbg !21
  %919 = icmp samesign ugt i32 %26, %73, !dbg !21
  %920 = icmp samesign ugt i32 %26, %75, !dbg !21
  %921 = icmp samesign ugt i32 %27, %73, !dbg !21
  %922 = icmp samesign ugt i32 %27, %75, !dbg !21
  %923 = icmp samesign ugt i32 %26, %77, !dbg !21
  %924 = icmp samesign ugt i32 %26, %79, !dbg !21
  %925 = icmp samesign ugt i32 %27, %77, !dbg !21
  %926 = icmp samesign ugt i32 %27, %79, !dbg !21
  %927 = icmp samesign ugt i32 %26, %80, !dbg !21
  %928 = icmp samesign ugt i32 %26, %81, !dbg !21
  %929 = icmp samesign ugt i32 %27, %80, !dbg !21
  %930 = icmp samesign ugt i32 %27, %81, !dbg !21
  %931 = icmp samesign ugt i32 %26, %82, !dbg !21
  %932 = icmp samesign ugt i32 %26, %83, !dbg !21
  %933 = icmp samesign ugt i32 %27, %82, !dbg !21
  %934 = icmp samesign ugt i32 %27, %83, !dbg !21
  %935 = icmp samesign ugt i32 %26, %84, !dbg !21
  %936 = icmp samesign ugt i32 %26, %85, !dbg !21
  %937 = icmp samesign ugt i32 %27, %84, !dbg !21
  %938 = icmp samesign ugt i32 %27, %85, !dbg !21
  %939 = icmp samesign ugt i32 %27, %86, !dbg !21
  %940 = icmp samesign ugt i32 %27, %87, !dbg !21
  %941 = extractelement <16 x i1> %58, i64 15, !dbg !34
  %942 = and i1 %34, %941, !dbg !35
  %943 = extractelement <16 x i1> %58, i64 14, !dbg !34
  %944 = and i1 %34, %943, !dbg !35
  %945 = and i1 %914, %941, !dbg !34
  %946 = and i1 %33, %945, !dbg !34
  %947 = and i1 %915, %943, !dbg !34
  %948 = and i1 %33, %947, !dbg !34
  %949 = extractelement <16 x i1> %58, i64 13, !dbg !34
  %950 = and i1 %916, %949, !dbg !34
  %951 = and i1 %33, %950, !dbg !34
  %952 = extractelement <16 x i1> %58, i64 12, !dbg !34
  %953 = and i1 %917, %952, !dbg !34
  %954 = and i1 %33, %953, !dbg !34
  %955 = and i1 %914, %949, !dbg !34
  %956 = and i1 %34, %955, !dbg !34
  %957 = and i1 %918, %952, !dbg !34
  %958 = and i1 %34, %957, !dbg !34
  %959 = extractelement <16 x i1> %58, i64 11, !dbg !34
  %960 = and i1 %919, %959, !dbg !34
  %961 = and i1 %33, %960, !dbg !34
  %962 = extractelement <16 x i1> %58, i64 10, !dbg !34
  %963 = and i1 %920, %962, !dbg !34
  %964 = and i1 %33, %963, !dbg !34
  %965 = and i1 %921, %959, !dbg !34
  %966 = and i1 %34, %965, !dbg !34
  %967 = and i1 %922, %962, !dbg !34
  %968 = and i1 %34, %967, !dbg !34
  %969 = extractelement <16 x i1> %58, i64 9, !dbg !34
  %970 = and i1 %923, %969, !dbg !34
  %971 = and i1 %33, %970, !dbg !34
  %972 = extractelement <16 x i1> %58, i64 8, !dbg !34
  %973 = and i1 %924, %972, !dbg !34
  %974 = and i1 %33, %973, !dbg !34
  %975 = and i1 %925, %969, !dbg !34
  %976 = and i1 %34, %975, !dbg !34
  %977 = and i1 %926, %972, !dbg !34
  %978 = and i1 %34, %977, !dbg !34
  %979 = extractelement <16 x i1> %58, i64 7, !dbg !34
  %980 = and i1 %927, %979, !dbg !34
  %981 = and i1 %33, %980, !dbg !34
  %982 = extractelement <16 x i1> %58, i64 6, !dbg !34
  %983 = and i1 %928, %982, !dbg !34
  %984 = and i1 %33, %983, !dbg !34
  %985 = and i1 %929, %979, !dbg !34
  %986 = and i1 %34, %985, !dbg !34
  %987 = and i1 %930, %982, !dbg !34
  %988 = and i1 %34, %987, !dbg !34
  %989 = extractelement <16 x i1> %58, i64 5, !dbg !34
  %990 = and i1 %931, %989, !dbg !34
  %991 = and i1 %33, %990, !dbg !34
  %992 = extractelement <16 x i1> %58, i64 4, !dbg !34
  %993 = and i1 %932, %992, !dbg !34
  %994 = and i1 %33, %993, !dbg !34
  %995 = and i1 %933, %989, !dbg !34
  %996 = and i1 %34, %995, !dbg !34
  %997 = and i1 %934, %992, !dbg !34
  %998 = and i1 %34, %997, !dbg !34
  %999 = extractelement <16 x i1> %58, i64 3, !dbg !34
  %1000 = and i1 %935, %999, !dbg !34
  %1001 = and i1 %33, %1000, !dbg !34
  %1002 = extractelement <16 x i1> %58, i64 2, !dbg !34
  %1003 = and i1 %936, %1002, !dbg !34
  %1004 = and i1 %33, %1003, !dbg !34
  %1005 = and i1 %937, %999, !dbg !34
  %1006 = and i1 %34, %1005, !dbg !34
  %1007 = and i1 %938, %1002, !dbg !34
  %1008 = and i1 %34, %1007, !dbg !34
  %1009 = extractelement <16 x i1> %58, i64 1, !dbg !34
  %1010 = and i1 %939, %1009, !dbg !34
  %1011 = and i1 %34, %1010, !dbg !34
  %1012 = extractelement <16 x i1> %58, i64 0, !dbg !34
  %1013 = and i1 %940, %1012, !dbg !34
  %1014 = and i1 %34, %1013, !dbg !34
  %1015 = shl i32 %126, 6, !dbg !36
  %1016 = sext i32 %1015 to i64, !dbg !37
  %1017 = getelementptr float, ptr addrspace(1) %3, i64 %1016, !dbg !37
  %1018 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx, !dbg !38
  %1019 = getelementptr float, ptr addrspace(1) %1018, i64 %88, !dbg !38
  %1020 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx4, !dbg !38
  %1021 = getelementptr float, ptr addrspace(1) %1020, i64 %88, !dbg !38
  %1022 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx5, !dbg !38
  %1023 = getelementptr float, ptr addrspace(1) %1022, i64 %88, !dbg !38
  %1024 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx6, !dbg !38
  %1025 = getelementptr float, ptr addrspace(1) %1024, i64 %88, !dbg !38
  %1026 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx7, !dbg !38
  %1027 = getelementptr float, ptr addrspace(1) %1026, i64 %88, !dbg !38
  %1028 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx8, !dbg !38
  %1029 = getelementptr float, ptr addrspace(1) %1028, i64 %88, !dbg !38
  %1030 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx9, !dbg !38
  %1031 = getelementptr float, ptr addrspace(1) %1030, i64 %88, !dbg !38
  %1032 = getelementptr i8, ptr addrspace(1) %1017, i64 %.idx10, !dbg !38
  %1033 = getelementptr float, ptr addrspace(1) %1032, i64 %88, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  %1034 = shl nuw nsw i32 %12, 4, !dbg !38
  %1035 = and i32 %1034, 448, !dbg !38
  %1036 = shl nuw nsw i32 %12, 5, !dbg !38
  %1037 = and i32 %1036, 3072, !dbg !38
  %1038 = or disjoint i32 %1037, %1035, !dbg !38
  %1039 = or disjoint i32 %1038, %35, !dbg !38
  %1040 = and i32 %29, 508, !dbg !38
  %1041 = lshr exact i32 %1038, 2, !dbg !38
  %1042 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1041, !dbg !38
  %1043 = getelementptr inbounds nuw float, ptr addrspace(3) %1042, i32 %1039, !dbg !38
  %1044 = bitcast float %884 to i32, !dbg !38
  %1045 = select i1 %946, i32 %1044, i32 0, !dbg !39
  %1046 = bitcast float %885 to i32, !dbg !38
  %1047 = select i1 %948, i32 %1046, i32 0, !dbg !39
  %1048 = insertelement <2 x i32> poison, i32 %1045, i64 0, !dbg !38
  %1049 = insertelement <2 x i32> %1048, i32 %1047, i64 1, !dbg !38
  store <2 x i32> %1049, ptr addrspace(3) %1043, align 8, !dbg !38
  %1050 = or disjoint i32 %1039, 512, !dbg !38
  %1051 = lshr i32 %1050, 4, !dbg !38
  %1052 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1051, !dbg !38
  %1053 = getelementptr inbounds nuw float, ptr addrspace(3) %1052, i32 %1050, !dbg !38
  %1054 = bitcast float %886 to i32, !dbg !38
  %1055 = select i1 %942, i32 %1054, i32 0, !dbg !39
  %1056 = bitcast float %887 to i32, !dbg !38
  %1057 = select i1 %944, i32 %1056, i32 0, !dbg !39
  %1058 = insertelement <2 x i32> poison, i32 %1055, i64 0, !dbg !38
  %1059 = insertelement <2 x i32> %1058, i32 %1057, i64 1, !dbg !38
  store <2 x i32> %1059, ptr addrspace(3) %1053, align 8, !dbg !38
  %1060 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 32, !dbg !38
  %1061 = bitcast float %888 to i32, !dbg !38
  %1062 = select i1 %951, i32 %1061, i32 0, !dbg !39
  %1063 = bitcast float %889 to i32, !dbg !38
  %1064 = select i1 %954, i32 %1063, i32 0, !dbg !39
  %1065 = insertelement <2 x i32> poison, i32 %1062, i64 0, !dbg !38
  %1066 = insertelement <2 x i32> %1065, i32 %1064, i64 1, !dbg !38
  store <2 x i32> %1066, ptr addrspace(3) %1060, align 8, !dbg !38
  %1067 = or disjoint i32 %1039, 520, !dbg !38
  %1068 = lshr i32 %1067, 4, !dbg !38
  %1069 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1068, !dbg !38
  %1070 = getelementptr inbounds nuw float, ptr addrspace(3) %1069, i32 %1067, !dbg !38
  %1071 = bitcast float %890 to i32, !dbg !38
  %1072 = select i1 %956, i32 %1071, i32 0, !dbg !39
  %1073 = bitcast float %891 to i32, !dbg !38
  %1074 = select i1 %958, i32 %1073, i32 0, !dbg !39
  %1075 = insertelement <2 x i32> poison, i32 %1072, i64 0, !dbg !38
  %1076 = insertelement <2 x i32> %1075, i32 %1074, i64 1, !dbg !38
  store <2 x i32> %1076, ptr addrspace(3) %1070, align 8, !dbg !38
  %1077 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 64, !dbg !38
  %1078 = bitcast float %892 to i32, !dbg !38
  %1079 = select i1 %961, i32 %1078, i32 0, !dbg !39
  %1080 = bitcast float %893 to i32, !dbg !38
  %1081 = select i1 %964, i32 %1080, i32 0, !dbg !39
  %1082 = insertelement <2 x i32> poison, i32 %1079, i64 0, !dbg !38
  %1083 = insertelement <2 x i32> %1082, i32 %1081, i64 1, !dbg !38
  store <2 x i32> %1083, ptr addrspace(3) %1077, align 8, !dbg !38
  %1084 = or disjoint i32 %1039, 528, !dbg !38
  %1085 = lshr i32 %1084, 4, !dbg !38
  %1086 = and i32 %1085, 252, !dbg !38
  %1087 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1086, !dbg !38
  %1088 = getelementptr inbounds nuw float, ptr addrspace(3) %1087, i32 %1084, !dbg !38
  %1089 = bitcast float %894 to i32, !dbg !38
  %1090 = select i1 %966, i32 %1089, i32 0, !dbg !39
  %1091 = bitcast float %895 to i32, !dbg !38
  %1092 = select i1 %968, i32 %1091, i32 0, !dbg !39
  %1093 = insertelement <2 x i32> poison, i32 %1090, i64 0, !dbg !38
  %1094 = insertelement <2 x i32> %1093, i32 %1092, i64 1, !dbg !38
  store <2 x i32> %1094, ptr addrspace(3) %1088, align 8, !dbg !38
  %1095 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 96, !dbg !38
  %1096 = bitcast float %896 to i32, !dbg !38
  %1097 = select i1 %971, i32 %1096, i32 0, !dbg !39
  %1098 = bitcast float %897 to i32, !dbg !38
  %1099 = select i1 %974, i32 %1098, i32 0, !dbg !39
  %1100 = insertelement <2 x i32> poison, i32 %1097, i64 0, !dbg !38
  %1101 = insertelement <2 x i32> %1100, i32 %1099, i64 1, !dbg !38
  store <2 x i32> %1101, ptr addrspace(3) %1095, align 8, !dbg !38
  %1102 = or disjoint i32 %1039, 536, !dbg !38
  %1103 = lshr i32 %1102, 4, !dbg !38
  %1104 = and i32 %1103, 252, !dbg !38
  %1105 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1104, !dbg !38
  %1106 = getelementptr inbounds nuw float, ptr addrspace(3) %1105, i32 %1102, !dbg !38
  %1107 = bitcast float %898 to i32, !dbg !38
  %1108 = select i1 %976, i32 %1107, i32 0, !dbg !39
  %1109 = bitcast float %899 to i32, !dbg !38
  %1110 = select i1 %978, i32 %1109, i32 0, !dbg !39
  %1111 = insertelement <2 x i32> poison, i32 %1108, i64 0, !dbg !38
  %1112 = insertelement <2 x i32> %1111, i32 %1110, i64 1, !dbg !38
  store <2 x i32> %1112, ptr addrspace(3) %1106, align 8, !dbg !38
  %1113 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 128, !dbg !38
  %1114 = bitcast float %900 to i32, !dbg !38
  %1115 = select i1 %981, i32 %1114, i32 0, !dbg !39
  %1116 = bitcast float %901 to i32, !dbg !38
  %1117 = select i1 %984, i32 %1116, i32 0, !dbg !39
  %1118 = insertelement <2 x i32> poison, i32 %1115, i64 0, !dbg !38
  %1119 = insertelement <2 x i32> %1118, i32 %1117, i64 1, !dbg !38
  store <2 x i32> %1119, ptr addrspace(3) %1113, align 8, !dbg !38
  %1120 = or disjoint i32 %1039, 544, !dbg !38
  %1121 = lshr i32 %1120, 4, !dbg !38
  %1122 = and i32 %1121, 252, !dbg !38
  %1123 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1122, !dbg !38
  %1124 = getelementptr inbounds nuw float, ptr addrspace(3) %1123, i32 %1120, !dbg !38
  %1125 = bitcast float %902 to i32, !dbg !38
  %1126 = select i1 %986, i32 %1125, i32 0, !dbg !39
  %1127 = bitcast float %903 to i32, !dbg !38
  %1128 = select i1 %988, i32 %1127, i32 0, !dbg !39
  %1129 = insertelement <2 x i32> poison, i32 %1126, i64 0, !dbg !38
  %1130 = insertelement <2 x i32> %1129, i32 %1128, i64 1, !dbg !38
  store <2 x i32> %1130, ptr addrspace(3) %1124, align 8, !dbg !38
  %1131 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 160, !dbg !38
  %1132 = bitcast float %904 to i32, !dbg !38
  %1133 = select i1 %991, i32 %1132, i32 0, !dbg !39
  %1134 = bitcast float %905 to i32, !dbg !38
  %1135 = select i1 %994, i32 %1134, i32 0, !dbg !39
  %1136 = insertelement <2 x i32> poison, i32 %1133, i64 0, !dbg !38
  %1137 = insertelement <2 x i32> %1136, i32 %1135, i64 1, !dbg !38
  store <2 x i32> %1137, ptr addrspace(3) %1131, align 8, !dbg !38
  %1138 = or disjoint i32 %1039, 552, !dbg !38
  %1139 = lshr i32 %1138, 4, !dbg !38
  %1140 = and i32 %1139, 252, !dbg !38
  %1141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1140, !dbg !38
  %1142 = getelementptr inbounds nuw float, ptr addrspace(3) %1141, i32 %1138, !dbg !38
  %1143 = bitcast float %906 to i32, !dbg !38
  %1144 = select i1 %996, i32 %1143, i32 0, !dbg !39
  %1145 = bitcast float %907 to i32, !dbg !38
  %1146 = select i1 %998, i32 %1145, i32 0, !dbg !39
  %1147 = insertelement <2 x i32> poison, i32 %1144, i64 0, !dbg !38
  %1148 = insertelement <2 x i32> %1147, i32 %1146, i64 1, !dbg !38
  store <2 x i32> %1148, ptr addrspace(3) %1142, align 8, !dbg !38
  %1149 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 192, !dbg !38
  %1150 = bitcast float %908 to i32, !dbg !38
  %1151 = select i1 %1001, i32 %1150, i32 0, !dbg !39
  %1152 = bitcast float %909 to i32, !dbg !38
  %1153 = select i1 %1004, i32 %1152, i32 0, !dbg !39
  %1154 = insertelement <2 x i32> poison, i32 %1151, i64 0, !dbg !38
  %1155 = insertelement <2 x i32> %1154, i32 %1153, i64 1, !dbg !38
  store <2 x i32> %1155, ptr addrspace(3) %1149, align 8, !dbg !38
  %1156 = or disjoint i32 %1039, 560, !dbg !38
  %1157 = lshr i32 %1156, 4, !dbg !38
  %1158 = and i32 %1157, 252, !dbg !38
  %1159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1158, !dbg !38
  %1160 = getelementptr inbounds nuw float, ptr addrspace(3) %1159, i32 %1156, !dbg !38
  %1161 = bitcast float %910 to i32, !dbg !38
  %1162 = select i1 %1006, i32 %1161, i32 0, !dbg !39
  %1163 = bitcast float %911 to i32, !dbg !38
  %1164 = select i1 %1008, i32 %1163, i32 0, !dbg !39
  %1165 = insertelement <2 x i32> poison, i32 %1162, i64 0, !dbg !38
  %1166 = insertelement <2 x i32> %1165, i32 %1164, i64 1, !dbg !38
  store <2 x i32> %1166, ptr addrspace(3) %1160, align 8, !dbg !38
  %1167 = getelementptr inbounds nuw i8, ptr addrspace(3) %1043, i32 224, !dbg !38
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1167, align 8, !dbg !38
  %1168 = or disjoint i32 %1039, 568, !dbg !38
  %1169 = lshr i32 %1168, 4, !dbg !38
  %1170 = and i32 %1169, 252, !dbg !38
  %1171 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1170, !dbg !38
  %1172 = getelementptr inbounds nuw float, ptr addrspace(3) %1171, i32 %1168, !dbg !38
  %1173 = bitcast float %912 to i32, !dbg !38
  %1174 = select i1 %1011, i32 %1173, i32 0, !dbg !39
  %1175 = bitcast float %913 to i32, !dbg !38
  %1176 = select i1 %1014, i32 %1175, i32 0, !dbg !39
  %1177 = insertelement <2 x i32> poison, i32 %1174, i64 0, !dbg !38
  %1178 = insertelement <2 x i32> %1177, i32 %1176, i64 1, !dbg !38
  store <2 x i32> %1178, ptr addrspace(3) %1172, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  %1179 = and i32 %22, 28, !dbg !38
  %1180 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1179, !dbg !38
  %1181 = getelementptr inbounds nuw float, ptr addrspace(3) %1180, i32 %1040, !dbg !38
  %1182 = load <4 x i32>, ptr addrspace(3) %1181, align 16, !dbg !38
  %1183 = or disjoint i32 %1040, 512, !dbg !38
  %1184 = lshr i32 %1183, 4, !dbg !38
  %1185 = and i32 %1184, 60, !dbg !38
  %1186 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1185, !dbg !38
  %1187 = getelementptr inbounds nuw float, ptr addrspace(3) %1186, i32 %1183, !dbg !38
  %1188 = load <4 x i32>, ptr addrspace(3) %1187, align 16, !dbg !38
  %1189 = or disjoint i32 %1040, 1024, !dbg !38
  %1190 = lshr i32 %1189, 4, !dbg !38
  %1191 = and i32 %1190, 92, !dbg !38
  %1192 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1191, !dbg !38
  %1193 = getelementptr inbounds nuw float, ptr addrspace(3) %1192, i32 %1189, !dbg !38
  %1194 = load <4 x i32>, ptr addrspace(3) %1193, align 16, !dbg !38
  %1195 = or disjoint i32 %1040, 1536, !dbg !38
  %1196 = lshr i32 %1195, 4, !dbg !38
  %1197 = and i32 %1196, 124, !dbg !38
  %1198 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1197, !dbg !38
  %1199 = getelementptr inbounds nuw float, ptr addrspace(3) %1198, i32 %1195, !dbg !38
  %1200 = load <4 x i32>, ptr addrspace(3) %1199, align 16, !dbg !38
  %1201 = or disjoint i32 %1040, 2048, !dbg !38
  %1202 = lshr i32 %1201, 4, !dbg !38
  %1203 = and i32 %1202, 156, !dbg !38
  %1204 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1203, !dbg !38
  %1205 = getelementptr inbounds nuw float, ptr addrspace(3) %1204, i32 %1201, !dbg !38
  %1206 = load <4 x i32>, ptr addrspace(3) %1205, align 16, !dbg !38
  %1207 = or disjoint i32 %1040, 2560, !dbg !38
  %1208 = lshr i32 %1207, 4, !dbg !38
  %1209 = and i32 %1208, 188, !dbg !38
  %1210 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1209, !dbg !38
  %1211 = getelementptr inbounds nuw float, ptr addrspace(3) %1210, i32 %1207, !dbg !38
  %1212 = load <4 x i32>, ptr addrspace(3) %1211, align 16, !dbg !38
  %1213 = or disjoint i32 %1040, 3072, !dbg !38
  %1214 = lshr i32 %1213, 4, !dbg !38
  %1215 = and i32 %1214, 220, !dbg !38
  %1216 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1215, !dbg !38
  %1217 = getelementptr inbounds nuw float, ptr addrspace(3) %1216, i32 %1213, !dbg !38
  %1218 = load <4 x i32>, ptr addrspace(3) %1217, align 16, !dbg !38
  %1219 = or i32 %29, 3584, !dbg !38
  %1220 = lshr i32 %1219, 4, !dbg !38
  %1221 = and i32 %1220, 252, !dbg !38
  %1222 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1221, !dbg !38
  %1223 = getelementptr inbounds nuw float, ptr addrspace(3) %1222, i32 %1219, !dbg !38
  %1224 = load <4 x i32>, ptr addrspace(3) %1223, align 16, !dbg !38
  %.extract = extractelement <4 x i32> %1182, i64 0, !dbg !38
  %.extract66 = extractelement <4 x i32> %1182, i64 1, !dbg !38
  %.extract67 = extractelement <4 x i32> %1182, i64 2, !dbg !38
  %.extract68 = extractelement <4 x i32> %1182, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract66, i32 %.extract67, i32 %.extract68, ptr addrspace(1) %1019, i1 %202) #5, !dbg !38
  %.extract69 = extractelement <4 x i32> %1188, i64 0, !dbg !38
  %.extract70 = extractelement <4 x i32> %1188, i64 1, !dbg !38
  %.extract71 = extractelement <4 x i32> %1188, i64 2, !dbg !38
  %.extract72 = extractelement <4 x i32> %1188, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract70, i32 %.extract71, i32 %.extract72, ptr addrspace(1) %1021, i1 %204) #5, !dbg !38
  %.extract73 = extractelement <4 x i32> %1194, i64 0, !dbg !38
  %.extract74 = extractelement <4 x i32> %1194, i64 1, !dbg !38
  %.extract75 = extractelement <4 x i32> %1194, i64 2, !dbg !38
  %.extract76 = extractelement <4 x i32> %1194, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract73, i32 %.extract74, i32 %.extract75, i32 %.extract76, ptr addrspace(1) %1023, i1 %206) #5, !dbg !38
  %.extract77 = extractelement <4 x i32> %1200, i64 0, !dbg !38
  %.extract78 = extractelement <4 x i32> %1200, i64 1, !dbg !38
  %.extract79 = extractelement <4 x i32> %1200, i64 2, !dbg !38
  %.extract80 = extractelement <4 x i32> %1200, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract78, i32 %.extract79, i32 %.extract80, ptr addrspace(1) %1025, i1 %208) #5, !dbg !38
  %.extract81 = extractelement <4 x i32> %1206, i64 0, !dbg !38
  %.extract82 = extractelement <4 x i32> %1206, i64 1, !dbg !38
  %.extract83 = extractelement <4 x i32> %1206, i64 2, !dbg !38
  %.extract84 = extractelement <4 x i32> %1206, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract81, i32 %.extract82, i32 %.extract83, i32 %.extract84, ptr addrspace(1) %1027, i1 %210) #5, !dbg !38
  %.extract85 = extractelement <4 x i32> %1212, i64 0, !dbg !38
  %.extract86 = extractelement <4 x i32> %1212, i64 1, !dbg !38
  %.extract87 = extractelement <4 x i32> %1212, i64 2, !dbg !38
  %.extract88 = extractelement <4 x i32> %1212, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract85, i32 %.extract86, i32 %.extract87, i32 %.extract88, ptr addrspace(1) %1029, i1 %212) #5, !dbg !38
  %.extract89 = extractelement <4 x i32> %1218, i64 0, !dbg !38
  %.extract90 = extractelement <4 x i32> %1218, i64 1, !dbg !38
  %.extract91 = extractelement <4 x i32> %1218, i64 2, !dbg !38
  %.extract92 = extractelement <4 x i32> %1218, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract89, i32 %.extract90, i32 %.extract91, i32 %.extract92, ptr addrspace(1) %1031, i1 %214) #5, !dbg !38
  %.extract93 = extractelement <4 x i32> %1224, i64 0, !dbg !38
  %.extract94 = extractelement <4 x i32> %1224, i64 1, !dbg !38
  %.extract95 = extractelement <4 x i32> %1224, i64 2, !dbg !38
  %.extract96 = extractelement <4 x i32> %1224, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract93, i32 %.extract94, i32 %.extract95, i32 %.extract96, ptr addrspace(1) %1033, i1 %215) #5, !dbg !38
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 51, column: 21, scope: !5)
!15 = !DILocation(line: 52, column: 16, scope: !5)
!16 = !DILocation(line: 54, column: 42, scope: !5)
!17 = !DILocation(line: 54, column: 38, scope: !5)
!18 = !DILocation(line: 54, column: 46, scope: !5)
!19 = !DILocation(line: 54, column: 83, scope: !5)
!20 = !DILocation(line: 55, column: 21, scope: !5)
!21 = !DILocation(line: 70, column: 26, scope: !5)
!22 = !DILocation(line: 59, column: 45, scope: !5)
!23 = !DILocation(line: 59, column: 52, scope: !5)
!24 = !DILocation(line: 59, column: 36, scope: !5)
!25 = !DILocation(line: 60, column: 22, scope: !5)
!26 = !DILocation(line: 61, column: 27, scope: !5)
!27 = !DILocation(line: 64, column: 36, scope: !5)
!28 = !DILocation(line: 64, column: 44, scope: !5)
!29 = !DILocation(line: 65, column: 22, scope: !5)
!30 = !DILocation(line: 66, column: 34, scope: !5)
!31 = !DILocation(line: 67, column: 19, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 70, column: 43, scope: !5)
!35 = !DILocation(line: 70, column: 58, scope: !5)
!36 = !DILocation(line: 72, column: 48, scope: !5)
!37 = !DILocation(line: 72, column: 32, scope: !5)
!38 = !DILocation(line: 73, column: 18, scope: !5)
!39 = !DILocation(line: 71, column: 29, scope: !5)
!40 = !DILocation(line: 73, column: 4, scope: !5)
