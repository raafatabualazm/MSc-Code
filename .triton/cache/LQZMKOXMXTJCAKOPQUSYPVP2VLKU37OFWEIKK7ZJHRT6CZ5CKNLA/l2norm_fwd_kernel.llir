; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 5, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit1 = lshr i32 %9, 4, !dbg !11
  %10 = and i32 %.lobit1, 3, !dbg !11
  %11 = or disjoint i32 %10, 4, !dbg !11
  %12 = or disjoint i32 %10, 8, !dbg !11
  %13 = or disjoint i32 %10, 12, !dbg !11
  %14 = or disjoint i32 %10, 16, !dbg !11
  %15 = or disjoint i32 %10, 20, !dbg !11
  %16 = or disjoint i32 %10, 24, !dbg !11
  %17 = or disjoint i32 %10, 28, !dbg !11
  %18 = zext nneg i32 %10 to i64, !dbg !11
  %19 = zext nneg i32 %11 to i64, !dbg !11
  %20 = zext nneg i32 %12 to i64, !dbg !11
  %21 = zext nneg i32 %13 to i64, !dbg !11
  %22 = zext nneg i32 %14 to i64, !dbg !11
  %23 = zext nneg i32 %15 to i64, !dbg !11
  %24 = zext nneg i32 %16 to i64, !dbg !11
  %25 = zext nneg i32 %17 to i64, !dbg !11
  %26 = or disjoint i64 %18, %8, !dbg !11
  %27 = or disjoint i64 %19, %8, !dbg !11
  %28 = or disjoint i64 %20, %8, !dbg !11
  %29 = or disjoint i64 %21, %8, !dbg !11
  %30 = or disjoint i64 %22, %8, !dbg !11
  %31 = or disjoint i64 %23, %8, !dbg !11
  %32 = or disjoint i64 %24, %8, !dbg !11
  %33 = or disjoint i64 %25, %8, !dbg !11
  %34 = shl nsw i64 %26, 7, !dbg !11
  %35 = shl nsw i64 %27, 7, !dbg !11
  %36 = shl nsw i64 %28, 7, !dbg !11
  %37 = shl nsw i64 %29, 7, !dbg !11
  %38 = shl nsw i64 %30, 7, !dbg !11
  %39 = shl nsw i64 %31, 7, !dbg !11
  %40 = shl nsw i64 %32, 7, !dbg !11
  %41 = shl nsw i64 %33, 7, !dbg !11
  %42 = shl nuw nsw i32 %9, 3, !dbg !11
  %43 = and i32 %42, 120, !dbg !11
  %44 = zext nneg i32 %43 to i64, !dbg !11
  %45 = or disjoint i64 %34, %44, !dbg !11
  %46 = or disjoint i64 %35, %44, !dbg !11
  %47 = or disjoint i64 %36, %44, !dbg !11
  %48 = or disjoint i64 %37, %44, !dbg !11
  %49 = or disjoint i64 %38, %44, !dbg !11
  %50 = or disjoint i64 %39, %44, !dbg !11
  %51 = or disjoint i64 %40, %44, !dbg !11
  %52 = or disjoint i64 %41, %44, !dbg !11
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %45, !dbg !11
  %54 = getelementptr bfloat, ptr addrspace(1) %0, i64 %46, !dbg !11
  %55 = getelementptr bfloat, ptr addrspace(1) %0, i64 %47, !dbg !11
  %56 = getelementptr bfloat, ptr addrspace(1) %0, i64 %48, !dbg !11
  %57 = getelementptr bfloat, ptr addrspace(1) %0, i64 %49, !dbg !11
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !11
  %59 = getelementptr bfloat, ptr addrspace(1) %0, i64 %51, !dbg !11
  %60 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !11
  %61 = icmp sgt i32 %7, -1, !dbg !11
  %62 = icmp slt i64 %26, 49152, !dbg !11
  %63 = icmp slt i64 %27, 49152, !dbg !11
  %64 = icmp slt i64 %28, 49152, !dbg !11
  %65 = icmp slt i64 %29, 49152, !dbg !11
  %66 = icmp slt i64 %30, 49152, !dbg !11
  %67 = icmp slt i64 %31, 49152, !dbg !11
  %68 = icmp slt i64 %32, 49152, !dbg !11
  %69 = icmp slt i64 %33, 49152, !dbg !11
  %70 = and i1 %61, %62, !dbg !11
  %71 = and i1 %61, %63, !dbg !11
  %72 = and i1 %61, %64, !dbg !11
  %73 = and i1 %61, %65, !dbg !11
  %74 = and i1 %61, %66, !dbg !11
  %75 = and i1 %61, %67, !dbg !11
  %76 = and i1 %61, %68, !dbg !11
  %77 = and i1 %61, %69, !dbg !11
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %70) #6, !dbg !11
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !11
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !11
  %81 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !11
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !11
  %83 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !11
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !11
  %85 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !11
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !11
  %87 = extractelement <2 x bfloat> %80, i64 0, !dbg !11
  %88 = extractelement <2 x bfloat> %80, i64 1, !dbg !11
  %89 = extractelement <2 x bfloat> %82, i64 0, !dbg !11
  %90 = extractelement <2 x bfloat> %82, i64 1, !dbg !11
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !11
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !11
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !11
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !11
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %71) #6, !dbg !11
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !11
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !11
  %98 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !11
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !11
  %100 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !11
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !11
  %102 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !11
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !11
  %104 = extractelement <2 x bfloat> %97, i64 0, !dbg !11
  %105 = extractelement <2 x bfloat> %97, i64 1, !dbg !11
  %106 = extractelement <2 x bfloat> %99, i64 0, !dbg !11
  %107 = extractelement <2 x bfloat> %99, i64 1, !dbg !11
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !11
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !11
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !11
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !11
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %72) #6, !dbg !11
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !11
  %114 = bitcast i32 %113 to <2 x bfloat>, !dbg !11
  %115 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !11
  %116 = bitcast i32 %115 to <2 x bfloat>, !dbg !11
  %117 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !11
  %118 = bitcast i32 %117 to <2 x bfloat>, !dbg !11
  %119 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !11
  %120 = bitcast i32 %119 to <2 x bfloat>, !dbg !11
  %121 = extractelement <2 x bfloat> %114, i64 0, !dbg !11
  %122 = extractelement <2 x bfloat> %114, i64 1, !dbg !11
  %123 = extractelement <2 x bfloat> %116, i64 0, !dbg !11
  %124 = extractelement <2 x bfloat> %116, i64 1, !dbg !11
  %125 = extractelement <2 x bfloat> %118, i64 0, !dbg !11
  %126 = extractelement <2 x bfloat> %118, i64 1, !dbg !11
  %127 = extractelement <2 x bfloat> %120, i64 0, !dbg !11
  %128 = extractelement <2 x bfloat> %120, i64 1, !dbg !11
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %73) #6, !dbg !11
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !11
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !11
  %132 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !11
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !11
  %134 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !11
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !11
  %136 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !11
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !11
  %138 = extractelement <2 x bfloat> %131, i64 0, !dbg !11
  %139 = extractelement <2 x bfloat> %131, i64 1, !dbg !11
  %140 = extractelement <2 x bfloat> %133, i64 0, !dbg !11
  %141 = extractelement <2 x bfloat> %133, i64 1, !dbg !11
  %142 = extractelement <2 x bfloat> %135, i64 0, !dbg !11
  %143 = extractelement <2 x bfloat> %135, i64 1, !dbg !11
  %144 = extractelement <2 x bfloat> %137, i64 0, !dbg !11
  %145 = extractelement <2 x bfloat> %137, i64 1, !dbg !11
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %74) #6, !dbg !11
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !11
  %148 = bitcast i32 %147 to <2 x bfloat>, !dbg !11
  %149 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !11
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !11
  %151 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !11
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !11
  %153 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !11
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !11
  %155 = extractelement <2 x bfloat> %148, i64 0, !dbg !11
  %156 = extractelement <2 x bfloat> %148, i64 1, !dbg !11
  %157 = extractelement <2 x bfloat> %150, i64 0, !dbg !11
  %158 = extractelement <2 x bfloat> %150, i64 1, !dbg !11
  %159 = extractelement <2 x bfloat> %152, i64 0, !dbg !11
  %160 = extractelement <2 x bfloat> %152, i64 1, !dbg !11
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !11
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !11
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %75) #6, !dbg !11
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !11
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !11
  %166 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !11
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !11
  %168 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !11
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !11
  %170 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !11
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !11
  %172 = extractelement <2 x bfloat> %165, i64 0, !dbg !11
  %173 = extractelement <2 x bfloat> %165, i64 1, !dbg !11
  %174 = extractelement <2 x bfloat> %167, i64 0, !dbg !11
  %175 = extractelement <2 x bfloat> %167, i64 1, !dbg !11
  %176 = extractelement <2 x bfloat> %169, i64 0, !dbg !11
  %177 = extractelement <2 x bfloat> %169, i64 1, !dbg !11
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !11
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !11
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %76) #6, !dbg !11
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !11
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !11
  %183 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !11
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !11
  %185 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !11
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !11
  %187 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !11
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !11
  %189 = extractelement <2 x bfloat> %182, i64 0, !dbg !11
  %190 = extractelement <2 x bfloat> %182, i64 1, !dbg !11
  %191 = extractelement <2 x bfloat> %184, i64 0, !dbg !11
  %192 = extractelement <2 x bfloat> %184, i64 1, !dbg !11
  %193 = extractelement <2 x bfloat> %186, i64 0, !dbg !11
  %194 = extractelement <2 x bfloat> %186, i64 1, !dbg !11
  %195 = extractelement <2 x bfloat> %188, i64 0, !dbg !11
  %196 = extractelement <2 x bfloat> %188, i64 1, !dbg !11
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %77) #6, !dbg !11
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !11
  %199 = bitcast i32 %198 to <2 x bfloat>, !dbg !11
  %200 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !11
  %201 = bitcast i32 %200 to <2 x bfloat>, !dbg !11
  %202 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !11
  %203 = bitcast i32 %202 to <2 x bfloat>, !dbg !11
  %204 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !11
  %205 = bitcast i32 %204 to <2 x bfloat>, !dbg !11
  %206 = extractelement <2 x bfloat> %199, i64 0, !dbg !11
  %207 = extractelement <2 x bfloat> %199, i64 1, !dbg !11
  %208 = extractelement <2 x bfloat> %201, i64 0, !dbg !11
  %209 = extractelement <2 x bfloat> %201, i64 1, !dbg !11
  %210 = extractelement <2 x bfloat> %203, i64 0, !dbg !11
  %211 = extractelement <2 x bfloat> %203, i64 1, !dbg !11
  %212 = extractelement <2 x bfloat> %205, i64 0, !dbg !11
  %213 = extractelement <2 x bfloat> %205, i64 1, !dbg !11
  %214 = fpext bfloat %87 to float, !dbg !12
  %215 = fpext bfloat %88 to float, !dbg !12
  %216 = fpext bfloat %89 to float, !dbg !12
  %217 = fpext bfloat %90 to float, !dbg !12
  %218 = fpext bfloat %91 to float, !dbg !12
  %219 = fpext bfloat %92 to float, !dbg !12
  %220 = fpext bfloat %93 to float, !dbg !12
  %221 = fpext bfloat %94 to float, !dbg !12
  %222 = fpext bfloat %104 to float, !dbg !12
  %223 = fpext bfloat %105 to float, !dbg !12
  %224 = fpext bfloat %106 to float, !dbg !12
  %225 = fpext bfloat %107 to float, !dbg !12
  %226 = fpext bfloat %108 to float, !dbg !12
  %227 = fpext bfloat %109 to float, !dbg !12
  %228 = fpext bfloat %110 to float, !dbg !12
  %229 = fpext bfloat %111 to float, !dbg !12
  %230 = fpext bfloat %121 to float, !dbg !12
  %231 = fpext bfloat %122 to float, !dbg !12
  %232 = fpext bfloat %123 to float, !dbg !12
  %233 = fpext bfloat %124 to float, !dbg !12
  %234 = fpext bfloat %125 to float, !dbg !12
  %235 = fpext bfloat %126 to float, !dbg !12
  %236 = fpext bfloat %127 to float, !dbg !12
  %237 = fpext bfloat %128 to float, !dbg !12
  %238 = fpext bfloat %138 to float, !dbg !12
  %239 = fpext bfloat %139 to float, !dbg !12
  %240 = fpext bfloat %140 to float, !dbg !12
  %241 = fpext bfloat %141 to float, !dbg !12
  %242 = fpext bfloat %142 to float, !dbg !12
  %243 = fpext bfloat %143 to float, !dbg !12
  %244 = fpext bfloat %144 to float, !dbg !12
  %245 = fpext bfloat %145 to float, !dbg !12
  %246 = fpext bfloat %155 to float, !dbg !12
  %247 = fpext bfloat %156 to float, !dbg !12
  %248 = fpext bfloat %157 to float, !dbg !12
  %249 = fpext bfloat %158 to float, !dbg !12
  %250 = fpext bfloat %159 to float, !dbg !12
  %251 = fpext bfloat %160 to float, !dbg !12
  %252 = fpext bfloat %161 to float, !dbg !12
  %253 = fpext bfloat %162 to float, !dbg !12
  %254 = fpext bfloat %172 to float, !dbg !12
  %255 = fpext bfloat %173 to float, !dbg !12
  %256 = fpext bfloat %174 to float, !dbg !12
  %257 = fpext bfloat %175 to float, !dbg !12
  %258 = fpext bfloat %176 to float, !dbg !12
  %259 = fpext bfloat %177 to float, !dbg !12
  %260 = fpext bfloat %178 to float, !dbg !12
  %261 = fpext bfloat %179 to float, !dbg !12
  %262 = fpext bfloat %189 to float, !dbg !12
  %263 = fpext bfloat %190 to float, !dbg !12
  %264 = fpext bfloat %191 to float, !dbg !12
  %265 = fpext bfloat %192 to float, !dbg !12
  %266 = fpext bfloat %193 to float, !dbg !12
  %267 = fpext bfloat %194 to float, !dbg !12
  %268 = fpext bfloat %195 to float, !dbg !12
  %269 = fpext bfloat %196 to float, !dbg !12
  %270 = fpext bfloat %206 to float, !dbg !12
  %271 = fpext bfloat %207 to float, !dbg !12
  %272 = fpext bfloat %208 to float, !dbg !12
  %273 = fpext bfloat %209 to float, !dbg !12
  %274 = fpext bfloat %210 to float, !dbg !12
  %275 = fpext bfloat %211 to float, !dbg !12
  %276 = fpext bfloat %212 to float, !dbg !12
  %277 = fpext bfloat %213 to float, !dbg !12
  %278 = fmul float %214, %214, !dbg !13
  %279 = fmul float %215, %215, !dbg !13
  %280 = fmul float %216, %216, !dbg !13
  %281 = fmul float %217, %217, !dbg !13
  %282 = fmul float %218, %218, !dbg !13
  %283 = fmul float %219, %219, !dbg !13
  %284 = fmul float %220, %220, !dbg !13
  %285 = fmul float %221, %221, !dbg !13
  %286 = fmul float %222, %222, !dbg !13
  %287 = fmul float %223, %223, !dbg !13
  %288 = fmul float %224, %224, !dbg !13
  %289 = fmul float %225, %225, !dbg !13
  %290 = fmul float %226, %226, !dbg !13
  %291 = fmul float %227, %227, !dbg !13
  %292 = fmul float %228, %228, !dbg !13
  %293 = fmul float %229, %229, !dbg !13
  %294 = fmul float %230, %230, !dbg !13
  %295 = fmul float %231, %231, !dbg !13
  %296 = fmul float %232, %232, !dbg !13
  %297 = fmul float %233, %233, !dbg !13
  %298 = fmul float %234, %234, !dbg !13
  %299 = fmul float %235, %235, !dbg !13
  %300 = fmul float %236, %236, !dbg !13
  %301 = fmul float %237, %237, !dbg !13
  %302 = fmul float %238, %238, !dbg !13
  %303 = fmul float %239, %239, !dbg !13
  %304 = fmul float %240, %240, !dbg !13
  %305 = fmul float %241, %241, !dbg !13
  %306 = fmul float %242, %242, !dbg !13
  %307 = fmul float %243, %243, !dbg !13
  %308 = fmul float %244, %244, !dbg !13
  %309 = fmul float %245, %245, !dbg !13
  %310 = fmul float %246, %246, !dbg !13
  %311 = fmul float %247, %247, !dbg !13
  %312 = fmul float %248, %248, !dbg !13
  %313 = fmul float %249, %249, !dbg !13
  %314 = fmul float %250, %250, !dbg !13
  %315 = fmul float %251, %251, !dbg !13
  %316 = fmul float %252, %252, !dbg !13
  %317 = fmul float %253, %253, !dbg !13
  %318 = fmul float %254, %254, !dbg !13
  %319 = fmul float %255, %255, !dbg !13
  %320 = fmul float %256, %256, !dbg !13
  %321 = fmul float %257, %257, !dbg !13
  %322 = fmul float %258, %258, !dbg !13
  %323 = fmul float %259, %259, !dbg !13
  %324 = fmul float %260, %260, !dbg !13
  %325 = fmul float %261, %261, !dbg !13
  %326 = fmul float %262, %262, !dbg !13
  %327 = fmul float %263, %263, !dbg !13
  %328 = fmul float %264, %264, !dbg !13
  %329 = fmul float %265, %265, !dbg !13
  %330 = fmul float %266, %266, !dbg !13
  %331 = fmul float %267, %267, !dbg !13
  %332 = fmul float %268, %268, !dbg !13
  %333 = fmul float %269, %269, !dbg !13
  %334 = fmul float %270, %270, !dbg !13
  %335 = fmul float %271, %271, !dbg !13
  %336 = fmul float %272, %272, !dbg !13
  %337 = fmul float %273, %273, !dbg !13
  %338 = fmul float %274, %274, !dbg !13
  %339 = fmul float %275, %275, !dbg !13
  %340 = fmul float %276, %276, !dbg !13
  %341 = fmul float %277, %277, !dbg !13
  %342 = fadd float %278, %279, !dbg !14
  %343 = fadd float %280, %342, !dbg !14
  %344 = fadd float %281, %343, !dbg !14
  %345 = fadd float %282, %344, !dbg !14
  %346 = fadd float %283, %345, !dbg !14
  %347 = fadd float %284, %346, !dbg !14
  %348 = fadd float %285, %347, !dbg !14
  %349 = fadd float %286, %287, !dbg !14
  %350 = fadd float %288, %349, !dbg !14
  %351 = fadd float %289, %350, !dbg !14
  %352 = fadd float %290, %351, !dbg !14
  %353 = fadd float %291, %352, !dbg !14
  %354 = fadd float %292, %353, !dbg !14
  %355 = fadd float %293, %354, !dbg !14
  %356 = fadd float %294, %295, !dbg !14
  %357 = fadd float %296, %356, !dbg !14
  %358 = fadd float %297, %357, !dbg !14
  %359 = fadd float %298, %358, !dbg !14
  %360 = fadd float %299, %359, !dbg !14
  %361 = fadd float %300, %360, !dbg !14
  %362 = fadd float %301, %361, !dbg !14
  %363 = fadd float %302, %303, !dbg !14
  %364 = fadd float %304, %363, !dbg !14
  %365 = fadd float %305, %364, !dbg !14
  %366 = fadd float %306, %365, !dbg !14
  %367 = fadd float %307, %366, !dbg !14
  %368 = fadd float %308, %367, !dbg !14
  %369 = fadd float %309, %368, !dbg !14
  %370 = fadd float %310, %311, !dbg !14
  %371 = fadd float %312, %370, !dbg !14
  %372 = fadd float %313, %371, !dbg !14
  %373 = fadd float %314, %372, !dbg !14
  %374 = fadd float %315, %373, !dbg !14
  %375 = fadd float %316, %374, !dbg !14
  %376 = fadd float %317, %375, !dbg !14
  %377 = fadd float %318, %319, !dbg !14
  %378 = fadd float %320, %377, !dbg !14
  %379 = fadd float %321, %378, !dbg !14
  %380 = fadd float %322, %379, !dbg !14
  %381 = fadd float %323, %380, !dbg !14
  %382 = fadd float %324, %381, !dbg !14
  %383 = fadd float %325, %382, !dbg !14
  %384 = fadd float %326, %327, !dbg !14
  %385 = fadd float %328, %384, !dbg !14
  %386 = fadd float %329, %385, !dbg !14
  %387 = fadd float %330, %386, !dbg !14
  %388 = fadd float %331, %387, !dbg !14
  %389 = fadd float %332, %388, !dbg !14
  %390 = fadd float %333, %389, !dbg !14
  %391 = fadd float %334, %335, !dbg !14
  %392 = fadd float %336, %391, !dbg !14
  %393 = fadd float %337, %392, !dbg !14
  %394 = fadd float %338, %393, !dbg !14
  %395 = fadd float %339, %394, !dbg !14
  %396 = fadd float %340, %395, !dbg !14
  %397 = fadd float %341, %396, !dbg !14
  %398 = bitcast float %348 to i32, !dbg !18
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 8, i32 31), !dbg !18
  %400 = bitcast i32 %399 to float, !dbg !18
  %401 = fadd float %348, %400, !dbg !14
  %402 = bitcast float %401 to i32, !dbg !18
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !18
  %404 = bitcast i32 %403 to float, !dbg !18
  %405 = fadd float %401, %404, !dbg !14
  %406 = bitcast float %405 to i32, !dbg !18
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !18
  %408 = bitcast i32 %407 to float, !dbg !18
  %409 = fadd float %405, %408, !dbg !14
  %410 = bitcast float %409 to i32, !dbg !18
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !18
  %412 = bitcast i32 %411 to float, !dbg !18
  %413 = fadd float %409, %412, !dbg !14
  %414 = bitcast float %355 to i32, !dbg !18
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 8, i32 31), !dbg !18
  %416 = bitcast i32 %415 to float, !dbg !18
  %417 = fadd float %355, %416, !dbg !14
  %418 = bitcast float %417 to i32, !dbg !18
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 4, i32 31), !dbg !18
  %420 = bitcast i32 %419 to float, !dbg !18
  %421 = fadd float %417, %420, !dbg !14
  %422 = bitcast float %421 to i32, !dbg !18
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 2, i32 31), !dbg !18
  %424 = bitcast i32 %423 to float, !dbg !18
  %425 = fadd float %421, %424, !dbg !14
  %426 = bitcast float %425 to i32, !dbg !18
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 1, i32 31), !dbg !18
  %428 = bitcast i32 %427 to float, !dbg !18
  %429 = fadd float %425, %428, !dbg !14
  %430 = bitcast float %362 to i32, !dbg !18
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 8, i32 31), !dbg !18
  %432 = bitcast i32 %431 to float, !dbg !18
  %433 = fadd float %362, %432, !dbg !14
  %434 = bitcast float %433 to i32, !dbg !18
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 4, i32 31), !dbg !18
  %436 = bitcast i32 %435 to float, !dbg !18
  %437 = fadd float %433, %436, !dbg !14
  %438 = bitcast float %437 to i32, !dbg !18
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !18
  %440 = bitcast i32 %439 to float, !dbg !18
  %441 = fadd float %437, %440, !dbg !14
  %442 = bitcast float %441 to i32, !dbg !18
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !18
  %444 = bitcast i32 %443 to float, !dbg !18
  %445 = fadd float %441, %444, !dbg !14
  %446 = bitcast float %369 to i32, !dbg !18
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !18
  %448 = bitcast i32 %447 to float, !dbg !18
  %449 = fadd float %369, %448, !dbg !14
  %450 = bitcast float %449 to i32, !dbg !18
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 4, i32 31), !dbg !18
  %452 = bitcast i32 %451 to float, !dbg !18
  %453 = fadd float %449, %452, !dbg !14
  %454 = bitcast float %453 to i32, !dbg !18
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %454, i32 2, i32 31), !dbg !18
  %456 = bitcast i32 %455 to float, !dbg !18
  %457 = fadd float %453, %456, !dbg !14
  %458 = bitcast float %457 to i32, !dbg !18
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !18
  %460 = bitcast i32 %459 to float, !dbg !18
  %461 = fadd float %457, %460, !dbg !14
  %462 = bitcast float %376 to i32, !dbg !18
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 8, i32 31), !dbg !18
  %464 = bitcast i32 %463 to float, !dbg !18
  %465 = fadd float %376, %464, !dbg !14
  %466 = bitcast float %465 to i32, !dbg !18
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 4, i32 31), !dbg !18
  %468 = bitcast i32 %467 to float, !dbg !18
  %469 = fadd float %465, %468, !dbg !14
  %470 = bitcast float %469 to i32, !dbg !18
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !18
  %472 = bitcast i32 %471 to float, !dbg !18
  %473 = fadd float %469, %472, !dbg !14
  %474 = bitcast float %473 to i32, !dbg !18
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 1, i32 31), !dbg !18
  %476 = bitcast i32 %475 to float, !dbg !18
  %477 = fadd float %473, %476, !dbg !14
  %478 = bitcast float %383 to i32, !dbg !18
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 8, i32 31), !dbg !18
  %480 = bitcast i32 %479 to float, !dbg !18
  %481 = fadd float %383, %480, !dbg !14
  %482 = bitcast float %481 to i32, !dbg !18
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 4, i32 31), !dbg !18
  %484 = bitcast i32 %483 to float, !dbg !18
  %485 = fadd float %481, %484, !dbg !14
  %486 = bitcast float %485 to i32, !dbg !18
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 2, i32 31), !dbg !18
  %488 = bitcast i32 %487 to float, !dbg !18
  %489 = fadd float %485, %488, !dbg !14
  %490 = bitcast float %489 to i32, !dbg !18
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 1, i32 31), !dbg !18
  %492 = bitcast i32 %491 to float, !dbg !18
  %493 = fadd float %489, %492, !dbg !14
  %494 = bitcast float %390 to i32, !dbg !18
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 8, i32 31), !dbg !18
  %496 = bitcast i32 %495 to float, !dbg !18
  %497 = fadd float %390, %496, !dbg !14
  %498 = bitcast float %497 to i32, !dbg !18
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 4, i32 31), !dbg !18
  %500 = bitcast i32 %499 to float, !dbg !18
  %501 = fadd float %497, %500, !dbg !14
  %502 = bitcast float %501 to i32, !dbg !18
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 2, i32 31), !dbg !18
  %504 = bitcast i32 %503 to float, !dbg !18
  %505 = fadd float %501, %504, !dbg !14
  %506 = bitcast float %505 to i32, !dbg !18
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 1, i32 31), !dbg !18
  %508 = bitcast i32 %507 to float, !dbg !18
  %509 = fadd float %505, %508, !dbg !14
  %510 = bitcast float %397 to i32, !dbg !18
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 8, i32 31), !dbg !18
  %512 = bitcast i32 %511 to float, !dbg !18
  %513 = fadd float %397, %512, !dbg !14
  %514 = bitcast float %513 to i32, !dbg !18
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 4, i32 31), !dbg !18
  %516 = bitcast i32 %515 to float, !dbg !18
  %517 = fadd float %513, %516, !dbg !14
  %518 = bitcast float %517 to i32, !dbg !18
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !18
  %520 = bitcast i32 %519 to float, !dbg !18
  %521 = fadd float %517, %520, !dbg !14
  %522 = bitcast float %521 to i32, !dbg !18
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 1, i32 31), !dbg !18
  %524 = bitcast i32 %523 to float, !dbg !18
  %525 = fadd float %521, %524, !dbg !14
  %526 = fadd float %3, %413, !dbg !19
  %527 = fadd float %3, %429, !dbg !19
  %528 = fadd float %3, %445, !dbg !19
  %529 = fadd float %3, %461, !dbg !19
  %530 = fadd float %3, %477, !dbg !19
  %531 = fadd float %3, %493, !dbg !19
  %532 = fadd float %3, %509, !dbg !19
  %533 = fadd float %3, %525, !dbg !19
  %534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %534, 0, !dbg !20
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %535, 0, !dbg !20
  br i1 %.not.i, label %541, label %536, !dbg !20

536:                                              ; preds = %5
  br i1 %.not1.i, label %539, label %537, !dbg !20

537:                                              ; preds = %536
  %538 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %526) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

539:                                              ; preds = %536
  %540 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %526) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

541:                                              ; preds = %5
  br i1 %.not1.i, label %544, label %542, !dbg !20

542:                                              ; preds = %541
  %543 = tail call float @llvm.nvvm.sqrt.rn.f(float %526) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

544:                                              ; preds = %541
  %545 = tail call float @llvm.nvvm.sqrt.approx.f(float %526) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %537, %539, %542, %544
  %.0.i = phi float [ %538, %537 ], [ %540, %539 ], [ %543, %542 ], [ %545, %544 ], !dbg !20
  %546 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i3 = icmp eq i32 %546, 0, !dbg !20
  %547 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i6 = icmp eq i32 %547, 0, !dbg !20
  br i1 %.not.i3, label %553, label %548, !dbg !20

548:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %551, label %549, !dbg !20

549:                                              ; preds = %548
  %550 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit7, !dbg !20

551:                                              ; preds = %548
  %552 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit7, !dbg !20

553:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %556, label %554, !dbg !20

554:                                              ; preds = %553
  %555 = tail call float @llvm.nvvm.sqrt.rn.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit7, !dbg !20

556:                                              ; preds = %553
  %557 = tail call float @llvm.nvvm.sqrt.approx.f(float %527) #6, !dbg !20
  br label %__nv_sqrtf.exit7, !dbg !20

__nv_sqrtf.exit7:                                 ; preds = %549, %551, %554, %556
  %.0.i5 = phi float [ %550, %549 ], [ %552, %551 ], [ %555, %554 ], [ %557, %556 ], !dbg !20
  %558 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i8 = icmp eq i32 %558, 0, !dbg !20
  %559 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i11 = icmp eq i32 %559, 0, !dbg !20
  br i1 %.not.i8, label %565, label %560, !dbg !20

560:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %563, label %561, !dbg !20

561:                                              ; preds = %560
  %562 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit12, !dbg !20

563:                                              ; preds = %560
  %564 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit12, !dbg !20

565:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %568, label %566, !dbg !20

566:                                              ; preds = %565
  %567 = tail call float @llvm.nvvm.sqrt.rn.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit12, !dbg !20

568:                                              ; preds = %565
  %569 = tail call float @llvm.nvvm.sqrt.approx.f(float %528) #6, !dbg !20
  br label %__nv_sqrtf.exit12, !dbg !20

__nv_sqrtf.exit12:                                ; preds = %561, %563, %566, %568
  %.0.i10 = phi float [ %562, %561 ], [ %564, %563 ], [ %567, %566 ], [ %569, %568 ], !dbg !20
  %570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i13 = icmp eq i32 %570, 0, !dbg !20
  %571 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i16 = icmp eq i32 %571, 0, !dbg !20
  br i1 %.not.i13, label %577, label %572, !dbg !20

572:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %575, label %573, !dbg !20

573:                                              ; preds = %572
  %574 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit17, !dbg !20

575:                                              ; preds = %572
  %576 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit17, !dbg !20

577:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %580, label %578, !dbg !20

578:                                              ; preds = %577
  %579 = tail call float @llvm.nvvm.sqrt.rn.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit17, !dbg !20

580:                                              ; preds = %577
  %581 = tail call float @llvm.nvvm.sqrt.approx.f(float %529) #6, !dbg !20
  br label %__nv_sqrtf.exit17, !dbg !20

__nv_sqrtf.exit17:                                ; preds = %573, %575, %578, %580
  %.0.i15 = phi float [ %574, %573 ], [ %576, %575 ], [ %579, %578 ], [ %581, %580 ], !dbg !20
  %582 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i18 = icmp eq i32 %582, 0, !dbg !20
  %583 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i21 = icmp eq i32 %583, 0, !dbg !20
  br i1 %.not.i18, label %589, label %584, !dbg !20

584:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %587, label %585, !dbg !20

585:                                              ; preds = %584
  %586 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit22, !dbg !20

587:                                              ; preds = %584
  %588 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit22, !dbg !20

589:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %592, label %590, !dbg !20

590:                                              ; preds = %589
  %591 = tail call float @llvm.nvvm.sqrt.rn.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit22, !dbg !20

592:                                              ; preds = %589
  %593 = tail call float @llvm.nvvm.sqrt.approx.f(float %530) #6, !dbg !20
  br label %__nv_sqrtf.exit22, !dbg !20

__nv_sqrtf.exit22:                                ; preds = %585, %587, %590, %592
  %.0.i20 = phi float [ %586, %585 ], [ %588, %587 ], [ %591, %590 ], [ %593, %592 ], !dbg !20
  %594 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i23 = icmp eq i32 %594, 0, !dbg !20
  %595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i26 = icmp eq i32 %595, 0, !dbg !20
  br i1 %.not.i23, label %601, label %596, !dbg !20

596:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %599, label %597, !dbg !20

597:                                              ; preds = %596
  %598 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit27, !dbg !20

599:                                              ; preds = %596
  %600 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit27, !dbg !20

601:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %604, label %602, !dbg !20

602:                                              ; preds = %601
  %603 = tail call float @llvm.nvvm.sqrt.rn.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit27, !dbg !20

604:                                              ; preds = %601
  %605 = tail call float @llvm.nvvm.sqrt.approx.f(float %531) #6, !dbg !20
  br label %__nv_sqrtf.exit27, !dbg !20

__nv_sqrtf.exit27:                                ; preds = %597, %599, %602, %604
  %.0.i25 = phi float [ %598, %597 ], [ %600, %599 ], [ %603, %602 ], [ %605, %604 ], !dbg !20
  %606 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i28 = icmp eq i32 %606, 0, !dbg !20
  %607 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i31 = icmp eq i32 %607, 0, !dbg !20
  br i1 %.not.i28, label %613, label %608, !dbg !20

608:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %611, label %609, !dbg !20

609:                                              ; preds = %608
  %610 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit32, !dbg !20

611:                                              ; preds = %608
  %612 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit32, !dbg !20

613:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %616, label %614, !dbg !20

614:                                              ; preds = %613
  %615 = tail call float @llvm.nvvm.sqrt.rn.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit32, !dbg !20

616:                                              ; preds = %613
  %617 = tail call float @llvm.nvvm.sqrt.approx.f(float %532) #6, !dbg !20
  br label %__nv_sqrtf.exit32, !dbg !20

__nv_sqrtf.exit32:                                ; preds = %609, %611, %614, %616
  %.0.i30 = phi float [ %610, %609 ], [ %612, %611 ], [ %615, %614 ], [ %617, %616 ], !dbg !20
  %618 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i33 = icmp eq i32 %618, 0, !dbg !20
  %619 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i36 = icmp eq i32 %619, 0, !dbg !20
  br i1 %.not.i33, label %625, label %620, !dbg !20

620:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %623, label %621, !dbg !20

621:                                              ; preds = %620
  %622 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit37, !dbg !20

623:                                              ; preds = %620
  %624 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit37, !dbg !20

625:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %628, label %626, !dbg !20

626:                                              ; preds = %625
  %627 = tail call float @llvm.nvvm.sqrt.rn.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit37, !dbg !20

628:                                              ; preds = %625
  %629 = tail call float @llvm.nvvm.sqrt.approx.f(float %533) #6, !dbg !20
  br label %__nv_sqrtf.exit37, !dbg !20

__nv_sqrtf.exit37:                                ; preds = %621, %623, %626, %628
  %.0.i35 = phi float [ %622, %621 ], [ %624, %623 ], [ %627, %626 ], [ %629, %628 ], !dbg !20
  %630 = and i32 %9, 31, !dbg !11
  %631 = zext nneg i32 %630 to i64, !dbg !11
  %632 = or disjoint i64 %8, %631, !dbg !11
  %633 = and i32 %9, 32, !dbg !11
  %634 = icmp eq i32 %633, 0, !dbg !11
  %635 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %636 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i5), !dbg !21
  %637 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i10), !dbg !21
  %638 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i15), !dbg !21
  %639 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i20), !dbg !21
  %640 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i25), !dbg !21
  %641 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i30), !dbg !21
  %642 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i35), !dbg !21
  %643 = fmul float %635, %214, !dbg !22
  %644 = fmul float %635, %215, !dbg !22
  %645 = fmul float %635, %216, !dbg !22
  %646 = fmul float %635, %217, !dbg !22
  %647 = fmul float %635, %218, !dbg !22
  %648 = fmul float %635, %219, !dbg !22
  %649 = fmul float %635, %220, !dbg !22
  %650 = fmul float %635, %221, !dbg !22
  %651 = fmul float %636, %222, !dbg !22
  %652 = fmul float %636, %223, !dbg !22
  %653 = fmul float %636, %224, !dbg !22
  %654 = fmul float %636, %225, !dbg !22
  %655 = fmul float %636, %226, !dbg !22
  %656 = fmul float %636, %227, !dbg !22
  %657 = fmul float %636, %228, !dbg !22
  %658 = fmul float %636, %229, !dbg !22
  %659 = fmul float %637, %230, !dbg !22
  %660 = fmul float %637, %231, !dbg !22
  %661 = fmul float %637, %232, !dbg !22
  %662 = fmul float %637, %233, !dbg !22
  %663 = fmul float %637, %234, !dbg !22
  %664 = fmul float %637, %235, !dbg !22
  %665 = fmul float %637, %236, !dbg !22
  %666 = fmul float %637, %237, !dbg !22
  %667 = fmul float %638, %238, !dbg !22
  %668 = fmul float %638, %239, !dbg !22
  %669 = fmul float %638, %240, !dbg !22
  %670 = fmul float %638, %241, !dbg !22
  %671 = fmul float %638, %242, !dbg !22
  %672 = fmul float %638, %243, !dbg !22
  %673 = fmul float %638, %244, !dbg !22
  %674 = fmul float %638, %245, !dbg !22
  %675 = fmul float %639, %246, !dbg !22
  %676 = fmul float %639, %247, !dbg !22
  %677 = fmul float %639, %248, !dbg !22
  %678 = fmul float %639, %249, !dbg !22
  %679 = fmul float %639, %250, !dbg !22
  %680 = fmul float %639, %251, !dbg !22
  %681 = fmul float %639, %252, !dbg !22
  %682 = fmul float %639, %253, !dbg !22
  %683 = fmul float %640, %254, !dbg !22
  %684 = fmul float %640, %255, !dbg !22
  %685 = fmul float %640, %256, !dbg !22
  %686 = fmul float %640, %257, !dbg !22
  %687 = fmul float %640, %258, !dbg !22
  %688 = fmul float %640, %259, !dbg !22
  %689 = fmul float %640, %260, !dbg !22
  %690 = fmul float %640, %261, !dbg !22
  %691 = fmul float %641, %262, !dbg !22
  %692 = fmul float %641, %263, !dbg !22
  %693 = fmul float %641, %264, !dbg !22
  %694 = fmul float %641, %265, !dbg !22
  %695 = fmul float %641, %266, !dbg !22
  %696 = fmul float %641, %267, !dbg !22
  %697 = fmul float %641, %268, !dbg !22
  %698 = fmul float %641, %269, !dbg !22
  %699 = fmul float %642, %270, !dbg !22
  %700 = fmul float %642, %271, !dbg !22
  %701 = fmul float %642, %272, !dbg !22
  %702 = fmul float %642, %273, !dbg !22
  %703 = fmul float %642, %274, !dbg !22
  %704 = fmul float %642, %275, !dbg !22
  %705 = fmul float %642, %276, !dbg !22
  %706 = fmul float %642, %277, !dbg !22
  %707 = fptrunc float %643 to bfloat, !dbg !23
  %708 = fptrunc float %644 to bfloat, !dbg !23
  %709 = fptrunc float %645 to bfloat, !dbg !23
  %710 = fptrunc float %646 to bfloat, !dbg !23
  %711 = fptrunc float %647 to bfloat, !dbg !23
  %712 = fptrunc float %648 to bfloat, !dbg !23
  %713 = fptrunc float %649 to bfloat, !dbg !23
  %714 = fptrunc float %650 to bfloat, !dbg !23
  %715 = fptrunc float %651 to bfloat, !dbg !23
  %716 = fptrunc float %652 to bfloat, !dbg !23
  %717 = fptrunc float %653 to bfloat, !dbg !23
  %718 = fptrunc float %654 to bfloat, !dbg !23
  %719 = fptrunc float %655 to bfloat, !dbg !23
  %720 = fptrunc float %656 to bfloat, !dbg !23
  %721 = fptrunc float %657 to bfloat, !dbg !23
  %722 = fptrunc float %658 to bfloat, !dbg !23
  %723 = fptrunc float %659 to bfloat, !dbg !23
  %724 = fptrunc float %660 to bfloat, !dbg !23
  %725 = fptrunc float %661 to bfloat, !dbg !23
  %726 = fptrunc float %662 to bfloat, !dbg !23
  %727 = fptrunc float %663 to bfloat, !dbg !23
  %728 = fptrunc float %664 to bfloat, !dbg !23
  %729 = fptrunc float %665 to bfloat, !dbg !23
  %730 = fptrunc float %666 to bfloat, !dbg !23
  %731 = fptrunc float %667 to bfloat, !dbg !23
  %732 = fptrunc float %668 to bfloat, !dbg !23
  %733 = fptrunc float %669 to bfloat, !dbg !23
  %734 = fptrunc float %670 to bfloat, !dbg !23
  %735 = fptrunc float %671 to bfloat, !dbg !23
  %736 = fptrunc float %672 to bfloat, !dbg !23
  %737 = fptrunc float %673 to bfloat, !dbg !23
  %738 = fptrunc float %674 to bfloat, !dbg !23
  %739 = fptrunc float %675 to bfloat, !dbg !23
  %740 = fptrunc float %676 to bfloat, !dbg !23
  %741 = fptrunc float %677 to bfloat, !dbg !23
  %742 = fptrunc float %678 to bfloat, !dbg !23
  %743 = fptrunc float %679 to bfloat, !dbg !23
  %744 = fptrunc float %680 to bfloat, !dbg !23
  %745 = fptrunc float %681 to bfloat, !dbg !23
  %746 = fptrunc float %682 to bfloat, !dbg !23
  %747 = fptrunc float %683 to bfloat, !dbg !23
  %748 = fptrunc float %684 to bfloat, !dbg !23
  %749 = fptrunc float %685 to bfloat, !dbg !23
  %750 = fptrunc float %686 to bfloat, !dbg !23
  %751 = fptrunc float %687 to bfloat, !dbg !23
  %752 = fptrunc float %688 to bfloat, !dbg !23
  %753 = fptrunc float %689 to bfloat, !dbg !23
  %754 = fptrunc float %690 to bfloat, !dbg !23
  %755 = fptrunc float %691 to bfloat, !dbg !23
  %756 = fptrunc float %692 to bfloat, !dbg !23
  %757 = fptrunc float %693 to bfloat, !dbg !23
  %758 = fptrunc float %694 to bfloat, !dbg !23
  %759 = fptrunc float %695 to bfloat, !dbg !23
  %760 = fptrunc float %696 to bfloat, !dbg !23
  %761 = fptrunc float %697 to bfloat, !dbg !23
  %762 = fptrunc float %698 to bfloat, !dbg !23
  %763 = fptrunc float %699 to bfloat, !dbg !23
  %764 = fptrunc float %700 to bfloat, !dbg !23
  %765 = fptrunc float %701 to bfloat, !dbg !23
  %766 = fptrunc float %702 to bfloat, !dbg !23
  %767 = fptrunc float %703 to bfloat, !dbg !23
  %768 = fptrunc float %704 to bfloat, !dbg !23
  %769 = fptrunc float %705 to bfloat, !dbg !23
  %770 = fptrunc float %706 to bfloat, !dbg !23
  %771 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !24
  %772 = getelementptr bfloat, ptr addrspace(1) %1, i64 %46, !dbg !24
  %773 = getelementptr bfloat, ptr addrspace(1) %1, i64 %47, !dbg !24
  %774 = getelementptr bfloat, ptr addrspace(1) %1, i64 %48, !dbg !24
  %775 = getelementptr bfloat, ptr addrspace(1) %1, i64 %49, !dbg !24
  %776 = getelementptr bfloat, ptr addrspace(1) %1, i64 %50, !dbg !24
  %777 = getelementptr bfloat, ptr addrspace(1) %1, i64 %51, !dbg !24
  %778 = getelementptr bfloat, ptr addrspace(1) %1, i64 %52, !dbg !24
  %779 = insertelement <2 x bfloat> poison, bfloat %707, i64 0, !dbg !24
  %780 = insertelement <2 x bfloat> %779, bfloat %708, i64 1, !dbg !24
  %781 = bitcast <2 x bfloat> %780 to i32, !dbg !24
  %782 = insertelement <2 x bfloat> poison, bfloat %709, i64 0, !dbg !24
  %783 = insertelement <2 x bfloat> %782, bfloat %710, i64 1, !dbg !24
  %784 = bitcast <2 x bfloat> %783 to i32, !dbg !24
  %785 = insertelement <2 x bfloat> poison, bfloat %711, i64 0, !dbg !24
  %786 = insertelement <2 x bfloat> %785, bfloat %712, i64 1, !dbg !24
  %787 = bitcast <2 x bfloat> %786 to i32, !dbg !24
  %788 = insertelement <2 x bfloat> poison, bfloat %713, i64 0, !dbg !24
  %789 = insertelement <2 x bfloat> %788, bfloat %714, i64 1, !dbg !24
  %790 = bitcast <2 x bfloat> %789 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %781, i32 %784, i32 %787, i32 %790, ptr addrspace(1) %771, i1 %70) #6, !dbg !24
  %791 = insertelement <2 x bfloat> poison, bfloat %715, i64 0, !dbg !24
  %792 = insertelement <2 x bfloat> %791, bfloat %716, i64 1, !dbg !24
  %793 = bitcast <2 x bfloat> %792 to i32, !dbg !24
  %794 = insertelement <2 x bfloat> poison, bfloat %717, i64 0, !dbg !24
  %795 = insertelement <2 x bfloat> %794, bfloat %718, i64 1, !dbg !24
  %796 = bitcast <2 x bfloat> %795 to i32, !dbg !24
  %797 = insertelement <2 x bfloat> poison, bfloat %719, i64 0, !dbg !24
  %798 = insertelement <2 x bfloat> %797, bfloat %720, i64 1, !dbg !24
  %799 = bitcast <2 x bfloat> %798 to i32, !dbg !24
  %800 = insertelement <2 x bfloat> poison, bfloat %721, i64 0, !dbg !24
  %801 = insertelement <2 x bfloat> %800, bfloat %722, i64 1, !dbg !24
  %802 = bitcast <2 x bfloat> %801 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %793, i32 %796, i32 %799, i32 %802, ptr addrspace(1) %772, i1 %71) #6, !dbg !24
  %803 = insertelement <2 x bfloat> poison, bfloat %723, i64 0, !dbg !24
  %804 = insertelement <2 x bfloat> %803, bfloat %724, i64 1, !dbg !24
  %805 = bitcast <2 x bfloat> %804 to i32, !dbg !24
  %806 = insertelement <2 x bfloat> poison, bfloat %725, i64 0, !dbg !24
  %807 = insertelement <2 x bfloat> %806, bfloat %726, i64 1, !dbg !24
  %808 = bitcast <2 x bfloat> %807 to i32, !dbg !24
  %809 = insertelement <2 x bfloat> poison, bfloat %727, i64 0, !dbg !24
  %810 = insertelement <2 x bfloat> %809, bfloat %728, i64 1, !dbg !24
  %811 = bitcast <2 x bfloat> %810 to i32, !dbg !24
  %812 = insertelement <2 x bfloat> poison, bfloat %729, i64 0, !dbg !24
  %813 = insertelement <2 x bfloat> %812, bfloat %730, i64 1, !dbg !24
  %814 = bitcast <2 x bfloat> %813 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %805, i32 %808, i32 %811, i32 %814, ptr addrspace(1) %773, i1 %72) #6, !dbg !24
  %815 = insertelement <2 x bfloat> poison, bfloat %731, i64 0, !dbg !24
  %816 = insertelement <2 x bfloat> %815, bfloat %732, i64 1, !dbg !24
  %817 = bitcast <2 x bfloat> %816 to i32, !dbg !24
  %818 = insertelement <2 x bfloat> poison, bfloat %733, i64 0, !dbg !24
  %819 = insertelement <2 x bfloat> %818, bfloat %734, i64 1, !dbg !24
  %820 = bitcast <2 x bfloat> %819 to i32, !dbg !24
  %821 = insertelement <2 x bfloat> poison, bfloat %735, i64 0, !dbg !24
  %822 = insertelement <2 x bfloat> %821, bfloat %736, i64 1, !dbg !24
  %823 = bitcast <2 x bfloat> %822 to i32, !dbg !24
  %824 = insertelement <2 x bfloat> poison, bfloat %737, i64 0, !dbg !24
  %825 = insertelement <2 x bfloat> %824, bfloat %738, i64 1, !dbg !24
  %826 = bitcast <2 x bfloat> %825 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %817, i32 %820, i32 %823, i32 %826, ptr addrspace(1) %774, i1 %73) #6, !dbg !24
  %827 = insertelement <2 x bfloat> poison, bfloat %739, i64 0, !dbg !24
  %828 = insertelement <2 x bfloat> %827, bfloat %740, i64 1, !dbg !24
  %829 = bitcast <2 x bfloat> %828 to i32, !dbg !24
  %830 = insertelement <2 x bfloat> poison, bfloat %741, i64 0, !dbg !24
  %831 = insertelement <2 x bfloat> %830, bfloat %742, i64 1, !dbg !24
  %832 = bitcast <2 x bfloat> %831 to i32, !dbg !24
  %833 = insertelement <2 x bfloat> poison, bfloat %743, i64 0, !dbg !24
  %834 = insertelement <2 x bfloat> %833, bfloat %744, i64 1, !dbg !24
  %835 = bitcast <2 x bfloat> %834 to i32, !dbg !24
  %836 = insertelement <2 x bfloat> poison, bfloat %745, i64 0, !dbg !24
  %837 = insertelement <2 x bfloat> %836, bfloat %746, i64 1, !dbg !24
  %838 = bitcast <2 x bfloat> %837 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %829, i32 %832, i32 %835, i32 %838, ptr addrspace(1) %775, i1 %74) #6, !dbg !24
  %839 = insertelement <2 x bfloat> poison, bfloat %747, i64 0, !dbg !24
  %840 = insertelement <2 x bfloat> %839, bfloat %748, i64 1, !dbg !24
  %841 = bitcast <2 x bfloat> %840 to i32, !dbg !24
  %842 = insertelement <2 x bfloat> poison, bfloat %749, i64 0, !dbg !24
  %843 = insertelement <2 x bfloat> %842, bfloat %750, i64 1, !dbg !24
  %844 = bitcast <2 x bfloat> %843 to i32, !dbg !24
  %845 = insertelement <2 x bfloat> poison, bfloat %751, i64 0, !dbg !24
  %846 = insertelement <2 x bfloat> %845, bfloat %752, i64 1, !dbg !24
  %847 = bitcast <2 x bfloat> %846 to i32, !dbg !24
  %848 = insertelement <2 x bfloat> poison, bfloat %753, i64 0, !dbg !24
  %849 = insertelement <2 x bfloat> %848, bfloat %754, i64 1, !dbg !24
  %850 = bitcast <2 x bfloat> %849 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %841, i32 %844, i32 %847, i32 %850, ptr addrspace(1) %776, i1 %75) #6, !dbg !24
  %851 = insertelement <2 x bfloat> poison, bfloat %755, i64 0, !dbg !24
  %852 = insertelement <2 x bfloat> %851, bfloat %756, i64 1, !dbg !24
  %853 = bitcast <2 x bfloat> %852 to i32, !dbg !24
  %854 = insertelement <2 x bfloat> poison, bfloat %757, i64 0, !dbg !24
  %855 = insertelement <2 x bfloat> %854, bfloat %758, i64 1, !dbg !24
  %856 = bitcast <2 x bfloat> %855 to i32, !dbg !24
  %857 = insertelement <2 x bfloat> poison, bfloat %759, i64 0, !dbg !24
  %858 = insertelement <2 x bfloat> %857, bfloat %760, i64 1, !dbg !24
  %859 = bitcast <2 x bfloat> %858 to i32, !dbg !24
  %860 = insertelement <2 x bfloat> poison, bfloat %761, i64 0, !dbg !24
  %861 = insertelement <2 x bfloat> %860, bfloat %762, i64 1, !dbg !24
  %862 = bitcast <2 x bfloat> %861 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %853, i32 %856, i32 %859, i32 %862, ptr addrspace(1) %777, i1 %76) #6, !dbg !24
  %863 = insertelement <2 x bfloat> poison, bfloat %763, i64 0, !dbg !24
  %864 = insertelement <2 x bfloat> %863, bfloat %764, i64 1, !dbg !24
  %865 = bitcast <2 x bfloat> %864 to i32, !dbg !24
  %866 = insertelement <2 x bfloat> poison, bfloat %765, i64 0, !dbg !24
  %867 = insertelement <2 x bfloat> %866, bfloat %766, i64 1, !dbg !24
  %868 = bitcast <2 x bfloat> %867 to i32, !dbg !24
  %869 = insertelement <2 x bfloat> poison, bfloat %767, i64 0, !dbg !24
  %870 = insertelement <2 x bfloat> %869, bfloat %768, i64 1, !dbg !24
  %871 = bitcast <2 x bfloat> %870 to i32, !dbg !24
  %872 = insertelement <2 x bfloat> poison, bfloat %769, i64 0, !dbg !24
  %873 = insertelement <2 x bfloat> %872, bfloat %770, i64 1, !dbg !24
  %874 = bitcast <2 x bfloat> %873 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %865, i32 %868, i32 %871, i32 %874, ptr addrspace(1) %778, i1 %77) #6, !dbg !24
  %875 = getelementptr float, ptr addrspace(1) %2, i64 %632, !dbg !25
  %876 = icmp slt i64 %632, 49152, !dbg !25
  %877 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  store float %635, ptr addrspace(3) %877, align 4, !dbg !25
  %878 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %636, ptr addrspace(3) %878, align 4, !dbg !25
  %879 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %637, ptr addrspace(3) %879, align 4, !dbg !25
  %880 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  store float %638, ptr addrspace(3) %880, align 4, !dbg !25
  %881 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  store float %639, ptr addrspace(3) %881, align 4, !dbg !25
  %882 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  store float %640, ptr addrspace(3) %882, align 4, !dbg !25
  %883 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  store float %641, ptr addrspace(3) %883, align 4, !dbg !25
  %884 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  store float %642, ptr addrspace(3) %884, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %885 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %630, !dbg !25
  %886 = load i32, ptr addrspace(3) %885, align 4, !dbg !25
  %887 = and i1 %634, %876, !dbg !25
  %888 = and i1 %61, %887, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %886, ptr addrspace(1) %875, i1 %888) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
