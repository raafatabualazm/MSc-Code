; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 4, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 4, !dbg !11
  %11 = and i32 %10, 3, !dbg !11
  %12 = or disjoint i32 %11, 4, !dbg !11
  %13 = or disjoint i32 %11, 8, !dbg !11
  %14 = or disjoint i32 %11, 12, !dbg !11
  %15 = zext nneg i32 %11 to i64, !dbg !11
  %16 = zext nneg i32 %12 to i64, !dbg !11
  %17 = zext nneg i32 %13 to i64, !dbg !11
  %18 = zext nneg i32 %14 to i64, !dbg !11
  %19 = or disjoint i64 %15, %8, !dbg !11
  %20 = or disjoint i64 %16, %8, !dbg !11
  %21 = or disjoint i64 %17, %8, !dbg !11
  %22 = or disjoint i64 %18, %8, !dbg !11
  %23 = shl nsw i64 %19, 7, !dbg !11
  %24 = shl nsw i64 %20, 7, !dbg !11
  %25 = shl nsw i64 %21, 7, !dbg !11
  %26 = shl nsw i64 %22, 7, !dbg !11
  %27 = shl nuw nsw i32 %9, 3, !dbg !11
  %28 = and i32 %27, 120, !dbg !11
  %29 = zext nneg i32 %28 to i64, !dbg !11
  %30 = or disjoint i64 %23, %29, !dbg !11
  %31 = or disjoint i64 %24, %29, !dbg !11
  %32 = or disjoint i64 %25, %29, !dbg !11
  %33 = or disjoint i64 %26, %29, !dbg !11
  %34 = getelementptr bfloat, ptr addrspace(1) %0, i64 %30, !dbg !11
  %35 = getelementptr bfloat, ptr addrspace(1) %0, i64 %31, !dbg !11
  %36 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !11
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !11
  %38 = icmp sgt i32 %7, -1, !dbg !11
  %39 = icmp slt i64 %19, 49152, !dbg !11
  %40 = icmp slt i64 %20, 49152, !dbg !11
  %41 = icmp slt i64 %21, 49152, !dbg !11
  %42 = icmp slt i64 %22, 49152, !dbg !11
  %43 = and i1 %38, %39, !dbg !11
  %44 = and i1 %38, %40, !dbg !11
  %45 = and i1 %38, %41, !dbg !11
  %46 = and i1 %38, %42, !dbg !11
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %43) #6, !dbg !11
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !11
  %49 = bitcast i32 %48 to <2 x bfloat>, !dbg !11
  %50 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !11
  %51 = bitcast i32 %50 to <2 x bfloat>, !dbg !11
  %52 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !11
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !11
  %54 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !11
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !11
  %56 = extractelement <2 x bfloat> %49, i64 0, !dbg !11
  %57 = extractelement <2 x bfloat> %49, i64 1, !dbg !11
  %58 = extractelement <2 x bfloat> %51, i64 0, !dbg !11
  %59 = extractelement <2 x bfloat> %51, i64 1, !dbg !11
  %60 = extractelement <2 x bfloat> %53, i64 0, !dbg !11
  %61 = extractelement <2 x bfloat> %53, i64 1, !dbg !11
  %62 = extractelement <2 x bfloat> %55, i64 0, !dbg !11
  %63 = extractelement <2 x bfloat> %55, i64 1, !dbg !11
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %44) #6, !dbg !11
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !11
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !11
  %67 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !11
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !11
  %69 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !11
  %70 = bitcast i32 %69 to <2 x bfloat>, !dbg !11
  %71 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !11
  %72 = bitcast i32 %71 to <2 x bfloat>, !dbg !11
  %73 = extractelement <2 x bfloat> %66, i64 0, !dbg !11
  %74 = extractelement <2 x bfloat> %66, i64 1, !dbg !11
  %75 = extractelement <2 x bfloat> %68, i64 0, !dbg !11
  %76 = extractelement <2 x bfloat> %68, i64 1, !dbg !11
  %77 = extractelement <2 x bfloat> %70, i64 0, !dbg !11
  %78 = extractelement <2 x bfloat> %70, i64 1, !dbg !11
  %79 = extractelement <2 x bfloat> %72, i64 0, !dbg !11
  %80 = extractelement <2 x bfloat> %72, i64 1, !dbg !11
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %45) #6, !dbg !11
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !11
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !11
  %84 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !11
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !11
  %86 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !11
  %87 = bitcast i32 %86 to <2 x bfloat>, !dbg !11
  %88 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !11
  %89 = bitcast i32 %88 to <2 x bfloat>, !dbg !11
  %90 = extractelement <2 x bfloat> %83, i64 0, !dbg !11
  %91 = extractelement <2 x bfloat> %83, i64 1, !dbg !11
  %92 = extractelement <2 x bfloat> %85, i64 0, !dbg !11
  %93 = extractelement <2 x bfloat> %85, i64 1, !dbg !11
  %94 = extractelement <2 x bfloat> %87, i64 0, !dbg !11
  %95 = extractelement <2 x bfloat> %87, i64 1, !dbg !11
  %96 = extractelement <2 x bfloat> %89, i64 0, !dbg !11
  %97 = extractelement <2 x bfloat> %89, i64 1, !dbg !11
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %46) #6, !dbg !11
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !11
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !11
  %101 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !11
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !11
  %103 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !11
  %104 = bitcast i32 %103 to <2 x bfloat>, !dbg !11
  %105 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !11
  %106 = bitcast i32 %105 to <2 x bfloat>, !dbg !11
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !11
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !11
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !11
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !11
  %111 = extractelement <2 x bfloat> %104, i64 0, !dbg !11
  %112 = extractelement <2 x bfloat> %104, i64 1, !dbg !11
  %113 = extractelement <2 x bfloat> %106, i64 0, !dbg !11
  %114 = extractelement <2 x bfloat> %106, i64 1, !dbg !11
  %115 = fpext bfloat %56 to float, !dbg !12
  %116 = fpext bfloat %57 to float, !dbg !12
  %117 = fpext bfloat %58 to float, !dbg !12
  %118 = fpext bfloat %59 to float, !dbg !12
  %119 = fpext bfloat %60 to float, !dbg !12
  %120 = fpext bfloat %61 to float, !dbg !12
  %121 = fpext bfloat %62 to float, !dbg !12
  %122 = fpext bfloat %63 to float, !dbg !12
  %123 = fpext bfloat %73 to float, !dbg !12
  %124 = fpext bfloat %74 to float, !dbg !12
  %125 = fpext bfloat %75 to float, !dbg !12
  %126 = fpext bfloat %76 to float, !dbg !12
  %127 = fpext bfloat %77 to float, !dbg !12
  %128 = fpext bfloat %78 to float, !dbg !12
  %129 = fpext bfloat %79 to float, !dbg !12
  %130 = fpext bfloat %80 to float, !dbg !12
  %131 = fpext bfloat %90 to float, !dbg !12
  %132 = fpext bfloat %91 to float, !dbg !12
  %133 = fpext bfloat %92 to float, !dbg !12
  %134 = fpext bfloat %93 to float, !dbg !12
  %135 = fpext bfloat %94 to float, !dbg !12
  %136 = fpext bfloat %95 to float, !dbg !12
  %137 = fpext bfloat %96 to float, !dbg !12
  %138 = fpext bfloat %97 to float, !dbg !12
  %139 = fpext bfloat %107 to float, !dbg !12
  %140 = fpext bfloat %108 to float, !dbg !12
  %141 = fpext bfloat %109 to float, !dbg !12
  %142 = fpext bfloat %110 to float, !dbg !12
  %143 = fpext bfloat %111 to float, !dbg !12
  %144 = fpext bfloat %112 to float, !dbg !12
  %145 = fpext bfloat %113 to float, !dbg !12
  %146 = fpext bfloat %114 to float, !dbg !12
  %147 = fmul float %115, %115, !dbg !13
  %148 = fmul float %116, %116, !dbg !13
  %149 = fmul float %117, %117, !dbg !13
  %150 = fmul float %118, %118, !dbg !13
  %151 = fmul float %119, %119, !dbg !13
  %152 = fmul float %120, %120, !dbg !13
  %153 = fmul float %121, %121, !dbg !13
  %154 = fmul float %122, %122, !dbg !13
  %155 = fmul float %123, %123, !dbg !13
  %156 = fmul float %124, %124, !dbg !13
  %157 = fmul float %125, %125, !dbg !13
  %158 = fmul float %126, %126, !dbg !13
  %159 = fmul float %127, %127, !dbg !13
  %160 = fmul float %128, %128, !dbg !13
  %161 = fmul float %129, %129, !dbg !13
  %162 = fmul float %130, %130, !dbg !13
  %163 = fmul float %131, %131, !dbg !13
  %164 = fmul float %132, %132, !dbg !13
  %165 = fmul float %133, %133, !dbg !13
  %166 = fmul float %134, %134, !dbg !13
  %167 = fmul float %135, %135, !dbg !13
  %168 = fmul float %136, %136, !dbg !13
  %169 = fmul float %137, %137, !dbg !13
  %170 = fmul float %138, %138, !dbg !13
  %171 = fmul float %139, %139, !dbg !13
  %172 = fmul float %140, %140, !dbg !13
  %173 = fmul float %141, %141, !dbg !13
  %174 = fmul float %142, %142, !dbg !13
  %175 = fmul float %143, %143, !dbg !13
  %176 = fmul float %144, %144, !dbg !13
  %177 = fmul float %145, %145, !dbg !13
  %178 = fmul float %146, %146, !dbg !13
  %179 = fadd float %147, %148, !dbg !14
  %180 = fadd float %149, %179, !dbg !14
  %181 = fadd float %150, %180, !dbg !14
  %182 = fadd float %151, %181, !dbg !14
  %183 = fadd float %152, %182, !dbg !14
  %184 = fadd float %153, %183, !dbg !14
  %185 = fadd float %154, %184, !dbg !14
  %186 = fadd float %155, %156, !dbg !14
  %187 = fadd float %157, %186, !dbg !14
  %188 = fadd float %158, %187, !dbg !14
  %189 = fadd float %159, %188, !dbg !14
  %190 = fadd float %160, %189, !dbg !14
  %191 = fadd float %161, %190, !dbg !14
  %192 = fadd float %162, %191, !dbg !14
  %193 = fadd float %163, %164, !dbg !14
  %194 = fadd float %165, %193, !dbg !14
  %195 = fadd float %166, %194, !dbg !14
  %196 = fadd float %167, %195, !dbg !14
  %197 = fadd float %168, %196, !dbg !14
  %198 = fadd float %169, %197, !dbg !14
  %199 = fadd float %170, %198, !dbg !14
  %200 = fadd float %171, %172, !dbg !14
  %201 = fadd float %173, %200, !dbg !14
  %202 = fadd float %174, %201, !dbg !14
  %203 = fadd float %175, %202, !dbg !14
  %204 = fadd float %176, %203, !dbg !14
  %205 = fadd float %177, %204, !dbg !14
  %206 = fadd float %178, %205, !dbg !14
  %207 = bitcast float %185 to i32, !dbg !18
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !18
  %209 = bitcast i32 %208 to float, !dbg !18
  %210 = fadd float %185, %209, !dbg !14
  %211 = bitcast float %210 to i32, !dbg !18
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !18
  %213 = bitcast i32 %212 to float, !dbg !18
  %214 = fadd float %210, %213, !dbg !14
  %215 = bitcast float %214 to i32, !dbg !18
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !18
  %217 = bitcast i32 %216 to float, !dbg !18
  %218 = fadd float %214, %217, !dbg !14
  %219 = bitcast float %218 to i32, !dbg !18
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !18
  %221 = bitcast i32 %220 to float, !dbg !18
  %222 = fadd float %218, %221, !dbg !14
  %223 = bitcast float %192 to i32, !dbg !18
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !18
  %225 = bitcast i32 %224 to float, !dbg !18
  %226 = fadd float %192, %225, !dbg !14
  %227 = bitcast float %226 to i32, !dbg !18
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !18
  %229 = bitcast i32 %228 to float, !dbg !18
  %230 = fadd float %226, %229, !dbg !14
  %231 = bitcast float %230 to i32, !dbg !18
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !18
  %233 = bitcast i32 %232 to float, !dbg !18
  %234 = fadd float %230, %233, !dbg !14
  %235 = bitcast float %234 to i32, !dbg !18
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !18
  %237 = bitcast i32 %236 to float, !dbg !18
  %238 = fadd float %234, %237, !dbg !14
  %239 = bitcast float %199 to i32, !dbg !18
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !18
  %241 = bitcast i32 %240 to float, !dbg !18
  %242 = fadd float %199, %241, !dbg !14
  %243 = bitcast float %242 to i32, !dbg !18
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !18
  %245 = bitcast i32 %244 to float, !dbg !18
  %246 = fadd float %242, %245, !dbg !14
  %247 = bitcast float %246 to i32, !dbg !18
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !18
  %249 = bitcast i32 %248 to float, !dbg !18
  %250 = fadd float %246, %249, !dbg !14
  %251 = bitcast float %250 to i32, !dbg !18
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !18
  %253 = bitcast i32 %252 to float, !dbg !18
  %254 = fadd float %250, %253, !dbg !14
  %255 = bitcast float %206 to i32, !dbg !18
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 8, i32 31), !dbg !18
  %257 = bitcast i32 %256 to float, !dbg !18
  %258 = fadd float %206, %257, !dbg !14
  %259 = bitcast float %258 to i32, !dbg !18
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !18
  %261 = bitcast i32 %260 to float, !dbg !18
  %262 = fadd float %258, %261, !dbg !14
  %263 = bitcast float %262 to i32, !dbg !18
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !18
  %265 = bitcast i32 %264 to float, !dbg !18
  %266 = fadd float %262, %265, !dbg !14
  %267 = bitcast float %266 to i32, !dbg !18
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !18
  %269 = bitcast i32 %268 to float, !dbg !18
  %270 = fadd float %266, %269, !dbg !14
  %271 = fadd float %3, %222, !dbg !19
  %272 = fadd float %3, %238, !dbg !19
  %273 = fadd float %3, %254, !dbg !19
  %274 = fadd float %3, %270, !dbg !19
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %275, 0, !dbg !20
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %276, 0, !dbg !20
  br i1 %.not.i, label %282, label %277, !dbg !20

277:                                              ; preds = %5
  br i1 %.not1.i, label %280, label %278, !dbg !20

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

282:                                              ; preds = %5
  br i1 %.not1.i, label %285, label %283, !dbg !20

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %278, %280, %283, %285
  %.0.i = phi float [ %279, %278 ], [ %281, %280 ], [ %284, %283 ], [ %286, %285 ], !dbg !20
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i2 = icmp eq i32 %287, 0, !dbg !20
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i5 = icmp eq i32 %288, 0, !dbg !20
  br i1 %.not.i2, label %294, label %289, !dbg !20

289:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %292, label %290, !dbg !20

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

294:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %297, label %295, !dbg !20

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.f(float %272) #6, !dbg !20
  br label %__nv_sqrtf.exit6, !dbg !20

__nv_sqrtf.exit6:                                 ; preds = %290, %292, %295, %297
  %.0.i4 = phi float [ %291, %290 ], [ %293, %292 ], [ %296, %295 ], [ %298, %297 ], !dbg !20
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i7 = icmp eq i32 %299, 0, !dbg !20
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i10 = icmp eq i32 %300, 0, !dbg !20
  br i1 %.not.i7, label %306, label %301, !dbg !20

301:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %304, label %302, !dbg !20

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

306:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %309, label %307, !dbg !20

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #6, !dbg !20
  br label %__nv_sqrtf.exit11, !dbg !20

__nv_sqrtf.exit11:                                ; preds = %302, %304, %307, %309
  %.0.i9 = phi float [ %303, %302 ], [ %305, %304 ], [ %308, %307 ], [ %310, %309 ], !dbg !20
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i12 = icmp eq i32 %311, 0, !dbg !20
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i15 = icmp eq i32 %312, 0, !dbg !20
  br i1 %.not.i12, label %318, label %313, !dbg !20

313:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %316, label %314, !dbg !20

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %274) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %274) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

318:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %321, label %319, !dbg !20

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.f(float %274) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.f(float %274) #6, !dbg !20
  br label %__nv_sqrtf.exit16, !dbg !20

__nv_sqrtf.exit16:                                ; preds = %314, %316, %319, %321
  %.0.i14 = phi float [ %315, %314 ], [ %317, %316 ], [ %320, %319 ], [ %322, %321 ], !dbg !20
  %323 = and i32 %9, 15, !dbg !11
  %324 = zext nneg i32 %323 to i64, !dbg !11
  %325 = or disjoint i64 %8, %324, !dbg !11
  %326 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %327 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i4), !dbg !21
  %328 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i9), !dbg !21
  %329 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i14), !dbg !21
  %330 = fmul float %326, %115, !dbg !22
  %331 = fmul float %326, %116, !dbg !22
  %332 = fmul float %326, %117, !dbg !22
  %333 = fmul float %326, %118, !dbg !22
  %334 = fmul float %326, %119, !dbg !22
  %335 = fmul float %326, %120, !dbg !22
  %336 = fmul float %326, %121, !dbg !22
  %337 = fmul float %326, %122, !dbg !22
  %338 = fmul float %327, %123, !dbg !22
  %339 = fmul float %327, %124, !dbg !22
  %340 = fmul float %327, %125, !dbg !22
  %341 = fmul float %327, %126, !dbg !22
  %342 = fmul float %327, %127, !dbg !22
  %343 = fmul float %327, %128, !dbg !22
  %344 = fmul float %327, %129, !dbg !22
  %345 = fmul float %327, %130, !dbg !22
  %346 = fmul float %328, %131, !dbg !22
  %347 = fmul float %328, %132, !dbg !22
  %348 = fmul float %328, %133, !dbg !22
  %349 = fmul float %328, %134, !dbg !22
  %350 = fmul float %328, %135, !dbg !22
  %351 = fmul float %328, %136, !dbg !22
  %352 = fmul float %328, %137, !dbg !22
  %353 = fmul float %328, %138, !dbg !22
  %354 = fmul float %329, %139, !dbg !22
  %355 = fmul float %329, %140, !dbg !22
  %356 = fmul float %329, %141, !dbg !22
  %357 = fmul float %329, %142, !dbg !22
  %358 = fmul float %329, %143, !dbg !22
  %359 = fmul float %329, %144, !dbg !22
  %360 = fmul float %329, %145, !dbg !22
  %361 = fmul float %329, %146, !dbg !22
  %362 = fptrunc float %330 to bfloat, !dbg !23
  %363 = fptrunc float %331 to bfloat, !dbg !23
  %364 = fptrunc float %332 to bfloat, !dbg !23
  %365 = fptrunc float %333 to bfloat, !dbg !23
  %366 = fptrunc float %334 to bfloat, !dbg !23
  %367 = fptrunc float %335 to bfloat, !dbg !23
  %368 = fptrunc float %336 to bfloat, !dbg !23
  %369 = fptrunc float %337 to bfloat, !dbg !23
  %370 = fptrunc float %338 to bfloat, !dbg !23
  %371 = fptrunc float %339 to bfloat, !dbg !23
  %372 = fptrunc float %340 to bfloat, !dbg !23
  %373 = fptrunc float %341 to bfloat, !dbg !23
  %374 = fptrunc float %342 to bfloat, !dbg !23
  %375 = fptrunc float %343 to bfloat, !dbg !23
  %376 = fptrunc float %344 to bfloat, !dbg !23
  %377 = fptrunc float %345 to bfloat, !dbg !23
  %378 = fptrunc float %346 to bfloat, !dbg !23
  %379 = fptrunc float %347 to bfloat, !dbg !23
  %380 = fptrunc float %348 to bfloat, !dbg !23
  %381 = fptrunc float %349 to bfloat, !dbg !23
  %382 = fptrunc float %350 to bfloat, !dbg !23
  %383 = fptrunc float %351 to bfloat, !dbg !23
  %384 = fptrunc float %352 to bfloat, !dbg !23
  %385 = fptrunc float %353 to bfloat, !dbg !23
  %386 = fptrunc float %354 to bfloat, !dbg !23
  %387 = fptrunc float %355 to bfloat, !dbg !23
  %388 = fptrunc float %356 to bfloat, !dbg !23
  %389 = fptrunc float %357 to bfloat, !dbg !23
  %390 = fptrunc float %358 to bfloat, !dbg !23
  %391 = fptrunc float %359 to bfloat, !dbg !23
  %392 = fptrunc float %360 to bfloat, !dbg !23
  %393 = fptrunc float %361 to bfloat, !dbg !23
  %394 = getelementptr bfloat, ptr addrspace(1) %1, i64 %30, !dbg !24
  %395 = getelementptr bfloat, ptr addrspace(1) %1, i64 %31, !dbg !24
  %396 = getelementptr bfloat, ptr addrspace(1) %1, i64 %32, !dbg !24
  %397 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !24
  %398 = insertelement <2 x bfloat> poison, bfloat %362, i64 0, !dbg !24
  %399 = insertelement <2 x bfloat> %398, bfloat %363, i64 1, !dbg !24
  %400 = bitcast <2 x bfloat> %399 to i32, !dbg !24
  %401 = insertelement <2 x bfloat> poison, bfloat %364, i64 0, !dbg !24
  %402 = insertelement <2 x bfloat> %401, bfloat %365, i64 1, !dbg !24
  %403 = bitcast <2 x bfloat> %402 to i32, !dbg !24
  %404 = insertelement <2 x bfloat> poison, bfloat %366, i64 0, !dbg !24
  %405 = insertelement <2 x bfloat> %404, bfloat %367, i64 1, !dbg !24
  %406 = bitcast <2 x bfloat> %405 to i32, !dbg !24
  %407 = insertelement <2 x bfloat> poison, bfloat %368, i64 0, !dbg !24
  %408 = insertelement <2 x bfloat> %407, bfloat %369, i64 1, !dbg !24
  %409 = bitcast <2 x bfloat> %408 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %403, i32 %406, i32 %409, ptr addrspace(1) %394, i1 %43) #6, !dbg !24
  %410 = insertelement <2 x bfloat> poison, bfloat %370, i64 0, !dbg !24
  %411 = insertelement <2 x bfloat> %410, bfloat %371, i64 1, !dbg !24
  %412 = bitcast <2 x bfloat> %411 to i32, !dbg !24
  %413 = insertelement <2 x bfloat> poison, bfloat %372, i64 0, !dbg !24
  %414 = insertelement <2 x bfloat> %413, bfloat %373, i64 1, !dbg !24
  %415 = bitcast <2 x bfloat> %414 to i32, !dbg !24
  %416 = insertelement <2 x bfloat> poison, bfloat %374, i64 0, !dbg !24
  %417 = insertelement <2 x bfloat> %416, bfloat %375, i64 1, !dbg !24
  %418 = bitcast <2 x bfloat> %417 to i32, !dbg !24
  %419 = insertelement <2 x bfloat> poison, bfloat %376, i64 0, !dbg !24
  %420 = insertelement <2 x bfloat> %419, bfloat %377, i64 1, !dbg !24
  %421 = bitcast <2 x bfloat> %420 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %415, i32 %418, i32 %421, ptr addrspace(1) %395, i1 %44) #6, !dbg !24
  %422 = insertelement <2 x bfloat> poison, bfloat %378, i64 0, !dbg !24
  %423 = insertelement <2 x bfloat> %422, bfloat %379, i64 1, !dbg !24
  %424 = bitcast <2 x bfloat> %423 to i32, !dbg !24
  %425 = insertelement <2 x bfloat> poison, bfloat %380, i64 0, !dbg !24
  %426 = insertelement <2 x bfloat> %425, bfloat %381, i64 1, !dbg !24
  %427 = bitcast <2 x bfloat> %426 to i32, !dbg !24
  %428 = insertelement <2 x bfloat> poison, bfloat %382, i64 0, !dbg !24
  %429 = insertelement <2 x bfloat> %428, bfloat %383, i64 1, !dbg !24
  %430 = bitcast <2 x bfloat> %429 to i32, !dbg !24
  %431 = insertelement <2 x bfloat> poison, bfloat %384, i64 0, !dbg !24
  %432 = insertelement <2 x bfloat> %431, bfloat %385, i64 1, !dbg !24
  %433 = bitcast <2 x bfloat> %432 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %424, i32 %427, i32 %430, i32 %433, ptr addrspace(1) %396, i1 %45) #6, !dbg !24
  %434 = insertelement <2 x bfloat> poison, bfloat %386, i64 0, !dbg !24
  %435 = insertelement <2 x bfloat> %434, bfloat %387, i64 1, !dbg !24
  %436 = bitcast <2 x bfloat> %435 to i32, !dbg !24
  %437 = insertelement <2 x bfloat> poison, bfloat %388, i64 0, !dbg !24
  %438 = insertelement <2 x bfloat> %437, bfloat %389, i64 1, !dbg !24
  %439 = bitcast <2 x bfloat> %438 to i32, !dbg !24
  %440 = insertelement <2 x bfloat> poison, bfloat %390, i64 0, !dbg !24
  %441 = insertelement <2 x bfloat> %440, bfloat %391, i64 1, !dbg !24
  %442 = bitcast <2 x bfloat> %441 to i32, !dbg !24
  %443 = insertelement <2 x bfloat> poison, bfloat %392, i64 0, !dbg !24
  %444 = insertelement <2 x bfloat> %443, bfloat %393, i64 1, !dbg !24
  %445 = bitcast <2 x bfloat> %444 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %439, i32 %442, i32 %445, ptr addrspace(1) %397, i1 %46) #6, !dbg !24
  %446 = getelementptr float, ptr addrspace(1) %2, i64 %325, !dbg !25
  %447 = icmp slt i64 %325, 49152, !dbg !25
  %448 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %326, ptr addrspace(3) %448, align 4, !dbg !25
  %449 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  store float %327, ptr addrspace(3) %449, align 4, !dbg !25
  %450 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  store float %328, ptr addrspace(3) %450, align 4, !dbg !25
  %451 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  store float %329, ptr addrspace(3) %451, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %452 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %323, !dbg !25
  %453 = load i32, ptr addrspace(3) %452, align 4, !dbg !25
  %454 = and i32 %9, 48, !dbg !25
  %455 = icmp eq i32 %454, 0, !dbg !25
  %456 = and i1 %455, %447, !dbg !25
  %457 = and i1 %38, %456, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %446, i1 %457) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
