; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 5, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = and i32 %33, 4, !dbg !29
  %35 = and i32 %33, 8, !dbg !29
  %36 = and i32 %33, 16, !dbg !29
  %37 = lshr i32 %33, 2, !dbg !29
  %38 = and i32 %37, 7, !dbg !29
  %39 = and i32 %33, 32, !dbg !29
  %40 = lshr exact i32 %39, 2, !dbg !29
  %41 = or disjoint i32 %38, %40, !dbg !29
  %42 = or disjoint i32 %41, 16, !dbg !29
  %43 = or disjoint i32 %41, 32, !dbg !29
  %44 = or disjoint i32 %41, 48, !dbg !29
  %45 = lshr i32 %33, 3, !dbg !29
  %46 = and i32 %45, 7, !dbg !29
  %47 = or disjoint i32 %46, 8, !dbg !29
  %48 = or disjoint i32 %46, 16, !dbg !29
  %49 = or disjoint i32 %46, 24, !dbg !29
  %50 = or disjoint i32 %46, 32, !dbg !29
  %51 = or disjoint i32 %46, 40, !dbg !29
  %52 = or disjoint i32 %46, 48, !dbg !29
  %53 = or disjoint i32 %46, 56, !dbg !29
  %54 = shl nuw nsw i32 %33, 3, !dbg !29
  %55 = and i32 %54, 24, !dbg !29
  %56 = shl nuw nsw i32 %34, 3, !dbg !29
  %57 = or disjoint i32 %55, %56, !dbg !29
  %58 = lshr exact i32 %39, 1, !dbg !29
  %59 = or disjoint i32 %38, %58, !dbg !29
  %60 = or disjoint i32 %59, 8, !dbg !29
  %61 = or disjoint i32 %59, 32, !dbg !29
  %62 = or disjoint i32 %59, 40, !dbg !29
  %63 = and i32 %33, 63, !dbg !29
  %64 = zext nneg i32 %41 to i64, !dbg !29
  %65 = zext nneg i32 %42 to i64, !dbg !29
  %66 = zext nneg i32 %43 to i64, !dbg !29
  %67 = zext nneg i32 %44 to i64, !dbg !29
  %68 = zext nneg i32 %46 to i64, !dbg !29
  %69 = zext nneg i32 %47 to i64, !dbg !29
  %70 = zext nneg i32 %48 to i64, !dbg !29
  %71 = zext nneg i32 %49 to i64, !dbg !29
  %72 = zext nneg i32 %50 to i64, !dbg !29
  %73 = zext nneg i32 %51 to i64, !dbg !29
  %74 = zext nneg i32 %52 to i64, !dbg !29
  %75 = zext nneg i32 %53 to i64, !dbg !29
  %76 = zext nneg i32 %57 to i64, !dbg !29
  %77 = zext nneg i32 %63 to i64, !dbg !29
  %78 = zext nneg i32 %55 to i64, !dbg !29
  %79 = or disjoint i64 %78, %32, !dbg !29
  %80 = icmp sgt i32 %31, -1, !dbg !29
  %81 = icmp slt i64 %79, 128, !dbg !29
  %82 = and i1 %80, %81, !dbg !29
  %83 = or disjoint i64 %64, 64, !dbg !30
  %84 = or disjoint i64 %65, 64, !dbg !30
  %85 = or disjoint i64 %66, 64, !dbg !30
  %86 = or disjoint i64 %67, 64, !dbg !30
  %87 = or disjoint i64 %76, 64, !dbg !30
  %88 = sext i32 %7 to i64, !dbg !31
  %89 = sext i32 %23 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !32
  %91 = zext nneg i32 %12 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %90, i64 %91, !dbg !33
  %93 = icmp sgt i32 %13, 63, !dbg !34
  %94 = shl nuw nsw i64 %68, 12, !dbg !35
  %95 = shl nuw nsw i64 %69, 12, !dbg !35
  %96 = shl nuw nsw i64 %70, 12, !dbg !35
  %97 = shl nuw nsw i64 %71, 12, !dbg !35
  %98 = shl nuw nsw i64 %72, 12, !dbg !35
  %99 = shl nuw nsw i64 %73, 12, !dbg !35
  %100 = shl nuw nsw i64 %74, 12, !dbg !35
  %101 = shl nuw nsw i64 %75, 12, !dbg !35
  %102 = shl nuw nsw i64 %64, 12, !dbg !35
  %103 = shl nuw nsw i64 %65, 12, !dbg !35
  %104 = shl nuw nsw i64 %66, 12, !dbg !35
  %105 = shl nuw nsw i64 %67, 12, !dbg !35
  %106 = or disjoint i64 %94, %76, !dbg !35
  %107 = or disjoint i64 %95, %76, !dbg !35
  %108 = or disjoint i64 %96, %76, !dbg !35
  %109 = or disjoint i64 %97, %76, !dbg !35
  %110 = or disjoint i64 %98, %76, !dbg !35
  %111 = or disjoint i64 %99, %76, !dbg !35
  %112 = or disjoint i64 %100, %76, !dbg !35
  %113 = or disjoint i64 %101, %76, !dbg !35
  %114 = getelementptr bfloat, ptr addrspace(1) %29, i64 %106, !dbg !35
  %115 = getelementptr bfloat, ptr addrspace(1) %29, i64 %107, !dbg !35
  %116 = getelementptr bfloat, ptr addrspace(1) %29, i64 %108, !dbg !35
  %117 = getelementptr bfloat, ptr addrspace(1) %29, i64 %109, !dbg !35
  %118 = getelementptr bfloat, ptr addrspace(1) %29, i64 %110, !dbg !35
  %119 = getelementptr bfloat, ptr addrspace(1) %29, i64 %111, !dbg !35
  %120 = getelementptr bfloat, ptr addrspace(1) %29, i64 %112, !dbg !35
  %121 = getelementptr bfloat, ptr addrspace(1) %29, i64 %113, !dbg !35
  %122 = icmp slt i32 %46, %7, !dbg !35
  %123 = icmp slt i32 %47, %7, !dbg !35
  %124 = icmp slt i32 %48, %7, !dbg !35
  %125 = icmp slt i32 %49, %7, !dbg !35
  %126 = icmp slt i32 %50, %7, !dbg !35
  %127 = icmp slt i32 %51, %7, !dbg !35
  %128 = icmp slt i32 %52, %7, !dbg !35
  %129 = icmp slt i32 %53, %7, !dbg !35
  %130 = icmp slt i32 %41, %7, !dbg !35
  %131 = icmp slt i32 %42, %7, !dbg !35
  %132 = icmp slt i32 %43, %7, !dbg !35
  %133 = icmp slt i32 %44, %7, !dbg !35
  %134 = and i1 %122, %93, !dbg !34
  %135 = and i1 %123, %93, !dbg !34
  %136 = and i1 %124, %93, !dbg !34
  %137 = and i1 %125, %93, !dbg !34
  %138 = and i1 %126, %93, !dbg !34
  %139 = and i1 %127, %93, !dbg !34
  %140 = and i1 %128, %93, !dbg !34
  %141 = and i1 %129, %93, !dbg !34
  %and.ra606 = and i32 %33, 56, !dbg !35
  %142 = xor i32 %57, %and.ra606, !dbg !35
  %143 = shl nuw nsw i32 %46, 6, !dbg !35
  %144 = or disjoint i32 %142, %143, !dbg !35
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %144, !dbg !35
  %146 = or disjoint i32 %144, 512, !dbg !35
  %147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %146, !dbg !35
  %148 = or disjoint i32 %144, 1024, !dbg !35
  %149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %148, !dbg !35
  %150 = or disjoint i32 %144, 1536, !dbg !35
  %151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %150, !dbg !35
  %152 = or disjoint i32 %144, 2048, !dbg !35
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %152, !dbg !35
  %154 = or disjoint i32 %144, 2560, !dbg !35
  %155 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %154, !dbg !35
  %156 = or disjoint i32 %144, 3072, !dbg !35
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %156, !dbg !35
  %158 = or disjoint i32 %144, 3584, !dbg !35
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %158, !dbg !35
  %160 = select i1 %134, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %145, ptr addrspace(1) %114, i32 %160) #2, !dbg !35
  %161 = select i1 %135, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %147, ptr addrspace(1) %115, i32 %161) #2, !dbg !35
  %162 = select i1 %136, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %149, ptr addrspace(1) %116, i32 %162) #2, !dbg !35
  %163 = select i1 %137, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %151, ptr addrspace(1) %117, i32 %163) #2, !dbg !35
  %164 = select i1 %138, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %153, ptr addrspace(1) %118, i32 %164) #2, !dbg !35
  %165 = select i1 %139, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %155, ptr addrspace(1) %119, i32 %165) #2, !dbg !35
  %166 = select i1 %140, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %157, ptr addrspace(1) %120, i32 %166) #2, !dbg !35
  %167 = select i1 %141, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %159, ptr addrspace(1) %121, i32 %167) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %168 = or disjoint i64 %87, %94, !dbg !36
  %169 = or disjoint i64 %95, %87, !dbg !36
  %170 = or disjoint i64 %96, %87, !dbg !36
  %171 = or disjoint i64 %97, %87, !dbg !36
  %172 = or disjoint i64 %98, %87, !dbg !36
  %173 = or disjoint i64 %99, %87, !dbg !36
  %174 = or disjoint i64 %100, %87, !dbg !36
  %175 = or disjoint i64 %101, %87, !dbg !36
  %176 = getelementptr bfloat, ptr addrspace(1) %29, i64 %168, !dbg !36
  %177 = getelementptr bfloat, ptr addrspace(1) %29, i64 %169, !dbg !36
  %178 = getelementptr bfloat, ptr addrspace(1) %29, i64 %170, !dbg !36
  %179 = getelementptr bfloat, ptr addrspace(1) %29, i64 %171, !dbg !36
  %180 = getelementptr bfloat, ptr addrspace(1) %29, i64 %172, !dbg !36
  %181 = getelementptr bfloat, ptr addrspace(1) %29, i64 %173, !dbg !36
  %182 = getelementptr bfloat, ptr addrspace(1) %29, i64 %174, !dbg !36
  %183 = getelementptr bfloat, ptr addrspace(1) %29, i64 %175, !dbg !36
  %184 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %144, !dbg !36
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %146, !dbg !36
  %186 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %148, !dbg !36
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %150, !dbg !36
  %188 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %152, !dbg !36
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %154, !dbg !36
  %190 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %156, !dbg !36
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %184, ptr addrspace(1) %176, i32 %160) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %185, ptr addrspace(1) %177, i32 %161) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %186, ptr addrspace(1) %178, i32 %162) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %187, ptr addrspace(1) %179, i32 %163) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %188, ptr addrspace(1) %180, i32 %164) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %189, ptr addrspace(1) %181, i32 %165) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %190, ptr addrspace(1) %182, i32 %166) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %191, ptr addrspace(1) %183, i32 %167) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %192 = add nsw i64 %102, %79, !dbg !37
  %193 = add nsw i64 %103, %79, !dbg !37
  %194 = add nsw i64 %104, %79, !dbg !37
  %195 = add nsw i64 %105, %79, !dbg !37
  %196 = getelementptr bfloat, ptr addrspace(1) %27, i64 %192, !dbg !37
  %197 = getelementptr bfloat, ptr addrspace(1) %27, i64 %193, !dbg !37
  %198 = getelementptr bfloat, ptr addrspace(1) %27, i64 %194, !dbg !37
  %199 = getelementptr bfloat, ptr addrspace(1) %27, i64 %195, !dbg !37
  %200 = and i1 %82, %130, !dbg !37
  %201 = and i1 %82, %131, !dbg !37
  %202 = and i1 %82, %132, !dbg !37
  %203 = and i1 %82, %133, !dbg !37
  %204 = and i1 %93, %200, !dbg !34
  %205 = and i1 %93, %201, !dbg !34
  %206 = and i1 %93, %202, !dbg !34
  %207 = and i1 %93, %203, !dbg !34
  %208 = xor i32 %54, %33, !dbg !37
  %209 = and i32 %208, 24, !dbg !37
  %210 = shl nuw nsw i32 %41, 5, !dbg !37
  %211 = or disjoint i32 %210, %209, !dbg !37
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %211, !dbg !37
  %213 = or disjoint i32 %211, 512, !dbg !37
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %213, !dbg !37
  %215 = or disjoint i32 %38, 32, !dbg !37
  %216 = or disjoint i32 %215, %40, !dbg !37
  %217 = shl nuw nsw i32 %216, 5, !dbg !37
  %218 = or disjoint i32 %217, %209, !dbg !37
  %219 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %218, !dbg !37
  %220 = or disjoint i32 %211, 1536, !dbg !37
  %221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %220, !dbg !37
  %222 = select i1 %204, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %212, ptr addrspace(1) %196, i32 %222) #2, !dbg !37
  %223 = select i1 %205, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %197, i32 %223) #2, !dbg !37
  %224 = select i1 %206, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %219, ptr addrspace(1) %198, i32 %224) #2, !dbg !37
  %225 = select i1 %207, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %221, ptr addrspace(1) %199, i32 %225) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx = shl nuw nsw i64 %77, 7, !dbg !38
  %226 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx, !dbg !38
  %227 = icmp slt i32 %63, %7, !dbg !38
  %228 = and i1 %227, %93, !dbg !34
  %229 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 84480), i32 %63, !dbg !38
  %230 = select i1 %228, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %229, ptr addrspace(1) %226, i32 %230) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %231 = getelementptr bfloat, ptr addrspace(1) %28, i64 %106, !dbg !39
  %232 = getelementptr bfloat, ptr addrspace(1) %28, i64 %107, !dbg !39
  %233 = getelementptr bfloat, ptr addrspace(1) %28, i64 %108, !dbg !39
  %234 = getelementptr bfloat, ptr addrspace(1) %28, i64 %109, !dbg !39
  %235 = getelementptr bfloat, ptr addrspace(1) %28, i64 %110, !dbg !39
  %236 = getelementptr bfloat, ptr addrspace(1) %28, i64 %111, !dbg !39
  %237 = getelementptr bfloat, ptr addrspace(1) %28, i64 %112, !dbg !39
  %238 = getelementptr bfloat, ptr addrspace(1) %28, i64 %113, !dbg !39
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %144, !dbg !39
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %146, !dbg !39
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %148, !dbg !39
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %150, !dbg !39
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %152, !dbg !39
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %154, !dbg !39
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %156, !dbg !39
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %239, ptr addrspace(1) %231, i32 %160) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %232, i32 %161) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %241, ptr addrspace(1) %233, i32 %162) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %242, ptr addrspace(1) %234, i32 %163) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %235, i32 %164) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %236, i32 %165) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %237, i32 %166) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %246, ptr addrspace(1) %238, i32 %167) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %247 = getelementptr bfloat, ptr addrspace(1) %28, i64 %168, !dbg !40
  %248 = getelementptr bfloat, ptr addrspace(1) %28, i64 %169, !dbg !40
  %249 = getelementptr bfloat, ptr addrspace(1) %28, i64 %170, !dbg !40
  %250 = getelementptr bfloat, ptr addrspace(1) %28, i64 %171, !dbg !40
  %251 = getelementptr bfloat, ptr addrspace(1) %28, i64 %172, !dbg !40
  %252 = getelementptr bfloat, ptr addrspace(1) %28, i64 %173, !dbg !40
  %253 = getelementptr bfloat, ptr addrspace(1) %28, i64 %174, !dbg !40
  %254 = getelementptr bfloat, ptr addrspace(1) %28, i64 %175, !dbg !40
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %144, !dbg !40
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %146, !dbg !40
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %148, !dbg !40
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %150, !dbg !40
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %152, !dbg !40
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %154, !dbg !40
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %156, !dbg !40
  %262 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %255, ptr addrspace(1) %247, i32 %160) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %248, i32 %161) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %249, i32 %162) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %250, i32 %163) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %251, i32 %164) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %252, i32 %165) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %253, i32 %166) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %262, ptr addrspace(1) %254, i32 %167) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %263 = icmp sgt i32 %13, 127, !dbg !34
  %264 = or disjoint i64 %68, 64, !dbg !35
  %265 = or disjoint i64 %69, 64, !dbg !35
  %266 = or disjoint i64 %70, 64, !dbg !35
  %267 = or disjoint i64 %71, 64, !dbg !35
  %268 = or disjoint i64 %72, 64, !dbg !35
  %269 = or disjoint i64 %73, 64, !dbg !35
  %270 = or disjoint i64 %74, 64, !dbg !35
  %271 = or disjoint i64 %75, 64, !dbg !35
  %272 = or disjoint i64 %77, 64, !dbg !35
  %273 = shl nuw nsw i64 %264, 12, !dbg !35
  %274 = shl nuw nsw i64 %265, 12, !dbg !35
  %275 = shl nuw nsw i64 %266, 12, !dbg !35
  %276 = shl nuw nsw i64 %267, 12, !dbg !35
  %277 = shl nuw nsw i64 %268, 12, !dbg !35
  %278 = shl nuw nsw i64 %269, 12, !dbg !35
  %279 = shl nuw nsw i64 %270, 12, !dbg !35
  %280 = shl nuw nsw i64 %271, 12, !dbg !35
  %281 = shl nuw nsw i64 %83, 12, !dbg !35
  %282 = shl nuw nsw i64 %84, 12, !dbg !35
  %283 = shl nuw nsw i64 %85, 12, !dbg !35
  %284 = shl nuw nsw i64 %86, 12, !dbg !35
  %285 = or disjoint i64 %273, %76, !dbg !35
  %286 = or disjoint i64 %274, %76, !dbg !35
  %287 = or disjoint i64 %275, %76, !dbg !35
  %288 = or disjoint i64 %276, %76, !dbg !35
  %289 = or disjoint i64 %277, %76, !dbg !35
  %290 = or disjoint i64 %278, %76, !dbg !35
  %291 = or disjoint i64 %279, %76, !dbg !35
  %292 = or disjoint i64 %280, %76, !dbg !35
  %293 = getelementptr bfloat, ptr addrspace(1) %29, i64 %285, !dbg !35
  %294 = getelementptr bfloat, ptr addrspace(1) %29, i64 %286, !dbg !35
  %295 = getelementptr bfloat, ptr addrspace(1) %29, i64 %287, !dbg !35
  %296 = getelementptr bfloat, ptr addrspace(1) %29, i64 %288, !dbg !35
  %297 = getelementptr bfloat, ptr addrspace(1) %29, i64 %289, !dbg !35
  %298 = getelementptr bfloat, ptr addrspace(1) %29, i64 %290, !dbg !35
  %299 = getelementptr bfloat, ptr addrspace(1) %29, i64 %291, !dbg !35
  %300 = getelementptr bfloat, ptr addrspace(1) %29, i64 %292, !dbg !35
  %301 = icmp slt i64 %264, %88, !dbg !35
  %302 = icmp slt i64 %265, %88, !dbg !35
  %303 = icmp slt i64 %266, %88, !dbg !35
  %304 = icmp slt i64 %267, %88, !dbg !35
  %305 = icmp slt i64 %268, %88, !dbg !35
  %306 = icmp slt i64 %269, %88, !dbg !35
  %307 = icmp slt i64 %270, %88, !dbg !35
  %308 = icmp slt i64 %271, %88, !dbg !35
  %309 = icmp slt i64 %83, %88, !dbg !35
  %310 = icmp slt i64 %84, %88, !dbg !35
  %311 = icmp slt i64 %85, %88, !dbg !35
  %312 = icmp slt i64 %86, %88, !dbg !35
  %313 = and i1 %263, %301, !dbg !34
  %314 = and i1 %263, %302, !dbg !34
  %315 = and i1 %263, %303, !dbg !34
  %316 = and i1 %263, %304, !dbg !34
  %317 = and i1 %263, %305, !dbg !34
  %318 = and i1 %263, %306, !dbg !34
  %319 = and i1 %263, %307, !dbg !34
  %320 = and i1 %263, %308, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %144, !dbg !35
  %322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %146, !dbg !35
  %323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %148, !dbg !35
  %324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %150, !dbg !35
  %325 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %152, !dbg !35
  %326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %154, !dbg !35
  %327 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %156, !dbg !35
  %328 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %158, !dbg !35
  %329 = select i1 %313, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %321, ptr addrspace(1) %293, i32 %329) #2, !dbg !35
  %330 = select i1 %314, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %322, ptr addrspace(1) %294, i32 %330) #2, !dbg !35
  %331 = select i1 %315, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %323, ptr addrspace(1) %295, i32 %331) #2, !dbg !35
  %332 = select i1 %316, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %324, ptr addrspace(1) %296, i32 %332) #2, !dbg !35
  %333 = select i1 %317, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %325, ptr addrspace(1) %297, i32 %333) #2, !dbg !35
  %334 = select i1 %318, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %326, ptr addrspace(1) %298, i32 %334) #2, !dbg !35
  %335 = select i1 %319, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %327, ptr addrspace(1) %299, i32 %335) #2, !dbg !35
  %336 = select i1 %320, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %328, ptr addrspace(1) %300, i32 %336) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %337 = or disjoint i64 %273, %87, !dbg !36
  %338 = or disjoint i64 %274, %87, !dbg !36
  %339 = or disjoint i64 %275, %87, !dbg !36
  %340 = or disjoint i64 %276, %87, !dbg !36
  %341 = or disjoint i64 %277, %87, !dbg !36
  %342 = or disjoint i64 %278, %87, !dbg !36
  %343 = or disjoint i64 %279, %87, !dbg !36
  %344 = or disjoint i64 %280, %87, !dbg !36
  %345 = getelementptr bfloat, ptr addrspace(1) %29, i64 %337, !dbg !36
  %346 = getelementptr bfloat, ptr addrspace(1) %29, i64 %338, !dbg !36
  %347 = getelementptr bfloat, ptr addrspace(1) %29, i64 %339, !dbg !36
  %348 = getelementptr bfloat, ptr addrspace(1) %29, i64 %340, !dbg !36
  %349 = getelementptr bfloat, ptr addrspace(1) %29, i64 %341, !dbg !36
  %350 = getelementptr bfloat, ptr addrspace(1) %29, i64 %342, !dbg !36
  %351 = getelementptr bfloat, ptr addrspace(1) %29, i64 %343, !dbg !36
  %352 = getelementptr bfloat, ptr addrspace(1) %29, i64 %344, !dbg !36
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %144, !dbg !36
  %354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %146, !dbg !36
  %355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %148, !dbg !36
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %150, !dbg !36
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %152, !dbg !36
  %358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %154, !dbg !36
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %156, !dbg !36
  %360 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %353, ptr addrspace(1) %345, i32 %329) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %354, ptr addrspace(1) %346, i32 %330) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %355, ptr addrspace(1) %347, i32 %331) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %356, ptr addrspace(1) %348, i32 %332) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %357, ptr addrspace(1) %349, i32 %333) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %358, ptr addrspace(1) %350, i32 %334) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %359, ptr addrspace(1) %351, i32 %335) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %360, ptr addrspace(1) %352, i32 %336) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %361 = add nsw i64 %281, %79, !dbg !37
  %362 = add nsw i64 %282, %79, !dbg !37
  %363 = add nsw i64 %283, %79, !dbg !37
  %364 = add nsw i64 %284, %79, !dbg !37
  %365 = getelementptr bfloat, ptr addrspace(1) %27, i64 %361, !dbg !37
  %366 = getelementptr bfloat, ptr addrspace(1) %27, i64 %362, !dbg !37
  %367 = getelementptr bfloat, ptr addrspace(1) %27, i64 %363, !dbg !37
  %368 = getelementptr bfloat, ptr addrspace(1) %27, i64 %364, !dbg !37
  %369 = and i1 %82, %309, !dbg !37
  %370 = and i1 %82, %310, !dbg !37
  %371 = and i1 %82, %311, !dbg !37
  %372 = and i1 %82, %312, !dbg !37
  %373 = and i1 %263, %369, !dbg !34
  %374 = and i1 %263, %370, !dbg !34
  %375 = and i1 %263, %371, !dbg !34
  %376 = and i1 %263, %372, !dbg !34
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 69632), i32 %211, !dbg !37
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 69632), i32 %213, !dbg !37
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 69632), i32 %218, !dbg !37
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 69632), i32 %220, !dbg !37
  %381 = select i1 %373, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %377, ptr addrspace(1) %365, i32 %381) #2, !dbg !37
  %382 = select i1 %374, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %378, ptr addrspace(1) %366, i32 %382) #2, !dbg !37
  %383 = select i1 %375, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %379, ptr addrspace(1) %367, i32 %383) #2, !dbg !37
  %384 = select i1 %376, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %380, ptr addrspace(1) %368, i32 %384) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx5 = shl nuw nsw i64 %272, 7, !dbg !38
  %385 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx5, !dbg !38
  %386 = icmp slt i64 %272, %88, !dbg !38
  %387 = and i1 %263, %386, !dbg !34
  %388 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 84736), i32 %63, !dbg !38
  %389 = select i1 %387, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %388, ptr addrspace(1) %385, i32 %389) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %390 = getelementptr bfloat, ptr addrspace(1) %28, i64 %285, !dbg !39
  %391 = getelementptr bfloat, ptr addrspace(1) %28, i64 %286, !dbg !39
  %392 = getelementptr bfloat, ptr addrspace(1) %28, i64 %287, !dbg !39
  %393 = getelementptr bfloat, ptr addrspace(1) %28, i64 %288, !dbg !39
  %394 = getelementptr bfloat, ptr addrspace(1) %28, i64 %289, !dbg !39
  %395 = getelementptr bfloat, ptr addrspace(1) %28, i64 %290, !dbg !39
  %396 = getelementptr bfloat, ptr addrspace(1) %28, i64 %291, !dbg !39
  %397 = getelementptr bfloat, ptr addrspace(1) %28, i64 %292, !dbg !39
  %398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %144, !dbg !39
  %399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %146, !dbg !39
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %148, !dbg !39
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %150, !dbg !39
  %402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %152, !dbg !39
  %403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %154, !dbg !39
  %404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %156, !dbg !39
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %398, ptr addrspace(1) %390, i32 %329) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %399, ptr addrspace(1) %391, i32 %330) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %400, ptr addrspace(1) %392, i32 %331) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %401, ptr addrspace(1) %393, i32 %332) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %402, ptr addrspace(1) %394, i32 %333) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %403, ptr addrspace(1) %395, i32 %334) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %404, ptr addrspace(1) %396, i32 %335) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %405, ptr addrspace(1) %397, i32 %336) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %406 = getelementptr bfloat, ptr addrspace(1) %28, i64 %337, !dbg !40
  %407 = getelementptr bfloat, ptr addrspace(1) %28, i64 %338, !dbg !40
  %408 = getelementptr bfloat, ptr addrspace(1) %28, i64 %339, !dbg !40
  %409 = getelementptr bfloat, ptr addrspace(1) %28, i64 %340, !dbg !40
  %410 = getelementptr bfloat, ptr addrspace(1) %28, i64 %341, !dbg !40
  %411 = getelementptr bfloat, ptr addrspace(1) %28, i64 %342, !dbg !40
  %412 = getelementptr bfloat, ptr addrspace(1) %28, i64 %343, !dbg !40
  %413 = getelementptr bfloat, ptr addrspace(1) %28, i64 %344, !dbg !40
  %414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %144, !dbg !40
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %146, !dbg !40
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %148, !dbg !40
  %417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %150, !dbg !40
  %418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %152, !dbg !40
  %419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %154, !dbg !40
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %156, !dbg !40
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %414, ptr addrspace(1) %406, i32 %329) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %415, ptr addrspace(1) %407, i32 %330) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %416, ptr addrspace(1) %408, i32 %331) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %417, ptr addrspace(1) %409, i32 %332) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %418, ptr addrspace(1) %410, i32 %333) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %419, ptr addrspace(1) %411, i32 %334) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %420, ptr addrspace(1) %412, i32 %335) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %421, ptr addrspace(1) %413, i32 %336) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %93, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %33, 1, !dbg !41
  %.pre630 = and i32 %.pre, 6, !dbg !41
  %.pre632 = shl nuw nsw i32 %39, 4, !dbg !41
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %422 = and i32 %33, 2, !dbg !29
  %423 = icmp eq i32 %422, 0, !dbg !29
  %.not = icmp eq i32 %34, 0, !dbg !29
  %424 = add nsw i32 %14, -2
  %425 = shl nuw nsw i32 %33, 5
  %426 = and i32 %425, 32
  %427 = select i1 %423, i32 0, i32 72
  %428 = or disjoint i32 %427, %426
  %429 = select i1 %.not, i32 0, i32 144
  %430 = or disjoint i32 %428, %429
  %431 = shl nuw nsw i32 %35, 5
  %432 = or disjoint i32 %430, %431
  %433 = lshr exact i32 %36, 1
  %434 = xor i32 %432, %433
  %435 = shl nuw nsw i32 %39, 4
  %436 = or disjoint i32 %434, %435
  %437 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %436
  %438 = ptrtoint ptr addrspace(3) %437 to i32
  %439 = xor i32 %436, 16
  %440 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %439
  %441 = ptrtoint ptr addrspace(3) %440 to i32
  %442 = xor i32 %436, 1024
  %443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %442
  %444 = ptrtoint ptr addrspace(3) %443 to i32
  %445 = xor i32 %436, 1040
  %446 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %445
  %447 = ptrtoint ptr addrspace(3) %446 to i32
  %.idx354 = shl nuw nsw i64 %64, 8
  %.idx355 = shl nuw nsw i64 %65, 8
  %.idx356 = shl nuw nsw i64 %66, 8
  %.idx357 = shl nuw nsw i64 %67, 8
  %448 = shl nuw nsw i32 %33, 1
  %449 = and i32 %448, 6
  %450 = shl nuw nsw i32 %35, 3
  %451 = or disjoint i32 %449, %450
  %452 = or disjoint i32 %451, %56
  %453 = shl nuw nsw i32 %36, 3
  %454 = or disjoint i32 %452, %453
  %455 = or disjoint i32 %454, %435
  %456 = and i32 %54, 320
  %457 = or disjoint i32 %453, %456
  %458 = or disjoint i32 %457, %57
  %459 = lshr i32 %455, 2
  %460 = and i32 %459, 1073741816
  %461 = add nuw nsw i32 %460, %455
  %462 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %461
  %463 = xor i32 %455, 256
  %464 = lshr i32 %463, 2
  %465 = and i32 %464, 1073741816
  %466 = add nuw nsw i32 %465, %463
  %467 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %466
  %468 = xor i32 %455, 8
  %469 = add nuw nsw i32 %460, %468
  %470 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %469
  %471 = xor i32 %455, 264
  %472 = lshr i32 %471, 2
  %473 = and i32 %472, 1073741816
  %474 = add nuw nsw i32 %473, %471
  %475 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %474
  %476 = xor i32 %455, 16
  %477 = add nuw nsw i32 %460, %476
  %478 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %477
  %479 = xor i32 %455, 272
  %480 = lshr i32 %479, 2
  %481 = and i32 %480, 1073741816
  %482 = add nuw nsw i32 %481, %479
  %483 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %482
  %484 = xor i32 %455, 24
  %485 = add nuw nsw i32 %460, %484
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %485
  %487 = xor i32 %455, 280
  %488 = lshr i32 %487, 2
  %489 = and i32 %488, 1073741816
  %490 = add nuw nsw i32 %489, %487
  %491 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %490
  %492 = lshr exact i32 %458, 2
  %493 = and i32 %492, 120
  %494 = add nuw nsw i32 %493, %458
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %494
  %496 = or disjoint i32 %458, 512
  %497 = lshr exact i32 %496, 2
  %498 = and i32 %497, 536870904
  %499 = add nuw nsw i32 %498, %496
  %500 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %499
  %501 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %436
  %502 = ptrtoint ptr addrspace(3) %501 to i32
  %503 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %439
  %504 = ptrtoint ptr addrspace(3) %503 to i32
  %505 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %442
  %506 = ptrtoint ptr addrspace(3) %505 to i32
  %507 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %445
  %508 = ptrtoint ptr addrspace(3) %507 to i32
  %.idx404 = shl nuw nsw i64 %83, 8
  %.idx405 = shl nuw nsw i64 %84, 8
  %.idx406 = shl nuw nsw i64 %85, 8
  %.idx407 = shl nuw nsw i64 %86, 8
  %509 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %461
  %510 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %466
  %511 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %469
  %512 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %474
  %513 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %477
  %514 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %482
  %515 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %485
  %516 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %490
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %494
  %518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %499
  %519 = and i32 %33, 3
  %520 = mul nuw nsw i32 %519, 72
  %521 = select i1 %.not, i32 0, i32 288
  %522 = xor i32 %521, %520
  %523 = shl nuw nsw i32 %35, 6
  %524 = or disjoint i32 %522, %523
  %525 = xor i32 %524, %433
  %526 = shl nuw nsw i32 %39, 5
  %527 = or disjoint i32 %525, %526
  %528 = xor i32 %527, 16
  %529 = xor i32 %527, 32
  %530 = xor i32 %527, 48
  %531 = xor i32 %527, 2048
  %532 = xor i32 %527, 2064
  %533 = xor i32 %527, 2080
  %534 = xor i32 %527, 2096
  %535 = shl nuw nsw i32 %36, 5
  %536 = or disjoint i32 %432, %535
  %537 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %536
  %538 = ptrtoint ptr addrspace(3) %537 to i32
  %539 = or disjoint i32 %536, 1024
  %540 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %539
  %541 = ptrtoint ptr addrspace(3) %540 to i32
  %542 = xor i32 %536, 8
  %543 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %542
  %544 = ptrtoint ptr addrspace(3) %543 to i32
  %545 = xor i32 %536, 1032
  %546 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %545
  %547 = ptrtoint ptr addrspace(3) %546 to i32
  %548 = xor i32 %536, 16
  %549 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %548
  %550 = ptrtoint ptr addrspace(3) %549 to i32
  %551 = xor i32 %536, 1040
  %552 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %551
  %553 = ptrtoint ptr addrspace(3) %552 to i32
  %554 = xor i32 %536, 24
  %555 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %554
  %556 = ptrtoint ptr addrspace(3) %555 to i32
  %557 = xor i32 %536, 1048
  %558 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %557
  %559 = ptrtoint ptr addrspace(3) %558 to i32
  %560 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %536
  %561 = ptrtoint ptr addrspace(3) %560 to i32
  %562 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %539
  %563 = ptrtoint ptr addrspace(3) %562 to i32
  %564 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %542
  %565 = ptrtoint ptr addrspace(3) %564 to i32
  %566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %545
  %567 = ptrtoint ptr addrspace(3) %566 to i32
  %568 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %548
  %569 = ptrtoint ptr addrspace(3) %568 to i32
  %570 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %551
  %571 = ptrtoint ptr addrspace(3) %570 to i32
  %572 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %554
  %573 = ptrtoint ptr addrspace(3) %572 to i32
  %574 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 77824), i32 %557
  %575 = ptrtoint ptr addrspace(3) %574 to i32
  %576 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %461
  %577 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %466
  %578 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %469
  %579 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %474
  %580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %477
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %482
  %582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %485
  %583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %490
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %494
  %585 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %499
  %586 = xor i32 %522, %35
  %587 = or disjoint i32 %586, %535
  %588 = xor i32 %587, %58
  %589 = xor i32 %588, 1024
  %590 = xor i32 %588, 2048
  %591 = xor i32 %588, 3072
  %592 = xor i32 %588, 32
  %593 = xor i32 %588, 1056
  %594 = xor i32 %588, 2080
  %595 = xor i32 %588, 3104
  %596 = sext i32 %424 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  br label %597, !dbg !34

597:                                              ; preds = %.lr.ph, %597
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %597 ]
  %598 = phi i32 [ 64, %.lr.ph ], [ %2239, %597 ]
  %599 = phi i32 [ 0, %.lr.ph ], [ %598, %597 ]
  %.pn121626 = phi i1 [ %372, %.lr.ph ], [ %2369, %597 ]
  %.pn137625 = phi i1 [ %371, %.lr.ph ], [ %2368, %597 ]
  %.pn153624 = phi i1 [ %370, %.lr.ph ], [ %2367, %597 ]
  %.pn169623 = phi i1 [ %369, %.lr.ph ], [ %2366, %597 ]
  %.pn121.pn622 = phi i1 [ %203, %.lr.ph ], [ %.pn121626, %597 ]
  %.pn137.pn621 = phi i1 [ %202, %.lr.ph ], [ %.pn137625, %597 ]
  %.pn153.pn620 = phi i1 [ %201, %.lr.ph ], [ %.pn153624, %597 ]
  %.pn169.pn619 = phi i1 [ %200, %.lr.ph ], [ %.pn169623, %597 ]
  %.pn20618 = phi i64 [ %364, %.lr.ph ], [ %2361, %597 ]
  %.pn36617 = phi i64 [ %363, %.lr.ph ], [ %2360, %597 ]
  %.pn52616 = phi i64 [ %362, %.lr.ph ], [ %2359, %597 ]
  %.pn68615 = phi i64 [ %361, %.lr.ph ], [ %2358, %597 ]
  %.pn20.pn614 = phi i64 [ %195, %.lr.ph ], [ %.pn20618, %597 ]
  %.pn36.pn613 = phi i64 [ %194, %.lr.ph ], [ %.pn36617, %597 ]
  %.pn52.pn612 = phi i64 [ %193, %.lr.ph ], [ %.pn52616, %597 ]
  %.pn68.pn611 = phi i64 [ %192, %.lr.ph ], [ %.pn68615, %597 ]
  %600 = phi i32 [ -1, %.lr.ph ], [ %669, %597 ]
  %601 = phi i32 [ 1, %.lr.ph ], [ %2237, %597 ]
  %602 = phi float [ 0.000000e+00, %.lr.ph ], [ %2196, %597 ]
  %603 = phi float [ 0.000000e+00, %.lr.ph ], [ %2197, %597 ]
  %604 = phi float [ 0.000000e+00, %.lr.ph ], [ %2198, %597 ]
  %605 = phi float [ 0.000000e+00, %.lr.ph ], [ %2199, %597 ]
  %606 = phi float [ 0.000000e+00, %.lr.ph ], [ %2201, %597 ]
  %607 = phi float [ 0.000000e+00, %.lr.ph ], [ %2202, %597 ]
  %608 = phi float [ 0.000000e+00, %.lr.ph ], [ %2203, %597 ]
  %609 = phi float [ 0.000000e+00, %.lr.ph ], [ %2204, %597 ]
  %610 = phi float [ 0.000000e+00, %.lr.ph ], [ %2206, %597 ]
  %611 = phi float [ 0.000000e+00, %.lr.ph ], [ %2207, %597 ]
  %612 = phi float [ 0.000000e+00, %.lr.ph ], [ %2208, %597 ]
  %613 = phi float [ 0.000000e+00, %.lr.ph ], [ %2209, %597 ]
  %614 = phi float [ 0.000000e+00, %.lr.ph ], [ %2211, %597 ]
  %615 = phi float [ 0.000000e+00, %.lr.ph ], [ %2212, %597 ]
  %616 = phi float [ 0.000000e+00, %.lr.ph ], [ %2213, %597 ]
  %617 = phi float [ 0.000000e+00, %.lr.ph ], [ %2214, %597 ]
  %618 = phi float [ 0.000000e+00, %.lr.ph ], [ %2216, %597 ]
  %619 = phi float [ 0.000000e+00, %.lr.ph ], [ %2217, %597 ]
  %620 = phi float [ 0.000000e+00, %.lr.ph ], [ %2218, %597 ]
  %621 = phi float [ 0.000000e+00, %.lr.ph ], [ %2219, %597 ]
  %622 = phi float [ 0.000000e+00, %.lr.ph ], [ %2221, %597 ]
  %623 = phi float [ 0.000000e+00, %.lr.ph ], [ %2222, %597 ]
  %624 = phi float [ 0.000000e+00, %.lr.ph ], [ %2223, %597 ]
  %625 = phi float [ 0.000000e+00, %.lr.ph ], [ %2224, %597 ]
  %626 = phi float [ 0.000000e+00, %.lr.ph ], [ %2226, %597 ]
  %627 = phi float [ 0.000000e+00, %.lr.ph ], [ %2227, %597 ]
  %628 = phi float [ 0.000000e+00, %.lr.ph ], [ %2228, %597 ]
  %629 = phi float [ 0.000000e+00, %.lr.ph ], [ %2229, %597 ]
  %630 = phi float [ 0.000000e+00, %.lr.ph ], [ %2231, %597 ]
  %631 = phi float [ 0.000000e+00, %.lr.ph ], [ %2232, %597 ]
  %632 = phi float [ 0.000000e+00, %.lr.ph ], [ %2233, %597 ]
  %633 = phi float [ 0.000000e+00, %.lr.ph ], [ %2234, %597 ]
  %634 = phi float [ 0.000000e+00, %.lr.ph ], [ %1979, %597 ]
  %635 = phi float [ 0.000000e+00, %.lr.ph ], [ %1980, %597 ]
  %636 = phi float [ 0.000000e+00, %.lr.ph ], [ %1981, %597 ]
  %637 = phi float [ 0.000000e+00, %.lr.ph ], [ %1982, %597 ]
  %638 = phi float [ 0.000000e+00, %.lr.ph ], [ %1984, %597 ]
  %639 = phi float [ 0.000000e+00, %.lr.ph ], [ %1985, %597 ]
  %640 = phi float [ 0.000000e+00, %.lr.ph ], [ %1986, %597 ]
  %641 = phi float [ 0.000000e+00, %.lr.ph ], [ %1987, %597 ]
  %642 = phi float [ 0.000000e+00, %.lr.ph ], [ %1989, %597 ]
  %643 = phi float [ 0.000000e+00, %.lr.ph ], [ %1990, %597 ]
  %644 = phi float [ 0.000000e+00, %.lr.ph ], [ %1991, %597 ]
  %645 = phi float [ 0.000000e+00, %.lr.ph ], [ %1992, %597 ]
  %646 = phi float [ 0.000000e+00, %.lr.ph ], [ %1994, %597 ]
  %647 = phi float [ 0.000000e+00, %.lr.ph ], [ %1995, %597 ]
  %648 = phi float [ 0.000000e+00, %.lr.ph ], [ %1996, %597 ]
  %649 = phi float [ 0.000000e+00, %.lr.ph ], [ %1997, %597 ]
  %650 = phi float [ 0.000000e+00, %.lr.ph ], [ %1999, %597 ]
  %651 = phi float [ 0.000000e+00, %.lr.ph ], [ %2000, %597 ]
  %652 = phi float [ 0.000000e+00, %.lr.ph ], [ %2001, %597 ]
  %653 = phi float [ 0.000000e+00, %.lr.ph ], [ %2002, %597 ]
  %654 = phi float [ 0.000000e+00, %.lr.ph ], [ %2004, %597 ]
  %655 = phi float [ 0.000000e+00, %.lr.ph ], [ %2005, %597 ]
  %656 = phi float [ 0.000000e+00, %.lr.ph ], [ %2006, %597 ]
  %657 = phi float [ 0.000000e+00, %.lr.ph ], [ %2007, %597 ]
  %658 = phi float [ 0.000000e+00, %.lr.ph ], [ %2009, %597 ]
  %659 = phi float [ 0.000000e+00, %.lr.ph ], [ %2010, %597 ]
  %660 = phi float [ 0.000000e+00, %.lr.ph ], [ %2011, %597 ]
  %661 = phi float [ 0.000000e+00, %.lr.ph ], [ %2012, %597 ]
  %662 = phi float [ 0.000000e+00, %.lr.ph ], [ %2014, %597 ]
  %663 = phi float [ 0.000000e+00, %.lr.ph ], [ %2015, %597 ]
  %664 = phi float [ 0.000000e+00, %.lr.ph ], [ %2016, %597 ]
  %665 = phi float [ 0.000000e+00, %.lr.ph ], [ %2017, %597 ]
  %666 = icmp slt i64 %indvars.iv, %596, !dbg !34
  %667 = add i32 %600, 1, !dbg !34
  %668 = icmp sgt i32 %667, 1, !dbg !34
  %669 = select i1 %668, i32 0, i32 %667, !dbg !34
  %670 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %671 = shl i32 %670, 19, !dbg !42
  %672 = sext i32 %671 to i64, !dbg !43
  %673 = getelementptr bfloat, ptr addrspace(1) %21, i64 %672, !dbg !43
  %674 = fptrunc float %634 to bfloat, !dbg !44
  %675 = fptrunc float %635 to bfloat, !dbg !44
  %676 = fptrunc float %636 to bfloat, !dbg !44
  %677 = fptrunc float %637 to bfloat, !dbg !44
  %678 = fptrunc float %638 to bfloat, !dbg !44
  %679 = fptrunc float %639 to bfloat, !dbg !44
  %680 = fptrunc float %640 to bfloat, !dbg !44
  %681 = fptrunc float %641 to bfloat, !dbg !44
  %682 = fptrunc float %642 to bfloat, !dbg !44
  %683 = fptrunc float %643 to bfloat, !dbg !44
  %684 = fptrunc float %644 to bfloat, !dbg !44
  %685 = fptrunc float %645 to bfloat, !dbg !44
  %686 = fptrunc float %646 to bfloat, !dbg !44
  %687 = fptrunc float %647 to bfloat, !dbg !44
  %688 = fptrunc float %648 to bfloat, !dbg !44
  %689 = fptrunc float %649 to bfloat, !dbg !44
  %690 = fptrunc float %650 to bfloat, !dbg !44
  %691 = fptrunc float %651 to bfloat, !dbg !44
  %692 = fptrunc float %652 to bfloat, !dbg !44
  %693 = fptrunc float %653 to bfloat, !dbg !44
  %694 = fptrunc float %654 to bfloat, !dbg !44
  %695 = fptrunc float %655 to bfloat, !dbg !44
  %696 = fptrunc float %656 to bfloat, !dbg !44
  %697 = fptrunc float %657 to bfloat, !dbg !44
  %698 = fptrunc float %658 to bfloat, !dbg !44
  %699 = fptrunc float %659 to bfloat, !dbg !44
  %700 = fptrunc float %660 to bfloat, !dbg !44
  %701 = fptrunc float %661 to bfloat, !dbg !44
  %702 = fptrunc float %662 to bfloat, !dbg !44
  %703 = fptrunc float %663 to bfloat, !dbg !44
  %704 = fptrunc float %664 to bfloat, !dbg !44
  %705 = fptrunc float %665 to bfloat, !dbg !44
  %706 = insertelement <2 x bfloat> poison, bfloat %674, i64 0, !dbg !44
  %707 = insertelement <2 x bfloat> %706, bfloat %675, i64 1, !dbg !44
  %708 = bitcast <2 x bfloat> %707 to i32, !dbg !44
  %709 = insertelement <2 x bfloat> poison, bfloat %676, i64 0, !dbg !44
  %710 = insertelement <2 x bfloat> %709, bfloat %677, i64 1, !dbg !44
  %711 = bitcast <2 x bfloat> %710 to i32, !dbg !44
  %712 = insertelement <2 x bfloat> poison, bfloat %678, i64 0, !dbg !44
  %713 = insertelement <2 x bfloat> %712, bfloat %679, i64 1, !dbg !44
  %714 = bitcast <2 x bfloat> %713 to i32, !dbg !44
  %715 = insertelement <2 x bfloat> poison, bfloat %680, i64 0, !dbg !44
  %716 = insertelement <2 x bfloat> %715, bfloat %681, i64 1, !dbg !44
  %717 = bitcast <2 x bfloat> %716 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %438, i32 %708, i32 %711, i32 %714, i32 %717) #2, !dbg !44
  %718 = insertelement <2 x bfloat> poison, bfloat %682, i64 0, !dbg !44
  %719 = insertelement <2 x bfloat> %718, bfloat %683, i64 1, !dbg !44
  %720 = bitcast <2 x bfloat> %719 to i32, !dbg !44
  %721 = insertelement <2 x bfloat> poison, bfloat %684, i64 0, !dbg !44
  %722 = insertelement <2 x bfloat> %721, bfloat %685, i64 1, !dbg !44
  %723 = bitcast <2 x bfloat> %722 to i32, !dbg !44
  %724 = insertelement <2 x bfloat> poison, bfloat %686, i64 0, !dbg !44
  %725 = insertelement <2 x bfloat> %724, bfloat %687, i64 1, !dbg !44
  %726 = bitcast <2 x bfloat> %725 to i32, !dbg !44
  %727 = insertelement <2 x bfloat> poison, bfloat %688, i64 0, !dbg !44
  %728 = insertelement <2 x bfloat> %727, bfloat %689, i64 1, !dbg !44
  %729 = bitcast <2 x bfloat> %728 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %441, i32 %720, i32 %723, i32 %726, i32 %729) #2, !dbg !44
  %730 = insertelement <2 x bfloat> poison, bfloat %690, i64 0, !dbg !44
  %731 = insertelement <2 x bfloat> %730, bfloat %691, i64 1, !dbg !44
  %732 = bitcast <2 x bfloat> %731 to i32, !dbg !44
  %733 = insertelement <2 x bfloat> poison, bfloat %692, i64 0, !dbg !44
  %734 = insertelement <2 x bfloat> %733, bfloat %693, i64 1, !dbg !44
  %735 = bitcast <2 x bfloat> %734 to i32, !dbg !44
  %736 = insertelement <2 x bfloat> poison, bfloat %694, i64 0, !dbg !44
  %737 = insertelement <2 x bfloat> %736, bfloat %695, i64 1, !dbg !44
  %738 = bitcast <2 x bfloat> %737 to i32, !dbg !44
  %739 = insertelement <2 x bfloat> poison, bfloat %696, i64 0, !dbg !44
  %740 = insertelement <2 x bfloat> %739, bfloat %697, i64 1, !dbg !44
  %741 = bitcast <2 x bfloat> %740 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %444, i32 %732, i32 %735, i32 %738, i32 %741) #2, !dbg !44
  %742 = insertelement <2 x bfloat> poison, bfloat %698, i64 0, !dbg !44
  %743 = insertelement <2 x bfloat> %742, bfloat %699, i64 1, !dbg !44
  %744 = bitcast <2 x bfloat> %743 to i32, !dbg !44
  %745 = insertelement <2 x bfloat> poison, bfloat %700, i64 0, !dbg !44
  %746 = insertelement <2 x bfloat> %745, bfloat %701, i64 1, !dbg !44
  %747 = bitcast <2 x bfloat> %746 to i32, !dbg !44
  %748 = insertelement <2 x bfloat> poison, bfloat %702, i64 0, !dbg !44
  %749 = insertelement <2 x bfloat> %748, bfloat %703, i64 1, !dbg !44
  %750 = bitcast <2 x bfloat> %749 to i32, !dbg !44
  %751 = insertelement <2 x bfloat> poison, bfloat %704, i64 0, !dbg !44
  %752 = insertelement <2 x bfloat> %751, bfloat %705, i64 1, !dbg !44
  %753 = bitcast <2 x bfloat> %752 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %447, i32 %744, i32 %747, i32 %750, i32 %753) #2, !dbg !44
  %754 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx354, !dbg !29
  %755 = getelementptr bfloat, ptr addrspace(1) %754, i64 %79, !dbg !29
  %756 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx355, !dbg !29
  %757 = getelementptr bfloat, ptr addrspace(1) %756, i64 %79, !dbg !29
  %758 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx356, !dbg !29
  %759 = getelementptr bfloat, ptr addrspace(1) %758, i64 %79, !dbg !29
  %760 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx357, !dbg !29
  %761 = getelementptr bfloat, ptr addrspace(1) %760, i64 %79, !dbg !29
  store <2 x bfloat> %707, ptr addrspace(3) %462, align 4, !dbg !29
  store <2 x bfloat> %710, ptr addrspace(3) %467, align 4, !dbg !29
  store <2 x bfloat> %713, ptr addrspace(3) %470, align 4, !dbg !29
  store <2 x bfloat> %716, ptr addrspace(3) %475, align 4, !dbg !29
  store <2 x bfloat> %719, ptr addrspace(3) %478, align 4, !dbg !29
  store <2 x bfloat> %722, ptr addrspace(3) %483, align 4, !dbg !29
  store <2 x bfloat> %725, ptr addrspace(3) %486, align 4, !dbg !29
  store <2 x bfloat> %728, ptr addrspace(3) %491, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %762 = load <4 x i32>, ptr addrspace(3) %495, align 16, !dbg !29
  %763 = load <4 x i32>, ptr addrspace(3) %500, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  store <2 x bfloat> %731, ptr addrspace(3) %462, align 4, !dbg !29
  store <2 x bfloat> %734, ptr addrspace(3) %467, align 4, !dbg !29
  store <2 x bfloat> %737, ptr addrspace(3) %470, align 4, !dbg !29
  store <2 x bfloat> %740, ptr addrspace(3) %475, align 4, !dbg !29
  store <2 x bfloat> %743, ptr addrspace(3) %478, align 4, !dbg !29
  store <2 x bfloat> %746, ptr addrspace(3) %483, align 4, !dbg !29
  store <2 x bfloat> %749, ptr addrspace(3) %486, align 4, !dbg !29
  store <2 x bfloat> %752, ptr addrspace(3) %491, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %764 = load <4 x i32>, ptr addrspace(3) %495, align 16, !dbg !29
  %765 = load <4 x i32>, ptr addrspace(3) %500, align 16, !dbg !29
  %.extract511 = extractelement <4 x i32> %762, i64 0, !dbg !29
  %.extract513 = extractelement <4 x i32> %762, i64 1, !dbg !29
  %.extract515 = extractelement <4 x i32> %762, i64 2, !dbg !29
  %.extract517 = extractelement <4 x i32> %762, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract511, i32 %.extract513, i32 %.extract515, i32 %.extract517, ptr addrspace(1) %755, i1 %82) #2, !dbg !29
  %.extract519 = extractelement <4 x i32> %763, i64 0, !dbg !29
  %.extract521 = extractelement <4 x i32> %763, i64 1, !dbg !29
  %.extract523 = extractelement <4 x i32> %763, i64 2, !dbg !29
  %.extract525 = extractelement <4 x i32> %763, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract519, i32 %.extract521, i32 %.extract523, i32 %.extract525, ptr addrspace(1) %757, i1 %82) #2, !dbg !29
  %.extract527 = extractelement <4 x i32> %764, i64 0, !dbg !29
  %.extract529 = extractelement <4 x i32> %764, i64 1, !dbg !29
  %.extract531 = extractelement <4 x i32> %764, i64 2, !dbg !29
  %.extract533 = extractelement <4 x i32> %764, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract527, i32 %.extract529, i32 %.extract531, i32 %.extract533, ptr addrspace(1) %759, i1 %82) #2, !dbg !29
  %.extract535 = extractelement <4 x i32> %765, i64 0, !dbg !29
  %.extract537 = extractelement <4 x i32> %765, i64 1, !dbg !29
  %.extract539 = extractelement <4 x i32> %765, i64 2, !dbg !29
  %.extract541 = extractelement <4 x i32> %765, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract535, i32 %.extract537, i32 %.extract539, i32 %.extract541, ptr addrspace(1) %761, i1 %82) #2, !dbg !29
  %766 = fptrunc float %602 to bfloat, !dbg !45
  %767 = fptrunc float %603 to bfloat, !dbg !45
  %768 = fptrunc float %604 to bfloat, !dbg !45
  %769 = fptrunc float %605 to bfloat, !dbg !45
  %770 = fptrunc float %606 to bfloat, !dbg !45
  %771 = fptrunc float %607 to bfloat, !dbg !45
  %772 = fptrunc float %608 to bfloat, !dbg !45
  %773 = fptrunc float %609 to bfloat, !dbg !45
  %774 = fptrunc float %610 to bfloat, !dbg !45
  %775 = fptrunc float %611 to bfloat, !dbg !45
  %776 = fptrunc float %612 to bfloat, !dbg !45
  %777 = fptrunc float %613 to bfloat, !dbg !45
  %778 = fptrunc float %614 to bfloat, !dbg !45
  %779 = fptrunc float %615 to bfloat, !dbg !45
  %780 = fptrunc float %616 to bfloat, !dbg !45
  %781 = fptrunc float %617 to bfloat, !dbg !45
  %782 = fptrunc float %618 to bfloat, !dbg !45
  %783 = fptrunc float %619 to bfloat, !dbg !45
  %784 = fptrunc float %620 to bfloat, !dbg !45
  %785 = fptrunc float %621 to bfloat, !dbg !45
  %786 = fptrunc float %622 to bfloat, !dbg !45
  %787 = fptrunc float %623 to bfloat, !dbg !45
  %788 = fptrunc float %624 to bfloat, !dbg !45
  %789 = fptrunc float %625 to bfloat, !dbg !45
  %790 = fptrunc float %626 to bfloat, !dbg !45
  %791 = fptrunc float %627 to bfloat, !dbg !45
  %792 = fptrunc float %628 to bfloat, !dbg !45
  %793 = fptrunc float %629 to bfloat, !dbg !45
  %794 = fptrunc float %630 to bfloat, !dbg !45
  %795 = fptrunc float %631 to bfloat, !dbg !45
  %796 = fptrunc float %632 to bfloat, !dbg !45
  %797 = fptrunc float %633 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %798 = insertelement <2 x bfloat> poison, bfloat %766, i64 0, !dbg !45
  %799 = insertelement <2 x bfloat> %798, bfloat %767, i64 1, !dbg !45
  %800 = bitcast <2 x bfloat> %799 to i32, !dbg !45
  %801 = insertelement <2 x bfloat> poison, bfloat %768, i64 0, !dbg !45
  %802 = insertelement <2 x bfloat> %801, bfloat %769, i64 1, !dbg !45
  %803 = bitcast <2 x bfloat> %802 to i32, !dbg !45
  %804 = insertelement <2 x bfloat> poison, bfloat %770, i64 0, !dbg !45
  %805 = insertelement <2 x bfloat> %804, bfloat %771, i64 1, !dbg !45
  %806 = bitcast <2 x bfloat> %805 to i32, !dbg !45
  %807 = insertelement <2 x bfloat> poison, bfloat %772, i64 0, !dbg !45
  %808 = insertelement <2 x bfloat> %807, bfloat %773, i64 1, !dbg !45
  %809 = bitcast <2 x bfloat> %808 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %502, i32 %800, i32 %803, i32 %806, i32 %809) #2, !dbg !45
  %810 = insertelement <2 x bfloat> poison, bfloat %774, i64 0, !dbg !45
  %811 = insertelement <2 x bfloat> %810, bfloat %775, i64 1, !dbg !45
  %812 = bitcast <2 x bfloat> %811 to i32, !dbg !45
  %813 = insertelement <2 x bfloat> poison, bfloat %776, i64 0, !dbg !45
  %814 = insertelement <2 x bfloat> %813, bfloat %777, i64 1, !dbg !45
  %815 = bitcast <2 x bfloat> %814 to i32, !dbg !45
  %816 = insertelement <2 x bfloat> poison, bfloat %778, i64 0, !dbg !45
  %817 = insertelement <2 x bfloat> %816, bfloat %779, i64 1, !dbg !45
  %818 = bitcast <2 x bfloat> %817 to i32, !dbg !45
  %819 = insertelement <2 x bfloat> poison, bfloat %780, i64 0, !dbg !45
  %820 = insertelement <2 x bfloat> %819, bfloat %781, i64 1, !dbg !45
  %821 = bitcast <2 x bfloat> %820 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %504, i32 %812, i32 %815, i32 %818, i32 %821) #2, !dbg !45
  %822 = insertelement <2 x bfloat> poison, bfloat %782, i64 0, !dbg !45
  %823 = insertelement <2 x bfloat> %822, bfloat %783, i64 1, !dbg !45
  %824 = bitcast <2 x bfloat> %823 to i32, !dbg !45
  %825 = insertelement <2 x bfloat> poison, bfloat %784, i64 0, !dbg !45
  %826 = insertelement <2 x bfloat> %825, bfloat %785, i64 1, !dbg !45
  %827 = bitcast <2 x bfloat> %826 to i32, !dbg !45
  %828 = insertelement <2 x bfloat> poison, bfloat %786, i64 0, !dbg !45
  %829 = insertelement <2 x bfloat> %828, bfloat %787, i64 1, !dbg !45
  %830 = bitcast <2 x bfloat> %829 to i32, !dbg !45
  %831 = insertelement <2 x bfloat> poison, bfloat %788, i64 0, !dbg !45
  %832 = insertelement <2 x bfloat> %831, bfloat %789, i64 1, !dbg !45
  %833 = bitcast <2 x bfloat> %832 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %506, i32 %824, i32 %827, i32 %830, i32 %833) #2, !dbg !45
  %834 = insertelement <2 x bfloat> poison, bfloat %790, i64 0, !dbg !45
  %835 = insertelement <2 x bfloat> %834, bfloat %791, i64 1, !dbg !45
  %836 = bitcast <2 x bfloat> %835 to i32, !dbg !45
  %837 = insertelement <2 x bfloat> poison, bfloat %792, i64 0, !dbg !45
  %838 = insertelement <2 x bfloat> %837, bfloat %793, i64 1, !dbg !45
  %839 = bitcast <2 x bfloat> %838 to i32, !dbg !45
  %840 = insertelement <2 x bfloat> poison, bfloat %794, i64 0, !dbg !45
  %841 = insertelement <2 x bfloat> %840, bfloat %795, i64 1, !dbg !45
  %842 = bitcast <2 x bfloat> %841 to i32, !dbg !45
  %843 = insertelement <2 x bfloat> poison, bfloat %796, i64 0, !dbg !45
  %844 = insertelement <2 x bfloat> %843, bfloat %797, i64 1, !dbg !45
  %845 = bitcast <2 x bfloat> %844 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %508, i32 %836, i32 %839, i32 %842, i32 %845) #2, !dbg !45
  %846 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx404, !dbg !30
  %847 = getelementptr bfloat, ptr addrspace(1) %846, i64 %79, !dbg !30
  %848 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx405, !dbg !30
  %849 = getelementptr bfloat, ptr addrspace(1) %848, i64 %79, !dbg !30
  %850 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx406, !dbg !30
  %851 = getelementptr bfloat, ptr addrspace(1) %850, i64 %79, !dbg !30
  %852 = getelementptr i8, ptr addrspace(1) %673, i64 %.idx407, !dbg !30
  %853 = getelementptr bfloat, ptr addrspace(1) %852, i64 %79, !dbg !30
  store <2 x bfloat> %799, ptr addrspace(3) %509, align 4, !dbg !30
  store <2 x bfloat> %802, ptr addrspace(3) %510, align 4, !dbg !30
  store <2 x bfloat> %805, ptr addrspace(3) %511, align 4, !dbg !30
  store <2 x bfloat> %808, ptr addrspace(3) %512, align 4, !dbg !30
  store <2 x bfloat> %811, ptr addrspace(3) %513, align 4, !dbg !30
  store <2 x bfloat> %814, ptr addrspace(3) %514, align 4, !dbg !30
  store <2 x bfloat> %817, ptr addrspace(3) %515, align 4, !dbg !30
  store <2 x bfloat> %820, ptr addrspace(3) %516, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %854 = load <4 x i32>, ptr addrspace(3) %517, align 16, !dbg !30
  %855 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  store <2 x bfloat> %823, ptr addrspace(3) %509, align 4, !dbg !30
  store <2 x bfloat> %826, ptr addrspace(3) %510, align 4, !dbg !30
  store <2 x bfloat> %829, ptr addrspace(3) %511, align 4, !dbg !30
  store <2 x bfloat> %832, ptr addrspace(3) %512, align 4, !dbg !30
  store <2 x bfloat> %835, ptr addrspace(3) %513, align 4, !dbg !30
  store <2 x bfloat> %838, ptr addrspace(3) %514, align 4, !dbg !30
  store <2 x bfloat> %841, ptr addrspace(3) %515, align 4, !dbg !30
  store <2 x bfloat> %844, ptr addrspace(3) %516, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %856 = load <4 x i32>, ptr addrspace(3) %517, align 16, !dbg !30
  %857 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !30
  %.extract543 = extractelement <4 x i32> %854, i64 0, !dbg !30
  %.extract545 = extractelement <4 x i32> %854, i64 1, !dbg !30
  %.extract547 = extractelement <4 x i32> %854, i64 2, !dbg !30
  %.extract549 = extractelement <4 x i32> %854, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract543, i32 %.extract545, i32 %.extract547, i32 %.extract549, ptr addrspace(1) %847, i1 %82) #2, !dbg !30
  %.extract551 = extractelement <4 x i32> %855, i64 0, !dbg !30
  %.extract553 = extractelement <4 x i32> %855, i64 1, !dbg !30
  %.extract555 = extractelement <4 x i32> %855, i64 2, !dbg !30
  %.extract557 = extractelement <4 x i32> %855, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract551, i32 %.extract553, i32 %.extract555, i32 %.extract557, ptr addrspace(1) %849, i1 %82) #2, !dbg !30
  %.extract559 = extractelement <4 x i32> %856, i64 0, !dbg !30
  %.extract561 = extractelement <4 x i32> %856, i64 1, !dbg !30
  %.extract563 = extractelement <4 x i32> %856, i64 2, !dbg !30
  %.extract565 = extractelement <4 x i32> %856, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract559, i32 %.extract561, i32 %.extract563, i32 %.extract565, ptr addrspace(1) %851, i1 %82) #2, !dbg !30
  %.extract567 = extractelement <4 x i32> %857, i64 0, !dbg !30
  %.extract569 = extractelement <4 x i32> %857, i64 1, !dbg !30
  %.extract571 = extractelement <4 x i32> %857, i64 2, !dbg !30
  %.extract573 = extractelement <4 x i32> %857, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract567, i32 %.extract569, i32 %.extract571, i32 %.extract573, ptr addrspace(1) %853, i1 %82) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %858 = shl i32 %669, 12, !dbg !35
  %859 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %858, !dbg !35
  %860 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %527, !dbg !35
  %861 = ptrtoint ptr addrspace(3) %860 to i32, !dbg !35
  %862 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %861) #2, !dbg !35
  %863 = extractvalue { i32, i32, i32, i32 } %862, 0, !dbg !35
  %864 = extractvalue { i32, i32, i32, i32 } %862, 1, !dbg !35
  %865 = extractvalue { i32, i32, i32, i32 } %862, 2, !dbg !35
  %866 = extractvalue { i32, i32, i32, i32 } %862, 3, !dbg !35
  %867 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %528, !dbg !35
  %868 = ptrtoint ptr addrspace(3) %867 to i32, !dbg !35
  %869 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %868) #2, !dbg !35
  %870 = extractvalue { i32, i32, i32, i32 } %869, 0, !dbg !35
  %871 = extractvalue { i32, i32, i32, i32 } %869, 1, !dbg !35
  %872 = extractvalue { i32, i32, i32, i32 } %869, 2, !dbg !35
  %873 = extractvalue { i32, i32, i32, i32 } %869, 3, !dbg !35
  %874 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %529, !dbg !35
  %875 = ptrtoint ptr addrspace(3) %874 to i32, !dbg !35
  %876 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %875) #2, !dbg !35
  %877 = extractvalue { i32, i32, i32, i32 } %876, 0, !dbg !35
  %878 = extractvalue { i32, i32, i32, i32 } %876, 1, !dbg !35
  %879 = extractvalue { i32, i32, i32, i32 } %876, 2, !dbg !35
  %880 = extractvalue { i32, i32, i32, i32 } %876, 3, !dbg !35
  %881 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %530, !dbg !35
  %882 = ptrtoint ptr addrspace(3) %881 to i32, !dbg !35
  %883 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %882) #2, !dbg !35
  %884 = extractvalue { i32, i32, i32, i32 } %883, 0, !dbg !35
  %885 = extractvalue { i32, i32, i32, i32 } %883, 1, !dbg !35
  %886 = extractvalue { i32, i32, i32, i32 } %883, 2, !dbg !35
  %887 = extractvalue { i32, i32, i32, i32 } %883, 3, !dbg !35
  %888 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %531, !dbg !35
  %889 = ptrtoint ptr addrspace(3) %888 to i32, !dbg !35
  %890 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %889) #2, !dbg !35
  %891 = extractvalue { i32, i32, i32, i32 } %890, 0, !dbg !35
  %892 = extractvalue { i32, i32, i32, i32 } %890, 1, !dbg !35
  %893 = extractvalue { i32, i32, i32, i32 } %890, 2, !dbg !35
  %894 = extractvalue { i32, i32, i32, i32 } %890, 3, !dbg !35
  %895 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %532, !dbg !35
  %896 = ptrtoint ptr addrspace(3) %895 to i32, !dbg !35
  %897 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %896) #2, !dbg !35
  %898 = extractvalue { i32, i32, i32, i32 } %897, 0, !dbg !35
  %899 = extractvalue { i32, i32, i32, i32 } %897, 1, !dbg !35
  %900 = extractvalue { i32, i32, i32, i32 } %897, 2, !dbg !35
  %901 = extractvalue { i32, i32, i32, i32 } %897, 3, !dbg !35
  %902 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %533, !dbg !35
  %903 = ptrtoint ptr addrspace(3) %902 to i32, !dbg !35
  %904 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %903) #2, !dbg !35
  %905 = extractvalue { i32, i32, i32, i32 } %904, 0, !dbg !35
  %906 = extractvalue { i32, i32, i32, i32 } %904, 1, !dbg !35
  %907 = extractvalue { i32, i32, i32, i32 } %904, 2, !dbg !35
  %908 = extractvalue { i32, i32, i32, i32 } %904, 3, !dbg !35
  %909 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %859, i32 %534, !dbg !35
  %910 = ptrtoint ptr addrspace(3) %909 to i32, !dbg !35
  %911 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %910) #2, !dbg !35
  %912 = extractvalue { i32, i32, i32, i32 } %911, 0, !dbg !35
  %913 = extractvalue { i32, i32, i32, i32 } %911, 1, !dbg !35
  %914 = extractvalue { i32, i32, i32, i32 } %911, 2, !dbg !35
  %915 = extractvalue { i32, i32, i32, i32 } %911, 3, !dbg !35
  %916 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %538) #2, !dbg !44
  %917 = extractvalue { i32, i32, i32, i32 } %916, 0, !dbg !44
  %918 = extractvalue { i32, i32, i32, i32 } %916, 1, !dbg !44
  %919 = extractvalue { i32, i32, i32, i32 } %916, 2, !dbg !44
  %920 = extractvalue { i32, i32, i32, i32 } %916, 3, !dbg !44
  %921 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %541) #2, !dbg !44
  %922 = extractvalue { i32, i32, i32, i32 } %921, 0, !dbg !44
  %923 = extractvalue { i32, i32, i32, i32 } %921, 1, !dbg !44
  %924 = extractvalue { i32, i32, i32, i32 } %921, 2, !dbg !44
  %925 = extractvalue { i32, i32, i32, i32 } %921, 3, !dbg !44
  %926 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %544) #2, !dbg !44
  %927 = extractvalue { i32, i32, i32, i32 } %926, 0, !dbg !44
  %928 = extractvalue { i32, i32, i32, i32 } %926, 1, !dbg !44
  %929 = extractvalue { i32, i32, i32, i32 } %926, 2, !dbg !44
  %930 = extractvalue { i32, i32, i32, i32 } %926, 3, !dbg !44
  %931 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %547) #2, !dbg !44
  %932 = extractvalue { i32, i32, i32, i32 } %931, 0, !dbg !44
  %933 = extractvalue { i32, i32, i32, i32 } %931, 1, !dbg !44
  %934 = extractvalue { i32, i32, i32, i32 } %931, 2, !dbg !44
  %935 = extractvalue { i32, i32, i32, i32 } %931, 3, !dbg !44
  %936 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %550) #2, !dbg !44
  %937 = extractvalue { i32, i32, i32, i32 } %936, 0, !dbg !44
  %938 = extractvalue { i32, i32, i32, i32 } %936, 1, !dbg !44
  %939 = extractvalue { i32, i32, i32, i32 } %936, 2, !dbg !44
  %940 = extractvalue { i32, i32, i32, i32 } %936, 3, !dbg !44
  %941 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %553) #2, !dbg !44
  %942 = extractvalue { i32, i32, i32, i32 } %941, 0, !dbg !44
  %943 = extractvalue { i32, i32, i32, i32 } %941, 1, !dbg !44
  %944 = extractvalue { i32, i32, i32, i32 } %941, 2, !dbg !44
  %945 = extractvalue { i32, i32, i32, i32 } %941, 3, !dbg !44
  %946 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %556) #2, !dbg !44
  %947 = extractvalue { i32, i32, i32, i32 } %946, 0, !dbg !44
  %948 = extractvalue { i32, i32, i32, i32 } %946, 1, !dbg !44
  %949 = extractvalue { i32, i32, i32, i32 } %946, 2, !dbg !44
  %950 = extractvalue { i32, i32, i32, i32 } %946, 3, !dbg !44
  %951 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %559) #2, !dbg !44
  %952 = extractvalue { i32, i32, i32, i32 } %951, 0, !dbg !44
  %953 = extractvalue { i32, i32, i32, i32 } %951, 1, !dbg !44
  %954 = extractvalue { i32, i32, i32, i32 } %951, 2, !dbg !44
  %955 = extractvalue { i32, i32, i32, i32 } %951, 3, !dbg !44
  %956 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %863, i32 %864, i32 %865, i32 %866, i32 %917, i32 %918) #2, !dbg !46
  %957 = extractvalue { float, float, float, float } %956, 0, !dbg !46
  %958 = extractvalue { float, float, float, float } %956, 1, !dbg !46
  %959 = extractvalue { float, float, float, float } %956, 2, !dbg !46
  %960 = extractvalue { float, float, float, float } %956, 3, !dbg !46
  %961 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %863, i32 %864, i32 %865, i32 %866, i32 %927, i32 %928) #2, !dbg !46
  %962 = extractvalue { float, float, float, float } %961, 0, !dbg !46
  %963 = extractvalue { float, float, float, float } %961, 1, !dbg !46
  %964 = extractvalue { float, float, float, float } %961, 2, !dbg !46
  %965 = extractvalue { float, float, float, float } %961, 3, !dbg !46
  %966 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %863, i32 %864, i32 %865, i32 %866, i32 %937, i32 %938) #2, !dbg !46
  %967 = extractvalue { float, float, float, float } %966, 0, !dbg !46
  %968 = extractvalue { float, float, float, float } %966, 1, !dbg !46
  %969 = extractvalue { float, float, float, float } %966, 2, !dbg !46
  %970 = extractvalue { float, float, float, float } %966, 3, !dbg !46
  %971 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %863, i32 %864, i32 %865, i32 %866, i32 %947, i32 %948) #2, !dbg !46
  %972 = extractvalue { float, float, float, float } %971, 0, !dbg !46
  %973 = extractvalue { float, float, float, float } %971, 1, !dbg !46
  %974 = extractvalue { float, float, float, float } %971, 2, !dbg !46
  %975 = extractvalue { float, float, float, float } %971, 3, !dbg !46
  %976 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %891, i32 %892, i32 %893, i32 %894, i32 %917, i32 %918) #2, !dbg !46
  %977 = extractvalue { float, float, float, float } %976, 0, !dbg !46
  %978 = extractvalue { float, float, float, float } %976, 1, !dbg !46
  %979 = extractvalue { float, float, float, float } %976, 2, !dbg !46
  %980 = extractvalue { float, float, float, float } %976, 3, !dbg !46
  %981 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %891, i32 %892, i32 %893, i32 %894, i32 %927, i32 %928) #2, !dbg !46
  %982 = extractvalue { float, float, float, float } %981, 0, !dbg !46
  %983 = extractvalue { float, float, float, float } %981, 1, !dbg !46
  %984 = extractvalue { float, float, float, float } %981, 2, !dbg !46
  %985 = extractvalue { float, float, float, float } %981, 3, !dbg !46
  %986 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %891, i32 %892, i32 %893, i32 %894, i32 %937, i32 %938) #2, !dbg !46
  %987 = extractvalue { float, float, float, float } %986, 0, !dbg !46
  %988 = extractvalue { float, float, float, float } %986, 1, !dbg !46
  %989 = extractvalue { float, float, float, float } %986, 2, !dbg !46
  %990 = extractvalue { float, float, float, float } %986, 3, !dbg !46
  %991 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %891, i32 %892, i32 %893, i32 %894, i32 %947, i32 %948) #2, !dbg !46
  %992 = extractvalue { float, float, float, float } %991, 0, !dbg !46
  %993 = extractvalue { float, float, float, float } %991, 1, !dbg !46
  %994 = extractvalue { float, float, float, float } %991, 2, !dbg !46
  %995 = extractvalue { float, float, float, float } %991, 3, !dbg !46
  %996 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %957, float %958, float %959, float %960, i32 %870, i32 %871, i32 %872, i32 %873, i32 %919, i32 %920) #2, !dbg !46
  %997 = extractvalue { float, float, float, float } %996, 0, !dbg !46
  %998 = extractvalue { float, float, float, float } %996, 1, !dbg !46
  %999 = extractvalue { float, float, float, float } %996, 2, !dbg !46
  %1000 = extractvalue { float, float, float, float } %996, 3, !dbg !46
  %1001 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %962, float %963, float %964, float %965, i32 %870, i32 %871, i32 %872, i32 %873, i32 %929, i32 %930) #2, !dbg !46
  %1002 = extractvalue { float, float, float, float } %1001, 0, !dbg !46
  %1003 = extractvalue { float, float, float, float } %1001, 1, !dbg !46
  %1004 = extractvalue { float, float, float, float } %1001, 2, !dbg !46
  %1005 = extractvalue { float, float, float, float } %1001, 3, !dbg !46
  %1006 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %967, float %968, float %969, float %970, i32 %870, i32 %871, i32 %872, i32 %873, i32 %939, i32 %940) #2, !dbg !46
  %1007 = extractvalue { float, float, float, float } %1006, 0, !dbg !46
  %1008 = extractvalue { float, float, float, float } %1006, 1, !dbg !46
  %1009 = extractvalue { float, float, float, float } %1006, 2, !dbg !46
  %1010 = extractvalue { float, float, float, float } %1006, 3, !dbg !46
  %1011 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %972, float %973, float %974, float %975, i32 %870, i32 %871, i32 %872, i32 %873, i32 %949, i32 %950) #2, !dbg !46
  %1012 = extractvalue { float, float, float, float } %1011, 0, !dbg !46
  %1013 = extractvalue { float, float, float, float } %1011, 1, !dbg !46
  %1014 = extractvalue { float, float, float, float } %1011, 2, !dbg !46
  %1015 = extractvalue { float, float, float, float } %1011, 3, !dbg !46
  %1016 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %977, float %978, float %979, float %980, i32 %898, i32 %899, i32 %900, i32 %901, i32 %919, i32 %920) #2, !dbg !46
  %1017 = extractvalue { float, float, float, float } %1016, 0, !dbg !46
  %1018 = extractvalue { float, float, float, float } %1016, 1, !dbg !46
  %1019 = extractvalue { float, float, float, float } %1016, 2, !dbg !46
  %1020 = extractvalue { float, float, float, float } %1016, 3, !dbg !46
  %1021 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %982, float %983, float %984, float %985, i32 %898, i32 %899, i32 %900, i32 %901, i32 %929, i32 %930) #2, !dbg !46
  %1022 = extractvalue { float, float, float, float } %1021, 0, !dbg !46
  %1023 = extractvalue { float, float, float, float } %1021, 1, !dbg !46
  %1024 = extractvalue { float, float, float, float } %1021, 2, !dbg !46
  %1025 = extractvalue { float, float, float, float } %1021, 3, !dbg !46
  %1026 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %987, float %988, float %989, float %990, i32 %898, i32 %899, i32 %900, i32 %901, i32 %939, i32 %940) #2, !dbg !46
  %1027 = extractvalue { float, float, float, float } %1026, 0, !dbg !46
  %1028 = extractvalue { float, float, float, float } %1026, 1, !dbg !46
  %1029 = extractvalue { float, float, float, float } %1026, 2, !dbg !46
  %1030 = extractvalue { float, float, float, float } %1026, 3, !dbg !46
  %1031 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %992, float %993, float %994, float %995, i32 %898, i32 %899, i32 %900, i32 %901, i32 %949, i32 %950) #2, !dbg !46
  %1032 = extractvalue { float, float, float, float } %1031, 0, !dbg !46
  %1033 = extractvalue { float, float, float, float } %1031, 1, !dbg !46
  %1034 = extractvalue { float, float, float, float } %1031, 2, !dbg !46
  %1035 = extractvalue { float, float, float, float } %1031, 3, !dbg !46
  %1036 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %997, float %998, float %999, float %1000, i32 %877, i32 %878, i32 %879, i32 %880, i32 %922, i32 %923) #2, !dbg !46
  %1037 = extractvalue { float, float, float, float } %1036, 0, !dbg !46
  %1038 = extractvalue { float, float, float, float } %1036, 1, !dbg !46
  %1039 = extractvalue { float, float, float, float } %1036, 2, !dbg !46
  %1040 = extractvalue { float, float, float, float } %1036, 3, !dbg !46
  %1041 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1002, float %1003, float %1004, float %1005, i32 %877, i32 %878, i32 %879, i32 %880, i32 %932, i32 %933) #2, !dbg !46
  %1042 = extractvalue { float, float, float, float } %1041, 0, !dbg !46
  %1043 = extractvalue { float, float, float, float } %1041, 1, !dbg !46
  %1044 = extractvalue { float, float, float, float } %1041, 2, !dbg !46
  %1045 = extractvalue { float, float, float, float } %1041, 3, !dbg !46
  %1046 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1007, float %1008, float %1009, float %1010, i32 %877, i32 %878, i32 %879, i32 %880, i32 %942, i32 %943) #2, !dbg !46
  %1047 = extractvalue { float, float, float, float } %1046, 0, !dbg !46
  %1048 = extractvalue { float, float, float, float } %1046, 1, !dbg !46
  %1049 = extractvalue { float, float, float, float } %1046, 2, !dbg !46
  %1050 = extractvalue { float, float, float, float } %1046, 3, !dbg !46
  %1051 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1012, float %1013, float %1014, float %1015, i32 %877, i32 %878, i32 %879, i32 %880, i32 %952, i32 %953) #2, !dbg !46
  %1052 = extractvalue { float, float, float, float } %1051, 0, !dbg !46
  %1053 = extractvalue { float, float, float, float } %1051, 1, !dbg !46
  %1054 = extractvalue { float, float, float, float } %1051, 2, !dbg !46
  %1055 = extractvalue { float, float, float, float } %1051, 3, !dbg !46
  %1056 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1017, float %1018, float %1019, float %1020, i32 %905, i32 %906, i32 %907, i32 %908, i32 %922, i32 %923) #2, !dbg !46
  %1057 = extractvalue { float, float, float, float } %1056, 0, !dbg !46
  %1058 = extractvalue { float, float, float, float } %1056, 1, !dbg !46
  %1059 = extractvalue { float, float, float, float } %1056, 2, !dbg !46
  %1060 = extractvalue { float, float, float, float } %1056, 3, !dbg !46
  %1061 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1022, float %1023, float %1024, float %1025, i32 %905, i32 %906, i32 %907, i32 %908, i32 %932, i32 %933) #2, !dbg !46
  %1062 = extractvalue { float, float, float, float } %1061, 0, !dbg !46
  %1063 = extractvalue { float, float, float, float } %1061, 1, !dbg !46
  %1064 = extractvalue { float, float, float, float } %1061, 2, !dbg !46
  %1065 = extractvalue { float, float, float, float } %1061, 3, !dbg !46
  %1066 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1027, float %1028, float %1029, float %1030, i32 %905, i32 %906, i32 %907, i32 %908, i32 %942, i32 %943) #2, !dbg !46
  %1067 = extractvalue { float, float, float, float } %1066, 0, !dbg !46
  %1068 = extractvalue { float, float, float, float } %1066, 1, !dbg !46
  %1069 = extractvalue { float, float, float, float } %1066, 2, !dbg !46
  %1070 = extractvalue { float, float, float, float } %1066, 3, !dbg !46
  %1071 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1032, float %1033, float %1034, float %1035, i32 %905, i32 %906, i32 %907, i32 %908, i32 %952, i32 %953) #2, !dbg !46
  %1072 = extractvalue { float, float, float, float } %1071, 0, !dbg !46
  %1073 = extractvalue { float, float, float, float } %1071, 1, !dbg !46
  %1074 = extractvalue { float, float, float, float } %1071, 2, !dbg !46
  %1075 = extractvalue { float, float, float, float } %1071, 3, !dbg !46
  %1076 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1037, float %1038, float %1039, float %1040, i32 %884, i32 %885, i32 %886, i32 %887, i32 %924, i32 %925) #2, !dbg !46
  %1077 = extractvalue { float, float, float, float } %1076, 0, !dbg !46
  %1078 = extractvalue { float, float, float, float } %1076, 1, !dbg !46
  %1079 = extractvalue { float, float, float, float } %1076, 2, !dbg !46
  %1080 = extractvalue { float, float, float, float } %1076, 3, !dbg !46
  %1081 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1042, float %1043, float %1044, float %1045, i32 %884, i32 %885, i32 %886, i32 %887, i32 %934, i32 %935) #2, !dbg !46
  %1082 = extractvalue { float, float, float, float } %1081, 0, !dbg !46
  %1083 = extractvalue { float, float, float, float } %1081, 1, !dbg !46
  %1084 = extractvalue { float, float, float, float } %1081, 2, !dbg !46
  %1085 = extractvalue { float, float, float, float } %1081, 3, !dbg !46
  %1086 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1047, float %1048, float %1049, float %1050, i32 %884, i32 %885, i32 %886, i32 %887, i32 %944, i32 %945) #2, !dbg !46
  %1087 = extractvalue { float, float, float, float } %1086, 0, !dbg !46
  %1088 = extractvalue { float, float, float, float } %1086, 1, !dbg !46
  %1089 = extractvalue { float, float, float, float } %1086, 2, !dbg !46
  %1090 = extractvalue { float, float, float, float } %1086, 3, !dbg !46
  %1091 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1052, float %1053, float %1054, float %1055, i32 %884, i32 %885, i32 %886, i32 %887, i32 %954, i32 %955) #2, !dbg !46
  %1092 = extractvalue { float, float, float, float } %1091, 0, !dbg !46
  %1093 = extractvalue { float, float, float, float } %1091, 1, !dbg !46
  %1094 = extractvalue { float, float, float, float } %1091, 2, !dbg !46
  %1095 = extractvalue { float, float, float, float } %1091, 3, !dbg !46
  %1096 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1057, float %1058, float %1059, float %1060, i32 %912, i32 %913, i32 %914, i32 %915, i32 %924, i32 %925) #2, !dbg !46
  %1097 = extractvalue { float, float, float, float } %1096, 0, !dbg !46
  %1098 = extractvalue { float, float, float, float } %1096, 1, !dbg !46
  %1099 = extractvalue { float, float, float, float } %1096, 2, !dbg !46
  %1100 = extractvalue { float, float, float, float } %1096, 3, !dbg !46
  %1101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1062, float %1063, float %1064, float %1065, i32 %912, i32 %913, i32 %914, i32 %915, i32 %934, i32 %935) #2, !dbg !46
  %1102 = extractvalue { float, float, float, float } %1101, 0, !dbg !46
  %1103 = extractvalue { float, float, float, float } %1101, 1, !dbg !46
  %1104 = extractvalue { float, float, float, float } %1101, 2, !dbg !46
  %1105 = extractvalue { float, float, float, float } %1101, 3, !dbg !46
  %1106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1067, float %1068, float %1069, float %1070, i32 %912, i32 %913, i32 %914, i32 %915, i32 %944, i32 %945) #2, !dbg !46
  %1107 = extractvalue { float, float, float, float } %1106, 0, !dbg !46
  %1108 = extractvalue { float, float, float, float } %1106, 1, !dbg !46
  %1109 = extractvalue { float, float, float, float } %1106, 2, !dbg !46
  %1110 = extractvalue { float, float, float, float } %1106, 3, !dbg !46
  %1111 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1072, float %1073, float %1074, float %1075, i32 %912, i32 %913, i32 %914, i32 %915, i32 %954, i32 %955) #2, !dbg !46
  %1112 = extractvalue { float, float, float, float } %1111, 0, !dbg !46
  %1113 = extractvalue { float, float, float, float } %1111, 1, !dbg !46
  %1114 = extractvalue { float, float, float, float } %1111, 2, !dbg !46
  %1115 = extractvalue { float, float, float, float } %1111, 3, !dbg !46
  %1116 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %858, !dbg !36
  %1117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %527, !dbg !36
  %1118 = ptrtoint ptr addrspace(3) %1117 to i32, !dbg !36
  %1119 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1118) #2, !dbg !36
  %1120 = extractvalue { i32, i32, i32, i32 } %1119, 0, !dbg !36
  %1121 = extractvalue { i32, i32, i32, i32 } %1119, 1, !dbg !36
  %1122 = extractvalue { i32, i32, i32, i32 } %1119, 2, !dbg !36
  %1123 = extractvalue { i32, i32, i32, i32 } %1119, 3, !dbg !36
  %1124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %528, !dbg !36
  %1125 = ptrtoint ptr addrspace(3) %1124 to i32, !dbg !36
  %1126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1125) #2, !dbg !36
  %1127 = extractvalue { i32, i32, i32, i32 } %1126, 0, !dbg !36
  %1128 = extractvalue { i32, i32, i32, i32 } %1126, 1, !dbg !36
  %1129 = extractvalue { i32, i32, i32, i32 } %1126, 2, !dbg !36
  %1130 = extractvalue { i32, i32, i32, i32 } %1126, 3, !dbg !36
  %1131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %529, !dbg !36
  %1132 = ptrtoint ptr addrspace(3) %1131 to i32, !dbg !36
  %1133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1132) #2, !dbg !36
  %1134 = extractvalue { i32, i32, i32, i32 } %1133, 0, !dbg !36
  %1135 = extractvalue { i32, i32, i32, i32 } %1133, 1, !dbg !36
  %1136 = extractvalue { i32, i32, i32, i32 } %1133, 2, !dbg !36
  %1137 = extractvalue { i32, i32, i32, i32 } %1133, 3, !dbg !36
  %1138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %530, !dbg !36
  %1139 = ptrtoint ptr addrspace(3) %1138 to i32, !dbg !36
  %1140 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1139) #2, !dbg !36
  %1141 = extractvalue { i32, i32, i32, i32 } %1140, 0, !dbg !36
  %1142 = extractvalue { i32, i32, i32, i32 } %1140, 1, !dbg !36
  %1143 = extractvalue { i32, i32, i32, i32 } %1140, 2, !dbg !36
  %1144 = extractvalue { i32, i32, i32, i32 } %1140, 3, !dbg !36
  %1145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %531, !dbg !36
  %1146 = ptrtoint ptr addrspace(3) %1145 to i32, !dbg !36
  %1147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1146) #2, !dbg !36
  %1148 = extractvalue { i32, i32, i32, i32 } %1147, 0, !dbg !36
  %1149 = extractvalue { i32, i32, i32, i32 } %1147, 1, !dbg !36
  %1150 = extractvalue { i32, i32, i32, i32 } %1147, 2, !dbg !36
  %1151 = extractvalue { i32, i32, i32, i32 } %1147, 3, !dbg !36
  %1152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %532, !dbg !36
  %1153 = ptrtoint ptr addrspace(3) %1152 to i32, !dbg !36
  %1154 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1153) #2, !dbg !36
  %1155 = extractvalue { i32, i32, i32, i32 } %1154, 0, !dbg !36
  %1156 = extractvalue { i32, i32, i32, i32 } %1154, 1, !dbg !36
  %1157 = extractvalue { i32, i32, i32, i32 } %1154, 2, !dbg !36
  %1158 = extractvalue { i32, i32, i32, i32 } %1154, 3, !dbg !36
  %1159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %533, !dbg !36
  %1160 = ptrtoint ptr addrspace(3) %1159 to i32, !dbg !36
  %1161 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1160) #2, !dbg !36
  %1162 = extractvalue { i32, i32, i32, i32 } %1161, 0, !dbg !36
  %1163 = extractvalue { i32, i32, i32, i32 } %1161, 1, !dbg !36
  %1164 = extractvalue { i32, i32, i32, i32 } %1161, 2, !dbg !36
  %1165 = extractvalue { i32, i32, i32, i32 } %1161, 3, !dbg !36
  %1166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1116, i32 %534, !dbg !36
  %1167 = ptrtoint ptr addrspace(3) %1166 to i32, !dbg !36
  %1168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1167) #2, !dbg !36
  %1169 = extractvalue { i32, i32, i32, i32 } %1168, 0, !dbg !36
  %1170 = extractvalue { i32, i32, i32, i32 } %1168, 1, !dbg !36
  %1171 = extractvalue { i32, i32, i32, i32 } %1168, 2, !dbg !36
  %1172 = extractvalue { i32, i32, i32, i32 } %1168, 3, !dbg !36
  %1173 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %561) #2, !dbg !45
  %1174 = extractvalue { i32, i32, i32, i32 } %1173, 0, !dbg !45
  %1175 = extractvalue { i32, i32, i32, i32 } %1173, 1, !dbg !45
  %1176 = extractvalue { i32, i32, i32, i32 } %1173, 2, !dbg !45
  %1177 = extractvalue { i32, i32, i32, i32 } %1173, 3, !dbg !45
  %1178 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %563) #2, !dbg !45
  %1179 = extractvalue { i32, i32, i32, i32 } %1178, 0, !dbg !45
  %1180 = extractvalue { i32, i32, i32, i32 } %1178, 1, !dbg !45
  %1181 = extractvalue { i32, i32, i32, i32 } %1178, 2, !dbg !45
  %1182 = extractvalue { i32, i32, i32, i32 } %1178, 3, !dbg !45
  %1183 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %565) #2, !dbg !45
  %1184 = extractvalue { i32, i32, i32, i32 } %1183, 0, !dbg !45
  %1185 = extractvalue { i32, i32, i32, i32 } %1183, 1, !dbg !45
  %1186 = extractvalue { i32, i32, i32, i32 } %1183, 2, !dbg !45
  %1187 = extractvalue { i32, i32, i32, i32 } %1183, 3, !dbg !45
  %1188 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %567) #2, !dbg !45
  %1189 = extractvalue { i32, i32, i32, i32 } %1188, 0, !dbg !45
  %1190 = extractvalue { i32, i32, i32, i32 } %1188, 1, !dbg !45
  %1191 = extractvalue { i32, i32, i32, i32 } %1188, 2, !dbg !45
  %1192 = extractvalue { i32, i32, i32, i32 } %1188, 3, !dbg !45
  %1193 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %569) #2, !dbg !45
  %1194 = extractvalue { i32, i32, i32, i32 } %1193, 0, !dbg !45
  %1195 = extractvalue { i32, i32, i32, i32 } %1193, 1, !dbg !45
  %1196 = extractvalue { i32, i32, i32, i32 } %1193, 2, !dbg !45
  %1197 = extractvalue { i32, i32, i32, i32 } %1193, 3, !dbg !45
  %1198 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %571) #2, !dbg !45
  %1199 = extractvalue { i32, i32, i32, i32 } %1198, 0, !dbg !45
  %1200 = extractvalue { i32, i32, i32, i32 } %1198, 1, !dbg !45
  %1201 = extractvalue { i32, i32, i32, i32 } %1198, 2, !dbg !45
  %1202 = extractvalue { i32, i32, i32, i32 } %1198, 3, !dbg !45
  %1203 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %573) #2, !dbg !45
  %1204 = extractvalue { i32, i32, i32, i32 } %1203, 0, !dbg !45
  %1205 = extractvalue { i32, i32, i32, i32 } %1203, 1, !dbg !45
  %1206 = extractvalue { i32, i32, i32, i32 } %1203, 2, !dbg !45
  %1207 = extractvalue { i32, i32, i32, i32 } %1203, 3, !dbg !45
  %1208 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %575) #2, !dbg !45
  %1209 = extractvalue { i32, i32, i32, i32 } %1208, 0, !dbg !45
  %1210 = extractvalue { i32, i32, i32, i32 } %1208, 1, !dbg !45
  %1211 = extractvalue { i32, i32, i32, i32 } %1208, 2, !dbg !45
  %1212 = extractvalue { i32, i32, i32, i32 } %1208, 3, !dbg !45
  %1213 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1077, float %1078, float %1079, float %1080, i32 %1120, i32 %1121, i32 %1122, i32 %1123, i32 %1174, i32 %1175) #2, !dbg !47
  %1214 = extractvalue { float, float, float, float } %1213, 0, !dbg !47
  %1215 = extractvalue { float, float, float, float } %1213, 1, !dbg !47
  %1216 = extractvalue { float, float, float, float } %1213, 2, !dbg !47
  %1217 = extractvalue { float, float, float, float } %1213, 3, !dbg !47
  %1218 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1082, float %1083, float %1084, float %1085, i32 %1120, i32 %1121, i32 %1122, i32 %1123, i32 %1184, i32 %1185) #2, !dbg !47
  %1219 = extractvalue { float, float, float, float } %1218, 0, !dbg !47
  %1220 = extractvalue { float, float, float, float } %1218, 1, !dbg !47
  %1221 = extractvalue { float, float, float, float } %1218, 2, !dbg !47
  %1222 = extractvalue { float, float, float, float } %1218, 3, !dbg !47
  %1223 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1087, float %1088, float %1089, float %1090, i32 %1120, i32 %1121, i32 %1122, i32 %1123, i32 %1194, i32 %1195) #2, !dbg !47
  %1224 = extractvalue { float, float, float, float } %1223, 0, !dbg !47
  %1225 = extractvalue { float, float, float, float } %1223, 1, !dbg !47
  %1226 = extractvalue { float, float, float, float } %1223, 2, !dbg !47
  %1227 = extractvalue { float, float, float, float } %1223, 3, !dbg !47
  %1228 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1092, float %1093, float %1094, float %1095, i32 %1120, i32 %1121, i32 %1122, i32 %1123, i32 %1204, i32 %1205) #2, !dbg !47
  %1229 = extractvalue { float, float, float, float } %1228, 0, !dbg !47
  %1230 = extractvalue { float, float, float, float } %1228, 1, !dbg !47
  %1231 = extractvalue { float, float, float, float } %1228, 2, !dbg !47
  %1232 = extractvalue { float, float, float, float } %1228, 3, !dbg !47
  %1233 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1097, float %1098, float %1099, float %1100, i32 %1148, i32 %1149, i32 %1150, i32 %1151, i32 %1174, i32 %1175) #2, !dbg !47
  %1234 = extractvalue { float, float, float, float } %1233, 0, !dbg !47
  %1235 = extractvalue { float, float, float, float } %1233, 1, !dbg !47
  %1236 = extractvalue { float, float, float, float } %1233, 2, !dbg !47
  %1237 = extractvalue { float, float, float, float } %1233, 3, !dbg !47
  %1238 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1102, float %1103, float %1104, float %1105, i32 %1148, i32 %1149, i32 %1150, i32 %1151, i32 %1184, i32 %1185) #2, !dbg !47
  %1239 = extractvalue { float, float, float, float } %1238, 0, !dbg !47
  %1240 = extractvalue { float, float, float, float } %1238, 1, !dbg !47
  %1241 = extractvalue { float, float, float, float } %1238, 2, !dbg !47
  %1242 = extractvalue { float, float, float, float } %1238, 3, !dbg !47
  %1243 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1107, float %1108, float %1109, float %1110, i32 %1148, i32 %1149, i32 %1150, i32 %1151, i32 %1194, i32 %1195) #2, !dbg !47
  %1244 = extractvalue { float, float, float, float } %1243, 0, !dbg !47
  %1245 = extractvalue { float, float, float, float } %1243, 1, !dbg !47
  %1246 = extractvalue { float, float, float, float } %1243, 2, !dbg !47
  %1247 = extractvalue { float, float, float, float } %1243, 3, !dbg !47
  %1248 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1112, float %1113, float %1114, float %1115, i32 %1148, i32 %1149, i32 %1150, i32 %1151, i32 %1204, i32 %1205) #2, !dbg !47
  %1249 = extractvalue { float, float, float, float } %1248, 0, !dbg !47
  %1250 = extractvalue { float, float, float, float } %1248, 1, !dbg !47
  %1251 = extractvalue { float, float, float, float } %1248, 2, !dbg !47
  %1252 = extractvalue { float, float, float, float } %1248, 3, !dbg !47
  %1253 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1214, float %1215, float %1216, float %1217, i32 %1127, i32 %1128, i32 %1129, i32 %1130, i32 %1176, i32 %1177) #2, !dbg !47
  %1254 = extractvalue { float, float, float, float } %1253, 0, !dbg !47
  %1255 = extractvalue { float, float, float, float } %1253, 1, !dbg !47
  %1256 = extractvalue { float, float, float, float } %1253, 2, !dbg !47
  %1257 = extractvalue { float, float, float, float } %1253, 3, !dbg !47
  %1258 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1219, float %1220, float %1221, float %1222, i32 %1127, i32 %1128, i32 %1129, i32 %1130, i32 %1186, i32 %1187) #2, !dbg !47
  %1259 = extractvalue { float, float, float, float } %1258, 0, !dbg !47
  %1260 = extractvalue { float, float, float, float } %1258, 1, !dbg !47
  %1261 = extractvalue { float, float, float, float } %1258, 2, !dbg !47
  %1262 = extractvalue { float, float, float, float } %1258, 3, !dbg !47
  %1263 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1224, float %1225, float %1226, float %1227, i32 %1127, i32 %1128, i32 %1129, i32 %1130, i32 %1196, i32 %1197) #2, !dbg !47
  %1264 = extractvalue { float, float, float, float } %1263, 0, !dbg !47
  %1265 = extractvalue { float, float, float, float } %1263, 1, !dbg !47
  %1266 = extractvalue { float, float, float, float } %1263, 2, !dbg !47
  %1267 = extractvalue { float, float, float, float } %1263, 3, !dbg !47
  %1268 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1229, float %1230, float %1231, float %1232, i32 %1127, i32 %1128, i32 %1129, i32 %1130, i32 %1206, i32 %1207) #2, !dbg !47
  %1269 = extractvalue { float, float, float, float } %1268, 0, !dbg !47
  %1270 = extractvalue { float, float, float, float } %1268, 1, !dbg !47
  %1271 = extractvalue { float, float, float, float } %1268, 2, !dbg !47
  %1272 = extractvalue { float, float, float, float } %1268, 3, !dbg !47
  %1273 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1234, float %1235, float %1236, float %1237, i32 %1155, i32 %1156, i32 %1157, i32 %1158, i32 %1176, i32 %1177) #2, !dbg !47
  %1274 = extractvalue { float, float, float, float } %1273, 0, !dbg !47
  %1275 = extractvalue { float, float, float, float } %1273, 1, !dbg !47
  %1276 = extractvalue { float, float, float, float } %1273, 2, !dbg !47
  %1277 = extractvalue { float, float, float, float } %1273, 3, !dbg !47
  %1278 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1239, float %1240, float %1241, float %1242, i32 %1155, i32 %1156, i32 %1157, i32 %1158, i32 %1186, i32 %1187) #2, !dbg !47
  %1279 = extractvalue { float, float, float, float } %1278, 0, !dbg !47
  %1280 = extractvalue { float, float, float, float } %1278, 1, !dbg !47
  %1281 = extractvalue { float, float, float, float } %1278, 2, !dbg !47
  %1282 = extractvalue { float, float, float, float } %1278, 3, !dbg !47
  %1283 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1244, float %1245, float %1246, float %1247, i32 %1155, i32 %1156, i32 %1157, i32 %1158, i32 %1196, i32 %1197) #2, !dbg !47
  %1284 = extractvalue { float, float, float, float } %1283, 0, !dbg !47
  %1285 = extractvalue { float, float, float, float } %1283, 1, !dbg !47
  %1286 = extractvalue { float, float, float, float } %1283, 2, !dbg !47
  %1287 = extractvalue { float, float, float, float } %1283, 3, !dbg !47
  %1288 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1249, float %1250, float %1251, float %1252, i32 %1155, i32 %1156, i32 %1157, i32 %1158, i32 %1206, i32 %1207) #2, !dbg !47
  %1289 = extractvalue { float, float, float, float } %1288, 0, !dbg !47
  %1290 = extractvalue { float, float, float, float } %1288, 1, !dbg !47
  %1291 = extractvalue { float, float, float, float } %1288, 2, !dbg !47
  %1292 = extractvalue { float, float, float, float } %1288, 3, !dbg !47
  %1293 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1254, float %1255, float %1256, float %1257, i32 %1134, i32 %1135, i32 %1136, i32 %1137, i32 %1179, i32 %1180) #2, !dbg !47
  %1294 = extractvalue { float, float, float, float } %1293, 0, !dbg !47
  %1295 = extractvalue { float, float, float, float } %1293, 1, !dbg !47
  %1296 = extractvalue { float, float, float, float } %1293, 2, !dbg !47
  %1297 = extractvalue { float, float, float, float } %1293, 3, !dbg !47
  %1298 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1259, float %1260, float %1261, float %1262, i32 %1134, i32 %1135, i32 %1136, i32 %1137, i32 %1189, i32 %1190) #2, !dbg !47
  %1299 = extractvalue { float, float, float, float } %1298, 0, !dbg !47
  %1300 = extractvalue { float, float, float, float } %1298, 1, !dbg !47
  %1301 = extractvalue { float, float, float, float } %1298, 2, !dbg !47
  %1302 = extractvalue { float, float, float, float } %1298, 3, !dbg !47
  %1303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1264, float %1265, float %1266, float %1267, i32 %1134, i32 %1135, i32 %1136, i32 %1137, i32 %1199, i32 %1200) #2, !dbg !47
  %1304 = extractvalue { float, float, float, float } %1303, 0, !dbg !47
  %1305 = extractvalue { float, float, float, float } %1303, 1, !dbg !47
  %1306 = extractvalue { float, float, float, float } %1303, 2, !dbg !47
  %1307 = extractvalue { float, float, float, float } %1303, 3, !dbg !47
  %1308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1269, float %1270, float %1271, float %1272, i32 %1134, i32 %1135, i32 %1136, i32 %1137, i32 %1209, i32 %1210) #2, !dbg !47
  %1309 = extractvalue { float, float, float, float } %1308, 0, !dbg !47
  %1310 = extractvalue { float, float, float, float } %1308, 1, !dbg !47
  %1311 = extractvalue { float, float, float, float } %1308, 2, !dbg !47
  %1312 = extractvalue { float, float, float, float } %1308, 3, !dbg !47
  %1313 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1274, float %1275, float %1276, float %1277, i32 %1162, i32 %1163, i32 %1164, i32 %1165, i32 %1179, i32 %1180) #2, !dbg !47
  %1314 = extractvalue { float, float, float, float } %1313, 0, !dbg !47
  %1315 = extractvalue { float, float, float, float } %1313, 1, !dbg !47
  %1316 = extractvalue { float, float, float, float } %1313, 2, !dbg !47
  %1317 = extractvalue { float, float, float, float } %1313, 3, !dbg !47
  %1318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1279, float %1280, float %1281, float %1282, i32 %1162, i32 %1163, i32 %1164, i32 %1165, i32 %1189, i32 %1190) #2, !dbg !47
  %1319 = extractvalue { float, float, float, float } %1318, 0, !dbg !47
  %1320 = extractvalue { float, float, float, float } %1318, 1, !dbg !47
  %1321 = extractvalue { float, float, float, float } %1318, 2, !dbg !47
  %1322 = extractvalue { float, float, float, float } %1318, 3, !dbg !47
  %1323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1284, float %1285, float %1286, float %1287, i32 %1162, i32 %1163, i32 %1164, i32 %1165, i32 %1199, i32 %1200) #2, !dbg !47
  %1324 = extractvalue { float, float, float, float } %1323, 0, !dbg !47
  %1325 = extractvalue { float, float, float, float } %1323, 1, !dbg !47
  %1326 = extractvalue { float, float, float, float } %1323, 2, !dbg !47
  %1327 = extractvalue { float, float, float, float } %1323, 3, !dbg !47
  %1328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1289, float %1290, float %1291, float %1292, i32 %1162, i32 %1163, i32 %1164, i32 %1165, i32 %1209, i32 %1210) #2, !dbg !47
  %1329 = extractvalue { float, float, float, float } %1328, 0, !dbg !47
  %1330 = extractvalue { float, float, float, float } %1328, 1, !dbg !47
  %1331 = extractvalue { float, float, float, float } %1328, 2, !dbg !47
  %1332 = extractvalue { float, float, float, float } %1328, 3, !dbg !47
  %1333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1294, float %1295, float %1296, float %1297, i32 %1141, i32 %1142, i32 %1143, i32 %1144, i32 %1181, i32 %1182) #2, !dbg !47
  %1334 = extractvalue { float, float, float, float } %1333, 0, !dbg !47
  %1335 = extractvalue { float, float, float, float } %1333, 1, !dbg !47
  %1336 = extractvalue { float, float, float, float } %1333, 2, !dbg !47
  %1337 = extractvalue { float, float, float, float } %1333, 3, !dbg !47
  %1338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1299, float %1300, float %1301, float %1302, i32 %1141, i32 %1142, i32 %1143, i32 %1144, i32 %1191, i32 %1192) #2, !dbg !47
  %1339 = extractvalue { float, float, float, float } %1338, 0, !dbg !47
  %1340 = extractvalue { float, float, float, float } %1338, 1, !dbg !47
  %1341 = extractvalue { float, float, float, float } %1338, 2, !dbg !47
  %1342 = extractvalue { float, float, float, float } %1338, 3, !dbg !47
  %1343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1304, float %1305, float %1306, float %1307, i32 %1141, i32 %1142, i32 %1143, i32 %1144, i32 %1201, i32 %1202) #2, !dbg !47
  %1344 = extractvalue { float, float, float, float } %1343, 0, !dbg !47
  %1345 = extractvalue { float, float, float, float } %1343, 1, !dbg !47
  %1346 = extractvalue { float, float, float, float } %1343, 2, !dbg !47
  %1347 = extractvalue { float, float, float, float } %1343, 3, !dbg !47
  %1348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1309, float %1310, float %1311, float %1312, i32 %1141, i32 %1142, i32 %1143, i32 %1144, i32 %1211, i32 %1212) #2, !dbg !47
  %1349 = extractvalue { float, float, float, float } %1348, 0, !dbg !47
  %1350 = extractvalue { float, float, float, float } %1348, 1, !dbg !47
  %1351 = extractvalue { float, float, float, float } %1348, 2, !dbg !47
  %1352 = extractvalue { float, float, float, float } %1348, 3, !dbg !47
  %1353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1314, float %1315, float %1316, float %1317, i32 %1169, i32 %1170, i32 %1171, i32 %1172, i32 %1181, i32 %1182) #2, !dbg !47
  %1354 = extractvalue { float, float, float, float } %1353, 0, !dbg !47
  %1355 = extractvalue { float, float, float, float } %1353, 1, !dbg !47
  %1356 = extractvalue { float, float, float, float } %1353, 2, !dbg !47
  %1357 = extractvalue { float, float, float, float } %1353, 3, !dbg !47
  %1358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1319, float %1320, float %1321, float %1322, i32 %1169, i32 %1170, i32 %1171, i32 %1172, i32 %1191, i32 %1192) #2, !dbg !47
  %1359 = extractvalue { float, float, float, float } %1358, 0, !dbg !47
  %1360 = extractvalue { float, float, float, float } %1358, 1, !dbg !47
  %1361 = extractvalue { float, float, float, float } %1358, 2, !dbg !47
  %1362 = extractvalue { float, float, float, float } %1358, 3, !dbg !47
  %1363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1324, float %1325, float %1326, float %1327, i32 %1169, i32 %1170, i32 %1171, i32 %1172, i32 %1201, i32 %1202) #2, !dbg !47
  %1364 = extractvalue { float, float, float, float } %1363, 0, !dbg !47
  %1365 = extractvalue { float, float, float, float } %1363, 1, !dbg !47
  %1366 = extractvalue { float, float, float, float } %1363, 2, !dbg !47
  %1367 = extractvalue { float, float, float, float } %1363, 3, !dbg !47
  %1368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1329, float %1330, float %1331, float %1332, i32 %1169, i32 %1170, i32 %1171, i32 %1172, i32 %1211, i32 %1212) #2, !dbg !47
  %1369 = extractvalue { float, float, float, float } %1368, 0, !dbg !47
  %1370 = extractvalue { float, float, float, float } %1368, 1, !dbg !47
  %1371 = extractvalue { float, float, float, float } %1368, 2, !dbg !47
  %1372 = extractvalue { float, float, float, float } %1368, 3, !dbg !47
  %1373 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %858, !dbg !37
  %1374 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1373, i32 %436, !dbg !48
  %1375 = ptrtoint ptr addrspace(3) %1374 to i32, !dbg !48
  %1376 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1375) #2, !dbg !48
  %1377 = extractvalue { i32, i32, i32, i32 } %1376, 0, !dbg !48
  %1378 = bitcast i32 %1377 to <2 x bfloat>, !dbg !48
  %1379 = extractvalue { i32, i32, i32, i32 } %1376, 1, !dbg !48
  %1380 = bitcast i32 %1379 to <2 x bfloat>, !dbg !48
  %1381 = extractvalue { i32, i32, i32, i32 } %1376, 2, !dbg !48
  %1382 = bitcast i32 %1381 to <2 x bfloat>, !dbg !48
  %1383 = extractvalue { i32, i32, i32, i32 } %1376, 3, !dbg !48
  %1384 = bitcast i32 %1383 to <2 x bfloat>, !dbg !48
  %1385 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1373, i32 %439, !dbg !48
  %1386 = ptrtoint ptr addrspace(3) %1385 to i32, !dbg !48
  %1387 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1386) #2, !dbg !48
  %1388 = extractvalue { i32, i32, i32, i32 } %1387, 0, !dbg !48
  %1389 = bitcast i32 %1388 to <2 x bfloat>, !dbg !48
  %1390 = extractvalue { i32, i32, i32, i32 } %1387, 1, !dbg !48
  %1391 = bitcast i32 %1390 to <2 x bfloat>, !dbg !48
  %1392 = extractvalue { i32, i32, i32, i32 } %1387, 2, !dbg !48
  %1393 = bitcast i32 %1392 to <2 x bfloat>, !dbg !48
  %1394 = extractvalue { i32, i32, i32, i32 } %1387, 3, !dbg !48
  %1395 = bitcast i32 %1394 to <2 x bfloat>, !dbg !48
  %1396 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1373, i32 %442, !dbg !48
  %1397 = ptrtoint ptr addrspace(3) %1396 to i32, !dbg !48
  %1398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1397) #2, !dbg !48
  %1399 = extractvalue { i32, i32, i32, i32 } %1398, 0, !dbg !48
  %1400 = bitcast i32 %1399 to <2 x bfloat>, !dbg !48
  %1401 = extractvalue { i32, i32, i32, i32 } %1398, 1, !dbg !48
  %1402 = bitcast i32 %1401 to <2 x bfloat>, !dbg !48
  %1403 = extractvalue { i32, i32, i32, i32 } %1398, 2, !dbg !48
  %1404 = bitcast i32 %1403 to <2 x bfloat>, !dbg !48
  %1405 = extractvalue { i32, i32, i32, i32 } %1398, 3, !dbg !48
  %1406 = bitcast i32 %1405 to <2 x bfloat>, !dbg !48
  %1407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1373, i32 %445, !dbg !48
  %1408 = ptrtoint ptr addrspace(3) %1407 to i32, !dbg !48
  %1409 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1408) #2, !dbg !48
  %1410 = extractvalue { i32, i32, i32, i32 } %1409, 0, !dbg !48
  %1411 = bitcast i32 %1410 to <2 x bfloat>, !dbg !48
  %1412 = extractvalue { i32, i32, i32, i32 } %1409, 1, !dbg !48
  %1413 = bitcast i32 %1412 to <2 x bfloat>, !dbg !48
  %1414 = extractvalue { i32, i32, i32, i32 } %1409, 2, !dbg !48
  %1415 = bitcast i32 %1414 to <2 x bfloat>, !dbg !48
  %1416 = extractvalue { i32, i32, i32, i32 } %1409, 3, !dbg !48
  %1417 = bitcast i32 %1416 to <2 x bfloat>, !dbg !48
  %1418 = fpext <2 x bfloat> %1378 to <2 x float>, !dbg !48
  %1419 = insertelement <2 x float> poison, float %1334, i64 0, !dbg !48
  %1420 = insertelement <2 x float> %1419, float %1335, i64 1, !dbg !48
  %1421 = fsub <2 x float> %1418, %1420, !dbg !48
  %1422 = fptrunc <2 x float> %1421 to <2 x bfloat>, !dbg !49
  %1423 = fpext <2 x bfloat> %1380 to <2 x float>, !dbg !48
  %1424 = insertelement <2 x float> poison, float %1336, i64 0, !dbg !48
  %1425 = insertelement <2 x float> %1424, float %1337, i64 1, !dbg !48
  %1426 = fsub <2 x float> %1423, %1425, !dbg !48
  %1427 = fptrunc <2 x float> %1426 to <2 x bfloat>, !dbg !49
  %1428 = fpext <2 x bfloat> %1382 to <2 x float>, !dbg !48
  %1429 = insertelement <2 x float> poison, float %1339, i64 0, !dbg !48
  %1430 = insertelement <2 x float> %1429, float %1340, i64 1, !dbg !48
  %1431 = fsub <2 x float> %1428, %1430, !dbg !48
  %1432 = fptrunc <2 x float> %1431 to <2 x bfloat>, !dbg !49
  %1433 = fpext <2 x bfloat> %1384 to <2 x float>, !dbg !48
  %1434 = insertelement <2 x float> poison, float %1341, i64 0, !dbg !48
  %1435 = insertelement <2 x float> %1434, float %1342, i64 1, !dbg !48
  %1436 = fsub <2 x float> %1433, %1435, !dbg !48
  %1437 = fptrunc <2 x float> %1436 to <2 x bfloat>, !dbg !49
  %1438 = fpext <2 x bfloat> %1389 to <2 x float>, !dbg !48
  %1439 = insertelement <2 x float> poison, float %1344, i64 0, !dbg !48
  %1440 = insertelement <2 x float> %1439, float %1345, i64 1, !dbg !48
  %1441 = fsub <2 x float> %1438, %1440, !dbg !48
  %1442 = fptrunc <2 x float> %1441 to <2 x bfloat>, !dbg !49
  %1443 = fpext <2 x bfloat> %1391 to <2 x float>, !dbg !48
  %1444 = insertelement <2 x float> poison, float %1346, i64 0, !dbg !48
  %1445 = insertelement <2 x float> %1444, float %1347, i64 1, !dbg !48
  %1446 = fsub <2 x float> %1443, %1445, !dbg !48
  %1447 = fptrunc <2 x float> %1446 to <2 x bfloat>, !dbg !49
  %1448 = fpext <2 x bfloat> %1393 to <2 x float>, !dbg !48
  %1449 = insertelement <2 x float> poison, float %1349, i64 0, !dbg !48
  %1450 = insertelement <2 x float> %1449, float %1350, i64 1, !dbg !48
  %1451 = fsub <2 x float> %1448, %1450, !dbg !48
  %1452 = fptrunc <2 x float> %1451 to <2 x bfloat>, !dbg !49
  %1453 = fpext <2 x bfloat> %1395 to <2 x float>, !dbg !48
  %1454 = insertelement <2 x float> poison, float %1351, i64 0, !dbg !48
  %1455 = insertelement <2 x float> %1454, float %1352, i64 1, !dbg !48
  %1456 = fsub <2 x float> %1453, %1455, !dbg !48
  %1457 = fptrunc <2 x float> %1456 to <2 x bfloat>, !dbg !49
  %1458 = fpext <2 x bfloat> %1400 to <2 x float>, !dbg !48
  %1459 = insertelement <2 x float> poison, float %1354, i64 0, !dbg !48
  %1460 = insertelement <2 x float> %1459, float %1355, i64 1, !dbg !48
  %1461 = fsub <2 x float> %1458, %1460, !dbg !48
  %1462 = fptrunc <2 x float> %1461 to <2 x bfloat>, !dbg !49
  %1463 = fpext <2 x bfloat> %1402 to <2 x float>, !dbg !48
  %1464 = insertelement <2 x float> poison, float %1356, i64 0, !dbg !48
  %1465 = insertelement <2 x float> %1464, float %1357, i64 1, !dbg !48
  %1466 = fsub <2 x float> %1463, %1465, !dbg !48
  %1467 = fptrunc <2 x float> %1466 to <2 x bfloat>, !dbg !49
  %1468 = fpext <2 x bfloat> %1404 to <2 x float>, !dbg !48
  %1469 = insertelement <2 x float> poison, float %1359, i64 0, !dbg !48
  %1470 = insertelement <2 x float> %1469, float %1360, i64 1, !dbg !48
  %1471 = fsub <2 x float> %1468, %1470, !dbg !48
  %1472 = fptrunc <2 x float> %1471 to <2 x bfloat>, !dbg !49
  %1473 = fpext <2 x bfloat> %1406 to <2 x float>, !dbg !48
  %1474 = insertelement <2 x float> poison, float %1361, i64 0, !dbg !48
  %1475 = insertelement <2 x float> %1474, float %1362, i64 1, !dbg !48
  %1476 = fsub <2 x float> %1473, %1475, !dbg !48
  %1477 = fptrunc <2 x float> %1476 to <2 x bfloat>, !dbg !49
  %1478 = fpext <2 x bfloat> %1411 to <2 x float>, !dbg !48
  %1479 = insertelement <2 x float> poison, float %1364, i64 0, !dbg !48
  %1480 = insertelement <2 x float> %1479, float %1365, i64 1, !dbg !48
  %1481 = fsub <2 x float> %1478, %1480, !dbg !48
  %1482 = fptrunc <2 x float> %1481 to <2 x bfloat>, !dbg !49
  %1483 = fpext <2 x bfloat> %1413 to <2 x float>, !dbg !48
  %1484 = insertelement <2 x float> poison, float %1366, i64 0, !dbg !48
  %1485 = insertelement <2 x float> %1484, float %1367, i64 1, !dbg !48
  %1486 = fsub <2 x float> %1483, %1485, !dbg !48
  %1487 = fptrunc <2 x float> %1486 to <2 x bfloat>, !dbg !49
  %1488 = fpext <2 x bfloat> %1415 to <2 x float>, !dbg !48
  %1489 = insertelement <2 x float> poison, float %1369, i64 0, !dbg !48
  %1490 = insertelement <2 x float> %1489, float %1370, i64 1, !dbg !48
  %1491 = fsub <2 x float> %1488, %1490, !dbg !48
  %1492 = fptrunc <2 x float> %1491 to <2 x bfloat>, !dbg !49
  %1493 = fpext <2 x bfloat> %1417 to <2 x float>, !dbg !48
  %1494 = insertelement <2 x float> poison, float %1371, i64 0, !dbg !48
  %1495 = insertelement <2 x float> %1494, float %1372, i64 1, !dbg !48
  %1496 = fsub <2 x float> %1493, %1495, !dbg !48
  %1497 = fptrunc <2 x float> %1496 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1422, ptr addrspace(3) %576, align 4, !dbg !49
  store <2 x bfloat> %1427, ptr addrspace(3) %577, align 4, !dbg !49
  store <2 x bfloat> %1432, ptr addrspace(3) %578, align 4, !dbg !49
  store <2 x bfloat> %1437, ptr addrspace(3) %579, align 4, !dbg !49
  store <2 x bfloat> %1442, ptr addrspace(3) %580, align 4, !dbg !49
  store <2 x bfloat> %1447, ptr addrspace(3) %581, align 4, !dbg !49
  store <2 x bfloat> %1452, ptr addrspace(3) %582, align 4, !dbg !49
  store <2 x bfloat> %1457, ptr addrspace(3) %583, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1498 = load <4 x i32>, ptr addrspace(3) %584, align 16, !dbg !49
  %1499 = load <4 x i32>, ptr addrspace(3) %585, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %1462, ptr addrspace(3) %576, align 4, !dbg !49
  store <2 x bfloat> %1467, ptr addrspace(3) %577, align 4, !dbg !49
  store <2 x bfloat> %1472, ptr addrspace(3) %578, align 4, !dbg !49
  store <2 x bfloat> %1477, ptr addrspace(3) %579, align 4, !dbg !49
  store <2 x bfloat> %1482, ptr addrspace(3) %580, align 4, !dbg !49
  store <2 x bfloat> %1487, ptr addrspace(3) %581, align 4, !dbg !49
  store <2 x bfloat> %1492, ptr addrspace(3) %582, align 4, !dbg !49
  store <2 x bfloat> %1497, ptr addrspace(3) %583, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %1500 = load <4 x i32>, ptr addrspace(3) %584, align 16, !dbg !49
  %1501 = load <4 x i32>, ptr addrspace(3) %585, align 16, !dbg !49
  %1502 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn68.pn611, !dbg !50
  %1503 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn52.pn612, !dbg !50
  %1504 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn36.pn613, !dbg !50
  %1505 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn20.pn614, !dbg !50
  %.extract575 = extractelement <4 x i32> %1498, i64 0, !dbg !50
  %.extract577 = extractelement <4 x i32> %1498, i64 1, !dbg !50
  %.extract579 = extractelement <4 x i32> %1498, i64 2, !dbg !50
  %.extract581 = extractelement <4 x i32> %1498, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract575, i32 %.extract577, i32 %.extract579, i32 %.extract581, ptr addrspace(1) %1502, i1 %.pn169.pn619) #2, !dbg !50
  %.extract583 = extractelement <4 x i32> %1499, i64 0, !dbg !50
  %.extract585 = extractelement <4 x i32> %1499, i64 1, !dbg !50
  %.extract587 = extractelement <4 x i32> %1499, i64 2, !dbg !50
  %.extract589 = extractelement <4 x i32> %1499, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract583, i32 %.extract585, i32 %.extract587, i32 %.extract589, ptr addrspace(1) %1503, i1 %.pn153.pn620) #2, !dbg !50
  %.extract591 = extractelement <4 x i32> %1500, i64 0, !dbg !50
  %.extract593 = extractelement <4 x i32> %1500, i64 1, !dbg !50
  %.extract595 = extractelement <4 x i32> %1500, i64 2, !dbg !50
  %.extract597 = extractelement <4 x i32> %1500, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract591, i32 %.extract593, i32 %.extract595, i32 %.extract597, ptr addrspace(1) %1504, i1 %.pn137.pn621) #2, !dbg !50
  %.extract599 = extractelement <4 x i32> %1501, i64 0, !dbg !50
  %.extract601 = extractelement <4 x i32> %1501, i64 1, !dbg !50
  %.extract603 = extractelement <4 x i32> %1501, i64 2, !dbg !50
  %.extract605 = extractelement <4 x i32> %1501, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract599, i32 %.extract601, i32 %.extract603, i32 %.extract605, ptr addrspace(1) %1505, i1 %.pn121.pn622) #2, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !51
  %indvars.iv.next.tr = trunc i64 %indvars.iv.next to i32, !dbg !52
  %1506 = shl i32 %indvars.iv.next.tr, 6, !dbg !52
  %1507 = tail call i32 @llvm.smin.i32(i32 %1506, i32 %7), !dbg !52
  %1508 = add nuw nsw i32 %599, %59, !dbg !53
  %1509 = add nuw nsw i32 %60, %599, !dbg !53
  %1510 = add nuw nsw i32 %61, %599, !dbg !53
  %1511 = add nuw nsw i32 %62, %599, !dbg !53
  %1512 = icmp slt i32 %1508, %7, !dbg !54
  %1513 = icmp slt i32 %1509, %7, !dbg !54
  %1514 = icmp slt i32 %1510, %7, !dbg !54
  %1515 = icmp slt i32 %1511, %7, !dbg !54
  %1516 = shl i32 %1507, 5, !dbg !55
  %1517 = add i32 %1516, -32, !dbg !55
  %1518 = sext i32 %1517 to i64, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %92, i64 %1518, !dbg !57
  %1519 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !58
  %1520 = bitcast i32 %1519 to float, !dbg !58
  %.idx505 = shl i32 %669, 8, !dbg !38
  %1521 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 84480), i32 %.idx505, !dbg !38
  %1522 = getelementptr inbounds nuw float, ptr addrspace(3) %1521, i32 %59, !dbg !38
  %1523 = load float, ptr addrspace(3) %1522, align 4, !dbg !38
  %1524 = getelementptr inbounds nuw i8, ptr addrspace(3) %1521, i32 %34, !dbg !38
  %1525 = getelementptr inbounds nuw i8, ptr addrspace(3) %1524, i32 %35, !dbg !38
  %1526 = getelementptr inbounds nuw i8, ptr addrspace(3) %1525, i32 %36, !dbg !38
  %1527 = getelementptr inbounds nuw float, ptr addrspace(3) %1526, i32 %58, !dbg !38
  %1528 = getelementptr inbounds nuw i8, ptr addrspace(3) %1527, i32 32, !dbg !38
  %1529 = load float, ptr addrspace(3) %1528, align 4, !dbg !38
  %1530 = getelementptr inbounds nuw float, ptr addrspace(3) %1521, i32 %215, !dbg !38
  %1531 = getelementptr inbounds nuw float, ptr addrspace(3) %1530, i32 %58, !dbg !38
  %1532 = load float, ptr addrspace(3) %1531, align 4, !dbg !38
  %1533 = getelementptr inbounds nuw i8, ptr addrspace(3) %1527, i32 160, !dbg !38
  %1534 = load float, ptr addrspace(3) %1533, align 4, !dbg !38
  %1535 = fsub float %1520, %1523, !dbg !59
  %1536 = fsub float %1520, %1529, !dbg !59
  %1537 = fsub float %1520, %1532, !dbg !59
  %1538 = fsub float %1520, %1534, !dbg !59
  %1539 = fmul float %1535, 0x3FF7154760000000, !dbg !60
  %1540 = tail call float @llvm.nvvm.ex2.approx.f(float %1539), !dbg !60
  %1541 = fmul float %1536, 0x3FF7154760000000, !dbg !60
  %1542 = tail call float @llvm.nvvm.ex2.approx.f(float %1541), !dbg !60
  %1543 = fmul float %1537, 0x3FF7154760000000, !dbg !60
  %1544 = tail call float @llvm.nvvm.ex2.approx.f(float %1543), !dbg !60
  %1545 = fmul float %1538, 0x3FF7154760000000, !dbg !60
  %1546 = tail call float @llvm.nvvm.ex2.approx.f(float %1545), !dbg !60
  %1547 = select i1 %1512, float %1540, float 0.000000e+00, !dbg !61
  %1548 = select i1 %1513, float %1542, float 0.000000e+00, !dbg !61
  %1549 = select i1 %1514, float %1544, float 0.000000e+00, !dbg !61
  %1550 = select i1 %1515, float %1546, float 0.000000e+00, !dbg !61
  %1551 = extractelement <2 x float> %1421, i64 0, !dbg !62
  %1552 = fmul float %1551, %1547, !dbg !62
  %1553 = extractelement <2 x float> %1421, i64 1, !dbg !62
  %1554 = fmul float %1553, %1547, !dbg !62
  %1555 = extractelement <2 x float> %1426, i64 0, !dbg !62
  %1556 = fmul float %1555, %1548, !dbg !62
  %1557 = extractelement <2 x float> %1426, i64 1, !dbg !62
  %1558 = fmul float %1557, %1548, !dbg !62
  %1559 = extractelement <2 x float> %1431, i64 0, !dbg !62
  %1560 = fmul float %1559, %1547, !dbg !62
  %1561 = extractelement <2 x float> %1431, i64 1, !dbg !62
  %1562 = fmul float %1561, %1547, !dbg !62
  %1563 = extractelement <2 x float> %1436, i64 0, !dbg !62
  %1564 = fmul float %1563, %1548, !dbg !62
  %1565 = extractelement <2 x float> %1436, i64 1, !dbg !62
  %1566 = fmul float %1565, %1548, !dbg !62
  %1567 = extractelement <2 x float> %1441, i64 0, !dbg !62
  %1568 = fmul float %1567, %1547, !dbg !62
  %1569 = extractelement <2 x float> %1441, i64 1, !dbg !62
  %1570 = fmul float %1569, %1547, !dbg !62
  %1571 = extractelement <2 x float> %1446, i64 0, !dbg !62
  %1572 = fmul float %1571, %1548, !dbg !62
  %1573 = extractelement <2 x float> %1446, i64 1, !dbg !62
  %1574 = fmul float %1573, %1548, !dbg !62
  %1575 = extractelement <2 x float> %1451, i64 0, !dbg !62
  %1576 = fmul float %1575, %1547, !dbg !62
  %1577 = extractelement <2 x float> %1451, i64 1, !dbg !62
  %1578 = fmul float %1577, %1547, !dbg !62
  %1579 = extractelement <2 x float> %1456, i64 0, !dbg !62
  %1580 = fmul float %1579, %1548, !dbg !62
  %1581 = extractelement <2 x float> %1456, i64 1, !dbg !62
  %1582 = fmul float %1581, %1548, !dbg !62
  %1583 = extractelement <2 x float> %1461, i64 0, !dbg !62
  %1584 = fmul float %1583, %1549, !dbg !62
  %1585 = extractelement <2 x float> %1461, i64 1, !dbg !62
  %1586 = fmul float %1585, %1549, !dbg !62
  %1587 = extractelement <2 x float> %1466, i64 0, !dbg !62
  %1588 = fmul float %1587, %1550, !dbg !62
  %1589 = extractelement <2 x float> %1466, i64 1, !dbg !62
  %1590 = fmul float %1589, %1550, !dbg !62
  %1591 = extractelement <2 x float> %1471, i64 0, !dbg !62
  %1592 = fmul float %1591, %1549, !dbg !62
  %1593 = extractelement <2 x float> %1471, i64 1, !dbg !62
  %1594 = fmul float %1593, %1549, !dbg !62
  %1595 = extractelement <2 x float> %1476, i64 0, !dbg !62
  %1596 = fmul float %1595, %1550, !dbg !62
  %1597 = extractelement <2 x float> %1476, i64 1, !dbg !62
  %1598 = fmul float %1597, %1550, !dbg !62
  %1599 = extractelement <2 x float> %1481, i64 0, !dbg !62
  %1600 = fmul float %1599, %1549, !dbg !62
  %1601 = extractelement <2 x float> %1481, i64 1, !dbg !62
  %1602 = fmul float %1601, %1549, !dbg !62
  %1603 = extractelement <2 x float> %1486, i64 0, !dbg !62
  %1604 = fmul float %1603, %1550, !dbg !62
  %1605 = extractelement <2 x float> %1486, i64 1, !dbg !62
  %1606 = fmul float %1605, %1550, !dbg !62
  %1607 = extractelement <2 x float> %1491, i64 0, !dbg !62
  %1608 = fmul float %1607, %1549, !dbg !62
  %1609 = extractelement <2 x float> %1491, i64 1, !dbg !62
  %1610 = fmul float %1609, %1549, !dbg !62
  %1611 = extractelement <2 x float> %1496, i64 0, !dbg !62
  %1612 = fmul float %1611, %1550, !dbg !62
  %1613 = extractelement <2 x float> %1496, i64 1, !dbg !62
  %1614 = fmul float %1613, %1550, !dbg !62
  %1615 = fmul float %1520, 0x3FF7154760000000, !dbg !63
  %1616 = tail call float @llvm.nvvm.ex2.approx.f(float %1615), !dbg !63
  %1617 = fmul float %634, %1616, !dbg !64
  %1618 = fmul float %635, %1616, !dbg !64
  %1619 = fmul float %636, %1616, !dbg !64
  %1620 = fmul float %637, %1616, !dbg !64
  %1621 = fmul float %638, %1616, !dbg !64
  %1622 = fmul float %639, %1616, !dbg !64
  %1623 = fmul float %640, %1616, !dbg !64
  %1624 = fmul float %641, %1616, !dbg !64
  %1625 = fmul float %642, %1616, !dbg !64
  %1626 = fmul float %643, %1616, !dbg !64
  %1627 = fmul float %644, %1616, !dbg !64
  %1628 = fmul float %645, %1616, !dbg !64
  %1629 = fmul float %646, %1616, !dbg !64
  %1630 = fmul float %647, %1616, !dbg !64
  %1631 = fmul float %648, %1616, !dbg !64
  %1632 = fmul float %649, %1616, !dbg !64
  %1633 = fmul float %650, %1616, !dbg !64
  %1634 = fmul float %651, %1616, !dbg !64
  %1635 = fmul float %652, %1616, !dbg !64
  %1636 = fmul float %653, %1616, !dbg !64
  %1637 = fmul float %654, %1616, !dbg !64
  %1638 = fmul float %655, %1616, !dbg !64
  %1639 = fmul float %656, %1616, !dbg !64
  %1640 = fmul float %657, %1616, !dbg !64
  %1641 = fmul float %658, %1616, !dbg !64
  %1642 = fmul float %659, %1616, !dbg !64
  %1643 = fmul float %660, %1616, !dbg !64
  %1644 = fmul float %661, %1616, !dbg !64
  %1645 = fmul float %662, %1616, !dbg !64
  %1646 = fmul float %663, %1616, !dbg !64
  %1647 = fmul float %664, %1616, !dbg !64
  %1648 = fmul float %665, %1616, !dbg !64
  %1649 = fmul float %602, %1616, !dbg !65
  %1650 = fmul float %603, %1616, !dbg !65
  %1651 = fmul float %604, %1616, !dbg !65
  %1652 = fmul float %605, %1616, !dbg !65
  %1653 = fmul float %606, %1616, !dbg !65
  %1654 = fmul float %607, %1616, !dbg !65
  %1655 = fmul float %608, %1616, !dbg !65
  %1656 = fmul float %609, %1616, !dbg !65
  %1657 = fmul float %610, %1616, !dbg !65
  %1658 = fmul float %611, %1616, !dbg !65
  %1659 = fmul float %612, %1616, !dbg !65
  %1660 = fmul float %613, %1616, !dbg !65
  %1661 = fmul float %614, %1616, !dbg !65
  %1662 = fmul float %615, %1616, !dbg !65
  %1663 = fmul float %616, %1616, !dbg !65
  %1664 = fmul float %617, %1616, !dbg !65
  %1665 = fmul float %618, %1616, !dbg !65
  %1666 = fmul float %619, %1616, !dbg !65
  %1667 = fmul float %620, %1616, !dbg !65
  %1668 = fmul float %621, %1616, !dbg !65
  %1669 = fmul float %622, %1616, !dbg !65
  %1670 = fmul float %623, %1616, !dbg !65
  %1671 = fmul float %624, %1616, !dbg !65
  %1672 = fmul float %625, %1616, !dbg !65
  %1673 = fmul float %626, %1616, !dbg !65
  %1674 = fmul float %627, %1616, !dbg !65
  %1675 = fmul float %628, %1616, !dbg !65
  %1676 = fmul float %629, %1616, !dbg !65
  %1677 = fmul float %630, %1616, !dbg !65
  %1678 = fmul float %631, %1616, !dbg !65
  %1679 = fmul float %632, %1616, !dbg !65
  %1680 = fmul float %633, %1616, !dbg !65
  %1681 = fptrunc float %1552 to bfloat, !dbg !66
  %1682 = fptrunc float %1554 to bfloat, !dbg !66
  %1683 = fptrunc float %1556 to bfloat, !dbg !66
  %1684 = fptrunc float %1558 to bfloat, !dbg !66
  %1685 = fptrunc float %1560 to bfloat, !dbg !66
  %1686 = fptrunc float %1562 to bfloat, !dbg !66
  %1687 = fptrunc float %1564 to bfloat, !dbg !66
  %1688 = fptrunc float %1566 to bfloat, !dbg !66
  %1689 = fptrunc float %1568 to bfloat, !dbg !66
  %1690 = fptrunc float %1570 to bfloat, !dbg !66
  %1691 = fptrunc float %1572 to bfloat, !dbg !66
  %1692 = fptrunc float %1574 to bfloat, !dbg !66
  %1693 = fptrunc float %1576 to bfloat, !dbg !66
  %1694 = fptrunc float %1578 to bfloat, !dbg !66
  %1695 = fptrunc float %1580 to bfloat, !dbg !66
  %1696 = fptrunc float %1582 to bfloat, !dbg !66
  %1697 = fptrunc float %1584 to bfloat, !dbg !66
  %1698 = fptrunc float %1586 to bfloat, !dbg !66
  %1699 = fptrunc float %1588 to bfloat, !dbg !66
  %1700 = fptrunc float %1590 to bfloat, !dbg !66
  %1701 = fptrunc float %1592 to bfloat, !dbg !66
  %1702 = fptrunc float %1594 to bfloat, !dbg !66
  %1703 = fptrunc float %1596 to bfloat, !dbg !66
  %1704 = fptrunc float %1598 to bfloat, !dbg !66
  %1705 = fptrunc float %1600 to bfloat, !dbg !66
  %1706 = fptrunc float %1602 to bfloat, !dbg !66
  %1707 = fptrunc float %1604 to bfloat, !dbg !66
  %1708 = fptrunc float %1606 to bfloat, !dbg !66
  %1709 = fptrunc float %1608 to bfloat, !dbg !66
  %1710 = fptrunc float %1610 to bfloat, !dbg !66
  %1711 = fptrunc float %1612 to bfloat, !dbg !66
  %1712 = fptrunc float %1614 to bfloat, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %1713 = insertelement <2 x bfloat> poison, bfloat %1681, i64 0, !dbg !66
  %1714 = insertelement <2 x bfloat> %1713, bfloat %1682, i64 1, !dbg !66
  %1715 = bitcast <2 x bfloat> %1714 to i32, !dbg !66
  %1716 = insertelement <2 x bfloat> poison, bfloat %1683, i64 0, !dbg !66
  %1717 = insertelement <2 x bfloat> %1716, bfloat %1684, i64 1, !dbg !66
  %1718 = bitcast <2 x bfloat> %1717 to i32, !dbg !66
  %1719 = insertelement <2 x bfloat> poison, bfloat %1685, i64 0, !dbg !66
  %1720 = insertelement <2 x bfloat> %1719, bfloat %1686, i64 1, !dbg !66
  %1721 = bitcast <2 x bfloat> %1720 to i32, !dbg !66
  %1722 = insertelement <2 x bfloat> poison, bfloat %1687, i64 0, !dbg !66
  %1723 = insertelement <2 x bfloat> %1722, bfloat %1688, i64 1, !dbg !66
  %1724 = bitcast <2 x bfloat> %1723 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %438, i32 %1715, i32 %1718, i32 %1721, i32 %1724) #2, !dbg !66
  %1725 = insertelement <2 x bfloat> poison, bfloat %1689, i64 0, !dbg !66
  %1726 = insertelement <2 x bfloat> %1725, bfloat %1690, i64 1, !dbg !66
  %1727 = bitcast <2 x bfloat> %1726 to i32, !dbg !66
  %1728 = insertelement <2 x bfloat> poison, bfloat %1691, i64 0, !dbg !66
  %1729 = insertelement <2 x bfloat> %1728, bfloat %1692, i64 1, !dbg !66
  %1730 = bitcast <2 x bfloat> %1729 to i32, !dbg !66
  %1731 = insertelement <2 x bfloat> poison, bfloat %1693, i64 0, !dbg !66
  %1732 = insertelement <2 x bfloat> %1731, bfloat %1694, i64 1, !dbg !66
  %1733 = bitcast <2 x bfloat> %1732 to i32, !dbg !66
  %1734 = insertelement <2 x bfloat> poison, bfloat %1695, i64 0, !dbg !66
  %1735 = insertelement <2 x bfloat> %1734, bfloat %1696, i64 1, !dbg !66
  %1736 = bitcast <2 x bfloat> %1735 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %441, i32 %1727, i32 %1730, i32 %1733, i32 %1736) #2, !dbg !66
  %1737 = insertelement <2 x bfloat> poison, bfloat %1697, i64 0, !dbg !66
  %1738 = insertelement <2 x bfloat> %1737, bfloat %1698, i64 1, !dbg !66
  %1739 = bitcast <2 x bfloat> %1738 to i32, !dbg !66
  %1740 = insertelement <2 x bfloat> poison, bfloat %1699, i64 0, !dbg !66
  %1741 = insertelement <2 x bfloat> %1740, bfloat %1700, i64 1, !dbg !66
  %1742 = bitcast <2 x bfloat> %1741 to i32, !dbg !66
  %1743 = insertelement <2 x bfloat> poison, bfloat %1701, i64 0, !dbg !66
  %1744 = insertelement <2 x bfloat> %1743, bfloat %1702, i64 1, !dbg !66
  %1745 = bitcast <2 x bfloat> %1744 to i32, !dbg !66
  %1746 = insertelement <2 x bfloat> poison, bfloat %1703, i64 0, !dbg !66
  %1747 = insertelement <2 x bfloat> %1746, bfloat %1704, i64 1, !dbg !66
  %1748 = bitcast <2 x bfloat> %1747 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %444, i32 %1739, i32 %1742, i32 %1745, i32 %1748) #2, !dbg !66
  %1749 = insertelement <2 x bfloat> poison, bfloat %1705, i64 0, !dbg !66
  %1750 = insertelement <2 x bfloat> %1749, bfloat %1706, i64 1, !dbg !66
  %1751 = bitcast <2 x bfloat> %1750 to i32, !dbg !66
  %1752 = insertelement <2 x bfloat> poison, bfloat %1707, i64 0, !dbg !66
  %1753 = insertelement <2 x bfloat> %1752, bfloat %1708, i64 1, !dbg !66
  %1754 = bitcast <2 x bfloat> %1753 to i32, !dbg !66
  %1755 = insertelement <2 x bfloat> poison, bfloat %1709, i64 0, !dbg !66
  %1756 = insertelement <2 x bfloat> %1755, bfloat %1710, i64 1, !dbg !66
  %1757 = bitcast <2 x bfloat> %1756 to i32, !dbg !66
  %1758 = insertelement <2 x bfloat> poison, bfloat %1711, i64 0, !dbg !66
  %1759 = insertelement <2 x bfloat> %1758, bfloat %1712, i64 1, !dbg !66
  %1760 = bitcast <2 x bfloat> %1759 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %447, i32 %1751, i32 %1754, i32 %1757, i32 %1760) #2, !dbg !66
  %1761 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %858, !dbg !39
  %1762 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %588, !dbg !39
  %1763 = ptrtoint ptr addrspace(3) %1762 to i32, !dbg !39
  %1764 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1763) #2, !dbg !39
  %1765 = extractvalue { i32, i32, i32, i32 } %1764, 0, !dbg !39
  %1766 = extractvalue { i32, i32, i32, i32 } %1764, 1, !dbg !39
  %1767 = extractvalue { i32, i32, i32, i32 } %1764, 2, !dbg !39
  %1768 = extractvalue { i32, i32, i32, i32 } %1764, 3, !dbg !39
  %1769 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %589, !dbg !39
  %1770 = ptrtoint ptr addrspace(3) %1769 to i32, !dbg !39
  %1771 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1770) #2, !dbg !39
  %1772 = extractvalue { i32, i32, i32, i32 } %1771, 0, !dbg !39
  %1773 = extractvalue { i32, i32, i32, i32 } %1771, 1, !dbg !39
  %1774 = extractvalue { i32, i32, i32, i32 } %1771, 2, !dbg !39
  %1775 = extractvalue { i32, i32, i32, i32 } %1771, 3, !dbg !39
  %1776 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %590, !dbg !39
  %1777 = ptrtoint ptr addrspace(3) %1776 to i32, !dbg !39
  %1778 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1777) #2, !dbg !39
  %1779 = extractvalue { i32, i32, i32, i32 } %1778, 0, !dbg !39
  %1780 = extractvalue { i32, i32, i32, i32 } %1778, 1, !dbg !39
  %1781 = extractvalue { i32, i32, i32, i32 } %1778, 2, !dbg !39
  %1782 = extractvalue { i32, i32, i32, i32 } %1778, 3, !dbg !39
  %1783 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %591, !dbg !39
  %1784 = ptrtoint ptr addrspace(3) %1783 to i32, !dbg !39
  %1785 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1784) #2, !dbg !39
  %1786 = extractvalue { i32, i32, i32, i32 } %1785, 0, !dbg !39
  %1787 = extractvalue { i32, i32, i32, i32 } %1785, 1, !dbg !39
  %1788 = extractvalue { i32, i32, i32, i32 } %1785, 2, !dbg !39
  %1789 = extractvalue { i32, i32, i32, i32 } %1785, 3, !dbg !39
  %1790 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %592, !dbg !39
  %1791 = ptrtoint ptr addrspace(3) %1790 to i32, !dbg !39
  %1792 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1791) #2, !dbg !39
  %1793 = extractvalue { i32, i32, i32, i32 } %1792, 0, !dbg !39
  %1794 = extractvalue { i32, i32, i32, i32 } %1792, 1, !dbg !39
  %1795 = extractvalue { i32, i32, i32, i32 } %1792, 2, !dbg !39
  %1796 = extractvalue { i32, i32, i32, i32 } %1792, 3, !dbg !39
  %1797 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %593, !dbg !39
  %1798 = ptrtoint ptr addrspace(3) %1797 to i32, !dbg !39
  %1799 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1798) #2, !dbg !39
  %1800 = extractvalue { i32, i32, i32, i32 } %1799, 0, !dbg !39
  %1801 = extractvalue { i32, i32, i32, i32 } %1799, 1, !dbg !39
  %1802 = extractvalue { i32, i32, i32, i32 } %1799, 2, !dbg !39
  %1803 = extractvalue { i32, i32, i32, i32 } %1799, 3, !dbg !39
  %1804 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %594, !dbg !39
  %1805 = ptrtoint ptr addrspace(3) %1804 to i32, !dbg !39
  %1806 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1805) #2, !dbg !39
  %1807 = extractvalue { i32, i32, i32, i32 } %1806, 0, !dbg !39
  %1808 = extractvalue { i32, i32, i32, i32 } %1806, 1, !dbg !39
  %1809 = extractvalue { i32, i32, i32, i32 } %1806, 2, !dbg !39
  %1810 = extractvalue { i32, i32, i32, i32 } %1806, 3, !dbg !39
  %1811 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1761, i32 %595, !dbg !39
  %1812 = ptrtoint ptr addrspace(3) %1811 to i32, !dbg !39
  %1813 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1812) #2, !dbg !39
  %1814 = extractvalue { i32, i32, i32, i32 } %1813, 0, !dbg !39
  %1815 = extractvalue { i32, i32, i32, i32 } %1813, 1, !dbg !39
  %1816 = extractvalue { i32, i32, i32, i32 } %1813, 2, !dbg !39
  %1817 = extractvalue { i32, i32, i32, i32 } %1813, 3, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %1818 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %538) #2, !dbg !66
  %1819 = extractvalue { i32, i32, i32, i32 } %1818, 0, !dbg !66
  %1820 = extractvalue { i32, i32, i32, i32 } %1818, 1, !dbg !66
  %1821 = extractvalue { i32, i32, i32, i32 } %1818, 2, !dbg !66
  %1822 = extractvalue { i32, i32, i32, i32 } %1818, 3, !dbg !66
  %1823 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %541) #2, !dbg !66
  %1824 = extractvalue { i32, i32, i32, i32 } %1823, 0, !dbg !66
  %1825 = extractvalue { i32, i32, i32, i32 } %1823, 1, !dbg !66
  %1826 = extractvalue { i32, i32, i32, i32 } %1823, 2, !dbg !66
  %1827 = extractvalue { i32, i32, i32, i32 } %1823, 3, !dbg !66
  %1828 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %544) #2, !dbg !66
  %1829 = extractvalue { i32, i32, i32, i32 } %1828, 0, !dbg !66
  %1830 = extractvalue { i32, i32, i32, i32 } %1828, 1, !dbg !66
  %1831 = extractvalue { i32, i32, i32, i32 } %1828, 2, !dbg !66
  %1832 = extractvalue { i32, i32, i32, i32 } %1828, 3, !dbg !66
  %1833 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %547) #2, !dbg !66
  %1834 = extractvalue { i32, i32, i32, i32 } %1833, 0, !dbg !66
  %1835 = extractvalue { i32, i32, i32, i32 } %1833, 1, !dbg !66
  %1836 = extractvalue { i32, i32, i32, i32 } %1833, 2, !dbg !66
  %1837 = extractvalue { i32, i32, i32, i32 } %1833, 3, !dbg !66
  %1838 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %550) #2, !dbg !66
  %1839 = extractvalue { i32, i32, i32, i32 } %1838, 0, !dbg !66
  %1840 = extractvalue { i32, i32, i32, i32 } %1838, 1, !dbg !66
  %1841 = extractvalue { i32, i32, i32, i32 } %1838, 2, !dbg !66
  %1842 = extractvalue { i32, i32, i32, i32 } %1838, 3, !dbg !66
  %1843 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %553) #2, !dbg !66
  %1844 = extractvalue { i32, i32, i32, i32 } %1843, 0, !dbg !66
  %1845 = extractvalue { i32, i32, i32, i32 } %1843, 1, !dbg !66
  %1846 = extractvalue { i32, i32, i32, i32 } %1843, 2, !dbg !66
  %1847 = extractvalue { i32, i32, i32, i32 } %1843, 3, !dbg !66
  %1848 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %556) #2, !dbg !66
  %1849 = extractvalue { i32, i32, i32, i32 } %1848, 0, !dbg !66
  %1850 = extractvalue { i32, i32, i32, i32 } %1848, 1, !dbg !66
  %1851 = extractvalue { i32, i32, i32, i32 } %1848, 2, !dbg !66
  %1852 = extractvalue { i32, i32, i32, i32 } %1848, 3, !dbg !66
  %1853 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %559) #2, !dbg !66
  %1854 = extractvalue { i32, i32, i32, i32 } %1853, 0, !dbg !66
  %1855 = extractvalue { i32, i32, i32, i32 } %1853, 1, !dbg !66
  %1856 = extractvalue { i32, i32, i32, i32 } %1853, 2, !dbg !66
  %1857 = extractvalue { i32, i32, i32, i32 } %1853, 3, !dbg !66
  %1858 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1617, float %1618, float %1619, float %1620, i32 %1765, i32 %1766, i32 %1767, i32 %1768, i32 %1819, i32 %1820) #2, !dbg !67
  %1859 = extractvalue { float, float, float, float } %1858, 0, !dbg !67
  %1860 = extractvalue { float, float, float, float } %1858, 1, !dbg !67
  %1861 = extractvalue { float, float, float, float } %1858, 2, !dbg !67
  %1862 = extractvalue { float, float, float, float } %1858, 3, !dbg !67
  %1863 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1621, float %1622, float %1623, float %1624, i32 %1765, i32 %1766, i32 %1767, i32 %1768, i32 %1829, i32 %1830) #2, !dbg !67
  %1864 = extractvalue { float, float, float, float } %1863, 0, !dbg !67
  %1865 = extractvalue { float, float, float, float } %1863, 1, !dbg !67
  %1866 = extractvalue { float, float, float, float } %1863, 2, !dbg !67
  %1867 = extractvalue { float, float, float, float } %1863, 3, !dbg !67
  %1868 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1625, float %1626, float %1627, float %1628, i32 %1765, i32 %1766, i32 %1767, i32 %1768, i32 %1839, i32 %1840) #2, !dbg !67
  %1869 = extractvalue { float, float, float, float } %1868, 0, !dbg !67
  %1870 = extractvalue { float, float, float, float } %1868, 1, !dbg !67
  %1871 = extractvalue { float, float, float, float } %1868, 2, !dbg !67
  %1872 = extractvalue { float, float, float, float } %1868, 3, !dbg !67
  %1873 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1629, float %1630, float %1631, float %1632, i32 %1765, i32 %1766, i32 %1767, i32 %1768, i32 %1849, i32 %1850) #2, !dbg !67
  %1874 = extractvalue { float, float, float, float } %1873, 0, !dbg !67
  %1875 = extractvalue { float, float, float, float } %1873, 1, !dbg !67
  %1876 = extractvalue { float, float, float, float } %1873, 2, !dbg !67
  %1877 = extractvalue { float, float, float, float } %1873, 3, !dbg !67
  %1878 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1633, float %1634, float %1635, float %1636, i32 %1793, i32 %1794, i32 %1795, i32 %1796, i32 %1819, i32 %1820) #2, !dbg !67
  %1879 = extractvalue { float, float, float, float } %1878, 0, !dbg !67
  %1880 = extractvalue { float, float, float, float } %1878, 1, !dbg !67
  %1881 = extractvalue { float, float, float, float } %1878, 2, !dbg !67
  %1882 = extractvalue { float, float, float, float } %1878, 3, !dbg !67
  %1883 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1637, float %1638, float %1639, float %1640, i32 %1793, i32 %1794, i32 %1795, i32 %1796, i32 %1829, i32 %1830) #2, !dbg !67
  %1884 = extractvalue { float, float, float, float } %1883, 0, !dbg !67
  %1885 = extractvalue { float, float, float, float } %1883, 1, !dbg !67
  %1886 = extractvalue { float, float, float, float } %1883, 2, !dbg !67
  %1887 = extractvalue { float, float, float, float } %1883, 3, !dbg !67
  %1888 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1641, float %1642, float %1643, float %1644, i32 %1793, i32 %1794, i32 %1795, i32 %1796, i32 %1839, i32 %1840) #2, !dbg !67
  %1889 = extractvalue { float, float, float, float } %1888, 0, !dbg !67
  %1890 = extractvalue { float, float, float, float } %1888, 1, !dbg !67
  %1891 = extractvalue { float, float, float, float } %1888, 2, !dbg !67
  %1892 = extractvalue { float, float, float, float } %1888, 3, !dbg !67
  %1893 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1645, float %1646, float %1647, float %1648, i32 %1793, i32 %1794, i32 %1795, i32 %1796, i32 %1849, i32 %1850) #2, !dbg !67
  %1894 = extractvalue { float, float, float, float } %1893, 0, !dbg !67
  %1895 = extractvalue { float, float, float, float } %1893, 1, !dbg !67
  %1896 = extractvalue { float, float, float, float } %1893, 2, !dbg !67
  %1897 = extractvalue { float, float, float, float } %1893, 3, !dbg !67
  %1898 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1859, float %1860, float %1861, float %1862, i32 %1772, i32 %1773, i32 %1774, i32 %1775, i32 %1821, i32 %1822) #2, !dbg !67
  %1899 = extractvalue { float, float, float, float } %1898, 0, !dbg !67
  %1900 = extractvalue { float, float, float, float } %1898, 1, !dbg !67
  %1901 = extractvalue { float, float, float, float } %1898, 2, !dbg !67
  %1902 = extractvalue { float, float, float, float } %1898, 3, !dbg !67
  %1903 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1864, float %1865, float %1866, float %1867, i32 %1772, i32 %1773, i32 %1774, i32 %1775, i32 %1831, i32 %1832) #2, !dbg !67
  %1904 = extractvalue { float, float, float, float } %1903, 0, !dbg !67
  %1905 = extractvalue { float, float, float, float } %1903, 1, !dbg !67
  %1906 = extractvalue { float, float, float, float } %1903, 2, !dbg !67
  %1907 = extractvalue { float, float, float, float } %1903, 3, !dbg !67
  %1908 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1869, float %1870, float %1871, float %1872, i32 %1772, i32 %1773, i32 %1774, i32 %1775, i32 %1841, i32 %1842) #2, !dbg !67
  %1909 = extractvalue { float, float, float, float } %1908, 0, !dbg !67
  %1910 = extractvalue { float, float, float, float } %1908, 1, !dbg !67
  %1911 = extractvalue { float, float, float, float } %1908, 2, !dbg !67
  %1912 = extractvalue { float, float, float, float } %1908, 3, !dbg !67
  %1913 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1874, float %1875, float %1876, float %1877, i32 %1772, i32 %1773, i32 %1774, i32 %1775, i32 %1851, i32 %1852) #2, !dbg !67
  %1914 = extractvalue { float, float, float, float } %1913, 0, !dbg !67
  %1915 = extractvalue { float, float, float, float } %1913, 1, !dbg !67
  %1916 = extractvalue { float, float, float, float } %1913, 2, !dbg !67
  %1917 = extractvalue { float, float, float, float } %1913, 3, !dbg !67
  %1918 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1879, float %1880, float %1881, float %1882, i32 %1800, i32 %1801, i32 %1802, i32 %1803, i32 %1821, i32 %1822) #2, !dbg !67
  %1919 = extractvalue { float, float, float, float } %1918, 0, !dbg !67
  %1920 = extractvalue { float, float, float, float } %1918, 1, !dbg !67
  %1921 = extractvalue { float, float, float, float } %1918, 2, !dbg !67
  %1922 = extractvalue { float, float, float, float } %1918, 3, !dbg !67
  %1923 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1884, float %1885, float %1886, float %1887, i32 %1800, i32 %1801, i32 %1802, i32 %1803, i32 %1831, i32 %1832) #2, !dbg !67
  %1924 = extractvalue { float, float, float, float } %1923, 0, !dbg !67
  %1925 = extractvalue { float, float, float, float } %1923, 1, !dbg !67
  %1926 = extractvalue { float, float, float, float } %1923, 2, !dbg !67
  %1927 = extractvalue { float, float, float, float } %1923, 3, !dbg !67
  %1928 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1889, float %1890, float %1891, float %1892, i32 %1800, i32 %1801, i32 %1802, i32 %1803, i32 %1841, i32 %1842) #2, !dbg !67
  %1929 = extractvalue { float, float, float, float } %1928, 0, !dbg !67
  %1930 = extractvalue { float, float, float, float } %1928, 1, !dbg !67
  %1931 = extractvalue { float, float, float, float } %1928, 2, !dbg !67
  %1932 = extractvalue { float, float, float, float } %1928, 3, !dbg !67
  %1933 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1894, float %1895, float %1896, float %1897, i32 %1800, i32 %1801, i32 %1802, i32 %1803, i32 %1851, i32 %1852) #2, !dbg !67
  %1934 = extractvalue { float, float, float, float } %1933, 0, !dbg !67
  %1935 = extractvalue { float, float, float, float } %1933, 1, !dbg !67
  %1936 = extractvalue { float, float, float, float } %1933, 2, !dbg !67
  %1937 = extractvalue { float, float, float, float } %1933, 3, !dbg !67
  %1938 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1899, float %1900, float %1901, float %1902, i32 %1779, i32 %1780, i32 %1781, i32 %1782, i32 %1824, i32 %1825) #2, !dbg !67
  %1939 = extractvalue { float, float, float, float } %1938, 0, !dbg !67
  %1940 = extractvalue { float, float, float, float } %1938, 1, !dbg !67
  %1941 = extractvalue { float, float, float, float } %1938, 2, !dbg !67
  %1942 = extractvalue { float, float, float, float } %1938, 3, !dbg !67
  %1943 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1904, float %1905, float %1906, float %1907, i32 %1779, i32 %1780, i32 %1781, i32 %1782, i32 %1834, i32 %1835) #2, !dbg !67
  %1944 = extractvalue { float, float, float, float } %1943, 0, !dbg !67
  %1945 = extractvalue { float, float, float, float } %1943, 1, !dbg !67
  %1946 = extractvalue { float, float, float, float } %1943, 2, !dbg !67
  %1947 = extractvalue { float, float, float, float } %1943, 3, !dbg !67
  %1948 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1909, float %1910, float %1911, float %1912, i32 %1779, i32 %1780, i32 %1781, i32 %1782, i32 %1844, i32 %1845) #2, !dbg !67
  %1949 = extractvalue { float, float, float, float } %1948, 0, !dbg !67
  %1950 = extractvalue { float, float, float, float } %1948, 1, !dbg !67
  %1951 = extractvalue { float, float, float, float } %1948, 2, !dbg !67
  %1952 = extractvalue { float, float, float, float } %1948, 3, !dbg !67
  %1953 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1914, float %1915, float %1916, float %1917, i32 %1779, i32 %1780, i32 %1781, i32 %1782, i32 %1854, i32 %1855) #2, !dbg !67
  %1954 = extractvalue { float, float, float, float } %1953, 0, !dbg !67
  %1955 = extractvalue { float, float, float, float } %1953, 1, !dbg !67
  %1956 = extractvalue { float, float, float, float } %1953, 2, !dbg !67
  %1957 = extractvalue { float, float, float, float } %1953, 3, !dbg !67
  %1958 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1919, float %1920, float %1921, float %1922, i32 %1807, i32 %1808, i32 %1809, i32 %1810, i32 %1824, i32 %1825) #2, !dbg !67
  %1959 = extractvalue { float, float, float, float } %1958, 0, !dbg !67
  %1960 = extractvalue { float, float, float, float } %1958, 1, !dbg !67
  %1961 = extractvalue { float, float, float, float } %1958, 2, !dbg !67
  %1962 = extractvalue { float, float, float, float } %1958, 3, !dbg !67
  %1963 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1924, float %1925, float %1926, float %1927, i32 %1807, i32 %1808, i32 %1809, i32 %1810, i32 %1834, i32 %1835) #2, !dbg !67
  %1964 = extractvalue { float, float, float, float } %1963, 0, !dbg !67
  %1965 = extractvalue { float, float, float, float } %1963, 1, !dbg !67
  %1966 = extractvalue { float, float, float, float } %1963, 2, !dbg !67
  %1967 = extractvalue { float, float, float, float } %1963, 3, !dbg !67
  %1968 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1929, float %1930, float %1931, float %1932, i32 %1807, i32 %1808, i32 %1809, i32 %1810, i32 %1844, i32 %1845) #2, !dbg !67
  %1969 = extractvalue { float, float, float, float } %1968, 0, !dbg !67
  %1970 = extractvalue { float, float, float, float } %1968, 1, !dbg !67
  %1971 = extractvalue { float, float, float, float } %1968, 2, !dbg !67
  %1972 = extractvalue { float, float, float, float } %1968, 3, !dbg !67
  %1973 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1934, float %1935, float %1936, float %1937, i32 %1807, i32 %1808, i32 %1809, i32 %1810, i32 %1854, i32 %1855) #2, !dbg !67
  %1974 = extractvalue { float, float, float, float } %1973, 0, !dbg !67
  %1975 = extractvalue { float, float, float, float } %1973, 1, !dbg !67
  %1976 = extractvalue { float, float, float, float } %1973, 2, !dbg !67
  %1977 = extractvalue { float, float, float, float } %1973, 3, !dbg !67
  %1978 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1939, float %1940, float %1941, float %1942, i32 %1786, i32 %1787, i32 %1788, i32 %1789, i32 %1826, i32 %1827) #2, !dbg !67
  %1979 = extractvalue { float, float, float, float } %1978, 0, !dbg !67
  %1980 = extractvalue { float, float, float, float } %1978, 1, !dbg !67
  %1981 = extractvalue { float, float, float, float } %1978, 2, !dbg !67
  %1982 = extractvalue { float, float, float, float } %1978, 3, !dbg !67
  %1983 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1944, float %1945, float %1946, float %1947, i32 %1786, i32 %1787, i32 %1788, i32 %1789, i32 %1836, i32 %1837) #2, !dbg !67
  %1984 = extractvalue { float, float, float, float } %1983, 0, !dbg !67
  %1985 = extractvalue { float, float, float, float } %1983, 1, !dbg !67
  %1986 = extractvalue { float, float, float, float } %1983, 2, !dbg !67
  %1987 = extractvalue { float, float, float, float } %1983, 3, !dbg !67
  %1988 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1949, float %1950, float %1951, float %1952, i32 %1786, i32 %1787, i32 %1788, i32 %1789, i32 %1846, i32 %1847) #2, !dbg !67
  %1989 = extractvalue { float, float, float, float } %1988, 0, !dbg !67
  %1990 = extractvalue { float, float, float, float } %1988, 1, !dbg !67
  %1991 = extractvalue { float, float, float, float } %1988, 2, !dbg !67
  %1992 = extractvalue { float, float, float, float } %1988, 3, !dbg !67
  %1993 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1954, float %1955, float %1956, float %1957, i32 %1786, i32 %1787, i32 %1788, i32 %1789, i32 %1856, i32 %1857) #2, !dbg !67
  %1994 = extractvalue { float, float, float, float } %1993, 0, !dbg !67
  %1995 = extractvalue { float, float, float, float } %1993, 1, !dbg !67
  %1996 = extractvalue { float, float, float, float } %1993, 2, !dbg !67
  %1997 = extractvalue { float, float, float, float } %1993, 3, !dbg !67
  %1998 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1959, float %1960, float %1961, float %1962, i32 %1814, i32 %1815, i32 %1816, i32 %1817, i32 %1826, i32 %1827) #2, !dbg !67
  %1999 = extractvalue { float, float, float, float } %1998, 0, !dbg !67
  %2000 = extractvalue { float, float, float, float } %1998, 1, !dbg !67
  %2001 = extractvalue { float, float, float, float } %1998, 2, !dbg !67
  %2002 = extractvalue { float, float, float, float } %1998, 3, !dbg !67
  %2003 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1964, float %1965, float %1966, float %1967, i32 %1814, i32 %1815, i32 %1816, i32 %1817, i32 %1836, i32 %1837) #2, !dbg !67
  %2004 = extractvalue { float, float, float, float } %2003, 0, !dbg !67
  %2005 = extractvalue { float, float, float, float } %2003, 1, !dbg !67
  %2006 = extractvalue { float, float, float, float } %2003, 2, !dbg !67
  %2007 = extractvalue { float, float, float, float } %2003, 3, !dbg !67
  %2008 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1969, float %1970, float %1971, float %1972, i32 %1814, i32 %1815, i32 %1816, i32 %1817, i32 %1846, i32 %1847) #2, !dbg !67
  %2009 = extractvalue { float, float, float, float } %2008, 0, !dbg !67
  %2010 = extractvalue { float, float, float, float } %2008, 1, !dbg !67
  %2011 = extractvalue { float, float, float, float } %2008, 2, !dbg !67
  %2012 = extractvalue { float, float, float, float } %2008, 3, !dbg !67
  %2013 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1974, float %1975, float %1976, float %1977, i32 %1814, i32 %1815, i32 %1816, i32 %1817, i32 %1856, i32 %1857) #2, !dbg !67
  %2014 = extractvalue { float, float, float, float } %2013, 0, !dbg !67
  %2015 = extractvalue { float, float, float, float } %2013, 1, !dbg !67
  %2016 = extractvalue { float, float, float, float } %2013, 2, !dbg !67
  %2017 = extractvalue { float, float, float, float } %2013, 3, !dbg !67
  %2018 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %858, !dbg !40
  %2019 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %588, !dbg !40
  %2020 = ptrtoint ptr addrspace(3) %2019 to i32, !dbg !40
  %2021 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2020) #2, !dbg !40
  %2022 = extractvalue { i32, i32, i32, i32 } %2021, 0, !dbg !40
  %2023 = extractvalue { i32, i32, i32, i32 } %2021, 1, !dbg !40
  %2024 = extractvalue { i32, i32, i32, i32 } %2021, 2, !dbg !40
  %2025 = extractvalue { i32, i32, i32, i32 } %2021, 3, !dbg !40
  %2026 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %589, !dbg !40
  %2027 = ptrtoint ptr addrspace(3) %2026 to i32, !dbg !40
  %2028 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2027) #2, !dbg !40
  %2029 = extractvalue { i32, i32, i32, i32 } %2028, 0, !dbg !40
  %2030 = extractvalue { i32, i32, i32, i32 } %2028, 1, !dbg !40
  %2031 = extractvalue { i32, i32, i32, i32 } %2028, 2, !dbg !40
  %2032 = extractvalue { i32, i32, i32, i32 } %2028, 3, !dbg !40
  %2033 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %590, !dbg !40
  %2034 = ptrtoint ptr addrspace(3) %2033 to i32, !dbg !40
  %2035 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2034) #2, !dbg !40
  %2036 = extractvalue { i32, i32, i32, i32 } %2035, 0, !dbg !40
  %2037 = extractvalue { i32, i32, i32, i32 } %2035, 1, !dbg !40
  %2038 = extractvalue { i32, i32, i32, i32 } %2035, 2, !dbg !40
  %2039 = extractvalue { i32, i32, i32, i32 } %2035, 3, !dbg !40
  %2040 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %591, !dbg !40
  %2041 = ptrtoint ptr addrspace(3) %2040 to i32, !dbg !40
  %2042 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2041) #2, !dbg !40
  %2043 = extractvalue { i32, i32, i32, i32 } %2042, 0, !dbg !40
  %2044 = extractvalue { i32, i32, i32, i32 } %2042, 1, !dbg !40
  %2045 = extractvalue { i32, i32, i32, i32 } %2042, 2, !dbg !40
  %2046 = extractvalue { i32, i32, i32, i32 } %2042, 3, !dbg !40
  %2047 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %592, !dbg !40
  %2048 = ptrtoint ptr addrspace(3) %2047 to i32, !dbg !40
  %2049 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2048) #2, !dbg !40
  %2050 = extractvalue { i32, i32, i32, i32 } %2049, 0, !dbg !40
  %2051 = extractvalue { i32, i32, i32, i32 } %2049, 1, !dbg !40
  %2052 = extractvalue { i32, i32, i32, i32 } %2049, 2, !dbg !40
  %2053 = extractvalue { i32, i32, i32, i32 } %2049, 3, !dbg !40
  %2054 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %593, !dbg !40
  %2055 = ptrtoint ptr addrspace(3) %2054 to i32, !dbg !40
  %2056 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2055) #2, !dbg !40
  %2057 = extractvalue { i32, i32, i32, i32 } %2056, 0, !dbg !40
  %2058 = extractvalue { i32, i32, i32, i32 } %2056, 1, !dbg !40
  %2059 = extractvalue { i32, i32, i32, i32 } %2056, 2, !dbg !40
  %2060 = extractvalue { i32, i32, i32, i32 } %2056, 3, !dbg !40
  %2061 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %594, !dbg !40
  %2062 = ptrtoint ptr addrspace(3) %2061 to i32, !dbg !40
  %2063 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2062) #2, !dbg !40
  %2064 = extractvalue { i32, i32, i32, i32 } %2063, 0, !dbg !40
  %2065 = extractvalue { i32, i32, i32, i32 } %2063, 1, !dbg !40
  %2066 = extractvalue { i32, i32, i32, i32 } %2063, 2, !dbg !40
  %2067 = extractvalue { i32, i32, i32, i32 } %2063, 3, !dbg !40
  %2068 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2018, i32 %595, !dbg !40
  %2069 = ptrtoint ptr addrspace(3) %2068 to i32, !dbg !40
  %2070 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2069) #2, !dbg !40
  %2071 = extractvalue { i32, i32, i32, i32 } %2070, 0, !dbg !40
  %2072 = extractvalue { i32, i32, i32, i32 } %2070, 1, !dbg !40
  %2073 = extractvalue { i32, i32, i32, i32 } %2070, 2, !dbg !40
  %2074 = extractvalue { i32, i32, i32, i32 } %2070, 3, !dbg !40
  %2075 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1649, float %1650, float %1651, float %1652, i32 %2022, i32 %2023, i32 %2024, i32 %2025, i32 %1819, i32 %1820) #2, !dbg !68
  %2076 = extractvalue { float, float, float, float } %2075, 0, !dbg !68
  %2077 = extractvalue { float, float, float, float } %2075, 1, !dbg !68
  %2078 = extractvalue { float, float, float, float } %2075, 2, !dbg !68
  %2079 = extractvalue { float, float, float, float } %2075, 3, !dbg !68
  %2080 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1653, float %1654, float %1655, float %1656, i32 %2022, i32 %2023, i32 %2024, i32 %2025, i32 %1829, i32 %1830) #2, !dbg !68
  %2081 = extractvalue { float, float, float, float } %2080, 0, !dbg !68
  %2082 = extractvalue { float, float, float, float } %2080, 1, !dbg !68
  %2083 = extractvalue { float, float, float, float } %2080, 2, !dbg !68
  %2084 = extractvalue { float, float, float, float } %2080, 3, !dbg !68
  %2085 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1657, float %1658, float %1659, float %1660, i32 %2022, i32 %2023, i32 %2024, i32 %2025, i32 %1839, i32 %1840) #2, !dbg !68
  %2086 = extractvalue { float, float, float, float } %2085, 0, !dbg !68
  %2087 = extractvalue { float, float, float, float } %2085, 1, !dbg !68
  %2088 = extractvalue { float, float, float, float } %2085, 2, !dbg !68
  %2089 = extractvalue { float, float, float, float } %2085, 3, !dbg !68
  %2090 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1661, float %1662, float %1663, float %1664, i32 %2022, i32 %2023, i32 %2024, i32 %2025, i32 %1849, i32 %1850) #2, !dbg !68
  %2091 = extractvalue { float, float, float, float } %2090, 0, !dbg !68
  %2092 = extractvalue { float, float, float, float } %2090, 1, !dbg !68
  %2093 = extractvalue { float, float, float, float } %2090, 2, !dbg !68
  %2094 = extractvalue { float, float, float, float } %2090, 3, !dbg !68
  %2095 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1665, float %1666, float %1667, float %1668, i32 %2050, i32 %2051, i32 %2052, i32 %2053, i32 %1819, i32 %1820) #2, !dbg !68
  %2096 = extractvalue { float, float, float, float } %2095, 0, !dbg !68
  %2097 = extractvalue { float, float, float, float } %2095, 1, !dbg !68
  %2098 = extractvalue { float, float, float, float } %2095, 2, !dbg !68
  %2099 = extractvalue { float, float, float, float } %2095, 3, !dbg !68
  %2100 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1669, float %1670, float %1671, float %1672, i32 %2050, i32 %2051, i32 %2052, i32 %2053, i32 %1829, i32 %1830) #2, !dbg !68
  %2101 = extractvalue { float, float, float, float } %2100, 0, !dbg !68
  %2102 = extractvalue { float, float, float, float } %2100, 1, !dbg !68
  %2103 = extractvalue { float, float, float, float } %2100, 2, !dbg !68
  %2104 = extractvalue { float, float, float, float } %2100, 3, !dbg !68
  %2105 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1673, float %1674, float %1675, float %1676, i32 %2050, i32 %2051, i32 %2052, i32 %2053, i32 %1839, i32 %1840) #2, !dbg !68
  %2106 = extractvalue { float, float, float, float } %2105, 0, !dbg !68
  %2107 = extractvalue { float, float, float, float } %2105, 1, !dbg !68
  %2108 = extractvalue { float, float, float, float } %2105, 2, !dbg !68
  %2109 = extractvalue { float, float, float, float } %2105, 3, !dbg !68
  %2110 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1677, float %1678, float %1679, float %1680, i32 %2050, i32 %2051, i32 %2052, i32 %2053, i32 %1849, i32 %1850) #2, !dbg !68
  %2111 = extractvalue { float, float, float, float } %2110, 0, !dbg !68
  %2112 = extractvalue { float, float, float, float } %2110, 1, !dbg !68
  %2113 = extractvalue { float, float, float, float } %2110, 2, !dbg !68
  %2114 = extractvalue { float, float, float, float } %2110, 3, !dbg !68
  %2115 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2076, float %2077, float %2078, float %2079, i32 %2029, i32 %2030, i32 %2031, i32 %2032, i32 %1821, i32 %1822) #2, !dbg !68
  %2116 = extractvalue { float, float, float, float } %2115, 0, !dbg !68
  %2117 = extractvalue { float, float, float, float } %2115, 1, !dbg !68
  %2118 = extractvalue { float, float, float, float } %2115, 2, !dbg !68
  %2119 = extractvalue { float, float, float, float } %2115, 3, !dbg !68
  %2120 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2081, float %2082, float %2083, float %2084, i32 %2029, i32 %2030, i32 %2031, i32 %2032, i32 %1831, i32 %1832) #2, !dbg !68
  %2121 = extractvalue { float, float, float, float } %2120, 0, !dbg !68
  %2122 = extractvalue { float, float, float, float } %2120, 1, !dbg !68
  %2123 = extractvalue { float, float, float, float } %2120, 2, !dbg !68
  %2124 = extractvalue { float, float, float, float } %2120, 3, !dbg !68
  %2125 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2086, float %2087, float %2088, float %2089, i32 %2029, i32 %2030, i32 %2031, i32 %2032, i32 %1841, i32 %1842) #2, !dbg !68
  %2126 = extractvalue { float, float, float, float } %2125, 0, !dbg !68
  %2127 = extractvalue { float, float, float, float } %2125, 1, !dbg !68
  %2128 = extractvalue { float, float, float, float } %2125, 2, !dbg !68
  %2129 = extractvalue { float, float, float, float } %2125, 3, !dbg !68
  %2130 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2091, float %2092, float %2093, float %2094, i32 %2029, i32 %2030, i32 %2031, i32 %2032, i32 %1851, i32 %1852) #2, !dbg !68
  %2131 = extractvalue { float, float, float, float } %2130, 0, !dbg !68
  %2132 = extractvalue { float, float, float, float } %2130, 1, !dbg !68
  %2133 = extractvalue { float, float, float, float } %2130, 2, !dbg !68
  %2134 = extractvalue { float, float, float, float } %2130, 3, !dbg !68
  %2135 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2096, float %2097, float %2098, float %2099, i32 %2057, i32 %2058, i32 %2059, i32 %2060, i32 %1821, i32 %1822) #2, !dbg !68
  %2136 = extractvalue { float, float, float, float } %2135, 0, !dbg !68
  %2137 = extractvalue { float, float, float, float } %2135, 1, !dbg !68
  %2138 = extractvalue { float, float, float, float } %2135, 2, !dbg !68
  %2139 = extractvalue { float, float, float, float } %2135, 3, !dbg !68
  %2140 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2101, float %2102, float %2103, float %2104, i32 %2057, i32 %2058, i32 %2059, i32 %2060, i32 %1831, i32 %1832) #2, !dbg !68
  %2141 = extractvalue { float, float, float, float } %2140, 0, !dbg !68
  %2142 = extractvalue { float, float, float, float } %2140, 1, !dbg !68
  %2143 = extractvalue { float, float, float, float } %2140, 2, !dbg !68
  %2144 = extractvalue { float, float, float, float } %2140, 3, !dbg !68
  %2145 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2106, float %2107, float %2108, float %2109, i32 %2057, i32 %2058, i32 %2059, i32 %2060, i32 %1841, i32 %1842) #2, !dbg !68
  %2146 = extractvalue { float, float, float, float } %2145, 0, !dbg !68
  %2147 = extractvalue { float, float, float, float } %2145, 1, !dbg !68
  %2148 = extractvalue { float, float, float, float } %2145, 2, !dbg !68
  %2149 = extractvalue { float, float, float, float } %2145, 3, !dbg !68
  %2150 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2111, float %2112, float %2113, float %2114, i32 %2057, i32 %2058, i32 %2059, i32 %2060, i32 %1851, i32 %1852) #2, !dbg !68
  %2151 = extractvalue { float, float, float, float } %2150, 0, !dbg !68
  %2152 = extractvalue { float, float, float, float } %2150, 1, !dbg !68
  %2153 = extractvalue { float, float, float, float } %2150, 2, !dbg !68
  %2154 = extractvalue { float, float, float, float } %2150, 3, !dbg !68
  %2155 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2116, float %2117, float %2118, float %2119, i32 %2036, i32 %2037, i32 %2038, i32 %2039, i32 %1824, i32 %1825) #2, !dbg !68
  %2156 = extractvalue { float, float, float, float } %2155, 0, !dbg !68
  %2157 = extractvalue { float, float, float, float } %2155, 1, !dbg !68
  %2158 = extractvalue { float, float, float, float } %2155, 2, !dbg !68
  %2159 = extractvalue { float, float, float, float } %2155, 3, !dbg !68
  %2160 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2121, float %2122, float %2123, float %2124, i32 %2036, i32 %2037, i32 %2038, i32 %2039, i32 %1834, i32 %1835) #2, !dbg !68
  %2161 = extractvalue { float, float, float, float } %2160, 0, !dbg !68
  %2162 = extractvalue { float, float, float, float } %2160, 1, !dbg !68
  %2163 = extractvalue { float, float, float, float } %2160, 2, !dbg !68
  %2164 = extractvalue { float, float, float, float } %2160, 3, !dbg !68
  %2165 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2126, float %2127, float %2128, float %2129, i32 %2036, i32 %2037, i32 %2038, i32 %2039, i32 %1844, i32 %1845) #2, !dbg !68
  %2166 = extractvalue { float, float, float, float } %2165, 0, !dbg !68
  %2167 = extractvalue { float, float, float, float } %2165, 1, !dbg !68
  %2168 = extractvalue { float, float, float, float } %2165, 2, !dbg !68
  %2169 = extractvalue { float, float, float, float } %2165, 3, !dbg !68
  %2170 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2131, float %2132, float %2133, float %2134, i32 %2036, i32 %2037, i32 %2038, i32 %2039, i32 %1854, i32 %1855) #2, !dbg !68
  %2171 = extractvalue { float, float, float, float } %2170, 0, !dbg !68
  %2172 = extractvalue { float, float, float, float } %2170, 1, !dbg !68
  %2173 = extractvalue { float, float, float, float } %2170, 2, !dbg !68
  %2174 = extractvalue { float, float, float, float } %2170, 3, !dbg !68
  %2175 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2136, float %2137, float %2138, float %2139, i32 %2064, i32 %2065, i32 %2066, i32 %2067, i32 %1824, i32 %1825) #2, !dbg !68
  %2176 = extractvalue { float, float, float, float } %2175, 0, !dbg !68
  %2177 = extractvalue { float, float, float, float } %2175, 1, !dbg !68
  %2178 = extractvalue { float, float, float, float } %2175, 2, !dbg !68
  %2179 = extractvalue { float, float, float, float } %2175, 3, !dbg !68
  %2180 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2141, float %2142, float %2143, float %2144, i32 %2064, i32 %2065, i32 %2066, i32 %2067, i32 %1834, i32 %1835) #2, !dbg !68
  %2181 = extractvalue { float, float, float, float } %2180, 0, !dbg !68
  %2182 = extractvalue { float, float, float, float } %2180, 1, !dbg !68
  %2183 = extractvalue { float, float, float, float } %2180, 2, !dbg !68
  %2184 = extractvalue { float, float, float, float } %2180, 3, !dbg !68
  %2185 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2146, float %2147, float %2148, float %2149, i32 %2064, i32 %2065, i32 %2066, i32 %2067, i32 %1844, i32 %1845) #2, !dbg !68
  %2186 = extractvalue { float, float, float, float } %2185, 0, !dbg !68
  %2187 = extractvalue { float, float, float, float } %2185, 1, !dbg !68
  %2188 = extractvalue { float, float, float, float } %2185, 2, !dbg !68
  %2189 = extractvalue { float, float, float, float } %2185, 3, !dbg !68
  %2190 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2151, float %2152, float %2153, float %2154, i32 %2064, i32 %2065, i32 %2066, i32 %2067, i32 %1854, i32 %1855) #2, !dbg !68
  %2191 = extractvalue { float, float, float, float } %2190, 0, !dbg !68
  %2192 = extractvalue { float, float, float, float } %2190, 1, !dbg !68
  %2193 = extractvalue { float, float, float, float } %2190, 2, !dbg !68
  %2194 = extractvalue { float, float, float, float } %2190, 3, !dbg !68
  %2195 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2156, float %2157, float %2158, float %2159, i32 %2043, i32 %2044, i32 %2045, i32 %2046, i32 %1826, i32 %1827) #2, !dbg !68
  %2196 = extractvalue { float, float, float, float } %2195, 0, !dbg !68
  %2197 = extractvalue { float, float, float, float } %2195, 1, !dbg !68
  %2198 = extractvalue { float, float, float, float } %2195, 2, !dbg !68
  %2199 = extractvalue { float, float, float, float } %2195, 3, !dbg !68
  %2200 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2161, float %2162, float %2163, float %2164, i32 %2043, i32 %2044, i32 %2045, i32 %2046, i32 %1836, i32 %1837) #2, !dbg !68
  %2201 = extractvalue { float, float, float, float } %2200, 0, !dbg !68
  %2202 = extractvalue { float, float, float, float } %2200, 1, !dbg !68
  %2203 = extractvalue { float, float, float, float } %2200, 2, !dbg !68
  %2204 = extractvalue { float, float, float, float } %2200, 3, !dbg !68
  %2205 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2166, float %2167, float %2168, float %2169, i32 %2043, i32 %2044, i32 %2045, i32 %2046, i32 %1846, i32 %1847) #2, !dbg !68
  %2206 = extractvalue { float, float, float, float } %2205, 0, !dbg !68
  %2207 = extractvalue { float, float, float, float } %2205, 1, !dbg !68
  %2208 = extractvalue { float, float, float, float } %2205, 2, !dbg !68
  %2209 = extractvalue { float, float, float, float } %2205, 3, !dbg !68
  %2210 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2171, float %2172, float %2173, float %2174, i32 %2043, i32 %2044, i32 %2045, i32 %2046, i32 %1856, i32 %1857) #2, !dbg !68
  %2211 = extractvalue { float, float, float, float } %2210, 0, !dbg !68
  %2212 = extractvalue { float, float, float, float } %2210, 1, !dbg !68
  %2213 = extractvalue { float, float, float, float } %2210, 2, !dbg !68
  %2214 = extractvalue { float, float, float, float } %2210, 3, !dbg !68
  %2215 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2176, float %2177, float %2178, float %2179, i32 %2071, i32 %2072, i32 %2073, i32 %2074, i32 %1826, i32 %1827) #2, !dbg !68
  %2216 = extractvalue { float, float, float, float } %2215, 0, !dbg !68
  %2217 = extractvalue { float, float, float, float } %2215, 1, !dbg !68
  %2218 = extractvalue { float, float, float, float } %2215, 2, !dbg !68
  %2219 = extractvalue { float, float, float, float } %2215, 3, !dbg !68
  %2220 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2181, float %2182, float %2183, float %2184, i32 %2071, i32 %2072, i32 %2073, i32 %2074, i32 %1836, i32 %1837) #2, !dbg !68
  %2221 = extractvalue { float, float, float, float } %2220, 0, !dbg !68
  %2222 = extractvalue { float, float, float, float } %2220, 1, !dbg !68
  %2223 = extractvalue { float, float, float, float } %2220, 2, !dbg !68
  %2224 = extractvalue { float, float, float, float } %2220, 3, !dbg !68
  %2225 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2186, float %2187, float %2188, float %2189, i32 %2071, i32 %2072, i32 %2073, i32 %2074, i32 %1846, i32 %1847) #2, !dbg !68
  %2226 = extractvalue { float, float, float, float } %2225, 0, !dbg !68
  %2227 = extractvalue { float, float, float, float } %2225, 1, !dbg !68
  %2228 = extractvalue { float, float, float, float } %2225, 2, !dbg !68
  %2229 = extractvalue { float, float, float, float } %2225, 3, !dbg !68
  %2230 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2191, float %2192, float %2193, float %2194, i32 %2071, i32 %2072, i32 %2073, i32 %2074, i32 %1856, i32 %1857) #2, !dbg !68
  %2231 = extractvalue { float, float, float, float } %2230, 0, !dbg !68
  %2232 = extractvalue { float, float, float, float } %2230, 1, !dbg !68
  %2233 = extractvalue { float, float, float, float } %2230, 2, !dbg !68
  %2234 = extractvalue { float, float, float, float } %2230, 3, !dbg !68
  %2235 = add i32 %601, 1, !dbg !34
  %2236 = icmp sgt i32 %2235, 1, !dbg !34
  %2237 = select i1 %2236, i32 0, i32 %2235, !dbg !34
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !31
  %2238 = shl i32 %indvars.iv.tr, 6, !dbg !31
  %2239 = add i32 %2238, 128, !dbg !31
  %2240 = sext i32 %2239 to i64, !dbg !31
  %2241 = or disjoint i64 %2240, %68, !dbg !35
  %2242 = or disjoint i64 %2240, %69, !dbg !35
  %2243 = or disjoint i64 %2240, %70, !dbg !35
  %2244 = or disjoint i64 %2240, %71, !dbg !35
  %2245 = or disjoint i64 %2240, %72, !dbg !35
  %2246 = or disjoint i64 %2240, %73, !dbg !35
  %2247 = or disjoint i64 %2240, %74, !dbg !35
  %2248 = or disjoint i64 %2240, %75, !dbg !35
  %2249 = or disjoint i64 %2240, %64, !dbg !35
  %2250 = or disjoint i64 %2240, %65, !dbg !35
  %2251 = or disjoint i64 %2240, %66, !dbg !35
  %2252 = or disjoint i64 %2240, %67, !dbg !35
  %2253 = or disjoint i64 %2240, %77, !dbg !35
  %2254 = shl nsw i64 %2241, 12, !dbg !35
  %2255 = shl nsw i64 %2242, 12, !dbg !35
  %2256 = shl nsw i64 %2243, 12, !dbg !35
  %2257 = shl nsw i64 %2244, 12, !dbg !35
  %2258 = shl nsw i64 %2245, 12, !dbg !35
  %2259 = shl nsw i64 %2246, 12, !dbg !35
  %2260 = shl nsw i64 %2247, 12, !dbg !35
  %2261 = shl nsw i64 %2248, 12, !dbg !35
  %2262 = shl nsw i64 %2249, 12, !dbg !35
  %2263 = shl nsw i64 %2250, 12, !dbg !35
  %2264 = shl nsw i64 %2251, 12, !dbg !35
  %2265 = shl nsw i64 %2252, 12, !dbg !35
  %2266 = or disjoint i64 %2254, %76, !dbg !35
  %2267 = or disjoint i64 %2255, %76, !dbg !35
  %2268 = or disjoint i64 %2256, %76, !dbg !35
  %2269 = or disjoint i64 %2257, %76, !dbg !35
  %2270 = or disjoint i64 %2258, %76, !dbg !35
  %2271 = or disjoint i64 %2259, %76, !dbg !35
  %2272 = or disjoint i64 %2260, %76, !dbg !35
  %2273 = or disjoint i64 %2261, %76, !dbg !35
  %2274 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2266, !dbg !35
  %2275 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2267, !dbg !35
  %2276 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2268, !dbg !35
  %2277 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2269, !dbg !35
  %2278 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2270, !dbg !35
  %2279 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2271, !dbg !35
  %2280 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2272, !dbg !35
  %2281 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2273, !dbg !35
  %2282 = icmp sgt i32 %2239, -1, !dbg !35
  %2283 = icmp slt i64 %2241, %88, !dbg !35
  %2284 = icmp slt i64 %2242, %88, !dbg !35
  %2285 = icmp slt i64 %2243, %88, !dbg !35
  %2286 = icmp slt i64 %2244, %88, !dbg !35
  %2287 = icmp slt i64 %2245, %88, !dbg !35
  %2288 = icmp slt i64 %2246, %88, !dbg !35
  %2289 = icmp slt i64 %2247, %88, !dbg !35
  %2290 = icmp slt i64 %2248, %88, !dbg !35
  %2291 = icmp slt i64 %2249, %88, !dbg !35
  %2292 = icmp slt i64 %2250, %88, !dbg !35
  %2293 = icmp slt i64 %2251, %88, !dbg !35
  %2294 = icmp slt i64 %2252, %88, !dbg !35
  %2295 = and i1 %2282, %2283, !dbg !35
  %2296 = and i1 %2282, %2284, !dbg !35
  %2297 = and i1 %2282, %2285, !dbg !35
  %2298 = and i1 %2282, %2286, !dbg !35
  %2299 = and i1 %2282, %2287, !dbg !35
  %2300 = and i1 %2282, %2288, !dbg !35
  %2301 = and i1 %2282, %2289, !dbg !35
  %2302 = and i1 %2282, %2290, !dbg !35
  %2303 = and i1 %2282, %2291, !dbg !35
  %2304 = and i1 %2282, %2292, !dbg !35
  %2305 = and i1 %2282, %2293, !dbg !35
  %2306 = and i1 %2282, %2294, !dbg !35
  %2307 = shl i32 %2237, 12, !dbg !35
  %2308 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %2307, !dbg !35
  %2309 = and i1 %666, %2295, !dbg !34
  %2310 = and i1 %666, %2296, !dbg !34
  %2311 = and i1 %666, %2297, !dbg !34
  %2312 = and i1 %666, %2298, !dbg !34
  %2313 = and i1 %666, %2299, !dbg !34
  %2314 = and i1 %666, %2300, !dbg !34
  %2315 = and i1 %666, %2301, !dbg !34
  %2316 = and i1 %666, %2302, !dbg !34
  %2317 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %144, !dbg !35
  %2318 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %146, !dbg !35
  %2319 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %148, !dbg !35
  %2320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %150, !dbg !35
  %2321 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %152, !dbg !35
  %2322 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %154, !dbg !35
  %2323 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %156, !dbg !35
  %2324 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2308, i32 %158, !dbg !35
  %2325 = select i1 %2309, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2317, ptr addrspace(1) %2274, i32 %2325) #2, !dbg !35
  %2326 = select i1 %2310, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2318, ptr addrspace(1) %2275, i32 %2326) #2, !dbg !35
  %2327 = select i1 %2311, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2319, ptr addrspace(1) %2276, i32 %2327) #2, !dbg !35
  %2328 = select i1 %2312, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2320, ptr addrspace(1) %2277, i32 %2328) #2, !dbg !35
  %2329 = select i1 %2313, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2321, ptr addrspace(1) %2278, i32 %2329) #2, !dbg !35
  %2330 = select i1 %2314, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2322, ptr addrspace(1) %2279, i32 %2330) #2, !dbg !35
  %2331 = select i1 %2315, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2323, ptr addrspace(1) %2280, i32 %2331) #2, !dbg !35
  %2332 = select i1 %2316, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2324, ptr addrspace(1) %2281, i32 %2332) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %2333 = or disjoint i64 %2254, %87, !dbg !36
  %2334 = or disjoint i64 %2255, %87, !dbg !36
  %2335 = or disjoint i64 %2256, %87, !dbg !36
  %2336 = or disjoint i64 %2257, %87, !dbg !36
  %2337 = or disjoint i64 %2258, %87, !dbg !36
  %2338 = or disjoint i64 %2259, %87, !dbg !36
  %2339 = or disjoint i64 %2260, %87, !dbg !36
  %2340 = or disjoint i64 %2261, %87, !dbg !36
  %2341 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2333, !dbg !36
  %2342 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2334, !dbg !36
  %2343 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2335, !dbg !36
  %2344 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2336, !dbg !36
  %2345 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2337, !dbg !36
  %2346 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2338, !dbg !36
  %2347 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2339, !dbg !36
  %2348 = getelementptr bfloat, ptr addrspace(1) %29, i64 %2340, !dbg !36
  %2349 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %2307, !dbg !36
  %2350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %144, !dbg !36
  %2351 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %146, !dbg !36
  %2352 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %148, !dbg !36
  %2353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %150, !dbg !36
  %2354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %152, !dbg !36
  %2355 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %154, !dbg !36
  %2356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %156, !dbg !36
  %2357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2349, i32 %158, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2350, ptr addrspace(1) %2341, i32 %2325) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2351, ptr addrspace(1) %2342, i32 %2326) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2352, ptr addrspace(1) %2343, i32 %2327) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2353, ptr addrspace(1) %2344, i32 %2328) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2354, ptr addrspace(1) %2345, i32 %2329) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2355, ptr addrspace(1) %2346, i32 %2330) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2356, ptr addrspace(1) %2347, i32 %2331) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2357, ptr addrspace(1) %2348, i32 %2332) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %2358 = add nsw i64 %2262, %79, !dbg !37
  %2359 = add nsw i64 %2263, %79, !dbg !37
  %2360 = add nsw i64 %2264, %79, !dbg !37
  %2361 = add nsw i64 %2265, %79, !dbg !37
  %2362 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2358, !dbg !37
  %2363 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2359, !dbg !37
  %2364 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2360, !dbg !37
  %2365 = getelementptr bfloat, ptr addrspace(1) %27, i64 %2361, !dbg !37
  %2366 = and i1 %82, %2303, !dbg !37
  %2367 = and i1 %82, %2304, !dbg !37
  %2368 = and i1 %82, %2305, !dbg !37
  %2369 = and i1 %82, %2306, !dbg !37
  %2370 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %2307, !dbg !37
  %2371 = and i1 %666, %2366, !dbg !34
  %2372 = and i1 %666, %2367, !dbg !34
  %2373 = and i1 %666, %2368, !dbg !34
  %2374 = and i1 %666, %2369, !dbg !34
  %2375 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2370, i32 %211, !dbg !37
  %2376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2370, i32 %213, !dbg !37
  %2377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2370, i32 %218, !dbg !37
  %2378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2370, i32 %220, !dbg !37
  %2379 = select i1 %2371, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2375, ptr addrspace(1) %2362, i32 %2379) #2, !dbg !37
  %2380 = select i1 %2372, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2376, ptr addrspace(1) %2363, i32 %2380) #2, !dbg !37
  %2381 = select i1 %2373, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2377, ptr addrspace(1) %2364, i32 %2381) #2, !dbg !37
  %2382 = select i1 %2374, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2378, ptr addrspace(1) %2365, i32 %2382) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx507 = shl nsw i64 %2253, 7, !dbg !38
  %2383 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx507, !dbg !38
  %2384 = icmp slt i64 %2253, %88, !dbg !38
  %2385 = and i1 %2282, %2384, !dbg !38
  %.idx508 = shl i32 %2237, 8, !dbg !38
  %2386 = and i1 %666, %2385, !dbg !34
  %gep610 = getelementptr i8, ptr addrspace(3) %229, i32 %.idx508, !dbg !38
  %2387 = select i1 %2386, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep610, ptr addrspace(1) %2383, i32 %2387) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %2388 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2266, !dbg !39
  %2389 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2267, !dbg !39
  %2390 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2268, !dbg !39
  %2391 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2269, !dbg !39
  %2392 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2270, !dbg !39
  %2393 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2271, !dbg !39
  %2394 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2272, !dbg !39
  %2395 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2273, !dbg !39
  %2396 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %2307, !dbg !39
  %2397 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %144, !dbg !39
  %2398 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %146, !dbg !39
  %2399 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %148, !dbg !39
  %2400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %150, !dbg !39
  %2401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %152, !dbg !39
  %2402 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %154, !dbg !39
  %2403 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %156, !dbg !39
  %2404 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2396, i32 %158, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2397, ptr addrspace(1) %2388, i32 %2325) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2398, ptr addrspace(1) %2389, i32 %2326) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2399, ptr addrspace(1) %2390, i32 %2327) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2400, ptr addrspace(1) %2391, i32 %2328) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2401, ptr addrspace(1) %2392, i32 %2329) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2402, ptr addrspace(1) %2393, i32 %2330) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2403, ptr addrspace(1) %2394, i32 %2331) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2404, ptr addrspace(1) %2395, i32 %2332) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %2405 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2333, !dbg !40
  %2406 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2334, !dbg !40
  %2407 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2335, !dbg !40
  %2408 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2336, !dbg !40
  %2409 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2337, !dbg !40
  %2410 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2338, !dbg !40
  %2411 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2339, !dbg !40
  %2412 = getelementptr bfloat, ptr addrspace(1) %28, i64 %2340, !dbg !40
  %2413 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %2307, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %2414 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %144, !dbg !40
  %2415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %146, !dbg !40
  %2416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %148, !dbg !40
  %2417 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %150, !dbg !40
  %2418 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %152, !dbg !40
  %2419 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %154, !dbg !40
  %2420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %156, !dbg !40
  %2421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2413, i32 %158, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2414, ptr addrspace(1) %2405, i32 %2325) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2415, ptr addrspace(1) %2406, i32 %2326) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2416, ptr addrspace(1) %2407, i32 %2327) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2417, ptr addrspace(1) %2408, i32 %2328) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2418, ptr addrspace(1) %2409, i32 %2329) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2419, ptr addrspace(1) %2410, i32 %2330) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2420, ptr addrspace(1) %2411, i32 %2331) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2421, ptr addrspace(1) %2412, i32 %2332) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %597, !dbg !34

._crit_edge:                                      ; preds = %597, %.._crit_edge_crit_edge
  %.pre-phi633 = phi i32 [ %.pre632, %.._crit_edge_crit_edge ], [ %435, %597 ], !dbg !41
  %.pre-phi631 = phi i32 [ %.pre630, %.._crit_edge_crit_edge ], [ %449, %597 ], !dbg !41
  %2422 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1979, %597 ]
  %2423 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1980, %597 ]
  %2424 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1981, %597 ]
  %2425 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1982, %597 ]
  %2426 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1984, %597 ]
  %2427 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1985, %597 ]
  %2428 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1986, %597 ]
  %2429 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1987, %597 ]
  %2430 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1989, %597 ]
  %2431 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1990, %597 ]
  %2432 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1991, %597 ]
  %2433 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1992, %597 ]
  %2434 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1994, %597 ]
  %2435 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1995, %597 ]
  %2436 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1996, %597 ]
  %2437 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1997, %597 ]
  %2438 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %1999, %597 ]
  %2439 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2000, %597 ]
  %2440 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2001, %597 ]
  %2441 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2002, %597 ]
  %2442 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2004, %597 ]
  %2443 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2005, %597 ]
  %2444 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2006, %597 ]
  %2445 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2007, %597 ]
  %2446 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2009, %597 ]
  %2447 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2010, %597 ]
  %2448 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2011, %597 ]
  %2449 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2012, %597 ]
  %2450 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2014, %597 ]
  %2451 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2015, %597 ]
  %2452 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2016, %597 ]
  %2453 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2017, %597 ]
  %2454 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2196, %597 ]
  %2455 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2197, %597 ]
  %2456 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2198, %597 ]
  %2457 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2199, %597 ]
  %2458 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2201, %597 ]
  %2459 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2202, %597 ]
  %2460 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2203, %597 ]
  %2461 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2204, %597 ]
  %2462 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2206, %597 ]
  %2463 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2207, %597 ]
  %2464 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2208, %597 ]
  %2465 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2209, %597 ]
  %2466 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2211, %597 ]
  %2467 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2212, %597 ]
  %2468 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2213, %597 ]
  %2469 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2214, %597 ]
  %2470 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2216, %597 ]
  %2471 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2217, %597 ]
  %2472 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2218, %597 ]
  %2473 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2219, %597 ]
  %2474 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2221, %597 ]
  %2475 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2222, %597 ]
  %2476 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2223, %597 ]
  %2477 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2224, %597 ]
  %2478 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2226, %597 ]
  %2479 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2227, %597 ]
  %2480 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2228, %597 ]
  %2481 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2229, %597 ]
  %2482 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2231, %597 ]
  %2483 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2232, %597 ]
  %2484 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2233, %597 ]
  %2485 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %2234, %597 ]
  %2486 = zext nneg i32 %15 to i64, !dbg !69
  %2487 = getelementptr float, ptr addrspace(1) %6, i64 %2486, !dbg !69
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %2488 = shl nuw nsw i32 %33, 2, !dbg !41
  %2489 = and i32 %2488, 28, !dbg !41
  %2490 = zext nneg i32 %2489 to i64, !dbg !41
  %2491 = or disjoint i64 %2490, %32, !dbg !41
  %.idx213 = shl nuw nsw i64 %68, 9, !dbg !41
  %2492 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx213, !dbg !41
  %2493 = getelementptr float, ptr addrspace(1) %2492, i64 %2491, !dbg !41
  %.idx214 = shl nuw nsw i64 %69, 9, !dbg !41
  %2494 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx214, !dbg !41
  %2495 = getelementptr float, ptr addrspace(1) %2494, i64 %2491, !dbg !41
  %.idx215 = shl nuw nsw i64 %70, 9, !dbg !41
  %2496 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx215, !dbg !41
  %2497 = getelementptr float, ptr addrspace(1) %2496, i64 %2491, !dbg !41
  %.idx216 = shl nuw nsw i64 %71, 9, !dbg !41
  %2498 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx216, !dbg !41
  %2499 = getelementptr float, ptr addrspace(1) %2498, i64 %2491, !dbg !41
  %.idx217 = shl nuw nsw i64 %72, 9, !dbg !41
  %2500 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx217, !dbg !41
  %2501 = getelementptr float, ptr addrspace(1) %2500, i64 %2491, !dbg !41
  %.idx218 = shl nuw nsw i64 %73, 9, !dbg !41
  %2502 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx218, !dbg !41
  %2503 = getelementptr float, ptr addrspace(1) %2502, i64 %2491, !dbg !41
  %.idx219 = shl nuw nsw i64 %74, 9, !dbg !41
  %2504 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx219, !dbg !41
  %2505 = getelementptr float, ptr addrspace(1) %2504, i64 %2491, !dbg !41
  %.idx220 = shl nuw nsw i64 %75, 9, !dbg !41
  %2506 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx220, !dbg !41
  %2507 = getelementptr float, ptr addrspace(1) %2506, i64 %2491, !dbg !41
  %2508 = icmp slt i64 %2491, 128, !dbg !41
  %2509 = and i1 %80, %2508, !dbg !41
  %2510 = and i32 %54, 192, !dbg !41
  %2511 = or disjoint i32 %2510, %.pre-phi631, !dbg !41
  %2512 = or disjoint i32 %2511, %.pre-phi633, !dbg !41
  %2513 = or disjoint i32 %2512, %56, !dbg !41
  %2514 = and i32 %2488, 252, !dbg !41
  %2515 = lshr i32 %2513, 3, !dbg !41
  %2516 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2515, !dbg !41
  %2517 = getelementptr inbounds nuw float, ptr addrspace(3) %2516, i32 %2513, !dbg !41
  %2518 = insertelement <2 x float> poison, float %2422, i64 0, !dbg !41
  %2519 = insertelement <2 x float> %2518, float %2423, i64 1, !dbg !41
  store <2 x float> %2519, ptr addrspace(3) %2517, align 8, !dbg !41
  %2520 = or disjoint i32 %2513, 256, !dbg !41
  %2521 = lshr i32 %2520, 3, !dbg !41
  %2522 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2521, !dbg !41
  %2523 = getelementptr inbounds nuw float, ptr addrspace(3) %2522, i32 %2520, !dbg !41
  %2524 = insertelement <2 x float> poison, float %2424, i64 0, !dbg !41
  %2525 = insertelement <2 x float> %2524, float %2425, i64 1, !dbg !41
  store <2 x float> %2525, ptr addrspace(3) %2523, align 8, !dbg !41
  %2526 = getelementptr inbounds nuw i8, ptr addrspace(3) %2517, i32 32, !dbg !41
  %2527 = insertelement <2 x float> poison, float %2426, i64 0, !dbg !41
  %2528 = insertelement <2 x float> %2527, float %2427, i64 1, !dbg !41
  store <2 x float> %2528, ptr addrspace(3) %2526, align 8, !dbg !41
  %2529 = or disjoint i32 %2513, 264, !dbg !41
  %2530 = lshr i32 %2529, 3, !dbg !41
  %2531 = and i32 %2530, 536870908, !dbg !41
  %2532 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2531, !dbg !41
  %2533 = getelementptr inbounds nuw float, ptr addrspace(3) %2532, i32 %2529, !dbg !41
  %2534 = insertelement <2 x float> poison, float %2428, i64 0, !dbg !41
  %2535 = insertelement <2 x float> %2534, float %2429, i64 1, !dbg !41
  store <2 x float> %2535, ptr addrspace(3) %2533, align 8, !dbg !41
  %2536 = getelementptr inbounds nuw i8, ptr addrspace(3) %2517, i32 64, !dbg !41
  %2537 = insertelement <2 x float> poison, float %2430, i64 0, !dbg !41
  %2538 = insertelement <2 x float> %2537, float %2431, i64 1, !dbg !41
  store <2 x float> %2538, ptr addrspace(3) %2536, align 8, !dbg !41
  %2539 = or disjoint i32 %2513, 272, !dbg !41
  %2540 = lshr i32 %2539, 3, !dbg !41
  %2541 = and i32 %2540, 536870908, !dbg !41
  %2542 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2541, !dbg !41
  %2543 = getelementptr inbounds nuw float, ptr addrspace(3) %2542, i32 %2539, !dbg !41
  %2544 = insertelement <2 x float> poison, float %2432, i64 0, !dbg !41
  %2545 = insertelement <2 x float> %2544, float %2433, i64 1, !dbg !41
  store <2 x float> %2545, ptr addrspace(3) %2543, align 8, !dbg !41
  %2546 = getelementptr inbounds nuw i8, ptr addrspace(3) %2517, i32 96, !dbg !41
  %2547 = insertelement <2 x float> poison, float %2434, i64 0, !dbg !41
  %2548 = insertelement <2 x float> %2547, float %2435, i64 1, !dbg !41
  store <2 x float> %2548, ptr addrspace(3) %2546, align 8, !dbg !41
  %2549 = or disjoint i32 %2513, 280, !dbg !41
  %2550 = lshr i32 %2549, 3, !dbg !41
  %2551 = and i32 %2550, 536870908, !dbg !41
  %2552 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2551, !dbg !41
  %2553 = getelementptr inbounds nuw float, ptr addrspace(3) %2552, i32 %2549, !dbg !41
  %2554 = insertelement <2 x float> poison, float %2436, i64 0, !dbg !41
  %2555 = insertelement <2 x float> %2554, float %2437, i64 1, !dbg !41
  store <2 x float> %2555, ptr addrspace(3) %2553, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2556 = lshr i32 %33, 1, !dbg !41
  %2557 = and i32 %2556, 28, !dbg !41
  %2558 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2557, !dbg !41
  %2559 = getelementptr inbounds nuw float, ptr addrspace(3) %2558, i32 %2514, !dbg !41
  %2560 = load <4 x i32>, ptr addrspace(3) %2559, align 16, !dbg !41
  %2561 = or disjoint i32 %2514, 256, !dbg !41
  %2562 = lshr i32 %2561, 3, !dbg !41
  %2563 = and i32 %2562, 60, !dbg !41
  %2564 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2563, !dbg !41
  %2565 = getelementptr inbounds nuw float, ptr addrspace(3) %2564, i32 %2561, !dbg !41
  %2566 = load <4 x i32>, ptr addrspace(3) %2565, align 16, !dbg !41
  %2567 = or disjoint i32 %2514, 512, !dbg !41
  %2568 = lshr i32 %2567, 3, !dbg !41
  %2569 = and i32 %2568, 92, !dbg !41
  %2570 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2569, !dbg !41
  %2571 = getelementptr inbounds nuw float, ptr addrspace(3) %2570, i32 %2567, !dbg !41
  %2572 = load <4 x i32>, ptr addrspace(3) %2571, align 16, !dbg !41
  %2573 = or disjoint i32 %2514, 768, !dbg !41
  %2574 = lshr i32 %2573, 3, !dbg !41
  %2575 = and i32 %2574, 124, !dbg !41
  %2576 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2575, !dbg !41
  %2577 = getelementptr inbounds nuw float, ptr addrspace(3) %2576, i32 %2573, !dbg !41
  %2578 = load <4 x i32>, ptr addrspace(3) %2577, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2579 = insertelement <2 x float> poison, float %2438, i64 0, !dbg !41
  %2580 = insertelement <2 x float> %2579, float %2439, i64 1, !dbg !41
  store <2 x float> %2580, ptr addrspace(3) %2517, align 8, !dbg !41
  %2581 = insertelement <2 x float> poison, float %2440, i64 0, !dbg !41
  %2582 = insertelement <2 x float> %2581, float %2441, i64 1, !dbg !41
  store <2 x float> %2582, ptr addrspace(3) %2523, align 8, !dbg !41
  %2583 = insertelement <2 x float> poison, float %2442, i64 0, !dbg !41
  %2584 = insertelement <2 x float> %2583, float %2443, i64 1, !dbg !41
  store <2 x float> %2584, ptr addrspace(3) %2526, align 8, !dbg !41
  %2585 = insertelement <2 x float> poison, float %2444, i64 0, !dbg !41
  %2586 = insertelement <2 x float> %2585, float %2445, i64 1, !dbg !41
  store <2 x float> %2586, ptr addrspace(3) %2533, align 8, !dbg !41
  %2587 = insertelement <2 x float> poison, float %2446, i64 0, !dbg !41
  %2588 = insertelement <2 x float> %2587, float %2447, i64 1, !dbg !41
  store <2 x float> %2588, ptr addrspace(3) %2536, align 8, !dbg !41
  %2589 = insertelement <2 x float> poison, float %2448, i64 0, !dbg !41
  %2590 = insertelement <2 x float> %2589, float %2449, i64 1, !dbg !41
  store <2 x float> %2590, ptr addrspace(3) %2543, align 8, !dbg !41
  %2591 = insertelement <2 x float> poison, float %2450, i64 0, !dbg !41
  %2592 = insertelement <2 x float> %2591, float %2451, i64 1, !dbg !41
  store <2 x float> %2592, ptr addrspace(3) %2546, align 8, !dbg !41
  %2593 = insertelement <2 x float> poison, float %2452, i64 0, !dbg !41
  %2594 = insertelement <2 x float> %2593, float %2453, i64 1, !dbg !41
  store <2 x float> %2594, ptr addrspace(3) %2553, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %2595 = load <4 x i32>, ptr addrspace(3) %2559, align 16, !dbg !41
  %2596 = load <4 x i32>, ptr addrspace(3) %2565, align 16, !dbg !41
  %2597 = load <4 x i32>, ptr addrspace(3) %2571, align 16, !dbg !41
  %2598 = load <4 x i32>, ptr addrspace(3) %2577, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %2560, i64 0, !dbg !41
  %.extract252 = extractelement <4 x i32> %2560, i64 1, !dbg !41
  %.extract253 = extractelement <4 x i32> %2560, i64 2, !dbg !41
  %.extract254 = extractelement <4 x i32> %2560, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract252, i32 %.extract253, i32 %.extract254, ptr addrspace(1) %2493, i1 %2509) #2, !dbg !41
  %.extract255 = extractelement <4 x i32> %2566, i64 0, !dbg !41
  %.extract256 = extractelement <4 x i32> %2566, i64 1, !dbg !41
  %.extract257 = extractelement <4 x i32> %2566, i64 2, !dbg !41
  %.extract258 = extractelement <4 x i32> %2566, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract255, i32 %.extract256, i32 %.extract257, i32 %.extract258, ptr addrspace(1) %2495, i1 %2509) #2, !dbg !41
  %.extract259 = extractelement <4 x i32> %2572, i64 0, !dbg !41
  %.extract260 = extractelement <4 x i32> %2572, i64 1, !dbg !41
  %.extract261 = extractelement <4 x i32> %2572, i64 2, !dbg !41
  %.extract262 = extractelement <4 x i32> %2572, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract259, i32 %.extract260, i32 %.extract261, i32 %.extract262, ptr addrspace(1) %2497, i1 %2509) #2, !dbg !41
  %.extract263 = extractelement <4 x i32> %2578, i64 0, !dbg !41
  %.extract264 = extractelement <4 x i32> %2578, i64 1, !dbg !41
  %.extract265 = extractelement <4 x i32> %2578, i64 2, !dbg !41
  %.extract266 = extractelement <4 x i32> %2578, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract263, i32 %.extract264, i32 %.extract265, i32 %.extract266, ptr addrspace(1) %2499, i1 %2509) #2, !dbg !41
  %.extract267 = extractelement <4 x i32> %2595, i64 0, !dbg !41
  %.extract268 = extractelement <4 x i32> %2595, i64 1, !dbg !41
  %.extract269 = extractelement <4 x i32> %2595, i64 2, !dbg !41
  %.extract270 = extractelement <4 x i32> %2595, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract267, i32 %.extract268, i32 %.extract269, i32 %.extract270, ptr addrspace(1) %2501, i1 %2509) #2, !dbg !41
  %.extract271 = extractelement <4 x i32> %2596, i64 0, !dbg !41
  %.extract272 = extractelement <4 x i32> %2596, i64 1, !dbg !41
  %.extract273 = extractelement <4 x i32> %2596, i64 2, !dbg !41
  %.extract274 = extractelement <4 x i32> %2596, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract271, i32 %.extract272, i32 %.extract273, i32 %.extract274, ptr addrspace(1) %2503, i1 %2509) #2, !dbg !41
  %.extract275 = extractelement <4 x i32> %2597, i64 0, !dbg !41
  %.extract276 = extractelement <4 x i32> %2597, i64 1, !dbg !41
  %.extract277 = extractelement <4 x i32> %2597, i64 2, !dbg !41
  %.extract278 = extractelement <4 x i32> %2597, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract275, i32 %.extract276, i32 %.extract277, i32 %.extract278, ptr addrspace(1) %2505, i1 %2509) #2, !dbg !41
  %.extract279 = extractelement <4 x i32> %2598, i64 0, !dbg !41
  %.extract280 = extractelement <4 x i32> %2598, i64 1, !dbg !41
  %.extract281 = extractelement <4 x i32> %2598, i64 2, !dbg !41
  %.extract282 = extractelement <4 x i32> %2598, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract279, i32 %.extract280, i32 %.extract281, i32 %.extract282, ptr addrspace(1) %2507, i1 %2509) #2, !dbg !41
  %.idx283 = shl nuw nsw i64 %264, 9, !dbg !70
  %2599 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx283, !dbg !70
  %2600 = getelementptr float, ptr addrspace(1) %2599, i64 %2491, !dbg !70
  %.idx284 = shl nuw nsw i64 %265, 9, !dbg !70
  %2601 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx284, !dbg !70
  %2602 = getelementptr float, ptr addrspace(1) %2601, i64 %2491, !dbg !70
  %.idx285 = shl nuw nsw i64 %266, 9, !dbg !70
  %2603 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx285, !dbg !70
  %2604 = getelementptr float, ptr addrspace(1) %2603, i64 %2491, !dbg !70
  %.idx286 = shl nuw nsw i64 %267, 9, !dbg !70
  %2605 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx286, !dbg !70
  %2606 = getelementptr float, ptr addrspace(1) %2605, i64 %2491, !dbg !70
  %.idx287 = shl nuw nsw i64 %268, 9, !dbg !70
  %2607 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx287, !dbg !70
  %2608 = getelementptr float, ptr addrspace(1) %2607, i64 %2491, !dbg !70
  %.idx288 = shl nuw nsw i64 %269, 9, !dbg !70
  %2609 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx288, !dbg !70
  %2610 = getelementptr float, ptr addrspace(1) %2609, i64 %2491, !dbg !70
  %.idx289 = shl nuw nsw i64 %270, 9, !dbg !70
  %2611 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx289, !dbg !70
  %2612 = getelementptr float, ptr addrspace(1) %2611, i64 %2491, !dbg !70
  %.idx290 = shl nuw nsw i64 %271, 9, !dbg !70
  %2613 = getelementptr i8, ptr addrspace(1) %2487, i64 %.idx290, !dbg !70
  %2614 = getelementptr float, ptr addrspace(1) %2613, i64 %2491, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2615 = insertelement <2 x float> poison, float %2454, i64 0, !dbg !70
  %2616 = insertelement <2 x float> %2615, float %2455, i64 1, !dbg !70
  store <2 x float> %2616, ptr addrspace(3) %2517, align 8, !dbg !70
  %2617 = insertelement <2 x float> poison, float %2456, i64 0, !dbg !70
  %2618 = insertelement <2 x float> %2617, float %2457, i64 1, !dbg !70
  store <2 x float> %2618, ptr addrspace(3) %2523, align 8, !dbg !70
  %2619 = insertelement <2 x float> poison, float %2458, i64 0, !dbg !70
  %2620 = insertelement <2 x float> %2619, float %2459, i64 1, !dbg !70
  store <2 x float> %2620, ptr addrspace(3) %2526, align 8, !dbg !70
  %2621 = insertelement <2 x float> poison, float %2460, i64 0, !dbg !70
  %2622 = insertelement <2 x float> %2621, float %2461, i64 1, !dbg !70
  store <2 x float> %2622, ptr addrspace(3) %2533, align 8, !dbg !70
  %2623 = insertelement <2 x float> poison, float %2462, i64 0, !dbg !70
  %2624 = insertelement <2 x float> %2623, float %2463, i64 1, !dbg !70
  store <2 x float> %2624, ptr addrspace(3) %2536, align 8, !dbg !70
  %2625 = insertelement <2 x float> poison, float %2464, i64 0, !dbg !70
  %2626 = insertelement <2 x float> %2625, float %2465, i64 1, !dbg !70
  store <2 x float> %2626, ptr addrspace(3) %2543, align 8, !dbg !70
  %2627 = insertelement <2 x float> poison, float %2466, i64 0, !dbg !70
  %2628 = insertelement <2 x float> %2627, float %2467, i64 1, !dbg !70
  store <2 x float> %2628, ptr addrspace(3) %2546, align 8, !dbg !70
  %2629 = insertelement <2 x float> poison, float %2468, i64 0, !dbg !70
  %2630 = insertelement <2 x float> %2629, float %2469, i64 1, !dbg !70
  store <2 x float> %2630, ptr addrspace(3) %2553, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2631 = load <4 x i32>, ptr addrspace(3) %2559, align 16, !dbg !70
  %2632 = load <4 x i32>, ptr addrspace(3) %2565, align 16, !dbg !70
  %2633 = load <4 x i32>, ptr addrspace(3) %2571, align 16, !dbg !70
  %2634 = load <4 x i32>, ptr addrspace(3) %2577, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2635 = insertelement <2 x float> poison, float %2470, i64 0, !dbg !70
  %2636 = insertelement <2 x float> %2635, float %2471, i64 1, !dbg !70
  store <2 x float> %2636, ptr addrspace(3) %2517, align 8, !dbg !70
  %2637 = insertelement <2 x float> poison, float %2472, i64 0, !dbg !70
  %2638 = insertelement <2 x float> %2637, float %2473, i64 1, !dbg !70
  store <2 x float> %2638, ptr addrspace(3) %2523, align 8, !dbg !70
  %2639 = insertelement <2 x float> poison, float %2474, i64 0, !dbg !70
  %2640 = insertelement <2 x float> %2639, float %2475, i64 1, !dbg !70
  store <2 x float> %2640, ptr addrspace(3) %2526, align 8, !dbg !70
  %2641 = insertelement <2 x float> poison, float %2476, i64 0, !dbg !70
  %2642 = insertelement <2 x float> %2641, float %2477, i64 1, !dbg !70
  store <2 x float> %2642, ptr addrspace(3) %2533, align 8, !dbg !70
  %2643 = insertelement <2 x float> poison, float %2478, i64 0, !dbg !70
  %2644 = insertelement <2 x float> %2643, float %2479, i64 1, !dbg !70
  store <2 x float> %2644, ptr addrspace(3) %2536, align 8, !dbg !70
  %2645 = insertelement <2 x float> poison, float %2480, i64 0, !dbg !70
  %2646 = insertelement <2 x float> %2645, float %2481, i64 1, !dbg !70
  store <2 x float> %2646, ptr addrspace(3) %2543, align 8, !dbg !70
  %2647 = insertelement <2 x float> poison, float %2482, i64 0, !dbg !70
  %2648 = insertelement <2 x float> %2647, float %2483, i64 1, !dbg !70
  store <2 x float> %2648, ptr addrspace(3) %2546, align 8, !dbg !70
  %2649 = insertelement <2 x float> poison, float %2484, i64 0, !dbg !70
  %2650 = insertelement <2 x float> %2649, float %2485, i64 1, !dbg !70
  store <2 x float> %2650, ptr addrspace(3) %2553, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %2651 = load <4 x i32>, ptr addrspace(3) %2559, align 16, !dbg !70
  %2652 = load <4 x i32>, ptr addrspace(3) %2565, align 16, !dbg !70
  %2653 = load <4 x i32>, ptr addrspace(3) %2571, align 16, !dbg !70
  %2654 = load <4 x i32>, ptr addrspace(3) %2577, align 16, !dbg !70
  %.extract322 = extractelement <4 x i32> %2631, i64 0, !dbg !70
  %.extract323 = extractelement <4 x i32> %2631, i64 1, !dbg !70
  %.extract324 = extractelement <4 x i32> %2631, i64 2, !dbg !70
  %.extract325 = extractelement <4 x i32> %2631, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract322, i32 %.extract323, i32 %.extract324, i32 %.extract325, ptr addrspace(1) %2600, i1 %2509) #2, !dbg !70
  %.extract326 = extractelement <4 x i32> %2632, i64 0, !dbg !70
  %.extract327 = extractelement <4 x i32> %2632, i64 1, !dbg !70
  %.extract328 = extractelement <4 x i32> %2632, i64 2, !dbg !70
  %.extract329 = extractelement <4 x i32> %2632, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract326, i32 %.extract327, i32 %.extract328, i32 %.extract329, ptr addrspace(1) %2602, i1 %2509) #2, !dbg !70
  %.extract330 = extractelement <4 x i32> %2633, i64 0, !dbg !70
  %.extract331 = extractelement <4 x i32> %2633, i64 1, !dbg !70
  %.extract332 = extractelement <4 x i32> %2633, i64 2, !dbg !70
  %.extract333 = extractelement <4 x i32> %2633, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract330, i32 %.extract331, i32 %.extract332, i32 %.extract333, ptr addrspace(1) %2604, i1 %2509) #2, !dbg !70
  %.extract334 = extractelement <4 x i32> %2634, i64 0, !dbg !70
  %.extract335 = extractelement <4 x i32> %2634, i64 1, !dbg !70
  %.extract336 = extractelement <4 x i32> %2634, i64 2, !dbg !70
  %.extract337 = extractelement <4 x i32> %2634, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract334, i32 %.extract335, i32 %.extract336, i32 %.extract337, ptr addrspace(1) %2606, i1 %2509) #2, !dbg !70
  %.extract338 = extractelement <4 x i32> %2651, i64 0, !dbg !70
  %.extract339 = extractelement <4 x i32> %2651, i64 1, !dbg !70
  %.extract340 = extractelement <4 x i32> %2651, i64 2, !dbg !70
  %.extract341 = extractelement <4 x i32> %2651, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract338, i32 %.extract339, i32 %.extract340, i32 %.extract341, ptr addrspace(1) %2608, i1 %2509) #2, !dbg !70
  %.extract342 = extractelement <4 x i32> %2652, i64 0, !dbg !70
  %.extract343 = extractelement <4 x i32> %2652, i64 1, !dbg !70
  %.extract344 = extractelement <4 x i32> %2652, i64 2, !dbg !70
  %.extract345 = extractelement <4 x i32> %2652, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract342, i32 %.extract343, i32 %.extract344, i32 %.extract345, ptr addrspace(1) %2610, i1 %2509) #2, !dbg !70
  %.extract346 = extractelement <4 x i32> %2653, i64 0, !dbg !70
  %.extract347 = extractelement <4 x i32> %2653, i64 1, !dbg !70
  %.extract348 = extractelement <4 x i32> %2653, i64 2, !dbg !70
  %.extract349 = extractelement <4 x i32> %2653, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract346, i32 %.extract347, i32 %.extract348, i32 %.extract349, ptr addrspace(1) %2612, i1 %2509) #2, !dbg !70
  %.extract350 = extractelement <4 x i32> %2654, i64 0, !dbg !70
  %.extract351 = extractelement <4 x i32> %2654, i64 1, !dbg !70
  %.extract352 = extractelement <4 x i32> %2654, i64 2, !dbg !70
  %.extract353 = extractelement <4 x i32> %2654, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract350, i32 %.extract351, i32 %.extract352, i32 %.extract353, ptr addrspace(1) %2614, i1 %2509) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 211, column: 23, scope: !5)
!42 = !DILocation(line: 113, column: 43, scope: !5)
!43 = !DILocation(line: 113, column: 37, scope: !5)
!44 = !DILocation(line: 114, column: 31, scope: !5)
!45 = !DILocation(line: 117, column: 35, scope: !5)
!46 = !DILocation(line: 127, column: 26, scope: !5)
!47 = !DILocation(line: 131, column: 31, scope: !5)
!48 = !DILocation(line: 141, column: 52, scope: !5)
!49 = !DILocation(line: 145, column: 33, scope: !5)
!50 = !DILocation(line: 145, column: 26, scope: !5)
!51 = !DILocation(line: 147, column: 30, scope: !5)
!52 = !DILocation(line: 147, column: 39, scope: !5)
!53 = !DILocation(line: 149, column: 30, scope: !5)
!54 = !DILocation(line: 149, column: 50, scope: !5)
!55 = !DILocation(line: 150, column: 56, scope: !5)
!56 = !DILocation(line: 150, column: 45, scope: !5)
!57 = !DILocation(line: 150, column: 60, scope: !5)
!58 = !DILocation(line: 150, column: 31, scope: !5)
!59 = !DILocation(line: 153, column: 53, scope: !5)
!60 = !DILocation(line: 153, column: 42, scope: !5)
!61 = !DILocation(line: 153, column: 59, scope: !5)
!62 = !DILocation(line: 153, column: 24, scope: !5)
!63 = !DILocation(line: 154, column: 27, scope: !5)
!64 = !DILocation(line: 155, column: 20, scope: !5)
!65 = !DILocation(line: 157, column: 24, scope: !5)
!66 = !DILocation(line: 179, column: 21, scope: !5)
!67 = !DILocation(line: 186, column: 28, scope: !5)
!68 = !DILocation(line: 193, column: 32, scope: !5)
!69 = !DILocation(line: 95, column: 18, scope: !5)
!70 = !DILocation(line: 214, column: 27, scope: !5)
!71 = !DILocation(line: 209, column: 4, scope: !5)
