#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64xi64, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<4096> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_11 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %cst_12 = arith.constant dense<128> : tensor<1x32xi64, #blocked3> loc(#loc1)
    %cst_13 = arith.constant dense<128> : tensor<1x32xi64, #blocked4> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<1x32xi64, #blocked3> loc(#loc1)
    %cst_15 = arith.constant dense<0> : tensor<1x32xi64, #blocked4> loc(#loc1)
    %cst_16 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_17 = arith.constant dense<0> : tensor<64x1xi64, #blocked4> loc(#loc1)
    %cst_18 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_19 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_20 = arith.constant dense<128> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_21 = arith.constant dense<128> : tensor<64x1xi64, #blocked4> loc(#loc1)
    %cst_22 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_23 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_24 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_25 = arith.constant dense<64> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_26 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc72)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc73)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c32_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %29 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc26)
    %30 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %31 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %32 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %33 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %34 = arith.extsi %27 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %35 = arith.extsi %29 : tensor<64xi32, #blocked> to tensor<64xi64, #blocked> loc(#loc26)
    %36 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc26)
    %37 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc26)
    %38 = arith.muli %36, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %39 = tt.broadcast %38 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc26)
    %40 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %41 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %42 = arith.extsi %41 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %43 = arith.addi %40, %42 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %44 = tt.expand_dims %43 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi64, #blocked3> loc(#loc26)
    %45 = tt.broadcast %44 : tensor<1x32xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc26)
    %46 = arith.addi %39, %45 : tensor<64x32xi64, #blocked3> loc(#loc26)
    %47 = arith.cmpi sge, %36, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %48 = arith.cmpi sge, %37, %cst_19 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %49 = arith.cmpi slt, %36, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc26)
    %50 = arith.cmpi slt, %37, %cst_22 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %51 = arith.andi %47, %49 : tensor<64x1xi1, #blocked3> loc(#loc26)
    %52 = arith.andi %48, %50 : tensor<64x1xi1, #blocked1> loc(#loc26)
    %53 = tt.broadcast %51 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc26)
    %54 = arith.cmpi sge, %44, %cst_14 : tensor<1x32xi64, #blocked3> loc(#loc26)
    %55 = arith.cmpi slt, %44, %cst_12 : tensor<1x32xi64, #blocked3> loc(#loc26)
    %56 = arith.andi %54, %55 : tensor<1x32xi1, #blocked3> loc(#loc26)
    %57 = tt.broadcast %56 : tensor<1x32xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc26)
    %58 = arith.andi %53, %57 : tensor<64x32xi1, #blocked3> loc(#loc26)
    %59 = arith.addi %30, %cst_8 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc27)
    %60 = arith.addi %32, %cst_10 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %61 = arith.addi %33, %cst_11 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %62 = tt.expand_dims %59 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc27)
    %63 = tt.expand_dims %60 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc27)
    %64 = arith.muli %62, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %65 = tt.broadcast %64 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc27)
    %66 = arith.addi %65, %45 : tensor<64x32xi64, #blocked3> loc(#loc27)
    %67 = arith.cmpi sge, %62, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %68 = arith.cmpi sge, %63, %cst_19 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %69 = arith.cmpi slt, %62, %cst_20 : tensor<64x1xi64, #blocked3> loc(#loc27)
    %70 = arith.cmpi slt, %63, %cst_22 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %71 = arith.andi %67, %69 : tensor<64x1xi1, #blocked3> loc(#loc27)
    %72 = arith.andi %68, %70 : tensor<64x1xi1, #blocked1> loc(#loc27)
    %73 = tt.broadcast %71 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc27)
    %74 = arith.andi %73, %57 : tensor<64x32xi1, #blocked3> loc(#loc27)
    %75 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %76 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc29)
    %77 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc29)
    %78 = tt.broadcast %77 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %79 = tt.splat %75 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %80 = tt.splat %75 : i64 -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %81 = arith.cmpi sge, %77, %cst_4 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %82 = arith.cmpi slt, %77, %cst_3 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %83 = arith.andi %81, %82 : tensor<1x64xi1, #blocked2> loc(#loc29)
    %84 = tt.broadcast %83 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %85 = tt.expand_dims %61 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc30)
    %86 = tt.broadcast %85 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc30)
    %87 = arith.cmpi sge, %85, %cst_4 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %88 = arith.cmpi slt, %85, %cst_3 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %89 = arith.andi %87, %88 : tensor<1x64xi1, #blocked2> loc(#loc30)
    %90 = tt.broadcast %89 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc30)
    %91 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc31)
    %92 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc32)
    %93 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %94 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %95 = tt.addptr %94, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %96 = tt.splat %95 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %97 = tt.splat %75 : i64 -> tensor<64xi64, #blocked> loc(#loc36)
    %98 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    %99 = tt.broadcast %37 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %100 = tt.broadcast %52 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %101 = tt.splat %75 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %102 = tt.broadcast %63 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc38)
    %103 = tt.broadcast %72 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %105 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %106 = ttg.local_alloc : () -> !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> loc(#loc31)
    %107 = ttg.local_alloc : () -> !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> loc(#loc36)
    %108 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc37)
    %109 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc38)
    %110 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %111 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %112 = arith.muli %111, %cst_6 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %113 = arith.muli %36, %cst_7 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %114 = tt.broadcast %112 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %115 = arith.addi %114, %78 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %116 = tt.addptr %76, %115 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %117 = arith.cmpi sge, %111, %cst_18 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %118 = arith.cmpi slt, %111, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %119 = arith.cmpi slt, %36, %80 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %120 = arith.andi %117, %118 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %121 = arith.andi %47, %119 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %122 = tt.broadcast %120 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %123 = arith.andi %122, %84 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %124 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %125 = tt.splat %110 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %126 = arith.andi %125, %123 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %127 = ttg.async_copy_global_to_local %116, %124 mask %126 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %128 = ttg.async_commit_group %127 loc(#loc29)
    %129 = arith.addi %114, %86 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %130 = tt.addptr %76, %129 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %131 = arith.andi %122, %90 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %132 = ttg.memdesc_subview %105[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %133 = arith.andi %125, %131 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %134 = ttg.async_copy_global_to_local %130, %132 mask %133 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %135 = ttg.async_commit_group %134 loc(#loc30)
    %136 = tt.broadcast %113 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc31)
    %137 = arith.addi %136, %45 : tensor<64x32xi64, #blocked3> loc(#loc31)
    %138 = tt.addptr %91, %137 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc31)
    %139 = tt.broadcast %121 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc31)
    %140 = arith.andi %139, %57 : tensor<64x32xi1, #blocked3> loc(#loc31)
    %141 = ttg.memdesc_subview %106[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %142 = tt.splat %110 : i1 -> tensor<64x32xi1, #blocked3> loc(#loc39)
    %143 = arith.andi %142, %140 : tensor<64x32xi1, #blocked3> loc(#loc39)
    %144 = ttg.async_copy_global_to_local %138, %141 mask %143 : tensor<64x32x!tt.ptr<bf16>, #blocked3> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %145 = ttg.async_commit_group %144 loc(#loc31)
    %146 = arith.muli %35, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %147 = tt.addptr %96, %146 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %148 = arith.cmpi sge, %35, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %149 = arith.cmpi slt, %35, %97 : tensor<64xi64, #blocked> loc(#loc36)
    %150 = arith.andi %148, %149 : tensor<64xi1, #blocked> loc(#loc36)
    %151 = ttg.memdesc_subview %107[%c0_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %152 = tt.splat %110 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %153 = arith.andi %152, %150 : tensor<64xi1, #blocked> loc(#loc39)
    %154 = ttg.async_copy_global_to_local %147, %151 mask %153 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %155 = ttg.async_commit_group %154 loc(#loc36)
    %156 = tt.expand_dims %34 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %157 = arith.muli %156, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %158 = tt.broadcast %157 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %159 = arith.addi %99, %158 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %160 = tt.addptr %98, %159 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %161 = arith.cmpi sge, %156, %cst_5 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %162 = arith.cmpi slt, %156, %101 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %163 = arith.andi %161, %162 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %164 = tt.broadcast %163 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %165 = arith.andi %100, %164 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %166 = ttg.memdesc_subview %108[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %167 = tt.splat %110 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %168 = arith.andi %167, %165 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %169 = ttg.async_copy_global_to_local %160, %166 mask %168 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %170 = ttg.async_commit_group %169 loc(#loc37)
    %171 = arith.addi %102, %158 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %172 = tt.addptr %98, %171 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %173 = arith.andi %103, %164 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %174 = ttg.memdesc_subview %109[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %175 = arith.andi %167, %173 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %176 = ttg.async_copy_global_to_local %172, %174 mask %175 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %177 = ttg.async_commit_group %176 loc(#loc38)
    %178 = arith.cmpi sgt, %6, %c1_i32 : i32 loc(#loc39)
    %179 = arith.addi %31, %cst_23 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
    %180 = arith.addi %34, %cst_24 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %181 = arith.addi %35, %cst_25 : tensor<64xi64, #blocked> loc(#loc29)
    %182 = tt.expand_dims %179 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %183 = arith.muli %182, %cst_6 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %184 = arith.muli %62, %cst_7 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %185 = tt.broadcast %183 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %186 = arith.addi %185, %78 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %187 = tt.addptr %76, %186 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %188 = arith.cmpi sge, %182, %cst_18 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %189 = arith.cmpi slt, %182, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %190 = arith.cmpi slt, %62, %80 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %191 = arith.andi %188, %189 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %192 = arith.andi %67, %190 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %193 = tt.broadcast %191 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %194 = arith.andi %193, %84 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %195 = ttg.memdesc_subview %104[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %196 = tt.splat %178 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %197 = arith.andi %196, %194 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %198 = ttg.async_copy_global_to_local %187, %195 mask %197 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %199 = ttg.async_commit_group %198 loc(#loc29)
    %200 = arith.addi %185, %86 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %201 = tt.addptr %76, %200 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %202 = arith.andi %193, %90 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %203 = ttg.memdesc_subview %105[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %204 = arith.andi %196, %202 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %205 = ttg.async_copy_global_to_local %201, %203 mask %204 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %206 = ttg.async_commit_group %205 loc(#loc30)
    %207 = tt.broadcast %184 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc31)
    %208 = arith.addi %207, %45 : tensor<64x32xi64, #blocked3> loc(#loc31)
    %209 = tt.addptr %91, %208 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc31)
    %210 = tt.broadcast %192 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc31)
    %211 = arith.andi %210, %57 : tensor<64x32xi1, #blocked3> loc(#loc31)
    %212 = ttg.memdesc_subview %106[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %213 = tt.splat %178 : i1 -> tensor<64x32xi1, #blocked3> loc(#loc39)
    %214 = arith.andi %213, %211 : tensor<64x32xi1, #blocked3> loc(#loc39)
    %215 = ttg.async_copy_global_to_local %209, %212 mask %214 : tensor<64x32x!tt.ptr<bf16>, #blocked3> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %216 = ttg.async_commit_group %215 loc(#loc31)
    %217 = arith.muli %181, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %218 = tt.addptr %96, %217 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %219 = arith.cmpi sge, %181, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %220 = arith.cmpi slt, %181, %97 : tensor<64xi64, #blocked> loc(#loc36)
    %221 = arith.andi %219, %220 : tensor<64xi1, #blocked> loc(#loc36)
    %222 = ttg.memdesc_subview %107[%c1_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %223 = tt.splat %178 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %224 = arith.andi %223, %221 : tensor<64xi1, #blocked> loc(#loc39)
    %225 = ttg.async_copy_global_to_local %218, %222 mask %224 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %226 = ttg.async_commit_group %225 loc(#loc36)
    %227 = tt.expand_dims %180 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %228 = arith.muli %227, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %229 = tt.broadcast %228 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %230 = arith.addi %99, %229 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %231 = tt.addptr %98, %230 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %232 = arith.cmpi sge, %227, %cst_5 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %233 = arith.cmpi slt, %227, %101 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %234 = arith.andi %232, %233 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %235 = tt.broadcast %234 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %236 = arith.andi %100, %235 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %237 = ttg.memdesc_subview %108[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %238 = tt.splat %178 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %239 = arith.andi %238, %236 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %240 = ttg.async_copy_global_to_local %231, %237 mask %239 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %241 = ttg.async_commit_group %240 loc(#loc37)
    %242 = arith.addi %102, %229 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %243 = tt.addptr %98, %242 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %244 = arith.andi %103, %235 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %245 = ttg.memdesc_subview %109[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %246 = arith.andi %238, %244 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %247 = ttg.async_copy_global_to_local %243, %245 mask %246 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %248 = ttg.async_commit_group %247 loc(#loc38)
    %249:22 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_26, %arg10 = %cst_26, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %128, %arg14 = %199, %arg15 = %135, %arg16 = %206, %arg17 = %145, %arg18 = %216, %arg19 = %137, %arg20 = %208, %arg21 = %140, %arg22 = %211, %arg23 = %c0_i32, %arg24 = %c64_i32, %arg25 = %155, %arg26 = %226, %arg27 = %170, %arg28 = %241, %arg29 = %177, %arg30 = %248) -> (tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked3>, tensor<64x32xi64, #blocked3>, tensor<64x32xi1, #blocked3>, tensor<64x32xi1, #blocked3>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %287 = arith.subi %6, %c2_i32 : i32 loc(#loc39)
      %288 = arith.cmpi slt, %arg8, %287 : i32 loc(#loc39)
      %289 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %290 = arith.cmpi sge, %289, %c2_i32 : i32 loc(#loc39)
      %291 = arith.select %290, %c0_i32, %289 : i32 loc(#loc39)
      %292 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %293 = tt.addptr %11, %292 : !tt.ptr<bf16>, i32 loc(#loc41)
      %294 = arith.truncf %arg9 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc42)
      %295 = ttg.local_alloc %294 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc42)
      %296 = tt.splat %293 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc26)
      %297 = tt.addptr %296, %46 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc26)
      %298 = ttg.convert_layout %294 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc26)
      tt.store %297, %298, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc26)
      %299 = arith.truncf %arg10 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc43)
      %300 = ttg.local_alloc %299 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc43)
      %301 = tt.addptr %296, %66 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc27)
      %302 = ttg.convert_layout %299 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc27)
      tt.store %301, %302, %74 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc27)
      %303 = ttg.async_wait %arg13, %arg15, %arg17, %arg25, %arg27, %arg29 {num = 6 : i32} loc(#loc29)
      %304 = ttg.memdesc_subview %104[%291, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %305 = ttg.local_load %304 token %303 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %306 = ttg.local_load %295 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc42)
      %307 = tt.dot %305, %306, %cst_26, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc44)
      %308 = ttg.memdesc_subview %105[%291, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %309 = ttg.local_load %308 token %303 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc30)
      %310 = ttg.local_load %300 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc43)
      %311 = tt.dot %309, %310, %307, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc45)
      %312 = ttg.memdesc_subview %106[%291, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %313 = ttg.local_load %312 token %303 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> -> tensor<64x32xbf16, #mma> loc(#loc46)
      %314 = arith.extf %313 : tensor<64x32xbf16, #mma> to tensor<64x32xf32, #mma> loc(#loc46)
      %315 = arith.subf %314, %311 : tensor<64x32xf32, #mma> loc(#loc46)
      %316 = arith.truncf %315 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc47)
      %317 = ttg.convert_layout %316 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked3> loc(#loc47)
      %318 = tt.addptr %92, %arg19 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc32)
      tt.store %318, %317, %arg21 : tensor<64x32x!tt.ptr<bf16>, #blocked3> loc(#loc32)
      %319 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %320 = arith.muli %319, %c64_i32 : i32 loc(#loc49)
      %321 = arith.minsi %320, %arg7 : i32 loc(#loc50)
      %322 = arith.subi %321, %c1_i32 : i32 loc(#loc51)
      %323 = tt.splat %arg23 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %324 = arith.addi %323, %28 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %325 = arith.cmpi slt, %324, %93 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %326 = arith.muli %322, %c32_i32 : i32 loc(#loc53)
      %327 = tt.addptr %94, %326 : !tt.ptr<f32>, i32 loc(#loc54)
      %328 = tt.addptr %327, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %329 = tt.load %328 : !tt.ptr<f32> loc(#loc56)
      %330 = ttg.memdesc_subview %107[%291, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %331 = ttg.local_load %330 token %303 : !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %332 = tt.splat %329 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %333 = arith.subf %332, %331 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %334 = math.exp %333 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %335 = arith.select %325, %334, %cst : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %336 = tt.expand_dims %335 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %337 = tt.broadcast %336 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc61)
      %338 = arith.mulf %315, %337 : tensor<64x32xf32, #mma> loc(#loc61)
      %339 = math.exp %329 : f32 loc(#loc62)
      %340 = tt.splat %339 : f32 -> tensor<64x32xf32, #mma> loc(#loc63)
      %341 = arith.mulf %arg9, %340 : tensor<64x32xf32, #mma> loc(#loc63)
      %342 = arith.mulf %arg10, %340 : tensor<64x32xf32, #mma> loc(#loc64)
      %343 = arith.truncf %338 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc65)
      %344 = ttg.local_alloc %343 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc65)
      %345 = ttg.memdesc_subview %108[%291, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      %346 = ttg.local_load %345 token %303 : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc37)
      %347 = ttg.local_load %344 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc65)
      %348 = tt.dot %346, %347, %341, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc66)
      %349 = ttg.memdesc_subview %109[%291, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      %350 = ttg.local_load %349 token %303 : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc38)
      %351 = tt.dot %350, %347, %342, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x32xf32, #mma> loc(#loc67)
      %352 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %353 = arith.cmpi sge, %352, %c2_i32 : i32 loc(#loc39)
      %354 = arith.select %353, %c0_i32, %352 : i32 loc(#loc39)
      %355 = arith.addi %arg8, %c2_i32 : i32 loc(#loc39)
      %356 = arith.muli %355, %c64_i32 : i32 loc(#loc68)
      %357 = arith.extsi %356 : i32 to i64 loc(#loc28)
      %358 = tt.splat %357 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %359 = tt.splat %357 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %360 = tt.splat %357 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %361 = tt.splat %357 : i64 -> tensor<64xi64, #blocked> loc(#loc29)
      %362 = arith.addi %358, %31 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %363 = arith.addi %359, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %364 = arith.addi %360, %34 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %365 = arith.addi %361, %35 : tensor<64xi64, #blocked> loc(#loc29)
      %366 = tt.expand_dims %362 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %367 = tt.expand_dims %363 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
      %368 = arith.muli %366, %cst_6 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %369 = arith.muli %367, %cst_7 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %370 = tt.broadcast %368 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
      %371 = arith.addi %370, %78 : tensor<64x64xi64, #blocked2> loc(#loc29)
      %372 = tt.addptr %76, %371 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
      %373 = arith.cmpi sge, %366, %cst_18 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %374 = arith.cmpi sge, %367, %cst_16 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %375 = arith.cmpi slt, %366, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %376 = arith.cmpi slt, %367, %80 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %377 = arith.andi %373, %375 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %378 = arith.andi %374, %376 : tensor<64x1xi1, #blocked3> loc(#loc29)
      %379 = tt.broadcast %377 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
      %380 = arith.andi %379, %84 : tensor<64x64xi1, #blocked2> loc(#loc29)
      %381 = ttg.memdesc_subview %104[%354, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %382 = tt.splat %288 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
      %383 = arith.andi %382, %380 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %384 = ttg.async_copy_global_to_local %372, %381 mask %383 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %385 = ttg.async_commit_group %384 loc(#loc29)
      %386 = arith.addi %370, %86 : tensor<64x64xi64, #blocked2> loc(#loc30)
      %387 = tt.addptr %76, %386 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
      %388 = arith.andi %379, %90 : tensor<64x64xi1, #blocked2> loc(#loc30)
      %389 = ttg.memdesc_subview %105[%354, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %390 = arith.andi %382, %388 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %391 = ttg.async_copy_global_to_local %387, %389 mask %390 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %392 = ttg.async_commit_group %391 loc(#loc30)
      %393 = tt.broadcast %369 : tensor<64x1xi64, #blocked3> -> tensor<64x32xi64, #blocked3> loc(#loc31)
      %394 = arith.addi %393, %45 : tensor<64x32xi64, #blocked3> loc(#loc31)
      %395 = tt.addptr %91, %394 : tensor<64x32x!tt.ptr<bf16>, #blocked3>, tensor<64x32xi64, #blocked3> loc(#loc31)
      %396 = tt.broadcast %378 : tensor<64x1xi1, #blocked3> -> tensor<64x32xi1, #blocked3> loc(#loc31)
      %397 = arith.andi %396, %57 : tensor<64x32xi1, #blocked3> loc(#loc31)
      %398 = ttg.memdesc_subview %106[%354, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %399 = tt.splat %288 : i1 -> tensor<64x32xi1, #blocked3> loc(#loc39)
      %400 = arith.andi %399, %397 : tensor<64x32xi1, #blocked3> loc(#loc39)
      %401 = ttg.async_copy_global_to_local %395, %398 mask %400 : tensor<64x32x!tt.ptr<bf16>, #blocked3> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %402 = ttg.async_commit_group %401 loc(#loc31)
      %403 = arith.muli %365, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
      %404 = tt.addptr %96, %403 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
      %405 = arith.cmpi sge, %365, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
      %406 = arith.cmpi slt, %365, %97 : tensor<64xi64, #blocked> loc(#loc36)
      %407 = arith.andi %405, %406 : tensor<64xi1, #blocked> loc(#loc36)
      %408 = ttg.memdesc_subview %107[%354, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %409 = tt.splat %288 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
      %410 = arith.andi %409, %407 : tensor<64xi1, #blocked> loc(#loc39)
      %411 = ttg.async_copy_global_to_local %404, %408 mask %410 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %412 = ttg.async_commit_group %411 loc(#loc36)
      %413 = tt.expand_dims %364 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
      %414 = arith.muli %413, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %415 = tt.broadcast %414 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
      %416 = arith.addi %99, %415 : tensor<64x64xi64, #blocked1> loc(#loc37)
      %417 = tt.addptr %98, %416 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
      %418 = arith.cmpi sge, %413, %cst_5 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %419 = arith.cmpi slt, %413, %101 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %420 = arith.andi %418, %419 : tensor<1x64xi1, #blocked1> loc(#loc37)
      %421 = tt.broadcast %420 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %422 = arith.andi %100, %421 : tensor<64x64xi1, #blocked1> loc(#loc37)
      %423 = ttg.memdesc_subview %108[%354, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      %424 = tt.splat %288 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %425 = arith.andi %424, %422 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %426 = ttg.async_copy_global_to_local %417, %423 mask %425 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      %427 = ttg.async_commit_group %426 loc(#loc37)
      %428 = arith.addi %102, %415 : tensor<64x64xi64, #blocked1> loc(#loc38)
      %429 = tt.addptr %98, %428 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
      %430 = arith.andi %103, %421 : tensor<64x64xi1, #blocked1> loc(#loc38)
      %431 = ttg.memdesc_subview %109[%354, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      %432 = arith.andi %424, %430 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %433 = ttg.async_copy_global_to_local %429, %431 mask %432 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      %434 = ttg.async_commit_group %433 loc(#loc38)
      scf.yield %348, %351, %354, %291, %arg14, %385, %arg16, %392, %arg18, %402, %arg20, %394, %arg22, %397, %arg24, %356, %arg26, %412, %arg28, %427, %arg30, %434 : tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked3>, tensor<64x32xi64, #blocked3>, tensor<64x32xi1, #blocked3>, tensor<64x32xi1, #blocked3>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %250 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %109 : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %108 : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %107 : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %106 : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %105 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %251 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc69)
    %252 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc69)
    %253 = arith.extsi %252 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc69)
    %254 = tt.expand_dims %253 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<64x1xi64, #blocked4> loc(#loc69)
    %255 = arith.muli %254, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %256 = tt.broadcast %255 : tensor<64x1xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc69)
    %257 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc69)
    %258 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc69)
    %259 = arith.extsi %258 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc69)
    %260 = arith.addi %257, %259 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc69)
    %261 = tt.expand_dims %260 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi64, #blocked4> loc(#loc69)
    %262 = tt.broadcast %261 : tensor<1x32xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc69)
    %263 = arith.addi %256, %262 : tensor<64x32xi64, #blocked4> loc(#loc69)
    %264 = tt.addptr %251, %263 : tensor<64x32x!tt.ptr<f32>, #blocked4>, tensor<64x32xi64, #blocked4> loc(#loc69)
    %265 = arith.cmpi sge, %254, %cst_17 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %266 = arith.cmpi slt, %254, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc69)
    %267 = arith.andi %265, %266 : tensor<64x1xi1, #blocked4> loc(#loc69)
    %268 = tt.broadcast %267 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc69)
    %269 = arith.cmpi sge, %261, %cst_15 : tensor<1x32xi64, #blocked4> loc(#loc69)
    %270 = arith.cmpi slt, %261, %cst_13 : tensor<1x32xi64, #blocked4> loc(#loc69)
    %271 = arith.andi %269, %270 : tensor<1x32xi1, #blocked4> loc(#loc69)
    %272 = tt.broadcast %271 : tensor<1x32xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc69)
    %273 = arith.andi %268, %272 : tensor<64x32xi1, #blocked4> loc(#loc69)
    %274 = ttg.convert_layout %249#0 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked4> loc(#loc69)
    tt.store %264, %274, %273 : tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc69)
    %275 = arith.addi %253, %cst_9 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc70)
    %276 = tt.expand_dims %275 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<64x1xi64, #blocked4> loc(#loc70)
    %277 = arith.muli %276, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc70)
    %278 = tt.broadcast %277 : tensor<64x1xi64, #blocked4> -> tensor<64x32xi64, #blocked4> loc(#loc70)
    %279 = arith.addi %278, %262 : tensor<64x32xi64, #blocked4> loc(#loc70)
    %280 = tt.addptr %251, %279 : tensor<64x32x!tt.ptr<f32>, #blocked4>, tensor<64x32xi64, #blocked4> loc(#loc70)
    %281 = arith.cmpi sge, %276, %cst_17 : tensor<64x1xi64, #blocked4> loc(#loc70)
    %282 = arith.cmpi slt, %276, %cst_21 : tensor<64x1xi64, #blocked4> loc(#loc70)
    %283 = arith.andi %281, %282 : tensor<64x1xi1, #blocked4> loc(#loc70)
    %284 = tt.broadcast %283 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc70)
    %285 = arith.andi %284, %272 : tensor<64x32xi1, #blocked4> loc(#loc70)
    %286 = ttg.convert_layout %249#1 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked4> loc(#loc70)
    tt.store %280, %286, %285 : tensor<64x32x!tt.ptr<f32>, #blocked4> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc72 = loc(callsite(#loc7 at #loc8))
#loc73 = loc(callsite(#loc9 at #loc8))
