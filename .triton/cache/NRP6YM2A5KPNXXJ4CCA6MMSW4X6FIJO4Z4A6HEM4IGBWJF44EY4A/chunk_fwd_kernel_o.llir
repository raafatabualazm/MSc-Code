; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_fwd_kernel_o(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, float %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !10
  %13 = lshr i32 %12, 5, !dbg !11
  %14 = and i32 %12, 31, !dbg !12
  %15 = add i32 %7, 63, !dbg !13
  %16 = sdiv i32 %15, 64, !dbg !17
  %17 = mul i32 %16, %13, !dbg !18
  %18 = add i32 %17, %11, !dbg !19
  %19 = and i32 %12, 65504, !dbg !20
  %20 = mul i32 %19, %7, !dbg !21
  %21 = or disjoint i32 %20, %14, !dbg !22
  %22 = shl i32 %21, 7, !dbg !23
  %23 = sext i32 %22 to i64, !dbg !24
  %24 = getelementptr bfloat, ptr addrspace(1) %0, i64 %23, !dbg !24
  %25 = getelementptr bfloat, ptr addrspace(1) %1, i64 %23, !dbg !25
  %26 = shl i32 %18, 5, !dbg !26
  %27 = or disjoint i32 %26, %14, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %.idx = shl nsw i64 %28, 15, !dbg !29
  %29 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !29
  %30 = shl nuw nsw i32 %11, 6, !dbg !30
  %31 = sext i32 %7 to i64, !dbg !31
  %32 = zext nneg i32 %30 to i64, !dbg !31
  %33 = shl i32 %10, 5, !dbg !32
  %34 = sext i32 %33 to i64, !dbg !33
  %35 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !34
  %36 = and i32 %35, 4, !dbg !34
  %.not = icmp eq i32 %36, 0, !dbg !34
  %37 = and i32 %35, 8, !dbg !34
  %38 = and i32 %35, 16, !dbg !34
  %39 = and i32 %35, 32, !dbg !34
  %40 = lshr i32 %35, 2, !dbg !34
  %41 = and i32 %40, 15, !dbg !34
  %42 = or disjoint i32 %41, 16, !dbg !34
  %43 = zext nneg i32 %41 to i64, !dbg !34
  %44 = zext nneg i32 %42 to i64, !dbg !34
  %45 = or disjoint i64 %43, %32, !dbg !34
  %46 = or disjoint i64 %44, %32, !dbg !34
  %47 = or disjoint i32 %41, %30, !dbg !34
  %narrow = or disjoint i32 %47, 32, !dbg !34
  %48 = zext nneg i32 %narrow to i64, !dbg !34
  %narrow1 = or disjoint i32 %47, 48, !dbg !34
  %49 = zext nneg i32 %narrow1 to i64, !dbg !34
  %50 = shl nuw nsw i64 %45, 12, !dbg !34
  %51 = shl nuw nsw i64 %46, 12, !dbg !34
  %52 = shl nuw nsw i64 %48, 12, !dbg !34
  %53 = shl nuw nsw i64 %49, 12, !dbg !34
  %54 = and i32 %35, 2, !dbg !34
  %55 = icmp eq i32 %54, 0, !dbg !34
  %56 = shl nuw nsw i32 %35, 3, !dbg !34
  %57 = and i32 %56, 24, !dbg !34
  %58 = zext nneg i32 %57 to i64, !dbg !34
  %59 = icmp slt i64 %45, %31, !dbg !34
  %60 = icmp slt i64 %46, %31, !dbg !34
  %61 = icmp slt i32 %narrow, %7, !dbg !34
  %62 = icmp slt i32 %narrow1, %7, !dbg !34
  %63 = or disjoint i64 %58, %34, !dbg !35
  %64 = icmp sgt i32 %33, -1, !dbg !35
  %65 = icmp slt i64 %63, 128, !dbg !35
  %66 = and i1 %64, %65, !dbg !35
  %67 = or disjoint i64 %50, %58, !dbg !34
  %68 = or disjoint i64 %51, %58, !dbg !34
  %69 = or disjoint i64 %52, %58, !dbg !34
  %70 = or disjoint i64 %53, %58, !dbg !34
  %71 = getelementptr bfloat, ptr addrspace(1) %24, i64 %67, !dbg !34
  %72 = getelementptr bfloat, ptr addrspace(1) %24, i64 %68, !dbg !34
  %73 = getelementptr bfloat, ptr addrspace(1) %24, i64 %69, !dbg !34
  %74 = getelementptr bfloat, ptr addrspace(1) %24, i64 %70, !dbg !34
  %75 = xor i32 %56, %35, !dbg !34
  %76 = and i32 %75, 24, !dbg !34
  %77 = shl nuw nsw i32 %41, 5, !dbg !34
  %78 = or disjoint i32 %76, %77, !dbg !34
  %79 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %78, !dbg !34
  %80 = or disjoint i32 %78, 512, !dbg !34
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %80, !dbg !34
  %82 = or disjoint i32 %78, 1024, !dbg !34
  %83 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %82, !dbg !34
  %84 = or disjoint i32 %78, 1536, !dbg !34
  %85 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %84, !dbg !34
  %86 = select i1 %59, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %79, ptr addrspace(1) %71, i32 %86) #2, !dbg !34
  %87 = select i1 %60, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %81, ptr addrspace(1) %72, i32 %87) #2, !dbg !34
  %88 = select i1 %61, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %83, ptr addrspace(1) %73, i32 %88) #2, !dbg !34
  %89 = select i1 %62, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %85, ptr addrspace(1) %74, i32 %89) #2, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %90 = getelementptr bfloat, ptr addrspace(1) %25, i64 %67, !dbg !36
  %91 = getelementptr bfloat, ptr addrspace(1) %25, i64 %68, !dbg !36
  %92 = getelementptr bfloat, ptr addrspace(1) %25, i64 %69, !dbg !36
  %93 = getelementptr bfloat, ptr addrspace(1) %25, i64 %70, !dbg !36
  %94 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %78, !dbg !36
  %95 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %80, !dbg !36
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %82, !dbg !36
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %84, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %94, ptr addrspace(1) %90, i32 %86) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %95, ptr addrspace(1) %91, i32 %87) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %96, ptr addrspace(1) %92, i32 %88) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %97, ptr addrspace(1) %93, i32 %89) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %.idx2 = shl nuw nsw i64 %43, 8, !dbg !35
  %98 = getelementptr i8, ptr addrspace(1) %29, i64 %.idx2, !dbg !35
  %99 = getelementptr bfloat, ptr addrspace(1) %98, i64 %63, !dbg !35
  %.idx3 = shl nuw nsw i64 %44, 8, !dbg !35
  %100 = getelementptr i8, ptr addrspace(1) %29, i64 %.idx3, !dbg !35
  %101 = getelementptr bfloat, ptr addrspace(1) %100, i64 %63, !dbg !35
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %78, !dbg !35
  %103 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %80, !dbg !35
  %104 = select i1 %66, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %102, ptr addrspace(1) %99, i32 %104) #2, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %101, i32 %104) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %105 = or disjoint i64 %58, 32, !dbg !34
  %106 = or disjoint i64 %50, %105, !dbg !34
  %107 = or disjoint i64 %51, %105, !dbg !34
  %108 = or disjoint i64 %52, %105, !dbg !34
  %109 = or disjoint i64 %53, %105, !dbg !34
  %110 = getelementptr bfloat, ptr addrspace(1) %24, i64 %106, !dbg !34
  %111 = getelementptr bfloat, ptr addrspace(1) %24, i64 %107, !dbg !34
  %112 = getelementptr bfloat, ptr addrspace(1) %24, i64 %108, !dbg !34
  %113 = getelementptr bfloat, ptr addrspace(1) %24, i64 %109, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %114 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %78, !dbg !34
  %115 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %80, !dbg !34
  %116 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %82, !dbg !34
  %117 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %84, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %114, ptr addrspace(1) %110, i32 %86) #2, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %115, ptr addrspace(1) %111, i32 %87) #2, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %116, ptr addrspace(1) %112, i32 %88) #2, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %117, ptr addrspace(1) %113, i32 %89) #2, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %118 = getelementptr bfloat, ptr addrspace(1) %25, i64 %106, !dbg !36
  %119 = getelementptr bfloat, ptr addrspace(1) %25, i64 %107, !dbg !36
  %120 = getelementptr bfloat, ptr addrspace(1) %25, i64 %108, !dbg !36
  %121 = getelementptr bfloat, ptr addrspace(1) %25, i64 %109, !dbg !36
  %122 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %78, !dbg !36
  %123 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %80, !dbg !36
  %124 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %82, !dbg !36
  %125 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 12288), i32 %84, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %122, ptr addrspace(1) %118, i32 %86) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %123, ptr addrspace(1) %119, i32 %87) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %124, ptr addrspace(1) %120, i32 %88) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %125, ptr addrspace(1) %121, i32 %89) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %126 = getelementptr i8, ptr addrspace(1) %98, i64 8192, !dbg !35
  %127 = getelementptr bfloat, ptr addrspace(1) %126, i64 %63, !dbg !35
  %128 = getelementptr i8, ptr addrspace(1) %100, i64 8192, !dbg !35
  %129 = getelementptr bfloat, ptr addrspace(1) %128, i64 %63, !dbg !35
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %78, !dbg !35
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18432), i32 %80, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %130, ptr addrspace(1) %127, i32 %104) #2, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %131, ptr addrspace(1) %129, i32 %104) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %29, i64 %63, !dbg !37
  %132 = shl nuw nsw i32 %35, 5
  %133 = and i32 %132, 32
  %134 = select i1 %55, i32 0, i32 72
  %135 = or disjoint i32 %134, %133
  %136 = select i1 %.not, i32 0, i32 144
  %137 = or disjoint i32 %135, %136
  %138 = shl nuw nsw i32 %37, 5
  %139 = or disjoint i32 %137, %138
  %140 = lshr exact i32 %38, 1
  %141 = shl nuw nsw i32 %39, 4
  %142 = or disjoint i32 %140, %141
  %143 = xor i32 %139, %142
  %144 = xor i32 %143, 16
  %145 = xor i32 %143, 1040
  %and.ra106 = and i32 %35, 24
  %146 = xor i32 %137, %and.ra106
  %147 = shl nuw nsw i32 %35, 5
  %148 = and i32 %147, 768
  %149 = or disjoint i32 %137, %148
  %150 = xor i32 %149, 8
  %151 = xor i32 %149, 16
  %152 = xor i32 %149, 24
  %invariant.gep260 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %146, !dbg !37
  br label %153, !dbg !37

153:                                              ; preds = %9, %153
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %153 ]
  %154 = phi i32 [ -1, %9 ], [ %255, %153 ]
  %155 = phi i32 [ 1, %9 ], [ %613, %153 ]
  %156 = phi float [ 0.000000e+00, %9 ], [ %532, %153 ]
  %157 = phi float [ 0.000000e+00, %9 ], [ %533, %153 ]
  %158 = phi float [ 0.000000e+00, %9 ], [ %534, %153 ]
  %159 = phi float [ 0.000000e+00, %9 ], [ %535, %153 ]
  %160 = phi float [ 0.000000e+00, %9 ], [ %537, %153 ]
  %161 = phi float [ 0.000000e+00, %9 ], [ %538, %153 ]
  %162 = phi float [ 0.000000e+00, %9 ], [ %539, %153 ]
  %163 = phi float [ 0.000000e+00, %9 ], [ %540, %153 ]
  %164 = phi float [ 0.000000e+00, %9 ], [ %542, %153 ]
  %165 = phi float [ 0.000000e+00, %9 ], [ %543, %153 ]
  %166 = phi float [ 0.000000e+00, %9 ], [ %544, %153 ]
  %167 = phi float [ 0.000000e+00, %9 ], [ %545, %153 ]
  %168 = phi float [ 0.000000e+00, %9 ], [ %547, %153 ]
  %169 = phi float [ 0.000000e+00, %9 ], [ %548, %153 ]
  %170 = phi float [ 0.000000e+00, %9 ], [ %549, %153 ]
  %171 = phi float [ 0.000000e+00, %9 ], [ %550, %153 ]
  %172 = phi float [ 0.000000e+00, %9 ], [ %552, %153 ]
  %173 = phi float [ 0.000000e+00, %9 ], [ %553, %153 ]
  %174 = phi float [ 0.000000e+00, %9 ], [ %554, %153 ]
  %175 = phi float [ 0.000000e+00, %9 ], [ %555, %153 ]
  %176 = phi float [ 0.000000e+00, %9 ], [ %557, %153 ]
  %177 = phi float [ 0.000000e+00, %9 ], [ %558, %153 ]
  %178 = phi float [ 0.000000e+00, %9 ], [ %559, %153 ]
  %179 = phi float [ 0.000000e+00, %9 ], [ %560, %153 ]
  %180 = phi float [ 0.000000e+00, %9 ], [ %562, %153 ]
  %181 = phi float [ 0.000000e+00, %9 ], [ %563, %153 ]
  %182 = phi float [ 0.000000e+00, %9 ], [ %564, %153 ]
  %183 = phi float [ 0.000000e+00, %9 ], [ %565, %153 ]
  %184 = phi float [ 0.000000e+00, %9 ], [ %567, %153 ]
  %185 = phi float [ 0.000000e+00, %9 ], [ %568, %153 ]
  %186 = phi float [ 0.000000e+00, %9 ], [ %569, %153 ]
  %187 = phi float [ 0.000000e+00, %9 ], [ %570, %153 ]
  %188 = phi float [ 0.000000e+00, %9 ], [ %572, %153 ]
  %189 = phi float [ 0.000000e+00, %9 ], [ %573, %153 ]
  %190 = phi float [ 0.000000e+00, %9 ], [ %574, %153 ]
  %191 = phi float [ 0.000000e+00, %9 ], [ %575, %153 ]
  %192 = phi float [ 0.000000e+00, %9 ], [ %577, %153 ]
  %193 = phi float [ 0.000000e+00, %9 ], [ %578, %153 ]
  %194 = phi float [ 0.000000e+00, %9 ], [ %579, %153 ]
  %195 = phi float [ 0.000000e+00, %9 ], [ %580, %153 ]
  %196 = phi float [ 0.000000e+00, %9 ], [ %582, %153 ]
  %197 = phi float [ 0.000000e+00, %9 ], [ %583, %153 ]
  %198 = phi float [ 0.000000e+00, %9 ], [ %584, %153 ]
  %199 = phi float [ 0.000000e+00, %9 ], [ %585, %153 ]
  %200 = phi float [ 0.000000e+00, %9 ], [ %587, %153 ]
  %201 = phi float [ 0.000000e+00, %9 ], [ %588, %153 ]
  %202 = phi float [ 0.000000e+00, %9 ], [ %589, %153 ]
  %203 = phi float [ 0.000000e+00, %9 ], [ %590, %153 ]
  %204 = phi float [ 0.000000e+00, %9 ], [ %592, %153 ]
  %205 = phi float [ 0.000000e+00, %9 ], [ %593, %153 ]
  %206 = phi float [ 0.000000e+00, %9 ], [ %594, %153 ]
  %207 = phi float [ 0.000000e+00, %9 ], [ %595, %153 ]
  %208 = phi float [ 0.000000e+00, %9 ], [ %597, %153 ]
  %209 = phi float [ 0.000000e+00, %9 ], [ %598, %153 ]
  %210 = phi float [ 0.000000e+00, %9 ], [ %599, %153 ]
  %211 = phi float [ 0.000000e+00, %9 ], [ %600, %153 ]
  %212 = phi float [ 0.000000e+00, %9 ], [ %602, %153 ]
  %213 = phi float [ 0.000000e+00, %9 ], [ %603, %153 ]
  %214 = phi float [ 0.000000e+00, %9 ], [ %604, %153 ]
  %215 = phi float [ 0.000000e+00, %9 ], [ %605, %153 ]
  %216 = phi float [ 0.000000e+00, %9 ], [ %607, %153 ]
  %217 = phi float [ 0.000000e+00, %9 ], [ %608, %153 ]
  %218 = phi float [ 0.000000e+00, %9 ], [ %609, %153 ]
  %219 = phi float [ 0.000000e+00, %9 ], [ %610, %153 ]
  %220 = phi float [ 0.000000e+00, %9 ], [ %412, %153 ]
  %221 = phi float [ 0.000000e+00, %9 ], [ %413, %153 ]
  %222 = phi float [ 0.000000e+00, %9 ], [ %414, %153 ]
  %223 = phi float [ 0.000000e+00, %9 ], [ %415, %153 ]
  %224 = phi float [ 0.000000e+00, %9 ], [ %417, %153 ]
  %225 = phi float [ 0.000000e+00, %9 ], [ %418, %153 ]
  %226 = phi float [ 0.000000e+00, %9 ], [ %419, %153 ]
  %227 = phi float [ 0.000000e+00, %9 ], [ %420, %153 ]
  %228 = phi float [ 0.000000e+00, %9 ], [ %422, %153 ]
  %229 = phi float [ 0.000000e+00, %9 ], [ %423, %153 ]
  %230 = phi float [ 0.000000e+00, %9 ], [ %424, %153 ]
  %231 = phi float [ 0.000000e+00, %9 ], [ %425, %153 ]
  %232 = phi float [ 0.000000e+00, %9 ], [ %427, %153 ]
  %233 = phi float [ 0.000000e+00, %9 ], [ %428, %153 ]
  %234 = phi float [ 0.000000e+00, %9 ], [ %429, %153 ]
  %235 = phi float [ 0.000000e+00, %9 ], [ %430, %153 ]
  %236 = phi float [ 0.000000e+00, %9 ], [ %432, %153 ]
  %237 = phi float [ 0.000000e+00, %9 ], [ %433, %153 ]
  %238 = phi float [ 0.000000e+00, %9 ], [ %434, %153 ]
  %239 = phi float [ 0.000000e+00, %9 ], [ %435, %153 ]
  %240 = phi float [ 0.000000e+00, %9 ], [ %437, %153 ]
  %241 = phi float [ 0.000000e+00, %9 ], [ %438, %153 ]
  %242 = phi float [ 0.000000e+00, %9 ], [ %439, %153 ]
  %243 = phi float [ 0.000000e+00, %9 ], [ %440, %153 ]
  %244 = phi float [ 0.000000e+00, %9 ], [ %442, %153 ]
  %245 = phi float [ 0.000000e+00, %9 ], [ %443, %153 ]
  %246 = phi float [ 0.000000e+00, %9 ], [ %444, %153 ]
  %247 = phi float [ 0.000000e+00, %9 ], [ %445, %153 ]
  %248 = phi float [ 0.000000e+00, %9 ], [ %447, %153 ]
  %249 = phi float [ 0.000000e+00, %9 ], [ %448, %153 ]
  %250 = phi float [ 0.000000e+00, %9 ], [ %449, %153 ]
  %251 = phi float [ 0.000000e+00, %9 ], [ %450, %153 ]
  %252 = icmp samesign ult i64 %indvars.iv, 2, !dbg !37
  %253 = add i32 %154, 1, !dbg !37
  %254 = icmp sgt i32 %253, 1, !dbg !37
  %255 = select i1 %254, i32 0, i32 %253, !dbg !37
  tail call void @llvm.nvvm.cp.async.wait.group(i32 3), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %256 = shl i32 %255, 11, !dbg !34
  %257 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %256, !dbg !34
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %257, i32 %143, !dbg !34
  %259 = ptrtoint ptr addrspace(3) %258 to i32, !dbg !34
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %259) #2, !dbg !34
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !34
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !34
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !34
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !34
  %265 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %257, i32 %144, !dbg !34
  %266 = ptrtoint ptr addrspace(3) %265 to i32, !dbg !34
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %266) #2, !dbg !34
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !34
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !34
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !34
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !34
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %257, i32 %143, !dbg !34
  %273 = getelementptr inbounds nuw i8, ptr addrspace(3) %272, i32 2048, !dbg !34
  %274 = ptrtoint ptr addrspace(3) %273 to i32, !dbg !34
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %274) #2, !dbg !34
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !34
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !34
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !34
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %257, i32 %145, !dbg !34
  %281 = ptrtoint ptr addrspace(3) %280 to i32, !dbg !34
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %281) #2, !dbg !34
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !34
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !34
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !34
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !34
  %gep261 = getelementptr bfloat, ptr addrspace(3) %invariant.gep260, i32 %256, !dbg !36
  %287 = ptrtoint ptr addrspace(3) %gep261 to i32, !dbg !36
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %287) #2, !dbg !36
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !36
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !36
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !36
  %293 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 512, !dbg !36
  %294 = ptrtoint ptr addrspace(3) %293 to i32, !dbg !36
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %294) #2, !dbg !36
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !36
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !36
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !36
  %300 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 1024, !dbg !36
  %301 = ptrtoint ptr addrspace(3) %300 to i32, !dbg !36
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %301) #2, !dbg !36
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !36
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !36
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !36
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !36
  %307 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 1536, !dbg !36
  %308 = ptrtoint ptr addrspace(3) %307 to i32, !dbg !36
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %308) #2, !dbg !36
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !36
  %314 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 2048, !dbg !36
  %315 = ptrtoint ptr addrspace(3) %314 to i32, !dbg !36
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %315) #2, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !36
  %321 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 2560, !dbg !36
  %322 = ptrtoint ptr addrspace(3) %321 to i32, !dbg !36
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %322) #2, !dbg !36
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !36
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !36
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !36
  %328 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 3072, !dbg !36
  %329 = ptrtoint ptr addrspace(3) %328 to i32, !dbg !36
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %329) #2, !dbg !36
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !36
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !36
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !36
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !36
  %335 = getelementptr inbounds nuw i8, ptr addrspace(3) %gep261, i32 3584, !dbg !36
  %336 = ptrtoint ptr addrspace(3) %335 to i32, !dbg !36
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %336) #2, !dbg !36
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !36
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !36
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !36
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !36
  %342 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %256, !dbg !35
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %149, !dbg !35
  %344 = ptrtoint ptr addrspace(3) %343 to i32, !dbg !35
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %344) #2, !dbg !35
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !35
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !35
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !35
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !35
  %350 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %150, !dbg !35
  %351 = ptrtoint ptr addrspace(3) %350 to i32, !dbg !35
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #2, !dbg !35
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !35
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !35
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %151, !dbg !35
  %358 = ptrtoint ptr addrspace(3) %357 to i32, !dbg !35
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %358) #2, !dbg !35
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !35
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !35
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !35
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %342, i32 %152, !dbg !35
  %365 = ptrtoint ptr addrspace(3) %364 to i32, !dbg !35
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #2, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !35
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !35
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !35
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !35
  %371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %220, float %221, float %222, float %223, i32 %261, i32 %262, i32 %263, i32 %264, i32 %346, i32 %347) #2, !dbg !38
  %372 = extractvalue { float, float, float, float } %371, 0, !dbg !38
  %373 = extractvalue { float, float, float, float } %371, 1, !dbg !38
  %374 = extractvalue { float, float, float, float } %371, 2, !dbg !38
  %375 = extractvalue { float, float, float, float } %371, 3, !dbg !38
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %261, i32 %262, i32 %263, i32 %264, i32 %353, i32 %354) #2, !dbg !38
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !38
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !38
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !38
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !38
  %381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %261, i32 %262, i32 %263, i32 %264, i32 %360, i32 %361) #2, !dbg !38
  %382 = extractvalue { float, float, float, float } %381, 0, !dbg !38
  %383 = extractvalue { float, float, float, float } %381, 1, !dbg !38
  %384 = extractvalue { float, float, float, float } %381, 2, !dbg !38
  %385 = extractvalue { float, float, float, float } %381, 3, !dbg !38
  %386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %261, i32 %262, i32 %263, i32 %264, i32 %367, i32 %368) #2, !dbg !38
  %387 = extractvalue { float, float, float, float } %386, 0, !dbg !38
  %388 = extractvalue { float, float, float, float } %386, 1, !dbg !38
  %389 = extractvalue { float, float, float, float } %386, 2, !dbg !38
  %390 = extractvalue { float, float, float, float } %386, 3, !dbg !38
  %391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %236, float %237, float %238, float %239, i32 %276, i32 %277, i32 %278, i32 %279, i32 %346, i32 %347) #2, !dbg !38
  %392 = extractvalue { float, float, float, float } %391, 0, !dbg !38
  %393 = extractvalue { float, float, float, float } %391, 1, !dbg !38
  %394 = extractvalue { float, float, float, float } %391, 2, !dbg !38
  %395 = extractvalue { float, float, float, float } %391, 3, !dbg !38
  %396 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %240, float %241, float %242, float %243, i32 %276, i32 %277, i32 %278, i32 %279, i32 %353, i32 %354) #2, !dbg !38
  %397 = extractvalue { float, float, float, float } %396, 0, !dbg !38
  %398 = extractvalue { float, float, float, float } %396, 1, !dbg !38
  %399 = extractvalue { float, float, float, float } %396, 2, !dbg !38
  %400 = extractvalue { float, float, float, float } %396, 3, !dbg !38
  %401 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %276, i32 %277, i32 %278, i32 %279, i32 %360, i32 %361) #2, !dbg !38
  %402 = extractvalue { float, float, float, float } %401, 0, !dbg !38
  %403 = extractvalue { float, float, float, float } %401, 1, !dbg !38
  %404 = extractvalue { float, float, float, float } %401, 2, !dbg !38
  %405 = extractvalue { float, float, float, float } %401, 3, !dbg !38
  %406 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %248, float %249, float %250, float %251, i32 %276, i32 %277, i32 %278, i32 %279, i32 %367, i32 %368) #2, !dbg !38
  %407 = extractvalue { float, float, float, float } %406, 0, !dbg !38
  %408 = extractvalue { float, float, float, float } %406, 1, !dbg !38
  %409 = extractvalue { float, float, float, float } %406, 2, !dbg !38
  %410 = extractvalue { float, float, float, float } %406, 3, !dbg !38
  %411 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %372, float %373, float %374, float %375, i32 %268, i32 %269, i32 %270, i32 %271, i32 %348, i32 %349) #2, !dbg !38
  %412 = extractvalue { float, float, float, float } %411, 0, !dbg !38
  %413 = extractvalue { float, float, float, float } %411, 1, !dbg !38
  %414 = extractvalue { float, float, float, float } %411, 2, !dbg !38
  %415 = extractvalue { float, float, float, float } %411, 3, !dbg !38
  %416 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %377, float %378, float %379, float %380, i32 %268, i32 %269, i32 %270, i32 %271, i32 %355, i32 %356) #2, !dbg !38
  %417 = extractvalue { float, float, float, float } %416, 0, !dbg !38
  %418 = extractvalue { float, float, float, float } %416, 1, !dbg !38
  %419 = extractvalue { float, float, float, float } %416, 2, !dbg !38
  %420 = extractvalue { float, float, float, float } %416, 3, !dbg !38
  %421 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %382, float %383, float %384, float %385, i32 %268, i32 %269, i32 %270, i32 %271, i32 %362, i32 %363) #2, !dbg !38
  %422 = extractvalue { float, float, float, float } %421, 0, !dbg !38
  %423 = extractvalue { float, float, float, float } %421, 1, !dbg !38
  %424 = extractvalue { float, float, float, float } %421, 2, !dbg !38
  %425 = extractvalue { float, float, float, float } %421, 3, !dbg !38
  %426 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %387, float %388, float %389, float %390, i32 %268, i32 %269, i32 %270, i32 %271, i32 %369, i32 %370) #2, !dbg !38
  %427 = extractvalue { float, float, float, float } %426, 0, !dbg !38
  %428 = extractvalue { float, float, float, float } %426, 1, !dbg !38
  %429 = extractvalue { float, float, float, float } %426, 2, !dbg !38
  %430 = extractvalue { float, float, float, float } %426, 3, !dbg !38
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %392, float %393, float %394, float %395, i32 %283, i32 %284, i32 %285, i32 %286, i32 %348, i32 %349) #2, !dbg !38
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !38
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !38
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !38
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !38
  %436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %397, float %398, float %399, float %400, i32 %283, i32 %284, i32 %285, i32 %286, i32 %355, i32 %356) #2, !dbg !38
  %437 = extractvalue { float, float, float, float } %436, 0, !dbg !38
  %438 = extractvalue { float, float, float, float } %436, 1, !dbg !38
  %439 = extractvalue { float, float, float, float } %436, 2, !dbg !38
  %440 = extractvalue { float, float, float, float } %436, 3, !dbg !38
  %441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %402, float %403, float %404, float %405, i32 %283, i32 %284, i32 %285, i32 %286, i32 %362, i32 %363) #2, !dbg !38
  %442 = extractvalue { float, float, float, float } %441, 0, !dbg !38
  %443 = extractvalue { float, float, float, float } %441, 1, !dbg !38
  %444 = extractvalue { float, float, float, float } %441, 2, !dbg !38
  %445 = extractvalue { float, float, float, float } %441, 3, !dbg !38
  %446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %407, float %408, float %409, float %410, i32 %283, i32 %284, i32 %285, i32 %286, i32 %369, i32 %370) #2, !dbg !38
  %447 = extractvalue { float, float, float, float } %446, 0, !dbg !38
  %448 = extractvalue { float, float, float, float } %446, 1, !dbg !38
  %449 = extractvalue { float, float, float, float } %446, 2, !dbg !38
  %450 = extractvalue { float, float, float, float } %446, 3, !dbg !38
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %156, float %157, float %158, float %159, i32 %261, i32 %262, i32 %263, i32 %264, i32 %289, i32 %290) #2, !dbg !39
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !39
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !39
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !39
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !39
  %456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %160, float %161, float %162, float %163, i32 %261, i32 %262, i32 %263, i32 %264, i32 %296, i32 %297) #2, !dbg !39
  %457 = extractvalue { float, float, float, float } %456, 0, !dbg !39
  %458 = extractvalue { float, float, float, float } %456, 1, !dbg !39
  %459 = extractvalue { float, float, float, float } %456, 2, !dbg !39
  %460 = extractvalue { float, float, float, float } %456, 3, !dbg !39
  %461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %164, float %165, float %166, float %167, i32 %261, i32 %262, i32 %263, i32 %264, i32 %303, i32 %304) #2, !dbg !39
  %462 = extractvalue { float, float, float, float } %461, 0, !dbg !39
  %463 = extractvalue { float, float, float, float } %461, 1, !dbg !39
  %464 = extractvalue { float, float, float, float } %461, 2, !dbg !39
  %465 = extractvalue { float, float, float, float } %461, 3, !dbg !39
  %466 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %261, i32 %262, i32 %263, i32 %264, i32 %310, i32 %311) #2, !dbg !39
  %467 = extractvalue { float, float, float, float } %466, 0, !dbg !39
  %468 = extractvalue { float, float, float, float } %466, 1, !dbg !39
  %469 = extractvalue { float, float, float, float } %466, 2, !dbg !39
  %470 = extractvalue { float, float, float, float } %466, 3, !dbg !39
  %471 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %172, float %173, float %174, float %175, i32 %261, i32 %262, i32 %263, i32 %264, i32 %317, i32 %318) #2, !dbg !39
  %472 = extractvalue { float, float, float, float } %471, 0, !dbg !39
  %473 = extractvalue { float, float, float, float } %471, 1, !dbg !39
  %474 = extractvalue { float, float, float, float } %471, 2, !dbg !39
  %475 = extractvalue { float, float, float, float } %471, 3, !dbg !39
  %476 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %176, float %177, float %178, float %179, i32 %261, i32 %262, i32 %263, i32 %264, i32 %324, i32 %325) #2, !dbg !39
  %477 = extractvalue { float, float, float, float } %476, 0, !dbg !39
  %478 = extractvalue { float, float, float, float } %476, 1, !dbg !39
  %479 = extractvalue { float, float, float, float } %476, 2, !dbg !39
  %480 = extractvalue { float, float, float, float } %476, 3, !dbg !39
  %481 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %180, float %181, float %182, float %183, i32 %261, i32 %262, i32 %263, i32 %264, i32 %331, i32 %332) #2, !dbg !39
  %482 = extractvalue { float, float, float, float } %481, 0, !dbg !39
  %483 = extractvalue { float, float, float, float } %481, 1, !dbg !39
  %484 = extractvalue { float, float, float, float } %481, 2, !dbg !39
  %485 = extractvalue { float, float, float, float } %481, 3, !dbg !39
  %486 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %184, float %185, float %186, float %187, i32 %261, i32 %262, i32 %263, i32 %264, i32 %338, i32 %339) #2, !dbg !39
  %487 = extractvalue { float, float, float, float } %486, 0, !dbg !39
  %488 = extractvalue { float, float, float, float } %486, 1, !dbg !39
  %489 = extractvalue { float, float, float, float } %486, 2, !dbg !39
  %490 = extractvalue { float, float, float, float } %486, 3, !dbg !39
  %491 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %188, float %189, float %190, float %191, i32 %276, i32 %277, i32 %278, i32 %279, i32 %289, i32 %290) #2, !dbg !39
  %492 = extractvalue { float, float, float, float } %491, 0, !dbg !39
  %493 = extractvalue { float, float, float, float } %491, 1, !dbg !39
  %494 = extractvalue { float, float, float, float } %491, 2, !dbg !39
  %495 = extractvalue { float, float, float, float } %491, 3, !dbg !39
  %496 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %276, i32 %277, i32 %278, i32 %279, i32 %296, i32 %297) #2, !dbg !39
  %497 = extractvalue { float, float, float, float } %496, 0, !dbg !39
  %498 = extractvalue { float, float, float, float } %496, 1, !dbg !39
  %499 = extractvalue { float, float, float, float } %496, 2, !dbg !39
  %500 = extractvalue { float, float, float, float } %496, 3, !dbg !39
  %501 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %196, float %197, float %198, float %199, i32 %276, i32 %277, i32 %278, i32 %279, i32 %303, i32 %304) #2, !dbg !39
  %502 = extractvalue { float, float, float, float } %501, 0, !dbg !39
  %503 = extractvalue { float, float, float, float } %501, 1, !dbg !39
  %504 = extractvalue { float, float, float, float } %501, 2, !dbg !39
  %505 = extractvalue { float, float, float, float } %501, 3, !dbg !39
  %506 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %200, float %201, float %202, float %203, i32 %276, i32 %277, i32 %278, i32 %279, i32 %310, i32 %311) #2, !dbg !39
  %507 = extractvalue { float, float, float, float } %506, 0, !dbg !39
  %508 = extractvalue { float, float, float, float } %506, 1, !dbg !39
  %509 = extractvalue { float, float, float, float } %506, 2, !dbg !39
  %510 = extractvalue { float, float, float, float } %506, 3, !dbg !39
  %511 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %204, float %205, float %206, float %207, i32 %276, i32 %277, i32 %278, i32 %279, i32 %317, i32 %318) #2, !dbg !39
  %512 = extractvalue { float, float, float, float } %511, 0, !dbg !39
  %513 = extractvalue { float, float, float, float } %511, 1, !dbg !39
  %514 = extractvalue { float, float, float, float } %511, 2, !dbg !39
  %515 = extractvalue { float, float, float, float } %511, 3, !dbg !39
  %516 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %208, float %209, float %210, float %211, i32 %276, i32 %277, i32 %278, i32 %279, i32 %324, i32 %325) #2, !dbg !39
  %517 = extractvalue { float, float, float, float } %516, 0, !dbg !39
  %518 = extractvalue { float, float, float, float } %516, 1, !dbg !39
  %519 = extractvalue { float, float, float, float } %516, 2, !dbg !39
  %520 = extractvalue { float, float, float, float } %516, 3, !dbg !39
  %521 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %212, float %213, float %214, float %215, i32 %276, i32 %277, i32 %278, i32 %279, i32 %331, i32 %332) #2, !dbg !39
  %522 = extractvalue { float, float, float, float } %521, 0, !dbg !39
  %523 = extractvalue { float, float, float, float } %521, 1, !dbg !39
  %524 = extractvalue { float, float, float, float } %521, 2, !dbg !39
  %525 = extractvalue { float, float, float, float } %521, 3, !dbg !39
  %526 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %276, i32 %277, i32 %278, i32 %279, i32 %338, i32 %339) #2, !dbg !39
  %527 = extractvalue { float, float, float, float } %526, 0, !dbg !39
  %528 = extractvalue { float, float, float, float } %526, 1, !dbg !39
  %529 = extractvalue { float, float, float, float } %526, 2, !dbg !39
  %530 = extractvalue { float, float, float, float } %526, 3, !dbg !39
  %531 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %452, float %453, float %454, float %455, i32 %268, i32 %269, i32 %270, i32 %271, i32 %291, i32 %292) #2, !dbg !39
  %532 = extractvalue { float, float, float, float } %531, 0, !dbg !39
  %533 = extractvalue { float, float, float, float } %531, 1, !dbg !39
  %534 = extractvalue { float, float, float, float } %531, 2, !dbg !39
  %535 = extractvalue { float, float, float, float } %531, 3, !dbg !39
  %536 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %457, float %458, float %459, float %460, i32 %268, i32 %269, i32 %270, i32 %271, i32 %298, i32 %299) #2, !dbg !39
  %537 = extractvalue { float, float, float, float } %536, 0, !dbg !39
  %538 = extractvalue { float, float, float, float } %536, 1, !dbg !39
  %539 = extractvalue { float, float, float, float } %536, 2, !dbg !39
  %540 = extractvalue { float, float, float, float } %536, 3, !dbg !39
  %541 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %462, float %463, float %464, float %465, i32 %268, i32 %269, i32 %270, i32 %271, i32 %305, i32 %306) #2, !dbg !39
  %542 = extractvalue { float, float, float, float } %541, 0, !dbg !39
  %543 = extractvalue { float, float, float, float } %541, 1, !dbg !39
  %544 = extractvalue { float, float, float, float } %541, 2, !dbg !39
  %545 = extractvalue { float, float, float, float } %541, 3, !dbg !39
  %546 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %467, float %468, float %469, float %470, i32 %268, i32 %269, i32 %270, i32 %271, i32 %312, i32 %313) #2, !dbg !39
  %547 = extractvalue { float, float, float, float } %546, 0, !dbg !39
  %548 = extractvalue { float, float, float, float } %546, 1, !dbg !39
  %549 = extractvalue { float, float, float, float } %546, 2, !dbg !39
  %550 = extractvalue { float, float, float, float } %546, 3, !dbg !39
  %551 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %472, float %473, float %474, float %475, i32 %268, i32 %269, i32 %270, i32 %271, i32 %319, i32 %320) #2, !dbg !39
  %552 = extractvalue { float, float, float, float } %551, 0, !dbg !39
  %553 = extractvalue { float, float, float, float } %551, 1, !dbg !39
  %554 = extractvalue { float, float, float, float } %551, 2, !dbg !39
  %555 = extractvalue { float, float, float, float } %551, 3, !dbg !39
  %556 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %477, float %478, float %479, float %480, i32 %268, i32 %269, i32 %270, i32 %271, i32 %326, i32 %327) #2, !dbg !39
  %557 = extractvalue { float, float, float, float } %556, 0, !dbg !39
  %558 = extractvalue { float, float, float, float } %556, 1, !dbg !39
  %559 = extractvalue { float, float, float, float } %556, 2, !dbg !39
  %560 = extractvalue { float, float, float, float } %556, 3, !dbg !39
  %561 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %482, float %483, float %484, float %485, i32 %268, i32 %269, i32 %270, i32 %271, i32 %333, i32 %334) #2, !dbg !39
  %562 = extractvalue { float, float, float, float } %561, 0, !dbg !39
  %563 = extractvalue { float, float, float, float } %561, 1, !dbg !39
  %564 = extractvalue { float, float, float, float } %561, 2, !dbg !39
  %565 = extractvalue { float, float, float, float } %561, 3, !dbg !39
  %566 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %487, float %488, float %489, float %490, i32 %268, i32 %269, i32 %270, i32 %271, i32 %340, i32 %341) #2, !dbg !39
  %567 = extractvalue { float, float, float, float } %566, 0, !dbg !39
  %568 = extractvalue { float, float, float, float } %566, 1, !dbg !39
  %569 = extractvalue { float, float, float, float } %566, 2, !dbg !39
  %570 = extractvalue { float, float, float, float } %566, 3, !dbg !39
  %571 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %492, float %493, float %494, float %495, i32 %283, i32 %284, i32 %285, i32 %286, i32 %291, i32 %292) #2, !dbg !39
  %572 = extractvalue { float, float, float, float } %571, 0, !dbg !39
  %573 = extractvalue { float, float, float, float } %571, 1, !dbg !39
  %574 = extractvalue { float, float, float, float } %571, 2, !dbg !39
  %575 = extractvalue { float, float, float, float } %571, 3, !dbg !39
  %576 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %497, float %498, float %499, float %500, i32 %283, i32 %284, i32 %285, i32 %286, i32 %298, i32 %299) #2, !dbg !39
  %577 = extractvalue { float, float, float, float } %576, 0, !dbg !39
  %578 = extractvalue { float, float, float, float } %576, 1, !dbg !39
  %579 = extractvalue { float, float, float, float } %576, 2, !dbg !39
  %580 = extractvalue { float, float, float, float } %576, 3, !dbg !39
  %581 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %502, float %503, float %504, float %505, i32 %283, i32 %284, i32 %285, i32 %286, i32 %305, i32 %306) #2, !dbg !39
  %582 = extractvalue { float, float, float, float } %581, 0, !dbg !39
  %583 = extractvalue { float, float, float, float } %581, 1, !dbg !39
  %584 = extractvalue { float, float, float, float } %581, 2, !dbg !39
  %585 = extractvalue { float, float, float, float } %581, 3, !dbg !39
  %586 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %507, float %508, float %509, float %510, i32 %283, i32 %284, i32 %285, i32 %286, i32 %312, i32 %313) #2, !dbg !39
  %587 = extractvalue { float, float, float, float } %586, 0, !dbg !39
  %588 = extractvalue { float, float, float, float } %586, 1, !dbg !39
  %589 = extractvalue { float, float, float, float } %586, 2, !dbg !39
  %590 = extractvalue { float, float, float, float } %586, 3, !dbg !39
  %591 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %512, float %513, float %514, float %515, i32 %283, i32 %284, i32 %285, i32 %286, i32 %319, i32 %320) #2, !dbg !39
  %592 = extractvalue { float, float, float, float } %591, 0, !dbg !39
  %593 = extractvalue { float, float, float, float } %591, 1, !dbg !39
  %594 = extractvalue { float, float, float, float } %591, 2, !dbg !39
  %595 = extractvalue { float, float, float, float } %591, 3, !dbg !39
  %596 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %517, float %518, float %519, float %520, i32 %283, i32 %284, i32 %285, i32 %286, i32 %326, i32 %327) #2, !dbg !39
  %597 = extractvalue { float, float, float, float } %596, 0, !dbg !39
  %598 = extractvalue { float, float, float, float } %596, 1, !dbg !39
  %599 = extractvalue { float, float, float, float } %596, 2, !dbg !39
  %600 = extractvalue { float, float, float, float } %596, 3, !dbg !39
  %601 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %522, float %523, float %524, float %525, i32 %283, i32 %284, i32 %285, i32 %286, i32 %333, i32 %334) #2, !dbg !39
  %602 = extractvalue { float, float, float, float } %601, 0, !dbg !39
  %603 = extractvalue { float, float, float, float } %601, 1, !dbg !39
  %604 = extractvalue { float, float, float, float } %601, 2, !dbg !39
  %605 = extractvalue { float, float, float, float } %601, 3, !dbg !39
  %606 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %527, float %528, float %529, float %530, i32 %283, i32 %284, i32 %285, i32 %286, i32 %340, i32 %341) #2, !dbg !39
  %607 = extractvalue { float, float, float, float } %606, 0, !dbg !39
  %608 = extractvalue { float, float, float, float } %606, 1, !dbg !39
  %609 = extractvalue { float, float, float, float } %606, 2, !dbg !39
  %610 = extractvalue { float, float, float, float } %606, 3, !dbg !39
  %611 = add i32 %155, 1, !dbg !37
  %612 = icmp sgt i32 %611, 1, !dbg !37
  %613 = select i1 %612, i32 0, i32 %611, !dbg !37
  %614 = shl nuw nsw i64 %indvars.iv, 5, !dbg !40
  %615 = add nuw nsw i64 %614, 64, !dbg !40
  %616 = or disjoint i64 %615, %58, !dbg !34
  %617 = or disjoint i64 %615, %43, !dbg !34
  %618 = or disjoint i64 %615, %44, !dbg !34
  %619 = or disjoint i64 %616, %50, !dbg !34
  %620 = or disjoint i64 %616, %51, !dbg !34
  %621 = or disjoint i64 %616, %52, !dbg !34
  %622 = or disjoint i64 %616, %53, !dbg !34
  %623 = getelementptr bfloat, ptr addrspace(1) %24, i64 %619, !dbg !34
  %624 = getelementptr bfloat, ptr addrspace(1) %24, i64 %620, !dbg !34
  %625 = getelementptr bfloat, ptr addrspace(1) %24, i64 %621, !dbg !34
  %626 = getelementptr bfloat, ptr addrspace(1) %24, i64 %622, !dbg !34
  %627 = and i1 %59, %252, !dbg !34
  %628 = and i1 %60, %252, !dbg !34
  %629 = and i1 %61, %252, !dbg !34
  %630 = and i1 %62, %252, !dbg !34
  %631 = shl i32 %613, 11, !dbg !34
  %632 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %631, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %633 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %632, i32 %78, !dbg !34
  %634 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %632, i32 %80, !dbg !34
  %635 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %632, i32 %82, !dbg !34
  %636 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %632, i32 %84, !dbg !34
  %637 = select i1 %627, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %633, ptr addrspace(1) %623, i32 %637) #2, !dbg !34
  %638 = select i1 %628, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %634, ptr addrspace(1) %624, i32 %638) #2, !dbg !34
  %639 = select i1 %629, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %635, ptr addrspace(1) %625, i32 %639) #2, !dbg !34
  %640 = select i1 %630, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %636, ptr addrspace(1) %626, i32 %640) #2, !dbg !34
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !34
  %641 = getelementptr bfloat, ptr addrspace(1) %25, i64 %619, !dbg !36
  %642 = getelementptr bfloat, ptr addrspace(1) %25, i64 %620, !dbg !36
  %643 = getelementptr bfloat, ptr addrspace(1) %25, i64 %621, !dbg !36
  %644 = getelementptr bfloat, ptr addrspace(1) %25, i64 %622, !dbg !36
  %645 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %631, !dbg !36
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %645, i32 %78, !dbg !36
  %647 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %645, i32 %80, !dbg !36
  %648 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %645, i32 %82, !dbg !36
  %649 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %645, i32 %84, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %646, ptr addrspace(1) %641, i32 %637) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %647, ptr addrspace(1) %642, i32 %638) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %648, ptr addrspace(1) %643, i32 %639) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %649, ptr addrspace(1) %644, i32 %640) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %.idx71 = shl nuw nsw i64 %617, 8, !dbg !35
  %gep = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx71, !dbg !35
  %.idx72 = shl nuw nsw i64 %618, 8, !dbg !35
  %gep109 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx72, !dbg !35
  %650 = and i1 %66, %252, !dbg !35
  %651 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %631, !dbg !35
  %652 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %651, i32 %78, !dbg !35
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %651, i32 %80, !dbg !35
  %654 = select i1 %650, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %652, ptr addrspace(1) %gep, i32 %654) #2, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %653, ptr addrspace(1) %gep109, i32 %654) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !37
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !37
  br i1 %exitcond.not, label %655, label %153, !dbg !37

655:                                              ; preds = %153
  %656 = and i32 %40, 7, !dbg !34
  %657 = getelementptr bfloat, ptr addrspace(1) %5, i64 %23, !dbg !41
  %658 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !42
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %659 = sext i32 %21 to i64, !dbg !43
  %660 = getelementptr float, ptr addrspace(1) %4, i64 %659, !dbg !43
  %661 = lshr exact i32 %39, 1, !dbg !44
  %662 = or disjoint i32 %656, %661, !dbg !44
  %663 = or disjoint i32 %662, 8, !dbg !44
  %664 = or disjoint i32 %662, 32, !dbg !44
  %665 = or disjoint i32 %662, 40, !dbg !44
  %666 = shl nuw nsw i32 %35, 1, !dbg !44
  %667 = and i32 %666, 6, !dbg !44
  %668 = or disjoint i32 %667, 8, !dbg !44
  %669 = or disjoint i32 %667, 9, !dbg !44
  %670 = or disjoint i32 %667, 16, !dbg !44
  %671 = or disjoint i32 %667, 17, !dbg !44
  %672 = or disjoint i32 %667, 24, !dbg !44
  %673 = or disjoint i32 %667, 25, !dbg !44
  %674 = or disjoint i32 %667, 32, !dbg !44
  %675 = or disjoint i32 %667, 33, !dbg !44
  %676 = or disjoint i32 %667, 40, !dbg !44
  %677 = or disjoint i32 %667, 41, !dbg !44
  %678 = or disjoint i32 %667, 48, !dbg !44
  %679 = or disjoint i32 %667, 49, !dbg !44
  %680 = or disjoint i32 %667, 56, !dbg !44
  %681 = or disjoint i32 %667, 57, !dbg !44
  %682 = and i32 %35, 63, !dbg !44
  %683 = or disjoint i32 %30, %682, !dbg !44
  %684 = shl nuw nsw i32 %683, 7, !dbg !44
  %.idx6 = zext nneg i32 %684 to i64, !dbg !44
  %685 = getelementptr i8, ptr addrspace(1) %660, i64 %.idx6, !dbg !44
  %686 = icmp slt i32 %683, %7, !dbg !44
  %687 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %685, i1 %686) #2, !dbg !44
  %688 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %682, !dbg !45
  %689 = insertelement <1 x i32> poison, i32 %687, i64 0, !dbg !45
  store <1 x i32> %689, ptr addrspace(3) %688, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %690 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %662, !dbg !45
  %691 = load float, ptr addrspace(3) %690, align 4, !dbg !45
  %692 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %663, !dbg !45
  %693 = load float, ptr addrspace(3) %692, align 4, !dbg !45
  %694 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %664, !dbg !45
  %695 = load float, ptr addrspace(3) %694, align 4, !dbg !45
  %696 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %665, !dbg !45
  %697 = load float, ptr addrspace(3) %696, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  store <1 x i32> %689, ptr addrspace(3) %688, align 4, !dbg !46
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !46
  %698 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %667, !dbg !46
  %699 = load float, ptr addrspace(3) %698, align 8, !dbg !46
  %700 = getelementptr inbounds nuw i8, ptr addrspace(3) %698, i32 4, !dbg !46
  %701 = load float, ptr addrspace(3) %700, align 4, !dbg !46
  %702 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %668, !dbg !46
  %703 = load float, ptr addrspace(3) %702, align 8, !dbg !46
  %704 = getelementptr inbounds nuw i8, ptr addrspace(3) %702, i32 4, !dbg !46
  %705 = load float, ptr addrspace(3) %704, align 4, !dbg !46
  %706 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %670, !dbg !46
  %707 = load float, ptr addrspace(3) %706, align 8, !dbg !46
  %708 = getelementptr inbounds nuw i8, ptr addrspace(3) %706, i32 4, !dbg !46
  %709 = load float, ptr addrspace(3) %708, align 4, !dbg !46
  %710 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %672, !dbg !46
  %711 = load float, ptr addrspace(3) %710, align 8, !dbg !46
  %712 = getelementptr inbounds nuw i8, ptr addrspace(3) %710, i32 4, !dbg !46
  %713 = load float, ptr addrspace(3) %712, align 4, !dbg !46
  %714 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %674, !dbg !46
  %715 = load float, ptr addrspace(3) %714, align 8, !dbg !46
  %716 = getelementptr inbounds nuw i8, ptr addrspace(3) %714, i32 4, !dbg !46
  %717 = load float, ptr addrspace(3) %716, align 4, !dbg !46
  %718 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %676, !dbg !46
  %719 = load float, ptr addrspace(3) %718, align 8, !dbg !46
  %720 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 4, !dbg !46
  %721 = load float, ptr addrspace(3) %720, align 4, !dbg !46
  %722 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %678, !dbg !46
  %723 = load float, ptr addrspace(3) %722, align 8, !dbg !46
  %724 = getelementptr inbounds nuw i8, ptr addrspace(3) %722, i32 4, !dbg !46
  %725 = load float, ptr addrspace(3) %724, align 4, !dbg !46
  %726 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %680, !dbg !46
  %727 = load float, ptr addrspace(3) %726, align 8, !dbg !46
  %728 = getelementptr inbounds nuw i8, ptr addrspace(3) %726, i32 4, !dbg !46
  %729 = load float, ptr addrspace(3) %728, align 4, !dbg !46
  %730 = fmul float %691, 0x3FF7154760000000, !dbg !45
  %731 = tail call float @llvm.nvvm.ex2.approx.f(float %730), !dbg !45
  %732 = fmul float %693, 0x3FF7154760000000, !dbg !45
  %733 = tail call float @llvm.nvvm.ex2.approx.f(float %732), !dbg !45
  %734 = fmul float %695, 0x3FF7154760000000, !dbg !45
  %735 = tail call float @llvm.nvvm.ex2.approx.f(float %734), !dbg !45
  %736 = fmul float %697, 0x3FF7154760000000, !dbg !45
  %737 = tail call float @llvm.nvvm.ex2.approx.f(float %736), !dbg !45
  %738 = fsub float %691, %699, !dbg !47
  %739 = fsub float %691, %701, !dbg !47
  %740 = fsub float %693, %699, !dbg !47
  %741 = fsub float %693, %701, !dbg !47
  %742 = fsub float %691, %703, !dbg !47
  %743 = fsub float %691, %705, !dbg !47
  %744 = fsub float %693, %703, !dbg !47
  %745 = fsub float %693, %705, !dbg !47
  %746 = fsub float %691, %707, !dbg !47
  %747 = fsub float %691, %709, !dbg !47
  %748 = fsub float %693, %707, !dbg !47
  %749 = fsub float %693, %709, !dbg !47
  %750 = fsub float %693, %711, !dbg !47
  %751 = fsub float %693, %713, !dbg !47
  %752 = fsub float %695, %699, !dbg !47
  %753 = fsub float %695, %701, !dbg !47
  %754 = fsub float %697, %699, !dbg !47
  %755 = fsub float %697, %701, !dbg !47
  %756 = fsub float %695, %703, !dbg !47
  %757 = fsub float %695, %705, !dbg !47
  %758 = fsub float %697, %703, !dbg !47
  %759 = fsub float %697, %705, !dbg !47
  %760 = fsub float %695, %707, !dbg !47
  %761 = fsub float %695, %709, !dbg !47
  %762 = fsub float %697, %707, !dbg !47
  %763 = fsub float %697, %709, !dbg !47
  %764 = fsub float %695, %711, !dbg !47
  %765 = fsub float %695, %713, !dbg !47
  %766 = fsub float %697, %711, !dbg !47
  %767 = fsub float %697, %713, !dbg !47
  %768 = fsub float %695, %715, !dbg !47
  %769 = fsub float %695, %717, !dbg !47
  %770 = fsub float %697, %715, !dbg !47
  %771 = fsub float %697, %717, !dbg !47
  %772 = fsub float %695, %719, !dbg !47
  %773 = fsub float %695, %721, !dbg !47
  %774 = fsub float %697, %719, !dbg !47
  %775 = fsub float %697, %721, !dbg !47
  %776 = fsub float %695, %723, !dbg !47
  %777 = fsub float %695, %725, !dbg !47
  %778 = fsub float %697, %723, !dbg !47
  %779 = fsub float %697, %725, !dbg !47
  %780 = fsub float %697, %727, !dbg !47
  %781 = fsub float %697, %729, !dbg !47
  %782 = fmul float %738, 0x3FF7154760000000, !dbg !46
  %783 = tail call float @llvm.nvvm.ex2.approx.f(float %782), !dbg !46
  %784 = fmul float %739, 0x3FF7154760000000, !dbg !46
  %785 = tail call float @llvm.nvvm.ex2.approx.f(float %784), !dbg !46
  %786 = fmul float %740, 0x3FF7154760000000, !dbg !46
  %787 = tail call float @llvm.nvvm.ex2.approx.f(float %786), !dbg !46
  %788 = fmul float %741, 0x3FF7154760000000, !dbg !46
  %789 = tail call float @llvm.nvvm.ex2.approx.f(float %788), !dbg !46
  %790 = fmul float %742, 0x3FF7154760000000, !dbg !46
  %791 = tail call float @llvm.nvvm.ex2.approx.f(float %790), !dbg !46
  %792 = fmul float %743, 0x3FF7154760000000, !dbg !46
  %793 = tail call float @llvm.nvvm.ex2.approx.f(float %792), !dbg !46
  %794 = fmul float %744, 0x3FF7154760000000, !dbg !46
  %795 = tail call float @llvm.nvvm.ex2.approx.f(float %794), !dbg !46
  %796 = fmul float %745, 0x3FF7154760000000, !dbg !46
  %797 = tail call float @llvm.nvvm.ex2.approx.f(float %796), !dbg !46
  %798 = fmul float %746, 0x3FF7154760000000, !dbg !46
  %799 = tail call float @llvm.nvvm.ex2.approx.f(float %798), !dbg !46
  %800 = fmul float %747, 0x3FF7154760000000, !dbg !46
  %801 = tail call float @llvm.nvvm.ex2.approx.f(float %800), !dbg !46
  %802 = fmul float %748, 0x3FF7154760000000, !dbg !46
  %803 = tail call float @llvm.nvvm.ex2.approx.f(float %802), !dbg !46
  %804 = fmul float %749, 0x3FF7154760000000, !dbg !46
  %805 = tail call float @llvm.nvvm.ex2.approx.f(float %804), !dbg !46
  %806 = fmul float %750, 0x3FF7154760000000, !dbg !46
  %807 = tail call float @llvm.nvvm.ex2.approx.f(float %806), !dbg !46
  %808 = fmul float %751, 0x3FF7154760000000, !dbg !46
  %809 = tail call float @llvm.nvvm.ex2.approx.f(float %808), !dbg !46
  %810 = fmul float %752, 0x3FF7154760000000, !dbg !46
  %811 = tail call float @llvm.nvvm.ex2.approx.f(float %810), !dbg !46
  %812 = fmul float %753, 0x3FF7154760000000, !dbg !46
  %813 = tail call float @llvm.nvvm.ex2.approx.f(float %812), !dbg !46
  %814 = fmul float %754, 0x3FF7154760000000, !dbg !46
  %815 = tail call float @llvm.nvvm.ex2.approx.f(float %814), !dbg !46
  %816 = fmul float %755, 0x3FF7154760000000, !dbg !46
  %817 = tail call float @llvm.nvvm.ex2.approx.f(float %816), !dbg !46
  %818 = fmul float %756, 0x3FF7154760000000, !dbg !46
  %819 = tail call float @llvm.nvvm.ex2.approx.f(float %818), !dbg !46
  %820 = fmul float %757, 0x3FF7154760000000, !dbg !46
  %821 = tail call float @llvm.nvvm.ex2.approx.f(float %820), !dbg !46
  %822 = fmul float %758, 0x3FF7154760000000, !dbg !46
  %823 = tail call float @llvm.nvvm.ex2.approx.f(float %822), !dbg !46
  %824 = fmul float %759, 0x3FF7154760000000, !dbg !46
  %825 = tail call float @llvm.nvvm.ex2.approx.f(float %824), !dbg !46
  %826 = fmul float %760, 0x3FF7154760000000, !dbg !46
  %827 = tail call float @llvm.nvvm.ex2.approx.f(float %826), !dbg !46
  %828 = fmul float %761, 0x3FF7154760000000, !dbg !46
  %829 = tail call float @llvm.nvvm.ex2.approx.f(float %828), !dbg !46
  %830 = fmul float %762, 0x3FF7154760000000, !dbg !46
  %831 = tail call float @llvm.nvvm.ex2.approx.f(float %830), !dbg !46
  %832 = fmul float %763, 0x3FF7154760000000, !dbg !46
  %833 = tail call float @llvm.nvvm.ex2.approx.f(float %832), !dbg !46
  %834 = fmul float %764, 0x3FF7154760000000, !dbg !46
  %835 = tail call float @llvm.nvvm.ex2.approx.f(float %834), !dbg !46
  %836 = fmul float %765, 0x3FF7154760000000, !dbg !46
  %837 = tail call float @llvm.nvvm.ex2.approx.f(float %836), !dbg !46
  %838 = fmul float %766, 0x3FF7154760000000, !dbg !46
  %839 = tail call float @llvm.nvvm.ex2.approx.f(float %838), !dbg !46
  %840 = fmul float %767, 0x3FF7154760000000, !dbg !46
  %841 = tail call float @llvm.nvvm.ex2.approx.f(float %840), !dbg !46
  %842 = fmul float %768, 0x3FF7154760000000, !dbg !46
  %843 = tail call float @llvm.nvvm.ex2.approx.f(float %842), !dbg !46
  %844 = fmul float %769, 0x3FF7154760000000, !dbg !46
  %845 = tail call float @llvm.nvvm.ex2.approx.f(float %844), !dbg !46
  %846 = fmul float %770, 0x3FF7154760000000, !dbg !46
  %847 = tail call float @llvm.nvvm.ex2.approx.f(float %846), !dbg !46
  %848 = fmul float %771, 0x3FF7154760000000, !dbg !46
  %849 = tail call float @llvm.nvvm.ex2.approx.f(float %848), !dbg !46
  %850 = fmul float %772, 0x3FF7154760000000, !dbg !46
  %851 = tail call float @llvm.nvvm.ex2.approx.f(float %850), !dbg !46
  %852 = fmul float %773, 0x3FF7154760000000, !dbg !46
  %853 = tail call float @llvm.nvvm.ex2.approx.f(float %852), !dbg !46
  %854 = fmul float %774, 0x3FF7154760000000, !dbg !46
  %855 = tail call float @llvm.nvvm.ex2.approx.f(float %854), !dbg !46
  %856 = fmul float %775, 0x3FF7154760000000, !dbg !46
  %857 = tail call float @llvm.nvvm.ex2.approx.f(float %856), !dbg !46
  %858 = fmul float %776, 0x3FF7154760000000, !dbg !46
  %859 = tail call float @llvm.nvvm.ex2.approx.f(float %858), !dbg !46
  %860 = fmul float %777, 0x3FF7154760000000, !dbg !46
  %861 = tail call float @llvm.nvvm.ex2.approx.f(float %860), !dbg !46
  %862 = fmul float %778, 0x3FF7154760000000, !dbg !46
  %863 = tail call float @llvm.nvvm.ex2.approx.f(float %862), !dbg !46
  %864 = fmul float %779, 0x3FF7154760000000, !dbg !46
  %865 = tail call float @llvm.nvvm.ex2.approx.f(float %864), !dbg !46
  %866 = fmul float %780, 0x3FF7154760000000, !dbg !46
  %867 = tail call float @llvm.nvvm.ex2.approx.f(float %866), !dbg !46
  %868 = fmul float %781, 0x3FF7154760000000, !dbg !46
  %869 = tail call float @llvm.nvvm.ex2.approx.f(float %868), !dbg !46
  %870 = fmul float %532, %783, !dbg !48
  %871 = fmul float %533, %785, !dbg !48
  %872 = fmul float %534, %787, !dbg !48
  %873 = fmul float %535, %789, !dbg !48
  %874 = fmul float %537, %791, !dbg !48
  %875 = fmul float %538, %793, !dbg !48
  %876 = fmul float %539, %795, !dbg !48
  %877 = fmul float %540, %797, !dbg !48
  %878 = fmul float %542, %799, !dbg !48
  %879 = fmul float %543, %801, !dbg !48
  %880 = fmul float %544, %803, !dbg !48
  %881 = fmul float %545, %805, !dbg !48
  %882 = fmul float %549, %807, !dbg !48
  %883 = fmul float %550, %809, !dbg !48
  %884 = fmul float %572, %811, !dbg !48
  %885 = fmul float %573, %813, !dbg !48
  %886 = fmul float %574, %815, !dbg !48
  %887 = fmul float %575, %817, !dbg !48
  %888 = fmul float %577, %819, !dbg !48
  %889 = fmul float %578, %821, !dbg !48
  %890 = fmul float %579, %823, !dbg !48
  %891 = fmul float %580, %825, !dbg !48
  %892 = fmul float %582, %827, !dbg !48
  %893 = fmul float %583, %829, !dbg !48
  %894 = fmul float %584, %831, !dbg !48
  %895 = fmul float %585, %833, !dbg !48
  %896 = fmul float %587, %835, !dbg !48
  %897 = fmul float %588, %837, !dbg !48
  %898 = fmul float %589, %839, !dbg !48
  %899 = fmul float %590, %841, !dbg !48
  %900 = fmul float %592, %843, !dbg !48
  %901 = fmul float %593, %845, !dbg !48
  %902 = fmul float %594, %847, !dbg !48
  %903 = fmul float %595, %849, !dbg !48
  %904 = fmul float %597, %851, !dbg !48
  %905 = fmul float %598, %853, !dbg !48
  %906 = fmul float %599, %855, !dbg !48
  %907 = fmul float %600, %857, !dbg !48
  %908 = fmul float %602, %859, !dbg !48
  %909 = fmul float %603, %861, !dbg !48
  %910 = fmul float %604, %863, !dbg !48
  %911 = fmul float %605, %865, !dbg !48
  %912 = fmul float %609, %867, !dbg !48
  %913 = fmul float %610, %869, !dbg !48
  %914 = or disjoint i32 %662, %30, !dbg !49
  %915 = or disjoint i32 %663, %30, !dbg !49
  %916 = or disjoint i32 %664, %30, !dbg !49
  %917 = or disjoint i32 %665, %30, !dbg !49
  %918 = or disjoint i32 %667, %30, !dbg !49
  %919 = or disjoint i32 %918, 1, !dbg !49
  %920 = or disjoint i32 %668, %30, !dbg !49
  %921 = or disjoint i32 %669, %30, !dbg !49
  %922 = or disjoint i32 %670, %30, !dbg !49
  %923 = or disjoint i32 %671, %30, !dbg !49
  %924 = or disjoint i32 %672, %30, !dbg !49
  %925 = or disjoint i32 %673, %30, !dbg !49
  %926 = or disjoint i32 %674, %30, !dbg !49
  %927 = or disjoint i32 %675, %30, !dbg !49
  %928 = or disjoint i32 %676, %30, !dbg !49
  %929 = or disjoint i32 %677, %30, !dbg !49
  %930 = or disjoint i32 %678, %30, !dbg !49
  %931 = or disjoint i32 %679, %30, !dbg !49
  %932 = or disjoint i32 %680, %30, !dbg !49
  %933 = or disjoint i32 %681, %30, !dbg !49
  %934 = icmp slt i32 %914, %7, !dbg !50
  %935 = icmp slt i32 %915, %7, !dbg !50
  %936 = icmp slt i32 %916, %7, !dbg !50
  %937 = icmp slt i32 %917, %7, !dbg !50
  %938 = icmp slt i32 %918, %7, !dbg !50
  %939 = icmp slt i32 %919, %7, !dbg !50
  %940 = icmp slt i32 %920, %7, !dbg !50
  %941 = icmp slt i32 %921, %7, !dbg !50
  %942 = icmp slt i32 %922, %7, !dbg !50
  %943 = icmp slt i32 %923, %7, !dbg !50
  %944 = icmp slt i32 %924, %7, !dbg !50
  %945 = icmp slt i32 %925, %7, !dbg !50
  %946 = icmp slt i32 %926, %7, !dbg !50
  %947 = icmp slt i32 %927, %7, !dbg !50
  %948 = icmp slt i32 %928, %7, !dbg !50
  %949 = icmp slt i32 %929, %7, !dbg !50
  %950 = icmp slt i32 %930, %7, !dbg !50
  %951 = icmp slt i32 %931, %7, !dbg !50
  %952 = icmp slt i32 %932, %7, !dbg !50
  %953 = icmp slt i32 %933, %7, !dbg !50
  %954 = icmp samesign uge i32 %662, %667, !dbg !51
  %955 = icmp samesign ugt i32 %662, %667, !dbg !51
  %956 = icmp samesign uge i32 %662, %668, !dbg !51
  %957 = icmp samesign uge i32 %662, %669, !dbg !51
  %958 = icmp samesign uge i32 %663, %669, !dbg !51
  %959 = icmp samesign uge i32 %662, %670, !dbg !51
  %960 = icmp samesign uge i32 %662, %671, !dbg !51
  %961 = icmp samesign uge i32 %663, %670, !dbg !51
  %962 = icmp samesign uge i32 %663, %671, !dbg !51
  %963 = icmp samesign uge i32 %663, %672, !dbg !51
  %964 = icmp samesign uge i32 %663, %673, !dbg !51
  %965 = icmp samesign uge i32 %664, %675, !dbg !51
  %966 = icmp samesign uge i32 %664, %676, !dbg !51
  %967 = icmp samesign uge i32 %664, %677, !dbg !51
  %968 = icmp samesign uge i32 %665, %677, !dbg !51
  %969 = icmp samesign uge i32 %664, %678, !dbg !51
  %970 = icmp samesign uge i32 %664, %679, !dbg !51
  %971 = icmp samesign uge i32 %665, %678, !dbg !51
  %972 = icmp samesign uge i32 %665, %679, !dbg !51
  %973 = icmp samesign uge i32 %665, %680, !dbg !51
  %974 = icmp samesign uge i32 %665, %681, !dbg !51
  %975 = and i1 %935, %938, !dbg !52
  %976 = and i1 %935, %939, !dbg !52
  %977 = and i1 %936, %938, !dbg !52
  %978 = and i1 %936, %939, !dbg !52
  %979 = and i1 %937, %938, !dbg !52
  %980 = and i1 %937, %939, !dbg !52
  %981 = and i1 %936, %940, !dbg !52
  %982 = and i1 %936, %941, !dbg !52
  %983 = and i1 %937, %940, !dbg !52
  %984 = and i1 %937, %941, !dbg !52
  %985 = and i1 %936, %942, !dbg !52
  %986 = and i1 %936, %943, !dbg !52
  %987 = and i1 %937, %942, !dbg !52
  %988 = and i1 %937, %943, !dbg !52
  %989 = and i1 %936, %944, !dbg !52
  %990 = and i1 %936, %945, !dbg !52
  %991 = and i1 %937, %944, !dbg !52
  %992 = and i1 %937, %945, !dbg !52
  %993 = and i1 %937, %946, !dbg !52
  %994 = and i1 %937, %947, !dbg !52
  %995 = and i1 %954, %938, !dbg !53
  %996 = and i1 %934, %995, !dbg !53
  %997 = and i1 %955, %939, !dbg !53
  %998 = and i1 %934, %997, !dbg !53
  %999 = and i1 %956, %940, !dbg !53
  %1000 = and i1 %934, %999, !dbg !53
  %1001 = and i1 %957, %941, !dbg !53
  %1002 = and i1 %934, %1001, !dbg !53
  %1003 = and i1 %954, %940, !dbg !53
  %1004 = and i1 %935, %1003, !dbg !53
  %1005 = and i1 %958, %941, !dbg !53
  %1006 = and i1 %935, %1005, !dbg !53
  %1007 = and i1 %959, %942, !dbg !53
  %1008 = and i1 %934, %1007, !dbg !53
  %1009 = and i1 %960, %943, !dbg !53
  %1010 = and i1 %934, %1009, !dbg !53
  %1011 = and i1 %961, %942, !dbg !53
  %1012 = and i1 %935, %1011, !dbg !53
  %1013 = and i1 %962, %943, !dbg !53
  %1014 = and i1 %935, %1013, !dbg !53
  %1015 = and i1 %963, %944, !dbg !53
  %1016 = and i1 %935, %1015, !dbg !53
  %1017 = and i1 %964, %945, !dbg !53
  %1018 = and i1 %935, %1017, !dbg !53
  %1019 = and i1 %954, %946, !dbg !53
  %1020 = and i1 %936, %1019, !dbg !53
  %1021 = and i1 %965, %947, !dbg !53
  %1022 = and i1 %936, %1021, !dbg !53
  %1023 = and i1 %966, %948, !dbg !53
  %1024 = and i1 %936, %1023, !dbg !53
  %1025 = and i1 %967, %949, !dbg !53
  %1026 = and i1 %936, %1025, !dbg !53
  %1027 = and i1 %954, %948, !dbg !53
  %1028 = and i1 %937, %1027, !dbg !53
  %1029 = and i1 %968, %949, !dbg !53
  %1030 = and i1 %937, %1029, !dbg !53
  %1031 = and i1 %969, %950, !dbg !53
  %1032 = and i1 %936, %1031, !dbg !53
  %1033 = and i1 %970, %951, !dbg !53
  %1034 = and i1 %936, %1033, !dbg !53
  %1035 = and i1 %971, %950, !dbg !53
  %1036 = and i1 %937, %1035, !dbg !53
  %1037 = and i1 %972, %951, !dbg !53
  %1038 = and i1 %937, %1037, !dbg !53
  %1039 = and i1 %973, %952, !dbg !53
  %1040 = and i1 %937, %1039, !dbg !53
  %1041 = and i1 %974, %953, !dbg !53
  %1042 = and i1 %937, %1041, !dbg !53
  %1043 = add nsw i64 %50, %63, !dbg !54
  %1044 = add nsw i64 %51, %63, !dbg !54
  %1045 = add nsw i64 %52, %63, !dbg !54
  %1046 = add nsw i64 %53, %63, !dbg !54
  %1047 = getelementptr bfloat, ptr addrspace(1) %658, i64 %1043, !dbg !54
  %1048 = getelementptr bfloat, ptr addrspace(1) %658, i64 %1044, !dbg !54
  %1049 = getelementptr bfloat, ptr addrspace(1) %658, i64 %1045, !dbg !54
  %1050 = getelementptr bfloat, ptr addrspace(1) %658, i64 %1046, !dbg !54
  %1051 = and i1 %66, %59, !dbg !54
  %1052 = and i1 %66, %60, !dbg !54
  %1053 = and i1 %66, %61, !dbg !54
  %1054 = and i1 %66, %62, !dbg !54
  %1055 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1047, i1 %1051) #2, !dbg !54
  %1056 = extractvalue { i32, i32, i32, i32 } %1055, 0, !dbg !54
  %1057 = bitcast i32 %1056 to <2 x bfloat>, !dbg !54
  %1058 = extractvalue { i32, i32, i32, i32 } %1055, 1, !dbg !54
  %1059 = bitcast i32 %1058 to <2 x bfloat>, !dbg !54
  %1060 = extractvalue { i32, i32, i32, i32 } %1055, 2, !dbg !54
  %1061 = bitcast i32 %1060 to <2 x bfloat>, !dbg !54
  %1062 = shufflevector <2 x bfloat> %1061, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1063 = extractvalue { i32, i32, i32, i32 } %1055, 3, !dbg !54
  %1064 = bitcast i32 %1063 to <2 x bfloat>, !dbg !54
  %1065 = shufflevector <2 x bfloat> %1064, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1066 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1048, i1 %1052) #2, !dbg !54
  %1067 = extractvalue { i32, i32, i32, i32 } %1066, 0, !dbg !54
  %1068 = bitcast i32 %1067 to <2 x bfloat>, !dbg !54
  %1069 = extractvalue { i32, i32, i32, i32 } %1066, 1, !dbg !54
  %1070 = bitcast i32 %1069 to <2 x bfloat>, !dbg !54
  %1071 = extractvalue { i32, i32, i32, i32 } %1066, 2, !dbg !54
  %1072 = bitcast i32 %1071 to <2 x bfloat>, !dbg !54
  %1073 = shufflevector <2 x bfloat> %1072, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1074 = extractvalue { i32, i32, i32, i32 } %1066, 3, !dbg !54
  %1075 = bitcast i32 %1074 to <2 x bfloat>, !dbg !54
  %1076 = shufflevector <2 x bfloat> %1075, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1077 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1049, i1 %1053) #2, !dbg !54
  %1078 = extractvalue { i32, i32, i32, i32 } %1077, 0, !dbg !54
  %1079 = bitcast i32 %1078 to <2 x bfloat>, !dbg !54
  %1080 = extractvalue { i32, i32, i32, i32 } %1077, 1, !dbg !54
  %1081 = bitcast i32 %1080 to <2 x bfloat>, !dbg !54
  %1082 = extractvalue { i32, i32, i32, i32 } %1077, 2, !dbg !54
  %1083 = bitcast i32 %1082 to <2 x bfloat>, !dbg !54
  %1084 = shufflevector <2 x bfloat> %1083, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1085 = extractvalue { i32, i32, i32, i32 } %1077, 3, !dbg !54
  %1086 = bitcast i32 %1085 to <2 x bfloat>, !dbg !54
  %1087 = shufflevector <2 x bfloat> %1086, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1088 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1050, i1 %1054) #2, !dbg !54
  %1089 = extractvalue { i32, i32, i32, i32 } %1088, 0, !dbg !54
  %1090 = bitcast i32 %1089 to <2 x bfloat>, !dbg !54
  %1091 = extractvalue { i32, i32, i32, i32 } %1088, 1, !dbg !54
  %1092 = bitcast i32 %1091 to <2 x bfloat>, !dbg !54
  %1093 = extractvalue { i32, i32, i32, i32 } %1088, 2, !dbg !54
  %1094 = bitcast i32 %1093 to <2 x bfloat>, !dbg !54
  %1095 = shufflevector <2 x bfloat> %1094, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1096 = extractvalue { i32, i32, i32, i32 } %1088, 3, !dbg !54
  %1097 = bitcast i32 %1096 to <2 x bfloat>, !dbg !54
  %1098 = shufflevector <2 x bfloat> %1097, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %1099 = shufflevector <2 x bfloat> %1057, <2 x bfloat> %1059, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1100 = shufflevector <8 x bfloat> %1099, <8 x bfloat> %1062, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !54
  %1101 = shufflevector <8 x bfloat> %1100, <8 x bfloat> %1065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !54
  store <8 x bfloat> %1101, ptr addrspace(3) %79, align 16, !dbg !54
  %1102 = shufflevector <2 x bfloat> %1068, <2 x bfloat> %1070, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1103 = shufflevector <8 x bfloat> %1102, <8 x bfloat> %1073, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !54
  %1104 = shufflevector <8 x bfloat> %1103, <8 x bfloat> %1076, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !54
  store <8 x bfloat> %1104, ptr addrspace(3) %81, align 16, !dbg !54
  %1105 = shufflevector <2 x bfloat> %1079, <2 x bfloat> %1081, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1106 = shufflevector <8 x bfloat> %1105, <8 x bfloat> %1084, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !54
  %1107 = shufflevector <8 x bfloat> %1106, <8 x bfloat> %1087, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !54
  store <8 x bfloat> %1107, ptr addrspace(3) %83, align 16, !dbg !54
  %1108 = shufflevector <2 x bfloat> %1090, <2 x bfloat> %1092, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !54
  %1109 = shufflevector <8 x bfloat> %1108, <8 x bfloat> %1095, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !54
  %1110 = shufflevector <8 x bfloat> %1109, <8 x bfloat> %1098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !54
  store <8 x bfloat> %1110, ptr addrspace(3) %85, align 16, !dbg !54
  %1111 = fptrunc float %870 to bfloat, !dbg !55
  %1112 = select i1 %996, bfloat %1111, bfloat 0xR0000, !dbg !56
  %1113 = fptrunc float %871 to bfloat, !dbg !55
  %1114 = select i1 %998, bfloat %1113, bfloat 0xR0000, !dbg !56
  %1115 = fptrunc float %872 to bfloat, !dbg !55
  %1116 = select i1 %975, bfloat %1115, bfloat 0xR0000, !dbg !56
  %1117 = fptrunc float %873 to bfloat, !dbg !55
  %1118 = select i1 %976, bfloat %1117, bfloat 0xR0000, !dbg !56
  %1119 = fptrunc float %874 to bfloat, !dbg !55
  %1120 = select i1 %1000, bfloat %1119, bfloat 0xR0000, !dbg !56
  %1121 = fptrunc float %875 to bfloat, !dbg !55
  %1122 = select i1 %1002, bfloat %1121, bfloat 0xR0000, !dbg !56
  %1123 = fptrunc float %876 to bfloat, !dbg !55
  %1124 = select i1 %1004, bfloat %1123, bfloat 0xR0000, !dbg !56
  %1125 = fptrunc float %877 to bfloat, !dbg !55
  %1126 = select i1 %1006, bfloat %1125, bfloat 0xR0000, !dbg !56
  %1127 = fptrunc float %878 to bfloat, !dbg !55
  %1128 = select i1 %1008, bfloat %1127, bfloat 0xR0000, !dbg !56
  %1129 = fptrunc float %879 to bfloat, !dbg !55
  %1130 = select i1 %1010, bfloat %1129, bfloat 0xR0000, !dbg !56
  %1131 = fptrunc float %880 to bfloat, !dbg !55
  %1132 = select i1 %1012, bfloat %1131, bfloat 0xR0000, !dbg !56
  %1133 = fptrunc float %881 to bfloat, !dbg !55
  %1134 = select i1 %1014, bfloat %1133, bfloat 0xR0000, !dbg !56
  %1135 = fptrunc float %882 to bfloat, !dbg !55
  %1136 = select i1 %1016, bfloat %1135, bfloat 0xR0000, !dbg !56
  %1137 = fptrunc float %883 to bfloat, !dbg !55
  %1138 = select i1 %1018, bfloat %1137, bfloat 0xR0000, !dbg !56
  %1139 = fptrunc float %884 to bfloat, !dbg !55
  %1140 = select i1 %977, bfloat %1139, bfloat 0xR0000, !dbg !56
  %1141 = fptrunc float %885 to bfloat, !dbg !55
  %1142 = select i1 %978, bfloat %1141, bfloat 0xR0000, !dbg !56
  %1143 = fptrunc float %886 to bfloat, !dbg !55
  %1144 = select i1 %979, bfloat %1143, bfloat 0xR0000, !dbg !56
  %1145 = fptrunc float %887 to bfloat, !dbg !55
  %1146 = select i1 %980, bfloat %1145, bfloat 0xR0000, !dbg !56
  %1147 = fptrunc float %888 to bfloat, !dbg !55
  %1148 = select i1 %981, bfloat %1147, bfloat 0xR0000, !dbg !56
  %1149 = fptrunc float %889 to bfloat, !dbg !55
  %1150 = select i1 %982, bfloat %1149, bfloat 0xR0000, !dbg !56
  %1151 = fptrunc float %890 to bfloat, !dbg !55
  %1152 = select i1 %983, bfloat %1151, bfloat 0xR0000, !dbg !56
  %1153 = fptrunc float %891 to bfloat, !dbg !55
  %1154 = select i1 %984, bfloat %1153, bfloat 0xR0000, !dbg !56
  %1155 = fptrunc float %892 to bfloat, !dbg !55
  %1156 = select i1 %985, bfloat %1155, bfloat 0xR0000, !dbg !56
  %1157 = fptrunc float %893 to bfloat, !dbg !55
  %1158 = select i1 %986, bfloat %1157, bfloat 0xR0000, !dbg !56
  %1159 = fptrunc float %894 to bfloat, !dbg !55
  %1160 = select i1 %987, bfloat %1159, bfloat 0xR0000, !dbg !56
  %1161 = fptrunc float %895 to bfloat, !dbg !55
  %1162 = select i1 %988, bfloat %1161, bfloat 0xR0000, !dbg !56
  %1163 = fptrunc float %896 to bfloat, !dbg !55
  %1164 = select i1 %989, bfloat %1163, bfloat 0xR0000, !dbg !56
  %1165 = fptrunc float %897 to bfloat, !dbg !55
  %1166 = select i1 %990, bfloat %1165, bfloat 0xR0000, !dbg !56
  %1167 = fptrunc float %898 to bfloat, !dbg !55
  %1168 = select i1 %991, bfloat %1167, bfloat 0xR0000, !dbg !56
  %1169 = fptrunc float %899 to bfloat, !dbg !55
  %1170 = select i1 %992, bfloat %1169, bfloat 0xR0000, !dbg !56
  %1171 = fptrunc float %900 to bfloat, !dbg !55
  %1172 = select i1 %1020, bfloat %1171, bfloat 0xR0000, !dbg !56
  %1173 = fptrunc float %901 to bfloat, !dbg !55
  %1174 = select i1 %1022, bfloat %1173, bfloat 0xR0000, !dbg !56
  %1175 = fptrunc float %902 to bfloat, !dbg !55
  %1176 = select i1 %993, bfloat %1175, bfloat 0xR0000, !dbg !56
  %1177 = fptrunc float %903 to bfloat, !dbg !55
  %1178 = select i1 %994, bfloat %1177, bfloat 0xR0000, !dbg !56
  %1179 = fptrunc float %904 to bfloat, !dbg !55
  %1180 = select i1 %1024, bfloat %1179, bfloat 0xR0000, !dbg !56
  %1181 = fptrunc float %905 to bfloat, !dbg !55
  %1182 = select i1 %1026, bfloat %1181, bfloat 0xR0000, !dbg !56
  %1183 = fptrunc float %906 to bfloat, !dbg !55
  %1184 = select i1 %1028, bfloat %1183, bfloat 0xR0000, !dbg !56
  %1185 = fptrunc float %907 to bfloat, !dbg !55
  %1186 = select i1 %1030, bfloat %1185, bfloat 0xR0000, !dbg !56
  %1187 = fptrunc float %908 to bfloat, !dbg !55
  %1188 = select i1 %1032, bfloat %1187, bfloat 0xR0000, !dbg !56
  %1189 = fptrunc float %909 to bfloat, !dbg !55
  %1190 = select i1 %1034, bfloat %1189, bfloat 0xR0000, !dbg !56
  %1191 = fptrunc float %910 to bfloat, !dbg !55
  %1192 = select i1 %1036, bfloat %1191, bfloat 0xR0000, !dbg !56
  %1193 = fptrunc float %911 to bfloat, !dbg !55
  %1194 = select i1 %1038, bfloat %1193, bfloat 0xR0000, !dbg !56
  %1195 = fptrunc float %912 to bfloat, !dbg !55
  %1196 = select i1 %1040, bfloat %1195, bfloat 0xR0000, !dbg !56
  %1197 = fptrunc float %913 to bfloat, !dbg !55
  %1198 = select i1 %1042, bfloat %1197, bfloat 0xR0000, !dbg !56
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !54
  %1199 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %149, !dbg !54
  %1200 = ptrtoint ptr addrspace(3) %1199 to i32, !dbg !54
  %1201 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1200) #2, !dbg !54
  %1202 = extractvalue { i32, i32, i32, i32 } %1201, 0, !dbg !54
  %1203 = extractvalue { i32, i32, i32, i32 } %1201, 1, !dbg !54
  %1204 = extractvalue { i32, i32, i32, i32 } %1201, 2, !dbg !54
  %1205 = extractvalue { i32, i32, i32, i32 } %1201, 3, !dbg !54
  %1206 = getelementptr inbounds nuw i8, ptr addrspace(3) %1199, i32 2048, !dbg !54
  %1207 = ptrtoint ptr addrspace(3) %1206 to i32, !dbg !54
  %1208 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1207) #2, !dbg !54
  %1209 = extractvalue { i32, i32, i32, i32 } %1208, 0, !dbg !54
  %1210 = extractvalue { i32, i32, i32, i32 } %1208, 1, !dbg !54
  %1211 = extractvalue { i32, i32, i32, i32 } %1208, 2, !dbg !54
  %1212 = extractvalue { i32, i32, i32, i32 } %1208, 3, !dbg !54
  %1213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %150, !dbg !54
  %1214 = ptrtoint ptr addrspace(3) %1213 to i32, !dbg !54
  %1215 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1214) #2, !dbg !54
  %1216 = extractvalue { i32, i32, i32, i32 } %1215, 0, !dbg !54
  %1217 = extractvalue { i32, i32, i32, i32 } %1215, 1, !dbg !54
  %1218 = extractvalue { i32, i32, i32, i32 } %1215, 2, !dbg !54
  %1219 = extractvalue { i32, i32, i32, i32 } %1215, 3, !dbg !54
  %1220 = xor i32 %149, 1032, !dbg !54
  %1221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1220, !dbg !54
  %1222 = ptrtoint ptr addrspace(3) %1221 to i32, !dbg !54
  %1223 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1222) #2, !dbg !54
  %1224 = extractvalue { i32, i32, i32, i32 } %1223, 0, !dbg !54
  %1225 = extractvalue { i32, i32, i32, i32 } %1223, 1, !dbg !54
  %1226 = extractvalue { i32, i32, i32, i32 } %1223, 2, !dbg !54
  %1227 = extractvalue { i32, i32, i32, i32 } %1223, 3, !dbg !54
  %1228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %151, !dbg !54
  %1229 = ptrtoint ptr addrspace(3) %1228 to i32, !dbg !54
  %1230 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1229) #2, !dbg !54
  %1231 = extractvalue { i32, i32, i32, i32 } %1230, 0, !dbg !54
  %1232 = extractvalue { i32, i32, i32, i32 } %1230, 1, !dbg !54
  %1233 = extractvalue { i32, i32, i32, i32 } %1230, 2, !dbg !54
  %1234 = extractvalue { i32, i32, i32, i32 } %1230, 3, !dbg !54
  %1235 = xor i32 %149, 1040, !dbg !54
  %1236 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1235, !dbg !54
  %1237 = ptrtoint ptr addrspace(3) %1236 to i32, !dbg !54
  %1238 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1237) #2, !dbg !54
  %1239 = extractvalue { i32, i32, i32, i32 } %1238, 0, !dbg !54
  %1240 = extractvalue { i32, i32, i32, i32 } %1238, 1, !dbg !54
  %1241 = extractvalue { i32, i32, i32, i32 } %1238, 2, !dbg !54
  %1242 = extractvalue { i32, i32, i32, i32 } %1238, 3, !dbg !54
  %1243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %152, !dbg !54
  %1244 = ptrtoint ptr addrspace(3) %1243 to i32, !dbg !54
  %1245 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1244) #2, !dbg !54
  %1246 = extractvalue { i32, i32, i32, i32 } %1245, 0, !dbg !54
  %1247 = extractvalue { i32, i32, i32, i32 } %1245, 1, !dbg !54
  %1248 = extractvalue { i32, i32, i32, i32 } %1245, 2, !dbg !54
  %1249 = extractvalue { i32, i32, i32, i32 } %1245, 3, !dbg !54
  %1250 = xor i32 %149, 1048, !dbg !54
  %1251 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1250, !dbg !54
  %1252 = ptrtoint ptr addrspace(3) %1251 to i32, !dbg !54
  %1253 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1252) #2, !dbg !54
  %1254 = extractvalue { i32, i32, i32, i32 } %1253, 0, !dbg !54
  %1255 = extractvalue { i32, i32, i32, i32 } %1253, 1, !dbg !54
  %1256 = extractvalue { i32, i32, i32, i32 } %1253, 2, !dbg !54
  %1257 = extractvalue { i32, i32, i32, i32 } %1253, 3, !dbg !54
  %1258 = insertelement <2 x bfloat> poison, bfloat %1112, i64 0, !dbg !57
  %1259 = insertelement <2 x bfloat> %1258, bfloat %1114, i64 1, !dbg !57
  %1260 = bitcast <2 x bfloat> %1259 to i32, !dbg !57
  %1261 = insertelement <2 x bfloat> poison, bfloat %1116, i64 0, !dbg !57
  %1262 = insertelement <2 x bfloat> %1261, bfloat %1118, i64 1, !dbg !57
  %1263 = bitcast <2 x bfloat> %1262 to i32, !dbg !57
  %1264 = insertelement <2 x bfloat> poison, bfloat %1120, i64 0, !dbg !57
  %1265 = insertelement <2 x bfloat> %1264, bfloat %1122, i64 1, !dbg !57
  %1266 = bitcast <2 x bfloat> %1265 to i32, !dbg !57
  %1267 = insertelement <2 x bfloat> poison, bfloat %1124, i64 0, !dbg !57
  %1268 = insertelement <2 x bfloat> %1267, bfloat %1126, i64 1, !dbg !57
  %1269 = bitcast <2 x bfloat> %1268 to i32, !dbg !57
  %1270 = insertelement <2 x bfloat> poison, bfloat %1128, i64 0, !dbg !57
  %1271 = insertelement <2 x bfloat> %1270, bfloat %1130, i64 1, !dbg !57
  %1272 = bitcast <2 x bfloat> %1271 to i32, !dbg !57
  %1273 = insertelement <2 x bfloat> poison, bfloat %1132, i64 0, !dbg !57
  %1274 = insertelement <2 x bfloat> %1273, bfloat %1134, i64 1, !dbg !57
  %1275 = bitcast <2 x bfloat> %1274 to i32, !dbg !57
  %1276 = insertelement <2 x bfloat> poison, bfloat %1136, i64 0, !dbg !57
  %1277 = insertelement <2 x bfloat> %1276, bfloat %1138, i64 1, !dbg !57
  %1278 = bitcast <2 x bfloat> %1277 to i32, !dbg !57
  %1279 = insertelement <2 x bfloat> poison, bfloat %1140, i64 0, !dbg !57
  %1280 = insertelement <2 x bfloat> %1279, bfloat %1142, i64 1, !dbg !57
  %1281 = bitcast <2 x bfloat> %1280 to i32, !dbg !57
  %1282 = insertelement <2 x bfloat> poison, bfloat %1144, i64 0, !dbg !57
  %1283 = insertelement <2 x bfloat> %1282, bfloat %1146, i64 1, !dbg !57
  %1284 = bitcast <2 x bfloat> %1283 to i32, !dbg !57
  %1285 = insertelement <2 x bfloat> poison, bfloat %1148, i64 0, !dbg !57
  %1286 = insertelement <2 x bfloat> %1285, bfloat %1150, i64 1, !dbg !57
  %1287 = bitcast <2 x bfloat> %1286 to i32, !dbg !57
  %1288 = insertelement <2 x bfloat> poison, bfloat %1152, i64 0, !dbg !57
  %1289 = insertelement <2 x bfloat> %1288, bfloat %1154, i64 1, !dbg !57
  %1290 = bitcast <2 x bfloat> %1289 to i32, !dbg !57
  %1291 = insertelement <2 x bfloat> poison, bfloat %1156, i64 0, !dbg !57
  %1292 = insertelement <2 x bfloat> %1291, bfloat %1158, i64 1, !dbg !57
  %1293 = bitcast <2 x bfloat> %1292 to i32, !dbg !57
  %1294 = insertelement <2 x bfloat> poison, bfloat %1160, i64 0, !dbg !57
  %1295 = insertelement <2 x bfloat> %1294, bfloat %1162, i64 1, !dbg !57
  %1296 = bitcast <2 x bfloat> %1295 to i32, !dbg !57
  %1297 = insertelement <2 x bfloat> poison, bfloat %1164, i64 0, !dbg !57
  %1298 = insertelement <2 x bfloat> %1297, bfloat %1166, i64 1, !dbg !57
  %1299 = bitcast <2 x bfloat> %1298 to i32, !dbg !57
  %1300 = insertelement <2 x bfloat> poison, bfloat %1168, i64 0, !dbg !57
  %1301 = insertelement <2 x bfloat> %1300, bfloat %1170, i64 1, !dbg !57
  %1302 = bitcast <2 x bfloat> %1301 to i32, !dbg !57
  %1303 = insertelement <2 x bfloat> poison, bfloat %1172, i64 0, !dbg !57
  %1304 = insertelement <2 x bfloat> %1303, bfloat %1174, i64 1, !dbg !57
  %1305 = bitcast <2 x bfloat> %1304 to i32, !dbg !57
  %1306 = insertelement <2 x bfloat> poison, bfloat %1176, i64 0, !dbg !57
  %1307 = insertelement <2 x bfloat> %1306, bfloat %1178, i64 1, !dbg !57
  %1308 = bitcast <2 x bfloat> %1307 to i32, !dbg !57
  %1309 = insertelement <2 x bfloat> poison, bfloat %1180, i64 0, !dbg !57
  %1310 = insertelement <2 x bfloat> %1309, bfloat %1182, i64 1, !dbg !57
  %1311 = bitcast <2 x bfloat> %1310 to i32, !dbg !57
  %1312 = insertelement <2 x bfloat> poison, bfloat %1184, i64 0, !dbg !57
  %1313 = insertelement <2 x bfloat> %1312, bfloat %1186, i64 1, !dbg !57
  %1314 = bitcast <2 x bfloat> %1313 to i32, !dbg !57
  %1315 = insertelement <2 x bfloat> poison, bfloat %1188, i64 0, !dbg !57
  %1316 = insertelement <2 x bfloat> %1315, bfloat %1190, i64 1, !dbg !57
  %1317 = bitcast <2 x bfloat> %1316 to i32, !dbg !57
  %1318 = insertelement <2 x bfloat> poison, bfloat %1192, i64 0, !dbg !57
  %1319 = insertelement <2 x bfloat> %1318, bfloat %1194, i64 1, !dbg !57
  %1320 = bitcast <2 x bfloat> %1319 to i32, !dbg !57
  %1321 = insertelement <2 x bfloat> poison, bfloat %1196, i64 0, !dbg !57
  %1322 = insertelement <2 x bfloat> %1321, bfloat %1198, i64 1, !dbg !57
  %1323 = bitcast <2 x bfloat> %1322 to i32, !dbg !57
  %1324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1260, i32 %1263, i32 %1266, i32 %1269, i32 %1202, i32 %1203) #2, !dbg !57
  %1325 = extractvalue { float, float, float, float } %1324, 0, !dbg !57
  %1326 = extractvalue { float, float, float, float } %1324, 1, !dbg !57
  %1327 = extractvalue { float, float, float, float } %1324, 2, !dbg !57
  %1328 = extractvalue { float, float, float, float } %1324, 3, !dbg !57
  %1329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1260, i32 %1263, i32 %1266, i32 %1269, i32 %1216, i32 %1217) #2, !dbg !57
  %1330 = extractvalue { float, float, float, float } %1329, 0, !dbg !57
  %1331 = extractvalue { float, float, float, float } %1329, 1, !dbg !57
  %1332 = extractvalue { float, float, float, float } %1329, 2, !dbg !57
  %1333 = extractvalue { float, float, float, float } %1329, 3, !dbg !57
  %1334 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1260, i32 %1263, i32 %1266, i32 %1269, i32 %1231, i32 %1232) #2, !dbg !57
  %1335 = extractvalue { float, float, float, float } %1334, 0, !dbg !57
  %1336 = extractvalue { float, float, float, float } %1334, 1, !dbg !57
  %1337 = extractvalue { float, float, float, float } %1334, 2, !dbg !57
  %1338 = extractvalue { float, float, float, float } %1334, 3, !dbg !57
  %1339 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1260, i32 %1263, i32 %1266, i32 %1269, i32 %1246, i32 %1247) #2, !dbg !57
  %1340 = extractvalue { float, float, float, float } %1339, 0, !dbg !57
  %1341 = extractvalue { float, float, float, float } %1339, 1, !dbg !57
  %1342 = extractvalue { float, float, float, float } %1339, 2, !dbg !57
  %1343 = extractvalue { float, float, float, float } %1339, 3, !dbg !57
  %1344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1281, i32 %1284, i32 %1287, i32 %1290, i32 %1202, i32 %1203) #2, !dbg !57
  %1345 = extractvalue { float, float, float, float } %1344, 0, !dbg !57
  %1346 = extractvalue { float, float, float, float } %1344, 1, !dbg !57
  %1347 = extractvalue { float, float, float, float } %1344, 2, !dbg !57
  %1348 = extractvalue { float, float, float, float } %1344, 3, !dbg !57
  %1349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1281, i32 %1284, i32 %1287, i32 %1290, i32 %1216, i32 %1217) #2, !dbg !57
  %1350 = extractvalue { float, float, float, float } %1349, 0, !dbg !57
  %1351 = extractvalue { float, float, float, float } %1349, 1, !dbg !57
  %1352 = extractvalue { float, float, float, float } %1349, 2, !dbg !57
  %1353 = extractvalue { float, float, float, float } %1349, 3, !dbg !57
  %1354 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1281, i32 %1284, i32 %1287, i32 %1290, i32 %1231, i32 %1232) #2, !dbg !57
  %1355 = extractvalue { float, float, float, float } %1354, 0, !dbg !57
  %1356 = extractvalue { float, float, float, float } %1354, 1, !dbg !57
  %1357 = extractvalue { float, float, float, float } %1354, 2, !dbg !57
  %1358 = extractvalue { float, float, float, float } %1354, 3, !dbg !57
  %1359 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1281, i32 %1284, i32 %1287, i32 %1290, i32 %1246, i32 %1247) #2, !dbg !57
  %1360 = extractvalue { float, float, float, float } %1359, 0, !dbg !57
  %1361 = extractvalue { float, float, float, float } %1359, 1, !dbg !57
  %1362 = extractvalue { float, float, float, float } %1359, 2, !dbg !57
  %1363 = extractvalue { float, float, float, float } %1359, 3, !dbg !57
  %1364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1325, float %1326, float %1327, float %1328, i32 %1272, i32 %1275, i32 0, i32 %1278, i32 %1204, i32 %1205) #2, !dbg !57
  %1365 = extractvalue { float, float, float, float } %1364, 0, !dbg !57
  %1366 = extractvalue { float, float, float, float } %1364, 1, !dbg !57
  %1367 = extractvalue { float, float, float, float } %1364, 2, !dbg !57
  %1368 = extractvalue { float, float, float, float } %1364, 3, !dbg !57
  %1369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1330, float %1331, float %1332, float %1333, i32 %1272, i32 %1275, i32 0, i32 %1278, i32 %1218, i32 %1219) #2, !dbg !57
  %1370 = extractvalue { float, float, float, float } %1369, 0, !dbg !57
  %1371 = extractvalue { float, float, float, float } %1369, 1, !dbg !57
  %1372 = extractvalue { float, float, float, float } %1369, 2, !dbg !57
  %1373 = extractvalue { float, float, float, float } %1369, 3, !dbg !57
  %1374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1335, float %1336, float %1337, float %1338, i32 %1272, i32 %1275, i32 0, i32 %1278, i32 %1233, i32 %1234) #2, !dbg !57
  %1375 = extractvalue { float, float, float, float } %1374, 0, !dbg !57
  %1376 = extractvalue { float, float, float, float } %1374, 1, !dbg !57
  %1377 = extractvalue { float, float, float, float } %1374, 2, !dbg !57
  %1378 = extractvalue { float, float, float, float } %1374, 3, !dbg !57
  %1379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1340, float %1341, float %1342, float %1343, i32 %1272, i32 %1275, i32 0, i32 %1278, i32 %1248, i32 %1249) #2, !dbg !57
  %1380 = extractvalue { float, float, float, float } %1379, 0, !dbg !57
  %1381 = extractvalue { float, float, float, float } %1379, 1, !dbg !57
  %1382 = extractvalue { float, float, float, float } %1379, 2, !dbg !57
  %1383 = extractvalue { float, float, float, float } %1379, 3, !dbg !57
  %1384 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1345, float %1346, float %1347, float %1348, i32 %1293, i32 %1296, i32 %1299, i32 %1302, i32 %1204, i32 %1205) #2, !dbg !57
  %1385 = extractvalue { float, float, float, float } %1384, 0, !dbg !57
  %1386 = extractvalue { float, float, float, float } %1384, 1, !dbg !57
  %1387 = extractvalue { float, float, float, float } %1384, 2, !dbg !57
  %1388 = extractvalue { float, float, float, float } %1384, 3, !dbg !57
  %1389 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1350, float %1351, float %1352, float %1353, i32 %1293, i32 %1296, i32 %1299, i32 %1302, i32 %1218, i32 %1219) #2, !dbg !57
  %1390 = extractvalue { float, float, float, float } %1389, 0, !dbg !57
  %1391 = extractvalue { float, float, float, float } %1389, 1, !dbg !57
  %1392 = extractvalue { float, float, float, float } %1389, 2, !dbg !57
  %1393 = extractvalue { float, float, float, float } %1389, 3, !dbg !57
  %1394 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1355, float %1356, float %1357, float %1358, i32 %1293, i32 %1296, i32 %1299, i32 %1302, i32 %1233, i32 %1234) #2, !dbg !57
  %1395 = extractvalue { float, float, float, float } %1394, 0, !dbg !57
  %1396 = extractvalue { float, float, float, float } %1394, 1, !dbg !57
  %1397 = extractvalue { float, float, float, float } %1394, 2, !dbg !57
  %1398 = extractvalue { float, float, float, float } %1394, 3, !dbg !57
  %1399 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1360, float %1361, float %1362, float %1363, i32 %1293, i32 %1296, i32 %1299, i32 %1302, i32 %1248, i32 %1249) #2, !dbg !57
  %1400 = extractvalue { float, float, float, float } %1399, 0, !dbg !57
  %1401 = extractvalue { float, float, float, float } %1399, 1, !dbg !57
  %1402 = extractvalue { float, float, float, float } %1399, 2, !dbg !57
  %1403 = extractvalue { float, float, float, float } %1399, 3, !dbg !57
  %1404 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1365, float %1366, float %1367, float %1368, i32 0, i32 0, i32 0, i32 0, i32 %1209, i32 %1210) #2, !dbg !57
  %1405 = extractvalue { float, float, float, float } %1404, 0, !dbg !57
  %1406 = extractvalue { float, float, float, float } %1404, 1, !dbg !57
  %1407 = extractvalue { float, float, float, float } %1404, 2, !dbg !57
  %1408 = extractvalue { float, float, float, float } %1404, 3, !dbg !57
  %1409 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1370, float %1371, float %1372, float %1373, i32 0, i32 0, i32 0, i32 0, i32 %1224, i32 %1225) #2, !dbg !57
  %1410 = extractvalue { float, float, float, float } %1409, 0, !dbg !57
  %1411 = extractvalue { float, float, float, float } %1409, 1, !dbg !57
  %1412 = extractvalue { float, float, float, float } %1409, 2, !dbg !57
  %1413 = extractvalue { float, float, float, float } %1409, 3, !dbg !57
  %1414 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1375, float %1376, float %1377, float %1378, i32 0, i32 0, i32 0, i32 0, i32 %1239, i32 %1240) #2, !dbg !57
  %1415 = extractvalue { float, float, float, float } %1414, 0, !dbg !57
  %1416 = extractvalue { float, float, float, float } %1414, 1, !dbg !57
  %1417 = extractvalue { float, float, float, float } %1414, 2, !dbg !57
  %1418 = extractvalue { float, float, float, float } %1414, 3, !dbg !57
  %1419 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1380, float %1381, float %1382, float %1383, i32 0, i32 0, i32 0, i32 0, i32 %1254, i32 %1255) #2, !dbg !57
  %1420 = extractvalue { float, float, float, float } %1419, 0, !dbg !57
  %1421 = extractvalue { float, float, float, float } %1419, 1, !dbg !57
  %1422 = extractvalue { float, float, float, float } %1419, 2, !dbg !57
  %1423 = extractvalue { float, float, float, float } %1419, 3, !dbg !57
  %1424 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1385, float %1386, float %1387, float %1388, i32 %1305, i32 %1308, i32 %1311, i32 %1314, i32 %1209, i32 %1210) #2, !dbg !57
  %1425 = extractvalue { float, float, float, float } %1424, 0, !dbg !57
  %1426 = extractvalue { float, float, float, float } %1424, 1, !dbg !57
  %1427 = extractvalue { float, float, float, float } %1424, 2, !dbg !57
  %1428 = extractvalue { float, float, float, float } %1424, 3, !dbg !57
  %1429 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1390, float %1391, float %1392, float %1393, i32 %1305, i32 %1308, i32 %1311, i32 %1314, i32 %1224, i32 %1225) #2, !dbg !57
  %1430 = extractvalue { float, float, float, float } %1429, 0, !dbg !57
  %1431 = extractvalue { float, float, float, float } %1429, 1, !dbg !57
  %1432 = extractvalue { float, float, float, float } %1429, 2, !dbg !57
  %1433 = extractvalue { float, float, float, float } %1429, 3, !dbg !57
  %1434 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1395, float %1396, float %1397, float %1398, i32 %1305, i32 %1308, i32 %1311, i32 %1314, i32 %1239, i32 %1240) #2, !dbg !57
  %1435 = extractvalue { float, float, float, float } %1434, 0, !dbg !57
  %1436 = extractvalue { float, float, float, float } %1434, 1, !dbg !57
  %1437 = extractvalue { float, float, float, float } %1434, 2, !dbg !57
  %1438 = extractvalue { float, float, float, float } %1434, 3, !dbg !57
  %1439 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1400, float %1401, float %1402, float %1403, i32 %1305, i32 %1308, i32 %1311, i32 %1314, i32 %1254, i32 %1255) #2, !dbg !57
  %1440 = extractvalue { float, float, float, float } %1439, 0, !dbg !57
  %1441 = extractvalue { float, float, float, float } %1439, 1, !dbg !57
  %1442 = extractvalue { float, float, float, float } %1439, 2, !dbg !57
  %1443 = extractvalue { float, float, float, float } %1439, 3, !dbg !57
  %1444 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1405, float %1406, float %1407, float %1408, i32 0, i32 0, i32 0, i32 0, i32 %1211, i32 %1212) #2, !dbg !57
  %1445 = extractvalue { float, float, float, float } %1444, 0, !dbg !57
  %1446 = extractvalue { float, float, float, float } %1444, 1, !dbg !57
  %1447 = extractvalue { float, float, float, float } %1444, 2, !dbg !57
  %1448 = extractvalue { float, float, float, float } %1444, 3, !dbg !57
  %1449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1410, float %1411, float %1412, float %1413, i32 0, i32 0, i32 0, i32 0, i32 %1226, i32 %1227) #2, !dbg !57
  %1450 = extractvalue { float, float, float, float } %1449, 0, !dbg !57
  %1451 = extractvalue { float, float, float, float } %1449, 1, !dbg !57
  %1452 = extractvalue { float, float, float, float } %1449, 2, !dbg !57
  %1453 = extractvalue { float, float, float, float } %1449, 3, !dbg !57
  %1454 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1415, float %1416, float %1417, float %1418, i32 0, i32 0, i32 0, i32 0, i32 %1241, i32 %1242) #2, !dbg !57
  %1455 = extractvalue { float, float, float, float } %1454, 0, !dbg !57
  %1456 = extractvalue { float, float, float, float } %1454, 1, !dbg !57
  %1457 = extractvalue { float, float, float, float } %1454, 2, !dbg !57
  %1458 = extractvalue { float, float, float, float } %1454, 3, !dbg !57
  %1459 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1420, float %1421, float %1422, float %1423, i32 0, i32 0, i32 0, i32 0, i32 %1256, i32 %1257) #2, !dbg !57
  %1460 = extractvalue { float, float, float, float } %1459, 0, !dbg !57
  %1461 = extractvalue { float, float, float, float } %1459, 1, !dbg !57
  %1462 = extractvalue { float, float, float, float } %1459, 2, !dbg !57
  %1463 = extractvalue { float, float, float, float } %1459, 3, !dbg !57
  %1464 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1425, float %1426, float %1427, float %1428, i32 %1317, i32 %1320, i32 0, i32 %1323, i32 %1211, i32 %1212) #2, !dbg !57
  %1465 = extractvalue { float, float, float, float } %1464, 0, !dbg !57
  %1466 = extractvalue { float, float, float, float } %1464, 1, !dbg !57
  %1467 = extractvalue { float, float, float, float } %1464, 2, !dbg !57
  %1468 = extractvalue { float, float, float, float } %1464, 3, !dbg !57
  %1469 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1430, float %1431, float %1432, float %1433, i32 %1317, i32 %1320, i32 0, i32 %1323, i32 %1226, i32 %1227) #2, !dbg !57
  %1470 = extractvalue { float, float, float, float } %1469, 0, !dbg !57
  %1471 = extractvalue { float, float, float, float } %1469, 1, !dbg !57
  %1472 = extractvalue { float, float, float, float } %1469, 2, !dbg !57
  %1473 = extractvalue { float, float, float, float } %1469, 3, !dbg !57
  %1474 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1435, float %1436, float %1437, float %1438, i32 %1317, i32 %1320, i32 0, i32 %1323, i32 %1241, i32 %1242) #2, !dbg !57
  %1475 = extractvalue { float, float, float, float } %1474, 0, !dbg !57
  %1476 = extractvalue { float, float, float, float } %1474, 1, !dbg !57
  %1477 = extractvalue { float, float, float, float } %1474, 2, !dbg !57
  %1478 = extractvalue { float, float, float, float } %1474, 3, !dbg !57
  %1479 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1440, float %1441, float %1442, float %1443, i32 %1317, i32 %1320, i32 0, i32 %1323, i32 %1256, i32 %1257) #2, !dbg !57
  %1480 = extractvalue { float, float, float, float } %1479, 0, !dbg !57
  %1481 = extractvalue { float, float, float, float } %1479, 1, !dbg !57
  %1482 = extractvalue { float, float, float, float } %1479, 2, !dbg !57
  %1483 = extractvalue { float, float, float, float } %1479, 3, !dbg !57
  %1484 = insertelement <2 x float> poison, float %412, i64 0, !dbg !58
  %1485 = insertelement <2 x float> %1484, float %413, i64 1, !dbg !58
  %1486 = insertelement <2 x float> poison, float %731, i64 0, !dbg !58
  %1487 = shufflevector <2 x float> %1486, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %1488 = fmul <2 x float> %1485, %1487, !dbg !58
  %1489 = insertelement <2 x float> poison, float %6, i64 0, !dbg !59
  %1490 = shufflevector <2 x float> %1489, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %1491 = fmul <2 x float> %1490, %1488, !dbg !59
  %1492 = insertelement <2 x float> poison, float %1445, i64 0, !dbg !60
  %1493 = insertelement <2 x float> %1492, float %1446, i64 1, !dbg !60
  %1494 = fmul <2 x float> %1490, %1493, !dbg !60
  %1495 = fadd <2 x float> %1491, %1494, !dbg !61
  %1496 = fptrunc <2 x float> %1495 to <2 x bfloat>, !dbg !62
  %1497 = insertelement <2 x float> poison, float %414, i64 0, !dbg !58
  %1498 = insertelement <2 x float> %1497, float %415, i64 1, !dbg !58
  %1499 = insertelement <2 x float> poison, float %733, i64 0, !dbg !58
  %1500 = shufflevector <2 x float> %1499, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %1501 = fmul <2 x float> %1498, %1500, !dbg !58
  %1502 = fmul <2 x float> %1490, %1501, !dbg !59
  %1503 = insertelement <2 x float> poison, float %1447, i64 0, !dbg !60
  %1504 = insertelement <2 x float> %1503, float %1448, i64 1, !dbg !60
  %1505 = fmul <2 x float> %1490, %1504, !dbg !60
  %1506 = fadd <2 x float> %1502, %1505, !dbg !61
  %1507 = fptrunc <2 x float> %1506 to <2 x bfloat>, !dbg !62
  %1508 = insertelement <2 x float> poison, float %417, i64 0, !dbg !58
  %1509 = insertelement <2 x float> %1508, float %418, i64 1, !dbg !58
  %1510 = fmul <2 x float> %1509, %1487, !dbg !58
  %1511 = fmul <2 x float> %1490, %1510, !dbg !59
  %1512 = insertelement <2 x float> poison, float %1450, i64 0, !dbg !60
  %1513 = insertelement <2 x float> %1512, float %1451, i64 1, !dbg !60
  %1514 = fmul <2 x float> %1490, %1513, !dbg !60
  %1515 = fadd <2 x float> %1511, %1514, !dbg !61
  %1516 = fptrunc <2 x float> %1515 to <2 x bfloat>, !dbg !62
  %1517 = insertelement <2 x float> poison, float %419, i64 0, !dbg !58
  %1518 = insertelement <2 x float> %1517, float %420, i64 1, !dbg !58
  %1519 = fmul <2 x float> %1518, %1500, !dbg !58
  %1520 = fmul <2 x float> %1490, %1519, !dbg !59
  %1521 = insertelement <2 x float> poison, float %1452, i64 0, !dbg !60
  %1522 = insertelement <2 x float> %1521, float %1453, i64 1, !dbg !60
  %1523 = fmul <2 x float> %1490, %1522, !dbg !60
  %1524 = fadd <2 x float> %1520, %1523, !dbg !61
  %1525 = fptrunc <2 x float> %1524 to <2 x bfloat>, !dbg !62
  %1526 = insertelement <2 x float> poison, float %422, i64 0, !dbg !58
  %1527 = insertelement <2 x float> %1526, float %423, i64 1, !dbg !58
  %1528 = fmul <2 x float> %1527, %1487, !dbg !58
  %1529 = fmul <2 x float> %1490, %1528, !dbg !59
  %1530 = insertelement <2 x float> poison, float %1455, i64 0, !dbg !60
  %1531 = insertelement <2 x float> %1530, float %1456, i64 1, !dbg !60
  %1532 = fmul <2 x float> %1490, %1531, !dbg !60
  %1533 = fadd <2 x float> %1529, %1532, !dbg !61
  %1534 = fptrunc <2 x float> %1533 to <2 x bfloat>, !dbg !62
  %1535 = insertelement <2 x float> poison, float %424, i64 0, !dbg !58
  %1536 = insertelement <2 x float> %1535, float %425, i64 1, !dbg !58
  %1537 = fmul <2 x float> %1536, %1500, !dbg !58
  %1538 = fmul <2 x float> %1490, %1537, !dbg !59
  %1539 = insertelement <2 x float> poison, float %1457, i64 0, !dbg !60
  %1540 = insertelement <2 x float> %1539, float %1458, i64 1, !dbg !60
  %1541 = fmul <2 x float> %1490, %1540, !dbg !60
  %1542 = fadd <2 x float> %1538, %1541, !dbg !61
  %1543 = fptrunc <2 x float> %1542 to <2 x bfloat>, !dbg !62
  %1544 = insertelement <2 x float> poison, float %427, i64 0, !dbg !58
  %1545 = insertelement <2 x float> %1544, float %428, i64 1, !dbg !58
  %1546 = fmul <2 x float> %1545, %1487, !dbg !58
  %1547 = fmul <2 x float> %1490, %1546, !dbg !59
  %1548 = insertelement <2 x float> poison, float %1460, i64 0, !dbg !60
  %1549 = insertelement <2 x float> %1548, float %1461, i64 1, !dbg !60
  %1550 = fmul <2 x float> %1490, %1549, !dbg !60
  %1551 = fadd <2 x float> %1547, %1550, !dbg !61
  %1552 = fptrunc <2 x float> %1551 to <2 x bfloat>, !dbg !62
  %1553 = insertelement <2 x float> poison, float %429, i64 0, !dbg !58
  %1554 = insertelement <2 x float> %1553, float %430, i64 1, !dbg !58
  %1555 = fmul <2 x float> %1554, %1500, !dbg !58
  %1556 = fmul <2 x float> %1490, %1555, !dbg !59
  %1557 = insertelement <2 x float> poison, float %1462, i64 0, !dbg !60
  %1558 = insertelement <2 x float> %1557, float %1463, i64 1, !dbg !60
  %1559 = fmul <2 x float> %1490, %1558, !dbg !60
  %1560 = fadd <2 x float> %1556, %1559, !dbg !61
  %1561 = fptrunc <2 x float> %1560 to <2 x bfloat>, !dbg !62
  %1562 = insertelement <2 x float> poison, float %432, i64 0, !dbg !58
  %1563 = insertelement <2 x float> %1562, float %433, i64 1, !dbg !58
  %1564 = insertelement <2 x float> poison, float %735, i64 0, !dbg !58
  %1565 = shufflevector <2 x float> %1564, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %1566 = fmul <2 x float> %1563, %1565, !dbg !58
  %1567 = fmul <2 x float> %1490, %1566, !dbg !59
  %1568 = insertelement <2 x float> poison, float %1465, i64 0, !dbg !60
  %1569 = insertelement <2 x float> %1568, float %1466, i64 1, !dbg !60
  %1570 = fmul <2 x float> %1490, %1569, !dbg !60
  %1571 = fadd <2 x float> %1567, %1570, !dbg !61
  %1572 = fptrunc <2 x float> %1571 to <2 x bfloat>, !dbg !62
  %1573 = insertelement <2 x float> poison, float %434, i64 0, !dbg !58
  %1574 = insertelement <2 x float> %1573, float %435, i64 1, !dbg !58
  %1575 = insertelement <2 x float> poison, float %737, i64 0, !dbg !58
  %1576 = shufflevector <2 x float> %1575, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %1577 = fmul <2 x float> %1574, %1576, !dbg !58
  %1578 = fmul <2 x float> %1490, %1577, !dbg !59
  %1579 = insertelement <2 x float> poison, float %1467, i64 0, !dbg !60
  %1580 = insertelement <2 x float> %1579, float %1468, i64 1, !dbg !60
  %1581 = fmul <2 x float> %1490, %1580, !dbg !60
  %1582 = fadd <2 x float> %1578, %1581, !dbg !61
  %1583 = fptrunc <2 x float> %1582 to <2 x bfloat>, !dbg !62
  %1584 = insertelement <2 x float> poison, float %437, i64 0, !dbg !58
  %1585 = insertelement <2 x float> %1584, float %438, i64 1, !dbg !58
  %1586 = fmul <2 x float> %1585, %1565, !dbg !58
  %1587 = fmul <2 x float> %1490, %1586, !dbg !59
  %1588 = insertelement <2 x float> poison, float %1470, i64 0, !dbg !60
  %1589 = insertelement <2 x float> %1588, float %1471, i64 1, !dbg !60
  %1590 = fmul <2 x float> %1490, %1589, !dbg !60
  %1591 = fadd <2 x float> %1587, %1590, !dbg !61
  %1592 = fptrunc <2 x float> %1591 to <2 x bfloat>, !dbg !62
  %1593 = insertelement <2 x float> poison, float %439, i64 0, !dbg !58
  %1594 = insertelement <2 x float> %1593, float %440, i64 1, !dbg !58
  %1595 = fmul <2 x float> %1594, %1576, !dbg !58
  %1596 = fmul <2 x float> %1490, %1595, !dbg !59
  %1597 = insertelement <2 x float> poison, float %1472, i64 0, !dbg !60
  %1598 = insertelement <2 x float> %1597, float %1473, i64 1, !dbg !60
  %1599 = fmul <2 x float> %1490, %1598, !dbg !60
  %1600 = fadd <2 x float> %1596, %1599, !dbg !61
  %1601 = fptrunc <2 x float> %1600 to <2 x bfloat>, !dbg !62
  %1602 = insertelement <2 x float> poison, float %442, i64 0, !dbg !58
  %1603 = insertelement <2 x float> %1602, float %443, i64 1, !dbg !58
  %1604 = fmul <2 x float> %1603, %1565, !dbg !58
  %1605 = fmul <2 x float> %1490, %1604, !dbg !59
  %1606 = insertelement <2 x float> poison, float %1475, i64 0, !dbg !60
  %1607 = insertelement <2 x float> %1606, float %1476, i64 1, !dbg !60
  %1608 = fmul <2 x float> %1490, %1607, !dbg !60
  %1609 = fadd <2 x float> %1605, %1608, !dbg !61
  %1610 = fptrunc <2 x float> %1609 to <2 x bfloat>, !dbg !62
  %1611 = insertelement <2 x float> poison, float %444, i64 0, !dbg !58
  %1612 = insertelement <2 x float> %1611, float %445, i64 1, !dbg !58
  %1613 = fmul <2 x float> %1612, %1576, !dbg !58
  %1614 = fmul <2 x float> %1490, %1613, !dbg !59
  %1615 = insertelement <2 x float> poison, float %1477, i64 0, !dbg !60
  %1616 = insertelement <2 x float> %1615, float %1478, i64 1, !dbg !60
  %1617 = fmul <2 x float> %1490, %1616, !dbg !60
  %1618 = fadd <2 x float> %1614, %1617, !dbg !61
  %1619 = fptrunc <2 x float> %1618 to <2 x bfloat>, !dbg !62
  %1620 = insertelement <2 x float> poison, float %447, i64 0, !dbg !58
  %1621 = insertelement <2 x float> %1620, float %448, i64 1, !dbg !58
  %1622 = fmul <2 x float> %1621, %1565, !dbg !58
  %1623 = fmul <2 x float> %1490, %1622, !dbg !59
  %1624 = insertelement <2 x float> poison, float %1480, i64 0, !dbg !60
  %1625 = insertelement <2 x float> %1624, float %1481, i64 1, !dbg !60
  %1626 = fmul <2 x float> %1490, %1625, !dbg !60
  %1627 = fadd <2 x float> %1623, %1626, !dbg !61
  %1628 = fptrunc <2 x float> %1627 to <2 x bfloat>, !dbg !62
  %1629 = insertelement <2 x float> poison, float %449, i64 0, !dbg !58
  %1630 = insertelement <2 x float> %1629, float %450, i64 1, !dbg !58
  %1631 = fmul <2 x float> %1630, %1576, !dbg !58
  %1632 = fmul <2 x float> %1490, %1631, !dbg !59
  %1633 = insertelement <2 x float> poison, float %1482, i64 0, !dbg !60
  %1634 = insertelement <2 x float> %1633, float %1483, i64 1, !dbg !60
  %1635 = fmul <2 x float> %1490, %1634, !dbg !60
  %1636 = fadd <2 x float> %1632, %1635, !dbg !61
  %1637 = fptrunc <2 x float> %1636 to <2 x bfloat>, !dbg !62
  %1638 = getelementptr bfloat, ptr addrspace(1) %657, i64 %1043, !dbg !63
  %1639 = getelementptr bfloat, ptr addrspace(1) %657, i64 %1044, !dbg !63
  %1640 = getelementptr bfloat, ptr addrspace(1) %657, i64 %1045, !dbg !63
  %1641 = getelementptr bfloat, ptr addrspace(1) %657, i64 %1046, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1642 = shl nuw nsw i32 %36, 3, !dbg !63
  %1643 = shl nuw nsw i32 %37, 3, !dbg !63
  %1644 = shl nuw nsw i32 %38, 3, !dbg !63
  %1645 = or disjoint i32 %1642, %141, !dbg !63
  %1646 = or disjoint i32 %1645, %667, !dbg !63
  %1647 = or disjoint i32 %1646, %1643, !dbg !63
  %1648 = or disjoint i32 %1647, %1644, !dbg !63
  %1649 = and i32 %56, 312, !dbg !63
  %1650 = or disjoint i32 %1643, %1649, !dbg !63
  %1651 = or disjoint i32 %1650, %1644, !dbg !63
  %1652 = lshr i32 %1648, 2, !dbg !63
  %1653 = and i32 %1652, 1073741816, !dbg !63
  %1654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1653, !dbg !63
  %1655 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1654, i32 %1648, !dbg !63
  store <2 x bfloat> %1496, ptr addrspace(3) %1655, align 4, !dbg !63
  %1656 = xor i32 %1648, 256, !dbg !63
  %1657 = lshr i32 %1656, 2, !dbg !63
  %1658 = and i32 %1657, 1073741816, !dbg !63
  %1659 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1658, !dbg !63
  %1660 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1659, i32 %1656, !dbg !63
  store <2 x bfloat> %1507, ptr addrspace(3) %1660, align 4, !dbg !63
  %1661 = xor i32 %1648, 8, !dbg !63
  %1662 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1654, i32 %1661, !dbg !63
  store <2 x bfloat> %1516, ptr addrspace(3) %1662, align 4, !dbg !63
  %1663 = xor i32 %1648, 264, !dbg !63
  %1664 = lshr i32 %1663, 2, !dbg !63
  %1665 = and i32 %1664, 1073741816, !dbg !63
  %1666 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1665, !dbg !63
  %1667 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1666, i32 %1663, !dbg !63
  store <2 x bfloat> %1525, ptr addrspace(3) %1667, align 4, !dbg !63
  %1668 = xor i32 %1648, 16, !dbg !63
  %1669 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1654, i32 %1668, !dbg !63
  store <2 x bfloat> %1534, ptr addrspace(3) %1669, align 4, !dbg !63
  %1670 = xor i32 %1648, 272, !dbg !63
  %1671 = lshr i32 %1670, 2, !dbg !63
  %1672 = and i32 %1671, 1073741816, !dbg !63
  %1673 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1672, !dbg !63
  %1674 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1673, i32 %1670, !dbg !63
  store <2 x bfloat> %1543, ptr addrspace(3) %1674, align 4, !dbg !63
  %1675 = xor i32 %1648, 24, !dbg !63
  %1676 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1654, i32 %1675, !dbg !63
  store <2 x bfloat> %1552, ptr addrspace(3) %1676, align 4, !dbg !63
  %1677 = xor i32 %1648, 280, !dbg !63
  %1678 = lshr i32 %1677, 2, !dbg !63
  %1679 = and i32 %1678, 1073741816, !dbg !63
  %1680 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1679, !dbg !63
  %1681 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1680, i32 %1677, !dbg !63
  store <2 x bfloat> %1561, ptr addrspace(3) %1681, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1682 = lshr exact i32 %1651, 2, !dbg !63
  %1683 = and i32 %1682, 120, !dbg !63
  %1684 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1683, !dbg !63
  %1685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1684, i32 %1651, !dbg !63
  %1686 = load <4 x i32>, ptr addrspace(3) %1685, align 16, !dbg !63
  %1687 = or disjoint i32 %1651, 512, !dbg !63
  %1688 = lshr exact i32 %1687, 2, !dbg !63
  %1689 = and i32 %1688, 536870904, !dbg !63
  %1690 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1689, !dbg !63
  %1691 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1690, i32 %1687, !dbg !63
  %1692 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  store <2 x bfloat> %1572, ptr addrspace(3) %1655, align 4, !dbg !63
  store <2 x bfloat> %1583, ptr addrspace(3) %1660, align 4, !dbg !63
  store <2 x bfloat> %1592, ptr addrspace(3) %1662, align 4, !dbg !63
  store <2 x bfloat> %1601, ptr addrspace(3) %1667, align 4, !dbg !63
  store <2 x bfloat> %1610, ptr addrspace(3) %1669, align 4, !dbg !63
  store <2 x bfloat> %1619, ptr addrspace(3) %1674, align 4, !dbg !63
  store <2 x bfloat> %1628, ptr addrspace(3) %1676, align 4, !dbg !63
  store <2 x bfloat> %1637, ptr addrspace(3) %1681, align 4, !dbg !63
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !63
  %1693 = load <4 x i32>, ptr addrspace(3) %1685, align 16, !dbg !63
  %1694 = load <4 x i32>, ptr addrspace(3) %1691, align 16, !dbg !63
  %.extract = extractelement <4 x i32> %1686, i64 0, !dbg !63
  %.extract77 = extractelement <4 x i32> %1686, i64 1, !dbg !63
  %.extract79 = extractelement <4 x i32> %1686, i64 2, !dbg !63
  %.extract81 = extractelement <4 x i32> %1686, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract77, i32 %.extract79, i32 %.extract81, ptr addrspace(1) %1638, i1 %1051) #2, !dbg !63
  %.extract83 = extractelement <4 x i32> %1692, i64 0, !dbg !63
  %.extract85 = extractelement <4 x i32> %1692, i64 1, !dbg !63
  %.extract87 = extractelement <4 x i32> %1692, i64 2, !dbg !63
  %.extract89 = extractelement <4 x i32> %1692, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract83, i32 %.extract85, i32 %.extract87, i32 %.extract89, ptr addrspace(1) %1639, i1 %1052) #2, !dbg !63
  %.extract91 = extractelement <4 x i32> %1693, i64 0, !dbg !63
  %.extract93 = extractelement <4 x i32> %1693, i64 1, !dbg !63
  %.extract95 = extractelement <4 x i32> %1693, i64 2, !dbg !63
  %.extract97 = extractelement <4 x i32> %1693, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract91, i32 %.extract93, i32 %.extract95, i32 %.extract97, ptr addrspace(1) %1640, i1 %1053) #2, !dbg !63
  %.extract99 = extractelement <4 x i32> %1694, i64 0, !dbg !63
  %.extract101 = extractelement <4 x i32> %1694, i64 1, !dbg !63
  %.extract103 = extractelement <4 x i32> %1694, i64 2, !dbg !63
  %.extract105 = extractelement <4 x i32> %1694, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract99, i32 %.extract101, i32 %.extract103, i32 %.extract105, ptr addrspace(1) %1641, i1 %1054) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_o.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_fwd_kernel_o", linkageName: "chunk_fwd_kernel_o", scope: !1, file: !1, line: 32, type: !6, scopeLine: 32, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 54, column: 35, scope: !5)
!9 = !DILocation(line: 54, column: 53, scope: !5)
!10 = !DILocation(line: 54, column: 71, scope: !5)
!11 = !DILocation(line: 55, column: 23, scope: !5)
!12 = !DILocation(line: 55, column: 33, scope: !5)
!13 = !DILocation(line: 40, column: 22, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!16 = !DILocation(line: 64, column: 24, scope: !5)
!17 = !DILocation(line: 40, column: 28, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 65, column: 21, scope: !5)
!19 = !DILocation(line: 65, column: 26, scope: !5)
!20 = !DILocation(line: 66, column: 25, scope: !5)
!21 = !DILocation(line: 69, column: 16, scope: !5)
!22 = !DILocation(line: 69, column: 20, scope: !5)
!23 = !DILocation(line: 69, column: 27, scope: !5)
!24 = !DILocation(line: 69, column: 9, scope: !5)
!25 = !DILocation(line: 70, column: 9, scope: !5)
!26 = !DILocation(line: 73, column: 17, scope: !5)
!27 = !DILocation(line: 73, column: 21, scope: !5)
!28 = !DILocation(line: 73, column: 29, scope: !5)
!29 = !DILocation(line: 73, column: 9, scope: !5)
!30 = !DILocation(line: 79, column: 60, scope: !5)
!31 = !DILocation(line: 79, column: 85, scope: !5)
!32 = !DILocation(line: 81, column: 68, scope: !5)
!33 = !DILocation(line: 81, column: 83, scope: !5)
!34 = !DILocation(line: 83, column: 22, scope: !5)
!35 = !DILocation(line: 87, column: 22, scope: !5)
!36 = !DILocation(line: 85, column: 22, scope: !5)
!37 = !DILocation(line: 78, column: 21, scope: !5)
!38 = !DILocation(line: 90, column: 27, scope: !5)
!39 = !DILocation(line: 92, column: 27, scope: !5)
!40 = !DILocation(line: 79, column: 70, scope: !5)
!41 = !DILocation(line: 72, column: 9, scope: !5)
!42 = !DILocation(line: 71, column: 9, scope: !5)
!43 = !DILocation(line: 95, column: 13, scope: !5)
!44 = !DILocation(line: 97, column: 22, scope: !5)
!45 = !DILocation(line: 98, column: 24, scope: !5)
!46 = !DILocation(line: 99, column: 24, scope: !5)
!47 = !DILocation(line: 99, column: 39, scope: !5)
!48 = !DILocation(line: 99, column: 20, scope: !5)
!49 = !DILocation(line: 107, column: 21, scope: !5)
!50 = !DILocation(line: 108, column: 16, scope: !5)
!51 = !DILocation(line: 109, column: 27, scope: !5)
!52 = !DILocation(line: 109, column: 59, scope: !5)
!53 = !DILocation(line: 109, column: 44, scope: !5)
!54 = !DILocation(line: 115, column: 18, scope: !5)
!55 = !DILocation(line: 118, column: 38, scope: !5)
!56 = !DILocation(line: 110, column: 29, scope: !5)
!57 = !DILocation(line: 118, column: 50, scope: !5)
!58 = !DILocation(line: 98, column: 20, scope: !5)
!59 = !DILocation(line: 118, column: 16, scope: !5)
!60 = !DILocation(line: 118, column: 57, scope: !5)
!61 = !DILocation(line: 118, column: 24, scope: !5)
!62 = !DILocation(line: 119, column: 25, scope: !5)
!63 = !DILocation(line: 119, column: 18, scope: !5)
!64 = !DILocation(line: 119, column: 4, scope: !5)
