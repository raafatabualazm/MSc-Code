#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)
#loc95 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)
module {
  tt.func public @chunk_fwd_kernel_o(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg6: f32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":32:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %2 = tt.get_program_id z : i32 loc(#loc3)
    %c32_i32 = arith.constant 32 : i32 loc(#loc4)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc4)
    %3 = arith.divsi %2, %c32_i32_0 : i32 loc(#loc4)
    %c32_i32_1 = arith.constant 32 : i32 loc(#loc5)
    %c32_i32_2 = arith.constant 32 : i32 loc(#loc5)
    %4 = arith.remsi %2, %c32_i32_2 : i32 loc(#loc5)
    %5 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg7) : (i32) -> i32 loc(#loc6)
    %6 = arith.extsi %3 : i32 to i64 loc(#loc7)
    %7 = arith.extsi %5 : i32 to i64 loc(#loc7)
    %8 = arith.muli %6, %7 : i64 loc(#loc7)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc7)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc7)
    %9 = arith.cmpi sle, %8, %c2147483647_i64 : i64 loc(#loc7)
    %10 = arith.cmpi sge, %8, %c-2147483648_i64 : i64 loc(#loc7)
    %11 = arith.andi %9, %10 : i1 loc(#loc7)
    %12 = arith.muli %3, %5 : i32 loc(#loc7)
    %13 = arith.extsi %12 : i32 to i64 loc(#loc8)
    %14 = arith.extsi %1 : i32 to i64 loc(#loc8)
    %15 = arith.addi %13, %14 : i64 loc(#loc8)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc8)
    %16 = arith.cmpi sle, %15, %c2147483647_i64_3 : i64 loc(#loc8)
    %17 = arith.cmpi sge, %15, %c-2147483648_i64_4 : i64 loc(#loc8)
    %18 = arith.andi %16, %17 : i1 loc(#loc8)
    %19 = arith.addi %12, %1 : i32 loc(#loc8)
    %20 = arith.extsi %3 : i32 to i64 loc(#loc9)
    %21 = arith.extsi %arg7 : i32 to i64 loc(#loc9)
    %22 = arith.muli %20, %21 : i64 loc(#loc9)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc9)
    %23 = arith.cmpi sle, %22, %c2147483647_i64_5 : i64 loc(#loc9)
    %24 = arith.cmpi sge, %22, %c-2147483648_i64_6 : i64 loc(#loc9)
    %25 = arith.andi %23, %24 : i1 loc(#loc9)
    %26 = arith.muli %3, %arg7 : i32 loc(#loc9)
    %27 = arith.extsi %3 : i32 to i64 loc(#loc10)
    %28 = arith.extsi %arg7 : i32 to i64 loc(#loc10)
    %29 = arith.muli %27, %28 : i64 loc(#loc10)
    %c2147483647_i64_7 = arith.constant 2147483647 : i64 loc(#loc10)
    %c-2147483648_i64_8 = arith.constant -2147483648 : i64 loc(#loc10)
    %30 = arith.cmpi sle, %29, %c2147483647_i64_7 : i64 loc(#loc10)
    %31 = arith.cmpi sge, %29, %c-2147483648_i64_8 : i64 loc(#loc10)
    %32 = arith.andi %30, %31 : i1 loc(#loc10)
    %33 = arith.muli %3, %arg7 : i32 loc(#loc10)
    %34 = arith.extsi %33 : i32 to i64 loc(#loc11)
    %35 = arith.extsi %arg7 : i32 to i64 loc(#loc11)
    %36 = arith.addi %34, %35 : i64 loc(#loc11)
    %c2147483647_i64_9 = arith.constant 2147483647 : i64 loc(#loc11)
    %c-2147483648_i64_10 = arith.constant -2147483648 : i64 loc(#loc11)
    %37 = arith.cmpi sle, %36, %c2147483647_i64_9 : i64 loc(#loc11)
    %38 = arith.cmpi sge, %36, %c-2147483648_i64_10 : i64 loc(#loc11)
    %39 = arith.andi %37, %38 : i1 loc(#loc11)
    %40 = arith.addi %33, %arg7 : i32 loc(#loc11)
    %c32_i32_11 = arith.constant 32 : i32 loc(#loc12)
    %c32_i32_12 = arith.constant 32 : i32 loc(#loc12)
    %41 = arith.extsi %26 : i32 to i64 loc(#loc12)
    %42 = arith.extsi %c32_i32_12 : i32 to i64 loc(#loc12)
    %43 = arith.muli %41, %42 : i64 loc(#loc12)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc12)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc12)
    %44 = arith.cmpi sle, %43, %c2147483647_i64_13 : i64 loc(#loc12)
    %45 = arith.cmpi sge, %43, %c-2147483648_i64_14 : i64 loc(#loc12)
    %46 = arith.andi %44, %45 : i1 loc(#loc12)
    %47 = arith.muli %26, %c32_i32_12 : i32 loc(#loc12)
    %48 = arith.extsi %47 : i32 to i64 loc(#loc13)
    %49 = arith.extsi %4 : i32 to i64 loc(#loc13)
    %50 = arith.addi %48, %49 : i64 loc(#loc13)
    %c2147483647_i64_15 = arith.constant 2147483647 : i64 loc(#loc13)
    %c-2147483648_i64_16 = arith.constant -2147483648 : i64 loc(#loc13)
    %51 = arith.cmpi sle, %50, %c2147483647_i64_15 : i64 loc(#loc13)
    %52 = arith.cmpi sge, %50, %c-2147483648_i64_16 : i64 loc(#loc13)
    %53 = arith.andi %51, %52 : i1 loc(#loc13)
    %54 = arith.addi %47, %4 : i32 loc(#loc13)
    %c128_i32 = arith.constant 128 : i32 loc(#loc14)
    %c128_i32_17 = arith.constant 128 : i32 loc(#loc14)
    %55 = arith.extsi %54 : i32 to i64 loc(#loc14)
    %56 = arith.extsi %c128_i32_17 : i32 to i64 loc(#loc14)
    %57 = arith.muli %55, %56 : i64 loc(#loc14)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc14)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc14)
    %58 = arith.cmpi sle, %57, %c2147483647_i64_18 : i64 loc(#loc14)
    %59 = arith.cmpi sge, %57, %c-2147483648_i64_19 : i64 loc(#loc14)
    %60 = arith.andi %58, %59 : i1 loc(#loc14)
    %61 = arith.muli %54, %c128_i32_17 : i32 loc(#loc14)
    %62 = tt.addptr %arg0, %61 : !tt.ptr<bf16>, i32 loc(#loc15)
    %c32_i32_20 = arith.constant 32 : i32 loc(#loc16)
    %c32_i32_21 = arith.constant 32 : i32 loc(#loc16)
    %63 = arith.extsi %26 : i32 to i64 loc(#loc16)
    %64 = arith.extsi %c32_i32_21 : i32 to i64 loc(#loc16)
    %65 = arith.muli %63, %64 : i64 loc(#loc16)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc16)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc16)
    %66 = arith.cmpi sle, %65, %c2147483647_i64_22 : i64 loc(#loc16)
    %67 = arith.cmpi sge, %65, %c-2147483648_i64_23 : i64 loc(#loc16)
    %68 = arith.andi %66, %67 : i1 loc(#loc16)
    %69 = arith.muli %26, %c32_i32_21 : i32 loc(#loc16)
    %70 = arith.extsi %69 : i32 to i64 loc(#loc17)
    %71 = arith.extsi %4 : i32 to i64 loc(#loc17)
    %72 = arith.addi %70, %71 : i64 loc(#loc17)
    %c2147483647_i64_24 = arith.constant 2147483647 : i64 loc(#loc17)
    %c-2147483648_i64_25 = arith.constant -2147483648 : i64 loc(#loc17)
    %73 = arith.cmpi sle, %72, %c2147483647_i64_24 : i64 loc(#loc17)
    %74 = arith.cmpi sge, %72, %c-2147483648_i64_25 : i64 loc(#loc17)
    %75 = arith.andi %73, %74 : i1 loc(#loc17)
    %76 = arith.addi %69, %4 : i32 loc(#loc17)
    %c128_i32_26 = arith.constant 128 : i32 loc(#loc18)
    %c128_i32_27 = arith.constant 128 : i32 loc(#loc18)
    %77 = arith.extsi %76 : i32 to i64 loc(#loc18)
    %78 = arith.extsi %c128_i32_27 : i32 to i64 loc(#loc18)
    %79 = arith.muli %77, %78 : i64 loc(#loc18)
    %c2147483647_i64_28 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_29 = arith.constant -2147483648 : i64 loc(#loc18)
    %80 = arith.cmpi sle, %79, %c2147483647_i64_28 : i64 loc(#loc18)
    %81 = arith.cmpi sge, %79, %c-2147483648_i64_29 : i64 loc(#loc18)
    %82 = arith.andi %80, %81 : i1 loc(#loc18)
    %83 = arith.muli %76, %c128_i32_27 : i32 loc(#loc18)
    %84 = tt.addptr %arg1, %83 : !tt.ptr<bf16>, i32 loc(#loc19)
    %c32_i32_30 = arith.constant 32 : i32 loc(#loc20)
    %c32_i32_31 = arith.constant 32 : i32 loc(#loc20)
    %85 = arith.extsi %26 : i32 to i64 loc(#loc20)
    %86 = arith.extsi %c32_i32_31 : i32 to i64 loc(#loc20)
    %87 = arith.muli %85, %86 : i64 loc(#loc20)
    %c2147483647_i64_32 = arith.constant 2147483647 : i64 loc(#loc20)
    %c-2147483648_i64_33 = arith.constant -2147483648 : i64 loc(#loc20)
    %88 = arith.cmpi sle, %87, %c2147483647_i64_32 : i64 loc(#loc20)
    %89 = arith.cmpi sge, %87, %c-2147483648_i64_33 : i64 loc(#loc20)
    %90 = arith.andi %88, %89 : i1 loc(#loc20)
    %91 = arith.muli %26, %c32_i32_31 : i32 loc(#loc20)
    %92 = arith.extsi %91 : i32 to i64 loc(#loc21)
    %93 = arith.extsi %4 : i32 to i64 loc(#loc21)
    %94 = arith.addi %92, %93 : i64 loc(#loc21)
    %c2147483647_i64_34 = arith.constant 2147483647 : i64 loc(#loc21)
    %c-2147483648_i64_35 = arith.constant -2147483648 : i64 loc(#loc21)
    %95 = arith.cmpi sle, %94, %c2147483647_i64_34 : i64 loc(#loc21)
    %96 = arith.cmpi sge, %94, %c-2147483648_i64_35 : i64 loc(#loc21)
    %97 = arith.andi %95, %96 : i1 loc(#loc21)
    %98 = arith.addi %91, %4 : i32 loc(#loc21)
    %c128_i32_36 = arith.constant 128 : i32 loc(#loc22)
    %c128_i32_37 = arith.constant 128 : i32 loc(#loc22)
    %99 = arith.extsi %98 : i32 to i64 loc(#loc22)
    %100 = arith.extsi %c128_i32_37 : i32 to i64 loc(#loc22)
    %101 = arith.muli %99, %100 : i64 loc(#loc22)
    %c2147483647_i64_38 = arith.constant 2147483647 : i64 loc(#loc22)
    %c-2147483648_i64_39 = arith.constant -2147483648 : i64 loc(#loc22)
    %102 = arith.cmpi sle, %101, %c2147483647_i64_38 : i64 loc(#loc22)
    %103 = arith.cmpi sge, %101, %c-2147483648_i64_39 : i64 loc(#loc22)
    %104 = arith.andi %102, %103 : i1 loc(#loc22)
    %105 = arith.muli %98, %c128_i32_37 : i32 loc(#loc22)
    %106 = tt.addptr %arg2, %105 : !tt.ptr<bf16>, i32 loc(#loc23)
    %c32_i32_40 = arith.constant 32 : i32 loc(#loc24)
    %c32_i32_41 = arith.constant 32 : i32 loc(#loc24)
    %107 = arith.extsi %26 : i32 to i64 loc(#loc24)
    %108 = arith.extsi %c32_i32_41 : i32 to i64 loc(#loc24)
    %109 = arith.muli %107, %108 : i64 loc(#loc24)
    %c2147483647_i64_42 = arith.constant 2147483647 : i64 loc(#loc24)
    %c-2147483648_i64_43 = arith.constant -2147483648 : i64 loc(#loc24)
    %110 = arith.cmpi sle, %109, %c2147483647_i64_42 : i64 loc(#loc24)
    %111 = arith.cmpi sge, %109, %c-2147483648_i64_43 : i64 loc(#loc24)
    %112 = arith.andi %110, %111 : i1 loc(#loc24)
    %113 = arith.muli %26, %c32_i32_41 : i32 loc(#loc24)
    %114 = arith.extsi %113 : i32 to i64 loc(#loc25)
    %115 = arith.extsi %4 : i32 to i64 loc(#loc25)
    %116 = arith.addi %114, %115 : i64 loc(#loc25)
    %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc25)
    %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc25)
    %117 = arith.cmpi sle, %116, %c2147483647_i64_44 : i64 loc(#loc25)
    %118 = arith.cmpi sge, %116, %c-2147483648_i64_45 : i64 loc(#loc25)
    %119 = arith.andi %117, %118 : i1 loc(#loc25)
    %120 = arith.addi %113, %4 : i32 loc(#loc25)
    %c128_i32_46 = arith.constant 128 : i32 loc(#loc26)
    %c128_i32_47 = arith.constant 128 : i32 loc(#loc26)
    %121 = arith.extsi %120 : i32 to i64 loc(#loc26)
    %122 = arith.extsi %c128_i32_47 : i32 to i64 loc(#loc26)
    %123 = arith.muli %121, %122 : i64 loc(#loc26)
    %c2147483647_i64_48 = arith.constant 2147483647 : i64 loc(#loc26)
    %c-2147483648_i64_49 = arith.constant -2147483648 : i64 loc(#loc26)
    %124 = arith.cmpi sle, %123, %c2147483647_i64_48 : i64 loc(#loc26)
    %125 = arith.cmpi sge, %123, %c-2147483648_i64_49 : i64 loc(#loc26)
    %126 = arith.andi %124, %125 : i1 loc(#loc26)
    %127 = arith.muli %120, %c128_i32_47 : i32 loc(#loc26)
    %128 = tt.addptr %arg5, %127 : !tt.ptr<bf16>, i32 loc(#loc27)
    %c32_i32_50 = arith.constant 32 : i32 loc(#loc28)
    %c32_i32_51 = arith.constant 32 : i32 loc(#loc28)
    %129 = arith.extsi %19 : i32 to i64 loc(#loc28)
    %130 = arith.extsi %c32_i32_51 : i32 to i64 loc(#loc28)
    %131 = arith.muli %129, %130 : i64 loc(#loc28)
    %c2147483647_i64_52 = arith.constant 2147483647 : i64 loc(#loc28)
    %c-2147483648_i64_53 = arith.constant -2147483648 : i64 loc(#loc28)
    %132 = arith.cmpi sle, %131, %c2147483647_i64_52 : i64 loc(#loc28)
    %133 = arith.cmpi sge, %131, %c-2147483648_i64_53 : i64 loc(#loc28)
    %134 = arith.andi %132, %133 : i1 loc(#loc28)
    %135 = arith.muli %19, %c32_i32_51 : i32 loc(#loc28)
    %136 = arith.extsi %135 : i32 to i64 loc(#loc29)
    %137 = arith.extsi %4 : i32 to i64 loc(#loc29)
    %138 = arith.addi %136, %137 : i64 loc(#loc29)
    %c2147483647_i64_54 = arith.constant 2147483647 : i64 loc(#loc29)
    %c-2147483648_i64_55 = arith.constant -2147483648 : i64 loc(#loc29)
    %139 = arith.cmpi sle, %138, %c2147483647_i64_54 : i64 loc(#loc29)
    %140 = arith.cmpi sge, %138, %c-2147483648_i64_55 : i64 loc(#loc29)
    %141 = arith.andi %139, %140 : i1 loc(#loc29)
    %142 = arith.addi %135, %4 : i32 loc(#loc29)
    %143 = arith.extsi %142 : i32 to i64 loc(#loc30)
    %c128_i32_56 = arith.constant 128 : i32 loc(#loc31)
    %c128_i64 = arith.constant 128 : i64 loc(#loc31)
    %144 = arith.muli %143, %c128_i64 : i64 loc(#loc31)
    %c128_i32_57 = arith.constant 128 : i32 loc(#loc32)
    %c128_i64_58 = arith.constant 128 : i64 loc(#loc32)
    %145 = arith.muli %144, %c128_i64_58 : i64 loc(#loc32)
    %146 = tt.addptr %arg3, %145 : !tt.ptr<bf16>, i64 loc(#loc33)
    %147 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_32__(1,)cconstexpr_fp32_"() : () -> tensor<64x32xf32> loc(#loc34)
    %148 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc35)
    %149 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_32_"() : () -> i32 loc(#loc36)
    %150 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_32_"() : () -> i32 loc(#loc36)
    %c0_i32 = arith.constant 0 : i32 loc(#loc37)
    %c1_i32 = arith.constant 1 : i32 loc(#loc37)
    %151 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc37)
    %152 = arith.bitcast %150 : i32 to i32 loc(#loc37)
    %153 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc37)
    %154 = ub.poison : i32 loc(#loc37)
    %155:2 = scf.for %arg8 = %151 to %152 step %153 iter_args(%arg9 = %147, %arg10 = %148) -> (tensor<64x32xf32>, tensor<64x64xf32>)  : i32 {
      %c64_i32_100 = arith.constant 64 : i32 loc(#loc38)
      %c64_i32_101 = arith.constant 64 : i32 loc(#loc38)
      %263 = arith.extsi %1 : i32 to i64 loc(#loc38)
      %264 = arith.extsi %c64_i32_101 : i32 to i64 loc(#loc38)
      %265 = arith.muli %263, %264 : i64 loc(#loc38)
      %c2147483647_i64_102 = arith.constant 2147483647 : i64 loc(#loc38)
      %c-2147483648_i64_103 = arith.constant -2147483648 : i64 loc(#loc38)
      %266 = arith.cmpi sle, %265, %c2147483647_i64_102 : i64 loc(#loc38)
      %267 = arith.cmpi sge, %265, %c-2147483648_i64_103 : i64 loc(#loc38)
      %268 = arith.andi %266, %267 : i1 loc(#loc38)
      %269 = arith.muli %1, %c64_i32_101 : i32 loc(#loc38)
      %c32_i32_104 = arith.constant 32 : i32 loc(#loc39)
      %c32_i32_105 = arith.constant 32 : i32 loc(#loc39)
      %270 = arith.extsi %arg8 : i32 to i64 loc(#loc39)
      %271 = arith.extsi %c32_i32_105 : i32 to i64 loc(#loc39)
      %272 = arith.muli %270, %271 : i64 loc(#loc39)
      %c2147483647_i64_106 = arith.constant 2147483647 : i64 loc(#loc39)
      %c-2147483648_i64_107 = arith.constant -2147483648 : i64 loc(#loc39)
      %273 = arith.cmpi sle, %272, %c2147483647_i64_106 : i64 loc(#loc39)
      %274 = arith.cmpi sge, %272, %c-2147483648_i64_107 : i64 loc(#loc39)
      %275 = arith.andi %273, %274 : i1 loc(#loc39)
      %276 = arith.muli %arg8, %c32_i32_105 : i32 loc(#loc39)
      %277 = arith.extsi %arg7 : i32 to i64 loc(#loc40)
      %c128_i64_108 = arith.constant 128 : i64 loc(#loc40)
      %c4096_i64_109 = arith.constant 4096 : i64 loc(#loc40)
      %c1_i64_110 = arith.constant 1 : i64 loc(#loc40)
      %278 = tt.make_tensor_ptr %62, [%277, %c128_i64_108], [%c4096_i64_109, %c1_i64_110], [%269, %276] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>> loc(#loc40)
      %c32_i32_111 = arith.constant 32 : i32 loc(#loc41)
      %c32_i32_112 = arith.constant 32 : i32 loc(#loc41)
      %279 = arith.extsi %arg8 : i32 to i64 loc(#loc41)
      %280 = arith.extsi %c32_i32_112 : i32 to i64 loc(#loc41)
      %281 = arith.muli %279, %280 : i64 loc(#loc41)
      %c2147483647_i64_113 = arith.constant 2147483647 : i64 loc(#loc41)
      %c-2147483648_i64_114 = arith.constant -2147483648 : i64 loc(#loc41)
      %282 = arith.cmpi sle, %281, %c2147483647_i64_113 : i64 loc(#loc41)
      %283 = arith.cmpi sge, %281, %c-2147483648_i64_114 : i64 loc(#loc41)
      %284 = arith.andi %282, %283 : i1 loc(#loc41)
      %285 = arith.muli %arg8, %c32_i32_112 : i32 loc(#loc41)
      %c64_i32_115 = arith.constant 64 : i32 loc(#loc42)
      %c64_i32_116 = arith.constant 64 : i32 loc(#loc42)
      %286 = arith.extsi %1 : i32 to i64 loc(#loc42)
      %287 = arith.extsi %c64_i32_116 : i32 to i64 loc(#loc42)
      %288 = arith.muli %286, %287 : i64 loc(#loc42)
      %c2147483647_i64_117 = arith.constant 2147483647 : i64 loc(#loc42)
      %c-2147483648_i64_118 = arith.constant -2147483648 : i64 loc(#loc42)
      %289 = arith.cmpi sle, %288, %c2147483647_i64_117 : i64 loc(#loc42)
      %290 = arith.cmpi sge, %288, %c-2147483648_i64_118 : i64 loc(#loc42)
      %291 = arith.andi %289, %290 : i1 loc(#loc42)
      %292 = arith.muli %1, %c64_i32_116 : i32 loc(#loc42)
      %c128_i64_119 = arith.constant 128 : i64 loc(#loc43)
      %293 = arith.extsi %arg7 : i32 to i64 loc(#loc43)
      %c1_i64_120 = arith.constant 1 : i64 loc(#loc43)
      %c4096_i64_121 = arith.constant 4096 : i64 loc(#loc43)
      %294 = tt.make_tensor_ptr %84, [%c128_i64_119, %293], [%c1_i64_120, %c4096_i64_121], [%285, %292] {order = array<i32: 0, 1>} : <tensor<32x64xbf16>> loc(#loc43)
      %c32_i32_122 = arith.constant 32 : i32 loc(#loc44)
      %c32_i32_123 = arith.constant 32 : i32 loc(#loc44)
      %295 = arith.extsi %arg8 : i32 to i64 loc(#loc44)
      %296 = arith.extsi %c32_i32_123 : i32 to i64 loc(#loc44)
      %297 = arith.muli %295, %296 : i64 loc(#loc44)
      %c2147483647_i64_124 = arith.constant 2147483647 : i64 loc(#loc44)
      %c-2147483648_i64_125 = arith.constant -2147483648 : i64 loc(#loc44)
      %298 = arith.cmpi sle, %297, %c2147483647_i64_124 : i64 loc(#loc44)
      %299 = arith.cmpi sge, %297, %c-2147483648_i64_125 : i64 loc(#loc44)
      %300 = arith.andi %298, %299 : i1 loc(#loc44)
      %301 = arith.muli %arg8, %c32_i32_123 : i32 loc(#loc44)
      %c32_i32_126 = arith.constant 32 : i32 loc(#loc45)
      %c32_i32_127 = arith.constant 32 : i32 loc(#loc45)
      %302 = arith.extsi %0 : i32 to i64 loc(#loc45)
      %303 = arith.extsi %c32_i32_127 : i32 to i64 loc(#loc45)
      %304 = arith.muli %302, %303 : i64 loc(#loc45)
      %c2147483647_i64_128 = arith.constant 2147483647 : i64 loc(#loc45)
      %c-2147483648_i64_129 = arith.constant -2147483648 : i64 loc(#loc45)
      %305 = arith.cmpi sle, %304, %c2147483647_i64_128 : i64 loc(#loc45)
      %306 = arith.cmpi sge, %304, %c-2147483648_i64_129 : i64 loc(#loc45)
      %307 = arith.andi %305, %306 : i1 loc(#loc45)
      %308 = arith.muli %0, %c32_i32_127 : i32 loc(#loc45)
      %c128_i64_130 = arith.constant 128 : i64 loc(#loc46)
      %c128_i64_131 = arith.constant 128 : i64 loc(#loc46)
      %c128_i64_132 = arith.constant 128 : i64 loc(#loc46)
      %c1_i64_133 = arith.constant 1 : i64 loc(#loc46)
      %309 = tt.make_tensor_ptr %146, [%c128_i64_130, %c128_i64_131], [%c128_i64_132, %c1_i64_133], [%301, %308] {order = array<i32: 1, 0>} : <tensor<32x32xbf16>> loc(#loc46)
      %310 = tt.load %278 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x32xbf16>> loc(#loc47)
      %311 = tt.load %294 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<32x64xbf16>> loc(#loc48)
      %312 = tt.load %309 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<32x32xbf16>> loc(#loc49)
      %cst_134 = arith.constant 0.000000e+00 : f32 loc(#loc50)
      %cst_135 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc50)
      %313 = tt.dot %310, %312, %cst_135, inputPrecision = tf32 : tensor<64x32xbf16> * tensor<32x32xbf16> -> tensor<64x32xf32> loc(#loc50)
      %314 = arith.addf %arg9, %313 : tensor<64x32xf32> loc(#loc51)
      %cst_136 = arith.constant 0.000000e+00 : f32 loc(#loc52)
      %cst_137 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc52)
      %315 = tt.dot %310, %311, %cst_137, inputPrecision = tf32 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc52)
      %316 = arith.addf %arg10, %315 : tensor<64x64xf32> loc(#loc53)
      scf.yield %314, %316 : tensor<64x32xf32>, tensor<64x64xf32> loc(#loc54)
    } loc(#loc37)
    %c32_i32_59 = arith.constant 32 : i32 loc(#loc55)
    %c32_i32_60 = arith.constant 32 : i32 loc(#loc55)
    %156 = arith.extsi %26 : i32 to i64 loc(#loc55)
    %157 = arith.extsi %c32_i32_60 : i32 to i64 loc(#loc55)
    %158 = arith.muli %156, %157 : i64 loc(#loc55)
    %c2147483647_i64_61 = arith.constant 2147483647 : i64 loc(#loc55)
    %c-2147483648_i64_62 = arith.constant -2147483648 : i64 loc(#loc55)
    %159 = arith.cmpi sle, %158, %c2147483647_i64_61 : i64 loc(#loc55)
    %160 = arith.cmpi sge, %158, %c-2147483648_i64_62 : i64 loc(#loc55)
    %161 = arith.andi %159, %160 : i1 loc(#loc55)
    %162 = arith.muli %26, %c32_i32_60 : i32 loc(#loc55)
    %163 = arith.extsi %162 : i32 to i64 loc(#loc56)
    %164 = arith.extsi %4 : i32 to i64 loc(#loc56)
    %165 = arith.addi %163, %164 : i64 loc(#loc56)
    %c2147483647_i64_63 = arith.constant 2147483647 : i64 loc(#loc56)
    %c-2147483648_i64_64 = arith.constant -2147483648 : i64 loc(#loc56)
    %166 = arith.cmpi sle, %165, %c2147483647_i64_63 : i64 loc(#loc56)
    %167 = arith.cmpi sge, %165, %c-2147483648_i64_64 : i64 loc(#loc56)
    %168 = arith.andi %166, %167 : i1 loc(#loc56)
    %169 = arith.addi %162, %4 : i32 loc(#loc56)
    %170 = tt.addptr %arg4, %169 : !tt.ptr<f32>, i32 loc(#loc57)
    %c64_i32 = arith.constant 64 : i32 loc(#loc58)
    %c64_i32_65 = arith.constant 64 : i32 loc(#loc58)
    %171 = arith.extsi %1 : i32 to i64 loc(#loc58)
    %172 = arith.extsi %c64_i32_65 : i32 to i64 loc(#loc58)
    %173 = arith.muli %171, %172 : i64 loc(#loc58)
    %c2147483647_i64_66 = arith.constant 2147483647 : i64 loc(#loc58)
    %c-2147483648_i64_67 = arith.constant -2147483648 : i64 loc(#loc58)
    %174 = arith.cmpi sle, %173, %c2147483647_i64_66 : i64 loc(#loc58)
    %175 = arith.cmpi sge, %173, %c-2147483648_i64_67 : i64 loc(#loc58)
    %176 = arith.andi %174, %175 : i1 loc(#loc58)
    %177 = arith.muli %1, %c64_i32_65 : i32 loc(#loc58)
    %178 = arith.extsi %arg7 : i32 to i64 loc(#loc59)
    %c32_i64 = arith.constant 32 : i64 loc(#loc59)
    %179 = tt.make_tensor_ptr %170, [%178], [%c32_i64], [%177] {order = array<i32: 0>} : <tensor<64xf32>> loc(#loc59)
    %180 = tt.load %179 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xf32>> loc(#loc60)
    %181 = math.exp %180 : tensor<64xf32> loc(#loc61)
    %182 = tt.expand_dims %181 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc62)
    %183 = tt.broadcast %182 : tensor<64x1xf32> -> tensor<64x32xf32> loc(#loc63)
    %184 = arith.mulf %155#0, %183 : tensor<64x32xf32> loc(#loc63)
    %185 = tt.expand_dims %180 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc64)
    %186 = tt.expand_dims %180 {axis = 0 : i32} : tensor<64xf32> -> tensor<1x64xf32> loc(#loc65)
    %187 = tt.broadcast %185 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc66)
    %188 = tt.broadcast %186 : tensor<1x64xf32> -> tensor<64x64xf32> loc(#loc66)
    %189 = arith.subf %187, %188 : tensor<64x64xf32> loc(#loc66)
    %190 = math.exp %189 : tensor<64x64xf32> loc(#loc67)
    %191 = arith.mulf %155#1, %190 : tensor<64x64xf32> loc(#loc68)
    %c64_i32_68 = arith.constant 64 : i32 loc(#loc69)
    %c64_i32_69 = arith.constant 64 : i32 loc(#loc69)
    %192 = arith.extsi %1 : i32 to i64 loc(#loc69)
    %193 = arith.extsi %c64_i32_69 : i32 to i64 loc(#loc69)
    %194 = arith.muli %192, %193 : i64 loc(#loc69)
    %c2147483647_i64_70 = arith.constant 2147483647 : i64 loc(#loc69)
    %c-2147483648_i64_71 = arith.constant -2147483648 : i64 loc(#loc69)
    %195 = arith.cmpi sle, %194, %c2147483647_i64_70 : i64 loc(#loc69)
    %196 = arith.cmpi sge, %194, %c-2147483648_i64_71 : i64 loc(#loc69)
    %197 = arith.andi %195, %196 : i1 loc(#loc69)
    %198 = arith.muli %1, %c64_i32_69 : i32 loc(#loc69)
    %199 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc70)
    %200 = tt.splat %198 : i32 -> tensor<64xi32> loc(#loc71)
    %201 = arith.extsi %200 : tensor<64xi32> to tensor<64xi64> loc(#loc71)
    %202 = arith.extsi %199 : tensor<64xi32> to tensor<64xi64> loc(#loc71)
    %203 = arith.addi %201, %202 : tensor<64xi64> loc(#loc71)
    %c2147483647_i64_72 = arith.constant 2147483647 : i64 loc(#loc71)
    %c-2147483648_i64_73 = arith.constant -2147483648 : i64 loc(#loc71)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc71)
    %204 = arith.cmpi sle, %203, %cst : tensor<64xi64> loc(#loc71)
    %cst_74 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc71)
    %205 = arith.cmpi sge, %203, %cst_74 : tensor<64xi64> loc(#loc71)
    %206 = arith.andi %204, %205 : tensor<64xi1> loc(#loc71)
    %207 = arith.addi %200, %199 : tensor<64xi32> loc(#loc71)
    %208 = tt.splat %arg7 : i32 -> tensor<64xi32> loc(#loc72)
    %209 = arith.cmpi slt, %207, %208 : tensor<64xi32> loc(#loc72)
    %210 = tt.expand_dims %207 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc73)
    %211 = tt.expand_dims %207 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc74)
    %212 = tt.broadcast %210 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc75)
    %213 = tt.broadcast %211 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc75)
    %214 = arith.cmpi sge, %212, %213 : tensor<64x64xi32> loc(#loc75)
    %215 = tt.expand_dims %209 {axis = 1 : i32} : tensor<64xi1> -> tensor<64x1xi1> loc(#loc76)
    %216 = tt.expand_dims %209 {axis = 0 : i32} : tensor<64xi1> -> tensor<1x64xi1> loc(#loc77)
    %217 = tt.broadcast %215 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc77)
    %218 = tt.broadcast %216 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc77)
    %219 = arith.andi %217, %218 : tensor<64x64xi1> loc(#loc77)
    %220 = arith.andi %214, %219 : tensor<64x64xi1> loc(#loc78)
    %c0_i32_75 = arith.constant 0 : i32 loc(#loc79)
    %cst_76 = arith.constant 0.000000e+00 : f32 loc(#loc79)
    %cst_77 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc79)
    %221 = arith.select %220, %191, %cst_77 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc79)
    %c64_i32_78 = arith.constant 64 : i32 loc(#loc80)
    %c64_i32_79 = arith.constant 64 : i32 loc(#loc80)
    %222 = arith.extsi %1 : i32 to i64 loc(#loc80)
    %223 = arith.extsi %c64_i32_79 : i32 to i64 loc(#loc80)
    %224 = arith.muli %222, %223 : i64 loc(#loc80)
    %c2147483647_i64_80 = arith.constant 2147483647 : i64 loc(#loc80)
    %c-2147483648_i64_81 = arith.constant -2147483648 : i64 loc(#loc80)
    %225 = arith.cmpi sle, %224, %c2147483647_i64_80 : i64 loc(#loc80)
    %226 = arith.cmpi sge, %224, %c-2147483648_i64_81 : i64 loc(#loc80)
    %227 = arith.andi %225, %226 : i1 loc(#loc80)
    %228 = arith.muli %1, %c64_i32_79 : i32 loc(#loc80)
    %c32_i32_82 = arith.constant 32 : i32 loc(#loc81)
    %c32_i32_83 = arith.constant 32 : i32 loc(#loc81)
    %229 = arith.extsi %0 : i32 to i64 loc(#loc81)
    %230 = arith.extsi %c32_i32_83 : i32 to i64 loc(#loc81)
    %231 = arith.muli %229, %230 : i64 loc(#loc81)
    %c2147483647_i64_84 = arith.constant 2147483647 : i64 loc(#loc81)
    %c-2147483648_i64_85 = arith.constant -2147483648 : i64 loc(#loc81)
    %232 = arith.cmpi sle, %231, %c2147483647_i64_84 : i64 loc(#loc81)
    %233 = arith.cmpi sge, %231, %c-2147483648_i64_85 : i64 loc(#loc81)
    %234 = arith.andi %232, %233 : i1 loc(#loc81)
    %235 = arith.muli %0, %c32_i32_83 : i32 loc(#loc81)
    %236 = arith.extsi %arg7 : i32 to i64 loc(#loc82)
    %c128_i64_86 = arith.constant 128 : i64 loc(#loc82)
    %c4096_i64 = arith.constant 4096 : i64 loc(#loc82)
    %c1_i64 = arith.constant 1 : i64 loc(#loc82)
    %237 = tt.make_tensor_ptr %106, [%236, %c128_i64_86], [%c4096_i64, %c1_i64], [%228, %235] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>> loc(#loc82)
    %c64_i32_87 = arith.constant 64 : i32 loc(#loc83)
    %c64_i32_88 = arith.constant 64 : i32 loc(#loc83)
    %238 = arith.extsi %1 : i32 to i64 loc(#loc83)
    %239 = arith.extsi %c64_i32_88 : i32 to i64 loc(#loc83)
    %240 = arith.muli %238, %239 : i64 loc(#loc83)
    %c2147483647_i64_89 = arith.constant 2147483647 : i64 loc(#loc83)
    %c-2147483648_i64_90 = arith.constant -2147483648 : i64 loc(#loc83)
    %241 = arith.cmpi sle, %240, %c2147483647_i64_89 : i64 loc(#loc83)
    %242 = arith.cmpi sge, %240, %c-2147483648_i64_90 : i64 loc(#loc83)
    %243 = arith.andi %241, %242 : i1 loc(#loc83)
    %244 = arith.muli %1, %c64_i32_88 : i32 loc(#loc83)
    %c32_i32_91 = arith.constant 32 : i32 loc(#loc84)
    %c32_i32_92 = arith.constant 32 : i32 loc(#loc84)
    %245 = arith.extsi %0 : i32 to i64 loc(#loc84)
    %246 = arith.extsi %c32_i32_92 : i32 to i64 loc(#loc84)
    %247 = arith.muli %245, %246 : i64 loc(#loc84)
    %c2147483647_i64_93 = arith.constant 2147483647 : i64 loc(#loc84)
    %c-2147483648_i64_94 = arith.constant -2147483648 : i64 loc(#loc84)
    %248 = arith.cmpi sle, %247, %c2147483647_i64_93 : i64 loc(#loc84)
    %249 = arith.cmpi sge, %247, %c-2147483648_i64_94 : i64 loc(#loc84)
    %250 = arith.andi %248, %249 : i1 loc(#loc84)
    %251 = arith.muli %0, %c32_i32_92 : i32 loc(#loc84)
    %252 = arith.extsi %arg7 : i32 to i64 loc(#loc85)
    %c128_i64_95 = arith.constant 128 : i64 loc(#loc85)
    %c4096_i64_96 = arith.constant 4096 : i64 loc(#loc85)
    %c1_i64_97 = arith.constant 1 : i64 loc(#loc85)
    %253 = tt.make_tensor_ptr %128, [%252, %c128_i64_95], [%c4096_i64_96, %c1_i64_97], [%244, %251] {order = array<i32: 1, 0>} : <tensor<64x32xbf16>> loc(#loc85)
    %254 = tt.load %237 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x32xbf16>> loc(#loc86)
    %255 = tt.splat %arg6 : f32 -> tensor<64x32xf32> loc(#loc87)
    %256 = arith.mulf %184, %255 : tensor<64x32xf32> loc(#loc87)
    %257 = arith.truncf %221 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc88)
    %cst_98 = arith.constant 0.000000e+00 : f32 loc(#loc89)
    %cst_99 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc89)
    %258 = tt.dot %257, %254, %cst_99, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x32xbf16> -> tensor<64x32xf32> loc(#loc89)
    %259 = tt.splat %arg6 : f32 -> tensor<64x32xf32> loc(#loc90)
    %260 = arith.mulf %258, %259 : tensor<64x32xf32> loc(#loc90)
    %261 = arith.addf %256, %260 : tensor<64x32xf32> loc(#loc91)
    %262 = arith.truncf %261 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc92)
    tt.store %253, %262 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x32xbf16>> loc(#loc93)
    tt.return loc(#loc94)
  } loc(#loc)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg0: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc96)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc96)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc96)
    %1 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc96)
    %2 = arith.addi %0, %1 : i64 loc(#loc96)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc96)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc96)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc96)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc96)
    %5 = arith.andi %3, %4 : i1 loc(#loc96)
    %6 = arith.addi %arg0, %c64_i32_0 : i32 loc(#loc96)
    %c1_i32 = arith.constant 1 : i32 loc(#loc97)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc97)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc97)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc97)
    %9 = arith.subi %7, %8 : i64 loc(#loc97)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc97)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc97)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc97)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc97)
    %12 = arith.andi %10, %11 : i1 loc(#loc97)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc97)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc98)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc98)
    %14 = arith.divsi %13, %c64_i32_5 : i32 loc(#loc98)
    tt.return %14 : i32 loc(#loc99)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc100)
    tt.return %15 : i32 loc(#loc100)
  } loc(#loc95)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_32__(1,)cconstexpr_fp32_"() -> tensor<64x32xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc102)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc102)
    tt.return %cst_0 : tensor<64x32xf32> loc(#loc103)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x32xf32> loc(#loc104)
    tt.return %0 : tensor<64x32xf32> loc(#loc104)
  } loc(#loc101)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc102)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc102)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc103)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc104)
    tt.return %0 : tensor<64x64xf32> loc(#loc104)
  } loc(#loc101)
  tt.func private @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_32_"() -> i32 attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32 loc(#loc99)
    tt.return %c4_i32 : i32 loc(#loc99)
  ^bb1:  // no predecessors
    %0 = ub.poison : i32 loc(#loc100)
    tt.return %0 : i32 loc(#loc100)
  } loc(#loc95)
} loc(#loc)
#loc1 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:35)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:53)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":54:71)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":55:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":64:24)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:21)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":65:26)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":66:25)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":66:34)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":66:38)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:16)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:20)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:27)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":69:9)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:16)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:20)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:27)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":70:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:16)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:20)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":71:9)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:16)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:20)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:27)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":72:9)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:17)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:21)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:29)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:41)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:43)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":73:9)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":75:19)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":76:19)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":78:32)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":78:21)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:60)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:70)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":79:85)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":80:60)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":80:70)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":80:85)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:58)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:68)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":81:83)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":83:22)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":85:22)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":87:22)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":90:27)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":90:15)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":92:27)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":92:15)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":92:8)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":95:19)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":95:23)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":95:13)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":96:54)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":96:67)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":97:22)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:29)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":98:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:28)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:43)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:39)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:24)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":99:20)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":107:16)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":107:34)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":107:21)
#loc72 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":108:16)
#loc73 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:15)
#loc74 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:31)
#loc75 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:27)
#loc76 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:48)
#loc77 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:59)
#loc78 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":109:44)
#loc79 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":110:29)
#loc80 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":112:56)
#loc81 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":112:66)
#loc82 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":112:81)
#loc83 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":113:56)
#loc84 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":113:66)
#loc85 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":113:81)
#loc86 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":115:18)
#loc87 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:16)
#loc88 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:38)
#loc89 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:50)
#loc90 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:57)
#loc91 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":118:24)
#loc92 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:25)
#loc93 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:18)
#loc94 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_o.py":119:4)
#loc96 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:16)
#loc97 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc98 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc99 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:11)
#loc100 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:4)
#loc101 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":117:0)
#loc102 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:31)
#loc103 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:11)
#loc104 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:4)
