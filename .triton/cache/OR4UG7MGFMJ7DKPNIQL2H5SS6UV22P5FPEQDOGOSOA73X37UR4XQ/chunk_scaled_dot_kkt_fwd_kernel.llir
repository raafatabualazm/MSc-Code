; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = lshr i32 %12, 2, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = and i32 %14, 31, !dbg !13
  %17 = or disjoint i32 %16, 32, !dbg !13
  %18 = lshr i32 %12, 1, !dbg !13
  %19 = and i32 %18, 48, !dbg !13
  %20 = or disjoint i32 %19, %15, !dbg !13
  %21 = or disjoint i32 %20, 8, !dbg !13
  %22 = mul i32 %9, %4, !dbg !14
  %23 = sext i32 %22 to i64, !dbg !15
  %24 = getelementptr bfloat, ptr addrspace(1) %2, i64 %23, !dbg !15
  %25 = zext nneg i32 %10 to i64, !dbg !16
  %26 = getelementptr bfloat, ptr addrspace(1) %24, i64 %25, !dbg !16
  %27 = sext i32 %4 to i64, !dbg !17
  %28 = sext i32 %11 to i64, !dbg !17
  %29 = zext nneg i32 %16 to i64, !dbg !18
  %30 = zext nneg i32 %17 to i64, !dbg !18
  %31 = zext nneg i32 %20 to i64, !dbg !18
  %32 = zext nneg i32 %21 to i64, !dbg !18
  %33 = or disjoint i64 %29, %28, !dbg !18
  %34 = or disjoint i64 %30, %28, !dbg !18
  %35 = or disjoint i64 %31, %28, !dbg !18
  %36 = or disjoint i64 %32, %28, !dbg !18
  %37 = shl nsw i64 %35, 5, !dbg !18
  %38 = shl nsw i64 %36, 5, !dbg !18
  %39 = getelementptr bfloat, ptr addrspace(1) %26, i64 %37, !dbg !18
  %40 = getelementptr bfloat, ptr addrspace(1) %26, i64 %38, !dbg !18
  %41 = icmp sgt i32 %11, -1, !dbg !18
  %42 = icmp slt i64 %35, %27, !dbg !18
  %43 = icmp slt i64 %36, %27, !dbg !18
  %44 = and i1 %41, %42, !dbg !18
  %45 = and i1 %41, %43, !dbg !18
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 %44) #2, !dbg !18
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %45) #2, !dbg !18
  %48 = or disjoint i32 %22, %10, !dbg !19
  %49 = shl i32 %48, 7, !dbg !20
  %50 = sext i32 %49 to i64, !dbg !21
  %51 = getelementptr bfloat, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = shl nuw nsw i32 %12, 3, !dbg !22
  %53 = and i32 %52, 24, !dbg !22
  %54 = zext nneg i32 %53 to i64, !dbg !22
  %55 = icmp slt i64 %33, %27, !dbg !22
  %56 = icmp slt i64 %34, %27, !dbg !22
  %57 = and i1 %41, %55, !dbg !22
  %58 = and i1 %41, %56, !dbg !22
  %.idx91 = shl nsw i64 %33, 13, !dbg !22
  %59 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx91, !dbg !22
  %60 = getelementptr bfloat, ptr addrspace(1) %59, i64 %54, !dbg !22
  %.idx92 = shl nsw i64 %34, 13, !dbg !22
  %61 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx92, !dbg !22
  %62 = getelementptr bfloat, ptr addrspace(1) %61, i64 %54, !dbg !22
  %63 = and i32 %52, 56, !dbg !22
  %64 = and i32 %12, 24, !dbg !22
  %65 = mul nuw nsw i32 %64, 9, !dbg !22
  %66 = xor i32 %65, %63, !dbg !22
  %67 = and i32 %52, 768, !dbg !22
  %68 = or disjoint i32 %67, %66, !dbg !22
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !22
  %70 = or disjoint i32 %63, 1024, !dbg !22
  %71 = xor i32 %65, %70, !dbg !22
  %72 = or disjoint i32 %67, %71, !dbg !22
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %72, !dbg !22
  %74 = select i1 %57, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %69, ptr addrspace(1) %60, i32 %74) #2, !dbg !22
  %75 = select i1 %58, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %62, i32 %75) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br label %76, !dbg !23

76:                                               ; preds = %6, %76
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %76 ]
  %77 = phi i32 [ -1, %6 ], [ %113, %76 ]
  %78 = phi i32 [ 0, %6 ], [ %227, %76 ]
  %79 = phi float [ 0.000000e+00, %6 ], [ %193, %76 ]
  %80 = phi float [ 0.000000e+00, %6 ], [ %194, %76 ]
  %81 = phi float [ 0.000000e+00, %6 ], [ %195, %76 ]
  %82 = phi float [ 0.000000e+00, %6 ], [ %196, %76 ]
  %83 = phi float [ 0.000000e+00, %6 ], [ %197, %76 ]
  %84 = phi float [ 0.000000e+00, %6 ], [ %198, %76 ]
  %85 = phi float [ 0.000000e+00, %6 ], [ %199, %76 ]
  %86 = phi float [ 0.000000e+00, %6 ], [ %200, %76 ]
  %87 = phi float [ 0.000000e+00, %6 ], [ %201, %76 ]
  %88 = phi float [ 0.000000e+00, %6 ], [ %202, %76 ]
  %89 = phi float [ 0.000000e+00, %6 ], [ %203, %76 ]
  %90 = phi float [ 0.000000e+00, %6 ], [ %204, %76 ]
  %91 = phi float [ 0.000000e+00, %6 ], [ %205, %76 ]
  %92 = phi float [ 0.000000e+00, %6 ], [ %206, %76 ]
  %93 = phi float [ 0.000000e+00, %6 ], [ %207, %76 ]
  %94 = phi float [ 0.000000e+00, %6 ], [ %208, %76 ]
  %95 = phi float [ 0.000000e+00, %6 ], [ %209, %76 ]
  %96 = phi float [ 0.000000e+00, %6 ], [ %210, %76 ]
  %97 = phi float [ 0.000000e+00, %6 ], [ %211, %76 ]
  %98 = phi float [ 0.000000e+00, %6 ], [ %212, %76 ]
  %99 = phi float [ 0.000000e+00, %6 ], [ %213, %76 ]
  %100 = phi float [ 0.000000e+00, %6 ], [ %214, %76 ]
  %101 = phi float [ 0.000000e+00, %6 ], [ %215, %76 ]
  %102 = phi float [ 0.000000e+00, %6 ], [ %216, %76 ]
  %103 = phi float [ 0.000000e+00, %6 ], [ %217, %76 ]
  %104 = phi float [ 0.000000e+00, %6 ], [ %218, %76 ]
  %105 = phi float [ 0.000000e+00, %6 ], [ %219, %76 ]
  %106 = phi float [ 0.000000e+00, %6 ], [ %220, %76 ]
  %107 = phi float [ 0.000000e+00, %6 ], [ %221, %76 ]
  %108 = phi float [ 0.000000e+00, %6 ], [ %222, %76 ]
  %109 = phi float [ 0.000000e+00, %6 ], [ %223, %76 ]
  %110 = phi float [ 0.000000e+00, %6 ], [ %224, %76 ]
  %111 = add i32 %77, 1, !dbg !23
  %112 = icmp sgt i32 %111, 1, !dbg !23
  %113 = select i1 %112, i32 0, i32 %111, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx89 = shl i32 %113, 12, !dbg !22
  %114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx89, !dbg !22
  %115 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %116 = ptrtoint ptr addrspace(3) %114 to i32, !dbg !24
  %117 = lshr exact i32 %116, 4, !dbg !24
  %118 = and i32 %117, 16383, !dbg !24
  %119 = zext nneg i32 %118 to i64, !dbg !24
  %120 = or disjoint i64 %119, -9223371899399045120, !dbg !24
  %121 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, i64 %120, i64 %120, i1 true) #2, !dbg !24
  %122 = add i32 %116, 32, !dbg !24
  %123 = lshr exact i32 %122, 4, !dbg !24
  %124 = and i32 %123, 16383, !dbg !24
  %125 = zext nneg i32 %124 to i64, !dbg !24
  %126 = or disjoint i64 %125, -9223371899399045120, !dbg !24
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 0, !dbg !24
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 1, !dbg !24
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 2, !dbg !24
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 3, !dbg !24
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 4, !dbg !24
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 5, !dbg !24
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 6, !dbg !24
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 7, !dbg !24
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 8, !dbg !24
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 9, !dbg !24
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 10, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 11, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 12, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 13, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 14, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 15, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 16, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 17, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 18, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 19, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 20, !dbg !24
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 21, !dbg !24
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 22, !dbg !24
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 23, !dbg !24
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 24, !dbg !24
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 25, !dbg !24
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 26, !dbg !24
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 27, !dbg !24
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 28, !dbg !24
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 29, !dbg !24
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 30, !dbg !24
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 31, !dbg !24
  %159 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, i64 %126, i64 %126, i1 true) #2, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 0, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 1, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 2, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 3, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 4, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 5, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 6, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 7, !dbg !24
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 8, !dbg !24
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 9, !dbg !24
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 10, !dbg !24
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 11, !dbg !24
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 12, !dbg !24
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 13, !dbg !24
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 14, !dbg !24
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 15, !dbg !24
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 16, !dbg !24
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 17, !dbg !24
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 18, !dbg !24
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 19, !dbg !24
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 20, !dbg !24
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 21, !dbg !24
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 22, !dbg !24
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 23, !dbg !24
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 24, !dbg !24
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 25, !dbg !24
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 26, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 27, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 28, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 29, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 30, !dbg !24
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 31, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %192 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"(float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, ptr addrspace(3) %114, i32 0, i32 0, ptr addrspace(3) %114, i32 0, i32 0) #2, !dbg !24
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 0, !dbg !24
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 1, !dbg !24
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 2, !dbg !24
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 3, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 4, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 5, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 6, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 7, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 8, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 9, !dbg !24
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 10, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 11, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 12, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 13, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 14, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 15, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 16, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 17, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 18, !dbg !24
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 19, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 20, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 21, !dbg !24
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 22, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 23, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 24, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 25, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 26, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 27, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 28, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 29, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 30, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %192, 31, !dbg !24
  %225 = add i32 %78, 1, !dbg !23
  %226 = icmp sgt i32 %225, 1, !dbg !23
  %227 = select i1 %226, i32 0, i32 %225, !dbg !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %228 = shl nuw nsw i64 %indvars.iv.next, 5, !dbg !25
  %229 = or disjoint i64 %228, %54, !dbg !22
  %230 = getelementptr bfloat, ptr addrspace(1) %59, i64 %229, !dbg !22
  %231 = getelementptr bfloat, ptr addrspace(1) %61, i64 %229, !dbg !22
  %232 = icmp ne i64 %indvars.iv, 3, !dbg !22
  %233 = and i1 %57, %232, !dbg !22
  %234 = and i1 %58, %232, !dbg !22
  %.idx90 = shl i32 %227, 12, !dbg !22
  %235 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx90, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %236 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %235, i32 %68, !dbg !22
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %235, i32 %72, !dbg !22
  %238 = select i1 %233, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %236, ptr addrspace(1) %230, i32 %238) #2, !dbg !22
  %239 = select i1 %234, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %237, ptr addrspace(1) %231, i32 %239) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !23
  br i1 %exitcond.not, label %240, label %76, !dbg !23

240:                                              ; preds = %76
  %241 = bitcast i16 %47 to bfloat, !dbg !18
  %242 = bitcast i16 %46 to bfloat, !dbg !18
  %243 = shl nuw nsw i32 %12, 1, !dbg !13
  %244 = and i32 %243, 6, !dbg !13
  %245 = or disjoint i32 %244, 57, !dbg !13
  %246 = zext nneg i32 %245 to i64, !dbg !18
  %247 = or disjoint i64 %246, %28, !dbg !18
  %248 = icmp slt i64 %247, %27, !dbg !18
  %249 = and i1 %41, %248, !dbg !18
  %250 = or disjoint i32 %244, 56, !dbg !13
  %251 = zext nneg i32 %250 to i64, !dbg !18
  %252 = or disjoint i64 %251, %28, !dbg !18
  %253 = icmp slt i64 %252, %27, !dbg !18
  %254 = and i1 %41, %253, !dbg !18
  %255 = or disjoint i32 %244, 1, !dbg !13
  %256 = lshr i32 %12, 4, !dbg !13
  %257 = and i32 %256, 7, !dbg !13
  %258 = or disjoint i32 %257, 8, !dbg !13
  %259 = shl nuw nsw i32 %12, 2, !dbg !13
  %260 = and i32 %259, 60, !dbg !13
  %261 = zext nneg i32 %260 to i64, !dbg !18
  %262 = or disjoint i32 %245, %11, !dbg !26
  %263 = icmp slt i32 %262, %4, !dbg !27
  %264 = or disjoint i32 %250, %11, !dbg !26
  %265 = icmp slt i32 %264, %4, !dbg !27
  %266 = insertelement <8 x i32> poison, i32 %244, i64 0, !dbg !13
  %267 = shufflevector <8 x i32> %266, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %268 = or disjoint <8 x i32> %267, <i32 24, i32 25, i32 32, i32 33, i32 40, i32 41, i32 48, i32 49>, !dbg !13
  %269 = extractelement <8 x i32> %268, i64 7, !dbg !28
  %270 = zext nneg i32 %269 to i64, !dbg !18
  %271 = or disjoint i64 %270, %28, !dbg !18
  %272 = icmp slt i64 %271, %27, !dbg !18
  %273 = and i1 %41, %272, !dbg !18
  %274 = extractelement <8 x i32> %268, i64 6, !dbg !28
  %275 = zext nneg i32 %274 to i64, !dbg !18
  %276 = or disjoint i64 %275, %28, !dbg !18
  %277 = icmp slt i64 %276, %27, !dbg !18
  %278 = and i1 %41, %277, !dbg !18
  %279 = extractelement <8 x i32> %268, i64 5, !dbg !28
  %280 = zext nneg i32 %279 to i64, !dbg !18
  %281 = or disjoint i64 %280, %28, !dbg !18
  %282 = icmp slt i64 %281, %27, !dbg !18
  %283 = and i1 %41, %282, !dbg !18
  %284 = extractelement <8 x i32> %268, i64 4, !dbg !28
  %285 = zext nneg i32 %284 to i64, !dbg !18
  %286 = or disjoint i64 %285, %28, !dbg !18
  %287 = icmp slt i64 %286, %27, !dbg !18
  %288 = and i1 %41, %287, !dbg !18
  %289 = extractelement <8 x i32> %268, i64 3, !dbg !28
  %290 = zext nneg i32 %289 to i64, !dbg !18
  %291 = or disjoint i64 %290, %28, !dbg !18
  %292 = icmp slt i64 %291, %27, !dbg !18
  %293 = and i1 %41, %292, !dbg !18
  %294 = extractelement <8 x i32> %268, i64 2, !dbg !28
  %295 = zext nneg i32 %294 to i64, !dbg !18
  %296 = or disjoint i64 %295, %28, !dbg !18
  %297 = icmp slt i64 %296, %27, !dbg !18
  %298 = and i1 %41, %297, !dbg !18
  %299 = extractelement <8 x i32> %268, i64 1, !dbg !28
  %300 = extractelement <8 x i32> %268, i64 0, !dbg !28
  %301 = insertelement <4 x i32> poison, i32 %244, i64 0, !dbg !13
  %302 = shufflevector <4 x i32> %301, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %303 = or disjoint <4 x i32> %302, <i32 8, i32 9, i32 16, i32 17>, !dbg !13
  %304 = extractelement <4 x i32> %303, i64 3, !dbg !28
  %305 = extractelement <4 x i32> %303, i64 2, !dbg !28
  %306 = extractelement <4 x i32> %303, i64 1, !dbg !28
  %307 = extractelement <4 x i32> %303, i64 0, !dbg !28
  %308 = insertelement <16 x i32> poison, i32 %20, i64 0, !dbg !26
  %309 = insertelement <16 x i32> %308, i32 %21, i64 1, !dbg !26
  %310 = insertelement <16 x i32> %309, i32 %244, i64 2, !dbg !26
  %311 = insertelement <16 x i32> %310, i32 %255, i64 3, !dbg !26
  %312 = shufflevector <8 x i32> %268, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %313 = shufflevector <16 x i32> %311, <16 x i32> %312, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !26
  %314 = shufflevector <4 x i32> %303, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %315 = shufflevector <16 x i32> %313, <16 x i32> %314, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !26
  %316 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !26
  %317 = shufflevector <16 x i32> %316, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %318 = or disjoint <16 x i32> %315, %317, !dbg !26
  %319 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !27
  %320 = shufflevector <16 x i32> %319, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !27
  %321 = icmp slt <16 x i32> %318, %320, !dbg !27
  %322 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !29
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %25, !dbg !30
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %37, !dbg !31
  %326 = getelementptr float, ptr addrspace(1) %324, i64 %38, !dbg !31
  %.idx11 = shl nsw i64 %296, 7, !dbg !31
  %327 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx11, !dbg !31
  %.idx12 = shl nsw i64 %291, 7, !dbg !31
  %328 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx12, !dbg !31
  %.idx13 = shl nsw i64 %286, 7, !dbg !31
  %329 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx13, !dbg !31
  %.idx14 = shl nsw i64 %281, 7, !dbg !31
  %330 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx14, !dbg !31
  %.idx15 = shl nsw i64 %276, 7, !dbg !31
  %331 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx15, !dbg !31
  %.idx16 = shl nsw i64 %271, 7, !dbg !31
  %332 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx16, !dbg !31
  %.idx17 = shl nsw i64 %252, 7, !dbg !31
  %333 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx17, !dbg !31
  %.idx18 = shl nsw i64 %247, 7, !dbg !31
  %334 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx18, !dbg !31
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %44) #2, !dbg !31
  %336 = bitcast i32 %335 to float, !dbg !31
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %45) #2, !dbg !31
  %338 = bitcast i32 %337 to float, !dbg !31
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 0, !dbg !32
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 1, !dbg !32
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 2, !dbg !32
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 3, !dbg !32
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 4, !dbg !32
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 5, !dbg !32
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 6, !dbg !32
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 7, !dbg !32
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 8, !dbg !32
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 9, !dbg !32
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 10, !dbg !32
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 11, !dbg !32
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 12, !dbg !32
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 13, !dbg !32
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 14, !dbg !32
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 15, !dbg !32
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 16, !dbg !32
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 17, !dbg !32
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 18, !dbg !32
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 19, !dbg !32
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 20, !dbg !32
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 21, !dbg !32
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 22, !dbg !32
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 23, !dbg !32
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 24, !dbg !32
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 25, !dbg !32
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 26, !dbg !32
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 27, !dbg !32
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 30, !dbg !32
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 31, !dbg !32
  %369 = fpext bfloat %242 to float, !dbg !33
  %370 = fpext bfloat %241 to float, !dbg !33
  %371 = icmp samesign ugt i32 %20, %244, !dbg !28
  %372 = icmp samesign ugt i32 %20, %255, !dbg !28
  %373 = icmp samesign ugt i32 %20, %307, !dbg !28
  %374 = icmp samesign ugt i32 %20, %306, !dbg !28
  %375 = icmp samesign ugt i32 %21, %306, !dbg !28
  %376 = icmp samesign ugt i32 %20, %305, !dbg !28
  %377 = icmp samesign ugt i32 %20, %304, !dbg !28
  %378 = icmp samesign ugt i32 %21, %305, !dbg !28
  %379 = icmp samesign ugt i32 %21, %304, !dbg !28
  %380 = icmp samesign ugt i32 %20, %300, !dbg !28
  %381 = icmp samesign ugt i32 %20, %299, !dbg !28
  %382 = icmp samesign ugt i32 %21, %300, !dbg !28
  %383 = icmp samesign ugt i32 %21, %299, !dbg !28
  %384 = icmp samesign ugt i32 %20, %294, !dbg !28
  %385 = icmp samesign ugt i32 %20, %289, !dbg !28
  %386 = icmp samesign ugt i32 %21, %294, !dbg !28
  %387 = icmp samesign ugt i32 %21, %289, !dbg !28
  %388 = icmp samesign ugt i32 %20, %284, !dbg !28
  %389 = icmp samesign ugt i32 %20, %279, !dbg !28
  %390 = icmp samesign ugt i32 %21, %284, !dbg !28
  %391 = icmp samesign ugt i32 %21, %279, !dbg !28
  %392 = icmp samesign ugt i32 %20, %274, !dbg !28
  %393 = icmp samesign ugt i32 %20, %269, !dbg !28
  %394 = icmp samesign ugt i32 %21, %274, !dbg !28
  %395 = icmp samesign ugt i32 %21, %269, !dbg !28
  %396 = icmp samesign ugt i32 %21, %250, !dbg !28
  %397 = icmp samesign ugt i32 %21, %245, !dbg !28
  %398 = extractelement <16 x i1> %321, i64 1, !dbg !34
  %399 = extractelement <16 x i1> %321, i64 2, !dbg !34
  %400 = and i1 %398, %399, !dbg !35
  %401 = extractelement <16 x i1> %321, i64 3, !dbg !34
  %402 = and i1 %398, %401, !dbg !35
  %403 = and i1 %371, %399, !dbg !34
  %404 = extractelement <16 x i1> %321, i64 0, !dbg !34
  %405 = and i1 %404, %403, !dbg !34
  %406 = and i1 %372, %401, !dbg !34
  %407 = and i1 %404, %406, !dbg !34
  %408 = extractelement <16 x i1> %321, i64 4, !dbg !34
  %409 = and i1 %373, %408, !dbg !34
  %410 = and i1 %404, %409, !dbg !34
  %411 = extractelement <16 x i1> %321, i64 5, !dbg !34
  %412 = and i1 %374, %411, !dbg !34
  %413 = and i1 %404, %412, !dbg !34
  %414 = and i1 %371, %408, !dbg !34
  %415 = and i1 %398, %414, !dbg !34
  %416 = and i1 %375, %411, !dbg !34
  %417 = and i1 %398, %416, !dbg !34
  %418 = extractelement <16 x i1> %321, i64 6, !dbg !34
  %419 = and i1 %376, %418, !dbg !34
  %420 = and i1 %404, %419, !dbg !34
  %421 = extractelement <16 x i1> %321, i64 7, !dbg !34
  %422 = and i1 %377, %421, !dbg !34
  %423 = and i1 %404, %422, !dbg !34
  %424 = and i1 %378, %418, !dbg !34
  %425 = and i1 %398, %424, !dbg !34
  %426 = and i1 %379, %421, !dbg !34
  %427 = and i1 %398, %426, !dbg !34
  %428 = extractelement <16 x i1> %321, i64 8, !dbg !34
  %429 = and i1 %380, %428, !dbg !34
  %430 = and i1 %404, %429, !dbg !34
  %431 = extractelement <16 x i1> %321, i64 9, !dbg !34
  %432 = and i1 %381, %431, !dbg !34
  %433 = and i1 %404, %432, !dbg !34
  %434 = and i1 %382, %428, !dbg !34
  %435 = and i1 %398, %434, !dbg !34
  %436 = and i1 %383, %431, !dbg !34
  %437 = and i1 %398, %436, !dbg !34
  %438 = extractelement <16 x i1> %321, i64 10, !dbg !34
  %439 = and i1 %384, %438, !dbg !34
  %440 = and i1 %404, %439, !dbg !34
  %441 = extractelement <16 x i1> %321, i64 11, !dbg !34
  %442 = and i1 %385, %441, !dbg !34
  %443 = and i1 %404, %442, !dbg !34
  %444 = and i1 %386, %438, !dbg !34
  %445 = and i1 %398, %444, !dbg !34
  %446 = and i1 %387, %441, !dbg !34
  %447 = and i1 %398, %446, !dbg !34
  %448 = extractelement <16 x i1> %321, i64 12, !dbg !34
  %449 = and i1 %388, %448, !dbg !34
  %450 = and i1 %404, %449, !dbg !34
  %451 = extractelement <16 x i1> %321, i64 13, !dbg !34
  %452 = and i1 %389, %451, !dbg !34
  %453 = and i1 %404, %452, !dbg !34
  %454 = and i1 %390, %448, !dbg !34
  %455 = and i1 %398, %454, !dbg !34
  %456 = and i1 %391, %451, !dbg !34
  %457 = and i1 %398, %456, !dbg !34
  %458 = extractelement <16 x i1> %321, i64 14, !dbg !34
  %459 = and i1 %392, %458, !dbg !34
  %460 = and i1 %404, %459, !dbg !34
  %461 = extractelement <16 x i1> %321, i64 15, !dbg !34
  %462 = and i1 %393, %461, !dbg !34
  %463 = and i1 %404, %462, !dbg !34
  %464 = and i1 %394, %458, !dbg !34
  %465 = and i1 %398, %464, !dbg !34
  %466 = and i1 %395, %461, !dbg !34
  %467 = and i1 %398, %466, !dbg !34
  %468 = and i1 %396, %265, !dbg !34
  %469 = and i1 %398, %468, !dbg !34
  %470 = and i1 %397, %263, !dbg !34
  %471 = and i1 %398, %470, !dbg !34
  %472 = shl i32 %48, 6, !dbg !36
  %473 = sext i32 %472 to i64, !dbg !37
  %474 = getelementptr float, ptr addrspace(1) %3, i64 %473, !dbg !37
  %475 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !13
  %476 = insertelement <4 x i32> %475, i32 %257, i64 1, !dbg !13
  %477 = shufflevector <4 x i32> %476, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>, !dbg !13
  %478 = or <4 x i32> %477, <i32 56, i32 48, i32 40, i32 32>, !dbg !13
  %479 = insertelement <2 x i32> poison, i32 %257, i64 0, !dbg !13
  %480 = shufflevector <2 x i32> %479, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %481 = or disjoint <2 x i32> %480, <i32 24, i32 16>, !dbg !13
  %482 = shufflevector <4 x i32> %303, <4 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %483 = shufflevector <8 x i32> %482, <8 x i32> %268, <4 x i32> <i32 2, i32 3, i32 8, i32 9>, !dbg !18
  %484 = shufflevector <4 x i32> %303, <4 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %485 = insertelement <16 x i32> %484, i32 %258, i64 6, !dbg !18
  %486 = insertelement <16 x i32> %485, i32 %257, i64 7, !dbg !18
  %487 = insertelement <16 x i32> %486, i32 %244, i64 8, !dbg !18
  %488 = insertelement <16 x i32> %487, i32 %255, i64 9, !dbg !18
  %489 = shufflevector <4 x i32> %478, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %490 = shufflevector <16 x i32> %489, <16 x i32> %488, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %491 = shufflevector <4 x i32> %483, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %492 = shufflevector <16 x i32> %490, <16 x i32> %491, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !18
  %493 = shufflevector <2 x i32> %481, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %494 = shufflevector <16 x i32> %492, <16 x i32> %493, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !18
  %495 = or disjoint <16 x i32> %494, %317, !dbg !18
  %496 = icmp slt <16 x i32> %495, %320, !dbg !38
  %497 = extractelement <16 x i1> %496, i64 9, !dbg !18
  %498 = and i1 %41, %497, !dbg !18
  %499 = extractelement <16 x i1> %496, i64 8, !dbg !18
  %500 = and i1 %41, %499, !dbg !18
  %501 = extractelement <16 x i1> %496, i64 15, !dbg !18
  %502 = and i1 %41, %501, !dbg !18
  %503 = extractelement <16 x i1> %496, i64 14, !dbg !18
  %504 = and i1 %41, %503, !dbg !18
  %505 = extractelement <16 x i1> %496, i64 13, !dbg !18
  %506 = and i1 %41, %505, !dbg !18
  %507 = extractelement <16 x i1> %496, i64 12, !dbg !18
  %508 = and i1 %41, %507, !dbg !18
  %509 = extractelement <16 x i1> %496, i64 11, !dbg !18
  %510 = and i1 %41, %509, !dbg !18
  %511 = extractelement <16 x i1> %496, i64 10, !dbg !18
  %512 = and i1 %41, %511, !dbg !18
  %513 = extractelement <16 x i32> %495, i64 8, !dbg !31
  %514 = sext i32 %513 to i64, !dbg !31
  %.idx = shl nsw i64 %514, 7, !dbg !31
  %515 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx, !dbg !31
  %516 = extractelement <16 x i32> %495, i64 9, !dbg !31
  %517 = sext i32 %516 to i64, !dbg !31
  %.idx4 = shl nsw i64 %517, 7, !dbg !31
  %518 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx4, !dbg !31
  %519 = extractelement <16 x i32> %495, i64 10, !dbg !31
  %520 = sext i32 %519 to i64, !dbg !31
  %.idx5 = shl nsw i64 %520, 7, !dbg !31
  %521 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx5, !dbg !31
  %522 = extractelement <16 x i32> %495, i64 11, !dbg !31
  %523 = sext i32 %522 to i64, !dbg !31
  %.idx6 = shl nsw i64 %523, 7, !dbg !31
  %524 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx6, !dbg !31
  %525 = extractelement <16 x i32> %495, i64 12, !dbg !31
  %526 = sext i32 %525 to i64, !dbg !31
  %.idx7 = shl nsw i64 %526, 7, !dbg !31
  %527 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx7, !dbg !31
  %528 = extractelement <16 x i32> %495, i64 13, !dbg !31
  %529 = sext i32 %528 to i64, !dbg !31
  %.idx8 = shl nsw i64 %529, 7, !dbg !31
  %530 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx8, !dbg !31
  %531 = extractelement <16 x i32> %495, i64 14, !dbg !31
  %532 = sext i32 %531 to i64, !dbg !31
  %.idx9 = shl nsw i64 %532, 7, !dbg !31
  %533 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx9, !dbg !31
  %534 = extractelement <16 x i32> %495, i64 15, !dbg !31
  %535 = sext i32 %534 to i64, !dbg !31
  %.idx10 = shl nsw i64 %535, 7, !dbg !31
  %536 = getelementptr i8, ptr addrspace(1) %324, i64 %.idx10, !dbg !31
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %515, i1 %500) #2, !dbg !31
  %538 = bitcast i32 %537 to float, !dbg !31
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %518, i1 %498) #2, !dbg !31
  %540 = bitcast i32 %539 to float, !dbg !31
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %521, i1 %512) #2, !dbg !31
  %542 = bitcast i32 %541 to float, !dbg !31
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %524, i1 %510) #2, !dbg !31
  %544 = bitcast i32 %543 to float, !dbg !31
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %527, i1 %508) #2, !dbg !31
  %546 = bitcast i32 %545 to float, !dbg !31
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %530, i1 %506) #2, !dbg !31
  %548 = bitcast i32 %547 to float, !dbg !31
  %549 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %533, i1 %504) #2, !dbg !31
  %550 = bitcast i32 %549 to float, !dbg !31
  %551 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %536, i1 %502) #2, !dbg !31
  %552 = bitcast i32 %551 to float, !dbg !31
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %298) #2, !dbg !31
  %554 = bitcast i32 %553 to float, !dbg !31
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %293) #2, !dbg !31
  %556 = bitcast i32 %555 to float, !dbg !31
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %288) #2, !dbg !31
  %558 = bitcast i32 %557 to float, !dbg !31
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %283) #2, !dbg !31
  %560 = bitcast i32 %559 to float, !dbg !31
  %561 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %278) #2, !dbg !31
  %562 = bitcast i32 %561 to float, !dbg !31
  %563 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %273) #2, !dbg !31
  %564 = bitcast i32 %563 to float, !dbg !31
  %565 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %254) #2, !dbg !31
  %566 = bitcast i32 %565 to float, !dbg !31
  %567 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %249) #2, !dbg !31
  %568 = bitcast i32 %567 to float, !dbg !31
  %569 = fsub float %336, %538, !dbg !39
  %570 = fsub float %336, %540, !dbg !39
  %571 = fsub float %338, %538, !dbg !39
  %572 = fsub float %338, %540, !dbg !39
  %573 = fsub float %336, %542, !dbg !39
  %574 = fsub float %336, %544, !dbg !39
  %575 = fsub float %338, %542, !dbg !39
  %576 = fsub float %338, %544, !dbg !39
  %577 = fsub float %336, %546, !dbg !39
  %578 = fsub float %336, %548, !dbg !39
  %579 = fsub float %338, %546, !dbg !39
  %580 = fsub float %338, %548, !dbg !39
  %581 = fsub float %336, %550, !dbg !39
  %582 = fsub float %336, %552, !dbg !39
  %583 = fsub float %338, %550, !dbg !39
  %584 = fsub float %338, %552, !dbg !39
  %585 = fsub float %336, %554, !dbg !39
  %586 = fsub float %336, %556, !dbg !39
  %587 = fsub float %338, %554, !dbg !39
  %588 = fsub float %338, %556, !dbg !39
  %589 = fsub float %336, %558, !dbg !39
  %590 = fsub float %336, %560, !dbg !39
  %591 = fsub float %338, %558, !dbg !39
  %592 = fsub float %338, %560, !dbg !39
  %593 = fsub float %336, %562, !dbg !39
  %594 = fsub float %336, %564, !dbg !39
  %595 = fsub float %338, %562, !dbg !39
  %596 = fsub float %338, %564, !dbg !39
  %597 = fsub float %338, %566, !dbg !39
  %598 = fsub float %338, %568, !dbg !39
  %599 = fmul float %569, 0x3FF7154760000000, !dbg !40
  %600 = tail call float @llvm.nvvm.ex2.approx.f(float %599), !dbg !40
  %601 = fmul float %570, 0x3FF7154760000000, !dbg !40
  %602 = tail call float @llvm.nvvm.ex2.approx.f(float %601), !dbg !40
  %603 = fmul float %571, 0x3FF7154760000000, !dbg !40
  %604 = tail call float @llvm.nvvm.ex2.approx.f(float %603), !dbg !40
  %605 = fmul float %572, 0x3FF7154760000000, !dbg !40
  %606 = tail call float @llvm.nvvm.ex2.approx.f(float %605), !dbg !40
  %607 = fmul float %573, 0x3FF7154760000000, !dbg !40
  %608 = tail call float @llvm.nvvm.ex2.approx.f(float %607), !dbg !40
  %609 = fmul float %574, 0x3FF7154760000000, !dbg !40
  %610 = tail call float @llvm.nvvm.ex2.approx.f(float %609), !dbg !40
  %611 = fmul float %575, 0x3FF7154760000000, !dbg !40
  %612 = tail call float @llvm.nvvm.ex2.approx.f(float %611), !dbg !40
  %613 = fmul float %576, 0x3FF7154760000000, !dbg !40
  %614 = tail call float @llvm.nvvm.ex2.approx.f(float %613), !dbg !40
  %615 = fmul float %577, 0x3FF7154760000000, !dbg !40
  %616 = tail call float @llvm.nvvm.ex2.approx.f(float %615), !dbg !40
  %617 = fmul float %578, 0x3FF7154760000000, !dbg !40
  %618 = tail call float @llvm.nvvm.ex2.approx.f(float %617), !dbg !40
  %619 = fmul float %579, 0x3FF7154760000000, !dbg !40
  %620 = tail call float @llvm.nvvm.ex2.approx.f(float %619), !dbg !40
  %621 = fmul float %580, 0x3FF7154760000000, !dbg !40
  %622 = tail call float @llvm.nvvm.ex2.approx.f(float %621), !dbg !40
  %623 = fmul float %581, 0x3FF7154760000000, !dbg !40
  %624 = tail call float @llvm.nvvm.ex2.approx.f(float %623), !dbg !40
  %625 = fmul float %582, 0x3FF7154760000000, !dbg !40
  %626 = tail call float @llvm.nvvm.ex2.approx.f(float %625), !dbg !40
  %627 = fmul float %583, 0x3FF7154760000000, !dbg !40
  %628 = tail call float @llvm.nvvm.ex2.approx.f(float %627), !dbg !40
  %629 = fmul float %584, 0x3FF7154760000000, !dbg !40
  %630 = tail call float @llvm.nvvm.ex2.approx.f(float %629), !dbg !40
  %631 = fmul float %585, 0x3FF7154760000000, !dbg !40
  %632 = tail call float @llvm.nvvm.ex2.approx.f(float %631), !dbg !40
  %633 = fmul float %586, 0x3FF7154760000000, !dbg !40
  %634 = tail call float @llvm.nvvm.ex2.approx.f(float %633), !dbg !40
  %635 = fmul float %587, 0x3FF7154760000000, !dbg !40
  %636 = tail call float @llvm.nvvm.ex2.approx.f(float %635), !dbg !40
  %637 = fmul float %588, 0x3FF7154760000000, !dbg !40
  %638 = tail call float @llvm.nvvm.ex2.approx.f(float %637), !dbg !40
  %639 = fmul float %589, 0x3FF7154760000000, !dbg !40
  %640 = tail call float @llvm.nvvm.ex2.approx.f(float %639), !dbg !40
  %641 = fmul float %590, 0x3FF7154760000000, !dbg !40
  %642 = tail call float @llvm.nvvm.ex2.approx.f(float %641), !dbg !40
  %643 = fmul float %591, 0x3FF7154760000000, !dbg !40
  %644 = tail call float @llvm.nvvm.ex2.approx.f(float %643), !dbg !40
  %645 = fmul float %592, 0x3FF7154760000000, !dbg !40
  %646 = tail call float @llvm.nvvm.ex2.approx.f(float %645), !dbg !40
  %647 = fmul float %593, 0x3FF7154760000000, !dbg !40
  %648 = tail call float @llvm.nvvm.ex2.approx.f(float %647), !dbg !40
  %649 = fmul float %594, 0x3FF7154760000000, !dbg !40
  %650 = tail call float @llvm.nvvm.ex2.approx.f(float %649), !dbg !40
  %651 = fmul float %595, 0x3FF7154760000000, !dbg !40
  %652 = tail call float @llvm.nvvm.ex2.approx.f(float %651), !dbg !40
  %653 = fmul float %596, 0x3FF7154760000000, !dbg !40
  %654 = tail call float @llvm.nvvm.ex2.approx.f(float %653), !dbg !40
  %655 = fmul float %597, 0x3FF7154760000000, !dbg !40
  %656 = tail call float @llvm.nvvm.ex2.approx.f(float %655), !dbg !40
  %657 = fmul float %598, 0x3FF7154760000000, !dbg !40
  %658 = tail call float @llvm.nvvm.ex2.approx.f(float %657), !dbg !40
  %659 = fmul float %339, %600, !dbg !32
  %660 = fmul float %340, %602, !dbg !32
  %661 = fmul float %341, %604, !dbg !32
  %662 = fmul float %342, %606, !dbg !32
  %663 = fmul float %343, %608, !dbg !32
  %664 = fmul float %344, %610, !dbg !32
  %665 = fmul float %345, %612, !dbg !32
  %666 = fmul float %346, %614, !dbg !32
  %667 = fmul float %347, %616, !dbg !32
  %668 = fmul float %348, %618, !dbg !32
  %669 = fmul float %349, %620, !dbg !32
  %670 = fmul float %350, %622, !dbg !32
  %671 = fmul float %351, %624, !dbg !32
  %672 = fmul float %352, %626, !dbg !32
  %673 = fmul float %353, %628, !dbg !32
  %674 = fmul float %354, %630, !dbg !32
  %675 = fmul float %355, %632, !dbg !32
  %676 = fmul float %356, %634, !dbg !32
  %677 = fmul float %357, %636, !dbg !32
  %678 = fmul float %358, %638, !dbg !32
  %679 = fmul float %359, %640, !dbg !32
  %680 = fmul float %360, %642, !dbg !32
  %681 = fmul float %361, %644, !dbg !32
  %682 = fmul float %362, %646, !dbg !32
  %683 = fmul float %363, %648, !dbg !32
  %684 = fmul float %364, %650, !dbg !32
  %685 = fmul float %365, %652, !dbg !32
  %686 = fmul float %366, %654, !dbg !32
  %687 = fmul float %367, %656, !dbg !32
  %688 = fmul float %368, %658, !dbg !32
  %689 = fmul float %659, %369, !dbg !33
  %690 = fmul float %660, %369, !dbg !33
  %691 = fmul float %661, %370, !dbg !33
  %692 = fmul float %662, %370, !dbg !33
  %693 = fmul float %663, %369, !dbg !33
  %694 = fmul float %664, %369, !dbg !33
  %695 = fmul float %665, %370, !dbg !33
  %696 = fmul float %666, %370, !dbg !33
  %697 = fmul float %667, %369, !dbg !33
  %698 = fmul float %668, %369, !dbg !33
  %699 = fmul float %669, %370, !dbg !33
  %700 = fmul float %670, %370, !dbg !33
  %701 = fmul float %671, %369, !dbg !33
  %702 = fmul float %672, %369, !dbg !33
  %703 = fmul float %673, %370, !dbg !33
  %704 = fmul float %674, %370, !dbg !33
  %705 = fmul float %675, %369, !dbg !33
  %706 = fmul float %676, %369, !dbg !33
  %707 = fmul float %677, %370, !dbg !33
  %708 = fmul float %678, %370, !dbg !33
  %709 = fmul float %679, %369, !dbg !33
  %710 = fmul float %680, %369, !dbg !33
  %711 = fmul float %681, %370, !dbg !33
  %712 = fmul float %682, %370, !dbg !33
  %713 = fmul float %683, %369, !dbg !33
  %714 = fmul float %684, %369, !dbg !33
  %715 = fmul float %685, %370, !dbg !33
  %716 = fmul float %686, %370, !dbg !33
  %717 = fmul float %687, %370, !dbg !33
  %718 = fmul float %688, %370, !dbg !33
  %719 = extractelement <16 x i32> %495, i64 7, !dbg !38
  %720 = sext i32 %719 to i64, !dbg !38
  %.idx19 = shl nsw i64 %720, 13, !dbg !38
  %721 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx19, !dbg !38
  %722 = getelementptr float, ptr addrspace(1) %721, i64 %261, !dbg !38
  %723 = extractelement <16 x i32> %495, i64 6, !dbg !38
  %724 = sext i32 %723 to i64, !dbg !38
  %.idx20 = shl nsw i64 %724, 13, !dbg !38
  %725 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx20, !dbg !38
  %726 = getelementptr float, ptr addrspace(1) %725, i64 %261, !dbg !38
  %727 = extractelement <16 x i32> %495, i64 5, !dbg !38
  %728 = sext i32 %727 to i64, !dbg !38
  %.idx21 = shl nsw i64 %728, 13, !dbg !38
  %729 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx21, !dbg !38
  %730 = getelementptr float, ptr addrspace(1) %729, i64 %261, !dbg !38
  %731 = extractelement <16 x i32> %495, i64 4, !dbg !38
  %732 = sext i32 %731 to i64, !dbg !38
  %.idx22 = shl nsw i64 %732, 13, !dbg !38
  %733 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx22, !dbg !38
  %734 = getelementptr float, ptr addrspace(1) %733, i64 %261, !dbg !38
  %735 = extractelement <16 x i32> %495, i64 3, !dbg !38
  %736 = sext i32 %735 to i64, !dbg !38
  %.idx23 = shl nsw i64 %736, 13, !dbg !38
  %737 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx23, !dbg !38
  %738 = getelementptr float, ptr addrspace(1) %737, i64 %261, !dbg !38
  %739 = extractelement <16 x i32> %495, i64 2, !dbg !38
  %740 = sext i32 %739 to i64, !dbg !38
  %.idx24 = shl nsw i64 %740, 13, !dbg !38
  %741 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx24, !dbg !38
  %742 = getelementptr float, ptr addrspace(1) %741, i64 %261, !dbg !38
  %743 = extractelement <16 x i32> %495, i64 1, !dbg !38
  %744 = sext i32 %743 to i64, !dbg !38
  %.idx25 = shl nsw i64 %744, 13, !dbg !38
  %745 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx25, !dbg !38
  %746 = getelementptr float, ptr addrspace(1) %745, i64 %261, !dbg !38
  %747 = extractelement <16 x i32> %495, i64 0, !dbg !38
  %748 = sext i32 %747 to i64, !dbg !38
  %.idx26 = shl nsw i64 %748, 13, !dbg !38
  %749 = getelementptr i8, ptr addrspace(1) %474, i64 %.idx26, !dbg !38
  %750 = getelementptr float, ptr addrspace(1) %749, i64 %261, !dbg !38
  %751 = extractelement <16 x i1> %496, i64 7, !dbg !38
  %752 = and i1 %41, %751, !dbg !38
  %753 = extractelement <16 x i1> %496, i64 6, !dbg !38
  %754 = and i1 %41, %753, !dbg !38
  %755 = extractelement <16 x i1> %496, i64 5, !dbg !38
  %756 = and i1 %41, %755, !dbg !38
  %757 = extractelement <16 x i1> %496, i64 4, !dbg !38
  %758 = and i1 %41, %757, !dbg !38
  %759 = extractelement <16 x i1> %496, i64 3, !dbg !38
  %760 = and i1 %41, %759, !dbg !38
  %761 = extractelement <16 x i1> %496, i64 2, !dbg !38
  %762 = and i1 %41, %761, !dbg !38
  %763 = extractelement <16 x i1> %496, i64 1, !dbg !38
  %764 = and i1 %41, %763, !dbg !38
  %765 = extractelement <16 x i1> %496, i64 0, !dbg !38
  %766 = and i1 %41, %765, !dbg !38
  %767 = shl nuw nsw i32 %12, 4, !dbg !38
  %768 = and i32 %767, 448, !dbg !38
  %769 = shl nuw nsw i32 %12, 5, !dbg !38
  %770 = and i32 %769, 3072, !dbg !38
  %771 = or disjoint i32 %770, %768, !dbg !38
  %772 = or disjoint i32 %771, %244, !dbg !38
  %773 = and i32 %259, 508, !dbg !38
  %774 = lshr exact i32 %771, 2, !dbg !38
  %775 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %774, !dbg !38
  %776 = getelementptr inbounds nuw float, ptr addrspace(3) %775, i32 %772, !dbg !38
  %777 = bitcast float %689 to i32, !dbg !38
  %778 = select i1 %405, i32 %777, i32 0, !dbg !41
  %779 = bitcast float %690 to i32, !dbg !38
  %780 = select i1 %407, i32 %779, i32 0, !dbg !41
  %781 = insertelement <2 x i32> poison, i32 %778, i64 0, !dbg !38
  %782 = insertelement <2 x i32> %781, i32 %780, i64 1, !dbg !38
  store <2 x i32> %782, ptr addrspace(3) %776, align 8, !dbg !38
  %783 = or disjoint i32 %772, 512, !dbg !38
  %784 = lshr i32 %783, 4, !dbg !38
  %785 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %784, !dbg !38
  %786 = getelementptr inbounds nuw float, ptr addrspace(3) %785, i32 %783, !dbg !38
  %787 = bitcast float %691 to i32, !dbg !38
  %788 = select i1 %400, i32 %787, i32 0, !dbg !41
  %789 = bitcast float %692 to i32, !dbg !38
  %790 = select i1 %402, i32 %789, i32 0, !dbg !41
  %791 = insertelement <2 x i32> poison, i32 %788, i64 0, !dbg !38
  %792 = insertelement <2 x i32> %791, i32 %790, i64 1, !dbg !38
  store <2 x i32> %792, ptr addrspace(3) %786, align 8, !dbg !38
  %793 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 32, !dbg !38
  %794 = bitcast float %693 to i32, !dbg !38
  %795 = select i1 %410, i32 %794, i32 0, !dbg !41
  %796 = bitcast float %694 to i32, !dbg !38
  %797 = select i1 %413, i32 %796, i32 0, !dbg !41
  %798 = insertelement <2 x i32> poison, i32 %795, i64 0, !dbg !38
  %799 = insertelement <2 x i32> %798, i32 %797, i64 1, !dbg !38
  store <2 x i32> %799, ptr addrspace(3) %793, align 8, !dbg !38
  %800 = or disjoint i32 %772, 520, !dbg !38
  %801 = lshr i32 %800, 4, !dbg !38
  %802 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %801, !dbg !38
  %803 = getelementptr inbounds nuw float, ptr addrspace(3) %802, i32 %800, !dbg !38
  %804 = bitcast float %695 to i32, !dbg !38
  %805 = select i1 %415, i32 %804, i32 0, !dbg !41
  %806 = bitcast float %696 to i32, !dbg !38
  %807 = select i1 %417, i32 %806, i32 0, !dbg !41
  %808 = insertelement <2 x i32> poison, i32 %805, i64 0, !dbg !38
  %809 = insertelement <2 x i32> %808, i32 %807, i64 1, !dbg !38
  store <2 x i32> %809, ptr addrspace(3) %803, align 8, !dbg !38
  %810 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 64, !dbg !38
  %811 = bitcast float %697 to i32, !dbg !38
  %812 = select i1 %420, i32 %811, i32 0, !dbg !41
  %813 = bitcast float %698 to i32, !dbg !38
  %814 = select i1 %423, i32 %813, i32 0, !dbg !41
  %815 = insertelement <2 x i32> poison, i32 %812, i64 0, !dbg !38
  %816 = insertelement <2 x i32> %815, i32 %814, i64 1, !dbg !38
  store <2 x i32> %816, ptr addrspace(3) %810, align 8, !dbg !38
  %817 = or disjoint i32 %772, 528, !dbg !38
  %818 = lshr i32 %817, 4, !dbg !38
  %819 = and i32 %818, 252, !dbg !38
  %820 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %819, !dbg !38
  %821 = getelementptr inbounds nuw float, ptr addrspace(3) %820, i32 %817, !dbg !38
  %822 = bitcast float %699 to i32, !dbg !38
  %823 = select i1 %425, i32 %822, i32 0, !dbg !41
  %824 = bitcast float %700 to i32, !dbg !38
  %825 = select i1 %427, i32 %824, i32 0, !dbg !41
  %826 = insertelement <2 x i32> poison, i32 %823, i64 0, !dbg !38
  %827 = insertelement <2 x i32> %826, i32 %825, i64 1, !dbg !38
  store <2 x i32> %827, ptr addrspace(3) %821, align 8, !dbg !38
  %828 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 96, !dbg !38
  %829 = bitcast float %701 to i32, !dbg !38
  %830 = select i1 %430, i32 %829, i32 0, !dbg !41
  %831 = bitcast float %702 to i32, !dbg !38
  %832 = select i1 %433, i32 %831, i32 0, !dbg !41
  %833 = insertelement <2 x i32> poison, i32 %830, i64 0, !dbg !38
  %834 = insertelement <2 x i32> %833, i32 %832, i64 1, !dbg !38
  store <2 x i32> %834, ptr addrspace(3) %828, align 8, !dbg !38
  %835 = or disjoint i32 %772, 536, !dbg !38
  %836 = lshr i32 %835, 4, !dbg !38
  %837 = and i32 %836, 252, !dbg !38
  %838 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %837, !dbg !38
  %839 = getelementptr inbounds nuw float, ptr addrspace(3) %838, i32 %835, !dbg !38
  %840 = bitcast float %703 to i32, !dbg !38
  %841 = select i1 %435, i32 %840, i32 0, !dbg !41
  %842 = bitcast float %704 to i32, !dbg !38
  %843 = select i1 %437, i32 %842, i32 0, !dbg !41
  %844 = insertelement <2 x i32> poison, i32 %841, i64 0, !dbg !38
  %845 = insertelement <2 x i32> %844, i32 %843, i64 1, !dbg !38
  store <2 x i32> %845, ptr addrspace(3) %839, align 8, !dbg !38
  %846 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 128, !dbg !38
  %847 = bitcast float %705 to i32, !dbg !38
  %848 = select i1 %440, i32 %847, i32 0, !dbg !41
  %849 = bitcast float %706 to i32, !dbg !38
  %850 = select i1 %443, i32 %849, i32 0, !dbg !41
  %851 = insertelement <2 x i32> poison, i32 %848, i64 0, !dbg !38
  %852 = insertelement <2 x i32> %851, i32 %850, i64 1, !dbg !38
  store <2 x i32> %852, ptr addrspace(3) %846, align 8, !dbg !38
  %853 = or disjoint i32 %772, 544, !dbg !38
  %854 = lshr i32 %853, 4, !dbg !38
  %855 = and i32 %854, 252, !dbg !38
  %856 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %855, !dbg !38
  %857 = getelementptr inbounds nuw float, ptr addrspace(3) %856, i32 %853, !dbg !38
  %858 = bitcast float %707 to i32, !dbg !38
  %859 = select i1 %445, i32 %858, i32 0, !dbg !41
  %860 = bitcast float %708 to i32, !dbg !38
  %861 = select i1 %447, i32 %860, i32 0, !dbg !41
  %862 = insertelement <2 x i32> poison, i32 %859, i64 0, !dbg !38
  %863 = insertelement <2 x i32> %862, i32 %861, i64 1, !dbg !38
  store <2 x i32> %863, ptr addrspace(3) %857, align 8, !dbg !38
  %864 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 160, !dbg !38
  %865 = bitcast float %709 to i32, !dbg !38
  %866 = select i1 %450, i32 %865, i32 0, !dbg !41
  %867 = bitcast float %710 to i32, !dbg !38
  %868 = select i1 %453, i32 %867, i32 0, !dbg !41
  %869 = insertelement <2 x i32> poison, i32 %866, i64 0, !dbg !38
  %870 = insertelement <2 x i32> %869, i32 %868, i64 1, !dbg !38
  store <2 x i32> %870, ptr addrspace(3) %864, align 8, !dbg !38
  %871 = or disjoint i32 %772, 552, !dbg !38
  %872 = lshr i32 %871, 4, !dbg !38
  %873 = and i32 %872, 252, !dbg !38
  %874 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %873, !dbg !38
  %875 = getelementptr inbounds nuw float, ptr addrspace(3) %874, i32 %871, !dbg !38
  %876 = bitcast float %711 to i32, !dbg !38
  %877 = select i1 %455, i32 %876, i32 0, !dbg !41
  %878 = bitcast float %712 to i32, !dbg !38
  %879 = select i1 %457, i32 %878, i32 0, !dbg !41
  %880 = insertelement <2 x i32> poison, i32 %877, i64 0, !dbg !38
  %881 = insertelement <2 x i32> %880, i32 %879, i64 1, !dbg !38
  store <2 x i32> %881, ptr addrspace(3) %875, align 8, !dbg !38
  %882 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 192, !dbg !38
  %883 = bitcast float %713 to i32, !dbg !38
  %884 = select i1 %460, i32 %883, i32 0, !dbg !41
  %885 = bitcast float %714 to i32, !dbg !38
  %886 = select i1 %463, i32 %885, i32 0, !dbg !41
  %887 = insertelement <2 x i32> poison, i32 %884, i64 0, !dbg !38
  %888 = insertelement <2 x i32> %887, i32 %886, i64 1, !dbg !38
  store <2 x i32> %888, ptr addrspace(3) %882, align 8, !dbg !38
  %889 = or disjoint i32 %772, 560, !dbg !38
  %890 = lshr i32 %889, 4, !dbg !38
  %891 = and i32 %890, 252, !dbg !38
  %892 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %891, !dbg !38
  %893 = getelementptr inbounds nuw float, ptr addrspace(3) %892, i32 %889, !dbg !38
  %894 = bitcast float %715 to i32, !dbg !38
  %895 = select i1 %465, i32 %894, i32 0, !dbg !41
  %896 = bitcast float %716 to i32, !dbg !38
  %897 = select i1 %467, i32 %896, i32 0, !dbg !41
  %898 = insertelement <2 x i32> poison, i32 %895, i64 0, !dbg !38
  %899 = insertelement <2 x i32> %898, i32 %897, i64 1, !dbg !38
  store <2 x i32> %899, ptr addrspace(3) %893, align 8, !dbg !38
  %900 = getelementptr inbounds nuw i8, ptr addrspace(3) %776, i32 224, !dbg !38
  store <2 x i32> zeroinitializer, ptr addrspace(3) %900, align 8, !dbg !38
  %901 = or disjoint i32 %772, 568, !dbg !38
  %902 = lshr i32 %901, 4, !dbg !38
  %903 = and i32 %902, 252, !dbg !38
  %904 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %903, !dbg !38
  %905 = getelementptr inbounds nuw float, ptr addrspace(3) %904, i32 %901, !dbg !38
  %906 = bitcast float %717 to i32, !dbg !38
  %907 = select i1 %469, i32 %906, i32 0, !dbg !41
  %908 = bitcast float %718 to i32, !dbg !38
  %909 = select i1 %471, i32 %908, i32 0, !dbg !41
  %910 = insertelement <2 x i32> poison, i32 %907, i64 0, !dbg !38
  %911 = insertelement <2 x i32> %910, i32 %909, i64 1, !dbg !38
  store <2 x i32> %911, ptr addrspace(3) %905, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  %912 = and i32 %14, 28, !dbg !38
  %913 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %912, !dbg !38
  %914 = getelementptr inbounds nuw float, ptr addrspace(3) %913, i32 %773, !dbg !38
  %915 = load <4 x i32>, ptr addrspace(3) %914, align 16, !dbg !38
  %916 = or disjoint i32 %773, 512, !dbg !38
  %917 = lshr i32 %916, 4, !dbg !38
  %918 = and i32 %917, 60, !dbg !38
  %919 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %918, !dbg !38
  %920 = getelementptr inbounds nuw float, ptr addrspace(3) %919, i32 %916, !dbg !38
  %921 = load <4 x i32>, ptr addrspace(3) %920, align 16, !dbg !38
  %922 = or disjoint i32 %773, 1024, !dbg !38
  %923 = lshr i32 %922, 4, !dbg !38
  %924 = and i32 %923, 92, !dbg !38
  %925 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %924, !dbg !38
  %926 = getelementptr inbounds nuw float, ptr addrspace(3) %925, i32 %922, !dbg !38
  %927 = load <4 x i32>, ptr addrspace(3) %926, align 16, !dbg !38
  %928 = or disjoint i32 %773, 1536, !dbg !38
  %929 = lshr i32 %928, 4, !dbg !38
  %930 = and i32 %929, 124, !dbg !38
  %931 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %930, !dbg !38
  %932 = getelementptr inbounds nuw float, ptr addrspace(3) %931, i32 %928, !dbg !38
  %933 = load <4 x i32>, ptr addrspace(3) %932, align 16, !dbg !38
  %934 = or disjoint i32 %773, 2048, !dbg !38
  %935 = lshr i32 %934, 4, !dbg !38
  %936 = and i32 %935, 156, !dbg !38
  %937 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %936, !dbg !38
  %938 = getelementptr inbounds nuw float, ptr addrspace(3) %937, i32 %934, !dbg !38
  %939 = load <4 x i32>, ptr addrspace(3) %938, align 16, !dbg !38
  %940 = or disjoint i32 %773, 2560, !dbg !38
  %941 = lshr i32 %940, 4, !dbg !38
  %942 = and i32 %941, 188, !dbg !38
  %943 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %942, !dbg !38
  %944 = getelementptr inbounds nuw float, ptr addrspace(3) %943, i32 %940, !dbg !38
  %945 = load <4 x i32>, ptr addrspace(3) %944, align 16, !dbg !38
  %946 = or disjoint i32 %773, 3072, !dbg !38
  %947 = lshr i32 %946, 4, !dbg !38
  %948 = and i32 %947, 220, !dbg !38
  %949 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %948, !dbg !38
  %950 = getelementptr inbounds nuw float, ptr addrspace(3) %949, i32 %946, !dbg !38
  %951 = load <4 x i32>, ptr addrspace(3) %950, align 16, !dbg !38
  %952 = or i32 %259, 3584, !dbg !38
  %953 = lshr i32 %952, 4, !dbg !38
  %954 = and i32 %953, 252, !dbg !38
  %955 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %954, !dbg !38
  %956 = getelementptr inbounds nuw float, ptr addrspace(3) %955, i32 %952, !dbg !38
  %957 = load <4 x i32>, ptr addrspace(3) %956, align 16, !dbg !38
  %.extract = extractelement <4 x i32> %915, i64 0, !dbg !38
  %.extract58 = extractelement <4 x i32> %915, i64 1, !dbg !38
  %.extract59 = extractelement <4 x i32> %915, i64 2, !dbg !38
  %.extract60 = extractelement <4 x i32> %915, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract58, i32 %.extract59, i32 %.extract60, ptr addrspace(1) %722, i1 %752) #2, !dbg !38
  %.extract61 = extractelement <4 x i32> %921, i64 0, !dbg !38
  %.extract62 = extractelement <4 x i32> %921, i64 1, !dbg !38
  %.extract63 = extractelement <4 x i32> %921, i64 2, !dbg !38
  %.extract64 = extractelement <4 x i32> %921, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract62, i32 %.extract63, i32 %.extract64, ptr addrspace(1) %726, i1 %754) #2, !dbg !38
  %.extract65 = extractelement <4 x i32> %927, i64 0, !dbg !38
  %.extract66 = extractelement <4 x i32> %927, i64 1, !dbg !38
  %.extract67 = extractelement <4 x i32> %927, i64 2, !dbg !38
  %.extract68 = extractelement <4 x i32> %927, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract65, i32 %.extract66, i32 %.extract67, i32 %.extract68, ptr addrspace(1) %730, i1 %756) #2, !dbg !38
  %.extract69 = extractelement <4 x i32> %933, i64 0, !dbg !38
  %.extract70 = extractelement <4 x i32> %933, i64 1, !dbg !38
  %.extract71 = extractelement <4 x i32> %933, i64 2, !dbg !38
  %.extract72 = extractelement <4 x i32> %933, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract70, i32 %.extract71, i32 %.extract72, ptr addrspace(1) %734, i1 %758) #2, !dbg !38
  %.extract73 = extractelement <4 x i32> %939, i64 0, !dbg !38
  %.extract74 = extractelement <4 x i32> %939, i64 1, !dbg !38
  %.extract75 = extractelement <4 x i32> %939, i64 2, !dbg !38
  %.extract76 = extractelement <4 x i32> %939, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract73, i32 %.extract74, i32 %.extract75, i32 %.extract76, ptr addrspace(1) %738, i1 %760) #2, !dbg !38
  %.extract77 = extractelement <4 x i32> %945, i64 0, !dbg !38
  %.extract78 = extractelement <4 x i32> %945, i64 1, !dbg !38
  %.extract79 = extractelement <4 x i32> %945, i64 2, !dbg !38
  %.extract80 = extractelement <4 x i32> %945, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract78, i32 %.extract79, i32 %.extract80, ptr addrspace(1) %742, i1 %762) #2, !dbg !38
  %.extract81 = extractelement <4 x i32> %951, i64 0, !dbg !38
  %.extract82 = extractelement <4 x i32> %951, i64 1, !dbg !38
  %.extract83 = extractelement <4 x i32> %951, i64 2, !dbg !38
  %.extract84 = extractelement <4 x i32> %951, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract81, i32 %.extract82, i32 %.extract83, i32 %.extract84, ptr addrspace(1) %746, i1 %764) #2, !dbg !38
  %.extract85 = extractelement <4 x i32> %957, i64 0, !dbg !38
  %.extract86 = extractelement <4 x i32> %957, i64 1, !dbg !38
  %.extract87 = extractelement <4 x i32> %957, i64 2, !dbg !38
  %.extract88 = extractelement <4 x i32> %957, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract85, i32 %.extract86, i32 %.extract87, i32 %.extract88, ptr addrspace(1) %750, i1 %766) #2, !dbg !38
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 59, column: 90, scope: !5)
!26 = !DILocation(line: 51, column: 21, scope: !5)
!27 = !DILocation(line: 52, column: 16, scope: !5)
!28 = !DILocation(line: 70, column: 26, scope: !5)
!29 = !DILocation(line: 64, column: 36, scope: !5)
!30 = !DILocation(line: 64, column: 44, scope: !5)
!31 = !DILocation(line: 65, column: 22, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 70, column: 43, scope: !5)
!35 = !DILocation(line: 70, column: 58, scope: !5)
!36 = !DILocation(line: 72, column: 48, scope: !5)
!37 = !DILocation(line: 72, column: 32, scope: !5)
!38 = !DILocation(line: 73, column: 18, scope: !5)
!39 = !DILocation(line: 66, column: 34, scope: !5)
!40 = !DILocation(line: 67, column: 19, scope: !5)
!41 = !DILocation(line: 71, column: 29, scope: !5)
!42 = !DILocation(line: 73, column: 4, scope: !5)
