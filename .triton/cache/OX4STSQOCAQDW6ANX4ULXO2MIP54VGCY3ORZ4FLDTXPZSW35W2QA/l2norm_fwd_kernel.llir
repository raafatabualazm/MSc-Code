; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 4, !dbg !9
  %8 = sext i32 %7 to i64, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = lshr i32 %9, 4, !dbg !11
  %11 = and i32 %10, 15, !dbg !11
  %12 = zext nneg i32 %11 to i64, !dbg !11
  %13 = or disjoint i64 %12, %8, !dbg !11
  %14 = shl nsw i64 %13, 7, !dbg !11
  %15 = shl nuw nsw i32 %9, 3, !dbg !11
  %16 = and i32 %15, 120, !dbg !11
  %17 = zext nneg i32 %16 to i64, !dbg !11
  %18 = or disjoint i64 %14, %17, !dbg !11
  %19 = getelementptr bfloat, ptr addrspace(1) %0, i64 %18, !dbg !11
  %20 = icmp sgt i32 %7, -1, !dbg !11
  %21 = icmp slt i64 %13, 49152, !dbg !11
  %22 = and i1 %20, %21, !dbg !11
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %22) #6, !dbg !11
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !11
  %25 = bitcast i32 %24 to <2 x bfloat>, !dbg !11
  %26 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !11
  %27 = bitcast i32 %26 to <2 x bfloat>, !dbg !11
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !11
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !11
  %30 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !11
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !11
  %32 = extractelement <2 x bfloat> %25, i64 0, !dbg !11
  %33 = extractelement <2 x bfloat> %25, i64 1, !dbg !11
  %34 = extractelement <2 x bfloat> %27, i64 0, !dbg !11
  %35 = extractelement <2 x bfloat> %27, i64 1, !dbg !11
  %36 = extractelement <2 x bfloat> %29, i64 0, !dbg !11
  %37 = extractelement <2 x bfloat> %29, i64 1, !dbg !11
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !11
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !11
  %40 = fpext bfloat %32 to float, !dbg !12
  %41 = fpext bfloat %33 to float, !dbg !12
  %42 = fpext bfloat %34 to float, !dbg !12
  %43 = fpext bfloat %35 to float, !dbg !12
  %44 = fpext bfloat %36 to float, !dbg !12
  %45 = fpext bfloat %37 to float, !dbg !12
  %46 = fpext bfloat %38 to float, !dbg !12
  %47 = fpext bfloat %39 to float, !dbg !12
  %48 = fmul float %40, %40, !dbg !13
  %49 = fmul float %41, %41, !dbg !13
  %50 = fmul float %42, %42, !dbg !13
  %51 = fmul float %43, %43, !dbg !13
  %52 = fmul float %44, %44, !dbg !13
  %53 = fmul float %45, %45, !dbg !13
  %54 = fmul float %46, %46, !dbg !13
  %55 = fmul float %47, %47, !dbg !13
  %56 = fadd float %48, %49, !dbg !14
  %57 = fadd float %50, %56, !dbg !14
  %58 = fadd float %51, %57, !dbg !14
  %59 = fadd float %52, %58, !dbg !14
  %60 = fadd float %53, %59, !dbg !14
  %61 = fadd float %54, %60, !dbg !14
  %62 = fadd float %55, %61, !dbg !14
  %63 = bitcast float %62 to i32, !dbg !18
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !18
  %65 = bitcast i32 %64 to float, !dbg !18
  %66 = fadd float %62, %65, !dbg !14
  %67 = bitcast float %66 to i32, !dbg !18
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !18
  %69 = bitcast i32 %68 to float, !dbg !18
  %70 = fadd float %66, %69, !dbg !14
  %71 = bitcast float %70 to i32, !dbg !18
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !18
  %73 = bitcast i32 %72 to float, !dbg !18
  %74 = fadd float %70, %73, !dbg !14
  %75 = bitcast float %74 to i32, !dbg !18
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !18
  %77 = bitcast i32 %76 to float, !dbg !18
  %78 = fadd float %74, %77, !dbg !14
  %79 = fadd float %3, %78, !dbg !19
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !20
  %.not.i = icmp eq i32 %80, 0, !dbg !20
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !20
  %.not1.i = icmp eq i32 %81, 0, !dbg !20
  br i1 %.not.i, label %87, label %82, !dbg !20

82:                                               ; preds = %5
  br i1 %.not1.i, label %85, label %83, !dbg !20

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

87:                                               ; preds = %5
  br i1 %.not1.i, label %90, label %88, !dbg !20

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #6, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !20
  %92 = and i32 %9, 15, !dbg !11
  %93 = zext nneg i32 %92 to i64, !dbg !11
  %94 = or disjoint i64 %8, %93, !dbg !11
  %95 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %96 = fmul float %95, %40, !dbg !22
  %97 = fmul float %95, %41, !dbg !22
  %98 = fmul float %95, %42, !dbg !22
  %99 = fmul float %95, %43, !dbg !22
  %100 = fmul float %95, %44, !dbg !22
  %101 = fmul float %95, %45, !dbg !22
  %102 = fmul float %95, %46, !dbg !22
  %103 = fmul float %95, %47, !dbg !22
  %104 = fptrunc float %96 to bfloat, !dbg !23
  %105 = fptrunc float %97 to bfloat, !dbg !23
  %106 = fptrunc float %98 to bfloat, !dbg !23
  %107 = fptrunc float %99 to bfloat, !dbg !23
  %108 = fptrunc float %100 to bfloat, !dbg !23
  %109 = fptrunc float %101 to bfloat, !dbg !23
  %110 = fptrunc float %102 to bfloat, !dbg !23
  %111 = fptrunc float %103 to bfloat, !dbg !23
  %112 = getelementptr bfloat, ptr addrspace(1) %1, i64 %18, !dbg !24
  %113 = insertelement <2 x bfloat> poison, bfloat %104, i64 0, !dbg !24
  %114 = insertelement <2 x bfloat> %113, bfloat %105, i64 1, !dbg !24
  %115 = bitcast <2 x bfloat> %114 to i32, !dbg !24
  %116 = insertelement <2 x bfloat> poison, bfloat %106, i64 0, !dbg !24
  %117 = insertelement <2 x bfloat> %116, bfloat %107, i64 1, !dbg !24
  %118 = bitcast <2 x bfloat> %117 to i32, !dbg !24
  %119 = insertelement <2 x bfloat> poison, bfloat %108, i64 0, !dbg !24
  %120 = insertelement <2 x bfloat> %119, bfloat %109, i64 1, !dbg !24
  %121 = bitcast <2 x bfloat> %120 to i32, !dbg !24
  %122 = insertelement <2 x bfloat> poison, bfloat %110, i64 0, !dbg !24
  %123 = insertelement <2 x bfloat> %122, bfloat %111, i64 1, !dbg !24
  %124 = bitcast <2 x bfloat> %123 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %118, i32 %121, i32 %124, ptr addrspace(1) %112, i1 %22) #6, !dbg !24
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !25
  %126 = icmp slt i64 %94, 49152, !dbg !25
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  store float %95, ptr addrspace(3) %127, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %128 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %92, !dbg !25
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !25
  %130 = and i32 %9, 240, !dbg !25
  %131 = icmp eq i32 %130, 0, !dbg !25
  %132 = and i1 %131, %126, !dbg !25
  %133 = and i1 %20, %132, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %125, i1 %133) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 99, column: 72, scope: !5)
!11 = !DILocation(line: 103, column: 18, scope: !5)
!12 = !DILocation(line: 103, column: 49, scope: !5)
!13 = !DILocation(line: 104, column: 38, scope: !5)
!14 = !DILocation(line: 260, column: 15, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !5, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!17 = !DILocation(line: 104, column: 43, scope: !5)
!18 = !DILocation(line: 290, column: 36, scope: !15, inlinedAt: !17)
!19 = !DILocation(line: 104, column: 48, scope: !5)
!20 = !DILocation(line: 104, column: 25, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
