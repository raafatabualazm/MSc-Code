//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 128
{
	.reg .pred 	%p<80>;
	.reg .b16 	%rs<37>;
	.reg .b32 	%r<1112>;
	.reg .b64 	%rd<255>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd75, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd74, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd73, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd97, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r130, %ctaid.x;
	ld.param.b64 	%rd98, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r131, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r132, %r131, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r133, %r131, 31;
	ld.param.b64 	%rd99, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r134, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r135, %r132, %r134;
	ld.param.b64 	%rd100, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd101, %r135, 2;
	add.s64 	%rd102, %rd98, %rd101;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd103, %r133, 2;
	add.s64 	%rd104, %rd102, %rd103;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r136, %r130, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd105, %r134;
	cvt.s64.s32 	%rd106, %r136;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r137, %tid.x;
	shr.u32 	%r1, %r137, 5;
	bfe.s32 	%r138, %r137, 5, 1;
	bfe.u32 	%r139, %r137, 3, 4;
	or.b32 	%r140, %r139, 16;
	or.b32 	%r141, %r139, 32;
	or.b32 	%r142, %r139, 48;
	shl.b32 	%r143, %r137, 3;
	and.b32 	%r144, %r143, 56;
	cvt.u64.u32 	%rd107, %r139;
	cvt.u64.u32 	%rd108, %r140;
	cvt.u64.u32 	%rd109, %r141;
	cvt.u64.u32 	%rd110, %r142;
	cvt.u64.u32 	%rd1, %r144;
	or.b64 	%rd111, %rd107, %rd106;
	or.b64 	%rd112, %rd108, %rd106;
	or.b64 	%rd113, %rd109, %rd106;
	or.b64 	%rd114, %rd110, %rd106;
	shl.b64 	%rd2, %rd111, 5;
	shl.b64 	%rd3, %rd112, 5;
	shl.b64 	%rd4, %rd113, 5;
	shl.b64 	%rd5, %rd114, 5;
	shl.b64 	%rd115, %rd111, 6;
	add.s64 	%rd76, %rd104, %rd115;
	shl.b64 	%rd116, %rd112, 6;
	add.s64 	%rd77, %rd104, %rd116;
	shl.b64 	%rd117, %rd113, 6;
	add.s64 	%rd78, %rd104, %rd117;
	shl.b64 	%rd118, %rd114, 6;
	add.s64 	%rd79, %rd104, %rd118;
	setp.gt.s32 	%p32, %r136, -1;
	setp.lt.s64 	%p33, %rd111, %rd105;
	setp.lt.s64 	%p34, %rd112, %rd105;
	setp.lt.s64 	%p35, %rd113, %rd105;
	setp.lt.s64 	%p36, %rd114, %rd105;
	and.pred 	%p72, %p32, %p33;
	and.pred 	%p73, %p32, %p34;
	and.pred 	%p74, %p32, %p35;
	and.pred 	%p75, %p32, %p36;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p72 ld.global.b16 { %rs1 }, [ %rd76 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p73 ld.global.b16 { %rs2 }, [ %rd77 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs3, 0x0;
	@%p74 ld.global.b16 { %rs3 }, [ %rd78 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs4, 0x0;
	@%p75 ld.global.b16 { %rs4 }, [ %rd79 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r135, %r133;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r145, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd119, %r145, 2;
	add.s64 	%rd120, %rd100, %rd119;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd6, %rd111, 12;
	add.s64 	%rd121, %rd120, %rd6;
	mul.wide.u32 	%rd122, %r144, 2;
	add.s64 	%rd80, %rd121, %rd122;
	shl.b64 	%rd7, %rd112, 12;
	add.s64 	%rd123, %rd120, %rd7;
	add.s64 	%rd81, %rd123, %rd122;
	shl.b64 	%rd8, %rd113, 12;
	add.s64 	%rd124, %rd120, %rd8;
	add.s64 	%rd82, %rd124, %rd122;
	shl.b64 	%rd9, %rd114, 12;
	add.s64 	%rd125, %rd120, %rd9;
	add.s64 	%rd83, %rd125, %rd122;
	// begin inline asm
	mov.u32 %r88, 0x0;
	mov.u32 %r89, 0x0;
	mov.u32 %r90, 0x0;
	mov.u32 %r91, 0x0;
	@%p72 ld.global.v4.b32 { %r88, %r89, %r90, %r91 }, [ %rd80 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r92, 0x0;
	mov.u32 %r93, 0x0;
	mov.u32 %r94, 0x0;
	mov.u32 %r95, 0x0;
	@%p73 ld.global.v4.b32 { %r92, %r93, %r94, %r95 }, [ %rd81 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r96, 0x0;
	mov.u32 %r97, 0x0;
	mov.u32 %r98, 0x0;
	mov.u32 %r99, 0x0;
	@%p74 ld.global.v4.b32 { %r96, %r97, %r98, %r99 }, [ %rd82 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r100, 0x0;
	mov.u32 %r101, 0x0;
	mov.u32 %r102, 0x0;
	mov.u32 %r103, 0x0;
	@%p75 ld.global.v4.b32 { %r100, %r101, %r102, %r103 }, [ %rd83 + 0 ];
	// end inline asm
	and.b32 	%r146, %r138, 288;
	and.b32 	%r147, %r137, 24;
	mul.lo.s32 	%r148, %r147, 9;
	xor.b32 	%r149, %r148, %r144;
	xor.b32 	%r150, %r149, %r146;
	and.b32 	%r151, %r143, 512;
	or.b32 	%r152, %r150, %r151;
	shl.b32 	%r153, %r152, 1;
	mov.b32 	%r154, global_smem;
	add.s32 	%r155, %r154, 33792;
	add.s32 	%r156, %r155, %r153;
	st.shared.v4.b32 	[%r156], {%r88, %r89, %r90, %r91};
	or.b32 	%r157, %r144, 1024;
	xor.b32 	%r158, %r148, %r157;
	xor.b32 	%r159, %r158, %r146;
	or.b32 	%r160, %r159, %r151;
	shl.b32 	%r161, %r160, 1;
	add.s32 	%r162, %r155, %r161;
	st.shared.v4.b32 	[%r162], {%r92, %r93, %r94, %r95};
	or.b32 	%r163, %r144, 2048;
	xor.b32 	%r164, %r148, %r163;
	xor.b32 	%r165, %r164, %r146;
	or.b32 	%r166, %r165, %r151;
	shl.b32 	%r167, %r166, 1;
	add.s32 	%r168, %r155, %r167;
	st.shared.v4.b32 	[%r168], {%r96, %r97, %r98, %r99};
	or.b32 	%r169, %r144, 3072;
	xor.b32 	%r170, %r148, %r169;
	xor.b32 	%r171, %r170, %r146;
	or.b32 	%r172, %r171, %r151;
	shl.b32 	%r173, %r172, 1;
	add.s32 	%r174, %r155, %r173;
	st.shared.v4.b32 	[%r174], {%r100, %r101, %r102, %r103};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r175, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd10, %r175;
	mul.wide.s32 	%rd126, %r175, 2;
	add.s64 	%rd11, %rd97, %rd126;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd12, %rd99, %rd126;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd251, %rd6, %rd1;
	or.b64 	%rd252, %rd7, %rd1;
	or.b64 	%rd253, %rd8, %rd1;
	or.b64 	%rd254, %rd9, %rd1;
	shl.b64 	%rd127, %rd251, 1;
	add.s64 	%rd84, %rd11, %rd127;
	shl.b64 	%rd128, %rd252, 1;
	add.s64 	%rd85, %rd11, %rd128;
	shl.b64 	%rd129, %rd253, 1;
	add.s64 	%rd86, %rd11, %rd129;
	shl.b64 	%rd130, %rd254, 1;
	add.s64 	%rd87, %rd11, %rd130;
	shl.b32 	%r176, %r139, 6;
	or.b32 	%r3, %r176, %r144;
	shl.b32 	%r177, %r3, 1;
	add.s32 	%r612, %r154, %r177;
	add.s32 	%r614, %r612, 2048;
	add.s32 	%r616, %r612, 4096;
	add.s32 	%r618, %r612, 6144;
	selp.b32 	%r8, 16, 0, %p72;
	// begin inline asm
	cp.async.cg.shared.global [ %r612 + 0 ], [ %rd84 + 0 ], 0x10, %r8;
	// end inline asm
	selp.b32 	%r9, 16, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r614 + 0 ], [ %rd85 + 0 ], 0x10, %r9;
	// end inline asm
	selp.b32 	%r10, 16, 0, %p74;
	// begin inline asm
	cp.async.cg.shared.global [ %r616 + 0 ], [ %rd86 + 0 ], 0x10, %r10;
	// end inline asm
	selp.b32 	%r11, 16, 0, %p75;
	// begin inline asm
	cp.async.cg.shared.global [ %r618 + 0 ], [ %rd87 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd131, %rd1, 64;
	or.b64 	%rd247, %rd6, %rd131;
	or.b64 	%rd248, %rd7, %rd131;
	or.b64 	%rd249, %rd8, %rd131;
	or.b64 	%rd250, %rd9, %rd131;
	add.s64 	%rd88, %rd84, 128;
	add.s64 	%rd89, %rd85, 128;
	add.s64 	%rd90, %rd86, 128;
	add.s64 	%rd91, %rd87, 128;
	bar.sync 	0;
	add.s32 	%r112, %r612, 8192;
	add.s32 	%r114, %r612, 10240;
	add.s32 	%r116, %r612, 12288;
	add.s32 	%r118, %r612, 14336;
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd88 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd89 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r116 + 0 ], [ %rd90 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r118 + 0 ], [ %rd91 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd132, %rd1, 128;
	or.b64 	%rd243, %rd6, %rd132;
	or.b64 	%rd244, %rd7, %rd132;
	or.b64 	%rd245, %rd8, %rd132;
	or.b64 	%rd246, %rd9, %rd132;
	add.s64 	%rd92, %rd84, 256;
	add.s64 	%rd93, %rd85, 256;
	add.s64 	%rd94, %rd86, 256;
	add.s64 	%rd95, %rd87, 256;
	bar.sync 	0;
	add.s32 	%r120, %r612, 16384;
	add.s32 	%r122, %r612, 18432;
	add.s32 	%r124, %r612, 20480;
	add.s32 	%r126, %r612, 22528;
	mov.b32 	%r121, 0;
	// begin inline asm
	cp.async.cg.shared.global [ %r120 + 0 ], [ %rd92 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r122 + 0 ], [ %rd93 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r124 + 0 ], [ %rd94 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r126 + 0 ], [ %rd95 + 0 ], 0x10, %r121;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r178, %r154, 24576;
	add.s32 	%r20, %r178, %r153;
	add.s32 	%r21, %r178, %r161;
	add.s32 	%r22, %r178, %r167;
	add.s32 	%r23, %r178, %r173;
	bfe.u32 	%r179, %r155, 4, 14;
	cvt.u64.u32 	%rd133, %r179;
	or.b64 	%rd203, %rd133, 4611686293338849280;
	bfe.u32 	%r180, %r178, 4, 14;
	cvt.u64.u32 	%rd134, %r180;
	or.b64 	%rd204, %rd134, 4611686293338849280;
	add.s32 	%r181, %r154, 33824;
	bfe.u32 	%r182, %r181, 4, 14;
	cvt.u64.u32 	%rd135, %r182;
	or.b64 	%rd205, %rd135, 4611686293338849280;
	add.s32 	%r183, %r154, 26624;
	bfe.u32 	%r184, %r183, 4, 14;
	cvt.u64.u32 	%rd136, %r184;
	or.b64 	%rd206, %rd136, 4611686293338849280;
	add.s32 	%r185, %r154, 33856;
	bfe.u32 	%r186, %r185, 4, 14;
	cvt.u64.u32 	%rd137, %r186;
	or.b64 	%rd207, %rd137, 4611686293338849280;
	add.s32 	%r187, %r154, 28672;
	bfe.u32 	%r188, %r187, 4, 14;
	cvt.u64.u32 	%rd138, %r188;
	or.b64 	%rd208, %rd138, 4611686293338849280;
	add.s32 	%r189, %r154, 33888;
	bfe.u32 	%r190, %r189, 4, 14;
	cvt.u64.u32 	%rd139, %r190;
	or.b64 	%rd209, %rd139, 4611686293338849280;
	add.s32 	%r191, %r154, 30720;
	bfe.u32 	%r192, %r191, 4, 14;
	cvt.u64.u32 	%rd140, %r192;
	or.b64 	%rd210, %rd140, 4611686293338849280;
	shl.b32 	%r193, %r137, 6;
	and.b32 	%r194, %r193, 960;
	shr.u32 	%r195, %r137, 1;
	and.b32 	%r196, %r195, 8;
	or.b32 	%r197, %r194, %r196;
	shl.b32 	%r198, %r137, 5;
	and.b32 	%r199, %r198, 3072;
	or.b32 	%r200, %r197, %r199;
	and.b32 	%r201, %r143, 1016;
	shr.u32 	%r202, %r200, 2;
	and.b32 	%r203, %r202, 1008;
	add.s32 	%r204, %r178, %r203;
	shl.b32 	%r205, %r200, 1;
	add.s32 	%r942, %r204, %r205;
	add.s32 	%r947, %r942, 32;
	add.s32 	%r952, %r942, 64;
	add.s32 	%r957, %r942, 96;
	and.b32 	%r206, %r137, 120;
	shl.b32 	%r207, %r206, 1;
	add.s32 	%r208, %r178, %r207;
	shl.b32 	%r209, %r201, 1;
	add.s32 	%r28, %r208, %r209;
	or.b32 	%r210, %r201, 1024;
	shr.u32 	%r211, %r210, 2;
	and.b32 	%r212, %r211, 496;
	add.s32 	%r213, %r178, %r212;
	add.s32 	%r29, %r213, %r209;
	or.b32 	%r214, %r201, 2048;
	shr.u32 	%r215, %r214, 2;
	and.b32 	%r216, %r215, 752;
	add.s32 	%r217, %r178, %r216;
	add.s32 	%r30, %r217, %r209;
	or.b32 	%r218, %r201, 3072;
	shr.u32 	%r219, %r218, 2;
	and.b32 	%r220, %r219, 1008;
	add.s32 	%r221, %r178, %r220;
	add.s32 	%r31, %r221, %r209;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r34, {%rs1, %rs1};
	mov.b32 	%r38, {%rs2, %rs2};
	mov.b32 	%r42, {%rs3, %rs3};
	mov.b32 	%r46, {%rs4, %rs4};
	mov.b32 	%r1109, 2;
	mov.b32 	%r1108, -1;
	mov.b64 	%rd229, 192;
	mov.pred 	%p37, -1;
	mov.pred 	%p62, %p37;
	mov.pred 	%p63, %p72;
	mov.pred 	%p64, %p73;
	mov.pred 	%p65, %p74;
	mov.pred 	%p66, %p75;
	mov.pred 	%p67, %p72;
	mov.pred 	%p68, %p73;
	mov.pred 	%p69, %p74;
	mov.pred 	%p70, %p75;
	mov.b64 	%rd230, %rd243;
	mov.b64 	%rd231, %rd244;
	mov.b64 	%rd232, %rd245;
	mov.b64 	%rd233, %rd246;
	mov.b64 	%rd234, %rd247;
	mov.b64 	%rd235, %rd248;
	mov.b64 	%rd236, %rd249;
	mov.b64 	%rd237, %rd250;
	mov.b64 	%rd238, %rd251;
	mov.b64 	%rd239, %rd252;
	mov.b64 	%rd240, %rd253;
	mov.b64 	%rd241, %rd254;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd45, %rd237;
	mov.b64 	%rd44, %rd236;
	mov.b64 	%rd43, %rd235;
	mov.b64 	%rd42, %rd234;
	mov.b64 	%rd237, %rd233;
	mov.b64 	%rd236, %rd232;
	mov.b64 	%rd235, %rd231;
	mov.b64 	%rd234, %rd230;
	mov.pred 	%p9, %p66;
	mov.pred 	%p8, %p65;
	mov.pred 	%p7, %p64;
	mov.pred 	%p6, %p63;
	mov.pred 	%p5, %p62;
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r566, %r1108, 1;
	setp.gt.s32 	%p45, %r566, 2;
	selp.b32 	%r1108, 0, %r566, %p45;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r567, %r1108, 13;
	add.s32 	%r569, %r154, %r567;
	add.s32 	%r571, %r569, %r177;
	ld.shared.v4.b32 	{%r572, %r573, %r574, %r575}, [%r571];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r576, %r575, %r34;
	mul.bf16x2 	%r577, %r574, %r34;
	mul.bf16x2 	%r578, %r573, %r34;
	mul.bf16x2 	%r579, %r572, %r34;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r580, %r581, %r582, %r583}, [%r571+2048];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r584, %r583, %r38;
	mul.bf16x2 	%r585, %r582, %r38;
	mul.bf16x2 	%r586, %r581, %r38;
	mul.bf16x2 	%r587, %r580, %r38;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r588, %r589, %r590, %r591}, [%r571+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r592, %r591, %r42;
	mul.bf16x2 	%r593, %r590, %r42;
	mul.bf16x2 	%r594, %r589, %r42;
	mul.bf16x2 	%r595, %r588, %r42;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r596, %r597, %r598, %r599}, [%r571+6144];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r600, %r599, %r46;
	mul.bf16x2 	%r601, %r598, %r46;
	mul.bf16x2 	%r602, %r597, %r46;
	mul.bf16x2 	%r603, %r596, %r46;
	st.shared.v4.b32 	[%r20], {%r579, %r578, %r577, %r576};
	st.shared.v4.b32 	[%r21], {%r587, %r586, %r585, %r584};
	st.shared.v4.b32 	[%r22], {%r595, %r594, %r593, %r592};
	st.shared.v4.b32 	[%r23], {%r603, %r602, %r601, %r600};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r604, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349}, %rd203, %rd204, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349}, %rd205, %rd206, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349}, %rd207, %rd208, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349}, %rd209, %rd210, %p37, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r478, %r155;
	mov.b32 	%r479, %r121;
	mov.b32 	%r480, %r121;
	mov.b32 	%r482, %r121;
	mov.b32 	%r483, %r121;
	mov.b32 	%r481, %r178;
	// begin inline asm
	// wait for regs: %r318,%r319,%r320,%r321,%r322,%r323,%r324,%r325,%r326,%r327,%r328,%r329,%r330,%r331,%r332,%r333,%r334,%r335,%r336,%r337,%r338,%r339,%r340,%r341,%r342,%r343,%r344,%r345,%r346,%r347,%r348,%r349,%r478,%r479,%r480,%r481,%r482,%r483
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r523, %r319, %r318;
	cvt.rn.bf16x2.f32 	%r524, %r321, %r320;
	cvt.rn.bf16x2.f32 	%r525, %r323, %r322;
	cvt.rn.bf16x2.f32 	%r526, %r325, %r324;
	cvt.rn.bf16x2.f32 	%r528, %r327, %r326;
	cvt.rn.bf16x2.f32 	%r529, %r329, %r328;
	cvt.rn.bf16x2.f32 	%r530, %r331, %r330;
	cvt.rn.bf16x2.f32 	%r531, %r333, %r332;
	cvt.rn.bf16x2.f32 	%r533, %r335, %r334;
	cvt.rn.bf16x2.f32 	%r534, %r337, %r336;
	cvt.rn.bf16x2.f32 	%r535, %r339, %r338;
	cvt.rn.bf16x2.f32 	%r536, %r341, %r340;
	cvt.rn.bf16x2.f32 	%r538, %r343, %r342;
	cvt.rn.bf16x2.f32 	%r539, %r345, %r344;
	cvt.rn.bf16x2.f32 	%r540, %r347, %r346;
	cvt.rn.bf16x2.f32 	%r541, %r349, %r348;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd158, %rd238, 1;
	add.s64 	%rd149, %rd12, %rd158;
	shl.b64 	%rd159, %rd239, 1;
	add.s64 	%rd150, %rd12, %rd159;
	shl.b64 	%rd160, %rd240, 1;
	add.s64 	%rd151, %rd12, %rd160;
	shl.b64 	%rd161, %rd241, 1;
	add.s64 	%rd152, %rd12, %rd161;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r942], {%r523, %r524, %r525, %r526};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r947], {%r528, %r529, %r530, %r531};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r952], {%r533, %r534, %r535, %r536};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r957], {%r538, %r539, %r540, %r541};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r546, %r547, %r548, %r549}, [%r29+2048];
	ld.shared.v4.b32 	{%r550, %r551, %r552, %r553}, [%r30+4096];
	ld.shared.v4.b32 	{%r554, %r555, %r556, %r557}, [%r31+6144];
	ld.shared.v4.b32 	{%r542, %r543, %r544, %r545}, [%r28];
	// begin inline asm
	@%p67 st.global.v4.b32 [ %rd149 + 0 ], { %r542, %r543, %r544, %r545 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd150 + 0 ], { %r546, %r547, %r548, %r549 };
	// end inline asm
	// begin inline asm
	@%p69 st.global.v4.b32 [ %rd151 + 0 ], { %r550, %r551, %r552, %r553 };
	// end inline asm
	// begin inline asm
	@%p70 st.global.v4.b32 [ %rd152 + 0 ], { %r554, %r555, %r556, %r557 };
	// end inline asm
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r605, %r1109, 1;
	setp.gt.s32 	%p46, %r605, 2;
	selp.b32 	%r1109, 0, %r605, %p46;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd162, %rd229, %rd1;
	or.b64 	%rd230, %rd162, %rd6;
	or.b64 	%rd231, %rd162, %rd7;
	or.b64 	%rd232, %rd162, %rd8;
	or.b64 	%rd233, %rd162, %rd9;
	shl.b64 	%rd163, %rd230, 1;
	add.s64 	%rd153, %rd11, %rd163;
	shl.b64 	%rd164, %rd231, 1;
	add.s64 	%rd154, %rd11, %rd164;
	shl.b64 	%rd165, %rd232, 1;
	add.s64 	%rd155, %rd11, %rd165;
	shl.b64 	%rd166, %rd233, 1;
	add.s64 	%rd156, %rd11, %rd166;
	shl.b32 	%r606, %r1109, 13;
	add.s32 	%r607, %r154, %r606;
	add.s32 	%r558, %r607, %r177;
	add.s32 	%r560, %r558, 2048;
	add.s32 	%r562, %r558, 4096;
	add.s32 	%r564, %r558, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r558 + 0 ], [ %rd153 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r560 + 0 ], [ %rd154 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r562 + 0 ], [ %rd155 + 0 ], 0x10, %r121;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r564 + 0 ], [ %rd156 + 0 ], 0x10, %r121;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd229, 256;
	mov.pred 	%p62, 0;
	mov.pred 	%p63, %p62;
	mov.pred 	%p64, %p62;
	mov.pred 	%p65, %p62;
	mov.pred 	%p66, %p62;
	mov.pred 	%p67, %p6;
	mov.pred 	%p68, %p7;
	mov.pred 	%p69, %p8;
	mov.pred 	%p70, %p9;
	mov.b64 	%rd238, %rd42;
	mov.b64 	%rd239, %rd43;
	mov.b64 	%rd240, %rd44;
	mov.b64 	%rd241, %rd45;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p5 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd184, %r2, 4;
	add.s64 	%rd185, %rd75, %rd184;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd186, %rd2, 2;
	add.s64 	%rd167, %rd185, %rd186;
	shl.b64 	%rd187, %rd3, 2;
	add.s64 	%rd168, %rd185, %rd187;
	shl.b64 	%rd188, %rd4, 2;
	add.s64 	%rd169, %rd185, %rd188;
	shl.b64 	%rd189, %rd5, 2;
	add.s64 	%rd170, %rd185, %rd189;
	// begin inline asm
	mov.u32 %r608, 0x0;
	@%p72 ld.global.b32 { %r608 }, [ %rd167 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r609, 0x0;
	@%p73 ld.global.b32 { %r609 }, [ %rd168 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r610, 0x0;
	@%p74 ld.global.b32 { %r610 }, [ %rd169 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r611, 0x0;
	@%p75 ld.global.b32 { %r611 }, [ %rd170 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r638, %r608, 0f3FB8AA3B;
	ex2.approx.f32 	%r52, %r638;
	mul.f32 	%r639, %r609, 0f3FB8AA3B;
	ex2.approx.f32 	%r60, %r639;
	mul.f32 	%r640, %r610, 0f3FB8AA3B;
	ex2.approx.f32 	%r68, %r640;
	mul.f32 	%r641, %r611, 0f3FB8AA3B;
	ex2.approx.f32 	%r76, %r641;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd190, %rd10, 1;
	add.s64 	%rd54, %rd73, %rd190;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd55, %rd74, %rd190;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd171, %rd54, %rd127;
	add.s64 	%rd172, %rd54, %rd128;
	add.s64 	%rd173, %rd54, %rd129;
	add.s64 	%rd174, %rd54, %rd130;
	// begin inline asm
	cp.async.cg.shared.global [ %r612 + 0 ], [ %rd171 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r614 + 0 ], [ %rd172 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r616 + 0 ], [ %rd173 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r618 + 0 ], [ %rd174 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd175, %rd171, 128;
	add.s64 	%rd176, %rd172, 128;
	add.s64 	%rd177, %rd173, 128;
	add.s64 	%rd178, %rd174, 128;
	bar.sync 	0;
	// begin inline asm
	cp.async.cg.shared.global [ %r112 + 0 ], [ %rd175 + 0 ], 0x10, %r8;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r114 + 0 ], [ %rd176 + 0 ], 0x10, %r9;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r116 + 0 ], [ %rd177 + 0 ], 0x10, %r10;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r118 + 0 ], [ %rd178 + 0 ], 0x10, %r11;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd179, %rd171, 256;
	add.s64 	%rd180, %rd172, 256;
	add.s64 	%rd181, %rd173, 256;
	add.s64 	%rd182, %rd174, 256;
	bar.sync 	0;
	mov.b32 	%r629, 0;
	// begin inline asm
	cp.async.cg.shared.global [ %r120 + 0 ], [ %rd179 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r122 + 0 ], [ %rd180 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r124 + 0 ], [ %rd181 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r126 + 0 ], [ %rd182 + 0 ], 0x10, %r629;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1111, 2;
	mov.b32 	%r1110, -1;
	mov.b64 	%rd242, 192;
	mov.pred 	%p52, -1;
	mov.pred 	%p71, %p52;
	mov.pred 	%p76, %p72;
	mov.pred 	%p77, %p73;
	mov.pred 	%p78, %p74;
	mov.pred 	%p79, %p75;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd64, %rd250;
	mov.b64 	%rd63, %rd249;
	mov.b64 	%rd62, %rd248;
	mov.b64 	%rd61, %rd247;
	mov.b64 	%rd250, %rd246;
	mov.b64 	%rd249, %rd245;
	mov.b64 	%rd248, %rd244;
	mov.b64 	%rd247, %rd243;
	mov.pred 	%p18, %p75;
	mov.pred 	%p17, %p74;
	mov.pred 	%p16, %p73;
	mov.pred 	%p15, %p72;
	mov.pred 	%p14, %p71;
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r986, %r1110, 1;
	setp.gt.s32 	%p60, %r986, 2;
	selp.b32 	%r1110, 0, %r986, %p60;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r987, %r1110, 13;
	add.s32 	%r989, %r154, %r987;
	add.s32 	%r991, %r989, %r177;
	ld.shared.v4.b32 	{%r992, %r993, %r994, %r995}, [%r991];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r996, %r992, %r34;
	mul.bf16x2 	%r997, %r993, %r34;
	mul.bf16x2 	%r998, %r994, %r34;
	mul.bf16x2 	%r999, %r995, %r34;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs5, %rs6}, %r999;
	cvt.f32.bf16 	%r1000, %rs6;
	cvt.f32.bf16 	%r1001, %rs5;
	mov.b32 	{%rs7, %rs8}, %r998;
	cvt.f32.bf16 	%r1002, %rs8;
	cvt.f32.bf16 	%r1003, %rs7;
	mov.b32 	{%rs9, %rs10}, %r997;
	cvt.f32.bf16 	%r1004, %rs10;
	cvt.f32.bf16 	%r1005, %rs9;
	mov.b32 	{%rs11, %rs12}, %r996;
	cvt.f32.bf16 	%r1006, %rs12;
	cvt.f32.bf16 	%r1007, %rs11;
	mul.f32 	%r1008, %r52, %r1007;
	mul.f32 	%r1009, %r52, %r1006;
	mul.f32 	%r1010, %r52, %r1005;
	mul.f32 	%r1011, %r52, %r1004;
	mul.f32 	%r1012, %r52, %r1003;
	mul.f32 	%r1013, %r52, %r1002;
	mul.f32 	%r1014, %r52, %r1001;
	mul.f32 	%r1015, %r52, %r1000;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1016, %r1015, %r1014;
	cvt.rn.bf16x2.f32 	%r1017, %r1013, %r1012;
	cvt.rn.bf16x2.f32 	%r1018, %r1011, %r1010;
	cvt.rn.bf16x2.f32 	%r1019, %r1009, %r1008;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1020, %r1021, %r1022, %r1023}, [%r991+2048];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1024, %r1020, %r38;
	mul.bf16x2 	%r1025, %r1021, %r38;
	mul.bf16x2 	%r1026, %r1022, %r38;
	mul.bf16x2 	%r1027, %r1023, %r38;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs13, %rs14}, %r1027;
	cvt.f32.bf16 	%r1028, %rs14;
	cvt.f32.bf16 	%r1029, %rs13;
	mov.b32 	{%rs15, %rs16}, %r1026;
	cvt.f32.bf16 	%r1030, %rs16;
	cvt.f32.bf16 	%r1031, %rs15;
	mov.b32 	{%rs17, %rs18}, %r1025;
	cvt.f32.bf16 	%r1032, %rs18;
	cvt.f32.bf16 	%r1033, %rs17;
	mov.b32 	{%rs19, %rs20}, %r1024;
	cvt.f32.bf16 	%r1034, %rs20;
	cvt.f32.bf16 	%r1035, %rs19;
	mul.f32 	%r1036, %r60, %r1035;
	mul.f32 	%r1037, %r60, %r1034;
	mul.f32 	%r1038, %r60, %r1033;
	mul.f32 	%r1039, %r60, %r1032;
	mul.f32 	%r1040, %r60, %r1031;
	mul.f32 	%r1041, %r60, %r1030;
	mul.f32 	%r1042, %r60, %r1029;
	mul.f32 	%r1043, %r60, %r1028;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1044, %r1043, %r1042;
	cvt.rn.bf16x2.f32 	%r1045, %r1041, %r1040;
	cvt.rn.bf16x2.f32 	%r1046, %r1039, %r1038;
	cvt.rn.bf16x2.f32 	%r1047, %r1037, %r1036;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1048, %r1049, %r1050, %r1051}, [%r991+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1052, %r1048, %r42;
	mul.bf16x2 	%r1053, %r1049, %r42;
	mul.bf16x2 	%r1054, %r1050, %r42;
	mul.bf16x2 	%r1055, %r1051, %r42;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs21, %rs22}, %r1055;
	cvt.f32.bf16 	%r1056, %rs22;
	cvt.f32.bf16 	%r1057, %rs21;
	mov.b32 	{%rs23, %rs24}, %r1054;
	cvt.f32.bf16 	%r1058, %rs24;
	cvt.f32.bf16 	%r1059, %rs23;
	mov.b32 	{%rs25, %rs26}, %r1053;
	cvt.f32.bf16 	%r1060, %rs26;
	cvt.f32.bf16 	%r1061, %rs25;
	mov.b32 	{%rs27, %rs28}, %r1052;
	cvt.f32.bf16 	%r1062, %rs28;
	cvt.f32.bf16 	%r1063, %rs27;
	mul.f32 	%r1064, %r68, %r1063;
	mul.f32 	%r1065, %r68, %r1062;
	mul.f32 	%r1066, %r68, %r1061;
	mul.f32 	%r1067, %r68, %r1060;
	mul.f32 	%r1068, %r68, %r1059;
	mul.f32 	%r1069, %r68, %r1058;
	mul.f32 	%r1070, %r68, %r1057;
	mul.f32 	%r1071, %r68, %r1056;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1072, %r1071, %r1070;
	cvt.rn.bf16x2.f32 	%r1073, %r1069, %r1068;
	cvt.rn.bf16x2.f32 	%r1074, %r1067, %r1066;
	cvt.rn.bf16x2.f32 	%r1075, %r1065, %r1064;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r1076, %r1077, %r1078, %r1079}, [%r991+6144];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r1080, %r1076, %r46;
	mul.bf16x2 	%r1081, %r1077, %r46;
	mul.bf16x2 	%r1082, %r1078, %r46;
	mul.bf16x2 	%r1083, %r1079, %r46;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs29, %rs30}, %r1083;
	cvt.f32.bf16 	%r1084, %rs30;
	cvt.f32.bf16 	%r1085, %rs29;
	mov.b32 	{%rs31, %rs32}, %r1082;
	cvt.f32.bf16 	%r1086, %rs32;
	cvt.f32.bf16 	%r1087, %rs31;
	mov.b32 	{%rs33, %rs34}, %r1081;
	cvt.f32.bf16 	%r1088, %rs34;
	cvt.f32.bf16 	%r1089, %rs33;
	mov.b32 	{%rs35, %rs36}, %r1080;
	cvt.f32.bf16 	%r1090, %rs36;
	cvt.f32.bf16 	%r1091, %rs35;
	mul.f32 	%r1092, %r76, %r1091;
	mul.f32 	%r1093, %r76, %r1090;
	mul.f32 	%r1094, %r76, %r1089;
	mul.f32 	%r1095, %r76, %r1088;
	mul.f32 	%r1096, %r76, %r1087;
	mul.f32 	%r1097, %r76, %r1086;
	mul.f32 	%r1098, %r76, %r1085;
	mul.f32 	%r1099, %r76, %r1084;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r1100, %r1099, %r1098;
	cvt.rn.bf16x2.f32 	%r1101, %r1097, %r1096;
	cvt.rn.bf16x2.f32 	%r1102, %r1095, %r1094;
	cvt.rn.bf16x2.f32 	%r1103, %r1093, %r1092;
	st.shared.v4.b32 	[%r20], {%r1019, %r1018, %r1017, %r1016};
	st.shared.v4.b32 	[%r21], {%r1047, %r1046, %r1045, %r1044};
	st.shared.v4.b32 	[%r22], {%r1075, %r1074, %r1073, %r1072};
	st.shared.v4.b32 	[%r23], {%r1103, %r1102, %r1101, %r1100};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r1104, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r750,%r751,%r752,%r753,%r754,%r755,%r756,%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769}, %rd203, %rd204, 0, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r750,%r751,%r752,%r753,%r754,%r755,%r756,%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769}, %rd205, %rd206, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r750,%r751,%r752,%r753,%r754,%r755,%r756,%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769}, %rd207, %rd208, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r750,%r751,%r752,%r753,%r754,%r755,%r756,%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769}, %rd209, %rd210, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r899, %r629;
	mov.b32 	%r900, %r629;
	mov.b32 	%r902, %r629;
	mov.b32 	%r903, %r629;
	mov.b32 	%r898, %r155;
	mov.b32 	%r901, %r178;
	// begin inline asm
	// wait for regs: %r738,%r739,%r740,%r741,%r742,%r743,%r744,%r745,%r746,%r747,%r748,%r749,%r750,%r751,%r752,%r753,%r754,%r755,%r756,%r757,%r758,%r759,%r760,%r761,%r762,%r763,%r764,%r765,%r766,%r767,%r768,%r769,%r898,%r899,%r900,%r901,%r902,%r903
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r943, %r739, %r738;
	cvt.rn.bf16x2.f32 	%r944, %r741, %r740;
	cvt.rn.bf16x2.f32 	%r945, %r743, %r742;
	cvt.rn.bf16x2.f32 	%r946, %r745, %r744;
	cvt.rn.bf16x2.f32 	%r948, %r747, %r746;
	cvt.rn.bf16x2.f32 	%r949, %r749, %r748;
	cvt.rn.bf16x2.f32 	%r950, %r751, %r750;
	cvt.rn.bf16x2.f32 	%r951, %r753, %r752;
	cvt.rn.bf16x2.f32 	%r953, %r755, %r754;
	cvt.rn.bf16x2.f32 	%r954, %r757, %r756;
	cvt.rn.bf16x2.f32 	%r955, %r759, %r758;
	cvt.rn.bf16x2.f32 	%r956, %r761, %r760;
	cvt.rn.bf16x2.f32 	%r958, %r763, %r762;
	cvt.rn.bf16x2.f32 	%r959, %r765, %r764;
	cvt.rn.bf16x2.f32 	%r960, %r767, %r766;
	cvt.rn.bf16x2.f32 	%r961, %r769, %r768;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd220, %rd251, 1;
	add.s64 	%rd211, %rd55, %rd220;
	shl.b64 	%rd221, %rd252, 1;
	add.s64 	%rd212, %rd55, %rd221;
	shl.b64 	%rd222, %rd253, 1;
	add.s64 	%rd213, %rd55, %rd222;
	shl.b64 	%rd223, %rd254, 1;
	add.s64 	%rd214, %rd55, %rd223;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r942], {%r943, %r944, %r945, %r946};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r947], {%r948, %r949, %r950, %r951};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r952], {%r953, %r954, %r955, %r956};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r957], {%r958, %r959, %r960, %r961};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r966, %r967, %r968, %r969}, [%r29+2048];
	ld.shared.v4.b32 	{%r970, %r971, %r972, %r973}, [%r30+4096];
	ld.shared.v4.b32 	{%r974, %r975, %r976, %r977}, [%r31+6144];
	ld.shared.v4.b32 	{%r962, %r963, %r964, %r965}, [%r28];
	// begin inline asm
	@%p76 st.global.v4.b32 [ %rd211 + 0 ], { %r962, %r963, %r964, %r965 };
	// end inline asm
	// begin inline asm
	@%p77 st.global.v4.b32 [ %rd212 + 0 ], { %r966, %r967, %r968, %r969 };
	// end inline asm
	// begin inline asm
	@%p78 st.global.v4.b32 [ %rd213 + 0 ], { %r970, %r971, %r972, %r973 };
	// end inline asm
	// begin inline asm
	@%p79 st.global.v4.b32 [ %rd214 + 0 ], { %r974, %r975, %r976, %r977 };
	// end inline asm
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r1105, %r1111, 1;
	setp.gt.s32 	%p61, %r1105, 2;
	selp.b32 	%r1111, 0, %r1105, %p61;
	.loc	1 195 22                        // wy_fast.py:195:22
	or.b64 	%rd224, %rd242, %rd1;
	or.b64 	%rd243, %rd224, %rd6;
	or.b64 	%rd244, %rd224, %rd7;
	or.b64 	%rd245, %rd224, %rd8;
	or.b64 	%rd246, %rd224, %rd9;
	shl.b64 	%rd225, %rd243, 1;
	add.s64 	%rd215, %rd54, %rd225;
	shl.b64 	%rd226, %rd244, 1;
	add.s64 	%rd216, %rd54, %rd226;
	shl.b64 	%rd227, %rd245, 1;
	add.s64 	%rd217, %rd54, %rd227;
	shl.b64 	%rd228, %rd246, 1;
	add.s64 	%rd218, %rd54, %rd228;
	shl.b32 	%r1106, %r1111, 13;
	add.s32 	%r1107, %r154, %r1106;
	add.s32 	%r978, %r1107, %r177;
	add.s32 	%r980, %r978, 2048;
	add.s32 	%r982, %r978, 4096;
	add.s32 	%r984, %r978, 6144;
	// begin inline asm
	cp.async.cg.shared.global [ %r978 + 0 ], [ %rd215 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r980 + 0 ], [ %rd216 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r982 + 0 ], [ %rd217 + 0 ], 0x10, %r629;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r984 + 0 ], [ %rd218 + 0 ], 0x10, %r629;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd242, 256;
	mov.pred 	%p71, 0;
	mov.pred 	%p72, %p71;
	mov.pred 	%p73, %p71;
	mov.pred 	%p74, %p71;
	mov.pred 	%p75, %p71;
	mov.pred 	%p76, %p15;
	mov.pred 	%p77, %p16;
	mov.pred 	%p78, %p17;
	mov.pred 	%p79, %p18;
	mov.b64 	%rd251, %rd61;
	mov.b64 	%rd252, %rd62;
	mov.b64 	%rd253, %rd63;
	mov.b64 	%rd254, %rd64;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p14 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
