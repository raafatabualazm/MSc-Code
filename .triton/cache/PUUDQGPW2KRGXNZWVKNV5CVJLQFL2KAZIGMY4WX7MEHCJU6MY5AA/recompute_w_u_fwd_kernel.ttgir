#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @recompute_w_u_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<128> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_9 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_10 = arith.constant dense<false> : tensor<64x64xi1, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.muli %4, %c32_i32 : i32 loc(#loc7)
    %6 = tt.addptr %arg2, %5 : !tt.ptr<bf16>, i32 loc(#loc8)
    %7 = tt.addptr %6, %3 : !tt.ptr<bf16>, i32 loc(#loc9)
    %8 = arith.muli %0, %c64_i32 : i32 loc(#loc10)
    %9 = arith.extsi %arg7 : i32 to i64 loc(#loc11)
    %10 = arith.extsi %8 : i32 to i64 loc(#loc11)
    %11 = tt.splat %7 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = tt.splat %10 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %15 = arith.extsi %13 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %16 = arith.extsi %14 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %17 = arith.addi %12, %15 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %18 = arith.muli %17, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %19 = tt.addptr %11, %18 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #blocked}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %20 = arith.cmpi sge, %17, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %21 = tt.splat %9 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %22 = arith.cmpi slt, %17, %21 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %23 = arith.andi %20, %22 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %24 = tt.load %19, %23 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %25 = arith.addi %5, %3 : i32 loc(#loc13)
    %26 = arith.muli %25, %c64_i32 : i32 loc(#loc14)
    %27 = tt.addptr %arg5, %26 : !tt.ptr<bf16>, i32 loc(#loc15)
    %28 = tt.splat %27 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc16)
    %29 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc16)
    %30 = arith.muli %29, %cst_1 : tensor<64x1xi64, #blocked> loc(#loc16)
    %31 = tt.broadcast %30 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc16)
    %32 = tt.expand_dims %16 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc16)
    %33 = tt.broadcast %32 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc16)
    %34 = arith.addi %31, %33 : tensor<64x64xi64, #blocked> loc(#loc16)
    %35 = tt.addptr %28, %34 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc16)
    %36 = arith.cmpi sge, %29, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc16)
    %37 = tt.splat %9 : i64 -> tensor<64x1xi64, #blocked> loc(#loc16)
    %38 = arith.cmpi slt, %29, %37 : tensor<64x1xi64, #blocked> loc(#loc16)
    %39 = arith.andi %36, %38 : tensor<64x1xi1, #blocked> loc(#loc16)
    %40 = tt.broadcast %39 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc16)
    %41 = arith.cmpi sge, %32, %cst_3 : tensor<1x64xi64, #blocked> loc(#loc16)
    %42 = arith.cmpi slt, %32, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc16)
    %43 = arith.andi %41, %42 : tensor<1x64xi1, #blocked> loc(#loc16)
    %44 = tt.broadcast %43 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc16)
    %45 = arith.andi %40, %44 : tensor<64x64xi1, #blocked> loc(#loc16)
    %46 = tt.load %35, %45 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc16)
    %47 = ttg.local_alloc %46 : (tensor<64x64xbf16, #blocked>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc16)
    %48 = arith.muli %25, %c128_i32 : i32 loc(#loc17)
    %49 = tt.addptr %arg1, %48 : !tt.ptr<bf16>, i32 loc(#loc18)
    %50 = tt.addptr %arg4, %48 : !tt.ptr<bf16>, i32 loc(#loc19)
    %51 = tt.splat %49 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %52 = arith.muli %29, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc20)
    %53 = tt.broadcast %52 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc20)
    %54 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xbf16, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xbf16, #blocked> loc(#loc21)
    %55 = tt.broadcast %54 : tensor<64x1xbf16, #blocked> -> tensor<64x64xbf16, #blocked> loc(#loc22)
    %56 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc23)
    %57 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc20)
    %58 = arith.addi %53, %33 : tensor<64x64xi64, #blocked> loc(#loc20)
    %59 = tt.addptr %51, %58 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc20)
    %60 = arith.cmpi slt, %32, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc20)
    %61 = arith.andi %41, %60 : tensor<1x64xi1, #blocked> loc(#loc20)
    %62 = tt.broadcast %61 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc20)
    %63 = arith.andi %40, %62 : tensor<64x64xi1, #blocked> loc(#loc20)
    %64 = ttg.memdesc_subview %57[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %65 = ttg.async_copy_global_to_local %59, %64 mask %63 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %66 = ttg.async_commit_group %65 loc(#loc20)
    %67 = arith.addi %16, %cst_8 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
    %68 = tt.expand_dims %67 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc20)
    %69 = tt.broadcast %68 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc20)
    %70 = arith.addi %53, %69 : tensor<64x64xi64, #blocked> loc(#loc20)
    %71 = tt.addptr %51, %70 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc20)
    %72 = arith.cmpi sge, %68, %cst_3 : tensor<1x64xi64, #blocked> loc(#loc20)
    %73 = arith.cmpi slt, %68, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc20)
    %74 = arith.andi %72, %73 : tensor<1x64xi1, #blocked> loc(#loc20)
    %75 = tt.broadcast %74 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc20)
    %76 = arith.andi %40, %75 : tensor<64x64xi1, #blocked> loc(#loc20)
    %77 = ttg.memdesc_subview %57[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %78 = ttg.async_copy_global_to_local %71, %77 mask %76 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %79 = ttg.async_commit_group %78 loc(#loc20)
    %80 = arith.addi %16, %cst_9 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
    %81 = tt.expand_dims %80 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc20)
    %82 = tt.broadcast %81 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc20)
    %83 = arith.addi %53, %82 : tensor<64x64xi64, #blocked> loc(#loc20)
    %84 = tt.addptr %51, %83 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc20)
    %85 = arith.cmpi sge, %81, %cst_3 : tensor<1x64xi64, #blocked> loc(#loc20)
    %86 = arith.cmpi slt, %81, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc20)
    %87 = arith.andi %85, %86 : tensor<1x64xi1, #blocked> loc(#loc20)
    %88 = tt.broadcast %87 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc20)
    %89 = arith.andi %40, %88 : tensor<64x64xi1, #blocked> loc(#loc20)
    %90 = ttg.memdesc_subview %57[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %91 = ttg.async_copy_global_to_local %84, %90 mask %cst_10 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
    %92 = ttg.async_commit_group %91 loc(#loc20)
    %93:11 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %c2_i32, %arg10 = %c-1_i32, %arg11 = %66, %arg12 = %79, %arg13 = %92, %arg14 = %58, %arg15 = %70, %arg16 = %83, %arg17 = %63, %arg18 = %76, %arg19 = %89) -> (i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>)  : i32 {
      %121 = arith.cmpi slt, %arg8, %c-1_i32 : i32 loc(#loc24)
      %122 = arith.addi %arg10, %c1_i32 : i32 loc(#loc24)
      %123 = arith.cmpi sge, %122, %c3_i32 : i32 loc(#loc24)
      %124 = arith.select %123, %c0_i32, %122 : i32 loc(#loc24)
      %125 = ttg.async_wait %arg11 {num = 2 : i32} loc(#loc20)
      %126 = ttg.memdesc_subview %57[%124, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
      %127 = ttg.local_load %126 token %125 : !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #blocked> loc(#loc20)
      %128 = arith.mulf %127, %55 : tensor<64x64xbf16, #blocked> loc(#loc22)
      %129 = ttg.local_alloc %128 : (tensor<64x64xbf16, #blocked>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc22)
      ttng.fence_async_shared {bCluster = false} loc(#loc25)
      %130 = ttng.warp_group_dot %47, %129, %cst_7 {isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc25)
      %131:3 = ttng.warp_group_dot_wait %130, %47, %129 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc25)
      %132 = arith.truncf %131#0 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc26)
      %133 = tt.addptr %56, %arg14 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc23)
      %134 = ttg.convert_layout %132 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked> loc(#loc23)
      tt.store %133, %134, %arg17 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc23)
      %135 = arith.addi %arg9, %c1_i32 : i32 loc(#loc24)
      %136 = arith.cmpi sge, %135, %c3_i32 : i32 loc(#loc24)
      %137 = arith.select %136, %c0_i32, %135 : i32 loc(#loc24)
      %138 = arith.addi %arg8, %c3_i32 : i32 loc(#loc24)
      %139 = arith.muli %138, %c64_i32 : i32 loc(#loc27)
      %140 = arith.extsi %139 : i32 to i64 loc(#loc28)
      %141 = tt.splat %140 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
      %142 = arith.addi %141, %16 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
      %143 = tt.expand_dims %142 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc20)
      %144 = tt.broadcast %143 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc20)
      %145 = arith.addi %53, %144 : tensor<64x64xi64, #blocked> loc(#loc20)
      %146 = tt.addptr %51, %145 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc20)
      %147 = arith.cmpi sge, %143, %cst_3 : tensor<1x64xi64, #blocked> loc(#loc20)
      %148 = arith.cmpi slt, %143, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc20)
      %149 = arith.andi %147, %148 : tensor<1x64xi1, #blocked> loc(#loc20)
      %150 = tt.broadcast %149 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc20)
      %151 = arith.andi %40, %150 : tensor<64x64xi1, #blocked> loc(#loc20)
      %152 = ttg.memdesc_subview %57[%137, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
      %153 = tt.splat %121 : i1 -> tensor<64x64xi1, #blocked> loc(#loc24)
      %154 = arith.andi %153, %151 : tensor<64x64xi1, #blocked> loc(#loc24)
      %155 = ttg.async_copy_global_to_local %146, %152 mask %154 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc20)
      %156 = ttg.async_commit_group %155 loc(#loc20)
      scf.yield %137, %124, %arg12, %arg13, %156, %arg15, %arg16, %145, %arg18, %arg19, %151 : i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked> loc(#loc24)
    } loc(#loc24)
    %94 = ttg.async_wait  {num = 0 : i32} loc(#loc24)
    ttg.local_dealloc %57 : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc24)
    %95 = tt.addptr %arg6, %25 : !tt.ptr<f32>, i32 loc(#loc29)
    %96 = tt.splat %95 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %97 = tt.addptr %96, %18 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %98 = tt.load %97, %23 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %99 = math.exp %98 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %100 = tt.addptr %arg0, %48 : !tt.ptr<bf16>, i32 loc(#loc32)
    %101 = tt.addptr %arg3, %48 : !tt.ptr<bf16>, i32 loc(#loc33)
    %102 = tt.splat %100 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc34)
    %103 = tt.expand_dims %99 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc35)
    %104 = tt.broadcast %103 : tensor<64x1xf32, #blocked> -> tensor<64x64xf32, #blocked> loc(#loc36)
    %105 = tt.splat %101 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc37)
    %106 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc34)
    %107 = tt.addptr %102, %58 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc34)
    %108 = ttg.memdesc_subview %106[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %109 = ttg.async_copy_global_to_local %107, %108 mask %63 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %110 = ttg.async_commit_group %109 loc(#loc34)
    %111 = tt.addptr %102, %70 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc34)
    %112 = ttg.memdesc_subview %106[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %113 = ttg.async_copy_global_to_local %111, %112 mask %76 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %114 = ttg.async_commit_group %113 loc(#loc34)
    %115 = tt.addptr %102, %83 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc34)
    %116 = ttg.memdesc_subview %106[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %117 = ttg.async_copy_global_to_local %115, %116 mask %cst_10 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
    %118 = ttg.async_commit_group %117 loc(#loc34)
    %119:11 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %c2_i32, %arg10 = %c-1_i32, %arg11 = %110, %arg12 = %114, %arg13 = %118, %arg14 = %58, %arg15 = %70, %arg16 = %83, %arg17 = %63, %arg18 = %76, %arg19 = %89) -> (i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>)  : i32 {
      %121 = arith.cmpi slt, %arg8, %c-1_i32 : i32 loc(#loc38)
      %122 = arith.addi %arg10, %c1_i32 : i32 loc(#loc38)
      %123 = arith.cmpi sge, %122, %c3_i32 : i32 loc(#loc38)
      %124 = arith.select %123, %c0_i32, %122 : i32 loc(#loc38)
      %125 = ttg.async_wait %arg11 {num = 2 : i32} loc(#loc34)
      %126 = ttg.memdesc_subview %106[%124, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
      %127 = ttg.local_load %126 token %125 : !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> -> tensor<64x64xbf16, #blocked> loc(#loc34)
      %128 = arith.mulf %127, %55 : tensor<64x64xbf16, #blocked> loc(#loc39)
      %129 = arith.extf %128 : tensor<64x64xbf16, #blocked> to tensor<64x64xf32, #blocked> loc(#loc36)
      %130 = arith.mulf %129, %104 : tensor<64x64xf32, #blocked> loc(#loc36)
      %131 = arith.truncf %130 : tensor<64x64xf32, #blocked> to tensor<64x64xbf16, #blocked> loc(#loc40)
      %132 = ttg.local_alloc %131 : (tensor<64x64xbf16, #blocked>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc40)
      ttng.fence_async_shared {bCluster = false} loc(#loc41)
      %133 = ttng.warp_group_dot %47, %132, %cst_7 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc41)
      %134:3 = ttng.warp_group_dot_wait %133, %47, %132 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc41)
      %135 = arith.truncf %134#0 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc42)
      %136 = tt.addptr %105, %arg14 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
      %137 = ttg.convert_layout %135 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked> loc(#loc37)
      tt.store %136, %137, %arg17 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc37)
      %138 = arith.addi %arg9, %c1_i32 : i32 loc(#loc38)
      %139 = arith.cmpi sge, %138, %c3_i32 : i32 loc(#loc38)
      %140 = arith.select %139, %c0_i32, %138 : i32 loc(#loc38)
      %141 = arith.addi %arg8, %c3_i32 : i32 loc(#loc38)
      %142 = arith.muli %141, %c64_i32 : i32 loc(#loc43)
      %143 = arith.extsi %142 : i32 to i64 loc(#loc44)
      %144 = tt.splat %143 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc34)
      %145 = arith.addi %144, %16 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc34)
      %146 = tt.expand_dims %145 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc34)
      %147 = tt.broadcast %146 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc34)
      %148 = arith.addi %53, %147 : tensor<64x64xi64, #blocked> loc(#loc34)
      %149 = tt.addptr %102, %148 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc34)
      %150 = arith.cmpi sge, %146, %cst_3 : tensor<1x64xi64, #blocked> loc(#loc34)
      %151 = arith.cmpi slt, %146, %cst_6 : tensor<1x64xi64, #blocked> loc(#loc34)
      %152 = arith.andi %150, %151 : tensor<1x64xi1, #blocked> loc(#loc34)
      %153 = tt.broadcast %152 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc34)
      %154 = arith.andi %40, %153 : tensor<64x64xi1, #blocked> loc(#loc34)
      %155 = ttg.memdesc_subview %106[%140, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
      %156 = tt.splat %121 : i1 -> tensor<64x64xi1, #blocked> loc(#loc38)
      %157 = arith.andi %156, %154 : tensor<64x64xi1, #blocked> loc(#loc38)
      %158 = ttg.async_copy_global_to_local %149, %155 mask %157 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared1, #smem, mutable, 3x64x64> loc(#loc34)
      %159 = ttg.async_commit_group %158 loc(#loc34)
      scf.yield %140, %124, %arg12, %arg13, %159, %arg15, %arg16, %148, %arg18, %arg19, %154 : i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi64, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked>, tensor<64x64xi1, #blocked> loc(#loc38)
    } loc(#loc38)
    %120 = ttg.async_wait  {num = 0 : i32} loc(#loc38)
    ttg.local_dealloc %106 : !ttg.memdesc<3x64x64xbf16, #shared1, #smem, mutable> loc(#loc38)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:42)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:38)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:46)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:70)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:83)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":175:21)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:41)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:48)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:32)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":178:18)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:52)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:36)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:36)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":183:22)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:29)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:22)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:22)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":180:21)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":185:26)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:29)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:90)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:105)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:37)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:18)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:36)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:36)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":195:22)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:24)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:20)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:21)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:34)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:26)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:29)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:90)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:105)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:4)
