//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_gated_delta_rule_fwd_kernel_h_blockdim64 // -- Begin function chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.visible .entry chunk_gated_delta_rule_fwd_kernel_h_blockdim64(
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6,
	.param .u32 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_8
)
.reqntid 128
{
	.reg .pred 	%p<90>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<2404>;
	.reg .b64 	%rd<278>;
	.loc	1 36 0                          // chunk_delta_h.py:36:0
$L__func_begin0:
	.loc	1 36 0                          // chunk_delta_h.py:36:0

// %bb.0:
	ld.param.b32 	%r250, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7];
	ld.param.b64 	%rd53, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6];
	ld.param.b64 	%rd52, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4];
	ld.param.b64 	%rd50, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2];
	ld.param.b64 	%rd49, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1];
	ld.param.b64 	%rd48, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0];
$L__tmp0:
	.loc	1 61 30                         // chunk_delta_h.py:61:30
	mov.u32 	%r296, %ctaid.x;
	.loc	1 61 48                         // chunk_delta_h.py:61:48
	mov.u32 	%r1, %ctaid.y;
	.loc	1 62 33                         // chunk_delta_h.py:62:33
	and.b32 	%r297, %r1, 31;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_delta_h.py:70:24 ]
	add.s32 	%r298, %r250, 63;
$L__tmp2:
	.loc	1 71 20                         // chunk_delta_h.py:71:20
	shl.b32 	%r3, %r1, 14;
	.loc	1 69 25                         // chunk_delta_h.py:69:25
	and.b32 	%r306, %r1, 65504;
	.loc	1 84 16                         // chunk_delta_h.py:84:16
	mul.lo.s32 	%r307, %r306, %r250;
	.loc	1 84 20                         // chunk_delta_h.py:84:20
	or.b32 	%r308, %r307, %r297;
	.loc	1 84 27                         // chunk_delta_h.py:84:27
	shl.b32 	%r309, %r308, 7;
	.loc	1 84 9                          // chunk_delta_h.py:84:9
	mul.wide.s32 	%rd78, %r309, 2;
	add.s64 	%rd79, %rd49, %rd78;
	.loc	1 85 9                          // chunk_delta_h.py:85:9
	add.s64 	%rd80, %rd48, %rd78;
	.loc	1 86 9                          // chunk_delta_h.py:86:9
	add.s64 	%rd81, %rd50, %rd78;
	.loc	1 113 79                        // chunk_delta_h.py:113:79
	shl.b32 	%r310, %r296, 6;
	.loc	1 113 94                        // chunk_delta_h.py:113:94
	cvt.s64.s32 	%rd2, %r310;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	mov.u32 	%r4, %tid.x;
	bfe.s32 	%r311, %r4, 3, 1;
	and.b32 	%r7, %r4, 16;
	bfe.s32 	%r312, %r4, 4, 1;
	bfe.s32 	%r313, %r4, 5, 1;
	and.b32 	%r9, %r4, 64;
	bfe.u32 	%r314, %r4, 3, 4;
	or.b32 	%r315, %r314, 16;
	or.b32 	%r316, %r314, 32;
	or.b32 	%r317, %r314, 48;
	shl.b32 	%r10, %r4, 3;
	and.b32 	%r11, %r10, 24;
	and.b32 	%r12, %r4, 4;
	shl.b32 	%r13, %r12, 3;
	or.b32 	%r14, %r11, %r13;
	shr.u32 	%r15, %r4, 2;
	bfe.u32 	%r16, %r4, 2, 3;
	shr.u32 	%r318, %r4, 1;
	and.b32 	%r17, %r318, 48;
	or.b32 	%r319, %r17, %r16;
	or.b32 	%r320, %r319, 8;
	cvt.u64.u32 	%rd82, %r14;
	or.b64 	%rd7, %rd82, %rd2;
	setp.gt.s32 	%p16, %r310, -1;
	setp.lt.s64 	%p17, %rd7, 128;
	and.pred 	%p27, %p16, %p17;
	.loc	1 150 35                        // chunk_delta_h.py:150:35
	mul.wide.s32 	%rd83, %r307, 4;
	add.s64 	%rd84, %rd52, %rd83;
	.loc	1 151 50                        // chunk_delta_h.py:151:50
	mul.wide.u32 	%rd85, %r297, 4;
	add.s64 	%rd11, %rd84, %rd85;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s32 	%p18, %r298, 64;
	setp.gt.s32 	%p19, %r298, 63;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	mul.wide.u32 	%rd86, %r314, 4096;
	mul.wide.u32 	%rd87, %r315, 4096;
	mul.wide.u32 	%rd88, %r316, 4096;
	mul.wide.u32 	%rd89, %r317, 4096;
	or.b64 	%rd90, %rd86, %rd82;
	or.b64 	%rd91, %rd87, %rd82;
	or.b64 	%rd92, %rd88, %rd82;
	or.b64 	%rd93, %rd89, %rd82;
	shl.b64 	%rd94, %rd90, 1;
	add.s64 	%rd54, %rd81, %rd94;
	shl.b64 	%rd95, %rd91, 1;
	add.s64 	%rd55, %rd81, %rd95;
	shl.b64 	%rd96, %rd92, 1;
	add.s64 	%rd56, %rd81, %rd96;
	shl.b64 	%rd97, %rd93, 1;
	add.s64 	%rd57, %rd81, %rd97;
	setp.lt.s32 	%p20, %r314, %r250;
	setp.lt.s32 	%p21, %r315, %r250;
	setp.lt.s32 	%p22, %r316, %r250;
	setp.lt.s32 	%p23, %r317, %r250;
	and.b32 	%r321, %r311, 72;
	and.b32 	%r322, %r312, 144;
	and.b32 	%r323, %r313, 288;
	shl.b32 	%r18, %r9, 3;
	or.b32 	%r324, %r321, %r18;
	xor.b32 	%r325, %r324, %r14;
	xor.b32 	%r326, %r325, %r322;
	xor.b32 	%r19, %r326, %r323;
	shl.b32 	%r327, %r19, 1;
	mov.b32 	%r328, global_smem;
	add.s32 	%r251, %r328, %r327;
	or.b32 	%r329, %r14, 1024;
	or.b32 	%r330, %r324, %r322;
	or.b32 	%r331, %r330, %r323;
	xor.b32 	%r20, %r331, %r329;
	shl.b32 	%r332, %r20, 1;
	add.s32 	%r253, %r328, %r332;
	or.b32 	%r333, %r14, 2048;
	xor.b32 	%r21, %r331, %r333;
	shl.b32 	%r334, %r21, 1;
	add.s32 	%r255, %r328, %r334;
	or.b32 	%r335, %r14, 3072;
	xor.b32 	%r22, %r331, %r335;
	shl.b32 	%r336, %r22, 1;
	add.s32 	%r257, %r328, %r336;
	selp.b32 	%r337, 16, 0, %p19;
	selp.b32 	%r260, %r337, 0, %p20;
	// begin inline asm
	cp.async.cg.shared.global [ %r251 + 0 ], [ %rd54 + 0 ], 0x10, %r260;
	// end inline asm
	selp.b32 	%r262, %r337, 0, %p21;
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd55 + 0 ], 0x10, %r262;
	// end inline asm
	selp.b32 	%r264, %r337, 0, %p22;
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd56 + 0 ], 0x10, %r264;
	// end inline asm
	selp.b32 	%r266, %r337, 0, %p23;
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd57 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd58, %rd54, 128;
	add.s64 	%rd59, %rd55, 128;
	add.s64 	%rd60, %rd56, 128;
	add.s64 	%rd61, %rd57, 128;
	add.s32 	%r338, %r328, 16384;
	add.s32 	%r259, %r338, %r327;
	add.s32 	%r261, %r338, %r332;
	add.s32 	%r263, %r338, %r334;
	add.s32 	%r265, %r338, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd58 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd59 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r263 + 0 ], [ %rd60 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r265 + 0 ], [ %rd61 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd98, %rd7, %rd86;
	add.s64 	%rd99, %rd87, %rd7;
	add.s64 	%rd100, %rd88, %rd7;
	add.s64 	%rd101, %rd89, %rd7;
	shl.b64 	%rd102, %rd98, 1;
	add.s64 	%rd62, %rd79, %rd102;
	shl.b64 	%rd103, %rd99, 1;
	add.s64 	%rd63, %rd79, %rd103;
	shl.b64 	%rd104, %rd100, 1;
	add.s64 	%rd64, %rd79, %rd104;
	shl.b64 	%rd105, %rd101, 1;
	add.s64 	%rd65, %rd79, %rd105;
	and.pred 	%p89, %p27, %p20;
	and.pred 	%p88, %p27, %p21;
	and.pred 	%p87, %p27, %p22;
	and.pred 	%p86, %p27, %p23;
	and.b32 	%r339, %r4, 56;
	xor.b32 	%r340, %r14, %r339;
	shl.b32 	%r341, %r340, 1;
	add.s32 	%r342, %r328, %r341;
	shl.b32 	%r343, %r314, 7;
	add.s32 	%r344, %r342, %r343;
	add.s32 	%r267, %r344, 82944;
	add.s32 	%r269, %r344, 84992;
	add.s32 	%r271, %r344, 87040;
	add.s32 	%r273, %r344, 89088;
	selp.b32 	%r345, 16, 0, %p89;
	selp.b32 	%r268, %r345, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd62 + 0 ], 0x10, %r268;
	// end inline asm
	selp.b32 	%r346, 16, 0, %p88;
	selp.b32 	%r270, %r346, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd63 + 0 ], 0x10, %r270;
	// end inline asm
	selp.b32 	%r347, 16, 0, %p87;
	selp.b32 	%r272, %r347, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd64 + 0 ], 0x10, %r272;
	// end inline asm
	selp.b32 	%r348, 16, 0, %p86;
	selp.b32 	%r274, %r348, 0, %p19;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd65 + 0 ], 0x10, %r274;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	mul.wide.u32 	%rd106, %r319, 128;
	add.s64 	%rd66, %rd11, %rd106;
	mul.wide.u32 	%rd107, %r320, 128;
	add.s64 	%rd67, %rd11, %rd107;
	setp.lt.s32 	%p24, %r319, %r250;
	setp.lt.s32 	%p25, %r320, %r250;
	shl.b32 	%r349, %r319, 2;
	add.s32 	%r350, %r328, %r349;
	add.s32 	%r275, %r350, 99328;
	add.s32 	%r277, %r350, 99360;
	and.b32 	%r29, %r4, 3;
	setp.eq.s32 	%p14, %r29, 0;
	selp.b32 	%r351, 4, 0, %p19;
	selp.b32 	%r276, %r351, 0, %p24;
	// begin inline asm
	@%p14 cp.async.ca.shared.global [ %r275 + 0 ], [ %rd66 + 0 ], 0x4, %r276;
	// end inline asm
	selp.b32 	%r278, %r351, 0, %p25;
	// begin inline asm
	@%p14 cp.async.ca.shared.global [ %r277 + 0 ], [ %rd67 + 0 ], 0x4, %r278;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd68, %rd80, %rd94;
	add.s64 	%rd69, %rd80, %rd95;
	add.s64 	%rd70, %rd80, %rd96;
	add.s64 	%rd71, %rd80, %rd97;
	add.s32 	%r352, %r328, 32768;
	add.s32 	%r279, %r352, %r327;
	add.s32 	%r281, %r352, %r332;
	add.s32 	%r283, %r352, %r334;
	add.s32 	%r285, %r352, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd68 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd69 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd70 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd71 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd72, %rd68, 128;
	add.s64 	%rd73, %rd69, 128;
	add.s64 	%rd74, %rd70, 128;
	add.s64 	%rd75, %rd71, 128;
	add.s32 	%r353, %r328, 49152;
	add.s32 	%r287, %r353, %r327;
	add.s32 	%r289, %r353, %r332;
	add.s32 	%r291, %r353, %r334;
	add.s32 	%r293, %r353, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd72 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd73 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd74 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd75 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1325, 0f00000000;
	mov.b32 	%r1326, %r1325;
	mov.b32 	%r1327, %r1325;
	mov.b32 	%r1328, %r1325;
	mov.b32 	%r1329, %r1325;
	mov.b32 	%r1330, %r1325;
	mov.b32 	%r1331, %r1325;
	mov.b32 	%r1332, %r1325;
	mov.b32 	%r1333, %r1325;
	mov.b32 	%r1334, %r1325;
	mov.b32 	%r1335, %r1325;
	mov.b32 	%r1336, %r1325;
	mov.b32 	%r1337, %r1325;
	mov.b32 	%r1338, %r1325;
	mov.b32 	%r1339, %r1325;
	mov.b32 	%r1340, %r1325;
	mov.b32 	%r1341, %r1325;
	mov.b32 	%r1342, %r1325;
	mov.b32 	%r1343, %r1325;
	mov.b32 	%r1344, %r1325;
	mov.b32 	%r1345, %r1325;
	mov.b32 	%r1346, %r1325;
	mov.b32 	%r1347, %r1325;
	mov.b32 	%r1348, %r1325;
	mov.b32 	%r1349, %r1325;
	mov.b32 	%r1350, %r1325;
	mov.b32 	%r1351, %r1325;
	mov.b32 	%r1352, %r1325;
	mov.b32 	%r1353, %r1325;
	mov.b32 	%r1354, %r1325;
	mov.b32 	%r1355, %r1325;
	mov.b32 	%r1356, %r1325;
	mov.b32 	%r1657, %r1325;
	mov.b32 	%r1658, %r1325;
	mov.b32 	%r1659, %r1325;
	mov.b32 	%r1660, %r1325;
	mov.b32 	%r1661, %r1325;
	mov.b32 	%r1662, %r1325;
	mov.b32 	%r1663, %r1325;
	mov.b32 	%r1664, %r1325;
	mov.b32 	%r1665, %r1325;
	mov.b32 	%r1666, %r1325;
	mov.b32 	%r1667, %r1325;
	mov.b32 	%r1668, %r1325;
	mov.b32 	%r1669, %r1325;
	mov.b32 	%r1670, %r1325;
	mov.b32 	%r1671, %r1325;
	mov.b32 	%r1672, %r1325;
	mov.b32 	%r1673, %r1325;
	mov.b32 	%r1674, %r1325;
	mov.b32 	%r1675, %r1325;
	mov.b32 	%r1676, %r1325;
	mov.b32 	%r1677, %r1325;
	mov.b32 	%r1678, %r1325;
	mov.b32 	%r1679, %r1325;
	mov.b32 	%r1680, %r1325;
	mov.b32 	%r1681, %r1325;
	mov.b32 	%r1682, %r1325;
	mov.b32 	%r1683, %r1325;
	mov.b32 	%r1684, %r1325;
	mov.b32 	%r1685, %r1325;
	mov.b32 	%r1686, %r1325;
	mov.b32 	%r1687, %r1325;
	mov.b32 	%r1688, %r1325;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	@%p18 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	ld.param.b64 	%rd51, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3];
	shr.s32 	%r299, %r298, 31;
	shr.u32 	%r300, %r299, 26;
	add.s32 	%r301, %r298, %r300;
	shr.s32 	%r2, %r301, 6;
	ld.param.b64 	%rd76, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5];
	and.b32 	%r302, %r3, 1073217536;
	mul.lo.s32 	%r303, %r302, %r2;
	shl.b32 	%r304, %r297, 14;
	or.b32 	%r305, %r303, %r304;
	mul.wide.s32 	%rd77, %r305, 2;
	add.s64 	%rd1, %rd76, %rd77;
	shr.u32 	%r5, %r4, 5;
	and.b32 	%r6, %r4, 8;
	and.b32 	%r8, %r4, 32;
	cvt.u64.u32 	%rd3, %r314;
	cvt.u64.u32 	%rd4, %r315;
	cvt.u64.u32 	%rd5, %r316;
	cvt.u64.u32 	%rd6, %r317;
	cvt.s64.s32 	%rd8, %r250;
	cvt.s64.s32 	%rd9, %r307;
	cvt.u64.u32 	%rd10, %r297;
	cvt.u32.u64 	%r357, %rd10;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.eq.s32 	%p26, %r12, 0;
	add.s32 	%r358, %r2, -1;
	mul.lo.s32 	%r359, %r29, 72;
	selp.b32 	%r360, 0, 288, %p26;
	xor.b32 	%r361, %r360, %r359;
	shl.b32 	%r362, %r6, 6;
	or.b32 	%r363, %r361, %r362;
	shr.u32 	%r364, %r7, 1;
	xor.b32 	%r365, %r363, %r364;
	shl.b32 	%r366, %r8, 5;
	or.b32 	%r367, %r365, %r366;
	shl.b32 	%r368, %r9, 5;
	xor.b32 	%r369, %r367, %r368;
	shl.b32 	%r370, %r369, 1;
	add.s32 	%r372, %r328, 74752;
	add.s32 	%r440, %r372, %r370;
	xor.b32 	%r373, %r369, 16;
	shl.b32 	%r374, %r373, 1;
	add.s32 	%r445, %r372, %r374;
	xor.b32 	%r375, %r369, 32;
	shl.b32 	%r376, %r375, 1;
	add.s32 	%r450, %r372, %r376;
	xor.b32 	%r377, %r369, 48;
	shl.b32 	%r378, %r377, 1;
	add.s32 	%r455, %r372, %r378;
	shl.b64 	%rd12, %rd3, 8;
	shl.b64 	%rd13, %rd4, 8;
	shl.b64 	%rd14, %rd5, 8;
	shl.b64 	%rd15, %rd6, 8;
	shl.b32 	%r379, %r4, 6;
	and.b32 	%r380, %r379, 448;
	or.b32 	%r381, %r380, %r362;
	or.b32 	%r382, %r381, %r364;
	or.b32 	%r383, %r382, %r366;
	or.b32 	%r384, %r383, %r368;
	and.b32 	%r385, %r10, 448;
	or.b32 	%r386, %r14, %r385;
	or.b32 	%r387, %r386, %r18;
	shr.u32 	%r388, %r384, 2;
	and.b32 	%r389, %r388, 536870896;
	add.s32 	%r1590, %r328, 65536;
	add.s32 	%r391, %r1590, %r389;
	shl.b32 	%r392, %r384, 1;
	add.s32 	%r460, %r391, %r392;
	add.s32 	%r465, %r460, 32;
	add.s32 	%r470, %r460, 64;
	add.s32 	%r475, %r460, 96;
	shr.u32 	%r393, %r387, 2;
	and.b32 	%r394, %r393, 240;
	add.s32 	%r395, %r1590, %r394;
	shl.b32 	%r396, %r387, 1;
	add.s32 	%r38, %r395, %r396;
	or.b32 	%r397, %r387, 1024;
	shr.u32 	%r398, %r397, 2;
	and.b32 	%r399, %r398, 496;
	add.s32 	%r400, %r1590, %r399;
	add.s32 	%r39, %r400, %r396;
	or.b32 	%r401, %r387, 2048;
	shr.u32 	%r402, %r401, 2;
	and.b32 	%r403, %r402, 752;
	add.s32 	%r404, %r1590, %r403;
	add.s32 	%r40, %r404, %r396;
	or.b32 	%r405, %r387, 3072;
	shr.u32 	%r406, %r405, 2;
	and.b32 	%r407, %r406, 1008;
	add.s32 	%r408, %r1590, %r407;
	add.s32 	%r41, %r408, %r396;
	add.s32 	%r409, %r328, 91136;
	add.s32 	%r496, %r409, %r370;
	add.s32 	%r501, %r409, %r374;
	add.s32 	%r506, %r409, %r376;
	add.s32 	%r511, %r409, %r378;
	bfe.u32 	%r410, %r372, 4, 14;
	cvt.u64.u32 	%rd109, %r410;
	or.b64 	%rd155, %rd109, 4611686293338849280;
	add.s32 	%r411, %r328, 76800;
	bfe.u32 	%r412, %r411, 4, 14;
	cvt.u64.u32 	%rd110, %r412;
	or.b64 	%rd157, %rd110, 4611686293338849280;
	add.s32 	%r413, %r328, 78848;
	bfe.u32 	%r414, %r413, 4, 14;
	cvt.u64.u32 	%rd111, %r414;
	or.b64 	%rd159, %rd111, 4611686293338849280;
	add.s32 	%r415, %r328, 80896;
	bfe.u32 	%r416, %r415, 4, 14;
	cvt.u64.u32 	%rd112, %r416;
	or.b64 	%rd161, %rd112, 4611686293338849280;
	bfe.u32 	%r417, %r409, 4, 14;
	cvt.u64.u32 	%rd113, %r417;
	or.b64 	%rd163, %rd113, 4611686293338849280;
	add.s32 	%r418, %r328, 93184;
	bfe.u32 	%r419, %r418, 4, 14;
	cvt.u64.u32 	%rd114, %r419;
	or.b64 	%rd165, %rd114, 4611686293338849280;
	add.s32 	%r420, %r328, 95232;
	bfe.u32 	%r421, %r420, 4, 14;
	cvt.u64.u32 	%rd115, %r421;
	or.b64 	%rd167, %rd115, 4611686293338849280;
	add.s32 	%r422, %r328, 97280;
	bfe.u32 	%r423, %r422, 4, 14;
	cvt.u64.u32 	%rd116, %r423;
	or.b64 	%rd169, %rd116, 4611686293338849280;
	add.s32 	%r1241, %r1590, %r370;
	add.s32 	%r1246, %r1590, %r374;
	add.s32 	%r1251, %r1590, %r376;
	add.s32 	%r1256, %r1590, %r378;
	bfe.u32 	%r424, %r1590, 4, 14;
	cvt.u64.u32 	%rd117, %r424;
	or.b64 	%rd176, %rd117, 4611686293338849280;
	add.s32 	%r425, %r328, 67584;
	bfe.u32 	%r426, %r425, 4, 14;
	cvt.u64.u32 	%rd118, %r426;
	or.b64 	%rd178, %rd118, 4611686293338849280;
	add.s32 	%r427, %r328, 69632;
	bfe.u32 	%r428, %r427, 4, 14;
	cvt.u64.u32 	%rd119, %r428;
	or.b64 	%rd180, %rd119, 4611686293338849280;
	add.s32 	%r429, %r328, 71680;
	bfe.u32 	%r430, %r429, 4, 14;
	cvt.u64.u32 	%rd120, %r430;
	or.b64 	%rd182, %rd120, 4611686293338849280;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cvt.s64.s32 	%rd28, %r358;
	cvt.u64.u32 	%rd29, %r2;
	add.s32 	%r431, %r328, 82944;
	add.s32 	%r1188, %r431, %r370;
	add.s32 	%r1193, %r431, %r374;
	add.s32 	%r1198, %r431, %r376;
	add.s32 	%r1203, %r431, %r378;
	add.s32 	%r432, %r17, %r16;
	add.s32 	%r433, %r432, 8;
	cvt.u64.u32 	%rd30, %r433;
	mul.wide.u32 	%rd121, %r433, 128;
	shl.b64 	%rd122, %rd9, 2;
	add.s64 	%rd123, %rd121, %rd122;
	shl.b64 	%rd124, %rd10, 2;
	add.s64 	%rd125, %rd123, %rd124;
	add.s64 	%rd126, %rd125, %rd52;
	add.s64 	%rd275, %rd126, 8192;
	cvt.u64.u32 	%rd32, %r432;
	mul.wide.u32 	%rd127, %r432, 128;
	add.s64 	%rd128, %rd127, %rd122;
	add.s64 	%rd129, %rd128, %rd124;
	add.s64 	%rd130, %rd129, %rd52;
	add.s64 	%rd274, %rd130, 8192;
	shl.b64 	%rd131, %rd3, 13;
	shr.u32 	%r434, %r1, 5;
	mul.lo.s32 	%r435, %r250, %r434;
	shl.b32 	%r436, %r435, 12;
	shl.b32 	%r437, %r357, 7;
	or.b32 	%r438, %r436, %r437;
	cvt.s64.s32 	%rd132, %r438;
	add.s32 	%r439, %r13, %r11;
	cvt.u64.u32 	%rd133, %r439;
	or.b64 	%rd134, %rd132, %rd133;
	shl.b64 	%rd135, %rd134, 1;
	add.s64 	%rd136, %rd131, %rd135;
	add.s64 	%rd34, %rd48, %rd136;
	add.s64 	%rd35, %rd50, %rd136;
	add.s64 	%rd137, %rd134, %rd2;
	shl.b64 	%rd138, %rd137, 1;
	add.s64 	%rd139, %rd131, %rd138;
	add.s64 	%rd36, %rd49, %rd139;
	shl.b64 	%rd140, %rd2, 1;
	add.s64 	%rd141, %rd131, %rd140;
	mul.wide.s32 	%rd142, %r438, 2;
	add.s64 	%rd143, %rd141, %rd142;
	mul.wide.u32 	%rd144, %r439, 2;
	add.s64 	%rd145, %rd143, %rd144;
	add.s64 	%rd37, %rd51, %rd145;
	mov.b32 	%r1657, 0f00000000;
	mov.b32 	%r847, 0;
	mov.b32 	%r2274, -1;
	mov.b64 	%rd273, 0;
	mov.b64 	%rd276, %rd273;
	mov.b64 	%rd277, %rd273;
	mov.b32 	%r2275, %r847;
	mov.b32 	%r1658, %r1657;
	mov.b32 	%r1659, %r1657;
	mov.b32 	%r1660, %r1657;
	mov.b32 	%r1661, %r1657;
	mov.b32 	%r1662, %r1657;
	mov.b32 	%r1663, %r1657;
	mov.b32 	%r1664, %r1657;
	mov.b32 	%r1665, %r1657;
	mov.b32 	%r1666, %r1657;
	mov.b32 	%r1667, %r1657;
	mov.b32 	%r1668, %r1657;
	mov.b32 	%r1669, %r1657;
	mov.b32 	%r1670, %r1657;
	mov.b32 	%r1671, %r1657;
	mov.b32 	%r1672, %r1657;
	mov.b32 	%r1673, %r1657;
	mov.b32 	%r1674, %r1657;
	mov.b32 	%r1675, %r1657;
	mov.b32 	%r1676, %r1657;
	mov.b32 	%r1677, %r1657;
	mov.b32 	%r1678, %r1657;
	mov.b32 	%r1679, %r1657;
	mov.b32 	%r1680, %r1657;
	mov.b32 	%r1681, %r1657;
	mov.b32 	%r1682, %r1657;
	mov.b32 	%r1683, %r1657;
	mov.b32 	%r1684, %r1657;
	mov.b32 	%r1685, %r1657;
	mov.b32 	%r1686, %r1657;
	mov.b32 	%r1687, %r1657;
	mov.b32 	%r1688, %r1657;
	mov.b32 	%r1325, %r1657;
	mov.b32 	%r1326, %r1657;
	mov.b32 	%r1327, %r1657;
	mov.b32 	%r1328, %r1657;
	mov.b32 	%r1329, %r1657;
	mov.b32 	%r1330, %r1657;
	mov.b32 	%r1331, %r1657;
	mov.b32 	%r1332, %r1657;
	mov.b32 	%r1333, %r1657;
	mov.b32 	%r1334, %r1657;
	mov.b32 	%r1335, %r1657;
	mov.b32 	%r1336, %r1657;
	mov.b32 	%r1337, %r1657;
	mov.b32 	%r1338, %r1657;
	mov.b32 	%r1339, %r1657;
	mov.b32 	%r1340, %r1657;
	mov.b32 	%r1341, %r1657;
	mov.b32 	%r1342, %r1657;
	mov.b32 	%r1343, %r1657;
	mov.b32 	%r1344, %r1657;
	mov.b32 	%r1345, %r1657;
	mov.b32 	%r1346, %r1657;
	mov.b32 	%r1347, %r1657;
	mov.b32 	%r1348, %r1657;
	mov.b32 	%r1349, %r1657;
	mov.b32 	%r1350, %r1657;
	mov.b32 	%r1351, %r1657;
	mov.b32 	%r1352, %r1657;
	mov.b32 	%r1353, %r1657;
	mov.b32 	%r1354, %r1657;
	mov.b32 	%r1355, %r1657;
	mov.b32 	%r1356, %r1657;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	setp.lt.s64 	%p56, %rd277, %rd28;
	add.s32 	%r1969, %r2274, 1;
	setp.gt.s32 	%p57, %r1969, 1;
	selp.b32 	%r2274, 0, %r1969, %p57;
	cvt.u32.u64 	%r1970, %rd273;
	.loc	1 113 37                        // chunk_delta_h.py:113:37
	mul.wide.s32 	%rd213, %r1970, 2;
	add.s64 	%rd214, %rd1, %rd213;
	.loc	1 114 31                        // chunk_delta_h.py:114:31
	cvt.rn.bf16x2.f32 	%r461, %r1326, %r1325;
	cvt.rn.bf16x2.f32 	%r462, %r1328, %r1327;
	cvt.rn.bf16x2.f32 	%r463, %r1330, %r1329;
	cvt.rn.bf16x2.f32 	%r464, %r1332, %r1331;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r440], {%r461, %r462, %r463, %r464};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r466, %r1334, %r1333;
	cvt.rn.bf16x2.f32 	%r467, %r1336, %r1335;
	cvt.rn.bf16x2.f32 	%r468, %r1338, %r1337;
	cvt.rn.bf16x2.f32 	%r469, %r1340, %r1339;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r445], {%r466, %r467, %r468, %r469};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r471, %r1342, %r1341;
	cvt.rn.bf16x2.f32 	%r472, %r1344, %r1343;
	cvt.rn.bf16x2.f32 	%r473, %r1346, %r1345;
	cvt.rn.bf16x2.f32 	%r474, %r1348, %r1347;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r450], {%r471, %r472, %r473, %r474};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r476, %r1350, %r1349;
	cvt.rn.bf16x2.f32 	%r477, %r1352, %r1351;
	cvt.rn.bf16x2.f32 	%r478, %r1354, %r1353;
	cvt.rn.bf16x2.f32 	%r479, %r1356, %r1355;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r455], {%r476, %r477, %r478, %r479};
	// end inline asm
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	add.s64 	%rd215, %rd214, %rd12;
	shl.b64 	%rd216, %rd7, 1;
	add.s64 	%rd146, %rd215, %rd216;
	add.s64 	%rd217, %rd214, %rd13;
	add.s64 	%rd147, %rd217, %rd216;
	add.s64 	%rd218, %rd214, %rd14;
	add.s64 	%rd148, %rd218, %rd216;
	add.s64 	%rd219, %rd214, %rd15;
	add.s64 	%rd149, %rd219, %rd216;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r460], {%r461, %r462, %r463, %r464};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r465], {%r466, %r467, %r468, %r469};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r470], {%r471, %r472, %r473, %r474};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r475], {%r476, %r477, %r478, %r479};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r484, %r485, %r486, %r487}, [%r39+2048];
	ld.shared.v4.b32 	{%r488, %r489, %r490, %r491}, [%r40+4096];
	ld.shared.v4.b32 	{%r492, %r493, %r494, %r495}, [%r41+6144];
	ld.shared.v4.b32 	{%r480, %r481, %r482, %r483}, [%r38];
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd146 + 0 ], { %r480, %r481, %r482, %r483 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd147 + 0 ], { %r484, %r485, %r486, %r487 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd148 + 0 ], { %r488, %r489, %r490, %r491 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd149 + 0 ], { %r492, %r493, %r494, %r495 };
	// end inline asm
	.loc	1 117 35                        // chunk_delta_h.py:117:35
	cvt.rn.bf16x2.f32 	%r517, %r1658, %r1657;
	cvt.rn.bf16x2.f32 	%r518, %r1660, %r1659;
	cvt.rn.bf16x2.f32 	%r519, %r1662, %r1661;
	cvt.rn.bf16x2.f32 	%r520, %r1664, %r1663;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r496], {%r517, %r518, %r519, %r520};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r522, %r1666, %r1665;
	cvt.rn.bf16x2.f32 	%r523, %r1668, %r1667;
	cvt.rn.bf16x2.f32 	%r524, %r1670, %r1669;
	cvt.rn.bf16x2.f32 	%r525, %r1672, %r1671;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r501], {%r522, %r523, %r524, %r525};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r527, %r1674, %r1673;
	cvt.rn.bf16x2.f32 	%r528, %r1676, %r1675;
	cvt.rn.bf16x2.f32 	%r529, %r1678, %r1677;
	cvt.rn.bf16x2.f32 	%r530, %r1680, %r1679;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r506], {%r527, %r528, %r529, %r530};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r532, %r1682, %r1681;
	cvt.rn.bf16x2.f32 	%r533, %r1684, %r1683;
	cvt.rn.bf16x2.f32 	%r534, %r1686, %r1685;
	cvt.rn.bf16x2.f32 	%r535, %r1688, %r1687;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r511], {%r532, %r533, %r534, %r535};
	// end inline asm
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	add.s64 	%rd150, %rd146, 16384;
	add.s64 	%rd151, %rd147, 16384;
	add.s64 	%rd152, %rd148, 16384;
	add.s64 	%rd153, %rd149, 16384;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r460], {%r517, %r518, %r519, %r520};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r465], {%r522, %r523, %r524, %r525};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r470], {%r527, %r528, %r529, %r530};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r475], {%r532, %r533, %r534, %r535};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r540, %r541, %r542, %r543}, [%r39+2048];
	ld.shared.v4.b32 	{%r544, %r545, %r546, %r547}, [%r40+4096];
	ld.shared.v4.b32 	{%r548, %r549, %r550, %r551}, [%r41+6144];
	ld.shared.v4.b32 	{%r536, %r537, %r538, %r539}, [%r38];
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd150 + 0 ], { %r536, %r537, %r538, %r539 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd151 + 0 ], { %r540, %r541, %r542, %r543 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd152 + 0 ], { %r544, %r545, %r546, %r547 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd153 + 0 ], { %r548, %r549, %r550, %r551 };
	// end inline asm
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	cp.async.wait_group 	0;
	bar.sync 	0;
	shl.b32 	%r1971, %r2274, 13;
	add.s32 	%r808, %r328, %r1971;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	shfl.sync.idx.b32 	%r1973, %r5, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1974, %r808, 4, 14;
	cvt.u64.u32 	%rd220, %r1974;
	or.b64 	%rd154, %rd220, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd154, %rd155, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1975, %r808, 32;
	bfe.u32 	%r1976, %r1975, 4, 14;
	cvt.u64.u32 	%rd221, %r1976;
	or.b64 	%rd156, %rd221, 4611686293338849280;
	mov.pred 	%p35, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd156, %rd157, %p35, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1977, %r808, 64;
	bfe.u32 	%r1978, %r1977, 4, 14;
	cvt.u64.u32 	%rd222, %r1978;
	or.b64 	%rd158, %rd222, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd158, %rd159, %p35, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1979, %r808, 96;
	bfe.u32 	%r1980, %r1979, 4, 14;
	cvt.u64.u32 	%rd223, %r1980;
	or.b64 	%rd160, %rd223, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd160, %rd161, %p35, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r809, %r847;
	mov.b32 	%r810, %r847;
	mov.b32 	%r812, %r847;
	mov.b32 	%r813, %r847;
	mov.b32 	%r811, %r372;
	// begin inline asm
	// wait for regs: %r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r808,%r809,%r810,%r811,%r812,%r813
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s32 	%r1140, %r338, %r1971;
	.loc	1 131 31                        // chunk_delta_h.py:131:31
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r1982, %r1140, 4, 14;
	cvt.u64.u32 	%rd224, %r1982;
	or.b64 	%rd162, %rd224, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd162, %rd163, %p35, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1983, %r1140, 32;
	bfe.u32 	%r1984, %r1983, 4, 14;
	cvt.u64.u32 	%rd225, %r1984;
	or.b64 	%rd164, %rd225, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd164, %rd165, %p35, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1985, %r1140, 64;
	bfe.u32 	%r1986, %r1985, 4, 14;
	cvt.u64.u32 	%rd226, %r1986;
	or.b64 	%rd166, %rd226, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd166, %rd167, %p35, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r1987, %r1140, 96;
	bfe.u32 	%r1988, %r1987, 4, 14;
	cvt.u64.u32 	%rd227, %r1988;
	or.b64 	%rd168, %rd227, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679}, %rd168, %rd169, %p35, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1143, %r409;
	mov.b32 	%r1141, %r847;
	mov.b32 	%r1142, %r847;
	mov.b32 	%r1144, %r847;
	mov.b32 	%r1145, %r847;
	// begin inline asm
	// wait for regs: %r648,%r649,%r650,%r651,%r652,%r653,%r654,%r655,%r656,%r657,%r658,%r659,%r660,%r661,%r662,%r663,%r664,%r665,%r666,%r667,%r668,%r669,%r670,%r671,%r672,%r673,%r674,%r675,%r676,%r677,%r678,%r679,%r1140,%r1141,%r1142,%r1143,%r1144,%r1145
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1184, %r1185, %r1186, %r1187}, [%r1188];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1189, %r1190, %r1191, %r1192}, [%r1193];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1194, %r1195, %r1196, %r1197}, [%r1198];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1199, %r1200, %r1201, %r1202}, [%r1203];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r1184;
	cvt.f32.bf16 	%r1989, %rs2;
	cvt.f32.bf16 	%r1990, %rs1;
	sub.f32 	%r1991, %r1990, %r648;
	sub.f32 	%r1992, %r1989, %r649;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1205, %r1992, %r1991;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs3, %rs4}, %r1185;
	cvt.f32.bf16 	%r1993, %rs4;
	cvt.f32.bf16 	%r1994, %rs3;
	sub.f32 	%r1995, %r1994, %r650;
	sub.f32 	%r1996, %r1993, %r651;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1206, %r1996, %r1995;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs5, %rs6}, %r1186;
	cvt.f32.bf16 	%r1997, %rs6;
	cvt.f32.bf16 	%r1998, %rs5;
	sub.f32 	%r1999, %r1998, %r652;
	sub.f32 	%r2000, %r1997, %r653;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1207, %r2000, %r1999;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs7, %rs8}, %r1187;
	cvt.f32.bf16 	%r2001, %rs8;
	cvt.f32.bf16 	%r2002, %rs7;
	sub.f32 	%r2003, %r2002, %r654;
	sub.f32 	%r2004, %r2001, %r655;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1208, %r2004, %r2003;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs9, %rs10}, %r1189;
	cvt.f32.bf16 	%r2005, %rs10;
	cvt.f32.bf16 	%r2006, %rs9;
	sub.f32 	%r2007, %r2006, %r656;
	sub.f32 	%r2008, %r2005, %r657;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1210, %r2008, %r2007;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs11, %rs12}, %r1190;
	cvt.f32.bf16 	%r2009, %rs12;
	cvt.f32.bf16 	%r2010, %rs11;
	sub.f32 	%r2011, %r2010, %r658;
	sub.f32 	%r2012, %r2009, %r659;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1211, %r2012, %r2011;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs13, %rs14}, %r1191;
	cvt.f32.bf16 	%r2013, %rs14;
	cvt.f32.bf16 	%r2014, %rs13;
	sub.f32 	%r2015, %r2014, %r660;
	sub.f32 	%r2016, %r2013, %r661;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1212, %r2016, %r2015;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs15, %rs16}, %r1192;
	cvt.f32.bf16 	%r2017, %rs16;
	cvt.f32.bf16 	%r2018, %rs15;
	sub.f32 	%r2019, %r2018, %r662;
	sub.f32 	%r2020, %r2017, %r663;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1213, %r2020, %r2019;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs17, %rs18}, %r1194;
	cvt.f32.bf16 	%r2021, %rs18;
	cvt.f32.bf16 	%r2022, %rs17;
	sub.f32 	%r2023, %r2022, %r664;
	sub.f32 	%r2024, %r2021, %r665;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1215, %r2024, %r2023;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs19, %rs20}, %r1195;
	cvt.f32.bf16 	%r2025, %rs20;
	cvt.f32.bf16 	%r2026, %rs19;
	sub.f32 	%r2027, %r2026, %r666;
	sub.f32 	%r2028, %r2025, %r667;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1216, %r2028, %r2027;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs21, %rs22}, %r1196;
	cvt.f32.bf16 	%r2029, %rs22;
	cvt.f32.bf16 	%r2030, %rs21;
	sub.f32 	%r2031, %r2030, %r668;
	sub.f32 	%r2032, %r2029, %r669;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1217, %r2032, %r2031;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs23, %rs24}, %r1197;
	cvt.f32.bf16 	%r2033, %rs24;
	cvt.f32.bf16 	%r2034, %rs23;
	sub.f32 	%r2035, %r2034, %r670;
	sub.f32 	%r2036, %r2033, %r671;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1218, %r2036, %r2035;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs25, %rs26}, %r1199;
	cvt.f32.bf16 	%r2037, %rs26;
	cvt.f32.bf16 	%r2038, %rs25;
	sub.f32 	%r2039, %r2038, %r672;
	sub.f32 	%r2040, %r2037, %r673;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1220, %r2040, %r2039;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs27, %rs28}, %r1200;
	cvt.f32.bf16 	%r2041, %rs28;
	cvt.f32.bf16 	%r2042, %rs27;
	sub.f32 	%r2043, %r2042, %r674;
	sub.f32 	%r2044, %r2041, %r675;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1221, %r2044, %r2043;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs29, %rs30}, %r1201;
	cvt.f32.bf16 	%r2045, %rs30;
	cvt.f32.bf16 	%r2046, %rs29;
	sub.f32 	%r2047, %r2046, %r676;
	sub.f32 	%r2048, %r2045, %r677;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1222, %r2048, %r2047;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs31, %rs32}, %r1202;
	cvt.f32.bf16 	%r2049, %rs32;
	cvt.f32.bf16 	%r2050, %rs31;
	sub.f32 	%r2051, %r2050, %r678;
	sub.f32 	%r2052, %r2049, %r679;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1223, %r2052, %r2051;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r460], {%r1205, %r1206, %r1207, %r1208};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r465], {%r1210, %r1211, %r1212, %r1213};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r470], {%r1215, %r1216, %r1217, %r1218};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r475], {%r1220, %r1221, %r1222, %r1223};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1224, %r1225, %r1226, %r1227}, [%r38];
	ld.shared.v4.b32 	{%r1228, %r1229, %r1230, %r1231}, [%r39+2048];
	ld.shared.v4.b32 	{%r1232, %r1233, %r1234, %r1235}, [%r40+4096];
	ld.shared.v4.b32 	{%r1236, %r1237, %r1238, %r1239}, [%r41+6144];
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	add.s64 	%rd170, %rd37, %rd273;
	add.s64 	%rd171, %rd170, 131072;
	add.s64 	%rd172, %rd170, 262144;
	add.s64 	%rd173, %rd170, 393216;
	// begin inline asm
	@%p89 st.global.v4.b32 [ %rd170 + 0 ], { %r1224, %r1225, %r1226, %r1227 };
	// end inline asm
	// begin inline asm
	@%p88 st.global.v4.b32 [ %rd171 + 0 ], { %r1228, %r1229, %r1230, %r1231 };
	// end inline asm
	// begin inline asm
	@%p87 st.global.v4.b32 [ %rd172 + 0 ], { %r1232, %r1233, %r1234, %r1235 };
	// end inline asm
	// begin inline asm
	@%p86 st.global.v4.b32 [ %rd173 + 0 ], { %r1236, %r1237, %r1238, %r1239 };
	// end inline asm
	.loc	1 147 30                        // chunk_delta_h.py:147:30
	add.s64 	%rd277, %rd277, 1;
	.loc	1 147 39                        // chunk_delta_h.py:147:39
	add.s64 	%rd44, %rd276, 64;
	cvt.u32.u64 	%r2053, %rd44;
	min.s32 	%r2054, %r2053, %r250;
	.loc	1 149 30                        // chunk_delta_h.py:149:30
	add.s64 	%rd228, %rd32, %rd276;
	cvt.u32.u64 	%r2055, %rd228;
	.loc	1 149 50                        // chunk_delta_h.py:149:50
	setp.lt.s32 	%p58, %r2055, %r250;
	add.s32 	%r2056, %r2055, 8;
	setp.lt.s32 	%p59, %r2056, %r250;
	.loc	1 150 56                        // chunk_delta_h.py:150:56
	shl.b32 	%r2057, %r2054, 5;
	add.s32 	%r2058, %r2057, -32;
	.loc	1 150 60                        // chunk_delta_h.py:150:60
	mul.wide.s32 	%rd229, %r2058, 4;
	add.s64 	%rd174, %rd11, %rd229;
	.loc	1 150 31                        // chunk_delta_h.py:150:31
	// begin inline asm
	mov.u32 %r1240, 0x0;
	ld.global.b32 { %r1240 }, [ %rd174 + 0 ];
	// end inline asm
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	ld.shared.b32 	%r2059, [%r275];
	ld.shared.b32 	%r2060, [%r275+32];
	.loc	1 153 53                        // chunk_delta_h.py:153:53
	sub.f32 	%r2061, %r1240, %r2059;
	sub.f32 	%r2062, %r1240, %r2060;
	.loc	1 153 42                        // chunk_delta_h.py:153:42
	mul.f32 	%r2063, %r2061, 0f3FB8AA3B;
	ex2.approx.f32 	%r2064, %r2063;
	mul.f32 	%r2065, %r2062, 0f3FB8AA3B;
	ex2.approx.f32 	%r2066, %r2065;
	.loc	1 153 59                        // chunk_delta_h.py:153:59
	selp.f32 	%r2067, %r2064, 0f00000000, %p58;
	selp.f32 	%r2068, %r2066, 0f00000000, %p59;
	.loc	1 153 24                        // chunk_delta_h.py:153:24
	mul.f32 	%r2069, %r1991, %r2067;
	mul.f32 	%r2070, %r1992, %r2067;
	mul.f32 	%r2071, %r1995, %r2068;
	mul.f32 	%r2072, %r1996, %r2068;
	mul.f32 	%r2073, %r1999, %r2067;
	mul.f32 	%r2074, %r2000, %r2067;
	mul.f32 	%r2075, %r2003, %r2068;
	mul.f32 	%r2076, %r2004, %r2068;
	mul.f32 	%r2077, %r2007, %r2067;
	mul.f32 	%r2078, %r2008, %r2067;
	mul.f32 	%r2079, %r2011, %r2068;
	mul.f32 	%r2080, %r2012, %r2068;
	mul.f32 	%r2081, %r2015, %r2067;
	mul.f32 	%r2082, %r2016, %r2067;
	mul.f32 	%r2083, %r2019, %r2068;
	mul.f32 	%r2084, %r2020, %r2068;
	mul.f32 	%r2085, %r2023, %r2067;
	mul.f32 	%r2086, %r2024, %r2067;
	mul.f32 	%r2087, %r2027, %r2068;
	mul.f32 	%r2088, %r2028, %r2068;
	mul.f32 	%r2089, %r2031, %r2067;
	mul.f32 	%r2090, %r2032, %r2067;
	mul.f32 	%r2091, %r2035, %r2068;
	mul.f32 	%r2092, %r2036, %r2068;
	mul.f32 	%r2093, %r2039, %r2067;
	mul.f32 	%r2094, %r2040, %r2067;
	mul.f32 	%r2095, %r2043, %r2068;
	mul.f32 	%r2096, %r2044, %r2068;
	mul.f32 	%r2097, %r2047, %r2067;
	mul.f32 	%r2098, %r2048, %r2067;
	mul.f32 	%r2099, %r2051, %r2068;
	mul.f32 	%r2100, %r2052, %r2068;
	.loc	1 154 27                        // chunk_delta_h.py:154:27
	mul.f32 	%r2101, %r1240, 0f3FB8AA3B;
	ex2.approx.f32 	%r2102, %r2101;
	.loc	1 155 20                        // chunk_delta_h.py:155:20
	mul.f32 	%r1325, %r1325, %r2102;
	mul.f32 	%r1326, %r1326, %r2102;
	mul.f32 	%r1327, %r1327, %r2102;
	mul.f32 	%r1328, %r1328, %r2102;
	mul.f32 	%r1329, %r1329, %r2102;
	mul.f32 	%r1330, %r1330, %r2102;
	mul.f32 	%r1331, %r1331, %r2102;
	mul.f32 	%r1332, %r1332, %r2102;
	mul.f32 	%r1333, %r1333, %r2102;
	mul.f32 	%r1334, %r1334, %r2102;
	mul.f32 	%r1335, %r1335, %r2102;
	mul.f32 	%r1336, %r1336, %r2102;
	mul.f32 	%r1337, %r1337, %r2102;
	mul.f32 	%r1338, %r1338, %r2102;
	mul.f32 	%r1339, %r1339, %r2102;
	mul.f32 	%r1340, %r1340, %r2102;
	mul.f32 	%r1341, %r1341, %r2102;
	mul.f32 	%r1342, %r1342, %r2102;
	mul.f32 	%r1343, %r1343, %r2102;
	mul.f32 	%r1344, %r1344, %r2102;
	mul.f32 	%r1345, %r1345, %r2102;
	mul.f32 	%r1346, %r1346, %r2102;
	mul.f32 	%r1347, %r1347, %r2102;
	mul.f32 	%r1348, %r1348, %r2102;
	mul.f32 	%r1349, %r1349, %r2102;
	mul.f32 	%r1350, %r1350, %r2102;
	mul.f32 	%r1351, %r1351, %r2102;
	mul.f32 	%r1352, %r1352, %r2102;
	mul.f32 	%r1353, %r1353, %r2102;
	mul.f32 	%r1354, %r1354, %r2102;
	mul.f32 	%r1355, %r1355, %r2102;
	mul.f32 	%r1356, %r1356, %r2102;
	.loc	1 157 24                        // chunk_delta_h.py:157:24
	mul.f32 	%r1657, %r1657, %r2102;
	mul.f32 	%r1658, %r1658, %r2102;
	mul.f32 	%r1659, %r1659, %r2102;
	mul.f32 	%r1660, %r1660, %r2102;
	mul.f32 	%r1661, %r1661, %r2102;
	mul.f32 	%r1662, %r1662, %r2102;
	mul.f32 	%r1663, %r1663, %r2102;
	mul.f32 	%r1664, %r1664, %r2102;
	mul.f32 	%r1665, %r1665, %r2102;
	mul.f32 	%r1666, %r1666, %r2102;
	mul.f32 	%r1667, %r1667, %r2102;
	mul.f32 	%r1668, %r1668, %r2102;
	mul.f32 	%r1669, %r1669, %r2102;
	mul.f32 	%r1670, %r1670, %r2102;
	mul.f32 	%r1671, %r1671, %r2102;
	mul.f32 	%r1672, %r1672, %r2102;
	mul.f32 	%r1673, %r1673, %r2102;
	mul.f32 	%r1674, %r1674, %r2102;
	mul.f32 	%r1675, %r1675, %r2102;
	mul.f32 	%r1676, %r1676, %r2102;
	mul.f32 	%r1677, %r1677, %r2102;
	mul.f32 	%r1678, %r1678, %r2102;
	mul.f32 	%r1679, %r1679, %r2102;
	mul.f32 	%r1680, %r1680, %r2102;
	mul.f32 	%r1681, %r1681, %r2102;
	mul.f32 	%r1682, %r1682, %r2102;
	mul.f32 	%r1683, %r1683, %r2102;
	mul.f32 	%r1684, %r1684, %r2102;
	mul.f32 	%r1685, %r1685, %r2102;
	mul.f32 	%r1686, %r1686, %r2102;
	mul.f32 	%r1687, %r1687, %r2102;
	mul.f32 	%r1688, %r1688, %r2102;
	.loc	1 179 21                        // chunk_delta_h.py:179:21
	bar.sync 	0;
	cvt.rn.bf16x2.f32 	%r1242, %r2070, %r2069;
	cvt.rn.bf16x2.f32 	%r1243, %r2072, %r2071;
	cvt.rn.bf16x2.f32 	%r1244, %r2074, %r2073;
	cvt.rn.bf16x2.f32 	%r1245, %r2076, %r2075;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1241], {%r1242, %r1243, %r1244, %r1245};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1247, %r2078, %r2077;
	cvt.rn.bf16x2.f32 	%r1248, %r2080, %r2079;
	cvt.rn.bf16x2.f32 	%r1249, %r2082, %r2081;
	cvt.rn.bf16x2.f32 	%r1250, %r2084, %r2083;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1246], {%r1247, %r1248, %r1249, %r1250};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1252, %r2086, %r2085;
	cvt.rn.bf16x2.f32 	%r1253, %r2088, %r2087;
	cvt.rn.bf16x2.f32 	%r1254, %r2090, %r2089;
	cvt.rn.bf16x2.f32 	%r1255, %r2092, %r2091;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1251], {%r1252, %r1253, %r1254, %r1255};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1257, %r2094, %r2093;
	cvt.rn.bf16x2.f32 	%r1258, %r2096, %r2095;
	cvt.rn.bf16x2.f32 	%r1259, %r2098, %r2097;
	cvt.rn.bf16x2.f32 	%r1260, %r2100, %r2099;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1256], {%r1257, %r1258, %r1259, %r1260};
	// end inline asm
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s32 	%r1549, %r352, %r1971;
	.loc	1 186 28                        // chunk_delta_h.py:186:28
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2104, %r1549, 4, 14;
	cvt.u64.u32 	%rd230, %r2104;
	or.b64 	%rd175, %rd230, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1325,%r1326,%r1327,%r1328,%r1329,%r1330,%r1331,%r1332,%r1333,%r1334,%r1335,%r1336,%r1337,%r1338,%r1339,%r1340,%r1341,%r1342,%r1343,%r1344,%r1345,%r1346,%r1347,%r1348,%r1349,%r1350,%r1351,%r1352,%r1353,%r1354,%r1355,%r1356}, %rd175, %rd176, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2105, %r1549, 2048;
	bfe.u32 	%r2106, %r2105, 4, 14;
	cvt.u64.u32 	%rd231, %r2106;
	or.b64 	%rd177, %rd231, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1325,%r1326,%r1327,%r1328,%r1329,%r1330,%r1331,%r1332,%r1333,%r1334,%r1335,%r1336,%r1337,%r1338,%r1339,%r1340,%r1341,%r1342,%r1343,%r1344,%r1345,%r1346,%r1347,%r1348,%r1349,%r1350,%r1351,%r1352,%r1353,%r1354,%r1355,%r1356}, %rd177, %rd178, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2107, %r1549, 4096;
	bfe.u32 	%r2108, %r2107, 4, 14;
	cvt.u64.u32 	%rd232, %r2108;
	or.b64 	%rd179, %rd232, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1325,%r1326,%r1327,%r1328,%r1329,%r1330,%r1331,%r1332,%r1333,%r1334,%r1335,%r1336,%r1337,%r1338,%r1339,%r1340,%r1341,%r1342,%r1343,%r1344,%r1345,%r1346,%r1347,%r1348,%r1349,%r1350,%r1351,%r1352,%r1353,%r1354,%r1355,%r1356}, %rd179, %rd180, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2109, %r1549, 6144;
	bfe.u32 	%r2110, %r2109, 4, 14;
	cvt.u64.u32 	%rd233, %r2110;
	or.b64 	%rd181, %rd233, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1325,%r1326,%r1327,%r1328,%r1329,%r1330,%r1331,%r1332,%r1333,%r1334,%r1335,%r1336,%r1337,%r1338,%r1339,%r1340,%r1341,%r1342,%r1343,%r1344,%r1345,%r1346,%r1347,%r1348,%r1349,%r1350,%r1351,%r1352,%r1353,%r1354,%r1355,%r1356}, %rd181, %rd182, %p35, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1552, %r1590;
	mov.b32 	%r1550, %r847;
	mov.b32 	%r1551, %r847;
	mov.b32 	%r1553, %r847;
	mov.b32 	%r1554, %r847;
	// begin inline asm
	// wait for regs: %r1325,%r1326,%r1327,%r1328,%r1329,%r1330,%r1331,%r1332,%r1333,%r1334,%r1335,%r1336,%r1337,%r1338,%r1339,%r1340,%r1341,%r1342,%r1343,%r1344,%r1345,%r1346,%r1347,%r1348,%r1349,%r1350,%r1351,%r1352,%r1353,%r1354,%r1355,%r1356,%r1549,%r1550,%r1551,%r1552,%r1553,%r1554
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s32 	%r1881, %r353, %r1971;
	.loc	1 193 32                        // chunk_delta_h.py:193:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2112, %r1881, 4, 14;
	cvt.u64.u32 	%rd234, %r2112;
	or.b64 	%rd183, %rd234, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1657,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663,%r1664,%r1665,%r1666,%r1667,%r1668,%r1669,%r1670,%r1671,%r1672,%r1673,%r1674,%r1675,%r1676,%r1677,%r1678,%r1679,%r1680,%r1681,%r1682,%r1683,%r1684,%r1685,%r1686,%r1687,%r1688}, %rd183, %rd176, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2113, %r1881, 2048;
	bfe.u32 	%r2114, %r2113, 4, 14;
	cvt.u64.u32 	%rd235, %r2114;
	or.b64 	%rd185, %rd235, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1657,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663,%r1664,%r1665,%r1666,%r1667,%r1668,%r1669,%r1670,%r1671,%r1672,%r1673,%r1674,%r1675,%r1676,%r1677,%r1678,%r1679,%r1680,%r1681,%r1682,%r1683,%r1684,%r1685,%r1686,%r1687,%r1688}, %rd185, %rd178, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2115, %r1881, 4096;
	bfe.u32 	%r2116, %r2115, 4, 14;
	cvt.u64.u32 	%rd236, %r2116;
	or.b64 	%rd187, %rd236, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1657,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663,%r1664,%r1665,%r1666,%r1667,%r1668,%r1669,%r1670,%r1671,%r1672,%r1673,%r1674,%r1675,%r1676,%r1677,%r1678,%r1679,%r1680,%r1681,%r1682,%r1683,%r1684,%r1685,%r1686,%r1687,%r1688}, %rd187, %rd180, %p35, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2117, %r1881, 6144;
	bfe.u32 	%r2118, %r2117, 4, 14;
	cvt.u64.u32 	%rd237, %r2118;
	or.b64 	%rd189, %rd237, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1657,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663,%r1664,%r1665,%r1666,%r1667,%r1668,%r1669,%r1670,%r1671,%r1672,%r1673,%r1674,%r1675,%r1676,%r1677,%r1678,%r1679,%r1680,%r1681,%r1682,%r1683,%r1684,%r1685,%r1686,%r1687,%r1688}, %rd189, %rd182, %p35, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1884, %r1590;
	mov.b32 	%r1886, %r847;
	mov.b32 	%r1882, %r847;
	mov.b32 	%r1883, %r847;
	mov.b32 	%r1885, %r847;
	// begin inline asm
	// wait for regs: %r1657,%r1658,%r1659,%r1660,%r1661,%r1662,%r1663,%r1664,%r1665,%r1666,%r1667,%r1668,%r1669,%r1670,%r1671,%r1672,%r1673,%r1674,%r1675,%r1676,%r1677,%r1678,%r1679,%r1680,%r1681,%r1682,%r1683,%r1684,%r1685,%r1686,%r1687,%r1688,%r1881,%r1882,%r1883,%r1884,%r1885,%r1886
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s32 	%r2119, %r2275, 1;
	setp.gt.s32 	%p60, %r2119, 1;
	selp.b32 	%r2275, 0, %r2119, %p60;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	add.s64 	%rd238, %rd3, %rd276;
	add.s64 	%rd239, %rd238, 64;
	add.s64 	%rd240, %rd238, 80;
	add.s64 	%rd241, %rd238, 96;
	add.s64 	%rd242, %rd238, 112;
	add.s64 	%rd243, %rd228, 64;
	add.s64 	%rd244, %rd44, %rd30;
	add.s64 	%rd245, %rd35, %rd273;
	add.s64 	%rd191, %rd245, 524288;
	add.s64 	%rd192, %rd245, 655360;
	add.s64 	%rd193, %rd245, 786432;
	add.s64 	%rd194, %rd245, 917504;
	setp.lt.s64 	%p61, %rd239, %rd8;
	setp.lt.s64 	%p62, %rd240, %rd8;
	setp.lt.s64 	%p63, %rd241, %rd8;
	setp.lt.s64 	%p64, %rd242, %rd8;
	shl.b32 	%r2120, %r2275, 13;
	add.s32 	%r2121, %r328, %r2120;
	add.s32 	%r1925, %r2121, %r327;
	add.s32 	%r1927, %r2121, %r332;
	add.s32 	%r1929, %r2121, %r334;
	add.s32 	%r1931, %r2121, %r336;
	selp.b32 	%r2126, 16, 0, %p61;
	selp.b32 	%r1934, %r2126, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r1925 + 0 ], [ %rd191 + 0 ], 0x10, %r1934;
	// end inline asm
	selp.b32 	%r2127, 16, 0, %p62;
	selp.b32 	%r1936, %r2127, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r1927 + 0 ], [ %rd192 + 0 ], 0x10, %r1936;
	// end inline asm
	selp.b32 	%r2128, 16, 0, %p63;
	selp.b32 	%r1938, %r2128, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r1929 + 0 ], [ %rd193 + 0 ], 0x10, %r1938;
	// end inline asm
	selp.b32 	%r2129, 16, 0, %p64;
	selp.b32 	%r1940, %r2129, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r1931 + 0 ], [ %rd194 + 0 ], 0x10, %r1940;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd195, %rd245, 524416;
	add.s64 	%rd196, %rd245, 655488;
	add.s64 	%rd197, %rd245, 786560;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd198, %rd245, 917632;
	add.s32 	%r2130, %r338, %r2120;
	add.s32 	%r1933, %r2130, %r327;
	add.s32 	%r1935, %r2130, %r332;
	add.s32 	%r1937, %r2130, %r334;
	add.s32 	%r1939, %r2130, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r1933 + 0 ], [ %rd195 + 0 ], 0x10, %r1934;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1935 + 0 ], [ %rd196 + 0 ], 0x10, %r1936;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1937 + 0 ], [ %rd197 + 0 ], 0x10, %r1938;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1939 + 0 ], [ %rd198 + 0 ], 0x10, %r1940;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd246, %rd36, %rd273;
	add.s64 	%rd199, %rd246, 524288;
	add.s64 	%rd200, %rd246, 655360;
	add.s64 	%rd201, %rd246, 786432;
	add.s64 	%rd202, %rd246, 917504;
	and.pred 	%p89, %p27, %p61;
	and.pred 	%p88, %p27, %p62;
	and.pred 	%p87, %p27, %p63;
	and.pred 	%p86, %p27, %p64;
	selp.b32 	%r2131, 16, 0, %p89;
	selp.b32 	%r1942, %r2131, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd199 + 0 ], 0x10, %r1942;
	// end inline asm
	selp.b32 	%r2132, 16, 0, %p88;
	selp.b32 	%r1944, %r2132, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd200 + 0 ], 0x10, %r1944;
	// end inline asm
	selp.b32 	%r2133, 16, 0, %p87;
	selp.b32 	%r1946, %r2133, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd201 + 0 ], 0x10, %r1946;
	// end inline asm
	selp.b32 	%r2134, 16, 0, %p86;
	selp.b32 	%r1948, %r2134, 0, %p56;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd202 + 0 ], 0x10, %r1948;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	setp.lt.s64 	%p65, %rd243, %rd8;
	setp.lt.s64 	%p66, %rd244, %rd8;
	selp.b32 	%r2135, 4, 0, %p65;
	selp.b32 	%r1950, %r2135, 0, %p56;
	// begin inline asm
	@%p14 cp.async.ca.shared.global [ %r275 + 0 ], [ %rd274 + 0 ], 0x4, %r1950;
	// end inline asm
	selp.b32 	%r2136, 4, 0, %p66;
	selp.b32 	%r1952, %r2136, 0, %p56;
	// begin inline asm
	@%p14 cp.async.ca.shared.global [ %r277 + 0 ], [ %rd275 + 0 ], 0x4, %r1952;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd247, %rd34, %rd273;
	add.s64 	%rd205, %rd247, 524288;
	add.s64 	%rd206, %rd247, 655360;
	add.s64 	%rd207, %rd247, 786432;
	add.s64 	%rd208, %rd247, 917504;
	add.s32 	%r2137, %r352, %r2120;
	bar.sync 	0;
	add.s32 	%r1953, %r2137, %r327;
	add.s32 	%r1955, %r2137, %r332;
	add.s32 	%r1957, %r2137, %r334;
	add.s32 	%r1959, %r2137, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r1953 + 0 ], [ %rd205 + 0 ], 0x10, %r1934;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1955 + 0 ], [ %rd206 + 0 ], 0x10, %r1936;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1957 + 0 ], [ %rd207 + 0 ], 0x10, %r1938;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1959 + 0 ], [ %rd208 + 0 ], 0x10, %r1940;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd209, %rd247, 524416;
	add.s64 	%rd210, %rd247, 655488;
	add.s64 	%rd211, %rd247, 786560;
	add.s64 	%rd212, %rd247, 917632;
	add.s32 	%r2138, %r353, %r2120;
	add.s32 	%r1961, %r2138, %r327;
	add.s32 	%r1963, %r2138, %r332;
	add.s32 	%r1965, %r2138, %r334;
	add.s32 	%r1967, %r2138, %r336;
	// begin inline asm
	cp.async.cg.shared.global [ %r1961 + 0 ], [ %rd209 + 0 ], 0x10, %r1934;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1963 + 0 ], [ %rd210 + 0 ], 0x10, %r1936;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1965 + 0 ], [ %rd211 + 0 ], 0x10, %r1938;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1967 + 0 ], [ %rd212 + 0 ], 0x10, %r1940;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s64 	%rd275, %rd275, 8192;
	add.s64 	%rd274, %rd274, 8192;
	add.s64 	%rd273, %rd273, 524288;
	setp.ne.s64 	%p67, %rd29, %rd277;
	mov.b64 	%rd276, %rd44;
	@%p67 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	cvt.u32.u64 	%r2203, %rd2;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.gt.s32 	%p84, %r2203, -1;
	.loc	1 95 18                         // chunk_delta_h.py:95:18
	mul.wide.u32 	%rd264, %r3, 4;
	add.s64 	%rd265, %rd53, %rd264;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 211 23                        // chunk_delta_h.py:211:23
	shl.b32 	%r2204, %r4, 2;
	and.b32 	%r2205, %r2204, 60;
	cvt.u64.u32 	%rd266, %r2205;
	or.b64 	%rd267, %rd266, %rd2;
	shl.b32 	%r2206, %r4, 5;
	and.b32 	%r2207, %r2206, 3584;
	cvt.u64.u32 	%rd268, %r2207;
	add.s64 	%rd269, %rd265, %rd268;
	shl.b64 	%rd270, %rd267, 2;
	add.s64 	%rd248, %rd269, %rd270;
	add.s64 	%rd249, %rd248, 4096;
	add.s64 	%rd250, %rd248, 8192;
	add.s64 	%rd251, %rd248, 12288;
	add.s64 	%rd252, %rd248, 16384;
	add.s64 	%rd253, %rd248, 20480;
	add.s64 	%rd254, %rd248, 24576;
	or.b32 	%r2208, %r2207, 28672;
	cvt.u64.u32 	%rd271, %r2208;
	add.s64 	%rd272, %rd265, %rd271;
	add.s64 	%rd255, %rd272, %rd270;
	setp.lt.s64 	%p85, %rd267, 128;
	and.pred 	%p68, %p84, %p85;
	shl.b32 	%r2209, %r4, 1;
	and.b32 	%r2210, %r2209, 6;
	shl.b32 	%r2211, %r4, 4;
	and.b32 	%r2212, %r2211, 192;
	or.b32 	%r2213, %r2212, %r2210;
	shl.b32 	%r2214, %r7, 4;
	or.b32 	%r2215, %r2213, %r2214;
	and.b32 	%r2216, %r2206, 3072;
	or.b32 	%r2217, %r2215, %r2216;
	and.b32 	%r2218, %r2204, 508;
	shr.u32 	%r2219, %r2217, 2;
	and.b32 	%r2220, %r2219, 892;
	add.s32 	%r2222, %r328, %r2220;
	shl.b32 	%r2223, %r2217, 2;
	add.s32 	%r2224, %r2222, %r2223;
	st.shared.v2.b32 	[%r2224], {%r1325, %r1326};
	or.b32 	%r2225, %r2217, 512;
	shr.u32 	%r2226, %r2225, 2;
	and.b32 	%r2227, %r2226, 1020;
	add.s32 	%r2228, %r328, %r2227;
	add.s32 	%r2229, %r2228, %r2223;
	st.shared.v2.b32 	[%r2229+2048], {%r1327, %r1328};
	st.shared.v2.b32 	[%r2224+32], {%r1329, %r1330};
	st.shared.v2.b32 	[%r2229+2080], {%r1331, %r1332};
	st.shared.v2.b32 	[%r2224+64], {%r1333, %r1334};
	and.b32 	%r2230, %r2226, 1008;
	add.s32 	%r2231, %r328, %r2230;
	add.s32 	%r2232, %r2231, %r2223;
	st.shared.v2.b32 	[%r2232+2112], {%r1335, %r1336};
	st.shared.v2.b32 	[%r2224+96], {%r1337, %r1338};
	st.shared.v2.b32 	[%r2232+2144], {%r1339, %r1340};
	st.shared.v2.b32 	[%r2224+128], {%r1341, %r1342};
	st.shared.v2.b32 	[%r2232+2176], {%r1343, %r1344};
	st.shared.v2.b32 	[%r2224+160], {%r1345, %r1346};
	st.shared.v2.b32 	[%r2232+2208], {%r1347, %r1348};
	st.shared.v2.b32 	[%r2224+192], {%r1349, %r1350};
	st.shared.v2.b32 	[%r2232+2240], {%r1351, %r1352};
	st.shared.v2.b32 	[%r2224+224], {%r1353, %r1354};
	st.shared.v2.b32 	[%r2232+2272], {%r1355, %r1356};
	bar.sync 	0;
	and.b32 	%r2233, %r15, 28;
	shl.b32 	%r2234, %r2233, 2;
	add.s32 	%r2235, %r328, %r2234;
	shl.b32 	%r2236, %r2218, 2;
	add.s32 	%r2237, %r2235, %r2236;
	ld.shared.v4.b32 	{%r2139, %r2140, %r2141, %r2142}, [%r2237];
	or.b32 	%r2238, %r2218, 512;
	shr.u32 	%r2239, %r2238, 2;
	and.b32 	%r2240, %r2239, 240;
	add.s32 	%r2241, %r328, %r2240;
	add.s32 	%r2242, %r2241, %r2236;
	ld.shared.v4.b32 	{%r2143, %r2144, %r2145, %r2146}, [%r2242+2048];
	or.b32 	%r2243, %r2218, 1024;
	shr.u32 	%r2244, %r2243, 2;
	and.b32 	%r2245, %r2244, 368;
	add.s32 	%r2246, %r328, %r2245;
	add.s32 	%r2247, %r2246, %r2236;
	ld.shared.v4.b32 	{%r2147, %r2148, %r2149, %r2150}, [%r2247+4096];
	or.b32 	%r2248, %r2218, 1536;
	shr.u32 	%r2249, %r2248, 2;
	and.b32 	%r2250, %r2249, 496;
	add.s32 	%r2251, %r328, %r2250;
	add.s32 	%r2252, %r2251, %r2236;
	ld.shared.v4.b32 	{%r2151, %r2152, %r2153, %r2154}, [%r2252+6144];
	or.b32 	%r2253, %r2218, 2048;
	shr.u32 	%r2254, %r2253, 2;
	and.b32 	%r2255, %r2254, 624;
	add.s32 	%r2256, %r328, %r2255;
	add.s32 	%r2257, %r2256, %r2236;
	ld.shared.v4.b32 	{%r2155, %r2156, %r2157, %r2158}, [%r2257+8192];
	or.b32 	%r2258, %r2218, 2560;
	shr.u32 	%r2259, %r2258, 2;
	and.b32 	%r2260, %r2259, 752;
	add.s32 	%r2261, %r328, %r2260;
	add.s32 	%r2262, %r2261, %r2236;
	ld.shared.v4.b32 	{%r2159, %r2160, %r2161, %r2162}, [%r2262+10240];
	or.b32 	%r2263, %r2218, 3072;
	shr.u32 	%r2264, %r2263, 2;
	and.b32 	%r2265, %r2264, 880;
	add.s32 	%r2266, %r328, %r2265;
	add.s32 	%r2267, %r2266, %r2236;
	ld.shared.v4.b32 	{%r2163, %r2164, %r2165, %r2166}, [%r2267+12288];
	or.b32 	%r2268, %r2204, 3584;
	shr.u32 	%r2269, %r2268, 2;
	and.b32 	%r2270, %r2269, 1008;
	add.s32 	%r2271, %r328, %r2270;
	shl.b32 	%r2272, %r2268, 2;
	add.s32 	%r2273, %r2271, %r2272;
	ld.shared.v4.b32 	{%r2167, %r2168, %r2169, %r2170}, [%r2273];
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd248 + 0 ], { %r2139, %r2140, %r2141, %r2142 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd249 + 0 ], { %r2143, %r2144, %r2145, %r2146 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd250 + 0 ], { %r2147, %r2148, %r2149, %r2150 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd251 + 0 ], { %r2151, %r2152, %r2153, %r2154 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd252 + 0 ], { %r2155, %r2156, %r2157, %r2158 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd253 + 0 ], { %r2159, %r2160, %r2161, %r2162 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd254 + 0 ], { %r2163, %r2164, %r2165, %r2166 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd255 + 0 ], { %r2167, %r2168, %r2169, %r2170 };
	// end inline asm
	.loc	1 214 27                        // chunk_delta_h.py:214:27
	add.s64 	%rd256, %rd248, 32768;
	add.s64 	%rd257, %rd248, 36864;
	add.s64 	%rd258, %rd248, 40960;
	add.s64 	%rd259, %rd248, 45056;
	add.s64 	%rd260, %rd248, 49152;
	add.s64 	%rd261, %rd248, 53248;
	add.s64 	%rd262, %rd248, 57344;
	add.s64 	%rd263, %rd255, 32768;
	bar.sync 	0;
	st.shared.v2.b32 	[%r2224], {%r1657, %r1658};
	st.shared.v2.b32 	[%r2229+2048], {%r1659, %r1660};
	st.shared.v2.b32 	[%r2224+32], {%r1661, %r1662};
	st.shared.v2.b32 	[%r2229+2080], {%r1663, %r1664};
	st.shared.v2.b32 	[%r2224+64], {%r1665, %r1666};
	st.shared.v2.b32 	[%r2232+2112], {%r1667, %r1668};
	st.shared.v2.b32 	[%r2224+96], {%r1669, %r1670};
	st.shared.v2.b32 	[%r2232+2144], {%r1671, %r1672};
	st.shared.v2.b32 	[%r2224+128], {%r1673, %r1674};
	st.shared.v2.b32 	[%r2232+2176], {%r1675, %r1676};
	st.shared.v2.b32 	[%r2224+160], {%r1677, %r1678};
	st.shared.v2.b32 	[%r2232+2208], {%r1679, %r1680};
	st.shared.v2.b32 	[%r2224+192], {%r1681, %r1682};
	st.shared.v2.b32 	[%r2232+2240], {%r1683, %r1684};
	st.shared.v2.b32 	[%r2224+224], {%r1685, %r1686};
	st.shared.v2.b32 	[%r2232+2272], {%r1687, %r1688};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r2175, %r2176, %r2177, %r2178}, [%r2242+2048];
	ld.shared.v4.b32 	{%r2179, %r2180, %r2181, %r2182}, [%r2247+4096];
	ld.shared.v4.b32 	{%r2183, %r2184, %r2185, %r2186}, [%r2252+6144];
	ld.shared.v4.b32 	{%r2187, %r2188, %r2189, %r2190}, [%r2257+8192];
	ld.shared.v4.b32 	{%r2191, %r2192, %r2193, %r2194}, [%r2262+10240];
	ld.shared.v4.b32 	{%r2195, %r2196, %r2197, %r2198}, [%r2267+12288];
	ld.shared.v4.b32 	{%r2199, %r2200, %r2201, %r2202}, [%r2273];
	ld.shared.v4.b32 	{%r2171, %r2172, %r2173, %r2174}, [%r2237];
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd256 + 0 ], { %r2171, %r2172, %r2173, %r2174 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd257 + 0 ], { %r2175, %r2176, %r2177, %r2178 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd258 + 0 ], { %r2179, %r2180, %r2181, %r2182 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd259 + 0 ], { %r2183, %r2184, %r2185, %r2186 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd260 + 0 ], { %r2187, %r2188, %r2189, %r2190 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd261 + 0 ], { %r2191, %r2192, %r2193, %r2194 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd262 + 0 ], { %r2195, %r2196, %r2197, %r2198 };
	// end inline asm
	// begin inline asm
	@%p68 st.global.v4.b32 [ %rd263 + 0 ], { %r2199, %r2200, %r2201, %r2202 };
	// end inline asm
	.loc	1 209 4                         // chunk_delta_h.py:209:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 216                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd1 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 104
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x7c:0x31 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 104
.b8 95
.b8 98
.b8 108
.b8 111
.b8 99
.b8 107
.b8 100
.b8 105
.b8 109
.b8 54
.b8 52
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0xad:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 124                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xc2:0x18 DW_TAG_inlined_subroutine
.b32 124                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
