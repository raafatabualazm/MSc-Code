#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_11 = arith.constant dense<128> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<128> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %cst_14 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_17 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_18 = arith.constant dense<4096> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %cst_19 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc71)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc72)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c64_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %28 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %29 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %30 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %31 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %32 = arith.extsi %27 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %33 = tt.expand_dims %28 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc26)
    %34 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc26)
    %35 = arith.muli %33, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %36 = tt.broadcast %35 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %37 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %38 = arith.addi %37, %31 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %39 = tt.expand_dims %38 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc26)
    %40 = tt.broadcast %39 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %41 = arith.addi %36, %40 : tensor<64x64xi64, #blocked2> loc(#loc26)
    %42 = arith.cmpi sge, %33, %cst_7 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %43 = arith.cmpi sge, %34, %cst_6 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %44 = arith.cmpi slt, %33, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %45 = arith.cmpi slt, %34, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %46 = arith.andi %42, %44 : tensor<64x1xi1, #blocked2> loc(#loc26)
    %47 = arith.andi %43, %45 : tensor<64x1xi1, #blocked1> loc(#loc26)
    %48 = tt.broadcast %46 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %49 = tt.broadcast %47 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc26)
    %50 = arith.cmpi sge, %39, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %51 = arith.cmpi slt, %39, %cst_12 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %52 = arith.andi %50, %51 : tensor<1x64xi1, #blocked2> loc(#loc26)
    %53 = tt.broadcast %52 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %54 = arith.andi %48, %53 : tensor<64x64xi1, #blocked2> loc(#loc26)
    %55 = arith.addi %28, %cst_16 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc27)
    %56 = arith.addi %29, %cst_15 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %57 = arith.addi %31, %cst_13 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %58 = tt.expand_dims %55 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc27)
    %59 = tt.expand_dims %56 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc27)
    %60 = arith.muli %58, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %61 = tt.broadcast %60 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc27)
    %62 = arith.addi %61, %40 : tensor<64x64xi64, #blocked2> loc(#loc27)
    %63 = arith.cmpi sge, %58, %cst_7 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %64 = arith.cmpi sge, %59, %cst_6 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %65 = arith.cmpi slt, %58, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %66 = arith.cmpi slt, %59, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %67 = arith.andi %63, %65 : tensor<64x1xi1, #blocked2> loc(#loc27)
    %68 = arith.andi %64, %66 : tensor<64x1xi1, #blocked1> loc(#loc27)
    %69 = tt.broadcast %67 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc27)
    %70 = tt.broadcast %68 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc27)
    %71 = arith.andi %69, %53 : tensor<64x64xi1, #blocked2> loc(#loc27)
    %72 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %73 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc29)
    %74 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc29)
    %75 = tt.broadcast %74 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %76 = tt.splat %72 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %77 = arith.cmpi sge, %74, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %78 = arith.cmpi slt, %74, %cst_12 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %79 = arith.andi %77, %78 : tensor<1x64xi1, #blocked2> loc(#loc29)
    %80 = tt.broadcast %79 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %81 = tt.expand_dims %57 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc30)
    %82 = tt.broadcast %81 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc30)
    %83 = arith.cmpi sge, %81, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %84 = arith.cmpi slt, %81, %cst_12 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %85 = arith.andi %83, %84 : tensor<1x64xi1, #blocked2> loc(#loc30)
    %86 = tt.broadcast %85 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc30)
    %87 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc31)
    %88 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
    %89 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %90 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %91 = tt.addptr %90, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %92 = tt.splat %91 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %93 = tt.splat %72 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %94 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    %95 = tt.broadcast %34 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %96 = tt.splat %72 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %97 = tt.broadcast %59 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc38)
    %98 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %99 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %100 = ttg.local_alloc : () -> !ttg.memdesc<1x64x64xbf16, #shared1, #smem, mutable> loc(#loc31)
    %101 = ttg.local_alloc : () -> !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> loc(#loc36)
    %102 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc37)
    %103 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc38)
    %104 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %105 = arith.muli %33, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %106 = tt.broadcast %105 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %107 = arith.addi %106, %75 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %108 = tt.addptr %73, %107 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %109 = arith.cmpi slt, %33, %76 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %110 = arith.andi %42, %109 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %111 = tt.broadcast %110 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %112 = arith.andi %111, %80 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %113 = ttg.memdesc_subview %98[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %114 = tt.splat %104 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %115 = arith.andi %114, %112 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %116 = ttg.async_copy_global_to_local %108, %113 mask %115 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %117 = ttg.async_commit_group %116 loc(#loc29)
    %118 = arith.addi %106, %82 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %119 = tt.addptr %73, %118 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %120 = arith.andi %111, %86 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %121 = ttg.memdesc_subview %99[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %122 = arith.andi %114, %120 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %123 = ttg.async_copy_global_to_local %119, %121 mask %122 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %124 = ttg.async_commit_group %123 loc(#loc30)
    %125 = arith.addi %106, %40 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %126 = tt.addptr %87, %125 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %127 = arith.andi %111, %53 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %128 = ttg.memdesc_subview %100[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 1x64x64> loc(#loc31)
    %129 = arith.andi %114, %127 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %130 = ttg.async_copy_global_to_local %126, %128 mask %129 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared1, #smem, mutable, 1x64x64> loc(#loc31)
    %131 = ttg.async_commit_group %130 loc(#loc31)
    %132 = arith.muli %30, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %133 = tt.addptr %92, %132 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %134 = arith.cmpi sge, %30, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %135 = arith.cmpi slt, %30, %93 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %136 = arith.andi %134, %135 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %137 = ttg.memdesc_subview %101[%c0_i32, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
    %138 = tt.splat %104 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %139 = arith.andi %138, %136 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %140 = ttg.async_copy_global_to_local %133, %137 mask %139 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
    %141 = ttg.async_commit_group %140 loc(#loc36)
    %142 = tt.expand_dims %32 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %143 = arith.muli %142, %cst_18 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %144 = tt.broadcast %143 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %145 = arith.addi %95, %144 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %146 = tt.addptr %94, %145 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %147 = arith.cmpi sge, %142, %cst_9 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %148 = arith.cmpi slt, %142, %96 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %149 = arith.andi %147, %148 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %150 = tt.broadcast %149 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %151 = arith.andi %49, %150 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %152 = ttg.memdesc_subview %102[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %153 = tt.splat %104 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %154 = arith.andi %153, %151 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %155 = ttg.async_copy_global_to_local %146, %152 mask %154 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
    %156 = ttg.async_commit_group %155 loc(#loc37)
    %157 = arith.addi %97, %144 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %158 = tt.addptr %94, %157 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %159 = arith.andi %70, %150 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %160 = ttg.memdesc_subview %103[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %161 = arith.andi %153, %159 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %162 = ttg.async_copy_global_to_local %158, %160 mask %161 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
    %163 = ttg.async_commit_group %162 loc(#loc38)
    %164:14 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_19, %arg10 = %cst_19, %arg11 = %c0_i32, %arg12 = %c-1_i32, %arg13 = %c-1_i32, %arg14 = %117, %arg15 = %124, %arg16 = %131, %arg17 = %125, %arg18 = %127, %arg19 = %c0_i32, %arg20 = %141, %arg21 = %156, %arg22 = %163) -> (tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %202 = arith.subi %6, %c1_i32 : i32 loc(#loc39)
      %203 = arith.cmpi slt, %arg8, %202 : i32 loc(#loc39)
      %204 = arith.addi %arg13, %c1_i32 : i32 loc(#loc39)
      %205 = arith.cmpi sge, %204, %c1_i32 : i32 loc(#loc39)
      %206 = arith.select %205, %c0_i32, %204 : i32 loc(#loc39)
      %207 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %208 = arith.cmpi sge, %207, %c2_i32 : i32 loc(#loc39)
      %209 = arith.select %208, %c0_i32, %207 : i32 loc(#loc39)
      %210 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %211 = tt.addptr %11, %210 : !tt.ptr<bf16>, i32 loc(#loc41)
      %212 = arith.truncf %arg9 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc42)
      %213 = ttg.local_alloc %212 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc42)
      %214 = tt.splat %211 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %215 = tt.addptr %214, %41 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc26)
      %216 = ttg.convert_layout %212 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc26)
      tt.store %215, %216, %54 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %217 = arith.truncf %arg10 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc43)
      %218 = ttg.local_alloc %217 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc43)
      %219 = tt.addptr %214, %62 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc27)
      %220 = ttg.convert_layout %217 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc27)
      tt.store %219, %220, %71 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc27)
      %221 = ttg.async_wait %arg14, %arg15, %arg16, %arg20, %arg21, %arg22 {num = 0 : i32} loc(#loc29)
      %222 = ttg.memdesc_subview %98[%209, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      ttng.fence_async_shared {bCluster = false} loc(#loc44)
      %223 = ttng.warp_group_dot %222, %213, %cst_19 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc44)
      %224:3 = ttng.warp_group_dot_wait %223, %222, %213 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc44)
      %225 = ttg.memdesc_subview %99[%209, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      ttng.fence_async_shared {bCluster = false} loc(#loc45)
      %226 = ttng.warp_group_dot %225, %218, %224#0 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc45)
      %227:3 = ttng.warp_group_dot_wait %226, %225, %218 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc45)
      %228 = ttg.memdesc_subview %100[%206, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 1x64x64> loc(#loc31)
      %229 = ttg.local_load %228 token %221 : !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 1x64x64> -> tensor<64x64xbf16, #mma> loc(#loc46)
      %230 = arith.extf %229 : tensor<64x64xbf16, #mma> to tensor<64x64xf32, #mma> loc(#loc46)
      %231 = arith.subf %230, %227#0 : tensor<64x64xf32, #mma> loc(#loc46)
      %232 = arith.truncf %231 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc47)
      %233 = ttg.convert_layout %232 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc47)
      %234 = tt.addptr %88, %arg17 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc32)
      tt.store %234, %233, %arg18 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %235 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %236 = arith.muli %235, %c64_i32 : i32 loc(#loc49)
      %237 = arith.minsi %236, %arg7 : i32 loc(#loc50)
      %238 = arith.subi %237, %c1_i32 : i32 loc(#loc51)
      %239 = tt.splat %arg19 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %240 = arith.addi %239, %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %241 = arith.cmpi slt, %240, %89 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %242 = arith.muli %238, %c32_i32 : i32 loc(#loc53)
      %243 = tt.addptr %90, %242 : !tt.ptr<f32>, i32 loc(#loc54)
      %244 = tt.addptr %243, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %245 = tt.load %244 : !tt.ptr<f32> loc(#loc56)
      %246 = ttg.memdesc_subview %101[%206, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %247 = ttg.local_load %246 token %221 : !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %248 = tt.splat %245 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %249 = arith.subf %248, %247 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %250 = math.exp %249 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %251 = arith.select %241, %250, %cst_1 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %252 = tt.expand_dims %251 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %253 = tt.broadcast %252 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc61)
      %254 = arith.mulf %231, %253 : tensor<64x64xf32, #mma> loc(#loc61)
      %255 = math.exp %245 : f32 loc(#loc62)
      %256 = tt.splat %255 : f32 -> tensor<64x64xf32, #mma> loc(#loc63)
      %257 = arith.mulf %arg9, %256 : tensor<64x64xf32, #mma> loc(#loc63)
      %258 = arith.mulf %arg10, %256 : tensor<64x64xf32, #mma> loc(#loc64)
      %259 = arith.truncf %254 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc65)
      %260 = ttg.local_alloc %259 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc65)
      %261 = ttg.memdesc_subview %102[%209, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      ttng.fence_async_shared {bCluster = false} loc(#loc66)
      %262 = ttng.warp_group_dot %261, %260, %257 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc66)
      %263:3 = ttng.warp_group_dot_wait %262, %261, %260 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc66)
      %264 = ttg.memdesc_subview %103[%209, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      ttng.fence_async_shared {bCluster = false} loc(#loc67)
      %265 = ttng.warp_group_dot %264, %260, %258 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> * !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xf32, #mma> loc(#loc67)
      %266:3 = ttng.warp_group_dot_wait %265, %264, %260 {pendings = 0 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64>, !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc67)
      %267 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %268 = arith.cmpi sge, %267, %c2_i32 : i32 loc(#loc39)
      %269 = arith.select %268, %c0_i32, %267 : i32 loc(#loc39)
      %270 = arith.extsi %236 : i32 to i64 loc(#loc28)
      %271 = tt.splat %270 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %272 = tt.splat %270 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %273 = tt.splat %270 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %274 = arith.addi %271, %28 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %275 = arith.addi %272, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %276 = arith.addi %273, %32 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %277 = tt.expand_dims %274 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %278 = arith.muli %277, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %279 = tt.broadcast %278 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
      %280 = arith.addi %279, %75 : tensor<64x64xi64, #blocked2> loc(#loc29)
      %281 = tt.addptr %73, %280 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
      %282 = arith.cmpi sge, %277, %cst_7 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %283 = arith.cmpi slt, %277, %76 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %284 = arith.andi %282, %283 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %285 = tt.broadcast %284 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
      %286 = arith.andi %285, %80 : tensor<64x64xi1, #blocked2> loc(#loc29)
      %287 = ttg.memdesc_subview %98[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %288 = tt.splat %203 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
      %289 = arith.andi %288, %286 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %290 = ttg.async_copy_global_to_local %281, %287 mask %289 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %291 = ttg.async_commit_group %290 loc(#loc29)
      %292 = arith.addi %279, %82 : tensor<64x64xi64, #blocked2> loc(#loc30)
      %293 = tt.addptr %73, %292 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
      %294 = arith.andi %285, %86 : tensor<64x64xi1, #blocked2> loc(#loc30)
      %295 = ttg.memdesc_subview %99[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %296 = arith.andi %288, %294 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %297 = ttg.async_copy_global_to_local %293, %295 mask %296 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %298 = ttg.async_commit_group %297 loc(#loc30)
      %299 = arith.addi %279, %40 : tensor<64x64xi64, #blocked2> loc(#loc31)
      %300 = tt.addptr %87, %299 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
      %301 = arith.andi %285, %53 : tensor<64x64xi1, #blocked2> loc(#loc31)
      %302 = ttg.memdesc_subview %100[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 1x64x64> loc(#loc31)
      %303 = arith.andi %288, %301 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %304 = ttg.async_copy_global_to_local %300, %302 mask %303 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared1, #smem, mutable, 1x64x64> loc(#loc31)
      %305 = ttg.async_commit_group %304 loc(#loc31)
      %306 = arith.muli %275, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %307 = tt.addptr %92, %306 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %308 = arith.cmpi sge, %275, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %309 = arith.cmpi slt, %275, %93 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %310 = arith.andi %308, %309 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %311 = ttg.memdesc_subview %101[%c0_i32, %c0_i32] : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %312 = tt.splat %203 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %313 = arith.andi %312, %310 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %314 = ttg.async_copy_global_to_local %307, %311 mask %313 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 1x64> loc(#loc36)
      %315 = ttg.async_commit_group %314 loc(#loc36)
      %316 = tt.expand_dims %276 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
      %317 = arith.muli %316, %cst_18 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %318 = tt.broadcast %317 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
      %319 = arith.addi %95, %318 : tensor<64x64xi64, #blocked1> loc(#loc37)
      %320 = tt.addptr %94, %319 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
      %321 = arith.cmpi sge, %316, %cst_9 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %322 = arith.cmpi slt, %316, %96 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %323 = arith.andi %321, %322 : tensor<1x64xi1, #blocked1> loc(#loc37)
      %324 = tt.broadcast %323 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %325 = arith.andi %49, %324 : tensor<64x64xi1, #blocked1> loc(#loc37)
      %326 = ttg.memdesc_subview %102[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      %327 = tt.splat %203 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %328 = arith.andi %327, %325 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %329 = ttg.async_copy_global_to_local %320, %326 mask %328 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc37)
      %330 = ttg.async_commit_group %329 loc(#loc37)
      %331 = arith.addi %97, %318 : tensor<64x64xi64, #blocked1> loc(#loc38)
      %332 = tt.addptr %94, %331 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
      %333 = arith.andi %70, %324 : tensor<64x64xi1, #blocked1> loc(#loc38)
      %334 = ttg.memdesc_subview %103[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      %335 = arith.andi %327, %333 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %336 = ttg.async_copy_global_to_local %332, %334 mask %335 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared3, #smem, mutable, 2x64x64> loc(#loc38)
      %337 = ttg.async_commit_group %336 loc(#loc38)
      scf.yield %263#0, %266#0, %269, %209, %206, %291, %298, %305, %299, %301, %236, %315, %330, %337 : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %165 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %103 : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %102 : !ttg.memdesc<2x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %101 : !ttg.memdesc<1x64xf32, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %100 : !ttg.memdesc<1x64x64xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %99 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %98 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %166 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc68)
    %167 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc68)
    %168 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc68)
    %169 = arith.extsi %167 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc68)
    %170 = arith.extsi %168 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc68)
    %171 = tt.expand_dims %169 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc68)
    %172 = arith.muli %171, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc68)
    %173 = tt.broadcast %172 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc68)
    %174 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc68)
    %175 = arith.addi %174, %170 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc68)
    %176 = tt.expand_dims %175 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc68)
    %177 = tt.broadcast %176 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc68)
    %178 = arith.addi %173, %177 : tensor<64x64xi64, #blocked> loc(#loc68)
    %179 = tt.addptr %166, %178 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc68)
    %180 = arith.cmpi sge, %171, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc68)
    %181 = arith.cmpi slt, %171, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc68)
    %182 = arith.andi %180, %181 : tensor<64x1xi1, #blocked> loc(#loc68)
    %183 = tt.broadcast %182 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc68)
    %184 = arith.cmpi sge, %176, %cst_8 : tensor<1x64xi64, #blocked> loc(#loc68)
    %185 = arith.cmpi slt, %176, %cst_11 : tensor<1x64xi64, #blocked> loc(#loc68)
    %186 = arith.andi %184, %185 : tensor<1x64xi1, #blocked> loc(#loc68)
    %187 = tt.broadcast %186 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc68)
    %188 = arith.andi %183, %187 : tensor<64x64xi1, #blocked> loc(#loc68)
    %189 = ttg.convert_layout %164#0 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked> loc(#loc68)
    tt.store %179, %189, %188 : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc68)
    %190 = arith.addi %169, %cst_14 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc69)
    %191 = tt.expand_dims %190 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc69)
    %192 = arith.muli %191, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc69)
    %193 = tt.broadcast %192 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc69)
    %194 = arith.addi %193, %177 : tensor<64x64xi64, #blocked> loc(#loc69)
    %195 = tt.addptr %166, %194 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc69)
    %196 = arith.cmpi sge, %191, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc69)
    %197 = arith.cmpi slt, %191, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc69)
    %198 = arith.andi %196, %197 : tensor<64x1xi1, #blocked> loc(#loc69)
    %199 = tt.broadcast %198 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc69)
    %200 = arith.andi %199, %187 : tensor<64x64xi1, #blocked> loc(#loc69)
    %201 = ttg.convert_layout %164#1 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked> loc(#loc69)
    tt.store %195, %201, %200 : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc69)
    tt.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc71 = loc(callsite(#loc7 at #loc8))
#loc72 = loc(callsite(#loc9 at #loc8))
