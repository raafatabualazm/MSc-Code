; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @l2norm_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 6, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = lshr i32 %8, 4, !dbg !10
  %10 = shl nuw nsw i32 %8, 3, !dbg !10
  %11 = and i32 %10, 120, !dbg !10
  %12 = zext nneg i32 %11 to i64, !dbg !10
  %13 = icmp sgt i32 %7, -1, !dbg !10
  %.lobit = and i32 %9, 1, !dbg !10
  %14 = or disjoint i32 %.lobit, 2, !dbg !10
  %15 = or disjoint i32 %.lobit, 4, !dbg !10
  %16 = or disjoint i32 %.lobit, 6, !dbg !10
  %17 = insertelement <4 x i32> poison, i32 %.lobit, i64 0, !dbg !10
  %18 = shufflevector <4 x i32> %17, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !10
  %19 = or disjoint <4 x i32> %18, <i32 14, i32 12, i32 10, i32 8>, !dbg !10
  %20 = insertelement <8 x i32> poison, i32 %.lobit, i64 0, !dbg !10
  %21 = shufflevector <8 x i32> %20, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !10
  %22 = or disjoint <8 x i32> %21, <i32 30, i32 28, i32 26, i32 24, i32 22, i32 20, i32 18, i32 16>, !dbg !10
  %23 = insertelement <16 x i32> poison, i32 %9, i64 0, !dbg !10
  %24 = insertelement <16 x i32> %23, i32 %.lobit, i64 1, !dbg !10
  %25 = shufflevector <16 x i32> %24, <16 x i32> poison, <16 x i32> <i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !10
  %26 = or <16 x i32> %25, <i32 62, i32 60, i32 58, i32 56, i32 54, i32 52, i32 50, i32 48, i32 46, i32 44, i32 42, i32 40, i32 38, i32 36, i32 34, i32 32>, !dbg !10
  %27 = insertelement <32 x i32> poison, i32 %16, i64 28, !dbg !10
  %28 = insertelement <32 x i32> %27, i32 %15, i64 29, !dbg !10
  %29 = insertelement <32 x i32> %28, i32 %14, i64 30, !dbg !10
  %30 = insertelement <32 x i32> %29, i32 %.lobit, i64 31, !dbg !10
  %31 = shufflevector <16 x i32> %26, <16 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %32 = shufflevector <32 x i32> %31, <32 x i32> %30, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 60, i32 61, i32 62, i32 63>, !dbg !10
  %33 = shufflevector <8 x i32> %22, <8 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %34 = shufflevector <32 x i32> %32, <32 x i32> %33, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 poison, i32 poison, i32 poison, i32 poison, i32 28, i32 29, i32 30, i32 31>, !dbg !10
  %35 = shufflevector <4 x i32> %19, <4 x i32> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !10
  %36 = shufflevector <32 x i32> %34, <32 x i32> %35, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 28, i32 29, i32 30, i32 31>, !dbg !10
  %37 = insertelement <32 x i32> poison, i32 %7, i64 0, !dbg !10
  %38 = shufflevector <32 x i32> %37, <32 x i32> poison, <32 x i32> zeroinitializer, !dbg !10
  %39 = or disjoint <32 x i32> %36, %38, !dbg !10
  %40 = extractelement <32 x i32> %39, i64 31, !dbg !10
  %41 = sext i32 %40 to i64, !dbg !10
  %42 = shl nsw i64 %41, 7, !dbg !10
  %43 = extractelement <32 x i32> %39, i64 30, !dbg !10
  %44 = sext i32 %43 to i64, !dbg !10
  %45 = shl nsw i64 %44, 7, !dbg !10
  %46 = extractelement <32 x i32> %39, i64 29, !dbg !10
  %47 = sext i32 %46 to i64, !dbg !10
  %48 = shl nsw i64 %47, 7, !dbg !10
  %49 = extractelement <32 x i32> %39, i64 28, !dbg !10
  %50 = sext i32 %49 to i64, !dbg !10
  %51 = shl nsw i64 %50, 7, !dbg !10
  %52 = extractelement <32 x i32> %39, i64 27, !dbg !10
  %53 = sext i32 %52 to i64, !dbg !10
  %54 = shl nsw i64 %53, 7, !dbg !10
  %55 = extractelement <32 x i32> %39, i64 26, !dbg !10
  %56 = sext i32 %55 to i64, !dbg !10
  %57 = shl nsw i64 %56, 7, !dbg !10
  %58 = extractelement <32 x i32> %39, i64 25, !dbg !10
  %59 = sext i32 %58 to i64, !dbg !10
  %60 = shl nsw i64 %59, 7, !dbg !10
  %61 = extractelement <32 x i32> %39, i64 24, !dbg !10
  %62 = sext i32 %61 to i64, !dbg !10
  %63 = shl nsw i64 %62, 7, !dbg !10
  %64 = extractelement <32 x i32> %39, i64 23, !dbg !10
  %65 = sext i32 %64 to i64, !dbg !10
  %66 = shl nsw i64 %65, 7, !dbg !10
  %67 = extractelement <32 x i32> %39, i64 22, !dbg !10
  %68 = sext i32 %67 to i64, !dbg !10
  %69 = shl nsw i64 %68, 7, !dbg !10
  %70 = extractelement <32 x i32> %39, i64 21, !dbg !10
  %71 = sext i32 %70 to i64, !dbg !10
  %72 = shl nsw i64 %71, 7, !dbg !10
  %73 = extractelement <32 x i32> %39, i64 20, !dbg !10
  %74 = sext i32 %73 to i64, !dbg !10
  %75 = shl nsw i64 %74, 7, !dbg !10
  %76 = extractelement <32 x i32> %39, i64 19, !dbg !10
  %77 = sext i32 %76 to i64, !dbg !10
  %78 = shl nsw i64 %77, 7, !dbg !10
  %79 = extractelement <32 x i32> %39, i64 18, !dbg !10
  %80 = sext i32 %79 to i64, !dbg !10
  %81 = shl nsw i64 %80, 7, !dbg !10
  %82 = extractelement <32 x i32> %39, i64 17, !dbg !10
  %83 = sext i32 %82 to i64, !dbg !10
  %84 = shl nsw i64 %83, 7, !dbg !10
  %85 = extractelement <32 x i32> %39, i64 16, !dbg !10
  %86 = sext i32 %85 to i64, !dbg !10
  %87 = shl nsw i64 %86, 7, !dbg !10
  %88 = extractelement <32 x i32> %39, i64 15, !dbg !10
  %89 = sext i32 %88 to i64, !dbg !10
  %90 = shl nsw i64 %89, 7, !dbg !10
  %91 = extractelement <32 x i32> %39, i64 14, !dbg !10
  %92 = sext i32 %91 to i64, !dbg !10
  %93 = shl nsw i64 %92, 7, !dbg !10
  %94 = extractelement <32 x i32> %39, i64 13, !dbg !10
  %95 = sext i32 %94 to i64, !dbg !10
  %96 = shl nsw i64 %95, 7, !dbg !10
  %97 = extractelement <32 x i32> %39, i64 12, !dbg !10
  %98 = sext i32 %97 to i64, !dbg !10
  %99 = shl nsw i64 %98, 7, !dbg !10
  %100 = extractelement <32 x i32> %39, i64 11, !dbg !10
  %101 = sext i32 %100 to i64, !dbg !10
  %102 = shl nsw i64 %101, 7, !dbg !10
  %103 = extractelement <32 x i32> %39, i64 10, !dbg !10
  %104 = sext i32 %103 to i64, !dbg !10
  %105 = shl nsw i64 %104, 7, !dbg !10
  %106 = extractelement <32 x i32> %39, i64 9, !dbg !10
  %107 = sext i32 %106 to i64, !dbg !10
  %108 = shl nsw i64 %107, 7, !dbg !10
  %109 = extractelement <32 x i32> %39, i64 8, !dbg !10
  %110 = sext i32 %109 to i64, !dbg !10
  %111 = shl nsw i64 %110, 7, !dbg !10
  %112 = extractelement <32 x i32> %39, i64 7, !dbg !10
  %113 = sext i32 %112 to i64, !dbg !10
  %114 = shl nsw i64 %113, 7, !dbg !10
  %115 = extractelement <32 x i32> %39, i64 6, !dbg !10
  %116 = sext i32 %115 to i64, !dbg !10
  %117 = shl nsw i64 %116, 7, !dbg !10
  %118 = extractelement <32 x i32> %39, i64 5, !dbg !10
  %119 = sext i32 %118 to i64, !dbg !10
  %120 = shl nsw i64 %119, 7, !dbg !10
  %121 = extractelement <32 x i32> %39, i64 4, !dbg !10
  %122 = sext i32 %121 to i64, !dbg !10
  %123 = shl nsw i64 %122, 7, !dbg !10
  %124 = extractelement <32 x i32> %39, i64 3, !dbg !10
  %125 = sext i32 %124 to i64, !dbg !10
  %126 = shl nsw i64 %125, 7, !dbg !10
  %127 = extractelement <32 x i32> %39, i64 2, !dbg !10
  %128 = sext i32 %127 to i64, !dbg !10
  %129 = shl nsw i64 %128, 7, !dbg !10
  %130 = extractelement <32 x i32> %39, i64 1, !dbg !10
  %131 = sext i32 %130 to i64, !dbg !10
  %132 = shl nsw i64 %131, 7, !dbg !10
  %133 = extractelement <32 x i32> %39, i64 0, !dbg !10
  %134 = sext i32 %133 to i64, !dbg !10
  %135 = shl nsw i64 %134, 7, !dbg !10
  %136 = or disjoint i64 %42, %12, !dbg !10
  %137 = or disjoint i64 %45, %12, !dbg !10
  %138 = or disjoint i64 %48, %12, !dbg !10
  %139 = or disjoint i64 %51, %12, !dbg !10
  %140 = or disjoint i64 %54, %12, !dbg !10
  %141 = or disjoint i64 %57, %12, !dbg !10
  %142 = or disjoint i64 %60, %12, !dbg !10
  %143 = or disjoint i64 %63, %12, !dbg !10
  %144 = or disjoint i64 %66, %12, !dbg !10
  %145 = or disjoint i64 %69, %12, !dbg !10
  %146 = or disjoint i64 %72, %12, !dbg !10
  %147 = or disjoint i64 %75, %12, !dbg !10
  %148 = or disjoint i64 %78, %12, !dbg !10
  %149 = or disjoint i64 %81, %12, !dbg !10
  %150 = or disjoint i64 %84, %12, !dbg !10
  %151 = or disjoint i64 %87, %12, !dbg !10
  %152 = or disjoint i64 %90, %12, !dbg !10
  %153 = or disjoint i64 %93, %12, !dbg !10
  %154 = or disjoint i64 %96, %12, !dbg !10
  %155 = or disjoint i64 %99, %12, !dbg !10
  %156 = or disjoint i64 %102, %12, !dbg !10
  %157 = or disjoint i64 %105, %12, !dbg !10
  %158 = or disjoint i64 %108, %12, !dbg !10
  %159 = or disjoint i64 %111, %12, !dbg !10
  %160 = or disjoint i64 %114, %12, !dbg !10
  %161 = or disjoint i64 %117, %12, !dbg !10
  %162 = or disjoint i64 %120, %12, !dbg !10
  %163 = or disjoint i64 %123, %12, !dbg !10
  %164 = or disjoint i64 %126, %12, !dbg !10
  %165 = or disjoint i64 %129, %12, !dbg !10
  %166 = or disjoint i64 %132, %12, !dbg !10
  %167 = or disjoint i64 %135, %12, !dbg !10
  %168 = getelementptr bfloat, ptr addrspace(1) %0, i64 %136, !dbg !10
  %169 = getelementptr bfloat, ptr addrspace(1) %0, i64 %137, !dbg !10
  %170 = getelementptr bfloat, ptr addrspace(1) %0, i64 %138, !dbg !10
  %171 = getelementptr bfloat, ptr addrspace(1) %0, i64 %139, !dbg !10
  %172 = getelementptr bfloat, ptr addrspace(1) %0, i64 %140, !dbg !10
  %173 = getelementptr bfloat, ptr addrspace(1) %0, i64 %141, !dbg !10
  %174 = getelementptr bfloat, ptr addrspace(1) %0, i64 %142, !dbg !10
  %175 = getelementptr bfloat, ptr addrspace(1) %0, i64 %143, !dbg !10
  %176 = getelementptr bfloat, ptr addrspace(1) %0, i64 %144, !dbg !10
  %177 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !10
  %178 = getelementptr bfloat, ptr addrspace(1) %0, i64 %146, !dbg !10
  %179 = getelementptr bfloat, ptr addrspace(1) %0, i64 %147, !dbg !10
  %180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !10
  %181 = getelementptr bfloat, ptr addrspace(1) %0, i64 %149, !dbg !10
  %182 = getelementptr bfloat, ptr addrspace(1) %0, i64 %150, !dbg !10
  %183 = getelementptr bfloat, ptr addrspace(1) %0, i64 %151, !dbg !10
  %184 = getelementptr bfloat, ptr addrspace(1) %0, i64 %152, !dbg !10
  %185 = getelementptr bfloat, ptr addrspace(1) %0, i64 %153, !dbg !10
  %186 = getelementptr bfloat, ptr addrspace(1) %0, i64 %154, !dbg !10
  %187 = getelementptr bfloat, ptr addrspace(1) %0, i64 %155, !dbg !10
  %188 = getelementptr bfloat, ptr addrspace(1) %0, i64 %156, !dbg !10
  %189 = getelementptr bfloat, ptr addrspace(1) %0, i64 %157, !dbg !10
  %190 = getelementptr bfloat, ptr addrspace(1) %0, i64 %158, !dbg !10
  %191 = getelementptr bfloat, ptr addrspace(1) %0, i64 %159, !dbg !10
  %192 = getelementptr bfloat, ptr addrspace(1) %0, i64 %160, !dbg !10
  %193 = getelementptr bfloat, ptr addrspace(1) %0, i64 %161, !dbg !10
  %194 = getelementptr bfloat, ptr addrspace(1) %0, i64 %162, !dbg !10
  %195 = getelementptr bfloat, ptr addrspace(1) %0, i64 %163, !dbg !10
  %196 = getelementptr bfloat, ptr addrspace(1) %0, i64 %164, !dbg !10
  %197 = getelementptr bfloat, ptr addrspace(1) %0, i64 %165, !dbg !10
  %198 = getelementptr bfloat, ptr addrspace(1) %0, i64 %166, !dbg !10
  %199 = getelementptr bfloat, ptr addrspace(1) %0, i64 %167, !dbg !10
  %200 = icmp slt <32 x i32> %39, splat (i32 49152), !dbg !10
  %201 = extractelement <32 x i1> %200, i64 31, !dbg !10
  %202 = and i1 %13, %201, !dbg !10
  %203 = extractelement <32 x i1> %200, i64 30, !dbg !10
  %204 = and i1 %13, %203, !dbg !10
  %205 = extractelement <32 x i1> %200, i64 29, !dbg !10
  %206 = and i1 %13, %205, !dbg !10
  %207 = extractelement <32 x i1> %200, i64 28, !dbg !10
  %208 = and i1 %13, %207, !dbg !10
  %209 = extractelement <32 x i1> %200, i64 27, !dbg !10
  %210 = and i1 %13, %209, !dbg !10
  %211 = extractelement <32 x i1> %200, i64 26, !dbg !10
  %212 = and i1 %13, %211, !dbg !10
  %213 = extractelement <32 x i1> %200, i64 25, !dbg !10
  %214 = and i1 %13, %213, !dbg !10
  %215 = extractelement <32 x i1> %200, i64 24, !dbg !10
  %216 = and i1 %13, %215, !dbg !10
  %217 = extractelement <32 x i1> %200, i64 23, !dbg !10
  %218 = and i1 %13, %217, !dbg !10
  %219 = extractelement <32 x i1> %200, i64 22, !dbg !10
  %220 = and i1 %13, %219, !dbg !10
  %221 = extractelement <32 x i1> %200, i64 21, !dbg !10
  %222 = and i1 %13, %221, !dbg !10
  %223 = extractelement <32 x i1> %200, i64 20, !dbg !10
  %224 = and i1 %13, %223, !dbg !10
  %225 = extractelement <32 x i1> %200, i64 19, !dbg !10
  %226 = and i1 %13, %225, !dbg !10
  %227 = extractelement <32 x i1> %200, i64 18, !dbg !10
  %228 = and i1 %13, %227, !dbg !10
  %229 = extractelement <32 x i1> %200, i64 17, !dbg !10
  %230 = and i1 %13, %229, !dbg !10
  %231 = extractelement <32 x i1> %200, i64 16, !dbg !10
  %232 = and i1 %13, %231, !dbg !10
  %233 = extractelement <32 x i1> %200, i64 15, !dbg !10
  %234 = and i1 %13, %233, !dbg !10
  %235 = extractelement <32 x i1> %200, i64 14, !dbg !10
  %236 = and i1 %13, %235, !dbg !10
  %237 = extractelement <32 x i1> %200, i64 13, !dbg !10
  %238 = and i1 %13, %237, !dbg !10
  %239 = extractelement <32 x i1> %200, i64 12, !dbg !10
  %240 = and i1 %13, %239, !dbg !10
  %241 = extractelement <32 x i1> %200, i64 11, !dbg !10
  %242 = and i1 %13, %241, !dbg !10
  %243 = extractelement <32 x i1> %200, i64 10, !dbg !10
  %244 = and i1 %13, %243, !dbg !10
  %245 = extractelement <32 x i1> %200, i64 9, !dbg !10
  %246 = and i1 %13, %245, !dbg !10
  %247 = extractelement <32 x i1> %200, i64 8, !dbg !10
  %248 = and i1 %13, %247, !dbg !10
  %249 = extractelement <32 x i1> %200, i64 7, !dbg !10
  %250 = and i1 %13, %249, !dbg !10
  %251 = extractelement <32 x i1> %200, i64 6, !dbg !10
  %252 = and i1 %13, %251, !dbg !10
  %253 = extractelement <32 x i1> %200, i64 5, !dbg !10
  %254 = and i1 %13, %253, !dbg !10
  %255 = extractelement <32 x i1> %200, i64 4, !dbg !10
  %256 = and i1 %13, %255, !dbg !10
  %257 = extractelement <32 x i1> %200, i64 3, !dbg !10
  %258 = and i1 %13, %257, !dbg !10
  %259 = extractelement <32 x i1> %200, i64 2, !dbg !10
  %260 = and i1 %13, %259, !dbg !10
  %261 = extractelement <32 x i1> %200, i64 1, !dbg !10
  %262 = and i1 %13, %261, !dbg !10
  %263 = extractelement <32 x i1> %200, i64 0, !dbg !10
  %264 = and i1 %13, %263, !dbg !10
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %202) #6, !dbg !10
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !10
  %267 = bitcast i32 %266 to <2 x bfloat>, !dbg !10
  %268 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !10
  %269 = bitcast i32 %268 to <2 x bfloat>, !dbg !10
  %270 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !10
  %271 = bitcast i32 %270 to <2 x bfloat>, !dbg !10
  %272 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !10
  %273 = bitcast i32 %272 to <2 x bfloat>, !dbg !10
  %274 = extractelement <2 x bfloat> %267, i64 0, !dbg !10
  %275 = extractelement <2 x bfloat> %267, i64 1, !dbg !10
  %276 = extractelement <2 x bfloat> %269, i64 0, !dbg !10
  %277 = extractelement <2 x bfloat> %269, i64 1, !dbg !10
  %278 = extractelement <2 x bfloat> %271, i64 0, !dbg !10
  %279 = extractelement <2 x bfloat> %271, i64 1, !dbg !10
  %280 = extractelement <2 x bfloat> %273, i64 0, !dbg !10
  %281 = extractelement <2 x bfloat> %273, i64 1, !dbg !10
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %204) #6, !dbg !10
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !10
  %284 = bitcast i32 %283 to <2 x bfloat>, !dbg !10
  %285 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !10
  %286 = bitcast i32 %285 to <2 x bfloat>, !dbg !10
  %287 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !10
  %288 = bitcast i32 %287 to <2 x bfloat>, !dbg !10
  %289 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !10
  %290 = bitcast i32 %289 to <2 x bfloat>, !dbg !10
  %291 = extractelement <2 x bfloat> %284, i64 0, !dbg !10
  %292 = extractelement <2 x bfloat> %284, i64 1, !dbg !10
  %293 = extractelement <2 x bfloat> %286, i64 0, !dbg !10
  %294 = extractelement <2 x bfloat> %286, i64 1, !dbg !10
  %295 = extractelement <2 x bfloat> %288, i64 0, !dbg !10
  %296 = extractelement <2 x bfloat> %288, i64 1, !dbg !10
  %297 = extractelement <2 x bfloat> %290, i64 0, !dbg !10
  %298 = extractelement <2 x bfloat> %290, i64 1, !dbg !10
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %206) #6, !dbg !10
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !10
  %301 = bitcast i32 %300 to <2 x bfloat>, !dbg !10
  %302 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !10
  %303 = bitcast i32 %302 to <2 x bfloat>, !dbg !10
  %304 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !10
  %305 = bitcast i32 %304 to <2 x bfloat>, !dbg !10
  %306 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !10
  %307 = bitcast i32 %306 to <2 x bfloat>, !dbg !10
  %308 = extractelement <2 x bfloat> %301, i64 0, !dbg !10
  %309 = extractelement <2 x bfloat> %301, i64 1, !dbg !10
  %310 = extractelement <2 x bfloat> %303, i64 0, !dbg !10
  %311 = extractelement <2 x bfloat> %303, i64 1, !dbg !10
  %312 = extractelement <2 x bfloat> %305, i64 0, !dbg !10
  %313 = extractelement <2 x bfloat> %305, i64 1, !dbg !10
  %314 = extractelement <2 x bfloat> %307, i64 0, !dbg !10
  %315 = extractelement <2 x bfloat> %307, i64 1, !dbg !10
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %208) #6, !dbg !10
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !10
  %318 = bitcast i32 %317 to <2 x bfloat>, !dbg !10
  %319 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !10
  %320 = bitcast i32 %319 to <2 x bfloat>, !dbg !10
  %321 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !10
  %322 = bitcast i32 %321 to <2 x bfloat>, !dbg !10
  %323 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !10
  %324 = bitcast i32 %323 to <2 x bfloat>, !dbg !10
  %325 = extractelement <2 x bfloat> %318, i64 0, !dbg !10
  %326 = extractelement <2 x bfloat> %318, i64 1, !dbg !10
  %327 = extractelement <2 x bfloat> %320, i64 0, !dbg !10
  %328 = extractelement <2 x bfloat> %320, i64 1, !dbg !10
  %329 = extractelement <2 x bfloat> %322, i64 0, !dbg !10
  %330 = extractelement <2 x bfloat> %322, i64 1, !dbg !10
  %331 = extractelement <2 x bfloat> %324, i64 0, !dbg !10
  %332 = extractelement <2 x bfloat> %324, i64 1, !dbg !10
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %172, i1 %210) #6, !dbg !10
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !10
  %335 = bitcast i32 %334 to <2 x bfloat>, !dbg !10
  %336 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !10
  %337 = bitcast i32 %336 to <2 x bfloat>, !dbg !10
  %338 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !10
  %339 = bitcast i32 %338 to <2 x bfloat>, !dbg !10
  %340 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !10
  %341 = bitcast i32 %340 to <2 x bfloat>, !dbg !10
  %342 = extractelement <2 x bfloat> %335, i64 0, !dbg !10
  %343 = extractelement <2 x bfloat> %335, i64 1, !dbg !10
  %344 = extractelement <2 x bfloat> %337, i64 0, !dbg !10
  %345 = extractelement <2 x bfloat> %337, i64 1, !dbg !10
  %346 = extractelement <2 x bfloat> %339, i64 0, !dbg !10
  %347 = extractelement <2 x bfloat> %339, i64 1, !dbg !10
  %348 = extractelement <2 x bfloat> %341, i64 0, !dbg !10
  %349 = extractelement <2 x bfloat> %341, i64 1, !dbg !10
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %212) #6, !dbg !10
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !10
  %352 = bitcast i32 %351 to <2 x bfloat>, !dbg !10
  %353 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !10
  %354 = bitcast i32 %353 to <2 x bfloat>, !dbg !10
  %355 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !10
  %356 = bitcast i32 %355 to <2 x bfloat>, !dbg !10
  %357 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !10
  %358 = bitcast i32 %357 to <2 x bfloat>, !dbg !10
  %359 = extractelement <2 x bfloat> %352, i64 0, !dbg !10
  %360 = extractelement <2 x bfloat> %352, i64 1, !dbg !10
  %361 = extractelement <2 x bfloat> %354, i64 0, !dbg !10
  %362 = extractelement <2 x bfloat> %354, i64 1, !dbg !10
  %363 = extractelement <2 x bfloat> %356, i64 0, !dbg !10
  %364 = extractelement <2 x bfloat> %356, i64 1, !dbg !10
  %365 = extractelement <2 x bfloat> %358, i64 0, !dbg !10
  %366 = extractelement <2 x bfloat> %358, i64 1, !dbg !10
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 %214) #6, !dbg !10
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !10
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !10
  %370 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !10
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !10
  %372 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !10
  %373 = bitcast i32 %372 to <2 x bfloat>, !dbg !10
  %374 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !10
  %375 = bitcast i32 %374 to <2 x bfloat>, !dbg !10
  %376 = extractelement <2 x bfloat> %369, i64 0, !dbg !10
  %377 = extractelement <2 x bfloat> %369, i64 1, !dbg !10
  %378 = extractelement <2 x bfloat> %371, i64 0, !dbg !10
  %379 = extractelement <2 x bfloat> %371, i64 1, !dbg !10
  %380 = extractelement <2 x bfloat> %373, i64 0, !dbg !10
  %381 = extractelement <2 x bfloat> %373, i64 1, !dbg !10
  %382 = extractelement <2 x bfloat> %375, i64 0, !dbg !10
  %383 = extractelement <2 x bfloat> %375, i64 1, !dbg !10
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %216) #6, !dbg !10
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !10
  %386 = bitcast i32 %385 to <2 x bfloat>, !dbg !10
  %387 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !10
  %388 = bitcast i32 %387 to <2 x bfloat>, !dbg !10
  %389 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !10
  %390 = bitcast i32 %389 to <2 x bfloat>, !dbg !10
  %391 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !10
  %392 = bitcast i32 %391 to <2 x bfloat>, !dbg !10
  %393 = extractelement <2 x bfloat> %386, i64 0, !dbg !10
  %394 = extractelement <2 x bfloat> %386, i64 1, !dbg !10
  %395 = extractelement <2 x bfloat> %388, i64 0, !dbg !10
  %396 = extractelement <2 x bfloat> %388, i64 1, !dbg !10
  %397 = extractelement <2 x bfloat> %390, i64 0, !dbg !10
  %398 = extractelement <2 x bfloat> %390, i64 1, !dbg !10
  %399 = extractelement <2 x bfloat> %392, i64 0, !dbg !10
  %400 = extractelement <2 x bfloat> %392, i64 1, !dbg !10
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %176, i1 %218) #6, !dbg !10
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !10
  %403 = bitcast i32 %402 to <2 x bfloat>, !dbg !10
  %404 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !10
  %405 = bitcast i32 %404 to <2 x bfloat>, !dbg !10
  %406 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !10
  %407 = bitcast i32 %406 to <2 x bfloat>, !dbg !10
  %408 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !10
  %409 = bitcast i32 %408 to <2 x bfloat>, !dbg !10
  %410 = extractelement <2 x bfloat> %403, i64 0, !dbg !10
  %411 = extractelement <2 x bfloat> %403, i64 1, !dbg !10
  %412 = extractelement <2 x bfloat> %405, i64 0, !dbg !10
  %413 = extractelement <2 x bfloat> %405, i64 1, !dbg !10
  %414 = extractelement <2 x bfloat> %407, i64 0, !dbg !10
  %415 = extractelement <2 x bfloat> %407, i64 1, !dbg !10
  %416 = extractelement <2 x bfloat> %409, i64 0, !dbg !10
  %417 = extractelement <2 x bfloat> %409, i64 1, !dbg !10
  %418 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %220) #6, !dbg !10
  %419 = extractvalue { i32, i32, i32, i32 } %418, 0, !dbg !10
  %420 = bitcast i32 %419 to <2 x bfloat>, !dbg !10
  %421 = extractvalue { i32, i32, i32, i32 } %418, 1, !dbg !10
  %422 = bitcast i32 %421 to <2 x bfloat>, !dbg !10
  %423 = extractvalue { i32, i32, i32, i32 } %418, 2, !dbg !10
  %424 = bitcast i32 %423 to <2 x bfloat>, !dbg !10
  %425 = extractvalue { i32, i32, i32, i32 } %418, 3, !dbg !10
  %426 = bitcast i32 %425 to <2 x bfloat>, !dbg !10
  %427 = extractelement <2 x bfloat> %420, i64 0, !dbg !10
  %428 = extractelement <2 x bfloat> %420, i64 1, !dbg !10
  %429 = extractelement <2 x bfloat> %422, i64 0, !dbg !10
  %430 = extractelement <2 x bfloat> %422, i64 1, !dbg !10
  %431 = extractelement <2 x bfloat> %424, i64 0, !dbg !10
  %432 = extractelement <2 x bfloat> %424, i64 1, !dbg !10
  %433 = extractelement <2 x bfloat> %426, i64 0, !dbg !10
  %434 = extractelement <2 x bfloat> %426, i64 1, !dbg !10
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %178, i1 %222) #6, !dbg !10
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !10
  %437 = bitcast i32 %436 to <2 x bfloat>, !dbg !10
  %438 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !10
  %439 = bitcast i32 %438 to <2 x bfloat>, !dbg !10
  %440 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !10
  %441 = bitcast i32 %440 to <2 x bfloat>, !dbg !10
  %442 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !10
  %443 = bitcast i32 %442 to <2 x bfloat>, !dbg !10
  %444 = extractelement <2 x bfloat> %437, i64 0, !dbg !10
  %445 = extractelement <2 x bfloat> %437, i64 1, !dbg !10
  %446 = extractelement <2 x bfloat> %439, i64 0, !dbg !10
  %447 = extractelement <2 x bfloat> %439, i64 1, !dbg !10
  %448 = extractelement <2 x bfloat> %441, i64 0, !dbg !10
  %449 = extractelement <2 x bfloat> %441, i64 1, !dbg !10
  %450 = extractelement <2 x bfloat> %443, i64 0, !dbg !10
  %451 = extractelement <2 x bfloat> %443, i64 1, !dbg !10
  %452 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %179, i1 %224) #6, !dbg !10
  %453 = extractvalue { i32, i32, i32, i32 } %452, 0, !dbg !10
  %454 = bitcast i32 %453 to <2 x bfloat>, !dbg !10
  %455 = extractvalue { i32, i32, i32, i32 } %452, 1, !dbg !10
  %456 = bitcast i32 %455 to <2 x bfloat>, !dbg !10
  %457 = extractvalue { i32, i32, i32, i32 } %452, 2, !dbg !10
  %458 = bitcast i32 %457 to <2 x bfloat>, !dbg !10
  %459 = extractvalue { i32, i32, i32, i32 } %452, 3, !dbg !10
  %460 = bitcast i32 %459 to <2 x bfloat>, !dbg !10
  %461 = extractelement <2 x bfloat> %454, i64 0, !dbg !10
  %462 = extractelement <2 x bfloat> %454, i64 1, !dbg !10
  %463 = extractelement <2 x bfloat> %456, i64 0, !dbg !10
  %464 = extractelement <2 x bfloat> %456, i64 1, !dbg !10
  %465 = extractelement <2 x bfloat> %458, i64 0, !dbg !10
  %466 = extractelement <2 x bfloat> %458, i64 1, !dbg !10
  %467 = extractelement <2 x bfloat> %460, i64 0, !dbg !10
  %468 = extractelement <2 x bfloat> %460, i64 1, !dbg !10
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %226) #6, !dbg !10
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !10
  %471 = bitcast i32 %470 to <2 x bfloat>, !dbg !10
  %472 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !10
  %473 = bitcast i32 %472 to <2 x bfloat>, !dbg !10
  %474 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !10
  %475 = bitcast i32 %474 to <2 x bfloat>, !dbg !10
  %476 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !10
  %477 = bitcast i32 %476 to <2 x bfloat>, !dbg !10
  %478 = extractelement <2 x bfloat> %471, i64 0, !dbg !10
  %479 = extractelement <2 x bfloat> %471, i64 1, !dbg !10
  %480 = extractelement <2 x bfloat> %473, i64 0, !dbg !10
  %481 = extractelement <2 x bfloat> %473, i64 1, !dbg !10
  %482 = extractelement <2 x bfloat> %475, i64 0, !dbg !10
  %483 = extractelement <2 x bfloat> %475, i64 1, !dbg !10
  %484 = extractelement <2 x bfloat> %477, i64 0, !dbg !10
  %485 = extractelement <2 x bfloat> %477, i64 1, !dbg !10
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %228) #6, !dbg !10
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !10
  %488 = bitcast i32 %487 to <2 x bfloat>, !dbg !10
  %489 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !10
  %490 = bitcast i32 %489 to <2 x bfloat>, !dbg !10
  %491 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !10
  %492 = bitcast i32 %491 to <2 x bfloat>, !dbg !10
  %493 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !10
  %494 = bitcast i32 %493 to <2 x bfloat>, !dbg !10
  %495 = extractelement <2 x bfloat> %488, i64 0, !dbg !10
  %496 = extractelement <2 x bfloat> %488, i64 1, !dbg !10
  %497 = extractelement <2 x bfloat> %490, i64 0, !dbg !10
  %498 = extractelement <2 x bfloat> %490, i64 1, !dbg !10
  %499 = extractelement <2 x bfloat> %492, i64 0, !dbg !10
  %500 = extractelement <2 x bfloat> %492, i64 1, !dbg !10
  %501 = extractelement <2 x bfloat> %494, i64 0, !dbg !10
  %502 = extractelement <2 x bfloat> %494, i64 1, !dbg !10
  %503 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %230) #6, !dbg !10
  %504 = extractvalue { i32, i32, i32, i32 } %503, 0, !dbg !10
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !10
  %506 = extractvalue { i32, i32, i32, i32 } %503, 1, !dbg !10
  %507 = bitcast i32 %506 to <2 x bfloat>, !dbg !10
  %508 = extractvalue { i32, i32, i32, i32 } %503, 2, !dbg !10
  %509 = bitcast i32 %508 to <2 x bfloat>, !dbg !10
  %510 = extractvalue { i32, i32, i32, i32 } %503, 3, !dbg !10
  %511 = bitcast i32 %510 to <2 x bfloat>, !dbg !10
  %512 = extractelement <2 x bfloat> %505, i64 0, !dbg !10
  %513 = extractelement <2 x bfloat> %505, i64 1, !dbg !10
  %514 = extractelement <2 x bfloat> %507, i64 0, !dbg !10
  %515 = extractelement <2 x bfloat> %507, i64 1, !dbg !10
  %516 = extractelement <2 x bfloat> %509, i64 0, !dbg !10
  %517 = extractelement <2 x bfloat> %509, i64 1, !dbg !10
  %518 = extractelement <2 x bfloat> %511, i64 0, !dbg !10
  %519 = extractelement <2 x bfloat> %511, i64 1, !dbg !10
  %520 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %232) #6, !dbg !10
  %521 = extractvalue { i32, i32, i32, i32 } %520, 0, !dbg !10
  %522 = bitcast i32 %521 to <2 x bfloat>, !dbg !10
  %523 = extractvalue { i32, i32, i32, i32 } %520, 1, !dbg !10
  %524 = bitcast i32 %523 to <2 x bfloat>, !dbg !10
  %525 = extractvalue { i32, i32, i32, i32 } %520, 2, !dbg !10
  %526 = bitcast i32 %525 to <2 x bfloat>, !dbg !10
  %527 = extractvalue { i32, i32, i32, i32 } %520, 3, !dbg !10
  %528 = bitcast i32 %527 to <2 x bfloat>, !dbg !10
  %529 = extractelement <2 x bfloat> %522, i64 0, !dbg !10
  %530 = extractelement <2 x bfloat> %522, i64 1, !dbg !10
  %531 = extractelement <2 x bfloat> %524, i64 0, !dbg !10
  %532 = extractelement <2 x bfloat> %524, i64 1, !dbg !10
  %533 = extractelement <2 x bfloat> %526, i64 0, !dbg !10
  %534 = extractelement <2 x bfloat> %526, i64 1, !dbg !10
  %535 = extractelement <2 x bfloat> %528, i64 0, !dbg !10
  %536 = extractelement <2 x bfloat> %528, i64 1, !dbg !10
  %537 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %234) #6, !dbg !10
  %538 = extractvalue { i32, i32, i32, i32 } %537, 0, !dbg !10
  %539 = bitcast i32 %538 to <2 x bfloat>, !dbg !10
  %540 = extractvalue { i32, i32, i32, i32 } %537, 1, !dbg !10
  %541 = bitcast i32 %540 to <2 x bfloat>, !dbg !10
  %542 = extractvalue { i32, i32, i32, i32 } %537, 2, !dbg !10
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !10
  %544 = extractvalue { i32, i32, i32, i32 } %537, 3, !dbg !10
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !10
  %546 = extractelement <2 x bfloat> %539, i64 0, !dbg !10
  %547 = extractelement <2 x bfloat> %539, i64 1, !dbg !10
  %548 = extractelement <2 x bfloat> %541, i64 0, !dbg !10
  %549 = extractelement <2 x bfloat> %541, i64 1, !dbg !10
  %550 = extractelement <2 x bfloat> %543, i64 0, !dbg !10
  %551 = extractelement <2 x bfloat> %543, i64 1, !dbg !10
  %552 = extractelement <2 x bfloat> %545, i64 0, !dbg !10
  %553 = extractelement <2 x bfloat> %545, i64 1, !dbg !10
  %554 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %236) #6, !dbg !10
  %555 = extractvalue { i32, i32, i32, i32 } %554, 0, !dbg !10
  %556 = bitcast i32 %555 to <2 x bfloat>, !dbg !10
  %557 = extractvalue { i32, i32, i32, i32 } %554, 1, !dbg !10
  %558 = bitcast i32 %557 to <2 x bfloat>, !dbg !10
  %559 = extractvalue { i32, i32, i32, i32 } %554, 2, !dbg !10
  %560 = bitcast i32 %559 to <2 x bfloat>, !dbg !10
  %561 = extractvalue { i32, i32, i32, i32 } %554, 3, !dbg !10
  %562 = bitcast i32 %561 to <2 x bfloat>, !dbg !10
  %563 = extractelement <2 x bfloat> %556, i64 0, !dbg !10
  %564 = extractelement <2 x bfloat> %556, i64 1, !dbg !10
  %565 = extractelement <2 x bfloat> %558, i64 0, !dbg !10
  %566 = extractelement <2 x bfloat> %558, i64 1, !dbg !10
  %567 = extractelement <2 x bfloat> %560, i64 0, !dbg !10
  %568 = extractelement <2 x bfloat> %560, i64 1, !dbg !10
  %569 = extractelement <2 x bfloat> %562, i64 0, !dbg !10
  %570 = extractelement <2 x bfloat> %562, i64 1, !dbg !10
  %571 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %238) #6, !dbg !10
  %572 = extractvalue { i32, i32, i32, i32 } %571, 0, !dbg !10
  %573 = bitcast i32 %572 to <2 x bfloat>, !dbg !10
  %574 = extractvalue { i32, i32, i32, i32 } %571, 1, !dbg !10
  %575 = bitcast i32 %574 to <2 x bfloat>, !dbg !10
  %576 = extractvalue { i32, i32, i32, i32 } %571, 2, !dbg !10
  %577 = bitcast i32 %576 to <2 x bfloat>, !dbg !10
  %578 = extractvalue { i32, i32, i32, i32 } %571, 3, !dbg !10
  %579 = bitcast i32 %578 to <2 x bfloat>, !dbg !10
  %580 = extractelement <2 x bfloat> %573, i64 0, !dbg !10
  %581 = extractelement <2 x bfloat> %573, i64 1, !dbg !10
  %582 = extractelement <2 x bfloat> %575, i64 0, !dbg !10
  %583 = extractelement <2 x bfloat> %575, i64 1, !dbg !10
  %584 = extractelement <2 x bfloat> %577, i64 0, !dbg !10
  %585 = extractelement <2 x bfloat> %577, i64 1, !dbg !10
  %586 = extractelement <2 x bfloat> %579, i64 0, !dbg !10
  %587 = extractelement <2 x bfloat> %579, i64 1, !dbg !10
  %588 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %240) #6, !dbg !10
  %589 = extractvalue { i32, i32, i32, i32 } %588, 0, !dbg !10
  %590 = bitcast i32 %589 to <2 x bfloat>, !dbg !10
  %591 = extractvalue { i32, i32, i32, i32 } %588, 1, !dbg !10
  %592 = bitcast i32 %591 to <2 x bfloat>, !dbg !10
  %593 = extractvalue { i32, i32, i32, i32 } %588, 2, !dbg !10
  %594 = bitcast i32 %593 to <2 x bfloat>, !dbg !10
  %595 = extractvalue { i32, i32, i32, i32 } %588, 3, !dbg !10
  %596 = bitcast i32 %595 to <2 x bfloat>, !dbg !10
  %597 = extractelement <2 x bfloat> %590, i64 0, !dbg !10
  %598 = extractelement <2 x bfloat> %590, i64 1, !dbg !10
  %599 = extractelement <2 x bfloat> %592, i64 0, !dbg !10
  %600 = extractelement <2 x bfloat> %592, i64 1, !dbg !10
  %601 = extractelement <2 x bfloat> %594, i64 0, !dbg !10
  %602 = extractelement <2 x bfloat> %594, i64 1, !dbg !10
  %603 = extractelement <2 x bfloat> %596, i64 0, !dbg !10
  %604 = extractelement <2 x bfloat> %596, i64 1, !dbg !10
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %242) #6, !dbg !10
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !10
  %607 = bitcast i32 %606 to <2 x bfloat>, !dbg !10
  %608 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !10
  %609 = bitcast i32 %608 to <2 x bfloat>, !dbg !10
  %610 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !10
  %611 = bitcast i32 %610 to <2 x bfloat>, !dbg !10
  %612 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !10
  %613 = bitcast i32 %612 to <2 x bfloat>, !dbg !10
  %614 = extractelement <2 x bfloat> %607, i64 0, !dbg !10
  %615 = extractelement <2 x bfloat> %607, i64 1, !dbg !10
  %616 = extractelement <2 x bfloat> %609, i64 0, !dbg !10
  %617 = extractelement <2 x bfloat> %609, i64 1, !dbg !10
  %618 = extractelement <2 x bfloat> %611, i64 0, !dbg !10
  %619 = extractelement <2 x bfloat> %611, i64 1, !dbg !10
  %620 = extractelement <2 x bfloat> %613, i64 0, !dbg !10
  %621 = extractelement <2 x bfloat> %613, i64 1, !dbg !10
  %622 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %244) #6, !dbg !10
  %623 = extractvalue { i32, i32, i32, i32 } %622, 0, !dbg !10
  %624 = bitcast i32 %623 to <2 x bfloat>, !dbg !10
  %625 = extractvalue { i32, i32, i32, i32 } %622, 1, !dbg !10
  %626 = bitcast i32 %625 to <2 x bfloat>, !dbg !10
  %627 = extractvalue { i32, i32, i32, i32 } %622, 2, !dbg !10
  %628 = bitcast i32 %627 to <2 x bfloat>, !dbg !10
  %629 = extractvalue { i32, i32, i32, i32 } %622, 3, !dbg !10
  %630 = bitcast i32 %629 to <2 x bfloat>, !dbg !10
  %631 = extractelement <2 x bfloat> %624, i64 0, !dbg !10
  %632 = extractelement <2 x bfloat> %624, i64 1, !dbg !10
  %633 = extractelement <2 x bfloat> %626, i64 0, !dbg !10
  %634 = extractelement <2 x bfloat> %626, i64 1, !dbg !10
  %635 = extractelement <2 x bfloat> %628, i64 0, !dbg !10
  %636 = extractelement <2 x bfloat> %628, i64 1, !dbg !10
  %637 = extractelement <2 x bfloat> %630, i64 0, !dbg !10
  %638 = extractelement <2 x bfloat> %630, i64 1, !dbg !10
  %639 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %246) #6, !dbg !10
  %640 = extractvalue { i32, i32, i32, i32 } %639, 0, !dbg !10
  %641 = bitcast i32 %640 to <2 x bfloat>, !dbg !10
  %642 = extractvalue { i32, i32, i32, i32 } %639, 1, !dbg !10
  %643 = bitcast i32 %642 to <2 x bfloat>, !dbg !10
  %644 = extractvalue { i32, i32, i32, i32 } %639, 2, !dbg !10
  %645 = bitcast i32 %644 to <2 x bfloat>, !dbg !10
  %646 = extractvalue { i32, i32, i32, i32 } %639, 3, !dbg !10
  %647 = bitcast i32 %646 to <2 x bfloat>, !dbg !10
  %648 = extractelement <2 x bfloat> %641, i64 0, !dbg !10
  %649 = extractelement <2 x bfloat> %641, i64 1, !dbg !10
  %650 = extractelement <2 x bfloat> %643, i64 0, !dbg !10
  %651 = extractelement <2 x bfloat> %643, i64 1, !dbg !10
  %652 = extractelement <2 x bfloat> %645, i64 0, !dbg !10
  %653 = extractelement <2 x bfloat> %645, i64 1, !dbg !10
  %654 = extractelement <2 x bfloat> %647, i64 0, !dbg !10
  %655 = extractelement <2 x bfloat> %647, i64 1, !dbg !10
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %191, i1 %248) #6, !dbg !10
  %657 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !10
  %658 = bitcast i32 %657 to <2 x bfloat>, !dbg !10
  %659 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !10
  %660 = bitcast i32 %659 to <2 x bfloat>, !dbg !10
  %661 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !10
  %662 = bitcast i32 %661 to <2 x bfloat>, !dbg !10
  %663 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !10
  %664 = bitcast i32 %663 to <2 x bfloat>, !dbg !10
  %665 = extractelement <2 x bfloat> %658, i64 0, !dbg !10
  %666 = extractelement <2 x bfloat> %658, i64 1, !dbg !10
  %667 = extractelement <2 x bfloat> %660, i64 0, !dbg !10
  %668 = extractelement <2 x bfloat> %660, i64 1, !dbg !10
  %669 = extractelement <2 x bfloat> %662, i64 0, !dbg !10
  %670 = extractelement <2 x bfloat> %662, i64 1, !dbg !10
  %671 = extractelement <2 x bfloat> %664, i64 0, !dbg !10
  %672 = extractelement <2 x bfloat> %664, i64 1, !dbg !10
  %673 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %250) #6, !dbg !10
  %674 = extractvalue { i32, i32, i32, i32 } %673, 0, !dbg !10
  %675 = bitcast i32 %674 to <2 x bfloat>, !dbg !10
  %676 = extractvalue { i32, i32, i32, i32 } %673, 1, !dbg !10
  %677 = bitcast i32 %676 to <2 x bfloat>, !dbg !10
  %678 = extractvalue { i32, i32, i32, i32 } %673, 2, !dbg !10
  %679 = bitcast i32 %678 to <2 x bfloat>, !dbg !10
  %680 = extractvalue { i32, i32, i32, i32 } %673, 3, !dbg !10
  %681 = bitcast i32 %680 to <2 x bfloat>, !dbg !10
  %682 = extractelement <2 x bfloat> %675, i64 0, !dbg !10
  %683 = extractelement <2 x bfloat> %675, i64 1, !dbg !10
  %684 = extractelement <2 x bfloat> %677, i64 0, !dbg !10
  %685 = extractelement <2 x bfloat> %677, i64 1, !dbg !10
  %686 = extractelement <2 x bfloat> %679, i64 0, !dbg !10
  %687 = extractelement <2 x bfloat> %679, i64 1, !dbg !10
  %688 = extractelement <2 x bfloat> %681, i64 0, !dbg !10
  %689 = extractelement <2 x bfloat> %681, i64 1, !dbg !10
  %690 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %252) #6, !dbg !10
  %691 = extractvalue { i32, i32, i32, i32 } %690, 0, !dbg !10
  %692 = bitcast i32 %691 to <2 x bfloat>, !dbg !10
  %693 = extractvalue { i32, i32, i32, i32 } %690, 1, !dbg !10
  %694 = bitcast i32 %693 to <2 x bfloat>, !dbg !10
  %695 = extractvalue { i32, i32, i32, i32 } %690, 2, !dbg !10
  %696 = bitcast i32 %695 to <2 x bfloat>, !dbg !10
  %697 = extractvalue { i32, i32, i32, i32 } %690, 3, !dbg !10
  %698 = bitcast i32 %697 to <2 x bfloat>, !dbg !10
  %699 = extractelement <2 x bfloat> %692, i64 0, !dbg !10
  %700 = extractelement <2 x bfloat> %692, i64 1, !dbg !10
  %701 = extractelement <2 x bfloat> %694, i64 0, !dbg !10
  %702 = extractelement <2 x bfloat> %694, i64 1, !dbg !10
  %703 = extractelement <2 x bfloat> %696, i64 0, !dbg !10
  %704 = extractelement <2 x bfloat> %696, i64 1, !dbg !10
  %705 = extractelement <2 x bfloat> %698, i64 0, !dbg !10
  %706 = extractelement <2 x bfloat> %698, i64 1, !dbg !10
  %707 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %254) #6, !dbg !10
  %708 = extractvalue { i32, i32, i32, i32 } %707, 0, !dbg !10
  %709 = bitcast i32 %708 to <2 x bfloat>, !dbg !10
  %710 = extractvalue { i32, i32, i32, i32 } %707, 1, !dbg !10
  %711 = bitcast i32 %710 to <2 x bfloat>, !dbg !10
  %712 = extractvalue { i32, i32, i32, i32 } %707, 2, !dbg !10
  %713 = bitcast i32 %712 to <2 x bfloat>, !dbg !10
  %714 = extractvalue { i32, i32, i32, i32 } %707, 3, !dbg !10
  %715 = bitcast i32 %714 to <2 x bfloat>, !dbg !10
  %716 = extractelement <2 x bfloat> %709, i64 0, !dbg !10
  %717 = extractelement <2 x bfloat> %709, i64 1, !dbg !10
  %718 = extractelement <2 x bfloat> %711, i64 0, !dbg !10
  %719 = extractelement <2 x bfloat> %711, i64 1, !dbg !10
  %720 = extractelement <2 x bfloat> %713, i64 0, !dbg !10
  %721 = extractelement <2 x bfloat> %713, i64 1, !dbg !10
  %722 = extractelement <2 x bfloat> %715, i64 0, !dbg !10
  %723 = extractelement <2 x bfloat> %715, i64 1, !dbg !10
  %724 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %256) #6, !dbg !10
  %725 = extractvalue { i32, i32, i32, i32 } %724, 0, !dbg !10
  %726 = bitcast i32 %725 to <2 x bfloat>, !dbg !10
  %727 = extractvalue { i32, i32, i32, i32 } %724, 1, !dbg !10
  %728 = bitcast i32 %727 to <2 x bfloat>, !dbg !10
  %729 = extractvalue { i32, i32, i32, i32 } %724, 2, !dbg !10
  %730 = bitcast i32 %729 to <2 x bfloat>, !dbg !10
  %731 = extractvalue { i32, i32, i32, i32 } %724, 3, !dbg !10
  %732 = bitcast i32 %731 to <2 x bfloat>, !dbg !10
  %733 = extractelement <2 x bfloat> %726, i64 0, !dbg !10
  %734 = extractelement <2 x bfloat> %726, i64 1, !dbg !10
  %735 = extractelement <2 x bfloat> %728, i64 0, !dbg !10
  %736 = extractelement <2 x bfloat> %728, i64 1, !dbg !10
  %737 = extractelement <2 x bfloat> %730, i64 0, !dbg !10
  %738 = extractelement <2 x bfloat> %730, i64 1, !dbg !10
  %739 = extractelement <2 x bfloat> %732, i64 0, !dbg !10
  %740 = extractelement <2 x bfloat> %732, i64 1, !dbg !10
  %741 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %196, i1 %258) #6, !dbg !10
  %742 = extractvalue { i32, i32, i32, i32 } %741, 0, !dbg !10
  %743 = bitcast i32 %742 to <2 x bfloat>, !dbg !10
  %744 = extractvalue { i32, i32, i32, i32 } %741, 1, !dbg !10
  %745 = bitcast i32 %744 to <2 x bfloat>, !dbg !10
  %746 = extractvalue { i32, i32, i32, i32 } %741, 2, !dbg !10
  %747 = bitcast i32 %746 to <2 x bfloat>, !dbg !10
  %748 = extractvalue { i32, i32, i32, i32 } %741, 3, !dbg !10
  %749 = bitcast i32 %748 to <2 x bfloat>, !dbg !10
  %750 = extractelement <2 x bfloat> %743, i64 0, !dbg !10
  %751 = extractelement <2 x bfloat> %743, i64 1, !dbg !10
  %752 = extractelement <2 x bfloat> %745, i64 0, !dbg !10
  %753 = extractelement <2 x bfloat> %745, i64 1, !dbg !10
  %754 = extractelement <2 x bfloat> %747, i64 0, !dbg !10
  %755 = extractelement <2 x bfloat> %747, i64 1, !dbg !10
  %756 = extractelement <2 x bfloat> %749, i64 0, !dbg !10
  %757 = extractelement <2 x bfloat> %749, i64 1, !dbg !10
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %260) #6, !dbg !10
  %759 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !10
  %760 = bitcast i32 %759 to <2 x bfloat>, !dbg !10
  %761 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !10
  %762 = bitcast i32 %761 to <2 x bfloat>, !dbg !10
  %763 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !10
  %764 = bitcast i32 %763 to <2 x bfloat>, !dbg !10
  %765 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !10
  %766 = bitcast i32 %765 to <2 x bfloat>, !dbg !10
  %767 = extractelement <2 x bfloat> %760, i64 0, !dbg !10
  %768 = extractelement <2 x bfloat> %760, i64 1, !dbg !10
  %769 = extractelement <2 x bfloat> %762, i64 0, !dbg !10
  %770 = extractelement <2 x bfloat> %762, i64 1, !dbg !10
  %771 = extractelement <2 x bfloat> %764, i64 0, !dbg !10
  %772 = extractelement <2 x bfloat> %764, i64 1, !dbg !10
  %773 = extractelement <2 x bfloat> %766, i64 0, !dbg !10
  %774 = extractelement <2 x bfloat> %766, i64 1, !dbg !10
  %775 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %262) #6, !dbg !10
  %776 = extractvalue { i32, i32, i32, i32 } %775, 0, !dbg !10
  %777 = bitcast i32 %776 to <2 x bfloat>, !dbg !10
  %778 = extractvalue { i32, i32, i32, i32 } %775, 1, !dbg !10
  %779 = bitcast i32 %778 to <2 x bfloat>, !dbg !10
  %780 = extractvalue { i32, i32, i32, i32 } %775, 2, !dbg !10
  %781 = bitcast i32 %780 to <2 x bfloat>, !dbg !10
  %782 = extractvalue { i32, i32, i32, i32 } %775, 3, !dbg !10
  %783 = bitcast i32 %782 to <2 x bfloat>, !dbg !10
  %784 = extractelement <2 x bfloat> %777, i64 0, !dbg !10
  %785 = extractelement <2 x bfloat> %777, i64 1, !dbg !10
  %786 = extractelement <2 x bfloat> %779, i64 0, !dbg !10
  %787 = extractelement <2 x bfloat> %779, i64 1, !dbg !10
  %788 = extractelement <2 x bfloat> %781, i64 0, !dbg !10
  %789 = extractelement <2 x bfloat> %781, i64 1, !dbg !10
  %790 = extractelement <2 x bfloat> %783, i64 0, !dbg !10
  %791 = extractelement <2 x bfloat> %783, i64 1, !dbg !10
  %792 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %264) #6, !dbg !10
  %793 = extractvalue { i32, i32, i32, i32 } %792, 0, !dbg !10
  %794 = bitcast i32 %793 to <2 x bfloat>, !dbg !10
  %795 = extractvalue { i32, i32, i32, i32 } %792, 1, !dbg !10
  %796 = bitcast i32 %795 to <2 x bfloat>, !dbg !10
  %797 = extractvalue { i32, i32, i32, i32 } %792, 2, !dbg !10
  %798 = bitcast i32 %797 to <2 x bfloat>, !dbg !10
  %799 = extractvalue { i32, i32, i32, i32 } %792, 3, !dbg !10
  %800 = bitcast i32 %799 to <2 x bfloat>, !dbg !10
  %801 = extractelement <2 x bfloat> %794, i64 0, !dbg !10
  %802 = extractelement <2 x bfloat> %794, i64 1, !dbg !10
  %803 = extractelement <2 x bfloat> %796, i64 0, !dbg !10
  %804 = extractelement <2 x bfloat> %796, i64 1, !dbg !10
  %805 = extractelement <2 x bfloat> %798, i64 0, !dbg !10
  %806 = extractelement <2 x bfloat> %798, i64 1, !dbg !10
  %807 = extractelement <2 x bfloat> %800, i64 0, !dbg !10
  %808 = extractelement <2 x bfloat> %800, i64 1, !dbg !10
  %809 = fpext bfloat %274 to float, !dbg !11
  %810 = fpext bfloat %275 to float, !dbg !11
  %811 = fpext bfloat %276 to float, !dbg !11
  %812 = fpext bfloat %277 to float, !dbg !11
  %813 = fpext bfloat %278 to float, !dbg !11
  %814 = fpext bfloat %279 to float, !dbg !11
  %815 = fpext bfloat %280 to float, !dbg !11
  %816 = fpext bfloat %281 to float, !dbg !11
  %817 = fpext bfloat %291 to float, !dbg !11
  %818 = fpext bfloat %292 to float, !dbg !11
  %819 = fpext bfloat %293 to float, !dbg !11
  %820 = fpext bfloat %294 to float, !dbg !11
  %821 = fpext bfloat %295 to float, !dbg !11
  %822 = fpext bfloat %296 to float, !dbg !11
  %823 = fpext bfloat %297 to float, !dbg !11
  %824 = fpext bfloat %298 to float, !dbg !11
  %825 = fpext bfloat %308 to float, !dbg !11
  %826 = fpext bfloat %309 to float, !dbg !11
  %827 = fpext bfloat %310 to float, !dbg !11
  %828 = fpext bfloat %311 to float, !dbg !11
  %829 = fpext bfloat %312 to float, !dbg !11
  %830 = fpext bfloat %313 to float, !dbg !11
  %831 = fpext bfloat %314 to float, !dbg !11
  %832 = fpext bfloat %315 to float, !dbg !11
  %833 = fpext bfloat %325 to float, !dbg !11
  %834 = fpext bfloat %326 to float, !dbg !11
  %835 = fpext bfloat %327 to float, !dbg !11
  %836 = fpext bfloat %328 to float, !dbg !11
  %837 = fpext bfloat %329 to float, !dbg !11
  %838 = fpext bfloat %330 to float, !dbg !11
  %839 = fpext bfloat %331 to float, !dbg !11
  %840 = fpext bfloat %332 to float, !dbg !11
  %841 = fpext bfloat %342 to float, !dbg !11
  %842 = fpext bfloat %343 to float, !dbg !11
  %843 = fpext bfloat %344 to float, !dbg !11
  %844 = fpext bfloat %345 to float, !dbg !11
  %845 = fpext bfloat %346 to float, !dbg !11
  %846 = fpext bfloat %347 to float, !dbg !11
  %847 = fpext bfloat %348 to float, !dbg !11
  %848 = fpext bfloat %349 to float, !dbg !11
  %849 = fpext bfloat %359 to float, !dbg !11
  %850 = fpext bfloat %360 to float, !dbg !11
  %851 = fpext bfloat %361 to float, !dbg !11
  %852 = fpext bfloat %362 to float, !dbg !11
  %853 = fpext bfloat %363 to float, !dbg !11
  %854 = fpext bfloat %364 to float, !dbg !11
  %855 = fpext bfloat %365 to float, !dbg !11
  %856 = fpext bfloat %366 to float, !dbg !11
  %857 = fpext bfloat %376 to float, !dbg !11
  %858 = fpext bfloat %377 to float, !dbg !11
  %859 = fpext bfloat %378 to float, !dbg !11
  %860 = fpext bfloat %379 to float, !dbg !11
  %861 = fpext bfloat %380 to float, !dbg !11
  %862 = fpext bfloat %381 to float, !dbg !11
  %863 = fpext bfloat %382 to float, !dbg !11
  %864 = fpext bfloat %383 to float, !dbg !11
  %865 = fpext bfloat %393 to float, !dbg !11
  %866 = fpext bfloat %394 to float, !dbg !11
  %867 = fpext bfloat %395 to float, !dbg !11
  %868 = fpext bfloat %396 to float, !dbg !11
  %869 = fpext bfloat %397 to float, !dbg !11
  %870 = fpext bfloat %398 to float, !dbg !11
  %871 = fpext bfloat %399 to float, !dbg !11
  %872 = fpext bfloat %400 to float, !dbg !11
  %873 = fpext bfloat %410 to float, !dbg !11
  %874 = fpext bfloat %411 to float, !dbg !11
  %875 = fpext bfloat %412 to float, !dbg !11
  %876 = fpext bfloat %413 to float, !dbg !11
  %877 = fpext bfloat %414 to float, !dbg !11
  %878 = fpext bfloat %415 to float, !dbg !11
  %879 = fpext bfloat %416 to float, !dbg !11
  %880 = fpext bfloat %417 to float, !dbg !11
  %881 = fpext bfloat %427 to float, !dbg !11
  %882 = fpext bfloat %428 to float, !dbg !11
  %883 = fpext bfloat %429 to float, !dbg !11
  %884 = fpext bfloat %430 to float, !dbg !11
  %885 = fpext bfloat %431 to float, !dbg !11
  %886 = fpext bfloat %432 to float, !dbg !11
  %887 = fpext bfloat %433 to float, !dbg !11
  %888 = fpext bfloat %434 to float, !dbg !11
  %889 = fpext bfloat %444 to float, !dbg !11
  %890 = fpext bfloat %445 to float, !dbg !11
  %891 = fpext bfloat %446 to float, !dbg !11
  %892 = fpext bfloat %447 to float, !dbg !11
  %893 = fpext bfloat %448 to float, !dbg !11
  %894 = fpext bfloat %449 to float, !dbg !11
  %895 = fpext bfloat %450 to float, !dbg !11
  %896 = fpext bfloat %451 to float, !dbg !11
  %897 = fpext bfloat %461 to float, !dbg !11
  %898 = fpext bfloat %462 to float, !dbg !11
  %899 = fpext bfloat %463 to float, !dbg !11
  %900 = fpext bfloat %464 to float, !dbg !11
  %901 = fpext bfloat %465 to float, !dbg !11
  %902 = fpext bfloat %466 to float, !dbg !11
  %903 = fpext bfloat %467 to float, !dbg !11
  %904 = fpext bfloat %468 to float, !dbg !11
  %905 = fpext bfloat %478 to float, !dbg !11
  %906 = fpext bfloat %479 to float, !dbg !11
  %907 = fpext bfloat %480 to float, !dbg !11
  %908 = fpext bfloat %481 to float, !dbg !11
  %909 = fpext bfloat %482 to float, !dbg !11
  %910 = fpext bfloat %483 to float, !dbg !11
  %911 = fpext bfloat %484 to float, !dbg !11
  %912 = fpext bfloat %485 to float, !dbg !11
  %913 = fpext bfloat %495 to float, !dbg !11
  %914 = fpext bfloat %496 to float, !dbg !11
  %915 = fpext bfloat %497 to float, !dbg !11
  %916 = fpext bfloat %498 to float, !dbg !11
  %917 = fpext bfloat %499 to float, !dbg !11
  %918 = fpext bfloat %500 to float, !dbg !11
  %919 = fpext bfloat %501 to float, !dbg !11
  %920 = fpext bfloat %502 to float, !dbg !11
  %921 = fpext bfloat %512 to float, !dbg !11
  %922 = fpext bfloat %513 to float, !dbg !11
  %923 = fpext bfloat %514 to float, !dbg !11
  %924 = fpext bfloat %515 to float, !dbg !11
  %925 = fpext bfloat %516 to float, !dbg !11
  %926 = fpext bfloat %517 to float, !dbg !11
  %927 = fpext bfloat %518 to float, !dbg !11
  %928 = fpext bfloat %519 to float, !dbg !11
  %929 = fpext bfloat %529 to float, !dbg !11
  %930 = fpext bfloat %530 to float, !dbg !11
  %931 = fpext bfloat %531 to float, !dbg !11
  %932 = fpext bfloat %532 to float, !dbg !11
  %933 = fpext bfloat %533 to float, !dbg !11
  %934 = fpext bfloat %534 to float, !dbg !11
  %935 = fpext bfloat %535 to float, !dbg !11
  %936 = fpext bfloat %536 to float, !dbg !11
  %937 = fpext bfloat %546 to float, !dbg !11
  %938 = fpext bfloat %547 to float, !dbg !11
  %939 = fpext bfloat %548 to float, !dbg !11
  %940 = fpext bfloat %549 to float, !dbg !11
  %941 = fpext bfloat %550 to float, !dbg !11
  %942 = fpext bfloat %551 to float, !dbg !11
  %943 = fpext bfloat %552 to float, !dbg !11
  %944 = fpext bfloat %553 to float, !dbg !11
  %945 = fpext bfloat %563 to float, !dbg !11
  %946 = fpext bfloat %564 to float, !dbg !11
  %947 = fpext bfloat %565 to float, !dbg !11
  %948 = fpext bfloat %566 to float, !dbg !11
  %949 = fpext bfloat %567 to float, !dbg !11
  %950 = fpext bfloat %568 to float, !dbg !11
  %951 = fpext bfloat %569 to float, !dbg !11
  %952 = fpext bfloat %570 to float, !dbg !11
  %953 = fpext bfloat %580 to float, !dbg !11
  %954 = fpext bfloat %581 to float, !dbg !11
  %955 = fpext bfloat %582 to float, !dbg !11
  %956 = fpext bfloat %583 to float, !dbg !11
  %957 = fpext bfloat %584 to float, !dbg !11
  %958 = fpext bfloat %585 to float, !dbg !11
  %959 = fpext bfloat %586 to float, !dbg !11
  %960 = fpext bfloat %587 to float, !dbg !11
  %961 = fpext bfloat %597 to float, !dbg !11
  %962 = fpext bfloat %598 to float, !dbg !11
  %963 = fpext bfloat %599 to float, !dbg !11
  %964 = fpext bfloat %600 to float, !dbg !11
  %965 = fpext bfloat %601 to float, !dbg !11
  %966 = fpext bfloat %602 to float, !dbg !11
  %967 = fpext bfloat %603 to float, !dbg !11
  %968 = fpext bfloat %604 to float, !dbg !11
  %969 = fpext bfloat %614 to float, !dbg !11
  %970 = fpext bfloat %615 to float, !dbg !11
  %971 = fpext bfloat %616 to float, !dbg !11
  %972 = fpext bfloat %617 to float, !dbg !11
  %973 = fpext bfloat %618 to float, !dbg !11
  %974 = fpext bfloat %619 to float, !dbg !11
  %975 = fpext bfloat %620 to float, !dbg !11
  %976 = fpext bfloat %621 to float, !dbg !11
  %977 = fpext bfloat %631 to float, !dbg !11
  %978 = fpext bfloat %632 to float, !dbg !11
  %979 = fpext bfloat %633 to float, !dbg !11
  %980 = fpext bfloat %634 to float, !dbg !11
  %981 = fpext bfloat %635 to float, !dbg !11
  %982 = fpext bfloat %636 to float, !dbg !11
  %983 = fpext bfloat %637 to float, !dbg !11
  %984 = fpext bfloat %638 to float, !dbg !11
  %985 = fpext bfloat %648 to float, !dbg !11
  %986 = fpext bfloat %649 to float, !dbg !11
  %987 = fpext bfloat %650 to float, !dbg !11
  %988 = fpext bfloat %651 to float, !dbg !11
  %989 = fpext bfloat %652 to float, !dbg !11
  %990 = fpext bfloat %653 to float, !dbg !11
  %991 = fpext bfloat %654 to float, !dbg !11
  %992 = fpext bfloat %655 to float, !dbg !11
  %993 = fpext bfloat %665 to float, !dbg !11
  %994 = fpext bfloat %666 to float, !dbg !11
  %995 = fpext bfloat %667 to float, !dbg !11
  %996 = fpext bfloat %668 to float, !dbg !11
  %997 = fpext bfloat %669 to float, !dbg !11
  %998 = fpext bfloat %670 to float, !dbg !11
  %999 = fpext bfloat %671 to float, !dbg !11
  %1000 = fpext bfloat %672 to float, !dbg !11
  %1001 = fpext bfloat %682 to float, !dbg !11
  %1002 = fpext bfloat %683 to float, !dbg !11
  %1003 = fpext bfloat %684 to float, !dbg !11
  %1004 = fpext bfloat %685 to float, !dbg !11
  %1005 = fpext bfloat %686 to float, !dbg !11
  %1006 = fpext bfloat %687 to float, !dbg !11
  %1007 = fpext bfloat %688 to float, !dbg !11
  %1008 = fpext bfloat %689 to float, !dbg !11
  %1009 = fpext bfloat %699 to float, !dbg !11
  %1010 = fpext bfloat %700 to float, !dbg !11
  %1011 = fpext bfloat %701 to float, !dbg !11
  %1012 = fpext bfloat %702 to float, !dbg !11
  %1013 = fpext bfloat %703 to float, !dbg !11
  %1014 = fpext bfloat %704 to float, !dbg !11
  %1015 = fpext bfloat %705 to float, !dbg !11
  %1016 = fpext bfloat %706 to float, !dbg !11
  %1017 = fpext bfloat %716 to float, !dbg !11
  %1018 = fpext bfloat %717 to float, !dbg !11
  %1019 = fpext bfloat %718 to float, !dbg !11
  %1020 = fpext bfloat %719 to float, !dbg !11
  %1021 = fpext bfloat %720 to float, !dbg !11
  %1022 = fpext bfloat %721 to float, !dbg !11
  %1023 = fpext bfloat %722 to float, !dbg !11
  %1024 = fpext bfloat %723 to float, !dbg !11
  %1025 = fpext bfloat %733 to float, !dbg !11
  %1026 = fpext bfloat %734 to float, !dbg !11
  %1027 = fpext bfloat %735 to float, !dbg !11
  %1028 = fpext bfloat %736 to float, !dbg !11
  %1029 = fpext bfloat %737 to float, !dbg !11
  %1030 = fpext bfloat %738 to float, !dbg !11
  %1031 = fpext bfloat %739 to float, !dbg !11
  %1032 = fpext bfloat %740 to float, !dbg !11
  %1033 = fpext bfloat %750 to float, !dbg !11
  %1034 = fpext bfloat %751 to float, !dbg !11
  %1035 = fpext bfloat %752 to float, !dbg !11
  %1036 = fpext bfloat %753 to float, !dbg !11
  %1037 = fpext bfloat %754 to float, !dbg !11
  %1038 = fpext bfloat %755 to float, !dbg !11
  %1039 = fpext bfloat %756 to float, !dbg !11
  %1040 = fpext bfloat %757 to float, !dbg !11
  %1041 = fpext bfloat %767 to float, !dbg !11
  %1042 = fpext bfloat %768 to float, !dbg !11
  %1043 = fpext bfloat %769 to float, !dbg !11
  %1044 = fpext bfloat %770 to float, !dbg !11
  %1045 = fpext bfloat %771 to float, !dbg !11
  %1046 = fpext bfloat %772 to float, !dbg !11
  %1047 = fpext bfloat %773 to float, !dbg !11
  %1048 = fpext bfloat %774 to float, !dbg !11
  %1049 = fpext bfloat %784 to float, !dbg !11
  %1050 = fpext bfloat %785 to float, !dbg !11
  %1051 = fpext bfloat %786 to float, !dbg !11
  %1052 = fpext bfloat %787 to float, !dbg !11
  %1053 = fpext bfloat %788 to float, !dbg !11
  %1054 = fpext bfloat %789 to float, !dbg !11
  %1055 = fpext bfloat %790 to float, !dbg !11
  %1056 = fpext bfloat %791 to float, !dbg !11
  %1057 = fpext bfloat %801 to float, !dbg !11
  %1058 = fpext bfloat %802 to float, !dbg !11
  %1059 = fpext bfloat %803 to float, !dbg !11
  %1060 = fpext bfloat %804 to float, !dbg !11
  %1061 = fpext bfloat %805 to float, !dbg !11
  %1062 = fpext bfloat %806 to float, !dbg !11
  %1063 = fpext bfloat %807 to float, !dbg !11
  %1064 = fpext bfloat %808 to float, !dbg !11
  %1065 = fmul float %809, %809, !dbg !12
  %1066 = fmul float %810, %810, !dbg !12
  %1067 = fmul float %811, %811, !dbg !12
  %1068 = fmul float %812, %812, !dbg !12
  %1069 = fmul float %813, %813, !dbg !12
  %1070 = fmul float %814, %814, !dbg !12
  %1071 = fmul float %815, %815, !dbg !12
  %1072 = fmul float %816, %816, !dbg !12
  %1073 = fmul float %817, %817, !dbg !12
  %1074 = fmul float %818, %818, !dbg !12
  %1075 = fmul float %819, %819, !dbg !12
  %1076 = fmul float %820, %820, !dbg !12
  %1077 = fmul float %821, %821, !dbg !12
  %1078 = fmul float %822, %822, !dbg !12
  %1079 = fmul float %823, %823, !dbg !12
  %1080 = fmul float %824, %824, !dbg !12
  %1081 = fmul float %825, %825, !dbg !12
  %1082 = fmul float %826, %826, !dbg !12
  %1083 = fmul float %827, %827, !dbg !12
  %1084 = fmul float %828, %828, !dbg !12
  %1085 = fmul float %829, %829, !dbg !12
  %1086 = fmul float %830, %830, !dbg !12
  %1087 = fmul float %831, %831, !dbg !12
  %1088 = fmul float %832, %832, !dbg !12
  %1089 = fmul float %833, %833, !dbg !12
  %1090 = fmul float %834, %834, !dbg !12
  %1091 = fmul float %835, %835, !dbg !12
  %1092 = fmul float %836, %836, !dbg !12
  %1093 = fmul float %837, %837, !dbg !12
  %1094 = fmul float %838, %838, !dbg !12
  %1095 = fmul float %839, %839, !dbg !12
  %1096 = fmul float %840, %840, !dbg !12
  %1097 = fmul float %841, %841, !dbg !12
  %1098 = fmul float %842, %842, !dbg !12
  %1099 = fmul float %843, %843, !dbg !12
  %1100 = fmul float %844, %844, !dbg !12
  %1101 = fmul float %845, %845, !dbg !12
  %1102 = fmul float %846, %846, !dbg !12
  %1103 = fmul float %847, %847, !dbg !12
  %1104 = fmul float %848, %848, !dbg !12
  %1105 = fmul float %849, %849, !dbg !12
  %1106 = fmul float %850, %850, !dbg !12
  %1107 = fmul float %851, %851, !dbg !12
  %1108 = fmul float %852, %852, !dbg !12
  %1109 = fmul float %853, %853, !dbg !12
  %1110 = fmul float %854, %854, !dbg !12
  %1111 = fmul float %855, %855, !dbg !12
  %1112 = fmul float %856, %856, !dbg !12
  %1113 = fmul float %857, %857, !dbg !12
  %1114 = fmul float %858, %858, !dbg !12
  %1115 = fmul float %859, %859, !dbg !12
  %1116 = fmul float %860, %860, !dbg !12
  %1117 = fmul float %861, %861, !dbg !12
  %1118 = fmul float %862, %862, !dbg !12
  %1119 = fmul float %863, %863, !dbg !12
  %1120 = fmul float %864, %864, !dbg !12
  %1121 = fmul float %865, %865, !dbg !12
  %1122 = fmul float %866, %866, !dbg !12
  %1123 = fmul float %867, %867, !dbg !12
  %1124 = fmul float %868, %868, !dbg !12
  %1125 = fmul float %869, %869, !dbg !12
  %1126 = fmul float %870, %870, !dbg !12
  %1127 = fmul float %871, %871, !dbg !12
  %1128 = fmul float %872, %872, !dbg !12
  %1129 = fmul float %873, %873, !dbg !12
  %1130 = fmul float %874, %874, !dbg !12
  %1131 = fmul float %875, %875, !dbg !12
  %1132 = fmul float %876, %876, !dbg !12
  %1133 = fmul float %877, %877, !dbg !12
  %1134 = fmul float %878, %878, !dbg !12
  %1135 = fmul float %879, %879, !dbg !12
  %1136 = fmul float %880, %880, !dbg !12
  %1137 = fmul float %881, %881, !dbg !12
  %1138 = fmul float %882, %882, !dbg !12
  %1139 = fmul float %883, %883, !dbg !12
  %1140 = fmul float %884, %884, !dbg !12
  %1141 = fmul float %885, %885, !dbg !12
  %1142 = fmul float %886, %886, !dbg !12
  %1143 = fmul float %887, %887, !dbg !12
  %1144 = fmul float %888, %888, !dbg !12
  %1145 = fmul float %889, %889, !dbg !12
  %1146 = fmul float %890, %890, !dbg !12
  %1147 = fmul float %891, %891, !dbg !12
  %1148 = fmul float %892, %892, !dbg !12
  %1149 = fmul float %893, %893, !dbg !12
  %1150 = fmul float %894, %894, !dbg !12
  %1151 = fmul float %895, %895, !dbg !12
  %1152 = fmul float %896, %896, !dbg !12
  %1153 = fmul float %897, %897, !dbg !12
  %1154 = fmul float %898, %898, !dbg !12
  %1155 = fmul float %899, %899, !dbg !12
  %1156 = fmul float %900, %900, !dbg !12
  %1157 = fmul float %901, %901, !dbg !12
  %1158 = fmul float %902, %902, !dbg !12
  %1159 = fmul float %903, %903, !dbg !12
  %1160 = fmul float %904, %904, !dbg !12
  %1161 = fmul float %905, %905, !dbg !12
  %1162 = fmul float %906, %906, !dbg !12
  %1163 = fmul float %907, %907, !dbg !12
  %1164 = fmul float %908, %908, !dbg !12
  %1165 = fmul float %909, %909, !dbg !12
  %1166 = fmul float %910, %910, !dbg !12
  %1167 = fmul float %911, %911, !dbg !12
  %1168 = fmul float %912, %912, !dbg !12
  %1169 = fmul float %913, %913, !dbg !12
  %1170 = fmul float %914, %914, !dbg !12
  %1171 = fmul float %915, %915, !dbg !12
  %1172 = fmul float %916, %916, !dbg !12
  %1173 = fmul float %917, %917, !dbg !12
  %1174 = fmul float %918, %918, !dbg !12
  %1175 = fmul float %919, %919, !dbg !12
  %1176 = fmul float %920, %920, !dbg !12
  %1177 = fmul float %921, %921, !dbg !12
  %1178 = fmul float %922, %922, !dbg !12
  %1179 = fmul float %923, %923, !dbg !12
  %1180 = fmul float %924, %924, !dbg !12
  %1181 = fmul float %925, %925, !dbg !12
  %1182 = fmul float %926, %926, !dbg !12
  %1183 = fmul float %927, %927, !dbg !12
  %1184 = fmul float %928, %928, !dbg !12
  %1185 = fmul float %929, %929, !dbg !12
  %1186 = fmul float %930, %930, !dbg !12
  %1187 = fmul float %931, %931, !dbg !12
  %1188 = fmul float %932, %932, !dbg !12
  %1189 = fmul float %933, %933, !dbg !12
  %1190 = fmul float %934, %934, !dbg !12
  %1191 = fmul float %935, %935, !dbg !12
  %1192 = fmul float %936, %936, !dbg !12
  %1193 = fmul float %937, %937, !dbg !12
  %1194 = fmul float %938, %938, !dbg !12
  %1195 = fmul float %939, %939, !dbg !12
  %1196 = fmul float %940, %940, !dbg !12
  %1197 = fmul float %941, %941, !dbg !12
  %1198 = fmul float %942, %942, !dbg !12
  %1199 = fmul float %943, %943, !dbg !12
  %1200 = fmul float %944, %944, !dbg !12
  %1201 = fmul float %945, %945, !dbg !12
  %1202 = fmul float %946, %946, !dbg !12
  %1203 = fmul float %947, %947, !dbg !12
  %1204 = fmul float %948, %948, !dbg !12
  %1205 = fmul float %949, %949, !dbg !12
  %1206 = fmul float %950, %950, !dbg !12
  %1207 = fmul float %951, %951, !dbg !12
  %1208 = fmul float %952, %952, !dbg !12
  %1209 = fmul float %953, %953, !dbg !12
  %1210 = fmul float %954, %954, !dbg !12
  %1211 = fmul float %955, %955, !dbg !12
  %1212 = fmul float %956, %956, !dbg !12
  %1213 = fmul float %957, %957, !dbg !12
  %1214 = fmul float %958, %958, !dbg !12
  %1215 = fmul float %959, %959, !dbg !12
  %1216 = fmul float %960, %960, !dbg !12
  %1217 = fmul float %961, %961, !dbg !12
  %1218 = fmul float %962, %962, !dbg !12
  %1219 = fmul float %963, %963, !dbg !12
  %1220 = fmul float %964, %964, !dbg !12
  %1221 = fmul float %965, %965, !dbg !12
  %1222 = fmul float %966, %966, !dbg !12
  %1223 = fmul float %967, %967, !dbg !12
  %1224 = fmul float %968, %968, !dbg !12
  %1225 = fmul float %969, %969, !dbg !12
  %1226 = fmul float %970, %970, !dbg !12
  %1227 = fmul float %971, %971, !dbg !12
  %1228 = fmul float %972, %972, !dbg !12
  %1229 = fmul float %973, %973, !dbg !12
  %1230 = fmul float %974, %974, !dbg !12
  %1231 = fmul float %975, %975, !dbg !12
  %1232 = fmul float %976, %976, !dbg !12
  %1233 = fmul float %977, %977, !dbg !12
  %1234 = fmul float %978, %978, !dbg !12
  %1235 = fmul float %979, %979, !dbg !12
  %1236 = fmul float %980, %980, !dbg !12
  %1237 = fmul float %981, %981, !dbg !12
  %1238 = fmul float %982, %982, !dbg !12
  %1239 = fmul float %983, %983, !dbg !12
  %1240 = fmul float %984, %984, !dbg !12
  %1241 = fmul float %985, %985, !dbg !12
  %1242 = fmul float %986, %986, !dbg !12
  %1243 = fmul float %987, %987, !dbg !12
  %1244 = fmul float %988, %988, !dbg !12
  %1245 = fmul float %989, %989, !dbg !12
  %1246 = fmul float %990, %990, !dbg !12
  %1247 = fmul float %991, %991, !dbg !12
  %1248 = fmul float %992, %992, !dbg !12
  %1249 = fmul float %993, %993, !dbg !12
  %1250 = fmul float %994, %994, !dbg !12
  %1251 = fmul float %995, %995, !dbg !12
  %1252 = fmul float %996, %996, !dbg !12
  %1253 = fmul float %997, %997, !dbg !12
  %1254 = fmul float %998, %998, !dbg !12
  %1255 = fmul float %999, %999, !dbg !12
  %1256 = fmul float %1000, %1000, !dbg !12
  %1257 = fmul float %1001, %1001, !dbg !12
  %1258 = fmul float %1002, %1002, !dbg !12
  %1259 = fmul float %1003, %1003, !dbg !12
  %1260 = fmul float %1004, %1004, !dbg !12
  %1261 = fmul float %1005, %1005, !dbg !12
  %1262 = fmul float %1006, %1006, !dbg !12
  %1263 = fmul float %1007, %1007, !dbg !12
  %1264 = fmul float %1008, %1008, !dbg !12
  %1265 = fmul float %1009, %1009, !dbg !12
  %1266 = fmul float %1010, %1010, !dbg !12
  %1267 = fmul float %1011, %1011, !dbg !12
  %1268 = fmul float %1012, %1012, !dbg !12
  %1269 = fmul float %1013, %1013, !dbg !12
  %1270 = fmul float %1014, %1014, !dbg !12
  %1271 = fmul float %1015, %1015, !dbg !12
  %1272 = fmul float %1016, %1016, !dbg !12
  %1273 = fmul float %1017, %1017, !dbg !12
  %1274 = fmul float %1018, %1018, !dbg !12
  %1275 = fmul float %1019, %1019, !dbg !12
  %1276 = fmul float %1020, %1020, !dbg !12
  %1277 = fmul float %1021, %1021, !dbg !12
  %1278 = fmul float %1022, %1022, !dbg !12
  %1279 = fmul float %1023, %1023, !dbg !12
  %1280 = fmul float %1024, %1024, !dbg !12
  %1281 = fmul float %1025, %1025, !dbg !12
  %1282 = fmul float %1026, %1026, !dbg !12
  %1283 = fmul float %1027, %1027, !dbg !12
  %1284 = fmul float %1028, %1028, !dbg !12
  %1285 = fmul float %1029, %1029, !dbg !12
  %1286 = fmul float %1030, %1030, !dbg !12
  %1287 = fmul float %1031, %1031, !dbg !12
  %1288 = fmul float %1032, %1032, !dbg !12
  %1289 = fmul float %1033, %1033, !dbg !12
  %1290 = fmul float %1034, %1034, !dbg !12
  %1291 = fmul float %1035, %1035, !dbg !12
  %1292 = fmul float %1036, %1036, !dbg !12
  %1293 = fmul float %1037, %1037, !dbg !12
  %1294 = fmul float %1038, %1038, !dbg !12
  %1295 = fmul float %1039, %1039, !dbg !12
  %1296 = fmul float %1040, %1040, !dbg !12
  %1297 = fmul float %1041, %1041, !dbg !12
  %1298 = fmul float %1042, %1042, !dbg !12
  %1299 = fmul float %1043, %1043, !dbg !12
  %1300 = fmul float %1044, %1044, !dbg !12
  %1301 = fmul float %1045, %1045, !dbg !12
  %1302 = fmul float %1046, %1046, !dbg !12
  %1303 = fmul float %1047, %1047, !dbg !12
  %1304 = fmul float %1048, %1048, !dbg !12
  %1305 = fmul float %1049, %1049, !dbg !12
  %1306 = fmul float %1050, %1050, !dbg !12
  %1307 = fmul float %1051, %1051, !dbg !12
  %1308 = fmul float %1052, %1052, !dbg !12
  %1309 = fmul float %1053, %1053, !dbg !12
  %1310 = fmul float %1054, %1054, !dbg !12
  %1311 = fmul float %1055, %1055, !dbg !12
  %1312 = fmul float %1056, %1056, !dbg !12
  %1313 = fmul float %1057, %1057, !dbg !12
  %1314 = fmul float %1058, %1058, !dbg !12
  %1315 = fmul float %1059, %1059, !dbg !12
  %1316 = fmul float %1060, %1060, !dbg !12
  %1317 = fmul float %1061, %1061, !dbg !12
  %1318 = fmul float %1062, %1062, !dbg !12
  %1319 = fmul float %1063, %1063, !dbg !12
  %1320 = fmul float %1064, %1064, !dbg !12
  %1321 = fadd float %1065, %1066, !dbg !13
  %1322 = fadd float %1067, %1321, !dbg !13
  %1323 = fadd float %1068, %1322, !dbg !13
  %1324 = fadd float %1069, %1323, !dbg !13
  %1325 = fadd float %1070, %1324, !dbg !13
  %1326 = fadd float %1071, %1325, !dbg !13
  %1327 = fadd float %1072, %1326, !dbg !13
  %1328 = fadd float %1073, %1074, !dbg !13
  %1329 = fadd float %1075, %1328, !dbg !13
  %1330 = fadd float %1076, %1329, !dbg !13
  %1331 = fadd float %1077, %1330, !dbg !13
  %1332 = fadd float %1078, %1331, !dbg !13
  %1333 = fadd float %1079, %1332, !dbg !13
  %1334 = fadd float %1080, %1333, !dbg !13
  %1335 = fadd float %1081, %1082, !dbg !13
  %1336 = fadd float %1083, %1335, !dbg !13
  %1337 = fadd float %1084, %1336, !dbg !13
  %1338 = fadd float %1085, %1337, !dbg !13
  %1339 = fadd float %1086, %1338, !dbg !13
  %1340 = fadd float %1087, %1339, !dbg !13
  %1341 = fadd float %1088, %1340, !dbg !13
  %1342 = fadd float %1089, %1090, !dbg !13
  %1343 = fadd float %1091, %1342, !dbg !13
  %1344 = fadd float %1092, %1343, !dbg !13
  %1345 = fadd float %1093, %1344, !dbg !13
  %1346 = fadd float %1094, %1345, !dbg !13
  %1347 = fadd float %1095, %1346, !dbg !13
  %1348 = fadd float %1096, %1347, !dbg !13
  %1349 = fadd float %1097, %1098, !dbg !13
  %1350 = fadd float %1099, %1349, !dbg !13
  %1351 = fadd float %1100, %1350, !dbg !13
  %1352 = fadd float %1101, %1351, !dbg !13
  %1353 = fadd float %1102, %1352, !dbg !13
  %1354 = fadd float %1103, %1353, !dbg !13
  %1355 = fadd float %1104, %1354, !dbg !13
  %1356 = fadd float %1105, %1106, !dbg !13
  %1357 = fadd float %1107, %1356, !dbg !13
  %1358 = fadd float %1108, %1357, !dbg !13
  %1359 = fadd float %1109, %1358, !dbg !13
  %1360 = fadd float %1110, %1359, !dbg !13
  %1361 = fadd float %1111, %1360, !dbg !13
  %1362 = fadd float %1112, %1361, !dbg !13
  %1363 = fadd float %1113, %1114, !dbg !13
  %1364 = fadd float %1115, %1363, !dbg !13
  %1365 = fadd float %1116, %1364, !dbg !13
  %1366 = fadd float %1117, %1365, !dbg !13
  %1367 = fadd float %1118, %1366, !dbg !13
  %1368 = fadd float %1119, %1367, !dbg !13
  %1369 = fadd float %1120, %1368, !dbg !13
  %1370 = fadd float %1121, %1122, !dbg !13
  %1371 = fadd float %1123, %1370, !dbg !13
  %1372 = fadd float %1124, %1371, !dbg !13
  %1373 = fadd float %1125, %1372, !dbg !13
  %1374 = fadd float %1126, %1373, !dbg !13
  %1375 = fadd float %1127, %1374, !dbg !13
  %1376 = fadd float %1128, %1375, !dbg !13
  %1377 = fadd float %1129, %1130, !dbg !13
  %1378 = fadd float %1131, %1377, !dbg !13
  %1379 = fadd float %1132, %1378, !dbg !13
  %1380 = fadd float %1133, %1379, !dbg !13
  %1381 = fadd float %1134, %1380, !dbg !13
  %1382 = fadd float %1135, %1381, !dbg !13
  %1383 = fadd float %1136, %1382, !dbg !13
  %1384 = fadd float %1137, %1138, !dbg !13
  %1385 = fadd float %1139, %1384, !dbg !13
  %1386 = fadd float %1140, %1385, !dbg !13
  %1387 = fadd float %1141, %1386, !dbg !13
  %1388 = fadd float %1142, %1387, !dbg !13
  %1389 = fadd float %1143, %1388, !dbg !13
  %1390 = fadd float %1144, %1389, !dbg !13
  %1391 = fadd float %1145, %1146, !dbg !13
  %1392 = fadd float %1147, %1391, !dbg !13
  %1393 = fadd float %1148, %1392, !dbg !13
  %1394 = fadd float %1149, %1393, !dbg !13
  %1395 = fadd float %1150, %1394, !dbg !13
  %1396 = fadd float %1151, %1395, !dbg !13
  %1397 = fadd float %1152, %1396, !dbg !13
  %1398 = fadd float %1153, %1154, !dbg !13
  %1399 = fadd float %1155, %1398, !dbg !13
  %1400 = fadd float %1156, %1399, !dbg !13
  %1401 = fadd float %1157, %1400, !dbg !13
  %1402 = fadd float %1158, %1401, !dbg !13
  %1403 = fadd float %1159, %1402, !dbg !13
  %1404 = fadd float %1160, %1403, !dbg !13
  %1405 = fadd float %1161, %1162, !dbg !13
  %1406 = fadd float %1163, %1405, !dbg !13
  %1407 = fadd float %1164, %1406, !dbg !13
  %1408 = fadd float %1165, %1407, !dbg !13
  %1409 = fadd float %1166, %1408, !dbg !13
  %1410 = fadd float %1167, %1409, !dbg !13
  %1411 = fadd float %1168, %1410, !dbg !13
  %1412 = fadd float %1169, %1170, !dbg !13
  %1413 = fadd float %1171, %1412, !dbg !13
  %1414 = fadd float %1172, %1413, !dbg !13
  %1415 = fadd float %1173, %1414, !dbg !13
  %1416 = fadd float %1174, %1415, !dbg !13
  %1417 = fadd float %1175, %1416, !dbg !13
  %1418 = fadd float %1176, %1417, !dbg !13
  %1419 = fadd float %1177, %1178, !dbg !13
  %1420 = fadd float %1179, %1419, !dbg !13
  %1421 = fadd float %1180, %1420, !dbg !13
  %1422 = fadd float %1181, %1421, !dbg !13
  %1423 = fadd float %1182, %1422, !dbg !13
  %1424 = fadd float %1183, %1423, !dbg !13
  %1425 = fadd float %1184, %1424, !dbg !13
  %1426 = fadd float %1185, %1186, !dbg !13
  %1427 = fadd float %1187, %1426, !dbg !13
  %1428 = fadd float %1188, %1427, !dbg !13
  %1429 = fadd float %1189, %1428, !dbg !13
  %1430 = fadd float %1190, %1429, !dbg !13
  %1431 = fadd float %1191, %1430, !dbg !13
  %1432 = fadd float %1192, %1431, !dbg !13
  %1433 = fadd float %1193, %1194, !dbg !13
  %1434 = fadd float %1195, %1433, !dbg !13
  %1435 = fadd float %1196, %1434, !dbg !13
  %1436 = fadd float %1197, %1435, !dbg !13
  %1437 = fadd float %1198, %1436, !dbg !13
  %1438 = fadd float %1199, %1437, !dbg !13
  %1439 = fadd float %1200, %1438, !dbg !13
  %1440 = fadd float %1201, %1202, !dbg !13
  %1441 = fadd float %1203, %1440, !dbg !13
  %1442 = fadd float %1204, %1441, !dbg !13
  %1443 = fadd float %1205, %1442, !dbg !13
  %1444 = fadd float %1206, %1443, !dbg !13
  %1445 = fadd float %1207, %1444, !dbg !13
  %1446 = fadd float %1208, %1445, !dbg !13
  %1447 = fadd float %1209, %1210, !dbg !13
  %1448 = fadd float %1211, %1447, !dbg !13
  %1449 = fadd float %1212, %1448, !dbg !13
  %1450 = fadd float %1213, %1449, !dbg !13
  %1451 = fadd float %1214, %1450, !dbg !13
  %1452 = fadd float %1215, %1451, !dbg !13
  %1453 = fadd float %1216, %1452, !dbg !13
  %1454 = fadd float %1217, %1218, !dbg !13
  %1455 = fadd float %1219, %1454, !dbg !13
  %1456 = fadd float %1220, %1455, !dbg !13
  %1457 = fadd float %1221, %1456, !dbg !13
  %1458 = fadd float %1222, %1457, !dbg !13
  %1459 = fadd float %1223, %1458, !dbg !13
  %1460 = fadd float %1224, %1459, !dbg !13
  %1461 = fadd float %1225, %1226, !dbg !13
  %1462 = fadd float %1227, %1461, !dbg !13
  %1463 = fadd float %1228, %1462, !dbg !13
  %1464 = fadd float %1229, %1463, !dbg !13
  %1465 = fadd float %1230, %1464, !dbg !13
  %1466 = fadd float %1231, %1465, !dbg !13
  %1467 = fadd float %1232, %1466, !dbg !13
  %1468 = fadd float %1233, %1234, !dbg !13
  %1469 = fadd float %1235, %1468, !dbg !13
  %1470 = fadd float %1236, %1469, !dbg !13
  %1471 = fadd float %1237, %1470, !dbg !13
  %1472 = fadd float %1238, %1471, !dbg !13
  %1473 = fadd float %1239, %1472, !dbg !13
  %1474 = fadd float %1240, %1473, !dbg !13
  %1475 = fadd float %1241, %1242, !dbg !13
  %1476 = fadd float %1243, %1475, !dbg !13
  %1477 = fadd float %1244, %1476, !dbg !13
  %1478 = fadd float %1245, %1477, !dbg !13
  %1479 = fadd float %1246, %1478, !dbg !13
  %1480 = fadd float %1247, %1479, !dbg !13
  %1481 = fadd float %1248, %1480, !dbg !13
  %1482 = fadd float %1249, %1250, !dbg !13
  %1483 = fadd float %1251, %1482, !dbg !13
  %1484 = fadd float %1252, %1483, !dbg !13
  %1485 = fadd float %1253, %1484, !dbg !13
  %1486 = fadd float %1254, %1485, !dbg !13
  %1487 = fadd float %1255, %1486, !dbg !13
  %1488 = fadd float %1256, %1487, !dbg !13
  %1489 = fadd float %1257, %1258, !dbg !13
  %1490 = fadd float %1259, %1489, !dbg !13
  %1491 = fadd float %1260, %1490, !dbg !13
  %1492 = fadd float %1261, %1491, !dbg !13
  %1493 = fadd float %1262, %1492, !dbg !13
  %1494 = fadd float %1263, %1493, !dbg !13
  %1495 = fadd float %1264, %1494, !dbg !13
  %1496 = fadd float %1265, %1266, !dbg !13
  %1497 = fadd float %1267, %1496, !dbg !13
  %1498 = fadd float %1268, %1497, !dbg !13
  %1499 = fadd float %1269, %1498, !dbg !13
  %1500 = fadd float %1270, %1499, !dbg !13
  %1501 = fadd float %1271, %1500, !dbg !13
  %1502 = fadd float %1272, %1501, !dbg !13
  %1503 = fadd float %1273, %1274, !dbg !13
  %1504 = fadd float %1275, %1503, !dbg !13
  %1505 = fadd float %1276, %1504, !dbg !13
  %1506 = fadd float %1277, %1505, !dbg !13
  %1507 = fadd float %1278, %1506, !dbg !13
  %1508 = fadd float %1279, %1507, !dbg !13
  %1509 = fadd float %1280, %1508, !dbg !13
  %1510 = fadd float %1281, %1282, !dbg !13
  %1511 = fadd float %1283, %1510, !dbg !13
  %1512 = fadd float %1284, %1511, !dbg !13
  %1513 = fadd float %1285, %1512, !dbg !13
  %1514 = fadd float %1286, %1513, !dbg !13
  %1515 = fadd float %1287, %1514, !dbg !13
  %1516 = fadd float %1288, %1515, !dbg !13
  %1517 = fadd float %1289, %1290, !dbg !13
  %1518 = fadd float %1291, %1517, !dbg !13
  %1519 = fadd float %1292, %1518, !dbg !13
  %1520 = fadd float %1293, %1519, !dbg !13
  %1521 = fadd float %1294, %1520, !dbg !13
  %1522 = fadd float %1295, %1521, !dbg !13
  %1523 = fadd float %1296, %1522, !dbg !13
  %1524 = fadd float %1297, %1298, !dbg !13
  %1525 = fadd float %1299, %1524, !dbg !13
  %1526 = fadd float %1300, %1525, !dbg !13
  %1527 = fadd float %1301, %1526, !dbg !13
  %1528 = fadd float %1302, %1527, !dbg !13
  %1529 = fadd float %1303, %1528, !dbg !13
  %1530 = fadd float %1304, %1529, !dbg !13
  %1531 = fadd float %1305, %1306, !dbg !13
  %1532 = fadd float %1307, %1531, !dbg !13
  %1533 = fadd float %1308, %1532, !dbg !13
  %1534 = fadd float %1309, %1533, !dbg !13
  %1535 = fadd float %1310, %1534, !dbg !13
  %1536 = fadd float %1311, %1535, !dbg !13
  %1537 = fadd float %1312, %1536, !dbg !13
  %1538 = fadd float %1313, %1314, !dbg !13
  %1539 = fadd float %1315, %1538, !dbg !13
  %1540 = fadd float %1316, %1539, !dbg !13
  %1541 = fadd float %1317, %1540, !dbg !13
  %1542 = fadd float %1318, %1541, !dbg !13
  %1543 = fadd float %1319, %1542, !dbg !13
  %1544 = fadd float %1320, %1543, !dbg !13
  %1545 = bitcast float %1327 to i32, !dbg !17
  %1546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1545, i32 8, i32 31), !dbg !17
  %1547 = bitcast i32 %1546 to float, !dbg !17
  %1548 = fadd float %1327, %1547, !dbg !13
  %1549 = bitcast float %1548 to i32, !dbg !17
  %1550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1549, i32 4, i32 31), !dbg !17
  %1551 = bitcast i32 %1550 to float, !dbg !17
  %1552 = fadd float %1548, %1551, !dbg !13
  %1553 = bitcast float %1552 to i32, !dbg !17
  %1554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1553, i32 2, i32 31), !dbg !17
  %1555 = bitcast i32 %1554 to float, !dbg !17
  %1556 = fadd float %1552, %1555, !dbg !13
  %1557 = bitcast float %1556 to i32, !dbg !17
  %1558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1557, i32 1, i32 31), !dbg !17
  %1559 = bitcast i32 %1558 to float, !dbg !17
  %1560 = fadd float %1556, %1559, !dbg !13
  %1561 = bitcast float %1334 to i32, !dbg !17
  %1562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1561, i32 8, i32 31), !dbg !17
  %1563 = bitcast i32 %1562 to float, !dbg !17
  %1564 = fadd float %1334, %1563, !dbg !13
  %1565 = bitcast float %1564 to i32, !dbg !17
  %1566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1565, i32 4, i32 31), !dbg !17
  %1567 = bitcast i32 %1566 to float, !dbg !17
  %1568 = fadd float %1564, %1567, !dbg !13
  %1569 = bitcast float %1568 to i32, !dbg !17
  %1570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1569, i32 2, i32 31), !dbg !17
  %1571 = bitcast i32 %1570 to float, !dbg !17
  %1572 = fadd float %1568, %1571, !dbg !13
  %1573 = bitcast float %1572 to i32, !dbg !17
  %1574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1573, i32 1, i32 31), !dbg !17
  %1575 = bitcast i32 %1574 to float, !dbg !17
  %1576 = fadd float %1572, %1575, !dbg !13
  %1577 = bitcast float %1341 to i32, !dbg !17
  %1578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1577, i32 8, i32 31), !dbg !17
  %1579 = bitcast i32 %1578 to float, !dbg !17
  %1580 = fadd float %1341, %1579, !dbg !13
  %1581 = bitcast float %1580 to i32, !dbg !17
  %1582 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1581, i32 4, i32 31), !dbg !17
  %1583 = bitcast i32 %1582 to float, !dbg !17
  %1584 = fadd float %1580, %1583, !dbg !13
  %1585 = bitcast float %1584 to i32, !dbg !17
  %1586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1585, i32 2, i32 31), !dbg !17
  %1587 = bitcast i32 %1586 to float, !dbg !17
  %1588 = fadd float %1584, %1587, !dbg !13
  %1589 = bitcast float %1588 to i32, !dbg !17
  %1590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1589, i32 1, i32 31), !dbg !17
  %1591 = bitcast i32 %1590 to float, !dbg !17
  %1592 = fadd float %1588, %1591, !dbg !13
  %1593 = bitcast float %1348 to i32, !dbg !17
  %1594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1593, i32 8, i32 31), !dbg !17
  %1595 = bitcast i32 %1594 to float, !dbg !17
  %1596 = fadd float %1348, %1595, !dbg !13
  %1597 = bitcast float %1596 to i32, !dbg !17
  %1598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1597, i32 4, i32 31), !dbg !17
  %1599 = bitcast i32 %1598 to float, !dbg !17
  %1600 = fadd float %1596, %1599, !dbg !13
  %1601 = bitcast float %1600 to i32, !dbg !17
  %1602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1601, i32 2, i32 31), !dbg !17
  %1603 = bitcast i32 %1602 to float, !dbg !17
  %1604 = fadd float %1600, %1603, !dbg !13
  %1605 = bitcast float %1604 to i32, !dbg !17
  %1606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1605, i32 1, i32 31), !dbg !17
  %1607 = bitcast i32 %1606 to float, !dbg !17
  %1608 = fadd float %1604, %1607, !dbg !13
  %1609 = bitcast float %1355 to i32, !dbg !17
  %1610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1609, i32 8, i32 31), !dbg !17
  %1611 = bitcast i32 %1610 to float, !dbg !17
  %1612 = fadd float %1355, %1611, !dbg !13
  %1613 = bitcast float %1612 to i32, !dbg !17
  %1614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1613, i32 4, i32 31), !dbg !17
  %1615 = bitcast i32 %1614 to float, !dbg !17
  %1616 = fadd float %1612, %1615, !dbg !13
  %1617 = bitcast float %1616 to i32, !dbg !17
  %1618 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1617, i32 2, i32 31), !dbg !17
  %1619 = bitcast i32 %1618 to float, !dbg !17
  %1620 = fadd float %1616, %1619, !dbg !13
  %1621 = bitcast float %1620 to i32, !dbg !17
  %1622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1621, i32 1, i32 31), !dbg !17
  %1623 = bitcast i32 %1622 to float, !dbg !17
  %1624 = fadd float %1620, %1623, !dbg !13
  %1625 = bitcast float %1362 to i32, !dbg !17
  %1626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1625, i32 8, i32 31), !dbg !17
  %1627 = bitcast i32 %1626 to float, !dbg !17
  %1628 = fadd float %1362, %1627, !dbg !13
  %1629 = bitcast float %1628 to i32, !dbg !17
  %1630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1629, i32 4, i32 31), !dbg !17
  %1631 = bitcast i32 %1630 to float, !dbg !17
  %1632 = fadd float %1628, %1631, !dbg !13
  %1633 = bitcast float %1632 to i32, !dbg !17
  %1634 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1633, i32 2, i32 31), !dbg !17
  %1635 = bitcast i32 %1634 to float, !dbg !17
  %1636 = fadd float %1632, %1635, !dbg !13
  %1637 = bitcast float %1636 to i32, !dbg !17
  %1638 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1637, i32 1, i32 31), !dbg !17
  %1639 = bitcast i32 %1638 to float, !dbg !17
  %1640 = fadd float %1636, %1639, !dbg !13
  %1641 = bitcast float %1369 to i32, !dbg !17
  %1642 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1641, i32 8, i32 31), !dbg !17
  %1643 = bitcast i32 %1642 to float, !dbg !17
  %1644 = fadd float %1369, %1643, !dbg !13
  %1645 = bitcast float %1644 to i32, !dbg !17
  %1646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1645, i32 4, i32 31), !dbg !17
  %1647 = bitcast i32 %1646 to float, !dbg !17
  %1648 = fadd float %1644, %1647, !dbg !13
  %1649 = bitcast float %1648 to i32, !dbg !17
  %1650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1649, i32 2, i32 31), !dbg !17
  %1651 = bitcast i32 %1650 to float, !dbg !17
  %1652 = fadd float %1648, %1651, !dbg !13
  %1653 = bitcast float %1652 to i32, !dbg !17
  %1654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1653, i32 1, i32 31), !dbg !17
  %1655 = bitcast i32 %1654 to float, !dbg !17
  %1656 = fadd float %1652, %1655, !dbg !13
  %1657 = bitcast float %1376 to i32, !dbg !17
  %1658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1657, i32 8, i32 31), !dbg !17
  %1659 = bitcast i32 %1658 to float, !dbg !17
  %1660 = fadd float %1376, %1659, !dbg !13
  %1661 = bitcast float %1660 to i32, !dbg !17
  %1662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1661, i32 4, i32 31), !dbg !17
  %1663 = bitcast i32 %1662 to float, !dbg !17
  %1664 = fadd float %1660, %1663, !dbg !13
  %1665 = bitcast float %1664 to i32, !dbg !17
  %1666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1665, i32 2, i32 31), !dbg !17
  %1667 = bitcast i32 %1666 to float, !dbg !17
  %1668 = fadd float %1664, %1667, !dbg !13
  %1669 = bitcast float %1668 to i32, !dbg !17
  %1670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1669, i32 1, i32 31), !dbg !17
  %1671 = bitcast i32 %1670 to float, !dbg !17
  %1672 = fadd float %1668, %1671, !dbg !13
  %1673 = bitcast float %1383 to i32, !dbg !17
  %1674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1673, i32 8, i32 31), !dbg !17
  %1675 = bitcast i32 %1674 to float, !dbg !17
  %1676 = fadd float %1383, %1675, !dbg !13
  %1677 = bitcast float %1676 to i32, !dbg !17
  %1678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1677, i32 4, i32 31), !dbg !17
  %1679 = bitcast i32 %1678 to float, !dbg !17
  %1680 = fadd float %1676, %1679, !dbg !13
  %1681 = bitcast float %1680 to i32, !dbg !17
  %1682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1681, i32 2, i32 31), !dbg !17
  %1683 = bitcast i32 %1682 to float, !dbg !17
  %1684 = fadd float %1680, %1683, !dbg !13
  %1685 = bitcast float %1684 to i32, !dbg !17
  %1686 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1685, i32 1, i32 31), !dbg !17
  %1687 = bitcast i32 %1686 to float, !dbg !17
  %1688 = fadd float %1684, %1687, !dbg !13
  %1689 = bitcast float %1390 to i32, !dbg !17
  %1690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1689, i32 8, i32 31), !dbg !17
  %1691 = bitcast i32 %1690 to float, !dbg !17
  %1692 = fadd float %1390, %1691, !dbg !13
  %1693 = bitcast float %1692 to i32, !dbg !17
  %1694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1693, i32 4, i32 31), !dbg !17
  %1695 = bitcast i32 %1694 to float, !dbg !17
  %1696 = fadd float %1692, %1695, !dbg !13
  %1697 = bitcast float %1696 to i32, !dbg !17
  %1698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1697, i32 2, i32 31), !dbg !17
  %1699 = bitcast i32 %1698 to float, !dbg !17
  %1700 = fadd float %1696, %1699, !dbg !13
  %1701 = bitcast float %1700 to i32, !dbg !17
  %1702 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1701, i32 1, i32 31), !dbg !17
  %1703 = bitcast i32 %1702 to float, !dbg !17
  %1704 = fadd float %1700, %1703, !dbg !13
  %1705 = bitcast float %1397 to i32, !dbg !17
  %1706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1705, i32 8, i32 31), !dbg !17
  %1707 = bitcast i32 %1706 to float, !dbg !17
  %1708 = fadd float %1397, %1707, !dbg !13
  %1709 = bitcast float %1708 to i32, !dbg !17
  %1710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1709, i32 4, i32 31), !dbg !17
  %1711 = bitcast i32 %1710 to float, !dbg !17
  %1712 = fadd float %1708, %1711, !dbg !13
  %1713 = bitcast float %1712 to i32, !dbg !17
  %1714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1713, i32 2, i32 31), !dbg !17
  %1715 = bitcast i32 %1714 to float, !dbg !17
  %1716 = fadd float %1712, %1715, !dbg !13
  %1717 = bitcast float %1716 to i32, !dbg !17
  %1718 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1717, i32 1, i32 31), !dbg !17
  %1719 = bitcast i32 %1718 to float, !dbg !17
  %1720 = fadd float %1716, %1719, !dbg !13
  %1721 = bitcast float %1404 to i32, !dbg !17
  %1722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1721, i32 8, i32 31), !dbg !17
  %1723 = bitcast i32 %1722 to float, !dbg !17
  %1724 = fadd float %1404, %1723, !dbg !13
  %1725 = bitcast float %1724 to i32, !dbg !17
  %1726 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1725, i32 4, i32 31), !dbg !17
  %1727 = bitcast i32 %1726 to float, !dbg !17
  %1728 = fadd float %1724, %1727, !dbg !13
  %1729 = bitcast float %1728 to i32, !dbg !17
  %1730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1729, i32 2, i32 31), !dbg !17
  %1731 = bitcast i32 %1730 to float, !dbg !17
  %1732 = fadd float %1728, %1731, !dbg !13
  %1733 = bitcast float %1732 to i32, !dbg !17
  %1734 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1733, i32 1, i32 31), !dbg !17
  %1735 = bitcast i32 %1734 to float, !dbg !17
  %1736 = fadd float %1732, %1735, !dbg !13
  %1737 = bitcast float %1411 to i32, !dbg !17
  %1738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1737, i32 8, i32 31), !dbg !17
  %1739 = bitcast i32 %1738 to float, !dbg !17
  %1740 = fadd float %1411, %1739, !dbg !13
  %1741 = bitcast float %1740 to i32, !dbg !17
  %1742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1741, i32 4, i32 31), !dbg !17
  %1743 = bitcast i32 %1742 to float, !dbg !17
  %1744 = fadd float %1740, %1743, !dbg !13
  %1745 = bitcast float %1744 to i32, !dbg !17
  %1746 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1745, i32 2, i32 31), !dbg !17
  %1747 = bitcast i32 %1746 to float, !dbg !17
  %1748 = fadd float %1744, %1747, !dbg !13
  %1749 = bitcast float %1748 to i32, !dbg !17
  %1750 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1749, i32 1, i32 31), !dbg !17
  %1751 = bitcast i32 %1750 to float, !dbg !17
  %1752 = fadd float %1748, %1751, !dbg !13
  %1753 = bitcast float %1418 to i32, !dbg !17
  %1754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1753, i32 8, i32 31), !dbg !17
  %1755 = bitcast i32 %1754 to float, !dbg !17
  %1756 = fadd float %1418, %1755, !dbg !13
  %1757 = bitcast float %1756 to i32, !dbg !17
  %1758 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1757, i32 4, i32 31), !dbg !17
  %1759 = bitcast i32 %1758 to float, !dbg !17
  %1760 = fadd float %1756, %1759, !dbg !13
  %1761 = bitcast float %1760 to i32, !dbg !17
  %1762 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1761, i32 2, i32 31), !dbg !17
  %1763 = bitcast i32 %1762 to float, !dbg !17
  %1764 = fadd float %1760, %1763, !dbg !13
  %1765 = bitcast float %1764 to i32, !dbg !17
  %1766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1765, i32 1, i32 31), !dbg !17
  %1767 = bitcast i32 %1766 to float, !dbg !17
  %1768 = fadd float %1764, %1767, !dbg !13
  %1769 = bitcast float %1425 to i32, !dbg !17
  %1770 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1769, i32 8, i32 31), !dbg !17
  %1771 = bitcast i32 %1770 to float, !dbg !17
  %1772 = fadd float %1425, %1771, !dbg !13
  %1773 = bitcast float %1772 to i32, !dbg !17
  %1774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1773, i32 4, i32 31), !dbg !17
  %1775 = bitcast i32 %1774 to float, !dbg !17
  %1776 = fadd float %1772, %1775, !dbg !13
  %1777 = bitcast float %1776 to i32, !dbg !17
  %1778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1777, i32 2, i32 31), !dbg !17
  %1779 = bitcast i32 %1778 to float, !dbg !17
  %1780 = fadd float %1776, %1779, !dbg !13
  %1781 = bitcast float %1780 to i32, !dbg !17
  %1782 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1781, i32 1, i32 31), !dbg !17
  %1783 = bitcast i32 %1782 to float, !dbg !17
  %1784 = fadd float %1780, %1783, !dbg !13
  %1785 = bitcast float %1432 to i32, !dbg !17
  %1786 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1785, i32 8, i32 31), !dbg !17
  %1787 = bitcast i32 %1786 to float, !dbg !17
  %1788 = fadd float %1432, %1787, !dbg !13
  %1789 = bitcast float %1788 to i32, !dbg !17
  %1790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1789, i32 4, i32 31), !dbg !17
  %1791 = bitcast i32 %1790 to float, !dbg !17
  %1792 = fadd float %1788, %1791, !dbg !13
  %1793 = bitcast float %1792 to i32, !dbg !17
  %1794 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1793, i32 2, i32 31), !dbg !17
  %1795 = bitcast i32 %1794 to float, !dbg !17
  %1796 = fadd float %1792, %1795, !dbg !13
  %1797 = bitcast float %1796 to i32, !dbg !17
  %1798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1797, i32 1, i32 31), !dbg !17
  %1799 = bitcast i32 %1798 to float, !dbg !17
  %1800 = fadd float %1796, %1799, !dbg !13
  %1801 = bitcast float %1439 to i32, !dbg !17
  %1802 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1801, i32 8, i32 31), !dbg !17
  %1803 = bitcast i32 %1802 to float, !dbg !17
  %1804 = fadd float %1439, %1803, !dbg !13
  %1805 = bitcast float %1804 to i32, !dbg !17
  %1806 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1805, i32 4, i32 31), !dbg !17
  %1807 = bitcast i32 %1806 to float, !dbg !17
  %1808 = fadd float %1804, %1807, !dbg !13
  %1809 = bitcast float %1808 to i32, !dbg !17
  %1810 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1809, i32 2, i32 31), !dbg !17
  %1811 = bitcast i32 %1810 to float, !dbg !17
  %1812 = fadd float %1808, %1811, !dbg !13
  %1813 = bitcast float %1812 to i32, !dbg !17
  %1814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1813, i32 1, i32 31), !dbg !17
  %1815 = bitcast i32 %1814 to float, !dbg !17
  %1816 = fadd float %1812, %1815, !dbg !13
  %1817 = bitcast float %1446 to i32, !dbg !17
  %1818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1817, i32 8, i32 31), !dbg !17
  %1819 = bitcast i32 %1818 to float, !dbg !17
  %1820 = fadd float %1446, %1819, !dbg !13
  %1821 = bitcast float %1820 to i32, !dbg !17
  %1822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1821, i32 4, i32 31), !dbg !17
  %1823 = bitcast i32 %1822 to float, !dbg !17
  %1824 = fadd float %1820, %1823, !dbg !13
  %1825 = bitcast float %1824 to i32, !dbg !17
  %1826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1825, i32 2, i32 31), !dbg !17
  %1827 = bitcast i32 %1826 to float, !dbg !17
  %1828 = fadd float %1824, %1827, !dbg !13
  %1829 = bitcast float %1828 to i32, !dbg !17
  %1830 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1829, i32 1, i32 31), !dbg !17
  %1831 = bitcast i32 %1830 to float, !dbg !17
  %1832 = fadd float %1828, %1831, !dbg !13
  %1833 = bitcast float %1453 to i32, !dbg !17
  %1834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1833, i32 8, i32 31), !dbg !17
  %1835 = bitcast i32 %1834 to float, !dbg !17
  %1836 = fadd float %1453, %1835, !dbg !13
  %1837 = bitcast float %1836 to i32, !dbg !17
  %1838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1837, i32 4, i32 31), !dbg !17
  %1839 = bitcast i32 %1838 to float, !dbg !17
  %1840 = fadd float %1836, %1839, !dbg !13
  %1841 = bitcast float %1840 to i32, !dbg !17
  %1842 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1841, i32 2, i32 31), !dbg !17
  %1843 = bitcast i32 %1842 to float, !dbg !17
  %1844 = fadd float %1840, %1843, !dbg !13
  %1845 = bitcast float %1844 to i32, !dbg !17
  %1846 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1845, i32 1, i32 31), !dbg !17
  %1847 = bitcast i32 %1846 to float, !dbg !17
  %1848 = fadd float %1844, %1847, !dbg !13
  %1849 = bitcast float %1460 to i32, !dbg !17
  %1850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1849, i32 8, i32 31), !dbg !17
  %1851 = bitcast i32 %1850 to float, !dbg !17
  %1852 = fadd float %1460, %1851, !dbg !13
  %1853 = bitcast float %1852 to i32, !dbg !17
  %1854 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1853, i32 4, i32 31), !dbg !17
  %1855 = bitcast i32 %1854 to float, !dbg !17
  %1856 = fadd float %1852, %1855, !dbg !13
  %1857 = bitcast float %1856 to i32, !dbg !17
  %1858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1857, i32 2, i32 31), !dbg !17
  %1859 = bitcast i32 %1858 to float, !dbg !17
  %1860 = fadd float %1856, %1859, !dbg !13
  %1861 = bitcast float %1860 to i32, !dbg !17
  %1862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1861, i32 1, i32 31), !dbg !17
  %1863 = bitcast i32 %1862 to float, !dbg !17
  %1864 = fadd float %1860, %1863, !dbg !13
  %1865 = bitcast float %1467 to i32, !dbg !17
  %1866 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1865, i32 8, i32 31), !dbg !17
  %1867 = bitcast i32 %1866 to float, !dbg !17
  %1868 = fadd float %1467, %1867, !dbg !13
  %1869 = bitcast float %1868 to i32, !dbg !17
  %1870 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1869, i32 4, i32 31), !dbg !17
  %1871 = bitcast i32 %1870 to float, !dbg !17
  %1872 = fadd float %1868, %1871, !dbg !13
  %1873 = bitcast float %1872 to i32, !dbg !17
  %1874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1873, i32 2, i32 31), !dbg !17
  %1875 = bitcast i32 %1874 to float, !dbg !17
  %1876 = fadd float %1872, %1875, !dbg !13
  %1877 = bitcast float %1876 to i32, !dbg !17
  %1878 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1877, i32 1, i32 31), !dbg !17
  %1879 = bitcast i32 %1878 to float, !dbg !17
  %1880 = fadd float %1876, %1879, !dbg !13
  %1881 = bitcast float %1474 to i32, !dbg !17
  %1882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1881, i32 8, i32 31), !dbg !17
  %1883 = bitcast i32 %1882 to float, !dbg !17
  %1884 = fadd float %1474, %1883, !dbg !13
  %1885 = bitcast float %1884 to i32, !dbg !17
  %1886 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1885, i32 4, i32 31), !dbg !17
  %1887 = bitcast i32 %1886 to float, !dbg !17
  %1888 = fadd float %1884, %1887, !dbg !13
  %1889 = bitcast float %1888 to i32, !dbg !17
  %1890 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1889, i32 2, i32 31), !dbg !17
  %1891 = bitcast i32 %1890 to float, !dbg !17
  %1892 = fadd float %1888, %1891, !dbg !13
  %1893 = bitcast float %1892 to i32, !dbg !17
  %1894 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1893, i32 1, i32 31), !dbg !17
  %1895 = bitcast i32 %1894 to float, !dbg !17
  %1896 = fadd float %1892, %1895, !dbg !13
  %1897 = bitcast float %1481 to i32, !dbg !17
  %1898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1897, i32 8, i32 31), !dbg !17
  %1899 = bitcast i32 %1898 to float, !dbg !17
  %1900 = fadd float %1481, %1899, !dbg !13
  %1901 = bitcast float %1900 to i32, !dbg !17
  %1902 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1901, i32 4, i32 31), !dbg !17
  %1903 = bitcast i32 %1902 to float, !dbg !17
  %1904 = fadd float %1900, %1903, !dbg !13
  %1905 = bitcast float %1904 to i32, !dbg !17
  %1906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1905, i32 2, i32 31), !dbg !17
  %1907 = bitcast i32 %1906 to float, !dbg !17
  %1908 = fadd float %1904, %1907, !dbg !13
  %1909 = bitcast float %1908 to i32, !dbg !17
  %1910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1909, i32 1, i32 31), !dbg !17
  %1911 = bitcast i32 %1910 to float, !dbg !17
  %1912 = fadd float %1908, %1911, !dbg !13
  %1913 = bitcast float %1488 to i32, !dbg !17
  %1914 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1913, i32 8, i32 31), !dbg !17
  %1915 = bitcast i32 %1914 to float, !dbg !17
  %1916 = fadd float %1488, %1915, !dbg !13
  %1917 = bitcast float %1916 to i32, !dbg !17
  %1918 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1917, i32 4, i32 31), !dbg !17
  %1919 = bitcast i32 %1918 to float, !dbg !17
  %1920 = fadd float %1916, %1919, !dbg !13
  %1921 = bitcast float %1920 to i32, !dbg !17
  %1922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1921, i32 2, i32 31), !dbg !17
  %1923 = bitcast i32 %1922 to float, !dbg !17
  %1924 = fadd float %1920, %1923, !dbg !13
  %1925 = bitcast float %1924 to i32, !dbg !17
  %1926 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1925, i32 1, i32 31), !dbg !17
  %1927 = bitcast i32 %1926 to float, !dbg !17
  %1928 = fadd float %1924, %1927, !dbg !13
  %1929 = bitcast float %1495 to i32, !dbg !17
  %1930 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1929, i32 8, i32 31), !dbg !17
  %1931 = bitcast i32 %1930 to float, !dbg !17
  %1932 = fadd float %1495, %1931, !dbg !13
  %1933 = bitcast float %1932 to i32, !dbg !17
  %1934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1933, i32 4, i32 31), !dbg !17
  %1935 = bitcast i32 %1934 to float, !dbg !17
  %1936 = fadd float %1932, %1935, !dbg !13
  %1937 = bitcast float %1936 to i32, !dbg !17
  %1938 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1937, i32 2, i32 31), !dbg !17
  %1939 = bitcast i32 %1938 to float, !dbg !17
  %1940 = fadd float %1936, %1939, !dbg !13
  %1941 = bitcast float %1940 to i32, !dbg !17
  %1942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1941, i32 1, i32 31), !dbg !17
  %1943 = bitcast i32 %1942 to float, !dbg !17
  %1944 = fadd float %1940, %1943, !dbg !13
  %1945 = bitcast float %1502 to i32, !dbg !17
  %1946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1945, i32 8, i32 31), !dbg !17
  %1947 = bitcast i32 %1946 to float, !dbg !17
  %1948 = fadd float %1502, %1947, !dbg !13
  %1949 = bitcast float %1948 to i32, !dbg !17
  %1950 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1949, i32 4, i32 31), !dbg !17
  %1951 = bitcast i32 %1950 to float, !dbg !17
  %1952 = fadd float %1948, %1951, !dbg !13
  %1953 = bitcast float %1952 to i32, !dbg !17
  %1954 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1953, i32 2, i32 31), !dbg !17
  %1955 = bitcast i32 %1954 to float, !dbg !17
  %1956 = fadd float %1952, %1955, !dbg !13
  %1957 = bitcast float %1956 to i32, !dbg !17
  %1958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1957, i32 1, i32 31), !dbg !17
  %1959 = bitcast i32 %1958 to float, !dbg !17
  %1960 = fadd float %1956, %1959, !dbg !13
  %1961 = bitcast float %1509 to i32, !dbg !17
  %1962 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1961, i32 8, i32 31), !dbg !17
  %1963 = bitcast i32 %1962 to float, !dbg !17
  %1964 = fadd float %1509, %1963, !dbg !13
  %1965 = bitcast float %1964 to i32, !dbg !17
  %1966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1965, i32 4, i32 31), !dbg !17
  %1967 = bitcast i32 %1966 to float, !dbg !17
  %1968 = fadd float %1964, %1967, !dbg !13
  %1969 = bitcast float %1968 to i32, !dbg !17
  %1970 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1969, i32 2, i32 31), !dbg !17
  %1971 = bitcast i32 %1970 to float, !dbg !17
  %1972 = fadd float %1968, %1971, !dbg !13
  %1973 = bitcast float %1972 to i32, !dbg !17
  %1974 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1973, i32 1, i32 31), !dbg !17
  %1975 = bitcast i32 %1974 to float, !dbg !17
  %1976 = fadd float %1972, %1975, !dbg !13
  %1977 = bitcast float %1516 to i32, !dbg !17
  %1978 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1977, i32 8, i32 31), !dbg !17
  %1979 = bitcast i32 %1978 to float, !dbg !17
  %1980 = fadd float %1516, %1979, !dbg !13
  %1981 = bitcast float %1980 to i32, !dbg !17
  %1982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1981, i32 4, i32 31), !dbg !17
  %1983 = bitcast i32 %1982 to float, !dbg !17
  %1984 = fadd float %1980, %1983, !dbg !13
  %1985 = bitcast float %1984 to i32, !dbg !17
  %1986 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1985, i32 2, i32 31), !dbg !17
  %1987 = bitcast i32 %1986 to float, !dbg !17
  %1988 = fadd float %1984, %1987, !dbg !13
  %1989 = bitcast float %1988 to i32, !dbg !17
  %1990 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1989, i32 1, i32 31), !dbg !17
  %1991 = bitcast i32 %1990 to float, !dbg !17
  %1992 = fadd float %1988, %1991, !dbg !13
  %1993 = bitcast float %1523 to i32, !dbg !17
  %1994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1993, i32 8, i32 31), !dbg !17
  %1995 = bitcast i32 %1994 to float, !dbg !17
  %1996 = fadd float %1523, %1995, !dbg !13
  %1997 = bitcast float %1996 to i32, !dbg !17
  %1998 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1997, i32 4, i32 31), !dbg !17
  %1999 = bitcast i32 %1998 to float, !dbg !17
  %2000 = fadd float %1996, %1999, !dbg !13
  %2001 = bitcast float %2000 to i32, !dbg !17
  %2002 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2001, i32 2, i32 31), !dbg !17
  %2003 = bitcast i32 %2002 to float, !dbg !17
  %2004 = fadd float %2000, %2003, !dbg !13
  %2005 = bitcast float %2004 to i32, !dbg !17
  %2006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2005, i32 1, i32 31), !dbg !17
  %2007 = bitcast i32 %2006 to float, !dbg !17
  %2008 = fadd float %2004, %2007, !dbg !13
  %2009 = bitcast float %1530 to i32, !dbg !17
  %2010 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2009, i32 8, i32 31), !dbg !17
  %2011 = bitcast i32 %2010 to float, !dbg !17
  %2012 = fadd float %1530, %2011, !dbg !13
  %2013 = bitcast float %2012 to i32, !dbg !17
  %2014 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2013, i32 4, i32 31), !dbg !17
  %2015 = bitcast i32 %2014 to float, !dbg !17
  %2016 = fadd float %2012, %2015, !dbg !13
  %2017 = bitcast float %2016 to i32, !dbg !17
  %2018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2017, i32 2, i32 31), !dbg !17
  %2019 = bitcast i32 %2018 to float, !dbg !17
  %2020 = fadd float %2016, %2019, !dbg !13
  %2021 = bitcast float %2020 to i32, !dbg !17
  %2022 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2021, i32 1, i32 31), !dbg !17
  %2023 = bitcast i32 %2022 to float, !dbg !17
  %2024 = fadd float %2020, %2023, !dbg !13
  %2025 = bitcast float %1537 to i32, !dbg !17
  %2026 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2025, i32 8, i32 31), !dbg !17
  %2027 = bitcast i32 %2026 to float, !dbg !17
  %2028 = fadd float %1537, %2027, !dbg !13
  %2029 = bitcast float %2028 to i32, !dbg !17
  %2030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2029, i32 4, i32 31), !dbg !17
  %2031 = bitcast i32 %2030 to float, !dbg !17
  %2032 = fadd float %2028, %2031, !dbg !13
  %2033 = bitcast float %2032 to i32, !dbg !17
  %2034 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2033, i32 2, i32 31), !dbg !17
  %2035 = bitcast i32 %2034 to float, !dbg !17
  %2036 = fadd float %2032, %2035, !dbg !13
  %2037 = bitcast float %2036 to i32, !dbg !17
  %2038 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2037, i32 1, i32 31), !dbg !17
  %2039 = bitcast i32 %2038 to float, !dbg !17
  %2040 = fadd float %2036, %2039, !dbg !13
  %2041 = bitcast float %1544 to i32, !dbg !17
  %2042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2041, i32 8, i32 31), !dbg !17
  %2043 = bitcast i32 %2042 to float, !dbg !17
  %2044 = fadd float %1544, %2043, !dbg !13
  %2045 = bitcast float %2044 to i32, !dbg !17
  %2046 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2045, i32 4, i32 31), !dbg !17
  %2047 = bitcast i32 %2046 to float, !dbg !17
  %2048 = fadd float %2044, %2047, !dbg !13
  %2049 = bitcast float %2048 to i32, !dbg !17
  %2050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2049, i32 2, i32 31), !dbg !17
  %2051 = bitcast i32 %2050 to float, !dbg !17
  %2052 = fadd float %2048, %2051, !dbg !13
  %2053 = bitcast float %2052 to i32, !dbg !17
  %2054 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %2053, i32 1, i32 31), !dbg !17
  %2055 = bitcast i32 %2054 to float, !dbg !17
  %2056 = fadd float %2052, %2055, !dbg !13
  %2057 = fadd float %3, %1560, !dbg !18
  %2058 = fadd float %3, %1576, !dbg !18
  %2059 = fadd float %3, %1592, !dbg !18
  %2060 = fadd float %3, %1608, !dbg !18
  %2061 = fadd float %3, %1624, !dbg !18
  %2062 = fadd float %3, %1640, !dbg !18
  %2063 = fadd float %3, %1656, !dbg !18
  %2064 = fadd float %3, %1672, !dbg !18
  %2065 = fadd float %3, %1688, !dbg !18
  %2066 = fadd float %3, %1704, !dbg !18
  %2067 = fadd float %3, %1720, !dbg !18
  %2068 = fadd float %3, %1736, !dbg !18
  %2069 = fadd float %3, %1752, !dbg !18
  %2070 = fadd float %3, %1768, !dbg !18
  %2071 = fadd float %3, %1784, !dbg !18
  %2072 = fadd float %3, %1800, !dbg !18
  %2073 = fadd float %3, %1816, !dbg !18
  %2074 = fadd float %3, %1832, !dbg !18
  %2075 = fadd float %3, %1848, !dbg !18
  %2076 = fadd float %3, %1864, !dbg !18
  %2077 = fadd float %3, %1880, !dbg !18
  %2078 = fadd float %3, %1896, !dbg !18
  %2079 = fadd float %3, %1912, !dbg !18
  %2080 = fadd float %3, %1928, !dbg !18
  %2081 = fadd float %3, %1944, !dbg !18
  %2082 = fadd float %3, %1960, !dbg !18
  %2083 = fadd float %3, %1976, !dbg !18
  %2084 = fadd float %3, %1992, !dbg !18
  %2085 = fadd float %3, %2008, !dbg !18
  %2086 = fadd float %3, %2024, !dbg !18
  %2087 = fadd float %3, %2040, !dbg !18
  %2088 = fadd float %3, %2056, !dbg !18
  %2089 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i = icmp eq i32 %2089, 0, !dbg !19
  %2090 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i = icmp eq i32 %2090, 0, !dbg !19
  br i1 %.not.i, label %2096, label %2091, !dbg !19

2091:                                             ; preds = %5
  br i1 %.not1.i, label %2094, label %2092, !dbg !19

2092:                                             ; preds = %2091
  %2093 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2094:                                             ; preds = %2091
  %2095 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2096:                                             ; preds = %5
  br i1 %.not1.i, label %2099, label %2097, !dbg !19

2097:                                             ; preds = %2096
  %2098 = tail call float @llvm.nvvm.sqrt.rn.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

2099:                                             ; preds = %2096
  %2100 = tail call float @llvm.nvvm.sqrt.approx.f(float %2057) #6, !dbg !19
  br label %__nv_sqrtf.exit, !dbg !19

__nv_sqrtf.exit:                                  ; preds = %2092, %2094, %2097, %2099
  %.0.i = phi float [ %2093, %2092 ], [ %2095, %2094 ], [ %2098, %2097 ], [ %2100, %2099 ], !dbg !19
  %2101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i3 = icmp eq i32 %2101, 0, !dbg !19
  %2102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i6 = icmp eq i32 %2102, 0, !dbg !19
  br i1 %.not.i3, label %2108, label %2103, !dbg !19

2103:                                             ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %2106, label %2104, !dbg !19

2104:                                             ; preds = %2103
  %2105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit7, !dbg !19

2106:                                             ; preds = %2103
  %2107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit7, !dbg !19

2108:                                             ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %2111, label %2109, !dbg !19

2109:                                             ; preds = %2108
  %2110 = tail call float @llvm.nvvm.sqrt.rn.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit7, !dbg !19

2111:                                             ; preds = %2108
  %2112 = tail call float @llvm.nvvm.sqrt.approx.f(float %2058) #6, !dbg !19
  br label %__nv_sqrtf.exit7, !dbg !19

__nv_sqrtf.exit7:                                 ; preds = %2104, %2106, %2109, %2111
  %.0.i5 = phi float [ %2105, %2104 ], [ %2107, %2106 ], [ %2110, %2109 ], [ %2112, %2111 ], !dbg !19
  %2113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i8 = icmp eq i32 %2113, 0, !dbg !19
  %2114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i11 = icmp eq i32 %2114, 0, !dbg !19
  br i1 %.not.i8, label %2120, label %2115, !dbg !19

2115:                                             ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %2118, label %2116, !dbg !19

2116:                                             ; preds = %2115
  %2117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit12, !dbg !19

2118:                                             ; preds = %2115
  %2119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit12, !dbg !19

2120:                                             ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %2123, label %2121, !dbg !19

2121:                                             ; preds = %2120
  %2122 = tail call float @llvm.nvvm.sqrt.rn.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit12, !dbg !19

2123:                                             ; preds = %2120
  %2124 = tail call float @llvm.nvvm.sqrt.approx.f(float %2059) #6, !dbg !19
  br label %__nv_sqrtf.exit12, !dbg !19

__nv_sqrtf.exit12:                                ; preds = %2116, %2118, %2121, %2123
  %.0.i10 = phi float [ %2117, %2116 ], [ %2119, %2118 ], [ %2122, %2121 ], [ %2124, %2123 ], !dbg !19
  %2125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i13 = icmp eq i32 %2125, 0, !dbg !19
  %2126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i16 = icmp eq i32 %2126, 0, !dbg !19
  br i1 %.not.i13, label %2132, label %2127, !dbg !19

2127:                                             ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %2130, label %2128, !dbg !19

2128:                                             ; preds = %2127
  %2129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit17, !dbg !19

2130:                                             ; preds = %2127
  %2131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit17, !dbg !19

2132:                                             ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %2135, label %2133, !dbg !19

2133:                                             ; preds = %2132
  %2134 = tail call float @llvm.nvvm.sqrt.rn.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit17, !dbg !19

2135:                                             ; preds = %2132
  %2136 = tail call float @llvm.nvvm.sqrt.approx.f(float %2060) #6, !dbg !19
  br label %__nv_sqrtf.exit17, !dbg !19

__nv_sqrtf.exit17:                                ; preds = %2128, %2130, %2133, %2135
  %.0.i15 = phi float [ %2129, %2128 ], [ %2131, %2130 ], [ %2134, %2133 ], [ %2136, %2135 ], !dbg !19
  %2137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i18 = icmp eq i32 %2137, 0, !dbg !19
  %2138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i21 = icmp eq i32 %2138, 0, !dbg !19
  br i1 %.not.i18, label %2144, label %2139, !dbg !19

2139:                                             ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %2142, label %2140, !dbg !19

2140:                                             ; preds = %2139
  %2141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit22, !dbg !19

2142:                                             ; preds = %2139
  %2143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit22, !dbg !19

2144:                                             ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %2147, label %2145, !dbg !19

2145:                                             ; preds = %2144
  %2146 = tail call float @llvm.nvvm.sqrt.rn.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit22, !dbg !19

2147:                                             ; preds = %2144
  %2148 = tail call float @llvm.nvvm.sqrt.approx.f(float %2061) #6, !dbg !19
  br label %__nv_sqrtf.exit22, !dbg !19

__nv_sqrtf.exit22:                                ; preds = %2140, %2142, %2145, %2147
  %.0.i20 = phi float [ %2141, %2140 ], [ %2143, %2142 ], [ %2146, %2145 ], [ %2148, %2147 ], !dbg !19
  %2149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i23 = icmp eq i32 %2149, 0, !dbg !19
  %2150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i26 = icmp eq i32 %2150, 0, !dbg !19
  br i1 %.not.i23, label %2156, label %2151, !dbg !19

2151:                                             ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %2154, label %2152, !dbg !19

2152:                                             ; preds = %2151
  %2153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit27, !dbg !19

2154:                                             ; preds = %2151
  %2155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit27, !dbg !19

2156:                                             ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %2159, label %2157, !dbg !19

2157:                                             ; preds = %2156
  %2158 = tail call float @llvm.nvvm.sqrt.rn.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit27, !dbg !19

2159:                                             ; preds = %2156
  %2160 = tail call float @llvm.nvvm.sqrt.approx.f(float %2062) #6, !dbg !19
  br label %__nv_sqrtf.exit27, !dbg !19

__nv_sqrtf.exit27:                                ; preds = %2152, %2154, %2157, %2159
  %.0.i25 = phi float [ %2153, %2152 ], [ %2155, %2154 ], [ %2158, %2157 ], [ %2160, %2159 ], !dbg !19
  %2161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i28 = icmp eq i32 %2161, 0, !dbg !19
  %2162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i31 = icmp eq i32 %2162, 0, !dbg !19
  br i1 %.not.i28, label %2168, label %2163, !dbg !19

2163:                                             ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %2166, label %2164, !dbg !19

2164:                                             ; preds = %2163
  %2165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit32, !dbg !19

2166:                                             ; preds = %2163
  %2167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit32, !dbg !19

2168:                                             ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %2171, label %2169, !dbg !19

2169:                                             ; preds = %2168
  %2170 = tail call float @llvm.nvvm.sqrt.rn.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit32, !dbg !19

2171:                                             ; preds = %2168
  %2172 = tail call float @llvm.nvvm.sqrt.approx.f(float %2063) #6, !dbg !19
  br label %__nv_sqrtf.exit32, !dbg !19

__nv_sqrtf.exit32:                                ; preds = %2164, %2166, %2169, %2171
  %.0.i30 = phi float [ %2165, %2164 ], [ %2167, %2166 ], [ %2170, %2169 ], [ %2172, %2171 ], !dbg !19
  %2173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i33 = icmp eq i32 %2173, 0, !dbg !19
  %2174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i36 = icmp eq i32 %2174, 0, !dbg !19
  br i1 %.not.i33, label %2180, label %2175, !dbg !19

2175:                                             ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %2178, label %2176, !dbg !19

2176:                                             ; preds = %2175
  %2177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit37, !dbg !19

2178:                                             ; preds = %2175
  %2179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit37, !dbg !19

2180:                                             ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %2183, label %2181, !dbg !19

2181:                                             ; preds = %2180
  %2182 = tail call float @llvm.nvvm.sqrt.rn.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit37, !dbg !19

2183:                                             ; preds = %2180
  %2184 = tail call float @llvm.nvvm.sqrt.approx.f(float %2064) #6, !dbg !19
  br label %__nv_sqrtf.exit37, !dbg !19

__nv_sqrtf.exit37:                                ; preds = %2176, %2178, %2181, %2183
  %.0.i35 = phi float [ %2177, %2176 ], [ %2179, %2178 ], [ %2182, %2181 ], [ %2184, %2183 ], !dbg !19
  %2185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i38 = icmp eq i32 %2185, 0, !dbg !19
  %2186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i41 = icmp eq i32 %2186, 0, !dbg !19
  br i1 %.not.i38, label %2192, label %2187, !dbg !19

2187:                                             ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %2190, label %2188, !dbg !19

2188:                                             ; preds = %2187
  %2189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit42, !dbg !19

2190:                                             ; preds = %2187
  %2191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit42, !dbg !19

2192:                                             ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %2195, label %2193, !dbg !19

2193:                                             ; preds = %2192
  %2194 = tail call float @llvm.nvvm.sqrt.rn.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit42, !dbg !19

2195:                                             ; preds = %2192
  %2196 = tail call float @llvm.nvvm.sqrt.approx.f(float %2065) #6, !dbg !19
  br label %__nv_sqrtf.exit42, !dbg !19

__nv_sqrtf.exit42:                                ; preds = %2188, %2190, %2193, %2195
  %.0.i40 = phi float [ %2189, %2188 ], [ %2191, %2190 ], [ %2194, %2193 ], [ %2196, %2195 ], !dbg !19
  %2197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i43 = icmp eq i32 %2197, 0, !dbg !19
  %2198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i46 = icmp eq i32 %2198, 0, !dbg !19
  br i1 %.not.i43, label %2204, label %2199, !dbg !19

2199:                                             ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %2202, label %2200, !dbg !19

2200:                                             ; preds = %2199
  %2201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit47, !dbg !19

2202:                                             ; preds = %2199
  %2203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit47, !dbg !19

2204:                                             ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %2207, label %2205, !dbg !19

2205:                                             ; preds = %2204
  %2206 = tail call float @llvm.nvvm.sqrt.rn.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit47, !dbg !19

2207:                                             ; preds = %2204
  %2208 = tail call float @llvm.nvvm.sqrt.approx.f(float %2066) #6, !dbg !19
  br label %__nv_sqrtf.exit47, !dbg !19

__nv_sqrtf.exit47:                                ; preds = %2200, %2202, %2205, %2207
  %.0.i45 = phi float [ %2201, %2200 ], [ %2203, %2202 ], [ %2206, %2205 ], [ %2208, %2207 ], !dbg !19
  %2209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i48 = icmp eq i32 %2209, 0, !dbg !19
  %2210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i51 = icmp eq i32 %2210, 0, !dbg !19
  br i1 %.not.i48, label %2216, label %2211, !dbg !19

2211:                                             ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %2214, label %2212, !dbg !19

2212:                                             ; preds = %2211
  %2213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit52, !dbg !19

2214:                                             ; preds = %2211
  %2215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit52, !dbg !19

2216:                                             ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %2219, label %2217, !dbg !19

2217:                                             ; preds = %2216
  %2218 = tail call float @llvm.nvvm.sqrt.rn.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit52, !dbg !19

2219:                                             ; preds = %2216
  %2220 = tail call float @llvm.nvvm.sqrt.approx.f(float %2067) #6, !dbg !19
  br label %__nv_sqrtf.exit52, !dbg !19

__nv_sqrtf.exit52:                                ; preds = %2212, %2214, %2217, %2219
  %.0.i50 = phi float [ %2213, %2212 ], [ %2215, %2214 ], [ %2218, %2217 ], [ %2220, %2219 ], !dbg !19
  %2221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i53 = icmp eq i32 %2221, 0, !dbg !19
  %2222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i56 = icmp eq i32 %2222, 0, !dbg !19
  br i1 %.not.i53, label %2228, label %2223, !dbg !19

2223:                                             ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %2226, label %2224, !dbg !19

2224:                                             ; preds = %2223
  %2225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit57, !dbg !19

2226:                                             ; preds = %2223
  %2227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit57, !dbg !19

2228:                                             ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %2231, label %2229, !dbg !19

2229:                                             ; preds = %2228
  %2230 = tail call float @llvm.nvvm.sqrt.rn.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit57, !dbg !19

2231:                                             ; preds = %2228
  %2232 = tail call float @llvm.nvvm.sqrt.approx.f(float %2068) #6, !dbg !19
  br label %__nv_sqrtf.exit57, !dbg !19

__nv_sqrtf.exit57:                                ; preds = %2224, %2226, %2229, %2231
  %.0.i55 = phi float [ %2225, %2224 ], [ %2227, %2226 ], [ %2230, %2229 ], [ %2232, %2231 ], !dbg !19
  %2233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i58 = icmp eq i32 %2233, 0, !dbg !19
  %2234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i61 = icmp eq i32 %2234, 0, !dbg !19
  br i1 %.not.i58, label %2240, label %2235, !dbg !19

2235:                                             ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %2238, label %2236, !dbg !19

2236:                                             ; preds = %2235
  %2237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit62, !dbg !19

2238:                                             ; preds = %2235
  %2239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit62, !dbg !19

2240:                                             ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %2243, label %2241, !dbg !19

2241:                                             ; preds = %2240
  %2242 = tail call float @llvm.nvvm.sqrt.rn.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit62, !dbg !19

2243:                                             ; preds = %2240
  %2244 = tail call float @llvm.nvvm.sqrt.approx.f(float %2069) #6, !dbg !19
  br label %__nv_sqrtf.exit62, !dbg !19

__nv_sqrtf.exit62:                                ; preds = %2236, %2238, %2241, %2243
  %.0.i60 = phi float [ %2237, %2236 ], [ %2239, %2238 ], [ %2242, %2241 ], [ %2244, %2243 ], !dbg !19
  %2245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i63 = icmp eq i32 %2245, 0, !dbg !19
  %2246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i66 = icmp eq i32 %2246, 0, !dbg !19
  br i1 %.not.i63, label %2252, label %2247, !dbg !19

2247:                                             ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %2250, label %2248, !dbg !19

2248:                                             ; preds = %2247
  %2249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit67, !dbg !19

2250:                                             ; preds = %2247
  %2251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit67, !dbg !19

2252:                                             ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %2255, label %2253, !dbg !19

2253:                                             ; preds = %2252
  %2254 = tail call float @llvm.nvvm.sqrt.rn.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit67, !dbg !19

2255:                                             ; preds = %2252
  %2256 = tail call float @llvm.nvvm.sqrt.approx.f(float %2070) #6, !dbg !19
  br label %__nv_sqrtf.exit67, !dbg !19

__nv_sqrtf.exit67:                                ; preds = %2248, %2250, %2253, %2255
  %.0.i65 = phi float [ %2249, %2248 ], [ %2251, %2250 ], [ %2254, %2253 ], [ %2256, %2255 ], !dbg !19
  %2257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i68 = icmp eq i32 %2257, 0, !dbg !19
  %2258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i71 = icmp eq i32 %2258, 0, !dbg !19
  br i1 %.not.i68, label %2264, label %2259, !dbg !19

2259:                                             ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %2262, label %2260, !dbg !19

2260:                                             ; preds = %2259
  %2261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit72, !dbg !19

2262:                                             ; preds = %2259
  %2263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit72, !dbg !19

2264:                                             ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %2267, label %2265, !dbg !19

2265:                                             ; preds = %2264
  %2266 = tail call float @llvm.nvvm.sqrt.rn.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit72, !dbg !19

2267:                                             ; preds = %2264
  %2268 = tail call float @llvm.nvvm.sqrt.approx.f(float %2071) #6, !dbg !19
  br label %__nv_sqrtf.exit72, !dbg !19

__nv_sqrtf.exit72:                                ; preds = %2260, %2262, %2265, %2267
  %.0.i70 = phi float [ %2261, %2260 ], [ %2263, %2262 ], [ %2266, %2265 ], [ %2268, %2267 ], !dbg !19
  %2269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i73 = icmp eq i32 %2269, 0, !dbg !19
  %2270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i76 = icmp eq i32 %2270, 0, !dbg !19
  br i1 %.not.i73, label %2276, label %2271, !dbg !19

2271:                                             ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %2274, label %2272, !dbg !19

2272:                                             ; preds = %2271
  %2273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit77, !dbg !19

2274:                                             ; preds = %2271
  %2275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit77, !dbg !19

2276:                                             ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %2279, label %2277, !dbg !19

2277:                                             ; preds = %2276
  %2278 = tail call float @llvm.nvvm.sqrt.rn.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit77, !dbg !19

2279:                                             ; preds = %2276
  %2280 = tail call float @llvm.nvvm.sqrt.approx.f(float %2072) #6, !dbg !19
  br label %__nv_sqrtf.exit77, !dbg !19

__nv_sqrtf.exit77:                                ; preds = %2272, %2274, %2277, %2279
  %.0.i75 = phi float [ %2273, %2272 ], [ %2275, %2274 ], [ %2278, %2277 ], [ %2280, %2279 ], !dbg !19
  %2281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i78 = icmp eq i32 %2281, 0, !dbg !19
  %2282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i81 = icmp eq i32 %2282, 0, !dbg !19
  br i1 %.not.i78, label %2288, label %2283, !dbg !19

2283:                                             ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %2286, label %2284, !dbg !19

2284:                                             ; preds = %2283
  %2285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit82, !dbg !19

2286:                                             ; preds = %2283
  %2287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit82, !dbg !19

2288:                                             ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %2291, label %2289, !dbg !19

2289:                                             ; preds = %2288
  %2290 = tail call float @llvm.nvvm.sqrt.rn.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit82, !dbg !19

2291:                                             ; preds = %2288
  %2292 = tail call float @llvm.nvvm.sqrt.approx.f(float %2073) #6, !dbg !19
  br label %__nv_sqrtf.exit82, !dbg !19

__nv_sqrtf.exit82:                                ; preds = %2284, %2286, %2289, %2291
  %.0.i80 = phi float [ %2285, %2284 ], [ %2287, %2286 ], [ %2290, %2289 ], [ %2292, %2291 ], !dbg !19
  %2293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i83 = icmp eq i32 %2293, 0, !dbg !19
  %2294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i86 = icmp eq i32 %2294, 0, !dbg !19
  br i1 %.not.i83, label %2300, label %2295, !dbg !19

2295:                                             ; preds = %__nv_sqrtf.exit82
  br i1 %.not1.i86, label %2298, label %2296, !dbg !19

2296:                                             ; preds = %2295
  %2297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit87, !dbg !19

2298:                                             ; preds = %2295
  %2299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit87, !dbg !19

2300:                                             ; preds = %__nv_sqrtf.exit82
  br i1 %.not1.i86, label %2303, label %2301, !dbg !19

2301:                                             ; preds = %2300
  %2302 = tail call float @llvm.nvvm.sqrt.rn.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit87, !dbg !19

2303:                                             ; preds = %2300
  %2304 = tail call float @llvm.nvvm.sqrt.approx.f(float %2074) #6, !dbg !19
  br label %__nv_sqrtf.exit87, !dbg !19

__nv_sqrtf.exit87:                                ; preds = %2296, %2298, %2301, %2303
  %.0.i85 = phi float [ %2297, %2296 ], [ %2299, %2298 ], [ %2302, %2301 ], [ %2304, %2303 ], !dbg !19
  %2305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i88 = icmp eq i32 %2305, 0, !dbg !19
  %2306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i91 = icmp eq i32 %2306, 0, !dbg !19
  br i1 %.not.i88, label %2312, label %2307, !dbg !19

2307:                                             ; preds = %__nv_sqrtf.exit87
  br i1 %.not1.i91, label %2310, label %2308, !dbg !19

2308:                                             ; preds = %2307
  %2309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit92, !dbg !19

2310:                                             ; preds = %2307
  %2311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit92, !dbg !19

2312:                                             ; preds = %__nv_sqrtf.exit87
  br i1 %.not1.i91, label %2315, label %2313, !dbg !19

2313:                                             ; preds = %2312
  %2314 = tail call float @llvm.nvvm.sqrt.rn.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit92, !dbg !19

2315:                                             ; preds = %2312
  %2316 = tail call float @llvm.nvvm.sqrt.approx.f(float %2075) #6, !dbg !19
  br label %__nv_sqrtf.exit92, !dbg !19

__nv_sqrtf.exit92:                                ; preds = %2308, %2310, %2313, %2315
  %.0.i90 = phi float [ %2309, %2308 ], [ %2311, %2310 ], [ %2314, %2313 ], [ %2316, %2315 ], !dbg !19
  %2317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i93 = icmp eq i32 %2317, 0, !dbg !19
  %2318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i96 = icmp eq i32 %2318, 0, !dbg !19
  br i1 %.not.i93, label %2324, label %2319, !dbg !19

2319:                                             ; preds = %__nv_sqrtf.exit92
  br i1 %.not1.i96, label %2322, label %2320, !dbg !19

2320:                                             ; preds = %2319
  %2321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit97, !dbg !19

2322:                                             ; preds = %2319
  %2323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit97, !dbg !19

2324:                                             ; preds = %__nv_sqrtf.exit92
  br i1 %.not1.i96, label %2327, label %2325, !dbg !19

2325:                                             ; preds = %2324
  %2326 = tail call float @llvm.nvvm.sqrt.rn.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit97, !dbg !19

2327:                                             ; preds = %2324
  %2328 = tail call float @llvm.nvvm.sqrt.approx.f(float %2076) #6, !dbg !19
  br label %__nv_sqrtf.exit97, !dbg !19

__nv_sqrtf.exit97:                                ; preds = %2320, %2322, %2325, %2327
  %.0.i95 = phi float [ %2321, %2320 ], [ %2323, %2322 ], [ %2326, %2325 ], [ %2328, %2327 ], !dbg !19
  %2329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i98 = icmp eq i32 %2329, 0, !dbg !19
  %2330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i101 = icmp eq i32 %2330, 0, !dbg !19
  br i1 %.not.i98, label %2336, label %2331, !dbg !19

2331:                                             ; preds = %__nv_sqrtf.exit97
  br i1 %.not1.i101, label %2334, label %2332, !dbg !19

2332:                                             ; preds = %2331
  %2333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit102, !dbg !19

2334:                                             ; preds = %2331
  %2335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit102, !dbg !19

2336:                                             ; preds = %__nv_sqrtf.exit97
  br i1 %.not1.i101, label %2339, label %2337, !dbg !19

2337:                                             ; preds = %2336
  %2338 = tail call float @llvm.nvvm.sqrt.rn.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit102, !dbg !19

2339:                                             ; preds = %2336
  %2340 = tail call float @llvm.nvvm.sqrt.approx.f(float %2077) #6, !dbg !19
  br label %__nv_sqrtf.exit102, !dbg !19

__nv_sqrtf.exit102:                               ; preds = %2332, %2334, %2337, %2339
  %.0.i100 = phi float [ %2333, %2332 ], [ %2335, %2334 ], [ %2338, %2337 ], [ %2340, %2339 ], !dbg !19
  %2341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i103 = icmp eq i32 %2341, 0, !dbg !19
  %2342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i106 = icmp eq i32 %2342, 0, !dbg !19
  br i1 %.not.i103, label %2348, label %2343, !dbg !19

2343:                                             ; preds = %__nv_sqrtf.exit102
  br i1 %.not1.i106, label %2346, label %2344, !dbg !19

2344:                                             ; preds = %2343
  %2345 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit107, !dbg !19

2346:                                             ; preds = %2343
  %2347 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit107, !dbg !19

2348:                                             ; preds = %__nv_sqrtf.exit102
  br i1 %.not1.i106, label %2351, label %2349, !dbg !19

2349:                                             ; preds = %2348
  %2350 = tail call float @llvm.nvvm.sqrt.rn.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit107, !dbg !19

2351:                                             ; preds = %2348
  %2352 = tail call float @llvm.nvvm.sqrt.approx.f(float %2078) #6, !dbg !19
  br label %__nv_sqrtf.exit107, !dbg !19

__nv_sqrtf.exit107:                               ; preds = %2344, %2346, %2349, %2351
  %.0.i105 = phi float [ %2345, %2344 ], [ %2347, %2346 ], [ %2350, %2349 ], [ %2352, %2351 ], !dbg !19
  %2353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i108 = icmp eq i32 %2353, 0, !dbg !19
  %2354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i111 = icmp eq i32 %2354, 0, !dbg !19
  br i1 %.not.i108, label %2360, label %2355, !dbg !19

2355:                                             ; preds = %__nv_sqrtf.exit107
  br i1 %.not1.i111, label %2358, label %2356, !dbg !19

2356:                                             ; preds = %2355
  %2357 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit112, !dbg !19

2358:                                             ; preds = %2355
  %2359 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit112, !dbg !19

2360:                                             ; preds = %__nv_sqrtf.exit107
  br i1 %.not1.i111, label %2363, label %2361, !dbg !19

2361:                                             ; preds = %2360
  %2362 = tail call float @llvm.nvvm.sqrt.rn.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit112, !dbg !19

2363:                                             ; preds = %2360
  %2364 = tail call float @llvm.nvvm.sqrt.approx.f(float %2079) #6, !dbg !19
  br label %__nv_sqrtf.exit112, !dbg !19

__nv_sqrtf.exit112:                               ; preds = %2356, %2358, %2361, %2363
  %.0.i110 = phi float [ %2357, %2356 ], [ %2359, %2358 ], [ %2362, %2361 ], [ %2364, %2363 ], !dbg !19
  %2365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i113 = icmp eq i32 %2365, 0, !dbg !19
  %2366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i116 = icmp eq i32 %2366, 0, !dbg !19
  br i1 %.not.i113, label %2372, label %2367, !dbg !19

2367:                                             ; preds = %__nv_sqrtf.exit112
  br i1 %.not1.i116, label %2370, label %2368, !dbg !19

2368:                                             ; preds = %2367
  %2369 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit117, !dbg !19

2370:                                             ; preds = %2367
  %2371 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit117, !dbg !19

2372:                                             ; preds = %__nv_sqrtf.exit112
  br i1 %.not1.i116, label %2375, label %2373, !dbg !19

2373:                                             ; preds = %2372
  %2374 = tail call float @llvm.nvvm.sqrt.rn.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit117, !dbg !19

2375:                                             ; preds = %2372
  %2376 = tail call float @llvm.nvvm.sqrt.approx.f(float %2080) #6, !dbg !19
  br label %__nv_sqrtf.exit117, !dbg !19

__nv_sqrtf.exit117:                               ; preds = %2368, %2370, %2373, %2375
  %.0.i115 = phi float [ %2369, %2368 ], [ %2371, %2370 ], [ %2374, %2373 ], [ %2376, %2375 ], !dbg !19
  %2377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i118 = icmp eq i32 %2377, 0, !dbg !19
  %2378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i121 = icmp eq i32 %2378, 0, !dbg !19
  br i1 %.not.i118, label %2384, label %2379, !dbg !19

2379:                                             ; preds = %__nv_sqrtf.exit117
  br i1 %.not1.i121, label %2382, label %2380, !dbg !19

2380:                                             ; preds = %2379
  %2381 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit122, !dbg !19

2382:                                             ; preds = %2379
  %2383 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit122, !dbg !19

2384:                                             ; preds = %__nv_sqrtf.exit117
  br i1 %.not1.i121, label %2387, label %2385, !dbg !19

2385:                                             ; preds = %2384
  %2386 = tail call float @llvm.nvvm.sqrt.rn.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit122, !dbg !19

2387:                                             ; preds = %2384
  %2388 = tail call float @llvm.nvvm.sqrt.approx.f(float %2081) #6, !dbg !19
  br label %__nv_sqrtf.exit122, !dbg !19

__nv_sqrtf.exit122:                               ; preds = %2380, %2382, %2385, %2387
  %.0.i120 = phi float [ %2381, %2380 ], [ %2383, %2382 ], [ %2386, %2385 ], [ %2388, %2387 ], !dbg !19
  %2389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i123 = icmp eq i32 %2389, 0, !dbg !19
  %2390 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i126 = icmp eq i32 %2390, 0, !dbg !19
  br i1 %.not.i123, label %2396, label %2391, !dbg !19

2391:                                             ; preds = %__nv_sqrtf.exit122
  br i1 %.not1.i126, label %2394, label %2392, !dbg !19

2392:                                             ; preds = %2391
  %2393 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit127, !dbg !19

2394:                                             ; preds = %2391
  %2395 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit127, !dbg !19

2396:                                             ; preds = %__nv_sqrtf.exit122
  br i1 %.not1.i126, label %2399, label %2397, !dbg !19

2397:                                             ; preds = %2396
  %2398 = tail call float @llvm.nvvm.sqrt.rn.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit127, !dbg !19

2399:                                             ; preds = %2396
  %2400 = tail call float @llvm.nvvm.sqrt.approx.f(float %2082) #6, !dbg !19
  br label %__nv_sqrtf.exit127, !dbg !19

__nv_sqrtf.exit127:                               ; preds = %2392, %2394, %2397, %2399
  %.0.i125 = phi float [ %2393, %2392 ], [ %2395, %2394 ], [ %2398, %2397 ], [ %2400, %2399 ], !dbg !19
  %2401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i128 = icmp eq i32 %2401, 0, !dbg !19
  %2402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i131 = icmp eq i32 %2402, 0, !dbg !19
  br i1 %.not.i128, label %2408, label %2403, !dbg !19

2403:                                             ; preds = %__nv_sqrtf.exit127
  br i1 %.not1.i131, label %2406, label %2404, !dbg !19

2404:                                             ; preds = %2403
  %2405 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit132, !dbg !19

2406:                                             ; preds = %2403
  %2407 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit132, !dbg !19

2408:                                             ; preds = %__nv_sqrtf.exit127
  br i1 %.not1.i131, label %2411, label %2409, !dbg !19

2409:                                             ; preds = %2408
  %2410 = tail call float @llvm.nvvm.sqrt.rn.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit132, !dbg !19

2411:                                             ; preds = %2408
  %2412 = tail call float @llvm.nvvm.sqrt.approx.f(float %2083) #6, !dbg !19
  br label %__nv_sqrtf.exit132, !dbg !19

__nv_sqrtf.exit132:                               ; preds = %2404, %2406, %2409, %2411
  %.0.i130 = phi float [ %2405, %2404 ], [ %2407, %2406 ], [ %2410, %2409 ], [ %2412, %2411 ], !dbg !19
  %2413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i133 = icmp eq i32 %2413, 0, !dbg !19
  %2414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i136 = icmp eq i32 %2414, 0, !dbg !19
  br i1 %.not.i133, label %2420, label %2415, !dbg !19

2415:                                             ; preds = %__nv_sqrtf.exit132
  br i1 %.not1.i136, label %2418, label %2416, !dbg !19

2416:                                             ; preds = %2415
  %2417 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit137, !dbg !19

2418:                                             ; preds = %2415
  %2419 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit137, !dbg !19

2420:                                             ; preds = %__nv_sqrtf.exit132
  br i1 %.not1.i136, label %2423, label %2421, !dbg !19

2421:                                             ; preds = %2420
  %2422 = tail call float @llvm.nvvm.sqrt.rn.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit137, !dbg !19

2423:                                             ; preds = %2420
  %2424 = tail call float @llvm.nvvm.sqrt.approx.f(float %2084) #6, !dbg !19
  br label %__nv_sqrtf.exit137, !dbg !19

__nv_sqrtf.exit137:                               ; preds = %2416, %2418, %2421, %2423
  %.0.i135 = phi float [ %2417, %2416 ], [ %2419, %2418 ], [ %2422, %2421 ], [ %2424, %2423 ], !dbg !19
  %2425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i138 = icmp eq i32 %2425, 0, !dbg !19
  %2426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i141 = icmp eq i32 %2426, 0, !dbg !19
  br i1 %.not.i138, label %2432, label %2427, !dbg !19

2427:                                             ; preds = %__nv_sqrtf.exit137
  br i1 %.not1.i141, label %2430, label %2428, !dbg !19

2428:                                             ; preds = %2427
  %2429 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit142, !dbg !19

2430:                                             ; preds = %2427
  %2431 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit142, !dbg !19

2432:                                             ; preds = %__nv_sqrtf.exit137
  br i1 %.not1.i141, label %2435, label %2433, !dbg !19

2433:                                             ; preds = %2432
  %2434 = tail call float @llvm.nvvm.sqrt.rn.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit142, !dbg !19

2435:                                             ; preds = %2432
  %2436 = tail call float @llvm.nvvm.sqrt.approx.f(float %2085) #6, !dbg !19
  br label %__nv_sqrtf.exit142, !dbg !19

__nv_sqrtf.exit142:                               ; preds = %2428, %2430, %2433, %2435
  %.0.i140 = phi float [ %2429, %2428 ], [ %2431, %2430 ], [ %2434, %2433 ], [ %2436, %2435 ], !dbg !19
  %2437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i143 = icmp eq i32 %2437, 0, !dbg !19
  %2438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i146 = icmp eq i32 %2438, 0, !dbg !19
  br i1 %.not.i143, label %2444, label %2439, !dbg !19

2439:                                             ; preds = %__nv_sqrtf.exit142
  br i1 %.not1.i146, label %2442, label %2440, !dbg !19

2440:                                             ; preds = %2439
  %2441 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit147, !dbg !19

2442:                                             ; preds = %2439
  %2443 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit147, !dbg !19

2444:                                             ; preds = %__nv_sqrtf.exit142
  br i1 %.not1.i146, label %2447, label %2445, !dbg !19

2445:                                             ; preds = %2444
  %2446 = tail call float @llvm.nvvm.sqrt.rn.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit147, !dbg !19

2447:                                             ; preds = %2444
  %2448 = tail call float @llvm.nvvm.sqrt.approx.f(float %2086) #6, !dbg !19
  br label %__nv_sqrtf.exit147, !dbg !19

__nv_sqrtf.exit147:                               ; preds = %2440, %2442, %2445, %2447
  %.0.i145 = phi float [ %2441, %2440 ], [ %2443, %2442 ], [ %2446, %2445 ], [ %2448, %2447 ], !dbg !19
  %2449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i148 = icmp eq i32 %2449, 0, !dbg !19
  %2450 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i151 = icmp eq i32 %2450, 0, !dbg !19
  br i1 %.not.i148, label %2456, label %2451, !dbg !19

2451:                                             ; preds = %__nv_sqrtf.exit147
  br i1 %.not1.i151, label %2454, label %2452, !dbg !19

2452:                                             ; preds = %2451
  %2453 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit152, !dbg !19

2454:                                             ; preds = %2451
  %2455 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit152, !dbg !19

2456:                                             ; preds = %__nv_sqrtf.exit147
  br i1 %.not1.i151, label %2459, label %2457, !dbg !19

2457:                                             ; preds = %2456
  %2458 = tail call float @llvm.nvvm.sqrt.rn.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit152, !dbg !19

2459:                                             ; preds = %2456
  %2460 = tail call float @llvm.nvvm.sqrt.approx.f(float %2087) #6, !dbg !19
  br label %__nv_sqrtf.exit152, !dbg !19

__nv_sqrtf.exit152:                               ; preds = %2452, %2454, %2457, %2459
  %.0.i150 = phi float [ %2453, %2452 ], [ %2455, %2454 ], [ %2458, %2457 ], [ %2460, %2459 ], !dbg !19
  %2461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !19
  %.not.i153 = icmp eq i32 %2461, 0, !dbg !19
  %2462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !19
  %.not1.i156 = icmp eq i32 %2462, 0, !dbg !19
  br i1 %.not.i153, label %2468, label %2463, !dbg !19

2463:                                             ; preds = %__nv_sqrtf.exit152
  br i1 %.not1.i156, label %2466, label %2464, !dbg !19

2464:                                             ; preds = %2463
  %2465 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %2088) #6, !dbg !19
  br label %__nv_sqrtf.exit157, !dbg !19

2466:                                             ; preds = %2463
  %2467 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %2088) #6, !dbg !19
  br label %__nv_sqrtf.exit157, !dbg !19

2468:                                             ; preds = %__nv_sqrtf.exit152
  br i1 %.not1.i156, label %2471, label %2469, !dbg !19

2469:                                             ; preds = %2468
  %2470 = tail call float @llvm.nvvm.sqrt.rn.f(float %2088) #6, !dbg !19
  br label %__nv_sqrtf.exit157, !dbg !19

2471:                                             ; preds = %2468
  %2472 = tail call float @llvm.nvvm.sqrt.approx.f(float %2088) #6, !dbg !19
  br label %__nv_sqrtf.exit157, !dbg !19

__nv_sqrtf.exit157:                               ; preds = %2464, %2466, %2469, %2471
  %.0.i155 = phi float [ %2465, %2464 ], [ %2467, %2466 ], [ %2470, %2469 ], [ %2472, %2471 ], !dbg !19
  %2473 = sext i32 %7 to i64, !dbg !20
  %2474 = shl nuw nsw i32 %8, 1, !dbg !10
  %2475 = and i32 %2474, 62, !dbg !10
  %2476 = zext nneg i32 %2475 to i64, !dbg !10
  %2477 = or disjoint i64 %2476, %2473, !dbg !10
  %2478 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !21
  %2479 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i5), !dbg !21
  %2480 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i10), !dbg !21
  %2481 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i15), !dbg !21
  %2482 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i20), !dbg !21
  %2483 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i25), !dbg !21
  %2484 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i30), !dbg !21
  %2485 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i35), !dbg !21
  %2486 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i40), !dbg !21
  %2487 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i45), !dbg !21
  %2488 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i50), !dbg !21
  %2489 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i55), !dbg !21
  %2490 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i60), !dbg !21
  %2491 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i65), !dbg !21
  %2492 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i70), !dbg !21
  %2493 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i75), !dbg !21
  %2494 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i80), !dbg !21
  %2495 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i85), !dbg !21
  %2496 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i90), !dbg !21
  %2497 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i95), !dbg !21
  %2498 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i100), !dbg !21
  %2499 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i105), !dbg !21
  %2500 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i110), !dbg !21
  %2501 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i115), !dbg !21
  %2502 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i120), !dbg !21
  %2503 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i125), !dbg !21
  %2504 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i130), !dbg !21
  %2505 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i135), !dbg !21
  %2506 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i140), !dbg !21
  %2507 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i145), !dbg !21
  %2508 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i150), !dbg !21
  %2509 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i155), !dbg !21
  %2510 = fmul float %2478, %809, !dbg !22
  %2511 = fmul float %2478, %810, !dbg !22
  %2512 = fmul float %2478, %811, !dbg !22
  %2513 = fmul float %2478, %812, !dbg !22
  %2514 = fmul float %2478, %813, !dbg !22
  %2515 = fmul float %2478, %814, !dbg !22
  %2516 = fmul float %2478, %815, !dbg !22
  %2517 = fmul float %2478, %816, !dbg !22
  %2518 = fmul float %2479, %817, !dbg !22
  %2519 = fmul float %2479, %818, !dbg !22
  %2520 = fmul float %2479, %819, !dbg !22
  %2521 = fmul float %2479, %820, !dbg !22
  %2522 = fmul float %2479, %821, !dbg !22
  %2523 = fmul float %2479, %822, !dbg !22
  %2524 = fmul float %2479, %823, !dbg !22
  %2525 = fmul float %2479, %824, !dbg !22
  %2526 = fmul float %2480, %825, !dbg !22
  %2527 = fmul float %2480, %826, !dbg !22
  %2528 = fmul float %2480, %827, !dbg !22
  %2529 = fmul float %2480, %828, !dbg !22
  %2530 = fmul float %2480, %829, !dbg !22
  %2531 = fmul float %2480, %830, !dbg !22
  %2532 = fmul float %2480, %831, !dbg !22
  %2533 = fmul float %2480, %832, !dbg !22
  %2534 = fmul float %2481, %833, !dbg !22
  %2535 = fmul float %2481, %834, !dbg !22
  %2536 = fmul float %2481, %835, !dbg !22
  %2537 = fmul float %2481, %836, !dbg !22
  %2538 = fmul float %2481, %837, !dbg !22
  %2539 = fmul float %2481, %838, !dbg !22
  %2540 = fmul float %2481, %839, !dbg !22
  %2541 = fmul float %2481, %840, !dbg !22
  %2542 = fmul float %2482, %841, !dbg !22
  %2543 = fmul float %2482, %842, !dbg !22
  %2544 = fmul float %2482, %843, !dbg !22
  %2545 = fmul float %2482, %844, !dbg !22
  %2546 = fmul float %2482, %845, !dbg !22
  %2547 = fmul float %2482, %846, !dbg !22
  %2548 = fmul float %2482, %847, !dbg !22
  %2549 = fmul float %2482, %848, !dbg !22
  %2550 = fmul float %2483, %849, !dbg !22
  %2551 = fmul float %2483, %850, !dbg !22
  %2552 = fmul float %2483, %851, !dbg !22
  %2553 = fmul float %2483, %852, !dbg !22
  %2554 = fmul float %2483, %853, !dbg !22
  %2555 = fmul float %2483, %854, !dbg !22
  %2556 = fmul float %2483, %855, !dbg !22
  %2557 = fmul float %2483, %856, !dbg !22
  %2558 = fmul float %2484, %857, !dbg !22
  %2559 = fmul float %2484, %858, !dbg !22
  %2560 = fmul float %2484, %859, !dbg !22
  %2561 = fmul float %2484, %860, !dbg !22
  %2562 = fmul float %2484, %861, !dbg !22
  %2563 = fmul float %2484, %862, !dbg !22
  %2564 = fmul float %2484, %863, !dbg !22
  %2565 = fmul float %2484, %864, !dbg !22
  %2566 = fmul float %2485, %865, !dbg !22
  %2567 = fmul float %2485, %866, !dbg !22
  %2568 = fmul float %2485, %867, !dbg !22
  %2569 = fmul float %2485, %868, !dbg !22
  %2570 = fmul float %2485, %869, !dbg !22
  %2571 = fmul float %2485, %870, !dbg !22
  %2572 = fmul float %2485, %871, !dbg !22
  %2573 = fmul float %2485, %872, !dbg !22
  %2574 = fmul float %2486, %873, !dbg !22
  %2575 = fmul float %2486, %874, !dbg !22
  %2576 = fmul float %2486, %875, !dbg !22
  %2577 = fmul float %2486, %876, !dbg !22
  %2578 = fmul float %2486, %877, !dbg !22
  %2579 = fmul float %2486, %878, !dbg !22
  %2580 = fmul float %2486, %879, !dbg !22
  %2581 = fmul float %2486, %880, !dbg !22
  %2582 = fmul float %2487, %881, !dbg !22
  %2583 = fmul float %2487, %882, !dbg !22
  %2584 = fmul float %2487, %883, !dbg !22
  %2585 = fmul float %2487, %884, !dbg !22
  %2586 = fmul float %2487, %885, !dbg !22
  %2587 = fmul float %2487, %886, !dbg !22
  %2588 = fmul float %2487, %887, !dbg !22
  %2589 = fmul float %2487, %888, !dbg !22
  %2590 = fmul float %2488, %889, !dbg !22
  %2591 = fmul float %2488, %890, !dbg !22
  %2592 = fmul float %2488, %891, !dbg !22
  %2593 = fmul float %2488, %892, !dbg !22
  %2594 = fmul float %2488, %893, !dbg !22
  %2595 = fmul float %2488, %894, !dbg !22
  %2596 = fmul float %2488, %895, !dbg !22
  %2597 = fmul float %2488, %896, !dbg !22
  %2598 = fmul float %2489, %897, !dbg !22
  %2599 = fmul float %2489, %898, !dbg !22
  %2600 = fmul float %2489, %899, !dbg !22
  %2601 = fmul float %2489, %900, !dbg !22
  %2602 = fmul float %2489, %901, !dbg !22
  %2603 = fmul float %2489, %902, !dbg !22
  %2604 = fmul float %2489, %903, !dbg !22
  %2605 = fmul float %2489, %904, !dbg !22
  %2606 = fmul float %2490, %905, !dbg !22
  %2607 = fmul float %2490, %906, !dbg !22
  %2608 = fmul float %2490, %907, !dbg !22
  %2609 = fmul float %2490, %908, !dbg !22
  %2610 = fmul float %2490, %909, !dbg !22
  %2611 = fmul float %2490, %910, !dbg !22
  %2612 = fmul float %2490, %911, !dbg !22
  %2613 = fmul float %2490, %912, !dbg !22
  %2614 = fmul float %2491, %913, !dbg !22
  %2615 = fmul float %2491, %914, !dbg !22
  %2616 = fmul float %2491, %915, !dbg !22
  %2617 = fmul float %2491, %916, !dbg !22
  %2618 = fmul float %2491, %917, !dbg !22
  %2619 = fmul float %2491, %918, !dbg !22
  %2620 = fmul float %2491, %919, !dbg !22
  %2621 = fmul float %2491, %920, !dbg !22
  %2622 = fmul float %2492, %921, !dbg !22
  %2623 = fmul float %2492, %922, !dbg !22
  %2624 = fmul float %2492, %923, !dbg !22
  %2625 = fmul float %2492, %924, !dbg !22
  %2626 = fmul float %2492, %925, !dbg !22
  %2627 = fmul float %2492, %926, !dbg !22
  %2628 = fmul float %2492, %927, !dbg !22
  %2629 = fmul float %2492, %928, !dbg !22
  %2630 = fmul float %2493, %929, !dbg !22
  %2631 = fmul float %2493, %930, !dbg !22
  %2632 = fmul float %2493, %931, !dbg !22
  %2633 = fmul float %2493, %932, !dbg !22
  %2634 = fmul float %2493, %933, !dbg !22
  %2635 = fmul float %2493, %934, !dbg !22
  %2636 = fmul float %2493, %935, !dbg !22
  %2637 = fmul float %2493, %936, !dbg !22
  %2638 = fmul float %2494, %937, !dbg !22
  %2639 = fmul float %2494, %938, !dbg !22
  %2640 = fmul float %2494, %939, !dbg !22
  %2641 = fmul float %2494, %940, !dbg !22
  %2642 = fmul float %2494, %941, !dbg !22
  %2643 = fmul float %2494, %942, !dbg !22
  %2644 = fmul float %2494, %943, !dbg !22
  %2645 = fmul float %2494, %944, !dbg !22
  %2646 = fmul float %2495, %945, !dbg !22
  %2647 = fmul float %2495, %946, !dbg !22
  %2648 = fmul float %2495, %947, !dbg !22
  %2649 = fmul float %2495, %948, !dbg !22
  %2650 = fmul float %2495, %949, !dbg !22
  %2651 = fmul float %2495, %950, !dbg !22
  %2652 = fmul float %2495, %951, !dbg !22
  %2653 = fmul float %2495, %952, !dbg !22
  %2654 = fmul float %2496, %953, !dbg !22
  %2655 = fmul float %2496, %954, !dbg !22
  %2656 = fmul float %2496, %955, !dbg !22
  %2657 = fmul float %2496, %956, !dbg !22
  %2658 = fmul float %2496, %957, !dbg !22
  %2659 = fmul float %2496, %958, !dbg !22
  %2660 = fmul float %2496, %959, !dbg !22
  %2661 = fmul float %2496, %960, !dbg !22
  %2662 = fmul float %2497, %961, !dbg !22
  %2663 = fmul float %2497, %962, !dbg !22
  %2664 = fmul float %2497, %963, !dbg !22
  %2665 = fmul float %2497, %964, !dbg !22
  %2666 = fmul float %2497, %965, !dbg !22
  %2667 = fmul float %2497, %966, !dbg !22
  %2668 = fmul float %2497, %967, !dbg !22
  %2669 = fmul float %2497, %968, !dbg !22
  %2670 = fmul float %2498, %969, !dbg !22
  %2671 = fmul float %2498, %970, !dbg !22
  %2672 = fmul float %2498, %971, !dbg !22
  %2673 = fmul float %2498, %972, !dbg !22
  %2674 = fmul float %2498, %973, !dbg !22
  %2675 = fmul float %2498, %974, !dbg !22
  %2676 = fmul float %2498, %975, !dbg !22
  %2677 = fmul float %2498, %976, !dbg !22
  %2678 = fmul float %2499, %977, !dbg !22
  %2679 = fmul float %2499, %978, !dbg !22
  %2680 = fmul float %2499, %979, !dbg !22
  %2681 = fmul float %2499, %980, !dbg !22
  %2682 = fmul float %2499, %981, !dbg !22
  %2683 = fmul float %2499, %982, !dbg !22
  %2684 = fmul float %2499, %983, !dbg !22
  %2685 = fmul float %2499, %984, !dbg !22
  %2686 = fmul float %2500, %985, !dbg !22
  %2687 = fmul float %2500, %986, !dbg !22
  %2688 = fmul float %2500, %987, !dbg !22
  %2689 = fmul float %2500, %988, !dbg !22
  %2690 = fmul float %2500, %989, !dbg !22
  %2691 = fmul float %2500, %990, !dbg !22
  %2692 = fmul float %2500, %991, !dbg !22
  %2693 = fmul float %2500, %992, !dbg !22
  %2694 = fmul float %2501, %993, !dbg !22
  %2695 = fmul float %2501, %994, !dbg !22
  %2696 = fmul float %2501, %995, !dbg !22
  %2697 = fmul float %2501, %996, !dbg !22
  %2698 = fmul float %2501, %997, !dbg !22
  %2699 = fmul float %2501, %998, !dbg !22
  %2700 = fmul float %2501, %999, !dbg !22
  %2701 = fmul float %2501, %1000, !dbg !22
  %2702 = fmul float %2502, %1001, !dbg !22
  %2703 = fmul float %2502, %1002, !dbg !22
  %2704 = fmul float %2502, %1003, !dbg !22
  %2705 = fmul float %2502, %1004, !dbg !22
  %2706 = fmul float %2502, %1005, !dbg !22
  %2707 = fmul float %2502, %1006, !dbg !22
  %2708 = fmul float %2502, %1007, !dbg !22
  %2709 = fmul float %2502, %1008, !dbg !22
  %2710 = fmul float %2503, %1009, !dbg !22
  %2711 = fmul float %2503, %1010, !dbg !22
  %2712 = fmul float %2503, %1011, !dbg !22
  %2713 = fmul float %2503, %1012, !dbg !22
  %2714 = fmul float %2503, %1013, !dbg !22
  %2715 = fmul float %2503, %1014, !dbg !22
  %2716 = fmul float %2503, %1015, !dbg !22
  %2717 = fmul float %2503, %1016, !dbg !22
  %2718 = fmul float %2504, %1017, !dbg !22
  %2719 = fmul float %2504, %1018, !dbg !22
  %2720 = fmul float %2504, %1019, !dbg !22
  %2721 = fmul float %2504, %1020, !dbg !22
  %2722 = fmul float %2504, %1021, !dbg !22
  %2723 = fmul float %2504, %1022, !dbg !22
  %2724 = fmul float %2504, %1023, !dbg !22
  %2725 = fmul float %2504, %1024, !dbg !22
  %2726 = fmul float %2505, %1025, !dbg !22
  %2727 = fmul float %2505, %1026, !dbg !22
  %2728 = fmul float %2505, %1027, !dbg !22
  %2729 = fmul float %2505, %1028, !dbg !22
  %2730 = fmul float %2505, %1029, !dbg !22
  %2731 = fmul float %2505, %1030, !dbg !22
  %2732 = fmul float %2505, %1031, !dbg !22
  %2733 = fmul float %2505, %1032, !dbg !22
  %2734 = fmul float %2506, %1033, !dbg !22
  %2735 = fmul float %2506, %1034, !dbg !22
  %2736 = fmul float %2506, %1035, !dbg !22
  %2737 = fmul float %2506, %1036, !dbg !22
  %2738 = fmul float %2506, %1037, !dbg !22
  %2739 = fmul float %2506, %1038, !dbg !22
  %2740 = fmul float %2506, %1039, !dbg !22
  %2741 = fmul float %2506, %1040, !dbg !22
  %2742 = fmul float %2507, %1041, !dbg !22
  %2743 = fmul float %2507, %1042, !dbg !22
  %2744 = fmul float %2507, %1043, !dbg !22
  %2745 = fmul float %2507, %1044, !dbg !22
  %2746 = fmul float %2507, %1045, !dbg !22
  %2747 = fmul float %2507, %1046, !dbg !22
  %2748 = fmul float %2507, %1047, !dbg !22
  %2749 = fmul float %2507, %1048, !dbg !22
  %2750 = fmul float %2508, %1049, !dbg !22
  %2751 = fmul float %2508, %1050, !dbg !22
  %2752 = fmul float %2508, %1051, !dbg !22
  %2753 = fmul float %2508, %1052, !dbg !22
  %2754 = fmul float %2508, %1053, !dbg !22
  %2755 = fmul float %2508, %1054, !dbg !22
  %2756 = fmul float %2508, %1055, !dbg !22
  %2757 = fmul float %2508, %1056, !dbg !22
  %2758 = fmul float %2509, %1057, !dbg !22
  %2759 = fmul float %2509, %1058, !dbg !22
  %2760 = fmul float %2509, %1059, !dbg !22
  %2761 = fmul float %2509, %1060, !dbg !22
  %2762 = fmul float %2509, %1061, !dbg !22
  %2763 = fmul float %2509, %1062, !dbg !22
  %2764 = fmul float %2509, %1063, !dbg !22
  %2765 = fmul float %2509, %1064, !dbg !22
  %2766 = fptrunc float %2510 to bfloat, !dbg !23
  %2767 = fptrunc float %2511 to bfloat, !dbg !23
  %2768 = fptrunc float %2512 to bfloat, !dbg !23
  %2769 = fptrunc float %2513 to bfloat, !dbg !23
  %2770 = fptrunc float %2514 to bfloat, !dbg !23
  %2771 = fptrunc float %2515 to bfloat, !dbg !23
  %2772 = fptrunc float %2516 to bfloat, !dbg !23
  %2773 = fptrunc float %2517 to bfloat, !dbg !23
  %2774 = fptrunc float %2518 to bfloat, !dbg !23
  %2775 = fptrunc float %2519 to bfloat, !dbg !23
  %2776 = fptrunc float %2520 to bfloat, !dbg !23
  %2777 = fptrunc float %2521 to bfloat, !dbg !23
  %2778 = fptrunc float %2522 to bfloat, !dbg !23
  %2779 = fptrunc float %2523 to bfloat, !dbg !23
  %2780 = fptrunc float %2524 to bfloat, !dbg !23
  %2781 = fptrunc float %2525 to bfloat, !dbg !23
  %2782 = fptrunc float %2526 to bfloat, !dbg !23
  %2783 = fptrunc float %2527 to bfloat, !dbg !23
  %2784 = fptrunc float %2528 to bfloat, !dbg !23
  %2785 = fptrunc float %2529 to bfloat, !dbg !23
  %2786 = fptrunc float %2530 to bfloat, !dbg !23
  %2787 = fptrunc float %2531 to bfloat, !dbg !23
  %2788 = fptrunc float %2532 to bfloat, !dbg !23
  %2789 = fptrunc float %2533 to bfloat, !dbg !23
  %2790 = fptrunc float %2534 to bfloat, !dbg !23
  %2791 = fptrunc float %2535 to bfloat, !dbg !23
  %2792 = fptrunc float %2536 to bfloat, !dbg !23
  %2793 = fptrunc float %2537 to bfloat, !dbg !23
  %2794 = fptrunc float %2538 to bfloat, !dbg !23
  %2795 = fptrunc float %2539 to bfloat, !dbg !23
  %2796 = fptrunc float %2540 to bfloat, !dbg !23
  %2797 = fptrunc float %2541 to bfloat, !dbg !23
  %2798 = fptrunc float %2542 to bfloat, !dbg !23
  %2799 = fptrunc float %2543 to bfloat, !dbg !23
  %2800 = fptrunc float %2544 to bfloat, !dbg !23
  %2801 = fptrunc float %2545 to bfloat, !dbg !23
  %2802 = fptrunc float %2546 to bfloat, !dbg !23
  %2803 = fptrunc float %2547 to bfloat, !dbg !23
  %2804 = fptrunc float %2548 to bfloat, !dbg !23
  %2805 = fptrunc float %2549 to bfloat, !dbg !23
  %2806 = fptrunc float %2550 to bfloat, !dbg !23
  %2807 = fptrunc float %2551 to bfloat, !dbg !23
  %2808 = fptrunc float %2552 to bfloat, !dbg !23
  %2809 = fptrunc float %2553 to bfloat, !dbg !23
  %2810 = fptrunc float %2554 to bfloat, !dbg !23
  %2811 = fptrunc float %2555 to bfloat, !dbg !23
  %2812 = fptrunc float %2556 to bfloat, !dbg !23
  %2813 = fptrunc float %2557 to bfloat, !dbg !23
  %2814 = fptrunc float %2558 to bfloat, !dbg !23
  %2815 = fptrunc float %2559 to bfloat, !dbg !23
  %2816 = fptrunc float %2560 to bfloat, !dbg !23
  %2817 = fptrunc float %2561 to bfloat, !dbg !23
  %2818 = fptrunc float %2562 to bfloat, !dbg !23
  %2819 = fptrunc float %2563 to bfloat, !dbg !23
  %2820 = fptrunc float %2564 to bfloat, !dbg !23
  %2821 = fptrunc float %2565 to bfloat, !dbg !23
  %2822 = fptrunc float %2566 to bfloat, !dbg !23
  %2823 = fptrunc float %2567 to bfloat, !dbg !23
  %2824 = fptrunc float %2568 to bfloat, !dbg !23
  %2825 = fptrunc float %2569 to bfloat, !dbg !23
  %2826 = fptrunc float %2570 to bfloat, !dbg !23
  %2827 = fptrunc float %2571 to bfloat, !dbg !23
  %2828 = fptrunc float %2572 to bfloat, !dbg !23
  %2829 = fptrunc float %2573 to bfloat, !dbg !23
  %2830 = fptrunc float %2574 to bfloat, !dbg !23
  %2831 = fptrunc float %2575 to bfloat, !dbg !23
  %2832 = fptrunc float %2576 to bfloat, !dbg !23
  %2833 = fptrunc float %2577 to bfloat, !dbg !23
  %2834 = fptrunc float %2578 to bfloat, !dbg !23
  %2835 = fptrunc float %2579 to bfloat, !dbg !23
  %2836 = fptrunc float %2580 to bfloat, !dbg !23
  %2837 = fptrunc float %2581 to bfloat, !dbg !23
  %2838 = fptrunc float %2582 to bfloat, !dbg !23
  %2839 = fptrunc float %2583 to bfloat, !dbg !23
  %2840 = fptrunc float %2584 to bfloat, !dbg !23
  %2841 = fptrunc float %2585 to bfloat, !dbg !23
  %2842 = fptrunc float %2586 to bfloat, !dbg !23
  %2843 = fptrunc float %2587 to bfloat, !dbg !23
  %2844 = fptrunc float %2588 to bfloat, !dbg !23
  %2845 = fptrunc float %2589 to bfloat, !dbg !23
  %2846 = fptrunc float %2590 to bfloat, !dbg !23
  %2847 = fptrunc float %2591 to bfloat, !dbg !23
  %2848 = fptrunc float %2592 to bfloat, !dbg !23
  %2849 = fptrunc float %2593 to bfloat, !dbg !23
  %2850 = fptrunc float %2594 to bfloat, !dbg !23
  %2851 = fptrunc float %2595 to bfloat, !dbg !23
  %2852 = fptrunc float %2596 to bfloat, !dbg !23
  %2853 = fptrunc float %2597 to bfloat, !dbg !23
  %2854 = fptrunc float %2598 to bfloat, !dbg !23
  %2855 = fptrunc float %2599 to bfloat, !dbg !23
  %2856 = fptrunc float %2600 to bfloat, !dbg !23
  %2857 = fptrunc float %2601 to bfloat, !dbg !23
  %2858 = fptrunc float %2602 to bfloat, !dbg !23
  %2859 = fptrunc float %2603 to bfloat, !dbg !23
  %2860 = fptrunc float %2604 to bfloat, !dbg !23
  %2861 = fptrunc float %2605 to bfloat, !dbg !23
  %2862 = fptrunc float %2606 to bfloat, !dbg !23
  %2863 = fptrunc float %2607 to bfloat, !dbg !23
  %2864 = fptrunc float %2608 to bfloat, !dbg !23
  %2865 = fptrunc float %2609 to bfloat, !dbg !23
  %2866 = fptrunc float %2610 to bfloat, !dbg !23
  %2867 = fptrunc float %2611 to bfloat, !dbg !23
  %2868 = fptrunc float %2612 to bfloat, !dbg !23
  %2869 = fptrunc float %2613 to bfloat, !dbg !23
  %2870 = fptrunc float %2614 to bfloat, !dbg !23
  %2871 = fptrunc float %2615 to bfloat, !dbg !23
  %2872 = fptrunc float %2616 to bfloat, !dbg !23
  %2873 = fptrunc float %2617 to bfloat, !dbg !23
  %2874 = fptrunc float %2618 to bfloat, !dbg !23
  %2875 = fptrunc float %2619 to bfloat, !dbg !23
  %2876 = fptrunc float %2620 to bfloat, !dbg !23
  %2877 = fptrunc float %2621 to bfloat, !dbg !23
  %2878 = fptrunc float %2622 to bfloat, !dbg !23
  %2879 = fptrunc float %2623 to bfloat, !dbg !23
  %2880 = fptrunc float %2624 to bfloat, !dbg !23
  %2881 = fptrunc float %2625 to bfloat, !dbg !23
  %2882 = fptrunc float %2626 to bfloat, !dbg !23
  %2883 = fptrunc float %2627 to bfloat, !dbg !23
  %2884 = fptrunc float %2628 to bfloat, !dbg !23
  %2885 = fptrunc float %2629 to bfloat, !dbg !23
  %2886 = fptrunc float %2630 to bfloat, !dbg !23
  %2887 = fptrunc float %2631 to bfloat, !dbg !23
  %2888 = fptrunc float %2632 to bfloat, !dbg !23
  %2889 = fptrunc float %2633 to bfloat, !dbg !23
  %2890 = fptrunc float %2634 to bfloat, !dbg !23
  %2891 = fptrunc float %2635 to bfloat, !dbg !23
  %2892 = fptrunc float %2636 to bfloat, !dbg !23
  %2893 = fptrunc float %2637 to bfloat, !dbg !23
  %2894 = fptrunc float %2638 to bfloat, !dbg !23
  %2895 = fptrunc float %2639 to bfloat, !dbg !23
  %2896 = fptrunc float %2640 to bfloat, !dbg !23
  %2897 = fptrunc float %2641 to bfloat, !dbg !23
  %2898 = fptrunc float %2642 to bfloat, !dbg !23
  %2899 = fptrunc float %2643 to bfloat, !dbg !23
  %2900 = fptrunc float %2644 to bfloat, !dbg !23
  %2901 = fptrunc float %2645 to bfloat, !dbg !23
  %2902 = fptrunc float %2646 to bfloat, !dbg !23
  %2903 = fptrunc float %2647 to bfloat, !dbg !23
  %2904 = fptrunc float %2648 to bfloat, !dbg !23
  %2905 = fptrunc float %2649 to bfloat, !dbg !23
  %2906 = fptrunc float %2650 to bfloat, !dbg !23
  %2907 = fptrunc float %2651 to bfloat, !dbg !23
  %2908 = fptrunc float %2652 to bfloat, !dbg !23
  %2909 = fptrunc float %2653 to bfloat, !dbg !23
  %2910 = fptrunc float %2654 to bfloat, !dbg !23
  %2911 = fptrunc float %2655 to bfloat, !dbg !23
  %2912 = fptrunc float %2656 to bfloat, !dbg !23
  %2913 = fptrunc float %2657 to bfloat, !dbg !23
  %2914 = fptrunc float %2658 to bfloat, !dbg !23
  %2915 = fptrunc float %2659 to bfloat, !dbg !23
  %2916 = fptrunc float %2660 to bfloat, !dbg !23
  %2917 = fptrunc float %2661 to bfloat, !dbg !23
  %2918 = fptrunc float %2662 to bfloat, !dbg !23
  %2919 = fptrunc float %2663 to bfloat, !dbg !23
  %2920 = fptrunc float %2664 to bfloat, !dbg !23
  %2921 = fptrunc float %2665 to bfloat, !dbg !23
  %2922 = fptrunc float %2666 to bfloat, !dbg !23
  %2923 = fptrunc float %2667 to bfloat, !dbg !23
  %2924 = fptrunc float %2668 to bfloat, !dbg !23
  %2925 = fptrunc float %2669 to bfloat, !dbg !23
  %2926 = fptrunc float %2670 to bfloat, !dbg !23
  %2927 = fptrunc float %2671 to bfloat, !dbg !23
  %2928 = fptrunc float %2672 to bfloat, !dbg !23
  %2929 = fptrunc float %2673 to bfloat, !dbg !23
  %2930 = fptrunc float %2674 to bfloat, !dbg !23
  %2931 = fptrunc float %2675 to bfloat, !dbg !23
  %2932 = fptrunc float %2676 to bfloat, !dbg !23
  %2933 = fptrunc float %2677 to bfloat, !dbg !23
  %2934 = fptrunc float %2678 to bfloat, !dbg !23
  %2935 = fptrunc float %2679 to bfloat, !dbg !23
  %2936 = fptrunc float %2680 to bfloat, !dbg !23
  %2937 = fptrunc float %2681 to bfloat, !dbg !23
  %2938 = fptrunc float %2682 to bfloat, !dbg !23
  %2939 = fptrunc float %2683 to bfloat, !dbg !23
  %2940 = fptrunc float %2684 to bfloat, !dbg !23
  %2941 = fptrunc float %2685 to bfloat, !dbg !23
  %2942 = fptrunc float %2686 to bfloat, !dbg !23
  %2943 = fptrunc float %2687 to bfloat, !dbg !23
  %2944 = fptrunc float %2688 to bfloat, !dbg !23
  %2945 = fptrunc float %2689 to bfloat, !dbg !23
  %2946 = fptrunc float %2690 to bfloat, !dbg !23
  %2947 = fptrunc float %2691 to bfloat, !dbg !23
  %2948 = fptrunc float %2692 to bfloat, !dbg !23
  %2949 = fptrunc float %2693 to bfloat, !dbg !23
  %2950 = fptrunc float %2694 to bfloat, !dbg !23
  %2951 = fptrunc float %2695 to bfloat, !dbg !23
  %2952 = fptrunc float %2696 to bfloat, !dbg !23
  %2953 = fptrunc float %2697 to bfloat, !dbg !23
  %2954 = fptrunc float %2698 to bfloat, !dbg !23
  %2955 = fptrunc float %2699 to bfloat, !dbg !23
  %2956 = fptrunc float %2700 to bfloat, !dbg !23
  %2957 = fptrunc float %2701 to bfloat, !dbg !23
  %2958 = fptrunc float %2702 to bfloat, !dbg !23
  %2959 = fptrunc float %2703 to bfloat, !dbg !23
  %2960 = fptrunc float %2704 to bfloat, !dbg !23
  %2961 = fptrunc float %2705 to bfloat, !dbg !23
  %2962 = fptrunc float %2706 to bfloat, !dbg !23
  %2963 = fptrunc float %2707 to bfloat, !dbg !23
  %2964 = fptrunc float %2708 to bfloat, !dbg !23
  %2965 = fptrunc float %2709 to bfloat, !dbg !23
  %2966 = fptrunc float %2710 to bfloat, !dbg !23
  %2967 = fptrunc float %2711 to bfloat, !dbg !23
  %2968 = fptrunc float %2712 to bfloat, !dbg !23
  %2969 = fptrunc float %2713 to bfloat, !dbg !23
  %2970 = fptrunc float %2714 to bfloat, !dbg !23
  %2971 = fptrunc float %2715 to bfloat, !dbg !23
  %2972 = fptrunc float %2716 to bfloat, !dbg !23
  %2973 = fptrunc float %2717 to bfloat, !dbg !23
  %2974 = fptrunc float %2718 to bfloat, !dbg !23
  %2975 = fptrunc float %2719 to bfloat, !dbg !23
  %2976 = fptrunc float %2720 to bfloat, !dbg !23
  %2977 = fptrunc float %2721 to bfloat, !dbg !23
  %2978 = fptrunc float %2722 to bfloat, !dbg !23
  %2979 = fptrunc float %2723 to bfloat, !dbg !23
  %2980 = fptrunc float %2724 to bfloat, !dbg !23
  %2981 = fptrunc float %2725 to bfloat, !dbg !23
  %2982 = fptrunc float %2726 to bfloat, !dbg !23
  %2983 = fptrunc float %2727 to bfloat, !dbg !23
  %2984 = fptrunc float %2728 to bfloat, !dbg !23
  %2985 = fptrunc float %2729 to bfloat, !dbg !23
  %2986 = fptrunc float %2730 to bfloat, !dbg !23
  %2987 = fptrunc float %2731 to bfloat, !dbg !23
  %2988 = fptrunc float %2732 to bfloat, !dbg !23
  %2989 = fptrunc float %2733 to bfloat, !dbg !23
  %2990 = fptrunc float %2734 to bfloat, !dbg !23
  %2991 = fptrunc float %2735 to bfloat, !dbg !23
  %2992 = fptrunc float %2736 to bfloat, !dbg !23
  %2993 = fptrunc float %2737 to bfloat, !dbg !23
  %2994 = fptrunc float %2738 to bfloat, !dbg !23
  %2995 = fptrunc float %2739 to bfloat, !dbg !23
  %2996 = fptrunc float %2740 to bfloat, !dbg !23
  %2997 = fptrunc float %2741 to bfloat, !dbg !23
  %2998 = fptrunc float %2742 to bfloat, !dbg !23
  %2999 = fptrunc float %2743 to bfloat, !dbg !23
  %3000 = fptrunc float %2744 to bfloat, !dbg !23
  %3001 = fptrunc float %2745 to bfloat, !dbg !23
  %3002 = fptrunc float %2746 to bfloat, !dbg !23
  %3003 = fptrunc float %2747 to bfloat, !dbg !23
  %3004 = fptrunc float %2748 to bfloat, !dbg !23
  %3005 = fptrunc float %2749 to bfloat, !dbg !23
  %3006 = fptrunc float %2750 to bfloat, !dbg !23
  %3007 = fptrunc float %2751 to bfloat, !dbg !23
  %3008 = fptrunc float %2752 to bfloat, !dbg !23
  %3009 = fptrunc float %2753 to bfloat, !dbg !23
  %3010 = fptrunc float %2754 to bfloat, !dbg !23
  %3011 = fptrunc float %2755 to bfloat, !dbg !23
  %3012 = fptrunc float %2756 to bfloat, !dbg !23
  %3013 = fptrunc float %2757 to bfloat, !dbg !23
  %3014 = fptrunc float %2758 to bfloat, !dbg !23
  %3015 = fptrunc float %2759 to bfloat, !dbg !23
  %3016 = fptrunc float %2760 to bfloat, !dbg !23
  %3017 = fptrunc float %2761 to bfloat, !dbg !23
  %3018 = fptrunc float %2762 to bfloat, !dbg !23
  %3019 = fptrunc float %2763 to bfloat, !dbg !23
  %3020 = fptrunc float %2764 to bfloat, !dbg !23
  %3021 = fptrunc float %2765 to bfloat, !dbg !23
  %3022 = getelementptr bfloat, ptr addrspace(1) %1, i64 %136, !dbg !24
  %3023 = getelementptr bfloat, ptr addrspace(1) %1, i64 %137, !dbg !24
  %3024 = getelementptr bfloat, ptr addrspace(1) %1, i64 %138, !dbg !24
  %3025 = getelementptr bfloat, ptr addrspace(1) %1, i64 %139, !dbg !24
  %3026 = getelementptr bfloat, ptr addrspace(1) %1, i64 %140, !dbg !24
  %3027 = getelementptr bfloat, ptr addrspace(1) %1, i64 %141, !dbg !24
  %3028 = getelementptr bfloat, ptr addrspace(1) %1, i64 %142, !dbg !24
  %3029 = getelementptr bfloat, ptr addrspace(1) %1, i64 %143, !dbg !24
  %3030 = getelementptr bfloat, ptr addrspace(1) %1, i64 %144, !dbg !24
  %3031 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !24
  %3032 = getelementptr bfloat, ptr addrspace(1) %1, i64 %146, !dbg !24
  %3033 = getelementptr bfloat, ptr addrspace(1) %1, i64 %147, !dbg !24
  %3034 = getelementptr bfloat, ptr addrspace(1) %1, i64 %148, !dbg !24
  %3035 = getelementptr bfloat, ptr addrspace(1) %1, i64 %149, !dbg !24
  %3036 = getelementptr bfloat, ptr addrspace(1) %1, i64 %150, !dbg !24
  %3037 = getelementptr bfloat, ptr addrspace(1) %1, i64 %151, !dbg !24
  %3038 = getelementptr bfloat, ptr addrspace(1) %1, i64 %152, !dbg !24
  %3039 = getelementptr bfloat, ptr addrspace(1) %1, i64 %153, !dbg !24
  %3040 = getelementptr bfloat, ptr addrspace(1) %1, i64 %154, !dbg !24
  %3041 = getelementptr bfloat, ptr addrspace(1) %1, i64 %155, !dbg !24
  %3042 = getelementptr bfloat, ptr addrspace(1) %1, i64 %156, !dbg !24
  %3043 = getelementptr bfloat, ptr addrspace(1) %1, i64 %157, !dbg !24
  %3044 = getelementptr bfloat, ptr addrspace(1) %1, i64 %158, !dbg !24
  %3045 = getelementptr bfloat, ptr addrspace(1) %1, i64 %159, !dbg !24
  %3046 = getelementptr bfloat, ptr addrspace(1) %1, i64 %160, !dbg !24
  %3047 = getelementptr bfloat, ptr addrspace(1) %1, i64 %161, !dbg !24
  %3048 = getelementptr bfloat, ptr addrspace(1) %1, i64 %162, !dbg !24
  %3049 = getelementptr bfloat, ptr addrspace(1) %1, i64 %163, !dbg !24
  %3050 = getelementptr bfloat, ptr addrspace(1) %1, i64 %164, !dbg !24
  %3051 = getelementptr bfloat, ptr addrspace(1) %1, i64 %165, !dbg !24
  %3052 = getelementptr bfloat, ptr addrspace(1) %1, i64 %166, !dbg !24
  %3053 = getelementptr bfloat, ptr addrspace(1) %1, i64 %167, !dbg !24
  %3054 = insertelement <2 x bfloat> poison, bfloat %2766, i64 0, !dbg !24
  %3055 = insertelement <2 x bfloat> %3054, bfloat %2767, i64 1, !dbg !24
  %3056 = bitcast <2 x bfloat> %3055 to i32, !dbg !24
  %3057 = insertelement <2 x bfloat> poison, bfloat %2768, i64 0, !dbg !24
  %3058 = insertelement <2 x bfloat> %3057, bfloat %2769, i64 1, !dbg !24
  %3059 = bitcast <2 x bfloat> %3058 to i32, !dbg !24
  %3060 = insertelement <2 x bfloat> poison, bfloat %2770, i64 0, !dbg !24
  %3061 = insertelement <2 x bfloat> %3060, bfloat %2771, i64 1, !dbg !24
  %3062 = bitcast <2 x bfloat> %3061 to i32, !dbg !24
  %3063 = insertelement <2 x bfloat> poison, bfloat %2772, i64 0, !dbg !24
  %3064 = insertelement <2 x bfloat> %3063, bfloat %2773, i64 1, !dbg !24
  %3065 = bitcast <2 x bfloat> %3064 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3056, i32 %3059, i32 %3062, i32 %3065, ptr addrspace(1) %3022, i1 %202) #6, !dbg !24
  %3066 = insertelement <2 x bfloat> poison, bfloat %2774, i64 0, !dbg !24
  %3067 = insertelement <2 x bfloat> %3066, bfloat %2775, i64 1, !dbg !24
  %3068 = bitcast <2 x bfloat> %3067 to i32, !dbg !24
  %3069 = insertelement <2 x bfloat> poison, bfloat %2776, i64 0, !dbg !24
  %3070 = insertelement <2 x bfloat> %3069, bfloat %2777, i64 1, !dbg !24
  %3071 = bitcast <2 x bfloat> %3070 to i32, !dbg !24
  %3072 = insertelement <2 x bfloat> poison, bfloat %2778, i64 0, !dbg !24
  %3073 = insertelement <2 x bfloat> %3072, bfloat %2779, i64 1, !dbg !24
  %3074 = bitcast <2 x bfloat> %3073 to i32, !dbg !24
  %3075 = insertelement <2 x bfloat> poison, bfloat %2780, i64 0, !dbg !24
  %3076 = insertelement <2 x bfloat> %3075, bfloat %2781, i64 1, !dbg !24
  %3077 = bitcast <2 x bfloat> %3076 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3068, i32 %3071, i32 %3074, i32 %3077, ptr addrspace(1) %3023, i1 %204) #6, !dbg !24
  %3078 = insertelement <2 x bfloat> poison, bfloat %2782, i64 0, !dbg !24
  %3079 = insertelement <2 x bfloat> %3078, bfloat %2783, i64 1, !dbg !24
  %3080 = bitcast <2 x bfloat> %3079 to i32, !dbg !24
  %3081 = insertelement <2 x bfloat> poison, bfloat %2784, i64 0, !dbg !24
  %3082 = insertelement <2 x bfloat> %3081, bfloat %2785, i64 1, !dbg !24
  %3083 = bitcast <2 x bfloat> %3082 to i32, !dbg !24
  %3084 = insertelement <2 x bfloat> poison, bfloat %2786, i64 0, !dbg !24
  %3085 = insertelement <2 x bfloat> %3084, bfloat %2787, i64 1, !dbg !24
  %3086 = bitcast <2 x bfloat> %3085 to i32, !dbg !24
  %3087 = insertelement <2 x bfloat> poison, bfloat %2788, i64 0, !dbg !24
  %3088 = insertelement <2 x bfloat> %3087, bfloat %2789, i64 1, !dbg !24
  %3089 = bitcast <2 x bfloat> %3088 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3080, i32 %3083, i32 %3086, i32 %3089, ptr addrspace(1) %3024, i1 %206) #6, !dbg !24
  %3090 = insertelement <2 x bfloat> poison, bfloat %2790, i64 0, !dbg !24
  %3091 = insertelement <2 x bfloat> %3090, bfloat %2791, i64 1, !dbg !24
  %3092 = bitcast <2 x bfloat> %3091 to i32, !dbg !24
  %3093 = insertelement <2 x bfloat> poison, bfloat %2792, i64 0, !dbg !24
  %3094 = insertelement <2 x bfloat> %3093, bfloat %2793, i64 1, !dbg !24
  %3095 = bitcast <2 x bfloat> %3094 to i32, !dbg !24
  %3096 = insertelement <2 x bfloat> poison, bfloat %2794, i64 0, !dbg !24
  %3097 = insertelement <2 x bfloat> %3096, bfloat %2795, i64 1, !dbg !24
  %3098 = bitcast <2 x bfloat> %3097 to i32, !dbg !24
  %3099 = insertelement <2 x bfloat> poison, bfloat %2796, i64 0, !dbg !24
  %3100 = insertelement <2 x bfloat> %3099, bfloat %2797, i64 1, !dbg !24
  %3101 = bitcast <2 x bfloat> %3100 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3092, i32 %3095, i32 %3098, i32 %3101, ptr addrspace(1) %3025, i1 %208) #6, !dbg !24
  %3102 = insertelement <2 x bfloat> poison, bfloat %2798, i64 0, !dbg !24
  %3103 = insertelement <2 x bfloat> %3102, bfloat %2799, i64 1, !dbg !24
  %3104 = bitcast <2 x bfloat> %3103 to i32, !dbg !24
  %3105 = insertelement <2 x bfloat> poison, bfloat %2800, i64 0, !dbg !24
  %3106 = insertelement <2 x bfloat> %3105, bfloat %2801, i64 1, !dbg !24
  %3107 = bitcast <2 x bfloat> %3106 to i32, !dbg !24
  %3108 = insertelement <2 x bfloat> poison, bfloat %2802, i64 0, !dbg !24
  %3109 = insertelement <2 x bfloat> %3108, bfloat %2803, i64 1, !dbg !24
  %3110 = bitcast <2 x bfloat> %3109 to i32, !dbg !24
  %3111 = insertelement <2 x bfloat> poison, bfloat %2804, i64 0, !dbg !24
  %3112 = insertelement <2 x bfloat> %3111, bfloat %2805, i64 1, !dbg !24
  %3113 = bitcast <2 x bfloat> %3112 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3104, i32 %3107, i32 %3110, i32 %3113, ptr addrspace(1) %3026, i1 %210) #6, !dbg !24
  %3114 = insertelement <2 x bfloat> poison, bfloat %2806, i64 0, !dbg !24
  %3115 = insertelement <2 x bfloat> %3114, bfloat %2807, i64 1, !dbg !24
  %3116 = bitcast <2 x bfloat> %3115 to i32, !dbg !24
  %3117 = insertelement <2 x bfloat> poison, bfloat %2808, i64 0, !dbg !24
  %3118 = insertelement <2 x bfloat> %3117, bfloat %2809, i64 1, !dbg !24
  %3119 = bitcast <2 x bfloat> %3118 to i32, !dbg !24
  %3120 = insertelement <2 x bfloat> poison, bfloat %2810, i64 0, !dbg !24
  %3121 = insertelement <2 x bfloat> %3120, bfloat %2811, i64 1, !dbg !24
  %3122 = bitcast <2 x bfloat> %3121 to i32, !dbg !24
  %3123 = insertelement <2 x bfloat> poison, bfloat %2812, i64 0, !dbg !24
  %3124 = insertelement <2 x bfloat> %3123, bfloat %2813, i64 1, !dbg !24
  %3125 = bitcast <2 x bfloat> %3124 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3116, i32 %3119, i32 %3122, i32 %3125, ptr addrspace(1) %3027, i1 %212) #6, !dbg !24
  %3126 = insertelement <2 x bfloat> poison, bfloat %2814, i64 0, !dbg !24
  %3127 = insertelement <2 x bfloat> %3126, bfloat %2815, i64 1, !dbg !24
  %3128 = bitcast <2 x bfloat> %3127 to i32, !dbg !24
  %3129 = insertelement <2 x bfloat> poison, bfloat %2816, i64 0, !dbg !24
  %3130 = insertelement <2 x bfloat> %3129, bfloat %2817, i64 1, !dbg !24
  %3131 = bitcast <2 x bfloat> %3130 to i32, !dbg !24
  %3132 = insertelement <2 x bfloat> poison, bfloat %2818, i64 0, !dbg !24
  %3133 = insertelement <2 x bfloat> %3132, bfloat %2819, i64 1, !dbg !24
  %3134 = bitcast <2 x bfloat> %3133 to i32, !dbg !24
  %3135 = insertelement <2 x bfloat> poison, bfloat %2820, i64 0, !dbg !24
  %3136 = insertelement <2 x bfloat> %3135, bfloat %2821, i64 1, !dbg !24
  %3137 = bitcast <2 x bfloat> %3136 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3128, i32 %3131, i32 %3134, i32 %3137, ptr addrspace(1) %3028, i1 %214) #6, !dbg !24
  %3138 = insertelement <2 x bfloat> poison, bfloat %2822, i64 0, !dbg !24
  %3139 = insertelement <2 x bfloat> %3138, bfloat %2823, i64 1, !dbg !24
  %3140 = bitcast <2 x bfloat> %3139 to i32, !dbg !24
  %3141 = insertelement <2 x bfloat> poison, bfloat %2824, i64 0, !dbg !24
  %3142 = insertelement <2 x bfloat> %3141, bfloat %2825, i64 1, !dbg !24
  %3143 = bitcast <2 x bfloat> %3142 to i32, !dbg !24
  %3144 = insertelement <2 x bfloat> poison, bfloat %2826, i64 0, !dbg !24
  %3145 = insertelement <2 x bfloat> %3144, bfloat %2827, i64 1, !dbg !24
  %3146 = bitcast <2 x bfloat> %3145 to i32, !dbg !24
  %3147 = insertelement <2 x bfloat> poison, bfloat %2828, i64 0, !dbg !24
  %3148 = insertelement <2 x bfloat> %3147, bfloat %2829, i64 1, !dbg !24
  %3149 = bitcast <2 x bfloat> %3148 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3140, i32 %3143, i32 %3146, i32 %3149, ptr addrspace(1) %3029, i1 %216) #6, !dbg !24
  %3150 = insertelement <2 x bfloat> poison, bfloat %2830, i64 0, !dbg !24
  %3151 = insertelement <2 x bfloat> %3150, bfloat %2831, i64 1, !dbg !24
  %3152 = bitcast <2 x bfloat> %3151 to i32, !dbg !24
  %3153 = insertelement <2 x bfloat> poison, bfloat %2832, i64 0, !dbg !24
  %3154 = insertelement <2 x bfloat> %3153, bfloat %2833, i64 1, !dbg !24
  %3155 = bitcast <2 x bfloat> %3154 to i32, !dbg !24
  %3156 = insertelement <2 x bfloat> poison, bfloat %2834, i64 0, !dbg !24
  %3157 = insertelement <2 x bfloat> %3156, bfloat %2835, i64 1, !dbg !24
  %3158 = bitcast <2 x bfloat> %3157 to i32, !dbg !24
  %3159 = insertelement <2 x bfloat> poison, bfloat %2836, i64 0, !dbg !24
  %3160 = insertelement <2 x bfloat> %3159, bfloat %2837, i64 1, !dbg !24
  %3161 = bitcast <2 x bfloat> %3160 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3152, i32 %3155, i32 %3158, i32 %3161, ptr addrspace(1) %3030, i1 %218) #6, !dbg !24
  %3162 = insertelement <2 x bfloat> poison, bfloat %2838, i64 0, !dbg !24
  %3163 = insertelement <2 x bfloat> %3162, bfloat %2839, i64 1, !dbg !24
  %3164 = bitcast <2 x bfloat> %3163 to i32, !dbg !24
  %3165 = insertelement <2 x bfloat> poison, bfloat %2840, i64 0, !dbg !24
  %3166 = insertelement <2 x bfloat> %3165, bfloat %2841, i64 1, !dbg !24
  %3167 = bitcast <2 x bfloat> %3166 to i32, !dbg !24
  %3168 = insertelement <2 x bfloat> poison, bfloat %2842, i64 0, !dbg !24
  %3169 = insertelement <2 x bfloat> %3168, bfloat %2843, i64 1, !dbg !24
  %3170 = bitcast <2 x bfloat> %3169 to i32, !dbg !24
  %3171 = insertelement <2 x bfloat> poison, bfloat %2844, i64 0, !dbg !24
  %3172 = insertelement <2 x bfloat> %3171, bfloat %2845, i64 1, !dbg !24
  %3173 = bitcast <2 x bfloat> %3172 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3164, i32 %3167, i32 %3170, i32 %3173, ptr addrspace(1) %3031, i1 %220) #6, !dbg !24
  %3174 = insertelement <2 x bfloat> poison, bfloat %2846, i64 0, !dbg !24
  %3175 = insertelement <2 x bfloat> %3174, bfloat %2847, i64 1, !dbg !24
  %3176 = bitcast <2 x bfloat> %3175 to i32, !dbg !24
  %3177 = insertelement <2 x bfloat> poison, bfloat %2848, i64 0, !dbg !24
  %3178 = insertelement <2 x bfloat> %3177, bfloat %2849, i64 1, !dbg !24
  %3179 = bitcast <2 x bfloat> %3178 to i32, !dbg !24
  %3180 = insertelement <2 x bfloat> poison, bfloat %2850, i64 0, !dbg !24
  %3181 = insertelement <2 x bfloat> %3180, bfloat %2851, i64 1, !dbg !24
  %3182 = bitcast <2 x bfloat> %3181 to i32, !dbg !24
  %3183 = insertelement <2 x bfloat> poison, bfloat %2852, i64 0, !dbg !24
  %3184 = insertelement <2 x bfloat> %3183, bfloat %2853, i64 1, !dbg !24
  %3185 = bitcast <2 x bfloat> %3184 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3176, i32 %3179, i32 %3182, i32 %3185, ptr addrspace(1) %3032, i1 %222) #6, !dbg !24
  %3186 = insertelement <2 x bfloat> poison, bfloat %2854, i64 0, !dbg !24
  %3187 = insertelement <2 x bfloat> %3186, bfloat %2855, i64 1, !dbg !24
  %3188 = bitcast <2 x bfloat> %3187 to i32, !dbg !24
  %3189 = insertelement <2 x bfloat> poison, bfloat %2856, i64 0, !dbg !24
  %3190 = insertelement <2 x bfloat> %3189, bfloat %2857, i64 1, !dbg !24
  %3191 = bitcast <2 x bfloat> %3190 to i32, !dbg !24
  %3192 = insertelement <2 x bfloat> poison, bfloat %2858, i64 0, !dbg !24
  %3193 = insertelement <2 x bfloat> %3192, bfloat %2859, i64 1, !dbg !24
  %3194 = bitcast <2 x bfloat> %3193 to i32, !dbg !24
  %3195 = insertelement <2 x bfloat> poison, bfloat %2860, i64 0, !dbg !24
  %3196 = insertelement <2 x bfloat> %3195, bfloat %2861, i64 1, !dbg !24
  %3197 = bitcast <2 x bfloat> %3196 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3188, i32 %3191, i32 %3194, i32 %3197, ptr addrspace(1) %3033, i1 %224) #6, !dbg !24
  %3198 = insertelement <2 x bfloat> poison, bfloat %2862, i64 0, !dbg !24
  %3199 = insertelement <2 x bfloat> %3198, bfloat %2863, i64 1, !dbg !24
  %3200 = bitcast <2 x bfloat> %3199 to i32, !dbg !24
  %3201 = insertelement <2 x bfloat> poison, bfloat %2864, i64 0, !dbg !24
  %3202 = insertelement <2 x bfloat> %3201, bfloat %2865, i64 1, !dbg !24
  %3203 = bitcast <2 x bfloat> %3202 to i32, !dbg !24
  %3204 = insertelement <2 x bfloat> poison, bfloat %2866, i64 0, !dbg !24
  %3205 = insertelement <2 x bfloat> %3204, bfloat %2867, i64 1, !dbg !24
  %3206 = bitcast <2 x bfloat> %3205 to i32, !dbg !24
  %3207 = insertelement <2 x bfloat> poison, bfloat %2868, i64 0, !dbg !24
  %3208 = insertelement <2 x bfloat> %3207, bfloat %2869, i64 1, !dbg !24
  %3209 = bitcast <2 x bfloat> %3208 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3200, i32 %3203, i32 %3206, i32 %3209, ptr addrspace(1) %3034, i1 %226) #6, !dbg !24
  %3210 = insertelement <2 x bfloat> poison, bfloat %2870, i64 0, !dbg !24
  %3211 = insertelement <2 x bfloat> %3210, bfloat %2871, i64 1, !dbg !24
  %3212 = bitcast <2 x bfloat> %3211 to i32, !dbg !24
  %3213 = insertelement <2 x bfloat> poison, bfloat %2872, i64 0, !dbg !24
  %3214 = insertelement <2 x bfloat> %3213, bfloat %2873, i64 1, !dbg !24
  %3215 = bitcast <2 x bfloat> %3214 to i32, !dbg !24
  %3216 = insertelement <2 x bfloat> poison, bfloat %2874, i64 0, !dbg !24
  %3217 = insertelement <2 x bfloat> %3216, bfloat %2875, i64 1, !dbg !24
  %3218 = bitcast <2 x bfloat> %3217 to i32, !dbg !24
  %3219 = insertelement <2 x bfloat> poison, bfloat %2876, i64 0, !dbg !24
  %3220 = insertelement <2 x bfloat> %3219, bfloat %2877, i64 1, !dbg !24
  %3221 = bitcast <2 x bfloat> %3220 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3212, i32 %3215, i32 %3218, i32 %3221, ptr addrspace(1) %3035, i1 %228) #6, !dbg !24
  %3222 = insertelement <2 x bfloat> poison, bfloat %2878, i64 0, !dbg !24
  %3223 = insertelement <2 x bfloat> %3222, bfloat %2879, i64 1, !dbg !24
  %3224 = bitcast <2 x bfloat> %3223 to i32, !dbg !24
  %3225 = insertelement <2 x bfloat> poison, bfloat %2880, i64 0, !dbg !24
  %3226 = insertelement <2 x bfloat> %3225, bfloat %2881, i64 1, !dbg !24
  %3227 = bitcast <2 x bfloat> %3226 to i32, !dbg !24
  %3228 = insertelement <2 x bfloat> poison, bfloat %2882, i64 0, !dbg !24
  %3229 = insertelement <2 x bfloat> %3228, bfloat %2883, i64 1, !dbg !24
  %3230 = bitcast <2 x bfloat> %3229 to i32, !dbg !24
  %3231 = insertelement <2 x bfloat> poison, bfloat %2884, i64 0, !dbg !24
  %3232 = insertelement <2 x bfloat> %3231, bfloat %2885, i64 1, !dbg !24
  %3233 = bitcast <2 x bfloat> %3232 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3224, i32 %3227, i32 %3230, i32 %3233, ptr addrspace(1) %3036, i1 %230) #6, !dbg !24
  %3234 = insertelement <2 x bfloat> poison, bfloat %2886, i64 0, !dbg !24
  %3235 = insertelement <2 x bfloat> %3234, bfloat %2887, i64 1, !dbg !24
  %3236 = bitcast <2 x bfloat> %3235 to i32, !dbg !24
  %3237 = insertelement <2 x bfloat> poison, bfloat %2888, i64 0, !dbg !24
  %3238 = insertelement <2 x bfloat> %3237, bfloat %2889, i64 1, !dbg !24
  %3239 = bitcast <2 x bfloat> %3238 to i32, !dbg !24
  %3240 = insertelement <2 x bfloat> poison, bfloat %2890, i64 0, !dbg !24
  %3241 = insertelement <2 x bfloat> %3240, bfloat %2891, i64 1, !dbg !24
  %3242 = bitcast <2 x bfloat> %3241 to i32, !dbg !24
  %3243 = insertelement <2 x bfloat> poison, bfloat %2892, i64 0, !dbg !24
  %3244 = insertelement <2 x bfloat> %3243, bfloat %2893, i64 1, !dbg !24
  %3245 = bitcast <2 x bfloat> %3244 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3236, i32 %3239, i32 %3242, i32 %3245, ptr addrspace(1) %3037, i1 %232) #6, !dbg !24
  %3246 = insertelement <2 x bfloat> poison, bfloat %2894, i64 0, !dbg !24
  %3247 = insertelement <2 x bfloat> %3246, bfloat %2895, i64 1, !dbg !24
  %3248 = bitcast <2 x bfloat> %3247 to i32, !dbg !24
  %3249 = insertelement <2 x bfloat> poison, bfloat %2896, i64 0, !dbg !24
  %3250 = insertelement <2 x bfloat> %3249, bfloat %2897, i64 1, !dbg !24
  %3251 = bitcast <2 x bfloat> %3250 to i32, !dbg !24
  %3252 = insertelement <2 x bfloat> poison, bfloat %2898, i64 0, !dbg !24
  %3253 = insertelement <2 x bfloat> %3252, bfloat %2899, i64 1, !dbg !24
  %3254 = bitcast <2 x bfloat> %3253 to i32, !dbg !24
  %3255 = insertelement <2 x bfloat> poison, bfloat %2900, i64 0, !dbg !24
  %3256 = insertelement <2 x bfloat> %3255, bfloat %2901, i64 1, !dbg !24
  %3257 = bitcast <2 x bfloat> %3256 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3248, i32 %3251, i32 %3254, i32 %3257, ptr addrspace(1) %3038, i1 %234) #6, !dbg !24
  %3258 = insertelement <2 x bfloat> poison, bfloat %2902, i64 0, !dbg !24
  %3259 = insertelement <2 x bfloat> %3258, bfloat %2903, i64 1, !dbg !24
  %3260 = bitcast <2 x bfloat> %3259 to i32, !dbg !24
  %3261 = insertelement <2 x bfloat> poison, bfloat %2904, i64 0, !dbg !24
  %3262 = insertelement <2 x bfloat> %3261, bfloat %2905, i64 1, !dbg !24
  %3263 = bitcast <2 x bfloat> %3262 to i32, !dbg !24
  %3264 = insertelement <2 x bfloat> poison, bfloat %2906, i64 0, !dbg !24
  %3265 = insertelement <2 x bfloat> %3264, bfloat %2907, i64 1, !dbg !24
  %3266 = bitcast <2 x bfloat> %3265 to i32, !dbg !24
  %3267 = insertelement <2 x bfloat> poison, bfloat %2908, i64 0, !dbg !24
  %3268 = insertelement <2 x bfloat> %3267, bfloat %2909, i64 1, !dbg !24
  %3269 = bitcast <2 x bfloat> %3268 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3260, i32 %3263, i32 %3266, i32 %3269, ptr addrspace(1) %3039, i1 %236) #6, !dbg !24
  %3270 = insertelement <2 x bfloat> poison, bfloat %2910, i64 0, !dbg !24
  %3271 = insertelement <2 x bfloat> %3270, bfloat %2911, i64 1, !dbg !24
  %3272 = bitcast <2 x bfloat> %3271 to i32, !dbg !24
  %3273 = insertelement <2 x bfloat> poison, bfloat %2912, i64 0, !dbg !24
  %3274 = insertelement <2 x bfloat> %3273, bfloat %2913, i64 1, !dbg !24
  %3275 = bitcast <2 x bfloat> %3274 to i32, !dbg !24
  %3276 = insertelement <2 x bfloat> poison, bfloat %2914, i64 0, !dbg !24
  %3277 = insertelement <2 x bfloat> %3276, bfloat %2915, i64 1, !dbg !24
  %3278 = bitcast <2 x bfloat> %3277 to i32, !dbg !24
  %3279 = insertelement <2 x bfloat> poison, bfloat %2916, i64 0, !dbg !24
  %3280 = insertelement <2 x bfloat> %3279, bfloat %2917, i64 1, !dbg !24
  %3281 = bitcast <2 x bfloat> %3280 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3272, i32 %3275, i32 %3278, i32 %3281, ptr addrspace(1) %3040, i1 %238) #6, !dbg !24
  %3282 = insertelement <2 x bfloat> poison, bfloat %2918, i64 0, !dbg !24
  %3283 = insertelement <2 x bfloat> %3282, bfloat %2919, i64 1, !dbg !24
  %3284 = bitcast <2 x bfloat> %3283 to i32, !dbg !24
  %3285 = insertelement <2 x bfloat> poison, bfloat %2920, i64 0, !dbg !24
  %3286 = insertelement <2 x bfloat> %3285, bfloat %2921, i64 1, !dbg !24
  %3287 = bitcast <2 x bfloat> %3286 to i32, !dbg !24
  %3288 = insertelement <2 x bfloat> poison, bfloat %2922, i64 0, !dbg !24
  %3289 = insertelement <2 x bfloat> %3288, bfloat %2923, i64 1, !dbg !24
  %3290 = bitcast <2 x bfloat> %3289 to i32, !dbg !24
  %3291 = insertelement <2 x bfloat> poison, bfloat %2924, i64 0, !dbg !24
  %3292 = insertelement <2 x bfloat> %3291, bfloat %2925, i64 1, !dbg !24
  %3293 = bitcast <2 x bfloat> %3292 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3284, i32 %3287, i32 %3290, i32 %3293, ptr addrspace(1) %3041, i1 %240) #6, !dbg !24
  %3294 = insertelement <2 x bfloat> poison, bfloat %2926, i64 0, !dbg !24
  %3295 = insertelement <2 x bfloat> %3294, bfloat %2927, i64 1, !dbg !24
  %3296 = bitcast <2 x bfloat> %3295 to i32, !dbg !24
  %3297 = insertelement <2 x bfloat> poison, bfloat %2928, i64 0, !dbg !24
  %3298 = insertelement <2 x bfloat> %3297, bfloat %2929, i64 1, !dbg !24
  %3299 = bitcast <2 x bfloat> %3298 to i32, !dbg !24
  %3300 = insertelement <2 x bfloat> poison, bfloat %2930, i64 0, !dbg !24
  %3301 = insertelement <2 x bfloat> %3300, bfloat %2931, i64 1, !dbg !24
  %3302 = bitcast <2 x bfloat> %3301 to i32, !dbg !24
  %3303 = insertelement <2 x bfloat> poison, bfloat %2932, i64 0, !dbg !24
  %3304 = insertelement <2 x bfloat> %3303, bfloat %2933, i64 1, !dbg !24
  %3305 = bitcast <2 x bfloat> %3304 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3296, i32 %3299, i32 %3302, i32 %3305, ptr addrspace(1) %3042, i1 %242) #6, !dbg !24
  %3306 = insertelement <2 x bfloat> poison, bfloat %2934, i64 0, !dbg !24
  %3307 = insertelement <2 x bfloat> %3306, bfloat %2935, i64 1, !dbg !24
  %3308 = bitcast <2 x bfloat> %3307 to i32, !dbg !24
  %3309 = insertelement <2 x bfloat> poison, bfloat %2936, i64 0, !dbg !24
  %3310 = insertelement <2 x bfloat> %3309, bfloat %2937, i64 1, !dbg !24
  %3311 = bitcast <2 x bfloat> %3310 to i32, !dbg !24
  %3312 = insertelement <2 x bfloat> poison, bfloat %2938, i64 0, !dbg !24
  %3313 = insertelement <2 x bfloat> %3312, bfloat %2939, i64 1, !dbg !24
  %3314 = bitcast <2 x bfloat> %3313 to i32, !dbg !24
  %3315 = insertelement <2 x bfloat> poison, bfloat %2940, i64 0, !dbg !24
  %3316 = insertelement <2 x bfloat> %3315, bfloat %2941, i64 1, !dbg !24
  %3317 = bitcast <2 x bfloat> %3316 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3308, i32 %3311, i32 %3314, i32 %3317, ptr addrspace(1) %3043, i1 %244) #6, !dbg !24
  %3318 = insertelement <2 x bfloat> poison, bfloat %2942, i64 0, !dbg !24
  %3319 = insertelement <2 x bfloat> %3318, bfloat %2943, i64 1, !dbg !24
  %3320 = bitcast <2 x bfloat> %3319 to i32, !dbg !24
  %3321 = insertelement <2 x bfloat> poison, bfloat %2944, i64 0, !dbg !24
  %3322 = insertelement <2 x bfloat> %3321, bfloat %2945, i64 1, !dbg !24
  %3323 = bitcast <2 x bfloat> %3322 to i32, !dbg !24
  %3324 = insertelement <2 x bfloat> poison, bfloat %2946, i64 0, !dbg !24
  %3325 = insertelement <2 x bfloat> %3324, bfloat %2947, i64 1, !dbg !24
  %3326 = bitcast <2 x bfloat> %3325 to i32, !dbg !24
  %3327 = insertelement <2 x bfloat> poison, bfloat %2948, i64 0, !dbg !24
  %3328 = insertelement <2 x bfloat> %3327, bfloat %2949, i64 1, !dbg !24
  %3329 = bitcast <2 x bfloat> %3328 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3320, i32 %3323, i32 %3326, i32 %3329, ptr addrspace(1) %3044, i1 %246) #6, !dbg !24
  %3330 = insertelement <2 x bfloat> poison, bfloat %2950, i64 0, !dbg !24
  %3331 = insertelement <2 x bfloat> %3330, bfloat %2951, i64 1, !dbg !24
  %3332 = bitcast <2 x bfloat> %3331 to i32, !dbg !24
  %3333 = insertelement <2 x bfloat> poison, bfloat %2952, i64 0, !dbg !24
  %3334 = insertelement <2 x bfloat> %3333, bfloat %2953, i64 1, !dbg !24
  %3335 = bitcast <2 x bfloat> %3334 to i32, !dbg !24
  %3336 = insertelement <2 x bfloat> poison, bfloat %2954, i64 0, !dbg !24
  %3337 = insertelement <2 x bfloat> %3336, bfloat %2955, i64 1, !dbg !24
  %3338 = bitcast <2 x bfloat> %3337 to i32, !dbg !24
  %3339 = insertelement <2 x bfloat> poison, bfloat %2956, i64 0, !dbg !24
  %3340 = insertelement <2 x bfloat> %3339, bfloat %2957, i64 1, !dbg !24
  %3341 = bitcast <2 x bfloat> %3340 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3332, i32 %3335, i32 %3338, i32 %3341, ptr addrspace(1) %3045, i1 %248) #6, !dbg !24
  %3342 = insertelement <2 x bfloat> poison, bfloat %2958, i64 0, !dbg !24
  %3343 = insertelement <2 x bfloat> %3342, bfloat %2959, i64 1, !dbg !24
  %3344 = bitcast <2 x bfloat> %3343 to i32, !dbg !24
  %3345 = insertelement <2 x bfloat> poison, bfloat %2960, i64 0, !dbg !24
  %3346 = insertelement <2 x bfloat> %3345, bfloat %2961, i64 1, !dbg !24
  %3347 = bitcast <2 x bfloat> %3346 to i32, !dbg !24
  %3348 = insertelement <2 x bfloat> poison, bfloat %2962, i64 0, !dbg !24
  %3349 = insertelement <2 x bfloat> %3348, bfloat %2963, i64 1, !dbg !24
  %3350 = bitcast <2 x bfloat> %3349 to i32, !dbg !24
  %3351 = insertelement <2 x bfloat> poison, bfloat %2964, i64 0, !dbg !24
  %3352 = insertelement <2 x bfloat> %3351, bfloat %2965, i64 1, !dbg !24
  %3353 = bitcast <2 x bfloat> %3352 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3344, i32 %3347, i32 %3350, i32 %3353, ptr addrspace(1) %3046, i1 %250) #6, !dbg !24
  %3354 = insertelement <2 x bfloat> poison, bfloat %2966, i64 0, !dbg !24
  %3355 = insertelement <2 x bfloat> %3354, bfloat %2967, i64 1, !dbg !24
  %3356 = bitcast <2 x bfloat> %3355 to i32, !dbg !24
  %3357 = insertelement <2 x bfloat> poison, bfloat %2968, i64 0, !dbg !24
  %3358 = insertelement <2 x bfloat> %3357, bfloat %2969, i64 1, !dbg !24
  %3359 = bitcast <2 x bfloat> %3358 to i32, !dbg !24
  %3360 = insertelement <2 x bfloat> poison, bfloat %2970, i64 0, !dbg !24
  %3361 = insertelement <2 x bfloat> %3360, bfloat %2971, i64 1, !dbg !24
  %3362 = bitcast <2 x bfloat> %3361 to i32, !dbg !24
  %3363 = insertelement <2 x bfloat> poison, bfloat %2972, i64 0, !dbg !24
  %3364 = insertelement <2 x bfloat> %3363, bfloat %2973, i64 1, !dbg !24
  %3365 = bitcast <2 x bfloat> %3364 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3356, i32 %3359, i32 %3362, i32 %3365, ptr addrspace(1) %3047, i1 %252) #6, !dbg !24
  %3366 = insertelement <2 x bfloat> poison, bfloat %2974, i64 0, !dbg !24
  %3367 = insertelement <2 x bfloat> %3366, bfloat %2975, i64 1, !dbg !24
  %3368 = bitcast <2 x bfloat> %3367 to i32, !dbg !24
  %3369 = insertelement <2 x bfloat> poison, bfloat %2976, i64 0, !dbg !24
  %3370 = insertelement <2 x bfloat> %3369, bfloat %2977, i64 1, !dbg !24
  %3371 = bitcast <2 x bfloat> %3370 to i32, !dbg !24
  %3372 = insertelement <2 x bfloat> poison, bfloat %2978, i64 0, !dbg !24
  %3373 = insertelement <2 x bfloat> %3372, bfloat %2979, i64 1, !dbg !24
  %3374 = bitcast <2 x bfloat> %3373 to i32, !dbg !24
  %3375 = insertelement <2 x bfloat> poison, bfloat %2980, i64 0, !dbg !24
  %3376 = insertelement <2 x bfloat> %3375, bfloat %2981, i64 1, !dbg !24
  %3377 = bitcast <2 x bfloat> %3376 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3368, i32 %3371, i32 %3374, i32 %3377, ptr addrspace(1) %3048, i1 %254) #6, !dbg !24
  %3378 = insertelement <2 x bfloat> poison, bfloat %2982, i64 0, !dbg !24
  %3379 = insertelement <2 x bfloat> %3378, bfloat %2983, i64 1, !dbg !24
  %3380 = bitcast <2 x bfloat> %3379 to i32, !dbg !24
  %3381 = insertelement <2 x bfloat> poison, bfloat %2984, i64 0, !dbg !24
  %3382 = insertelement <2 x bfloat> %3381, bfloat %2985, i64 1, !dbg !24
  %3383 = bitcast <2 x bfloat> %3382 to i32, !dbg !24
  %3384 = insertelement <2 x bfloat> poison, bfloat %2986, i64 0, !dbg !24
  %3385 = insertelement <2 x bfloat> %3384, bfloat %2987, i64 1, !dbg !24
  %3386 = bitcast <2 x bfloat> %3385 to i32, !dbg !24
  %3387 = insertelement <2 x bfloat> poison, bfloat %2988, i64 0, !dbg !24
  %3388 = insertelement <2 x bfloat> %3387, bfloat %2989, i64 1, !dbg !24
  %3389 = bitcast <2 x bfloat> %3388 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3380, i32 %3383, i32 %3386, i32 %3389, ptr addrspace(1) %3049, i1 %256) #6, !dbg !24
  %3390 = insertelement <2 x bfloat> poison, bfloat %2990, i64 0, !dbg !24
  %3391 = insertelement <2 x bfloat> %3390, bfloat %2991, i64 1, !dbg !24
  %3392 = bitcast <2 x bfloat> %3391 to i32, !dbg !24
  %3393 = insertelement <2 x bfloat> poison, bfloat %2992, i64 0, !dbg !24
  %3394 = insertelement <2 x bfloat> %3393, bfloat %2993, i64 1, !dbg !24
  %3395 = bitcast <2 x bfloat> %3394 to i32, !dbg !24
  %3396 = insertelement <2 x bfloat> poison, bfloat %2994, i64 0, !dbg !24
  %3397 = insertelement <2 x bfloat> %3396, bfloat %2995, i64 1, !dbg !24
  %3398 = bitcast <2 x bfloat> %3397 to i32, !dbg !24
  %3399 = insertelement <2 x bfloat> poison, bfloat %2996, i64 0, !dbg !24
  %3400 = insertelement <2 x bfloat> %3399, bfloat %2997, i64 1, !dbg !24
  %3401 = bitcast <2 x bfloat> %3400 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3392, i32 %3395, i32 %3398, i32 %3401, ptr addrspace(1) %3050, i1 %258) #6, !dbg !24
  %3402 = insertelement <2 x bfloat> poison, bfloat %2998, i64 0, !dbg !24
  %3403 = insertelement <2 x bfloat> %3402, bfloat %2999, i64 1, !dbg !24
  %3404 = bitcast <2 x bfloat> %3403 to i32, !dbg !24
  %3405 = insertelement <2 x bfloat> poison, bfloat %3000, i64 0, !dbg !24
  %3406 = insertelement <2 x bfloat> %3405, bfloat %3001, i64 1, !dbg !24
  %3407 = bitcast <2 x bfloat> %3406 to i32, !dbg !24
  %3408 = insertelement <2 x bfloat> poison, bfloat %3002, i64 0, !dbg !24
  %3409 = insertelement <2 x bfloat> %3408, bfloat %3003, i64 1, !dbg !24
  %3410 = bitcast <2 x bfloat> %3409 to i32, !dbg !24
  %3411 = insertelement <2 x bfloat> poison, bfloat %3004, i64 0, !dbg !24
  %3412 = insertelement <2 x bfloat> %3411, bfloat %3005, i64 1, !dbg !24
  %3413 = bitcast <2 x bfloat> %3412 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3404, i32 %3407, i32 %3410, i32 %3413, ptr addrspace(1) %3051, i1 %260) #6, !dbg !24
  %3414 = insertelement <2 x bfloat> poison, bfloat %3006, i64 0, !dbg !24
  %3415 = insertelement <2 x bfloat> %3414, bfloat %3007, i64 1, !dbg !24
  %3416 = bitcast <2 x bfloat> %3415 to i32, !dbg !24
  %3417 = insertelement <2 x bfloat> poison, bfloat %3008, i64 0, !dbg !24
  %3418 = insertelement <2 x bfloat> %3417, bfloat %3009, i64 1, !dbg !24
  %3419 = bitcast <2 x bfloat> %3418 to i32, !dbg !24
  %3420 = insertelement <2 x bfloat> poison, bfloat %3010, i64 0, !dbg !24
  %3421 = insertelement <2 x bfloat> %3420, bfloat %3011, i64 1, !dbg !24
  %3422 = bitcast <2 x bfloat> %3421 to i32, !dbg !24
  %3423 = insertelement <2 x bfloat> poison, bfloat %3012, i64 0, !dbg !24
  %3424 = insertelement <2 x bfloat> %3423, bfloat %3013, i64 1, !dbg !24
  %3425 = bitcast <2 x bfloat> %3424 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3416, i32 %3419, i32 %3422, i32 %3425, ptr addrspace(1) %3052, i1 %262) #6, !dbg !24
  %3426 = insertelement <2 x bfloat> poison, bfloat %3014, i64 0, !dbg !24
  %3427 = insertelement <2 x bfloat> %3426, bfloat %3015, i64 1, !dbg !24
  %3428 = bitcast <2 x bfloat> %3427 to i32, !dbg !24
  %3429 = insertelement <2 x bfloat> poison, bfloat %3016, i64 0, !dbg !24
  %3430 = insertelement <2 x bfloat> %3429, bfloat %3017, i64 1, !dbg !24
  %3431 = bitcast <2 x bfloat> %3430 to i32, !dbg !24
  %3432 = insertelement <2 x bfloat> poison, bfloat %3018, i64 0, !dbg !24
  %3433 = insertelement <2 x bfloat> %3432, bfloat %3019, i64 1, !dbg !24
  %3434 = bitcast <2 x bfloat> %3433 to i32, !dbg !24
  %3435 = insertelement <2 x bfloat> poison, bfloat %3020, i64 0, !dbg !24
  %3436 = insertelement <2 x bfloat> %3435, bfloat %3021, i64 1, !dbg !24
  %3437 = bitcast <2 x bfloat> %3436 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %3428, i32 %3431, i32 %3434, i32 %3437, ptr addrspace(1) %3053, i1 %264) #6, !dbg !24
  %3438 = getelementptr float, ptr addrspace(1) %2, i64 %2477, !dbg !25
  %3439 = icmp slt i64 %2477, 49152, !dbg !25
  %3440 = and i1 %13, %3439, !dbg !25
  %3441 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !25
  store float %2478, ptr addrspace(3) %3441, align 4, !dbg !25
  %3442 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  store float %2479, ptr addrspace(3) %3442, align 4, !dbg !25
  %3443 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  store float %2480, ptr addrspace(3) %3443, align 4, !dbg !25
  %3444 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !25
  store float %2481, ptr addrspace(3) %3444, align 4, !dbg !25
  %3445 = extractelement <4 x i32> %19, i64 3, !dbg !25
  %3446 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3445, !dbg !25
  store float %2482, ptr addrspace(3) %3446, align 4, !dbg !25
  %3447 = extractelement <4 x i32> %19, i64 2, !dbg !25
  %3448 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3447, !dbg !25
  store float %2483, ptr addrspace(3) %3448, align 4, !dbg !25
  %3449 = extractelement <4 x i32> %19, i64 1, !dbg !25
  %3450 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3449, !dbg !25
  store float %2484, ptr addrspace(3) %3450, align 4, !dbg !25
  %3451 = extractelement <4 x i32> %19, i64 0, !dbg !25
  %3452 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3451, !dbg !25
  store float %2485, ptr addrspace(3) %3452, align 4, !dbg !25
  %3453 = extractelement <8 x i32> %22, i64 7, !dbg !25
  %3454 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3453, !dbg !25
  store float %2486, ptr addrspace(3) %3454, align 4, !dbg !25
  %3455 = extractelement <8 x i32> %22, i64 6, !dbg !25
  %3456 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3455, !dbg !25
  store float %2487, ptr addrspace(3) %3456, align 4, !dbg !25
  %3457 = extractelement <8 x i32> %22, i64 5, !dbg !25
  %3458 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3457, !dbg !25
  store float %2488, ptr addrspace(3) %3458, align 4, !dbg !25
  %3459 = extractelement <8 x i32> %22, i64 4, !dbg !25
  %3460 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3459, !dbg !25
  store float %2489, ptr addrspace(3) %3460, align 4, !dbg !25
  %3461 = extractelement <8 x i32> %22, i64 3, !dbg !25
  %3462 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3461, !dbg !25
  store float %2490, ptr addrspace(3) %3462, align 4, !dbg !25
  %3463 = extractelement <8 x i32> %22, i64 2, !dbg !25
  %3464 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3463, !dbg !25
  store float %2491, ptr addrspace(3) %3464, align 4, !dbg !25
  %3465 = extractelement <8 x i32> %22, i64 1, !dbg !25
  %3466 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3465, !dbg !25
  store float %2492, ptr addrspace(3) %3466, align 4, !dbg !25
  %3467 = extractelement <8 x i32> %22, i64 0, !dbg !25
  %3468 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3467, !dbg !25
  store float %2493, ptr addrspace(3) %3468, align 4, !dbg !25
  %3469 = extractelement <16 x i32> %26, i64 15, !dbg !25
  %3470 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3469, !dbg !25
  store float %2494, ptr addrspace(3) %3470, align 4, !dbg !25
  %3471 = extractelement <16 x i32> %26, i64 14, !dbg !25
  %3472 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3471, !dbg !25
  store float %2495, ptr addrspace(3) %3472, align 4, !dbg !25
  %3473 = extractelement <16 x i32> %26, i64 13, !dbg !25
  %3474 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3473, !dbg !25
  store float %2496, ptr addrspace(3) %3474, align 4, !dbg !25
  %3475 = extractelement <16 x i32> %26, i64 12, !dbg !25
  %3476 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3475, !dbg !25
  store float %2497, ptr addrspace(3) %3476, align 4, !dbg !25
  %3477 = extractelement <16 x i32> %26, i64 11, !dbg !25
  %3478 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3477, !dbg !25
  store float %2498, ptr addrspace(3) %3478, align 4, !dbg !25
  %3479 = extractelement <16 x i32> %26, i64 10, !dbg !25
  %3480 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3479, !dbg !25
  store float %2499, ptr addrspace(3) %3480, align 4, !dbg !25
  %3481 = extractelement <16 x i32> %26, i64 9, !dbg !25
  %3482 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3481, !dbg !25
  store float %2500, ptr addrspace(3) %3482, align 4, !dbg !25
  %3483 = extractelement <16 x i32> %26, i64 8, !dbg !25
  %3484 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3483, !dbg !25
  store float %2501, ptr addrspace(3) %3484, align 4, !dbg !25
  %3485 = extractelement <16 x i32> %26, i64 7, !dbg !25
  %3486 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3485, !dbg !25
  store float %2502, ptr addrspace(3) %3486, align 4, !dbg !25
  %3487 = extractelement <16 x i32> %26, i64 6, !dbg !25
  %3488 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3487, !dbg !25
  store float %2503, ptr addrspace(3) %3488, align 4, !dbg !25
  %3489 = extractelement <16 x i32> %26, i64 5, !dbg !25
  %3490 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3489, !dbg !25
  store float %2504, ptr addrspace(3) %3490, align 4, !dbg !25
  %3491 = extractelement <16 x i32> %26, i64 4, !dbg !25
  %3492 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3491, !dbg !25
  store float %2505, ptr addrspace(3) %3492, align 4, !dbg !25
  %3493 = extractelement <16 x i32> %26, i64 3, !dbg !25
  %3494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3493, !dbg !25
  store float %2506, ptr addrspace(3) %3494, align 4, !dbg !25
  %3495 = extractelement <16 x i32> %26, i64 2, !dbg !25
  %3496 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3495, !dbg !25
  store float %2507, ptr addrspace(3) %3496, align 4, !dbg !25
  %3497 = extractelement <16 x i32> %26, i64 1, !dbg !25
  %3498 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3497, !dbg !25
  store float %2508, ptr addrspace(3) %3498, align 4, !dbg !25
  %3499 = extractelement <16 x i32> %26, i64 0, !dbg !25
  %3500 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %3499, !dbg !25
  store float %2509, ptr addrspace(3) %3500, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %3501 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %2475, !dbg !25
  %.extract = load i32, ptr addrspace(3) %3501, align 8, !dbg !25
  %3502 = getelementptr inbounds nuw i8, ptr addrspace(3) %3501, i32 4, !dbg !25
  %.extract2 = load i32, ptr addrspace(3) %3502, align 4, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %3438, i1 %3440) #6, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="32" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "l2norm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "l2norm_fwd_kernel", linkageName: "l2norm_fwd_kernel", scope: !1, file: !1, line: 87, type: !6, scopeLine: 87, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 98, column: 24, scope: !5)
!9 = !DILocation(line: 99, column: 54, scope: !5)
!10 = !DILocation(line: 103, column: 18, scope: !5)
!11 = !DILocation(line: 103, column: 49, scope: !5)
!12 = !DILocation(line: 104, column: 38, scope: !5)
!13 = !DILocation(line: 260, column: 15, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !5, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!16 = !DILocation(line: 104, column: 43, scope: !5)
!17 = !DILocation(line: 290, column: 36, scope: !14, inlinedAt: !16)
!18 = !DILocation(line: 104, column: 48, scope: !5)
!19 = !DILocation(line: 104, column: 25, scope: !5)
!20 = !DILocation(line: 99, column: 72, scope: !5)
!21 = !DILocation(line: 104, column: 17, scope: !5)
!22 = !DILocation(line: 105, column: 16, scope: !5)
!23 = !DILocation(line: 107, column: 25, scope: !5)
!24 = !DILocation(line: 107, column: 18, scope: !5)
!25 = !DILocation(line: 108, column: 21, scope: !5)
!26 = !DILocation(line: 108, column: 4, scope: !5)
