; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @layer_norm_gated_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = shl nuw nsw i32 %10, 3, !dbg !9
  %12 = and i32 %11, 120, !dbg !9
  %13 = shl i32 %9, 5, !dbg !10
  %14 = sext i32 %6 to i64, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !11
  %16 = lshr i32 %10, 4, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = or disjoint i32 %17, 8, !dbg !12
  %19 = or disjoint i32 %17, 16, !dbg !12
  %20 = or disjoint i32 %17, 24, !dbg !12
  %21 = zext nneg i32 %17 to i64, !dbg !12
  %22 = zext nneg i32 %18 to i64, !dbg !12
  %23 = zext nneg i32 %19 to i64, !dbg !12
  %24 = zext nneg i32 %20 to i64, !dbg !12
  %25 = or disjoint i64 %21, %15, !dbg !12
  %26 = or disjoint i64 %22, %15, !dbg !12
  %27 = or disjoint i64 %23, %15, !dbg !12
  %28 = or disjoint i64 %24, %15, !dbg !12
  %29 = shl nsw i64 %25, 7, !dbg !12
  %30 = shl nsw i64 %26, 7, !dbg !12
  %31 = shl nsw i64 %27, 7, !dbg !12
  %32 = shl nsw i64 %28, 7, !dbg !12
  %33 = zext nneg i32 %12 to i64, !dbg !12
  %34 = or disjoint i64 %29, %33, !dbg !12
  %35 = or disjoint i64 %30, %33, !dbg !12
  %36 = or disjoint i64 %31, %33, !dbg !12
  %37 = or disjoint i64 %32, %33, !dbg !12
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !12
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !12
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !12
  %41 = getelementptr bfloat, ptr addrspace(1) %0, i64 %37, !dbg !12
  %42 = icmp sgt i32 %13, -1, !dbg !12
  %43 = icmp slt i64 %25, %14, !dbg !12
  %44 = icmp slt i64 %26, %14, !dbg !12
  %45 = icmp slt i64 %27, %14, !dbg !12
  %46 = icmp slt i64 %28, %14, !dbg !12
  %47 = and i1 %42, %43, !dbg !12
  %48 = and i1 %42, %44, !dbg !12
  %49 = and i1 %42, %45, !dbg !12
  %50 = and i1 %42, %46, !dbg !12
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %47) #6, !dbg !12
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !12
  %53 = bitcast i32 %52 to <2 x bfloat>, !dbg !12
  %54 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !12
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !12
  %56 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !12
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !12
  %58 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !12
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !12
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %48) #6, !dbg !12
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !12
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !12
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !12
  %64 = bitcast i32 %63 to <2 x bfloat>, !dbg !12
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !12
  %66 = bitcast i32 %65 to <2 x bfloat>, !dbg !12
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !12
  %68 = bitcast i32 %67 to <2 x bfloat>, !dbg !12
  %69 = extractelement <2 x bfloat> %62, i64 0, !dbg !12
  %70 = extractelement <2 x bfloat> %62, i64 1, !dbg !12
  %71 = extractelement <2 x bfloat> %64, i64 0, !dbg !12
  %72 = extractelement <2 x bfloat> %64, i64 1, !dbg !12
  %73 = extractelement <2 x bfloat> %66, i64 0, !dbg !12
  %74 = extractelement <2 x bfloat> %66, i64 1, !dbg !12
  %75 = extractelement <2 x bfloat> %68, i64 0, !dbg !12
  %76 = extractelement <2 x bfloat> %68, i64 1, !dbg !12
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %49) #6, !dbg !12
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !12
  %79 = bitcast i32 %78 to <2 x bfloat>, !dbg !12
  %80 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !12
  %81 = bitcast i32 %80 to <2 x bfloat>, !dbg !12
  %82 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !12
  %83 = bitcast i32 %82 to <2 x bfloat>, !dbg !12
  %84 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !12
  %85 = bitcast i32 %84 to <2 x bfloat>, !dbg !12
  %86 = extractelement <2 x bfloat> %79, i64 0, !dbg !12
  %87 = extractelement <2 x bfloat> %79, i64 1, !dbg !12
  %88 = extractelement <2 x bfloat> %81, i64 0, !dbg !12
  %89 = extractelement <2 x bfloat> %81, i64 1, !dbg !12
  %90 = extractelement <2 x bfloat> %83, i64 0, !dbg !12
  %91 = extractelement <2 x bfloat> %83, i64 1, !dbg !12
  %92 = extractelement <2 x bfloat> %85, i64 0, !dbg !12
  %93 = extractelement <2 x bfloat> %85, i64 1, !dbg !12
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %50) #6, !dbg !12
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !12
  %96 = bitcast i32 %95 to <2 x bfloat>, !dbg !12
  %97 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !12
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !12
  %99 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !12
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !12
  %101 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !12
  %102 = bitcast i32 %101 to <2 x bfloat>, !dbg !12
  %103 = extractelement <2 x bfloat> %96, i64 0, !dbg !12
  %104 = extractelement <2 x bfloat> %96, i64 1, !dbg !12
  %105 = extractelement <2 x bfloat> %98, i64 0, !dbg !12
  %106 = extractelement <2 x bfloat> %98, i64 1, !dbg !12
  %107 = extractelement <2 x bfloat> %100, i64 0, !dbg !12
  %108 = extractelement <2 x bfloat> %100, i64 1, !dbg !12
  %109 = extractelement <2 x bfloat> %102, i64 0, !dbg !12
  %110 = extractelement <2 x bfloat> %102, i64 1, !dbg !12
  %111 = fpext <2 x bfloat> %53 to <2 x float>, !dbg !13
  %112 = fpext <2 x bfloat> %55 to <2 x float>, !dbg !13
  %113 = fpext <2 x bfloat> %57 to <2 x float>, !dbg !13
  %114 = fpext <2 x bfloat> %59 to <2 x float>, !dbg !13
  %115 = fpext bfloat %69 to float, !dbg !13
  %116 = fpext bfloat %70 to float, !dbg !13
  %117 = fpext bfloat %71 to float, !dbg !13
  %118 = fpext bfloat %72 to float, !dbg !13
  %119 = fpext bfloat %73 to float, !dbg !13
  %120 = fpext bfloat %74 to float, !dbg !13
  %121 = fpext bfloat %75 to float, !dbg !13
  %122 = fpext bfloat %76 to float, !dbg !13
  %123 = fpext bfloat %86 to float, !dbg !13
  %124 = fpext bfloat %87 to float, !dbg !13
  %125 = fpext bfloat %88 to float, !dbg !13
  %126 = fpext bfloat %89 to float, !dbg !13
  %127 = fpext bfloat %90 to float, !dbg !13
  %128 = fpext bfloat %91 to float, !dbg !13
  %129 = fpext bfloat %92 to float, !dbg !13
  %130 = fpext bfloat %93 to float, !dbg !13
  %131 = fpext bfloat %103 to float, !dbg !13
  %132 = fpext bfloat %104 to float, !dbg !13
  %133 = fpext bfloat %105 to float, !dbg !13
  %134 = fpext bfloat %106 to float, !dbg !13
  %135 = fpext bfloat %107 to float, !dbg !13
  %136 = fpext bfloat %108 to float, !dbg !13
  %137 = fpext bfloat %109 to float, !dbg !13
  %138 = fpext bfloat %110 to float, !dbg !13
  %139 = fmul <2 x float> %111, %111, !dbg !14
  %140 = fmul <2 x float> %111, %111, !dbg !14
  %141 = fmul <2 x float> %112, %112, !dbg !14
  %142 = fmul <2 x float> %112, %112, !dbg !14
  %143 = fmul <2 x float> %113, %113, !dbg !14
  %144 = fmul <2 x float> %113, %113, !dbg !14
  %145 = fmul <2 x float> %114, %114, !dbg !14
  %146 = fmul <2 x float> %114, %114, !dbg !14
  %147 = fmul float %115, %115, !dbg !14
  %148 = fmul float %116, %116, !dbg !14
  %149 = fmul float %117, %117, !dbg !14
  %150 = fmul float %118, %118, !dbg !14
  %151 = fmul float %119, %119, !dbg !14
  %152 = fmul float %120, %120, !dbg !14
  %153 = fmul float %121, %121, !dbg !14
  %154 = fmul float %122, %122, !dbg !14
  %155 = fmul float %123, %123, !dbg !14
  %156 = fmul float %124, %124, !dbg !14
  %157 = fmul float %125, %125, !dbg !14
  %158 = fmul float %126, %126, !dbg !14
  %159 = fmul float %127, %127, !dbg !14
  %160 = fmul float %128, %128, !dbg !14
  %161 = fmul float %129, %129, !dbg !14
  %162 = fmul float %130, %130, !dbg !14
  %163 = fmul float %131, %131, !dbg !14
  %164 = fmul float %132, %132, !dbg !14
  %165 = fmul float %133, %133, !dbg !14
  %166 = fmul float %134, %134, !dbg !14
  %167 = fmul float %135, %135, !dbg !14
  %168 = fmul float %136, %136, !dbg !14
  %169 = fmul float %137, %137, !dbg !14
  %170 = fmul float %138, %138, !dbg !14
  %shift = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %171 = fadd <2 x float> %139, %shift, !dbg !15
  %172 = fadd <2 x float> %141, %171, !dbg !15
  %shift26 = shufflevector <2 x float> %142, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %173 = fadd <2 x float> %shift26, %172, !dbg !15
  %174 = fadd <2 x float> %143, %173, !dbg !15
  %shift27 = shufflevector <2 x float> %144, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %175 = fadd <2 x float> %shift27, %174, !dbg !15
  %176 = fadd <2 x float> %145, %175, !dbg !15
  %shift28 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %177 = fadd <2 x float> %shift28, %176, !dbg !15
  %178 = extractelement <2 x float> %177, i64 0, !dbg !15
  %179 = fadd float %147, %148, !dbg !15
  %180 = fadd float %149, %179, !dbg !15
  %181 = fadd float %150, %180, !dbg !15
  %182 = fadd float %151, %181, !dbg !15
  %183 = fadd float %152, %182, !dbg !15
  %184 = fadd float %153, %183, !dbg !15
  %185 = fadd float %154, %184, !dbg !15
  %186 = fadd float %155, %156, !dbg !15
  %187 = fadd float %157, %186, !dbg !15
  %188 = fadd float %158, %187, !dbg !15
  %189 = fadd float %159, %188, !dbg !15
  %190 = fadd float %160, %189, !dbg !15
  %191 = fadd float %161, %190, !dbg !15
  %192 = fadd float %162, %191, !dbg !15
  %193 = fadd float %163, %164, !dbg !15
  %194 = fadd float %165, %193, !dbg !15
  %195 = fadd float %166, %194, !dbg !15
  %196 = fadd float %167, %195, !dbg !15
  %197 = fadd float %168, %196, !dbg !15
  %198 = fadd float %169, %197, !dbg !15
  %199 = fadd float %170, %198, !dbg !15
  %200 = bitcast float %178 to i32, !dbg !19
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 8, i32 31), !dbg !19
  %202 = bitcast i32 %201 to float, !dbg !19
  %203 = fadd float %178, %202, !dbg !15
  %204 = bitcast float %203 to i32, !dbg !19
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !19
  %206 = bitcast i32 %205 to float, !dbg !19
  %207 = fadd float %203, %206, !dbg !15
  %208 = bitcast float %207 to i32, !dbg !19
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !19
  %210 = bitcast i32 %209 to float, !dbg !19
  %211 = fadd float %207, %210, !dbg !15
  %212 = bitcast float %211 to i32, !dbg !19
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !19
  %214 = bitcast i32 %213 to float, !dbg !19
  %215 = fadd float %211, %214, !dbg !15
  %216 = bitcast float %185 to i32, !dbg !19
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 8, i32 31), !dbg !19
  %218 = bitcast i32 %217 to float, !dbg !19
  %219 = fadd float %185, %218, !dbg !15
  %220 = bitcast float %219 to i32, !dbg !19
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !19
  %222 = bitcast i32 %221 to float, !dbg !19
  %223 = fadd float %219, %222, !dbg !15
  %224 = bitcast float %223 to i32, !dbg !19
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !19
  %226 = bitcast i32 %225 to float, !dbg !19
  %227 = fadd float %223, %226, !dbg !15
  %228 = bitcast float %227 to i32, !dbg !19
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !19
  %230 = bitcast i32 %229 to float, !dbg !19
  %231 = fadd float %227, %230, !dbg !15
  %232 = bitcast float %192 to i32, !dbg !19
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !19
  %234 = bitcast i32 %233 to float, !dbg !19
  %235 = fadd float %192, %234, !dbg !15
  %236 = bitcast float %235 to i32, !dbg !19
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !19
  %238 = bitcast i32 %237 to float, !dbg !19
  %239 = fadd float %235, %238, !dbg !15
  %240 = bitcast float %239 to i32, !dbg !19
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !19
  %242 = bitcast i32 %241 to float, !dbg !19
  %243 = fadd float %239, %242, !dbg !15
  %244 = bitcast float %243 to i32, !dbg !19
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 1, i32 31), !dbg !19
  %246 = bitcast i32 %245 to float, !dbg !19
  %247 = fadd float %243, %246, !dbg !15
  %248 = bitcast float %199 to i32, !dbg !19
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !19
  %250 = bitcast i32 %249 to float, !dbg !19
  %251 = fadd float %199, %250, !dbg !15
  %252 = bitcast float %251 to i32, !dbg !19
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !19
  %254 = bitcast i32 %253 to float, !dbg !19
  %255 = fadd float %251, %254, !dbg !15
  %256 = bitcast float %255 to i32, !dbg !19
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !19
  %258 = bitcast i32 %257 to float, !dbg !19
  %259 = fadd float %255, %258, !dbg !15
  %260 = bitcast float %259 to i32, !dbg !19
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !19
  %262 = bitcast i32 %261 to float, !dbg !19
  %263 = fadd float %259, %262, !dbg !15
  %264 = tail call float @llvm.nvvm.div.full(float %215, float 1.280000e+02), !dbg !20
  %265 = tail call float @llvm.nvvm.div.full(float %231, float 1.280000e+02), !dbg !20
  %266 = tail call float @llvm.nvvm.div.full(float %247, float 1.280000e+02), !dbg !20
  %267 = tail call float @llvm.nvvm.div.full(float %263, float 1.280000e+02), !dbg !20
  %268 = fadd float %5, %264, !dbg !21
  %269 = fadd float %5, %265, !dbg !21
  %270 = fadd float %5, %266, !dbg !21
  %271 = fadd float %5, %267, !dbg !21
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i = icmp eq i32 %272, 0, !dbg !22
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i = icmp eq i32 %273, 0, !dbg !22
  br i1 %.not.i, label %279, label %274, !dbg !22

274:                                              ; preds = %8
  br i1 %.not1.i, label %277, label %275, !dbg !22

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

279:                                              ; preds = %8
  br i1 %.not1.i, label %282, label %280, !dbg !22

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %275, %277, %280, %282
  %.0.i = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !22
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i11 = icmp eq i32 %284, 0, !dbg !22
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i14 = icmp eq i32 %285, 0, !dbg !22
  br i1 %.not.i11, label %291, label %286, !dbg !22

286:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %289, label %287, !dbg !22

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #6, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #6, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

291:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %294, label %292, !dbg !22

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #6, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #6, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

__nv_sqrtf.exit15:                                ; preds = %287, %289, %292, %294
  %.0.i13 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !22
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i16 = icmp eq i32 %296, 0, !dbg !22
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i19 = icmp eq i32 %297, 0, !dbg !22
  br i1 %.not.i16, label %303, label %298, !dbg !22

298:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %301, label %299, !dbg !22

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #6, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #6, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

303:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %306, label %304, !dbg !22

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #6, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #6, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

__nv_sqrtf.exit20:                                ; preds = %299, %301, %304, %306
  %.0.i18 = phi float [ %300, %299 ], [ %302, %301 ], [ %305, %304 ], [ %307, %306 ], !dbg !22
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i21 = icmp eq i32 %308, 0, !dbg !22
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i24 = icmp eq i32 %309, 0, !dbg !22
  br i1 %.not.i21, label %315, label %310, !dbg !22

310:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %313, label %311, !dbg !22

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #6, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #6, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

315:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %318, label %316, !dbg !22

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #6, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #6, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

__nv_sqrtf.exit25:                                ; preds = %311, %313, %316, %318
  %.0.i23 = phi float [ %312, %311 ], [ %314, %313 ], [ %317, %316 ], [ %319, %318 ], !dbg !22
  %320 = and i32 %10, 31, !dbg !9
  %321 = zext nneg i32 %320 to i64, !dbg !12
  %322 = or disjoint i64 %15, %321, !dbg !12
  %323 = and i32 %10, 127, !dbg !9
  %324 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !23
  %325 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i13), !dbg !23
  %326 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i18), !dbg !23
  %327 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i23), !dbg !23
  %328 = getelementptr float, ptr addrspace(1) %4, i64 %322, !dbg !24
  %329 = icmp slt i64 %322, %14, !dbg !24
  %330 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !24
  store float %324, ptr addrspace(3) %330, align 4, !dbg !24
  %331 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !24
  store float %325, ptr addrspace(3) %331, align 4, !dbg !24
  %332 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !24
  store float %326, ptr addrspace(3) %332, align 4, !dbg !24
  %333 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !24
  store float %327, ptr addrspace(3) %333, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %334 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %320, !dbg !24
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !24
  %336 = and i32 %10, 96, !dbg !24
  %337 = icmp eq i32 %336, 0, !dbg !24
  %338 = and i1 %337, %329, !dbg !24
  %339 = and i1 %42, %338, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %328, i1 %339) #6, !dbg !24
  %340 = zext nneg i32 %323 to i64, !dbg !25
  %341 = getelementptr bfloat, ptr addrspace(1) %3, i64 %340, !dbg !25
  %342 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %341, i1 true) #6, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %323, !dbg !27
  %344 = insertelement <1 x i16> poison, i16 %342, i64 0, !dbg !27
  store <1 x i16> %344, ptr addrspace(3) %343, align 2, !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %12, !dbg !27
  %346 = getelementptr inbounds nuw i8, ptr addrspace(3) %345, i32 4, !dbg !27
  %347 = getelementptr inbounds nuw i8, ptr addrspace(3) %345, i32 8, !dbg !27
  %348 = getelementptr inbounds nuw i8, ptr addrspace(3) %345, i32 12, !dbg !27
  %349 = fmul float %325, %115, !dbg !28
  %350 = fmul float %325, %116, !dbg !28
  %351 = fmul float %325, %117, !dbg !28
  %352 = fmul float %325, %118, !dbg !28
  %353 = fmul float %325, %119, !dbg !28
  %354 = fmul float %325, %120, !dbg !28
  %355 = fmul float %325, %121, !dbg !28
  %356 = fmul float %325, %122, !dbg !28
  %357 = fmul float %326, %123, !dbg !28
  %358 = fmul float %326, %124, !dbg !28
  %359 = fmul float %326, %125, !dbg !28
  %360 = fmul float %326, %126, !dbg !28
  %361 = fmul float %326, %127, !dbg !28
  %362 = fmul float %326, %128, !dbg !28
  %363 = fmul float %326, %129, !dbg !28
  %364 = fmul float %326, %130, !dbg !28
  %365 = fmul float %327, %131, !dbg !28
  %366 = fmul float %327, %132, !dbg !28
  %367 = fmul float %327, %133, !dbg !28
  %368 = fmul float %327, %134, !dbg !28
  %369 = fmul float %327, %135, !dbg !28
  %370 = fmul float %327, %136, !dbg !28
  %371 = fmul float %327, %137, !dbg !28
  %372 = fmul float %327, %138, !dbg !28
  %373 = getelementptr bfloat, ptr addrspace(1) %1, i64 %34, !dbg !29
  %374 = getelementptr bfloat, ptr addrspace(1) %1, i64 %35, !dbg !29
  %375 = getelementptr bfloat, ptr addrspace(1) %1, i64 %36, !dbg !29
  %376 = getelementptr bfloat, ptr addrspace(1) %1, i64 %37, !dbg !29
  %377 = load <2 x bfloat>, ptr addrspace(3) %348, align 4, !dbg !27
  %378 = fpext <2 x bfloat> %377 to <2 x float>, !dbg !30
  %379 = insertelement <2 x float> poison, float %324, i64 0, !dbg !28
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !28
  %381 = fmul <2 x float> %380, %114, !dbg !28
  %382 = fmul <2 x float> %381, %378, !dbg !27
  %383 = extractelement <2 x float> %378, i64 0, !dbg !27
  %384 = fmul float %355, %383, !dbg !27
  %385 = extractelement <2 x float> %378, i64 1, !dbg !27
  %386 = fmul float %356, %385, !dbg !27
  %387 = fmul float %363, %383, !dbg !27
  %388 = fmul float %364, %385, !dbg !27
  %389 = fmul float %371, %383, !dbg !27
  %390 = fmul float %372, %385, !dbg !27
  %391 = load <2 x bfloat>, ptr addrspace(3) %347, align 8, !dbg !27
  %392 = fpext <2 x bfloat> %391 to <2 x float>, !dbg !30
  %393 = fmul <2 x float> %380, %113, !dbg !28
  %394 = fmul <2 x float> %393, %392, !dbg !27
  %395 = extractelement <2 x float> %392, i64 0, !dbg !27
  %396 = fmul float %353, %395, !dbg !27
  %397 = extractelement <2 x float> %392, i64 1, !dbg !27
  %398 = fmul float %354, %397, !dbg !27
  %399 = fmul float %361, %395, !dbg !27
  %400 = fmul float %362, %397, !dbg !27
  %401 = fmul float %369, %395, !dbg !27
  %402 = fmul float %370, %397, !dbg !27
  %403 = load <2 x bfloat>, ptr addrspace(3) %346, align 4, !dbg !27
  %404 = fpext <2 x bfloat> %403 to <2 x float>, !dbg !30
  %405 = fmul <2 x float> %380, %112, !dbg !28
  %406 = fmul <2 x float> %405, %404, !dbg !27
  %407 = extractelement <2 x float> %404, i64 0, !dbg !27
  %408 = fmul float %351, %407, !dbg !27
  %409 = extractelement <2 x float> %404, i64 1, !dbg !27
  %410 = fmul float %352, %409, !dbg !27
  %411 = fmul float %359, %407, !dbg !27
  %412 = fmul float %360, %409, !dbg !27
  %413 = fmul float %367, %407, !dbg !27
  %414 = fmul float %368, %409, !dbg !27
  %415 = load <2 x bfloat>, ptr addrspace(3) %345, align 16, !dbg !27
  %416 = fpext <2 x bfloat> %415 to <2 x float>, !dbg !30
  %417 = fmul <2 x float> %380, %111, !dbg !28
  %418 = fmul <2 x float> %417, %416, !dbg !27
  %419 = extractelement <2 x float> %416, i64 0, !dbg !27
  %420 = fmul float %349, %419, !dbg !27
  %421 = extractelement <2 x float> %416, i64 1, !dbg !27
  %422 = fmul float %350, %421, !dbg !27
  %423 = fmul float %357, %419, !dbg !27
  %424 = fmul float %358, %421, !dbg !27
  %425 = fmul float %365, %419, !dbg !27
  %426 = fmul float %366, %421, !dbg !27
  %427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %373, i1 %47) #6, !dbg !29
  %428 = extractvalue { i32, i32, i32, i32 } %427, 0, !dbg !29
  %429 = bitcast i32 %428 to <2 x bfloat>, !dbg !29
  %430 = extractvalue { i32, i32, i32, i32 } %427, 1, !dbg !29
  %431 = bitcast i32 %430 to <2 x bfloat>, !dbg !29
  %432 = extractvalue { i32, i32, i32, i32 } %427, 2, !dbg !29
  %433 = bitcast i32 %432 to <2 x bfloat>, !dbg !29
  %434 = extractvalue { i32, i32, i32, i32 } %427, 3, !dbg !29
  %435 = bitcast i32 %434 to <2 x bfloat>, !dbg !29
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %374, i1 %48) #6, !dbg !29
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !29
  %438 = bitcast i32 %437 to <2 x bfloat>, !dbg !29
  %439 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !29
  %440 = bitcast i32 %439 to <2 x bfloat>, !dbg !29
  %441 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !29
  %442 = bitcast i32 %441 to <2 x bfloat>, !dbg !29
  %443 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !29
  %444 = bitcast i32 %443 to <2 x bfloat>, !dbg !29
  %445 = extractelement <2 x bfloat> %438, i64 0, !dbg !29
  %446 = extractelement <2 x bfloat> %438, i64 1, !dbg !29
  %447 = extractelement <2 x bfloat> %440, i64 0, !dbg !29
  %448 = extractelement <2 x bfloat> %440, i64 1, !dbg !29
  %449 = extractelement <2 x bfloat> %442, i64 0, !dbg !29
  %450 = extractelement <2 x bfloat> %442, i64 1, !dbg !29
  %451 = extractelement <2 x bfloat> %444, i64 0, !dbg !29
  %452 = extractelement <2 x bfloat> %444, i64 1, !dbg !29
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %375, i1 %49) #6, !dbg !29
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !29
  %455 = bitcast i32 %454 to <2 x bfloat>, !dbg !29
  %456 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !29
  %457 = bitcast i32 %456 to <2 x bfloat>, !dbg !29
  %458 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !29
  %459 = bitcast i32 %458 to <2 x bfloat>, !dbg !29
  %460 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !29
  %461 = bitcast i32 %460 to <2 x bfloat>, !dbg !29
  %462 = extractelement <2 x bfloat> %455, i64 0, !dbg !29
  %463 = extractelement <2 x bfloat> %455, i64 1, !dbg !29
  %464 = extractelement <2 x bfloat> %457, i64 0, !dbg !29
  %465 = extractelement <2 x bfloat> %457, i64 1, !dbg !29
  %466 = extractelement <2 x bfloat> %459, i64 0, !dbg !29
  %467 = extractelement <2 x bfloat> %459, i64 1, !dbg !29
  %468 = extractelement <2 x bfloat> %461, i64 0, !dbg !29
  %469 = extractelement <2 x bfloat> %461, i64 1, !dbg !29
  %470 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %376, i1 %50) #6, !dbg !29
  %471 = extractvalue { i32, i32, i32, i32 } %470, 0, !dbg !29
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !29
  %473 = extractvalue { i32, i32, i32, i32 } %470, 1, !dbg !29
  %474 = bitcast i32 %473 to <2 x bfloat>, !dbg !29
  %475 = extractvalue { i32, i32, i32, i32 } %470, 2, !dbg !29
  %476 = bitcast i32 %475 to <2 x bfloat>, !dbg !29
  %477 = extractvalue { i32, i32, i32, i32 } %470, 3, !dbg !29
  %478 = bitcast i32 %477 to <2 x bfloat>, !dbg !29
  %479 = extractelement <2 x bfloat> %472, i64 0, !dbg !29
  %480 = extractelement <2 x bfloat> %472, i64 1, !dbg !29
  %481 = extractelement <2 x bfloat> %474, i64 0, !dbg !29
  %482 = extractelement <2 x bfloat> %474, i64 1, !dbg !29
  %483 = extractelement <2 x bfloat> %476, i64 0, !dbg !29
  %484 = extractelement <2 x bfloat> %476, i64 1, !dbg !29
  %485 = extractelement <2 x bfloat> %478, i64 0, !dbg !29
  %486 = extractelement <2 x bfloat> %478, i64 1, !dbg !29
  %487 = fpext <2 x bfloat> %429 to <2 x float>, !dbg !31
  %488 = fpext <2 x bfloat> %431 to <2 x float>, !dbg !31
  %489 = fpext <2 x bfloat> %433 to <2 x float>, !dbg !31
  %490 = fpext <2 x bfloat> %435 to <2 x float>, !dbg !31
  %491 = fpext bfloat %445 to float, !dbg !31
  %492 = fpext bfloat %446 to float, !dbg !31
  %493 = fpext bfloat %447 to float, !dbg !31
  %494 = fpext bfloat %448 to float, !dbg !31
  %495 = fpext bfloat %449 to float, !dbg !31
  %496 = fpext bfloat %450 to float, !dbg !31
  %497 = fpext bfloat %451 to float, !dbg !31
  %498 = fpext bfloat %452 to float, !dbg !31
  %499 = fpext bfloat %462 to float, !dbg !31
  %500 = fpext bfloat %463 to float, !dbg !31
  %501 = fpext bfloat %464 to float, !dbg !31
  %502 = fpext bfloat %465 to float, !dbg !31
  %503 = fpext bfloat %466 to float, !dbg !31
  %504 = fpext bfloat %467 to float, !dbg !31
  %505 = fpext bfloat %468 to float, !dbg !31
  %506 = fpext bfloat %469 to float, !dbg !31
  %507 = fpext bfloat %479 to float, !dbg !31
  %508 = fpext bfloat %480 to float, !dbg !31
  %509 = fpext bfloat %481 to float, !dbg !31
  %510 = fpext bfloat %482 to float, !dbg !31
  %511 = fpext bfloat %483 to float, !dbg !31
  %512 = fpext bfloat %484 to float, !dbg !31
  %513 = fpext bfloat %485 to float, !dbg !31
  %514 = fpext bfloat %486 to float, !dbg !31
  %515 = fmul <2 x float> %418, %487, !dbg !32
  %516 = fmul <2 x float> %406, %488, !dbg !32
  %517 = fmul <2 x float> %394, %489, !dbg !32
  %518 = fmul <2 x float> %382, %490, !dbg !32
  %519 = fmul float %420, %491, !dbg !32
  %520 = fmul float %422, %492, !dbg !32
  %521 = fmul float %408, %493, !dbg !32
  %522 = fmul float %410, %494, !dbg !32
  %523 = fmul float %396, %495, !dbg !32
  %524 = fmul float %398, %496, !dbg !32
  %525 = fmul float %384, %497, !dbg !32
  %526 = fmul float %386, %498, !dbg !32
  %527 = fmul float %423, %499, !dbg !32
  %528 = fmul float %424, %500, !dbg !32
  %529 = fmul float %411, %501, !dbg !32
  %530 = fmul float %412, %502, !dbg !32
  %531 = fmul float %399, %503, !dbg !32
  %532 = fmul float %400, %504, !dbg !32
  %533 = fmul float %387, %505, !dbg !32
  %534 = fmul float %388, %506, !dbg !32
  %535 = fmul float %425, %507, !dbg !32
  %536 = fmul float %426, %508, !dbg !32
  %537 = fmul float %413, %509, !dbg !32
  %538 = fmul float %414, %510, !dbg !32
  %539 = fmul float %401, %511, !dbg !32
  %540 = fmul float %402, %512, !dbg !32
  %541 = fmul float %389, %513, !dbg !32
  %542 = fmul float %390, %514, !dbg !32
  %543 = extractelement <2 x float> %487, i64 0, !dbg !33
  %544 = fsub float 0.000000e+00, %543, !dbg !33
  %545 = extractelement <2 x float> %487, i64 1, !dbg !33
  %546 = fsub float 0.000000e+00, %545, !dbg !33
  %547 = extractelement <2 x float> %488, i64 0, !dbg !33
  %548 = fsub float 0.000000e+00, %547, !dbg !33
  %549 = extractelement <2 x float> %488, i64 1, !dbg !33
  %550 = fsub float 0.000000e+00, %549, !dbg !33
  %551 = extractelement <2 x float> %489, i64 0, !dbg !33
  %552 = fsub float 0.000000e+00, %551, !dbg !33
  %553 = extractelement <2 x float> %489, i64 1, !dbg !33
  %554 = fsub float 0.000000e+00, %553, !dbg !33
  %555 = extractelement <2 x float> %490, i64 0, !dbg !33
  %556 = fsub float 0.000000e+00, %555, !dbg !33
  %557 = extractelement <2 x float> %490, i64 1, !dbg !33
  %558 = fsub float 0.000000e+00, %557, !dbg !33
  %559 = fsub float 0.000000e+00, %491, !dbg !33
  %560 = fsub float 0.000000e+00, %492, !dbg !33
  %561 = fsub float 0.000000e+00, %493, !dbg !33
  %562 = fsub float 0.000000e+00, %494, !dbg !33
  %563 = fsub float 0.000000e+00, %495, !dbg !33
  %564 = fsub float 0.000000e+00, %496, !dbg !33
  %565 = fsub float 0.000000e+00, %497, !dbg !33
  %566 = fsub float 0.000000e+00, %498, !dbg !33
  %567 = fsub float 0.000000e+00, %499, !dbg !33
  %568 = fsub float 0.000000e+00, %500, !dbg !33
  %569 = fsub float 0.000000e+00, %501, !dbg !33
  %570 = fsub float 0.000000e+00, %502, !dbg !33
  %571 = fsub float 0.000000e+00, %503, !dbg !33
  %572 = fsub float 0.000000e+00, %504, !dbg !33
  %573 = fsub float 0.000000e+00, %505, !dbg !33
  %574 = fsub float 0.000000e+00, %506, !dbg !33
  %575 = fsub float 0.000000e+00, %507, !dbg !33
  %576 = fsub float 0.000000e+00, %508, !dbg !33
  %577 = fsub float 0.000000e+00, %509, !dbg !33
  %578 = fsub float 0.000000e+00, %510, !dbg !33
  %579 = fsub float 0.000000e+00, %511, !dbg !33
  %580 = fsub float 0.000000e+00, %512, !dbg !33
  %581 = fsub float 0.000000e+00, %513, !dbg !33
  %582 = fsub float 0.000000e+00, %514, !dbg !33
  %583 = fmul float %544, 0x3FF7154760000000, !dbg !35
  %584 = tail call float @llvm.nvvm.ex2.approx.f(float %583), !dbg !35
  %585 = fmul float %546, 0x3FF7154760000000, !dbg !35
  %586 = tail call float @llvm.nvvm.ex2.approx.f(float %585), !dbg !35
  %587 = fmul float %548, 0x3FF7154760000000, !dbg !35
  %588 = tail call float @llvm.nvvm.ex2.approx.f(float %587), !dbg !35
  %589 = fmul float %550, 0x3FF7154760000000, !dbg !35
  %590 = tail call float @llvm.nvvm.ex2.approx.f(float %589), !dbg !35
  %591 = fmul float %552, 0x3FF7154760000000, !dbg !35
  %592 = tail call float @llvm.nvvm.ex2.approx.f(float %591), !dbg !35
  %593 = fmul float %554, 0x3FF7154760000000, !dbg !35
  %594 = tail call float @llvm.nvvm.ex2.approx.f(float %593), !dbg !35
  %595 = fmul float %556, 0x3FF7154760000000, !dbg !35
  %596 = tail call float @llvm.nvvm.ex2.approx.f(float %595), !dbg !35
  %597 = fmul float %558, 0x3FF7154760000000, !dbg !35
  %598 = tail call float @llvm.nvvm.ex2.approx.f(float %597), !dbg !35
  %599 = fmul float %559, 0x3FF7154760000000, !dbg !35
  %600 = tail call float @llvm.nvvm.ex2.approx.f(float %599), !dbg !35
  %601 = fmul float %560, 0x3FF7154760000000, !dbg !35
  %602 = tail call float @llvm.nvvm.ex2.approx.f(float %601), !dbg !35
  %603 = fmul float %561, 0x3FF7154760000000, !dbg !35
  %604 = tail call float @llvm.nvvm.ex2.approx.f(float %603), !dbg !35
  %605 = fmul float %562, 0x3FF7154760000000, !dbg !35
  %606 = tail call float @llvm.nvvm.ex2.approx.f(float %605), !dbg !35
  %607 = fmul float %563, 0x3FF7154760000000, !dbg !35
  %608 = tail call float @llvm.nvvm.ex2.approx.f(float %607), !dbg !35
  %609 = fmul float %564, 0x3FF7154760000000, !dbg !35
  %610 = tail call float @llvm.nvvm.ex2.approx.f(float %609), !dbg !35
  %611 = fmul float %565, 0x3FF7154760000000, !dbg !35
  %612 = tail call float @llvm.nvvm.ex2.approx.f(float %611), !dbg !35
  %613 = fmul float %566, 0x3FF7154760000000, !dbg !35
  %614 = tail call float @llvm.nvvm.ex2.approx.f(float %613), !dbg !35
  %615 = fmul float %567, 0x3FF7154760000000, !dbg !35
  %616 = tail call float @llvm.nvvm.ex2.approx.f(float %615), !dbg !35
  %617 = fmul float %568, 0x3FF7154760000000, !dbg !35
  %618 = tail call float @llvm.nvvm.ex2.approx.f(float %617), !dbg !35
  %619 = fmul float %569, 0x3FF7154760000000, !dbg !35
  %620 = tail call float @llvm.nvvm.ex2.approx.f(float %619), !dbg !35
  %621 = fmul float %570, 0x3FF7154760000000, !dbg !35
  %622 = tail call float @llvm.nvvm.ex2.approx.f(float %621), !dbg !35
  %623 = fmul float %571, 0x3FF7154760000000, !dbg !35
  %624 = tail call float @llvm.nvvm.ex2.approx.f(float %623), !dbg !35
  %625 = fmul float %572, 0x3FF7154760000000, !dbg !35
  %626 = tail call float @llvm.nvvm.ex2.approx.f(float %625), !dbg !35
  %627 = fmul float %573, 0x3FF7154760000000, !dbg !35
  %628 = tail call float @llvm.nvvm.ex2.approx.f(float %627), !dbg !35
  %629 = fmul float %574, 0x3FF7154760000000, !dbg !35
  %630 = tail call float @llvm.nvvm.ex2.approx.f(float %629), !dbg !35
  %631 = fmul float %575, 0x3FF7154760000000, !dbg !35
  %632 = tail call float @llvm.nvvm.ex2.approx.f(float %631), !dbg !35
  %633 = fmul float %576, 0x3FF7154760000000, !dbg !35
  %634 = tail call float @llvm.nvvm.ex2.approx.f(float %633), !dbg !35
  %635 = fmul float %577, 0x3FF7154760000000, !dbg !35
  %636 = tail call float @llvm.nvvm.ex2.approx.f(float %635), !dbg !35
  %637 = fmul float %578, 0x3FF7154760000000, !dbg !35
  %638 = tail call float @llvm.nvvm.ex2.approx.f(float %637), !dbg !35
  %639 = fmul float %579, 0x3FF7154760000000, !dbg !35
  %640 = tail call float @llvm.nvvm.ex2.approx.f(float %639), !dbg !35
  %641 = fmul float %580, 0x3FF7154760000000, !dbg !35
  %642 = tail call float @llvm.nvvm.ex2.approx.f(float %641), !dbg !35
  %643 = fmul float %581, 0x3FF7154760000000, !dbg !35
  %644 = tail call float @llvm.nvvm.ex2.approx.f(float %643), !dbg !35
  %645 = fmul float %582, 0x3FF7154760000000, !dbg !35
  %646 = tail call float @llvm.nvvm.ex2.approx.f(float %645), !dbg !35
  %647 = fadd float %584, 1.000000e+00, !dbg !36
  %648 = fadd float %586, 1.000000e+00, !dbg !36
  %649 = fadd float %588, 1.000000e+00, !dbg !36
  %650 = fadd float %590, 1.000000e+00, !dbg !36
  %651 = fadd float %592, 1.000000e+00, !dbg !36
  %652 = fadd float %594, 1.000000e+00, !dbg !36
  %653 = fadd float %596, 1.000000e+00, !dbg !36
  %654 = fadd float %598, 1.000000e+00, !dbg !36
  %655 = fadd float %600, 1.000000e+00, !dbg !36
  %656 = fadd float %602, 1.000000e+00, !dbg !36
  %657 = fadd float %604, 1.000000e+00, !dbg !36
  %658 = fadd float %606, 1.000000e+00, !dbg !36
  %659 = fadd float %608, 1.000000e+00, !dbg !36
  %660 = fadd float %610, 1.000000e+00, !dbg !36
  %661 = fadd float %612, 1.000000e+00, !dbg !36
  %662 = fadd float %614, 1.000000e+00, !dbg !36
  %663 = fadd float %616, 1.000000e+00, !dbg !36
  %664 = fadd float %618, 1.000000e+00, !dbg !36
  %665 = fadd float %620, 1.000000e+00, !dbg !36
  %666 = fadd float %622, 1.000000e+00, !dbg !36
  %667 = fadd float %624, 1.000000e+00, !dbg !36
  %668 = fadd float %626, 1.000000e+00, !dbg !36
  %669 = fadd float %628, 1.000000e+00, !dbg !36
  %670 = fadd float %630, 1.000000e+00, !dbg !36
  %671 = fadd float %632, 1.000000e+00, !dbg !36
  %672 = fadd float %634, 1.000000e+00, !dbg !36
  %673 = fadd float %636, 1.000000e+00, !dbg !36
  %674 = fadd float %638, 1.000000e+00, !dbg !36
  %675 = fadd float %640, 1.000000e+00, !dbg !36
  %676 = fadd float %642, 1.000000e+00, !dbg !36
  %677 = fadd float %644, 1.000000e+00, !dbg !36
  %678 = fadd float %646, 1.000000e+00, !dbg !36
  %679 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %647), !dbg !37
  %680 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %648), !dbg !37
  %681 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %649), !dbg !37
  %682 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %650), !dbg !37
  %683 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %651), !dbg !37
  %684 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %652), !dbg !37
  %685 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %653), !dbg !37
  %686 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %654), !dbg !37
  %687 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %655), !dbg !37
  %688 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %656), !dbg !37
  %689 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %657), !dbg !37
  %690 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %658), !dbg !37
  %691 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %659), !dbg !37
  %692 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %660), !dbg !37
  %693 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %661), !dbg !37
  %694 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %662), !dbg !37
  %695 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %663), !dbg !37
  %696 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %664), !dbg !37
  %697 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %665), !dbg !37
  %698 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %666), !dbg !37
  %699 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %667), !dbg !37
  %700 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %668), !dbg !37
  %701 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %669), !dbg !37
  %702 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %670), !dbg !37
  %703 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %671), !dbg !37
  %704 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %672), !dbg !37
  %705 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %673), !dbg !37
  %706 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %674), !dbg !37
  %707 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %675), !dbg !37
  %708 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %676), !dbg !37
  %709 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %677), !dbg !37
  %710 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %678), !dbg !37
  %711 = insertelement <2 x float> poison, float %679, i64 0, !dbg !38
  %712 = insertelement <2 x float> %711, float %680, i64 1, !dbg !38
  %713 = fmul <2 x float> %515, %712, !dbg !38
  %714 = insertelement <2 x float> poison, float %681, i64 0, !dbg !38
  %715 = insertelement <2 x float> %714, float %682, i64 1, !dbg !38
  %716 = fmul <2 x float> %516, %715, !dbg !38
  %717 = insertelement <2 x float> poison, float %683, i64 0, !dbg !38
  %718 = insertelement <2 x float> %717, float %684, i64 1, !dbg !38
  %719 = fmul <2 x float> %517, %718, !dbg !38
  %720 = insertelement <2 x float> poison, float %685, i64 0, !dbg !38
  %721 = insertelement <2 x float> %720, float %686, i64 1, !dbg !38
  %722 = fmul <2 x float> %518, %721, !dbg !38
  %723 = fmul float %519, %687, !dbg !38
  %724 = fmul float %520, %688, !dbg !38
  %725 = fmul float %521, %689, !dbg !38
  %726 = fmul float %522, %690, !dbg !38
  %727 = fmul float %523, %691, !dbg !38
  %728 = fmul float %524, %692, !dbg !38
  %729 = fmul float %525, %693, !dbg !38
  %730 = fmul float %526, %694, !dbg !38
  %731 = fmul float %527, %695, !dbg !38
  %732 = fmul float %528, %696, !dbg !38
  %733 = fmul float %529, %697, !dbg !38
  %734 = fmul float %530, %698, !dbg !38
  %735 = fmul float %531, %699, !dbg !38
  %736 = fmul float %532, %700, !dbg !38
  %737 = fmul float %533, %701, !dbg !38
  %738 = fmul float %534, %702, !dbg !38
  %739 = fmul float %535, %703, !dbg !38
  %740 = fmul float %536, %704, !dbg !38
  %741 = fmul float %537, %705, !dbg !38
  %742 = fmul float %538, %706, !dbg !38
  %743 = fmul float %539, %707, !dbg !38
  %744 = fmul float %540, %708, !dbg !38
  %745 = fmul float %541, %709, !dbg !38
  %746 = fmul float %542, %710, !dbg !38
  %747 = fptrunc <2 x float> %713 to <2 x bfloat>, !dbg !39
  %748 = fptrunc <2 x float> %716 to <2 x bfloat>, !dbg !39
  %749 = fptrunc <2 x float> %719 to <2 x bfloat>, !dbg !39
  %750 = fptrunc <2 x float> %722 to <2 x bfloat>, !dbg !39
  %751 = fptrunc float %723 to bfloat, !dbg !39
  %752 = fptrunc float %724 to bfloat, !dbg !39
  %753 = fptrunc float %725 to bfloat, !dbg !39
  %754 = fptrunc float %726 to bfloat, !dbg !39
  %755 = fptrunc float %727 to bfloat, !dbg !39
  %756 = fptrunc float %728 to bfloat, !dbg !39
  %757 = fptrunc float %729 to bfloat, !dbg !39
  %758 = fptrunc float %730 to bfloat, !dbg !39
  %759 = fptrunc float %731 to bfloat, !dbg !39
  %760 = fptrunc float %732 to bfloat, !dbg !39
  %761 = fptrunc float %733 to bfloat, !dbg !39
  %762 = fptrunc float %734 to bfloat, !dbg !39
  %763 = fptrunc float %735 to bfloat, !dbg !39
  %764 = fptrunc float %736 to bfloat, !dbg !39
  %765 = fptrunc float %737 to bfloat, !dbg !39
  %766 = fptrunc float %738 to bfloat, !dbg !39
  %767 = fptrunc float %739 to bfloat, !dbg !39
  %768 = fptrunc float %740 to bfloat, !dbg !39
  %769 = fptrunc float %741 to bfloat, !dbg !39
  %770 = fptrunc float %742 to bfloat, !dbg !39
  %771 = fptrunc float %743 to bfloat, !dbg !39
  %772 = fptrunc float %744 to bfloat, !dbg !39
  %773 = fptrunc float %745 to bfloat, !dbg !39
  %774 = fptrunc float %746 to bfloat, !dbg !39
  %775 = getelementptr bfloat, ptr addrspace(1) %2, i64 %34, !dbg !40
  %776 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !40
  %777 = getelementptr bfloat, ptr addrspace(1) %2, i64 %36, !dbg !40
  %778 = getelementptr bfloat, ptr addrspace(1) %2, i64 %37, !dbg !40
  %779 = bitcast <2 x bfloat> %747 to i32, !dbg !40
  %780 = bitcast <2 x bfloat> %748 to i32, !dbg !40
  %781 = bitcast <2 x bfloat> %749 to i32, !dbg !40
  %782 = bitcast <2 x bfloat> %750 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %779, i32 %780, i32 %781, i32 %782, ptr addrspace(1) %775, i1 %47) #6, !dbg !40
  %783 = insertelement <2 x bfloat> poison, bfloat %751, i64 0, !dbg !40
  %784 = insertelement <2 x bfloat> %783, bfloat %752, i64 1, !dbg !40
  %785 = bitcast <2 x bfloat> %784 to i32, !dbg !40
  %786 = insertelement <2 x bfloat> poison, bfloat %753, i64 0, !dbg !40
  %787 = insertelement <2 x bfloat> %786, bfloat %754, i64 1, !dbg !40
  %788 = bitcast <2 x bfloat> %787 to i32, !dbg !40
  %789 = insertelement <2 x bfloat> poison, bfloat %755, i64 0, !dbg !40
  %790 = insertelement <2 x bfloat> %789, bfloat %756, i64 1, !dbg !40
  %791 = bitcast <2 x bfloat> %790 to i32, !dbg !40
  %792 = insertelement <2 x bfloat> poison, bfloat %757, i64 0, !dbg !40
  %793 = insertelement <2 x bfloat> %792, bfloat %758, i64 1, !dbg !40
  %794 = bitcast <2 x bfloat> %793 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %785, i32 %788, i32 %791, i32 %794, ptr addrspace(1) %776, i1 %48) #6, !dbg !40
  %795 = insertelement <2 x bfloat> poison, bfloat %759, i64 0, !dbg !40
  %796 = insertelement <2 x bfloat> %795, bfloat %760, i64 1, !dbg !40
  %797 = bitcast <2 x bfloat> %796 to i32, !dbg !40
  %798 = insertelement <2 x bfloat> poison, bfloat %761, i64 0, !dbg !40
  %799 = insertelement <2 x bfloat> %798, bfloat %762, i64 1, !dbg !40
  %800 = bitcast <2 x bfloat> %799 to i32, !dbg !40
  %801 = insertelement <2 x bfloat> poison, bfloat %763, i64 0, !dbg !40
  %802 = insertelement <2 x bfloat> %801, bfloat %764, i64 1, !dbg !40
  %803 = bitcast <2 x bfloat> %802 to i32, !dbg !40
  %804 = insertelement <2 x bfloat> poison, bfloat %765, i64 0, !dbg !40
  %805 = insertelement <2 x bfloat> %804, bfloat %766, i64 1, !dbg !40
  %806 = bitcast <2 x bfloat> %805 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %797, i32 %800, i32 %803, i32 %806, ptr addrspace(1) %777, i1 %49) #6, !dbg !40
  %807 = insertelement <2 x bfloat> poison, bfloat %767, i64 0, !dbg !40
  %808 = insertelement <2 x bfloat> %807, bfloat %768, i64 1, !dbg !40
  %809 = bitcast <2 x bfloat> %808 to i32, !dbg !40
  %810 = insertelement <2 x bfloat> poison, bfloat %769, i64 0, !dbg !40
  %811 = insertelement <2 x bfloat> %810, bfloat %770, i64 1, !dbg !40
  %812 = bitcast <2 x bfloat> %811 to i32, !dbg !40
  %813 = insertelement <2 x bfloat> poison, bfloat %771, i64 0, !dbg !40
  %814 = insertelement <2 x bfloat> %813, bfloat %772, i64 1, !dbg !40
  %815 = bitcast <2 x bfloat> %814 to i32, !dbg !40
  %816 = insertelement <2 x bfloat> poison, bfloat %773, i64 0, !dbg !40
  %817 = insertelement <2 x bfloat> %816, bfloat %774, i64 1, !dbg !40
  %818 = bitcast <2 x bfloat> %817 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %809, i32 %812, i32 %815, i32 %818, ptr addrspace(1) %778, i1 %50) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_norm_gate.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "layer_norm_gated_fwd_kernel", linkageName: "layer_norm_gated_fwd_kernel", scope: !1, file: !1, line: 33, type: !6, scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 56, column: 24, scope: !5)
!9 = !DILocation(line: 58, column: 23, scope: !5)
!10 = !DILocation(line: 61, column: 54, scope: !5)
!11 = !DILocation(line: 61, column: 72, scope: !5)
!12 = !DILocation(line: 62, column: 18, scope: !5)
!13 = !DILocation(line: 62, column: 49, scope: !5)
!14 = !DILocation(line: 77, column: 32, scope: !5)
!15 = !DILocation(line: 260, column: 15, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !5, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!18 = !DILocation(line: 77, column: 23, scope: !5)
!19 = !DILocation(line: 290, column: 36, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 77, column: 50, scope: !5)
!21 = !DILocation(line: 78, column: 33, scope: !5)
!22 = !DILocation(line: 78, column: 25, scope: !5)
!23 = !DILocation(line: 78, column: 17, scope: !5)
!24 = !DILocation(line: 81, column: 21, scope: !5)
!25 = !DILocation(line: 84, column: 26, scope: !5)
!26 = !DILocation(line: 84, column: 22, scope: !5)
!27 = !DILocation(line: 88, column: 20, scope: !5)
!28 = !DILocation(line: 87, column: 86, scope: !5)
!29 = !DILocation(line: 94, column: 18, scope: !5)
!30 = !DILocation(line: 84, column: 44, scope: !5)
!31 = !DILocation(line: 94, column: 49, scope: !5)
!32 = !DILocation(line: 98, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !34)
!34 = !DILocation(line: 98, column: 37, scope: !5)
!35 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !34)
!38 = !DILocation(line: 98, column: 26, scope: !5)
!39 = !DILocation(line: 104, column: 25, scope: !5)
!40 = !DILocation(line: 104, column: 18, scope: !5)
!41 = !DILocation(line: 104, column: 4, scope: !5)
