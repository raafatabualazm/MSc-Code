; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 5, !dbg !17
  %24 = and i32 %22, 32, !dbg !17
  %25 = icmp eq i32 %24, 0, !dbg !17
  %26 = and i32 %22, 128, !dbg !17
  %27 = lshr i32 %22, 3, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %28, 32, !dbg !17
  %30 = shl nuw nsw i32 %22, 3, !dbg !17
  %31 = and i32 %30, 56, !dbg !17
  %32 = zext nneg i32 %28 to i64, !dbg !17
  %33 = zext nneg i32 %29 to i64, !dbg !17
  %34 = zext nneg i32 %31 to i64, !dbg !17
  %35 = or disjoint i64 %32, %21, !dbg !17
  %36 = or disjoint i64 %33, %21, !dbg !17
  %37 = shl nsw i64 %35, 5, !dbg !17
  %38 = shl nsw i64 %36, 5, !dbg !17
  %39 = getelementptr bfloat, ptr addrspace(1) %18, i64 %37, !dbg !17
  %40 = getelementptr bfloat, ptr addrspace(1) %18, i64 %38, !dbg !17
  %41 = icmp sgt i32 %19, -1, !dbg !17
  %42 = icmp slt i64 %35, %20, !dbg !17
  %43 = icmp slt i64 %36, %20, !dbg !17
  %44 = and i1 %41, %42, !dbg !17
  %45 = and i1 %41, %43, !dbg !17
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %39, i1 %44) #2, !dbg !17
  %47 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %40, i1 %45) #2, !dbg !17
  %48 = or disjoint i32 %14, %13, !dbg !18
  %49 = shl i32 %48, 6, !dbg !19
  %50 = sext i32 %49 to i64, !dbg !20
  %51 = getelementptr bfloat, ptr addrspace(1) %5, i64 %50, !dbg !20
  %.idx = shl nsw i64 %35, 12, !dbg !21
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx, !dbg !21
  %53 = getelementptr bfloat, ptr addrspace(1) %52, i64 %34, !dbg !21
  %.idx2 = shl nsw i64 %36, 12, !dbg !21
  %54 = getelementptr i8, ptr addrspace(1) %51, i64 %.idx2, !dbg !21
  %55 = getelementptr bfloat, ptr addrspace(1) %54, i64 %34, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %44) #2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %60 = bitcast i32 %59 to <2 x bfloat>, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %62 = bitcast i32 %61 to <2 x bfloat>, !dbg !21
  %63 = shufflevector <2 x bfloat> %62, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %64 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !21
  %66 = shufflevector <2 x bfloat> %65, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %45) #2, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !21
  %74 = shufflevector <2 x bfloat> %73, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %75 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %76 = bitcast i32 %75 to <2 x bfloat>, !dbg !21
  %77 = shufflevector <2 x bfloat> %76, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %78 = select i1 %25, i32 0, i32 288, !dbg !21
  %79 = and i32 %22, 24, !dbg !21
  %80 = mul nuw nsw i32 %79, 9, !dbg !21
  %81 = xor i32 %80, %31, !dbg !21
  %82 = xor i32 %81, %78, !dbg !21
  %83 = and i32 %30, 512, !dbg !21
  %84 = shl nuw nsw i32 %26, 3, !dbg !21
  %85 = or disjoint i32 %83, %82, !dbg !21
  %86 = or disjoint i32 %85, %84, !dbg !21
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792), i32 %86, !dbg !21
  %88 = shufflevector <2 x bfloat> %58, <2 x bfloat> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %89 = shufflevector <8 x bfloat> %88, <8 x bfloat> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %90 = shufflevector <8 x bfloat> %89, <8 x bfloat> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %90, ptr addrspace(3) %87, align 16, !dbg !21
  %91 = or disjoint i32 %31, 2048, !dbg !21
  %92 = xor i32 %80, %91, !dbg !21
  %93 = xor i32 %92, %78, !dbg !21
  %94 = or disjoint i32 %93, %83, !dbg !21
  %95 = or disjoint i32 %94, %84, !dbg !21
  %96 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792), i32 %95, !dbg !21
  %97 = shufflevector <2 x bfloat> %69, <2 x bfloat> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %98 = shufflevector <8 x bfloat> %97, <8 x bfloat> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !21
  %99 = shufflevector <8 x bfloat> %98, <8 x bfloat> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !21
  store <8 x bfloat> %99, ptr addrspace(3) %96, align 16, !dbg !21
  %100 = shl i32 %48, 7, !dbg !22
  %101 = sext i32 %100 to i64, !dbg !23
  %102 = getelementptr bfloat, ptr addrspace(1) %1, i64 %101, !dbg !23
  %103 = getelementptr bfloat, ptr addrspace(1) %4, i64 %101, !dbg !24
  %104 = or disjoint i64 %.idx, %34, !dbg !25
  %105 = or disjoint i64 %.idx2, %34, !dbg !25
  %106 = getelementptr bfloat, ptr addrspace(1) %102, i64 %104, !dbg !25
  %107 = getelementptr bfloat, ptr addrspace(1) %102, i64 %105, !dbg !25
  %108 = shl nuw nsw i32 %28, 6, !dbg !25
  %109 = or disjoint i32 %108, %31, !dbg !25
  %110 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = or disjoint i32 %109, 2048, !dbg !25
  %112 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %111, !dbg !25
  %113 = select i1 %44, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %106, i32 %113) #2, !dbg !25
  %114 = select i1 %45, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %107, i32 %114) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %115 = or disjoint i64 %34, 64, !dbg !25
  %116 = or disjoint i64 %.idx, %115, !dbg !25
  %117 = or disjoint i64 %.idx2, %115, !dbg !25
  %118 = getelementptr bfloat, ptr addrspace(1) %102, i64 %116, !dbg !25
  %119 = getelementptr bfloat, ptr addrspace(1) %102, i64 %117, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %120 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %109, !dbg !25
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %111, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %120, ptr addrspace(1) %118, i32 %113) #2, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %119, i32 %114) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %122 = or disjoint i64 %34, 128, !dbg !25
  %123 = or disjoint i64 %.idx, %122, !dbg !25
  %124 = or disjoint i64 %.idx2, %122, !dbg !25
  %125 = getelementptr bfloat, ptr addrspace(1) %102, i64 %123, !dbg !25
  %126 = getelementptr bfloat, ptr addrspace(1) %102, i64 %124, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %127 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %109, !dbg !25
  %128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %111, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %127, ptr addrspace(1) %125, i32 0) #2, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %126, i32 0) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %86
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %95
  %131 = lshr exact i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792) to i32), 4
  %132 = and i32 %131, 16383
  %133 = zext nneg i32 %132 to i64
  %134 = or disjoint i64 %133, 4611686293338849280
  %135 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792) to i32), i32 32), 4
  %136 = and i32 %135, 16383
  %137 = zext nneg i32 %136 to i64
  %138 = or disjoint i64 %137, 4611686293338849280
  %139 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792) to i32), i32 64), 4
  %140 = and i32 %139, 16383
  %141 = zext nneg i32 %140 to i64
  %142 = or disjoint i64 %141, 4611686293338849280
  %143 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792) to i32), i32 96), 4
  %144 = and i32 %143, 16383
  %145 = zext nneg i32 %144 to i64
  %146 = or disjoint i64 %145, 4611686293338849280
  %147 = shl nuw nsw i32 %22, 6
  %148 = and i32 %147, 960
  %149 = lshr i32 %22, 1
  %150 = and i32 %149, 8
  %151 = or disjoint i32 %148, %150
  %152 = shl nuw nsw i32 %22, 5
  %153 = and i32 %152, 3072
  %154 = or disjoint i32 %151, %153
  %155 = and i32 %30, 504
  %156 = or disjoint i32 %84, %155
  %.reass = or disjoint i32 %156, %83
  %157 = lshr exact i32 %154, 3
  %158 = and i32 %157, 504
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %158
  %160 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %159, i32 %154
  %161 = lshr exact i32 %26, 1
  %162 = getelementptr inbounds nuw i8, ptr addrspace(3) %160, i32 %161
  %163 = ptrtoint ptr addrspace(3) %162 to i32
  %164 = getelementptr inbounds nuw i8, ptr addrspace(3) %162, i32 32
  %165 = ptrtoint ptr addrspace(3) %164 to i32
  %166 = lshr exact i32 %.reass, 3
  %167 = and i32 %166, 248
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %167
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %168, i32 %.reass
  %170 = or disjoint i32 %.reass, 2048
  %171 = lshr exact i32 %170, 3
  %172 = and i32 %171, 504
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %172
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %173, i32 %170
  %175 = insertelement <8 x i16> poison, i16 %46, i64 0, !dbg !26
  %176 = bitcast <8 x i16> %175 to <8 x bfloat>, !dbg !26
  %177 = shufflevector <8 x bfloat> %176, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %178 = insertelement <8 x i16> poison, i16 %47, i64 0, !dbg !26
  %179 = bitcast <8 x i16> %178 to <8 x bfloat>, !dbg !26
  %180 = shufflevector <8 x bfloat> %179, <8 x bfloat> poison, <8 x i32> zeroinitializer, !dbg !26
  %181 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 4
  %182 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 8
  %183 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 12
  br label %184, !dbg !27

184:                                              ; preds = %9, %184
  %185 = phi i1 [ true, %9 ], [ false, %184 ]
  %indvars.iv = phi i64 [ 192, %9 ], [ 256, %184 ]
  %186 = phi i1 [ %44, %9 ], [ false, %184 ]
  %187 = phi i1 [ %45, %9 ], [ false, %184 ]
  %188 = phi i1 [ %44, %9 ], [ %186, %184 ]
  %189 = phi i1 [ %45, %9 ], [ %187, %184 ]
  %190 = phi i64 [ %123, %9 ], [ %.reass85, %184 ]
  %191 = phi i64 [ %124, %9 ], [ %.reass101, %184 ]
  %192 = phi i64 [ %116, %9 ], [ %190, %184 ]
  %193 = phi i64 [ %117, %9 ], [ %191, %184 ]
  %194 = phi i64 [ %104, %9 ], [ %192, %184 ]
  %195 = phi i64 [ %105, %9 ], [ %193, %184 ]
  %196 = phi i32 [ -1, %9 ], [ %200, %184 ]
  %197 = phi i32 [ 2, %9 ], [ %353, %184 ]
  %198 = add i32 %196, 1, !dbg !27
  %199 = icmp sgt i32 %198, 2, !dbg !27
  %200 = select i1 %199, i32 0, i32 %198, !dbg !27
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %.idx27 = shl i32 %200, 13, !dbg !25
  %201 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx27, !dbg !25
  %202 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %109, !dbg !25
  %203 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %201, i32 %111, !dbg !25
  %204 = load <8 x bfloat>, ptr addrspace(3) %202, align 16, !dbg !25
  %205 = fmul <8 x bfloat> %204, %177, !dbg !26
  %206 = load <8 x bfloat>, ptr addrspace(3) %203, align 16, !dbg !25
  %207 = fmul <8 x bfloat> %206, %180, !dbg !26
  store <8 x bfloat> %205, ptr addrspace(3) %129, align 16, !dbg !26
  store <8 x bfloat> %207, ptr addrspace(3) %130, align 16, !dbg !26
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !28
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !28
  %208 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !28
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !28
  %209 = shl i32 %208, 4, !dbg !28
  %210 = and i32 %209, 64, !dbg !28
  %211 = add i32 %210, ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), !dbg !28
  %212 = lshr exact i32 %211, 4, !dbg !28
  %213 = and i32 %212, 16383, !dbg !28
  %214 = zext nneg i32 %213 to i64, !dbg !28
  %215 = or disjoint i64 %214, 4611686293338849280, !dbg !28
  %216 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %134, i64 %215) #2, !dbg !28
  %217 = add i32 %210, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 2048), !dbg !28
  %218 = lshr exact i32 %217, 4, !dbg !28
  %219 = and i32 %218, 16383, !dbg !28
  %220 = zext nneg i32 %219 to i64, !dbg !28
  %221 = or disjoint i64 %220, 4611686293338849280, !dbg !28
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 0, !dbg !28
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 1, !dbg !28
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 2, !dbg !28
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 3, !dbg !28
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 4, !dbg !28
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 5, !dbg !28
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 6, !dbg !28
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 7, !dbg !28
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 8, !dbg !28
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 9, !dbg !28
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 10, !dbg !28
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 11, !dbg !28
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 12, !dbg !28
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 13, !dbg !28
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 14, !dbg !28
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %216, 15, !dbg !28
  %238 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, i64 %138, i64 %221, i1 true) #2, !dbg !28
  %239 = add i32 %210, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 4096), !dbg !28
  %240 = lshr exact i32 %239, 4, !dbg !28
  %241 = and i32 %240, 16383, !dbg !28
  %242 = zext nneg i32 %241 to i64, !dbg !28
  %243 = or disjoint i64 %242, 4611686293338849280, !dbg !28
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 0, !dbg !28
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 1, !dbg !28
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 2, !dbg !28
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 3, !dbg !28
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 4, !dbg !28
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 5, !dbg !28
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 6, !dbg !28
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 7, !dbg !28
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 8, !dbg !28
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 9, !dbg !28
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 10, !dbg !28
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 11, !dbg !28
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 12, !dbg !28
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 13, !dbg !28
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 14, !dbg !28
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %238, 15, !dbg !28
  %260 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %244, float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, float %256, float %257, float %258, float %259, i64 %142, i64 %243, i1 true) #2, !dbg !28
  %261 = add i32 %210, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 6144), !dbg !28
  %262 = lshr exact i32 %261, 4, !dbg !28
  %263 = and i32 %262, 16383, !dbg !28
  %264 = zext nneg i32 %263 to i64, !dbg !28
  %265 = or disjoint i64 %264, 4611686293338849280, !dbg !28
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 0, !dbg !28
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 1, !dbg !28
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 2, !dbg !28
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 3, !dbg !28
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 4, !dbg !28
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 5, !dbg !28
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 6, !dbg !28
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 7, !dbg !28
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 8, !dbg !28
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 9, !dbg !28
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 10, !dbg !28
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 11, !dbg !28
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 12, !dbg !28
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 13, !dbg !28
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 14, !dbg !28
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %260, 15, !dbg !28
  %282 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %266, float %267, float %268, float %269, float %270, float %271, float %272, float %273, float %274, float %275, float %276, float %277, float %278, float %279, float %280, float %281, i64 %146, i64 %265, i1 true) #2, !dbg !28
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 0, !dbg !28
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 1, !dbg !28
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 2, !dbg !28
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 3, !dbg !28
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 4, !dbg !28
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 5, !dbg !28
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 6, !dbg !28
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 7, !dbg !28
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 8, !dbg !28
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 9, !dbg !28
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 10, !dbg !28
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 11, !dbg !28
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 12, !dbg !28
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 13, !dbg !28
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 14, !dbg !28
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %282, 15, !dbg !28
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !28
  %299 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %283, float %284, float %285, float %286, float %287, float %288, float %289, float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792), i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 0, i32 0) #2, !dbg !28
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 0, !dbg !28
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 1, !dbg !28
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 2, !dbg !28
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 3, !dbg !28
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 4, !dbg !28
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 5, !dbg !28
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 6, !dbg !28
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 7, !dbg !28
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 8, !dbg !28
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 9, !dbg !28
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 10, !dbg !28
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 11, !dbg !28
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 12, !dbg !28
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 13, !dbg !28
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 14, !dbg !28
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %299, 15, !dbg !28
  %316 = insertelement <2 x float> poison, float %300, i64 0, !dbg !29
  %317 = insertelement <2 x float> %316, float %301, i64 1, !dbg !29
  %318 = fptrunc <2 x float> %317 to <2 x bfloat>, !dbg !29
  %319 = insertelement <2 x float> poison, float %302, i64 0, !dbg !29
  %320 = insertelement <2 x float> %319, float %303, i64 1, !dbg !29
  %321 = fptrunc <2 x float> %320 to <2 x bfloat>, !dbg !29
  %322 = insertelement <2 x float> poison, float %304, i64 0, !dbg !29
  %323 = insertelement <2 x float> %322, float %305, i64 1, !dbg !29
  %324 = fptrunc <2 x float> %323 to <2 x bfloat>, !dbg !29
  %325 = insertelement <2 x float> poison, float %306, i64 0, !dbg !29
  %326 = insertelement <2 x float> %325, float %307, i64 1, !dbg !29
  %327 = fptrunc <2 x float> %326 to <2 x bfloat>, !dbg !29
  %328 = insertelement <2 x float> poison, float %308, i64 0, !dbg !29
  %329 = insertelement <2 x float> %328, float %309, i64 1, !dbg !29
  %330 = fptrunc <2 x float> %329 to <2 x bfloat>, !dbg !29
  %331 = insertelement <2 x float> poison, float %310, i64 0, !dbg !29
  %332 = insertelement <2 x float> %331, float %311, i64 1, !dbg !29
  %333 = fptrunc <2 x float> %332 to <2 x bfloat>, !dbg !29
  %334 = insertelement <2 x float> poison, float %312, i64 0, !dbg !29
  %335 = insertelement <2 x float> %334, float %313, i64 1, !dbg !29
  %336 = fptrunc <2 x float> %335 to <2 x bfloat>, !dbg !29
  %337 = insertelement <2 x float> poison, float %314, i64 0, !dbg !29
  %338 = insertelement <2 x float> %337, float %315, i64 1, !dbg !29
  %339 = fptrunc <2 x float> %338 to <2 x bfloat>, !dbg !29
  %340 = getelementptr bfloat, ptr addrspace(1) %103, i64 %194, !dbg !30
  %341 = getelementptr bfloat, ptr addrspace(1) %103, i64 %195, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %342 = bitcast <2 x bfloat> %318 to i32, !dbg !30
  %343 = bitcast <2 x bfloat> %321 to i32, !dbg !30
  %344 = bitcast <2 x bfloat> %324 to i32, !dbg !30
  %345 = bitcast <2 x bfloat> %327 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %163, i32 %342, i32 %343, i32 %344, i32 %345) #2, !dbg !30
  %346 = bitcast <2 x bfloat> %330 to i32, !dbg !30
  %347 = bitcast <2 x bfloat> %333 to i32, !dbg !30
  %348 = bitcast <2 x bfloat> %336 to i32, !dbg !30
  %349 = bitcast <2 x bfloat> %339 to i32, !dbg !30
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %165, i32 %346, i32 %347, i32 %348, i32 %349) #2, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %350 = load <4 x i32>, ptr addrspace(3) %174, align 16, !dbg !30
  %.extract69 = load i32, ptr addrspace(3) %169, align 16, !dbg !30
  %.extract71 = load i32, ptr addrspace(3) %181, align 4, !dbg !30
  %.extract73 = load i32, ptr addrspace(3) %182, align 8, !dbg !30
  %.extract75 = load i32, ptr addrspace(3) %183, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract69, i32 %.extract71, i32 %.extract73, i32 %.extract75, ptr addrspace(1) %340, i1 %188) #2, !dbg !30
  %.extract77 = extractelement <4 x i32> %350, i64 0, !dbg !30
  %.extract79 = extractelement <4 x i32> %350, i64 1, !dbg !30
  %.extract81 = extractelement <4 x i32> %350, i64 2, !dbg !30
  %.extract83 = extractelement <4 x i32> %350, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract77, i32 %.extract79, i32 %.extract81, i32 %.extract83, ptr addrspace(1) %341, i1 %189) #2, !dbg !30
  %351 = add i32 %197, 1, !dbg !27
  %352 = icmp sgt i32 %351, 2, !dbg !27
  %353 = select i1 %352, i32 0, i32 %351, !dbg !27
  %.reass85 = or disjoint i64 %104, %indvars.iv
  %.reass101 = or disjoint i64 %105, %indvars.iv
  %354 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass85, !dbg !25
  %355 = getelementptr bfloat, ptr addrspace(1) %102, i64 %.reass101, !dbg !25
  %.idx52 = shl i32 %353, 13, !dbg !25
  %356 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx52, !dbg !25
  %357 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %356, i32 %109, !dbg !25
  %358 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %356, i32 %111, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %357, ptr addrspace(1) %354, i32 0) #2, !dbg !25
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %358, ptr addrspace(1) %355, i32 0) #2, !dbg !25
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !25
  br i1 %185, label %184, label %359, !dbg !27

359:                                              ; preds = %184
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %360 = sext i32 %48 to i64, !dbg !31
  %361 = getelementptr float, ptr addrspace(1) %6, i64 %360, !dbg !31
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %37, !dbg !32
  %363 = getelementptr float, ptr addrspace(1) %361, i64 %38, !dbg !32
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %44) #2, !dbg !32
  %365 = bitcast i32 %364 to float, !dbg !32
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %45) #2, !dbg !32
  %367 = bitcast i32 %366 to float, !dbg !32
  %368 = fmul float %365, 0x3FF7154760000000, !dbg !33
  %369 = tail call float @llvm.nvvm.ex2.approx.f(float %368), !dbg !33
  %370 = fmul float %367, 0x3FF7154760000000, !dbg !33
  %371 = tail call float @llvm.nvvm.ex2.approx.f(float %370), !dbg !33
  %372 = getelementptr bfloat, ptr addrspace(1) %0, i64 %101, !dbg !34
  %373 = getelementptr bfloat, ptr addrspace(1) %3, i64 %101, !dbg !35
  %374 = getelementptr bfloat, ptr addrspace(1) %372, i64 %104, !dbg !36
  %375 = getelementptr bfloat, ptr addrspace(1) %372, i64 %105, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %110, ptr addrspace(1) %374, i32 %113) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %112, ptr addrspace(1) %375, i32 %114) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %376 = getelementptr bfloat, ptr addrspace(1) %372, i64 %116, !dbg !36
  %377 = getelementptr bfloat, ptr addrspace(1) %372, i64 %117, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %120, ptr addrspace(1) %376, i32 %113) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %121, ptr addrspace(1) %377, i32 %114) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %378 = getelementptr bfloat, ptr addrspace(1) %372, i64 %123, !dbg !36
  %379 = getelementptr bfloat, ptr addrspace(1) %372, i64 %124, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %127, ptr addrspace(1) %378, i32 0) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %128, ptr addrspace(1) %379, i32 0) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %380 = insertelement <8 x float> poison, float %369, i64 0, !dbg !37
  %381 = shufflevector <8 x float> %380, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %382 = insertelement <8 x float> poison, float %371, i64 0, !dbg !37
  %383 = shufflevector <8 x float> %382, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %384 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 4
  %385 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 8
  %386 = getelementptr inbounds nuw i8, ptr addrspace(3) %169, i32 12
  br label %387, !dbg !38

387:                                              ; preds = %359, %387
  %388 = phi i1 [ true, %359 ], [ false, %387 ]
  %indvars.iv150 = phi i64 [ 192, %359 ], [ 256, %387 ]
  %389 = phi i1 [ %44, %359 ], [ false, %387 ]
  %390 = phi i1 [ %45, %359 ], [ false, %387 ]
  %391 = phi i1 [ %44, %359 ], [ %389, %387 ]
  %392 = phi i1 [ %45, %359 ], [ %390, %387 ]
  %393 = phi i64 [ %123, %359 ], [ %.reass119, %387 ]
  %394 = phi i64 [ %124, %359 ], [ %.reass135, %387 ]
  %395 = phi i64 [ %116, %359 ], [ %393, %387 ]
  %396 = phi i64 [ %117, %359 ], [ %394, %387 ]
  %397 = phi i64 [ %104, %359 ], [ %395, %387 ]
  %398 = phi i64 [ %105, %359 ], [ %396, %387 ]
  %399 = phi i32 [ -1, %359 ], [ %403, %387 ]
  %400 = phi i32 [ 2, %359 ], [ %562, %387 ]
  %401 = add i32 %399, 1, !dbg !38
  %402 = icmp sgt i32 %401, 2, !dbg !38
  %403 = select i1 %402, i32 0, i32 %401, !dbg !38
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %.idx3 = shl i32 %403, 13, !dbg !36
  %404 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !36
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %404, i32 %109, !dbg !36
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %404, i32 %111, !dbg !36
  %407 = load <8 x bfloat>, ptr addrspace(3) %405, align 16, !dbg !36
  %408 = fmul <8 x bfloat> %407, %177, !dbg !39
  %409 = fpext <8 x bfloat> %408 to <8 x float>, !dbg !37
  %410 = fmul <8 x float> %381, %409, !dbg !37
  %411 = fptrunc <8 x float> %410 to <8 x bfloat>, !dbg !40
  %412 = load <8 x bfloat>, ptr addrspace(3) %406, align 16, !dbg !36
  %413 = fmul <8 x bfloat> %412, %180, !dbg !39
  %414 = fpext <8 x bfloat> %413 to <8 x float>, !dbg !37
  %415 = fmul <8 x float> %383, %414, !dbg !37
  %416 = fptrunc <8 x float> %415 to <8 x bfloat>, !dbg !40
  store <8 x bfloat> %411, ptr addrspace(3) %129, align 16, !dbg !40
  store <8 x bfloat> %416, ptr addrspace(3) %130, align 16, !dbg !40
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #2, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %417 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %23, i32 0, i32 31), !dbg !41
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !41
  %418 = shl i32 %417, 4, !dbg !41
  %419 = and i32 %418, 64, !dbg !41
  %420 = add i32 %419, ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), !dbg !41
  %421 = lshr exact i32 %420, 4, !dbg !41
  %422 = and i32 %421, 16383, !dbg !41
  %423 = zext nneg i32 %422 to i64, !dbg !41
  %424 = or disjoint i64 %423, 4611686293338849280, !dbg !41
  %425 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %134, i64 %424) #2, !dbg !41
  %426 = add i32 %419, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 2048), !dbg !41
  %427 = lshr exact i32 %426, 4, !dbg !41
  %428 = and i32 %427, 16383, !dbg !41
  %429 = zext nneg i32 %428 to i64, !dbg !41
  %430 = or disjoint i64 %429, 4611686293338849280, !dbg !41
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 0, !dbg !41
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 1, !dbg !41
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 2, !dbg !41
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 3, !dbg !41
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 4, !dbg !41
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 5, !dbg !41
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 6, !dbg !41
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 7, !dbg !41
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 8, !dbg !41
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 9, !dbg !41
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 10, !dbg !41
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 11, !dbg !41
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 12, !dbg !41
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 13, !dbg !41
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 14, !dbg !41
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 15, !dbg !41
  %447 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, float %443, float %444, float %445, float %446, i64 %138, i64 %430, i1 true) #2, !dbg !41
  %448 = add i32 %419, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 4096), !dbg !41
  %449 = lshr exact i32 %448, 4, !dbg !41
  %450 = and i32 %449, 16383, !dbg !41
  %451 = zext nneg i32 %450 to i64, !dbg !41
  %452 = or disjoint i64 %451, 4611686293338849280, !dbg !41
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 0, !dbg !41
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 1, !dbg !41
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 2, !dbg !41
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 3, !dbg !41
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 4, !dbg !41
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 5, !dbg !41
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 6, !dbg !41
  %460 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 7, !dbg !41
  %461 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 8, !dbg !41
  %462 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 9, !dbg !41
  %463 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 10, !dbg !41
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 11, !dbg !41
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 12, !dbg !41
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 13, !dbg !41
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 14, !dbg !41
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %447, 15, !dbg !41
  %469 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %453, float %454, float %455, float %456, float %457, float %458, float %459, float %460, float %461, float %462, float %463, float %464, float %465, float %466, float %467, float %468, i64 %142, i64 %452, i1 true) #2, !dbg !41
  %470 = add i32 %419, add (i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576) to i32), i32 6144), !dbg !41
  %471 = lshr exact i32 %470, 4, !dbg !41
  %472 = and i32 %471, 16383, !dbg !41
  %473 = zext nneg i32 %472 to i64, !dbg !41
  %474 = or disjoint i64 %473, 4611686293338849280, !dbg !41
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 0, !dbg !41
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 1, !dbg !41
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 2, !dbg !41
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 3, !dbg !41
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 4, !dbg !41
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 5, !dbg !41
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 6, !dbg !41
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 7, !dbg !41
  %483 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 8, !dbg !41
  %484 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 9, !dbg !41
  %485 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 10, !dbg !41
  %486 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 11, !dbg !41
  %487 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 12, !dbg !41
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 13, !dbg !41
  %489 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 14, !dbg !41
  %490 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %469, 15, !dbg !41
  %491 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %475, float %476, float %477, float %478, float %479, float %480, float %481, float %482, float %483, float %484, float %485, float %486, float %487, float %488, float %489, float %490, i64 %146, i64 %474, i1 true) #2, !dbg !41
  %492 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 0, !dbg !41
  %493 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 1, !dbg !41
  %494 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 2, !dbg !41
  %495 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 3, !dbg !41
  %496 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 4, !dbg !41
  %497 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 5, !dbg !41
  %498 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 6, !dbg !41
  %499 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 7, !dbg !41
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 8, !dbg !41
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 9, !dbg !41
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 10, !dbg !41
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 11, !dbg !41
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 12, !dbg !41
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 13, !dbg !41
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 14, !dbg !41
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 15, !dbg !41
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !41
  %508 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %492, float %493, float %494, float %495, float %496, float %497, float %498, float %499, float %500, float %501, float %502, float %503, float %504, float %505, float %506, float %507, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 33792), i32 0, i32 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 0, i32 0) #2, !dbg !41
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 0, !dbg !41
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 1, !dbg !41
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 2, !dbg !41
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 3, !dbg !41
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 4, !dbg !41
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 5, !dbg !41
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 6, !dbg !41
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 7, !dbg !41
  %517 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 8, !dbg !41
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 9, !dbg !41
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 10, !dbg !41
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 11, !dbg !41
  %521 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 12, !dbg !41
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 13, !dbg !41
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 14, !dbg !41
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %508, 15, !dbg !41
  %525 = insertelement <2 x float> poison, float %509, i64 0, !dbg !42
  %526 = insertelement <2 x float> %525, float %510, i64 1, !dbg !42
  %527 = fptrunc <2 x float> %526 to <2 x bfloat>, !dbg !42
  %528 = insertelement <2 x float> poison, float %511, i64 0, !dbg !42
  %529 = insertelement <2 x float> %528, float %512, i64 1, !dbg !42
  %530 = fptrunc <2 x float> %529 to <2 x bfloat>, !dbg !42
  %531 = insertelement <2 x float> poison, float %513, i64 0, !dbg !42
  %532 = insertelement <2 x float> %531, float %514, i64 1, !dbg !42
  %533 = fptrunc <2 x float> %532 to <2 x bfloat>, !dbg !42
  %534 = insertelement <2 x float> poison, float %515, i64 0, !dbg !42
  %535 = insertelement <2 x float> %534, float %516, i64 1, !dbg !42
  %536 = fptrunc <2 x float> %535 to <2 x bfloat>, !dbg !42
  %537 = insertelement <2 x float> poison, float %517, i64 0, !dbg !42
  %538 = insertelement <2 x float> %537, float %518, i64 1, !dbg !42
  %539 = fptrunc <2 x float> %538 to <2 x bfloat>, !dbg !42
  %540 = insertelement <2 x float> poison, float %519, i64 0, !dbg !42
  %541 = insertelement <2 x float> %540, float %520, i64 1, !dbg !42
  %542 = fptrunc <2 x float> %541 to <2 x bfloat>, !dbg !42
  %543 = insertelement <2 x float> poison, float %521, i64 0, !dbg !42
  %544 = insertelement <2 x float> %543, float %522, i64 1, !dbg !42
  %545 = fptrunc <2 x float> %544 to <2 x bfloat>, !dbg !42
  %546 = insertelement <2 x float> poison, float %523, i64 0, !dbg !42
  %547 = insertelement <2 x float> %546, float %524, i64 1, !dbg !42
  %548 = fptrunc <2 x float> %547 to <2 x bfloat>, !dbg !42
  %549 = getelementptr bfloat, ptr addrspace(1) %373, i64 %397, !dbg !43
  %550 = getelementptr bfloat, ptr addrspace(1) %373, i64 %398, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %551 = bitcast <2 x bfloat> %527 to i32, !dbg !43
  %552 = bitcast <2 x bfloat> %530 to i32, !dbg !43
  %553 = bitcast <2 x bfloat> %533 to i32, !dbg !43
  %554 = bitcast <2 x bfloat> %536 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %163, i32 %551, i32 %552, i32 %553, i32 %554) #2, !dbg !43
  %555 = bitcast <2 x bfloat> %539 to i32, !dbg !43
  %556 = bitcast <2 x bfloat> %542 to i32, !dbg !43
  %557 = bitcast <2 x bfloat> %545 to i32, !dbg !43
  %558 = bitcast <2 x bfloat> %548 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %165, i32 %555, i32 %556, i32 %557, i32 %558) #2, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %559 = load <4 x i32>, ptr addrspace(3) %174, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %169, align 16, !dbg !43
  %.extract55 = load i32, ptr addrspace(3) %384, align 4, !dbg !43
  %.extract57 = load i32, ptr addrspace(3) %385, align 8, !dbg !43
  %.extract59 = load i32, ptr addrspace(3) %386, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract55, i32 %.extract57, i32 %.extract59, ptr addrspace(1) %549, i1 %391) #2, !dbg !43
  %.extract61 = extractelement <4 x i32> %559, i64 0, !dbg !43
  %.extract63 = extractelement <4 x i32> %559, i64 1, !dbg !43
  %.extract65 = extractelement <4 x i32> %559, i64 2, !dbg !43
  %.extract67 = extractelement <4 x i32> %559, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract63, i32 %.extract65, i32 %.extract67, ptr addrspace(1) %550, i1 %392) #2, !dbg !43
  %560 = add i32 %400, 1, !dbg !38
  %561 = icmp sgt i32 %560, 2, !dbg !38
  %562 = select i1 %561, i32 0, i32 %560, !dbg !38
  %.reass119 = or disjoint i64 %104, %indvars.iv150
  %.reass135 = or disjoint i64 %105, %indvars.iv150
  %563 = getelementptr bfloat, ptr addrspace(1) %372, i64 %.reass119, !dbg !36
  %564 = getelementptr bfloat, ptr addrspace(1) %372, i64 %.reass135, !dbg !36
  %.idx26 = shl i32 %562, 13, !dbg !36
  %565 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !36
  %566 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %565, i32 %109, !dbg !36
  %567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %565, i32 %111, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %566, ptr addrspace(1) %563, i32 0) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %567, ptr addrspace(1) %564, i32 0) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  br i1 %388, label %387, label %568, !dbg !38

568:                                              ; preds = %387
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !38
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !38
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 177, column: 41, scope: !5)
!19 = !DILocation(line: 177, column: 48, scope: !5)
!20 = !DILocation(line: 177, column: 32, scope: !5)
!21 = !DILocation(line: 178, column: 18, scope: !5)
!22 = !DILocation(line: 181, column: 52, scope: !5)
!23 = !DILocation(line: 181, column: 36, scope: !5)
!24 = !DILocation(line: 182, column: 36, scope: !5)
!25 = !DILocation(line: 183, column: 22, scope: !5)
!26 = !DILocation(line: 184, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 185, column: 26, scope: !5)
!29 = !DILocation(line: 186, column: 29, scope: !5)
!30 = !DILocation(line: 186, column: 22, scope: !5)
!31 = !DILocation(line: 189, column: 37, scope: !5)
!32 = !DILocation(line: 190, column: 26, scope: !5)
!33 = !DILocation(line: 190, column: 18, scope: !5)
!34 = !DILocation(line: 193, column: 36, scope: !5)
!35 = !DILocation(line: 194, column: 36, scope: !5)
!36 = !DILocation(line: 195, column: 22, scope: !5)
!37 = !DILocation(line: 198, column: 20, scope: !5)
!38 = !DILocation(line: 192, column: 21, scope: !5)
!39 = !DILocation(line: 196, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
