//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	recompute_w_u_fwd_kernel // -- Begin function recompute_w_u_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @recompute_w_u_fwd_kernel
.visible .entry recompute_w_u_fwd_kernel(
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_4,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_5,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_6,
	.param .u32 recompute_w_u_fwd_kernel_param_7,
	.param .u64 .ptr .global .align 1 recompute_w_u_fwd_kernel_param_8
)
.reqntid 256
{
	.reg .pred 	%p<50>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<633>;
	.reg .b64 	%rd<161>;
	.loc	1 144 0                         // wy_fast.py:144:0
$L__func_begin0:
	.loc	1 144 0                         // wy_fast.py:144:0

// %bb.0:
	ld.param.b64 	%rd40, [recompute_w_u_fwd_kernel_param_6];
	ld.param.b64 	%rd39, [recompute_w_u_fwd_kernel_param_3];
	ld.param.b64 	%rd38, [recompute_w_u_fwd_kernel_param_0];
	ld.param.b64 	%rd52, [recompute_w_u_fwd_kernel_param_1];
$L__tmp0:
	.loc	1 166 30                        // wy_fast.py:166:30
	mov.u32 	%r72, %ctaid.x;
	ld.param.b64 	%rd53, [recompute_w_u_fwd_kernel_param_2];
	.loc	1 166 48                        // wy_fast.py:166:48
	mov.u32 	%r73, %ctaid.y;
	.loc	1 173 25                        // wy_fast.py:173:25
	and.b32 	%r74, %r73, 65504;
	.loc	1 167 33                        // wy_fast.py:167:33
	and.b32 	%r75, %r73, 31;
	ld.param.b64 	%rd54, [recompute_w_u_fwd_kernel_param_4];
	ld.param.b32 	%r76, [recompute_w_u_fwd_kernel_param_7];
	.loc	1 174 42                        // wy_fast.py:174:42
	mul.lo.s32 	%r77, %r74, %r76;
	ld.param.b64 	%rd55, [recompute_w_u_fwd_kernel_param_5];
	.loc	1 174 38                        // wy_fast.py:174:38
	mul.wide.s32 	%rd56, %r77, 2;
	add.s64 	%rd57, %rd53, %rd56;
	.loc	1 174 46                        // wy_fast.py:174:46
	mul.wide.u32 	%rd58, %r75, 2;
	add.s64 	%rd59, %rd57, %rd58;
	.loc	1 174 70                        // wy_fast.py:174:70
	shl.b32 	%r78, %r72, 6;
	.loc	1 174 83                        // wy_fast.py:174:83
	cvt.s64.s32 	%rd60, %r76;
	cvt.s64.s32 	%rd61, %r78;
	.loc	1 175 21                        // wy_fast.py:175:21
	mov.u32 	%r79, %tid.x;
	shr.u32 	%r1, %r79, 5;
	bfe.s32 	%r80, %r79, 5, 1;
	and.b32 	%r81, %r79, 128;
	bfe.u32 	%r82, %r79, 3, 5;
	or.b32 	%r83, %r82, 32;
	shl.b32 	%r84, %r79, 3;
	and.b32 	%r85, %r84, 56;
	cvt.u64.u32 	%rd62, %r82;
	cvt.u64.u32 	%rd63, %r83;
	cvt.u64.u32 	%rd64, %r85;
	or.b64 	%rd65, %rd62, %rd61;
	or.b64 	%rd66, %rd63, %rd61;
	shl.b64 	%rd1, %rd65, 5;
	shl.b64 	%rd2, %rd66, 5;
	shl.b64 	%rd67, %rd65, 6;
	add.s64 	%rd41, %rd59, %rd67;
	shl.b64 	%rd68, %rd66, 6;
	add.s64 	%rd42, %rd59, %rd68;
	setp.gt.s32 	%p18, %r78, -1;
	setp.lt.s64 	%p19, %rd65, %rd60;
	setp.lt.s64 	%p20, %rd66, %rd60;
	and.pred 	%p46, %p18, %p19;
	and.pred 	%p47, %p18, %p20;
	// begin inline asm
	mov.u16 %rs1, 0x0;
	@%p46 ld.global.b16 { %rs1 }, [ %rd41 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u16 %rs2, 0x0;
	@%p47 ld.global.b16 { %rs2 }, [ %rd42 + 0 ];
	// end inline asm
	.loc	1 177 41                        // wy_fast.py:177:41
	or.b32 	%r2, %r77, %r75;
	.loc	1 177 48                        // wy_fast.py:177:48
	shl.b32 	%r86, %r2, 6;
	.loc	1 177 32                        // wy_fast.py:177:32
	mul.wide.s32 	%rd69, %r86, 2;
	add.s64 	%rd70, %rd55, %rd69;
	.loc	1 178 18                        // wy_fast.py:178:18
	shl.b64 	%rd71, %rd65, 12;
	add.s64 	%rd72, %rd70, %rd71;
	mul.wide.u32 	%rd73, %r85, 2;
	add.s64 	%rd43, %rd72, %rd73;
	shl.b64 	%rd74, %rd66, 12;
	add.s64 	%rd75, %rd70, %rd74;
	add.s64 	%rd44, %rd75, %rd73;
	// begin inline asm
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	mov.u32 %r53, 0x0;
	@%p46 ld.global.v4.b32 { %r50, %r51, %r52, %r53 }, [ %rd43 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	mov.u32 %r57, 0x0;
	@%p47 ld.global.v4.b32 { %r54, %r55, %r56, %r57 }, [ %rd44 + 0 ];
	// end inline asm
	and.b32 	%r87, %r80, 288;
	and.b32 	%r88, %r79, 24;
	mul.lo.s32 	%r89, %r88, 9;
	xor.b32 	%r90, %r89, %r85;
	xor.b32 	%r91, %r90, %r87;
	and.b32 	%r92, %r84, 512;
	shl.b32 	%r93, %r81, 3;
	or.b32 	%r94, %r92, %r91;
	or.b32 	%r95, %r94, %r93;
	shl.b32 	%r96, %r95, 1;
	mov.b32 	%r97, global_smem;
	add.s32 	%r98, %r97, 33792;
	add.s32 	%r99, %r98, %r96;
	st.shared.v4.b32 	[%r99], {%r50, %r51, %r52, %r53};
	or.b32 	%r100, %r85, 2048;
	xor.b32 	%r101, %r89, %r100;
	xor.b32 	%r102, %r101, %r87;
	or.b32 	%r103, %r102, %r92;
	or.b32 	%r104, %r103, %r93;
	shl.b32 	%r105, %r104, 1;
	add.s32 	%r106, %r98, %r105;
	st.shared.v4.b32 	[%r106], {%r54, %r55, %r56, %r57};
	.loc	1 181 52                        // wy_fast.py:181:52
	shl.b32 	%r107, %r2, 7;
	.loc	1 181 36                        // wy_fast.py:181:36
	cvt.s64.s32 	%rd3, %r107;
	mul.wide.s32 	%rd76, %r107, 2;
	add.s64 	%rd4, %rd52, %rd76;
	.loc	1 182 36                        // wy_fast.py:182:36
	add.s64 	%rd5, %rd54, %rd76;
	.loc	1 183 22                        // wy_fast.py:183:22
	or.b64 	%rd10, %rd71, %rd64;
	mov.b64 	%rd159, %rd10;
	or.b64 	%rd11, %rd74, %rd64;
	mov.b64 	%rd160, %rd11;
	shl.b64 	%rd77, %rd10, 1;
	add.s64 	%rd45, %rd4, %rd77;
	shl.b64 	%rd78, %rd11, 1;
	add.s64 	%rd46, %rd4, %rd78;
	shl.b32 	%r108, %r82, 6;
	or.b32 	%r3, %r108, %r85;
	shl.b32 	%r109, %r3, 1;
	add.s32 	%r359, %r97, %r109;
	add.s32 	%r361, %r359, 4096;
	selp.b32 	%r6, 16, 0, %p46;
	// begin inline asm
	cp.async.cg.shared.global [ %r359 + 0 ], [ %rd45 + 0 ], 0x10, %r6;
	// end inline asm
	selp.b32 	%r7, 16, 0, %p47;
	// begin inline asm
	cp.async.cg.shared.global [ %r361 + 0 ], [ %rd46 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd79, %rd64, 64;
	or.b64 	%rd157, %rd71, %rd79;
	or.b64 	%rd158, %rd74, %rd79;
	add.s64 	%rd47, %rd45, 128;
	add.s64 	%rd48, %rd46, 128;
	bar.sync 	0;
	add.s32 	%r62, %r359, 8192;
	add.s32 	%r64, %r359, 12288;
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd47 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r64 + 0 ], [ %rd48 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	or.b64 	%rd80, %rd64, 128;
	or.b64 	%rd155, %rd71, %rd80;
	or.b64 	%rd156, %rd74, %rd80;
	add.s64 	%rd49, %rd45, 256;
	add.s64 	%rd50, %rd46, 256;
	bar.sync 	0;
	add.s32 	%r66, %r359, 16384;
	add.s32 	%r68, %r359, 20480;
	mov.b32 	%r67, 0;
	// begin inline asm
	cp.async.cg.shared.global [ %r66 + 0 ], [ %rd49 + 0 ], 0x10, %r67;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r68 + 0 ], [ %rd50 + 0 ], 0x10, %r67;
	// end inline asm
	cp.async.commit_group;
	add.s32 	%r110, %r97, 24576;
	add.s32 	%r12, %r110, %r96;
	add.s32 	%r13, %r110, %r105;
	bfe.u32 	%r111, %r98, 4, 14;
	cvt.u64.u32 	%rd81, %r111;
	or.b64 	%rd126, %rd81, 4611686293338849280;
	add.s32 	%r112, %r97, 33824;
	bfe.u32 	%r113, %r112, 4, 14;
	cvt.u64.u32 	%rd82, %r113;
	or.b64 	%rd128, %rd82, 4611686293338849280;
	add.s32 	%r114, %r97, 33856;
	bfe.u32 	%r115, %r114, 4, 14;
	cvt.u64.u32 	%rd83, %r115;
	or.b64 	%rd130, %rd83, 4611686293338849280;
	add.s32 	%r116, %r97, 33888;
	bfe.u32 	%r117, %r116, 4, 14;
	cvt.u64.u32 	%rd84, %r117;
	or.b64 	%rd132, %rd84, 4611686293338849280;
	shl.b32 	%r118, %r79, 6;
	and.b32 	%r119, %r118, 960;
	shr.u32 	%r120, %r79, 1;
	and.b32 	%r121, %r120, 8;
	or.b32 	%r122, %r119, %r121;
	shl.b32 	%r123, %r79, 5;
	and.b32 	%r124, %r123, 3072;
	or.b32 	%r125, %r122, %r124;
	and.b32 	%r126, %r84, 504;
	or.b32 	%r127, %r93, %r126;
	or.b32 	%r128, %r127, %r92;
	shr.u32 	%r129, %r125, 2;
	and.b32 	%r130, %r129, 1008;
	add.s32 	%r131, %r110, %r130;
	shl.b32 	%r132, %r125, 1;
	add.s32 	%r133, %r131, %r132;
	shr.u32 	%r134, %r81, 1;
	add.s32 	%r531, %r133, %r134;
	add.s32 	%r536, %r531, 32;
	shr.u32 	%r135, %r128, 2;
	and.b32 	%r136, %r135, 496;
	add.s32 	%r137, %r110, %r136;
	shl.b32 	%r138, %r128, 1;
	add.s32 	%r16, %r137, %r138;
	or.b32 	%r139, %r128, 2048;
	shr.u32 	%r140, %r139, 2;
	and.b32 	%r141, %r140, 1008;
	add.s32 	%r142, %r110, %r141;
	add.s32 	%r17, %r142, %r138;
	.loc	1 184 22                        // wy_fast.py:184:22
	mov.b32 	%r20, {%rs1, %rs1};
	mov.b32 	%r24, {%rs2, %rs2};
	mov.b32 	%r630, 2;
	mov.b32 	%r629, -1;
	mov.b64 	%rd147, 192;
	mov.pred 	%p21, -1;
	mov.pred 	%p40, %p21;
	mov.pred 	%p41, %p46;
	mov.pred 	%p42, %p47;
	mov.pred 	%p43, %p46;
	mov.pred 	%p44, %p47;
	mov.b64 	%rd148, %rd155;
	mov.b64 	%rd149, %rd156;
	mov.b64 	%rd150, %rd157;
	mov.b64 	%rd151, %rd158;
	mov.b64 	%rd152, %rd159;
	mov.b64 	%rd153, %rd160;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd22, %rd151;
	mov.b64 	%rd21, %rd150;
	mov.b64 	%rd151, %rd149;
	mov.b64 	%rd150, %rd148;
	mov.pred 	%p5, %p42;
	mov.pred 	%p4, %p41;
	mov.pred 	%p3, %p40;
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r321, %r629, 1;
	setp.gt.s32 	%p27, %r321, 2;
	selp.b32 	%r629, 0, %r321, %p27;
	.loc	1 183 22                        // wy_fast.py:183:22
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r322, %r629, 13;
	add.s32 	%r324, %r97, %r322;
	add.s32 	%r326, %r324, %r109;
	ld.shared.v4.b32 	{%r327, %r328, %r329, %r330}, [%r326];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r331, %r330, %r20;
	mul.bf16x2 	%r332, %r329, %r20;
	mul.bf16x2 	%r333, %r328, %r20;
	mul.bf16x2 	%r334, %r327, %r20;
	.loc	1 183 22                        // wy_fast.py:183:22
	ld.shared.v4.b32 	{%r335, %r336, %r337, %r338}, [%r326+4096];
	.loc	1 184 22                        // wy_fast.py:184:22
	mul.bf16x2 	%r339, %r338, %r24;
	mul.bf16x2 	%r340, %r337, %r24;
	mul.bf16x2 	%r341, %r336, %r24;
	mul.bf16x2 	%r342, %r335, %r24;
	st.shared.v4.b32 	[%r12], {%r334, %r333, %r332, %r331};
	st.shared.v4.b32 	[%r13], {%r342, %r341, %r340, %r339};
	.loc	1 185 26                        // wy_fast.py:185:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r343, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r344, %r343, 4;
	and.b32 	%r345, %r344, 64;
	add.s32 	%r346, %r345, %r110;
	bfe.u32 	%r347, %r346, 4, 14;
	cvt.u64.u32 	%rd98, %r347;
	or.b64 	%rd86, %rd98, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203,%r204,%r205,%r206}, %rd126, %rd86, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r348, %r346, 2048;
	bfe.u32 	%r349, %r348, 4, 14;
	cvt.u64.u32 	%rd99, %r349;
	or.b64 	%rd88, %rd99, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203,%r204,%r205,%r206}, %rd128, %rd88, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r350, %r346, 4096;
	bfe.u32 	%r351, %r350, 4, 14;
	cvt.u64.u32 	%rd100, %r351;
	or.b64 	%rd90, %rd100, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203,%r204,%r205,%r206}, %rd130, %rd90, %p21, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r352, %r346, 6144;
	bfe.u32 	%r353, %r352, 4, 14;
	cvt.u64.u32 	%rd101, %r353;
	or.b64 	%rd92, %rd101, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203,%r204,%r205,%r206}, %rd132, %rd92, %p21, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r274, %r110;
	mov.b32 	%r272, %r67;
	mov.b32 	%r273, %r67;
	mov.b32 	%r275, %r67;
	mov.b32 	%r276, %r67;
	mov.b32 	%r271, %r98;
	// begin inline asm
	// wait for regs: %r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203,%r204,%r205,%r206,%r271,%r272,%r273,%r274,%r275,%r276
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 186 29                        // wy_fast.py:186:29
	cvt.rn.bf16x2.f32 	%r300, %r192, %r191;
	cvt.rn.bf16x2.f32 	%r301, %r194, %r193;
	cvt.rn.bf16x2.f32 	%r302, %r196, %r195;
	cvt.rn.bf16x2.f32 	%r303, %r198, %r197;
	cvt.rn.bf16x2.f32 	%r305, %r200, %r199;
	cvt.rn.bf16x2.f32 	%r306, %r202, %r201;
	cvt.rn.bf16x2.f32 	%r307, %r204, %r203;
	cvt.rn.bf16x2.f32 	%r308, %r206, %r205;
	.loc	1 186 22                        // wy_fast.py:186:22
	shl.b64 	%rd102, %rd152, 1;
	add.s64 	%rd93, %rd5, %rd102;
	shl.b64 	%rd103, %rd153, 1;
	add.s64 	%rd94, %rd5, %rd103;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r531], {%r300, %r301, %r302, %r303};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r536], {%r305, %r306, %r307, %r308};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r313, %r314, %r315, %r316}, [%r17+4096];
	ld.shared.v4.b32 	{%r309, %r310, %r311, %r312}, [%r16];
	// begin inline asm
	@%p43 st.global.v4.b32 [ %rd93 + 0 ], { %r309, %r310, %r311, %r312 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd94 + 0 ], { %r313, %r314, %r315, %r316 };
	// end inline asm
	.loc	1 180 21                        // wy_fast.py:180:21
	add.s32 	%r354, %r630, 1;
	setp.gt.s32 	%p28, %r354, 2;
	selp.b32 	%r630, 0, %r354, %p28;
	or.b64 	%rd148, %rd10, %rd147;
	or.b64 	%rd149, %rd11, %rd147;
	.loc	1 183 22                        // wy_fast.py:183:22
	shl.b64 	%rd104, %rd148, 1;
	add.s64 	%rd95, %rd4, %rd104;
	shl.b64 	%rd105, %rd149, 1;
	add.s64 	%rd96, %rd4, %rd105;
	shl.b32 	%r355, %r630, 13;
	add.s32 	%r356, %r97, %r355;
	add.s32 	%r317, %r356, %r109;
	add.s32 	%r319, %r317, 4096;
	// begin inline asm
	cp.async.cg.shared.global [ %r317 + 0 ], [ %rd95 + 0 ], 0x10, %r67;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r319 + 0 ], [ %rd96 + 0 ], 0x10, %r67;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd147, 256;
	mov.pred 	%p40, 0;
	mov.pred 	%p41, %p40;
	mov.pred 	%p42, %p40;
	mov.pred 	%p43, %p4;
	mov.pred 	%p44, %p5;
	mov.b64 	%rd152, %rd21;
	mov.b64 	%rd153, %rd22;
	.loc	1 180 21                        // wy_fast.py:180:21
	@%p3 bra 	$L__BB0_1;
// %bb.2:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 189 37                        // wy_fast.py:189:37
	mul.wide.s32 	%rd115, %r2, 4;
	add.s64 	%rd116, %rd40, %rd115;
	.loc	1 190 26                        // wy_fast.py:190:26
	shl.b64 	%rd117, %rd1, 2;
	add.s64 	%rd106, %rd116, %rd117;
	shl.b64 	%rd118, %rd2, 2;
	add.s64 	%rd107, %rd116, %rd118;
	// begin inline asm
	mov.u32 %r357, 0x0;
	@%p46 ld.global.b32 { %r357 }, [ %rd106 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r358, 0x0;
	@%p47 ld.global.b32 { %r358 }, [ %rd107 + 0 ];
	// end inline asm
	.loc	1 190 18                        // wy_fast.py:190:18
	mul.f32 	%r373, %r357, 0f3FB8AA3B;
	ex2.approx.f32 	%r30, %r373;
	mul.f32 	%r374, %r358, 0f3FB8AA3B;
	ex2.approx.f32 	%r38, %r374;
	.loc	1 193 36                        // wy_fast.py:193:36
	shl.b64 	%rd119, %rd3, 1;
	add.s64 	%rd27, %rd38, %rd119;
	.loc	1 194 36                        // wy_fast.py:194:36
	add.s64 	%rd28, %rd39, %rd119;
	.loc	1 195 22                        // wy_fast.py:195:22
	add.s64 	%rd108, %rd27, %rd77;
	add.s64 	%rd109, %rd27, %rd78;
	// begin inline asm
	cp.async.cg.shared.global [ %r359 + 0 ], [ %rd108 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r361 + 0 ], [ %rd109 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd110, %rd108, 128;
	add.s64 	%rd111, %rd109, 128;
	bar.sync 	0;
	// begin inline asm
	cp.async.cg.shared.global [ %r62 + 0 ], [ %rd110 + 0 ], 0x10, %r6;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r64 + 0 ], [ %rd111 + 0 ], 0x10, %r7;
	// end inline asm
	cp.async.commit_group;
	add.s64 	%rd112, %rd108, 256;
	add.s64 	%rd113, %rd109, 256;
	bar.sync 	0;
	mov.b32 	%r368, 0;
	// begin inline asm
	cp.async.cg.shared.global [ %r66 + 0 ], [ %rd112 + 0 ], 0x10, %r368;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r68 + 0 ], [ %rd113 + 0 ], 0x10, %r368;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r632, 2;
	mov.b32 	%r631, -1;
	mov.b64 	%rd154, 192;
	mov.pred 	%p32, -1;
	mov.pred 	%p45, %p32;
	mov.pred 	%p48, %p46;
	mov.pred 	%p49, %p47;
$L__BB0_3:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // wy_fast.py:0:22
	mov.b64 	%rd33, %rd158;
	mov.b64 	%rd32, %rd157;
	mov.b64 	%rd158, %rd156;
	mov.b64 	%rd157, %rd155;
	mov.pred 	%p10, %p47;
	mov.pred 	%p9, %p46;
	mov.pred 	%p8, %p45;
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r553, %r631, 1;
	setp.gt.s32 	%p38, %r553, 2;
	selp.b32 	%r631, 0, %r553, %p38;
	.loc	1 195 22                        // wy_fast.py:195:22
	cp.async.wait_group 	2;
	bar.sync 	0;
	shl.b32 	%r554, %r631, 13;
	add.s32 	%r556, %r97, %r554;
	add.s32 	%r558, %r556, %r109;
	ld.shared.v4.b32 	{%r559, %r560, %r561, %r562}, [%r558];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r563, %r559, %r20;
	mul.bf16x2 	%r564, %r560, %r20;
	mul.bf16x2 	%r565, %r561, %r20;
	mul.bf16x2 	%r566, %r562, %r20;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs3, %rs4}, %r566;
	cvt.f32.bf16 	%r567, %rs4;
	cvt.f32.bf16 	%r568, %rs3;
	mov.b32 	{%rs5, %rs6}, %r565;
	cvt.f32.bf16 	%r569, %rs6;
	cvt.f32.bf16 	%r570, %rs5;
	mov.b32 	{%rs7, %rs8}, %r564;
	cvt.f32.bf16 	%r571, %rs8;
	cvt.f32.bf16 	%r572, %rs7;
	mov.b32 	{%rs9, %rs10}, %r563;
	cvt.f32.bf16 	%r573, %rs10;
	cvt.f32.bf16 	%r574, %rs9;
	mul.f32 	%r575, %r30, %r574;
	mul.f32 	%r576, %r30, %r573;
	mul.f32 	%r577, %r30, %r572;
	mul.f32 	%r578, %r30, %r571;
	mul.f32 	%r579, %r30, %r570;
	mul.f32 	%r580, %r30, %r569;
	mul.f32 	%r581, %r30, %r568;
	mul.f32 	%r582, %r30, %r567;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r583, %r582, %r581;
	cvt.rn.bf16x2.f32 	%r584, %r580, %r579;
	cvt.rn.bf16x2.f32 	%r585, %r578, %r577;
	cvt.rn.bf16x2.f32 	%r586, %r576, %r575;
	.loc	1 195 22                        // wy_fast.py:195:22
	ld.shared.v4.b32 	{%r587, %r588, %r589, %r590}, [%r558+4096];
	.loc	1 196 21                        // wy_fast.py:196:21
	mul.bf16x2 	%r591, %r587, %r24;
	mul.bf16x2 	%r592, %r588, %r24;
	mul.bf16x2 	%r593, %r589, %r24;
	mul.bf16x2 	%r594, %r590, %r24;
	.loc	1 198 20                        // wy_fast.py:198:20
	mov.b32 	{%rs11, %rs12}, %r594;
	cvt.f32.bf16 	%r595, %rs12;
	cvt.f32.bf16 	%r596, %rs11;
	mov.b32 	{%rs13, %rs14}, %r593;
	cvt.f32.bf16 	%r597, %rs14;
	cvt.f32.bf16 	%r598, %rs13;
	mov.b32 	{%rs15, %rs16}, %r592;
	cvt.f32.bf16 	%r599, %rs16;
	cvt.f32.bf16 	%r600, %rs15;
	mov.b32 	{%rs17, %rs18}, %r591;
	cvt.f32.bf16 	%r601, %rs18;
	cvt.f32.bf16 	%r602, %rs17;
	mul.f32 	%r603, %r38, %r602;
	mul.f32 	%r604, %r38, %r601;
	mul.f32 	%r605, %r38, %r600;
	mul.f32 	%r606, %r38, %r599;
	mul.f32 	%r607, %r38, %r598;
	mul.f32 	%r608, %r38, %r597;
	mul.f32 	%r609, %r38, %r596;
	mul.f32 	%r610, %r38, %r595;
	.loc	1 202 34                        // wy_fast.py:202:34
	cvt.rn.bf16x2.f32 	%r611, %r610, %r609;
	cvt.rn.bf16x2.f32 	%r612, %r608, %r607;
	cvt.rn.bf16x2.f32 	%r613, %r606, %r605;
	cvt.rn.bf16x2.f32 	%r614, %r604, %r603;
	st.shared.v4.b32 	[%r12], {%r586, %r585, %r584, %r583};
	st.shared.v4.b32 	[%r13], {%r614, %r613, %r612, %r611};
	.loc	1 202 26                        // wy_fast.py:202:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	shfl.sync.idx.b32 	%r615, %r1, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r616, %r615, 4;
	and.b32 	%r617, %r616, 64;
	add.s32 	%r618, %r617, %r110;
	bfe.u32 	%r619, %r618, 4, 14;
	cvt.u64.u32 	%rd139, %r619;
	or.b64 	%rd127, %rd139, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r433,%r434,%r435,%r436,%r437,%r438}, %rd126, %rd127, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r620, %r618, 2048;
	bfe.u32 	%r621, %r620, 4, 14;
	cvt.u64.u32 	%rd140, %r621;
	or.b64 	%rd129, %rd140, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r433,%r434,%r435,%r436,%r437,%r438}, %rd128, %rd129, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r622, %r618, 4096;
	bfe.u32 	%r623, %r622, 4, 14;
	cvt.u64.u32 	%rd141, %r623;
	or.b64 	%rd131, %rd141, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r433,%r434,%r435,%r436,%r437,%r438}, %rd130, %rd131, %p32, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r624, %r618, 6144;
	bfe.u32 	%r625, %r624, 4, 14;
	cvt.u64.u32 	%rd142, %r625;
	or.b64 	%rd133, %rd142, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r433,%r434,%r435,%r436,%r437,%r438}, %rd132, %rd133, %p32, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r503, %r98;
	mov.b32 	%r504, %r368;
	mov.b32 	%r505, %r368;
	mov.b32 	%r507, %r368;
	mov.b32 	%r508, %r368;
	mov.b32 	%r506, %r110;
	// begin inline asm
	// wait for regs: %r423,%r424,%r425,%r426,%r427,%r428,%r429,%r430,%r431,%r432,%r433,%r434,%r435,%r436,%r437,%r438,%r503,%r504,%r505,%r506,%r507,%r508
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 203 29                        // wy_fast.py:203:29
	cvt.rn.bf16x2.f32 	%r532, %r424, %r423;
	cvt.rn.bf16x2.f32 	%r533, %r426, %r425;
	cvt.rn.bf16x2.f32 	%r534, %r428, %r427;
	cvt.rn.bf16x2.f32 	%r535, %r430, %r429;
	cvt.rn.bf16x2.f32 	%r537, %r432, %r431;
	cvt.rn.bf16x2.f32 	%r538, %r434, %r433;
	cvt.rn.bf16x2.f32 	%r539, %r436, %r435;
	cvt.rn.bf16x2.f32 	%r540, %r438, %r437;
	.loc	1 203 22                        // wy_fast.py:203:22
	shl.b64 	%rd143, %rd159, 1;
	add.s64 	%rd134, %rd28, %rd143;
	shl.b64 	%rd144, %rd160, 1;
	add.s64 	%rd135, %rd28, %rd144;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r531], {%r532, %r533, %r534, %r535};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r536], {%r537, %r538, %r539, %r540};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r545, %r546, %r547, %r548}, [%r17+4096];
	ld.shared.v4.b32 	{%r541, %r542, %r543, %r544}, [%r16];
	// begin inline asm
	@%p48 st.global.v4.b32 [ %rd134 + 0 ], { %r541, %r542, %r543, %r544 };
	// end inline asm
	// begin inline asm
	@%p49 st.global.v4.b32 [ %rd135 + 0 ], { %r545, %r546, %r547, %r548 };
	// end inline asm
	.loc	1 192 21                        // wy_fast.py:192:21
	add.s32 	%r626, %r632, 1;
	setp.gt.s32 	%p39, %r626, 2;
	selp.b32 	%r632, 0, %r626, %p39;
	or.b64 	%rd155, %rd10, %rd154;
	or.b64 	%rd156, %rd11, %rd154;
	.loc	1 195 22                        // wy_fast.py:195:22
	shl.b64 	%rd145, %rd155, 1;
	add.s64 	%rd136, %rd27, %rd145;
	shl.b64 	%rd146, %rd156, 1;
	add.s64 	%rd137, %rd27, %rd146;
	shl.b32 	%r627, %r632, 13;
	add.s32 	%r628, %r97, %r627;
	add.s32 	%r549, %r628, %r109;
	add.s32 	%r551, %r549, 4096;
	// begin inline asm
	cp.async.cg.shared.global [ %r549 + 0 ], [ %rd136 + 0 ], 0x10, %r368;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r551 + 0 ], [ %rd137 + 0 ], 0x10, %r368;
	// end inline asm
	cp.async.commit_group;
	mov.b64 	%rd154, 256;
	mov.pred 	%p45, 0;
	mov.pred 	%p46, %p45;
	mov.pred 	%p47, %p45;
	mov.pred 	%p48, %p9;
	mov.pred 	%p49, %p10;
	mov.b64 	%rd159, %rd32;
	mov.b64 	%rd160, %rd33;
	.loc	1 192 21                        // wy_fast.py:192:21
	@%p8 bra 	$L__BB0_3;
// %bb.4:
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 192 4                         // wy_fast.py:192:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 124                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x75 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 119                                 // DW_AT_name
.b8 121
.b8 95
.b8 102
.b8 97
.b8 115
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}
