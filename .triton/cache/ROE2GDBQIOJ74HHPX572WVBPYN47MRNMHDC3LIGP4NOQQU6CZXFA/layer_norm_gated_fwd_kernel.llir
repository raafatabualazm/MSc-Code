; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @layer_norm_gated_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = shl nuw nsw i32 %10, 2, !dbg !9
  %12 = and i32 %11, 124, !dbg !9
  %13 = shl i32 %9, 4, !dbg !10
  %14 = sext i32 %6 to i64, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !11
  %16 = lshr i32 %10, 5, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = zext nneg i32 %17 to i64, !dbg !12
  %19 = or disjoint i64 %18, %15, !dbg !12
  %20 = shl nsw i64 %19, 7, !dbg !12
  %21 = zext nneg i32 %12 to i64, !dbg !12
  %22 = or disjoint i64 %20, %21, !dbg !12
  %23 = getelementptr bfloat, ptr addrspace(1) %0, i64 %22, !dbg !12
  %24 = icmp sgt i32 %13, -1, !dbg !12
  %25 = icmp slt i64 %19, %14, !dbg !12
  %26 = and i1 %24, %25, !dbg !12
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %26) #6, !dbg !12
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !12
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !12
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !12
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !12
  %32 = fpext <2 x bfloat> %29 to <2 x float>, !dbg !13
  %33 = fpext <2 x bfloat> %31 to <2 x float>, !dbg !13
  %34 = fmul <2 x float> %32, %32, !dbg !14
  %35 = fmul <2 x float> %32, %32, !dbg !14
  %36 = fmul <2 x float> %33, %33, !dbg !14
  %37 = fmul <2 x float> %33, %33, !dbg !14
  %shift = shufflevector <2 x float> %35, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %38 = fadd <2 x float> %34, %shift, !dbg !15
  %39 = fadd <2 x float> %36, %38, !dbg !15
  %shift1 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !15
  %40 = fadd <2 x float> %shift1, %39, !dbg !15
  %41 = extractelement <2 x float> %40, i64 0, !dbg !15
  %42 = bitcast float %41 to i32, !dbg !19
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = fadd float %41, %44, !dbg !15
  %46 = bitcast float %45 to i32, !dbg !19
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = fadd float %45, %48, !dbg !15
  %50 = bitcast float %49 to i32, !dbg !19
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !19
  %52 = bitcast i32 %51 to float, !dbg !19
  %53 = fadd float %49, %52, !dbg !15
  %54 = bitcast float %53 to i32, !dbg !19
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = fadd float %53, %56, !dbg !15
  %58 = bitcast float %57 to i32, !dbg !19
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = fadd float %57, %60, !dbg !15
  %62 = tail call float @llvm.nvvm.div.full(float %61, float 1.280000e+02), !dbg !20
  %63 = fadd float %5, %62, !dbg !21
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i = icmp eq i32 %64, 0, !dbg !22
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i = icmp eq i32 %65, 0, !dbg !22
  br i1 %.not.i, label %71, label %66, !dbg !22

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !22

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !22

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !22
  %76 = and i32 %10, 15, !dbg !12
  %77 = zext nneg i32 %76 to i64, !dbg !12
  %78 = or disjoint i64 %15, %77, !dbg !12
  %79 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !24
  %81 = icmp slt i64 %78, %14, !dbg !24
  %82 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !24
  store float %79, ptr addrspace(3) %82, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %83 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %76, !dbg !24
  %84 = load i32, ptr addrspace(3) %83, align 4, !dbg !24
  %85 = and i32 %10, 496, !dbg !24
  %86 = icmp eq i32 %85, 0, !dbg !24
  %87 = and i1 %86, %81, !dbg !24
  %88 = and i1 %24, %87, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %80, i1 %88) #6, !dbg !24
  %89 = getelementptr bfloat, ptr addrspace(1) %3, i64 %21, !dbg !25
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #6, !dbg !26
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !26
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !26
  %93 = extractvalue { i32, i32 } %90, 1, !dbg !26
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !26
  %95 = getelementptr bfloat, ptr addrspace(1) %1, i64 %22, !dbg !27
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %26) #6, !dbg !27
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !27
  %98 = bitcast i32 %97 to <2 x bfloat>, !dbg !27
  %99 = extractvalue { i32, i32 } %96, 1, !dbg !27
  %100 = bitcast i32 %99 to <2 x bfloat>, !dbg !27
  %101 = fpext <2 x bfloat> %92 to <2 x float>, !dbg !28
  %102 = insertelement <2 x float> poison, float %79, i64 0, !dbg !29
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !29
  %104 = fmul <2 x float> %103, %32, !dbg !29
  %105 = fmul <2 x float> %104, %101, !dbg !30
  %106 = fpext <2 x bfloat> %98 to <2 x float>, !dbg !31
  %107 = fmul <2 x float> %105, %106, !dbg !32
  %108 = extractelement <2 x float> %106, i64 0, !dbg !33
  %109 = fsub float 0.000000e+00, %108, !dbg !33
  %110 = extractelement <2 x float> %106, i64 1, !dbg !33
  %111 = fsub float 0.000000e+00, %110, !dbg !33
  %112 = fmul float %109, 0x3FF7154760000000, !dbg !35
  %113 = tail call float @llvm.nvvm.ex2.approx.f(float %112), !dbg !35
  %114 = fmul float %111, 0x3FF7154760000000, !dbg !35
  %115 = tail call float @llvm.nvvm.ex2.approx.f(float %114), !dbg !35
  %116 = fadd float %113, 1.000000e+00, !dbg !36
  %117 = fadd float %115, 1.000000e+00, !dbg !36
  %118 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %116), !dbg !37
  %119 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %117), !dbg !37
  %120 = insertelement <2 x float> poison, float %118, i64 0, !dbg !38
  %121 = insertelement <2 x float> %120, float %119, i64 1, !dbg !38
  %122 = fmul <2 x float> %107, %121, !dbg !38
  %123 = fptrunc <2 x float> %122 to <2 x bfloat>, !dbg !39
  %124 = fpext <2 x bfloat> %94 to <2 x float>, !dbg !28
  %125 = fmul <2 x float> %103, %33, !dbg !29
  %126 = fmul <2 x float> %125, %124, !dbg !30
  %127 = fpext <2 x bfloat> %100 to <2 x float>, !dbg !31
  %128 = fmul <2 x float> %126, %127, !dbg !32
  %129 = extractelement <2 x float> %127, i64 0, !dbg !33
  %130 = fsub float 0.000000e+00, %129, !dbg !33
  %131 = extractelement <2 x float> %127, i64 1, !dbg !33
  %132 = fsub float 0.000000e+00, %131, !dbg !33
  %133 = fmul float %130, 0x3FF7154760000000, !dbg !35
  %134 = tail call float @llvm.nvvm.ex2.approx.f(float %133), !dbg !35
  %135 = fmul float %132, 0x3FF7154760000000, !dbg !35
  %136 = tail call float @llvm.nvvm.ex2.approx.f(float %135), !dbg !35
  %137 = fadd float %134, 1.000000e+00, !dbg !36
  %138 = fadd float %136, 1.000000e+00, !dbg !36
  %139 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %137), !dbg !37
  %140 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %138), !dbg !37
  %141 = insertelement <2 x float> poison, float %139, i64 0, !dbg !38
  %142 = insertelement <2 x float> %141, float %140, i64 1, !dbg !38
  %143 = fmul <2 x float> %128, %142, !dbg !38
  %144 = fptrunc <2 x float> %143 to <2 x bfloat>, !dbg !39
  %145 = getelementptr bfloat, ptr addrspace(1) %2, i64 %22, !dbg !40
  %146 = bitcast <2 x bfloat> %123 to i32, !dbg !40
  %147 = bitcast <2 x bfloat> %144 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 %26) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="512" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_norm_gate.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "layer_norm_gated_fwd_kernel", linkageName: "layer_norm_gated_fwd_kernel", scope: !1, file: !1, line: 33, type: !6, scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 56, column: 24, scope: !5)
!9 = !DILocation(line: 58, column: 23, scope: !5)
!10 = !DILocation(line: 61, column: 54, scope: !5)
!11 = !DILocation(line: 61, column: 72, scope: !5)
!12 = !DILocation(line: 62, column: 18, scope: !5)
!13 = !DILocation(line: 62, column: 49, scope: !5)
!14 = !DILocation(line: 77, column: 32, scope: !5)
!15 = !DILocation(line: 260, column: 15, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !5, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!18 = !DILocation(line: 77, column: 23, scope: !5)
!19 = !DILocation(line: 290, column: 36, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 77, column: 50, scope: !5)
!21 = !DILocation(line: 78, column: 33, scope: !5)
!22 = !DILocation(line: 78, column: 25, scope: !5)
!23 = !DILocation(line: 78, column: 17, scope: !5)
!24 = !DILocation(line: 81, column: 21, scope: !5)
!25 = !DILocation(line: 84, column: 26, scope: !5)
!26 = !DILocation(line: 84, column: 22, scope: !5)
!27 = !DILocation(line: 94, column: 18, scope: !5)
!28 = !DILocation(line: 84, column: 44, scope: !5)
!29 = !DILocation(line: 87, column: 86, scope: !5)
!30 = !DILocation(line: 88, column: 20, scope: !5)
!31 = !DILocation(line: 94, column: 49, scope: !5)
!32 = !DILocation(line: 98, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !34)
!34 = !DILocation(line: 98, column: 37, scope: !5)
!35 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !34)
!38 = !DILocation(line: 98, column: 26, scope: !5)
!39 = !DILocation(line: 104, column: 25, scope: !5)
!40 = !DILocation(line: 104, column: 18, scope: !5)
!41 = !DILocation(line: 104, column: 4, scope: !5)
