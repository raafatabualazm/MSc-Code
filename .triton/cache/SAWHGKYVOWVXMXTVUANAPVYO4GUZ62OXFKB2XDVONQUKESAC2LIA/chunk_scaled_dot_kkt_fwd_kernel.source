#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)
module {
  tt.func public @chunk_scaled_dot_kkt_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg4: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c32_i32 = arith.constant 32 : i32 loc(#loc3)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32_0 : i32 loc(#loc3)
    %c32_i32_1 = arith.constant 32 : i32 loc(#loc4)
    %c32_i32_2 = arith.constant 32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32_2 : i32 loc(#loc4)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc5)
    %5 = arith.extsi %arg4 : i32 to i64 loc(#loc5)
    %6 = arith.muli %4, %5 : i64 loc(#loc5)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc5)
    %7 = arith.cmpi sle, %6, %c2147483647_i64 : i64 loc(#loc5)
    %8 = arith.cmpi sge, %6, %c-2147483648_i64 : i64 loc(#loc5)
    %9 = arith.andi %7, %8 : i1 loc(#loc5)
    %10 = arith.muli %2, %arg4 : i32 loc(#loc5)
    %11 = arith.extsi %2 : i32 to i64 loc(#loc6)
    %12 = arith.extsi %arg4 : i32 to i64 loc(#loc6)
    %13 = arith.muli %11, %12 : i64 loc(#loc6)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc6)
    %14 = arith.cmpi sle, %13, %c2147483647_i64_3 : i64 loc(#loc6)
    %15 = arith.cmpi sge, %13, %c-2147483648_i64_4 : i64 loc(#loc6)
    %16 = arith.andi %14, %15 : i1 loc(#loc6)
    %17 = arith.muli %2, %arg4 : i32 loc(#loc6)
    %18 = arith.extsi %17 : i32 to i64 loc(#loc7)
    %19 = arith.extsi %arg4 : i32 to i64 loc(#loc7)
    %20 = arith.addi %18, %19 : i64 loc(#loc7)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc7)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc7)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_5 : i64 loc(#loc7)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_6 : i64 loc(#loc7)
    %23 = arith.andi %21, %22 : i1 loc(#loc7)
    %24 = arith.addi %17, %arg4 : i32 loc(#loc7)
    %c64_i32 = arith.constant 64 : i32 loc(#loc8)
    %c64_i32_7 = arith.constant 64 : i32 loc(#loc8)
    %25 = arith.extsi %0 : i32 to i64 loc(#loc8)
    %26 = arith.extsi %c64_i32_7 : i32 to i64 loc(#loc8)
    %27 = arith.muli %25, %26 : i64 loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %28 = arith.cmpi sle, %27, %c2147483647_i64_8 : i64 loc(#loc8)
    %29 = arith.cmpi sge, %27, %c-2147483648_i64_9 : i64 loc(#loc8)
    %30 = arith.andi %28, %29 : i1 loc(#loc8)
    %31 = arith.muli %0, %c64_i32_7 : i32 loc(#loc8)
    %32 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc9)
    %33 = tt.splat %31 : i32 -> tensor<64xi32> loc(#loc10)
    %34 = arith.extsi %33 : tensor<64xi32> to tensor<64xi64> loc(#loc10)
    %35 = arith.extsi %32 : tensor<64xi32> to tensor<64xi64> loc(#loc10)
    %36 = arith.addi %34, %35 : tensor<64xi64> loc(#loc10)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc10)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc10)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc10)
    %37 = arith.cmpi sle, %36, %cst : tensor<64xi64> loc(#loc10)
    %cst_12 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc10)
    %38 = arith.cmpi sge, %36, %cst_12 : tensor<64xi64> loc(#loc10)
    %39 = arith.andi %37, %38 : tensor<64xi1> loc(#loc10)
    %40 = arith.addi %33, %32 : tensor<64xi32> loc(#loc10)
    %41 = tt.splat %arg4 : i32 -> tensor<64xi32> loc(#loc11)
    %42 = arith.cmpi slt, %40, %41 : tensor<64xi32> loc(#loc11)
    %c32_i32_13 = arith.constant 32 : i32 loc(#loc12)
    %c32_i32_14 = arith.constant 32 : i32 loc(#loc12)
    %43 = arith.extsi %10 : i32 to i64 loc(#loc12)
    %44 = arith.extsi %c32_i32_14 : i32 to i64 loc(#loc12)
    %45 = arith.muli %43, %44 : i64 loc(#loc12)
    %c2147483647_i64_15 = arith.constant 2147483647 : i64 loc(#loc12)
    %c-2147483648_i64_16 = arith.constant -2147483648 : i64 loc(#loc12)
    %46 = arith.cmpi sle, %45, %c2147483647_i64_15 : i64 loc(#loc12)
    %47 = arith.cmpi sge, %45, %c-2147483648_i64_16 : i64 loc(#loc12)
    %48 = arith.andi %46, %47 : i1 loc(#loc12)
    %49 = arith.muli %10, %c32_i32_14 : i32 loc(#loc12)
    %50 = tt.addptr %arg2, %49 : !tt.ptr<bf16>, i32 loc(#loc13)
    %51 = tt.addptr %50, %3 : !tt.ptr<bf16>, i32 loc(#loc14)
    %c64_i32_17 = arith.constant 64 : i32 loc(#loc15)
    %c64_i32_18 = arith.constant 64 : i32 loc(#loc15)
    %52 = arith.extsi %0 : i32 to i64 loc(#loc15)
    %53 = arith.extsi %c64_i32_18 : i32 to i64 loc(#loc15)
    %54 = arith.muli %52, %53 : i64 loc(#loc15)
    %c2147483647_i64_19 = arith.constant 2147483647 : i64 loc(#loc15)
    %c-2147483648_i64_20 = arith.constant -2147483648 : i64 loc(#loc15)
    %55 = arith.cmpi sle, %54, %c2147483647_i64_19 : i64 loc(#loc15)
    %56 = arith.cmpi sge, %54, %c-2147483648_i64_20 : i64 loc(#loc15)
    %57 = arith.andi %55, %56 : i1 loc(#loc15)
    %58 = arith.muli %0, %c64_i32_18 : i32 loc(#loc15)
    %59 = arith.extsi %arg4 : i32 to i64 loc(#loc16)
    %c32_i64 = arith.constant 32 : i64 loc(#loc16)
    %60 = tt.make_tensor_ptr %51, [%59], [%c32_i64], [%58] {order = array<i32: 0>} : <tensor<64xbf16>> loc(#loc16)
    %61 = tt.load %60 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xbf16>> loc(#loc17)
    %62 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc18)
    %63 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_128_"() : () -> i32 loc(#loc19)
    %64 = tt.call @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_128_"() : () -> i32 loc(#loc19)
    %c0_i32 = arith.constant 0 : i32 loc(#loc20)
    %c1_i32 = arith.constant 1 : i32 loc(#loc20)
    %65 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc20)
    %66 = arith.bitcast %64 : i32 to i32 loc(#loc20)
    %67 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc20)
    %68 = ub.poison : i32 loc(#loc20)
    %69 = scf.for %arg5 = %65 to %66 step %67 iter_args(%arg6 = %62) -> (tensor<64x64xf32>)  : i32 {
      %c32_i32_48 = arith.constant 32 : i32 loc(#loc21)
      %c32_i32_49 = arith.constant 32 : i32 loc(#loc21)
      %143 = arith.extsi %10 : i32 to i64 loc(#loc21)
      %144 = arith.extsi %c32_i32_49 : i32 to i64 loc(#loc21)
      %145 = arith.muli %143, %144 : i64 loc(#loc21)
      %c2147483647_i64_50 = arith.constant 2147483647 : i64 loc(#loc21)
      %c-2147483648_i64_51 = arith.constant -2147483648 : i64 loc(#loc21)
      %146 = arith.cmpi sle, %145, %c2147483647_i64_50 : i64 loc(#loc21)
      %147 = arith.cmpi sge, %145, %c-2147483648_i64_51 : i64 loc(#loc21)
      %148 = arith.andi %146, %147 : i1 loc(#loc21)
      %149 = arith.muli %10, %c32_i32_49 : i32 loc(#loc21)
      %150 = arith.extsi %149 : i32 to i64 loc(#loc22)
      %151 = arith.extsi %3 : i32 to i64 loc(#loc22)
      %152 = arith.addi %150, %151 : i64 loc(#loc22)
      %c2147483647_i64_52 = arith.constant 2147483647 : i64 loc(#loc22)
      %c-2147483648_i64_53 = arith.constant -2147483648 : i64 loc(#loc22)
      %153 = arith.cmpi sle, %152, %c2147483647_i64_52 : i64 loc(#loc22)
      %154 = arith.cmpi sge, %152, %c-2147483648_i64_53 : i64 loc(#loc22)
      %155 = arith.andi %153, %154 : i1 loc(#loc22)
      %156 = arith.addi %149, %3 : i32 loc(#loc22)
      %c128_i32 = arith.constant 128 : i32 loc(#loc23)
      %c128_i32_54 = arith.constant 128 : i32 loc(#loc23)
      %157 = arith.extsi %156 : i32 to i64 loc(#loc23)
      %158 = arith.extsi %c128_i32_54 : i32 to i64 loc(#loc23)
      %159 = arith.muli %157, %158 : i64 loc(#loc23)
      %c2147483647_i64_55 = arith.constant 2147483647 : i64 loc(#loc23)
      %c-2147483648_i64_56 = arith.constant -2147483648 : i64 loc(#loc23)
      %160 = arith.cmpi sle, %159, %c2147483647_i64_55 : i64 loc(#loc23)
      %161 = arith.cmpi sge, %159, %c-2147483648_i64_56 : i64 loc(#loc23)
      %162 = arith.andi %160, %161 : i1 loc(#loc23)
      %163 = arith.muli %156, %c128_i32_54 : i32 loc(#loc23)
      %164 = tt.addptr %arg0, %163 : !tt.ptr<bf16>, i32 loc(#loc24)
      %c64_i32_57 = arith.constant 64 : i32 loc(#loc25)
      %c64_i32_58 = arith.constant 64 : i32 loc(#loc25)
      %165 = arith.extsi %0 : i32 to i64 loc(#loc25)
      %166 = arith.extsi %c64_i32_58 : i32 to i64 loc(#loc25)
      %167 = arith.muli %165, %166 : i64 loc(#loc25)
      %c2147483647_i64_59 = arith.constant 2147483647 : i64 loc(#loc25)
      %c-2147483648_i64_60 = arith.constant -2147483648 : i64 loc(#loc25)
      %168 = arith.cmpi sle, %167, %c2147483647_i64_59 : i64 loc(#loc25)
      %169 = arith.cmpi sge, %167, %c-2147483648_i64_60 : i64 loc(#loc25)
      %170 = arith.andi %168, %169 : i1 loc(#loc25)
      %171 = arith.muli %0, %c64_i32_58 : i32 loc(#loc25)
      %c128_i32_61 = arith.constant 128 : i32 loc(#loc26)
      %c128_i32_62 = arith.constant 128 : i32 loc(#loc26)
      %172 = arith.extsi %arg5 : i32 to i64 loc(#loc26)
      %173 = arith.extsi %c128_i32_62 : i32 to i64 loc(#loc26)
      %174 = arith.muli %172, %173 : i64 loc(#loc26)
      %c2147483647_i64_63 = arith.constant 2147483647 : i64 loc(#loc26)
      %c-2147483648_i64_64 = arith.constant -2147483648 : i64 loc(#loc26)
      %175 = arith.cmpi sle, %174, %c2147483647_i64_63 : i64 loc(#loc26)
      %176 = arith.cmpi sge, %174, %c-2147483648_i64_64 : i64 loc(#loc26)
      %177 = arith.andi %175, %176 : i1 loc(#loc26)
      %178 = arith.muli %arg5, %c128_i32_62 : i32 loc(#loc26)
      %179 = arith.extsi %arg4 : i32 to i64 loc(#loc27)
      %c128_i64 = arith.constant 128 : i64 loc(#loc27)
      %c4096_i64 = arith.constant 4096 : i64 loc(#loc27)
      %c1_i64_65 = arith.constant 1 : i64 loc(#loc27)
      %180 = tt.make_tensor_ptr %164, [%179, %c128_i64], [%c4096_i64, %c1_i64_65], [%171, %178] {order = array<i32: 1, 0>} : <tensor<64x128xbf16>> loc(#loc27)
      %181 = tt.load %180 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x128xbf16>> loc(#loc28)
      %182 = tt.trans %181 {order = array<i32: 1, 0>} : tensor<64x128xbf16> -> tensor<128x64xbf16> loc(#loc29)
      %cst_66 = arith.constant 0.000000e+00 : f32 loc(#loc30)
      %cst_67 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc30)
      %183 = tt.dot %181, %182, %cst_67, inputPrecision = tf32 : tensor<64x128xbf16> * tensor<128x64xbf16> -> tensor<64x64xf32> loc(#loc30)
      %184 = arith.addf %arg6, %183 : tensor<64x64xf32> loc(#loc31)
      scf.yield %184 : tensor<64x64xf32> loc(#loc32)
    } loc(#loc20)
    %c32_i32_21 = arith.constant 32 : i32 loc(#loc33)
    %c32_i32_22 = arith.constant 32 : i32 loc(#loc33)
    %70 = arith.extsi %10 : i32 to i64 loc(#loc33)
    %71 = arith.extsi %c32_i32_22 : i32 to i64 loc(#loc33)
    %72 = arith.muli %70, %71 : i64 loc(#loc33)
    %c2147483647_i64_23 = arith.constant 2147483647 : i64 loc(#loc33)
    %c-2147483648_i64_24 = arith.constant -2147483648 : i64 loc(#loc33)
    %73 = arith.cmpi sle, %72, %c2147483647_i64_23 : i64 loc(#loc33)
    %74 = arith.cmpi sge, %72, %c-2147483648_i64_24 : i64 loc(#loc33)
    %75 = arith.andi %73, %74 : i1 loc(#loc33)
    %76 = arith.muli %10, %c32_i32_22 : i32 loc(#loc33)
    %77 = tt.addptr %arg1, %76 : !tt.ptr<f32>, i32 loc(#loc34)
    %78 = tt.addptr %77, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %c64_i32_25 = arith.constant 64 : i32 loc(#loc36)
    %c64_i32_26 = arith.constant 64 : i32 loc(#loc36)
    %79 = arith.extsi %0 : i32 to i64 loc(#loc36)
    %80 = arith.extsi %c64_i32_26 : i32 to i64 loc(#loc36)
    %81 = arith.muli %79, %80 : i64 loc(#loc36)
    %c2147483647_i64_27 = arith.constant 2147483647 : i64 loc(#loc36)
    %c-2147483648_i64_28 = arith.constant -2147483648 : i64 loc(#loc36)
    %82 = arith.cmpi sle, %81, %c2147483647_i64_27 : i64 loc(#loc36)
    %83 = arith.cmpi sge, %81, %c-2147483648_i64_28 : i64 loc(#loc36)
    %84 = arith.andi %82, %83 : i1 loc(#loc36)
    %85 = arith.muli %0, %c64_i32_26 : i32 loc(#loc36)
    %86 = arith.extsi %arg4 : i32 to i64 loc(#loc37)
    %c32_i64_29 = arith.constant 32 : i64 loc(#loc37)
    %87 = tt.make_tensor_ptr %78, [%86], [%c32_i64_29], [%85] {order = array<i32: 0>} : <tensor<64xf32>> loc(#loc37)
    %88 = tt.load %87 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xf32>> loc(#loc38)
    %89 = tt.expand_dims %88 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc39)
    %90 = tt.expand_dims %88 {axis = 0 : i32} : tensor<64xf32> -> tensor<1x64xf32> loc(#loc40)
    %91 = tt.broadcast %89 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc41)
    %92 = tt.broadcast %90 : tensor<1x64xf32> -> tensor<64x64xf32> loc(#loc41)
    %93 = arith.subf %91, %92 : tensor<64x64xf32> loc(#loc41)
    %94 = math.exp %93 : tensor<64x64xf32> loc(#loc42)
    %95 = arith.mulf %69, %94 : tensor<64x64xf32> loc(#loc43)
    %96 = tt.expand_dims %61 {axis = 1 : i32} : tensor<64xbf16> -> tensor<64x1xbf16> loc(#loc44)
    %97 = arith.extf %96 : tensor<64x1xbf16> to tensor<64x1xf32> loc(#loc45)
    %98 = tt.broadcast %97 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc45)
    %99 = arith.mulf %95, %98 : tensor<64x64xf32> loc(#loc45)
    %100 = tt.expand_dims %40 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc46)
    %101 = tt.expand_dims %40 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
    %102 = tt.broadcast %100 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc48)
    %103 = tt.broadcast %101 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc48)
    %104 = arith.cmpi sgt, %102, %103 : tensor<64x64xi32> loc(#loc48)
    %105 = tt.expand_dims %42 {axis = 1 : i32} : tensor<64xi1> -> tensor<64x1xi1> loc(#loc49)
    %106 = tt.expand_dims %42 {axis = 0 : i32} : tensor<64xi1> -> tensor<1x64xi1> loc(#loc50)
    %107 = tt.broadcast %105 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc50)
    %108 = tt.broadcast %106 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc50)
    %109 = arith.andi %107, %108 : tensor<64x64xi1> loc(#loc50)
    %110 = arith.andi %104, %109 : tensor<64x64xi1> loc(#loc51)
    %c0_i32_30 = arith.constant 0 : i32 loc(#loc52)
    %cst_31 = arith.constant 0.000000e+00 : f32 loc(#loc52)
    %cst_32 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc52)
    %111 = arith.select %110, %99, %cst_32 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc52)
    %c32_i32_33 = arith.constant 32 : i32 loc(#loc53)
    %c32_i32_34 = arith.constant 32 : i32 loc(#loc53)
    %112 = arith.extsi %10 : i32 to i64 loc(#loc53)
    %113 = arith.extsi %c32_i32_34 : i32 to i64 loc(#loc53)
    %114 = arith.muli %112, %113 : i64 loc(#loc53)
    %c2147483647_i64_35 = arith.constant 2147483647 : i64 loc(#loc53)
    %c-2147483648_i64_36 = arith.constant -2147483648 : i64 loc(#loc53)
    %115 = arith.cmpi sle, %114, %c2147483647_i64_35 : i64 loc(#loc53)
    %116 = arith.cmpi sge, %114, %c-2147483648_i64_36 : i64 loc(#loc53)
    %117 = arith.andi %115, %116 : i1 loc(#loc53)
    %118 = arith.muli %10, %c32_i32_34 : i32 loc(#loc53)
    %119 = arith.extsi %118 : i32 to i64 loc(#loc54)
    %120 = arith.extsi %3 : i32 to i64 loc(#loc54)
    %121 = arith.addi %119, %120 : i64 loc(#loc54)
    %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc54)
    %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc54)
    %122 = arith.cmpi sle, %121, %c2147483647_i64_37 : i64 loc(#loc54)
    %123 = arith.cmpi sge, %121, %c-2147483648_i64_38 : i64 loc(#loc54)
    %124 = arith.andi %122, %123 : i1 loc(#loc54)
    %125 = arith.addi %118, %3 : i32 loc(#loc54)
    %c64_i32_39 = arith.constant 64 : i32 loc(#loc55)
    %c64_i32_40 = arith.constant 64 : i32 loc(#loc55)
    %126 = arith.extsi %125 : i32 to i64 loc(#loc55)
    %127 = arith.extsi %c64_i32_40 : i32 to i64 loc(#loc55)
    %128 = arith.muli %126, %127 : i64 loc(#loc55)
    %c2147483647_i64_41 = arith.constant 2147483647 : i64 loc(#loc55)
    %c-2147483648_i64_42 = arith.constant -2147483648 : i64 loc(#loc55)
    %129 = arith.cmpi sle, %128, %c2147483647_i64_41 : i64 loc(#loc55)
    %130 = arith.cmpi sge, %128, %c-2147483648_i64_42 : i64 loc(#loc55)
    %131 = arith.andi %129, %130 : i1 loc(#loc55)
    %132 = arith.muli %125, %c64_i32_40 : i32 loc(#loc55)
    %133 = tt.addptr %arg3, %132 : !tt.ptr<f32>, i32 loc(#loc56)
    %c64_i32_43 = arith.constant 64 : i32 loc(#loc57)
    %c64_i32_44 = arith.constant 64 : i32 loc(#loc57)
    %134 = arith.extsi %0 : i32 to i64 loc(#loc57)
    %135 = arith.extsi %c64_i32_44 : i32 to i64 loc(#loc57)
    %136 = arith.muli %134, %135 : i64 loc(#loc57)
    %c2147483647_i64_45 = arith.constant 2147483647 : i64 loc(#loc57)
    %c-2147483648_i64_46 = arith.constant -2147483648 : i64 loc(#loc57)
    %137 = arith.cmpi sle, %136, %c2147483647_i64_45 : i64 loc(#loc57)
    %138 = arith.cmpi sge, %136, %c-2147483648_i64_46 : i64 loc(#loc57)
    %139 = arith.andi %137, %138 : i1 loc(#loc57)
    %140 = arith.muli %0, %c64_i32_44 : i32 loc(#loc57)
    %141 = arith.extsi %arg4 : i32 to i64 loc(#loc58)
    %c64_i64 = arith.constant 64 : i64 loc(#loc58)
    %c2048_i64 = arith.constant 2048 : i64 loc(#loc58)
    %c1_i64 = arith.constant 1 : i64 loc(#loc58)
    %c0_i32_47 = arith.constant 0 : i32 loc(#loc58)
    %142 = tt.make_tensor_ptr %133, [%141, %c64_i64], [%c2048_i64, %c1_i64], [%140, %c0_i32_47] {order = array<i32: 1, 0>} : <tensor<64x64xf32>> loc(#loc58)
    tt.store %142, %111 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xf32>> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc62)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc62)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc63)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc64)
    tt.return %0 : tensor<64x64xf32> loc(#loc64)
  } loc(#loc61)
  tt.func private @"triton.language.standard.cdiv____(0,)cconstexpr_128__(1,)cconstexpr_128_"() -> i32 attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32 loc(#loc66)
    tt.return %c1_i32 : i32 loc(#loc66)
  ^bb1:  // no predecessors
    %0 = ub.poison : i32 loc(#loc67)
    tt.return %0 : i32 loc(#loc67)
  } loc(#loc65)
} loc(#loc)
#loc1 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:30)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:48)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:23)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:33)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":50:25)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":50:34)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":50:38)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:16)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:34)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:21)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":52:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:42)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:38)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:46)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:70)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:83)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":55:21)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":57:19)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":58:32)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":58:21)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:41)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:45)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:52)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:36)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:80)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:90)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:105)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":60:22)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:36)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:27)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:15)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:8)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:40)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:36)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:44)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:68)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:81)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":65:22)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:23)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:38)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:34)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:19)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:15)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:18)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:11)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:15)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:30)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:26)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:47)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:58)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:43)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":71:29)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:37)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:41)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:48)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:32)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:79)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:97)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:18)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:4)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":117:0)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:31)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:11)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:4)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:11)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:4)
