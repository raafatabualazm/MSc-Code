; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
.peel.next:
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %8 = and i32 %7, 65504, !dbg !10
  %9 = and i32 %7, 31, !dbg !11
  %10 = shl i32 %6, 6, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = lshr i32 %11, 5, !dbg !13
  %13 = and i32 %11, 8, !dbg !13
  %14 = icmp eq i32 %13, 0, !dbg !13
  %15 = and i32 %11, 16, !dbg !13
  %.not2 = icmp eq i32 %15, 0, !dbg !13
  %16 = lshr i32 %11, 2, !dbg !13
  %17 = and i32 %16, 7, !dbg !13
  %18 = and i32 %16, 31, !dbg !13
  %19 = and i32 %11, 128, !dbg !13
  %20 = lshr exact i32 %19, 2, !dbg !13
  %21 = or disjoint i32 %18, %20, !dbg !13
  %22 = lshr i32 %11, 1, !dbg !13
  %23 = and i32 %22, 48, !dbg !13
  %24 = or disjoint i32 %23, %17, !dbg !13
  %25 = or disjoint i32 %24, 8, !dbg !13
  %26 = mul i32 %8, %4, !dbg !14
  %27 = sext i32 %26 to i64, !dbg !15
  %28 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !15
  %29 = zext nneg i32 %9 to i64, !dbg !16
  %30 = getelementptr bfloat, ptr addrspace(1) %28, i64 %29, !dbg !16
  %31 = sext i32 %4 to i64, !dbg !17
  %32 = sext i32 %10 to i64, !dbg !17
  %33 = zext nneg i32 %21 to i64, !dbg !18
  %34 = zext nneg i32 %24 to i64, !dbg !18
  %35 = zext nneg i32 %25 to i64, !dbg !18
  %36 = or disjoint i64 %33, %32, !dbg !18
  %37 = or disjoint i64 %34, %32, !dbg !18
  %38 = or disjoint i64 %35, %32, !dbg !18
  %39 = shl nsw i64 %37, 5, !dbg !18
  %40 = shl nsw i64 %38, 5, !dbg !18
  %41 = getelementptr bfloat, ptr addrspace(1) %30, i64 %39, !dbg !18
  %42 = getelementptr bfloat, ptr addrspace(1) %30, i64 %40, !dbg !18
  %43 = icmp sgt i32 %10, -1, !dbg !18
  %44 = icmp slt i64 %37, %31, !dbg !18
  %45 = icmp slt i64 %38, %31, !dbg !18
  %46 = and i1 %43, %44, !dbg !18
  %47 = and i1 %43, %45, !dbg !18
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %41, i1 %46) #2, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %42, i1 %47) #2, !dbg !18
  %50 = or disjoint i32 %26, %9, !dbg !19
  %51 = shl i32 %50, 7, !dbg !20
  %52 = sext i32 %51 to i64, !dbg !21
  %53 = getelementptr bfloat, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = shl nuw nsw i32 %11, 3, !dbg !22
  %55 = and i32 %54, 24, !dbg !22
  %56 = zext nneg i32 %55 to i64, !dbg !22
  %57 = icmp slt i64 %36, %31, !dbg !22
  %58 = and i1 %43, %57, !dbg !22
  %.idx47 = shl nsw i64 %36, 13, !dbg !22
  %59 = getelementptr i8, ptr addrspace(1) %53, i64 %.idx47, !dbg !22
  %60 = getelementptr bfloat, ptr addrspace(1) %59, i64 %56, !dbg !22
  %61 = and i32 %54, 56, !dbg !22
  %62 = select i1 %14, i32 0, i32 72, !dbg !22
  %63 = xor i32 %62, %61, !dbg !22
  %64 = select i1 %.not2, i32 0, i32 144, !dbg !22
  %65 = xor i32 %63, %64, !dbg !22
  %66 = and i32 %54, 1792, !dbg !22
  %67 = or disjoint i32 %65, %66, !dbg !22
  %68 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %67, !dbg !22
  %69 = select i1 %58, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %68, ptr addrspace(1) %60, i32 %69) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %70 = getelementptr i8, ptr addrspace(1) %60, i64 64, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %71 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %67, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %71, ptr addrspace(1) %70, i32 %69) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %72 = getelementptr i8, ptr addrspace(1) %60, i64 128, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %73 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %67, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %73, ptr addrspace(1) %72, i32 %69) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %invariant.op = or disjoint i32 %55, 96, !dbg !23
  %74 = zext nneg i32 %invariant.op to i64, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %75 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %12, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %76 = lshr exact i32 ptrtoint (ptr addrspace(3) @global_smem to i32), 4, !dbg !24
  %77 = and i32 %76, 16383, !dbg !24
  %78 = zext nneg i32 %77 to i64, !dbg !24
  %79 = or disjoint i64 %78, -9223371899399045120, !dbg !24
  %80 = shl i32 %75, 9, !dbg !24
  %81 = and i32 %80, 2048, !dbg !24
  %82 = add i32 %81, ptrtoint (ptr addrspace(3) @global_smem to i32), !dbg !24
  %83 = lshr exact i32 %82, 4, !dbg !24
  %84 = and i32 %83, 16383, !dbg !24
  %85 = zext nneg i32 %84 to i64, !dbg !24
  %86 = or disjoint i64 %85, -9223371899399045120, !dbg !24
  %87 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i64 %79, i64 %86, i1 true) #2, !dbg !24
  %88 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 32), 4, !dbg !24
  %89 = and i32 %88, 16383, !dbg !24
  %90 = zext nneg i32 %89 to i64, !dbg !24
  %91 = or disjoint i64 %90, -9223371899399045120, !dbg !24
  %92 = add i32 %81, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 32), !dbg !24
  %93 = lshr exact i32 %92, 4, !dbg !24
  %94 = and i32 %93, 16383, !dbg !24
  %95 = zext nneg i32 %94 to i64, !dbg !24
  %96 = or disjoint i64 %95, -9223371899399045120, !dbg !24
  %97 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 0, !dbg !24
  %98 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 1, !dbg !24
  %99 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 2, !dbg !24
  %100 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 3, !dbg !24
  %101 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 4, !dbg !24
  %102 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 5, !dbg !24
  %103 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 6, !dbg !24
  %104 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 7, !dbg !24
  %105 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 8, !dbg !24
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 9, !dbg !24
  %107 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 10, !dbg !24
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 11, !dbg !24
  %109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 12, !dbg !24
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 13, !dbg !24
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 14, !dbg !24
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, 15, !dbg !24
  %113 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, i64 %91, i64 %96, i1 true) #2, !dbg !24
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 0, !dbg !24
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 1, !dbg !24
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 2, !dbg !24
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 3, !dbg !24
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 4, !dbg !24
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 5, !dbg !24
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 6, !dbg !24
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 7, !dbg !24
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 8, !dbg !24
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 9, !dbg !24
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 10, !dbg !24
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 11, !dbg !24
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 12, !dbg !24
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 13, !dbg !24
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 14, !dbg !24
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %130 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, ptr addrspace(3) @global_smem, i32 0, i32 0, ptr addrspace(3) @global_smem, i32 0, i32 0) #2, !dbg !24
  %131 = getelementptr bfloat, ptr addrspace(1) %59, i64 %74, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %gep.peel = getelementptr i8, ptr addrspace(3) %68, i32 12288, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep.peel, ptr addrspace(1) %131, i32 %69) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 0, !dbg !24
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 1, !dbg !24
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 2, !dbg !24
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 3, !dbg !24
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 4, !dbg !24
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 5, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 6, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 7, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 8, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 9, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 10, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 11, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 12, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 13, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 14, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %130, 15, !dbg !24
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %59, i64 %74, !dbg !23
  br label %148, !dbg !23

148:                                              ; preds = %.peel.next, %148
  %indvars.iv = phi i64 [ 1, %.peel.next ], [ %indvars.iv.next, %148 ]
  %149 = phi i32 [ 0, %.peel.next ], [ %153, %148 ]
  %150 = phi i32 [ 3, %.peel.next ], [ %231, %148 ]
  %.pn95 = phi float [ %132, %.peel.next ], [ %213, %148 ]
  %.pn93 = phi float [ %133, %.peel.next ], [ %214, %148 ]
  %.pn91 = phi float [ %134, %.peel.next ], [ %215, %148 ]
  %.pn89 = phi float [ %135, %.peel.next ], [ %216, %148 ]
  %.pn87 = phi float [ %136, %.peel.next ], [ %217, %148 ]
  %.pn85 = phi float [ %137, %.peel.next ], [ %218, %148 ]
  %.pn83 = phi float [ %138, %.peel.next ], [ %219, %148 ]
  %.pn81 = phi float [ %139, %.peel.next ], [ %220, %148 ]
  %.pn79 = phi float [ %140, %.peel.next ], [ %221, %148 ]
  %.pn77 = phi float [ %141, %.peel.next ], [ %222, %148 ]
  %.pn75 = phi float [ %142, %.peel.next ], [ %223, %148 ]
  %.pn73 = phi float [ %143, %.peel.next ], [ %224, %148 ]
  %.pn71 = phi float [ %144, %.peel.next ], [ %225, %148 ]
  %.pn69 = phi float [ %145, %.peel.next ], [ %226, %148 ]
  %.pn67 = phi float [ %146, %.peel.next ], [ %227, %148 ]
  %.pn65 = phi float [ %147, %.peel.next ], [ %228, %148 ]
  %151 = add i32 %149, 1, !dbg !23
  %152 = icmp sgt i32 %151, 3, !dbg !23
  %153 = select i1 %152, i32 0, i32 %151, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 2), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx45 = shl i32 %153, 12, !dbg !22
  %154 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx45, !dbg !22
  %155 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %12, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %156 = ptrtoint ptr addrspace(3) %154 to i32, !dbg !24
  %157 = lshr exact i32 %156, 4, !dbg !24
  %158 = and i32 %157, 16383, !dbg !24
  %159 = zext nneg i32 %158 to i64, !dbg !24
  %160 = or disjoint i64 %159, -9223371899399045120, !dbg !24
  %161 = shl i32 %155, 9, !dbg !24
  %162 = and i32 %161, 2048, !dbg !24
  %163 = add i32 %162, %156, !dbg !24
  %164 = lshr exact i32 %163, 4, !dbg !24
  %165 = and i32 %164, 16383, !dbg !24
  %166 = zext nneg i32 %165 to i64, !dbg !24
  %167 = or disjoint i64 %166, -9223371899399045120, !dbg !24
  %168 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %.pn95, float %.pn93, float %.pn91, float %.pn89, float %.pn87, float %.pn85, float %.pn83, float %.pn81, float %.pn79, float %.pn77, float %.pn75, float %.pn73, float %.pn71, float %.pn69, float %.pn67, float %.pn65, i64 %160, i64 %167, i1 true) #2, !dbg !24
  %169 = add i32 %156, 32, !dbg !24
  %170 = lshr exact i32 %169, 4, !dbg !24
  %171 = and i32 %170, 16383, !dbg !24
  %172 = zext nneg i32 %171 to i64, !dbg !24
  %173 = or disjoint i64 %172, -9223371899399045120, !dbg !24
  %174 = add i32 %169, %162, !dbg !24
  %175 = lshr exact i32 %174, 4, !dbg !24
  %176 = and i32 %175, 16383, !dbg !24
  %177 = zext nneg i32 %176 to i64, !dbg !24
  %178 = or disjoint i64 %177, -9223371899399045120, !dbg !24
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 0, !dbg !24
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 1, !dbg !24
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 2, !dbg !24
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 3, !dbg !24
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 4, !dbg !24
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 5, !dbg !24
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 6, !dbg !24
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 7, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 8, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 9, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 10, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 11, !dbg !24
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 12, !dbg !24
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 13, !dbg !24
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 14, !dbg !24
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %168, 15, !dbg !24
  %195 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, i64 %173, i64 %178, i1 true) #2, !dbg !24
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 0, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 1, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 2, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 3, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 4, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 5, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 6, !dbg !24
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 7, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 8, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 9, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 10, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 11, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 12, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 13, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 14, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %195, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %212 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, ptr addrspace(3) %154, i32 0, i32 0, ptr addrspace(3) %154, i32 0, i32 0) #2, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 0, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 1, !dbg !24
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 2, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 3, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 4, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 5, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 6, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 7, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 8, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 9, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 10, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 11, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 12, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 13, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 14, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %212, 15, !dbg !24
  %229 = add i32 %150, 1, !dbg !23
  %230 = icmp sgt i32 %229, 3, !dbg !23
  %231 = select i1 %230, i32 0, i32 %229, !dbg !23
  %.idx96 = shl i64 %indvars.iv, 6, !dbg !22
  %gep112 = getelementptr i8, ptr addrspace(1) %invariant.gep, i64 %.idx96, !dbg !22
  %.idx46 = shl i32 %231, 12, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %gep = getelementptr i8, ptr addrspace(3) %68, i32 %.idx46, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep, ptr addrspace(1) %gep112, i32 0) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !23
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4, !dbg !23
  br i1 %exitcond.not, label %.loopexit, label %148, !dbg !23, !llvm.loop !25

.loopexit:                                        ; preds = %148
  %232 = bitcast i16 %49 to bfloat, !dbg !18
  %233 = bitcast i16 %48 to bfloat, !dbg !18
  %234 = shl nuw nsw i32 %11, 1, !dbg !13
  %235 = and i32 %234, 6, !dbg !13
  %236 = lshr i32 %11, 4, !dbg !13
  %237 = shl nuw nsw i32 %11, 2, !dbg !13
  %238 = and i32 %237, 60, !dbg !13
  %239 = zext nneg i32 %238 to i64, !dbg !18
  %240 = insertelement <8 x i32> poison, i32 %10, i64 0, !dbg !27
  %241 = shufflevector <8 x i32> %240, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !27
  %242 = insertelement <8 x i32> poison, i32 %4, i64 0, !dbg !28
  %243 = shufflevector <8 x i32> %242, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !28
  %244 = or disjoint i32 %25, %10, !dbg !27
  %245 = icmp slt i32 %244, %4, !dbg !28
  %246 = or disjoint i32 %24, %10, !dbg !27
  %247 = icmp slt i32 %246, %4, !dbg !28
  %248 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !29
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %29, !dbg !30
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %39, !dbg !31
  %252 = getelementptr float, ptr addrspace(1) %250, i64 %40, !dbg !31
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %46) #2, !dbg !31
  %254 = bitcast i32 %253 to float, !dbg !31
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %47) #2, !dbg !31
  %256 = bitcast i32 %255 to float, !dbg !31
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 0, !dbg !32
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 1, !dbg !32
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 2, !dbg !32
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 3, !dbg !32
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 4, !dbg !32
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 5, !dbg !32
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 6, !dbg !32
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 7, !dbg !32
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 8, !dbg !32
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 9, !dbg !32
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 10, !dbg !32
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 11, !dbg !32
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 12, !dbg !32
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 13, !dbg !32
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 14, !dbg !32
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %248, 15, !dbg !32
  %273 = fpext bfloat %233 to float, !dbg !33
  %274 = fpext bfloat %232 to float, !dbg !33
  %275 = shl i32 %50, 6, !dbg !34
  %276 = sext i32 %275 to i64, !dbg !35
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !35
  %278 = and i32 %236, 15, !dbg !13
  %279 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !13
  %280 = insertelement <2 x i32> %279, i32 %278, i64 1, !dbg !13
  %281 = or <2 x i32> %280, <i32 48, i32 32>, !dbg !13
  %282 = or disjoint i32 %278, 16, !dbg !13
  %283 = or disjoint i32 %235, %20, !dbg !13
  %284 = or disjoint i32 %283, 25, !dbg !13
  %285 = zext nneg i32 %284 to i64, !dbg !18
  %286 = or disjoint i64 %285, %32, !dbg !18
  %287 = icmp slt i64 %286, %31, !dbg !18
  %288 = and i1 %43, %287, !dbg !18
  %289 = or disjoint i32 %283, 24, !dbg !13
  %290 = zext nneg i32 %289 to i64, !dbg !18
  %291 = or disjoint i64 %290, %32, !dbg !18
  %292 = icmp slt i64 %291, %31, !dbg !18
  %293 = and i1 %43, %292, !dbg !18
  %294 = or disjoint i32 %283, 17, !dbg !13
  %295 = zext nneg i32 %294 to i64, !dbg !18
  %296 = or disjoint i64 %295, %32, !dbg !18
  %297 = icmp slt i64 %296, %31, !dbg !18
  %298 = and i1 %43, %297, !dbg !18
  %299 = or disjoint i32 %283, 16, !dbg !13
  %300 = zext nneg i32 %299 to i64, !dbg !18
  %301 = or disjoint i64 %300, %32, !dbg !18
  %302 = icmp slt i64 %301, %31, !dbg !18
  %303 = and i1 %43, %302, !dbg !18
  %304 = or disjoint i32 %283, 9, !dbg !13
  %305 = or disjoint i32 %283, 8, !dbg !13
  %306 = or disjoint i32 %283, 1, !dbg !13
  %307 = shufflevector <2 x i32> %281, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %308 = insertelement <8 x i32> %307, i32 %282, i64 2, !dbg !18
  %309 = insertelement <8 x i32> %308, i32 %278, i64 3, !dbg !18
  %310 = insertelement <8 x i32> %309, i32 %283, i64 4, !dbg !18
  %311 = insertelement <8 x i32> %310, i32 %306, i64 5, !dbg !18
  %312 = insertelement <8 x i32> %311, i32 %305, i64 6, !dbg !18
  %313 = insertelement <8 x i32> %312, i32 %304, i64 7, !dbg !18
  %314 = or disjoint <8 x i32> %313, %241, !dbg !18
  %315 = icmp slt <8 x i32> %314, %243, !dbg !36
  %316 = extractelement <8 x i1> %315, i64 7, !dbg !18
  %317 = and i1 %43, %316, !dbg !18
  %318 = extractelement <8 x i1> %315, i64 6, !dbg !18
  %319 = and i1 %43, %318, !dbg !18
  %320 = extractelement <8 x i1> %315, i64 5, !dbg !18
  %321 = and i1 %43, %320, !dbg !18
  %322 = extractelement <8 x i1> %315, i64 4, !dbg !18
  %323 = and i1 %43, %322, !dbg !18
  %324 = insertelement <8 x i32> poison, i32 %283, i64 0, !dbg !27
  %325 = insertelement <8 x i32> %324, i32 %306, i64 1, !dbg !27
  %326 = insertelement <8 x i32> %325, i32 %305, i64 2, !dbg !27
  %327 = insertelement <8 x i32> %326, i32 %304, i64 3, !dbg !27
  %328 = insertelement <8 x i32> %327, i32 %299, i64 4, !dbg !27
  %329 = insertelement <8 x i32> %328, i32 %294, i64 5, !dbg !27
  %330 = insertelement <8 x i32> %329, i32 %289, i64 6, !dbg !27
  %331 = insertelement <8 x i32> %330, i32 %284, i64 7, !dbg !27
  %332 = or disjoint <8 x i32> %331, %241, !dbg !27
  %333 = icmp slt <8 x i32> %332, %243, !dbg !28
  %334 = extractelement <8 x i32> %314, i64 4, !dbg !31
  %335 = sext i32 %334 to i64, !dbg !31
  %.idx = shl nsw i64 %335, 7, !dbg !31
  %336 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx, !dbg !31
  %337 = extractelement <8 x i32> %314, i64 5, !dbg !31
  %338 = sext i32 %337 to i64, !dbg !31
  %.idx4 = shl nsw i64 %338, 7, !dbg !31
  %339 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx4, !dbg !31
  %340 = extractelement <8 x i32> %314, i64 6, !dbg !31
  %341 = sext i32 %340 to i64, !dbg !31
  %.idx5 = shl nsw i64 %341, 7, !dbg !31
  %342 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx5, !dbg !31
  %343 = extractelement <8 x i32> %314, i64 7, !dbg !31
  %344 = sext i32 %343 to i64, !dbg !31
  %.idx6 = shl nsw i64 %344, 7, !dbg !31
  %345 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx6, !dbg !31
  %.idx7 = shl nsw i64 %301, 7, !dbg !31
  %346 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx7, !dbg !31
  %.idx8 = shl nsw i64 %296, 7, !dbg !31
  %347 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx8, !dbg !31
  %.idx9 = shl nsw i64 %291, 7, !dbg !31
  %348 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx9, !dbg !31
  %.idx10 = shl nsw i64 %286, 7, !dbg !31
  %349 = getelementptr i8, ptr addrspace(1) %250, i64 %.idx10, !dbg !31
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %323) #2, !dbg !31
  %351 = bitcast i32 %350 to float, !dbg !31
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %321) #2, !dbg !31
  %353 = bitcast i32 %352 to float, !dbg !31
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %319) #2, !dbg !31
  %355 = bitcast i32 %354 to float, !dbg !31
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %317) #2, !dbg !31
  %357 = bitcast i32 %356 to float, !dbg !31
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 %303) #2, !dbg !31
  %359 = bitcast i32 %358 to float, !dbg !31
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %298) #2, !dbg !31
  %361 = bitcast i32 %360 to float, !dbg !31
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 %293) #2, !dbg !31
  %363 = bitcast i32 %362 to float, !dbg !31
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 %288) #2, !dbg !31
  %365 = bitcast i32 %364 to float, !dbg !31
  %366 = fsub float %254, %351, !dbg !37
  %367 = fsub float %254, %353, !dbg !37
  %368 = fsub float %256, %351, !dbg !37
  %369 = fsub float %256, %353, !dbg !37
  %370 = fsub float %254, %355, !dbg !37
  %371 = fsub float %254, %357, !dbg !37
  %372 = fsub float %256, %355, !dbg !37
  %373 = fsub float %256, %357, !dbg !37
  %374 = fsub float %254, %359, !dbg !37
  %375 = fsub float %254, %361, !dbg !37
  %376 = fsub float %256, %359, !dbg !37
  %377 = fsub float %256, %361, !dbg !37
  %378 = fsub float %254, %363, !dbg !37
  %379 = fsub float %254, %365, !dbg !37
  %380 = fsub float %256, %363, !dbg !37
  %381 = fsub float %256, %365, !dbg !37
  %382 = fmul float %366, 0x3FF7154760000000, !dbg !38
  %383 = tail call float @llvm.nvvm.ex2.approx.f(float %382), !dbg !38
  %384 = fmul float %367, 0x3FF7154760000000, !dbg !38
  %385 = tail call float @llvm.nvvm.ex2.approx.f(float %384), !dbg !38
  %386 = fmul float %368, 0x3FF7154760000000, !dbg !38
  %387 = tail call float @llvm.nvvm.ex2.approx.f(float %386), !dbg !38
  %388 = fmul float %369, 0x3FF7154760000000, !dbg !38
  %389 = tail call float @llvm.nvvm.ex2.approx.f(float %388), !dbg !38
  %390 = fmul float %370, 0x3FF7154760000000, !dbg !38
  %391 = tail call float @llvm.nvvm.ex2.approx.f(float %390), !dbg !38
  %392 = fmul float %371, 0x3FF7154760000000, !dbg !38
  %393 = tail call float @llvm.nvvm.ex2.approx.f(float %392), !dbg !38
  %394 = fmul float %372, 0x3FF7154760000000, !dbg !38
  %395 = tail call float @llvm.nvvm.ex2.approx.f(float %394), !dbg !38
  %396 = fmul float %373, 0x3FF7154760000000, !dbg !38
  %397 = tail call float @llvm.nvvm.ex2.approx.f(float %396), !dbg !38
  %398 = fmul float %374, 0x3FF7154760000000, !dbg !38
  %399 = tail call float @llvm.nvvm.ex2.approx.f(float %398), !dbg !38
  %400 = fmul float %375, 0x3FF7154760000000, !dbg !38
  %401 = tail call float @llvm.nvvm.ex2.approx.f(float %400), !dbg !38
  %402 = fmul float %376, 0x3FF7154760000000, !dbg !38
  %403 = tail call float @llvm.nvvm.ex2.approx.f(float %402), !dbg !38
  %404 = fmul float %377, 0x3FF7154760000000, !dbg !38
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %404), !dbg !38
  %406 = fmul float %378, 0x3FF7154760000000, !dbg !38
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !38
  %408 = fmul float %379, 0x3FF7154760000000, !dbg !38
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !38
  %410 = fmul float %380, 0x3FF7154760000000, !dbg !38
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !38
  %412 = fmul float %381, 0x3FF7154760000000, !dbg !38
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !38
  %414 = fmul float %257, %383, !dbg !32
  %415 = fmul float %258, %385, !dbg !32
  %416 = fmul float %259, %387, !dbg !32
  %417 = fmul float %260, %389, !dbg !32
  %418 = fmul float %261, %391, !dbg !32
  %419 = fmul float %262, %393, !dbg !32
  %420 = fmul float %263, %395, !dbg !32
  %421 = fmul float %264, %397, !dbg !32
  %422 = fmul float %265, %399, !dbg !32
  %423 = fmul float %266, %401, !dbg !32
  %424 = fmul float %267, %403, !dbg !32
  %425 = fmul float %268, %405, !dbg !32
  %426 = fmul float %269, %407, !dbg !32
  %427 = fmul float %270, %409, !dbg !32
  %428 = fmul float %271, %411, !dbg !32
  %429 = fmul float %272, %413, !dbg !32
  %430 = fmul float %414, %273, !dbg !33
  %431 = fmul float %415, %273, !dbg !33
  %432 = fmul float %416, %274, !dbg !33
  %433 = fmul float %417, %274, !dbg !33
  %434 = fmul float %418, %273, !dbg !33
  %435 = fmul float %419, %273, !dbg !33
  %436 = fmul float %420, %274, !dbg !33
  %437 = fmul float %421, %274, !dbg !33
  %438 = fmul float %422, %273, !dbg !33
  %439 = fmul float %423, %273, !dbg !33
  %440 = fmul float %424, %274, !dbg !33
  %441 = fmul float %425, %274, !dbg !33
  %442 = fmul float %426, %273, !dbg !33
  %443 = fmul float %427, %273, !dbg !33
  %444 = fmul float %428, %274, !dbg !33
  %445 = fmul float %429, %274, !dbg !33
  %446 = icmp samesign ugt i32 %24, %283, !dbg !39
  %447 = icmp samesign ugt i32 %24, %306, !dbg !39
  %448 = icmp samesign ugt i32 %25, %283, !dbg !39
  %449 = icmp samesign ugt i32 %25, %306, !dbg !39
  %450 = icmp samesign ugt i32 %24, %305, !dbg !39
  %451 = icmp samesign ugt i32 %24, %304, !dbg !39
  %452 = icmp samesign ugt i32 %25, %304, !dbg !39
  %453 = icmp samesign ugt i32 %24, %299, !dbg !39
  %454 = icmp samesign ugt i32 %24, %294, !dbg !39
  %455 = icmp samesign ugt i32 %25, %299, !dbg !39
  %456 = icmp samesign ugt i32 %25, %294, !dbg !39
  %457 = icmp samesign ugt i32 %24, %289, !dbg !39
  %458 = icmp samesign ugt i32 %24, %284, !dbg !39
  %459 = icmp samesign ugt i32 %25, %289, !dbg !39
  %460 = icmp samesign ugt i32 %25, %284, !dbg !39
  %461 = extractelement <8 x i1> %333, i64 0, !dbg !40
  %462 = and i1 %446, %461, !dbg !40
  %463 = and i1 %247, %462, !dbg !40
  %464 = extractelement <8 x i1> %333, i64 1, !dbg !40
  %465 = and i1 %447, %464, !dbg !40
  %466 = and i1 %247, %465, !dbg !40
  %467 = and i1 %448, %461, !dbg !40
  %468 = and i1 %245, %467, !dbg !40
  %469 = and i1 %449, %464, !dbg !40
  %470 = and i1 %245, %469, !dbg !40
  %471 = extractelement <8 x i1> %333, i64 2, !dbg !40
  %472 = and i1 %450, %471, !dbg !40
  %473 = and i1 %247, %472, !dbg !40
  %474 = extractelement <8 x i1> %333, i64 3, !dbg !40
  %475 = and i1 %451, %474, !dbg !40
  %476 = and i1 %247, %475, !dbg !40
  %477 = and i1 %446, %471, !dbg !40
  %478 = and i1 %245, %477, !dbg !40
  %479 = and i1 %452, %474, !dbg !40
  %480 = and i1 %245, %479, !dbg !40
  %481 = extractelement <8 x i1> %333, i64 4, !dbg !40
  %482 = and i1 %453, %481, !dbg !40
  %483 = and i1 %247, %482, !dbg !40
  %484 = extractelement <8 x i1> %333, i64 5, !dbg !40
  %485 = and i1 %454, %484, !dbg !40
  %486 = and i1 %247, %485, !dbg !40
  %487 = and i1 %455, %481, !dbg !40
  %488 = and i1 %245, %487, !dbg !40
  %489 = and i1 %456, %484, !dbg !40
  %490 = and i1 %245, %489, !dbg !40
  %491 = extractelement <8 x i1> %333, i64 6, !dbg !40
  %492 = and i1 %457, %491, !dbg !40
  %493 = and i1 %247, %492, !dbg !40
  %494 = extractelement <8 x i1> %333, i64 7, !dbg !40
  %495 = and i1 %458, %494, !dbg !40
  %496 = and i1 %247, %495, !dbg !40
  %497 = and i1 %459, %491, !dbg !40
  %498 = and i1 %245, %497, !dbg !40
  %499 = and i1 %460, %494, !dbg !40
  %500 = and i1 %245, %499, !dbg !40
  %501 = extractelement <8 x i32> %314, i64 3, !dbg !36
  %502 = sext i32 %501 to i64, !dbg !36
  %.idx11 = shl nsw i64 %502, 13, !dbg !36
  %503 = getelementptr i8, ptr addrspace(1) %277, i64 %.idx11, !dbg !36
  %504 = getelementptr float, ptr addrspace(1) %503, i64 %239, !dbg !36
  %505 = extractelement <8 x i32> %314, i64 2, !dbg !36
  %506 = sext i32 %505 to i64, !dbg !36
  %.idx12 = shl nsw i64 %506, 13, !dbg !36
  %507 = getelementptr i8, ptr addrspace(1) %277, i64 %.idx12, !dbg !36
  %508 = getelementptr float, ptr addrspace(1) %507, i64 %239, !dbg !36
  %509 = extractelement <8 x i32> %314, i64 1, !dbg !36
  %510 = sext i32 %509 to i64, !dbg !36
  %.idx13 = shl nsw i64 %510, 13, !dbg !36
  %511 = getelementptr i8, ptr addrspace(1) %277, i64 %.idx13, !dbg !36
  %512 = getelementptr float, ptr addrspace(1) %511, i64 %239, !dbg !36
  %513 = extractelement <8 x i32> %314, i64 0, !dbg !36
  %514 = sext i32 %513 to i64, !dbg !36
  %.idx14 = shl nsw i64 %514, 13, !dbg !36
  %515 = getelementptr i8, ptr addrspace(1) %277, i64 %.idx14, !dbg !36
  %516 = getelementptr float, ptr addrspace(1) %515, i64 %239, !dbg !36
  %517 = extractelement <8 x i1> %315, i64 3, !dbg !36
  %518 = and i1 %43, %517, !dbg !36
  %519 = extractelement <8 x i1> %315, i64 2, !dbg !36
  %520 = and i1 %43, %519, !dbg !36
  %521 = extractelement <8 x i1> %315, i64 1, !dbg !36
  %522 = and i1 %43, %521, !dbg !36
  %523 = extractelement <8 x i1> %315, i64 0, !dbg !36
  %524 = and i1 %43, %523, !dbg !36
  %525 = shl nuw nsw i32 %11, 4, !dbg !36
  %526 = and i32 %525, 448, !dbg !36
  %527 = shl nuw nsw i32 %11, 5, !dbg !36
  %528 = and i32 %527, 3072, !dbg !36
  %529 = or disjoint i32 %528, %526, !dbg !36
  %530 = or disjoint i32 %283, %529, !dbg !36
  %531 = and i32 %237, 508, !dbg !36
  %532 = shl nuw nsw i32 %19, 2, !dbg !36
  %533 = or disjoint i32 %531, %532, !dbg !36
  %534 = lshr exact i32 %529, 2, !dbg !36
  %535 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %534, !dbg !36
  %536 = getelementptr inbounds nuw float, ptr addrspace(3) %535, i32 %530, !dbg !36
  %537 = bitcast float %430 to i32, !dbg !36
  %538 = select i1 %463, i32 %537, i32 0, !dbg !41
  %539 = bitcast float %431 to i32, !dbg !36
  %540 = select i1 %466, i32 %539, i32 0, !dbg !41
  %541 = insertelement <2 x i32> poison, i32 %538, i64 0, !dbg !36
  %542 = insertelement <2 x i32> %541, i32 %540, i64 1, !dbg !36
  store <2 x i32> %542, ptr addrspace(3) %536, align 8, !dbg !36
  %543 = or disjoint i32 %530, 512, !dbg !36
  %544 = lshr i32 %543, 4, !dbg !36
  %545 = and i32 %544, 67108860, !dbg !36
  %546 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %545, !dbg !36
  %547 = getelementptr inbounds nuw float, ptr addrspace(3) %546, i32 %543, !dbg !36
  %548 = bitcast float %432 to i32, !dbg !36
  %549 = select i1 %468, i32 %548, i32 0, !dbg !41
  %550 = bitcast float %433 to i32, !dbg !36
  %551 = select i1 %470, i32 %550, i32 0, !dbg !41
  %552 = insertelement <2 x i32> poison, i32 %549, i64 0, !dbg !36
  %553 = insertelement <2 x i32> %552, i32 %551, i64 1, !dbg !36
  store <2 x i32> %553, ptr addrspace(3) %547, align 8, !dbg !36
  %554 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 32, !dbg !36
  %555 = bitcast float %434 to i32, !dbg !36
  %556 = select i1 %473, i32 %555, i32 0, !dbg !41
  %557 = bitcast float %435 to i32, !dbg !36
  %558 = select i1 %476, i32 %557, i32 0, !dbg !41
  %559 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !36
  %560 = insertelement <2 x i32> %559, i32 %558, i64 1, !dbg !36
  store <2 x i32> %560, ptr addrspace(3) %554, align 8, !dbg !36
  %561 = or disjoint i32 %530, 520, !dbg !36
  %562 = lshr i32 %561, 4, !dbg !36
  %563 = and i32 %562, 67108860, !dbg !36
  %564 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %563, !dbg !36
  %565 = getelementptr inbounds nuw float, ptr addrspace(3) %564, i32 %561, !dbg !36
  %566 = bitcast float %436 to i32, !dbg !36
  %567 = select i1 %478, i32 %566, i32 0, !dbg !41
  %568 = bitcast float %437 to i32, !dbg !36
  %569 = select i1 %480, i32 %568, i32 0, !dbg !41
  %570 = insertelement <2 x i32> poison, i32 %567, i64 0, !dbg !36
  %571 = insertelement <2 x i32> %570, i32 %569, i64 1, !dbg !36
  store <2 x i32> %571, ptr addrspace(3) %565, align 8, !dbg !36
  %572 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 64, !dbg !36
  %573 = bitcast float %438 to i32, !dbg !36
  %574 = select i1 %483, i32 %573, i32 0, !dbg !41
  %575 = bitcast float %439 to i32, !dbg !36
  %576 = select i1 %486, i32 %575, i32 0, !dbg !41
  %577 = insertelement <2 x i32> poison, i32 %574, i64 0, !dbg !36
  %578 = insertelement <2 x i32> %577, i32 %576, i64 1, !dbg !36
  store <2 x i32> %578, ptr addrspace(3) %572, align 8, !dbg !36
  %579 = or disjoint i32 %530, 528, !dbg !36
  %580 = lshr i32 %579, 4, !dbg !36
  %581 = and i32 %580, 67108860, !dbg !36
  %582 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %581, !dbg !36
  %583 = getelementptr inbounds nuw float, ptr addrspace(3) %582, i32 %579, !dbg !36
  %584 = bitcast float %440 to i32, !dbg !36
  %585 = select i1 %488, i32 %584, i32 0, !dbg !41
  %586 = bitcast float %441 to i32, !dbg !36
  %587 = select i1 %490, i32 %586, i32 0, !dbg !41
  %588 = insertelement <2 x i32> poison, i32 %585, i64 0, !dbg !36
  %589 = insertelement <2 x i32> %588, i32 %587, i64 1, !dbg !36
  store <2 x i32> %589, ptr addrspace(3) %583, align 8, !dbg !36
  %590 = getelementptr inbounds nuw i8, ptr addrspace(3) %536, i32 96, !dbg !36
  %591 = bitcast float %442 to i32, !dbg !36
  %592 = select i1 %493, i32 %591, i32 0, !dbg !41
  %593 = bitcast float %443 to i32, !dbg !36
  %594 = select i1 %496, i32 %593, i32 0, !dbg !41
  %595 = insertelement <2 x i32> poison, i32 %592, i64 0, !dbg !36
  %596 = insertelement <2 x i32> %595, i32 %594, i64 1, !dbg !36
  store <2 x i32> %596, ptr addrspace(3) %590, align 8, !dbg !36
  %597 = or disjoint i32 %530, 536, !dbg !36
  %598 = lshr i32 %597, 4, !dbg !36
  %599 = and i32 %598, 67108860, !dbg !36
  %600 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %599, !dbg !36
  %601 = getelementptr inbounds nuw float, ptr addrspace(3) %600, i32 %597, !dbg !36
  %602 = bitcast float %444 to i32, !dbg !36
  %603 = select i1 %498, i32 %602, i32 0, !dbg !41
  %604 = bitcast float %445 to i32, !dbg !36
  %605 = select i1 %500, i32 %604, i32 0, !dbg !41
  %606 = insertelement <2 x i32> poison, i32 %603, i64 0, !dbg !36
  %607 = insertelement <2 x i32> %606, i32 %605, i64 1, !dbg !36
  store <2 x i32> %607, ptr addrspace(3) %601, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !36
  %608 = lshr i32 %533, 4, !dbg !36
  %609 = and i32 %608, 60, !dbg !36
  %610 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %609, !dbg !36
  %611 = getelementptr inbounds nuw float, ptr addrspace(3) %610, i32 %533, !dbg !36
  %612 = or disjoint i32 %533, 1024, !dbg !36
  %613 = lshr i32 %612, 4, !dbg !36
  %614 = and i32 %613, 124, !dbg !36
  %615 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %614, !dbg !36
  %616 = getelementptr inbounds nuw float, ptr addrspace(3) %615, i32 %612, !dbg !36
  %617 = load <4 x i32>, ptr addrspace(3) %616, align 16, !dbg !36
  %618 = or disjoint i32 %533, 2048, !dbg !36
  %619 = lshr i32 %618, 4, !dbg !36
  %620 = and i32 %619, 188, !dbg !36
  %621 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %620, !dbg !36
  %622 = getelementptr inbounds nuw float, ptr addrspace(3) %621, i32 %618, !dbg !36
  %623 = load <4 x i32>, ptr addrspace(3) %622, align 16, !dbg !36
  %624 = or disjoint i32 %533, 3072, !dbg !36
  %625 = lshr i32 %624, 4, !dbg !36
  %626 = and i32 %625, 252, !dbg !36
  %627 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %626, !dbg !36
  %628 = getelementptr inbounds nuw float, ptr addrspace(3) %627, i32 %624, !dbg !36
  %629 = load <4 x i32>, ptr addrspace(3) %628, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %611, align 16, !dbg !36
  %630 = getelementptr inbounds nuw i8, ptr addrspace(3) %611, i32 4, !dbg !36
  %.extract30 = load i32, ptr addrspace(3) %630, align 4, !dbg !36
  %631 = getelementptr inbounds nuw i8, ptr addrspace(3) %611, i32 8, !dbg !36
  %.extract31 = load i32, ptr addrspace(3) %631, align 8, !dbg !36
  %632 = getelementptr inbounds nuw i8, ptr addrspace(3) %611, i32 12, !dbg !36
  %.extract32 = load i32, ptr addrspace(3) %632, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %504, i1 %518) #2, !dbg !36
  %.extract33 = extractelement <4 x i32> %617, i64 0, !dbg !36
  %.extract34 = extractelement <4 x i32> %617, i64 1, !dbg !36
  %.extract35 = extractelement <4 x i32> %617, i64 2, !dbg !36
  %.extract36 = extractelement <4 x i32> %617, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %508, i1 %520) #2, !dbg !36
  %.extract37 = extractelement <4 x i32> %623, i64 0, !dbg !36
  %.extract38 = extractelement <4 x i32> %623, i64 1, !dbg !36
  %.extract39 = extractelement <4 x i32> %623, i64 2, !dbg !36
  %.extract40 = extractelement <4 x i32> %623, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %512, i1 %522) #2, !dbg !36
  %.extract41 = extractelement <4 x i32> %629, i64 0, !dbg !36
  %.extract42 = extractelement <4 x i32> %629, i64 1, !dbg !36
  %.extract43 = extractelement <4 x i32> %629, i64 2, !dbg !36
  %.extract44 = extractelement <4 x i32> %629, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %516, i1 %524) #2, !dbg !36
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.peeled.count", i32 1}
!27 = !DILocation(line: 51, column: 21, scope: !5)
!28 = !DILocation(line: 52, column: 16, scope: !5)
!29 = !DILocation(line: 64, column: 36, scope: !5)
!30 = !DILocation(line: 64, column: 44, scope: !5)
!31 = !DILocation(line: 65, column: 22, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 72, column: 48, scope: !5)
!35 = !DILocation(line: 72, column: 32, scope: !5)
!36 = !DILocation(line: 73, column: 18, scope: !5)
!37 = !DILocation(line: 66, column: 34, scope: !5)
!38 = !DILocation(line: 67, column: 19, scope: !5)
!39 = !DILocation(line: 70, column: 26, scope: !5)
!40 = !DILocation(line: 70, column: 43, scope: !5)
!41 = !DILocation(line: 71, column: 29, scope: !5)
!42 = !DILocation(line: 73, column: 4, scope: !5)
