#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 2], instrShape = [16, 32, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_scaled_dot_kkt_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg4: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x32xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<1x32xi64, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<2048> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_12 = arith.constant dense<32> : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg4 : i32 loc(#loc6)
    %5 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %6 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc8)
    %8 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %11 = tt.splat %5 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc9)
    %12 = tt.splat %5 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc9)
    %13 = arith.addi %11, %7 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc9)
    %14 = arith.addi %12, %9 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc9)
    %15 = tt.splat %arg4 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %16 = tt.splat %arg4 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc10)
    %17 = arith.cmpi slt, %13, %15 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %18 = arith.cmpi slt, %14, %16 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc10)
    %19 = arith.muli %4, %c32_i32 : i32 loc(#loc11)
    %20 = tt.addptr %arg2, %19 : !tt.ptr<bf16>, i32 loc(#loc12)
    %21 = tt.addptr %20, %3 : !tt.ptr<bf16>, i32 loc(#loc13)
    %22 = arith.extsi %arg4 : i32 to i64 loc(#loc14)
    %23 = arith.extsi %5 : i32 to i64 loc(#loc14)
    %24 = tt.splat %21 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %25 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %26 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %27 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %28 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %29 = arith.extsi %6 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %30 = arith.extsi %7 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %31 = arith.extsi %8 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %32 = arith.extsi %9 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %33 = arith.extsi %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %34 = arith.addi %25, %29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %35 = arith.addi %26, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %36 = arith.addi %27, %31 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %37 = arith.addi %28, %32 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %38 = arith.muli %35, %cst_1 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %39 = arith.muli %37, %cst_2 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %40 = tt.addptr %24, %38 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %41 = arith.cmpi sge, %35, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %42 = arith.cmpi sge, %37, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %43 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %44 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %45 = arith.cmpi slt, %35, %43 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %46 = arith.cmpi slt, %37, %44 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %47 = arith.andi %41, %45 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %48 = arith.andi %42, %46 : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %49 = tt.load %40, %47 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %50 = arith.addi %19, %3 : i32 loc(#loc16)
    %51 = arith.muli %50, %c128_i32 : i32 loc(#loc17)
    %52 = tt.addptr %arg0, %51 : !tt.ptr<bf16>, i32 loc(#loc18)
    %53 = tt.splat %52 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %54 = tt.expand_dims %34 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc19)
    %55 = arith.muli %54, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc19)
    %56 = tt.broadcast %55 : tensor<64x1xi64, #blocked> -> tensor<64x32xi64, #blocked> loc(#loc19)
    %57 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %58 = arith.extsi %57 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %59 = arith.cmpi sge, %54, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc19)
    %60 = tt.splat %22 : i64 -> tensor<64x1xi64, #blocked> loc(#loc19)
    %61 = arith.cmpi slt, %54, %60 : tensor<64x1xi64, #blocked> loc(#loc19)
    %62 = arith.andi %59, %61 : tensor<64x1xi1, #blocked> loc(#loc19)
    %63 = tt.broadcast %62 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc19)
    %64 = ttg.local_alloc : () -> !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> loc(#loc19)
    %65 = tt.expand_dims %58 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi64, #blocked> loc(#loc19)
    %66 = tt.broadcast %65 : tensor<1x32xi64, #blocked> -> tensor<64x32xi64, #blocked> loc(#loc19)
    %67 = arith.addi %56, %66 : tensor<64x32xi64, #blocked> loc(#loc19)
    %68 = tt.addptr %53, %67 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi64, #blocked> loc(#loc19)
    %69 = arith.cmpi sge, %65, %cst_6 : tensor<1x32xi64, #blocked> loc(#loc19)
    %70 = arith.cmpi slt, %65, %cst_7 : tensor<1x32xi64, #blocked> loc(#loc19)
    %71 = arith.andi %69, %70 : tensor<1x32xi1, #blocked> loc(#loc19)
    %72 = tt.broadcast %71 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc19)
    %73 = arith.andi %63, %72 : tensor<64x32xi1, #blocked> loc(#loc19)
    %74 = ttg.memdesc_subview %64[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %75 = ttg.async_copy_global_to_local %68, %74 mask %73 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> <64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %76 = ttg.async_commit_group %75 loc(#loc19)
    %77 = arith.addi %58, %cst_12 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %78 = tt.expand_dims %77 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi64, #blocked> loc(#loc19)
    %79 = tt.broadcast %78 : tensor<1x32xi64, #blocked> -> tensor<64x32xi64, #blocked> loc(#loc19)
    %80 = arith.addi %56, %79 : tensor<64x32xi64, #blocked> loc(#loc19)
    %81 = tt.addptr %53, %80 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi64, #blocked> loc(#loc19)
    %82 = arith.cmpi sge, %78, %cst_6 : tensor<1x32xi64, #blocked> loc(#loc19)
    %83 = arith.cmpi slt, %78, %cst_7 : tensor<1x32xi64, #blocked> loc(#loc19)
    %84 = arith.andi %82, %83 : tensor<1x32xi1, #blocked> loc(#loc19)
    %85 = tt.broadcast %84 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc19)
    %86 = arith.andi %63, %85 : tensor<64x32xi1, #blocked> loc(#loc19)
    %87 = ttg.memdesc_subview %64[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %88 = ttg.async_copy_global_to_local %81, %87 mask %86 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> <64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %89 = ttg.async_commit_group %88 loc(#loc19)
    %90 = arith.addi %58, %cst_13 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %91 = tt.expand_dims %90 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi64, #blocked> loc(#loc19)
    %92 = tt.broadcast %91 : tensor<1x32xi64, #blocked> -> tensor<64x32xi64, #blocked> loc(#loc19)
    %93 = arith.addi %56, %92 : tensor<64x32xi64, #blocked> loc(#loc19)
    %94 = tt.addptr %53, %93 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi64, #blocked> loc(#loc19)
    %95 = arith.cmpi sge, %91, %cst_6 : tensor<1x32xi64, #blocked> loc(#loc19)
    %96 = arith.cmpi slt, %91, %cst_7 : tensor<1x32xi64, #blocked> loc(#loc19)
    %97 = arith.andi %95, %96 : tensor<1x32xi1, #blocked> loc(#loc19)
    %98 = tt.broadcast %97 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc19)
    %99 = arith.andi %63, %98 : tensor<64x32xi1, #blocked> loc(#loc19)
    %100 = ttg.memdesc_subview %64[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %101 = ttg.async_copy_global_to_local %94, %100 mask %99 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> <64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
    %102 = ttg.async_commit_group %101 loc(#loc19)
    %103:6 = scf.for %arg5 = %c0_i32 to %c4_i32 step %c1_i32 iter_args(%arg6 = %cst_11, %arg7 = %c2_i32, %arg8 = %c-1_i32, %arg9 = %76, %arg10 = %89, %arg11 = %102) -> (tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %158 = arith.cmpi slt, %arg5, %c1_i32 : i32 loc(#loc20)
      %159 = arith.addi %arg8, %c1_i32 : i32 loc(#loc20)
      %160 = arith.cmpi sge, %159, %c4_i32 : i32 loc(#loc20)
      %161 = arith.select %160, %c0_i32, %159 : i32 loc(#loc20)
      %162 = ttg.async_wait %arg9 {num = 2 : i32} loc(#loc19)
      %163 = ttg.memdesc_subview %64[%161, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
      %164 = ttg.memdesc_trans %163 {order = array<i32: 1, 0>} : !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> -> !ttg.memdesc<32x64xbf16, #shared1, #smem, mutable, 4x32x64> loc(#loc21)
      %165 = ttng.warp_group_dot %163, %164, %arg6 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> * !ttg.memdesc<32x64xbf16, #shared1, #smem, mutable, 4x32x64> -> tensor<64x64xf32, #mma> loc(#loc22)
      %166:3 = ttng.warp_group_dot_wait %165, %163, %164 {pendings = 1 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32>, !ttg.memdesc<32x64xbf16, #shared1, #smem, mutable, 4x32x64> loc(#loc22)
      %167 = arith.addi %arg7, %c1_i32 : i32 loc(#loc20)
      %168 = arith.cmpi sge, %167, %c4_i32 : i32 loc(#loc20)
      %169 = arith.select %168, %c0_i32, %167 : i32 loc(#loc20)
      %170 = arith.addi %arg5, %c3_i32 : i32 loc(#loc20)
      %171 = arith.muli %170, %c32_i32 : i32 loc(#loc23)
      %172 = arith.extsi %171 : i32 to i64 loc(#loc24)
      %173 = tt.splat %172 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
      %174 = arith.addi %173, %58 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
      %175 = tt.expand_dims %174 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi64, #blocked> loc(#loc19)
      %176 = tt.broadcast %175 : tensor<1x32xi64, #blocked> -> tensor<64x32xi64, #blocked> loc(#loc19)
      %177 = arith.addi %56, %176 : tensor<64x32xi64, #blocked> loc(#loc19)
      %178 = tt.addptr %53, %177 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi64, #blocked> loc(#loc19)
      %179 = arith.cmpi sge, %175, %cst_6 : tensor<1x32xi64, #blocked> loc(#loc19)
      %180 = arith.cmpi slt, %175, %cst_7 : tensor<1x32xi64, #blocked> loc(#loc19)
      %181 = arith.andi %179, %180 : tensor<1x32xi1, #blocked> loc(#loc19)
      %182 = tt.broadcast %181 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc19)
      %183 = arith.andi %63, %182 : tensor<64x32xi1, #blocked> loc(#loc19)
      %184 = ttg.memdesc_subview %64[%169, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
      %185 = tt.splat %158 : i1 -> tensor<64x32xi1, #blocked> loc(#loc20)
      %186 = arith.andi %185, %183 : tensor<64x32xi1, #blocked> loc(#loc20)
      %187 = ttg.async_copy_global_to_local %178, %184 mask %186 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> <64x32xbf16, #shared, #smem, mutable, 4x64x32> loc(#loc19)
      %188 = ttg.async_commit_group %187 loc(#loc19)
      scf.yield %166#0, %169, %161, %arg10, %arg11, %188 : tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc20)
    } loc(#loc20)
    %104 = ttng.warp_group_dot_wait %103#0 {pendings = 0 : i32} : tensor<64x64xf32, #mma> loc(#loc20)
    %105 = ttg.async_wait  {num = 0 : i32} loc(#loc20)
    ttg.local_dealloc %64 : !ttg.memdesc<4x64x32xbf16, #shared, #smem, mutable> loc(#loc20)
    %106 = tt.addptr %arg1, %19 : !tt.ptr<f32>, i32 loc(#loc25)
    %107 = tt.addptr %106, %3 : !tt.ptr<f32>, i32 loc(#loc26)
    %108 = tt.splat %107 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %109 = tt.splat %107 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %110 = tt.addptr %108, %38 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %111 = tt.addptr %109, %39 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %112 = tt.load %110, %47 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %113 = tt.load %111, %48 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %114 = tt.expand_dims %112 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc28)
    %115 = tt.expand_dims %113 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xf32, #mma> loc(#loc29)
    %116 = tt.broadcast %114 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc30)
    %117 = tt.broadcast %115 : tensor<1x64xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc30)
    %118 = arith.subf %116, %117 : tensor<64x64xf32, #mma> loc(#loc30)
    %119 = math.exp %118 : tensor<64x64xf32, #mma> loc(#loc31)
    %120 = arith.mulf %104, %119 : tensor<64x64xf32, #mma> loc(#loc32)
    %121 = tt.expand_dims %49 {axis = 1 : i32} : tensor<64xbf16, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xbf16, #mma> loc(#loc33)
    %122 = arith.extf %121 : tensor<64x1xbf16, #mma> to tensor<64x1xf32, #mma> loc(#loc34)
    %123 = tt.broadcast %122 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc34)
    %124 = arith.mulf %120, %123 : tensor<64x64xf32, #mma> loc(#loc34)
    %125 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc35)
    %126 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc36)
    %127 = tt.broadcast %125 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc37)
    %128 = tt.broadcast %126 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc37)
    %129 = arith.cmpi sgt, %127, %128 : tensor<64x64xi32, #mma> loc(#loc37)
    %130 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi1, #mma> loc(#loc38)
    %131 = tt.expand_dims %18 {axis = 0 : i32} : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi1, #mma> loc(#loc39)
    %132 = tt.broadcast %130 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc39)
    %133 = tt.broadcast %131 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc39)
    %134 = arith.andi %132, %133 : tensor<64x64xi1, #mma> loc(#loc39)
    %135 = arith.andi %129, %134 : tensor<64x64xi1, #mma> loc(#loc40)
    %136 = arith.select %135, %124, %cst_11 : tensor<64x64xi1, #mma>, tensor<64x64xf32, #mma> loc(#loc41)
    %137 = arith.muli %50, %c64_i32 : i32 loc(#loc42)
    %138 = tt.addptr %arg3, %137 : !tt.ptr<f32>, i32 loc(#loc43)
    %139 = tt.splat %138 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %140 = tt.expand_dims %36 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc44)
    %141 = arith.muli %140, %cst_8 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %142 = tt.broadcast %141 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc44)
    %143 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc44)
    %144 = tt.broadcast %143 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc44)
    %145 = arith.addi %142, %144 : tensor<64x64xi64, #blocked1> loc(#loc44)
    %146 = tt.addptr %139, %145 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc44)
    %147 = arith.cmpi sge, %140, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %148 = tt.splat %22 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc44)
    %149 = arith.cmpi slt, %140, %148 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %150 = arith.andi %147, %149 : tensor<64x1xi1, #blocked1> loc(#loc44)
    %151 = tt.broadcast %150 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc44)
    %152 = arith.cmpi sge, %143, %cst_9 : tensor<1x64xi64, #blocked1> loc(#loc44)
    %153 = arith.cmpi slt, %143, %cst_10 : tensor<1x64xi64, #blocked1> loc(#loc44)
    %154 = arith.andi %152, %153 : tensor<1x64xi1, #blocked1> loc(#loc44)
    %155 = tt.broadcast %154 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc44)
    %156 = arith.andi %151, %155 : tensor<64x64xi1, #blocked1> loc(#loc44)
    %157 = ttg.convert_layout %136 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked1> loc(#loc44)
    tt.store %146, %157, %156 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":50:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:16)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:34)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:21)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":52:16)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:42)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:38)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:46)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:83)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":55:21)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:45)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:52)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:36)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":60:22)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":58:21)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:36)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:90)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:105)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:36)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:44)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":65:22)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:23)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:38)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:34)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:19)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:15)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:18)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:11)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:15)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:30)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:26)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:47)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:58)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":71:29)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:48)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:32)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:18)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:4)
