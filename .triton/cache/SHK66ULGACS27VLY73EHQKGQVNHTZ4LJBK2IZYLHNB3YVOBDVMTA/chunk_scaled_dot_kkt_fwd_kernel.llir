; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 16, !dbg !13
  %.lobit314 = lshr i32 %12, 4, !dbg !13
  %14 = and i32 %.lobit314, 3, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = or disjoint i32 %14, 16, !dbg !13
  %19 = or disjoint i32 %14, 20, !dbg !13
  %20 = or disjoint i32 %14, 24, !dbg !13
  %21 = or disjoint i32 %14, 28, !dbg !13
  %22 = or disjoint i32 %14, 32, !dbg !13
  %23 = or disjoint i32 %14, 36, !dbg !13
  %24 = or disjoint i32 %14, 40, !dbg !13
  %25 = or disjoint i32 %14, 44, !dbg !13
  %26 = or disjoint i32 %14, 48, !dbg !13
  %27 = or disjoint i32 %14, 52, !dbg !13
  %28 = or disjoint i32 %14, 56, !dbg !13
  %29 = or i32 %.lobit314, 60, !dbg !13
  %30 = and i32 %12, 4, !dbg !13
  %.not2 = icmp eq i32 %30, 0, !dbg !13
  %31 = and i32 %12, 8, !dbg !13
  %.lobit13 = lshr i32 %12, 2, !dbg !13
  %32 = and i32 %.lobit13, 3, !dbg !13
  %33 = lshr exact i32 %13, 2, !dbg !13
  %34 = shl nuw nsw i32 %12, 1, !dbg !13
  %35 = and i32 %34, 6, !dbg !13
  %36 = lshr i32 %12, 2, !dbg !13
  %37 = and i32 %36, 8, !dbg !13
  %38 = shl nuw nsw i32 %12, 2, !dbg !13
  %39 = and i32 %38, 60, !dbg !13
  %40 = and i32 %12, 63, !dbg !13
  %41 = or disjoint i32 %32, %33, !dbg !13
  %42 = or disjoint i32 %41, 8, !dbg !13
  %43 = or disjoint i32 %41, 16, !dbg !13
  %44 = or disjoint i32 %41, 24, !dbg !13
  %45 = or disjoint i32 %41, 32, !dbg !13
  %46 = or disjoint i32 %41, 40, !dbg !13
  %47 = or disjoint i32 %41, 48, !dbg !13
  %48 = or disjoint i32 %41, 56, !dbg !13
  %49 = or disjoint i32 %35, %37, !dbg !13
  %50 = or disjoint i32 %49, 1, !dbg !13
  %51 = or disjoint i32 %49, 16, !dbg !13
  %52 = or disjoint i32 %49, 17, !dbg !13
  %53 = or disjoint i32 %49, 32, !dbg !13
  %54 = or disjoint i32 %49, 33, !dbg !13
  %55 = or disjoint i32 %49, 48, !dbg !13
  %56 = or disjoint i32 %49, 49, !dbg !13
  %57 = insertelement <16 x i32> poison, i32 %56, i64 0, !dbg !14
  %58 = insertelement <16 x i32> %57, i32 %55, i64 1, !dbg !14
  %59 = insertelement <16 x i32> %58, i32 %54, i64 2, !dbg !14
  %60 = insertelement <16 x i32> %59, i32 %53, i64 3, !dbg !14
  %61 = insertelement <16 x i32> %60, i32 %52, i64 4, !dbg !14
  %62 = insertelement <16 x i32> %61, i32 %51, i64 5, !dbg !14
  %63 = insertelement <16 x i32> %62, i32 %50, i64 6, !dbg !14
  %64 = insertelement <16 x i32> %63, i32 %49, i64 7, !dbg !14
  %65 = insertelement <16 x i32> %64, i32 %48, i64 8, !dbg !14
  %66 = insertelement <16 x i32> %65, i32 %47, i64 9, !dbg !14
  %67 = insertelement <16 x i32> %66, i32 %46, i64 10, !dbg !14
  %68 = insertelement <16 x i32> %67, i32 %45, i64 11, !dbg !14
  %69 = insertelement <16 x i32> %68, i32 %44, i64 12, !dbg !14
  %70 = insertelement <16 x i32> %69, i32 %43, i64 13, !dbg !14
  %71 = insertelement <16 x i32> %70, i32 %42, i64 14, !dbg !14
  %72 = insertelement <16 x i32> %71, i32 %41, i64 15, !dbg !14
  %73 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !14
  %74 = shufflevector <16 x i32> %73, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !14
  %75 = or disjoint <16 x i32> %72, %74, !dbg !14
  %76 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !15
  %77 = shufflevector <16 x i32> %76, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !15
  %78 = icmp slt <16 x i32> %75, %77, !dbg !15
  %79 = mul i32 %9, %4, !dbg !16
  %80 = sext i32 %79 to i64, !dbg !17
  %81 = getelementptr bfloat, ptr addrspace(1) %2, i64 %80, !dbg !17
  %82 = zext nneg i32 %10 to i64, !dbg !18
  %83 = getelementptr bfloat, ptr addrspace(1) %81, i64 %82, !dbg !18
  %84 = sext i32 %4 to i64, !dbg !19
  %85 = sext i32 %11 to i64, !dbg !19
  %86 = zext nneg i32 %14 to i64, !dbg !20
  %87 = zext nneg i32 %15 to i64, !dbg !20
  %88 = zext nneg i32 %16 to i64, !dbg !20
  %89 = zext nneg i32 %17 to i64, !dbg !20
  %90 = zext nneg i32 %18 to i64, !dbg !20
  %91 = zext nneg i32 %19 to i64, !dbg !20
  %92 = zext nneg i32 %20 to i64, !dbg !20
  %93 = zext nneg i32 %21 to i64, !dbg !20
  %94 = zext nneg i32 %22 to i64, !dbg !20
  %95 = zext nneg i32 %23 to i64, !dbg !20
  %96 = zext nneg i32 %24 to i64, !dbg !20
  %97 = zext nneg i32 %25 to i64, !dbg !20
  %98 = zext nneg i32 %26 to i64, !dbg !20
  %99 = zext nneg i32 %27 to i64, !dbg !20
  %100 = zext nneg i32 %28 to i64, !dbg !20
  %101 = zext nneg i32 %29 to i64, !dbg !20
  %102 = zext nneg i32 %39 to i64, !dbg !20
  %103 = zext nneg i32 %40 to i64, !dbg !20
  %104 = or disjoint i64 %86, %85, !dbg !20
  %105 = or disjoint i64 %87, %85, !dbg !20
  %106 = or disjoint i64 %88, %85, !dbg !20
  %107 = or disjoint i64 %89, %85, !dbg !20
  %108 = or disjoint i64 %90, %85, !dbg !20
  %109 = or disjoint i64 %91, %85, !dbg !20
  %110 = or disjoint i64 %92, %85, !dbg !20
  %111 = or disjoint i64 %93, %85, !dbg !20
  %112 = or disjoint i64 %94, %85, !dbg !20
  %113 = or disjoint i64 %95, %85, !dbg !20
  %114 = or disjoint i64 %96, %85, !dbg !20
  %115 = or disjoint i64 %97, %85, !dbg !20
  %116 = or disjoint i64 %98, %85, !dbg !20
  %117 = or disjoint i64 %99, %85, !dbg !20
  %118 = or disjoint i64 %100, %85, !dbg !20
  %119 = or disjoint i64 %101, %85, !dbg !20
  %120 = or disjoint i64 %85, %103, !dbg !20
  %121 = shl nsw i64 %120, 5, !dbg !20
  %122 = getelementptr bfloat, ptr addrspace(1) %83, i64 %121, !dbg !20
  %123 = icmp sgt i32 %11, -1, !dbg !20
  %124 = icmp slt i64 %120, %84, !dbg !20
  %125 = and i1 %123, %124, !dbg !20
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %122, i1 %125) #4, !dbg !20
  %127 = or disjoint i32 %79, %10, !dbg !21
  %128 = shl i32 %127, 7, !dbg !22
  %129 = sext i32 %128 to i64, !dbg !23
  %130 = getelementptr bfloat, ptr addrspace(1) %0, i64 %129, !dbg !23
  %131 = shl nuw nsw i32 %12, 3, !dbg !24
  %132 = and i32 %131, 24, !dbg !24
  %133 = shl nuw nsw i32 %30, 3, !dbg !24
  %134 = or disjoint i32 %132, %133, !dbg !24
  %135 = shl nuw nsw i32 %31, 3, !dbg !24
  %136 = or disjoint i32 %134, %135, !dbg !24
  %137 = zext nneg i32 %136 to i64, !dbg !24
  %.idx = shl nsw i64 %104, 13, !dbg !24
  %138 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx, !dbg !24
  %139 = getelementptr bfloat, ptr addrspace(1) %138, i64 %137, !dbg !24
  %.idx5 = shl nsw i64 %105, 13, !dbg !24
  %140 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx5, !dbg !24
  %141 = getelementptr bfloat, ptr addrspace(1) %140, i64 %137, !dbg !24
  %.idx6 = shl nsw i64 %106, 13, !dbg !24
  %142 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx6, !dbg !24
  %143 = getelementptr bfloat, ptr addrspace(1) %142, i64 %137, !dbg !24
  %.idx7 = shl nsw i64 %107, 13, !dbg !24
  %144 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx7, !dbg !24
  %145 = getelementptr bfloat, ptr addrspace(1) %144, i64 %137, !dbg !24
  %.idx8 = shl nsw i64 %108, 13, !dbg !24
  %146 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx8, !dbg !24
  %147 = getelementptr bfloat, ptr addrspace(1) %146, i64 %137, !dbg !24
  %.idx9 = shl nsw i64 %109, 13, !dbg !24
  %148 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx9, !dbg !24
  %149 = getelementptr bfloat, ptr addrspace(1) %148, i64 %137, !dbg !24
  %.idx10 = shl nsw i64 %110, 13, !dbg !24
  %150 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx10, !dbg !24
  %151 = getelementptr bfloat, ptr addrspace(1) %150, i64 %137, !dbg !24
  %.idx11 = shl nsw i64 %111, 13, !dbg !24
  %152 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx11, !dbg !24
  %153 = getelementptr bfloat, ptr addrspace(1) %152, i64 %137, !dbg !24
  %.idx12 = shl nsw i64 %112, 13, !dbg !24
  %154 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx12, !dbg !24
  %155 = getelementptr bfloat, ptr addrspace(1) %154, i64 %137, !dbg !24
  %.idx13 = shl nsw i64 %113, 13, !dbg !24
  %156 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx13, !dbg !24
  %157 = getelementptr bfloat, ptr addrspace(1) %156, i64 %137, !dbg !24
  %.idx14 = shl nsw i64 %114, 13, !dbg !24
  %158 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx14, !dbg !24
  %159 = getelementptr bfloat, ptr addrspace(1) %158, i64 %137, !dbg !24
  %.idx15 = shl nsw i64 %115, 13, !dbg !24
  %160 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx15, !dbg !24
  %161 = getelementptr bfloat, ptr addrspace(1) %160, i64 %137, !dbg !24
  %.idx16 = shl nsw i64 %116, 13, !dbg !24
  %162 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx16, !dbg !24
  %163 = getelementptr bfloat, ptr addrspace(1) %162, i64 %137, !dbg !24
  %.idx17 = shl nsw i64 %117, 13, !dbg !24
  %164 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx17, !dbg !24
  %165 = getelementptr bfloat, ptr addrspace(1) %164, i64 %137, !dbg !24
  %.idx18 = shl nsw i64 %118, 13, !dbg !24
  %166 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx18, !dbg !24
  %167 = getelementptr bfloat, ptr addrspace(1) %166, i64 %137, !dbg !24
  %.idx19 = shl nsw i64 %119, 13, !dbg !24
  %168 = getelementptr i8, ptr addrspace(1) %130, i64 %.idx19, !dbg !24
  %169 = getelementptr bfloat, ptr addrspace(1) %168, i64 %137, !dbg !24
  %170 = icmp slt i64 %104, %84, !dbg !24
  %171 = icmp slt i64 %105, %84, !dbg !24
  %172 = icmp slt i64 %106, %84, !dbg !24
  %173 = icmp slt i64 %107, %84, !dbg !24
  %174 = icmp slt i64 %108, %84, !dbg !24
  %175 = icmp slt i64 %109, %84, !dbg !24
  %176 = icmp slt i64 %110, %84, !dbg !24
  %177 = icmp slt i64 %111, %84, !dbg !24
  %178 = icmp slt i64 %112, %84, !dbg !24
  %179 = icmp slt i64 %113, %84, !dbg !24
  %180 = icmp slt i64 %114, %84, !dbg !24
  %181 = icmp slt i64 %115, %84, !dbg !24
  %182 = icmp slt i64 %116, %84, !dbg !24
  %183 = icmp slt i64 %117, %84, !dbg !24
  %184 = icmp slt i64 %118, %84, !dbg !24
  %185 = icmp slt i64 %119, %84, !dbg !24
  %186 = and i1 %123, %170, !dbg !24
  %187 = and i1 %123, %171, !dbg !24
  %188 = and i1 %123, %172, !dbg !24
  %189 = and i1 %123, %173, !dbg !24
  %190 = and i1 %123, %174, !dbg !24
  %191 = and i1 %123, %175, !dbg !24
  %192 = and i1 %123, %176, !dbg !24
  %193 = and i1 %123, %177, !dbg !24
  %194 = and i1 %123, %178, !dbg !24
  %195 = and i1 %123, %179, !dbg !24
  %196 = and i1 %123, %180, !dbg !24
  %197 = and i1 %123, %181, !dbg !24
  %198 = and i1 %123, %182, !dbg !24
  %199 = and i1 %123, %183, !dbg !24
  %200 = and i1 %123, %184, !dbg !24
  %201 = and i1 %123, %185, !dbg !24
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %186) #4, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !24
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !24
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !24
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !24
  %209 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %210 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !24
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !24
  %212 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %187) #4, !dbg !24
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !24
  %215 = bitcast i32 %214 to <2 x bfloat>, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !24
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !24
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !24
  %220 = shufflevector <2 x bfloat> %219, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %221 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !24
  %222 = bitcast i32 %221 to <2 x bfloat>, !dbg !24
  %223 = shufflevector <2 x bfloat> %222, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %188) #4, !dbg !24
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !24
  %226 = bitcast i32 %225 to <2 x bfloat>, !dbg !24
  %227 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !24
  %228 = bitcast i32 %227 to <2 x bfloat>, !dbg !24
  %229 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !24
  %230 = bitcast i32 %229 to <2 x bfloat>, !dbg !24
  %231 = shufflevector <2 x bfloat> %230, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %232 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !24
  %233 = bitcast i32 %232 to <2 x bfloat>, !dbg !24
  %234 = shufflevector <2 x bfloat> %233, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %189) #4, !dbg !24
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !24
  %237 = bitcast i32 %236 to <2 x bfloat>, !dbg !24
  %238 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !24
  %239 = bitcast i32 %238 to <2 x bfloat>, !dbg !24
  %240 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !24
  %241 = bitcast i32 %240 to <2 x bfloat>, !dbg !24
  %242 = shufflevector <2 x bfloat> %241, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %243 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !24
  %244 = bitcast i32 %243 to <2 x bfloat>, !dbg !24
  %245 = shufflevector <2 x bfloat> %244, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %190) #4, !dbg !24
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !24
  %248 = bitcast i32 %247 to <2 x bfloat>, !dbg !24
  %249 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !24
  %250 = bitcast i32 %249 to <2 x bfloat>, !dbg !24
  %251 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !24
  %252 = bitcast i32 %251 to <2 x bfloat>, !dbg !24
  %253 = shufflevector <2 x bfloat> %252, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %254 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !24
  %255 = bitcast i32 %254 to <2 x bfloat>, !dbg !24
  %256 = shufflevector <2 x bfloat> %255, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %191) #4, !dbg !24
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !24
  %259 = bitcast i32 %258 to <2 x bfloat>, !dbg !24
  %260 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !24
  %261 = bitcast i32 %260 to <2 x bfloat>, !dbg !24
  %262 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !24
  %263 = bitcast i32 %262 to <2 x bfloat>, !dbg !24
  %264 = shufflevector <2 x bfloat> %263, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %265 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !24
  %266 = bitcast i32 %265 to <2 x bfloat>, !dbg !24
  %267 = shufflevector <2 x bfloat> %266, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %192) #4, !dbg !24
  %269 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !24
  %270 = bitcast i32 %269 to <2 x bfloat>, !dbg !24
  %271 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !24
  %272 = bitcast i32 %271 to <2 x bfloat>, !dbg !24
  %273 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !24
  %274 = bitcast i32 %273 to <2 x bfloat>, !dbg !24
  %275 = shufflevector <2 x bfloat> %274, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %276 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !24
  %277 = bitcast i32 %276 to <2 x bfloat>, !dbg !24
  %278 = shufflevector <2 x bfloat> %277, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %193) #4, !dbg !24
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !24
  %281 = bitcast i32 %280 to <2 x bfloat>, !dbg !24
  %282 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !24
  %283 = bitcast i32 %282 to <2 x bfloat>, !dbg !24
  %284 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !24
  %285 = bitcast i32 %284 to <2 x bfloat>, !dbg !24
  %286 = shufflevector <2 x bfloat> %285, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %287 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !24
  %288 = bitcast i32 %287 to <2 x bfloat>, !dbg !24
  %289 = shufflevector <2 x bfloat> %288, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %194) #4, !dbg !24
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !24
  %292 = bitcast i32 %291 to <2 x bfloat>, !dbg !24
  %293 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !24
  %294 = bitcast i32 %293 to <2 x bfloat>, !dbg !24
  %295 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !24
  %296 = bitcast i32 %295 to <2 x bfloat>, !dbg !24
  %297 = shufflevector <2 x bfloat> %296, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %298 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !24
  %299 = bitcast i32 %298 to <2 x bfloat>, !dbg !24
  %300 = shufflevector <2 x bfloat> %299, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %195) #4, !dbg !24
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !24
  %303 = bitcast i32 %302 to <2 x bfloat>, !dbg !24
  %304 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !24
  %305 = bitcast i32 %304 to <2 x bfloat>, !dbg !24
  %306 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !24
  %307 = bitcast i32 %306 to <2 x bfloat>, !dbg !24
  %308 = shufflevector <2 x bfloat> %307, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %309 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !24
  %310 = bitcast i32 %309 to <2 x bfloat>, !dbg !24
  %311 = shufflevector <2 x bfloat> %310, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %196) #4, !dbg !24
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !24
  %314 = bitcast i32 %313 to <2 x bfloat>, !dbg !24
  %315 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !24
  %316 = bitcast i32 %315 to <2 x bfloat>, !dbg !24
  %317 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !24
  %318 = bitcast i32 %317 to <2 x bfloat>, !dbg !24
  %319 = shufflevector <2 x bfloat> %318, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %320 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !24
  %321 = bitcast i32 %320 to <2 x bfloat>, !dbg !24
  %322 = shufflevector <2 x bfloat> %321, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %197) #4, !dbg !24
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !24
  %325 = bitcast i32 %324 to <2 x bfloat>, !dbg !24
  %326 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !24
  %327 = bitcast i32 %326 to <2 x bfloat>, !dbg !24
  %328 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !24
  %329 = bitcast i32 %328 to <2 x bfloat>, !dbg !24
  %330 = shufflevector <2 x bfloat> %329, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %331 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !24
  %332 = bitcast i32 %331 to <2 x bfloat>, !dbg !24
  %333 = shufflevector <2 x bfloat> %332, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %198) #4, !dbg !24
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !24
  %336 = bitcast i32 %335 to <2 x bfloat>, !dbg !24
  %337 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !24
  %338 = bitcast i32 %337 to <2 x bfloat>, !dbg !24
  %339 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !24
  %340 = bitcast i32 %339 to <2 x bfloat>, !dbg !24
  %341 = shufflevector <2 x bfloat> %340, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %342 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !24
  %343 = bitcast i32 %342 to <2 x bfloat>, !dbg !24
  %344 = shufflevector <2 x bfloat> %343, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %199) #4, !dbg !24
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !24
  %347 = bitcast i32 %346 to <2 x bfloat>, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !24
  %349 = bitcast i32 %348 to <2 x bfloat>, !dbg !24
  %350 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !24
  %351 = bitcast i32 %350 to <2 x bfloat>, !dbg !24
  %352 = shufflevector <2 x bfloat> %351, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %353 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !24
  %354 = bitcast i32 %353 to <2 x bfloat>, !dbg !24
  %355 = shufflevector <2 x bfloat> %354, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %200) #4, !dbg !24
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !24
  %358 = bitcast i32 %357 to <2 x bfloat>, !dbg !24
  %359 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !24
  %360 = bitcast i32 %359 to <2 x bfloat>, !dbg !24
  %361 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !24
  %362 = bitcast i32 %361 to <2 x bfloat>, !dbg !24
  %363 = shufflevector <2 x bfloat> %362, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %364 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !24
  %365 = bitcast i32 %364 to <2 x bfloat>, !dbg !24
  %366 = shufflevector <2 x bfloat> %365, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %201) #4, !dbg !24
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !24
  %369 = bitcast i32 %368 to <2 x bfloat>, !dbg !24
  %370 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !24
  %371 = bitcast i32 %370 to <2 x bfloat>, !dbg !24
  %372 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !24
  %373 = bitcast i32 %372 to <2 x bfloat>, !dbg !24
  %374 = shufflevector <2 x bfloat> %373, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %375 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !24
  %376 = bitcast i32 %375 to <2 x bfloat>, !dbg !24
  %377 = shufflevector <2 x bfloat> %376, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %378 = lshr exact i32 %13, 1, !dbg !24
  %379 = lshr i32 %12, 1, !dbg !24
  %380 = and i32 %379, 24, !dbg !24
  %381 = xor i32 %380, %136, !dbg !24
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %381, !dbg !24
  %.idx20 = shl nuw nsw i32 %14, 8, !dbg !24
  %383 = getelementptr inbounds nuw i8, ptr addrspace(3) %382, i32 %.idx20, !dbg !24
  %384 = shufflevector <2 x bfloat> %204, <2 x bfloat> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %385 = shufflevector <8 x bfloat> %384, <8 x bfloat> %209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %386 = shufflevector <8 x bfloat> %385, <8 x bfloat> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %386, ptr addrspace(3) %383, align 16, !dbg !24
  %387 = or disjoint i32 %132, 32, !dbg !24
  %388 = xor i32 %387, %133, !dbg !24
  %389 = or disjoint i32 %388, %135, !dbg !24
  %390 = xor i32 %380, %389, !dbg !24
  %391 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %390, !dbg !24
  %392 = getelementptr inbounds nuw i8, ptr addrspace(3) %391, i32 %.idx20, !dbg !24
  %393 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 1024, !dbg !24
  %394 = shufflevector <2 x bfloat> %215, <2 x bfloat> %217, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %395 = shufflevector <8 x bfloat> %394, <8 x bfloat> %220, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %396 = shufflevector <8 x bfloat> %395, <8 x bfloat> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %396, ptr addrspace(3) %393, align 16, !dbg !24
  %397 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 2048, !dbg !24
  %398 = shufflevector <2 x bfloat> %226, <2 x bfloat> %228, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %399 = shufflevector <8 x bfloat> %398, <8 x bfloat> %231, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %400 = shufflevector <8 x bfloat> %399, <8 x bfloat> %234, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %400, ptr addrspace(3) %397, align 16, !dbg !24
  %401 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 3072, !dbg !24
  %402 = shufflevector <2 x bfloat> %237, <2 x bfloat> %239, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %403 = shufflevector <8 x bfloat> %402, <8 x bfloat> %242, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %404 = shufflevector <8 x bfloat> %403, <8 x bfloat> %245, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %404, ptr addrspace(3) %401, align 16, !dbg !24
  %405 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 4096, !dbg !24
  %406 = shufflevector <2 x bfloat> %248, <2 x bfloat> %250, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %407 = shufflevector <8 x bfloat> %406, <8 x bfloat> %253, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %408 = shufflevector <8 x bfloat> %407, <8 x bfloat> %256, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %408, ptr addrspace(3) %405, align 16, !dbg !24
  %409 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 5120, !dbg !24
  %410 = shufflevector <2 x bfloat> %259, <2 x bfloat> %261, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %411 = shufflevector <8 x bfloat> %410, <8 x bfloat> %264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %412 = shufflevector <8 x bfloat> %411, <8 x bfloat> %267, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %412, ptr addrspace(3) %409, align 16, !dbg !24
  %413 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 6144, !dbg !24
  %414 = shufflevector <2 x bfloat> %270, <2 x bfloat> %272, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %415 = shufflevector <8 x bfloat> %414, <8 x bfloat> %275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %416 = shufflevector <8 x bfloat> %415, <8 x bfloat> %278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %416, ptr addrspace(3) %413, align 16, !dbg !24
  %417 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 7168, !dbg !24
  %418 = shufflevector <2 x bfloat> %281, <2 x bfloat> %283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %419 = shufflevector <8 x bfloat> %418, <8 x bfloat> %286, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %420 = shufflevector <8 x bfloat> %419, <8 x bfloat> %289, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %420, ptr addrspace(3) %417, align 16, !dbg !24
  %421 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 8192, !dbg !24
  %422 = shufflevector <2 x bfloat> %292, <2 x bfloat> %294, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %423 = shufflevector <8 x bfloat> %422, <8 x bfloat> %297, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %424 = shufflevector <8 x bfloat> %423, <8 x bfloat> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %424, ptr addrspace(3) %421, align 16, !dbg !24
  %425 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 9216, !dbg !24
  %426 = shufflevector <2 x bfloat> %303, <2 x bfloat> %305, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %427 = shufflevector <8 x bfloat> %426, <8 x bfloat> %308, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %428 = shufflevector <8 x bfloat> %427, <8 x bfloat> %311, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %428, ptr addrspace(3) %425, align 16, !dbg !24
  %429 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 10240, !dbg !24
  %430 = shufflevector <2 x bfloat> %314, <2 x bfloat> %316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %431 = shufflevector <8 x bfloat> %430, <8 x bfloat> %319, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %432 = shufflevector <8 x bfloat> %431, <8 x bfloat> %322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %432, ptr addrspace(3) %429, align 16, !dbg !24
  %433 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 11264, !dbg !24
  %434 = shufflevector <2 x bfloat> %325, <2 x bfloat> %327, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %435 = shufflevector <8 x bfloat> %434, <8 x bfloat> %330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %436 = shufflevector <8 x bfloat> %435, <8 x bfloat> %333, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %436, ptr addrspace(3) %433, align 16, !dbg !24
  %437 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 12288, !dbg !24
  %438 = shufflevector <2 x bfloat> %336, <2 x bfloat> %338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %439 = shufflevector <8 x bfloat> %438, <8 x bfloat> %341, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %440 = shufflevector <8 x bfloat> %439, <8 x bfloat> %344, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %440, ptr addrspace(3) %437, align 16, !dbg !24
  %441 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 13312, !dbg !24
  %442 = shufflevector <2 x bfloat> %347, <2 x bfloat> %349, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %443 = shufflevector <8 x bfloat> %442, <8 x bfloat> %352, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %444 = shufflevector <8 x bfloat> %443, <8 x bfloat> %355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %444, ptr addrspace(3) %441, align 16, !dbg !24
  %445 = getelementptr inbounds nuw i8, ptr addrspace(3) %383, i32 14336, !dbg !24
  %446 = shufflevector <2 x bfloat> %358, <2 x bfloat> %360, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %447 = shufflevector <8 x bfloat> %446, <8 x bfloat> %363, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %448 = shufflevector <8 x bfloat> %447, <8 x bfloat> %366, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %448, ptr addrspace(3) %445, align 16, !dbg !24
  %449 = getelementptr inbounds nuw i8, ptr addrspace(3) %392, i32 15360, !dbg !24
  %450 = shufflevector <2 x bfloat> %369, <2 x bfloat> %371, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %451 = shufflevector <8 x bfloat> %450, <8 x bfloat> %374, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %452 = shufflevector <8 x bfloat> %451, <8 x bfloat> %377, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %452, ptr addrspace(3) %449, align 16, !dbg !24
  %453 = and i32 %131, 384, !dbg !25
  %454 = or disjoint i32 %136, %453, !dbg !25
  %455 = shl nuw nsw i32 %12, 5, !dbg !25
  %456 = and i32 %455, 1920, !dbg !25
  %457 = lshr i32 %454, 4, !dbg !25
  %458 = and i32 %457, 134217720, !dbg !25
  %459 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %458, !dbg !25
  %460 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %459, i32 %454, !dbg !25
  %461 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !25
  %462 = insertelement <4 x i32> %461, i32 %205, i64 1, !dbg !25
  %463 = insertelement <4 x i32> %462, i32 %207, i64 2, !dbg !25
  %464 = insertelement <4 x i32> %463, i32 %210, i64 3, !dbg !25
  store <4 x i32> %464, ptr addrspace(3) %460, align 16, !dbg !25
  %465 = or disjoint i32 %454, 512, !dbg !25
  %466 = lshr i32 %465, 4, !dbg !25
  %467 = and i32 %466, 268435448, !dbg !25
  %468 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %467, !dbg !25
  %469 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %468, i32 %465, !dbg !25
  %470 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !25
  %471 = insertelement <4 x i32> %470, i32 %216, i64 1, !dbg !25
  %472 = insertelement <4 x i32> %471, i32 %218, i64 2, !dbg !25
  %473 = insertelement <4 x i32> %472, i32 %221, i64 3, !dbg !25
  store <4 x i32> %473, ptr addrspace(3) %469, align 16, !dbg !25
  %474 = or disjoint i32 %454, 1024, !dbg !25
  %475 = lshr i32 %474, 4, !dbg !25
  %476 = and i32 %475, 268435448, !dbg !25
  %477 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %476, !dbg !25
  %478 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %477, i32 %474, !dbg !25
  %479 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !25
  %480 = insertelement <4 x i32> %479, i32 %227, i64 1, !dbg !25
  %481 = insertelement <4 x i32> %480, i32 %229, i64 2, !dbg !25
  %482 = insertelement <4 x i32> %481, i32 %232, i64 3, !dbg !25
  store <4 x i32> %482, ptr addrspace(3) %478, align 16, !dbg !25
  %483 = or disjoint i32 %454, 1536, !dbg !25
  %484 = lshr i32 %483, 4, !dbg !25
  %485 = and i32 %484, 268435448, !dbg !25
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %485, !dbg !25
  %487 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %486, i32 %483, !dbg !25
  %488 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !25
  %489 = insertelement <4 x i32> %488, i32 %238, i64 1, !dbg !25
  %490 = insertelement <4 x i32> %489, i32 %240, i64 2, !dbg !25
  %491 = insertelement <4 x i32> %490, i32 %243, i64 3, !dbg !25
  store <4 x i32> %491, ptr addrspace(3) %487, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %492 = lshr exact i32 %456, 3, !dbg !25
  %493 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %492, !dbg !25
  %494 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %493, i32 %456, !dbg !25
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %494, i32 %35, !dbg !25
  %496 = load i32, ptr addrspace(3) %495, align 4, !dbg !25
  %497 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 16, !dbg !25
  %498 = load i32, ptr addrspace(3) %497, align 4, !dbg !25
  %499 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 32, !dbg !25
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !25
  %501 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 48, !dbg !25
  %502 = load i32, ptr addrspace(3) %501, align 4, !dbg !25
  %503 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 64, !dbg !25
  %504 = load i32, ptr addrspace(3) %503, align 4, !dbg !25
  %505 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 80, !dbg !25
  %506 = load i32, ptr addrspace(3) %505, align 4, !dbg !25
  %507 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 96, !dbg !25
  %508 = load i32, ptr addrspace(3) %507, align 4, !dbg !25
  %509 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 112, !dbg !25
  %510 = load i32, ptr addrspace(3) %509, align 4, !dbg !25
  %511 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 128, !dbg !25
  %512 = load i32, ptr addrspace(3) %511, align 4, !dbg !25
  %513 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 144, !dbg !25
  %514 = load i32, ptr addrspace(3) %513, align 4, !dbg !25
  %515 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 160, !dbg !25
  %516 = load i32, ptr addrspace(3) %515, align 4, !dbg !25
  %517 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 176, !dbg !25
  %518 = load i32, ptr addrspace(3) %517, align 4, !dbg !25
  %519 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 192, !dbg !25
  %520 = load i32, ptr addrspace(3) %519, align 4, !dbg !25
  %521 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 208, !dbg !25
  %522 = load i32, ptr addrspace(3) %521, align 4, !dbg !25
  %523 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 224, !dbg !25
  %524 = load i32, ptr addrspace(3) %523, align 4, !dbg !25
  %525 = getelementptr inbounds nuw i8, ptr addrspace(3) %495, i32 240, !dbg !25
  %526 = load i32, ptr addrspace(3) %525, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %527 = insertelement <4 x i32> poison, i32 %247, i64 0, !dbg !25
  %528 = insertelement <4 x i32> %527, i32 %249, i64 1, !dbg !25
  %529 = insertelement <4 x i32> %528, i32 %251, i64 2, !dbg !25
  %530 = insertelement <4 x i32> %529, i32 %254, i64 3, !dbg !25
  store <4 x i32> %530, ptr addrspace(3) %460, align 16, !dbg !25
  %531 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !25
  %532 = insertelement <4 x i32> %531, i32 %260, i64 1, !dbg !25
  %533 = insertelement <4 x i32> %532, i32 %262, i64 2, !dbg !25
  %534 = insertelement <4 x i32> %533, i32 %265, i64 3, !dbg !25
  store <4 x i32> %534, ptr addrspace(3) %469, align 16, !dbg !25
  %535 = insertelement <4 x i32> poison, i32 %269, i64 0, !dbg !25
  %536 = insertelement <4 x i32> %535, i32 %271, i64 1, !dbg !25
  %537 = insertelement <4 x i32> %536, i32 %273, i64 2, !dbg !25
  %538 = insertelement <4 x i32> %537, i32 %276, i64 3, !dbg !25
  store <4 x i32> %538, ptr addrspace(3) %478, align 16, !dbg !25
  %539 = insertelement <4 x i32> poison, i32 %280, i64 0, !dbg !25
  %540 = insertelement <4 x i32> %539, i32 %282, i64 1, !dbg !25
  %541 = insertelement <4 x i32> %540, i32 %284, i64 2, !dbg !25
  %542 = insertelement <4 x i32> %541, i32 %287, i64 3, !dbg !25
  store <4 x i32> %542, ptr addrspace(3) %487, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %543 = load i32, ptr addrspace(3) %495, align 4, !dbg !25
  %544 = load i32, ptr addrspace(3) %497, align 4, !dbg !25
  %545 = load i32, ptr addrspace(3) %499, align 4, !dbg !25
  %546 = load i32, ptr addrspace(3) %501, align 4, !dbg !25
  %547 = load i32, ptr addrspace(3) %503, align 4, !dbg !25
  %548 = load i32, ptr addrspace(3) %505, align 4, !dbg !25
  %549 = load i32, ptr addrspace(3) %507, align 4, !dbg !25
  %550 = load i32, ptr addrspace(3) %509, align 4, !dbg !25
  %551 = load i32, ptr addrspace(3) %511, align 4, !dbg !25
  %552 = load i32, ptr addrspace(3) %513, align 4, !dbg !25
  %553 = load i32, ptr addrspace(3) %515, align 4, !dbg !25
  %554 = load i32, ptr addrspace(3) %517, align 4, !dbg !25
  %555 = load i32, ptr addrspace(3) %519, align 4, !dbg !25
  %556 = load i32, ptr addrspace(3) %521, align 4, !dbg !25
  %557 = load i32, ptr addrspace(3) %523, align 4, !dbg !25
  %558 = load i32, ptr addrspace(3) %525, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %559 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !25
  %560 = insertelement <4 x i32> %559, i32 %293, i64 1, !dbg !25
  %561 = insertelement <4 x i32> %560, i32 %295, i64 2, !dbg !25
  %562 = insertelement <4 x i32> %561, i32 %298, i64 3, !dbg !25
  store <4 x i32> %562, ptr addrspace(3) %460, align 16, !dbg !25
  %563 = insertelement <4 x i32> poison, i32 %302, i64 0, !dbg !25
  %564 = insertelement <4 x i32> %563, i32 %304, i64 1, !dbg !25
  %565 = insertelement <4 x i32> %564, i32 %306, i64 2, !dbg !25
  %566 = insertelement <4 x i32> %565, i32 %309, i64 3, !dbg !25
  store <4 x i32> %566, ptr addrspace(3) %469, align 16, !dbg !25
  %567 = insertelement <4 x i32> poison, i32 %313, i64 0, !dbg !25
  %568 = insertelement <4 x i32> %567, i32 %315, i64 1, !dbg !25
  %569 = insertelement <4 x i32> %568, i32 %317, i64 2, !dbg !25
  %570 = insertelement <4 x i32> %569, i32 %320, i64 3, !dbg !25
  store <4 x i32> %570, ptr addrspace(3) %478, align 16, !dbg !25
  %571 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !25
  %572 = insertelement <4 x i32> %571, i32 %326, i64 1, !dbg !25
  %573 = insertelement <4 x i32> %572, i32 %328, i64 2, !dbg !25
  %574 = insertelement <4 x i32> %573, i32 %331, i64 3, !dbg !25
  store <4 x i32> %574, ptr addrspace(3) %487, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %575 = load i32, ptr addrspace(3) %495, align 4, !dbg !25
  %576 = load i32, ptr addrspace(3) %497, align 4, !dbg !25
  %577 = load i32, ptr addrspace(3) %499, align 4, !dbg !25
  %578 = load i32, ptr addrspace(3) %501, align 4, !dbg !25
  %579 = load i32, ptr addrspace(3) %503, align 4, !dbg !25
  %580 = load i32, ptr addrspace(3) %505, align 4, !dbg !25
  %581 = load i32, ptr addrspace(3) %507, align 4, !dbg !25
  %582 = load i32, ptr addrspace(3) %509, align 4, !dbg !25
  %583 = load i32, ptr addrspace(3) %511, align 4, !dbg !25
  %584 = load i32, ptr addrspace(3) %513, align 4, !dbg !25
  %585 = load i32, ptr addrspace(3) %515, align 4, !dbg !25
  %586 = load i32, ptr addrspace(3) %517, align 4, !dbg !25
  %587 = load i32, ptr addrspace(3) %519, align 4, !dbg !25
  %588 = load i32, ptr addrspace(3) %521, align 4, !dbg !25
  %589 = load i32, ptr addrspace(3) %523, align 4, !dbg !25
  %590 = load i32, ptr addrspace(3) %525, align 4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %591 = insertelement <4 x i32> poison, i32 %335, i64 0, !dbg !25
  %592 = insertelement <4 x i32> %591, i32 %337, i64 1, !dbg !25
  %593 = insertelement <4 x i32> %592, i32 %339, i64 2, !dbg !25
  %594 = insertelement <4 x i32> %593, i32 %342, i64 3, !dbg !25
  store <4 x i32> %594, ptr addrspace(3) %460, align 16, !dbg !25
  %595 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !25
  %596 = insertelement <4 x i32> %595, i32 %348, i64 1, !dbg !25
  %597 = insertelement <4 x i32> %596, i32 %350, i64 2, !dbg !25
  %598 = insertelement <4 x i32> %597, i32 %353, i64 3, !dbg !25
  store <4 x i32> %598, ptr addrspace(3) %469, align 16, !dbg !25
  %599 = insertelement <4 x i32> poison, i32 %357, i64 0, !dbg !25
  %600 = insertelement <4 x i32> %599, i32 %359, i64 1, !dbg !25
  %601 = insertelement <4 x i32> %600, i32 %361, i64 2, !dbg !25
  %602 = insertelement <4 x i32> %601, i32 %364, i64 3, !dbg !25
  store <4 x i32> %602, ptr addrspace(3) %478, align 16, !dbg !25
  %603 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !25
  %604 = insertelement <4 x i32> %603, i32 %370, i64 1, !dbg !25
  %605 = insertelement <4 x i32> %604, i32 %372, i64 2, !dbg !25
  %606 = insertelement <4 x i32> %605, i32 %375, i64 3, !dbg !25
  store <4 x i32> %606, ptr addrspace(3) %487, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %607 = load i32, ptr addrspace(3) %495, align 4, !dbg !25
  %608 = load i32, ptr addrspace(3) %497, align 4, !dbg !25
  %609 = load i32, ptr addrspace(3) %499, align 4, !dbg !25
  %610 = load i32, ptr addrspace(3) %501, align 4, !dbg !25
  %611 = load i32, ptr addrspace(3) %503, align 4, !dbg !25
  %612 = load i32, ptr addrspace(3) %505, align 4, !dbg !25
  %613 = load i32, ptr addrspace(3) %507, align 4, !dbg !25
  %614 = load i32, ptr addrspace(3) %509, align 4, !dbg !25
  %615 = load i32, ptr addrspace(3) %511, align 4, !dbg !25
  %616 = load i32, ptr addrspace(3) %513, align 4, !dbg !25
  %617 = load i32, ptr addrspace(3) %515, align 4, !dbg !25
  %618 = load i32, ptr addrspace(3) %517, align 4, !dbg !25
  %619 = load i32, ptr addrspace(3) %519, align 4, !dbg !25
  %620 = load i32, ptr addrspace(3) %521, align 4, !dbg !25
  %621 = load i32, ptr addrspace(3) %523, align 4, !dbg !25
  %622 = load i32, ptr addrspace(3) %525, align 4, !dbg !25
  %623 = and i32 %12, 3, !dbg !24
  %624 = mul nuw nsw i32 %623, 136, !dbg !24
  %625 = select i1 %.not2, i32 0, i32 544, !dbg !24
  %626 = xor i32 %625, %624, !dbg !24
  %627 = shl nuw nsw i32 %31, 7, !dbg !24
  %628 = or disjoint i32 %626, %627, !dbg !24
  %629 = xor i32 %628, %378, !dbg !24
  %630 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %629, !dbg !24
  %631 = ptrtoint ptr addrspace(3) %630 to i32, !dbg !24
  %632 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %631) #4, !dbg !24
  %633 = extractvalue { i32, i32, i32, i32 } %632, 0, !dbg !24
  %634 = extractvalue { i32, i32, i32, i32 } %632, 1, !dbg !24
  %635 = extractvalue { i32, i32, i32, i32 } %632, 2, !dbg !24
  %636 = extractvalue { i32, i32, i32, i32 } %632, 3, !dbg !24
  %637 = xor i32 %629, 16, !dbg !24
  %638 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %637, !dbg !24
  %639 = ptrtoint ptr addrspace(3) %638 to i32, !dbg !24
  %640 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %639) #4, !dbg !24
  %641 = extractvalue { i32, i32, i32, i32 } %640, 0, !dbg !24
  %642 = extractvalue { i32, i32, i32, i32 } %640, 1, !dbg !24
  %643 = extractvalue { i32, i32, i32, i32 } %640, 2, !dbg !24
  %644 = extractvalue { i32, i32, i32, i32 } %640, 3, !dbg !24
  %645 = xor i32 %629, 32, !dbg !24
  %646 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %645, !dbg !24
  %647 = ptrtoint ptr addrspace(3) %646 to i32, !dbg !24
  %648 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %647) #4, !dbg !24
  %649 = extractvalue { i32, i32, i32, i32 } %648, 0, !dbg !24
  %650 = extractvalue { i32, i32, i32, i32 } %648, 1, !dbg !24
  %651 = extractvalue { i32, i32, i32, i32 } %648, 2, !dbg !24
  %652 = extractvalue { i32, i32, i32, i32 } %648, 3, !dbg !24
  %653 = xor i32 %629, 48, !dbg !24
  %654 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %653, !dbg !24
  %655 = ptrtoint ptr addrspace(3) %654 to i32, !dbg !24
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %655) #4, !dbg !24
  %657 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !24
  %658 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !24
  %659 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !24
  %660 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !24
  %661 = xor i32 %629, 64, !dbg !24
  %662 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %661, !dbg !24
  %663 = ptrtoint ptr addrspace(3) %662 to i32, !dbg !24
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %663) #4, !dbg !24
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !24
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !24
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !24
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !24
  %669 = xor i32 %629, 80, !dbg !24
  %670 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %669, !dbg !24
  %671 = ptrtoint ptr addrspace(3) %670 to i32, !dbg !24
  %672 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %671) #4, !dbg !24
  %673 = extractvalue { i32, i32, i32, i32 } %672, 0, !dbg !24
  %674 = extractvalue { i32, i32, i32, i32 } %672, 1, !dbg !24
  %675 = extractvalue { i32, i32, i32, i32 } %672, 2, !dbg !24
  %676 = extractvalue { i32, i32, i32, i32 } %672, 3, !dbg !24
  %677 = xor i32 %629, 96, !dbg !24
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %677, !dbg !24
  %679 = ptrtoint ptr addrspace(3) %678 to i32, !dbg !24
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %679) #4, !dbg !24
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !24
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !24
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !24
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !24
  %685 = xor i32 %629, 112, !dbg !24
  %686 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %685, !dbg !24
  %687 = ptrtoint ptr addrspace(3) %686 to i32, !dbg !24
  %688 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %687) #4, !dbg !24
  %689 = extractvalue { i32, i32, i32, i32 } %688, 0, !dbg !24
  %690 = extractvalue { i32, i32, i32, i32 } %688, 1, !dbg !24
  %691 = extractvalue { i32, i32, i32, i32 } %688, 2, !dbg !24
  %692 = extractvalue { i32, i32, i32, i32 } %688, 3, !dbg !24
  %693 = getelementptr inbounds nuw i8, ptr addrspace(3) %630, i32 4096, !dbg !24
  %694 = ptrtoint ptr addrspace(3) %693 to i32, !dbg !24
  %695 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %694) #4, !dbg !24
  %696 = extractvalue { i32, i32, i32, i32 } %695, 0, !dbg !24
  %697 = extractvalue { i32, i32, i32, i32 } %695, 1, !dbg !24
  %698 = extractvalue { i32, i32, i32, i32 } %695, 2, !dbg !24
  %699 = extractvalue { i32, i32, i32, i32 } %695, 3, !dbg !24
  %700 = xor i32 %629, 2064, !dbg !24
  %701 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %700, !dbg !24
  %702 = ptrtoint ptr addrspace(3) %701 to i32, !dbg !24
  %703 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %702) #4, !dbg !24
  %704 = extractvalue { i32, i32, i32, i32 } %703, 0, !dbg !24
  %705 = extractvalue { i32, i32, i32, i32 } %703, 1, !dbg !24
  %706 = extractvalue { i32, i32, i32, i32 } %703, 2, !dbg !24
  %707 = extractvalue { i32, i32, i32, i32 } %703, 3, !dbg !24
  %708 = xor i32 %629, 2080, !dbg !24
  %709 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %708, !dbg !24
  %710 = ptrtoint ptr addrspace(3) %709 to i32, !dbg !24
  %711 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %710) #4, !dbg !24
  %712 = extractvalue { i32, i32, i32, i32 } %711, 0, !dbg !24
  %713 = extractvalue { i32, i32, i32, i32 } %711, 1, !dbg !24
  %714 = extractvalue { i32, i32, i32, i32 } %711, 2, !dbg !24
  %715 = extractvalue { i32, i32, i32, i32 } %711, 3, !dbg !24
  %716 = xor i32 %629, 2096, !dbg !24
  %717 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %716, !dbg !24
  %718 = ptrtoint ptr addrspace(3) %717 to i32, !dbg !24
  %719 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %718) #4, !dbg !24
  %720 = extractvalue { i32, i32, i32, i32 } %719, 0, !dbg !24
  %721 = extractvalue { i32, i32, i32, i32 } %719, 1, !dbg !24
  %722 = extractvalue { i32, i32, i32, i32 } %719, 2, !dbg !24
  %723 = extractvalue { i32, i32, i32, i32 } %719, 3, !dbg !24
  %724 = xor i32 %629, 2112, !dbg !24
  %725 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %724, !dbg !24
  %726 = ptrtoint ptr addrspace(3) %725 to i32, !dbg !24
  %727 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %726) #4, !dbg !24
  %728 = extractvalue { i32, i32, i32, i32 } %727, 0, !dbg !24
  %729 = extractvalue { i32, i32, i32, i32 } %727, 1, !dbg !24
  %730 = extractvalue { i32, i32, i32, i32 } %727, 2, !dbg !24
  %731 = extractvalue { i32, i32, i32, i32 } %727, 3, !dbg !24
  %732 = xor i32 %629, 2128, !dbg !24
  %733 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %732, !dbg !24
  %734 = ptrtoint ptr addrspace(3) %733 to i32, !dbg !24
  %735 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %734) #4, !dbg !24
  %736 = extractvalue { i32, i32, i32, i32 } %735, 0, !dbg !24
  %737 = extractvalue { i32, i32, i32, i32 } %735, 1, !dbg !24
  %738 = extractvalue { i32, i32, i32, i32 } %735, 2, !dbg !24
  %739 = extractvalue { i32, i32, i32, i32 } %735, 3, !dbg !24
  %740 = xor i32 %629, 2144, !dbg !24
  %741 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %740, !dbg !24
  %742 = ptrtoint ptr addrspace(3) %741 to i32, !dbg !24
  %743 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %742) #4, !dbg !24
  %744 = extractvalue { i32, i32, i32, i32 } %743, 0, !dbg !24
  %745 = extractvalue { i32, i32, i32, i32 } %743, 1, !dbg !24
  %746 = extractvalue { i32, i32, i32, i32 } %743, 2, !dbg !24
  %747 = extractvalue { i32, i32, i32, i32 } %743, 3, !dbg !24
  %748 = xor i32 %629, 2160, !dbg !24
  %749 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %748, !dbg !24
  %750 = ptrtoint ptr addrspace(3) %749 to i32, !dbg !24
  %751 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %750) #4, !dbg !24
  %752 = extractvalue { i32, i32, i32, i32 } %751, 0, !dbg !24
  %753 = extractvalue { i32, i32, i32, i32 } %751, 1, !dbg !24
  %754 = extractvalue { i32, i32, i32, i32 } %751, 2, !dbg !24
  %755 = extractvalue { i32, i32, i32, i32 } %751, 3, !dbg !24
  %756 = getelementptr inbounds nuw i8, ptr addrspace(3) %630, i32 8192, !dbg !24
  %757 = ptrtoint ptr addrspace(3) %756 to i32, !dbg !24
  %758 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %757) #4, !dbg !24
  %759 = extractvalue { i32, i32, i32, i32 } %758, 0, !dbg !24
  %760 = extractvalue { i32, i32, i32, i32 } %758, 1, !dbg !24
  %761 = extractvalue { i32, i32, i32, i32 } %758, 2, !dbg !24
  %762 = extractvalue { i32, i32, i32, i32 } %758, 3, !dbg !24
  %763 = xor i32 %629, 4112, !dbg !24
  %764 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %763, !dbg !24
  %765 = ptrtoint ptr addrspace(3) %764 to i32, !dbg !24
  %766 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %765) #4, !dbg !24
  %767 = extractvalue { i32, i32, i32, i32 } %766, 0, !dbg !24
  %768 = extractvalue { i32, i32, i32, i32 } %766, 1, !dbg !24
  %769 = extractvalue { i32, i32, i32, i32 } %766, 2, !dbg !24
  %770 = extractvalue { i32, i32, i32, i32 } %766, 3, !dbg !24
  %771 = xor i32 %629, 4128, !dbg !24
  %772 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %771, !dbg !24
  %773 = ptrtoint ptr addrspace(3) %772 to i32, !dbg !24
  %774 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %773) #4, !dbg !24
  %775 = extractvalue { i32, i32, i32, i32 } %774, 0, !dbg !24
  %776 = extractvalue { i32, i32, i32, i32 } %774, 1, !dbg !24
  %777 = extractvalue { i32, i32, i32, i32 } %774, 2, !dbg !24
  %778 = extractvalue { i32, i32, i32, i32 } %774, 3, !dbg !24
  %779 = xor i32 %629, 4144, !dbg !24
  %780 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %779, !dbg !24
  %781 = ptrtoint ptr addrspace(3) %780 to i32, !dbg !24
  %782 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %781) #4, !dbg !24
  %783 = extractvalue { i32, i32, i32, i32 } %782, 0, !dbg !24
  %784 = extractvalue { i32, i32, i32, i32 } %782, 1, !dbg !24
  %785 = extractvalue { i32, i32, i32, i32 } %782, 2, !dbg !24
  %786 = extractvalue { i32, i32, i32, i32 } %782, 3, !dbg !24
  %787 = xor i32 %629, 4160, !dbg !24
  %788 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %787, !dbg !24
  %789 = ptrtoint ptr addrspace(3) %788 to i32, !dbg !24
  %790 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %789) #4, !dbg !24
  %791 = extractvalue { i32, i32, i32, i32 } %790, 0, !dbg !24
  %792 = extractvalue { i32, i32, i32, i32 } %790, 1, !dbg !24
  %793 = extractvalue { i32, i32, i32, i32 } %790, 2, !dbg !24
  %794 = extractvalue { i32, i32, i32, i32 } %790, 3, !dbg !24
  %795 = xor i32 %629, 4176, !dbg !24
  %796 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %795, !dbg !24
  %797 = ptrtoint ptr addrspace(3) %796 to i32, !dbg !24
  %798 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %797) #4, !dbg !24
  %799 = extractvalue { i32, i32, i32, i32 } %798, 0, !dbg !24
  %800 = extractvalue { i32, i32, i32, i32 } %798, 1, !dbg !24
  %801 = extractvalue { i32, i32, i32, i32 } %798, 2, !dbg !24
  %802 = extractvalue { i32, i32, i32, i32 } %798, 3, !dbg !24
  %803 = xor i32 %629, 4192, !dbg !24
  %804 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %803, !dbg !24
  %805 = ptrtoint ptr addrspace(3) %804 to i32, !dbg !24
  %806 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %805) #4, !dbg !24
  %807 = extractvalue { i32, i32, i32, i32 } %806, 0, !dbg !24
  %808 = extractvalue { i32, i32, i32, i32 } %806, 1, !dbg !24
  %809 = extractvalue { i32, i32, i32, i32 } %806, 2, !dbg !24
  %810 = extractvalue { i32, i32, i32, i32 } %806, 3, !dbg !24
  %811 = xor i32 %629, 4208, !dbg !24
  %812 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %811, !dbg !24
  %813 = ptrtoint ptr addrspace(3) %812 to i32, !dbg !24
  %814 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %813) #4, !dbg !24
  %815 = extractvalue { i32, i32, i32, i32 } %814, 0, !dbg !24
  %816 = extractvalue { i32, i32, i32, i32 } %814, 1, !dbg !24
  %817 = extractvalue { i32, i32, i32, i32 } %814, 2, !dbg !24
  %818 = extractvalue { i32, i32, i32, i32 } %814, 3, !dbg !24
  %819 = getelementptr inbounds nuw i8, ptr addrspace(3) %630, i32 12288, !dbg !24
  %820 = ptrtoint ptr addrspace(3) %819 to i32, !dbg !24
  %821 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %820) #4, !dbg !24
  %822 = extractvalue { i32, i32, i32, i32 } %821, 0, !dbg !24
  %823 = extractvalue { i32, i32, i32, i32 } %821, 1, !dbg !24
  %824 = extractvalue { i32, i32, i32, i32 } %821, 2, !dbg !24
  %825 = extractvalue { i32, i32, i32, i32 } %821, 3, !dbg !24
  %826 = xor i32 %629, 6160, !dbg !24
  %827 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %826, !dbg !24
  %828 = ptrtoint ptr addrspace(3) %827 to i32, !dbg !24
  %829 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %828) #4, !dbg !24
  %830 = extractvalue { i32, i32, i32, i32 } %829, 0, !dbg !24
  %831 = extractvalue { i32, i32, i32, i32 } %829, 1, !dbg !24
  %832 = extractvalue { i32, i32, i32, i32 } %829, 2, !dbg !24
  %833 = extractvalue { i32, i32, i32, i32 } %829, 3, !dbg !24
  %834 = xor i32 %629, 6176, !dbg !24
  %835 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %834, !dbg !24
  %836 = ptrtoint ptr addrspace(3) %835 to i32, !dbg !24
  %837 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %836) #4, !dbg !24
  %838 = extractvalue { i32, i32, i32, i32 } %837, 0, !dbg !24
  %839 = extractvalue { i32, i32, i32, i32 } %837, 1, !dbg !24
  %840 = extractvalue { i32, i32, i32, i32 } %837, 2, !dbg !24
  %841 = extractvalue { i32, i32, i32, i32 } %837, 3, !dbg !24
  %842 = xor i32 %629, 6192, !dbg !24
  %843 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %842, !dbg !24
  %844 = ptrtoint ptr addrspace(3) %843 to i32, !dbg !24
  %845 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %844) #4, !dbg !24
  %846 = extractvalue { i32, i32, i32, i32 } %845, 0, !dbg !24
  %847 = extractvalue { i32, i32, i32, i32 } %845, 1, !dbg !24
  %848 = extractvalue { i32, i32, i32, i32 } %845, 2, !dbg !24
  %849 = extractvalue { i32, i32, i32, i32 } %845, 3, !dbg !24
  %850 = xor i32 %629, 6208, !dbg !24
  %851 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %850, !dbg !24
  %852 = ptrtoint ptr addrspace(3) %851 to i32, !dbg !24
  %853 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %852) #4, !dbg !24
  %854 = extractvalue { i32, i32, i32, i32 } %853, 0, !dbg !24
  %855 = extractvalue { i32, i32, i32, i32 } %853, 1, !dbg !24
  %856 = extractvalue { i32, i32, i32, i32 } %853, 2, !dbg !24
  %857 = extractvalue { i32, i32, i32, i32 } %853, 3, !dbg !24
  %858 = xor i32 %629, 6224, !dbg !24
  %859 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %858, !dbg !24
  %860 = ptrtoint ptr addrspace(3) %859 to i32, !dbg !24
  %861 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %860) #4, !dbg !24
  %862 = extractvalue { i32, i32, i32, i32 } %861, 0, !dbg !24
  %863 = extractvalue { i32, i32, i32, i32 } %861, 1, !dbg !24
  %864 = extractvalue { i32, i32, i32, i32 } %861, 2, !dbg !24
  %865 = extractvalue { i32, i32, i32, i32 } %861, 3, !dbg !24
  %866 = xor i32 %629, 6240, !dbg !24
  %867 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %866, !dbg !24
  %868 = ptrtoint ptr addrspace(3) %867 to i32, !dbg !24
  %869 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %868) #4, !dbg !24
  %870 = extractvalue { i32, i32, i32, i32 } %869, 0, !dbg !24
  %871 = extractvalue { i32, i32, i32, i32 } %869, 1, !dbg !24
  %872 = extractvalue { i32, i32, i32, i32 } %869, 2, !dbg !24
  %873 = extractvalue { i32, i32, i32, i32 } %869, 3, !dbg !24
  %874 = xor i32 %629, 6256, !dbg !24
  %875 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %874, !dbg !24
  %876 = ptrtoint ptr addrspace(3) %875 to i32, !dbg !24
  %877 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %876) #4, !dbg !24
  %878 = extractvalue { i32, i32, i32, i32 } %877, 0, !dbg !24
  %879 = extractvalue { i32, i32, i32, i32 } %877, 1, !dbg !24
  %880 = extractvalue { i32, i32, i32, i32 } %877, 2, !dbg !24
  %881 = extractvalue { i32, i32, i32, i32 } %877, 3, !dbg !24
  %882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %633, i32 %634, i32 %635, i32 %636, i32 %496, i32 %498) #4, !dbg !26
  %883 = extractvalue { float, float, float, float } %882, 0, !dbg !26
  %884 = extractvalue { float, float, float, float } %882, 1, !dbg !26
  %885 = extractvalue { float, float, float, float } %882, 2, !dbg !26
  %886 = extractvalue { float, float, float, float } %882, 3, !dbg !26
  %887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %633, i32 %634, i32 %635, i32 %636, i32 %543, i32 %544) #4, !dbg !26
  %888 = extractvalue { float, float, float, float } %887, 0, !dbg !26
  %889 = extractvalue { float, float, float, float } %887, 1, !dbg !26
  %890 = extractvalue { float, float, float, float } %887, 2, !dbg !26
  %891 = extractvalue { float, float, float, float } %887, 3, !dbg !26
  %892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %633, i32 %634, i32 %635, i32 %636, i32 %575, i32 %576) #4, !dbg !26
  %893 = extractvalue { float, float, float, float } %892, 0, !dbg !26
  %894 = extractvalue { float, float, float, float } %892, 1, !dbg !26
  %895 = extractvalue { float, float, float, float } %892, 2, !dbg !26
  %896 = extractvalue { float, float, float, float } %892, 3, !dbg !26
  %897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %633, i32 %634, i32 %635, i32 %636, i32 %607, i32 %608) #4, !dbg !26
  %898 = extractvalue { float, float, float, float } %897, 0, !dbg !26
  %899 = extractvalue { float, float, float, float } %897, 1, !dbg !26
  %900 = extractvalue { float, float, float, float } %897, 2, !dbg !26
  %901 = extractvalue { float, float, float, float } %897, 3, !dbg !26
  %902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %696, i32 %697, i32 %698, i32 %699, i32 %496, i32 %498) #4, !dbg !26
  %903 = extractvalue { float, float, float, float } %902, 0, !dbg !26
  %904 = extractvalue { float, float, float, float } %902, 1, !dbg !26
  %905 = extractvalue { float, float, float, float } %902, 2, !dbg !26
  %906 = extractvalue { float, float, float, float } %902, 3, !dbg !26
  %907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %696, i32 %697, i32 %698, i32 %699, i32 %543, i32 %544) #4, !dbg !26
  %908 = extractvalue { float, float, float, float } %907, 0, !dbg !26
  %909 = extractvalue { float, float, float, float } %907, 1, !dbg !26
  %910 = extractvalue { float, float, float, float } %907, 2, !dbg !26
  %911 = extractvalue { float, float, float, float } %907, 3, !dbg !26
  %912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %696, i32 %697, i32 %698, i32 %699, i32 %575, i32 %576) #4, !dbg !26
  %913 = extractvalue { float, float, float, float } %912, 0, !dbg !26
  %914 = extractvalue { float, float, float, float } %912, 1, !dbg !26
  %915 = extractvalue { float, float, float, float } %912, 2, !dbg !26
  %916 = extractvalue { float, float, float, float } %912, 3, !dbg !26
  %917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %696, i32 %697, i32 %698, i32 %699, i32 %607, i32 %608) #4, !dbg !26
  %918 = extractvalue { float, float, float, float } %917, 0, !dbg !26
  %919 = extractvalue { float, float, float, float } %917, 1, !dbg !26
  %920 = extractvalue { float, float, float, float } %917, 2, !dbg !26
  %921 = extractvalue { float, float, float, float } %917, 3, !dbg !26
  %922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %759, i32 %760, i32 %761, i32 %762, i32 %496, i32 %498) #4, !dbg !26
  %923 = extractvalue { float, float, float, float } %922, 0, !dbg !26
  %924 = extractvalue { float, float, float, float } %922, 1, !dbg !26
  %925 = extractvalue { float, float, float, float } %922, 2, !dbg !26
  %926 = extractvalue { float, float, float, float } %922, 3, !dbg !26
  %927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %759, i32 %760, i32 %761, i32 %762, i32 %543, i32 %544) #4, !dbg !26
  %928 = extractvalue { float, float, float, float } %927, 0, !dbg !26
  %929 = extractvalue { float, float, float, float } %927, 1, !dbg !26
  %930 = extractvalue { float, float, float, float } %927, 2, !dbg !26
  %931 = extractvalue { float, float, float, float } %927, 3, !dbg !26
  %932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %759, i32 %760, i32 %761, i32 %762, i32 %575, i32 %576) #4, !dbg !26
  %933 = extractvalue { float, float, float, float } %932, 0, !dbg !26
  %934 = extractvalue { float, float, float, float } %932, 1, !dbg !26
  %935 = extractvalue { float, float, float, float } %932, 2, !dbg !26
  %936 = extractvalue { float, float, float, float } %932, 3, !dbg !26
  %937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %759, i32 %760, i32 %761, i32 %762, i32 %607, i32 %608) #4, !dbg !26
  %938 = extractvalue { float, float, float, float } %937, 0, !dbg !26
  %939 = extractvalue { float, float, float, float } %937, 1, !dbg !26
  %940 = extractvalue { float, float, float, float } %937, 2, !dbg !26
  %941 = extractvalue { float, float, float, float } %937, 3, !dbg !26
  %942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %822, i32 %823, i32 %824, i32 %825, i32 %496, i32 %498) #4, !dbg !26
  %943 = extractvalue { float, float, float, float } %942, 0, !dbg !26
  %944 = extractvalue { float, float, float, float } %942, 1, !dbg !26
  %945 = extractvalue { float, float, float, float } %942, 2, !dbg !26
  %946 = extractvalue { float, float, float, float } %942, 3, !dbg !26
  %947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %822, i32 %823, i32 %824, i32 %825, i32 %543, i32 %544) #4, !dbg !26
  %948 = extractvalue { float, float, float, float } %947, 0, !dbg !26
  %949 = extractvalue { float, float, float, float } %947, 1, !dbg !26
  %950 = extractvalue { float, float, float, float } %947, 2, !dbg !26
  %951 = extractvalue { float, float, float, float } %947, 3, !dbg !26
  %952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %822, i32 %823, i32 %824, i32 %825, i32 %575, i32 %576) #4, !dbg !26
  %953 = extractvalue { float, float, float, float } %952, 0, !dbg !26
  %954 = extractvalue { float, float, float, float } %952, 1, !dbg !26
  %955 = extractvalue { float, float, float, float } %952, 2, !dbg !26
  %956 = extractvalue { float, float, float, float } %952, 3, !dbg !26
  %957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %822, i32 %823, i32 %824, i32 %825, i32 %607, i32 %608) #4, !dbg !26
  %958 = extractvalue { float, float, float, float } %957, 0, !dbg !26
  %959 = extractvalue { float, float, float, float } %957, 1, !dbg !26
  %960 = extractvalue { float, float, float, float } %957, 2, !dbg !26
  %961 = extractvalue { float, float, float, float } %957, 3, !dbg !26
  %962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %883, float %884, float %885, float %886, i32 %641, i32 %642, i32 %643, i32 %644, i32 %500, i32 %502) #4, !dbg !26
  %963 = extractvalue { float, float, float, float } %962, 0, !dbg !26
  %964 = extractvalue { float, float, float, float } %962, 1, !dbg !26
  %965 = extractvalue { float, float, float, float } %962, 2, !dbg !26
  %966 = extractvalue { float, float, float, float } %962, 3, !dbg !26
  %967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %888, float %889, float %890, float %891, i32 %641, i32 %642, i32 %643, i32 %644, i32 %545, i32 %546) #4, !dbg !26
  %968 = extractvalue { float, float, float, float } %967, 0, !dbg !26
  %969 = extractvalue { float, float, float, float } %967, 1, !dbg !26
  %970 = extractvalue { float, float, float, float } %967, 2, !dbg !26
  %971 = extractvalue { float, float, float, float } %967, 3, !dbg !26
  %972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %893, float %894, float %895, float %896, i32 %641, i32 %642, i32 %643, i32 %644, i32 %577, i32 %578) #4, !dbg !26
  %973 = extractvalue { float, float, float, float } %972, 0, !dbg !26
  %974 = extractvalue { float, float, float, float } %972, 1, !dbg !26
  %975 = extractvalue { float, float, float, float } %972, 2, !dbg !26
  %976 = extractvalue { float, float, float, float } %972, 3, !dbg !26
  %977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %898, float %899, float %900, float %901, i32 %641, i32 %642, i32 %643, i32 %644, i32 %609, i32 %610) #4, !dbg !26
  %978 = extractvalue { float, float, float, float } %977, 0, !dbg !26
  %979 = extractvalue { float, float, float, float } %977, 1, !dbg !26
  %980 = extractvalue { float, float, float, float } %977, 2, !dbg !26
  %981 = extractvalue { float, float, float, float } %977, 3, !dbg !26
  %982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %903, float %904, float %905, float %906, i32 %704, i32 %705, i32 %706, i32 %707, i32 %500, i32 %502) #4, !dbg !26
  %983 = extractvalue { float, float, float, float } %982, 0, !dbg !26
  %984 = extractvalue { float, float, float, float } %982, 1, !dbg !26
  %985 = extractvalue { float, float, float, float } %982, 2, !dbg !26
  %986 = extractvalue { float, float, float, float } %982, 3, !dbg !26
  %987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %908, float %909, float %910, float %911, i32 %704, i32 %705, i32 %706, i32 %707, i32 %545, i32 %546) #4, !dbg !26
  %988 = extractvalue { float, float, float, float } %987, 0, !dbg !26
  %989 = extractvalue { float, float, float, float } %987, 1, !dbg !26
  %990 = extractvalue { float, float, float, float } %987, 2, !dbg !26
  %991 = extractvalue { float, float, float, float } %987, 3, !dbg !26
  %992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %913, float %914, float %915, float %916, i32 %704, i32 %705, i32 %706, i32 %707, i32 %577, i32 %578) #4, !dbg !26
  %993 = extractvalue { float, float, float, float } %992, 0, !dbg !26
  %994 = extractvalue { float, float, float, float } %992, 1, !dbg !26
  %995 = extractvalue { float, float, float, float } %992, 2, !dbg !26
  %996 = extractvalue { float, float, float, float } %992, 3, !dbg !26
  %997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %918, float %919, float %920, float %921, i32 %704, i32 %705, i32 %706, i32 %707, i32 %609, i32 %610) #4, !dbg !26
  %998 = extractvalue { float, float, float, float } %997, 0, !dbg !26
  %999 = extractvalue { float, float, float, float } %997, 1, !dbg !26
  %1000 = extractvalue { float, float, float, float } %997, 2, !dbg !26
  %1001 = extractvalue { float, float, float, float } %997, 3, !dbg !26
  %1002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %923, float %924, float %925, float %926, i32 %767, i32 %768, i32 %769, i32 %770, i32 %500, i32 %502) #4, !dbg !26
  %1003 = extractvalue { float, float, float, float } %1002, 0, !dbg !26
  %1004 = extractvalue { float, float, float, float } %1002, 1, !dbg !26
  %1005 = extractvalue { float, float, float, float } %1002, 2, !dbg !26
  %1006 = extractvalue { float, float, float, float } %1002, 3, !dbg !26
  %1007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %928, float %929, float %930, float %931, i32 %767, i32 %768, i32 %769, i32 %770, i32 %545, i32 %546) #4, !dbg !26
  %1008 = extractvalue { float, float, float, float } %1007, 0, !dbg !26
  %1009 = extractvalue { float, float, float, float } %1007, 1, !dbg !26
  %1010 = extractvalue { float, float, float, float } %1007, 2, !dbg !26
  %1011 = extractvalue { float, float, float, float } %1007, 3, !dbg !26
  %1012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %933, float %934, float %935, float %936, i32 %767, i32 %768, i32 %769, i32 %770, i32 %577, i32 %578) #4, !dbg !26
  %1013 = extractvalue { float, float, float, float } %1012, 0, !dbg !26
  %1014 = extractvalue { float, float, float, float } %1012, 1, !dbg !26
  %1015 = extractvalue { float, float, float, float } %1012, 2, !dbg !26
  %1016 = extractvalue { float, float, float, float } %1012, 3, !dbg !26
  %1017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %938, float %939, float %940, float %941, i32 %767, i32 %768, i32 %769, i32 %770, i32 %609, i32 %610) #4, !dbg !26
  %1018 = extractvalue { float, float, float, float } %1017, 0, !dbg !26
  %1019 = extractvalue { float, float, float, float } %1017, 1, !dbg !26
  %1020 = extractvalue { float, float, float, float } %1017, 2, !dbg !26
  %1021 = extractvalue { float, float, float, float } %1017, 3, !dbg !26
  %1022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %943, float %944, float %945, float %946, i32 %830, i32 %831, i32 %832, i32 %833, i32 %500, i32 %502) #4, !dbg !26
  %1023 = extractvalue { float, float, float, float } %1022, 0, !dbg !26
  %1024 = extractvalue { float, float, float, float } %1022, 1, !dbg !26
  %1025 = extractvalue { float, float, float, float } %1022, 2, !dbg !26
  %1026 = extractvalue { float, float, float, float } %1022, 3, !dbg !26
  %1027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %948, float %949, float %950, float %951, i32 %830, i32 %831, i32 %832, i32 %833, i32 %545, i32 %546) #4, !dbg !26
  %1028 = extractvalue { float, float, float, float } %1027, 0, !dbg !26
  %1029 = extractvalue { float, float, float, float } %1027, 1, !dbg !26
  %1030 = extractvalue { float, float, float, float } %1027, 2, !dbg !26
  %1031 = extractvalue { float, float, float, float } %1027, 3, !dbg !26
  %1032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %953, float %954, float %955, float %956, i32 %830, i32 %831, i32 %832, i32 %833, i32 %577, i32 %578) #4, !dbg !26
  %1033 = extractvalue { float, float, float, float } %1032, 0, !dbg !26
  %1034 = extractvalue { float, float, float, float } %1032, 1, !dbg !26
  %1035 = extractvalue { float, float, float, float } %1032, 2, !dbg !26
  %1036 = extractvalue { float, float, float, float } %1032, 3, !dbg !26
  %1037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %958, float %959, float %960, float %961, i32 %830, i32 %831, i32 %832, i32 %833, i32 %609, i32 %610) #4, !dbg !26
  %1038 = extractvalue { float, float, float, float } %1037, 0, !dbg !26
  %1039 = extractvalue { float, float, float, float } %1037, 1, !dbg !26
  %1040 = extractvalue { float, float, float, float } %1037, 2, !dbg !26
  %1041 = extractvalue { float, float, float, float } %1037, 3, !dbg !26
  %1042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %963, float %964, float %965, float %966, i32 %649, i32 %650, i32 %651, i32 %652, i32 %504, i32 %506) #4, !dbg !26
  %1043 = extractvalue { float, float, float, float } %1042, 0, !dbg !26
  %1044 = extractvalue { float, float, float, float } %1042, 1, !dbg !26
  %1045 = extractvalue { float, float, float, float } %1042, 2, !dbg !26
  %1046 = extractvalue { float, float, float, float } %1042, 3, !dbg !26
  %1047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %968, float %969, float %970, float %971, i32 %649, i32 %650, i32 %651, i32 %652, i32 %547, i32 %548) #4, !dbg !26
  %1048 = extractvalue { float, float, float, float } %1047, 0, !dbg !26
  %1049 = extractvalue { float, float, float, float } %1047, 1, !dbg !26
  %1050 = extractvalue { float, float, float, float } %1047, 2, !dbg !26
  %1051 = extractvalue { float, float, float, float } %1047, 3, !dbg !26
  %1052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %973, float %974, float %975, float %976, i32 %649, i32 %650, i32 %651, i32 %652, i32 %579, i32 %580) #4, !dbg !26
  %1053 = extractvalue { float, float, float, float } %1052, 0, !dbg !26
  %1054 = extractvalue { float, float, float, float } %1052, 1, !dbg !26
  %1055 = extractvalue { float, float, float, float } %1052, 2, !dbg !26
  %1056 = extractvalue { float, float, float, float } %1052, 3, !dbg !26
  %1057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %978, float %979, float %980, float %981, i32 %649, i32 %650, i32 %651, i32 %652, i32 %611, i32 %612) #4, !dbg !26
  %1058 = extractvalue { float, float, float, float } %1057, 0, !dbg !26
  %1059 = extractvalue { float, float, float, float } %1057, 1, !dbg !26
  %1060 = extractvalue { float, float, float, float } %1057, 2, !dbg !26
  %1061 = extractvalue { float, float, float, float } %1057, 3, !dbg !26
  %1062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %983, float %984, float %985, float %986, i32 %712, i32 %713, i32 %714, i32 %715, i32 %504, i32 %506) #4, !dbg !26
  %1063 = extractvalue { float, float, float, float } %1062, 0, !dbg !26
  %1064 = extractvalue { float, float, float, float } %1062, 1, !dbg !26
  %1065 = extractvalue { float, float, float, float } %1062, 2, !dbg !26
  %1066 = extractvalue { float, float, float, float } %1062, 3, !dbg !26
  %1067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %988, float %989, float %990, float %991, i32 %712, i32 %713, i32 %714, i32 %715, i32 %547, i32 %548) #4, !dbg !26
  %1068 = extractvalue { float, float, float, float } %1067, 0, !dbg !26
  %1069 = extractvalue { float, float, float, float } %1067, 1, !dbg !26
  %1070 = extractvalue { float, float, float, float } %1067, 2, !dbg !26
  %1071 = extractvalue { float, float, float, float } %1067, 3, !dbg !26
  %1072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %993, float %994, float %995, float %996, i32 %712, i32 %713, i32 %714, i32 %715, i32 %579, i32 %580) #4, !dbg !26
  %1073 = extractvalue { float, float, float, float } %1072, 0, !dbg !26
  %1074 = extractvalue { float, float, float, float } %1072, 1, !dbg !26
  %1075 = extractvalue { float, float, float, float } %1072, 2, !dbg !26
  %1076 = extractvalue { float, float, float, float } %1072, 3, !dbg !26
  %1077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %998, float %999, float %1000, float %1001, i32 %712, i32 %713, i32 %714, i32 %715, i32 %611, i32 %612) #4, !dbg !26
  %1078 = extractvalue { float, float, float, float } %1077, 0, !dbg !26
  %1079 = extractvalue { float, float, float, float } %1077, 1, !dbg !26
  %1080 = extractvalue { float, float, float, float } %1077, 2, !dbg !26
  %1081 = extractvalue { float, float, float, float } %1077, 3, !dbg !26
  %1082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1003, float %1004, float %1005, float %1006, i32 %775, i32 %776, i32 %777, i32 %778, i32 %504, i32 %506) #4, !dbg !26
  %1083 = extractvalue { float, float, float, float } %1082, 0, !dbg !26
  %1084 = extractvalue { float, float, float, float } %1082, 1, !dbg !26
  %1085 = extractvalue { float, float, float, float } %1082, 2, !dbg !26
  %1086 = extractvalue { float, float, float, float } %1082, 3, !dbg !26
  %1087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1008, float %1009, float %1010, float %1011, i32 %775, i32 %776, i32 %777, i32 %778, i32 %547, i32 %548) #4, !dbg !26
  %1088 = extractvalue { float, float, float, float } %1087, 0, !dbg !26
  %1089 = extractvalue { float, float, float, float } %1087, 1, !dbg !26
  %1090 = extractvalue { float, float, float, float } %1087, 2, !dbg !26
  %1091 = extractvalue { float, float, float, float } %1087, 3, !dbg !26
  %1092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1013, float %1014, float %1015, float %1016, i32 %775, i32 %776, i32 %777, i32 %778, i32 %579, i32 %580) #4, !dbg !26
  %1093 = extractvalue { float, float, float, float } %1092, 0, !dbg !26
  %1094 = extractvalue { float, float, float, float } %1092, 1, !dbg !26
  %1095 = extractvalue { float, float, float, float } %1092, 2, !dbg !26
  %1096 = extractvalue { float, float, float, float } %1092, 3, !dbg !26
  %1097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1018, float %1019, float %1020, float %1021, i32 %775, i32 %776, i32 %777, i32 %778, i32 %611, i32 %612) #4, !dbg !26
  %1098 = extractvalue { float, float, float, float } %1097, 0, !dbg !26
  %1099 = extractvalue { float, float, float, float } %1097, 1, !dbg !26
  %1100 = extractvalue { float, float, float, float } %1097, 2, !dbg !26
  %1101 = extractvalue { float, float, float, float } %1097, 3, !dbg !26
  %1102 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1023, float %1024, float %1025, float %1026, i32 %838, i32 %839, i32 %840, i32 %841, i32 %504, i32 %506) #4, !dbg !26
  %1103 = extractvalue { float, float, float, float } %1102, 0, !dbg !26
  %1104 = extractvalue { float, float, float, float } %1102, 1, !dbg !26
  %1105 = extractvalue { float, float, float, float } %1102, 2, !dbg !26
  %1106 = extractvalue { float, float, float, float } %1102, 3, !dbg !26
  %1107 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1028, float %1029, float %1030, float %1031, i32 %838, i32 %839, i32 %840, i32 %841, i32 %547, i32 %548) #4, !dbg !26
  %1108 = extractvalue { float, float, float, float } %1107, 0, !dbg !26
  %1109 = extractvalue { float, float, float, float } %1107, 1, !dbg !26
  %1110 = extractvalue { float, float, float, float } %1107, 2, !dbg !26
  %1111 = extractvalue { float, float, float, float } %1107, 3, !dbg !26
  %1112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1033, float %1034, float %1035, float %1036, i32 %838, i32 %839, i32 %840, i32 %841, i32 %579, i32 %580) #4, !dbg !26
  %1113 = extractvalue { float, float, float, float } %1112, 0, !dbg !26
  %1114 = extractvalue { float, float, float, float } %1112, 1, !dbg !26
  %1115 = extractvalue { float, float, float, float } %1112, 2, !dbg !26
  %1116 = extractvalue { float, float, float, float } %1112, 3, !dbg !26
  %1117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1038, float %1039, float %1040, float %1041, i32 %838, i32 %839, i32 %840, i32 %841, i32 %611, i32 %612) #4, !dbg !26
  %1118 = extractvalue { float, float, float, float } %1117, 0, !dbg !26
  %1119 = extractvalue { float, float, float, float } %1117, 1, !dbg !26
  %1120 = extractvalue { float, float, float, float } %1117, 2, !dbg !26
  %1121 = extractvalue { float, float, float, float } %1117, 3, !dbg !26
  %1122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1043, float %1044, float %1045, float %1046, i32 %657, i32 %658, i32 %659, i32 %660, i32 %508, i32 %510) #4, !dbg !26
  %1123 = extractvalue { float, float, float, float } %1122, 0, !dbg !26
  %1124 = extractvalue { float, float, float, float } %1122, 1, !dbg !26
  %1125 = extractvalue { float, float, float, float } %1122, 2, !dbg !26
  %1126 = extractvalue { float, float, float, float } %1122, 3, !dbg !26
  %1127 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1048, float %1049, float %1050, float %1051, i32 %657, i32 %658, i32 %659, i32 %660, i32 %549, i32 %550) #4, !dbg !26
  %1128 = extractvalue { float, float, float, float } %1127, 0, !dbg !26
  %1129 = extractvalue { float, float, float, float } %1127, 1, !dbg !26
  %1130 = extractvalue { float, float, float, float } %1127, 2, !dbg !26
  %1131 = extractvalue { float, float, float, float } %1127, 3, !dbg !26
  %1132 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1053, float %1054, float %1055, float %1056, i32 %657, i32 %658, i32 %659, i32 %660, i32 %581, i32 %582) #4, !dbg !26
  %1133 = extractvalue { float, float, float, float } %1132, 0, !dbg !26
  %1134 = extractvalue { float, float, float, float } %1132, 1, !dbg !26
  %1135 = extractvalue { float, float, float, float } %1132, 2, !dbg !26
  %1136 = extractvalue { float, float, float, float } %1132, 3, !dbg !26
  %1137 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1058, float %1059, float %1060, float %1061, i32 %657, i32 %658, i32 %659, i32 %660, i32 %613, i32 %614) #4, !dbg !26
  %1138 = extractvalue { float, float, float, float } %1137, 0, !dbg !26
  %1139 = extractvalue { float, float, float, float } %1137, 1, !dbg !26
  %1140 = extractvalue { float, float, float, float } %1137, 2, !dbg !26
  %1141 = extractvalue { float, float, float, float } %1137, 3, !dbg !26
  %1142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1063, float %1064, float %1065, float %1066, i32 %720, i32 %721, i32 %722, i32 %723, i32 %508, i32 %510) #4, !dbg !26
  %1143 = extractvalue { float, float, float, float } %1142, 0, !dbg !26
  %1144 = extractvalue { float, float, float, float } %1142, 1, !dbg !26
  %1145 = extractvalue { float, float, float, float } %1142, 2, !dbg !26
  %1146 = extractvalue { float, float, float, float } %1142, 3, !dbg !26
  %1147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1068, float %1069, float %1070, float %1071, i32 %720, i32 %721, i32 %722, i32 %723, i32 %549, i32 %550) #4, !dbg !26
  %1148 = extractvalue { float, float, float, float } %1147, 0, !dbg !26
  %1149 = extractvalue { float, float, float, float } %1147, 1, !dbg !26
  %1150 = extractvalue { float, float, float, float } %1147, 2, !dbg !26
  %1151 = extractvalue { float, float, float, float } %1147, 3, !dbg !26
  %1152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1073, float %1074, float %1075, float %1076, i32 %720, i32 %721, i32 %722, i32 %723, i32 %581, i32 %582) #4, !dbg !26
  %1153 = extractvalue { float, float, float, float } %1152, 0, !dbg !26
  %1154 = extractvalue { float, float, float, float } %1152, 1, !dbg !26
  %1155 = extractvalue { float, float, float, float } %1152, 2, !dbg !26
  %1156 = extractvalue { float, float, float, float } %1152, 3, !dbg !26
  %1157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1078, float %1079, float %1080, float %1081, i32 %720, i32 %721, i32 %722, i32 %723, i32 %613, i32 %614) #4, !dbg !26
  %1158 = extractvalue { float, float, float, float } %1157, 0, !dbg !26
  %1159 = extractvalue { float, float, float, float } %1157, 1, !dbg !26
  %1160 = extractvalue { float, float, float, float } %1157, 2, !dbg !26
  %1161 = extractvalue { float, float, float, float } %1157, 3, !dbg !26
  %1162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1083, float %1084, float %1085, float %1086, i32 %783, i32 %784, i32 %785, i32 %786, i32 %508, i32 %510) #4, !dbg !26
  %1163 = extractvalue { float, float, float, float } %1162, 0, !dbg !26
  %1164 = extractvalue { float, float, float, float } %1162, 1, !dbg !26
  %1165 = extractvalue { float, float, float, float } %1162, 2, !dbg !26
  %1166 = extractvalue { float, float, float, float } %1162, 3, !dbg !26
  %1167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1088, float %1089, float %1090, float %1091, i32 %783, i32 %784, i32 %785, i32 %786, i32 %549, i32 %550) #4, !dbg !26
  %1168 = extractvalue { float, float, float, float } %1167, 0, !dbg !26
  %1169 = extractvalue { float, float, float, float } %1167, 1, !dbg !26
  %1170 = extractvalue { float, float, float, float } %1167, 2, !dbg !26
  %1171 = extractvalue { float, float, float, float } %1167, 3, !dbg !26
  %1172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1093, float %1094, float %1095, float %1096, i32 %783, i32 %784, i32 %785, i32 %786, i32 %581, i32 %582) #4, !dbg !26
  %1173 = extractvalue { float, float, float, float } %1172, 0, !dbg !26
  %1174 = extractvalue { float, float, float, float } %1172, 1, !dbg !26
  %1175 = extractvalue { float, float, float, float } %1172, 2, !dbg !26
  %1176 = extractvalue { float, float, float, float } %1172, 3, !dbg !26
  %1177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1098, float %1099, float %1100, float %1101, i32 %783, i32 %784, i32 %785, i32 %786, i32 %613, i32 %614) #4, !dbg !26
  %1178 = extractvalue { float, float, float, float } %1177, 0, !dbg !26
  %1179 = extractvalue { float, float, float, float } %1177, 1, !dbg !26
  %1180 = extractvalue { float, float, float, float } %1177, 2, !dbg !26
  %1181 = extractvalue { float, float, float, float } %1177, 3, !dbg !26
  %1182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1103, float %1104, float %1105, float %1106, i32 %846, i32 %847, i32 %848, i32 %849, i32 %508, i32 %510) #4, !dbg !26
  %1183 = extractvalue { float, float, float, float } %1182, 0, !dbg !26
  %1184 = extractvalue { float, float, float, float } %1182, 1, !dbg !26
  %1185 = extractvalue { float, float, float, float } %1182, 2, !dbg !26
  %1186 = extractvalue { float, float, float, float } %1182, 3, !dbg !26
  %1187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1108, float %1109, float %1110, float %1111, i32 %846, i32 %847, i32 %848, i32 %849, i32 %549, i32 %550) #4, !dbg !26
  %1188 = extractvalue { float, float, float, float } %1187, 0, !dbg !26
  %1189 = extractvalue { float, float, float, float } %1187, 1, !dbg !26
  %1190 = extractvalue { float, float, float, float } %1187, 2, !dbg !26
  %1191 = extractvalue { float, float, float, float } %1187, 3, !dbg !26
  %1192 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1113, float %1114, float %1115, float %1116, i32 %846, i32 %847, i32 %848, i32 %849, i32 %581, i32 %582) #4, !dbg !26
  %1193 = extractvalue { float, float, float, float } %1192, 0, !dbg !26
  %1194 = extractvalue { float, float, float, float } %1192, 1, !dbg !26
  %1195 = extractvalue { float, float, float, float } %1192, 2, !dbg !26
  %1196 = extractvalue { float, float, float, float } %1192, 3, !dbg !26
  %1197 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1118, float %1119, float %1120, float %1121, i32 %846, i32 %847, i32 %848, i32 %849, i32 %613, i32 %614) #4, !dbg !26
  %1198 = extractvalue { float, float, float, float } %1197, 0, !dbg !26
  %1199 = extractvalue { float, float, float, float } %1197, 1, !dbg !26
  %1200 = extractvalue { float, float, float, float } %1197, 2, !dbg !26
  %1201 = extractvalue { float, float, float, float } %1197, 3, !dbg !26
  %1202 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1123, float %1124, float %1125, float %1126, i32 %665, i32 %666, i32 %667, i32 %668, i32 %512, i32 %514) #4, !dbg !26
  %1203 = extractvalue { float, float, float, float } %1202, 0, !dbg !26
  %1204 = extractvalue { float, float, float, float } %1202, 1, !dbg !26
  %1205 = extractvalue { float, float, float, float } %1202, 2, !dbg !26
  %1206 = extractvalue { float, float, float, float } %1202, 3, !dbg !26
  %1207 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1128, float %1129, float %1130, float %1131, i32 %665, i32 %666, i32 %667, i32 %668, i32 %551, i32 %552) #4, !dbg !26
  %1208 = extractvalue { float, float, float, float } %1207, 0, !dbg !26
  %1209 = extractvalue { float, float, float, float } %1207, 1, !dbg !26
  %1210 = extractvalue { float, float, float, float } %1207, 2, !dbg !26
  %1211 = extractvalue { float, float, float, float } %1207, 3, !dbg !26
  %1212 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1133, float %1134, float %1135, float %1136, i32 %665, i32 %666, i32 %667, i32 %668, i32 %583, i32 %584) #4, !dbg !26
  %1213 = extractvalue { float, float, float, float } %1212, 0, !dbg !26
  %1214 = extractvalue { float, float, float, float } %1212, 1, !dbg !26
  %1215 = extractvalue { float, float, float, float } %1212, 2, !dbg !26
  %1216 = extractvalue { float, float, float, float } %1212, 3, !dbg !26
  %1217 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1138, float %1139, float %1140, float %1141, i32 %665, i32 %666, i32 %667, i32 %668, i32 %615, i32 %616) #4, !dbg !26
  %1218 = extractvalue { float, float, float, float } %1217, 0, !dbg !26
  %1219 = extractvalue { float, float, float, float } %1217, 1, !dbg !26
  %1220 = extractvalue { float, float, float, float } %1217, 2, !dbg !26
  %1221 = extractvalue { float, float, float, float } %1217, 3, !dbg !26
  %1222 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1143, float %1144, float %1145, float %1146, i32 %728, i32 %729, i32 %730, i32 %731, i32 %512, i32 %514) #4, !dbg !26
  %1223 = extractvalue { float, float, float, float } %1222, 0, !dbg !26
  %1224 = extractvalue { float, float, float, float } %1222, 1, !dbg !26
  %1225 = extractvalue { float, float, float, float } %1222, 2, !dbg !26
  %1226 = extractvalue { float, float, float, float } %1222, 3, !dbg !26
  %1227 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1148, float %1149, float %1150, float %1151, i32 %728, i32 %729, i32 %730, i32 %731, i32 %551, i32 %552) #4, !dbg !26
  %1228 = extractvalue { float, float, float, float } %1227, 0, !dbg !26
  %1229 = extractvalue { float, float, float, float } %1227, 1, !dbg !26
  %1230 = extractvalue { float, float, float, float } %1227, 2, !dbg !26
  %1231 = extractvalue { float, float, float, float } %1227, 3, !dbg !26
  %1232 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1153, float %1154, float %1155, float %1156, i32 %728, i32 %729, i32 %730, i32 %731, i32 %583, i32 %584) #4, !dbg !26
  %1233 = extractvalue { float, float, float, float } %1232, 0, !dbg !26
  %1234 = extractvalue { float, float, float, float } %1232, 1, !dbg !26
  %1235 = extractvalue { float, float, float, float } %1232, 2, !dbg !26
  %1236 = extractvalue { float, float, float, float } %1232, 3, !dbg !26
  %1237 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1158, float %1159, float %1160, float %1161, i32 %728, i32 %729, i32 %730, i32 %731, i32 %615, i32 %616) #4, !dbg !26
  %1238 = extractvalue { float, float, float, float } %1237, 0, !dbg !26
  %1239 = extractvalue { float, float, float, float } %1237, 1, !dbg !26
  %1240 = extractvalue { float, float, float, float } %1237, 2, !dbg !26
  %1241 = extractvalue { float, float, float, float } %1237, 3, !dbg !26
  %1242 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1163, float %1164, float %1165, float %1166, i32 %791, i32 %792, i32 %793, i32 %794, i32 %512, i32 %514) #4, !dbg !26
  %1243 = extractvalue { float, float, float, float } %1242, 0, !dbg !26
  %1244 = extractvalue { float, float, float, float } %1242, 1, !dbg !26
  %1245 = extractvalue { float, float, float, float } %1242, 2, !dbg !26
  %1246 = extractvalue { float, float, float, float } %1242, 3, !dbg !26
  %1247 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1168, float %1169, float %1170, float %1171, i32 %791, i32 %792, i32 %793, i32 %794, i32 %551, i32 %552) #4, !dbg !26
  %1248 = extractvalue { float, float, float, float } %1247, 0, !dbg !26
  %1249 = extractvalue { float, float, float, float } %1247, 1, !dbg !26
  %1250 = extractvalue { float, float, float, float } %1247, 2, !dbg !26
  %1251 = extractvalue { float, float, float, float } %1247, 3, !dbg !26
  %1252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1173, float %1174, float %1175, float %1176, i32 %791, i32 %792, i32 %793, i32 %794, i32 %583, i32 %584) #4, !dbg !26
  %1253 = extractvalue { float, float, float, float } %1252, 0, !dbg !26
  %1254 = extractvalue { float, float, float, float } %1252, 1, !dbg !26
  %1255 = extractvalue { float, float, float, float } %1252, 2, !dbg !26
  %1256 = extractvalue { float, float, float, float } %1252, 3, !dbg !26
  %1257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1178, float %1179, float %1180, float %1181, i32 %791, i32 %792, i32 %793, i32 %794, i32 %615, i32 %616) #4, !dbg !26
  %1258 = extractvalue { float, float, float, float } %1257, 0, !dbg !26
  %1259 = extractvalue { float, float, float, float } %1257, 1, !dbg !26
  %1260 = extractvalue { float, float, float, float } %1257, 2, !dbg !26
  %1261 = extractvalue { float, float, float, float } %1257, 3, !dbg !26
  %1262 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1183, float %1184, float %1185, float %1186, i32 %854, i32 %855, i32 %856, i32 %857, i32 %512, i32 %514) #4, !dbg !26
  %1263 = extractvalue { float, float, float, float } %1262, 0, !dbg !26
  %1264 = extractvalue { float, float, float, float } %1262, 1, !dbg !26
  %1265 = extractvalue { float, float, float, float } %1262, 2, !dbg !26
  %1266 = extractvalue { float, float, float, float } %1262, 3, !dbg !26
  %1267 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1188, float %1189, float %1190, float %1191, i32 %854, i32 %855, i32 %856, i32 %857, i32 %551, i32 %552) #4, !dbg !26
  %1268 = extractvalue { float, float, float, float } %1267, 0, !dbg !26
  %1269 = extractvalue { float, float, float, float } %1267, 1, !dbg !26
  %1270 = extractvalue { float, float, float, float } %1267, 2, !dbg !26
  %1271 = extractvalue { float, float, float, float } %1267, 3, !dbg !26
  %1272 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1193, float %1194, float %1195, float %1196, i32 %854, i32 %855, i32 %856, i32 %857, i32 %583, i32 %584) #4, !dbg !26
  %1273 = extractvalue { float, float, float, float } %1272, 0, !dbg !26
  %1274 = extractvalue { float, float, float, float } %1272, 1, !dbg !26
  %1275 = extractvalue { float, float, float, float } %1272, 2, !dbg !26
  %1276 = extractvalue { float, float, float, float } %1272, 3, !dbg !26
  %1277 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1198, float %1199, float %1200, float %1201, i32 %854, i32 %855, i32 %856, i32 %857, i32 %615, i32 %616) #4, !dbg !26
  %1278 = extractvalue { float, float, float, float } %1277, 0, !dbg !26
  %1279 = extractvalue { float, float, float, float } %1277, 1, !dbg !26
  %1280 = extractvalue { float, float, float, float } %1277, 2, !dbg !26
  %1281 = extractvalue { float, float, float, float } %1277, 3, !dbg !26
  %1282 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1203, float %1204, float %1205, float %1206, i32 %673, i32 %674, i32 %675, i32 %676, i32 %516, i32 %518) #4, !dbg !26
  %1283 = extractvalue { float, float, float, float } %1282, 0, !dbg !26
  %1284 = extractvalue { float, float, float, float } %1282, 1, !dbg !26
  %1285 = extractvalue { float, float, float, float } %1282, 2, !dbg !26
  %1286 = extractvalue { float, float, float, float } %1282, 3, !dbg !26
  %1287 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1208, float %1209, float %1210, float %1211, i32 %673, i32 %674, i32 %675, i32 %676, i32 %553, i32 %554) #4, !dbg !26
  %1288 = extractvalue { float, float, float, float } %1287, 0, !dbg !26
  %1289 = extractvalue { float, float, float, float } %1287, 1, !dbg !26
  %1290 = extractvalue { float, float, float, float } %1287, 2, !dbg !26
  %1291 = extractvalue { float, float, float, float } %1287, 3, !dbg !26
  %1292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1213, float %1214, float %1215, float %1216, i32 %673, i32 %674, i32 %675, i32 %676, i32 %585, i32 %586) #4, !dbg !26
  %1293 = extractvalue { float, float, float, float } %1292, 0, !dbg !26
  %1294 = extractvalue { float, float, float, float } %1292, 1, !dbg !26
  %1295 = extractvalue { float, float, float, float } %1292, 2, !dbg !26
  %1296 = extractvalue { float, float, float, float } %1292, 3, !dbg !26
  %1297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1218, float %1219, float %1220, float %1221, i32 %673, i32 %674, i32 %675, i32 %676, i32 %617, i32 %618) #4, !dbg !26
  %1298 = extractvalue { float, float, float, float } %1297, 0, !dbg !26
  %1299 = extractvalue { float, float, float, float } %1297, 1, !dbg !26
  %1300 = extractvalue { float, float, float, float } %1297, 2, !dbg !26
  %1301 = extractvalue { float, float, float, float } %1297, 3, !dbg !26
  %1302 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1223, float %1224, float %1225, float %1226, i32 %736, i32 %737, i32 %738, i32 %739, i32 %516, i32 %518) #4, !dbg !26
  %1303 = extractvalue { float, float, float, float } %1302, 0, !dbg !26
  %1304 = extractvalue { float, float, float, float } %1302, 1, !dbg !26
  %1305 = extractvalue { float, float, float, float } %1302, 2, !dbg !26
  %1306 = extractvalue { float, float, float, float } %1302, 3, !dbg !26
  %1307 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1228, float %1229, float %1230, float %1231, i32 %736, i32 %737, i32 %738, i32 %739, i32 %553, i32 %554) #4, !dbg !26
  %1308 = extractvalue { float, float, float, float } %1307, 0, !dbg !26
  %1309 = extractvalue { float, float, float, float } %1307, 1, !dbg !26
  %1310 = extractvalue { float, float, float, float } %1307, 2, !dbg !26
  %1311 = extractvalue { float, float, float, float } %1307, 3, !dbg !26
  %1312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1233, float %1234, float %1235, float %1236, i32 %736, i32 %737, i32 %738, i32 %739, i32 %585, i32 %586) #4, !dbg !26
  %1313 = extractvalue { float, float, float, float } %1312, 0, !dbg !26
  %1314 = extractvalue { float, float, float, float } %1312, 1, !dbg !26
  %1315 = extractvalue { float, float, float, float } %1312, 2, !dbg !26
  %1316 = extractvalue { float, float, float, float } %1312, 3, !dbg !26
  %1317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1238, float %1239, float %1240, float %1241, i32 %736, i32 %737, i32 %738, i32 %739, i32 %617, i32 %618) #4, !dbg !26
  %1318 = extractvalue { float, float, float, float } %1317, 0, !dbg !26
  %1319 = extractvalue { float, float, float, float } %1317, 1, !dbg !26
  %1320 = extractvalue { float, float, float, float } %1317, 2, !dbg !26
  %1321 = extractvalue { float, float, float, float } %1317, 3, !dbg !26
  %1322 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1243, float %1244, float %1245, float %1246, i32 %799, i32 %800, i32 %801, i32 %802, i32 %516, i32 %518) #4, !dbg !26
  %1323 = extractvalue { float, float, float, float } %1322, 0, !dbg !26
  %1324 = extractvalue { float, float, float, float } %1322, 1, !dbg !26
  %1325 = extractvalue { float, float, float, float } %1322, 2, !dbg !26
  %1326 = extractvalue { float, float, float, float } %1322, 3, !dbg !26
  %1327 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1248, float %1249, float %1250, float %1251, i32 %799, i32 %800, i32 %801, i32 %802, i32 %553, i32 %554) #4, !dbg !26
  %1328 = extractvalue { float, float, float, float } %1327, 0, !dbg !26
  %1329 = extractvalue { float, float, float, float } %1327, 1, !dbg !26
  %1330 = extractvalue { float, float, float, float } %1327, 2, !dbg !26
  %1331 = extractvalue { float, float, float, float } %1327, 3, !dbg !26
  %1332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1253, float %1254, float %1255, float %1256, i32 %799, i32 %800, i32 %801, i32 %802, i32 %585, i32 %586) #4, !dbg !26
  %1333 = extractvalue { float, float, float, float } %1332, 0, !dbg !26
  %1334 = extractvalue { float, float, float, float } %1332, 1, !dbg !26
  %1335 = extractvalue { float, float, float, float } %1332, 2, !dbg !26
  %1336 = extractvalue { float, float, float, float } %1332, 3, !dbg !26
  %1337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1258, float %1259, float %1260, float %1261, i32 %799, i32 %800, i32 %801, i32 %802, i32 %617, i32 %618) #4, !dbg !26
  %1338 = extractvalue { float, float, float, float } %1337, 0, !dbg !26
  %1339 = extractvalue { float, float, float, float } %1337, 1, !dbg !26
  %1340 = extractvalue { float, float, float, float } %1337, 2, !dbg !26
  %1341 = extractvalue { float, float, float, float } %1337, 3, !dbg !26
  %1342 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1263, float %1264, float %1265, float %1266, i32 %862, i32 %863, i32 %864, i32 %865, i32 %516, i32 %518) #4, !dbg !26
  %1343 = extractvalue { float, float, float, float } %1342, 0, !dbg !26
  %1344 = extractvalue { float, float, float, float } %1342, 1, !dbg !26
  %1345 = extractvalue { float, float, float, float } %1342, 2, !dbg !26
  %1346 = extractvalue { float, float, float, float } %1342, 3, !dbg !26
  %1347 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1268, float %1269, float %1270, float %1271, i32 %862, i32 %863, i32 %864, i32 %865, i32 %553, i32 %554) #4, !dbg !26
  %1348 = extractvalue { float, float, float, float } %1347, 0, !dbg !26
  %1349 = extractvalue { float, float, float, float } %1347, 1, !dbg !26
  %1350 = extractvalue { float, float, float, float } %1347, 2, !dbg !26
  %1351 = extractvalue { float, float, float, float } %1347, 3, !dbg !26
  %1352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1273, float %1274, float %1275, float %1276, i32 %862, i32 %863, i32 %864, i32 %865, i32 %585, i32 %586) #4, !dbg !26
  %1353 = extractvalue { float, float, float, float } %1352, 0, !dbg !26
  %1354 = extractvalue { float, float, float, float } %1352, 1, !dbg !26
  %1355 = extractvalue { float, float, float, float } %1352, 2, !dbg !26
  %1356 = extractvalue { float, float, float, float } %1352, 3, !dbg !26
  %1357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1278, float %1279, float %1280, float %1281, i32 %862, i32 %863, i32 %864, i32 %865, i32 %617, i32 %618) #4, !dbg !26
  %1358 = extractvalue { float, float, float, float } %1357, 0, !dbg !26
  %1359 = extractvalue { float, float, float, float } %1357, 1, !dbg !26
  %1360 = extractvalue { float, float, float, float } %1357, 2, !dbg !26
  %1361 = extractvalue { float, float, float, float } %1357, 3, !dbg !26
  %1362 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1283, float %1284, float %1285, float %1286, i32 %681, i32 %682, i32 %683, i32 %684, i32 %520, i32 %522) #4, !dbg !26
  %1363 = extractvalue { float, float, float, float } %1362, 0, !dbg !26
  %1364 = extractvalue { float, float, float, float } %1362, 1, !dbg !26
  %1365 = extractvalue { float, float, float, float } %1362, 2, !dbg !26
  %1366 = extractvalue { float, float, float, float } %1362, 3, !dbg !26
  %1367 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1288, float %1289, float %1290, float %1291, i32 %681, i32 %682, i32 %683, i32 %684, i32 %555, i32 %556) #4, !dbg !26
  %1368 = extractvalue { float, float, float, float } %1367, 0, !dbg !26
  %1369 = extractvalue { float, float, float, float } %1367, 1, !dbg !26
  %1370 = extractvalue { float, float, float, float } %1367, 2, !dbg !26
  %1371 = extractvalue { float, float, float, float } %1367, 3, !dbg !26
  %1372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1293, float %1294, float %1295, float %1296, i32 %681, i32 %682, i32 %683, i32 %684, i32 %587, i32 %588) #4, !dbg !26
  %1373 = extractvalue { float, float, float, float } %1372, 0, !dbg !26
  %1374 = extractvalue { float, float, float, float } %1372, 1, !dbg !26
  %1375 = extractvalue { float, float, float, float } %1372, 2, !dbg !26
  %1376 = extractvalue { float, float, float, float } %1372, 3, !dbg !26
  %1377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1298, float %1299, float %1300, float %1301, i32 %681, i32 %682, i32 %683, i32 %684, i32 %619, i32 %620) #4, !dbg !26
  %1378 = extractvalue { float, float, float, float } %1377, 0, !dbg !26
  %1379 = extractvalue { float, float, float, float } %1377, 1, !dbg !26
  %1380 = extractvalue { float, float, float, float } %1377, 2, !dbg !26
  %1381 = extractvalue { float, float, float, float } %1377, 3, !dbg !26
  %1382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1303, float %1304, float %1305, float %1306, i32 %744, i32 %745, i32 %746, i32 %747, i32 %520, i32 %522) #4, !dbg !26
  %1383 = extractvalue { float, float, float, float } %1382, 0, !dbg !26
  %1384 = extractvalue { float, float, float, float } %1382, 1, !dbg !26
  %1385 = extractvalue { float, float, float, float } %1382, 2, !dbg !26
  %1386 = extractvalue { float, float, float, float } %1382, 3, !dbg !26
  %1387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1308, float %1309, float %1310, float %1311, i32 %744, i32 %745, i32 %746, i32 %747, i32 %555, i32 %556) #4, !dbg !26
  %1388 = extractvalue { float, float, float, float } %1387, 0, !dbg !26
  %1389 = extractvalue { float, float, float, float } %1387, 1, !dbg !26
  %1390 = extractvalue { float, float, float, float } %1387, 2, !dbg !26
  %1391 = extractvalue { float, float, float, float } %1387, 3, !dbg !26
  %1392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1313, float %1314, float %1315, float %1316, i32 %744, i32 %745, i32 %746, i32 %747, i32 %587, i32 %588) #4, !dbg !26
  %1393 = extractvalue { float, float, float, float } %1392, 0, !dbg !26
  %1394 = extractvalue { float, float, float, float } %1392, 1, !dbg !26
  %1395 = extractvalue { float, float, float, float } %1392, 2, !dbg !26
  %1396 = extractvalue { float, float, float, float } %1392, 3, !dbg !26
  %1397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1318, float %1319, float %1320, float %1321, i32 %744, i32 %745, i32 %746, i32 %747, i32 %619, i32 %620) #4, !dbg !26
  %1398 = extractvalue { float, float, float, float } %1397, 0, !dbg !26
  %1399 = extractvalue { float, float, float, float } %1397, 1, !dbg !26
  %1400 = extractvalue { float, float, float, float } %1397, 2, !dbg !26
  %1401 = extractvalue { float, float, float, float } %1397, 3, !dbg !26
  %1402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1323, float %1324, float %1325, float %1326, i32 %807, i32 %808, i32 %809, i32 %810, i32 %520, i32 %522) #4, !dbg !26
  %1403 = extractvalue { float, float, float, float } %1402, 0, !dbg !26
  %1404 = extractvalue { float, float, float, float } %1402, 1, !dbg !26
  %1405 = extractvalue { float, float, float, float } %1402, 2, !dbg !26
  %1406 = extractvalue { float, float, float, float } %1402, 3, !dbg !26
  %1407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1328, float %1329, float %1330, float %1331, i32 %807, i32 %808, i32 %809, i32 %810, i32 %555, i32 %556) #4, !dbg !26
  %1408 = extractvalue { float, float, float, float } %1407, 0, !dbg !26
  %1409 = extractvalue { float, float, float, float } %1407, 1, !dbg !26
  %1410 = extractvalue { float, float, float, float } %1407, 2, !dbg !26
  %1411 = extractvalue { float, float, float, float } %1407, 3, !dbg !26
  %1412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1333, float %1334, float %1335, float %1336, i32 %807, i32 %808, i32 %809, i32 %810, i32 %587, i32 %588) #4, !dbg !26
  %1413 = extractvalue { float, float, float, float } %1412, 0, !dbg !26
  %1414 = extractvalue { float, float, float, float } %1412, 1, !dbg !26
  %1415 = extractvalue { float, float, float, float } %1412, 2, !dbg !26
  %1416 = extractvalue { float, float, float, float } %1412, 3, !dbg !26
  %1417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1338, float %1339, float %1340, float %1341, i32 %807, i32 %808, i32 %809, i32 %810, i32 %619, i32 %620) #4, !dbg !26
  %1418 = extractvalue { float, float, float, float } %1417, 0, !dbg !26
  %1419 = extractvalue { float, float, float, float } %1417, 1, !dbg !26
  %1420 = extractvalue { float, float, float, float } %1417, 2, !dbg !26
  %1421 = extractvalue { float, float, float, float } %1417, 3, !dbg !26
  %1422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1343, float %1344, float %1345, float %1346, i32 %870, i32 %871, i32 %872, i32 %873, i32 %520, i32 %522) #4, !dbg !26
  %1423 = extractvalue { float, float, float, float } %1422, 0, !dbg !26
  %1424 = extractvalue { float, float, float, float } %1422, 1, !dbg !26
  %1425 = extractvalue { float, float, float, float } %1422, 2, !dbg !26
  %1426 = extractvalue { float, float, float, float } %1422, 3, !dbg !26
  %1427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1348, float %1349, float %1350, float %1351, i32 %870, i32 %871, i32 %872, i32 %873, i32 %555, i32 %556) #4, !dbg !26
  %1428 = extractvalue { float, float, float, float } %1427, 0, !dbg !26
  %1429 = extractvalue { float, float, float, float } %1427, 1, !dbg !26
  %1430 = extractvalue { float, float, float, float } %1427, 2, !dbg !26
  %1431 = extractvalue { float, float, float, float } %1427, 3, !dbg !26
  %1432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1353, float %1354, float %1355, float %1356, i32 %870, i32 %871, i32 %872, i32 %873, i32 %587, i32 %588) #4, !dbg !26
  %1433 = extractvalue { float, float, float, float } %1432, 0, !dbg !26
  %1434 = extractvalue { float, float, float, float } %1432, 1, !dbg !26
  %1435 = extractvalue { float, float, float, float } %1432, 2, !dbg !26
  %1436 = extractvalue { float, float, float, float } %1432, 3, !dbg !26
  %1437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1358, float %1359, float %1360, float %1361, i32 %870, i32 %871, i32 %872, i32 %873, i32 %619, i32 %620) #4, !dbg !26
  %1438 = extractvalue { float, float, float, float } %1437, 0, !dbg !26
  %1439 = extractvalue { float, float, float, float } %1437, 1, !dbg !26
  %1440 = extractvalue { float, float, float, float } %1437, 2, !dbg !26
  %1441 = extractvalue { float, float, float, float } %1437, 3, !dbg !26
  %1442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1363, float %1364, float %1365, float %1366, i32 %689, i32 %690, i32 %691, i32 %692, i32 %524, i32 %526) #4, !dbg !26
  %1443 = extractvalue { float, float, float, float } %1442, 0, !dbg !26
  %1444 = extractvalue { float, float, float, float } %1442, 1, !dbg !26
  %1445 = extractvalue { float, float, float, float } %1442, 2, !dbg !26
  %1446 = extractvalue { float, float, float, float } %1442, 3, !dbg !26
  %1447 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1368, float %1369, float %1370, float %1371, i32 %689, i32 %690, i32 %691, i32 %692, i32 %557, i32 %558) #4, !dbg !26
  %1448 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1373, float %1374, float %1375, float %1376, i32 %689, i32 %690, i32 %691, i32 %692, i32 %589, i32 %590) #4, !dbg !26
  %1449 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1378, float %1379, float %1380, float %1381, i32 %689, i32 %690, i32 %691, i32 %692, i32 %621, i32 %622) #4, !dbg !26
  %1450 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1383, float %1384, float %1385, float %1386, i32 %752, i32 %753, i32 %754, i32 %755, i32 %524, i32 %526) #4, !dbg !26
  %1451 = extractvalue { float, float, float, float } %1450, 0, !dbg !26
  %1452 = extractvalue { float, float, float, float } %1450, 1, !dbg !26
  %1453 = extractvalue { float, float, float, float } %1450, 2, !dbg !26
  %1454 = extractvalue { float, float, float, float } %1450, 3, !dbg !26
  %1455 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1388, float %1389, float %1390, float %1391, i32 %752, i32 %753, i32 %754, i32 %755, i32 %557, i32 %558) #4, !dbg !26
  %1456 = extractvalue { float, float, float, float } %1455, 0, !dbg !26
  %1457 = extractvalue { float, float, float, float } %1455, 1, !dbg !26
  %1458 = extractvalue { float, float, float, float } %1455, 2, !dbg !26
  %1459 = extractvalue { float, float, float, float } %1455, 3, !dbg !26
  %1460 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1393, float %1394, float %1395, float %1396, i32 %752, i32 %753, i32 %754, i32 %755, i32 %589, i32 %590) #4, !dbg !26
  %1461 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1398, float %1399, float %1400, float %1401, i32 %752, i32 %753, i32 %754, i32 %755, i32 %621, i32 %622) #4, !dbg !26
  %1462 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1403, float %1404, float %1405, float %1406, i32 %815, i32 %816, i32 %817, i32 %818, i32 %524, i32 %526) #4, !dbg !26
  %1463 = extractvalue { float, float, float, float } %1462, 0, !dbg !26
  %1464 = extractvalue { float, float, float, float } %1462, 1, !dbg !26
  %1465 = extractvalue { float, float, float, float } %1462, 2, !dbg !26
  %1466 = extractvalue { float, float, float, float } %1462, 3, !dbg !26
  %1467 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1408, float %1409, float %1410, float %1411, i32 %815, i32 %816, i32 %817, i32 %818, i32 %557, i32 %558) #4, !dbg !26
  %1468 = extractvalue { float, float, float, float } %1467, 0, !dbg !26
  %1469 = extractvalue { float, float, float, float } %1467, 1, !dbg !26
  %1470 = extractvalue { float, float, float, float } %1467, 2, !dbg !26
  %1471 = extractvalue { float, float, float, float } %1467, 3, !dbg !26
  %1472 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1413, float %1414, float %1415, float %1416, i32 %815, i32 %816, i32 %817, i32 %818, i32 %589, i32 %590) #4, !dbg !26
  %1473 = extractvalue { float, float, float, float } %1472, 0, !dbg !26
  %1474 = extractvalue { float, float, float, float } %1472, 1, !dbg !26
  %1475 = extractvalue { float, float, float, float } %1472, 2, !dbg !26
  %1476 = extractvalue { float, float, float, float } %1472, 3, !dbg !26
  %1477 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1418, float %1419, float %1420, float %1421, i32 %815, i32 %816, i32 %817, i32 %818, i32 %621, i32 %622) #4, !dbg !26
  %1478 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1423, float %1424, float %1425, float %1426, i32 %878, i32 %879, i32 %880, i32 %881, i32 %524, i32 %526) #4, !dbg !26
  %1479 = extractvalue { float, float, float, float } %1478, 0, !dbg !26
  %1480 = extractvalue { float, float, float, float } %1478, 1, !dbg !26
  %1481 = extractvalue { float, float, float, float } %1478, 2, !dbg !26
  %1482 = extractvalue { float, float, float, float } %1478, 3, !dbg !26
  %1483 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1428, float %1429, float %1430, float %1431, i32 %878, i32 %879, i32 %880, i32 %881, i32 %557, i32 %558) #4, !dbg !26
  %1484 = extractvalue { float, float, float, float } %1483, 0, !dbg !26
  %1485 = extractvalue { float, float, float, float } %1483, 1, !dbg !26
  %1486 = extractvalue { float, float, float, float } %1483, 2, !dbg !26
  %1487 = extractvalue { float, float, float, float } %1483, 3, !dbg !26
  %1488 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1433, float %1434, float %1435, float %1436, i32 %878, i32 %879, i32 %880, i32 %881, i32 %589, i32 %590) #4, !dbg !26
  %1489 = extractvalue { float, float, float, float } %1488, 0, !dbg !26
  %1490 = extractvalue { float, float, float, float } %1488, 1, !dbg !26
  %1491 = extractvalue { float, float, float, float } %1488, 2, !dbg !26
  %1492 = extractvalue { float, float, float, float } %1488, 3, !dbg !26
  %1493 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1438, float %1439, float %1440, float %1441, i32 %878, i32 %879, i32 %880, i32 %881, i32 %621, i32 %622) #4, !dbg !26
  %1494 = extractvalue { float, float, float, float } %1493, 0, !dbg !26
  %1495 = extractvalue { float, float, float, float } %1493, 1, !dbg !26
  %1496 = extractvalue { float, float, float, float } %1493, 2, !dbg !26
  %1497 = extractvalue { float, float, float, float } %1493, 3, !dbg !26
  %1498 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !27
  %1499 = getelementptr float, ptr addrspace(1) %1498, i64 %82, !dbg !28
  %1500 = getelementptr float, ptr addrspace(1) %1499, i64 %121, !dbg !29
  %1501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1500, i1 %125) #4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1502 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %40, !dbg !30
  %1503 = insertelement <1 x i32> poison, i32 %1501, i64 0, !dbg !30
  store <1 x i32> %1503, ptr addrspace(3) %1502, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1504 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %41, !dbg !30
  %1505 = load float, ptr addrspace(3) %1504, align 4, !dbg !30
  %1506 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %42, !dbg !30
  %1507 = load float, ptr addrspace(3) %1506, align 4, !dbg !30
  %1508 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %43, !dbg !30
  %1509 = load float, ptr addrspace(3) %1508, align 4, !dbg !30
  %1510 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %44, !dbg !30
  %1511 = load float, ptr addrspace(3) %1510, align 4, !dbg !30
  %1512 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %45, !dbg !30
  %1513 = load float, ptr addrspace(3) %1512, align 4, !dbg !30
  %1514 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %46, !dbg !30
  %1515 = load float, ptr addrspace(3) %1514, align 4, !dbg !30
  %1516 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %47, !dbg !30
  %1517 = load float, ptr addrspace(3) %1516, align 4, !dbg !30
  %1518 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %48, !dbg !30
  %1519 = load float, ptr addrspace(3) %1518, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <1 x i32> %1503, ptr addrspace(3) %1502, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1520 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %49, !dbg !31
  %1521 = load float, ptr addrspace(3) %1520, align 8, !dbg !31
  %1522 = getelementptr inbounds nuw i8, ptr addrspace(3) %1520, i32 4, !dbg !31
  %1523 = load float, ptr addrspace(3) %1522, align 4, !dbg !31
  %1524 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %51, !dbg !31
  %1525 = load float, ptr addrspace(3) %1524, align 8, !dbg !31
  %1526 = getelementptr inbounds nuw i8, ptr addrspace(3) %1524, i32 4, !dbg !31
  %1527 = load float, ptr addrspace(3) %1526, align 4, !dbg !31
  %1528 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %53, !dbg !31
  %1529 = load float, ptr addrspace(3) %1528, align 8, !dbg !31
  %1530 = getelementptr inbounds nuw i8, ptr addrspace(3) %1528, i32 4, !dbg !31
  %1531 = load float, ptr addrspace(3) %1530, align 4, !dbg !31
  %1532 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %55, !dbg !31
  %1533 = load float, ptr addrspace(3) %1532, align 8, !dbg !31
  %1534 = getelementptr inbounds nuw i8, ptr addrspace(3) %1532, i32 4, !dbg !31
  %1535 = load float, ptr addrspace(3) %1534, align 4, !dbg !31
  %1536 = fsub float %1505, %1521, !dbg !30
  %1537 = fsub float %1505, %1523, !dbg !30
  %1538 = fsub float %1507, %1521, !dbg !30
  %1539 = fsub float %1507, %1523, !dbg !30
  %1540 = fsub float %1509, %1521, !dbg !30
  %1541 = fsub float %1509, %1523, !dbg !30
  %1542 = fsub float %1511, %1521, !dbg !30
  %1543 = fsub float %1511, %1523, !dbg !30
  %1544 = fsub float %1509, %1525, !dbg !30
  %1545 = fsub float %1509, %1527, !dbg !30
  %1546 = fsub float %1511, %1525, !dbg !30
  %1547 = fsub float %1511, %1527, !dbg !30
  %1548 = fsub float %1513, %1521, !dbg !30
  %1549 = fsub float %1513, %1523, !dbg !30
  %1550 = fsub float %1515, %1521, !dbg !30
  %1551 = fsub float %1515, %1523, !dbg !30
  %1552 = fsub float %1513, %1525, !dbg !30
  %1553 = fsub float %1513, %1527, !dbg !30
  %1554 = fsub float %1515, %1525, !dbg !30
  %1555 = fsub float %1515, %1527, !dbg !30
  %1556 = fsub float %1513, %1529, !dbg !30
  %1557 = fsub float %1513, %1531, !dbg !30
  %1558 = fsub float %1515, %1529, !dbg !30
  %1559 = fsub float %1515, %1531, !dbg !30
  %1560 = fsub float %1517, %1521, !dbg !30
  %1561 = fsub float %1517, %1523, !dbg !30
  %1562 = fsub float %1519, %1521, !dbg !30
  %1563 = fsub float %1519, %1523, !dbg !30
  %1564 = fsub float %1517, %1525, !dbg !30
  %1565 = fsub float %1517, %1527, !dbg !30
  %1566 = fsub float %1519, %1525, !dbg !30
  %1567 = fsub float %1519, %1527, !dbg !30
  %1568 = fsub float %1517, %1529, !dbg !30
  %1569 = fsub float %1517, %1531, !dbg !30
  %1570 = fsub float %1519, %1529, !dbg !30
  %1571 = fsub float %1519, %1531, !dbg !30
  %1572 = fsub float %1517, %1533, !dbg !30
  %1573 = fsub float %1517, %1535, !dbg !30
  %1574 = fsub float %1519, %1533, !dbg !30
  %1575 = fsub float %1519, %1535, !dbg !30
  %1576 = fmul float %1536, 0x3FF7154760000000, !dbg !31
  %1577 = tail call float @llvm.nvvm.ex2.approx.f(float %1576), !dbg !31
  %1578 = fmul float %1537, 0x3FF7154760000000, !dbg !31
  %1579 = tail call float @llvm.nvvm.ex2.approx.f(float %1578), !dbg !31
  %1580 = fmul float %1538, 0x3FF7154760000000, !dbg !31
  %1581 = tail call float @llvm.nvvm.ex2.approx.f(float %1580), !dbg !31
  %1582 = fmul float %1539, 0x3FF7154760000000, !dbg !31
  %1583 = tail call float @llvm.nvvm.ex2.approx.f(float %1582), !dbg !31
  %1584 = fmul float %1540, 0x3FF7154760000000, !dbg !31
  %1585 = tail call float @llvm.nvvm.ex2.approx.f(float %1584), !dbg !31
  %1586 = fmul float %1541, 0x3FF7154760000000, !dbg !31
  %1587 = tail call float @llvm.nvvm.ex2.approx.f(float %1586), !dbg !31
  %1588 = fmul float %1542, 0x3FF7154760000000, !dbg !31
  %1589 = tail call float @llvm.nvvm.ex2.approx.f(float %1588), !dbg !31
  %1590 = fmul float %1543, 0x3FF7154760000000, !dbg !31
  %1591 = tail call float @llvm.nvvm.ex2.approx.f(float %1590), !dbg !31
  %1592 = fmul float %1544, 0x3FF7154760000000, !dbg !31
  %1593 = tail call float @llvm.nvvm.ex2.approx.f(float %1592), !dbg !31
  %1594 = fmul float %1545, 0x3FF7154760000000, !dbg !31
  %1595 = tail call float @llvm.nvvm.ex2.approx.f(float %1594), !dbg !31
  %1596 = fmul float %1546, 0x3FF7154760000000, !dbg !31
  %1597 = tail call float @llvm.nvvm.ex2.approx.f(float %1596), !dbg !31
  %1598 = fmul float %1547, 0x3FF7154760000000, !dbg !31
  %1599 = tail call float @llvm.nvvm.ex2.approx.f(float %1598), !dbg !31
  %1600 = fmul float %1548, 0x3FF7154760000000, !dbg !31
  %1601 = tail call float @llvm.nvvm.ex2.approx.f(float %1600), !dbg !31
  %1602 = fmul float %1549, 0x3FF7154760000000, !dbg !31
  %1603 = tail call float @llvm.nvvm.ex2.approx.f(float %1602), !dbg !31
  %1604 = fmul float %1550, 0x3FF7154760000000, !dbg !31
  %1605 = tail call float @llvm.nvvm.ex2.approx.f(float %1604), !dbg !31
  %1606 = fmul float %1551, 0x3FF7154760000000, !dbg !31
  %1607 = tail call float @llvm.nvvm.ex2.approx.f(float %1606), !dbg !31
  %1608 = fmul float %1552, 0x3FF7154760000000, !dbg !31
  %1609 = tail call float @llvm.nvvm.ex2.approx.f(float %1608), !dbg !31
  %1610 = fmul float %1553, 0x3FF7154760000000, !dbg !31
  %1611 = tail call float @llvm.nvvm.ex2.approx.f(float %1610), !dbg !31
  %1612 = fmul float %1554, 0x3FF7154760000000, !dbg !31
  %1613 = tail call float @llvm.nvvm.ex2.approx.f(float %1612), !dbg !31
  %1614 = fmul float %1555, 0x3FF7154760000000, !dbg !31
  %1615 = tail call float @llvm.nvvm.ex2.approx.f(float %1614), !dbg !31
  %1616 = fmul float %1556, 0x3FF7154760000000, !dbg !31
  %1617 = tail call float @llvm.nvvm.ex2.approx.f(float %1616), !dbg !31
  %1618 = fmul float %1557, 0x3FF7154760000000, !dbg !31
  %1619 = tail call float @llvm.nvvm.ex2.approx.f(float %1618), !dbg !31
  %1620 = fmul float %1558, 0x3FF7154760000000, !dbg !31
  %1621 = tail call float @llvm.nvvm.ex2.approx.f(float %1620), !dbg !31
  %1622 = fmul float %1559, 0x3FF7154760000000, !dbg !31
  %1623 = tail call float @llvm.nvvm.ex2.approx.f(float %1622), !dbg !31
  %1624 = fmul float %1560, 0x3FF7154760000000, !dbg !31
  %1625 = tail call float @llvm.nvvm.ex2.approx.f(float %1624), !dbg !31
  %1626 = fmul float %1561, 0x3FF7154760000000, !dbg !31
  %1627 = tail call float @llvm.nvvm.ex2.approx.f(float %1626), !dbg !31
  %1628 = fmul float %1562, 0x3FF7154760000000, !dbg !31
  %1629 = tail call float @llvm.nvvm.ex2.approx.f(float %1628), !dbg !31
  %1630 = fmul float %1563, 0x3FF7154760000000, !dbg !31
  %1631 = tail call float @llvm.nvvm.ex2.approx.f(float %1630), !dbg !31
  %1632 = fmul float %1564, 0x3FF7154760000000, !dbg !31
  %1633 = tail call float @llvm.nvvm.ex2.approx.f(float %1632), !dbg !31
  %1634 = fmul float %1565, 0x3FF7154760000000, !dbg !31
  %1635 = tail call float @llvm.nvvm.ex2.approx.f(float %1634), !dbg !31
  %1636 = fmul float %1566, 0x3FF7154760000000, !dbg !31
  %1637 = tail call float @llvm.nvvm.ex2.approx.f(float %1636), !dbg !31
  %1638 = fmul float %1567, 0x3FF7154760000000, !dbg !31
  %1639 = tail call float @llvm.nvvm.ex2.approx.f(float %1638), !dbg !31
  %1640 = fmul float %1568, 0x3FF7154760000000, !dbg !31
  %1641 = tail call float @llvm.nvvm.ex2.approx.f(float %1640), !dbg !31
  %1642 = fmul float %1569, 0x3FF7154760000000, !dbg !31
  %1643 = tail call float @llvm.nvvm.ex2.approx.f(float %1642), !dbg !31
  %1644 = fmul float %1570, 0x3FF7154760000000, !dbg !31
  %1645 = tail call float @llvm.nvvm.ex2.approx.f(float %1644), !dbg !31
  %1646 = fmul float %1571, 0x3FF7154760000000, !dbg !31
  %1647 = tail call float @llvm.nvvm.ex2.approx.f(float %1646), !dbg !31
  %1648 = fmul float %1572, 0x3FF7154760000000, !dbg !31
  %1649 = tail call float @llvm.nvvm.ex2.approx.f(float %1648), !dbg !31
  %1650 = fmul float %1573, 0x3FF7154760000000, !dbg !31
  %1651 = tail call float @llvm.nvvm.ex2.approx.f(float %1650), !dbg !31
  %1652 = fmul float %1574, 0x3FF7154760000000, !dbg !31
  %1653 = tail call float @llvm.nvvm.ex2.approx.f(float %1652), !dbg !31
  %1654 = fmul float %1575, 0x3FF7154760000000, !dbg !31
  %1655 = tail call float @llvm.nvvm.ex2.approx.f(float %1654), !dbg !31
  %1656 = fmul float %1443, %1577, !dbg !32
  %1657 = fmul float %1444, %1579, !dbg !32
  %1658 = fmul float %1445, %1581, !dbg !32
  %1659 = fmul float %1446, %1583, !dbg !32
  %1660 = fmul float %1451, %1585, !dbg !32
  %1661 = fmul float %1452, %1587, !dbg !32
  %1662 = fmul float %1453, %1589, !dbg !32
  %1663 = fmul float %1454, %1591, !dbg !32
  %1664 = fmul float %1456, %1593, !dbg !32
  %1665 = fmul float %1457, %1595, !dbg !32
  %1666 = fmul float %1458, %1597, !dbg !32
  %1667 = fmul float %1459, %1599, !dbg !32
  %1668 = fmul float %1463, %1601, !dbg !32
  %1669 = fmul float %1464, %1603, !dbg !32
  %1670 = fmul float %1465, %1605, !dbg !32
  %1671 = fmul float %1466, %1607, !dbg !32
  %1672 = fmul float %1468, %1609, !dbg !32
  %1673 = fmul float %1469, %1611, !dbg !32
  %1674 = fmul float %1470, %1613, !dbg !32
  %1675 = fmul float %1471, %1615, !dbg !32
  %1676 = fmul float %1473, %1617, !dbg !32
  %1677 = fmul float %1474, %1619, !dbg !32
  %1678 = fmul float %1475, %1621, !dbg !32
  %1679 = fmul float %1476, %1623, !dbg !32
  %1680 = fmul float %1479, %1625, !dbg !32
  %1681 = fmul float %1480, %1627, !dbg !32
  %1682 = fmul float %1481, %1629, !dbg !32
  %1683 = fmul float %1482, %1631, !dbg !32
  %1684 = fmul float %1484, %1633, !dbg !32
  %1685 = fmul float %1485, %1635, !dbg !32
  %1686 = fmul float %1486, %1637, !dbg !32
  %1687 = fmul float %1487, %1639, !dbg !32
  %1688 = fmul float %1489, %1641, !dbg !32
  %1689 = fmul float %1490, %1643, !dbg !32
  %1690 = fmul float %1491, %1645, !dbg !32
  %1691 = fmul float %1492, %1647, !dbg !32
  %1692 = fmul float %1494, %1649, !dbg !32
  %1693 = fmul float %1495, %1651, !dbg !32
  %1694 = fmul float %1496, %1653, !dbg !32
  %1695 = fmul float %1497, %1655, !dbg !32
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1696 = or disjoint i32 %33, %37, !dbg !33
  %1697 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %40, !dbg !33
  %1698 = insertelement <1 x i16> poison, i16 %126, i64 0, !dbg !33
  store <1 x i16> %1698, ptr addrspace(3) %1697, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1699 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1696, !dbg !33
  %1700 = load bfloat, ptr addrspace(3) %1699, align 8, !dbg !33
  %1701 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 2, !dbg !33
  %1702 = load bfloat, ptr addrspace(3) %1701, align 2, !dbg !33
  %1703 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 4, !dbg !33
  %1704 = load bfloat, ptr addrspace(3) %1703, align 4, !dbg !33
  %1705 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 6, !dbg !33
  %1706 = load bfloat, ptr addrspace(3) %1705, align 2, !dbg !33
  %1707 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 32, !dbg !33
  %1708 = load bfloat, ptr addrspace(3) %1707, align 8, !dbg !33
  %1709 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 34, !dbg !33
  %1710 = load bfloat, ptr addrspace(3) %1709, align 2, !dbg !33
  %1711 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 36, !dbg !33
  %1712 = load bfloat, ptr addrspace(3) %1711, align 4, !dbg !33
  %1713 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 38, !dbg !33
  %1714 = load bfloat, ptr addrspace(3) %1713, align 2, !dbg !33
  %1715 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 64, !dbg !33
  %1716 = load bfloat, ptr addrspace(3) %1715, align 8, !dbg !33
  %1717 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 66, !dbg !33
  %1718 = load bfloat, ptr addrspace(3) %1717, align 2, !dbg !33
  %1719 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 68, !dbg !33
  %1720 = load bfloat, ptr addrspace(3) %1719, align 4, !dbg !33
  %1721 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 70, !dbg !33
  %1722 = load bfloat, ptr addrspace(3) %1721, align 2, !dbg !33
  %1723 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 96, !dbg !33
  %1724 = load bfloat, ptr addrspace(3) %1723, align 8, !dbg !33
  %1725 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 98, !dbg !33
  %1726 = load bfloat, ptr addrspace(3) %1725, align 2, !dbg !33
  %1727 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 100, !dbg !33
  %1728 = load bfloat, ptr addrspace(3) %1727, align 4, !dbg !33
  %1729 = getelementptr inbounds nuw i8, ptr addrspace(3) %1699, i32 102, !dbg !33
  %1730 = load bfloat, ptr addrspace(3) %1729, align 2, !dbg !33
  %1731 = fpext bfloat %1700 to float, !dbg !33
  %1732 = fpext bfloat %1702 to float, !dbg !33
  %1733 = fpext bfloat %1704 to float, !dbg !33
  %1734 = fpext bfloat %1706 to float, !dbg !33
  %1735 = fpext bfloat %1708 to float, !dbg !33
  %1736 = fpext bfloat %1710 to float, !dbg !33
  %1737 = fpext bfloat %1712 to float, !dbg !33
  %1738 = fpext bfloat %1714 to float, !dbg !33
  %1739 = fpext bfloat %1716 to float, !dbg !33
  %1740 = fpext bfloat %1718 to float, !dbg !33
  %1741 = fpext bfloat %1720 to float, !dbg !33
  %1742 = fpext bfloat %1722 to float, !dbg !33
  %1743 = fpext bfloat %1724 to float, !dbg !33
  %1744 = fpext bfloat %1726 to float, !dbg !33
  %1745 = fpext bfloat %1728 to float, !dbg !33
  %1746 = fpext bfloat %1730 to float, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1747 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1696, !dbg !33
  store float %1731, ptr addrspace(3) %1747, align 16, !dbg !33
  %1748 = getelementptr inbounds nuw i8, ptr addrspace(3) %1747, i32 4, !dbg !33
  store float %1732, ptr addrspace(3) %1748, align 4, !dbg !33
  %1749 = getelementptr inbounds nuw i8, ptr addrspace(3) %1747, i32 8, !dbg !33
  store float %1733, ptr addrspace(3) %1749, align 8, !dbg !33
  %1750 = getelementptr inbounds nuw i8, ptr addrspace(3) %1747, i32 12, !dbg !33
  store float %1734, ptr addrspace(3) %1750, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1751 = load float, ptr addrspace(3) %1504, align 4, !dbg !33
  %1752 = load float, ptr addrspace(3) %1506, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1735, ptr addrspace(3) %1747, align 16, !dbg !33
  store float %1736, ptr addrspace(3) %1748, align 4, !dbg !33
  store float %1737, ptr addrspace(3) %1749, align 8, !dbg !33
  store float %1738, ptr addrspace(3) %1750, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1753 = load float, ptr addrspace(3) %1504, align 4, !dbg !33
  %1754 = load float, ptr addrspace(3) %1506, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1739, ptr addrspace(3) %1747, align 16, !dbg !33
  store float %1740, ptr addrspace(3) %1748, align 4, !dbg !33
  store float %1741, ptr addrspace(3) %1749, align 8, !dbg !33
  store float %1742, ptr addrspace(3) %1750, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1755 = load float, ptr addrspace(3) %1504, align 4, !dbg !33
  %1756 = load float, ptr addrspace(3) %1506, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1743, ptr addrspace(3) %1747, align 16, !dbg !33
  store float %1744, ptr addrspace(3) %1748, align 4, !dbg !33
  store float %1745, ptr addrspace(3) %1749, align 8, !dbg !33
  store float %1746, ptr addrspace(3) %1750, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1757 = load float, ptr addrspace(3) %1504, align 4, !dbg !33
  %1758 = load float, ptr addrspace(3) %1506, align 4, !dbg !33
  %1759 = fmul float %1656, %1751, !dbg !33
  %1760 = fmul float %1657, %1751, !dbg !33
  %1761 = fmul float %1658, %1752, !dbg !33
  %1762 = fmul float %1659, %1752, !dbg !33
  %1763 = fmul float %1660, %1753, !dbg !33
  %1764 = fmul float %1661, %1753, !dbg !33
  %1765 = fmul float %1662, %1754, !dbg !33
  %1766 = fmul float %1663, %1754, !dbg !33
  %1767 = fmul float %1664, %1753, !dbg !33
  %1768 = fmul float %1665, %1753, !dbg !33
  %1769 = fmul float %1666, %1754, !dbg !33
  %1770 = fmul float %1667, %1754, !dbg !33
  %1771 = fmul float %1668, %1755, !dbg !33
  %1772 = fmul float %1669, %1755, !dbg !33
  %1773 = fmul float %1670, %1756, !dbg !33
  %1774 = fmul float %1671, %1756, !dbg !33
  %1775 = fmul float %1672, %1755, !dbg !33
  %1776 = fmul float %1673, %1755, !dbg !33
  %1777 = fmul float %1674, %1756, !dbg !33
  %1778 = fmul float %1675, %1756, !dbg !33
  %1779 = fmul float %1676, %1755, !dbg !33
  %1780 = fmul float %1677, %1755, !dbg !33
  %1781 = fmul float %1678, %1756, !dbg !33
  %1782 = fmul float %1679, %1756, !dbg !33
  %1783 = fmul float %1680, %1757, !dbg !33
  %1784 = fmul float %1681, %1757, !dbg !33
  %1785 = fmul float %1682, %1758, !dbg !33
  %1786 = fmul float %1683, %1758, !dbg !33
  %1787 = fmul float %1684, %1757, !dbg !33
  %1788 = fmul float %1685, %1757, !dbg !33
  %1789 = fmul float %1686, %1758, !dbg !33
  %1790 = fmul float %1687, %1758, !dbg !33
  %1791 = fmul float %1688, %1757, !dbg !33
  %1792 = fmul float %1689, %1757, !dbg !33
  %1793 = fmul float %1690, %1758, !dbg !33
  %1794 = fmul float %1691, %1758, !dbg !33
  %1795 = fmul float %1692, %1757, !dbg !33
  %1796 = fmul float %1693, %1757, !dbg !33
  %1797 = fmul float %1694, %1758, !dbg !33
  %1798 = fmul float %1695, %1758, !dbg !33
  %1799 = icmp samesign ugt i32 %41, %49, !dbg !34
  %1800 = icmp samesign ugt i32 %41, %50, !dbg !34
  %1801 = icmp samesign ugt i32 %42, %49, !dbg !34
  %1802 = icmp samesign ugt i32 %42, %50, !dbg !34
  %1803 = icmp samesign ugt i32 %43, %52, !dbg !34
  %1804 = icmp samesign ugt i32 %44, %51, !dbg !34
  %1805 = icmp samesign ugt i32 %44, %52, !dbg !34
  %1806 = icmp samesign ugt i32 %45, %54, !dbg !34
  %1807 = icmp samesign ugt i32 %46, %53, !dbg !34
  %1808 = icmp samesign ugt i32 %46, %54, !dbg !34
  %1809 = icmp samesign ugt i32 %47, %56, !dbg !34
  %1810 = icmp samesign ugt i32 %48, %55, !dbg !34
  %1811 = icmp samesign ugt i32 %48, %56, !dbg !34
  %1812 = extractelement <16 x i1> %78, i64 7, !dbg !35
  %1813 = extractelement <16 x i1> %78, i64 13, !dbg !35
  %1814 = and i1 %1813, %1812, !dbg !36
  %1815 = extractelement <16 x i1> %78, i64 6, !dbg !35
  %1816 = and i1 %1813, %1815, !dbg !36
  %1817 = extractelement <16 x i1> %78, i64 12, !dbg !35
  %1818 = and i1 %1817, %1812, !dbg !36
  %1819 = and i1 %1817, %1815, !dbg !36
  %1820 = extractelement <16 x i1> %78, i64 11, !dbg !35
  %1821 = and i1 %1820, %1812, !dbg !36
  %1822 = and i1 %1820, %1815, !dbg !36
  %1823 = extractelement <16 x i1> %78, i64 10, !dbg !35
  %1824 = and i1 %1823, %1812, !dbg !36
  %1825 = and i1 %1823, %1815, !dbg !36
  %1826 = extractelement <16 x i1> %78, i64 5, !dbg !35
  %1827 = and i1 %1820, %1826, !dbg !36
  %1828 = extractelement <16 x i1> %78, i64 4, !dbg !35
  %1829 = and i1 %1820, %1828, !dbg !36
  %1830 = and i1 %1823, %1826, !dbg !36
  %1831 = and i1 %1823, %1828, !dbg !36
  %1832 = extractelement <16 x i1> %78, i64 9, !dbg !35
  %1833 = and i1 %1832, %1812, !dbg !36
  %1834 = and i1 %1832, %1815, !dbg !36
  %1835 = extractelement <16 x i1> %78, i64 8, !dbg !35
  %1836 = and i1 %1835, %1812, !dbg !36
  %1837 = and i1 %1835, %1815, !dbg !36
  %1838 = and i1 %1832, %1826, !dbg !36
  %1839 = and i1 %1832, %1828, !dbg !36
  %1840 = and i1 %1835, %1826, !dbg !36
  %1841 = and i1 %1835, %1828, !dbg !36
  %1842 = extractelement <16 x i1> %78, i64 3, !dbg !35
  %1843 = and i1 %1832, %1842, !dbg !36
  %1844 = extractelement <16 x i1> %78, i64 2, !dbg !35
  %1845 = and i1 %1832, %1844, !dbg !36
  %1846 = and i1 %1835, %1842, !dbg !36
  %1847 = and i1 %1835, %1844, !dbg !36
  %1848 = and i1 %1799, %1812, !dbg !35
  %1849 = extractelement <16 x i1> %78, i64 15, !dbg !35
  %1850 = and i1 %1849, %1848, !dbg !35
  %1851 = and i1 %1800, %1815, !dbg !35
  %1852 = and i1 %1849, %1851, !dbg !35
  %1853 = and i1 %1801, %1812, !dbg !35
  %1854 = extractelement <16 x i1> %78, i64 14, !dbg !35
  %1855 = and i1 %1854, %1853, !dbg !35
  %1856 = and i1 %1802, %1815, !dbg !35
  %1857 = and i1 %1854, %1856, !dbg !35
  %1858 = and i1 %1799, %1826, !dbg !35
  %1859 = and i1 %1813, %1858, !dbg !35
  %1860 = and i1 %1803, %1828, !dbg !35
  %1861 = and i1 %1813, %1860, !dbg !35
  %1862 = and i1 %1804, %1826, !dbg !35
  %1863 = and i1 %1817, %1862, !dbg !35
  %1864 = and i1 %1805, %1828, !dbg !35
  %1865 = and i1 %1817, %1864, !dbg !35
  %1866 = and i1 %1799, %1842, !dbg !35
  %1867 = and i1 %1820, %1866, !dbg !35
  %1868 = and i1 %1806, %1844, !dbg !35
  %1869 = and i1 %1820, %1868, !dbg !35
  %1870 = and i1 %1807, %1842, !dbg !35
  %1871 = and i1 %1823, %1870, !dbg !35
  %1872 = and i1 %1808, %1844, !dbg !35
  %1873 = and i1 %1823, %1872, !dbg !35
  %1874 = extractelement <16 x i1> %78, i64 1, !dbg !35
  %1875 = and i1 %1799, %1874, !dbg !35
  %1876 = and i1 %1832, %1875, !dbg !35
  %1877 = extractelement <16 x i1> %78, i64 0, !dbg !35
  %1878 = and i1 %1809, %1877, !dbg !35
  %1879 = and i1 %1832, %1878, !dbg !35
  %1880 = and i1 %1810, %1874, !dbg !35
  %1881 = and i1 %1835, %1880, !dbg !35
  %1882 = and i1 %1811, %1877, !dbg !35
  %1883 = and i1 %1835, %1882, !dbg !35
  %1884 = shl i32 %127, 6, !dbg !37
  %1885 = sext i32 %1884 to i64, !dbg !38
  %1886 = getelementptr float, ptr addrspace(1) %3, i64 %1885, !dbg !38
  %1887 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx, !dbg !39
  %1888 = getelementptr float, ptr addrspace(1) %1887, i64 %102, !dbg !39
  %1889 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx5, !dbg !39
  %1890 = getelementptr float, ptr addrspace(1) %1889, i64 %102, !dbg !39
  %1891 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx6, !dbg !39
  %1892 = getelementptr float, ptr addrspace(1) %1891, i64 %102, !dbg !39
  %1893 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx7, !dbg !39
  %1894 = getelementptr float, ptr addrspace(1) %1893, i64 %102, !dbg !39
  %1895 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx8, !dbg !39
  %1896 = getelementptr float, ptr addrspace(1) %1895, i64 %102, !dbg !39
  %1897 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx9, !dbg !39
  %1898 = getelementptr float, ptr addrspace(1) %1897, i64 %102, !dbg !39
  %1899 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx10, !dbg !39
  %1900 = getelementptr float, ptr addrspace(1) %1899, i64 %102, !dbg !39
  %1901 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx11, !dbg !39
  %1902 = getelementptr float, ptr addrspace(1) %1901, i64 %102, !dbg !39
  %1903 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx12, !dbg !39
  %1904 = getelementptr float, ptr addrspace(1) %1903, i64 %102, !dbg !39
  %1905 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx13, !dbg !39
  %1906 = getelementptr float, ptr addrspace(1) %1905, i64 %102, !dbg !39
  %1907 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx14, !dbg !39
  %1908 = getelementptr float, ptr addrspace(1) %1907, i64 %102, !dbg !39
  %1909 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx15, !dbg !39
  %1910 = getelementptr float, ptr addrspace(1) %1909, i64 %102, !dbg !39
  %1911 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx16, !dbg !39
  %1912 = getelementptr float, ptr addrspace(1) %1911, i64 %102, !dbg !39
  %1913 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx17, !dbg !39
  %1914 = getelementptr float, ptr addrspace(1) %1913, i64 %102, !dbg !39
  %1915 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx18, !dbg !39
  %1916 = getelementptr float, ptr addrspace(1) %1915, i64 %102, !dbg !39
  %1917 = getelementptr i8, ptr addrspace(1) %1886, i64 %.idx19, !dbg !39
  %1918 = getelementptr float, ptr addrspace(1) %1917, i64 %102, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1919 = shl nuw nsw i32 %12, 4, !dbg !39
  %1920 = and i32 %1919, 448, !dbg !39
  %1921 = or disjoint i32 %49, %1920, !dbg !39
  %1922 = and i32 %38, 252, !dbg !39
  %1923 = lshr exact i32 %1920, 2, !dbg !39
  %1924 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1923, !dbg !39
  %1925 = getelementptr inbounds nuw float, ptr addrspace(3) %1924, i32 %1921, !dbg !39
  %1926 = bitcast float %1759 to i32, !dbg !39
  %1927 = select i1 %1850, i32 %1926, i32 0, !dbg !40
  %1928 = bitcast float %1760 to i32, !dbg !39
  %1929 = select i1 %1852, i32 %1928, i32 0, !dbg !40
  %1930 = insertelement <2 x i32> poison, i32 %1927, i64 0, !dbg !39
  %1931 = insertelement <2 x i32> %1930, i32 %1929, i64 1, !dbg !39
  store <2 x i32> %1931, ptr addrspace(3) %1925, align 8, !dbg !39
  %1932 = or disjoint i32 %1921, 512, !dbg !39
  %1933 = lshr i32 %1932, 4, !dbg !39
  %1934 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1933, !dbg !39
  %1935 = getelementptr inbounds nuw float, ptr addrspace(3) %1934, i32 %1932, !dbg !39
  %1936 = bitcast float %1761 to i32, !dbg !39
  %1937 = select i1 %1855, i32 %1936, i32 0, !dbg !40
  %1938 = bitcast float %1762 to i32, !dbg !39
  %1939 = select i1 %1857, i32 %1938, i32 0, !dbg !40
  %1940 = insertelement <2 x i32> poison, i32 %1937, i64 0, !dbg !39
  %1941 = insertelement <2 x i32> %1940, i32 %1939, i64 1, !dbg !39
  store <2 x i32> %1941, ptr addrspace(3) %1935, align 8, !dbg !39
  %1942 = getelementptr inbounds nuw i8, ptr addrspace(3) %1925, i32 64, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1942, align 8, !dbg !39
  %1943 = or disjoint i32 %1921, 528, !dbg !39
  %1944 = lshr i32 %1943, 4, !dbg !39
  %1945 = and i32 %1944, 60, !dbg !39
  %1946 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1945, !dbg !39
  %1947 = getelementptr inbounds nuw float, ptr addrspace(3) %1946, i32 %1943, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1947, align 8, !dbg !39
  %1948 = getelementptr inbounds nuw i8, ptr addrspace(3) %1925, i32 128, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1948, align 8, !dbg !39
  %1949 = or disjoint i32 %1921, 544, !dbg !39
  %1950 = lshr i32 %1949, 4, !dbg !39
  %1951 = and i32 %1950, 60, !dbg !39
  %1952 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1951, !dbg !39
  %1953 = getelementptr inbounds nuw float, ptr addrspace(3) %1952, i32 %1949, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1953, align 8, !dbg !39
  %1954 = getelementptr inbounds nuw i8, ptr addrspace(3) %1925, i32 192, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1954, align 8, !dbg !39
  %1955 = or disjoint i32 %1921, 560, !dbg !39
  %1956 = lshr i32 %1955, 4, !dbg !39
  %1957 = and i32 %1956, 60, !dbg !39
  %1958 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1957, !dbg !39
  %1959 = getelementptr inbounds nuw float, ptr addrspace(3) %1958, i32 %1955, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1959, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1960 = and i32 %.lobit13, 12, !dbg !39
  %1961 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1960, !dbg !39
  %1962 = getelementptr inbounds nuw float, ptr addrspace(3) %1961, i32 %1922, !dbg !39
  %1963 = load <4 x i32>, ptr addrspace(3) %1962, align 16, !dbg !39
  %1964 = or disjoint i32 %1922, 256, !dbg !39
  %1965 = lshr i32 %1964, 4, !dbg !39
  %1966 = and i32 %1965, 28, !dbg !39
  %1967 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1966, !dbg !39
  %1968 = getelementptr inbounds nuw float, ptr addrspace(3) %1967, i32 %1964, !dbg !39
  %1969 = load <4 x i32>, ptr addrspace(3) %1968, align 16, !dbg !39
  %1970 = or disjoint i32 %1922, 512, !dbg !39
  %1971 = lshr i32 %1970, 4, !dbg !39
  %1972 = and i32 %1971, 44, !dbg !39
  %1973 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1972, !dbg !39
  %1974 = getelementptr inbounds nuw float, ptr addrspace(3) %1973, i32 %1970, !dbg !39
  %1975 = load <4 x i32>, ptr addrspace(3) %1974, align 16, !dbg !39
  %1976 = or disjoint i32 %1922, 768, !dbg !39
  %1977 = lshr i32 %1976, 4, !dbg !39
  %1978 = and i32 %1977, 60, !dbg !39
  %1979 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1978, !dbg !39
  %1980 = getelementptr inbounds nuw float, ptr addrspace(3) %1979, i32 %1976, !dbg !39
  %1981 = load <4 x i32>, ptr addrspace(3) %1980, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1982 = bitcast float %1763 to i32, !dbg !39
  %1983 = select i1 %1814, i32 %1982, i32 0, !dbg !40
  %1984 = bitcast float %1764 to i32, !dbg !39
  %1985 = select i1 %1816, i32 %1984, i32 0, !dbg !40
  %1986 = insertelement <2 x i32> poison, i32 %1983, i64 0, !dbg !39
  %1987 = insertelement <2 x i32> %1986, i32 %1985, i64 1, !dbg !39
  store <2 x i32> %1987, ptr addrspace(3) %1925, align 8, !dbg !39
  %1988 = bitcast float %1765 to i32, !dbg !39
  %1989 = select i1 %1818, i32 %1988, i32 0, !dbg !40
  %1990 = bitcast float %1766 to i32, !dbg !39
  %1991 = select i1 %1819, i32 %1990, i32 0, !dbg !40
  %1992 = insertelement <2 x i32> poison, i32 %1989, i64 0, !dbg !39
  %1993 = insertelement <2 x i32> %1992, i32 %1991, i64 1, !dbg !39
  store <2 x i32> %1993, ptr addrspace(3) %1935, align 8, !dbg !39
  %1994 = bitcast float %1767 to i32, !dbg !39
  %1995 = select i1 %1859, i32 %1994, i32 0, !dbg !40
  %1996 = bitcast float %1768 to i32, !dbg !39
  %1997 = select i1 %1861, i32 %1996, i32 0, !dbg !40
  %1998 = insertelement <2 x i32> poison, i32 %1995, i64 0, !dbg !39
  %1999 = insertelement <2 x i32> %1998, i32 %1997, i64 1, !dbg !39
  store <2 x i32> %1999, ptr addrspace(3) %1942, align 8, !dbg !39
  %2000 = bitcast float %1769 to i32, !dbg !39
  %2001 = select i1 %1863, i32 %2000, i32 0, !dbg !40
  %2002 = bitcast float %1770 to i32, !dbg !39
  %2003 = select i1 %1865, i32 %2002, i32 0, !dbg !40
  %2004 = insertelement <2 x i32> poison, i32 %2001, i64 0, !dbg !39
  %2005 = insertelement <2 x i32> %2004, i32 %2003, i64 1, !dbg !39
  store <2 x i32> %2005, ptr addrspace(3) %1947, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1948, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1953, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1954, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1959, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %2006 = load <4 x i32>, ptr addrspace(3) %1962, align 16, !dbg !39
  %2007 = load <4 x i32>, ptr addrspace(3) %1968, align 16, !dbg !39
  %2008 = load <4 x i32>, ptr addrspace(3) %1974, align 16, !dbg !39
  %2009 = load <4 x i32>, ptr addrspace(3) %1980, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %2010 = bitcast float %1771 to i32, !dbg !39
  %2011 = select i1 %1821, i32 %2010, i32 0, !dbg !40
  %2012 = bitcast float %1772 to i32, !dbg !39
  %2013 = select i1 %1822, i32 %2012, i32 0, !dbg !40
  %2014 = insertelement <2 x i32> poison, i32 %2011, i64 0, !dbg !39
  %2015 = insertelement <2 x i32> %2014, i32 %2013, i64 1, !dbg !39
  store <2 x i32> %2015, ptr addrspace(3) %1925, align 8, !dbg !39
  %2016 = bitcast float %1773 to i32, !dbg !39
  %2017 = select i1 %1824, i32 %2016, i32 0, !dbg !40
  %2018 = bitcast float %1774 to i32, !dbg !39
  %2019 = select i1 %1825, i32 %2018, i32 0, !dbg !40
  %2020 = insertelement <2 x i32> poison, i32 %2017, i64 0, !dbg !39
  %2021 = insertelement <2 x i32> %2020, i32 %2019, i64 1, !dbg !39
  store <2 x i32> %2021, ptr addrspace(3) %1935, align 8, !dbg !39
  %2022 = bitcast float %1775 to i32, !dbg !39
  %2023 = select i1 %1827, i32 %2022, i32 0, !dbg !40
  %2024 = bitcast float %1776 to i32, !dbg !39
  %2025 = select i1 %1829, i32 %2024, i32 0, !dbg !40
  %2026 = insertelement <2 x i32> poison, i32 %2023, i64 0, !dbg !39
  %2027 = insertelement <2 x i32> %2026, i32 %2025, i64 1, !dbg !39
  store <2 x i32> %2027, ptr addrspace(3) %1942, align 8, !dbg !39
  %2028 = bitcast float %1777 to i32, !dbg !39
  %2029 = select i1 %1830, i32 %2028, i32 0, !dbg !40
  %2030 = bitcast float %1778 to i32, !dbg !39
  %2031 = select i1 %1831, i32 %2030, i32 0, !dbg !40
  %2032 = insertelement <2 x i32> poison, i32 %2029, i64 0, !dbg !39
  %2033 = insertelement <2 x i32> %2032, i32 %2031, i64 1, !dbg !39
  store <2 x i32> %2033, ptr addrspace(3) %1947, align 8, !dbg !39
  %2034 = bitcast float %1779 to i32, !dbg !39
  %2035 = select i1 %1867, i32 %2034, i32 0, !dbg !40
  %2036 = bitcast float %1780 to i32, !dbg !39
  %2037 = select i1 %1869, i32 %2036, i32 0, !dbg !40
  %2038 = insertelement <2 x i32> poison, i32 %2035, i64 0, !dbg !39
  %2039 = insertelement <2 x i32> %2038, i32 %2037, i64 1, !dbg !39
  store <2 x i32> %2039, ptr addrspace(3) %1948, align 8, !dbg !39
  %2040 = bitcast float %1781 to i32, !dbg !39
  %2041 = select i1 %1871, i32 %2040, i32 0, !dbg !40
  %2042 = bitcast float %1782 to i32, !dbg !39
  %2043 = select i1 %1873, i32 %2042, i32 0, !dbg !40
  %2044 = insertelement <2 x i32> poison, i32 %2041, i64 0, !dbg !39
  %2045 = insertelement <2 x i32> %2044, i32 %2043, i64 1, !dbg !39
  store <2 x i32> %2045, ptr addrspace(3) %1953, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1954, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1959, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %2046 = load <4 x i32>, ptr addrspace(3) %1962, align 16, !dbg !39
  %2047 = load <4 x i32>, ptr addrspace(3) %1968, align 16, !dbg !39
  %2048 = load <4 x i32>, ptr addrspace(3) %1974, align 16, !dbg !39
  %2049 = load <4 x i32>, ptr addrspace(3) %1980, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %2050 = bitcast float %1783 to i32, !dbg !39
  %2051 = select i1 %1833, i32 %2050, i32 0, !dbg !40
  %2052 = bitcast float %1784 to i32, !dbg !39
  %2053 = select i1 %1834, i32 %2052, i32 0, !dbg !40
  %2054 = insertelement <2 x i32> poison, i32 %2051, i64 0, !dbg !39
  %2055 = insertelement <2 x i32> %2054, i32 %2053, i64 1, !dbg !39
  store <2 x i32> %2055, ptr addrspace(3) %1925, align 8, !dbg !39
  %2056 = bitcast float %1785 to i32, !dbg !39
  %2057 = select i1 %1836, i32 %2056, i32 0, !dbg !40
  %2058 = bitcast float %1786 to i32, !dbg !39
  %2059 = select i1 %1837, i32 %2058, i32 0, !dbg !40
  %2060 = insertelement <2 x i32> poison, i32 %2057, i64 0, !dbg !39
  %2061 = insertelement <2 x i32> %2060, i32 %2059, i64 1, !dbg !39
  store <2 x i32> %2061, ptr addrspace(3) %1935, align 8, !dbg !39
  %2062 = bitcast float %1787 to i32, !dbg !39
  %2063 = select i1 %1838, i32 %2062, i32 0, !dbg !40
  %2064 = bitcast float %1788 to i32, !dbg !39
  %2065 = select i1 %1839, i32 %2064, i32 0, !dbg !40
  %2066 = insertelement <2 x i32> poison, i32 %2063, i64 0, !dbg !39
  %2067 = insertelement <2 x i32> %2066, i32 %2065, i64 1, !dbg !39
  store <2 x i32> %2067, ptr addrspace(3) %1942, align 8, !dbg !39
  %2068 = bitcast float %1789 to i32, !dbg !39
  %2069 = select i1 %1840, i32 %2068, i32 0, !dbg !40
  %2070 = bitcast float %1790 to i32, !dbg !39
  %2071 = select i1 %1841, i32 %2070, i32 0, !dbg !40
  %2072 = insertelement <2 x i32> poison, i32 %2069, i64 0, !dbg !39
  %2073 = insertelement <2 x i32> %2072, i32 %2071, i64 1, !dbg !39
  store <2 x i32> %2073, ptr addrspace(3) %1947, align 8, !dbg !39
  %2074 = bitcast float %1791 to i32, !dbg !39
  %2075 = select i1 %1843, i32 %2074, i32 0, !dbg !40
  %2076 = bitcast float %1792 to i32, !dbg !39
  %2077 = select i1 %1845, i32 %2076, i32 0, !dbg !40
  %2078 = insertelement <2 x i32> poison, i32 %2075, i64 0, !dbg !39
  %2079 = insertelement <2 x i32> %2078, i32 %2077, i64 1, !dbg !39
  store <2 x i32> %2079, ptr addrspace(3) %1948, align 8, !dbg !39
  %2080 = bitcast float %1793 to i32, !dbg !39
  %2081 = select i1 %1846, i32 %2080, i32 0, !dbg !40
  %2082 = bitcast float %1794 to i32, !dbg !39
  %2083 = select i1 %1847, i32 %2082, i32 0, !dbg !40
  %2084 = insertelement <2 x i32> poison, i32 %2081, i64 0, !dbg !39
  %2085 = insertelement <2 x i32> %2084, i32 %2083, i64 1, !dbg !39
  store <2 x i32> %2085, ptr addrspace(3) %1953, align 8, !dbg !39
  %2086 = bitcast float %1795 to i32, !dbg !39
  %2087 = select i1 %1876, i32 %2086, i32 0, !dbg !40
  %2088 = bitcast float %1796 to i32, !dbg !39
  %2089 = select i1 %1879, i32 %2088, i32 0, !dbg !40
  %2090 = insertelement <2 x i32> poison, i32 %2087, i64 0, !dbg !39
  %2091 = insertelement <2 x i32> %2090, i32 %2089, i64 1, !dbg !39
  store <2 x i32> %2091, ptr addrspace(3) %1954, align 8, !dbg !39
  %2092 = insertelement <2 x float> poison, float %1797, i64 0, !dbg !39
  %2093 = insertelement <2 x float> %2092, float %1798, i64 1, !dbg !39
  %2094 = bitcast <2 x float> %2093 to <2 x i32>, !dbg !39
  %2095 = insertelement <2 x i1> poison, i1 %1881, i64 0, !dbg !40
  %2096 = insertelement <2 x i1> %2095, i1 %1883, i64 1, !dbg !40
  %2097 = select <2 x i1> %2096, <2 x i32> %2094, <2 x i32> zeroinitializer, !dbg !40
  store <2 x i32> %2097, ptr addrspace(3) %1959, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %2098 = load <4 x i32>, ptr addrspace(3) %1962, align 16, !dbg !39
  %2099 = load <4 x i32>, ptr addrspace(3) %1968, align 16, !dbg !39
  %2100 = load <4 x i32>, ptr addrspace(3) %1974, align 16, !dbg !39
  %2101 = load <4 x i32>, ptr addrspace(3) %1980, align 16, !dbg !39
  %.extract = extractelement <4 x i32> %1963, i64 0, !dbg !39
  %.extract251 = extractelement <4 x i32> %1963, i64 1, !dbg !39
  %.extract252 = extractelement <4 x i32> %1963, i64 2, !dbg !39
  %.extract253 = extractelement <4 x i32> %1963, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract251, i32 %.extract252, i32 %.extract253, ptr addrspace(1) %1888, i1 %186) #4, !dbg !39
  %.extract254 = extractelement <4 x i32> %1969, i64 0, !dbg !39
  %.extract255 = extractelement <4 x i32> %1969, i64 1, !dbg !39
  %.extract256 = extractelement <4 x i32> %1969, i64 2, !dbg !39
  %.extract257 = extractelement <4 x i32> %1969, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract254, i32 %.extract255, i32 %.extract256, i32 %.extract257, ptr addrspace(1) %1890, i1 %187) #4, !dbg !39
  %.extract258 = extractelement <4 x i32> %1975, i64 0, !dbg !39
  %.extract259 = extractelement <4 x i32> %1975, i64 1, !dbg !39
  %.extract260 = extractelement <4 x i32> %1975, i64 2, !dbg !39
  %.extract261 = extractelement <4 x i32> %1975, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract258, i32 %.extract259, i32 %.extract260, i32 %.extract261, ptr addrspace(1) %1892, i1 %188) #4, !dbg !39
  %.extract262 = extractelement <4 x i32> %1981, i64 0, !dbg !39
  %.extract263 = extractelement <4 x i32> %1981, i64 1, !dbg !39
  %.extract264 = extractelement <4 x i32> %1981, i64 2, !dbg !39
  %.extract265 = extractelement <4 x i32> %1981, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract262, i32 %.extract263, i32 %.extract264, i32 %.extract265, ptr addrspace(1) %1894, i1 %189) #4, !dbg !39
  %.extract266 = extractelement <4 x i32> %2006, i64 0, !dbg !39
  %.extract267 = extractelement <4 x i32> %2006, i64 1, !dbg !39
  %.extract268 = extractelement <4 x i32> %2006, i64 2, !dbg !39
  %.extract269 = extractelement <4 x i32> %2006, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract266, i32 %.extract267, i32 %.extract268, i32 %.extract269, ptr addrspace(1) %1896, i1 %190) #4, !dbg !39
  %.extract270 = extractelement <4 x i32> %2007, i64 0, !dbg !39
  %.extract271 = extractelement <4 x i32> %2007, i64 1, !dbg !39
  %.extract272 = extractelement <4 x i32> %2007, i64 2, !dbg !39
  %.extract273 = extractelement <4 x i32> %2007, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract270, i32 %.extract271, i32 %.extract272, i32 %.extract273, ptr addrspace(1) %1898, i1 %191) #4, !dbg !39
  %.extract274 = extractelement <4 x i32> %2008, i64 0, !dbg !39
  %.extract275 = extractelement <4 x i32> %2008, i64 1, !dbg !39
  %.extract276 = extractelement <4 x i32> %2008, i64 2, !dbg !39
  %.extract277 = extractelement <4 x i32> %2008, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract274, i32 %.extract275, i32 %.extract276, i32 %.extract277, ptr addrspace(1) %1900, i1 %192) #4, !dbg !39
  %.extract278 = extractelement <4 x i32> %2009, i64 0, !dbg !39
  %.extract279 = extractelement <4 x i32> %2009, i64 1, !dbg !39
  %.extract280 = extractelement <4 x i32> %2009, i64 2, !dbg !39
  %.extract281 = extractelement <4 x i32> %2009, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract278, i32 %.extract279, i32 %.extract280, i32 %.extract281, ptr addrspace(1) %1902, i1 %193) #4, !dbg !39
  %.extract282 = extractelement <4 x i32> %2046, i64 0, !dbg !39
  %.extract283 = extractelement <4 x i32> %2046, i64 1, !dbg !39
  %.extract284 = extractelement <4 x i32> %2046, i64 2, !dbg !39
  %.extract285 = extractelement <4 x i32> %2046, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract282, i32 %.extract283, i32 %.extract284, i32 %.extract285, ptr addrspace(1) %1904, i1 %194) #4, !dbg !39
  %.extract286 = extractelement <4 x i32> %2047, i64 0, !dbg !39
  %.extract287 = extractelement <4 x i32> %2047, i64 1, !dbg !39
  %.extract288 = extractelement <4 x i32> %2047, i64 2, !dbg !39
  %.extract289 = extractelement <4 x i32> %2047, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract286, i32 %.extract287, i32 %.extract288, i32 %.extract289, ptr addrspace(1) %1906, i1 %195) #4, !dbg !39
  %.extract290 = extractelement <4 x i32> %2048, i64 0, !dbg !39
  %.extract291 = extractelement <4 x i32> %2048, i64 1, !dbg !39
  %.extract292 = extractelement <4 x i32> %2048, i64 2, !dbg !39
  %.extract293 = extractelement <4 x i32> %2048, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract290, i32 %.extract291, i32 %.extract292, i32 %.extract293, ptr addrspace(1) %1908, i1 %196) #4, !dbg !39
  %.extract294 = extractelement <4 x i32> %2049, i64 0, !dbg !39
  %.extract295 = extractelement <4 x i32> %2049, i64 1, !dbg !39
  %.extract296 = extractelement <4 x i32> %2049, i64 2, !dbg !39
  %.extract297 = extractelement <4 x i32> %2049, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract294, i32 %.extract295, i32 %.extract296, i32 %.extract297, ptr addrspace(1) %1910, i1 %197) #4, !dbg !39
  %.extract298 = extractelement <4 x i32> %2098, i64 0, !dbg !39
  %.extract299 = extractelement <4 x i32> %2098, i64 1, !dbg !39
  %.extract300 = extractelement <4 x i32> %2098, i64 2, !dbg !39
  %.extract301 = extractelement <4 x i32> %2098, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract298, i32 %.extract299, i32 %.extract300, i32 %.extract301, ptr addrspace(1) %1912, i1 %198) #4, !dbg !39
  %.extract302 = extractelement <4 x i32> %2099, i64 0, !dbg !39
  %.extract303 = extractelement <4 x i32> %2099, i64 1, !dbg !39
  %.extract304 = extractelement <4 x i32> %2099, i64 2, !dbg !39
  %.extract305 = extractelement <4 x i32> %2099, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract302, i32 %.extract303, i32 %.extract304, i32 %.extract305, ptr addrspace(1) %1914, i1 %199) #4, !dbg !39
  %.extract306 = extractelement <4 x i32> %2100, i64 0, !dbg !39
  %.extract307 = extractelement <4 x i32> %2100, i64 1, !dbg !39
  %.extract308 = extractelement <4 x i32> %2100, i64 2, !dbg !39
  %.extract309 = extractelement <4 x i32> %2100, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract306, i32 %.extract307, i32 %.extract308, i32 %.extract309, ptr addrspace(1) %1916, i1 %200) #4, !dbg !39
  %.extract310 = extractelement <4 x i32> %2101, i64 0, !dbg !39
  %.extract311 = extractelement <4 x i32> %2101, i64 1, !dbg !39
  %.extract312 = extractelement <4 x i32> %2101, i64 2, !dbg !39
  %.extract313 = extractelement <4 x i32> %2101, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract310, i32 %.extract311, i32 %.extract312, i32 %.extract313, ptr addrspace(1) %1918, i1 %201) #4, !dbg !39
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 51, column: 21, scope: !5)
!15 = !DILocation(line: 52, column: 16, scope: !5)
!16 = !DILocation(line: 54, column: 42, scope: !5)
!17 = !DILocation(line: 54, column: 38, scope: !5)
!18 = !DILocation(line: 54, column: 46, scope: !5)
!19 = !DILocation(line: 54, column: 83, scope: !5)
!20 = !DILocation(line: 55, column: 21, scope: !5)
!21 = !DILocation(line: 59, column: 45, scope: !5)
!22 = !DILocation(line: 59, column: 52, scope: !5)
!23 = !DILocation(line: 59, column: 36, scope: !5)
!24 = !DILocation(line: 60, column: 22, scope: !5)
!25 = !DILocation(line: 61, column: 36, scope: !5)
!26 = !DILocation(line: 61, column: 27, scope: !5)
!27 = !DILocation(line: 64, column: 36, scope: !5)
!28 = !DILocation(line: 64, column: 44, scope: !5)
!29 = !DILocation(line: 65, column: 22, scope: !5)
!30 = !DILocation(line: 66, column: 34, scope: !5)
!31 = !DILocation(line: 67, column: 19, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 70, column: 26, scope: !5)
!35 = !DILocation(line: 70, column: 43, scope: !5)
!36 = !DILocation(line: 70, column: 58, scope: !5)
!37 = !DILocation(line: 72, column: 48, scope: !5)
!38 = !DILocation(line: 72, column: 32, scope: !5)
!39 = !DILocation(line: 73, column: 18, scope: !5)
!40 = !DILocation(line: 71, column: 29, scope: !5)
!41 = !DILocation(line: 73, column: 4, scope: !5)
