; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 32, !dbg !13
  %15 = icmp eq i32 %14, 0, !dbg !13
  %16 = lshr i32 %12, 3, !dbg !13
  %17 = and i32 %16, 15, !dbg !13
  %18 = or disjoint i32 %17, 16, !dbg !13
  %19 = or disjoint i32 %17, 32, !dbg !13
  %20 = or disjoint i32 %17, 48, !dbg !13
  %21 = lshr i32 %12, 2, !dbg !13
  %22 = and i32 %21, 7, !dbg !13
  %23 = lshr i32 %12, 1, !dbg !13
  %24 = and i32 %23, 48, !dbg !13
  %25 = or disjoint i32 %24, %22, !dbg !13
  %26 = or disjoint i32 %25, 8, !dbg !13
  %27 = shl nuw nsw i32 %12, 3, !dbg !13
  %28 = and i32 %27, 56, !dbg !13
  %29 = mul i32 %9, %4, !dbg !14
  %30 = sext i32 %29 to i64, !dbg !15
  %31 = getelementptr bfloat, ptr addrspace(1) %2, i64 %30, !dbg !15
  %32 = zext nneg i32 %10 to i64, !dbg !16
  %33 = getelementptr bfloat, ptr addrspace(1) %31, i64 %32, !dbg !16
  %34 = sext i32 %4 to i64, !dbg !17
  %35 = sext i32 %11 to i64, !dbg !17
  %36 = zext nneg i32 %17 to i64, !dbg !18
  %37 = zext nneg i32 %18 to i64, !dbg !18
  %38 = zext nneg i32 %19 to i64, !dbg !18
  %39 = zext nneg i32 %20 to i64, !dbg !18
  %40 = zext nneg i32 %25 to i64, !dbg !18
  %41 = zext nneg i32 %26 to i64, !dbg !18
  %42 = zext nneg i32 %28 to i64, !dbg !18
  %43 = or disjoint i64 %36, %35, !dbg !18
  %44 = or disjoint i64 %37, %35, !dbg !18
  %45 = or disjoint i64 %38, %35, !dbg !18
  %46 = or disjoint i64 %39, %35, !dbg !18
  %47 = or disjoint i64 %40, %35, !dbg !18
  %48 = or disjoint i64 %41, %35, !dbg !18
  %49 = shl nsw i64 %47, 5, !dbg !18
  %50 = shl nsw i64 %48, 5, !dbg !18
  %51 = getelementptr bfloat, ptr addrspace(1) %33, i64 %49, !dbg !18
  %52 = getelementptr bfloat, ptr addrspace(1) %33, i64 %50, !dbg !18
  %53 = icmp sgt i32 %11, -1, !dbg !18
  %54 = icmp slt i64 %47, %34, !dbg !18
  %55 = icmp slt i64 %48, %34, !dbg !18
  %56 = and i1 %53, %54, !dbg !18
  %57 = and i1 %53, %55, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %51, i1 %56) #2, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !18
  %60 = or disjoint i32 %29, %10, !dbg !19
  %61 = shl i32 %60, 7, !dbg !20
  %62 = sext i32 %61 to i64, !dbg !21
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = icmp slt i64 %43, %34, !dbg !22
  %65 = icmp slt i64 %44, %34, !dbg !22
  %66 = icmp slt i64 %45, %34, !dbg !22
  %67 = icmp slt i64 %46, %34, !dbg !22
  %68 = and i1 %53, %64, !dbg !22
  %69 = and i1 %53, %65, !dbg !22
  %70 = and i1 %53, %66, !dbg !22
  %71 = and i1 %53, %67, !dbg !22
  %.idx93 = shl nsw i64 %43, 13, !dbg !22
  %72 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx93, !dbg !22
  %73 = getelementptr bfloat, ptr addrspace(1) %72, i64 %42, !dbg !22
  %.idx94 = shl nsw i64 %44, 13, !dbg !22
  %74 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx94, !dbg !22
  %75 = getelementptr bfloat, ptr addrspace(1) %74, i64 %42, !dbg !22
  %.idx95 = shl nsw i64 %45, 13, !dbg !22
  %76 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx95, !dbg !22
  %77 = getelementptr bfloat, ptr addrspace(1) %76, i64 %42, !dbg !22
  %.idx96 = shl nsw i64 %46, 13, !dbg !22
  %78 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx96, !dbg !22
  %79 = getelementptr bfloat, ptr addrspace(1) %78, i64 %42, !dbg !22
  %80 = select i1 %15, i32 0, i32 288, !dbg !22
  %81 = and i32 %12, 24, !dbg !22
  %82 = mul nuw nsw i32 %81, 9, !dbg !22
  %83 = xor i32 %82, %28, !dbg !22
  %84 = xor i32 %83, %80, !dbg !22
  %85 = and i32 %27, 512, !dbg !22
  %86 = or disjoint i32 %84, %85, !dbg !22
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !22
  %88 = or disjoint i32 %28, 1024, !dbg !22
  %89 = xor i32 %82, %88, !dbg !22
  %90 = xor i32 %89, %80, !dbg !22
  %91 = or disjoint i32 %90, %85, !dbg !22
  %92 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %91, !dbg !22
  %93 = or disjoint i32 %28, 2048, !dbg !22
  %94 = xor i32 %82, %93, !dbg !22
  %95 = xor i32 %94, %80, !dbg !22
  %96 = or disjoint i32 %95, %85, !dbg !22
  %97 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %96, !dbg !22
  %98 = or disjoint i32 %28, 3072, !dbg !22
  %99 = xor i32 %82, %98, !dbg !22
  %100 = xor i32 %99, %80, !dbg !22
  %101 = or disjoint i32 %100, %85, !dbg !22
  %102 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %101, !dbg !22
  %103 = select i1 %68, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %87, ptr addrspace(1) %73, i32 %103) #2, !dbg !22
  %104 = select i1 %69, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %92, ptr addrspace(1) %75, i32 %104) #2, !dbg !22
  %105 = select i1 %70, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %97, ptr addrspace(1) %77, i32 %105) #2, !dbg !22
  %106 = select i1 %71, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %102, ptr addrspace(1) %79, i32 %106) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br label %107, !dbg !23

107:                                              ; preds = %6, %107
  %108 = phi i1 [ true, %6 ], [ false, %107 ]
  %indvars.iv = phi i64 [ 64, %6 ], [ 128, %107 ]
  %109 = phi i32 [ -1, %6 ], [ %145, %107 ]
  %110 = phi i32 [ 0, %6 ], [ %335, %107 ]
  %111 = phi float [ 0.000000e+00, %6 ], [ %301, %107 ]
  %112 = phi float [ 0.000000e+00, %6 ], [ %302, %107 ]
  %113 = phi float [ 0.000000e+00, %6 ], [ %303, %107 ]
  %114 = phi float [ 0.000000e+00, %6 ], [ %304, %107 ]
  %115 = phi float [ 0.000000e+00, %6 ], [ %305, %107 ]
  %116 = phi float [ 0.000000e+00, %6 ], [ %306, %107 ]
  %117 = phi float [ 0.000000e+00, %6 ], [ %307, %107 ]
  %118 = phi float [ 0.000000e+00, %6 ], [ %308, %107 ]
  %119 = phi float [ 0.000000e+00, %6 ], [ %309, %107 ]
  %120 = phi float [ 0.000000e+00, %6 ], [ %310, %107 ]
  %121 = phi float [ 0.000000e+00, %6 ], [ %311, %107 ]
  %122 = phi float [ 0.000000e+00, %6 ], [ %312, %107 ]
  %123 = phi float [ 0.000000e+00, %6 ], [ %313, %107 ]
  %124 = phi float [ 0.000000e+00, %6 ], [ %314, %107 ]
  %125 = phi float [ 0.000000e+00, %6 ], [ %315, %107 ]
  %126 = phi float [ 0.000000e+00, %6 ], [ %316, %107 ]
  %127 = phi float [ 0.000000e+00, %6 ], [ %317, %107 ]
  %128 = phi float [ 0.000000e+00, %6 ], [ %318, %107 ]
  %129 = phi float [ 0.000000e+00, %6 ], [ %319, %107 ]
  %130 = phi float [ 0.000000e+00, %6 ], [ %320, %107 ]
  %131 = phi float [ 0.000000e+00, %6 ], [ %321, %107 ]
  %132 = phi float [ 0.000000e+00, %6 ], [ %322, %107 ]
  %133 = phi float [ 0.000000e+00, %6 ], [ %323, %107 ]
  %134 = phi float [ 0.000000e+00, %6 ], [ %324, %107 ]
  %135 = phi float [ 0.000000e+00, %6 ], [ %325, %107 ]
  %136 = phi float [ 0.000000e+00, %6 ], [ %326, %107 ]
  %137 = phi float [ 0.000000e+00, %6 ], [ %327, %107 ]
  %138 = phi float [ 0.000000e+00, %6 ], [ %328, %107 ]
  %139 = phi float [ 0.000000e+00, %6 ], [ %329, %107 ]
  %140 = phi float [ 0.000000e+00, %6 ], [ %330, %107 ]
  %141 = phi float [ 0.000000e+00, %6 ], [ %331, %107 ]
  %142 = phi float [ 0.000000e+00, %6 ], [ %332, %107 ]
  %143 = add i32 %109, 1, !dbg !23
  %144 = icmp sgt i32 %143, 1, !dbg !23
  %145 = select i1 %144, i32 0, i32 %143, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx91 = shl i32 %145, 13, !dbg !22
  %146 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx91, !dbg !22
  %147 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %148 = ptrtoint ptr addrspace(3) %146 to i32, !dbg !24
  %149 = lshr exact i32 %148, 4, !dbg !24
  %150 = and i32 %149, 16383, !dbg !24
  %151 = zext nneg i32 %150 to i64, !dbg !24
  %152 = or disjoint i64 %151, 4611686293338849280, !dbg !24
  %153 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, i64 %152, i64 %152, i1 true) #2, !dbg !24
  %154 = add i32 %148, 32, !dbg !24
  %155 = lshr exact i32 %154, 4, !dbg !24
  %156 = and i32 %155, 16383, !dbg !24
  %157 = zext nneg i32 %156 to i64, !dbg !24
  %158 = or disjoint i64 %157, 4611686293338849280, !dbg !24
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 0, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 1, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 2, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 3, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 4, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 5, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 6, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 7, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 8, !dbg !24
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 9, !dbg !24
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 10, !dbg !24
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 11, !dbg !24
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 12, !dbg !24
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 13, !dbg !24
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 14, !dbg !24
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 15, !dbg !24
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 16, !dbg !24
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 17, !dbg !24
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 18, !dbg !24
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 19, !dbg !24
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 20, !dbg !24
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 21, !dbg !24
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 22, !dbg !24
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 23, !dbg !24
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 24, !dbg !24
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 25, !dbg !24
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 26, !dbg !24
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 27, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 28, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 29, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 30, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %153, 31, !dbg !24
  %191 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, i64 %158, i64 %158, i1 true) #2, !dbg !24
  %192 = add i32 %148, 64, !dbg !24
  %193 = lshr exact i32 %192, 4, !dbg !24
  %194 = and i32 %193, 16383, !dbg !24
  %195 = zext nneg i32 %194 to i64, !dbg !24
  %196 = or disjoint i64 %195, 4611686293338849280, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 0, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 1, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 2, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 3, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 4, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 5, !dbg !24
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 6, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 7, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 8, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 9, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 10, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 11, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 12, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 13, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 14, !dbg !24
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 15, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 16, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 17, !dbg !24
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 18, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 19, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 20, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 21, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 22, !dbg !24
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 23, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 24, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 25, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 26, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 27, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 28, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 29, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 30, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 31, !dbg !24
  %229 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, i64 %196, i64 %196, i1 true) #2, !dbg !24
  %230 = add i32 %148, 96, !dbg !24
  %231 = lshr exact i32 %230, 4, !dbg !24
  %232 = and i32 %231, 16383, !dbg !24
  %233 = zext nneg i32 %232 to i64, !dbg !24
  %234 = or disjoint i64 %233, 4611686293338849280, !dbg !24
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 0, !dbg !24
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 1, !dbg !24
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 2, !dbg !24
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 3, !dbg !24
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 4, !dbg !24
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 5, !dbg !24
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 6, !dbg !24
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 7, !dbg !24
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 8, !dbg !24
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 9, !dbg !24
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 10, !dbg !24
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 11, !dbg !24
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 12, !dbg !24
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 13, !dbg !24
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 14, !dbg !24
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 15, !dbg !24
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 16, !dbg !24
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 17, !dbg !24
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 18, !dbg !24
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 19, !dbg !24
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 20, !dbg !24
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 21, !dbg !24
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 22, !dbg !24
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 23, !dbg !24
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 24, !dbg !24
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 25, !dbg !24
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 26, !dbg !24
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 27, !dbg !24
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 28, !dbg !24
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 29, !dbg !24
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 30, !dbg !24
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 31, !dbg !24
  %267 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, $66, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l,b"(float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, float %256, float %257, float %258, float %259, float %260, float %261, float %262, float %263, float %264, float %265, float %266, i64 %234, i64 %234, i1 true) #2, !dbg !24
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 0, !dbg !24
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 1, !dbg !24
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 2, !dbg !24
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 3, !dbg !24
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 4, !dbg !24
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 5, !dbg !24
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 6, !dbg !24
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 7, !dbg !24
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 8, !dbg !24
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 9, !dbg !24
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 10, !dbg !24
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 11, !dbg !24
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 12, !dbg !24
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 13, !dbg !24
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 14, !dbg !24
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 15, !dbg !24
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 16, !dbg !24
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 17, !dbg !24
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 18, !dbg !24
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 19, !dbg !24
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 20, !dbg !24
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 21, !dbg !24
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 22, !dbg !24
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 23, !dbg !24
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 24, !dbg !24
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 25, !dbg !24
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 26, !dbg !24
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 27, !dbg !24
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 28, !dbg !24
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 29, !dbg !24
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 30, !dbg !24
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 31, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %300 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37"(float %268, float %269, float %270, float %271, float %272, float %273, float %274, float %275, float %276, float %277, float %278, float %279, float %280, float %281, float %282, float %283, float %284, float %285, float %286, float %287, float %288, float %289, float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, ptr addrspace(3) %146, i32 0, i32 0, ptr addrspace(3) %146, i32 0, i32 0) #2, !dbg !24
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 0, !dbg !24
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 1, !dbg !24
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 2, !dbg !24
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 3, !dbg !24
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 4, !dbg !24
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 5, !dbg !24
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 6, !dbg !24
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 7, !dbg !24
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 8, !dbg !24
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 9, !dbg !24
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 10, !dbg !24
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 11, !dbg !24
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 12, !dbg !24
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 13, !dbg !24
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 14, !dbg !24
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 15, !dbg !24
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 16, !dbg !24
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 17, !dbg !24
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 18, !dbg !24
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 19, !dbg !24
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 20, !dbg !24
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 21, !dbg !24
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 22, !dbg !24
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 23, !dbg !24
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 24, !dbg !24
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 25, !dbg !24
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 26, !dbg !24
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 27, !dbg !24
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 28, !dbg !24
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 29, !dbg !24
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 30, !dbg !24
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %300, 31, !dbg !24
  %333 = add i32 %110, 1, !dbg !23
  %334 = icmp sgt i32 %333, 1, !dbg !23
  %335 = select i1 %334, i32 0, i32 %333, !dbg !23
  %336 = or disjoint i64 %indvars.iv, %42, !dbg !22
  %337 = getelementptr bfloat, ptr addrspace(1) %72, i64 %336, !dbg !22
  %338 = getelementptr bfloat, ptr addrspace(1) %74, i64 %336, !dbg !22
  %339 = getelementptr bfloat, ptr addrspace(1) %76, i64 %336, !dbg !22
  %340 = getelementptr bfloat, ptr addrspace(1) %78, i64 %336, !dbg !22
  %341 = and i1 %68, %108, !dbg !22
  %342 = and i1 %69, %108, !dbg !22
  %343 = and i1 %70, %108, !dbg !22
  %344 = and i1 %71, %108, !dbg !22
  %.idx92 = shl i32 %335, 13, !dbg !22
  %345 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx92, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %346 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %345, i32 %86, !dbg !22
  %347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %345, i32 %91, !dbg !22
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %345, i32 %96, !dbg !22
  %349 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %345, i32 %101, !dbg !22
  %350 = select i1 %341, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %346, ptr addrspace(1) %337, i32 %350) #2, !dbg !22
  %351 = select i1 %342, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %347, ptr addrspace(1) %338, i32 %351) #2, !dbg !22
  %352 = select i1 %343, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %348, ptr addrspace(1) %339, i32 %352) #2, !dbg !22
  %353 = select i1 %344, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %349, ptr addrspace(1) %340, i32 %353) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br i1 %108, label %107, label %354, !dbg !23

354:                                              ; preds = %107
  %355 = bitcast i16 %59 to bfloat, !dbg !18
  %356 = bitcast i16 %58 to bfloat, !dbg !18
  %357 = shl nuw nsw i32 %12, 1, !dbg !13
  %358 = and i32 %357, 6, !dbg !13
  %359 = or disjoint i32 %358, 57, !dbg !13
  %360 = zext nneg i32 %359 to i64, !dbg !18
  %361 = or disjoint i64 %360, %35, !dbg !18
  %362 = icmp slt i64 %361, %34, !dbg !18
  %363 = and i1 %53, %362, !dbg !18
  %364 = or disjoint i32 %358, 56, !dbg !13
  %365 = zext nneg i32 %364 to i64, !dbg !18
  %366 = or disjoint i64 %365, %35, !dbg !18
  %367 = icmp slt i64 %366, %34, !dbg !18
  %368 = and i1 %53, %367, !dbg !18
  %369 = or disjoint i32 %358, 1, !dbg !13
  %370 = lshr i32 %12, 4, !dbg !13
  %371 = and i32 %370, 7, !dbg !13
  %372 = or disjoint i32 %371, 8, !dbg !13
  %373 = shl nuw nsw i32 %12, 2, !dbg !13
  %374 = and i32 %373, 60, !dbg !13
  %375 = zext nneg i32 %374 to i64, !dbg !18
  %376 = or disjoint i32 %359, %11, !dbg !25
  %377 = icmp slt i32 %376, %4, !dbg !26
  %378 = or disjoint i32 %364, %11, !dbg !25
  %379 = icmp slt i32 %378, %4, !dbg !26
  %380 = insertelement <8 x i32> poison, i32 %358, i64 0, !dbg !13
  %381 = shufflevector <8 x i32> %380, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !13
  %382 = or disjoint <8 x i32> %381, <i32 24, i32 25, i32 32, i32 33, i32 40, i32 41, i32 48, i32 49>, !dbg !13
  %383 = extractelement <8 x i32> %382, i64 7, !dbg !27
  %384 = zext nneg i32 %383 to i64, !dbg !18
  %385 = or disjoint i64 %384, %35, !dbg !18
  %386 = icmp slt i64 %385, %34, !dbg !18
  %387 = and i1 %53, %386, !dbg !18
  %388 = extractelement <8 x i32> %382, i64 6, !dbg !27
  %389 = zext nneg i32 %388 to i64, !dbg !18
  %390 = or disjoint i64 %389, %35, !dbg !18
  %391 = icmp slt i64 %390, %34, !dbg !18
  %392 = and i1 %53, %391, !dbg !18
  %393 = extractelement <8 x i32> %382, i64 5, !dbg !27
  %394 = zext nneg i32 %393 to i64, !dbg !18
  %395 = or disjoint i64 %394, %35, !dbg !18
  %396 = icmp slt i64 %395, %34, !dbg !18
  %397 = and i1 %53, %396, !dbg !18
  %398 = extractelement <8 x i32> %382, i64 4, !dbg !27
  %399 = zext nneg i32 %398 to i64, !dbg !18
  %400 = or disjoint i64 %399, %35, !dbg !18
  %401 = icmp slt i64 %400, %34, !dbg !18
  %402 = and i1 %53, %401, !dbg !18
  %403 = extractelement <8 x i32> %382, i64 3, !dbg !27
  %404 = zext nneg i32 %403 to i64, !dbg !18
  %405 = or disjoint i64 %404, %35, !dbg !18
  %406 = icmp slt i64 %405, %34, !dbg !18
  %407 = and i1 %53, %406, !dbg !18
  %408 = extractelement <8 x i32> %382, i64 2, !dbg !27
  %409 = zext nneg i32 %408 to i64, !dbg !18
  %410 = or disjoint i64 %409, %35, !dbg !18
  %411 = icmp slt i64 %410, %34, !dbg !18
  %412 = and i1 %53, %411, !dbg !18
  %413 = extractelement <8 x i32> %382, i64 1, !dbg !27
  %414 = extractelement <8 x i32> %382, i64 0, !dbg !27
  %415 = insertelement <4 x i32> poison, i32 %358, i64 0, !dbg !13
  %416 = shufflevector <4 x i32> %415, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %417 = or disjoint <4 x i32> %416, <i32 8, i32 9, i32 16, i32 17>, !dbg !13
  %418 = extractelement <4 x i32> %417, i64 3, !dbg !27
  %419 = extractelement <4 x i32> %417, i64 2, !dbg !27
  %420 = extractelement <4 x i32> %417, i64 1, !dbg !27
  %421 = extractelement <4 x i32> %417, i64 0, !dbg !27
  %422 = insertelement <16 x i32> poison, i32 %25, i64 0, !dbg !25
  %423 = insertelement <16 x i32> %422, i32 %26, i64 1, !dbg !25
  %424 = insertelement <16 x i32> %423, i32 %358, i64 2, !dbg !25
  %425 = insertelement <16 x i32> %424, i32 %369, i64 3, !dbg !25
  %426 = shufflevector <8 x i32> %382, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %427 = shufflevector <16 x i32> %425, <16 x i32> %426, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>, !dbg !25
  %428 = shufflevector <4 x i32> %417, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %429 = shufflevector <16 x i32> %427, <16 x i32> %428, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %430 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !25
  %431 = shufflevector <16 x i32> %430, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !25
  %432 = or disjoint <16 x i32> %429, %431, !dbg !25
  %433 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !26
  %434 = shufflevector <16 x i32> %433, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %435 = icmp slt <16 x i32> %432, %434, !dbg !26
  %436 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %301, float %302, float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, float %325, float %326, float %327, float %328, float %329, float %330, float %331, float %332) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %437 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %438 = getelementptr float, ptr addrspace(1) %437, i64 %32, !dbg !29
  %439 = getelementptr float, ptr addrspace(1) %438, i64 %49, !dbg !30
  %440 = getelementptr float, ptr addrspace(1) %438, i64 %50, !dbg !30
  %.idx13 = shl nsw i64 %410, 7, !dbg !30
  %441 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx13, !dbg !30
  %.idx14 = shl nsw i64 %405, 7, !dbg !30
  %442 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx14, !dbg !30
  %.idx15 = shl nsw i64 %400, 7, !dbg !30
  %443 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx15, !dbg !30
  %.idx16 = shl nsw i64 %395, 7, !dbg !30
  %444 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx16, !dbg !30
  %.idx17 = shl nsw i64 %390, 7, !dbg !30
  %445 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx17, !dbg !30
  %.idx18 = shl nsw i64 %385, 7, !dbg !30
  %446 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx18, !dbg !30
  %.idx19 = shl nsw i64 %366, 7, !dbg !30
  %447 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx19, !dbg !30
  %.idx20 = shl nsw i64 %361, 7, !dbg !30
  %448 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx20, !dbg !30
  %449 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %439, i1 %56) #2, !dbg !30
  %450 = bitcast i32 %449 to float, !dbg !30
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %440, i1 %57) #2, !dbg !30
  %452 = bitcast i32 %451 to float, !dbg !30
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 0, !dbg !31
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 1, !dbg !31
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 2, !dbg !31
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 3, !dbg !31
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 4, !dbg !31
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 5, !dbg !31
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 6, !dbg !31
  %460 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 7, !dbg !31
  %461 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 8, !dbg !31
  %462 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 9, !dbg !31
  %463 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 10, !dbg !31
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 11, !dbg !31
  %465 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 12, !dbg !31
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 13, !dbg !31
  %467 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 14, !dbg !31
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 15, !dbg !31
  %469 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 16, !dbg !31
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 17, !dbg !31
  %471 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 18, !dbg !31
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 19, !dbg !31
  %473 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 20, !dbg !31
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 21, !dbg !31
  %475 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 22, !dbg !31
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 23, !dbg !31
  %477 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 24, !dbg !31
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 25, !dbg !31
  %479 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 26, !dbg !31
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 27, !dbg !31
  %481 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 30, !dbg !31
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %436, 31, !dbg !31
  %483 = fpext bfloat %356 to float, !dbg !32
  %484 = fpext bfloat %355 to float, !dbg !32
  %485 = icmp samesign ugt i32 %25, %358, !dbg !27
  %486 = icmp samesign ugt i32 %25, %369, !dbg !27
  %487 = icmp samesign ugt i32 %25, %421, !dbg !27
  %488 = icmp samesign ugt i32 %25, %420, !dbg !27
  %489 = icmp samesign ugt i32 %26, %420, !dbg !27
  %490 = icmp samesign ugt i32 %25, %419, !dbg !27
  %491 = icmp samesign ugt i32 %25, %418, !dbg !27
  %492 = icmp samesign ugt i32 %26, %419, !dbg !27
  %493 = icmp samesign ugt i32 %26, %418, !dbg !27
  %494 = icmp samesign ugt i32 %25, %414, !dbg !27
  %495 = icmp samesign ugt i32 %25, %413, !dbg !27
  %496 = icmp samesign ugt i32 %26, %414, !dbg !27
  %497 = icmp samesign ugt i32 %26, %413, !dbg !27
  %498 = icmp samesign ugt i32 %25, %408, !dbg !27
  %499 = icmp samesign ugt i32 %25, %403, !dbg !27
  %500 = icmp samesign ugt i32 %26, %408, !dbg !27
  %501 = icmp samesign ugt i32 %26, %403, !dbg !27
  %502 = icmp samesign ugt i32 %25, %398, !dbg !27
  %503 = icmp samesign ugt i32 %25, %393, !dbg !27
  %504 = icmp samesign ugt i32 %26, %398, !dbg !27
  %505 = icmp samesign ugt i32 %26, %393, !dbg !27
  %506 = icmp samesign ugt i32 %25, %388, !dbg !27
  %507 = icmp samesign ugt i32 %25, %383, !dbg !27
  %508 = icmp samesign ugt i32 %26, %388, !dbg !27
  %509 = icmp samesign ugt i32 %26, %383, !dbg !27
  %510 = icmp samesign ugt i32 %26, %364, !dbg !27
  %511 = icmp samesign ugt i32 %26, %359, !dbg !27
  %512 = extractelement <16 x i1> %435, i64 1, !dbg !33
  %513 = extractelement <16 x i1> %435, i64 2, !dbg !33
  %514 = and i1 %512, %513, !dbg !34
  %515 = extractelement <16 x i1> %435, i64 3, !dbg !33
  %516 = and i1 %512, %515, !dbg !34
  %517 = and i1 %485, %513, !dbg !33
  %518 = extractelement <16 x i1> %435, i64 0, !dbg !33
  %519 = and i1 %518, %517, !dbg !33
  %520 = and i1 %486, %515, !dbg !33
  %521 = and i1 %518, %520, !dbg !33
  %522 = extractelement <16 x i1> %435, i64 4, !dbg !33
  %523 = and i1 %487, %522, !dbg !33
  %524 = and i1 %518, %523, !dbg !33
  %525 = extractelement <16 x i1> %435, i64 5, !dbg !33
  %526 = and i1 %488, %525, !dbg !33
  %527 = and i1 %518, %526, !dbg !33
  %528 = and i1 %485, %522, !dbg !33
  %529 = and i1 %512, %528, !dbg !33
  %530 = and i1 %489, %525, !dbg !33
  %531 = and i1 %512, %530, !dbg !33
  %532 = extractelement <16 x i1> %435, i64 6, !dbg !33
  %533 = and i1 %490, %532, !dbg !33
  %534 = and i1 %518, %533, !dbg !33
  %535 = extractelement <16 x i1> %435, i64 7, !dbg !33
  %536 = and i1 %491, %535, !dbg !33
  %537 = and i1 %518, %536, !dbg !33
  %538 = and i1 %492, %532, !dbg !33
  %539 = and i1 %512, %538, !dbg !33
  %540 = and i1 %493, %535, !dbg !33
  %541 = and i1 %512, %540, !dbg !33
  %542 = extractelement <16 x i1> %435, i64 8, !dbg !33
  %543 = and i1 %494, %542, !dbg !33
  %544 = and i1 %518, %543, !dbg !33
  %545 = extractelement <16 x i1> %435, i64 9, !dbg !33
  %546 = and i1 %495, %545, !dbg !33
  %547 = and i1 %518, %546, !dbg !33
  %548 = and i1 %496, %542, !dbg !33
  %549 = and i1 %512, %548, !dbg !33
  %550 = and i1 %497, %545, !dbg !33
  %551 = and i1 %512, %550, !dbg !33
  %552 = extractelement <16 x i1> %435, i64 10, !dbg !33
  %553 = and i1 %498, %552, !dbg !33
  %554 = and i1 %518, %553, !dbg !33
  %555 = extractelement <16 x i1> %435, i64 11, !dbg !33
  %556 = and i1 %499, %555, !dbg !33
  %557 = and i1 %518, %556, !dbg !33
  %558 = and i1 %500, %552, !dbg !33
  %559 = and i1 %512, %558, !dbg !33
  %560 = and i1 %501, %555, !dbg !33
  %561 = and i1 %512, %560, !dbg !33
  %562 = extractelement <16 x i1> %435, i64 12, !dbg !33
  %563 = and i1 %502, %562, !dbg !33
  %564 = and i1 %518, %563, !dbg !33
  %565 = extractelement <16 x i1> %435, i64 13, !dbg !33
  %566 = and i1 %503, %565, !dbg !33
  %567 = and i1 %518, %566, !dbg !33
  %568 = and i1 %504, %562, !dbg !33
  %569 = and i1 %512, %568, !dbg !33
  %570 = and i1 %505, %565, !dbg !33
  %571 = and i1 %512, %570, !dbg !33
  %572 = extractelement <16 x i1> %435, i64 14, !dbg !33
  %573 = and i1 %506, %572, !dbg !33
  %574 = and i1 %518, %573, !dbg !33
  %575 = extractelement <16 x i1> %435, i64 15, !dbg !33
  %576 = and i1 %507, %575, !dbg !33
  %577 = and i1 %518, %576, !dbg !33
  %578 = and i1 %508, %572, !dbg !33
  %579 = and i1 %512, %578, !dbg !33
  %580 = and i1 %509, %575, !dbg !33
  %581 = and i1 %512, %580, !dbg !33
  %582 = and i1 %510, %379, !dbg !33
  %583 = and i1 %512, %582, !dbg !33
  %584 = and i1 %511, %377, !dbg !33
  %585 = and i1 %512, %584, !dbg !33
  %586 = shl i32 %60, 6, !dbg !35
  %587 = sext i32 %586 to i64, !dbg !36
  %588 = getelementptr float, ptr addrspace(1) %3, i64 %587, !dbg !36
  %589 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !13
  %590 = insertelement <4 x i32> %589, i32 %371, i64 1, !dbg !13
  %591 = shufflevector <4 x i32> %590, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>, !dbg !13
  %592 = or <4 x i32> %591, <i32 56, i32 48, i32 40, i32 32>, !dbg !13
  %593 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !13
  %594 = shufflevector <2 x i32> %593, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %595 = or disjoint <2 x i32> %594, <i32 24, i32 16>, !dbg !13
  %596 = shufflevector <4 x i32> %417, <4 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %597 = shufflevector <8 x i32> %596, <8 x i32> %382, <4 x i32> <i32 2, i32 3, i32 8, i32 9>, !dbg !18
  %598 = shufflevector <4 x i32> %417, <4 x i32> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %599 = insertelement <16 x i32> %598, i32 %372, i64 6, !dbg !18
  %600 = insertelement <16 x i32> %599, i32 %371, i64 7, !dbg !18
  %601 = insertelement <16 x i32> %600, i32 %358, i64 8, !dbg !18
  %602 = insertelement <16 x i32> %601, i32 %369, i64 9, !dbg !18
  %603 = shufflevector <4 x i32> %592, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %604 = shufflevector <16 x i32> %603, <16 x i32> %602, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %605 = shufflevector <4 x i32> %597, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %606 = shufflevector <16 x i32> %604, <16 x i32> %605, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !18
  %607 = shufflevector <2 x i32> %595, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %608 = shufflevector <16 x i32> %606, <16 x i32> %607, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !18
  %609 = or disjoint <16 x i32> %608, %431, !dbg !18
  %610 = icmp slt <16 x i32> %609, %434, !dbg !37
  %611 = extractelement <16 x i1> %610, i64 9, !dbg !18
  %612 = and i1 %53, %611, !dbg !18
  %613 = extractelement <16 x i1> %610, i64 8, !dbg !18
  %614 = and i1 %53, %613, !dbg !18
  %615 = extractelement <16 x i1> %610, i64 15, !dbg !18
  %616 = and i1 %53, %615, !dbg !18
  %617 = extractelement <16 x i1> %610, i64 14, !dbg !18
  %618 = and i1 %53, %617, !dbg !18
  %619 = extractelement <16 x i1> %610, i64 13, !dbg !18
  %620 = and i1 %53, %619, !dbg !18
  %621 = extractelement <16 x i1> %610, i64 12, !dbg !18
  %622 = and i1 %53, %621, !dbg !18
  %623 = extractelement <16 x i1> %610, i64 11, !dbg !18
  %624 = and i1 %53, %623, !dbg !18
  %625 = extractelement <16 x i1> %610, i64 10, !dbg !18
  %626 = and i1 %53, %625, !dbg !18
  %627 = extractelement <16 x i32> %609, i64 8, !dbg !30
  %628 = sext i32 %627 to i64, !dbg !30
  %.idx = shl nsw i64 %628, 7, !dbg !30
  %629 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx, !dbg !30
  %630 = extractelement <16 x i32> %609, i64 9, !dbg !30
  %631 = sext i32 %630 to i64, !dbg !30
  %.idx6 = shl nsw i64 %631, 7, !dbg !30
  %632 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx6, !dbg !30
  %633 = extractelement <16 x i32> %609, i64 10, !dbg !30
  %634 = sext i32 %633 to i64, !dbg !30
  %.idx7 = shl nsw i64 %634, 7, !dbg !30
  %635 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx7, !dbg !30
  %636 = extractelement <16 x i32> %609, i64 11, !dbg !30
  %637 = sext i32 %636 to i64, !dbg !30
  %.idx8 = shl nsw i64 %637, 7, !dbg !30
  %638 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx8, !dbg !30
  %639 = extractelement <16 x i32> %609, i64 12, !dbg !30
  %640 = sext i32 %639 to i64, !dbg !30
  %.idx9 = shl nsw i64 %640, 7, !dbg !30
  %641 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx9, !dbg !30
  %642 = extractelement <16 x i32> %609, i64 13, !dbg !30
  %643 = sext i32 %642 to i64, !dbg !30
  %.idx10 = shl nsw i64 %643, 7, !dbg !30
  %644 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx10, !dbg !30
  %645 = extractelement <16 x i32> %609, i64 14, !dbg !30
  %646 = sext i32 %645 to i64, !dbg !30
  %.idx11 = shl nsw i64 %646, 7, !dbg !30
  %647 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx11, !dbg !30
  %648 = extractelement <16 x i32> %609, i64 15, !dbg !30
  %649 = sext i32 %648 to i64, !dbg !30
  %.idx12 = shl nsw i64 %649, 7, !dbg !30
  %650 = getelementptr i8, ptr addrspace(1) %438, i64 %.idx12, !dbg !30
  %651 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %629, i1 %614) #2, !dbg !30
  %652 = bitcast i32 %651 to float, !dbg !30
  %653 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %632, i1 %612) #2, !dbg !30
  %654 = bitcast i32 %653 to float, !dbg !30
  %655 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %635, i1 %626) #2, !dbg !30
  %656 = bitcast i32 %655 to float, !dbg !30
  %657 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %638, i1 %624) #2, !dbg !30
  %658 = bitcast i32 %657 to float, !dbg !30
  %659 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %641, i1 %622) #2, !dbg !30
  %660 = bitcast i32 %659 to float, !dbg !30
  %661 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %644, i1 %620) #2, !dbg !30
  %662 = bitcast i32 %661 to float, !dbg !30
  %663 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %647, i1 %618) #2, !dbg !30
  %664 = bitcast i32 %663 to float, !dbg !30
  %665 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %650, i1 %616) #2, !dbg !30
  %666 = bitcast i32 %665 to float, !dbg !30
  %667 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 %412) #2, !dbg !30
  %668 = bitcast i32 %667 to float, !dbg !30
  %669 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %442, i1 %407) #2, !dbg !30
  %670 = bitcast i32 %669 to float, !dbg !30
  %671 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 %402) #2, !dbg !30
  %672 = bitcast i32 %671 to float, !dbg !30
  %673 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %444, i1 %397) #2, !dbg !30
  %674 = bitcast i32 %673 to float, !dbg !30
  %675 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 %392) #2, !dbg !30
  %676 = bitcast i32 %675 to float, !dbg !30
  %677 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %446, i1 %387) #2, !dbg !30
  %678 = bitcast i32 %677 to float, !dbg !30
  %679 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %368) #2, !dbg !30
  %680 = bitcast i32 %679 to float, !dbg !30
  %681 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %448, i1 %363) #2, !dbg !30
  %682 = bitcast i32 %681 to float, !dbg !30
  %683 = fsub float %450, %652, !dbg !38
  %684 = fsub float %450, %654, !dbg !38
  %685 = fsub float %452, %652, !dbg !38
  %686 = fsub float %452, %654, !dbg !38
  %687 = fsub float %450, %656, !dbg !38
  %688 = fsub float %450, %658, !dbg !38
  %689 = fsub float %452, %656, !dbg !38
  %690 = fsub float %452, %658, !dbg !38
  %691 = fsub float %450, %660, !dbg !38
  %692 = fsub float %450, %662, !dbg !38
  %693 = fsub float %452, %660, !dbg !38
  %694 = fsub float %452, %662, !dbg !38
  %695 = fsub float %450, %664, !dbg !38
  %696 = fsub float %450, %666, !dbg !38
  %697 = fsub float %452, %664, !dbg !38
  %698 = fsub float %452, %666, !dbg !38
  %699 = fsub float %450, %668, !dbg !38
  %700 = fsub float %450, %670, !dbg !38
  %701 = fsub float %452, %668, !dbg !38
  %702 = fsub float %452, %670, !dbg !38
  %703 = fsub float %450, %672, !dbg !38
  %704 = fsub float %450, %674, !dbg !38
  %705 = fsub float %452, %672, !dbg !38
  %706 = fsub float %452, %674, !dbg !38
  %707 = fsub float %450, %676, !dbg !38
  %708 = fsub float %450, %678, !dbg !38
  %709 = fsub float %452, %676, !dbg !38
  %710 = fsub float %452, %678, !dbg !38
  %711 = fsub float %452, %680, !dbg !38
  %712 = fsub float %452, %682, !dbg !38
  %713 = fmul float %683, 0x3FF7154760000000, !dbg !39
  %714 = tail call float @llvm.nvvm.ex2.approx.f(float %713), !dbg !39
  %715 = fmul float %684, 0x3FF7154760000000, !dbg !39
  %716 = tail call float @llvm.nvvm.ex2.approx.f(float %715), !dbg !39
  %717 = fmul float %685, 0x3FF7154760000000, !dbg !39
  %718 = tail call float @llvm.nvvm.ex2.approx.f(float %717), !dbg !39
  %719 = fmul float %686, 0x3FF7154760000000, !dbg !39
  %720 = tail call float @llvm.nvvm.ex2.approx.f(float %719), !dbg !39
  %721 = fmul float %687, 0x3FF7154760000000, !dbg !39
  %722 = tail call float @llvm.nvvm.ex2.approx.f(float %721), !dbg !39
  %723 = fmul float %688, 0x3FF7154760000000, !dbg !39
  %724 = tail call float @llvm.nvvm.ex2.approx.f(float %723), !dbg !39
  %725 = fmul float %689, 0x3FF7154760000000, !dbg !39
  %726 = tail call float @llvm.nvvm.ex2.approx.f(float %725), !dbg !39
  %727 = fmul float %690, 0x3FF7154760000000, !dbg !39
  %728 = tail call float @llvm.nvvm.ex2.approx.f(float %727), !dbg !39
  %729 = fmul float %691, 0x3FF7154760000000, !dbg !39
  %730 = tail call float @llvm.nvvm.ex2.approx.f(float %729), !dbg !39
  %731 = fmul float %692, 0x3FF7154760000000, !dbg !39
  %732 = tail call float @llvm.nvvm.ex2.approx.f(float %731), !dbg !39
  %733 = fmul float %693, 0x3FF7154760000000, !dbg !39
  %734 = tail call float @llvm.nvvm.ex2.approx.f(float %733), !dbg !39
  %735 = fmul float %694, 0x3FF7154760000000, !dbg !39
  %736 = tail call float @llvm.nvvm.ex2.approx.f(float %735), !dbg !39
  %737 = fmul float %695, 0x3FF7154760000000, !dbg !39
  %738 = tail call float @llvm.nvvm.ex2.approx.f(float %737), !dbg !39
  %739 = fmul float %696, 0x3FF7154760000000, !dbg !39
  %740 = tail call float @llvm.nvvm.ex2.approx.f(float %739), !dbg !39
  %741 = fmul float %697, 0x3FF7154760000000, !dbg !39
  %742 = tail call float @llvm.nvvm.ex2.approx.f(float %741), !dbg !39
  %743 = fmul float %698, 0x3FF7154760000000, !dbg !39
  %744 = tail call float @llvm.nvvm.ex2.approx.f(float %743), !dbg !39
  %745 = fmul float %699, 0x3FF7154760000000, !dbg !39
  %746 = tail call float @llvm.nvvm.ex2.approx.f(float %745), !dbg !39
  %747 = fmul float %700, 0x3FF7154760000000, !dbg !39
  %748 = tail call float @llvm.nvvm.ex2.approx.f(float %747), !dbg !39
  %749 = fmul float %701, 0x3FF7154760000000, !dbg !39
  %750 = tail call float @llvm.nvvm.ex2.approx.f(float %749), !dbg !39
  %751 = fmul float %702, 0x3FF7154760000000, !dbg !39
  %752 = tail call float @llvm.nvvm.ex2.approx.f(float %751), !dbg !39
  %753 = fmul float %703, 0x3FF7154760000000, !dbg !39
  %754 = tail call float @llvm.nvvm.ex2.approx.f(float %753), !dbg !39
  %755 = fmul float %704, 0x3FF7154760000000, !dbg !39
  %756 = tail call float @llvm.nvvm.ex2.approx.f(float %755), !dbg !39
  %757 = fmul float %705, 0x3FF7154760000000, !dbg !39
  %758 = tail call float @llvm.nvvm.ex2.approx.f(float %757), !dbg !39
  %759 = fmul float %706, 0x3FF7154760000000, !dbg !39
  %760 = tail call float @llvm.nvvm.ex2.approx.f(float %759), !dbg !39
  %761 = fmul float %707, 0x3FF7154760000000, !dbg !39
  %762 = tail call float @llvm.nvvm.ex2.approx.f(float %761), !dbg !39
  %763 = fmul float %708, 0x3FF7154760000000, !dbg !39
  %764 = tail call float @llvm.nvvm.ex2.approx.f(float %763), !dbg !39
  %765 = fmul float %709, 0x3FF7154760000000, !dbg !39
  %766 = tail call float @llvm.nvvm.ex2.approx.f(float %765), !dbg !39
  %767 = fmul float %710, 0x3FF7154760000000, !dbg !39
  %768 = tail call float @llvm.nvvm.ex2.approx.f(float %767), !dbg !39
  %769 = fmul float %711, 0x3FF7154760000000, !dbg !39
  %770 = tail call float @llvm.nvvm.ex2.approx.f(float %769), !dbg !39
  %771 = fmul float %712, 0x3FF7154760000000, !dbg !39
  %772 = tail call float @llvm.nvvm.ex2.approx.f(float %771), !dbg !39
  %773 = fmul float %453, %714, !dbg !31
  %774 = fmul float %454, %716, !dbg !31
  %775 = fmul float %455, %718, !dbg !31
  %776 = fmul float %456, %720, !dbg !31
  %777 = fmul float %457, %722, !dbg !31
  %778 = fmul float %458, %724, !dbg !31
  %779 = fmul float %459, %726, !dbg !31
  %780 = fmul float %460, %728, !dbg !31
  %781 = fmul float %461, %730, !dbg !31
  %782 = fmul float %462, %732, !dbg !31
  %783 = fmul float %463, %734, !dbg !31
  %784 = fmul float %464, %736, !dbg !31
  %785 = fmul float %465, %738, !dbg !31
  %786 = fmul float %466, %740, !dbg !31
  %787 = fmul float %467, %742, !dbg !31
  %788 = fmul float %468, %744, !dbg !31
  %789 = fmul float %469, %746, !dbg !31
  %790 = fmul float %470, %748, !dbg !31
  %791 = fmul float %471, %750, !dbg !31
  %792 = fmul float %472, %752, !dbg !31
  %793 = fmul float %473, %754, !dbg !31
  %794 = fmul float %474, %756, !dbg !31
  %795 = fmul float %475, %758, !dbg !31
  %796 = fmul float %476, %760, !dbg !31
  %797 = fmul float %477, %762, !dbg !31
  %798 = fmul float %478, %764, !dbg !31
  %799 = fmul float %479, %766, !dbg !31
  %800 = fmul float %480, %768, !dbg !31
  %801 = fmul float %481, %770, !dbg !31
  %802 = fmul float %482, %772, !dbg !31
  %803 = fmul float %773, %483, !dbg !32
  %804 = fmul float %774, %483, !dbg !32
  %805 = fmul float %775, %484, !dbg !32
  %806 = fmul float %776, %484, !dbg !32
  %807 = fmul float %777, %483, !dbg !32
  %808 = fmul float %778, %483, !dbg !32
  %809 = fmul float %779, %484, !dbg !32
  %810 = fmul float %780, %484, !dbg !32
  %811 = fmul float %781, %483, !dbg !32
  %812 = fmul float %782, %483, !dbg !32
  %813 = fmul float %783, %484, !dbg !32
  %814 = fmul float %784, %484, !dbg !32
  %815 = fmul float %785, %483, !dbg !32
  %816 = fmul float %786, %483, !dbg !32
  %817 = fmul float %787, %484, !dbg !32
  %818 = fmul float %788, %484, !dbg !32
  %819 = fmul float %789, %483, !dbg !32
  %820 = fmul float %790, %483, !dbg !32
  %821 = fmul float %791, %484, !dbg !32
  %822 = fmul float %792, %484, !dbg !32
  %823 = fmul float %793, %483, !dbg !32
  %824 = fmul float %794, %483, !dbg !32
  %825 = fmul float %795, %484, !dbg !32
  %826 = fmul float %796, %484, !dbg !32
  %827 = fmul float %797, %483, !dbg !32
  %828 = fmul float %798, %483, !dbg !32
  %829 = fmul float %799, %484, !dbg !32
  %830 = fmul float %800, %484, !dbg !32
  %831 = fmul float %801, %484, !dbg !32
  %832 = fmul float %802, %484, !dbg !32
  %833 = extractelement <16 x i32> %609, i64 7, !dbg !37
  %834 = sext i32 %833 to i64, !dbg !37
  %.idx21 = shl nsw i64 %834, 13, !dbg !37
  %835 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx21, !dbg !37
  %836 = getelementptr float, ptr addrspace(1) %835, i64 %375, !dbg !37
  %837 = extractelement <16 x i32> %609, i64 6, !dbg !37
  %838 = sext i32 %837 to i64, !dbg !37
  %.idx22 = shl nsw i64 %838, 13, !dbg !37
  %839 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx22, !dbg !37
  %840 = getelementptr float, ptr addrspace(1) %839, i64 %375, !dbg !37
  %841 = extractelement <16 x i32> %609, i64 5, !dbg !37
  %842 = sext i32 %841 to i64, !dbg !37
  %.idx23 = shl nsw i64 %842, 13, !dbg !37
  %843 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx23, !dbg !37
  %844 = getelementptr float, ptr addrspace(1) %843, i64 %375, !dbg !37
  %845 = extractelement <16 x i32> %609, i64 4, !dbg !37
  %846 = sext i32 %845 to i64, !dbg !37
  %.idx24 = shl nsw i64 %846, 13, !dbg !37
  %847 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx24, !dbg !37
  %848 = getelementptr float, ptr addrspace(1) %847, i64 %375, !dbg !37
  %849 = extractelement <16 x i32> %609, i64 3, !dbg !37
  %850 = sext i32 %849 to i64, !dbg !37
  %.idx25 = shl nsw i64 %850, 13, !dbg !37
  %851 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx25, !dbg !37
  %852 = getelementptr float, ptr addrspace(1) %851, i64 %375, !dbg !37
  %853 = extractelement <16 x i32> %609, i64 2, !dbg !37
  %854 = sext i32 %853 to i64, !dbg !37
  %.idx26 = shl nsw i64 %854, 13, !dbg !37
  %855 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx26, !dbg !37
  %856 = getelementptr float, ptr addrspace(1) %855, i64 %375, !dbg !37
  %857 = extractelement <16 x i32> %609, i64 1, !dbg !37
  %858 = sext i32 %857 to i64, !dbg !37
  %.idx27 = shl nsw i64 %858, 13, !dbg !37
  %859 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx27, !dbg !37
  %860 = getelementptr float, ptr addrspace(1) %859, i64 %375, !dbg !37
  %861 = extractelement <16 x i32> %609, i64 0, !dbg !37
  %862 = sext i32 %861 to i64, !dbg !37
  %.idx28 = shl nsw i64 %862, 13, !dbg !37
  %863 = getelementptr i8, ptr addrspace(1) %588, i64 %.idx28, !dbg !37
  %864 = getelementptr float, ptr addrspace(1) %863, i64 %375, !dbg !37
  %865 = extractelement <16 x i1> %610, i64 7, !dbg !37
  %866 = and i1 %53, %865, !dbg !37
  %867 = extractelement <16 x i1> %610, i64 6, !dbg !37
  %868 = and i1 %53, %867, !dbg !37
  %869 = extractelement <16 x i1> %610, i64 5, !dbg !37
  %870 = and i1 %53, %869, !dbg !37
  %871 = extractelement <16 x i1> %610, i64 4, !dbg !37
  %872 = and i1 %53, %871, !dbg !37
  %873 = extractelement <16 x i1> %610, i64 3, !dbg !37
  %874 = and i1 %53, %873, !dbg !37
  %875 = extractelement <16 x i1> %610, i64 2, !dbg !37
  %876 = and i1 %53, %875, !dbg !37
  %877 = extractelement <16 x i1> %610, i64 1, !dbg !37
  %878 = and i1 %53, %877, !dbg !37
  %879 = extractelement <16 x i1> %610, i64 0, !dbg !37
  %880 = and i1 %53, %879, !dbg !37
  %881 = shl nuw nsw i32 %12, 4, !dbg !37
  %882 = and i32 %881, 448, !dbg !37
  %883 = shl nuw nsw i32 %12, 5, !dbg !37
  %884 = and i32 %883, 3072, !dbg !37
  %885 = or disjoint i32 %884, %882, !dbg !37
  %886 = or disjoint i32 %885, %358, !dbg !37
  %887 = and i32 %373, 508, !dbg !37
  %888 = lshr exact i32 %885, 2, !dbg !37
  %889 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %888, !dbg !37
  %890 = getelementptr inbounds nuw float, ptr addrspace(3) %889, i32 %886, !dbg !37
  %891 = bitcast float %803 to i32, !dbg !37
  %892 = select i1 %519, i32 %891, i32 0, !dbg !40
  %893 = bitcast float %804 to i32, !dbg !37
  %894 = select i1 %521, i32 %893, i32 0, !dbg !40
  %895 = insertelement <2 x i32> poison, i32 %892, i64 0, !dbg !37
  %896 = insertelement <2 x i32> %895, i32 %894, i64 1, !dbg !37
  store <2 x i32> %896, ptr addrspace(3) %890, align 8, !dbg !37
  %897 = or disjoint i32 %886, 512, !dbg !37
  %898 = lshr i32 %897, 4, !dbg !37
  %899 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %898, !dbg !37
  %900 = getelementptr inbounds nuw float, ptr addrspace(3) %899, i32 %897, !dbg !37
  %901 = bitcast float %805 to i32, !dbg !37
  %902 = select i1 %514, i32 %901, i32 0, !dbg !40
  %903 = bitcast float %806 to i32, !dbg !37
  %904 = select i1 %516, i32 %903, i32 0, !dbg !40
  %905 = insertelement <2 x i32> poison, i32 %902, i64 0, !dbg !37
  %906 = insertelement <2 x i32> %905, i32 %904, i64 1, !dbg !37
  store <2 x i32> %906, ptr addrspace(3) %900, align 8, !dbg !37
  %907 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 32, !dbg !37
  %908 = bitcast float %807 to i32, !dbg !37
  %909 = select i1 %524, i32 %908, i32 0, !dbg !40
  %910 = bitcast float %808 to i32, !dbg !37
  %911 = select i1 %527, i32 %910, i32 0, !dbg !40
  %912 = insertelement <2 x i32> poison, i32 %909, i64 0, !dbg !37
  %913 = insertelement <2 x i32> %912, i32 %911, i64 1, !dbg !37
  store <2 x i32> %913, ptr addrspace(3) %907, align 8, !dbg !37
  %914 = or disjoint i32 %886, 520, !dbg !37
  %915 = lshr i32 %914, 4, !dbg !37
  %916 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %915, !dbg !37
  %917 = getelementptr inbounds nuw float, ptr addrspace(3) %916, i32 %914, !dbg !37
  %918 = bitcast float %809 to i32, !dbg !37
  %919 = select i1 %529, i32 %918, i32 0, !dbg !40
  %920 = bitcast float %810 to i32, !dbg !37
  %921 = select i1 %531, i32 %920, i32 0, !dbg !40
  %922 = insertelement <2 x i32> poison, i32 %919, i64 0, !dbg !37
  %923 = insertelement <2 x i32> %922, i32 %921, i64 1, !dbg !37
  store <2 x i32> %923, ptr addrspace(3) %917, align 8, !dbg !37
  %924 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 64, !dbg !37
  %925 = bitcast float %811 to i32, !dbg !37
  %926 = select i1 %534, i32 %925, i32 0, !dbg !40
  %927 = bitcast float %812 to i32, !dbg !37
  %928 = select i1 %537, i32 %927, i32 0, !dbg !40
  %929 = insertelement <2 x i32> poison, i32 %926, i64 0, !dbg !37
  %930 = insertelement <2 x i32> %929, i32 %928, i64 1, !dbg !37
  store <2 x i32> %930, ptr addrspace(3) %924, align 8, !dbg !37
  %931 = or disjoint i32 %886, 528, !dbg !37
  %932 = lshr i32 %931, 4, !dbg !37
  %933 = and i32 %932, 252, !dbg !37
  %934 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %933, !dbg !37
  %935 = getelementptr inbounds nuw float, ptr addrspace(3) %934, i32 %931, !dbg !37
  %936 = bitcast float %813 to i32, !dbg !37
  %937 = select i1 %539, i32 %936, i32 0, !dbg !40
  %938 = bitcast float %814 to i32, !dbg !37
  %939 = select i1 %541, i32 %938, i32 0, !dbg !40
  %940 = insertelement <2 x i32> poison, i32 %937, i64 0, !dbg !37
  %941 = insertelement <2 x i32> %940, i32 %939, i64 1, !dbg !37
  store <2 x i32> %941, ptr addrspace(3) %935, align 8, !dbg !37
  %942 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 96, !dbg !37
  %943 = bitcast float %815 to i32, !dbg !37
  %944 = select i1 %544, i32 %943, i32 0, !dbg !40
  %945 = bitcast float %816 to i32, !dbg !37
  %946 = select i1 %547, i32 %945, i32 0, !dbg !40
  %947 = insertelement <2 x i32> poison, i32 %944, i64 0, !dbg !37
  %948 = insertelement <2 x i32> %947, i32 %946, i64 1, !dbg !37
  store <2 x i32> %948, ptr addrspace(3) %942, align 8, !dbg !37
  %949 = or disjoint i32 %886, 536, !dbg !37
  %950 = lshr i32 %949, 4, !dbg !37
  %951 = and i32 %950, 252, !dbg !37
  %952 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %951, !dbg !37
  %953 = getelementptr inbounds nuw float, ptr addrspace(3) %952, i32 %949, !dbg !37
  %954 = bitcast float %817 to i32, !dbg !37
  %955 = select i1 %549, i32 %954, i32 0, !dbg !40
  %956 = bitcast float %818 to i32, !dbg !37
  %957 = select i1 %551, i32 %956, i32 0, !dbg !40
  %958 = insertelement <2 x i32> poison, i32 %955, i64 0, !dbg !37
  %959 = insertelement <2 x i32> %958, i32 %957, i64 1, !dbg !37
  store <2 x i32> %959, ptr addrspace(3) %953, align 8, !dbg !37
  %960 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 128, !dbg !37
  %961 = bitcast float %819 to i32, !dbg !37
  %962 = select i1 %554, i32 %961, i32 0, !dbg !40
  %963 = bitcast float %820 to i32, !dbg !37
  %964 = select i1 %557, i32 %963, i32 0, !dbg !40
  %965 = insertelement <2 x i32> poison, i32 %962, i64 0, !dbg !37
  %966 = insertelement <2 x i32> %965, i32 %964, i64 1, !dbg !37
  store <2 x i32> %966, ptr addrspace(3) %960, align 8, !dbg !37
  %967 = or disjoint i32 %886, 544, !dbg !37
  %968 = lshr i32 %967, 4, !dbg !37
  %969 = and i32 %968, 252, !dbg !37
  %970 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %969, !dbg !37
  %971 = getelementptr inbounds nuw float, ptr addrspace(3) %970, i32 %967, !dbg !37
  %972 = bitcast float %821 to i32, !dbg !37
  %973 = select i1 %559, i32 %972, i32 0, !dbg !40
  %974 = bitcast float %822 to i32, !dbg !37
  %975 = select i1 %561, i32 %974, i32 0, !dbg !40
  %976 = insertelement <2 x i32> poison, i32 %973, i64 0, !dbg !37
  %977 = insertelement <2 x i32> %976, i32 %975, i64 1, !dbg !37
  store <2 x i32> %977, ptr addrspace(3) %971, align 8, !dbg !37
  %978 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 160, !dbg !37
  %979 = bitcast float %823 to i32, !dbg !37
  %980 = select i1 %564, i32 %979, i32 0, !dbg !40
  %981 = bitcast float %824 to i32, !dbg !37
  %982 = select i1 %567, i32 %981, i32 0, !dbg !40
  %983 = insertelement <2 x i32> poison, i32 %980, i64 0, !dbg !37
  %984 = insertelement <2 x i32> %983, i32 %982, i64 1, !dbg !37
  store <2 x i32> %984, ptr addrspace(3) %978, align 8, !dbg !37
  %985 = or disjoint i32 %886, 552, !dbg !37
  %986 = lshr i32 %985, 4, !dbg !37
  %987 = and i32 %986, 252, !dbg !37
  %988 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %987, !dbg !37
  %989 = getelementptr inbounds nuw float, ptr addrspace(3) %988, i32 %985, !dbg !37
  %990 = bitcast float %825 to i32, !dbg !37
  %991 = select i1 %569, i32 %990, i32 0, !dbg !40
  %992 = bitcast float %826 to i32, !dbg !37
  %993 = select i1 %571, i32 %992, i32 0, !dbg !40
  %994 = insertelement <2 x i32> poison, i32 %991, i64 0, !dbg !37
  %995 = insertelement <2 x i32> %994, i32 %993, i64 1, !dbg !37
  store <2 x i32> %995, ptr addrspace(3) %989, align 8, !dbg !37
  %996 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 192, !dbg !37
  %997 = bitcast float %827 to i32, !dbg !37
  %998 = select i1 %574, i32 %997, i32 0, !dbg !40
  %999 = bitcast float %828 to i32, !dbg !37
  %1000 = select i1 %577, i32 %999, i32 0, !dbg !40
  %1001 = insertelement <2 x i32> poison, i32 %998, i64 0, !dbg !37
  %1002 = insertelement <2 x i32> %1001, i32 %1000, i64 1, !dbg !37
  store <2 x i32> %1002, ptr addrspace(3) %996, align 8, !dbg !37
  %1003 = or disjoint i32 %886, 560, !dbg !37
  %1004 = lshr i32 %1003, 4, !dbg !37
  %1005 = and i32 %1004, 252, !dbg !37
  %1006 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1005, !dbg !37
  %1007 = getelementptr inbounds nuw float, ptr addrspace(3) %1006, i32 %1003, !dbg !37
  %1008 = bitcast float %829 to i32, !dbg !37
  %1009 = select i1 %579, i32 %1008, i32 0, !dbg !40
  %1010 = bitcast float %830 to i32, !dbg !37
  %1011 = select i1 %581, i32 %1010, i32 0, !dbg !40
  %1012 = insertelement <2 x i32> poison, i32 %1009, i64 0, !dbg !37
  %1013 = insertelement <2 x i32> %1012, i32 %1011, i64 1, !dbg !37
  store <2 x i32> %1013, ptr addrspace(3) %1007, align 8, !dbg !37
  %1014 = getelementptr inbounds nuw i8, ptr addrspace(3) %890, i32 224, !dbg !37
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1014, align 8, !dbg !37
  %1015 = or disjoint i32 %886, 568, !dbg !37
  %1016 = lshr i32 %1015, 4, !dbg !37
  %1017 = and i32 %1016, 252, !dbg !37
  %1018 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1017, !dbg !37
  %1019 = getelementptr inbounds nuw float, ptr addrspace(3) %1018, i32 %1015, !dbg !37
  %1020 = bitcast float %831 to i32, !dbg !37
  %1021 = select i1 %583, i32 %1020, i32 0, !dbg !40
  %1022 = bitcast float %832 to i32, !dbg !37
  %1023 = select i1 %585, i32 %1022, i32 0, !dbg !40
  %1024 = insertelement <2 x i32> poison, i32 %1021, i64 0, !dbg !37
  %1025 = insertelement <2 x i32> %1024, i32 %1023, i64 1, !dbg !37
  store <2 x i32> %1025, ptr addrspace(3) %1019, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %1026 = and i32 %21, 28, !dbg !37
  %1027 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1026, !dbg !37
  %1028 = getelementptr inbounds nuw float, ptr addrspace(3) %1027, i32 %887, !dbg !37
  %1029 = load <4 x i32>, ptr addrspace(3) %1028, align 16, !dbg !37
  %1030 = or disjoint i32 %887, 512, !dbg !37
  %1031 = lshr i32 %1030, 4, !dbg !37
  %1032 = and i32 %1031, 60, !dbg !37
  %1033 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1032, !dbg !37
  %1034 = getelementptr inbounds nuw float, ptr addrspace(3) %1033, i32 %1030, !dbg !37
  %1035 = load <4 x i32>, ptr addrspace(3) %1034, align 16, !dbg !37
  %1036 = or disjoint i32 %887, 1024, !dbg !37
  %1037 = lshr i32 %1036, 4, !dbg !37
  %1038 = and i32 %1037, 92, !dbg !37
  %1039 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1038, !dbg !37
  %1040 = getelementptr inbounds nuw float, ptr addrspace(3) %1039, i32 %1036, !dbg !37
  %1041 = load <4 x i32>, ptr addrspace(3) %1040, align 16, !dbg !37
  %1042 = or disjoint i32 %887, 1536, !dbg !37
  %1043 = lshr i32 %1042, 4, !dbg !37
  %1044 = and i32 %1043, 124, !dbg !37
  %1045 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1044, !dbg !37
  %1046 = getelementptr inbounds nuw float, ptr addrspace(3) %1045, i32 %1042, !dbg !37
  %1047 = load <4 x i32>, ptr addrspace(3) %1046, align 16, !dbg !37
  %1048 = or disjoint i32 %887, 2048, !dbg !37
  %1049 = lshr i32 %1048, 4, !dbg !37
  %1050 = and i32 %1049, 156, !dbg !37
  %1051 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1050, !dbg !37
  %1052 = getelementptr inbounds nuw float, ptr addrspace(3) %1051, i32 %1048, !dbg !37
  %1053 = load <4 x i32>, ptr addrspace(3) %1052, align 16, !dbg !37
  %1054 = or disjoint i32 %887, 2560, !dbg !37
  %1055 = lshr i32 %1054, 4, !dbg !37
  %1056 = and i32 %1055, 188, !dbg !37
  %1057 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1056, !dbg !37
  %1058 = getelementptr inbounds nuw float, ptr addrspace(3) %1057, i32 %1054, !dbg !37
  %1059 = load <4 x i32>, ptr addrspace(3) %1058, align 16, !dbg !37
  %1060 = or disjoint i32 %887, 3072, !dbg !37
  %1061 = lshr i32 %1060, 4, !dbg !37
  %1062 = and i32 %1061, 220, !dbg !37
  %1063 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1062, !dbg !37
  %1064 = getelementptr inbounds nuw float, ptr addrspace(3) %1063, i32 %1060, !dbg !37
  %1065 = load <4 x i32>, ptr addrspace(3) %1064, align 16, !dbg !37
  %1066 = or i32 %373, 3584, !dbg !37
  %1067 = lshr i32 %1066, 4, !dbg !37
  %1068 = and i32 %1067, 252, !dbg !37
  %1069 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1068, !dbg !37
  %1070 = getelementptr inbounds nuw float, ptr addrspace(3) %1069, i32 %1066, !dbg !37
  %1071 = load <4 x i32>, ptr addrspace(3) %1070, align 16, !dbg !37
  %.extract = extractelement <4 x i32> %1029, i64 0, !dbg !37
  %.extract60 = extractelement <4 x i32> %1029, i64 1, !dbg !37
  %.extract61 = extractelement <4 x i32> %1029, i64 2, !dbg !37
  %.extract62 = extractelement <4 x i32> %1029, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract60, i32 %.extract61, i32 %.extract62, ptr addrspace(1) %836, i1 %866) #2, !dbg !37
  %.extract63 = extractelement <4 x i32> %1035, i64 0, !dbg !37
  %.extract64 = extractelement <4 x i32> %1035, i64 1, !dbg !37
  %.extract65 = extractelement <4 x i32> %1035, i64 2, !dbg !37
  %.extract66 = extractelement <4 x i32> %1035, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract63, i32 %.extract64, i32 %.extract65, i32 %.extract66, ptr addrspace(1) %840, i1 %868) #2, !dbg !37
  %.extract67 = extractelement <4 x i32> %1041, i64 0, !dbg !37
  %.extract68 = extractelement <4 x i32> %1041, i64 1, !dbg !37
  %.extract69 = extractelement <4 x i32> %1041, i64 2, !dbg !37
  %.extract70 = extractelement <4 x i32> %1041, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract67, i32 %.extract68, i32 %.extract69, i32 %.extract70, ptr addrspace(1) %844, i1 %870) #2, !dbg !37
  %.extract71 = extractelement <4 x i32> %1047, i64 0, !dbg !37
  %.extract72 = extractelement <4 x i32> %1047, i64 1, !dbg !37
  %.extract73 = extractelement <4 x i32> %1047, i64 2, !dbg !37
  %.extract74 = extractelement <4 x i32> %1047, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract72, i32 %.extract73, i32 %.extract74, ptr addrspace(1) %848, i1 %872) #2, !dbg !37
  %.extract75 = extractelement <4 x i32> %1053, i64 0, !dbg !37
  %.extract76 = extractelement <4 x i32> %1053, i64 1, !dbg !37
  %.extract77 = extractelement <4 x i32> %1053, i64 2, !dbg !37
  %.extract78 = extractelement <4 x i32> %1053, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract75, i32 %.extract76, i32 %.extract77, i32 %.extract78, ptr addrspace(1) %852, i1 %874) #2, !dbg !37
  %.extract79 = extractelement <4 x i32> %1059, i64 0, !dbg !37
  %.extract80 = extractelement <4 x i32> %1059, i64 1, !dbg !37
  %.extract81 = extractelement <4 x i32> %1059, i64 2, !dbg !37
  %.extract82 = extractelement <4 x i32> %1059, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract79, i32 %.extract80, i32 %.extract81, i32 %.extract82, ptr addrspace(1) %856, i1 %876) #2, !dbg !37
  %.extract83 = extractelement <4 x i32> %1065, i64 0, !dbg !37
  %.extract84 = extractelement <4 x i32> %1065, i64 1, !dbg !37
  %.extract85 = extractelement <4 x i32> %1065, i64 2, !dbg !37
  %.extract86 = extractelement <4 x i32> %1065, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract83, i32 %.extract84, i32 %.extract85, i32 %.extract86, ptr addrspace(1) %860, i1 %878) #2, !dbg !37
  %.extract87 = extractelement <4 x i32> %1071, i64 0, !dbg !37
  %.extract88 = extractelement <4 x i32> %1071, i64 1, !dbg !37
  %.extract89 = extractelement <4 x i32> %1071, i64 2, !dbg !37
  %.extract90 = extractelement <4 x i32> %1071, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract87, i32 %.extract88, i32 %.extract89, i32 %.extract90, ptr addrspace(1) %864, i1 %880) #2, !dbg !37
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 51, column: 21, scope: !5)
!26 = !DILocation(line: 52, column: 16, scope: !5)
!27 = !DILocation(line: 70, column: 26, scope: !5)
!28 = !DILocation(line: 64, column: 36, scope: !5)
!29 = !DILocation(line: 64, column: 44, scope: !5)
!30 = !DILocation(line: 65, column: 22, scope: !5)
!31 = !DILocation(line: 67, column: 15, scope: !5)
!32 = !DILocation(line: 68, column: 11, scope: !5)
!33 = !DILocation(line: 70, column: 43, scope: !5)
!34 = !DILocation(line: 70, column: 58, scope: !5)
!35 = !DILocation(line: 72, column: 48, scope: !5)
!36 = !DILocation(line: 72, column: 32, scope: !5)
!37 = !DILocation(line: 73, column: 18, scope: !5)
!38 = !DILocation(line: 66, column: 34, scope: !5)
!39 = !DILocation(line: 67, column: 19, scope: !5)
!40 = !DILocation(line: 71, column: 29, scope: !5)
!41 = !DILocation(line: 73, column: 4, scope: !5)
