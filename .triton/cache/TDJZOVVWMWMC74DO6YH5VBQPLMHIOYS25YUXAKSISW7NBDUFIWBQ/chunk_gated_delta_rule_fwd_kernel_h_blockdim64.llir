; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 31, !dbg !10
  %13 = add i32 %7, 63, !dbg !11
  %14 = sdiv i32 %13, 64, !dbg !15
  %15 = shl nuw nsw i32 %11, 14, !dbg !16
  %16 = and i32 %15, 1073217536, !dbg !16
  %17 = mul i32 %16, %14, !dbg !17
  %18 = shl nuw nsw i32 %12, 14, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr bfloat, ptr addrspace(1) %5, i64 %20, !dbg !18
  %22 = and i32 %11, 65504, !dbg !19
  %23 = mul i32 %22, %7, !dbg !20
  %24 = or disjoint i32 %23, %12, !dbg !21
  %25 = shl i32 %24, 7, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr bfloat, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = getelementptr bfloat, ptr addrspace(1) %0, i64 %26, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %2, i64 %26, !dbg !25
  %30 = getelementptr bfloat, ptr addrspace(1) %3, i64 %26, !dbg !26
  %31 = shl i32 %10, 6, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %34 = and i32 %33, 8, !dbg !29
  %35 = and i32 %33, 16, !dbg !29
  %36 = and i32 %33, 32, !dbg !29
  %37 = lshr i32 %33, 3, !dbg !29
  %38 = and i32 %37, 7, !dbg !29
  %39 = or disjoint i32 %38, 8, !dbg !29
  %40 = or disjoint i32 %38, 16, !dbg !29
  %41 = or disjoint i32 %38, 24, !dbg !29
  %42 = or disjoint i32 %38, 32, !dbg !29
  %43 = or disjoint i32 %38, 40, !dbg !29
  %44 = or disjoint i32 %38, 48, !dbg !29
  %45 = or disjoint i32 %38, 56, !dbg !29
  %46 = and i32 %33, 4, !dbg !29
  %47 = shl nuw nsw i32 %33, 3, !dbg !29
  %48 = and i32 %47, 56, !dbg !29
  %49 = lshr i32 %33, 2, !dbg !29
  %50 = and i32 %49, 7, !dbg !29
  %51 = lshr exact i32 %36, 1, !dbg !29
  %52 = or disjoint i32 %50, %51, !dbg !29
  %53 = or disjoint i32 %52, 8, !dbg !29
  %54 = or disjoint i32 %52, 32, !dbg !29
  %55 = or disjoint i32 %52, 40, !dbg !29
  %56 = and i32 %33, 63, !dbg !29
  %57 = zext nneg i32 %38 to i64, !dbg !29
  %58 = zext nneg i32 %39 to i64, !dbg !29
  %59 = zext nneg i32 %40 to i64, !dbg !29
  %60 = zext nneg i32 %41 to i64, !dbg !29
  %61 = zext nneg i32 %42 to i64, !dbg !29
  %62 = zext nneg i32 %43 to i64, !dbg !29
  %63 = zext nneg i32 %44 to i64, !dbg !29
  %64 = zext nneg i32 %45 to i64, !dbg !29
  %65 = zext nneg i32 %48 to i64, !dbg !29
  %66 = zext nneg i32 %56 to i64, !dbg !29
  %67 = or disjoint i64 %65, %32, !dbg !29
  %68 = icmp sgt i32 %31, -1, !dbg !29
  %69 = icmp slt i64 %67, 128, !dbg !29
  %70 = and i1 %68, %69, !dbg !29
  %71 = or disjoint i64 %57, 64, !dbg !30
  %72 = or disjoint i64 %58, 64, !dbg !30
  %73 = or disjoint i64 %59, 64, !dbg !30
  %74 = or disjoint i64 %60, 64, !dbg !30
  %75 = or disjoint i64 %61, 64, !dbg !30
  %76 = or disjoint i64 %62, 64, !dbg !30
  %77 = or disjoint i64 %63, 64, !dbg !30
  %78 = or disjoint i64 %64, 64, !dbg !30
  %79 = or disjoint i64 %65, 64, !dbg !30
  %80 = sext i32 %7 to i64, !dbg !31
  %81 = sext i32 %23 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !32
  %83 = zext nneg i32 %12 to i64, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %82, i64 %83, !dbg !33
  %85 = icmp sgt i32 %13, 63, !dbg !34
  %86 = shl nuw nsw i64 %57, 12, !dbg !35
  %87 = shl nuw nsw i64 %58, 12, !dbg !35
  %88 = shl nuw nsw i64 %59, 12, !dbg !35
  %89 = shl nuw nsw i64 %60, 12, !dbg !35
  %90 = shl nuw nsw i64 %61, 12, !dbg !35
  %91 = shl nuw nsw i64 %62, 12, !dbg !35
  %92 = shl nuw nsw i64 %63, 12, !dbg !35
  %93 = shl nuw nsw i64 %64, 12, !dbg !35
  %94 = or disjoint i64 %86, %65, !dbg !35
  %95 = or disjoint i64 %87, %65, !dbg !35
  %96 = or disjoint i64 %88, %65, !dbg !35
  %97 = or disjoint i64 %89, %65, !dbg !35
  %98 = or disjoint i64 %90, %65, !dbg !35
  %99 = or disjoint i64 %91, %65, !dbg !35
  %100 = or disjoint i64 %92, %65, !dbg !35
  %101 = or disjoint i64 %93, %65, !dbg !35
  %102 = getelementptr bfloat, ptr addrspace(1) %29, i64 %94, !dbg !35
  %103 = getelementptr bfloat, ptr addrspace(1) %29, i64 %95, !dbg !35
  %104 = getelementptr bfloat, ptr addrspace(1) %29, i64 %96, !dbg !35
  %105 = getelementptr bfloat, ptr addrspace(1) %29, i64 %97, !dbg !35
  %106 = getelementptr bfloat, ptr addrspace(1) %29, i64 %98, !dbg !35
  %107 = getelementptr bfloat, ptr addrspace(1) %29, i64 %99, !dbg !35
  %108 = getelementptr bfloat, ptr addrspace(1) %29, i64 %100, !dbg !35
  %109 = getelementptr bfloat, ptr addrspace(1) %29, i64 %101, !dbg !35
  %110 = icmp slt i32 %38, %7, !dbg !35
  %111 = icmp slt i32 %39, %7, !dbg !35
  %112 = icmp slt i32 %40, %7, !dbg !35
  %113 = icmp slt i32 %41, %7, !dbg !35
  %114 = icmp slt i32 %42, %7, !dbg !35
  %115 = icmp slt i32 %43, %7, !dbg !35
  %116 = icmp slt i32 %44, %7, !dbg !35
  %117 = icmp slt i32 %45, %7, !dbg !35
  %118 = and i1 %110, %85, !dbg !34
  %119 = and i1 %111, %85, !dbg !34
  %120 = and i1 %112, %85, !dbg !34
  %121 = and i1 %113, %85, !dbg !34
  %122 = and i1 %114, %85, !dbg !34
  %123 = and i1 %115, %85, !dbg !34
  %124 = and i1 %116, %85, !dbg !34
  %125 = and i1 %117, %85, !dbg !34
  %126 = xor i32 %47, %33, !dbg !35
  %127 = and i32 %126, 56, !dbg !35
  %128 = shl nuw nsw i32 %38, 6, !dbg !35
  %129 = or disjoint i32 %127, %128, !dbg !35
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %129, !dbg !35
  %131 = or disjoint i32 %129, 512, !dbg !35
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %131, !dbg !35
  %133 = or disjoint i32 %129, 1024, !dbg !35
  %134 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %133, !dbg !35
  %135 = or disjoint i32 %129, 1536, !dbg !35
  %136 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %135, !dbg !35
  %137 = or disjoint i32 %129, 2048, !dbg !35
  %138 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %137, !dbg !35
  %139 = or disjoint i32 %129, 2560, !dbg !35
  %140 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139, !dbg !35
  %141 = or disjoint i32 %129, 3072, !dbg !35
  %142 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %141, !dbg !35
  %143 = or disjoint i32 %129, 3584, !dbg !35
  %144 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %143, !dbg !35
  %145 = select i1 %118, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %130, ptr addrspace(1) %102, i32 %145) #2, !dbg !35
  %146 = select i1 %119, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %132, ptr addrspace(1) %103, i32 %146) #2, !dbg !35
  %147 = select i1 %120, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %134, ptr addrspace(1) %104, i32 %147) #2, !dbg !35
  %148 = select i1 %121, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %136, ptr addrspace(1) %105, i32 %148) #2, !dbg !35
  %149 = select i1 %122, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %138, ptr addrspace(1) %106, i32 %149) #2, !dbg !35
  %150 = select i1 %123, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %140, ptr addrspace(1) %107, i32 %150) #2, !dbg !35
  %151 = select i1 %124, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %142, ptr addrspace(1) %108, i32 %151) #2, !dbg !35
  %152 = select i1 %125, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %144, ptr addrspace(1) %109, i32 %152) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %153 = or disjoint i64 %86, %79, !dbg !36
  %154 = or disjoint i64 %87, %79, !dbg !36
  %155 = or disjoint i64 %88, %79, !dbg !36
  %156 = or disjoint i64 %89, %79, !dbg !36
  %157 = or disjoint i64 %90, %79, !dbg !36
  %158 = or disjoint i64 %91, %79, !dbg !36
  %159 = or disjoint i64 %92, %79, !dbg !36
  %160 = or disjoint i64 %93, %79, !dbg !36
  %161 = getelementptr bfloat, ptr addrspace(1) %29, i64 %153, !dbg !36
  %162 = getelementptr bfloat, ptr addrspace(1) %29, i64 %154, !dbg !36
  %163 = getelementptr bfloat, ptr addrspace(1) %29, i64 %155, !dbg !36
  %164 = getelementptr bfloat, ptr addrspace(1) %29, i64 %156, !dbg !36
  %165 = getelementptr bfloat, ptr addrspace(1) %29, i64 %157, !dbg !36
  %166 = getelementptr bfloat, ptr addrspace(1) %29, i64 %158, !dbg !36
  %167 = getelementptr bfloat, ptr addrspace(1) %29, i64 %159, !dbg !36
  %168 = getelementptr bfloat, ptr addrspace(1) %29, i64 %160, !dbg !36
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %129, !dbg !36
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %131, !dbg !36
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %133, !dbg !36
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %135, !dbg !36
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %137, !dbg !36
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %139, !dbg !36
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %141, !dbg !36
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %169, ptr addrspace(1) %161, i32 %145) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %170, ptr addrspace(1) %162, i32 %146) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %171, ptr addrspace(1) %163, i32 %147) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %172, ptr addrspace(1) %164, i32 %148) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %173, ptr addrspace(1) %165, i32 %149) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %174, ptr addrspace(1) %166, i32 %150) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %175, ptr addrspace(1) %167, i32 %151) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %176, ptr addrspace(1) %168, i32 %152) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %177 = add nsw i64 %86, %67, !dbg !37
  %178 = add nsw i64 %87, %67, !dbg !37
  %179 = add nsw i64 %88, %67, !dbg !37
  %180 = add nsw i64 %89, %67, !dbg !37
  %181 = add nsw i64 %90, %67, !dbg !37
  %182 = add nsw i64 %91, %67, !dbg !37
  %183 = add nsw i64 %92, %67, !dbg !37
  %184 = add nsw i64 %93, %67, !dbg !37
  %185 = getelementptr bfloat, ptr addrspace(1) %27, i64 %177, !dbg !37
  %186 = getelementptr bfloat, ptr addrspace(1) %27, i64 %178, !dbg !37
  %187 = getelementptr bfloat, ptr addrspace(1) %27, i64 %179, !dbg !37
  %188 = getelementptr bfloat, ptr addrspace(1) %27, i64 %180, !dbg !37
  %189 = getelementptr bfloat, ptr addrspace(1) %27, i64 %181, !dbg !37
  %190 = getelementptr bfloat, ptr addrspace(1) %27, i64 %182, !dbg !37
  %191 = getelementptr bfloat, ptr addrspace(1) %27, i64 %183, !dbg !37
  %192 = getelementptr bfloat, ptr addrspace(1) %27, i64 %184, !dbg !37
  %193 = and i1 %70, %110, !dbg !37
  %194 = and i1 %70, %111, !dbg !37
  %195 = and i1 %70, %112, !dbg !37
  %196 = and i1 %70, %113, !dbg !37
  %197 = and i1 %70, %114, !dbg !37
  %198 = and i1 %70, %115, !dbg !37
  %199 = and i1 %70, %116, !dbg !37
  %200 = and i1 %70, %117, !dbg !37
  %201 = and i1 %85, %193, !dbg !34
  %202 = and i1 %85, %194, !dbg !34
  %203 = and i1 %85, %195, !dbg !34
  %204 = and i1 %85, %196, !dbg !34
  %205 = and i1 %85, %197, !dbg !34
  %206 = and i1 %85, %198, !dbg !34
  %207 = and i1 %85, %199, !dbg !34
  %208 = and i1 %85, %200, !dbg !34
  %209 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %129, !dbg !37
  %210 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %131, !dbg !37
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %133, !dbg !37
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %135, !dbg !37
  %213 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %137, !dbg !37
  %214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %139, !dbg !37
  %215 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %141, !dbg !37
  %216 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %143, !dbg !37
  %217 = select i1 %201, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %209, ptr addrspace(1) %185, i32 %217) #2, !dbg !37
  %218 = select i1 %202, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %210, ptr addrspace(1) %186, i32 %218) #2, !dbg !37
  %219 = select i1 %203, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %211, ptr addrspace(1) %187, i32 %219) #2, !dbg !37
  %220 = select i1 %204, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %212, ptr addrspace(1) %188, i32 %220) #2, !dbg !37
  %221 = select i1 %205, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %213, ptr addrspace(1) %189, i32 %221) #2, !dbg !37
  %222 = select i1 %206, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %214, ptr addrspace(1) %190, i32 %222) #2, !dbg !37
  %223 = select i1 %207, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %215, ptr addrspace(1) %191, i32 %223) #2, !dbg !37
  %224 = select i1 %208, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %216, ptr addrspace(1) %192, i32 %224) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx = shl nuw nsw i64 %66, 7, !dbg !38
  %225 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx, !dbg !38
  %226 = icmp slt i32 %56, %7, !dbg !38
  %227 = and i1 %226, %85, !dbg !34
  %228 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102912), i32 %56, !dbg !38
  %229 = select i1 %227, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %228, ptr addrspace(1) %225, i32 %229) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %230 = getelementptr bfloat, ptr addrspace(1) %28, i64 %94, !dbg !39
  %231 = getelementptr bfloat, ptr addrspace(1) %28, i64 %95, !dbg !39
  %232 = getelementptr bfloat, ptr addrspace(1) %28, i64 %96, !dbg !39
  %233 = getelementptr bfloat, ptr addrspace(1) %28, i64 %97, !dbg !39
  %234 = getelementptr bfloat, ptr addrspace(1) %28, i64 %98, !dbg !39
  %235 = getelementptr bfloat, ptr addrspace(1) %28, i64 %99, !dbg !39
  %236 = getelementptr bfloat, ptr addrspace(1) %28, i64 %100, !dbg !39
  %237 = getelementptr bfloat, ptr addrspace(1) %28, i64 %101, !dbg !39
  %238 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %129, !dbg !39
  %239 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %131, !dbg !39
  %240 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %133, !dbg !39
  %241 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %135, !dbg !39
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %137, !dbg !39
  %243 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %139, !dbg !39
  %244 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %141, !dbg !39
  %245 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %238, ptr addrspace(1) %230, i32 %145) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %239, ptr addrspace(1) %231, i32 %146) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %240, ptr addrspace(1) %232, i32 %147) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %241, ptr addrspace(1) %233, i32 %148) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %242, ptr addrspace(1) %234, i32 %149) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %243, ptr addrspace(1) %235, i32 %150) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %244, ptr addrspace(1) %236, i32 %151) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %245, ptr addrspace(1) %237, i32 %152) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %246 = getelementptr bfloat, ptr addrspace(1) %28, i64 %153, !dbg !40
  %247 = getelementptr bfloat, ptr addrspace(1) %28, i64 %154, !dbg !40
  %248 = getelementptr bfloat, ptr addrspace(1) %28, i64 %155, !dbg !40
  %249 = getelementptr bfloat, ptr addrspace(1) %28, i64 %156, !dbg !40
  %250 = getelementptr bfloat, ptr addrspace(1) %28, i64 %157, !dbg !40
  %251 = getelementptr bfloat, ptr addrspace(1) %28, i64 %158, !dbg !40
  %252 = getelementptr bfloat, ptr addrspace(1) %28, i64 %159, !dbg !40
  %253 = getelementptr bfloat, ptr addrspace(1) %28, i64 %160, !dbg !40
  %254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %129, !dbg !40
  %255 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %131, !dbg !40
  %256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %133, !dbg !40
  %257 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %135, !dbg !40
  %258 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %137, !dbg !40
  %259 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %139, !dbg !40
  %260 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %141, !dbg !40
  %261 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %254, ptr addrspace(1) %246, i32 %145) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %255, ptr addrspace(1) %247, i32 %146) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %256, ptr addrspace(1) %248, i32 %147) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %257, ptr addrspace(1) %249, i32 %148) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %258, ptr addrspace(1) %250, i32 %149) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %259, ptr addrspace(1) %251, i32 %150) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %260, ptr addrspace(1) %252, i32 %151) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %261, ptr addrspace(1) %253, i32 %152) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %262 = icmp sgt i32 %13, 127, !dbg !34
  %263 = or disjoint i64 %66, 64, !dbg !35
  %264 = shl nuw nsw i64 %71, 12, !dbg !35
  %265 = shl nuw nsw i64 %72, 12, !dbg !35
  %266 = shl nuw nsw i64 %73, 12, !dbg !35
  %267 = shl nuw nsw i64 %74, 12, !dbg !35
  %268 = shl nuw nsw i64 %75, 12, !dbg !35
  %269 = shl nuw nsw i64 %76, 12, !dbg !35
  %270 = shl nuw nsw i64 %77, 12, !dbg !35
  %271 = shl nuw nsw i64 %78, 12, !dbg !35
  %272 = or disjoint i64 %264, %65, !dbg !35
  %273 = or disjoint i64 %265, %65, !dbg !35
  %274 = or disjoint i64 %266, %65, !dbg !35
  %275 = or disjoint i64 %267, %65, !dbg !35
  %276 = or disjoint i64 %268, %65, !dbg !35
  %277 = or disjoint i64 %269, %65, !dbg !35
  %278 = or disjoint i64 %270, %65, !dbg !35
  %279 = or disjoint i64 %271, %65, !dbg !35
  %280 = getelementptr bfloat, ptr addrspace(1) %29, i64 %272, !dbg !35
  %281 = getelementptr bfloat, ptr addrspace(1) %29, i64 %273, !dbg !35
  %282 = getelementptr bfloat, ptr addrspace(1) %29, i64 %274, !dbg !35
  %283 = getelementptr bfloat, ptr addrspace(1) %29, i64 %275, !dbg !35
  %284 = getelementptr bfloat, ptr addrspace(1) %29, i64 %276, !dbg !35
  %285 = getelementptr bfloat, ptr addrspace(1) %29, i64 %277, !dbg !35
  %286 = getelementptr bfloat, ptr addrspace(1) %29, i64 %278, !dbg !35
  %287 = getelementptr bfloat, ptr addrspace(1) %29, i64 %279, !dbg !35
  %288 = icmp slt i64 %71, %80, !dbg !35
  %289 = icmp slt i64 %72, %80, !dbg !35
  %290 = icmp slt i64 %73, %80, !dbg !35
  %291 = icmp slt i64 %74, %80, !dbg !35
  %292 = icmp slt i64 %75, %80, !dbg !35
  %293 = icmp slt i64 %76, %80, !dbg !35
  %294 = icmp slt i64 %77, %80, !dbg !35
  %295 = icmp slt i64 %78, %80, !dbg !35
  %296 = and i1 %262, %288, !dbg !34
  %297 = and i1 %262, %289, !dbg !34
  %298 = and i1 %262, %290, !dbg !34
  %299 = and i1 %262, %291, !dbg !34
  %300 = and i1 %262, %292, !dbg !34
  %301 = and i1 %262, %293, !dbg !34
  %302 = and i1 %262, %294, !dbg !34
  %303 = and i1 %262, %295, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %304 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %129, !dbg !35
  %305 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %131, !dbg !35
  %306 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %133, !dbg !35
  %307 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %135, !dbg !35
  %308 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %137, !dbg !35
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %139, !dbg !35
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %141, !dbg !35
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %143, !dbg !35
  %312 = select i1 %296, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %304, ptr addrspace(1) %280, i32 %312) #2, !dbg !35
  %313 = select i1 %297, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %305, ptr addrspace(1) %281, i32 %313) #2, !dbg !35
  %314 = select i1 %298, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %306, ptr addrspace(1) %282, i32 %314) #2, !dbg !35
  %315 = select i1 %299, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %307, ptr addrspace(1) %283, i32 %315) #2, !dbg !35
  %316 = select i1 %300, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %308, ptr addrspace(1) %284, i32 %316) #2, !dbg !35
  %317 = select i1 %301, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %309, ptr addrspace(1) %285, i32 %317) #2, !dbg !35
  %318 = select i1 %302, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %286, i32 %318) #2, !dbg !35
  %319 = select i1 %303, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %287, i32 %319) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %320 = or disjoint i64 %264, %79, !dbg !36
  %321 = or disjoint i64 %265, %79, !dbg !36
  %322 = or disjoint i64 %266, %79, !dbg !36
  %323 = or disjoint i64 %267, %79, !dbg !36
  %324 = or disjoint i64 %268, %79, !dbg !36
  %325 = or disjoint i64 %269, %79, !dbg !36
  %326 = or disjoint i64 %270, %79, !dbg !36
  %327 = or disjoint i64 %271, %79, !dbg !36
  %328 = getelementptr bfloat, ptr addrspace(1) %29, i64 %320, !dbg !36
  %329 = getelementptr bfloat, ptr addrspace(1) %29, i64 %321, !dbg !36
  %330 = getelementptr bfloat, ptr addrspace(1) %29, i64 %322, !dbg !36
  %331 = getelementptr bfloat, ptr addrspace(1) %29, i64 %323, !dbg !36
  %332 = getelementptr bfloat, ptr addrspace(1) %29, i64 %324, !dbg !36
  %333 = getelementptr bfloat, ptr addrspace(1) %29, i64 %325, !dbg !36
  %334 = getelementptr bfloat, ptr addrspace(1) %29, i64 %326, !dbg !36
  %335 = getelementptr bfloat, ptr addrspace(1) %29, i64 %327, !dbg !36
  %336 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %129, !dbg !36
  %337 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %131, !dbg !36
  %338 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %133, !dbg !36
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %135, !dbg !36
  %340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %137, !dbg !36
  %341 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %139, !dbg !36
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %141, !dbg !36
  %343 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 24576), i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %336, ptr addrspace(1) %328, i32 %312) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %337, ptr addrspace(1) %329, i32 %313) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %338, ptr addrspace(1) %330, i32 %314) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %339, ptr addrspace(1) %331, i32 %315) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %340, ptr addrspace(1) %332, i32 %316) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %341, ptr addrspace(1) %333, i32 %317) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %342, ptr addrspace(1) %334, i32 %318) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %343, ptr addrspace(1) %335, i32 %319) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %344 = add nsw i64 %264, %67, !dbg !37
  %345 = add nsw i64 %265, %67, !dbg !37
  %346 = add nsw i64 %266, %67, !dbg !37
  %347 = add nsw i64 %267, %67, !dbg !37
  %348 = add nsw i64 %268, %67, !dbg !37
  %349 = add nsw i64 %269, %67, !dbg !37
  %350 = add nsw i64 %270, %67, !dbg !37
  %351 = add nsw i64 %271, %67, !dbg !37
  %352 = getelementptr bfloat, ptr addrspace(1) %27, i64 %344, !dbg !37
  %353 = getelementptr bfloat, ptr addrspace(1) %27, i64 %345, !dbg !37
  %354 = getelementptr bfloat, ptr addrspace(1) %27, i64 %346, !dbg !37
  %355 = getelementptr bfloat, ptr addrspace(1) %27, i64 %347, !dbg !37
  %356 = getelementptr bfloat, ptr addrspace(1) %27, i64 %348, !dbg !37
  %357 = getelementptr bfloat, ptr addrspace(1) %27, i64 %349, !dbg !37
  %358 = getelementptr bfloat, ptr addrspace(1) %27, i64 %350, !dbg !37
  %359 = getelementptr bfloat, ptr addrspace(1) %27, i64 %351, !dbg !37
  %360 = and i1 %70, %288, !dbg !37
  %361 = and i1 %70, %289, !dbg !37
  %362 = and i1 %70, %290, !dbg !37
  %363 = and i1 %70, %291, !dbg !37
  %364 = and i1 %70, %292, !dbg !37
  %365 = and i1 %70, %293, !dbg !37
  %366 = and i1 %70, %294, !dbg !37
  %367 = and i1 %70, %295, !dbg !37
  %368 = and i1 %262, %360, !dbg !34
  %369 = and i1 %262, %361, !dbg !34
  %370 = and i1 %262, %362, !dbg !34
  %371 = and i1 %262, %363, !dbg !34
  %372 = and i1 %262, %364, !dbg !34
  %373 = and i1 %262, %365, !dbg !34
  %374 = and i1 %262, %366, !dbg !34
  %375 = and i1 %262, %367, !dbg !34
  %376 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %129, !dbg !37
  %377 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %131, !dbg !37
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %133, !dbg !37
  %379 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %135, !dbg !37
  %380 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %137, !dbg !37
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %139, !dbg !37
  %382 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %141, !dbg !37
  %383 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 40960), i32 %143, !dbg !37
  %384 = select i1 %368, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %376, ptr addrspace(1) %352, i32 %384) #2, !dbg !37
  %385 = select i1 %369, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %377, ptr addrspace(1) %353, i32 %385) #2, !dbg !37
  %386 = select i1 %370, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %378, ptr addrspace(1) %354, i32 %386) #2, !dbg !37
  %387 = select i1 %371, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %379, ptr addrspace(1) %355, i32 %387) #2, !dbg !37
  %388 = select i1 %372, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %380, ptr addrspace(1) %356, i32 %388) #2, !dbg !37
  %389 = select i1 %373, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %381, ptr addrspace(1) %357, i32 %389) #2, !dbg !37
  %390 = select i1 %374, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %382, ptr addrspace(1) %358, i32 %390) #2, !dbg !37
  %391 = select i1 %375, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %383, ptr addrspace(1) %359, i32 %391) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx5 = shl nuw nsw i64 %263, 7, !dbg !38
  %392 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx5, !dbg !38
  %393 = icmp slt i64 %263, %80, !dbg !38
  %394 = and i1 %262, %393, !dbg !34
  %395 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 103168), i32 %56, !dbg !38
  %396 = select i1 %394, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %395, ptr addrspace(1) %392, i32 %396) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %397 = getelementptr bfloat, ptr addrspace(1) %28, i64 %272, !dbg !39
  %398 = getelementptr bfloat, ptr addrspace(1) %28, i64 %273, !dbg !39
  %399 = getelementptr bfloat, ptr addrspace(1) %28, i64 %274, !dbg !39
  %400 = getelementptr bfloat, ptr addrspace(1) %28, i64 %275, !dbg !39
  %401 = getelementptr bfloat, ptr addrspace(1) %28, i64 %276, !dbg !39
  %402 = getelementptr bfloat, ptr addrspace(1) %28, i64 %277, !dbg !39
  %403 = getelementptr bfloat, ptr addrspace(1) %28, i64 %278, !dbg !39
  %404 = getelementptr bfloat, ptr addrspace(1) %28, i64 %279, !dbg !39
  %405 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %129, !dbg !39
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %131, !dbg !39
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %133, !dbg !39
  %408 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %135, !dbg !39
  %409 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %137, !dbg !39
  %410 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %139, !dbg !39
  %411 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %141, !dbg !39
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 57344), i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %405, ptr addrspace(1) %397, i32 %312) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %406, ptr addrspace(1) %398, i32 %313) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %407, ptr addrspace(1) %399, i32 %314) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %408, ptr addrspace(1) %400, i32 %315) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %409, ptr addrspace(1) %401, i32 %316) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %410, ptr addrspace(1) %402, i32 %317) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %411, ptr addrspace(1) %403, i32 %318) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %412, ptr addrspace(1) %404, i32 %319) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %413 = getelementptr bfloat, ptr addrspace(1) %28, i64 %320, !dbg !40
  %414 = getelementptr bfloat, ptr addrspace(1) %28, i64 %321, !dbg !40
  %415 = getelementptr bfloat, ptr addrspace(1) %28, i64 %322, !dbg !40
  %416 = getelementptr bfloat, ptr addrspace(1) %28, i64 %323, !dbg !40
  %417 = getelementptr bfloat, ptr addrspace(1) %28, i64 %324, !dbg !40
  %418 = getelementptr bfloat, ptr addrspace(1) %28, i64 %325, !dbg !40
  %419 = getelementptr bfloat, ptr addrspace(1) %28, i64 %326, !dbg !40
  %420 = getelementptr bfloat, ptr addrspace(1) %28, i64 %327, !dbg !40
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %129, !dbg !40
  %422 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %131, !dbg !40
  %423 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %133, !dbg !40
  %424 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %135, !dbg !40
  %425 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %137, !dbg !40
  %426 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %139, !dbg !40
  %427 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %141, !dbg !40
  %428 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 73728), i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %421, ptr addrspace(1) %413, i32 %312) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %422, ptr addrspace(1) %414, i32 %313) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %423, ptr addrspace(1) %415, i32 %314) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %424, ptr addrspace(1) %416, i32 %315) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %425, ptr addrspace(1) %417, i32 %316) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %426, ptr addrspace(1) %418, i32 %317) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %427, ptr addrspace(1) %419, i32 %318) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %428, ptr addrspace(1) %420, i32 %319) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  br i1 %85, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %9
  %.pre = shl nuw nsw i32 %33, 1, !dbg !41
  %.pre1246 = and i32 %.pre, 6, !dbg !41
  %.pre1248 = shl nuw nsw i32 %33, 4, !dbg !41
  %.pre1250 = and i32 %.pre1248, 192, !dbg !41
  %.pre1252 = or disjoint i32 %.pre1250, %.pre1246, !dbg !41
  %.pre1254 = shl nuw nsw i32 %35, 4, !dbg !41
  %.pre1256 = or disjoint i32 %.pre1252, %.pre1254, !dbg !41
  %.pre1258 = shl nuw nsw i32 %36, 5, !dbg !41
  %.pre1260 = or disjoint i32 %.pre1256, %.pre1258, !dbg !41
  %.pre1262 = or disjoint i32 %.pre1260, 512, !dbg !41
  %.pre1264 = or disjoint i32 %.pre1260, 520, !dbg !41
  %.pre1266 = or disjoint i32 %.pre1260, 528, !dbg !41
  %.pre1268 = or disjoint i32 %.pre1260, 536, !dbg !41
  %.pre1270 = or disjoint i32 %.pre1260, 544, !dbg !41
  %.pre1272 = or disjoint i32 %.pre1260, 552, !dbg !41
  %.pre1274 = or disjoint i32 %.pre1260, 560, !dbg !41
  %.pre1276 = or disjoint i32 %.pre1260, 568, !dbg !41
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %9
  %.not3 = icmp eq i32 %46, 0, !dbg !29
  %429 = add nsw i32 %14, -2
  %430 = and i32 %33, 3
  %431 = mul nuw nsw i32 %430, 72
  %432 = select i1 %.not3, i32 0, i32 288
  %433 = xor i32 %432, %431
  %434 = shl nuw nsw i32 %34, 6
  %435 = or disjoint i32 %433, %434
  %436 = lshr exact i32 %35, 1
  %437 = xor i32 %435, %436
  %438 = shl nuw nsw i32 %36, 5
  %439 = or disjoint i32 %437, %438
  %440 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %439
  %441 = ptrtoint ptr addrspace(3) %440 to i32
  %442 = xor i32 %439, 16
  %443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %442
  %444 = ptrtoint ptr addrspace(3) %443 to i32
  %445 = xor i32 %439, 32
  %446 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %445
  %447 = ptrtoint ptr addrspace(3) %446 to i32
  %448 = xor i32 %439, 48
  %449 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %448
  %450 = ptrtoint ptr addrspace(3) %449 to i32
  %451 = xor i32 %439, 2048
  %452 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %451
  %453 = ptrtoint ptr addrspace(3) %452 to i32
  %454 = xor i32 %439, 2064
  %455 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %454
  %456 = ptrtoint ptr addrspace(3) %455 to i32
  %457 = xor i32 %439, 2080
  %458 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %457
  %459 = ptrtoint ptr addrspace(3) %458 to i32
  %460 = xor i32 %439, 2096
  %461 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %460
  %462 = ptrtoint ptr addrspace(3) %461 to i32
  %.idx709 = shl nuw nsw i64 %57, 8
  %.idx710 = shl nuw nsw i64 %58, 8
  %.idx711 = shl nuw nsw i64 %59, 8
  %.idx712 = shl nuw nsw i64 %60, 8
  %.idx713 = shl nuw nsw i64 %61, 8
  %.idx714 = shl nuw nsw i64 %62, 8
  %.idx715 = shl nuw nsw i64 %63, 8
  %.idx716 = shl nuw nsw i64 %64, 8
  %463 = shl nuw nsw i32 %33, 1
  %464 = and i32 %463, 6
  %465 = shl nuw nsw i32 %33, 4
  %466 = and i32 %465, 192
  %467 = or disjoint i32 %466, %464
  %468 = shl nuw nsw i32 %35, 4
  %469 = or disjoint i32 %467, %468
  %470 = or disjoint i32 %469, %438
  %471 = and i32 %47, 504
  %472 = lshr i32 %470, 3
  %473 = add nuw nsw i32 %472, %470
  %474 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %473
  %475 = or disjoint i32 %470, 512
  %476 = lshr i32 %475, 3
  %477 = add nuw nsw i32 %476, %475
  %478 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %477
  %479 = or disjoint i32 %470, 8
  %480 = add nuw nsw i32 %472, %479
  %481 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %480
  %482 = or disjoint i32 %470, 520
  %483 = lshr i32 %482, 3
  %484 = and i32 %483, 536870904
  %485 = add nuw nsw i32 %484, %482
  %486 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %485
  %487 = or disjoint i32 %470, 16
  %488 = add nuw nsw i32 %472, %487
  %489 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %488
  %490 = or disjoint i32 %470, 528
  %491 = lshr i32 %490, 3
  %492 = and i32 %491, 536870904
  %493 = add nuw nsw i32 %492, %490
  %494 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %493
  %495 = or disjoint i32 %470, 24
  %496 = add nuw nsw i32 %472, %495
  %497 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %496
  %498 = or disjoint i32 %470, 536
  %499 = lshr i32 %498, 3
  %500 = and i32 %499, 536870904
  %501 = add nuw nsw i32 %500, %498
  %502 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %501
  %503 = or disjoint i32 %470, 32
  %504 = add nuw nsw i32 %472, %503
  %505 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %504
  %506 = or disjoint i32 %470, 544
  %507 = lshr i32 %506, 3
  %508 = and i32 %507, 536870904
  %509 = add nuw nsw i32 %508, %506
  %510 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %509
  %511 = or disjoint i32 %470, 40
  %512 = add nuw nsw i32 %472, %511
  %513 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %512
  %514 = or disjoint i32 %470, 552
  %515 = lshr i32 %514, 3
  %516 = and i32 %515, 536870904
  %517 = add nuw nsw i32 %516, %514
  %518 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %517
  %519 = or disjoint i32 %470, 48
  %520 = add nuw nsw i32 %472, %519
  %521 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %520
  %522 = or disjoint i32 %470, 560
  %523 = lshr i32 %522, 3
  %524 = and i32 %523, 536870904
  %525 = add nuw nsw i32 %524, %522
  %526 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %525
  %527 = or disjoint i32 %470, 56
  %528 = add nuw nsw i32 %472, %527
  %529 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %528
  %530 = or disjoint i32 %470, 568
  %531 = lshr i32 %530, 3
  %532 = and i32 %531, 536870904
  %533 = add nuw nsw i32 %532, %530
  %534 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %533
  %535 = and i32 %33, 56
  %536 = add nuw nsw i32 %471, %535
  %537 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %536
  %538 = or disjoint i32 %471, 512
  %539 = lshr exact i32 %538, 3
  %540 = and i32 %539, 120
  %541 = add nuw nsw i32 %540, %538
  %542 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %541
  %543 = or disjoint i32 %471, 1024
  %544 = lshr exact i32 %543, 3
  %545 = and i32 %544, 184
  %546 = add nuw nsw i32 %545, %543
  %547 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %546
  %548 = or disjoint i32 %471, 1536
  %549 = lshr exact i32 %548, 3
  %550 = and i32 %549, 248
  %551 = add nuw nsw i32 %550, %548
  %552 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %551
  %553 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %439
  %554 = ptrtoint ptr addrspace(3) %553 to i32
  %555 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %442
  %556 = ptrtoint ptr addrspace(3) %555 to i32
  %557 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %445
  %558 = ptrtoint ptr addrspace(3) %557 to i32
  %559 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %448
  %560 = ptrtoint ptr addrspace(3) %559 to i32
  %561 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %451
  %562 = ptrtoint ptr addrspace(3) %561 to i32
  %563 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %454
  %564 = ptrtoint ptr addrspace(3) %563 to i32
  %565 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %457
  %566 = ptrtoint ptr addrspace(3) %565 to i32
  %567 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %460
  %568 = ptrtoint ptr addrspace(3) %567 to i32
  %.idx811 = shl nuw nsw i64 %71, 8
  %.idx812 = shl nuw nsw i64 %72, 8
  %.idx813 = shl nuw nsw i64 %73, 8
  %.idx814 = shl nuw nsw i64 %74, 8
  %.idx815 = shl nuw nsw i64 %75, 8
  %.idx816 = shl nuw nsw i64 %76, 8
  %.idx817 = shl nuw nsw i64 %77, 8
  %.idx818 = shl nuw nsw i64 %78, 8
  %569 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %473
  %570 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %477
  %571 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %480
  %572 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %485
  %573 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %488
  %574 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %493
  %575 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %496
  %576 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %501
  %577 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %504
  %578 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %509
  %579 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %512
  %580 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %517
  %581 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %520
  %582 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %525
  %583 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %528
  %584 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %533
  %585 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %536
  %586 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %541
  %587 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %546
  %588 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 98304), i32 %551
  %589 = shl nuw nsw i32 %33, 6
  %590 = and i32 %589, 1536
  %591 = or disjoint i32 %433, %590
  %592 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %591
  %593 = ptrtoint ptr addrspace(3) %592 to i32
  %594 = or disjoint i32 %591, 2048
  %595 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %594
  %596 = ptrtoint ptr addrspace(3) %595 to i32
  %597 = xor i32 %591, 8
  %598 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %597
  %599 = ptrtoint ptr addrspace(3) %598 to i32
  %600 = xor i32 %591, 2056
  %601 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %600
  %602 = ptrtoint ptr addrspace(3) %601 to i32
  %603 = xor i32 %591, 16
  %604 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %603
  %605 = ptrtoint ptr addrspace(3) %604 to i32
  %606 = xor i32 %591, 2064
  %607 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %606
  %608 = ptrtoint ptr addrspace(3) %607 to i32
  %609 = xor i32 %591, 24
  %610 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %609
  %611 = ptrtoint ptr addrspace(3) %610 to i32
  %612 = xor i32 %591, 2072
  %613 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %612
  %614 = ptrtoint ptr addrspace(3) %613 to i32
  %615 = xor i32 %591, 32
  %616 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %615
  %617 = ptrtoint ptr addrspace(3) %616 to i32
  %618 = xor i32 %591, 2080
  %619 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %618
  %620 = ptrtoint ptr addrspace(3) %619 to i32
  %621 = xor i32 %591, 40
  %622 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %621
  %623 = ptrtoint ptr addrspace(3) %622 to i32
  %624 = xor i32 %591, 2088
  %625 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %624
  %626 = ptrtoint ptr addrspace(3) %625 to i32
  %627 = xor i32 %591, 48
  %628 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %627
  %629 = ptrtoint ptr addrspace(3) %628 to i32
  %630 = xor i32 %591, 2096
  %631 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %630
  %632 = ptrtoint ptr addrspace(3) %631 to i32
  %633 = xor i32 %591, 56
  %634 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %633
  %635 = ptrtoint ptr addrspace(3) %634 to i32
  %636 = xor i32 %591, 2104
  %637 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %636
  %638 = ptrtoint ptr addrspace(3) %637 to i32
  %639 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %591
  %640 = ptrtoint ptr addrspace(3) %639 to i32
  %641 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %594
  %642 = ptrtoint ptr addrspace(3) %641 to i32
  %643 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %597
  %644 = ptrtoint ptr addrspace(3) %643 to i32
  %645 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %600
  %646 = ptrtoint ptr addrspace(3) %645 to i32
  %647 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %603
  %648 = ptrtoint ptr addrspace(3) %647 to i32
  %649 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %606
  %650 = ptrtoint ptr addrspace(3) %649 to i32
  %651 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %609
  %652 = ptrtoint ptr addrspace(3) %651 to i32
  %653 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %612
  %654 = ptrtoint ptr addrspace(3) %653 to i32
  %655 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %615
  %656 = ptrtoint ptr addrspace(3) %655 to i32
  %657 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %618
  %658 = ptrtoint ptr addrspace(3) %657 to i32
  %659 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %621
  %660 = ptrtoint ptr addrspace(3) %659 to i32
  %661 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %624
  %662 = ptrtoint ptr addrspace(3) %661 to i32
  %663 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %627
  %664 = ptrtoint ptr addrspace(3) %663 to i32
  %665 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %630
  %666 = ptrtoint ptr addrspace(3) %665 to i32
  %667 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %633
  %668 = ptrtoint ptr addrspace(3) %667 to i32
  %669 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 90112), i32 %636
  %670 = ptrtoint ptr addrspace(3) %669 to i32
  %671 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %473
  %672 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %477
  %673 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %480
  %674 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %485
  %675 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %488
  %676 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %493
  %677 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %496
  %678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %501
  %679 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %504
  %680 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %509
  %681 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %512
  %682 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %517
  %683 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %520
  %684 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %525
  %685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %528
  %686 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %533
  %687 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %536
  %688 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %541
  %689 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %546
  %690 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 81920), i32 %551
  %691 = xor i32 %433, %34
  %692 = shl nuw nsw i32 %35, 5
  %693 = or disjoint i32 %691, %692
  %694 = xor i32 %693, %51
  %695 = xor i32 %694, 1024
  %696 = xor i32 %694, 2048
  %697 = xor i32 %694, 3072
  %698 = xor i32 %694, 32
  %699 = xor i32 %694, 1056
  %700 = xor i32 %694, 2080
  %701 = xor i32 %694, 3104
  %702 = sext i32 %429 to i64, !dbg !34
  %wide.trip.count = zext nneg i32 %14 to i64, !dbg !34
  br label %703, !dbg !34

703:                                              ; preds = %.lr.ph, %703
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %703 ]
  %704 = phi i32 [ 64, %.lr.ph ], [ %3692, %703 ]
  %705 = phi i32 [ 0, %.lr.ph ], [ %704, %703 ]
  %.pn2371242 = phi i1 [ %367, %.lr.ph ], [ %3818, %703 ]
  %.pn2531241 = phi i1 [ %366, %.lr.ph ], [ %3817, %703 ]
  %.pn2691240 = phi i1 [ %365, %.lr.ph ], [ %3816, %703 ]
  %.pn2851239 = phi i1 [ %364, %.lr.ph ], [ %3815, %703 ]
  %.pn3011238 = phi i1 [ %363, %.lr.ph ], [ %3814, %703 ]
  %.pn3171237 = phi i1 [ %362, %.lr.ph ], [ %3813, %703 ]
  %.pn3331236 = phi i1 [ %361, %.lr.ph ], [ %3812, %703 ]
  %.pn3491235 = phi i1 [ %360, %.lr.ph ], [ %3811, %703 ]
  %.pn237.pn1234 = phi i1 [ %200, %.lr.ph ], [ %.pn2371242, %703 ]
  %.pn253.pn1233 = phi i1 [ %199, %.lr.ph ], [ %.pn2531241, %703 ]
  %.pn269.pn1232 = phi i1 [ %198, %.lr.ph ], [ %.pn2691240, %703 ]
  %.pn285.pn1231 = phi i1 [ %197, %.lr.ph ], [ %.pn2851239, %703 ]
  %.pn301.pn1230 = phi i1 [ %196, %.lr.ph ], [ %.pn3011238, %703 ]
  %.pn317.pn1229 = phi i1 [ %195, %.lr.ph ], [ %.pn3171237, %703 ]
  %.pn333.pn1228 = phi i1 [ %194, %.lr.ph ], [ %.pn3331236, %703 ]
  %.pn349.pn1227 = phi i1 [ %193, %.lr.ph ], [ %.pn3491235, %703 ]
  %.pn201226 = phi i64 [ %351, %.lr.ph ], [ %3802, %703 ]
  %.pn361225 = phi i64 [ %350, %.lr.ph ], [ %3801, %703 ]
  %.pn521224 = phi i64 [ %349, %.lr.ph ], [ %3800, %703 ]
  %.pn681223 = phi i64 [ %348, %.lr.ph ], [ %3799, %703 ]
  %.pn841222 = phi i64 [ %347, %.lr.ph ], [ %3798, %703 ]
  %.pn1001221 = phi i64 [ %346, %.lr.ph ], [ %3797, %703 ]
  %.pn1161220 = phi i64 [ %345, %.lr.ph ], [ %3796, %703 ]
  %.pn1321219 = phi i64 [ %344, %.lr.ph ], [ %3795, %703 ]
  %.pn20.pn1218 = phi i64 [ %184, %.lr.ph ], [ %.pn201226, %703 ]
  %.pn36.pn1217 = phi i64 [ %183, %.lr.ph ], [ %.pn361225, %703 ]
  %.pn52.pn1216 = phi i64 [ %182, %.lr.ph ], [ %.pn521224, %703 ]
  %.pn68.pn1215 = phi i64 [ %181, %.lr.ph ], [ %.pn681223, %703 ]
  %.pn84.pn1214 = phi i64 [ %180, %.lr.ph ], [ %.pn841222, %703 ]
  %.pn100.pn1213 = phi i64 [ %179, %.lr.ph ], [ %.pn1001221, %703 ]
  %.pn116.pn1212 = phi i64 [ %178, %.lr.ph ], [ %.pn1161220, %703 ]
  %.pn132.pn1211 = phi i64 [ %177, %.lr.ph ], [ %.pn1321219, %703 ]
  %706 = phi i32 [ -1, %.lr.ph ], [ %839, %703 ]
  %707 = phi i32 [ 1, %.lr.ph ], [ %3690, %703 ]
  %708 = phi float [ 0.000000e+00, %.lr.ph ], [ %3609, %703 ]
  %709 = phi float [ 0.000000e+00, %.lr.ph ], [ %3610, %703 ]
  %710 = phi float [ 0.000000e+00, %.lr.ph ], [ %3611, %703 ]
  %711 = phi float [ 0.000000e+00, %.lr.ph ], [ %3612, %703 ]
  %712 = phi float [ 0.000000e+00, %.lr.ph ], [ %3614, %703 ]
  %713 = phi float [ 0.000000e+00, %.lr.ph ], [ %3615, %703 ]
  %714 = phi float [ 0.000000e+00, %.lr.ph ], [ %3616, %703 ]
  %715 = phi float [ 0.000000e+00, %.lr.ph ], [ %3617, %703 ]
  %716 = phi float [ 0.000000e+00, %.lr.ph ], [ %3619, %703 ]
  %717 = phi float [ 0.000000e+00, %.lr.ph ], [ %3620, %703 ]
  %718 = phi float [ 0.000000e+00, %.lr.ph ], [ %3621, %703 ]
  %719 = phi float [ 0.000000e+00, %.lr.ph ], [ %3622, %703 ]
  %720 = phi float [ 0.000000e+00, %.lr.ph ], [ %3624, %703 ]
  %721 = phi float [ 0.000000e+00, %.lr.ph ], [ %3625, %703 ]
  %722 = phi float [ 0.000000e+00, %.lr.ph ], [ %3626, %703 ]
  %723 = phi float [ 0.000000e+00, %.lr.ph ], [ %3627, %703 ]
  %724 = phi float [ 0.000000e+00, %.lr.ph ], [ %3629, %703 ]
  %725 = phi float [ 0.000000e+00, %.lr.ph ], [ %3630, %703 ]
  %726 = phi float [ 0.000000e+00, %.lr.ph ], [ %3631, %703 ]
  %727 = phi float [ 0.000000e+00, %.lr.ph ], [ %3632, %703 ]
  %728 = phi float [ 0.000000e+00, %.lr.ph ], [ %3634, %703 ]
  %729 = phi float [ 0.000000e+00, %.lr.ph ], [ %3635, %703 ]
  %730 = phi float [ 0.000000e+00, %.lr.ph ], [ %3636, %703 ]
  %731 = phi float [ 0.000000e+00, %.lr.ph ], [ %3637, %703 ]
  %732 = phi float [ 0.000000e+00, %.lr.ph ], [ %3639, %703 ]
  %733 = phi float [ 0.000000e+00, %.lr.ph ], [ %3640, %703 ]
  %734 = phi float [ 0.000000e+00, %.lr.ph ], [ %3641, %703 ]
  %735 = phi float [ 0.000000e+00, %.lr.ph ], [ %3642, %703 ]
  %736 = phi float [ 0.000000e+00, %.lr.ph ], [ %3644, %703 ]
  %737 = phi float [ 0.000000e+00, %.lr.ph ], [ %3645, %703 ]
  %738 = phi float [ 0.000000e+00, %.lr.ph ], [ %3646, %703 ]
  %739 = phi float [ 0.000000e+00, %.lr.ph ], [ %3647, %703 ]
  %740 = phi float [ 0.000000e+00, %.lr.ph ], [ %3649, %703 ]
  %741 = phi float [ 0.000000e+00, %.lr.ph ], [ %3650, %703 ]
  %742 = phi float [ 0.000000e+00, %.lr.ph ], [ %3651, %703 ]
  %743 = phi float [ 0.000000e+00, %.lr.ph ], [ %3652, %703 ]
  %744 = phi float [ 0.000000e+00, %.lr.ph ], [ %3654, %703 ]
  %745 = phi float [ 0.000000e+00, %.lr.ph ], [ %3655, %703 ]
  %746 = phi float [ 0.000000e+00, %.lr.ph ], [ %3656, %703 ]
  %747 = phi float [ 0.000000e+00, %.lr.ph ], [ %3657, %703 ]
  %748 = phi float [ 0.000000e+00, %.lr.ph ], [ %3659, %703 ]
  %749 = phi float [ 0.000000e+00, %.lr.ph ], [ %3660, %703 ]
  %750 = phi float [ 0.000000e+00, %.lr.ph ], [ %3661, %703 ]
  %751 = phi float [ 0.000000e+00, %.lr.ph ], [ %3662, %703 ]
  %752 = phi float [ 0.000000e+00, %.lr.ph ], [ %3664, %703 ]
  %753 = phi float [ 0.000000e+00, %.lr.ph ], [ %3665, %703 ]
  %754 = phi float [ 0.000000e+00, %.lr.ph ], [ %3666, %703 ]
  %755 = phi float [ 0.000000e+00, %.lr.ph ], [ %3667, %703 ]
  %756 = phi float [ 0.000000e+00, %.lr.ph ], [ %3669, %703 ]
  %757 = phi float [ 0.000000e+00, %.lr.ph ], [ %3670, %703 ]
  %758 = phi float [ 0.000000e+00, %.lr.ph ], [ %3671, %703 ]
  %759 = phi float [ 0.000000e+00, %.lr.ph ], [ %3672, %703 ]
  %760 = phi float [ 0.000000e+00, %.lr.ph ], [ %3674, %703 ]
  %761 = phi float [ 0.000000e+00, %.lr.ph ], [ %3675, %703 ]
  %762 = phi float [ 0.000000e+00, %.lr.ph ], [ %3676, %703 ]
  %763 = phi float [ 0.000000e+00, %.lr.ph ], [ %3677, %703 ]
  %764 = phi float [ 0.000000e+00, %.lr.ph ], [ %3679, %703 ]
  %765 = phi float [ 0.000000e+00, %.lr.ph ], [ %3680, %703 ]
  %766 = phi float [ 0.000000e+00, %.lr.ph ], [ %3681, %703 ]
  %767 = phi float [ 0.000000e+00, %.lr.ph ], [ %3682, %703 ]
  %768 = phi float [ 0.000000e+00, %.lr.ph ], [ %3684, %703 ]
  %769 = phi float [ 0.000000e+00, %.lr.ph ], [ %3685, %703 ]
  %770 = phi float [ 0.000000e+00, %.lr.ph ], [ %3686, %703 ]
  %771 = phi float [ 0.000000e+00, %.lr.ph ], [ %3687, %703 ]
  %772 = phi float [ 0.000000e+00, %.lr.ph ], [ %3232, %703 ]
  %773 = phi float [ 0.000000e+00, %.lr.ph ], [ %3233, %703 ]
  %774 = phi float [ 0.000000e+00, %.lr.ph ], [ %3234, %703 ]
  %775 = phi float [ 0.000000e+00, %.lr.ph ], [ %3235, %703 ]
  %776 = phi float [ 0.000000e+00, %.lr.ph ], [ %3237, %703 ]
  %777 = phi float [ 0.000000e+00, %.lr.ph ], [ %3238, %703 ]
  %778 = phi float [ 0.000000e+00, %.lr.ph ], [ %3239, %703 ]
  %779 = phi float [ 0.000000e+00, %.lr.ph ], [ %3240, %703 ]
  %780 = phi float [ 0.000000e+00, %.lr.ph ], [ %3242, %703 ]
  %781 = phi float [ 0.000000e+00, %.lr.ph ], [ %3243, %703 ]
  %782 = phi float [ 0.000000e+00, %.lr.ph ], [ %3244, %703 ]
  %783 = phi float [ 0.000000e+00, %.lr.ph ], [ %3245, %703 ]
  %784 = phi float [ 0.000000e+00, %.lr.ph ], [ %3247, %703 ]
  %785 = phi float [ 0.000000e+00, %.lr.ph ], [ %3248, %703 ]
  %786 = phi float [ 0.000000e+00, %.lr.ph ], [ %3249, %703 ]
  %787 = phi float [ 0.000000e+00, %.lr.ph ], [ %3250, %703 ]
  %788 = phi float [ 0.000000e+00, %.lr.ph ], [ %3252, %703 ]
  %789 = phi float [ 0.000000e+00, %.lr.ph ], [ %3253, %703 ]
  %790 = phi float [ 0.000000e+00, %.lr.ph ], [ %3254, %703 ]
  %791 = phi float [ 0.000000e+00, %.lr.ph ], [ %3255, %703 ]
  %792 = phi float [ 0.000000e+00, %.lr.ph ], [ %3257, %703 ]
  %793 = phi float [ 0.000000e+00, %.lr.ph ], [ %3258, %703 ]
  %794 = phi float [ 0.000000e+00, %.lr.ph ], [ %3259, %703 ]
  %795 = phi float [ 0.000000e+00, %.lr.ph ], [ %3260, %703 ]
  %796 = phi float [ 0.000000e+00, %.lr.ph ], [ %3262, %703 ]
  %797 = phi float [ 0.000000e+00, %.lr.ph ], [ %3263, %703 ]
  %798 = phi float [ 0.000000e+00, %.lr.ph ], [ %3264, %703 ]
  %799 = phi float [ 0.000000e+00, %.lr.ph ], [ %3265, %703 ]
  %800 = phi float [ 0.000000e+00, %.lr.ph ], [ %3267, %703 ]
  %801 = phi float [ 0.000000e+00, %.lr.ph ], [ %3268, %703 ]
  %802 = phi float [ 0.000000e+00, %.lr.ph ], [ %3269, %703 ]
  %803 = phi float [ 0.000000e+00, %.lr.ph ], [ %3270, %703 ]
  %804 = phi float [ 0.000000e+00, %.lr.ph ], [ %3272, %703 ]
  %805 = phi float [ 0.000000e+00, %.lr.ph ], [ %3273, %703 ]
  %806 = phi float [ 0.000000e+00, %.lr.ph ], [ %3274, %703 ]
  %807 = phi float [ 0.000000e+00, %.lr.ph ], [ %3275, %703 ]
  %808 = phi float [ 0.000000e+00, %.lr.ph ], [ %3277, %703 ]
  %809 = phi float [ 0.000000e+00, %.lr.ph ], [ %3278, %703 ]
  %810 = phi float [ 0.000000e+00, %.lr.ph ], [ %3279, %703 ]
  %811 = phi float [ 0.000000e+00, %.lr.ph ], [ %3280, %703 ]
  %812 = phi float [ 0.000000e+00, %.lr.ph ], [ %3282, %703 ]
  %813 = phi float [ 0.000000e+00, %.lr.ph ], [ %3283, %703 ]
  %814 = phi float [ 0.000000e+00, %.lr.ph ], [ %3284, %703 ]
  %815 = phi float [ 0.000000e+00, %.lr.ph ], [ %3285, %703 ]
  %816 = phi float [ 0.000000e+00, %.lr.ph ], [ %3287, %703 ]
  %817 = phi float [ 0.000000e+00, %.lr.ph ], [ %3288, %703 ]
  %818 = phi float [ 0.000000e+00, %.lr.ph ], [ %3289, %703 ]
  %819 = phi float [ 0.000000e+00, %.lr.ph ], [ %3290, %703 ]
  %820 = phi float [ 0.000000e+00, %.lr.ph ], [ %3292, %703 ]
  %821 = phi float [ 0.000000e+00, %.lr.ph ], [ %3293, %703 ]
  %822 = phi float [ 0.000000e+00, %.lr.ph ], [ %3294, %703 ]
  %823 = phi float [ 0.000000e+00, %.lr.ph ], [ %3295, %703 ]
  %824 = phi float [ 0.000000e+00, %.lr.ph ], [ %3297, %703 ]
  %825 = phi float [ 0.000000e+00, %.lr.ph ], [ %3298, %703 ]
  %826 = phi float [ 0.000000e+00, %.lr.ph ], [ %3299, %703 ]
  %827 = phi float [ 0.000000e+00, %.lr.ph ], [ %3300, %703 ]
  %828 = phi float [ 0.000000e+00, %.lr.ph ], [ %3302, %703 ]
  %829 = phi float [ 0.000000e+00, %.lr.ph ], [ %3303, %703 ]
  %830 = phi float [ 0.000000e+00, %.lr.ph ], [ %3304, %703 ]
  %831 = phi float [ 0.000000e+00, %.lr.ph ], [ %3305, %703 ]
  %832 = phi float [ 0.000000e+00, %.lr.ph ], [ %3307, %703 ]
  %833 = phi float [ 0.000000e+00, %.lr.ph ], [ %3308, %703 ]
  %834 = phi float [ 0.000000e+00, %.lr.ph ], [ %3309, %703 ]
  %835 = phi float [ 0.000000e+00, %.lr.ph ], [ %3310, %703 ]
  %836 = icmp slt i64 %indvars.iv, %702, !dbg !34
  %837 = add i32 %706, 1, !dbg !34
  %838 = icmp sgt i32 %837, 1, !dbg !34
  %839 = select i1 %838, i32 0, i32 %837, !dbg !34
  %840 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !42
  %841 = shl i32 %840, 19, !dbg !42
  %842 = sext i32 %841 to i64, !dbg !43
  %843 = getelementptr bfloat, ptr addrspace(1) %21, i64 %842, !dbg !43
  %844 = fptrunc float %772 to bfloat, !dbg !44
  %845 = fptrunc float %773 to bfloat, !dbg !44
  %846 = fptrunc float %774 to bfloat, !dbg !44
  %847 = fptrunc float %775 to bfloat, !dbg !44
  %848 = fptrunc float %776 to bfloat, !dbg !44
  %849 = fptrunc float %777 to bfloat, !dbg !44
  %850 = fptrunc float %778 to bfloat, !dbg !44
  %851 = fptrunc float %779 to bfloat, !dbg !44
  %852 = fptrunc float %780 to bfloat, !dbg !44
  %853 = fptrunc float %781 to bfloat, !dbg !44
  %854 = fptrunc float %782 to bfloat, !dbg !44
  %855 = fptrunc float %783 to bfloat, !dbg !44
  %856 = fptrunc float %784 to bfloat, !dbg !44
  %857 = fptrunc float %785 to bfloat, !dbg !44
  %858 = fptrunc float %786 to bfloat, !dbg !44
  %859 = fptrunc float %787 to bfloat, !dbg !44
  %860 = fptrunc float %788 to bfloat, !dbg !44
  %861 = fptrunc float %789 to bfloat, !dbg !44
  %862 = fptrunc float %790 to bfloat, !dbg !44
  %863 = fptrunc float %791 to bfloat, !dbg !44
  %864 = fptrunc float %792 to bfloat, !dbg !44
  %865 = fptrunc float %793 to bfloat, !dbg !44
  %866 = fptrunc float %794 to bfloat, !dbg !44
  %867 = fptrunc float %795 to bfloat, !dbg !44
  %868 = fptrunc float %796 to bfloat, !dbg !44
  %869 = fptrunc float %797 to bfloat, !dbg !44
  %870 = fptrunc float %798 to bfloat, !dbg !44
  %871 = fptrunc float %799 to bfloat, !dbg !44
  %872 = fptrunc float %800 to bfloat, !dbg !44
  %873 = fptrunc float %801 to bfloat, !dbg !44
  %874 = fptrunc float %802 to bfloat, !dbg !44
  %875 = fptrunc float %803 to bfloat, !dbg !44
  %876 = fptrunc float %804 to bfloat, !dbg !44
  %877 = fptrunc float %805 to bfloat, !dbg !44
  %878 = fptrunc float %806 to bfloat, !dbg !44
  %879 = fptrunc float %807 to bfloat, !dbg !44
  %880 = fptrunc float %808 to bfloat, !dbg !44
  %881 = fptrunc float %809 to bfloat, !dbg !44
  %882 = fptrunc float %810 to bfloat, !dbg !44
  %883 = fptrunc float %811 to bfloat, !dbg !44
  %884 = fptrunc float %812 to bfloat, !dbg !44
  %885 = fptrunc float %813 to bfloat, !dbg !44
  %886 = fptrunc float %814 to bfloat, !dbg !44
  %887 = fptrunc float %815 to bfloat, !dbg !44
  %888 = fptrunc float %816 to bfloat, !dbg !44
  %889 = fptrunc float %817 to bfloat, !dbg !44
  %890 = fptrunc float %818 to bfloat, !dbg !44
  %891 = fptrunc float %819 to bfloat, !dbg !44
  %892 = fptrunc float %820 to bfloat, !dbg !44
  %893 = fptrunc float %821 to bfloat, !dbg !44
  %894 = fptrunc float %822 to bfloat, !dbg !44
  %895 = fptrunc float %823 to bfloat, !dbg !44
  %896 = fptrunc float %824 to bfloat, !dbg !44
  %897 = fptrunc float %825 to bfloat, !dbg !44
  %898 = fptrunc float %826 to bfloat, !dbg !44
  %899 = fptrunc float %827 to bfloat, !dbg !44
  %900 = fptrunc float %828 to bfloat, !dbg !44
  %901 = fptrunc float %829 to bfloat, !dbg !44
  %902 = fptrunc float %830 to bfloat, !dbg !44
  %903 = fptrunc float %831 to bfloat, !dbg !44
  %904 = fptrunc float %832 to bfloat, !dbg !44
  %905 = fptrunc float %833 to bfloat, !dbg !44
  %906 = fptrunc float %834 to bfloat, !dbg !44
  %907 = fptrunc float %835 to bfloat, !dbg !44
  %908 = insertelement <2 x bfloat> poison, bfloat %844, i64 0, !dbg !44
  %909 = insertelement <2 x bfloat> %908, bfloat %845, i64 1, !dbg !44
  %910 = bitcast <2 x bfloat> %909 to i32, !dbg !44
  %911 = insertelement <2 x bfloat> poison, bfloat %846, i64 0, !dbg !44
  %912 = insertelement <2 x bfloat> %911, bfloat %847, i64 1, !dbg !44
  %913 = bitcast <2 x bfloat> %912 to i32, !dbg !44
  %914 = insertelement <2 x bfloat> poison, bfloat %848, i64 0, !dbg !44
  %915 = insertelement <2 x bfloat> %914, bfloat %849, i64 1, !dbg !44
  %916 = bitcast <2 x bfloat> %915 to i32, !dbg !44
  %917 = insertelement <2 x bfloat> poison, bfloat %850, i64 0, !dbg !44
  %918 = insertelement <2 x bfloat> %917, bfloat %851, i64 1, !dbg !44
  %919 = bitcast <2 x bfloat> %918 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %441, i32 %910, i32 %913, i32 %916, i32 %919) #2, !dbg !44
  %920 = insertelement <2 x bfloat> poison, bfloat %852, i64 0, !dbg !44
  %921 = insertelement <2 x bfloat> %920, bfloat %853, i64 1, !dbg !44
  %922 = bitcast <2 x bfloat> %921 to i32, !dbg !44
  %923 = insertelement <2 x bfloat> poison, bfloat %854, i64 0, !dbg !44
  %924 = insertelement <2 x bfloat> %923, bfloat %855, i64 1, !dbg !44
  %925 = bitcast <2 x bfloat> %924 to i32, !dbg !44
  %926 = insertelement <2 x bfloat> poison, bfloat %856, i64 0, !dbg !44
  %927 = insertelement <2 x bfloat> %926, bfloat %857, i64 1, !dbg !44
  %928 = bitcast <2 x bfloat> %927 to i32, !dbg !44
  %929 = insertelement <2 x bfloat> poison, bfloat %858, i64 0, !dbg !44
  %930 = insertelement <2 x bfloat> %929, bfloat %859, i64 1, !dbg !44
  %931 = bitcast <2 x bfloat> %930 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %444, i32 %922, i32 %925, i32 %928, i32 %931) #2, !dbg !44
  %932 = insertelement <2 x bfloat> poison, bfloat %860, i64 0, !dbg !44
  %933 = insertelement <2 x bfloat> %932, bfloat %861, i64 1, !dbg !44
  %934 = bitcast <2 x bfloat> %933 to i32, !dbg !44
  %935 = insertelement <2 x bfloat> poison, bfloat %862, i64 0, !dbg !44
  %936 = insertelement <2 x bfloat> %935, bfloat %863, i64 1, !dbg !44
  %937 = bitcast <2 x bfloat> %936 to i32, !dbg !44
  %938 = insertelement <2 x bfloat> poison, bfloat %864, i64 0, !dbg !44
  %939 = insertelement <2 x bfloat> %938, bfloat %865, i64 1, !dbg !44
  %940 = bitcast <2 x bfloat> %939 to i32, !dbg !44
  %941 = insertelement <2 x bfloat> poison, bfloat %866, i64 0, !dbg !44
  %942 = insertelement <2 x bfloat> %941, bfloat %867, i64 1, !dbg !44
  %943 = bitcast <2 x bfloat> %942 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %447, i32 %934, i32 %937, i32 %940, i32 %943) #2, !dbg !44
  %944 = insertelement <2 x bfloat> poison, bfloat %868, i64 0, !dbg !44
  %945 = insertelement <2 x bfloat> %944, bfloat %869, i64 1, !dbg !44
  %946 = bitcast <2 x bfloat> %945 to i32, !dbg !44
  %947 = insertelement <2 x bfloat> poison, bfloat %870, i64 0, !dbg !44
  %948 = insertelement <2 x bfloat> %947, bfloat %871, i64 1, !dbg !44
  %949 = bitcast <2 x bfloat> %948 to i32, !dbg !44
  %950 = insertelement <2 x bfloat> poison, bfloat %872, i64 0, !dbg !44
  %951 = insertelement <2 x bfloat> %950, bfloat %873, i64 1, !dbg !44
  %952 = bitcast <2 x bfloat> %951 to i32, !dbg !44
  %953 = insertelement <2 x bfloat> poison, bfloat %874, i64 0, !dbg !44
  %954 = insertelement <2 x bfloat> %953, bfloat %875, i64 1, !dbg !44
  %955 = bitcast <2 x bfloat> %954 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %450, i32 %946, i32 %949, i32 %952, i32 %955) #2, !dbg !44
  %956 = insertelement <2 x bfloat> poison, bfloat %876, i64 0, !dbg !44
  %957 = insertelement <2 x bfloat> %956, bfloat %877, i64 1, !dbg !44
  %958 = bitcast <2 x bfloat> %957 to i32, !dbg !44
  %959 = insertelement <2 x bfloat> poison, bfloat %878, i64 0, !dbg !44
  %960 = insertelement <2 x bfloat> %959, bfloat %879, i64 1, !dbg !44
  %961 = bitcast <2 x bfloat> %960 to i32, !dbg !44
  %962 = insertelement <2 x bfloat> poison, bfloat %880, i64 0, !dbg !44
  %963 = insertelement <2 x bfloat> %962, bfloat %881, i64 1, !dbg !44
  %964 = bitcast <2 x bfloat> %963 to i32, !dbg !44
  %965 = insertelement <2 x bfloat> poison, bfloat %882, i64 0, !dbg !44
  %966 = insertelement <2 x bfloat> %965, bfloat %883, i64 1, !dbg !44
  %967 = bitcast <2 x bfloat> %966 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %453, i32 %958, i32 %961, i32 %964, i32 %967) #2, !dbg !44
  %968 = insertelement <2 x bfloat> poison, bfloat %884, i64 0, !dbg !44
  %969 = insertelement <2 x bfloat> %968, bfloat %885, i64 1, !dbg !44
  %970 = bitcast <2 x bfloat> %969 to i32, !dbg !44
  %971 = insertelement <2 x bfloat> poison, bfloat %886, i64 0, !dbg !44
  %972 = insertelement <2 x bfloat> %971, bfloat %887, i64 1, !dbg !44
  %973 = bitcast <2 x bfloat> %972 to i32, !dbg !44
  %974 = insertelement <2 x bfloat> poison, bfloat %888, i64 0, !dbg !44
  %975 = insertelement <2 x bfloat> %974, bfloat %889, i64 1, !dbg !44
  %976 = bitcast <2 x bfloat> %975 to i32, !dbg !44
  %977 = insertelement <2 x bfloat> poison, bfloat %890, i64 0, !dbg !44
  %978 = insertelement <2 x bfloat> %977, bfloat %891, i64 1, !dbg !44
  %979 = bitcast <2 x bfloat> %978 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %456, i32 %970, i32 %973, i32 %976, i32 %979) #2, !dbg !44
  %980 = insertelement <2 x bfloat> poison, bfloat %892, i64 0, !dbg !44
  %981 = insertelement <2 x bfloat> %980, bfloat %893, i64 1, !dbg !44
  %982 = bitcast <2 x bfloat> %981 to i32, !dbg !44
  %983 = insertelement <2 x bfloat> poison, bfloat %894, i64 0, !dbg !44
  %984 = insertelement <2 x bfloat> %983, bfloat %895, i64 1, !dbg !44
  %985 = bitcast <2 x bfloat> %984 to i32, !dbg !44
  %986 = insertelement <2 x bfloat> poison, bfloat %896, i64 0, !dbg !44
  %987 = insertelement <2 x bfloat> %986, bfloat %897, i64 1, !dbg !44
  %988 = bitcast <2 x bfloat> %987 to i32, !dbg !44
  %989 = insertelement <2 x bfloat> poison, bfloat %898, i64 0, !dbg !44
  %990 = insertelement <2 x bfloat> %989, bfloat %899, i64 1, !dbg !44
  %991 = bitcast <2 x bfloat> %990 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %459, i32 %982, i32 %985, i32 %988, i32 %991) #2, !dbg !44
  %992 = insertelement <2 x bfloat> poison, bfloat %900, i64 0, !dbg !44
  %993 = insertelement <2 x bfloat> %992, bfloat %901, i64 1, !dbg !44
  %994 = bitcast <2 x bfloat> %993 to i32, !dbg !44
  %995 = insertelement <2 x bfloat> poison, bfloat %902, i64 0, !dbg !44
  %996 = insertelement <2 x bfloat> %995, bfloat %903, i64 1, !dbg !44
  %997 = bitcast <2 x bfloat> %996 to i32, !dbg !44
  %998 = insertelement <2 x bfloat> poison, bfloat %904, i64 0, !dbg !44
  %999 = insertelement <2 x bfloat> %998, bfloat %905, i64 1, !dbg !44
  %1000 = bitcast <2 x bfloat> %999 to i32, !dbg !44
  %1001 = insertelement <2 x bfloat> poison, bfloat %906, i64 0, !dbg !44
  %1002 = insertelement <2 x bfloat> %1001, bfloat %907, i64 1, !dbg !44
  %1003 = bitcast <2 x bfloat> %1002 to i32, !dbg !44
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %462, i32 %994, i32 %997, i32 %1000, i32 %1003) #2, !dbg !44
  %1004 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx709, !dbg !29
  %1005 = getelementptr bfloat, ptr addrspace(1) %1004, i64 %67, !dbg !29
  %1006 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx710, !dbg !29
  %1007 = getelementptr bfloat, ptr addrspace(1) %1006, i64 %67, !dbg !29
  %1008 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx711, !dbg !29
  %1009 = getelementptr bfloat, ptr addrspace(1) %1008, i64 %67, !dbg !29
  %1010 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx712, !dbg !29
  %1011 = getelementptr bfloat, ptr addrspace(1) %1010, i64 %67, !dbg !29
  %1012 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx713, !dbg !29
  %1013 = getelementptr bfloat, ptr addrspace(1) %1012, i64 %67, !dbg !29
  %1014 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx714, !dbg !29
  %1015 = getelementptr bfloat, ptr addrspace(1) %1014, i64 %67, !dbg !29
  %1016 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx715, !dbg !29
  %1017 = getelementptr bfloat, ptr addrspace(1) %1016, i64 %67, !dbg !29
  %1018 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx716, !dbg !29
  %1019 = getelementptr bfloat, ptr addrspace(1) %1018, i64 %67, !dbg !29
  store <2 x bfloat> %909, ptr addrspace(3) %474, align 4, !dbg !29
  store <2 x bfloat> %912, ptr addrspace(3) %478, align 4, !dbg !29
  store <2 x bfloat> %915, ptr addrspace(3) %481, align 4, !dbg !29
  store <2 x bfloat> %918, ptr addrspace(3) %486, align 4, !dbg !29
  store <2 x bfloat> %921, ptr addrspace(3) %489, align 4, !dbg !29
  store <2 x bfloat> %924, ptr addrspace(3) %494, align 4, !dbg !29
  store <2 x bfloat> %927, ptr addrspace(3) %497, align 4, !dbg !29
  store <2 x bfloat> %930, ptr addrspace(3) %502, align 4, !dbg !29
  store <2 x bfloat> %933, ptr addrspace(3) %505, align 4, !dbg !29
  store <2 x bfloat> %936, ptr addrspace(3) %510, align 4, !dbg !29
  store <2 x bfloat> %939, ptr addrspace(3) %513, align 4, !dbg !29
  store <2 x bfloat> %942, ptr addrspace(3) %518, align 4, !dbg !29
  store <2 x bfloat> %945, ptr addrspace(3) %521, align 4, !dbg !29
  store <2 x bfloat> %948, ptr addrspace(3) %526, align 4, !dbg !29
  store <2 x bfloat> %951, ptr addrspace(3) %529, align 4, !dbg !29
  store <2 x bfloat> %954, ptr addrspace(3) %534, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %1020 = load <4 x i32>, ptr addrspace(3) %537, align 16, !dbg !29
  %1021 = load <4 x i32>, ptr addrspace(3) %542, align 16, !dbg !29
  %1022 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !29
  %1023 = load <4 x i32>, ptr addrspace(3) %552, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  store <2 x bfloat> %957, ptr addrspace(3) %474, align 4, !dbg !29
  store <2 x bfloat> %960, ptr addrspace(3) %478, align 4, !dbg !29
  store <2 x bfloat> %963, ptr addrspace(3) %481, align 4, !dbg !29
  store <2 x bfloat> %966, ptr addrspace(3) %486, align 4, !dbg !29
  store <2 x bfloat> %969, ptr addrspace(3) %489, align 4, !dbg !29
  store <2 x bfloat> %972, ptr addrspace(3) %494, align 4, !dbg !29
  store <2 x bfloat> %975, ptr addrspace(3) %497, align 4, !dbg !29
  store <2 x bfloat> %978, ptr addrspace(3) %502, align 4, !dbg !29
  store <2 x bfloat> %981, ptr addrspace(3) %505, align 4, !dbg !29
  store <2 x bfloat> %984, ptr addrspace(3) %510, align 4, !dbg !29
  store <2 x bfloat> %987, ptr addrspace(3) %513, align 4, !dbg !29
  store <2 x bfloat> %990, ptr addrspace(3) %518, align 4, !dbg !29
  store <2 x bfloat> %993, ptr addrspace(3) %521, align 4, !dbg !29
  store <2 x bfloat> %996, ptr addrspace(3) %526, align 4, !dbg !29
  store <2 x bfloat> %999, ptr addrspace(3) %529, align 4, !dbg !29
  store <2 x bfloat> %1002, ptr addrspace(3) %534, align 4, !dbg !29
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !29
  %1024 = load <4 x i32>, ptr addrspace(3) %537, align 16, !dbg !29
  %1025 = load <4 x i32>, ptr addrspace(3) %542, align 16, !dbg !29
  %1026 = load <4 x i32>, ptr addrspace(3) %547, align 16, !dbg !29
  %1027 = load <4 x i32>, ptr addrspace(3) %552, align 16, !dbg !29
  %.extract1016 = extractelement <4 x i32> %1020, i64 0, !dbg !29
  %.extract1018 = extractelement <4 x i32> %1020, i64 1, !dbg !29
  %.extract1020 = extractelement <4 x i32> %1020, i64 2, !dbg !29
  %.extract1022 = extractelement <4 x i32> %1020, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1016, i32 %.extract1018, i32 %.extract1020, i32 %.extract1022, ptr addrspace(1) %1005, i1 %70) #2, !dbg !29
  %.extract1024 = extractelement <4 x i32> %1021, i64 0, !dbg !29
  %.extract1026 = extractelement <4 x i32> %1021, i64 1, !dbg !29
  %.extract1028 = extractelement <4 x i32> %1021, i64 2, !dbg !29
  %.extract1030 = extractelement <4 x i32> %1021, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1024, i32 %.extract1026, i32 %.extract1028, i32 %.extract1030, ptr addrspace(1) %1007, i1 %70) #2, !dbg !29
  %.extract1032 = extractelement <4 x i32> %1022, i64 0, !dbg !29
  %.extract1034 = extractelement <4 x i32> %1022, i64 1, !dbg !29
  %.extract1036 = extractelement <4 x i32> %1022, i64 2, !dbg !29
  %.extract1038 = extractelement <4 x i32> %1022, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1032, i32 %.extract1034, i32 %.extract1036, i32 %.extract1038, ptr addrspace(1) %1009, i1 %70) #2, !dbg !29
  %.extract1040 = extractelement <4 x i32> %1023, i64 0, !dbg !29
  %.extract1042 = extractelement <4 x i32> %1023, i64 1, !dbg !29
  %.extract1044 = extractelement <4 x i32> %1023, i64 2, !dbg !29
  %.extract1046 = extractelement <4 x i32> %1023, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1040, i32 %.extract1042, i32 %.extract1044, i32 %.extract1046, ptr addrspace(1) %1011, i1 %70) #2, !dbg !29
  %.extract1048 = extractelement <4 x i32> %1024, i64 0, !dbg !29
  %.extract1050 = extractelement <4 x i32> %1024, i64 1, !dbg !29
  %.extract1052 = extractelement <4 x i32> %1024, i64 2, !dbg !29
  %.extract1054 = extractelement <4 x i32> %1024, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1048, i32 %.extract1050, i32 %.extract1052, i32 %.extract1054, ptr addrspace(1) %1013, i1 %70) #2, !dbg !29
  %.extract1056 = extractelement <4 x i32> %1025, i64 0, !dbg !29
  %.extract1058 = extractelement <4 x i32> %1025, i64 1, !dbg !29
  %.extract1060 = extractelement <4 x i32> %1025, i64 2, !dbg !29
  %.extract1062 = extractelement <4 x i32> %1025, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1056, i32 %.extract1058, i32 %.extract1060, i32 %.extract1062, ptr addrspace(1) %1015, i1 %70) #2, !dbg !29
  %.extract1064 = extractelement <4 x i32> %1026, i64 0, !dbg !29
  %.extract1066 = extractelement <4 x i32> %1026, i64 1, !dbg !29
  %.extract1068 = extractelement <4 x i32> %1026, i64 2, !dbg !29
  %.extract1070 = extractelement <4 x i32> %1026, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1064, i32 %.extract1066, i32 %.extract1068, i32 %.extract1070, ptr addrspace(1) %1017, i1 %70) #2, !dbg !29
  %.extract1072 = extractelement <4 x i32> %1027, i64 0, !dbg !29
  %.extract1074 = extractelement <4 x i32> %1027, i64 1, !dbg !29
  %.extract1076 = extractelement <4 x i32> %1027, i64 2, !dbg !29
  %.extract1078 = extractelement <4 x i32> %1027, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1072, i32 %.extract1074, i32 %.extract1076, i32 %.extract1078, ptr addrspace(1) %1019, i1 %70) #2, !dbg !29
  %1028 = fptrunc float %708 to bfloat, !dbg !45
  %1029 = fptrunc float %709 to bfloat, !dbg !45
  %1030 = fptrunc float %710 to bfloat, !dbg !45
  %1031 = fptrunc float %711 to bfloat, !dbg !45
  %1032 = fptrunc float %712 to bfloat, !dbg !45
  %1033 = fptrunc float %713 to bfloat, !dbg !45
  %1034 = fptrunc float %714 to bfloat, !dbg !45
  %1035 = fptrunc float %715 to bfloat, !dbg !45
  %1036 = fptrunc float %716 to bfloat, !dbg !45
  %1037 = fptrunc float %717 to bfloat, !dbg !45
  %1038 = fptrunc float %718 to bfloat, !dbg !45
  %1039 = fptrunc float %719 to bfloat, !dbg !45
  %1040 = fptrunc float %720 to bfloat, !dbg !45
  %1041 = fptrunc float %721 to bfloat, !dbg !45
  %1042 = fptrunc float %722 to bfloat, !dbg !45
  %1043 = fptrunc float %723 to bfloat, !dbg !45
  %1044 = fptrunc float %724 to bfloat, !dbg !45
  %1045 = fptrunc float %725 to bfloat, !dbg !45
  %1046 = fptrunc float %726 to bfloat, !dbg !45
  %1047 = fptrunc float %727 to bfloat, !dbg !45
  %1048 = fptrunc float %728 to bfloat, !dbg !45
  %1049 = fptrunc float %729 to bfloat, !dbg !45
  %1050 = fptrunc float %730 to bfloat, !dbg !45
  %1051 = fptrunc float %731 to bfloat, !dbg !45
  %1052 = fptrunc float %732 to bfloat, !dbg !45
  %1053 = fptrunc float %733 to bfloat, !dbg !45
  %1054 = fptrunc float %734 to bfloat, !dbg !45
  %1055 = fptrunc float %735 to bfloat, !dbg !45
  %1056 = fptrunc float %736 to bfloat, !dbg !45
  %1057 = fptrunc float %737 to bfloat, !dbg !45
  %1058 = fptrunc float %738 to bfloat, !dbg !45
  %1059 = fptrunc float %739 to bfloat, !dbg !45
  %1060 = fptrunc float %740 to bfloat, !dbg !45
  %1061 = fptrunc float %741 to bfloat, !dbg !45
  %1062 = fptrunc float %742 to bfloat, !dbg !45
  %1063 = fptrunc float %743 to bfloat, !dbg !45
  %1064 = fptrunc float %744 to bfloat, !dbg !45
  %1065 = fptrunc float %745 to bfloat, !dbg !45
  %1066 = fptrunc float %746 to bfloat, !dbg !45
  %1067 = fptrunc float %747 to bfloat, !dbg !45
  %1068 = fptrunc float %748 to bfloat, !dbg !45
  %1069 = fptrunc float %749 to bfloat, !dbg !45
  %1070 = fptrunc float %750 to bfloat, !dbg !45
  %1071 = fptrunc float %751 to bfloat, !dbg !45
  %1072 = fptrunc float %752 to bfloat, !dbg !45
  %1073 = fptrunc float %753 to bfloat, !dbg !45
  %1074 = fptrunc float %754 to bfloat, !dbg !45
  %1075 = fptrunc float %755 to bfloat, !dbg !45
  %1076 = fptrunc float %756 to bfloat, !dbg !45
  %1077 = fptrunc float %757 to bfloat, !dbg !45
  %1078 = fptrunc float %758 to bfloat, !dbg !45
  %1079 = fptrunc float %759 to bfloat, !dbg !45
  %1080 = fptrunc float %760 to bfloat, !dbg !45
  %1081 = fptrunc float %761 to bfloat, !dbg !45
  %1082 = fptrunc float %762 to bfloat, !dbg !45
  %1083 = fptrunc float %763 to bfloat, !dbg !45
  %1084 = fptrunc float %764 to bfloat, !dbg !45
  %1085 = fptrunc float %765 to bfloat, !dbg !45
  %1086 = fptrunc float %766 to bfloat, !dbg !45
  %1087 = fptrunc float %767 to bfloat, !dbg !45
  %1088 = fptrunc float %768 to bfloat, !dbg !45
  %1089 = fptrunc float %769 to bfloat, !dbg !45
  %1090 = fptrunc float %770 to bfloat, !dbg !45
  %1091 = fptrunc float %771 to bfloat, !dbg !45
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !45
  %1092 = insertelement <2 x bfloat> poison, bfloat %1028, i64 0, !dbg !45
  %1093 = insertelement <2 x bfloat> %1092, bfloat %1029, i64 1, !dbg !45
  %1094 = bitcast <2 x bfloat> %1093 to i32, !dbg !45
  %1095 = insertelement <2 x bfloat> poison, bfloat %1030, i64 0, !dbg !45
  %1096 = insertelement <2 x bfloat> %1095, bfloat %1031, i64 1, !dbg !45
  %1097 = bitcast <2 x bfloat> %1096 to i32, !dbg !45
  %1098 = insertelement <2 x bfloat> poison, bfloat %1032, i64 0, !dbg !45
  %1099 = insertelement <2 x bfloat> %1098, bfloat %1033, i64 1, !dbg !45
  %1100 = bitcast <2 x bfloat> %1099 to i32, !dbg !45
  %1101 = insertelement <2 x bfloat> poison, bfloat %1034, i64 0, !dbg !45
  %1102 = insertelement <2 x bfloat> %1101, bfloat %1035, i64 1, !dbg !45
  %1103 = bitcast <2 x bfloat> %1102 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %554, i32 %1094, i32 %1097, i32 %1100, i32 %1103) #2, !dbg !45
  %1104 = insertelement <2 x bfloat> poison, bfloat %1036, i64 0, !dbg !45
  %1105 = insertelement <2 x bfloat> %1104, bfloat %1037, i64 1, !dbg !45
  %1106 = bitcast <2 x bfloat> %1105 to i32, !dbg !45
  %1107 = insertelement <2 x bfloat> poison, bfloat %1038, i64 0, !dbg !45
  %1108 = insertelement <2 x bfloat> %1107, bfloat %1039, i64 1, !dbg !45
  %1109 = bitcast <2 x bfloat> %1108 to i32, !dbg !45
  %1110 = insertelement <2 x bfloat> poison, bfloat %1040, i64 0, !dbg !45
  %1111 = insertelement <2 x bfloat> %1110, bfloat %1041, i64 1, !dbg !45
  %1112 = bitcast <2 x bfloat> %1111 to i32, !dbg !45
  %1113 = insertelement <2 x bfloat> poison, bfloat %1042, i64 0, !dbg !45
  %1114 = insertelement <2 x bfloat> %1113, bfloat %1043, i64 1, !dbg !45
  %1115 = bitcast <2 x bfloat> %1114 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %556, i32 %1106, i32 %1109, i32 %1112, i32 %1115) #2, !dbg !45
  %1116 = insertelement <2 x bfloat> poison, bfloat %1044, i64 0, !dbg !45
  %1117 = insertelement <2 x bfloat> %1116, bfloat %1045, i64 1, !dbg !45
  %1118 = bitcast <2 x bfloat> %1117 to i32, !dbg !45
  %1119 = insertelement <2 x bfloat> poison, bfloat %1046, i64 0, !dbg !45
  %1120 = insertelement <2 x bfloat> %1119, bfloat %1047, i64 1, !dbg !45
  %1121 = bitcast <2 x bfloat> %1120 to i32, !dbg !45
  %1122 = insertelement <2 x bfloat> poison, bfloat %1048, i64 0, !dbg !45
  %1123 = insertelement <2 x bfloat> %1122, bfloat %1049, i64 1, !dbg !45
  %1124 = bitcast <2 x bfloat> %1123 to i32, !dbg !45
  %1125 = insertelement <2 x bfloat> poison, bfloat %1050, i64 0, !dbg !45
  %1126 = insertelement <2 x bfloat> %1125, bfloat %1051, i64 1, !dbg !45
  %1127 = bitcast <2 x bfloat> %1126 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %558, i32 %1118, i32 %1121, i32 %1124, i32 %1127) #2, !dbg !45
  %1128 = insertelement <2 x bfloat> poison, bfloat %1052, i64 0, !dbg !45
  %1129 = insertelement <2 x bfloat> %1128, bfloat %1053, i64 1, !dbg !45
  %1130 = bitcast <2 x bfloat> %1129 to i32, !dbg !45
  %1131 = insertelement <2 x bfloat> poison, bfloat %1054, i64 0, !dbg !45
  %1132 = insertelement <2 x bfloat> %1131, bfloat %1055, i64 1, !dbg !45
  %1133 = bitcast <2 x bfloat> %1132 to i32, !dbg !45
  %1134 = insertelement <2 x bfloat> poison, bfloat %1056, i64 0, !dbg !45
  %1135 = insertelement <2 x bfloat> %1134, bfloat %1057, i64 1, !dbg !45
  %1136 = bitcast <2 x bfloat> %1135 to i32, !dbg !45
  %1137 = insertelement <2 x bfloat> poison, bfloat %1058, i64 0, !dbg !45
  %1138 = insertelement <2 x bfloat> %1137, bfloat %1059, i64 1, !dbg !45
  %1139 = bitcast <2 x bfloat> %1138 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %560, i32 %1130, i32 %1133, i32 %1136, i32 %1139) #2, !dbg !45
  %1140 = insertelement <2 x bfloat> poison, bfloat %1060, i64 0, !dbg !45
  %1141 = insertelement <2 x bfloat> %1140, bfloat %1061, i64 1, !dbg !45
  %1142 = bitcast <2 x bfloat> %1141 to i32, !dbg !45
  %1143 = insertelement <2 x bfloat> poison, bfloat %1062, i64 0, !dbg !45
  %1144 = insertelement <2 x bfloat> %1143, bfloat %1063, i64 1, !dbg !45
  %1145 = bitcast <2 x bfloat> %1144 to i32, !dbg !45
  %1146 = insertelement <2 x bfloat> poison, bfloat %1064, i64 0, !dbg !45
  %1147 = insertelement <2 x bfloat> %1146, bfloat %1065, i64 1, !dbg !45
  %1148 = bitcast <2 x bfloat> %1147 to i32, !dbg !45
  %1149 = insertelement <2 x bfloat> poison, bfloat %1066, i64 0, !dbg !45
  %1150 = insertelement <2 x bfloat> %1149, bfloat %1067, i64 1, !dbg !45
  %1151 = bitcast <2 x bfloat> %1150 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %562, i32 %1142, i32 %1145, i32 %1148, i32 %1151) #2, !dbg !45
  %1152 = insertelement <2 x bfloat> poison, bfloat %1068, i64 0, !dbg !45
  %1153 = insertelement <2 x bfloat> %1152, bfloat %1069, i64 1, !dbg !45
  %1154 = bitcast <2 x bfloat> %1153 to i32, !dbg !45
  %1155 = insertelement <2 x bfloat> poison, bfloat %1070, i64 0, !dbg !45
  %1156 = insertelement <2 x bfloat> %1155, bfloat %1071, i64 1, !dbg !45
  %1157 = bitcast <2 x bfloat> %1156 to i32, !dbg !45
  %1158 = insertelement <2 x bfloat> poison, bfloat %1072, i64 0, !dbg !45
  %1159 = insertelement <2 x bfloat> %1158, bfloat %1073, i64 1, !dbg !45
  %1160 = bitcast <2 x bfloat> %1159 to i32, !dbg !45
  %1161 = insertelement <2 x bfloat> poison, bfloat %1074, i64 0, !dbg !45
  %1162 = insertelement <2 x bfloat> %1161, bfloat %1075, i64 1, !dbg !45
  %1163 = bitcast <2 x bfloat> %1162 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %564, i32 %1154, i32 %1157, i32 %1160, i32 %1163) #2, !dbg !45
  %1164 = insertelement <2 x bfloat> poison, bfloat %1076, i64 0, !dbg !45
  %1165 = insertelement <2 x bfloat> %1164, bfloat %1077, i64 1, !dbg !45
  %1166 = bitcast <2 x bfloat> %1165 to i32, !dbg !45
  %1167 = insertelement <2 x bfloat> poison, bfloat %1078, i64 0, !dbg !45
  %1168 = insertelement <2 x bfloat> %1167, bfloat %1079, i64 1, !dbg !45
  %1169 = bitcast <2 x bfloat> %1168 to i32, !dbg !45
  %1170 = insertelement <2 x bfloat> poison, bfloat %1080, i64 0, !dbg !45
  %1171 = insertelement <2 x bfloat> %1170, bfloat %1081, i64 1, !dbg !45
  %1172 = bitcast <2 x bfloat> %1171 to i32, !dbg !45
  %1173 = insertelement <2 x bfloat> poison, bfloat %1082, i64 0, !dbg !45
  %1174 = insertelement <2 x bfloat> %1173, bfloat %1083, i64 1, !dbg !45
  %1175 = bitcast <2 x bfloat> %1174 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %566, i32 %1166, i32 %1169, i32 %1172, i32 %1175) #2, !dbg !45
  %1176 = insertelement <2 x bfloat> poison, bfloat %1084, i64 0, !dbg !45
  %1177 = insertelement <2 x bfloat> %1176, bfloat %1085, i64 1, !dbg !45
  %1178 = bitcast <2 x bfloat> %1177 to i32, !dbg !45
  %1179 = insertelement <2 x bfloat> poison, bfloat %1086, i64 0, !dbg !45
  %1180 = insertelement <2 x bfloat> %1179, bfloat %1087, i64 1, !dbg !45
  %1181 = bitcast <2 x bfloat> %1180 to i32, !dbg !45
  %1182 = insertelement <2 x bfloat> poison, bfloat %1088, i64 0, !dbg !45
  %1183 = insertelement <2 x bfloat> %1182, bfloat %1089, i64 1, !dbg !45
  %1184 = bitcast <2 x bfloat> %1183 to i32, !dbg !45
  %1185 = insertelement <2 x bfloat> poison, bfloat %1090, i64 0, !dbg !45
  %1186 = insertelement <2 x bfloat> %1185, bfloat %1091, i64 1, !dbg !45
  %1187 = bitcast <2 x bfloat> %1186 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %568, i32 %1178, i32 %1181, i32 %1184, i32 %1187) #2, !dbg !45
  %1188 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx811, !dbg !30
  %1189 = getelementptr bfloat, ptr addrspace(1) %1188, i64 %67, !dbg !30
  %1190 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx812, !dbg !30
  %1191 = getelementptr bfloat, ptr addrspace(1) %1190, i64 %67, !dbg !30
  %1192 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx813, !dbg !30
  %1193 = getelementptr bfloat, ptr addrspace(1) %1192, i64 %67, !dbg !30
  %1194 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx814, !dbg !30
  %1195 = getelementptr bfloat, ptr addrspace(1) %1194, i64 %67, !dbg !30
  %1196 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx815, !dbg !30
  %1197 = getelementptr bfloat, ptr addrspace(1) %1196, i64 %67, !dbg !30
  %1198 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx816, !dbg !30
  %1199 = getelementptr bfloat, ptr addrspace(1) %1198, i64 %67, !dbg !30
  %1200 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx817, !dbg !30
  %1201 = getelementptr bfloat, ptr addrspace(1) %1200, i64 %67, !dbg !30
  %1202 = getelementptr i8, ptr addrspace(1) %843, i64 %.idx818, !dbg !30
  %1203 = getelementptr bfloat, ptr addrspace(1) %1202, i64 %67, !dbg !30
  store <2 x bfloat> %1093, ptr addrspace(3) %569, align 4, !dbg !30
  store <2 x bfloat> %1096, ptr addrspace(3) %570, align 4, !dbg !30
  store <2 x bfloat> %1099, ptr addrspace(3) %571, align 4, !dbg !30
  store <2 x bfloat> %1102, ptr addrspace(3) %572, align 4, !dbg !30
  store <2 x bfloat> %1105, ptr addrspace(3) %573, align 4, !dbg !30
  store <2 x bfloat> %1108, ptr addrspace(3) %574, align 4, !dbg !30
  store <2 x bfloat> %1111, ptr addrspace(3) %575, align 4, !dbg !30
  store <2 x bfloat> %1114, ptr addrspace(3) %576, align 4, !dbg !30
  store <2 x bfloat> %1117, ptr addrspace(3) %577, align 4, !dbg !30
  store <2 x bfloat> %1120, ptr addrspace(3) %578, align 4, !dbg !30
  store <2 x bfloat> %1123, ptr addrspace(3) %579, align 4, !dbg !30
  store <2 x bfloat> %1126, ptr addrspace(3) %580, align 4, !dbg !30
  store <2 x bfloat> %1129, ptr addrspace(3) %581, align 4, !dbg !30
  store <2 x bfloat> %1132, ptr addrspace(3) %582, align 4, !dbg !30
  store <2 x bfloat> %1135, ptr addrspace(3) %583, align 4, !dbg !30
  store <2 x bfloat> %1138, ptr addrspace(3) %584, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1204 = load <4 x i32>, ptr addrspace(3) %585, align 16, !dbg !30
  %1205 = load <4 x i32>, ptr addrspace(3) %586, align 16, !dbg !30
  %1206 = load <4 x i32>, ptr addrspace(3) %587, align 16, !dbg !30
  %1207 = load <4 x i32>, ptr addrspace(3) %588, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  store <2 x bfloat> %1141, ptr addrspace(3) %569, align 4, !dbg !30
  store <2 x bfloat> %1144, ptr addrspace(3) %570, align 4, !dbg !30
  store <2 x bfloat> %1147, ptr addrspace(3) %571, align 4, !dbg !30
  store <2 x bfloat> %1150, ptr addrspace(3) %572, align 4, !dbg !30
  store <2 x bfloat> %1153, ptr addrspace(3) %573, align 4, !dbg !30
  store <2 x bfloat> %1156, ptr addrspace(3) %574, align 4, !dbg !30
  store <2 x bfloat> %1159, ptr addrspace(3) %575, align 4, !dbg !30
  store <2 x bfloat> %1162, ptr addrspace(3) %576, align 4, !dbg !30
  store <2 x bfloat> %1165, ptr addrspace(3) %577, align 4, !dbg !30
  store <2 x bfloat> %1168, ptr addrspace(3) %578, align 4, !dbg !30
  store <2 x bfloat> %1171, ptr addrspace(3) %579, align 4, !dbg !30
  store <2 x bfloat> %1174, ptr addrspace(3) %580, align 4, !dbg !30
  store <2 x bfloat> %1177, ptr addrspace(3) %581, align 4, !dbg !30
  store <2 x bfloat> %1180, ptr addrspace(3) %582, align 4, !dbg !30
  store <2 x bfloat> %1183, ptr addrspace(3) %583, align 4, !dbg !30
  store <2 x bfloat> %1186, ptr addrspace(3) %584, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %1208 = load <4 x i32>, ptr addrspace(3) %585, align 16, !dbg !30
  %1209 = load <4 x i32>, ptr addrspace(3) %586, align 16, !dbg !30
  %1210 = load <4 x i32>, ptr addrspace(3) %587, align 16, !dbg !30
  %1211 = load <4 x i32>, ptr addrspace(3) %588, align 16, !dbg !30
  %.extract1080 = extractelement <4 x i32> %1204, i64 0, !dbg !30
  %.extract1082 = extractelement <4 x i32> %1204, i64 1, !dbg !30
  %.extract1084 = extractelement <4 x i32> %1204, i64 2, !dbg !30
  %.extract1086 = extractelement <4 x i32> %1204, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1080, i32 %.extract1082, i32 %.extract1084, i32 %.extract1086, ptr addrspace(1) %1189, i1 %70) #2, !dbg !30
  %.extract1088 = extractelement <4 x i32> %1205, i64 0, !dbg !30
  %.extract1090 = extractelement <4 x i32> %1205, i64 1, !dbg !30
  %.extract1092 = extractelement <4 x i32> %1205, i64 2, !dbg !30
  %.extract1094 = extractelement <4 x i32> %1205, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1088, i32 %.extract1090, i32 %.extract1092, i32 %.extract1094, ptr addrspace(1) %1191, i1 %70) #2, !dbg !30
  %.extract1096 = extractelement <4 x i32> %1206, i64 0, !dbg !30
  %.extract1098 = extractelement <4 x i32> %1206, i64 1, !dbg !30
  %.extract1100 = extractelement <4 x i32> %1206, i64 2, !dbg !30
  %.extract1102 = extractelement <4 x i32> %1206, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1096, i32 %.extract1098, i32 %.extract1100, i32 %.extract1102, ptr addrspace(1) %1193, i1 %70) #2, !dbg !30
  %.extract1104 = extractelement <4 x i32> %1207, i64 0, !dbg !30
  %.extract1106 = extractelement <4 x i32> %1207, i64 1, !dbg !30
  %.extract1108 = extractelement <4 x i32> %1207, i64 2, !dbg !30
  %.extract1110 = extractelement <4 x i32> %1207, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1104, i32 %.extract1106, i32 %.extract1108, i32 %.extract1110, ptr addrspace(1) %1195, i1 %70) #2, !dbg !30
  %.extract1112 = extractelement <4 x i32> %1208, i64 0, !dbg !30
  %.extract1114 = extractelement <4 x i32> %1208, i64 1, !dbg !30
  %.extract1116 = extractelement <4 x i32> %1208, i64 2, !dbg !30
  %.extract1118 = extractelement <4 x i32> %1208, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1112, i32 %.extract1114, i32 %.extract1116, i32 %.extract1118, ptr addrspace(1) %1197, i1 %70) #2, !dbg !30
  %.extract1120 = extractelement <4 x i32> %1209, i64 0, !dbg !30
  %.extract1122 = extractelement <4 x i32> %1209, i64 1, !dbg !30
  %.extract1124 = extractelement <4 x i32> %1209, i64 2, !dbg !30
  %.extract1126 = extractelement <4 x i32> %1209, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1120, i32 %.extract1122, i32 %.extract1124, i32 %.extract1126, ptr addrspace(1) %1199, i1 %70) #2, !dbg !30
  %.extract1128 = extractelement <4 x i32> %1210, i64 0, !dbg !30
  %.extract1130 = extractelement <4 x i32> %1210, i64 1, !dbg !30
  %.extract1132 = extractelement <4 x i32> %1210, i64 2, !dbg !30
  %.extract1134 = extractelement <4 x i32> %1210, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1128, i32 %.extract1130, i32 %.extract1132, i32 %.extract1134, ptr addrspace(1) %1201, i1 %70) #2, !dbg !30
  %.extract1136 = extractelement <4 x i32> %1211, i64 0, !dbg !30
  %.extract1138 = extractelement <4 x i32> %1211, i64 1, !dbg !30
  %.extract1140 = extractelement <4 x i32> %1211, i64 2, !dbg !30
  %.extract1142 = extractelement <4 x i32> %1211, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1136, i32 %.extract1138, i32 %.extract1140, i32 %.extract1142, ptr addrspace(1) %1203, i1 %70) #2, !dbg !30
  tail call void @llvm.nvvm.cp.async.wait.group(i32 6), !dbg !35
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !35
  %1212 = shl i32 %839, 12, !dbg !35
  %1213 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %1212, !dbg !35
  %1214 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %439, !dbg !35
  %1215 = ptrtoint ptr addrspace(3) %1214 to i32, !dbg !35
  %1216 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1215) #2, !dbg !35
  %1217 = extractvalue { i32, i32, i32, i32 } %1216, 0, !dbg !35
  %1218 = extractvalue { i32, i32, i32, i32 } %1216, 1, !dbg !35
  %1219 = extractvalue { i32, i32, i32, i32 } %1216, 2, !dbg !35
  %1220 = extractvalue { i32, i32, i32, i32 } %1216, 3, !dbg !35
  %1221 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %442, !dbg !35
  %1222 = ptrtoint ptr addrspace(3) %1221 to i32, !dbg !35
  %1223 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1222) #2, !dbg !35
  %1224 = extractvalue { i32, i32, i32, i32 } %1223, 0, !dbg !35
  %1225 = extractvalue { i32, i32, i32, i32 } %1223, 1, !dbg !35
  %1226 = extractvalue { i32, i32, i32, i32 } %1223, 2, !dbg !35
  %1227 = extractvalue { i32, i32, i32, i32 } %1223, 3, !dbg !35
  %1228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %445, !dbg !35
  %1229 = ptrtoint ptr addrspace(3) %1228 to i32, !dbg !35
  %1230 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1229) #2, !dbg !35
  %1231 = extractvalue { i32, i32, i32, i32 } %1230, 0, !dbg !35
  %1232 = extractvalue { i32, i32, i32, i32 } %1230, 1, !dbg !35
  %1233 = extractvalue { i32, i32, i32, i32 } %1230, 2, !dbg !35
  %1234 = extractvalue { i32, i32, i32, i32 } %1230, 3, !dbg !35
  %1235 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %448, !dbg !35
  %1236 = ptrtoint ptr addrspace(3) %1235 to i32, !dbg !35
  %1237 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1236) #2, !dbg !35
  %1238 = extractvalue { i32, i32, i32, i32 } %1237, 0, !dbg !35
  %1239 = extractvalue { i32, i32, i32, i32 } %1237, 1, !dbg !35
  %1240 = extractvalue { i32, i32, i32, i32 } %1237, 2, !dbg !35
  %1241 = extractvalue { i32, i32, i32, i32 } %1237, 3, !dbg !35
  %1242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %451, !dbg !35
  %1243 = ptrtoint ptr addrspace(3) %1242 to i32, !dbg !35
  %1244 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1243) #2, !dbg !35
  %1245 = extractvalue { i32, i32, i32, i32 } %1244, 0, !dbg !35
  %1246 = extractvalue { i32, i32, i32, i32 } %1244, 1, !dbg !35
  %1247 = extractvalue { i32, i32, i32, i32 } %1244, 2, !dbg !35
  %1248 = extractvalue { i32, i32, i32, i32 } %1244, 3, !dbg !35
  %1249 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %454, !dbg !35
  %1250 = ptrtoint ptr addrspace(3) %1249 to i32, !dbg !35
  %1251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1250) #2, !dbg !35
  %1252 = extractvalue { i32, i32, i32, i32 } %1251, 0, !dbg !35
  %1253 = extractvalue { i32, i32, i32, i32 } %1251, 1, !dbg !35
  %1254 = extractvalue { i32, i32, i32, i32 } %1251, 2, !dbg !35
  %1255 = extractvalue { i32, i32, i32, i32 } %1251, 3, !dbg !35
  %1256 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %457, !dbg !35
  %1257 = ptrtoint ptr addrspace(3) %1256 to i32, !dbg !35
  %1258 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1257) #2, !dbg !35
  %1259 = extractvalue { i32, i32, i32, i32 } %1258, 0, !dbg !35
  %1260 = extractvalue { i32, i32, i32, i32 } %1258, 1, !dbg !35
  %1261 = extractvalue { i32, i32, i32, i32 } %1258, 2, !dbg !35
  %1262 = extractvalue { i32, i32, i32, i32 } %1258, 3, !dbg !35
  %1263 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1213, i32 %460, !dbg !35
  %1264 = ptrtoint ptr addrspace(3) %1263 to i32, !dbg !35
  %1265 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1264) #2, !dbg !35
  %1266 = extractvalue { i32, i32, i32, i32 } %1265, 0, !dbg !35
  %1267 = extractvalue { i32, i32, i32, i32 } %1265, 1, !dbg !35
  %1268 = extractvalue { i32, i32, i32, i32 } %1265, 2, !dbg !35
  %1269 = extractvalue { i32, i32, i32, i32 } %1265, 3, !dbg !35
  %1270 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %593) #2, !dbg !44
  %1271 = extractvalue { i32, i32, i32, i32 } %1270, 0, !dbg !44
  %1272 = extractvalue { i32, i32, i32, i32 } %1270, 1, !dbg !44
  %1273 = extractvalue { i32, i32, i32, i32 } %1270, 2, !dbg !44
  %1274 = extractvalue { i32, i32, i32, i32 } %1270, 3, !dbg !44
  %1275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %596) #2, !dbg !44
  %1276 = extractvalue { i32, i32, i32, i32 } %1275, 0, !dbg !44
  %1277 = extractvalue { i32, i32, i32, i32 } %1275, 1, !dbg !44
  %1278 = extractvalue { i32, i32, i32, i32 } %1275, 2, !dbg !44
  %1279 = extractvalue { i32, i32, i32, i32 } %1275, 3, !dbg !44
  %1280 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %599) #2, !dbg !44
  %1281 = extractvalue { i32, i32, i32, i32 } %1280, 0, !dbg !44
  %1282 = extractvalue { i32, i32, i32, i32 } %1280, 1, !dbg !44
  %1283 = extractvalue { i32, i32, i32, i32 } %1280, 2, !dbg !44
  %1284 = extractvalue { i32, i32, i32, i32 } %1280, 3, !dbg !44
  %1285 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %602) #2, !dbg !44
  %1286 = extractvalue { i32, i32, i32, i32 } %1285, 0, !dbg !44
  %1287 = extractvalue { i32, i32, i32, i32 } %1285, 1, !dbg !44
  %1288 = extractvalue { i32, i32, i32, i32 } %1285, 2, !dbg !44
  %1289 = extractvalue { i32, i32, i32, i32 } %1285, 3, !dbg !44
  %1290 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %605) #2, !dbg !44
  %1291 = extractvalue { i32, i32, i32, i32 } %1290, 0, !dbg !44
  %1292 = extractvalue { i32, i32, i32, i32 } %1290, 1, !dbg !44
  %1293 = extractvalue { i32, i32, i32, i32 } %1290, 2, !dbg !44
  %1294 = extractvalue { i32, i32, i32, i32 } %1290, 3, !dbg !44
  %1295 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %608) #2, !dbg !44
  %1296 = extractvalue { i32, i32, i32, i32 } %1295, 0, !dbg !44
  %1297 = extractvalue { i32, i32, i32, i32 } %1295, 1, !dbg !44
  %1298 = extractvalue { i32, i32, i32, i32 } %1295, 2, !dbg !44
  %1299 = extractvalue { i32, i32, i32, i32 } %1295, 3, !dbg !44
  %1300 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %611) #2, !dbg !44
  %1301 = extractvalue { i32, i32, i32, i32 } %1300, 0, !dbg !44
  %1302 = extractvalue { i32, i32, i32, i32 } %1300, 1, !dbg !44
  %1303 = extractvalue { i32, i32, i32, i32 } %1300, 2, !dbg !44
  %1304 = extractvalue { i32, i32, i32, i32 } %1300, 3, !dbg !44
  %1305 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %614) #2, !dbg !44
  %1306 = extractvalue { i32, i32, i32, i32 } %1305, 0, !dbg !44
  %1307 = extractvalue { i32, i32, i32, i32 } %1305, 1, !dbg !44
  %1308 = extractvalue { i32, i32, i32, i32 } %1305, 2, !dbg !44
  %1309 = extractvalue { i32, i32, i32, i32 } %1305, 3, !dbg !44
  %1310 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %617) #2, !dbg !44
  %1311 = extractvalue { i32, i32, i32, i32 } %1310, 0, !dbg !44
  %1312 = extractvalue { i32, i32, i32, i32 } %1310, 1, !dbg !44
  %1313 = extractvalue { i32, i32, i32, i32 } %1310, 2, !dbg !44
  %1314 = extractvalue { i32, i32, i32, i32 } %1310, 3, !dbg !44
  %1315 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %620) #2, !dbg !44
  %1316 = extractvalue { i32, i32, i32, i32 } %1315, 0, !dbg !44
  %1317 = extractvalue { i32, i32, i32, i32 } %1315, 1, !dbg !44
  %1318 = extractvalue { i32, i32, i32, i32 } %1315, 2, !dbg !44
  %1319 = extractvalue { i32, i32, i32, i32 } %1315, 3, !dbg !44
  %1320 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %623) #2, !dbg !44
  %1321 = extractvalue { i32, i32, i32, i32 } %1320, 0, !dbg !44
  %1322 = extractvalue { i32, i32, i32, i32 } %1320, 1, !dbg !44
  %1323 = extractvalue { i32, i32, i32, i32 } %1320, 2, !dbg !44
  %1324 = extractvalue { i32, i32, i32, i32 } %1320, 3, !dbg !44
  %1325 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %626) #2, !dbg !44
  %1326 = extractvalue { i32, i32, i32, i32 } %1325, 0, !dbg !44
  %1327 = extractvalue { i32, i32, i32, i32 } %1325, 1, !dbg !44
  %1328 = extractvalue { i32, i32, i32, i32 } %1325, 2, !dbg !44
  %1329 = extractvalue { i32, i32, i32, i32 } %1325, 3, !dbg !44
  %1330 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %629) #2, !dbg !44
  %1331 = extractvalue { i32, i32, i32, i32 } %1330, 0, !dbg !44
  %1332 = extractvalue { i32, i32, i32, i32 } %1330, 1, !dbg !44
  %1333 = extractvalue { i32, i32, i32, i32 } %1330, 2, !dbg !44
  %1334 = extractvalue { i32, i32, i32, i32 } %1330, 3, !dbg !44
  %1335 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %632) #2, !dbg !44
  %1336 = extractvalue { i32, i32, i32, i32 } %1335, 0, !dbg !44
  %1337 = extractvalue { i32, i32, i32, i32 } %1335, 1, !dbg !44
  %1338 = extractvalue { i32, i32, i32, i32 } %1335, 2, !dbg !44
  %1339 = extractvalue { i32, i32, i32, i32 } %1335, 3, !dbg !44
  %1340 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %635) #2, !dbg !44
  %1341 = extractvalue { i32, i32, i32, i32 } %1340, 0, !dbg !44
  %1342 = extractvalue { i32, i32, i32, i32 } %1340, 1, !dbg !44
  %1343 = extractvalue { i32, i32, i32, i32 } %1340, 2, !dbg !44
  %1344 = extractvalue { i32, i32, i32, i32 } %1340, 3, !dbg !44
  %1345 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %638) #2, !dbg !44
  %1346 = extractvalue { i32, i32, i32, i32 } %1345, 0, !dbg !44
  %1347 = extractvalue { i32, i32, i32, i32 } %1345, 1, !dbg !44
  %1348 = extractvalue { i32, i32, i32, i32 } %1345, 2, !dbg !44
  %1349 = extractvalue { i32, i32, i32, i32 } %1345, 3, !dbg !44
  %1350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1271, i32 %1272) #2, !dbg !46
  %1351 = extractvalue { float, float, float, float } %1350, 0, !dbg !46
  %1352 = extractvalue { float, float, float, float } %1350, 1, !dbg !46
  %1353 = extractvalue { float, float, float, float } %1350, 2, !dbg !46
  %1354 = extractvalue { float, float, float, float } %1350, 3, !dbg !46
  %1355 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1281, i32 %1282) #2, !dbg !46
  %1356 = extractvalue { float, float, float, float } %1355, 0, !dbg !46
  %1357 = extractvalue { float, float, float, float } %1355, 1, !dbg !46
  %1358 = extractvalue { float, float, float, float } %1355, 2, !dbg !46
  %1359 = extractvalue { float, float, float, float } %1355, 3, !dbg !46
  %1360 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1291, i32 %1292) #2, !dbg !46
  %1361 = extractvalue { float, float, float, float } %1360, 0, !dbg !46
  %1362 = extractvalue { float, float, float, float } %1360, 1, !dbg !46
  %1363 = extractvalue { float, float, float, float } %1360, 2, !dbg !46
  %1364 = extractvalue { float, float, float, float } %1360, 3, !dbg !46
  %1365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1301, i32 %1302) #2, !dbg !46
  %1366 = extractvalue { float, float, float, float } %1365, 0, !dbg !46
  %1367 = extractvalue { float, float, float, float } %1365, 1, !dbg !46
  %1368 = extractvalue { float, float, float, float } %1365, 2, !dbg !46
  %1369 = extractvalue { float, float, float, float } %1365, 3, !dbg !46
  %1370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1311, i32 %1312) #2, !dbg !46
  %1371 = extractvalue { float, float, float, float } %1370, 0, !dbg !46
  %1372 = extractvalue { float, float, float, float } %1370, 1, !dbg !46
  %1373 = extractvalue { float, float, float, float } %1370, 2, !dbg !46
  %1374 = extractvalue { float, float, float, float } %1370, 3, !dbg !46
  %1375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1321, i32 %1322) #2, !dbg !46
  %1376 = extractvalue { float, float, float, float } %1375, 0, !dbg !46
  %1377 = extractvalue { float, float, float, float } %1375, 1, !dbg !46
  %1378 = extractvalue { float, float, float, float } %1375, 2, !dbg !46
  %1379 = extractvalue { float, float, float, float } %1375, 3, !dbg !46
  %1380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1331, i32 %1332) #2, !dbg !46
  %1381 = extractvalue { float, float, float, float } %1380, 0, !dbg !46
  %1382 = extractvalue { float, float, float, float } %1380, 1, !dbg !46
  %1383 = extractvalue { float, float, float, float } %1380, 2, !dbg !46
  %1384 = extractvalue { float, float, float, float } %1380, 3, !dbg !46
  %1385 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1217, i32 %1218, i32 %1219, i32 %1220, i32 %1341, i32 %1342) #2, !dbg !46
  %1386 = extractvalue { float, float, float, float } %1385, 0, !dbg !46
  %1387 = extractvalue { float, float, float, float } %1385, 1, !dbg !46
  %1388 = extractvalue { float, float, float, float } %1385, 2, !dbg !46
  %1389 = extractvalue { float, float, float, float } %1385, 3, !dbg !46
  %1390 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1271, i32 %1272) #2, !dbg !46
  %1391 = extractvalue { float, float, float, float } %1390, 0, !dbg !46
  %1392 = extractvalue { float, float, float, float } %1390, 1, !dbg !46
  %1393 = extractvalue { float, float, float, float } %1390, 2, !dbg !46
  %1394 = extractvalue { float, float, float, float } %1390, 3, !dbg !46
  %1395 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1281, i32 %1282) #2, !dbg !46
  %1396 = extractvalue { float, float, float, float } %1395, 0, !dbg !46
  %1397 = extractvalue { float, float, float, float } %1395, 1, !dbg !46
  %1398 = extractvalue { float, float, float, float } %1395, 2, !dbg !46
  %1399 = extractvalue { float, float, float, float } %1395, 3, !dbg !46
  %1400 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1291, i32 %1292) #2, !dbg !46
  %1401 = extractvalue { float, float, float, float } %1400, 0, !dbg !46
  %1402 = extractvalue { float, float, float, float } %1400, 1, !dbg !46
  %1403 = extractvalue { float, float, float, float } %1400, 2, !dbg !46
  %1404 = extractvalue { float, float, float, float } %1400, 3, !dbg !46
  %1405 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1301, i32 %1302) #2, !dbg !46
  %1406 = extractvalue { float, float, float, float } %1405, 0, !dbg !46
  %1407 = extractvalue { float, float, float, float } %1405, 1, !dbg !46
  %1408 = extractvalue { float, float, float, float } %1405, 2, !dbg !46
  %1409 = extractvalue { float, float, float, float } %1405, 3, !dbg !46
  %1410 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1311, i32 %1312) #2, !dbg !46
  %1411 = extractvalue { float, float, float, float } %1410, 0, !dbg !46
  %1412 = extractvalue { float, float, float, float } %1410, 1, !dbg !46
  %1413 = extractvalue { float, float, float, float } %1410, 2, !dbg !46
  %1414 = extractvalue { float, float, float, float } %1410, 3, !dbg !46
  %1415 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1321, i32 %1322) #2, !dbg !46
  %1416 = extractvalue { float, float, float, float } %1415, 0, !dbg !46
  %1417 = extractvalue { float, float, float, float } %1415, 1, !dbg !46
  %1418 = extractvalue { float, float, float, float } %1415, 2, !dbg !46
  %1419 = extractvalue { float, float, float, float } %1415, 3, !dbg !46
  %1420 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1331, i32 %1332) #2, !dbg !46
  %1421 = extractvalue { float, float, float, float } %1420, 0, !dbg !46
  %1422 = extractvalue { float, float, float, float } %1420, 1, !dbg !46
  %1423 = extractvalue { float, float, float, float } %1420, 2, !dbg !46
  %1424 = extractvalue { float, float, float, float } %1420, 3, !dbg !46
  %1425 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1245, i32 %1246, i32 %1247, i32 %1248, i32 %1341, i32 %1342) #2, !dbg !46
  %1426 = extractvalue { float, float, float, float } %1425, 0, !dbg !46
  %1427 = extractvalue { float, float, float, float } %1425, 1, !dbg !46
  %1428 = extractvalue { float, float, float, float } %1425, 2, !dbg !46
  %1429 = extractvalue { float, float, float, float } %1425, 3, !dbg !46
  %1430 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1351, float %1352, float %1353, float %1354, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1273, i32 %1274) #2, !dbg !46
  %1431 = extractvalue { float, float, float, float } %1430, 0, !dbg !46
  %1432 = extractvalue { float, float, float, float } %1430, 1, !dbg !46
  %1433 = extractvalue { float, float, float, float } %1430, 2, !dbg !46
  %1434 = extractvalue { float, float, float, float } %1430, 3, !dbg !46
  %1435 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1356, float %1357, float %1358, float %1359, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1283, i32 %1284) #2, !dbg !46
  %1436 = extractvalue { float, float, float, float } %1435, 0, !dbg !46
  %1437 = extractvalue { float, float, float, float } %1435, 1, !dbg !46
  %1438 = extractvalue { float, float, float, float } %1435, 2, !dbg !46
  %1439 = extractvalue { float, float, float, float } %1435, 3, !dbg !46
  %1440 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1361, float %1362, float %1363, float %1364, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1293, i32 %1294) #2, !dbg !46
  %1441 = extractvalue { float, float, float, float } %1440, 0, !dbg !46
  %1442 = extractvalue { float, float, float, float } %1440, 1, !dbg !46
  %1443 = extractvalue { float, float, float, float } %1440, 2, !dbg !46
  %1444 = extractvalue { float, float, float, float } %1440, 3, !dbg !46
  %1445 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1366, float %1367, float %1368, float %1369, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1303, i32 %1304) #2, !dbg !46
  %1446 = extractvalue { float, float, float, float } %1445, 0, !dbg !46
  %1447 = extractvalue { float, float, float, float } %1445, 1, !dbg !46
  %1448 = extractvalue { float, float, float, float } %1445, 2, !dbg !46
  %1449 = extractvalue { float, float, float, float } %1445, 3, !dbg !46
  %1450 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1371, float %1372, float %1373, float %1374, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1313, i32 %1314) #2, !dbg !46
  %1451 = extractvalue { float, float, float, float } %1450, 0, !dbg !46
  %1452 = extractvalue { float, float, float, float } %1450, 1, !dbg !46
  %1453 = extractvalue { float, float, float, float } %1450, 2, !dbg !46
  %1454 = extractvalue { float, float, float, float } %1450, 3, !dbg !46
  %1455 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1376, float %1377, float %1378, float %1379, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1323, i32 %1324) #2, !dbg !46
  %1456 = extractvalue { float, float, float, float } %1455, 0, !dbg !46
  %1457 = extractvalue { float, float, float, float } %1455, 1, !dbg !46
  %1458 = extractvalue { float, float, float, float } %1455, 2, !dbg !46
  %1459 = extractvalue { float, float, float, float } %1455, 3, !dbg !46
  %1460 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1381, float %1382, float %1383, float %1384, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1333, i32 %1334) #2, !dbg !46
  %1461 = extractvalue { float, float, float, float } %1460, 0, !dbg !46
  %1462 = extractvalue { float, float, float, float } %1460, 1, !dbg !46
  %1463 = extractvalue { float, float, float, float } %1460, 2, !dbg !46
  %1464 = extractvalue { float, float, float, float } %1460, 3, !dbg !46
  %1465 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1386, float %1387, float %1388, float %1389, i32 %1224, i32 %1225, i32 %1226, i32 %1227, i32 %1343, i32 %1344) #2, !dbg !46
  %1466 = extractvalue { float, float, float, float } %1465, 0, !dbg !46
  %1467 = extractvalue { float, float, float, float } %1465, 1, !dbg !46
  %1468 = extractvalue { float, float, float, float } %1465, 2, !dbg !46
  %1469 = extractvalue { float, float, float, float } %1465, 3, !dbg !46
  %1470 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1391, float %1392, float %1393, float %1394, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1273, i32 %1274) #2, !dbg !46
  %1471 = extractvalue { float, float, float, float } %1470, 0, !dbg !46
  %1472 = extractvalue { float, float, float, float } %1470, 1, !dbg !46
  %1473 = extractvalue { float, float, float, float } %1470, 2, !dbg !46
  %1474 = extractvalue { float, float, float, float } %1470, 3, !dbg !46
  %1475 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1396, float %1397, float %1398, float %1399, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1283, i32 %1284) #2, !dbg !46
  %1476 = extractvalue { float, float, float, float } %1475, 0, !dbg !46
  %1477 = extractvalue { float, float, float, float } %1475, 1, !dbg !46
  %1478 = extractvalue { float, float, float, float } %1475, 2, !dbg !46
  %1479 = extractvalue { float, float, float, float } %1475, 3, !dbg !46
  %1480 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1401, float %1402, float %1403, float %1404, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1293, i32 %1294) #2, !dbg !46
  %1481 = extractvalue { float, float, float, float } %1480, 0, !dbg !46
  %1482 = extractvalue { float, float, float, float } %1480, 1, !dbg !46
  %1483 = extractvalue { float, float, float, float } %1480, 2, !dbg !46
  %1484 = extractvalue { float, float, float, float } %1480, 3, !dbg !46
  %1485 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1406, float %1407, float %1408, float %1409, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1303, i32 %1304) #2, !dbg !46
  %1486 = extractvalue { float, float, float, float } %1485, 0, !dbg !46
  %1487 = extractvalue { float, float, float, float } %1485, 1, !dbg !46
  %1488 = extractvalue { float, float, float, float } %1485, 2, !dbg !46
  %1489 = extractvalue { float, float, float, float } %1485, 3, !dbg !46
  %1490 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1411, float %1412, float %1413, float %1414, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1313, i32 %1314) #2, !dbg !46
  %1491 = extractvalue { float, float, float, float } %1490, 0, !dbg !46
  %1492 = extractvalue { float, float, float, float } %1490, 1, !dbg !46
  %1493 = extractvalue { float, float, float, float } %1490, 2, !dbg !46
  %1494 = extractvalue { float, float, float, float } %1490, 3, !dbg !46
  %1495 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1416, float %1417, float %1418, float %1419, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1323, i32 %1324) #2, !dbg !46
  %1496 = extractvalue { float, float, float, float } %1495, 0, !dbg !46
  %1497 = extractvalue { float, float, float, float } %1495, 1, !dbg !46
  %1498 = extractvalue { float, float, float, float } %1495, 2, !dbg !46
  %1499 = extractvalue { float, float, float, float } %1495, 3, !dbg !46
  %1500 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1421, float %1422, float %1423, float %1424, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1333, i32 %1334) #2, !dbg !46
  %1501 = extractvalue { float, float, float, float } %1500, 0, !dbg !46
  %1502 = extractvalue { float, float, float, float } %1500, 1, !dbg !46
  %1503 = extractvalue { float, float, float, float } %1500, 2, !dbg !46
  %1504 = extractvalue { float, float, float, float } %1500, 3, !dbg !46
  %1505 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1426, float %1427, float %1428, float %1429, i32 %1252, i32 %1253, i32 %1254, i32 %1255, i32 %1343, i32 %1344) #2, !dbg !46
  %1506 = extractvalue { float, float, float, float } %1505, 0, !dbg !46
  %1507 = extractvalue { float, float, float, float } %1505, 1, !dbg !46
  %1508 = extractvalue { float, float, float, float } %1505, 2, !dbg !46
  %1509 = extractvalue { float, float, float, float } %1505, 3, !dbg !46
  %1510 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1431, float %1432, float %1433, float %1434, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1276, i32 %1277) #2, !dbg !46
  %1511 = extractvalue { float, float, float, float } %1510, 0, !dbg !46
  %1512 = extractvalue { float, float, float, float } %1510, 1, !dbg !46
  %1513 = extractvalue { float, float, float, float } %1510, 2, !dbg !46
  %1514 = extractvalue { float, float, float, float } %1510, 3, !dbg !46
  %1515 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1436, float %1437, float %1438, float %1439, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1286, i32 %1287) #2, !dbg !46
  %1516 = extractvalue { float, float, float, float } %1515, 0, !dbg !46
  %1517 = extractvalue { float, float, float, float } %1515, 1, !dbg !46
  %1518 = extractvalue { float, float, float, float } %1515, 2, !dbg !46
  %1519 = extractvalue { float, float, float, float } %1515, 3, !dbg !46
  %1520 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1441, float %1442, float %1443, float %1444, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1296, i32 %1297) #2, !dbg !46
  %1521 = extractvalue { float, float, float, float } %1520, 0, !dbg !46
  %1522 = extractvalue { float, float, float, float } %1520, 1, !dbg !46
  %1523 = extractvalue { float, float, float, float } %1520, 2, !dbg !46
  %1524 = extractvalue { float, float, float, float } %1520, 3, !dbg !46
  %1525 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1446, float %1447, float %1448, float %1449, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1306, i32 %1307) #2, !dbg !46
  %1526 = extractvalue { float, float, float, float } %1525, 0, !dbg !46
  %1527 = extractvalue { float, float, float, float } %1525, 1, !dbg !46
  %1528 = extractvalue { float, float, float, float } %1525, 2, !dbg !46
  %1529 = extractvalue { float, float, float, float } %1525, 3, !dbg !46
  %1530 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1451, float %1452, float %1453, float %1454, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1316, i32 %1317) #2, !dbg !46
  %1531 = extractvalue { float, float, float, float } %1530, 0, !dbg !46
  %1532 = extractvalue { float, float, float, float } %1530, 1, !dbg !46
  %1533 = extractvalue { float, float, float, float } %1530, 2, !dbg !46
  %1534 = extractvalue { float, float, float, float } %1530, 3, !dbg !46
  %1535 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1456, float %1457, float %1458, float %1459, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1326, i32 %1327) #2, !dbg !46
  %1536 = extractvalue { float, float, float, float } %1535, 0, !dbg !46
  %1537 = extractvalue { float, float, float, float } %1535, 1, !dbg !46
  %1538 = extractvalue { float, float, float, float } %1535, 2, !dbg !46
  %1539 = extractvalue { float, float, float, float } %1535, 3, !dbg !46
  %1540 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1461, float %1462, float %1463, float %1464, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1336, i32 %1337) #2, !dbg !46
  %1541 = extractvalue { float, float, float, float } %1540, 0, !dbg !46
  %1542 = extractvalue { float, float, float, float } %1540, 1, !dbg !46
  %1543 = extractvalue { float, float, float, float } %1540, 2, !dbg !46
  %1544 = extractvalue { float, float, float, float } %1540, 3, !dbg !46
  %1545 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1466, float %1467, float %1468, float %1469, i32 %1231, i32 %1232, i32 %1233, i32 %1234, i32 %1346, i32 %1347) #2, !dbg !46
  %1546 = extractvalue { float, float, float, float } %1545, 0, !dbg !46
  %1547 = extractvalue { float, float, float, float } %1545, 1, !dbg !46
  %1548 = extractvalue { float, float, float, float } %1545, 2, !dbg !46
  %1549 = extractvalue { float, float, float, float } %1545, 3, !dbg !46
  %1550 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1471, float %1472, float %1473, float %1474, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1276, i32 %1277) #2, !dbg !46
  %1551 = extractvalue { float, float, float, float } %1550, 0, !dbg !46
  %1552 = extractvalue { float, float, float, float } %1550, 1, !dbg !46
  %1553 = extractvalue { float, float, float, float } %1550, 2, !dbg !46
  %1554 = extractvalue { float, float, float, float } %1550, 3, !dbg !46
  %1555 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1476, float %1477, float %1478, float %1479, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1286, i32 %1287) #2, !dbg !46
  %1556 = extractvalue { float, float, float, float } %1555, 0, !dbg !46
  %1557 = extractvalue { float, float, float, float } %1555, 1, !dbg !46
  %1558 = extractvalue { float, float, float, float } %1555, 2, !dbg !46
  %1559 = extractvalue { float, float, float, float } %1555, 3, !dbg !46
  %1560 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1481, float %1482, float %1483, float %1484, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1296, i32 %1297) #2, !dbg !46
  %1561 = extractvalue { float, float, float, float } %1560, 0, !dbg !46
  %1562 = extractvalue { float, float, float, float } %1560, 1, !dbg !46
  %1563 = extractvalue { float, float, float, float } %1560, 2, !dbg !46
  %1564 = extractvalue { float, float, float, float } %1560, 3, !dbg !46
  %1565 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1486, float %1487, float %1488, float %1489, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1306, i32 %1307) #2, !dbg !46
  %1566 = extractvalue { float, float, float, float } %1565, 0, !dbg !46
  %1567 = extractvalue { float, float, float, float } %1565, 1, !dbg !46
  %1568 = extractvalue { float, float, float, float } %1565, 2, !dbg !46
  %1569 = extractvalue { float, float, float, float } %1565, 3, !dbg !46
  %1570 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1491, float %1492, float %1493, float %1494, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1316, i32 %1317) #2, !dbg !46
  %1571 = extractvalue { float, float, float, float } %1570, 0, !dbg !46
  %1572 = extractvalue { float, float, float, float } %1570, 1, !dbg !46
  %1573 = extractvalue { float, float, float, float } %1570, 2, !dbg !46
  %1574 = extractvalue { float, float, float, float } %1570, 3, !dbg !46
  %1575 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1496, float %1497, float %1498, float %1499, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1326, i32 %1327) #2, !dbg !46
  %1576 = extractvalue { float, float, float, float } %1575, 0, !dbg !46
  %1577 = extractvalue { float, float, float, float } %1575, 1, !dbg !46
  %1578 = extractvalue { float, float, float, float } %1575, 2, !dbg !46
  %1579 = extractvalue { float, float, float, float } %1575, 3, !dbg !46
  %1580 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1501, float %1502, float %1503, float %1504, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1336, i32 %1337) #2, !dbg !46
  %1581 = extractvalue { float, float, float, float } %1580, 0, !dbg !46
  %1582 = extractvalue { float, float, float, float } %1580, 1, !dbg !46
  %1583 = extractvalue { float, float, float, float } %1580, 2, !dbg !46
  %1584 = extractvalue { float, float, float, float } %1580, 3, !dbg !46
  %1585 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1506, float %1507, float %1508, float %1509, i32 %1259, i32 %1260, i32 %1261, i32 %1262, i32 %1346, i32 %1347) #2, !dbg !46
  %1586 = extractvalue { float, float, float, float } %1585, 0, !dbg !46
  %1587 = extractvalue { float, float, float, float } %1585, 1, !dbg !46
  %1588 = extractvalue { float, float, float, float } %1585, 2, !dbg !46
  %1589 = extractvalue { float, float, float, float } %1585, 3, !dbg !46
  %1590 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1511, float %1512, float %1513, float %1514, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1278, i32 %1279) #2, !dbg !46
  %1591 = extractvalue { float, float, float, float } %1590, 0, !dbg !46
  %1592 = extractvalue { float, float, float, float } %1590, 1, !dbg !46
  %1593 = extractvalue { float, float, float, float } %1590, 2, !dbg !46
  %1594 = extractvalue { float, float, float, float } %1590, 3, !dbg !46
  %1595 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1516, float %1517, float %1518, float %1519, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1288, i32 %1289) #2, !dbg !46
  %1596 = extractvalue { float, float, float, float } %1595, 0, !dbg !46
  %1597 = extractvalue { float, float, float, float } %1595, 1, !dbg !46
  %1598 = extractvalue { float, float, float, float } %1595, 2, !dbg !46
  %1599 = extractvalue { float, float, float, float } %1595, 3, !dbg !46
  %1600 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1521, float %1522, float %1523, float %1524, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1298, i32 %1299) #2, !dbg !46
  %1601 = extractvalue { float, float, float, float } %1600, 0, !dbg !46
  %1602 = extractvalue { float, float, float, float } %1600, 1, !dbg !46
  %1603 = extractvalue { float, float, float, float } %1600, 2, !dbg !46
  %1604 = extractvalue { float, float, float, float } %1600, 3, !dbg !46
  %1605 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1526, float %1527, float %1528, float %1529, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1308, i32 %1309) #2, !dbg !46
  %1606 = extractvalue { float, float, float, float } %1605, 0, !dbg !46
  %1607 = extractvalue { float, float, float, float } %1605, 1, !dbg !46
  %1608 = extractvalue { float, float, float, float } %1605, 2, !dbg !46
  %1609 = extractvalue { float, float, float, float } %1605, 3, !dbg !46
  %1610 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1531, float %1532, float %1533, float %1534, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1318, i32 %1319) #2, !dbg !46
  %1611 = extractvalue { float, float, float, float } %1610, 0, !dbg !46
  %1612 = extractvalue { float, float, float, float } %1610, 1, !dbg !46
  %1613 = extractvalue { float, float, float, float } %1610, 2, !dbg !46
  %1614 = extractvalue { float, float, float, float } %1610, 3, !dbg !46
  %1615 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1536, float %1537, float %1538, float %1539, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1328, i32 %1329) #2, !dbg !46
  %1616 = extractvalue { float, float, float, float } %1615, 0, !dbg !46
  %1617 = extractvalue { float, float, float, float } %1615, 1, !dbg !46
  %1618 = extractvalue { float, float, float, float } %1615, 2, !dbg !46
  %1619 = extractvalue { float, float, float, float } %1615, 3, !dbg !46
  %1620 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1541, float %1542, float %1543, float %1544, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1338, i32 %1339) #2, !dbg !46
  %1621 = extractvalue { float, float, float, float } %1620, 0, !dbg !46
  %1622 = extractvalue { float, float, float, float } %1620, 1, !dbg !46
  %1623 = extractvalue { float, float, float, float } %1620, 2, !dbg !46
  %1624 = extractvalue { float, float, float, float } %1620, 3, !dbg !46
  %1625 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1546, float %1547, float %1548, float %1549, i32 %1238, i32 %1239, i32 %1240, i32 %1241, i32 %1348, i32 %1349) #2, !dbg !46
  %1626 = extractvalue { float, float, float, float } %1625, 0, !dbg !46
  %1627 = extractvalue { float, float, float, float } %1625, 1, !dbg !46
  %1628 = extractvalue { float, float, float, float } %1625, 2, !dbg !46
  %1629 = extractvalue { float, float, float, float } %1625, 3, !dbg !46
  %1630 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1551, float %1552, float %1553, float %1554, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1278, i32 %1279) #2, !dbg !46
  %1631 = extractvalue { float, float, float, float } %1630, 0, !dbg !46
  %1632 = extractvalue { float, float, float, float } %1630, 1, !dbg !46
  %1633 = extractvalue { float, float, float, float } %1630, 2, !dbg !46
  %1634 = extractvalue { float, float, float, float } %1630, 3, !dbg !46
  %1635 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1556, float %1557, float %1558, float %1559, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1288, i32 %1289) #2, !dbg !46
  %1636 = extractvalue { float, float, float, float } %1635, 0, !dbg !46
  %1637 = extractvalue { float, float, float, float } %1635, 1, !dbg !46
  %1638 = extractvalue { float, float, float, float } %1635, 2, !dbg !46
  %1639 = extractvalue { float, float, float, float } %1635, 3, !dbg !46
  %1640 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1561, float %1562, float %1563, float %1564, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1298, i32 %1299) #2, !dbg !46
  %1641 = extractvalue { float, float, float, float } %1640, 0, !dbg !46
  %1642 = extractvalue { float, float, float, float } %1640, 1, !dbg !46
  %1643 = extractvalue { float, float, float, float } %1640, 2, !dbg !46
  %1644 = extractvalue { float, float, float, float } %1640, 3, !dbg !46
  %1645 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1566, float %1567, float %1568, float %1569, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1308, i32 %1309) #2, !dbg !46
  %1646 = extractvalue { float, float, float, float } %1645, 0, !dbg !46
  %1647 = extractvalue { float, float, float, float } %1645, 1, !dbg !46
  %1648 = extractvalue { float, float, float, float } %1645, 2, !dbg !46
  %1649 = extractvalue { float, float, float, float } %1645, 3, !dbg !46
  %1650 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1571, float %1572, float %1573, float %1574, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1318, i32 %1319) #2, !dbg !46
  %1651 = extractvalue { float, float, float, float } %1650, 0, !dbg !46
  %1652 = extractvalue { float, float, float, float } %1650, 1, !dbg !46
  %1653 = extractvalue { float, float, float, float } %1650, 2, !dbg !46
  %1654 = extractvalue { float, float, float, float } %1650, 3, !dbg !46
  %1655 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1576, float %1577, float %1578, float %1579, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1328, i32 %1329) #2, !dbg !46
  %1656 = extractvalue { float, float, float, float } %1655, 0, !dbg !46
  %1657 = extractvalue { float, float, float, float } %1655, 1, !dbg !46
  %1658 = extractvalue { float, float, float, float } %1655, 2, !dbg !46
  %1659 = extractvalue { float, float, float, float } %1655, 3, !dbg !46
  %1660 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1581, float %1582, float %1583, float %1584, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1338, i32 %1339) #2, !dbg !46
  %1661 = extractvalue { float, float, float, float } %1660, 0, !dbg !46
  %1662 = extractvalue { float, float, float, float } %1660, 1, !dbg !46
  %1663 = extractvalue { float, float, float, float } %1660, 2, !dbg !46
  %1664 = extractvalue { float, float, float, float } %1660, 3, !dbg !46
  %1665 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1586, float %1587, float %1588, float %1589, i32 %1266, i32 %1267, i32 %1268, i32 %1269, i32 %1348, i32 %1349) #2, !dbg !46
  %1666 = extractvalue { float, float, float, float } %1665, 0, !dbg !46
  %1667 = extractvalue { float, float, float, float } %1665, 1, !dbg !46
  %1668 = extractvalue { float, float, float, float } %1665, 2, !dbg !46
  %1669 = extractvalue { float, float, float, float } %1665, 3, !dbg !46
  %1670 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %1212, !dbg !36
  %1671 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %439, !dbg !36
  %1672 = ptrtoint ptr addrspace(3) %1671 to i32, !dbg !36
  %1673 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1672) #2, !dbg !36
  %1674 = extractvalue { i32, i32, i32, i32 } %1673, 0, !dbg !36
  %1675 = extractvalue { i32, i32, i32, i32 } %1673, 1, !dbg !36
  %1676 = extractvalue { i32, i32, i32, i32 } %1673, 2, !dbg !36
  %1677 = extractvalue { i32, i32, i32, i32 } %1673, 3, !dbg !36
  %1678 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %442, !dbg !36
  %1679 = ptrtoint ptr addrspace(3) %1678 to i32, !dbg !36
  %1680 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1679) #2, !dbg !36
  %1681 = extractvalue { i32, i32, i32, i32 } %1680, 0, !dbg !36
  %1682 = extractvalue { i32, i32, i32, i32 } %1680, 1, !dbg !36
  %1683 = extractvalue { i32, i32, i32, i32 } %1680, 2, !dbg !36
  %1684 = extractvalue { i32, i32, i32, i32 } %1680, 3, !dbg !36
  %1685 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %445, !dbg !36
  %1686 = ptrtoint ptr addrspace(3) %1685 to i32, !dbg !36
  %1687 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1686) #2, !dbg !36
  %1688 = extractvalue { i32, i32, i32, i32 } %1687, 0, !dbg !36
  %1689 = extractvalue { i32, i32, i32, i32 } %1687, 1, !dbg !36
  %1690 = extractvalue { i32, i32, i32, i32 } %1687, 2, !dbg !36
  %1691 = extractvalue { i32, i32, i32, i32 } %1687, 3, !dbg !36
  %1692 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %448, !dbg !36
  %1693 = ptrtoint ptr addrspace(3) %1692 to i32, !dbg !36
  %1694 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1693) #2, !dbg !36
  %1695 = extractvalue { i32, i32, i32, i32 } %1694, 0, !dbg !36
  %1696 = extractvalue { i32, i32, i32, i32 } %1694, 1, !dbg !36
  %1697 = extractvalue { i32, i32, i32, i32 } %1694, 2, !dbg !36
  %1698 = extractvalue { i32, i32, i32, i32 } %1694, 3, !dbg !36
  %1699 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %451, !dbg !36
  %1700 = ptrtoint ptr addrspace(3) %1699 to i32, !dbg !36
  %1701 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1700) #2, !dbg !36
  %1702 = extractvalue { i32, i32, i32, i32 } %1701, 0, !dbg !36
  %1703 = extractvalue { i32, i32, i32, i32 } %1701, 1, !dbg !36
  %1704 = extractvalue { i32, i32, i32, i32 } %1701, 2, !dbg !36
  %1705 = extractvalue { i32, i32, i32, i32 } %1701, 3, !dbg !36
  %1706 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %454, !dbg !36
  %1707 = ptrtoint ptr addrspace(3) %1706 to i32, !dbg !36
  %1708 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1707) #2, !dbg !36
  %1709 = extractvalue { i32, i32, i32, i32 } %1708, 0, !dbg !36
  %1710 = extractvalue { i32, i32, i32, i32 } %1708, 1, !dbg !36
  %1711 = extractvalue { i32, i32, i32, i32 } %1708, 2, !dbg !36
  %1712 = extractvalue { i32, i32, i32, i32 } %1708, 3, !dbg !36
  %1713 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %457, !dbg !36
  %1714 = ptrtoint ptr addrspace(3) %1713 to i32, !dbg !36
  %1715 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1714) #2, !dbg !36
  %1716 = extractvalue { i32, i32, i32, i32 } %1715, 0, !dbg !36
  %1717 = extractvalue { i32, i32, i32, i32 } %1715, 1, !dbg !36
  %1718 = extractvalue { i32, i32, i32, i32 } %1715, 2, !dbg !36
  %1719 = extractvalue { i32, i32, i32, i32 } %1715, 3, !dbg !36
  %1720 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1670, i32 %460, !dbg !36
  %1721 = ptrtoint ptr addrspace(3) %1720 to i32, !dbg !36
  %1722 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1721) #2, !dbg !36
  %1723 = extractvalue { i32, i32, i32, i32 } %1722, 0, !dbg !36
  %1724 = extractvalue { i32, i32, i32, i32 } %1722, 1, !dbg !36
  %1725 = extractvalue { i32, i32, i32, i32 } %1722, 2, !dbg !36
  %1726 = extractvalue { i32, i32, i32, i32 } %1722, 3, !dbg !36
  %1727 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %640) #2, !dbg !45
  %1728 = extractvalue { i32, i32, i32, i32 } %1727, 0, !dbg !45
  %1729 = extractvalue { i32, i32, i32, i32 } %1727, 1, !dbg !45
  %1730 = extractvalue { i32, i32, i32, i32 } %1727, 2, !dbg !45
  %1731 = extractvalue { i32, i32, i32, i32 } %1727, 3, !dbg !45
  %1732 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %642) #2, !dbg !45
  %1733 = extractvalue { i32, i32, i32, i32 } %1732, 0, !dbg !45
  %1734 = extractvalue { i32, i32, i32, i32 } %1732, 1, !dbg !45
  %1735 = extractvalue { i32, i32, i32, i32 } %1732, 2, !dbg !45
  %1736 = extractvalue { i32, i32, i32, i32 } %1732, 3, !dbg !45
  %1737 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %644) #2, !dbg !45
  %1738 = extractvalue { i32, i32, i32, i32 } %1737, 0, !dbg !45
  %1739 = extractvalue { i32, i32, i32, i32 } %1737, 1, !dbg !45
  %1740 = extractvalue { i32, i32, i32, i32 } %1737, 2, !dbg !45
  %1741 = extractvalue { i32, i32, i32, i32 } %1737, 3, !dbg !45
  %1742 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %646) #2, !dbg !45
  %1743 = extractvalue { i32, i32, i32, i32 } %1742, 0, !dbg !45
  %1744 = extractvalue { i32, i32, i32, i32 } %1742, 1, !dbg !45
  %1745 = extractvalue { i32, i32, i32, i32 } %1742, 2, !dbg !45
  %1746 = extractvalue { i32, i32, i32, i32 } %1742, 3, !dbg !45
  %1747 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %648) #2, !dbg !45
  %1748 = extractvalue { i32, i32, i32, i32 } %1747, 0, !dbg !45
  %1749 = extractvalue { i32, i32, i32, i32 } %1747, 1, !dbg !45
  %1750 = extractvalue { i32, i32, i32, i32 } %1747, 2, !dbg !45
  %1751 = extractvalue { i32, i32, i32, i32 } %1747, 3, !dbg !45
  %1752 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %650) #2, !dbg !45
  %1753 = extractvalue { i32, i32, i32, i32 } %1752, 0, !dbg !45
  %1754 = extractvalue { i32, i32, i32, i32 } %1752, 1, !dbg !45
  %1755 = extractvalue { i32, i32, i32, i32 } %1752, 2, !dbg !45
  %1756 = extractvalue { i32, i32, i32, i32 } %1752, 3, !dbg !45
  %1757 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %652) #2, !dbg !45
  %1758 = extractvalue { i32, i32, i32, i32 } %1757, 0, !dbg !45
  %1759 = extractvalue { i32, i32, i32, i32 } %1757, 1, !dbg !45
  %1760 = extractvalue { i32, i32, i32, i32 } %1757, 2, !dbg !45
  %1761 = extractvalue { i32, i32, i32, i32 } %1757, 3, !dbg !45
  %1762 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %654) #2, !dbg !45
  %1763 = extractvalue { i32, i32, i32, i32 } %1762, 0, !dbg !45
  %1764 = extractvalue { i32, i32, i32, i32 } %1762, 1, !dbg !45
  %1765 = extractvalue { i32, i32, i32, i32 } %1762, 2, !dbg !45
  %1766 = extractvalue { i32, i32, i32, i32 } %1762, 3, !dbg !45
  %1767 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %656) #2, !dbg !45
  %1768 = extractvalue { i32, i32, i32, i32 } %1767, 0, !dbg !45
  %1769 = extractvalue { i32, i32, i32, i32 } %1767, 1, !dbg !45
  %1770 = extractvalue { i32, i32, i32, i32 } %1767, 2, !dbg !45
  %1771 = extractvalue { i32, i32, i32, i32 } %1767, 3, !dbg !45
  %1772 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %658) #2, !dbg !45
  %1773 = extractvalue { i32, i32, i32, i32 } %1772, 0, !dbg !45
  %1774 = extractvalue { i32, i32, i32, i32 } %1772, 1, !dbg !45
  %1775 = extractvalue { i32, i32, i32, i32 } %1772, 2, !dbg !45
  %1776 = extractvalue { i32, i32, i32, i32 } %1772, 3, !dbg !45
  %1777 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %660) #2, !dbg !45
  %1778 = extractvalue { i32, i32, i32, i32 } %1777, 0, !dbg !45
  %1779 = extractvalue { i32, i32, i32, i32 } %1777, 1, !dbg !45
  %1780 = extractvalue { i32, i32, i32, i32 } %1777, 2, !dbg !45
  %1781 = extractvalue { i32, i32, i32, i32 } %1777, 3, !dbg !45
  %1782 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %662) #2, !dbg !45
  %1783 = extractvalue { i32, i32, i32, i32 } %1782, 0, !dbg !45
  %1784 = extractvalue { i32, i32, i32, i32 } %1782, 1, !dbg !45
  %1785 = extractvalue { i32, i32, i32, i32 } %1782, 2, !dbg !45
  %1786 = extractvalue { i32, i32, i32, i32 } %1782, 3, !dbg !45
  %1787 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %664) #2, !dbg !45
  %1788 = extractvalue { i32, i32, i32, i32 } %1787, 0, !dbg !45
  %1789 = extractvalue { i32, i32, i32, i32 } %1787, 1, !dbg !45
  %1790 = extractvalue { i32, i32, i32, i32 } %1787, 2, !dbg !45
  %1791 = extractvalue { i32, i32, i32, i32 } %1787, 3, !dbg !45
  %1792 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %666) #2, !dbg !45
  %1793 = extractvalue { i32, i32, i32, i32 } %1792, 0, !dbg !45
  %1794 = extractvalue { i32, i32, i32, i32 } %1792, 1, !dbg !45
  %1795 = extractvalue { i32, i32, i32, i32 } %1792, 2, !dbg !45
  %1796 = extractvalue { i32, i32, i32, i32 } %1792, 3, !dbg !45
  %1797 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %668) #2, !dbg !45
  %1798 = extractvalue { i32, i32, i32, i32 } %1797, 0, !dbg !45
  %1799 = extractvalue { i32, i32, i32, i32 } %1797, 1, !dbg !45
  %1800 = extractvalue { i32, i32, i32, i32 } %1797, 2, !dbg !45
  %1801 = extractvalue { i32, i32, i32, i32 } %1797, 3, !dbg !45
  %1802 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %670) #2, !dbg !45
  %1803 = extractvalue { i32, i32, i32, i32 } %1802, 0, !dbg !45
  %1804 = extractvalue { i32, i32, i32, i32 } %1802, 1, !dbg !45
  %1805 = extractvalue { i32, i32, i32, i32 } %1802, 2, !dbg !45
  %1806 = extractvalue { i32, i32, i32, i32 } %1802, 3, !dbg !45
  %1807 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1591, float %1592, float %1593, float %1594, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1728, i32 %1729) #2, !dbg !47
  %1808 = extractvalue { float, float, float, float } %1807, 0, !dbg !47
  %1809 = extractvalue { float, float, float, float } %1807, 1, !dbg !47
  %1810 = extractvalue { float, float, float, float } %1807, 2, !dbg !47
  %1811 = extractvalue { float, float, float, float } %1807, 3, !dbg !47
  %1812 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1596, float %1597, float %1598, float %1599, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1738, i32 %1739) #2, !dbg !47
  %1813 = extractvalue { float, float, float, float } %1812, 0, !dbg !47
  %1814 = extractvalue { float, float, float, float } %1812, 1, !dbg !47
  %1815 = extractvalue { float, float, float, float } %1812, 2, !dbg !47
  %1816 = extractvalue { float, float, float, float } %1812, 3, !dbg !47
  %1817 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1601, float %1602, float %1603, float %1604, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1748, i32 %1749) #2, !dbg !47
  %1818 = extractvalue { float, float, float, float } %1817, 0, !dbg !47
  %1819 = extractvalue { float, float, float, float } %1817, 1, !dbg !47
  %1820 = extractvalue { float, float, float, float } %1817, 2, !dbg !47
  %1821 = extractvalue { float, float, float, float } %1817, 3, !dbg !47
  %1822 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1606, float %1607, float %1608, float %1609, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1758, i32 %1759) #2, !dbg !47
  %1823 = extractvalue { float, float, float, float } %1822, 0, !dbg !47
  %1824 = extractvalue { float, float, float, float } %1822, 1, !dbg !47
  %1825 = extractvalue { float, float, float, float } %1822, 2, !dbg !47
  %1826 = extractvalue { float, float, float, float } %1822, 3, !dbg !47
  %1827 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1611, float %1612, float %1613, float %1614, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1768, i32 %1769) #2, !dbg !47
  %1828 = extractvalue { float, float, float, float } %1827, 0, !dbg !47
  %1829 = extractvalue { float, float, float, float } %1827, 1, !dbg !47
  %1830 = extractvalue { float, float, float, float } %1827, 2, !dbg !47
  %1831 = extractvalue { float, float, float, float } %1827, 3, !dbg !47
  %1832 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1616, float %1617, float %1618, float %1619, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1778, i32 %1779) #2, !dbg !47
  %1833 = extractvalue { float, float, float, float } %1832, 0, !dbg !47
  %1834 = extractvalue { float, float, float, float } %1832, 1, !dbg !47
  %1835 = extractvalue { float, float, float, float } %1832, 2, !dbg !47
  %1836 = extractvalue { float, float, float, float } %1832, 3, !dbg !47
  %1837 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1621, float %1622, float %1623, float %1624, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1788, i32 %1789) #2, !dbg !47
  %1838 = extractvalue { float, float, float, float } %1837, 0, !dbg !47
  %1839 = extractvalue { float, float, float, float } %1837, 1, !dbg !47
  %1840 = extractvalue { float, float, float, float } %1837, 2, !dbg !47
  %1841 = extractvalue { float, float, float, float } %1837, 3, !dbg !47
  %1842 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1626, float %1627, float %1628, float %1629, i32 %1674, i32 %1675, i32 %1676, i32 %1677, i32 %1798, i32 %1799) #2, !dbg !47
  %1843 = extractvalue { float, float, float, float } %1842, 0, !dbg !47
  %1844 = extractvalue { float, float, float, float } %1842, 1, !dbg !47
  %1845 = extractvalue { float, float, float, float } %1842, 2, !dbg !47
  %1846 = extractvalue { float, float, float, float } %1842, 3, !dbg !47
  %1847 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1631, float %1632, float %1633, float %1634, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1728, i32 %1729) #2, !dbg !47
  %1848 = extractvalue { float, float, float, float } %1847, 0, !dbg !47
  %1849 = extractvalue { float, float, float, float } %1847, 1, !dbg !47
  %1850 = extractvalue { float, float, float, float } %1847, 2, !dbg !47
  %1851 = extractvalue { float, float, float, float } %1847, 3, !dbg !47
  %1852 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1636, float %1637, float %1638, float %1639, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1738, i32 %1739) #2, !dbg !47
  %1853 = extractvalue { float, float, float, float } %1852, 0, !dbg !47
  %1854 = extractvalue { float, float, float, float } %1852, 1, !dbg !47
  %1855 = extractvalue { float, float, float, float } %1852, 2, !dbg !47
  %1856 = extractvalue { float, float, float, float } %1852, 3, !dbg !47
  %1857 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1641, float %1642, float %1643, float %1644, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1748, i32 %1749) #2, !dbg !47
  %1858 = extractvalue { float, float, float, float } %1857, 0, !dbg !47
  %1859 = extractvalue { float, float, float, float } %1857, 1, !dbg !47
  %1860 = extractvalue { float, float, float, float } %1857, 2, !dbg !47
  %1861 = extractvalue { float, float, float, float } %1857, 3, !dbg !47
  %1862 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1646, float %1647, float %1648, float %1649, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1758, i32 %1759) #2, !dbg !47
  %1863 = extractvalue { float, float, float, float } %1862, 0, !dbg !47
  %1864 = extractvalue { float, float, float, float } %1862, 1, !dbg !47
  %1865 = extractvalue { float, float, float, float } %1862, 2, !dbg !47
  %1866 = extractvalue { float, float, float, float } %1862, 3, !dbg !47
  %1867 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1651, float %1652, float %1653, float %1654, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1768, i32 %1769) #2, !dbg !47
  %1868 = extractvalue { float, float, float, float } %1867, 0, !dbg !47
  %1869 = extractvalue { float, float, float, float } %1867, 1, !dbg !47
  %1870 = extractvalue { float, float, float, float } %1867, 2, !dbg !47
  %1871 = extractvalue { float, float, float, float } %1867, 3, !dbg !47
  %1872 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1656, float %1657, float %1658, float %1659, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1778, i32 %1779) #2, !dbg !47
  %1873 = extractvalue { float, float, float, float } %1872, 0, !dbg !47
  %1874 = extractvalue { float, float, float, float } %1872, 1, !dbg !47
  %1875 = extractvalue { float, float, float, float } %1872, 2, !dbg !47
  %1876 = extractvalue { float, float, float, float } %1872, 3, !dbg !47
  %1877 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1661, float %1662, float %1663, float %1664, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1788, i32 %1789) #2, !dbg !47
  %1878 = extractvalue { float, float, float, float } %1877, 0, !dbg !47
  %1879 = extractvalue { float, float, float, float } %1877, 1, !dbg !47
  %1880 = extractvalue { float, float, float, float } %1877, 2, !dbg !47
  %1881 = extractvalue { float, float, float, float } %1877, 3, !dbg !47
  %1882 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1666, float %1667, float %1668, float %1669, i32 %1702, i32 %1703, i32 %1704, i32 %1705, i32 %1798, i32 %1799) #2, !dbg !47
  %1883 = extractvalue { float, float, float, float } %1882, 0, !dbg !47
  %1884 = extractvalue { float, float, float, float } %1882, 1, !dbg !47
  %1885 = extractvalue { float, float, float, float } %1882, 2, !dbg !47
  %1886 = extractvalue { float, float, float, float } %1882, 3, !dbg !47
  %1887 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1808, float %1809, float %1810, float %1811, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1730, i32 %1731) #2, !dbg !47
  %1888 = extractvalue { float, float, float, float } %1887, 0, !dbg !47
  %1889 = extractvalue { float, float, float, float } %1887, 1, !dbg !47
  %1890 = extractvalue { float, float, float, float } %1887, 2, !dbg !47
  %1891 = extractvalue { float, float, float, float } %1887, 3, !dbg !47
  %1892 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1813, float %1814, float %1815, float %1816, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1740, i32 %1741) #2, !dbg !47
  %1893 = extractvalue { float, float, float, float } %1892, 0, !dbg !47
  %1894 = extractvalue { float, float, float, float } %1892, 1, !dbg !47
  %1895 = extractvalue { float, float, float, float } %1892, 2, !dbg !47
  %1896 = extractvalue { float, float, float, float } %1892, 3, !dbg !47
  %1897 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1818, float %1819, float %1820, float %1821, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1750, i32 %1751) #2, !dbg !47
  %1898 = extractvalue { float, float, float, float } %1897, 0, !dbg !47
  %1899 = extractvalue { float, float, float, float } %1897, 1, !dbg !47
  %1900 = extractvalue { float, float, float, float } %1897, 2, !dbg !47
  %1901 = extractvalue { float, float, float, float } %1897, 3, !dbg !47
  %1902 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1823, float %1824, float %1825, float %1826, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1760, i32 %1761) #2, !dbg !47
  %1903 = extractvalue { float, float, float, float } %1902, 0, !dbg !47
  %1904 = extractvalue { float, float, float, float } %1902, 1, !dbg !47
  %1905 = extractvalue { float, float, float, float } %1902, 2, !dbg !47
  %1906 = extractvalue { float, float, float, float } %1902, 3, !dbg !47
  %1907 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1828, float %1829, float %1830, float %1831, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1770, i32 %1771) #2, !dbg !47
  %1908 = extractvalue { float, float, float, float } %1907, 0, !dbg !47
  %1909 = extractvalue { float, float, float, float } %1907, 1, !dbg !47
  %1910 = extractvalue { float, float, float, float } %1907, 2, !dbg !47
  %1911 = extractvalue { float, float, float, float } %1907, 3, !dbg !47
  %1912 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1833, float %1834, float %1835, float %1836, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1780, i32 %1781) #2, !dbg !47
  %1913 = extractvalue { float, float, float, float } %1912, 0, !dbg !47
  %1914 = extractvalue { float, float, float, float } %1912, 1, !dbg !47
  %1915 = extractvalue { float, float, float, float } %1912, 2, !dbg !47
  %1916 = extractvalue { float, float, float, float } %1912, 3, !dbg !47
  %1917 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1838, float %1839, float %1840, float %1841, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1790, i32 %1791) #2, !dbg !47
  %1918 = extractvalue { float, float, float, float } %1917, 0, !dbg !47
  %1919 = extractvalue { float, float, float, float } %1917, 1, !dbg !47
  %1920 = extractvalue { float, float, float, float } %1917, 2, !dbg !47
  %1921 = extractvalue { float, float, float, float } %1917, 3, !dbg !47
  %1922 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1843, float %1844, float %1845, float %1846, i32 %1681, i32 %1682, i32 %1683, i32 %1684, i32 %1800, i32 %1801) #2, !dbg !47
  %1923 = extractvalue { float, float, float, float } %1922, 0, !dbg !47
  %1924 = extractvalue { float, float, float, float } %1922, 1, !dbg !47
  %1925 = extractvalue { float, float, float, float } %1922, 2, !dbg !47
  %1926 = extractvalue { float, float, float, float } %1922, 3, !dbg !47
  %1927 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1848, float %1849, float %1850, float %1851, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1730, i32 %1731) #2, !dbg !47
  %1928 = extractvalue { float, float, float, float } %1927, 0, !dbg !47
  %1929 = extractvalue { float, float, float, float } %1927, 1, !dbg !47
  %1930 = extractvalue { float, float, float, float } %1927, 2, !dbg !47
  %1931 = extractvalue { float, float, float, float } %1927, 3, !dbg !47
  %1932 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1853, float %1854, float %1855, float %1856, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1740, i32 %1741) #2, !dbg !47
  %1933 = extractvalue { float, float, float, float } %1932, 0, !dbg !47
  %1934 = extractvalue { float, float, float, float } %1932, 1, !dbg !47
  %1935 = extractvalue { float, float, float, float } %1932, 2, !dbg !47
  %1936 = extractvalue { float, float, float, float } %1932, 3, !dbg !47
  %1937 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1858, float %1859, float %1860, float %1861, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1750, i32 %1751) #2, !dbg !47
  %1938 = extractvalue { float, float, float, float } %1937, 0, !dbg !47
  %1939 = extractvalue { float, float, float, float } %1937, 1, !dbg !47
  %1940 = extractvalue { float, float, float, float } %1937, 2, !dbg !47
  %1941 = extractvalue { float, float, float, float } %1937, 3, !dbg !47
  %1942 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1863, float %1864, float %1865, float %1866, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1760, i32 %1761) #2, !dbg !47
  %1943 = extractvalue { float, float, float, float } %1942, 0, !dbg !47
  %1944 = extractvalue { float, float, float, float } %1942, 1, !dbg !47
  %1945 = extractvalue { float, float, float, float } %1942, 2, !dbg !47
  %1946 = extractvalue { float, float, float, float } %1942, 3, !dbg !47
  %1947 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1868, float %1869, float %1870, float %1871, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1770, i32 %1771) #2, !dbg !47
  %1948 = extractvalue { float, float, float, float } %1947, 0, !dbg !47
  %1949 = extractvalue { float, float, float, float } %1947, 1, !dbg !47
  %1950 = extractvalue { float, float, float, float } %1947, 2, !dbg !47
  %1951 = extractvalue { float, float, float, float } %1947, 3, !dbg !47
  %1952 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1873, float %1874, float %1875, float %1876, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1780, i32 %1781) #2, !dbg !47
  %1953 = extractvalue { float, float, float, float } %1952, 0, !dbg !47
  %1954 = extractvalue { float, float, float, float } %1952, 1, !dbg !47
  %1955 = extractvalue { float, float, float, float } %1952, 2, !dbg !47
  %1956 = extractvalue { float, float, float, float } %1952, 3, !dbg !47
  %1957 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1878, float %1879, float %1880, float %1881, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1790, i32 %1791) #2, !dbg !47
  %1958 = extractvalue { float, float, float, float } %1957, 0, !dbg !47
  %1959 = extractvalue { float, float, float, float } %1957, 1, !dbg !47
  %1960 = extractvalue { float, float, float, float } %1957, 2, !dbg !47
  %1961 = extractvalue { float, float, float, float } %1957, 3, !dbg !47
  %1962 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1883, float %1884, float %1885, float %1886, i32 %1709, i32 %1710, i32 %1711, i32 %1712, i32 %1800, i32 %1801) #2, !dbg !47
  %1963 = extractvalue { float, float, float, float } %1962, 0, !dbg !47
  %1964 = extractvalue { float, float, float, float } %1962, 1, !dbg !47
  %1965 = extractvalue { float, float, float, float } %1962, 2, !dbg !47
  %1966 = extractvalue { float, float, float, float } %1962, 3, !dbg !47
  %1967 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1888, float %1889, float %1890, float %1891, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1733, i32 %1734) #2, !dbg !47
  %1968 = extractvalue { float, float, float, float } %1967, 0, !dbg !47
  %1969 = extractvalue { float, float, float, float } %1967, 1, !dbg !47
  %1970 = extractvalue { float, float, float, float } %1967, 2, !dbg !47
  %1971 = extractvalue { float, float, float, float } %1967, 3, !dbg !47
  %1972 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1893, float %1894, float %1895, float %1896, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1743, i32 %1744) #2, !dbg !47
  %1973 = extractvalue { float, float, float, float } %1972, 0, !dbg !47
  %1974 = extractvalue { float, float, float, float } %1972, 1, !dbg !47
  %1975 = extractvalue { float, float, float, float } %1972, 2, !dbg !47
  %1976 = extractvalue { float, float, float, float } %1972, 3, !dbg !47
  %1977 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1898, float %1899, float %1900, float %1901, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1753, i32 %1754) #2, !dbg !47
  %1978 = extractvalue { float, float, float, float } %1977, 0, !dbg !47
  %1979 = extractvalue { float, float, float, float } %1977, 1, !dbg !47
  %1980 = extractvalue { float, float, float, float } %1977, 2, !dbg !47
  %1981 = extractvalue { float, float, float, float } %1977, 3, !dbg !47
  %1982 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1903, float %1904, float %1905, float %1906, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1763, i32 %1764) #2, !dbg !47
  %1983 = extractvalue { float, float, float, float } %1982, 0, !dbg !47
  %1984 = extractvalue { float, float, float, float } %1982, 1, !dbg !47
  %1985 = extractvalue { float, float, float, float } %1982, 2, !dbg !47
  %1986 = extractvalue { float, float, float, float } %1982, 3, !dbg !47
  %1987 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1908, float %1909, float %1910, float %1911, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1773, i32 %1774) #2, !dbg !47
  %1988 = extractvalue { float, float, float, float } %1987, 0, !dbg !47
  %1989 = extractvalue { float, float, float, float } %1987, 1, !dbg !47
  %1990 = extractvalue { float, float, float, float } %1987, 2, !dbg !47
  %1991 = extractvalue { float, float, float, float } %1987, 3, !dbg !47
  %1992 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1913, float %1914, float %1915, float %1916, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1783, i32 %1784) #2, !dbg !47
  %1993 = extractvalue { float, float, float, float } %1992, 0, !dbg !47
  %1994 = extractvalue { float, float, float, float } %1992, 1, !dbg !47
  %1995 = extractvalue { float, float, float, float } %1992, 2, !dbg !47
  %1996 = extractvalue { float, float, float, float } %1992, 3, !dbg !47
  %1997 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1918, float %1919, float %1920, float %1921, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1793, i32 %1794) #2, !dbg !47
  %1998 = extractvalue { float, float, float, float } %1997, 0, !dbg !47
  %1999 = extractvalue { float, float, float, float } %1997, 1, !dbg !47
  %2000 = extractvalue { float, float, float, float } %1997, 2, !dbg !47
  %2001 = extractvalue { float, float, float, float } %1997, 3, !dbg !47
  %2002 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1923, float %1924, float %1925, float %1926, i32 %1688, i32 %1689, i32 %1690, i32 %1691, i32 %1803, i32 %1804) #2, !dbg !47
  %2003 = extractvalue { float, float, float, float } %2002, 0, !dbg !47
  %2004 = extractvalue { float, float, float, float } %2002, 1, !dbg !47
  %2005 = extractvalue { float, float, float, float } %2002, 2, !dbg !47
  %2006 = extractvalue { float, float, float, float } %2002, 3, !dbg !47
  %2007 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1928, float %1929, float %1930, float %1931, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1733, i32 %1734) #2, !dbg !47
  %2008 = extractvalue { float, float, float, float } %2007, 0, !dbg !47
  %2009 = extractvalue { float, float, float, float } %2007, 1, !dbg !47
  %2010 = extractvalue { float, float, float, float } %2007, 2, !dbg !47
  %2011 = extractvalue { float, float, float, float } %2007, 3, !dbg !47
  %2012 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1933, float %1934, float %1935, float %1936, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1743, i32 %1744) #2, !dbg !47
  %2013 = extractvalue { float, float, float, float } %2012, 0, !dbg !47
  %2014 = extractvalue { float, float, float, float } %2012, 1, !dbg !47
  %2015 = extractvalue { float, float, float, float } %2012, 2, !dbg !47
  %2016 = extractvalue { float, float, float, float } %2012, 3, !dbg !47
  %2017 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1938, float %1939, float %1940, float %1941, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1753, i32 %1754) #2, !dbg !47
  %2018 = extractvalue { float, float, float, float } %2017, 0, !dbg !47
  %2019 = extractvalue { float, float, float, float } %2017, 1, !dbg !47
  %2020 = extractvalue { float, float, float, float } %2017, 2, !dbg !47
  %2021 = extractvalue { float, float, float, float } %2017, 3, !dbg !47
  %2022 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1943, float %1944, float %1945, float %1946, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1763, i32 %1764) #2, !dbg !47
  %2023 = extractvalue { float, float, float, float } %2022, 0, !dbg !47
  %2024 = extractvalue { float, float, float, float } %2022, 1, !dbg !47
  %2025 = extractvalue { float, float, float, float } %2022, 2, !dbg !47
  %2026 = extractvalue { float, float, float, float } %2022, 3, !dbg !47
  %2027 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1948, float %1949, float %1950, float %1951, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1773, i32 %1774) #2, !dbg !47
  %2028 = extractvalue { float, float, float, float } %2027, 0, !dbg !47
  %2029 = extractvalue { float, float, float, float } %2027, 1, !dbg !47
  %2030 = extractvalue { float, float, float, float } %2027, 2, !dbg !47
  %2031 = extractvalue { float, float, float, float } %2027, 3, !dbg !47
  %2032 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1953, float %1954, float %1955, float %1956, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1783, i32 %1784) #2, !dbg !47
  %2033 = extractvalue { float, float, float, float } %2032, 0, !dbg !47
  %2034 = extractvalue { float, float, float, float } %2032, 1, !dbg !47
  %2035 = extractvalue { float, float, float, float } %2032, 2, !dbg !47
  %2036 = extractvalue { float, float, float, float } %2032, 3, !dbg !47
  %2037 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1958, float %1959, float %1960, float %1961, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1793, i32 %1794) #2, !dbg !47
  %2038 = extractvalue { float, float, float, float } %2037, 0, !dbg !47
  %2039 = extractvalue { float, float, float, float } %2037, 1, !dbg !47
  %2040 = extractvalue { float, float, float, float } %2037, 2, !dbg !47
  %2041 = extractvalue { float, float, float, float } %2037, 3, !dbg !47
  %2042 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1963, float %1964, float %1965, float %1966, i32 %1716, i32 %1717, i32 %1718, i32 %1719, i32 %1803, i32 %1804) #2, !dbg !47
  %2043 = extractvalue { float, float, float, float } %2042, 0, !dbg !47
  %2044 = extractvalue { float, float, float, float } %2042, 1, !dbg !47
  %2045 = extractvalue { float, float, float, float } %2042, 2, !dbg !47
  %2046 = extractvalue { float, float, float, float } %2042, 3, !dbg !47
  %2047 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1968, float %1969, float %1970, float %1971, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1735, i32 %1736) #2, !dbg !47
  %2048 = extractvalue { float, float, float, float } %2047, 0, !dbg !47
  %2049 = extractvalue { float, float, float, float } %2047, 1, !dbg !47
  %2050 = extractvalue { float, float, float, float } %2047, 2, !dbg !47
  %2051 = extractvalue { float, float, float, float } %2047, 3, !dbg !47
  %2052 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1973, float %1974, float %1975, float %1976, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1745, i32 %1746) #2, !dbg !47
  %2053 = extractvalue { float, float, float, float } %2052, 0, !dbg !47
  %2054 = extractvalue { float, float, float, float } %2052, 1, !dbg !47
  %2055 = extractvalue { float, float, float, float } %2052, 2, !dbg !47
  %2056 = extractvalue { float, float, float, float } %2052, 3, !dbg !47
  %2057 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1978, float %1979, float %1980, float %1981, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1755, i32 %1756) #2, !dbg !47
  %2058 = extractvalue { float, float, float, float } %2057, 0, !dbg !47
  %2059 = extractvalue { float, float, float, float } %2057, 1, !dbg !47
  %2060 = extractvalue { float, float, float, float } %2057, 2, !dbg !47
  %2061 = extractvalue { float, float, float, float } %2057, 3, !dbg !47
  %2062 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1983, float %1984, float %1985, float %1986, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1765, i32 %1766) #2, !dbg !47
  %2063 = extractvalue { float, float, float, float } %2062, 0, !dbg !47
  %2064 = extractvalue { float, float, float, float } %2062, 1, !dbg !47
  %2065 = extractvalue { float, float, float, float } %2062, 2, !dbg !47
  %2066 = extractvalue { float, float, float, float } %2062, 3, !dbg !47
  %2067 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1988, float %1989, float %1990, float %1991, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1775, i32 %1776) #2, !dbg !47
  %2068 = extractvalue { float, float, float, float } %2067, 0, !dbg !47
  %2069 = extractvalue { float, float, float, float } %2067, 1, !dbg !47
  %2070 = extractvalue { float, float, float, float } %2067, 2, !dbg !47
  %2071 = extractvalue { float, float, float, float } %2067, 3, !dbg !47
  %2072 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1993, float %1994, float %1995, float %1996, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1785, i32 %1786) #2, !dbg !47
  %2073 = extractvalue { float, float, float, float } %2072, 0, !dbg !47
  %2074 = extractvalue { float, float, float, float } %2072, 1, !dbg !47
  %2075 = extractvalue { float, float, float, float } %2072, 2, !dbg !47
  %2076 = extractvalue { float, float, float, float } %2072, 3, !dbg !47
  %2077 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1998, float %1999, float %2000, float %2001, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1795, i32 %1796) #2, !dbg !47
  %2078 = extractvalue { float, float, float, float } %2077, 0, !dbg !47
  %2079 = extractvalue { float, float, float, float } %2077, 1, !dbg !47
  %2080 = extractvalue { float, float, float, float } %2077, 2, !dbg !47
  %2081 = extractvalue { float, float, float, float } %2077, 3, !dbg !47
  %2082 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2003, float %2004, float %2005, float %2006, i32 %1695, i32 %1696, i32 %1697, i32 %1698, i32 %1805, i32 %1806) #2, !dbg !47
  %2083 = extractvalue { float, float, float, float } %2082, 0, !dbg !47
  %2084 = extractvalue { float, float, float, float } %2082, 1, !dbg !47
  %2085 = extractvalue { float, float, float, float } %2082, 2, !dbg !47
  %2086 = extractvalue { float, float, float, float } %2082, 3, !dbg !47
  %2087 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2008, float %2009, float %2010, float %2011, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1735, i32 %1736) #2, !dbg !47
  %2088 = extractvalue { float, float, float, float } %2087, 0, !dbg !47
  %2089 = extractvalue { float, float, float, float } %2087, 1, !dbg !47
  %2090 = extractvalue { float, float, float, float } %2087, 2, !dbg !47
  %2091 = extractvalue { float, float, float, float } %2087, 3, !dbg !47
  %2092 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2013, float %2014, float %2015, float %2016, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1745, i32 %1746) #2, !dbg !47
  %2093 = extractvalue { float, float, float, float } %2092, 0, !dbg !47
  %2094 = extractvalue { float, float, float, float } %2092, 1, !dbg !47
  %2095 = extractvalue { float, float, float, float } %2092, 2, !dbg !47
  %2096 = extractvalue { float, float, float, float } %2092, 3, !dbg !47
  %2097 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2018, float %2019, float %2020, float %2021, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1755, i32 %1756) #2, !dbg !47
  %2098 = extractvalue { float, float, float, float } %2097, 0, !dbg !47
  %2099 = extractvalue { float, float, float, float } %2097, 1, !dbg !47
  %2100 = extractvalue { float, float, float, float } %2097, 2, !dbg !47
  %2101 = extractvalue { float, float, float, float } %2097, 3, !dbg !47
  %2102 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2023, float %2024, float %2025, float %2026, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1765, i32 %1766) #2, !dbg !47
  %2103 = extractvalue { float, float, float, float } %2102, 0, !dbg !47
  %2104 = extractvalue { float, float, float, float } %2102, 1, !dbg !47
  %2105 = extractvalue { float, float, float, float } %2102, 2, !dbg !47
  %2106 = extractvalue { float, float, float, float } %2102, 3, !dbg !47
  %2107 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2028, float %2029, float %2030, float %2031, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1775, i32 %1776) #2, !dbg !47
  %2108 = extractvalue { float, float, float, float } %2107, 0, !dbg !47
  %2109 = extractvalue { float, float, float, float } %2107, 1, !dbg !47
  %2110 = extractvalue { float, float, float, float } %2107, 2, !dbg !47
  %2111 = extractvalue { float, float, float, float } %2107, 3, !dbg !47
  %2112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2033, float %2034, float %2035, float %2036, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1785, i32 %1786) #2, !dbg !47
  %2113 = extractvalue { float, float, float, float } %2112, 0, !dbg !47
  %2114 = extractvalue { float, float, float, float } %2112, 1, !dbg !47
  %2115 = extractvalue { float, float, float, float } %2112, 2, !dbg !47
  %2116 = extractvalue { float, float, float, float } %2112, 3, !dbg !47
  %2117 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2038, float %2039, float %2040, float %2041, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1795, i32 %1796) #2, !dbg !47
  %2118 = extractvalue { float, float, float, float } %2117, 0, !dbg !47
  %2119 = extractvalue { float, float, float, float } %2117, 1, !dbg !47
  %2120 = extractvalue { float, float, float, float } %2117, 2, !dbg !47
  %2121 = extractvalue { float, float, float, float } %2117, 3, !dbg !47
  %2122 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2043, float %2044, float %2045, float %2046, i32 %1723, i32 %1724, i32 %1725, i32 %1726, i32 %1805, i32 %1806) #2, !dbg !47
  %2123 = extractvalue { float, float, float, float } %2122, 0, !dbg !47
  %2124 = extractvalue { float, float, float, float } %2122, 1, !dbg !47
  %2125 = extractvalue { float, float, float, float } %2122, 2, !dbg !47
  %2126 = extractvalue { float, float, float, float } %2122, 3, !dbg !47
  %2127 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %1212, !dbg !37
  %2128 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %439, !dbg !48
  %2129 = ptrtoint ptr addrspace(3) %2128 to i32, !dbg !48
  %2130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2129) #2, !dbg !48
  %2131 = extractvalue { i32, i32, i32, i32 } %2130, 0, !dbg !48
  %2132 = bitcast i32 %2131 to <2 x bfloat>, !dbg !48
  %2133 = extractvalue { i32, i32, i32, i32 } %2130, 1, !dbg !48
  %2134 = bitcast i32 %2133 to <2 x bfloat>, !dbg !48
  %2135 = extractvalue { i32, i32, i32, i32 } %2130, 2, !dbg !48
  %2136 = bitcast i32 %2135 to <2 x bfloat>, !dbg !48
  %2137 = extractvalue { i32, i32, i32, i32 } %2130, 3, !dbg !48
  %2138 = bitcast i32 %2137 to <2 x bfloat>, !dbg !48
  %2139 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %442, !dbg !48
  %2140 = ptrtoint ptr addrspace(3) %2139 to i32, !dbg !48
  %2141 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2140) #2, !dbg !48
  %2142 = extractvalue { i32, i32, i32, i32 } %2141, 0, !dbg !48
  %2143 = bitcast i32 %2142 to <2 x bfloat>, !dbg !48
  %2144 = extractvalue { i32, i32, i32, i32 } %2141, 1, !dbg !48
  %2145 = bitcast i32 %2144 to <2 x bfloat>, !dbg !48
  %2146 = extractvalue { i32, i32, i32, i32 } %2141, 2, !dbg !48
  %2147 = bitcast i32 %2146 to <2 x bfloat>, !dbg !48
  %2148 = extractvalue { i32, i32, i32, i32 } %2141, 3, !dbg !48
  %2149 = bitcast i32 %2148 to <2 x bfloat>, !dbg !48
  %2150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %445, !dbg !48
  %2151 = ptrtoint ptr addrspace(3) %2150 to i32, !dbg !48
  %2152 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2151) #2, !dbg !48
  %2153 = extractvalue { i32, i32, i32, i32 } %2152, 0, !dbg !48
  %2154 = bitcast i32 %2153 to <2 x bfloat>, !dbg !48
  %2155 = extractvalue { i32, i32, i32, i32 } %2152, 1, !dbg !48
  %2156 = bitcast i32 %2155 to <2 x bfloat>, !dbg !48
  %2157 = extractvalue { i32, i32, i32, i32 } %2152, 2, !dbg !48
  %2158 = bitcast i32 %2157 to <2 x bfloat>, !dbg !48
  %2159 = extractvalue { i32, i32, i32, i32 } %2152, 3, !dbg !48
  %2160 = bitcast i32 %2159 to <2 x bfloat>, !dbg !48
  %2161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %448, !dbg !48
  %2162 = ptrtoint ptr addrspace(3) %2161 to i32, !dbg !48
  %2163 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2162) #2, !dbg !48
  %2164 = extractvalue { i32, i32, i32, i32 } %2163, 0, !dbg !48
  %2165 = bitcast i32 %2164 to <2 x bfloat>, !dbg !48
  %2166 = extractvalue { i32, i32, i32, i32 } %2163, 1, !dbg !48
  %2167 = bitcast i32 %2166 to <2 x bfloat>, !dbg !48
  %2168 = extractvalue { i32, i32, i32, i32 } %2163, 2, !dbg !48
  %2169 = bitcast i32 %2168 to <2 x bfloat>, !dbg !48
  %2170 = extractvalue { i32, i32, i32, i32 } %2163, 3, !dbg !48
  %2171 = bitcast i32 %2170 to <2 x bfloat>, !dbg !48
  %2172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %451, !dbg !48
  %2173 = ptrtoint ptr addrspace(3) %2172 to i32, !dbg !48
  %2174 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2173) #2, !dbg !48
  %2175 = extractvalue { i32, i32, i32, i32 } %2174, 0, !dbg !48
  %2176 = bitcast i32 %2175 to <2 x bfloat>, !dbg !48
  %2177 = extractvalue { i32, i32, i32, i32 } %2174, 1, !dbg !48
  %2178 = bitcast i32 %2177 to <2 x bfloat>, !dbg !48
  %2179 = extractvalue { i32, i32, i32, i32 } %2174, 2, !dbg !48
  %2180 = bitcast i32 %2179 to <2 x bfloat>, !dbg !48
  %2181 = extractvalue { i32, i32, i32, i32 } %2174, 3, !dbg !48
  %2182 = bitcast i32 %2181 to <2 x bfloat>, !dbg !48
  %2183 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %454, !dbg !48
  %2184 = ptrtoint ptr addrspace(3) %2183 to i32, !dbg !48
  %2185 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2184) #2, !dbg !48
  %2186 = extractvalue { i32, i32, i32, i32 } %2185, 0, !dbg !48
  %2187 = bitcast i32 %2186 to <2 x bfloat>, !dbg !48
  %2188 = extractvalue { i32, i32, i32, i32 } %2185, 1, !dbg !48
  %2189 = bitcast i32 %2188 to <2 x bfloat>, !dbg !48
  %2190 = extractvalue { i32, i32, i32, i32 } %2185, 2, !dbg !48
  %2191 = bitcast i32 %2190 to <2 x bfloat>, !dbg !48
  %2192 = extractvalue { i32, i32, i32, i32 } %2185, 3, !dbg !48
  %2193 = bitcast i32 %2192 to <2 x bfloat>, !dbg !48
  %2194 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %457, !dbg !48
  %2195 = ptrtoint ptr addrspace(3) %2194 to i32, !dbg !48
  %2196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2195) #2, !dbg !48
  %2197 = extractvalue { i32, i32, i32, i32 } %2196, 0, !dbg !48
  %2198 = bitcast i32 %2197 to <2 x bfloat>, !dbg !48
  %2199 = extractvalue { i32, i32, i32, i32 } %2196, 1, !dbg !48
  %2200 = bitcast i32 %2199 to <2 x bfloat>, !dbg !48
  %2201 = extractvalue { i32, i32, i32, i32 } %2196, 2, !dbg !48
  %2202 = bitcast i32 %2201 to <2 x bfloat>, !dbg !48
  %2203 = extractvalue { i32, i32, i32, i32 } %2196, 3, !dbg !48
  %2204 = bitcast i32 %2203 to <2 x bfloat>, !dbg !48
  %2205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2127, i32 %460, !dbg !48
  %2206 = ptrtoint ptr addrspace(3) %2205 to i32, !dbg !48
  %2207 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2206) #2, !dbg !48
  %2208 = extractvalue { i32, i32, i32, i32 } %2207, 0, !dbg !48
  %2209 = bitcast i32 %2208 to <2 x bfloat>, !dbg !48
  %2210 = extractvalue { i32, i32, i32, i32 } %2207, 1, !dbg !48
  %2211 = bitcast i32 %2210 to <2 x bfloat>, !dbg !48
  %2212 = extractvalue { i32, i32, i32, i32 } %2207, 2, !dbg !48
  %2213 = bitcast i32 %2212 to <2 x bfloat>, !dbg !48
  %2214 = extractvalue { i32, i32, i32, i32 } %2207, 3, !dbg !48
  %2215 = bitcast i32 %2214 to <2 x bfloat>, !dbg !48
  %2216 = fpext <2 x bfloat> %2132 to <2 x float>, !dbg !48
  %2217 = insertelement <2 x float> poison, float %2048, i64 0, !dbg !48
  %2218 = insertelement <2 x float> %2217, float %2049, i64 1, !dbg !48
  %2219 = fsub <2 x float> %2216, %2218, !dbg !48
  %2220 = fptrunc <2 x float> %2219 to <2 x bfloat>, !dbg !49
  %2221 = fpext <2 x bfloat> %2134 to <2 x float>, !dbg !48
  %2222 = insertelement <2 x float> poison, float %2050, i64 0, !dbg !48
  %2223 = insertelement <2 x float> %2222, float %2051, i64 1, !dbg !48
  %2224 = fsub <2 x float> %2221, %2223, !dbg !48
  %2225 = fptrunc <2 x float> %2224 to <2 x bfloat>, !dbg !49
  %2226 = fpext <2 x bfloat> %2136 to <2 x float>, !dbg !48
  %2227 = insertelement <2 x float> poison, float %2053, i64 0, !dbg !48
  %2228 = insertelement <2 x float> %2227, float %2054, i64 1, !dbg !48
  %2229 = fsub <2 x float> %2226, %2228, !dbg !48
  %2230 = fptrunc <2 x float> %2229 to <2 x bfloat>, !dbg !49
  %2231 = fpext <2 x bfloat> %2138 to <2 x float>, !dbg !48
  %2232 = insertelement <2 x float> poison, float %2055, i64 0, !dbg !48
  %2233 = insertelement <2 x float> %2232, float %2056, i64 1, !dbg !48
  %2234 = fsub <2 x float> %2231, %2233, !dbg !48
  %2235 = fptrunc <2 x float> %2234 to <2 x bfloat>, !dbg !49
  %2236 = fpext <2 x bfloat> %2143 to <2 x float>, !dbg !48
  %2237 = insertelement <2 x float> poison, float %2058, i64 0, !dbg !48
  %2238 = insertelement <2 x float> %2237, float %2059, i64 1, !dbg !48
  %2239 = fsub <2 x float> %2236, %2238, !dbg !48
  %2240 = fptrunc <2 x float> %2239 to <2 x bfloat>, !dbg !49
  %2241 = fpext <2 x bfloat> %2145 to <2 x float>, !dbg !48
  %2242 = insertelement <2 x float> poison, float %2060, i64 0, !dbg !48
  %2243 = insertelement <2 x float> %2242, float %2061, i64 1, !dbg !48
  %2244 = fsub <2 x float> %2241, %2243, !dbg !48
  %2245 = fptrunc <2 x float> %2244 to <2 x bfloat>, !dbg !49
  %2246 = fpext <2 x bfloat> %2147 to <2 x float>, !dbg !48
  %2247 = insertelement <2 x float> poison, float %2063, i64 0, !dbg !48
  %2248 = insertelement <2 x float> %2247, float %2064, i64 1, !dbg !48
  %2249 = fsub <2 x float> %2246, %2248, !dbg !48
  %2250 = fptrunc <2 x float> %2249 to <2 x bfloat>, !dbg !49
  %2251 = fpext <2 x bfloat> %2149 to <2 x float>, !dbg !48
  %2252 = insertelement <2 x float> poison, float %2065, i64 0, !dbg !48
  %2253 = insertelement <2 x float> %2252, float %2066, i64 1, !dbg !48
  %2254 = fsub <2 x float> %2251, %2253, !dbg !48
  %2255 = fptrunc <2 x float> %2254 to <2 x bfloat>, !dbg !49
  %2256 = fpext <2 x bfloat> %2154 to <2 x float>, !dbg !48
  %2257 = insertelement <2 x float> poison, float %2068, i64 0, !dbg !48
  %2258 = insertelement <2 x float> %2257, float %2069, i64 1, !dbg !48
  %2259 = fsub <2 x float> %2256, %2258, !dbg !48
  %2260 = fptrunc <2 x float> %2259 to <2 x bfloat>, !dbg !49
  %2261 = fpext <2 x bfloat> %2156 to <2 x float>, !dbg !48
  %2262 = insertelement <2 x float> poison, float %2070, i64 0, !dbg !48
  %2263 = insertelement <2 x float> %2262, float %2071, i64 1, !dbg !48
  %2264 = fsub <2 x float> %2261, %2263, !dbg !48
  %2265 = fptrunc <2 x float> %2264 to <2 x bfloat>, !dbg !49
  %2266 = fpext <2 x bfloat> %2158 to <2 x float>, !dbg !48
  %2267 = insertelement <2 x float> poison, float %2073, i64 0, !dbg !48
  %2268 = insertelement <2 x float> %2267, float %2074, i64 1, !dbg !48
  %2269 = fsub <2 x float> %2266, %2268, !dbg !48
  %2270 = fptrunc <2 x float> %2269 to <2 x bfloat>, !dbg !49
  %2271 = fpext <2 x bfloat> %2160 to <2 x float>, !dbg !48
  %2272 = insertelement <2 x float> poison, float %2075, i64 0, !dbg !48
  %2273 = insertelement <2 x float> %2272, float %2076, i64 1, !dbg !48
  %2274 = fsub <2 x float> %2271, %2273, !dbg !48
  %2275 = fptrunc <2 x float> %2274 to <2 x bfloat>, !dbg !49
  %2276 = fpext <2 x bfloat> %2165 to <2 x float>, !dbg !48
  %2277 = insertelement <2 x float> poison, float %2078, i64 0, !dbg !48
  %2278 = insertelement <2 x float> %2277, float %2079, i64 1, !dbg !48
  %2279 = fsub <2 x float> %2276, %2278, !dbg !48
  %2280 = fptrunc <2 x float> %2279 to <2 x bfloat>, !dbg !49
  %2281 = fpext <2 x bfloat> %2167 to <2 x float>, !dbg !48
  %2282 = insertelement <2 x float> poison, float %2080, i64 0, !dbg !48
  %2283 = insertelement <2 x float> %2282, float %2081, i64 1, !dbg !48
  %2284 = fsub <2 x float> %2281, %2283, !dbg !48
  %2285 = fptrunc <2 x float> %2284 to <2 x bfloat>, !dbg !49
  %2286 = fpext <2 x bfloat> %2169 to <2 x float>, !dbg !48
  %2287 = insertelement <2 x float> poison, float %2083, i64 0, !dbg !48
  %2288 = insertelement <2 x float> %2287, float %2084, i64 1, !dbg !48
  %2289 = fsub <2 x float> %2286, %2288, !dbg !48
  %2290 = fptrunc <2 x float> %2289 to <2 x bfloat>, !dbg !49
  %2291 = fpext <2 x bfloat> %2171 to <2 x float>, !dbg !48
  %2292 = insertelement <2 x float> poison, float %2085, i64 0, !dbg !48
  %2293 = insertelement <2 x float> %2292, float %2086, i64 1, !dbg !48
  %2294 = fsub <2 x float> %2291, %2293, !dbg !48
  %2295 = fptrunc <2 x float> %2294 to <2 x bfloat>, !dbg !49
  %2296 = fpext <2 x bfloat> %2176 to <2 x float>, !dbg !48
  %2297 = insertelement <2 x float> poison, float %2088, i64 0, !dbg !48
  %2298 = insertelement <2 x float> %2297, float %2089, i64 1, !dbg !48
  %2299 = fsub <2 x float> %2296, %2298, !dbg !48
  %2300 = fptrunc <2 x float> %2299 to <2 x bfloat>, !dbg !49
  %2301 = fpext <2 x bfloat> %2178 to <2 x float>, !dbg !48
  %2302 = insertelement <2 x float> poison, float %2090, i64 0, !dbg !48
  %2303 = insertelement <2 x float> %2302, float %2091, i64 1, !dbg !48
  %2304 = fsub <2 x float> %2301, %2303, !dbg !48
  %2305 = fptrunc <2 x float> %2304 to <2 x bfloat>, !dbg !49
  %2306 = fpext <2 x bfloat> %2180 to <2 x float>, !dbg !48
  %2307 = insertelement <2 x float> poison, float %2093, i64 0, !dbg !48
  %2308 = insertelement <2 x float> %2307, float %2094, i64 1, !dbg !48
  %2309 = fsub <2 x float> %2306, %2308, !dbg !48
  %2310 = fptrunc <2 x float> %2309 to <2 x bfloat>, !dbg !49
  %2311 = fpext <2 x bfloat> %2182 to <2 x float>, !dbg !48
  %2312 = insertelement <2 x float> poison, float %2095, i64 0, !dbg !48
  %2313 = insertelement <2 x float> %2312, float %2096, i64 1, !dbg !48
  %2314 = fsub <2 x float> %2311, %2313, !dbg !48
  %2315 = fptrunc <2 x float> %2314 to <2 x bfloat>, !dbg !49
  %2316 = fpext <2 x bfloat> %2187 to <2 x float>, !dbg !48
  %2317 = insertelement <2 x float> poison, float %2098, i64 0, !dbg !48
  %2318 = insertelement <2 x float> %2317, float %2099, i64 1, !dbg !48
  %2319 = fsub <2 x float> %2316, %2318, !dbg !48
  %2320 = fptrunc <2 x float> %2319 to <2 x bfloat>, !dbg !49
  %2321 = fpext <2 x bfloat> %2189 to <2 x float>, !dbg !48
  %2322 = insertelement <2 x float> poison, float %2100, i64 0, !dbg !48
  %2323 = insertelement <2 x float> %2322, float %2101, i64 1, !dbg !48
  %2324 = fsub <2 x float> %2321, %2323, !dbg !48
  %2325 = fptrunc <2 x float> %2324 to <2 x bfloat>, !dbg !49
  %2326 = fpext <2 x bfloat> %2191 to <2 x float>, !dbg !48
  %2327 = insertelement <2 x float> poison, float %2103, i64 0, !dbg !48
  %2328 = insertelement <2 x float> %2327, float %2104, i64 1, !dbg !48
  %2329 = fsub <2 x float> %2326, %2328, !dbg !48
  %2330 = fptrunc <2 x float> %2329 to <2 x bfloat>, !dbg !49
  %2331 = fpext <2 x bfloat> %2193 to <2 x float>, !dbg !48
  %2332 = insertelement <2 x float> poison, float %2105, i64 0, !dbg !48
  %2333 = insertelement <2 x float> %2332, float %2106, i64 1, !dbg !48
  %2334 = fsub <2 x float> %2331, %2333, !dbg !48
  %2335 = fptrunc <2 x float> %2334 to <2 x bfloat>, !dbg !49
  %2336 = fpext <2 x bfloat> %2198 to <2 x float>, !dbg !48
  %2337 = insertelement <2 x float> poison, float %2108, i64 0, !dbg !48
  %2338 = insertelement <2 x float> %2337, float %2109, i64 1, !dbg !48
  %2339 = fsub <2 x float> %2336, %2338, !dbg !48
  %2340 = fptrunc <2 x float> %2339 to <2 x bfloat>, !dbg !49
  %2341 = fpext <2 x bfloat> %2200 to <2 x float>, !dbg !48
  %2342 = insertelement <2 x float> poison, float %2110, i64 0, !dbg !48
  %2343 = insertelement <2 x float> %2342, float %2111, i64 1, !dbg !48
  %2344 = fsub <2 x float> %2341, %2343, !dbg !48
  %2345 = fptrunc <2 x float> %2344 to <2 x bfloat>, !dbg !49
  %2346 = fpext <2 x bfloat> %2202 to <2 x float>, !dbg !48
  %2347 = insertelement <2 x float> poison, float %2113, i64 0, !dbg !48
  %2348 = insertelement <2 x float> %2347, float %2114, i64 1, !dbg !48
  %2349 = fsub <2 x float> %2346, %2348, !dbg !48
  %2350 = fptrunc <2 x float> %2349 to <2 x bfloat>, !dbg !49
  %2351 = fpext <2 x bfloat> %2204 to <2 x float>, !dbg !48
  %2352 = insertelement <2 x float> poison, float %2115, i64 0, !dbg !48
  %2353 = insertelement <2 x float> %2352, float %2116, i64 1, !dbg !48
  %2354 = fsub <2 x float> %2351, %2353, !dbg !48
  %2355 = fptrunc <2 x float> %2354 to <2 x bfloat>, !dbg !49
  %2356 = fpext <2 x bfloat> %2209 to <2 x float>, !dbg !48
  %2357 = insertelement <2 x float> poison, float %2118, i64 0, !dbg !48
  %2358 = insertelement <2 x float> %2357, float %2119, i64 1, !dbg !48
  %2359 = fsub <2 x float> %2356, %2358, !dbg !48
  %2360 = fptrunc <2 x float> %2359 to <2 x bfloat>, !dbg !49
  %2361 = fpext <2 x bfloat> %2211 to <2 x float>, !dbg !48
  %2362 = insertelement <2 x float> poison, float %2120, i64 0, !dbg !48
  %2363 = insertelement <2 x float> %2362, float %2121, i64 1, !dbg !48
  %2364 = fsub <2 x float> %2361, %2363, !dbg !48
  %2365 = fptrunc <2 x float> %2364 to <2 x bfloat>, !dbg !49
  %2366 = fpext <2 x bfloat> %2213 to <2 x float>, !dbg !48
  %2367 = insertelement <2 x float> poison, float %2123, i64 0, !dbg !48
  %2368 = insertelement <2 x float> %2367, float %2124, i64 1, !dbg !48
  %2369 = fsub <2 x float> %2366, %2368, !dbg !48
  %2370 = fptrunc <2 x float> %2369 to <2 x bfloat>, !dbg !49
  %2371 = fpext <2 x bfloat> %2215 to <2 x float>, !dbg !48
  %2372 = insertelement <2 x float> poison, float %2125, i64 0, !dbg !48
  %2373 = insertelement <2 x float> %2372, float %2126, i64 1, !dbg !48
  %2374 = fsub <2 x float> %2371, %2373, !dbg !48
  %2375 = fptrunc <2 x float> %2374 to <2 x bfloat>, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %2220, ptr addrspace(3) %671, align 4, !dbg !49
  store <2 x bfloat> %2225, ptr addrspace(3) %672, align 4, !dbg !49
  store <2 x bfloat> %2230, ptr addrspace(3) %673, align 4, !dbg !49
  store <2 x bfloat> %2235, ptr addrspace(3) %674, align 4, !dbg !49
  store <2 x bfloat> %2240, ptr addrspace(3) %675, align 4, !dbg !49
  store <2 x bfloat> %2245, ptr addrspace(3) %676, align 4, !dbg !49
  store <2 x bfloat> %2250, ptr addrspace(3) %677, align 4, !dbg !49
  store <2 x bfloat> %2255, ptr addrspace(3) %678, align 4, !dbg !49
  store <2 x bfloat> %2260, ptr addrspace(3) %679, align 4, !dbg !49
  store <2 x bfloat> %2265, ptr addrspace(3) %680, align 4, !dbg !49
  store <2 x bfloat> %2270, ptr addrspace(3) %681, align 4, !dbg !49
  store <2 x bfloat> %2275, ptr addrspace(3) %682, align 4, !dbg !49
  store <2 x bfloat> %2280, ptr addrspace(3) %683, align 4, !dbg !49
  store <2 x bfloat> %2285, ptr addrspace(3) %684, align 4, !dbg !49
  store <2 x bfloat> %2290, ptr addrspace(3) %685, align 4, !dbg !49
  store <2 x bfloat> %2295, ptr addrspace(3) %686, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %2376 = load <4 x i32>, ptr addrspace(3) %687, align 16, !dbg !49
  %2377 = load <4 x i32>, ptr addrspace(3) %688, align 16, !dbg !49
  %2378 = load <4 x i32>, ptr addrspace(3) %689, align 16, !dbg !49
  %2379 = load <4 x i32>, ptr addrspace(3) %690, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  store <2 x bfloat> %2300, ptr addrspace(3) %671, align 4, !dbg !49
  store <2 x bfloat> %2305, ptr addrspace(3) %672, align 4, !dbg !49
  store <2 x bfloat> %2310, ptr addrspace(3) %673, align 4, !dbg !49
  store <2 x bfloat> %2315, ptr addrspace(3) %674, align 4, !dbg !49
  store <2 x bfloat> %2320, ptr addrspace(3) %675, align 4, !dbg !49
  store <2 x bfloat> %2325, ptr addrspace(3) %676, align 4, !dbg !49
  store <2 x bfloat> %2330, ptr addrspace(3) %677, align 4, !dbg !49
  store <2 x bfloat> %2335, ptr addrspace(3) %678, align 4, !dbg !49
  store <2 x bfloat> %2340, ptr addrspace(3) %679, align 4, !dbg !49
  store <2 x bfloat> %2345, ptr addrspace(3) %680, align 4, !dbg !49
  store <2 x bfloat> %2350, ptr addrspace(3) %681, align 4, !dbg !49
  store <2 x bfloat> %2355, ptr addrspace(3) %682, align 4, !dbg !49
  store <2 x bfloat> %2360, ptr addrspace(3) %683, align 4, !dbg !49
  store <2 x bfloat> %2365, ptr addrspace(3) %684, align 4, !dbg !49
  store <2 x bfloat> %2370, ptr addrspace(3) %685, align 4, !dbg !49
  store <2 x bfloat> %2375, ptr addrspace(3) %686, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !49
  %2380 = load <4 x i32>, ptr addrspace(3) %687, align 16, !dbg !49
  %2381 = load <4 x i32>, ptr addrspace(3) %688, align 16, !dbg !49
  %2382 = load <4 x i32>, ptr addrspace(3) %689, align 16, !dbg !49
  %2383 = load <4 x i32>, ptr addrspace(3) %690, align 16, !dbg !49
  %2384 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn132.pn1211, !dbg !50
  %2385 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn116.pn1212, !dbg !50
  %2386 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn100.pn1213, !dbg !50
  %2387 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn84.pn1214, !dbg !50
  %2388 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn68.pn1215, !dbg !50
  %2389 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn52.pn1216, !dbg !50
  %2390 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn36.pn1217, !dbg !50
  %2391 = getelementptr bfloat, ptr addrspace(1) %30, i64 %.pn20.pn1218, !dbg !50
  %.extract1144 = extractelement <4 x i32> %2376, i64 0, !dbg !50
  %.extract1146 = extractelement <4 x i32> %2376, i64 1, !dbg !50
  %.extract1148 = extractelement <4 x i32> %2376, i64 2, !dbg !50
  %.extract1150 = extractelement <4 x i32> %2376, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1144, i32 %.extract1146, i32 %.extract1148, i32 %.extract1150, ptr addrspace(1) %2384, i1 %.pn349.pn1227) #2, !dbg !50
  %.extract1152 = extractelement <4 x i32> %2377, i64 0, !dbg !50
  %.extract1154 = extractelement <4 x i32> %2377, i64 1, !dbg !50
  %.extract1156 = extractelement <4 x i32> %2377, i64 2, !dbg !50
  %.extract1158 = extractelement <4 x i32> %2377, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1152, i32 %.extract1154, i32 %.extract1156, i32 %.extract1158, ptr addrspace(1) %2385, i1 %.pn333.pn1228) #2, !dbg !50
  %.extract1160 = extractelement <4 x i32> %2378, i64 0, !dbg !50
  %.extract1162 = extractelement <4 x i32> %2378, i64 1, !dbg !50
  %.extract1164 = extractelement <4 x i32> %2378, i64 2, !dbg !50
  %.extract1166 = extractelement <4 x i32> %2378, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1160, i32 %.extract1162, i32 %.extract1164, i32 %.extract1166, ptr addrspace(1) %2386, i1 %.pn317.pn1229) #2, !dbg !50
  %.extract1168 = extractelement <4 x i32> %2379, i64 0, !dbg !50
  %.extract1170 = extractelement <4 x i32> %2379, i64 1, !dbg !50
  %.extract1172 = extractelement <4 x i32> %2379, i64 2, !dbg !50
  %.extract1174 = extractelement <4 x i32> %2379, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1168, i32 %.extract1170, i32 %.extract1172, i32 %.extract1174, ptr addrspace(1) %2387, i1 %.pn301.pn1230) #2, !dbg !50
  %.extract1176 = extractelement <4 x i32> %2380, i64 0, !dbg !50
  %.extract1178 = extractelement <4 x i32> %2380, i64 1, !dbg !50
  %.extract1180 = extractelement <4 x i32> %2380, i64 2, !dbg !50
  %.extract1182 = extractelement <4 x i32> %2380, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1176, i32 %.extract1178, i32 %.extract1180, i32 %.extract1182, ptr addrspace(1) %2388, i1 %.pn285.pn1231) #2, !dbg !50
  %.extract1184 = extractelement <4 x i32> %2381, i64 0, !dbg !50
  %.extract1186 = extractelement <4 x i32> %2381, i64 1, !dbg !50
  %.extract1188 = extractelement <4 x i32> %2381, i64 2, !dbg !50
  %.extract1190 = extractelement <4 x i32> %2381, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1184, i32 %.extract1186, i32 %.extract1188, i32 %.extract1190, ptr addrspace(1) %2389, i1 %.pn269.pn1232) #2, !dbg !50
  %.extract1192 = extractelement <4 x i32> %2382, i64 0, !dbg !50
  %.extract1194 = extractelement <4 x i32> %2382, i64 1, !dbg !50
  %.extract1196 = extractelement <4 x i32> %2382, i64 2, !dbg !50
  %.extract1198 = extractelement <4 x i32> %2382, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1192, i32 %.extract1194, i32 %.extract1196, i32 %.extract1198, ptr addrspace(1) %2390, i1 %.pn253.pn1233) #2, !dbg !50
  %.extract1200 = extractelement <4 x i32> %2383, i64 0, !dbg !50
  %.extract1202 = extractelement <4 x i32> %2383, i64 1, !dbg !50
  %.extract1204 = extractelement <4 x i32> %2383, i64 2, !dbg !50
  %.extract1206 = extractelement <4 x i32> %2383, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract1200, i32 %.extract1202, i32 %.extract1204, i32 %.extract1206, ptr addrspace(1) %2391, i1 %.pn237.pn1234) #2, !dbg !50
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !51
  %indvars.iv.next.tr = trunc i64 %indvars.iv.next to i32, !dbg !52
  %2392 = shl i32 %indvars.iv.next.tr, 6, !dbg !52
  %2393 = tail call i32 @llvm.smin.i32(i32 %2392, i32 %7), !dbg !52
  %2394 = add nuw nsw i32 %705, %52, !dbg !53
  %2395 = add nuw nsw i32 %53, %705, !dbg !53
  %2396 = add nuw nsw i32 %54, %705, !dbg !53
  %2397 = add nuw nsw i32 %55, %705, !dbg !53
  %2398 = icmp slt i32 %2394, %7, !dbg !54
  %2399 = icmp slt i32 %2395, %7, !dbg !54
  %2400 = icmp slt i32 %2396, %7, !dbg !54
  %2401 = icmp slt i32 %2397, %7, !dbg !54
  %2402 = shl i32 %2393, 5, !dbg !55
  %2403 = add i32 %2402, -32, !dbg !55
  %2404 = sext i32 %2403 to i64, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %84, i64 %2404, !dbg !57
  %2405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %gep) #2, !dbg !58
  %2406 = bitcast i32 %2405 to float, !dbg !58
  %.idx1011 = shl i32 %839, 8, !dbg !38
  %2407 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 102912), i32 %.idx1011, !dbg !38
  %2408 = getelementptr inbounds nuw float, ptr addrspace(3) %2407, i32 %52, !dbg !38
  %2409 = load float, ptr addrspace(3) %2408, align 4, !dbg !38
  %2410 = getelementptr inbounds nuw i8, ptr addrspace(3) %2407, i32 %46, !dbg !38
  %2411 = getelementptr inbounds nuw i8, ptr addrspace(3) %2410, i32 %34, !dbg !38
  %2412 = getelementptr inbounds nuw i8, ptr addrspace(3) %2411, i32 %35, !dbg !38
  %2413 = getelementptr inbounds nuw float, ptr addrspace(3) %2412, i32 %51, !dbg !38
  %2414 = getelementptr inbounds nuw i8, ptr addrspace(3) %2413, i32 32, !dbg !38
  %2415 = load float, ptr addrspace(3) %2414, align 4, !dbg !38
  %2416 = getelementptr inbounds nuw i8, ptr addrspace(3) %2413, i32 128, !dbg !38
  %2417 = load float, ptr addrspace(3) %2416, align 4, !dbg !38
  %2418 = getelementptr inbounds nuw i8, ptr addrspace(3) %2413, i32 160, !dbg !38
  %2419 = load float, ptr addrspace(3) %2418, align 4, !dbg !38
  %2420 = fsub float %2406, %2409, !dbg !59
  %2421 = fsub float %2406, %2415, !dbg !59
  %2422 = fsub float %2406, %2417, !dbg !59
  %2423 = fsub float %2406, %2419, !dbg !59
  %2424 = fmul float %2420, 0x3FF7154760000000, !dbg !60
  %2425 = tail call float @llvm.nvvm.ex2.approx.f(float %2424), !dbg !60
  %2426 = fmul float %2421, 0x3FF7154760000000, !dbg !60
  %2427 = tail call float @llvm.nvvm.ex2.approx.f(float %2426), !dbg !60
  %2428 = fmul float %2422, 0x3FF7154760000000, !dbg !60
  %2429 = tail call float @llvm.nvvm.ex2.approx.f(float %2428), !dbg !60
  %2430 = fmul float %2423, 0x3FF7154760000000, !dbg !60
  %2431 = tail call float @llvm.nvvm.ex2.approx.f(float %2430), !dbg !60
  %2432 = select i1 %2398, float %2425, float 0.000000e+00, !dbg !61
  %2433 = select i1 %2399, float %2427, float 0.000000e+00, !dbg !61
  %2434 = select i1 %2400, float %2429, float 0.000000e+00, !dbg !61
  %2435 = select i1 %2401, float %2431, float 0.000000e+00, !dbg !61
  %2436 = extractelement <2 x float> %2219, i64 0, !dbg !62
  %2437 = fmul float %2436, %2432, !dbg !62
  %2438 = extractelement <2 x float> %2219, i64 1, !dbg !62
  %2439 = fmul float %2438, %2432, !dbg !62
  %2440 = extractelement <2 x float> %2224, i64 0, !dbg !62
  %2441 = fmul float %2440, %2433, !dbg !62
  %2442 = extractelement <2 x float> %2224, i64 1, !dbg !62
  %2443 = fmul float %2442, %2433, !dbg !62
  %2444 = extractelement <2 x float> %2229, i64 0, !dbg !62
  %2445 = fmul float %2444, %2432, !dbg !62
  %2446 = extractelement <2 x float> %2229, i64 1, !dbg !62
  %2447 = fmul float %2446, %2432, !dbg !62
  %2448 = extractelement <2 x float> %2234, i64 0, !dbg !62
  %2449 = fmul float %2448, %2433, !dbg !62
  %2450 = extractelement <2 x float> %2234, i64 1, !dbg !62
  %2451 = fmul float %2450, %2433, !dbg !62
  %2452 = extractelement <2 x float> %2239, i64 0, !dbg !62
  %2453 = fmul float %2452, %2432, !dbg !62
  %2454 = extractelement <2 x float> %2239, i64 1, !dbg !62
  %2455 = fmul float %2454, %2432, !dbg !62
  %2456 = extractelement <2 x float> %2244, i64 0, !dbg !62
  %2457 = fmul float %2456, %2433, !dbg !62
  %2458 = extractelement <2 x float> %2244, i64 1, !dbg !62
  %2459 = fmul float %2458, %2433, !dbg !62
  %2460 = extractelement <2 x float> %2249, i64 0, !dbg !62
  %2461 = fmul float %2460, %2432, !dbg !62
  %2462 = extractelement <2 x float> %2249, i64 1, !dbg !62
  %2463 = fmul float %2462, %2432, !dbg !62
  %2464 = extractelement <2 x float> %2254, i64 0, !dbg !62
  %2465 = fmul float %2464, %2433, !dbg !62
  %2466 = extractelement <2 x float> %2254, i64 1, !dbg !62
  %2467 = fmul float %2466, %2433, !dbg !62
  %2468 = extractelement <2 x float> %2259, i64 0, !dbg !62
  %2469 = fmul float %2468, %2432, !dbg !62
  %2470 = extractelement <2 x float> %2259, i64 1, !dbg !62
  %2471 = fmul float %2470, %2432, !dbg !62
  %2472 = extractelement <2 x float> %2264, i64 0, !dbg !62
  %2473 = fmul float %2472, %2433, !dbg !62
  %2474 = extractelement <2 x float> %2264, i64 1, !dbg !62
  %2475 = fmul float %2474, %2433, !dbg !62
  %2476 = extractelement <2 x float> %2269, i64 0, !dbg !62
  %2477 = fmul float %2476, %2432, !dbg !62
  %2478 = extractelement <2 x float> %2269, i64 1, !dbg !62
  %2479 = fmul float %2478, %2432, !dbg !62
  %2480 = extractelement <2 x float> %2274, i64 0, !dbg !62
  %2481 = fmul float %2480, %2433, !dbg !62
  %2482 = extractelement <2 x float> %2274, i64 1, !dbg !62
  %2483 = fmul float %2482, %2433, !dbg !62
  %2484 = extractelement <2 x float> %2279, i64 0, !dbg !62
  %2485 = fmul float %2484, %2432, !dbg !62
  %2486 = extractelement <2 x float> %2279, i64 1, !dbg !62
  %2487 = fmul float %2486, %2432, !dbg !62
  %2488 = extractelement <2 x float> %2284, i64 0, !dbg !62
  %2489 = fmul float %2488, %2433, !dbg !62
  %2490 = extractelement <2 x float> %2284, i64 1, !dbg !62
  %2491 = fmul float %2490, %2433, !dbg !62
  %2492 = extractelement <2 x float> %2289, i64 0, !dbg !62
  %2493 = fmul float %2492, %2432, !dbg !62
  %2494 = extractelement <2 x float> %2289, i64 1, !dbg !62
  %2495 = fmul float %2494, %2432, !dbg !62
  %2496 = extractelement <2 x float> %2294, i64 0, !dbg !62
  %2497 = fmul float %2496, %2433, !dbg !62
  %2498 = extractelement <2 x float> %2294, i64 1, !dbg !62
  %2499 = fmul float %2498, %2433, !dbg !62
  %2500 = extractelement <2 x float> %2299, i64 0, !dbg !62
  %2501 = fmul float %2500, %2434, !dbg !62
  %2502 = extractelement <2 x float> %2299, i64 1, !dbg !62
  %2503 = fmul float %2502, %2434, !dbg !62
  %2504 = extractelement <2 x float> %2304, i64 0, !dbg !62
  %2505 = fmul float %2504, %2435, !dbg !62
  %2506 = extractelement <2 x float> %2304, i64 1, !dbg !62
  %2507 = fmul float %2506, %2435, !dbg !62
  %2508 = extractelement <2 x float> %2309, i64 0, !dbg !62
  %2509 = fmul float %2508, %2434, !dbg !62
  %2510 = extractelement <2 x float> %2309, i64 1, !dbg !62
  %2511 = fmul float %2510, %2434, !dbg !62
  %2512 = extractelement <2 x float> %2314, i64 0, !dbg !62
  %2513 = fmul float %2512, %2435, !dbg !62
  %2514 = extractelement <2 x float> %2314, i64 1, !dbg !62
  %2515 = fmul float %2514, %2435, !dbg !62
  %2516 = extractelement <2 x float> %2319, i64 0, !dbg !62
  %2517 = fmul float %2516, %2434, !dbg !62
  %2518 = extractelement <2 x float> %2319, i64 1, !dbg !62
  %2519 = fmul float %2518, %2434, !dbg !62
  %2520 = extractelement <2 x float> %2324, i64 0, !dbg !62
  %2521 = fmul float %2520, %2435, !dbg !62
  %2522 = extractelement <2 x float> %2324, i64 1, !dbg !62
  %2523 = fmul float %2522, %2435, !dbg !62
  %2524 = extractelement <2 x float> %2329, i64 0, !dbg !62
  %2525 = fmul float %2524, %2434, !dbg !62
  %2526 = extractelement <2 x float> %2329, i64 1, !dbg !62
  %2527 = fmul float %2526, %2434, !dbg !62
  %2528 = extractelement <2 x float> %2334, i64 0, !dbg !62
  %2529 = fmul float %2528, %2435, !dbg !62
  %2530 = extractelement <2 x float> %2334, i64 1, !dbg !62
  %2531 = fmul float %2530, %2435, !dbg !62
  %2532 = extractelement <2 x float> %2339, i64 0, !dbg !62
  %2533 = fmul float %2532, %2434, !dbg !62
  %2534 = extractelement <2 x float> %2339, i64 1, !dbg !62
  %2535 = fmul float %2534, %2434, !dbg !62
  %2536 = extractelement <2 x float> %2344, i64 0, !dbg !62
  %2537 = fmul float %2536, %2435, !dbg !62
  %2538 = extractelement <2 x float> %2344, i64 1, !dbg !62
  %2539 = fmul float %2538, %2435, !dbg !62
  %2540 = extractelement <2 x float> %2349, i64 0, !dbg !62
  %2541 = fmul float %2540, %2434, !dbg !62
  %2542 = extractelement <2 x float> %2349, i64 1, !dbg !62
  %2543 = fmul float %2542, %2434, !dbg !62
  %2544 = extractelement <2 x float> %2354, i64 0, !dbg !62
  %2545 = fmul float %2544, %2435, !dbg !62
  %2546 = extractelement <2 x float> %2354, i64 1, !dbg !62
  %2547 = fmul float %2546, %2435, !dbg !62
  %2548 = extractelement <2 x float> %2359, i64 0, !dbg !62
  %2549 = fmul float %2548, %2434, !dbg !62
  %2550 = extractelement <2 x float> %2359, i64 1, !dbg !62
  %2551 = fmul float %2550, %2434, !dbg !62
  %2552 = extractelement <2 x float> %2364, i64 0, !dbg !62
  %2553 = fmul float %2552, %2435, !dbg !62
  %2554 = extractelement <2 x float> %2364, i64 1, !dbg !62
  %2555 = fmul float %2554, %2435, !dbg !62
  %2556 = extractelement <2 x float> %2369, i64 0, !dbg !62
  %2557 = fmul float %2556, %2434, !dbg !62
  %2558 = extractelement <2 x float> %2369, i64 1, !dbg !62
  %2559 = fmul float %2558, %2434, !dbg !62
  %2560 = extractelement <2 x float> %2374, i64 0, !dbg !62
  %2561 = fmul float %2560, %2435, !dbg !62
  %2562 = extractelement <2 x float> %2374, i64 1, !dbg !62
  %2563 = fmul float %2562, %2435, !dbg !62
  %2564 = fmul float %2406, 0x3FF7154760000000, !dbg !63
  %2565 = tail call float @llvm.nvvm.ex2.approx.f(float %2564), !dbg !63
  %2566 = fmul float %772, %2565, !dbg !64
  %2567 = fmul float %773, %2565, !dbg !64
  %2568 = fmul float %774, %2565, !dbg !64
  %2569 = fmul float %775, %2565, !dbg !64
  %2570 = fmul float %776, %2565, !dbg !64
  %2571 = fmul float %777, %2565, !dbg !64
  %2572 = fmul float %778, %2565, !dbg !64
  %2573 = fmul float %779, %2565, !dbg !64
  %2574 = fmul float %780, %2565, !dbg !64
  %2575 = fmul float %781, %2565, !dbg !64
  %2576 = fmul float %782, %2565, !dbg !64
  %2577 = fmul float %783, %2565, !dbg !64
  %2578 = fmul float %784, %2565, !dbg !64
  %2579 = fmul float %785, %2565, !dbg !64
  %2580 = fmul float %786, %2565, !dbg !64
  %2581 = fmul float %787, %2565, !dbg !64
  %2582 = fmul float %788, %2565, !dbg !64
  %2583 = fmul float %789, %2565, !dbg !64
  %2584 = fmul float %790, %2565, !dbg !64
  %2585 = fmul float %791, %2565, !dbg !64
  %2586 = fmul float %792, %2565, !dbg !64
  %2587 = fmul float %793, %2565, !dbg !64
  %2588 = fmul float %794, %2565, !dbg !64
  %2589 = fmul float %795, %2565, !dbg !64
  %2590 = fmul float %796, %2565, !dbg !64
  %2591 = fmul float %797, %2565, !dbg !64
  %2592 = fmul float %798, %2565, !dbg !64
  %2593 = fmul float %799, %2565, !dbg !64
  %2594 = fmul float %800, %2565, !dbg !64
  %2595 = fmul float %801, %2565, !dbg !64
  %2596 = fmul float %802, %2565, !dbg !64
  %2597 = fmul float %803, %2565, !dbg !64
  %2598 = fmul float %804, %2565, !dbg !64
  %2599 = fmul float %805, %2565, !dbg !64
  %2600 = fmul float %806, %2565, !dbg !64
  %2601 = fmul float %807, %2565, !dbg !64
  %2602 = fmul float %808, %2565, !dbg !64
  %2603 = fmul float %809, %2565, !dbg !64
  %2604 = fmul float %810, %2565, !dbg !64
  %2605 = fmul float %811, %2565, !dbg !64
  %2606 = fmul float %812, %2565, !dbg !64
  %2607 = fmul float %813, %2565, !dbg !64
  %2608 = fmul float %814, %2565, !dbg !64
  %2609 = fmul float %815, %2565, !dbg !64
  %2610 = fmul float %816, %2565, !dbg !64
  %2611 = fmul float %817, %2565, !dbg !64
  %2612 = fmul float %818, %2565, !dbg !64
  %2613 = fmul float %819, %2565, !dbg !64
  %2614 = fmul float %820, %2565, !dbg !64
  %2615 = fmul float %821, %2565, !dbg !64
  %2616 = fmul float %822, %2565, !dbg !64
  %2617 = fmul float %823, %2565, !dbg !64
  %2618 = fmul float %824, %2565, !dbg !64
  %2619 = fmul float %825, %2565, !dbg !64
  %2620 = fmul float %826, %2565, !dbg !64
  %2621 = fmul float %827, %2565, !dbg !64
  %2622 = fmul float %828, %2565, !dbg !64
  %2623 = fmul float %829, %2565, !dbg !64
  %2624 = fmul float %830, %2565, !dbg !64
  %2625 = fmul float %831, %2565, !dbg !64
  %2626 = fmul float %832, %2565, !dbg !64
  %2627 = fmul float %833, %2565, !dbg !64
  %2628 = fmul float %834, %2565, !dbg !64
  %2629 = fmul float %835, %2565, !dbg !64
  %2630 = fmul float %708, %2565, !dbg !65
  %2631 = fmul float %709, %2565, !dbg !65
  %2632 = fmul float %710, %2565, !dbg !65
  %2633 = fmul float %711, %2565, !dbg !65
  %2634 = fmul float %712, %2565, !dbg !65
  %2635 = fmul float %713, %2565, !dbg !65
  %2636 = fmul float %714, %2565, !dbg !65
  %2637 = fmul float %715, %2565, !dbg !65
  %2638 = fmul float %716, %2565, !dbg !65
  %2639 = fmul float %717, %2565, !dbg !65
  %2640 = fmul float %718, %2565, !dbg !65
  %2641 = fmul float %719, %2565, !dbg !65
  %2642 = fmul float %720, %2565, !dbg !65
  %2643 = fmul float %721, %2565, !dbg !65
  %2644 = fmul float %722, %2565, !dbg !65
  %2645 = fmul float %723, %2565, !dbg !65
  %2646 = fmul float %724, %2565, !dbg !65
  %2647 = fmul float %725, %2565, !dbg !65
  %2648 = fmul float %726, %2565, !dbg !65
  %2649 = fmul float %727, %2565, !dbg !65
  %2650 = fmul float %728, %2565, !dbg !65
  %2651 = fmul float %729, %2565, !dbg !65
  %2652 = fmul float %730, %2565, !dbg !65
  %2653 = fmul float %731, %2565, !dbg !65
  %2654 = fmul float %732, %2565, !dbg !65
  %2655 = fmul float %733, %2565, !dbg !65
  %2656 = fmul float %734, %2565, !dbg !65
  %2657 = fmul float %735, %2565, !dbg !65
  %2658 = fmul float %736, %2565, !dbg !65
  %2659 = fmul float %737, %2565, !dbg !65
  %2660 = fmul float %738, %2565, !dbg !65
  %2661 = fmul float %739, %2565, !dbg !65
  %2662 = fmul float %740, %2565, !dbg !65
  %2663 = fmul float %741, %2565, !dbg !65
  %2664 = fmul float %742, %2565, !dbg !65
  %2665 = fmul float %743, %2565, !dbg !65
  %2666 = fmul float %744, %2565, !dbg !65
  %2667 = fmul float %745, %2565, !dbg !65
  %2668 = fmul float %746, %2565, !dbg !65
  %2669 = fmul float %747, %2565, !dbg !65
  %2670 = fmul float %748, %2565, !dbg !65
  %2671 = fmul float %749, %2565, !dbg !65
  %2672 = fmul float %750, %2565, !dbg !65
  %2673 = fmul float %751, %2565, !dbg !65
  %2674 = fmul float %752, %2565, !dbg !65
  %2675 = fmul float %753, %2565, !dbg !65
  %2676 = fmul float %754, %2565, !dbg !65
  %2677 = fmul float %755, %2565, !dbg !65
  %2678 = fmul float %756, %2565, !dbg !65
  %2679 = fmul float %757, %2565, !dbg !65
  %2680 = fmul float %758, %2565, !dbg !65
  %2681 = fmul float %759, %2565, !dbg !65
  %2682 = fmul float %760, %2565, !dbg !65
  %2683 = fmul float %761, %2565, !dbg !65
  %2684 = fmul float %762, %2565, !dbg !65
  %2685 = fmul float %763, %2565, !dbg !65
  %2686 = fmul float %764, %2565, !dbg !65
  %2687 = fmul float %765, %2565, !dbg !65
  %2688 = fmul float %766, %2565, !dbg !65
  %2689 = fmul float %767, %2565, !dbg !65
  %2690 = fmul float %768, %2565, !dbg !65
  %2691 = fmul float %769, %2565, !dbg !65
  %2692 = fmul float %770, %2565, !dbg !65
  %2693 = fmul float %771, %2565, !dbg !65
  %2694 = fptrunc float %2437 to bfloat, !dbg !66
  %2695 = fptrunc float %2439 to bfloat, !dbg !66
  %2696 = fptrunc float %2441 to bfloat, !dbg !66
  %2697 = fptrunc float %2443 to bfloat, !dbg !66
  %2698 = fptrunc float %2445 to bfloat, !dbg !66
  %2699 = fptrunc float %2447 to bfloat, !dbg !66
  %2700 = fptrunc float %2449 to bfloat, !dbg !66
  %2701 = fptrunc float %2451 to bfloat, !dbg !66
  %2702 = fptrunc float %2453 to bfloat, !dbg !66
  %2703 = fptrunc float %2455 to bfloat, !dbg !66
  %2704 = fptrunc float %2457 to bfloat, !dbg !66
  %2705 = fptrunc float %2459 to bfloat, !dbg !66
  %2706 = fptrunc float %2461 to bfloat, !dbg !66
  %2707 = fptrunc float %2463 to bfloat, !dbg !66
  %2708 = fptrunc float %2465 to bfloat, !dbg !66
  %2709 = fptrunc float %2467 to bfloat, !dbg !66
  %2710 = fptrunc float %2469 to bfloat, !dbg !66
  %2711 = fptrunc float %2471 to bfloat, !dbg !66
  %2712 = fptrunc float %2473 to bfloat, !dbg !66
  %2713 = fptrunc float %2475 to bfloat, !dbg !66
  %2714 = fptrunc float %2477 to bfloat, !dbg !66
  %2715 = fptrunc float %2479 to bfloat, !dbg !66
  %2716 = fptrunc float %2481 to bfloat, !dbg !66
  %2717 = fptrunc float %2483 to bfloat, !dbg !66
  %2718 = fptrunc float %2485 to bfloat, !dbg !66
  %2719 = fptrunc float %2487 to bfloat, !dbg !66
  %2720 = fptrunc float %2489 to bfloat, !dbg !66
  %2721 = fptrunc float %2491 to bfloat, !dbg !66
  %2722 = fptrunc float %2493 to bfloat, !dbg !66
  %2723 = fptrunc float %2495 to bfloat, !dbg !66
  %2724 = fptrunc float %2497 to bfloat, !dbg !66
  %2725 = fptrunc float %2499 to bfloat, !dbg !66
  %2726 = fptrunc float %2501 to bfloat, !dbg !66
  %2727 = fptrunc float %2503 to bfloat, !dbg !66
  %2728 = fptrunc float %2505 to bfloat, !dbg !66
  %2729 = fptrunc float %2507 to bfloat, !dbg !66
  %2730 = fptrunc float %2509 to bfloat, !dbg !66
  %2731 = fptrunc float %2511 to bfloat, !dbg !66
  %2732 = fptrunc float %2513 to bfloat, !dbg !66
  %2733 = fptrunc float %2515 to bfloat, !dbg !66
  %2734 = fptrunc float %2517 to bfloat, !dbg !66
  %2735 = fptrunc float %2519 to bfloat, !dbg !66
  %2736 = fptrunc float %2521 to bfloat, !dbg !66
  %2737 = fptrunc float %2523 to bfloat, !dbg !66
  %2738 = fptrunc float %2525 to bfloat, !dbg !66
  %2739 = fptrunc float %2527 to bfloat, !dbg !66
  %2740 = fptrunc float %2529 to bfloat, !dbg !66
  %2741 = fptrunc float %2531 to bfloat, !dbg !66
  %2742 = fptrunc float %2533 to bfloat, !dbg !66
  %2743 = fptrunc float %2535 to bfloat, !dbg !66
  %2744 = fptrunc float %2537 to bfloat, !dbg !66
  %2745 = fptrunc float %2539 to bfloat, !dbg !66
  %2746 = fptrunc float %2541 to bfloat, !dbg !66
  %2747 = fptrunc float %2543 to bfloat, !dbg !66
  %2748 = fptrunc float %2545 to bfloat, !dbg !66
  %2749 = fptrunc float %2547 to bfloat, !dbg !66
  %2750 = fptrunc float %2549 to bfloat, !dbg !66
  %2751 = fptrunc float %2551 to bfloat, !dbg !66
  %2752 = fptrunc float %2553 to bfloat, !dbg !66
  %2753 = fptrunc float %2555 to bfloat, !dbg !66
  %2754 = fptrunc float %2557 to bfloat, !dbg !66
  %2755 = fptrunc float %2559 to bfloat, !dbg !66
  %2756 = fptrunc float %2561 to bfloat, !dbg !66
  %2757 = fptrunc float %2563 to bfloat, !dbg !66
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %2758 = insertelement <2 x bfloat> poison, bfloat %2694, i64 0, !dbg !66
  %2759 = insertelement <2 x bfloat> %2758, bfloat %2695, i64 1, !dbg !66
  %2760 = bitcast <2 x bfloat> %2759 to i32, !dbg !66
  %2761 = insertelement <2 x bfloat> poison, bfloat %2696, i64 0, !dbg !66
  %2762 = insertelement <2 x bfloat> %2761, bfloat %2697, i64 1, !dbg !66
  %2763 = bitcast <2 x bfloat> %2762 to i32, !dbg !66
  %2764 = insertelement <2 x bfloat> poison, bfloat %2698, i64 0, !dbg !66
  %2765 = insertelement <2 x bfloat> %2764, bfloat %2699, i64 1, !dbg !66
  %2766 = bitcast <2 x bfloat> %2765 to i32, !dbg !66
  %2767 = insertelement <2 x bfloat> poison, bfloat %2700, i64 0, !dbg !66
  %2768 = insertelement <2 x bfloat> %2767, bfloat %2701, i64 1, !dbg !66
  %2769 = bitcast <2 x bfloat> %2768 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %441, i32 %2760, i32 %2763, i32 %2766, i32 %2769) #2, !dbg !66
  %2770 = insertelement <2 x bfloat> poison, bfloat %2702, i64 0, !dbg !66
  %2771 = insertelement <2 x bfloat> %2770, bfloat %2703, i64 1, !dbg !66
  %2772 = bitcast <2 x bfloat> %2771 to i32, !dbg !66
  %2773 = insertelement <2 x bfloat> poison, bfloat %2704, i64 0, !dbg !66
  %2774 = insertelement <2 x bfloat> %2773, bfloat %2705, i64 1, !dbg !66
  %2775 = bitcast <2 x bfloat> %2774 to i32, !dbg !66
  %2776 = insertelement <2 x bfloat> poison, bfloat %2706, i64 0, !dbg !66
  %2777 = insertelement <2 x bfloat> %2776, bfloat %2707, i64 1, !dbg !66
  %2778 = bitcast <2 x bfloat> %2777 to i32, !dbg !66
  %2779 = insertelement <2 x bfloat> poison, bfloat %2708, i64 0, !dbg !66
  %2780 = insertelement <2 x bfloat> %2779, bfloat %2709, i64 1, !dbg !66
  %2781 = bitcast <2 x bfloat> %2780 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %444, i32 %2772, i32 %2775, i32 %2778, i32 %2781) #2, !dbg !66
  %2782 = insertelement <2 x bfloat> poison, bfloat %2710, i64 0, !dbg !66
  %2783 = insertelement <2 x bfloat> %2782, bfloat %2711, i64 1, !dbg !66
  %2784 = bitcast <2 x bfloat> %2783 to i32, !dbg !66
  %2785 = insertelement <2 x bfloat> poison, bfloat %2712, i64 0, !dbg !66
  %2786 = insertelement <2 x bfloat> %2785, bfloat %2713, i64 1, !dbg !66
  %2787 = bitcast <2 x bfloat> %2786 to i32, !dbg !66
  %2788 = insertelement <2 x bfloat> poison, bfloat %2714, i64 0, !dbg !66
  %2789 = insertelement <2 x bfloat> %2788, bfloat %2715, i64 1, !dbg !66
  %2790 = bitcast <2 x bfloat> %2789 to i32, !dbg !66
  %2791 = insertelement <2 x bfloat> poison, bfloat %2716, i64 0, !dbg !66
  %2792 = insertelement <2 x bfloat> %2791, bfloat %2717, i64 1, !dbg !66
  %2793 = bitcast <2 x bfloat> %2792 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %447, i32 %2784, i32 %2787, i32 %2790, i32 %2793) #2, !dbg !66
  %2794 = insertelement <2 x bfloat> poison, bfloat %2718, i64 0, !dbg !66
  %2795 = insertelement <2 x bfloat> %2794, bfloat %2719, i64 1, !dbg !66
  %2796 = bitcast <2 x bfloat> %2795 to i32, !dbg !66
  %2797 = insertelement <2 x bfloat> poison, bfloat %2720, i64 0, !dbg !66
  %2798 = insertelement <2 x bfloat> %2797, bfloat %2721, i64 1, !dbg !66
  %2799 = bitcast <2 x bfloat> %2798 to i32, !dbg !66
  %2800 = insertelement <2 x bfloat> poison, bfloat %2722, i64 0, !dbg !66
  %2801 = insertelement <2 x bfloat> %2800, bfloat %2723, i64 1, !dbg !66
  %2802 = bitcast <2 x bfloat> %2801 to i32, !dbg !66
  %2803 = insertelement <2 x bfloat> poison, bfloat %2724, i64 0, !dbg !66
  %2804 = insertelement <2 x bfloat> %2803, bfloat %2725, i64 1, !dbg !66
  %2805 = bitcast <2 x bfloat> %2804 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %450, i32 %2796, i32 %2799, i32 %2802, i32 %2805) #2, !dbg !66
  %2806 = insertelement <2 x bfloat> poison, bfloat %2726, i64 0, !dbg !66
  %2807 = insertelement <2 x bfloat> %2806, bfloat %2727, i64 1, !dbg !66
  %2808 = bitcast <2 x bfloat> %2807 to i32, !dbg !66
  %2809 = insertelement <2 x bfloat> poison, bfloat %2728, i64 0, !dbg !66
  %2810 = insertelement <2 x bfloat> %2809, bfloat %2729, i64 1, !dbg !66
  %2811 = bitcast <2 x bfloat> %2810 to i32, !dbg !66
  %2812 = insertelement <2 x bfloat> poison, bfloat %2730, i64 0, !dbg !66
  %2813 = insertelement <2 x bfloat> %2812, bfloat %2731, i64 1, !dbg !66
  %2814 = bitcast <2 x bfloat> %2813 to i32, !dbg !66
  %2815 = insertelement <2 x bfloat> poison, bfloat %2732, i64 0, !dbg !66
  %2816 = insertelement <2 x bfloat> %2815, bfloat %2733, i64 1, !dbg !66
  %2817 = bitcast <2 x bfloat> %2816 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %453, i32 %2808, i32 %2811, i32 %2814, i32 %2817) #2, !dbg !66
  %2818 = insertelement <2 x bfloat> poison, bfloat %2734, i64 0, !dbg !66
  %2819 = insertelement <2 x bfloat> %2818, bfloat %2735, i64 1, !dbg !66
  %2820 = bitcast <2 x bfloat> %2819 to i32, !dbg !66
  %2821 = insertelement <2 x bfloat> poison, bfloat %2736, i64 0, !dbg !66
  %2822 = insertelement <2 x bfloat> %2821, bfloat %2737, i64 1, !dbg !66
  %2823 = bitcast <2 x bfloat> %2822 to i32, !dbg !66
  %2824 = insertelement <2 x bfloat> poison, bfloat %2738, i64 0, !dbg !66
  %2825 = insertelement <2 x bfloat> %2824, bfloat %2739, i64 1, !dbg !66
  %2826 = bitcast <2 x bfloat> %2825 to i32, !dbg !66
  %2827 = insertelement <2 x bfloat> poison, bfloat %2740, i64 0, !dbg !66
  %2828 = insertelement <2 x bfloat> %2827, bfloat %2741, i64 1, !dbg !66
  %2829 = bitcast <2 x bfloat> %2828 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %456, i32 %2820, i32 %2823, i32 %2826, i32 %2829) #2, !dbg !66
  %2830 = insertelement <2 x bfloat> poison, bfloat %2742, i64 0, !dbg !66
  %2831 = insertelement <2 x bfloat> %2830, bfloat %2743, i64 1, !dbg !66
  %2832 = bitcast <2 x bfloat> %2831 to i32, !dbg !66
  %2833 = insertelement <2 x bfloat> poison, bfloat %2744, i64 0, !dbg !66
  %2834 = insertelement <2 x bfloat> %2833, bfloat %2745, i64 1, !dbg !66
  %2835 = bitcast <2 x bfloat> %2834 to i32, !dbg !66
  %2836 = insertelement <2 x bfloat> poison, bfloat %2746, i64 0, !dbg !66
  %2837 = insertelement <2 x bfloat> %2836, bfloat %2747, i64 1, !dbg !66
  %2838 = bitcast <2 x bfloat> %2837 to i32, !dbg !66
  %2839 = insertelement <2 x bfloat> poison, bfloat %2748, i64 0, !dbg !66
  %2840 = insertelement <2 x bfloat> %2839, bfloat %2749, i64 1, !dbg !66
  %2841 = bitcast <2 x bfloat> %2840 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %459, i32 %2832, i32 %2835, i32 %2838, i32 %2841) #2, !dbg !66
  %2842 = insertelement <2 x bfloat> poison, bfloat %2750, i64 0, !dbg !66
  %2843 = insertelement <2 x bfloat> %2842, bfloat %2751, i64 1, !dbg !66
  %2844 = bitcast <2 x bfloat> %2843 to i32, !dbg !66
  %2845 = insertelement <2 x bfloat> poison, bfloat %2752, i64 0, !dbg !66
  %2846 = insertelement <2 x bfloat> %2845, bfloat %2753, i64 1, !dbg !66
  %2847 = bitcast <2 x bfloat> %2846 to i32, !dbg !66
  %2848 = insertelement <2 x bfloat> poison, bfloat %2754, i64 0, !dbg !66
  %2849 = insertelement <2 x bfloat> %2848, bfloat %2755, i64 1, !dbg !66
  %2850 = bitcast <2 x bfloat> %2849 to i32, !dbg !66
  %2851 = insertelement <2 x bfloat> poison, bfloat %2756, i64 0, !dbg !66
  %2852 = insertelement <2 x bfloat> %2851, bfloat %2757, i64 1, !dbg !66
  %2853 = bitcast <2 x bfloat> %2852 to i32, !dbg !66
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %462, i32 %2844, i32 %2847, i32 %2850, i32 %2853) #2, !dbg !66
  %2854 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %1212, !dbg !39
  %2855 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %694, !dbg !39
  %2856 = ptrtoint ptr addrspace(3) %2855 to i32, !dbg !39
  %2857 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2856) #2, !dbg !39
  %2858 = extractvalue { i32, i32, i32, i32 } %2857, 0, !dbg !39
  %2859 = extractvalue { i32, i32, i32, i32 } %2857, 1, !dbg !39
  %2860 = extractvalue { i32, i32, i32, i32 } %2857, 2, !dbg !39
  %2861 = extractvalue { i32, i32, i32, i32 } %2857, 3, !dbg !39
  %2862 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %695, !dbg !39
  %2863 = ptrtoint ptr addrspace(3) %2862 to i32, !dbg !39
  %2864 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2863) #2, !dbg !39
  %2865 = extractvalue { i32, i32, i32, i32 } %2864, 0, !dbg !39
  %2866 = extractvalue { i32, i32, i32, i32 } %2864, 1, !dbg !39
  %2867 = extractvalue { i32, i32, i32, i32 } %2864, 2, !dbg !39
  %2868 = extractvalue { i32, i32, i32, i32 } %2864, 3, !dbg !39
  %2869 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %696, !dbg !39
  %2870 = ptrtoint ptr addrspace(3) %2869 to i32, !dbg !39
  %2871 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2870) #2, !dbg !39
  %2872 = extractvalue { i32, i32, i32, i32 } %2871, 0, !dbg !39
  %2873 = extractvalue { i32, i32, i32, i32 } %2871, 1, !dbg !39
  %2874 = extractvalue { i32, i32, i32, i32 } %2871, 2, !dbg !39
  %2875 = extractvalue { i32, i32, i32, i32 } %2871, 3, !dbg !39
  %2876 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %697, !dbg !39
  %2877 = ptrtoint ptr addrspace(3) %2876 to i32, !dbg !39
  %2878 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2877) #2, !dbg !39
  %2879 = extractvalue { i32, i32, i32, i32 } %2878, 0, !dbg !39
  %2880 = extractvalue { i32, i32, i32, i32 } %2878, 1, !dbg !39
  %2881 = extractvalue { i32, i32, i32, i32 } %2878, 2, !dbg !39
  %2882 = extractvalue { i32, i32, i32, i32 } %2878, 3, !dbg !39
  %2883 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %698, !dbg !39
  %2884 = ptrtoint ptr addrspace(3) %2883 to i32, !dbg !39
  %2885 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2884) #2, !dbg !39
  %2886 = extractvalue { i32, i32, i32, i32 } %2885, 0, !dbg !39
  %2887 = extractvalue { i32, i32, i32, i32 } %2885, 1, !dbg !39
  %2888 = extractvalue { i32, i32, i32, i32 } %2885, 2, !dbg !39
  %2889 = extractvalue { i32, i32, i32, i32 } %2885, 3, !dbg !39
  %2890 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %699, !dbg !39
  %2891 = ptrtoint ptr addrspace(3) %2890 to i32, !dbg !39
  %2892 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2891) #2, !dbg !39
  %2893 = extractvalue { i32, i32, i32, i32 } %2892, 0, !dbg !39
  %2894 = extractvalue { i32, i32, i32, i32 } %2892, 1, !dbg !39
  %2895 = extractvalue { i32, i32, i32, i32 } %2892, 2, !dbg !39
  %2896 = extractvalue { i32, i32, i32, i32 } %2892, 3, !dbg !39
  %2897 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %700, !dbg !39
  %2898 = ptrtoint ptr addrspace(3) %2897 to i32, !dbg !39
  %2899 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2898) #2, !dbg !39
  %2900 = extractvalue { i32, i32, i32, i32 } %2899, 0, !dbg !39
  %2901 = extractvalue { i32, i32, i32, i32 } %2899, 1, !dbg !39
  %2902 = extractvalue { i32, i32, i32, i32 } %2899, 2, !dbg !39
  %2903 = extractvalue { i32, i32, i32, i32 } %2899, 3, !dbg !39
  %2904 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2854, i32 %701, !dbg !39
  %2905 = ptrtoint ptr addrspace(3) %2904 to i32, !dbg !39
  %2906 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %2905) #2, !dbg !39
  %2907 = extractvalue { i32, i32, i32, i32 } %2906, 0, !dbg !39
  %2908 = extractvalue { i32, i32, i32, i32 } %2906, 1, !dbg !39
  %2909 = extractvalue { i32, i32, i32, i32 } %2906, 2, !dbg !39
  %2910 = extractvalue { i32, i32, i32, i32 } %2906, 3, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !66
  %2911 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %593) #2, !dbg !66
  %2912 = extractvalue { i32, i32, i32, i32 } %2911, 0, !dbg !66
  %2913 = extractvalue { i32, i32, i32, i32 } %2911, 1, !dbg !66
  %2914 = extractvalue { i32, i32, i32, i32 } %2911, 2, !dbg !66
  %2915 = extractvalue { i32, i32, i32, i32 } %2911, 3, !dbg !66
  %2916 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %596) #2, !dbg !66
  %2917 = extractvalue { i32, i32, i32, i32 } %2916, 0, !dbg !66
  %2918 = extractvalue { i32, i32, i32, i32 } %2916, 1, !dbg !66
  %2919 = extractvalue { i32, i32, i32, i32 } %2916, 2, !dbg !66
  %2920 = extractvalue { i32, i32, i32, i32 } %2916, 3, !dbg !66
  %2921 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %599) #2, !dbg !66
  %2922 = extractvalue { i32, i32, i32, i32 } %2921, 0, !dbg !66
  %2923 = extractvalue { i32, i32, i32, i32 } %2921, 1, !dbg !66
  %2924 = extractvalue { i32, i32, i32, i32 } %2921, 2, !dbg !66
  %2925 = extractvalue { i32, i32, i32, i32 } %2921, 3, !dbg !66
  %2926 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %602) #2, !dbg !66
  %2927 = extractvalue { i32, i32, i32, i32 } %2926, 0, !dbg !66
  %2928 = extractvalue { i32, i32, i32, i32 } %2926, 1, !dbg !66
  %2929 = extractvalue { i32, i32, i32, i32 } %2926, 2, !dbg !66
  %2930 = extractvalue { i32, i32, i32, i32 } %2926, 3, !dbg !66
  %2931 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %605) #2, !dbg !66
  %2932 = extractvalue { i32, i32, i32, i32 } %2931, 0, !dbg !66
  %2933 = extractvalue { i32, i32, i32, i32 } %2931, 1, !dbg !66
  %2934 = extractvalue { i32, i32, i32, i32 } %2931, 2, !dbg !66
  %2935 = extractvalue { i32, i32, i32, i32 } %2931, 3, !dbg !66
  %2936 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %608) #2, !dbg !66
  %2937 = extractvalue { i32, i32, i32, i32 } %2936, 0, !dbg !66
  %2938 = extractvalue { i32, i32, i32, i32 } %2936, 1, !dbg !66
  %2939 = extractvalue { i32, i32, i32, i32 } %2936, 2, !dbg !66
  %2940 = extractvalue { i32, i32, i32, i32 } %2936, 3, !dbg !66
  %2941 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %611) #2, !dbg !66
  %2942 = extractvalue { i32, i32, i32, i32 } %2941, 0, !dbg !66
  %2943 = extractvalue { i32, i32, i32, i32 } %2941, 1, !dbg !66
  %2944 = extractvalue { i32, i32, i32, i32 } %2941, 2, !dbg !66
  %2945 = extractvalue { i32, i32, i32, i32 } %2941, 3, !dbg !66
  %2946 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %614) #2, !dbg !66
  %2947 = extractvalue { i32, i32, i32, i32 } %2946, 0, !dbg !66
  %2948 = extractvalue { i32, i32, i32, i32 } %2946, 1, !dbg !66
  %2949 = extractvalue { i32, i32, i32, i32 } %2946, 2, !dbg !66
  %2950 = extractvalue { i32, i32, i32, i32 } %2946, 3, !dbg !66
  %2951 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %617) #2, !dbg !66
  %2952 = extractvalue { i32, i32, i32, i32 } %2951, 0, !dbg !66
  %2953 = extractvalue { i32, i32, i32, i32 } %2951, 1, !dbg !66
  %2954 = extractvalue { i32, i32, i32, i32 } %2951, 2, !dbg !66
  %2955 = extractvalue { i32, i32, i32, i32 } %2951, 3, !dbg !66
  %2956 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %620) #2, !dbg !66
  %2957 = extractvalue { i32, i32, i32, i32 } %2956, 0, !dbg !66
  %2958 = extractvalue { i32, i32, i32, i32 } %2956, 1, !dbg !66
  %2959 = extractvalue { i32, i32, i32, i32 } %2956, 2, !dbg !66
  %2960 = extractvalue { i32, i32, i32, i32 } %2956, 3, !dbg !66
  %2961 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %623) #2, !dbg !66
  %2962 = extractvalue { i32, i32, i32, i32 } %2961, 0, !dbg !66
  %2963 = extractvalue { i32, i32, i32, i32 } %2961, 1, !dbg !66
  %2964 = extractvalue { i32, i32, i32, i32 } %2961, 2, !dbg !66
  %2965 = extractvalue { i32, i32, i32, i32 } %2961, 3, !dbg !66
  %2966 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %626) #2, !dbg !66
  %2967 = extractvalue { i32, i32, i32, i32 } %2966, 0, !dbg !66
  %2968 = extractvalue { i32, i32, i32, i32 } %2966, 1, !dbg !66
  %2969 = extractvalue { i32, i32, i32, i32 } %2966, 2, !dbg !66
  %2970 = extractvalue { i32, i32, i32, i32 } %2966, 3, !dbg !66
  %2971 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %629) #2, !dbg !66
  %2972 = extractvalue { i32, i32, i32, i32 } %2971, 0, !dbg !66
  %2973 = extractvalue { i32, i32, i32, i32 } %2971, 1, !dbg !66
  %2974 = extractvalue { i32, i32, i32, i32 } %2971, 2, !dbg !66
  %2975 = extractvalue { i32, i32, i32, i32 } %2971, 3, !dbg !66
  %2976 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %632) #2, !dbg !66
  %2977 = extractvalue { i32, i32, i32, i32 } %2976, 0, !dbg !66
  %2978 = extractvalue { i32, i32, i32, i32 } %2976, 1, !dbg !66
  %2979 = extractvalue { i32, i32, i32, i32 } %2976, 2, !dbg !66
  %2980 = extractvalue { i32, i32, i32, i32 } %2976, 3, !dbg !66
  %2981 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %635) #2, !dbg !66
  %2982 = extractvalue { i32, i32, i32, i32 } %2981, 0, !dbg !66
  %2983 = extractvalue { i32, i32, i32, i32 } %2981, 1, !dbg !66
  %2984 = extractvalue { i32, i32, i32, i32 } %2981, 2, !dbg !66
  %2985 = extractvalue { i32, i32, i32, i32 } %2981, 3, !dbg !66
  %2986 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %638) #2, !dbg !66
  %2987 = extractvalue { i32, i32, i32, i32 } %2986, 0, !dbg !66
  %2988 = extractvalue { i32, i32, i32, i32 } %2986, 1, !dbg !66
  %2989 = extractvalue { i32, i32, i32, i32 } %2986, 2, !dbg !66
  %2990 = extractvalue { i32, i32, i32, i32 } %2986, 3, !dbg !66
  %2991 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2566, float %2567, float %2568, float %2569, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2912, i32 %2913) #2, !dbg !67
  %2992 = extractvalue { float, float, float, float } %2991, 0, !dbg !67
  %2993 = extractvalue { float, float, float, float } %2991, 1, !dbg !67
  %2994 = extractvalue { float, float, float, float } %2991, 2, !dbg !67
  %2995 = extractvalue { float, float, float, float } %2991, 3, !dbg !67
  %2996 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2570, float %2571, float %2572, float %2573, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2922, i32 %2923) #2, !dbg !67
  %2997 = extractvalue { float, float, float, float } %2996, 0, !dbg !67
  %2998 = extractvalue { float, float, float, float } %2996, 1, !dbg !67
  %2999 = extractvalue { float, float, float, float } %2996, 2, !dbg !67
  %3000 = extractvalue { float, float, float, float } %2996, 3, !dbg !67
  %3001 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2574, float %2575, float %2576, float %2577, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2932, i32 %2933) #2, !dbg !67
  %3002 = extractvalue { float, float, float, float } %3001, 0, !dbg !67
  %3003 = extractvalue { float, float, float, float } %3001, 1, !dbg !67
  %3004 = extractvalue { float, float, float, float } %3001, 2, !dbg !67
  %3005 = extractvalue { float, float, float, float } %3001, 3, !dbg !67
  %3006 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2578, float %2579, float %2580, float %2581, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2942, i32 %2943) #2, !dbg !67
  %3007 = extractvalue { float, float, float, float } %3006, 0, !dbg !67
  %3008 = extractvalue { float, float, float, float } %3006, 1, !dbg !67
  %3009 = extractvalue { float, float, float, float } %3006, 2, !dbg !67
  %3010 = extractvalue { float, float, float, float } %3006, 3, !dbg !67
  %3011 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2582, float %2583, float %2584, float %2585, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2952, i32 %2953) #2, !dbg !67
  %3012 = extractvalue { float, float, float, float } %3011, 0, !dbg !67
  %3013 = extractvalue { float, float, float, float } %3011, 1, !dbg !67
  %3014 = extractvalue { float, float, float, float } %3011, 2, !dbg !67
  %3015 = extractvalue { float, float, float, float } %3011, 3, !dbg !67
  %3016 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2586, float %2587, float %2588, float %2589, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2962, i32 %2963) #2, !dbg !67
  %3017 = extractvalue { float, float, float, float } %3016, 0, !dbg !67
  %3018 = extractvalue { float, float, float, float } %3016, 1, !dbg !67
  %3019 = extractvalue { float, float, float, float } %3016, 2, !dbg !67
  %3020 = extractvalue { float, float, float, float } %3016, 3, !dbg !67
  %3021 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2590, float %2591, float %2592, float %2593, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2972, i32 %2973) #2, !dbg !67
  %3022 = extractvalue { float, float, float, float } %3021, 0, !dbg !67
  %3023 = extractvalue { float, float, float, float } %3021, 1, !dbg !67
  %3024 = extractvalue { float, float, float, float } %3021, 2, !dbg !67
  %3025 = extractvalue { float, float, float, float } %3021, 3, !dbg !67
  %3026 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2594, float %2595, float %2596, float %2597, i32 %2858, i32 %2859, i32 %2860, i32 %2861, i32 %2982, i32 %2983) #2, !dbg !67
  %3027 = extractvalue { float, float, float, float } %3026, 0, !dbg !67
  %3028 = extractvalue { float, float, float, float } %3026, 1, !dbg !67
  %3029 = extractvalue { float, float, float, float } %3026, 2, !dbg !67
  %3030 = extractvalue { float, float, float, float } %3026, 3, !dbg !67
  %3031 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2598, float %2599, float %2600, float %2601, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2912, i32 %2913) #2, !dbg !67
  %3032 = extractvalue { float, float, float, float } %3031, 0, !dbg !67
  %3033 = extractvalue { float, float, float, float } %3031, 1, !dbg !67
  %3034 = extractvalue { float, float, float, float } %3031, 2, !dbg !67
  %3035 = extractvalue { float, float, float, float } %3031, 3, !dbg !67
  %3036 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2602, float %2603, float %2604, float %2605, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2922, i32 %2923) #2, !dbg !67
  %3037 = extractvalue { float, float, float, float } %3036, 0, !dbg !67
  %3038 = extractvalue { float, float, float, float } %3036, 1, !dbg !67
  %3039 = extractvalue { float, float, float, float } %3036, 2, !dbg !67
  %3040 = extractvalue { float, float, float, float } %3036, 3, !dbg !67
  %3041 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2606, float %2607, float %2608, float %2609, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2932, i32 %2933) #2, !dbg !67
  %3042 = extractvalue { float, float, float, float } %3041, 0, !dbg !67
  %3043 = extractvalue { float, float, float, float } %3041, 1, !dbg !67
  %3044 = extractvalue { float, float, float, float } %3041, 2, !dbg !67
  %3045 = extractvalue { float, float, float, float } %3041, 3, !dbg !67
  %3046 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2610, float %2611, float %2612, float %2613, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2942, i32 %2943) #2, !dbg !67
  %3047 = extractvalue { float, float, float, float } %3046, 0, !dbg !67
  %3048 = extractvalue { float, float, float, float } %3046, 1, !dbg !67
  %3049 = extractvalue { float, float, float, float } %3046, 2, !dbg !67
  %3050 = extractvalue { float, float, float, float } %3046, 3, !dbg !67
  %3051 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2614, float %2615, float %2616, float %2617, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2952, i32 %2953) #2, !dbg !67
  %3052 = extractvalue { float, float, float, float } %3051, 0, !dbg !67
  %3053 = extractvalue { float, float, float, float } %3051, 1, !dbg !67
  %3054 = extractvalue { float, float, float, float } %3051, 2, !dbg !67
  %3055 = extractvalue { float, float, float, float } %3051, 3, !dbg !67
  %3056 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2618, float %2619, float %2620, float %2621, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2962, i32 %2963) #2, !dbg !67
  %3057 = extractvalue { float, float, float, float } %3056, 0, !dbg !67
  %3058 = extractvalue { float, float, float, float } %3056, 1, !dbg !67
  %3059 = extractvalue { float, float, float, float } %3056, 2, !dbg !67
  %3060 = extractvalue { float, float, float, float } %3056, 3, !dbg !67
  %3061 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2622, float %2623, float %2624, float %2625, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2972, i32 %2973) #2, !dbg !67
  %3062 = extractvalue { float, float, float, float } %3061, 0, !dbg !67
  %3063 = extractvalue { float, float, float, float } %3061, 1, !dbg !67
  %3064 = extractvalue { float, float, float, float } %3061, 2, !dbg !67
  %3065 = extractvalue { float, float, float, float } %3061, 3, !dbg !67
  %3066 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2626, float %2627, float %2628, float %2629, i32 %2886, i32 %2887, i32 %2888, i32 %2889, i32 %2982, i32 %2983) #2, !dbg !67
  %3067 = extractvalue { float, float, float, float } %3066, 0, !dbg !67
  %3068 = extractvalue { float, float, float, float } %3066, 1, !dbg !67
  %3069 = extractvalue { float, float, float, float } %3066, 2, !dbg !67
  %3070 = extractvalue { float, float, float, float } %3066, 3, !dbg !67
  %3071 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2992, float %2993, float %2994, float %2995, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2914, i32 %2915) #2, !dbg !67
  %3072 = extractvalue { float, float, float, float } %3071, 0, !dbg !67
  %3073 = extractvalue { float, float, float, float } %3071, 1, !dbg !67
  %3074 = extractvalue { float, float, float, float } %3071, 2, !dbg !67
  %3075 = extractvalue { float, float, float, float } %3071, 3, !dbg !67
  %3076 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2997, float %2998, float %2999, float %3000, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2924, i32 %2925) #2, !dbg !67
  %3077 = extractvalue { float, float, float, float } %3076, 0, !dbg !67
  %3078 = extractvalue { float, float, float, float } %3076, 1, !dbg !67
  %3079 = extractvalue { float, float, float, float } %3076, 2, !dbg !67
  %3080 = extractvalue { float, float, float, float } %3076, 3, !dbg !67
  %3081 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3002, float %3003, float %3004, float %3005, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2934, i32 %2935) #2, !dbg !67
  %3082 = extractvalue { float, float, float, float } %3081, 0, !dbg !67
  %3083 = extractvalue { float, float, float, float } %3081, 1, !dbg !67
  %3084 = extractvalue { float, float, float, float } %3081, 2, !dbg !67
  %3085 = extractvalue { float, float, float, float } %3081, 3, !dbg !67
  %3086 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3007, float %3008, float %3009, float %3010, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2944, i32 %2945) #2, !dbg !67
  %3087 = extractvalue { float, float, float, float } %3086, 0, !dbg !67
  %3088 = extractvalue { float, float, float, float } %3086, 1, !dbg !67
  %3089 = extractvalue { float, float, float, float } %3086, 2, !dbg !67
  %3090 = extractvalue { float, float, float, float } %3086, 3, !dbg !67
  %3091 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3012, float %3013, float %3014, float %3015, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2954, i32 %2955) #2, !dbg !67
  %3092 = extractvalue { float, float, float, float } %3091, 0, !dbg !67
  %3093 = extractvalue { float, float, float, float } %3091, 1, !dbg !67
  %3094 = extractvalue { float, float, float, float } %3091, 2, !dbg !67
  %3095 = extractvalue { float, float, float, float } %3091, 3, !dbg !67
  %3096 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3017, float %3018, float %3019, float %3020, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2964, i32 %2965) #2, !dbg !67
  %3097 = extractvalue { float, float, float, float } %3096, 0, !dbg !67
  %3098 = extractvalue { float, float, float, float } %3096, 1, !dbg !67
  %3099 = extractvalue { float, float, float, float } %3096, 2, !dbg !67
  %3100 = extractvalue { float, float, float, float } %3096, 3, !dbg !67
  %3101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3022, float %3023, float %3024, float %3025, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2974, i32 %2975) #2, !dbg !67
  %3102 = extractvalue { float, float, float, float } %3101, 0, !dbg !67
  %3103 = extractvalue { float, float, float, float } %3101, 1, !dbg !67
  %3104 = extractvalue { float, float, float, float } %3101, 2, !dbg !67
  %3105 = extractvalue { float, float, float, float } %3101, 3, !dbg !67
  %3106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3027, float %3028, float %3029, float %3030, i32 %2865, i32 %2866, i32 %2867, i32 %2868, i32 %2984, i32 %2985) #2, !dbg !67
  %3107 = extractvalue { float, float, float, float } %3106, 0, !dbg !67
  %3108 = extractvalue { float, float, float, float } %3106, 1, !dbg !67
  %3109 = extractvalue { float, float, float, float } %3106, 2, !dbg !67
  %3110 = extractvalue { float, float, float, float } %3106, 3, !dbg !67
  %3111 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3032, float %3033, float %3034, float %3035, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2914, i32 %2915) #2, !dbg !67
  %3112 = extractvalue { float, float, float, float } %3111, 0, !dbg !67
  %3113 = extractvalue { float, float, float, float } %3111, 1, !dbg !67
  %3114 = extractvalue { float, float, float, float } %3111, 2, !dbg !67
  %3115 = extractvalue { float, float, float, float } %3111, 3, !dbg !67
  %3116 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3037, float %3038, float %3039, float %3040, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2924, i32 %2925) #2, !dbg !67
  %3117 = extractvalue { float, float, float, float } %3116, 0, !dbg !67
  %3118 = extractvalue { float, float, float, float } %3116, 1, !dbg !67
  %3119 = extractvalue { float, float, float, float } %3116, 2, !dbg !67
  %3120 = extractvalue { float, float, float, float } %3116, 3, !dbg !67
  %3121 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3042, float %3043, float %3044, float %3045, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2934, i32 %2935) #2, !dbg !67
  %3122 = extractvalue { float, float, float, float } %3121, 0, !dbg !67
  %3123 = extractvalue { float, float, float, float } %3121, 1, !dbg !67
  %3124 = extractvalue { float, float, float, float } %3121, 2, !dbg !67
  %3125 = extractvalue { float, float, float, float } %3121, 3, !dbg !67
  %3126 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3047, float %3048, float %3049, float %3050, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2944, i32 %2945) #2, !dbg !67
  %3127 = extractvalue { float, float, float, float } %3126, 0, !dbg !67
  %3128 = extractvalue { float, float, float, float } %3126, 1, !dbg !67
  %3129 = extractvalue { float, float, float, float } %3126, 2, !dbg !67
  %3130 = extractvalue { float, float, float, float } %3126, 3, !dbg !67
  %3131 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3052, float %3053, float %3054, float %3055, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2954, i32 %2955) #2, !dbg !67
  %3132 = extractvalue { float, float, float, float } %3131, 0, !dbg !67
  %3133 = extractvalue { float, float, float, float } %3131, 1, !dbg !67
  %3134 = extractvalue { float, float, float, float } %3131, 2, !dbg !67
  %3135 = extractvalue { float, float, float, float } %3131, 3, !dbg !67
  %3136 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3057, float %3058, float %3059, float %3060, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2964, i32 %2965) #2, !dbg !67
  %3137 = extractvalue { float, float, float, float } %3136, 0, !dbg !67
  %3138 = extractvalue { float, float, float, float } %3136, 1, !dbg !67
  %3139 = extractvalue { float, float, float, float } %3136, 2, !dbg !67
  %3140 = extractvalue { float, float, float, float } %3136, 3, !dbg !67
  %3141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3062, float %3063, float %3064, float %3065, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2974, i32 %2975) #2, !dbg !67
  %3142 = extractvalue { float, float, float, float } %3141, 0, !dbg !67
  %3143 = extractvalue { float, float, float, float } %3141, 1, !dbg !67
  %3144 = extractvalue { float, float, float, float } %3141, 2, !dbg !67
  %3145 = extractvalue { float, float, float, float } %3141, 3, !dbg !67
  %3146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3067, float %3068, float %3069, float %3070, i32 %2893, i32 %2894, i32 %2895, i32 %2896, i32 %2984, i32 %2985) #2, !dbg !67
  %3147 = extractvalue { float, float, float, float } %3146, 0, !dbg !67
  %3148 = extractvalue { float, float, float, float } %3146, 1, !dbg !67
  %3149 = extractvalue { float, float, float, float } %3146, 2, !dbg !67
  %3150 = extractvalue { float, float, float, float } %3146, 3, !dbg !67
  %3151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3072, float %3073, float %3074, float %3075, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2917, i32 %2918) #2, !dbg !67
  %3152 = extractvalue { float, float, float, float } %3151, 0, !dbg !67
  %3153 = extractvalue { float, float, float, float } %3151, 1, !dbg !67
  %3154 = extractvalue { float, float, float, float } %3151, 2, !dbg !67
  %3155 = extractvalue { float, float, float, float } %3151, 3, !dbg !67
  %3156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3077, float %3078, float %3079, float %3080, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2927, i32 %2928) #2, !dbg !67
  %3157 = extractvalue { float, float, float, float } %3156, 0, !dbg !67
  %3158 = extractvalue { float, float, float, float } %3156, 1, !dbg !67
  %3159 = extractvalue { float, float, float, float } %3156, 2, !dbg !67
  %3160 = extractvalue { float, float, float, float } %3156, 3, !dbg !67
  %3161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3082, float %3083, float %3084, float %3085, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2937, i32 %2938) #2, !dbg !67
  %3162 = extractvalue { float, float, float, float } %3161, 0, !dbg !67
  %3163 = extractvalue { float, float, float, float } %3161, 1, !dbg !67
  %3164 = extractvalue { float, float, float, float } %3161, 2, !dbg !67
  %3165 = extractvalue { float, float, float, float } %3161, 3, !dbg !67
  %3166 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3087, float %3088, float %3089, float %3090, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2947, i32 %2948) #2, !dbg !67
  %3167 = extractvalue { float, float, float, float } %3166, 0, !dbg !67
  %3168 = extractvalue { float, float, float, float } %3166, 1, !dbg !67
  %3169 = extractvalue { float, float, float, float } %3166, 2, !dbg !67
  %3170 = extractvalue { float, float, float, float } %3166, 3, !dbg !67
  %3171 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3092, float %3093, float %3094, float %3095, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2957, i32 %2958) #2, !dbg !67
  %3172 = extractvalue { float, float, float, float } %3171, 0, !dbg !67
  %3173 = extractvalue { float, float, float, float } %3171, 1, !dbg !67
  %3174 = extractvalue { float, float, float, float } %3171, 2, !dbg !67
  %3175 = extractvalue { float, float, float, float } %3171, 3, !dbg !67
  %3176 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3097, float %3098, float %3099, float %3100, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2967, i32 %2968) #2, !dbg !67
  %3177 = extractvalue { float, float, float, float } %3176, 0, !dbg !67
  %3178 = extractvalue { float, float, float, float } %3176, 1, !dbg !67
  %3179 = extractvalue { float, float, float, float } %3176, 2, !dbg !67
  %3180 = extractvalue { float, float, float, float } %3176, 3, !dbg !67
  %3181 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3102, float %3103, float %3104, float %3105, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2977, i32 %2978) #2, !dbg !67
  %3182 = extractvalue { float, float, float, float } %3181, 0, !dbg !67
  %3183 = extractvalue { float, float, float, float } %3181, 1, !dbg !67
  %3184 = extractvalue { float, float, float, float } %3181, 2, !dbg !67
  %3185 = extractvalue { float, float, float, float } %3181, 3, !dbg !67
  %3186 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3107, float %3108, float %3109, float %3110, i32 %2872, i32 %2873, i32 %2874, i32 %2875, i32 %2987, i32 %2988) #2, !dbg !67
  %3187 = extractvalue { float, float, float, float } %3186, 0, !dbg !67
  %3188 = extractvalue { float, float, float, float } %3186, 1, !dbg !67
  %3189 = extractvalue { float, float, float, float } %3186, 2, !dbg !67
  %3190 = extractvalue { float, float, float, float } %3186, 3, !dbg !67
  %3191 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3112, float %3113, float %3114, float %3115, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2917, i32 %2918) #2, !dbg !67
  %3192 = extractvalue { float, float, float, float } %3191, 0, !dbg !67
  %3193 = extractvalue { float, float, float, float } %3191, 1, !dbg !67
  %3194 = extractvalue { float, float, float, float } %3191, 2, !dbg !67
  %3195 = extractvalue { float, float, float, float } %3191, 3, !dbg !67
  %3196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3117, float %3118, float %3119, float %3120, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2927, i32 %2928) #2, !dbg !67
  %3197 = extractvalue { float, float, float, float } %3196, 0, !dbg !67
  %3198 = extractvalue { float, float, float, float } %3196, 1, !dbg !67
  %3199 = extractvalue { float, float, float, float } %3196, 2, !dbg !67
  %3200 = extractvalue { float, float, float, float } %3196, 3, !dbg !67
  %3201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3122, float %3123, float %3124, float %3125, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2937, i32 %2938) #2, !dbg !67
  %3202 = extractvalue { float, float, float, float } %3201, 0, !dbg !67
  %3203 = extractvalue { float, float, float, float } %3201, 1, !dbg !67
  %3204 = extractvalue { float, float, float, float } %3201, 2, !dbg !67
  %3205 = extractvalue { float, float, float, float } %3201, 3, !dbg !67
  %3206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3127, float %3128, float %3129, float %3130, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2947, i32 %2948) #2, !dbg !67
  %3207 = extractvalue { float, float, float, float } %3206, 0, !dbg !67
  %3208 = extractvalue { float, float, float, float } %3206, 1, !dbg !67
  %3209 = extractvalue { float, float, float, float } %3206, 2, !dbg !67
  %3210 = extractvalue { float, float, float, float } %3206, 3, !dbg !67
  %3211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3132, float %3133, float %3134, float %3135, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2957, i32 %2958) #2, !dbg !67
  %3212 = extractvalue { float, float, float, float } %3211, 0, !dbg !67
  %3213 = extractvalue { float, float, float, float } %3211, 1, !dbg !67
  %3214 = extractvalue { float, float, float, float } %3211, 2, !dbg !67
  %3215 = extractvalue { float, float, float, float } %3211, 3, !dbg !67
  %3216 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3137, float %3138, float %3139, float %3140, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2967, i32 %2968) #2, !dbg !67
  %3217 = extractvalue { float, float, float, float } %3216, 0, !dbg !67
  %3218 = extractvalue { float, float, float, float } %3216, 1, !dbg !67
  %3219 = extractvalue { float, float, float, float } %3216, 2, !dbg !67
  %3220 = extractvalue { float, float, float, float } %3216, 3, !dbg !67
  %3221 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3142, float %3143, float %3144, float %3145, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2977, i32 %2978) #2, !dbg !67
  %3222 = extractvalue { float, float, float, float } %3221, 0, !dbg !67
  %3223 = extractvalue { float, float, float, float } %3221, 1, !dbg !67
  %3224 = extractvalue { float, float, float, float } %3221, 2, !dbg !67
  %3225 = extractvalue { float, float, float, float } %3221, 3, !dbg !67
  %3226 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3147, float %3148, float %3149, float %3150, i32 %2900, i32 %2901, i32 %2902, i32 %2903, i32 %2987, i32 %2988) #2, !dbg !67
  %3227 = extractvalue { float, float, float, float } %3226, 0, !dbg !67
  %3228 = extractvalue { float, float, float, float } %3226, 1, !dbg !67
  %3229 = extractvalue { float, float, float, float } %3226, 2, !dbg !67
  %3230 = extractvalue { float, float, float, float } %3226, 3, !dbg !67
  %3231 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3152, float %3153, float %3154, float %3155, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2919, i32 %2920) #2, !dbg !67
  %3232 = extractvalue { float, float, float, float } %3231, 0, !dbg !67
  %3233 = extractvalue { float, float, float, float } %3231, 1, !dbg !67
  %3234 = extractvalue { float, float, float, float } %3231, 2, !dbg !67
  %3235 = extractvalue { float, float, float, float } %3231, 3, !dbg !67
  %3236 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3157, float %3158, float %3159, float %3160, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2929, i32 %2930) #2, !dbg !67
  %3237 = extractvalue { float, float, float, float } %3236, 0, !dbg !67
  %3238 = extractvalue { float, float, float, float } %3236, 1, !dbg !67
  %3239 = extractvalue { float, float, float, float } %3236, 2, !dbg !67
  %3240 = extractvalue { float, float, float, float } %3236, 3, !dbg !67
  %3241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3162, float %3163, float %3164, float %3165, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2939, i32 %2940) #2, !dbg !67
  %3242 = extractvalue { float, float, float, float } %3241, 0, !dbg !67
  %3243 = extractvalue { float, float, float, float } %3241, 1, !dbg !67
  %3244 = extractvalue { float, float, float, float } %3241, 2, !dbg !67
  %3245 = extractvalue { float, float, float, float } %3241, 3, !dbg !67
  %3246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3167, float %3168, float %3169, float %3170, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2949, i32 %2950) #2, !dbg !67
  %3247 = extractvalue { float, float, float, float } %3246, 0, !dbg !67
  %3248 = extractvalue { float, float, float, float } %3246, 1, !dbg !67
  %3249 = extractvalue { float, float, float, float } %3246, 2, !dbg !67
  %3250 = extractvalue { float, float, float, float } %3246, 3, !dbg !67
  %3251 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3172, float %3173, float %3174, float %3175, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2959, i32 %2960) #2, !dbg !67
  %3252 = extractvalue { float, float, float, float } %3251, 0, !dbg !67
  %3253 = extractvalue { float, float, float, float } %3251, 1, !dbg !67
  %3254 = extractvalue { float, float, float, float } %3251, 2, !dbg !67
  %3255 = extractvalue { float, float, float, float } %3251, 3, !dbg !67
  %3256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3177, float %3178, float %3179, float %3180, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2969, i32 %2970) #2, !dbg !67
  %3257 = extractvalue { float, float, float, float } %3256, 0, !dbg !67
  %3258 = extractvalue { float, float, float, float } %3256, 1, !dbg !67
  %3259 = extractvalue { float, float, float, float } %3256, 2, !dbg !67
  %3260 = extractvalue { float, float, float, float } %3256, 3, !dbg !67
  %3261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3182, float %3183, float %3184, float %3185, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2979, i32 %2980) #2, !dbg !67
  %3262 = extractvalue { float, float, float, float } %3261, 0, !dbg !67
  %3263 = extractvalue { float, float, float, float } %3261, 1, !dbg !67
  %3264 = extractvalue { float, float, float, float } %3261, 2, !dbg !67
  %3265 = extractvalue { float, float, float, float } %3261, 3, !dbg !67
  %3266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3187, float %3188, float %3189, float %3190, i32 %2879, i32 %2880, i32 %2881, i32 %2882, i32 %2989, i32 %2990) #2, !dbg !67
  %3267 = extractvalue { float, float, float, float } %3266, 0, !dbg !67
  %3268 = extractvalue { float, float, float, float } %3266, 1, !dbg !67
  %3269 = extractvalue { float, float, float, float } %3266, 2, !dbg !67
  %3270 = extractvalue { float, float, float, float } %3266, 3, !dbg !67
  %3271 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3192, float %3193, float %3194, float %3195, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2919, i32 %2920) #2, !dbg !67
  %3272 = extractvalue { float, float, float, float } %3271, 0, !dbg !67
  %3273 = extractvalue { float, float, float, float } %3271, 1, !dbg !67
  %3274 = extractvalue { float, float, float, float } %3271, 2, !dbg !67
  %3275 = extractvalue { float, float, float, float } %3271, 3, !dbg !67
  %3276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3197, float %3198, float %3199, float %3200, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2929, i32 %2930) #2, !dbg !67
  %3277 = extractvalue { float, float, float, float } %3276, 0, !dbg !67
  %3278 = extractvalue { float, float, float, float } %3276, 1, !dbg !67
  %3279 = extractvalue { float, float, float, float } %3276, 2, !dbg !67
  %3280 = extractvalue { float, float, float, float } %3276, 3, !dbg !67
  %3281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3202, float %3203, float %3204, float %3205, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2939, i32 %2940) #2, !dbg !67
  %3282 = extractvalue { float, float, float, float } %3281, 0, !dbg !67
  %3283 = extractvalue { float, float, float, float } %3281, 1, !dbg !67
  %3284 = extractvalue { float, float, float, float } %3281, 2, !dbg !67
  %3285 = extractvalue { float, float, float, float } %3281, 3, !dbg !67
  %3286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3207, float %3208, float %3209, float %3210, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2949, i32 %2950) #2, !dbg !67
  %3287 = extractvalue { float, float, float, float } %3286, 0, !dbg !67
  %3288 = extractvalue { float, float, float, float } %3286, 1, !dbg !67
  %3289 = extractvalue { float, float, float, float } %3286, 2, !dbg !67
  %3290 = extractvalue { float, float, float, float } %3286, 3, !dbg !67
  %3291 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3212, float %3213, float %3214, float %3215, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2959, i32 %2960) #2, !dbg !67
  %3292 = extractvalue { float, float, float, float } %3291, 0, !dbg !67
  %3293 = extractvalue { float, float, float, float } %3291, 1, !dbg !67
  %3294 = extractvalue { float, float, float, float } %3291, 2, !dbg !67
  %3295 = extractvalue { float, float, float, float } %3291, 3, !dbg !67
  %3296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3217, float %3218, float %3219, float %3220, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2969, i32 %2970) #2, !dbg !67
  %3297 = extractvalue { float, float, float, float } %3296, 0, !dbg !67
  %3298 = extractvalue { float, float, float, float } %3296, 1, !dbg !67
  %3299 = extractvalue { float, float, float, float } %3296, 2, !dbg !67
  %3300 = extractvalue { float, float, float, float } %3296, 3, !dbg !67
  %3301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3222, float %3223, float %3224, float %3225, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2979, i32 %2980) #2, !dbg !67
  %3302 = extractvalue { float, float, float, float } %3301, 0, !dbg !67
  %3303 = extractvalue { float, float, float, float } %3301, 1, !dbg !67
  %3304 = extractvalue { float, float, float, float } %3301, 2, !dbg !67
  %3305 = extractvalue { float, float, float, float } %3301, 3, !dbg !67
  %3306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3227, float %3228, float %3229, float %3230, i32 %2907, i32 %2908, i32 %2909, i32 %2910, i32 %2989, i32 %2990) #2, !dbg !67
  %3307 = extractvalue { float, float, float, float } %3306, 0, !dbg !67
  %3308 = extractvalue { float, float, float, float } %3306, 1, !dbg !67
  %3309 = extractvalue { float, float, float, float } %3306, 2, !dbg !67
  %3310 = extractvalue { float, float, float, float } %3306, 3, !dbg !67
  %3311 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %1212, !dbg !40
  %3312 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %694, !dbg !40
  %3313 = ptrtoint ptr addrspace(3) %3312 to i32, !dbg !40
  %3314 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3313) #2, !dbg !40
  %3315 = extractvalue { i32, i32, i32, i32 } %3314, 0, !dbg !40
  %3316 = extractvalue { i32, i32, i32, i32 } %3314, 1, !dbg !40
  %3317 = extractvalue { i32, i32, i32, i32 } %3314, 2, !dbg !40
  %3318 = extractvalue { i32, i32, i32, i32 } %3314, 3, !dbg !40
  %3319 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %695, !dbg !40
  %3320 = ptrtoint ptr addrspace(3) %3319 to i32, !dbg !40
  %3321 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3320) #2, !dbg !40
  %3322 = extractvalue { i32, i32, i32, i32 } %3321, 0, !dbg !40
  %3323 = extractvalue { i32, i32, i32, i32 } %3321, 1, !dbg !40
  %3324 = extractvalue { i32, i32, i32, i32 } %3321, 2, !dbg !40
  %3325 = extractvalue { i32, i32, i32, i32 } %3321, 3, !dbg !40
  %3326 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %696, !dbg !40
  %3327 = ptrtoint ptr addrspace(3) %3326 to i32, !dbg !40
  %3328 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3327) #2, !dbg !40
  %3329 = extractvalue { i32, i32, i32, i32 } %3328, 0, !dbg !40
  %3330 = extractvalue { i32, i32, i32, i32 } %3328, 1, !dbg !40
  %3331 = extractvalue { i32, i32, i32, i32 } %3328, 2, !dbg !40
  %3332 = extractvalue { i32, i32, i32, i32 } %3328, 3, !dbg !40
  %3333 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %697, !dbg !40
  %3334 = ptrtoint ptr addrspace(3) %3333 to i32, !dbg !40
  %3335 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3334) #2, !dbg !40
  %3336 = extractvalue { i32, i32, i32, i32 } %3335, 0, !dbg !40
  %3337 = extractvalue { i32, i32, i32, i32 } %3335, 1, !dbg !40
  %3338 = extractvalue { i32, i32, i32, i32 } %3335, 2, !dbg !40
  %3339 = extractvalue { i32, i32, i32, i32 } %3335, 3, !dbg !40
  %3340 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %698, !dbg !40
  %3341 = ptrtoint ptr addrspace(3) %3340 to i32, !dbg !40
  %3342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3341) #2, !dbg !40
  %3343 = extractvalue { i32, i32, i32, i32 } %3342, 0, !dbg !40
  %3344 = extractvalue { i32, i32, i32, i32 } %3342, 1, !dbg !40
  %3345 = extractvalue { i32, i32, i32, i32 } %3342, 2, !dbg !40
  %3346 = extractvalue { i32, i32, i32, i32 } %3342, 3, !dbg !40
  %3347 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %699, !dbg !40
  %3348 = ptrtoint ptr addrspace(3) %3347 to i32, !dbg !40
  %3349 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3348) #2, !dbg !40
  %3350 = extractvalue { i32, i32, i32, i32 } %3349, 0, !dbg !40
  %3351 = extractvalue { i32, i32, i32, i32 } %3349, 1, !dbg !40
  %3352 = extractvalue { i32, i32, i32, i32 } %3349, 2, !dbg !40
  %3353 = extractvalue { i32, i32, i32, i32 } %3349, 3, !dbg !40
  %3354 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %700, !dbg !40
  %3355 = ptrtoint ptr addrspace(3) %3354 to i32, !dbg !40
  %3356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3355) #2, !dbg !40
  %3357 = extractvalue { i32, i32, i32, i32 } %3356, 0, !dbg !40
  %3358 = extractvalue { i32, i32, i32, i32 } %3356, 1, !dbg !40
  %3359 = extractvalue { i32, i32, i32, i32 } %3356, 2, !dbg !40
  %3360 = extractvalue { i32, i32, i32, i32 } %3356, 3, !dbg !40
  %3361 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3311, i32 %701, !dbg !40
  %3362 = ptrtoint ptr addrspace(3) %3361 to i32, !dbg !40
  %3363 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %3362) #2, !dbg !40
  %3364 = extractvalue { i32, i32, i32, i32 } %3363, 0, !dbg !40
  %3365 = extractvalue { i32, i32, i32, i32 } %3363, 1, !dbg !40
  %3366 = extractvalue { i32, i32, i32, i32 } %3363, 2, !dbg !40
  %3367 = extractvalue { i32, i32, i32, i32 } %3363, 3, !dbg !40
  %3368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2630, float %2631, float %2632, float %2633, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2912, i32 %2913) #2, !dbg !68
  %3369 = extractvalue { float, float, float, float } %3368, 0, !dbg !68
  %3370 = extractvalue { float, float, float, float } %3368, 1, !dbg !68
  %3371 = extractvalue { float, float, float, float } %3368, 2, !dbg !68
  %3372 = extractvalue { float, float, float, float } %3368, 3, !dbg !68
  %3373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2634, float %2635, float %2636, float %2637, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2922, i32 %2923) #2, !dbg !68
  %3374 = extractvalue { float, float, float, float } %3373, 0, !dbg !68
  %3375 = extractvalue { float, float, float, float } %3373, 1, !dbg !68
  %3376 = extractvalue { float, float, float, float } %3373, 2, !dbg !68
  %3377 = extractvalue { float, float, float, float } %3373, 3, !dbg !68
  %3378 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2638, float %2639, float %2640, float %2641, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2932, i32 %2933) #2, !dbg !68
  %3379 = extractvalue { float, float, float, float } %3378, 0, !dbg !68
  %3380 = extractvalue { float, float, float, float } %3378, 1, !dbg !68
  %3381 = extractvalue { float, float, float, float } %3378, 2, !dbg !68
  %3382 = extractvalue { float, float, float, float } %3378, 3, !dbg !68
  %3383 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2642, float %2643, float %2644, float %2645, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2942, i32 %2943) #2, !dbg !68
  %3384 = extractvalue { float, float, float, float } %3383, 0, !dbg !68
  %3385 = extractvalue { float, float, float, float } %3383, 1, !dbg !68
  %3386 = extractvalue { float, float, float, float } %3383, 2, !dbg !68
  %3387 = extractvalue { float, float, float, float } %3383, 3, !dbg !68
  %3388 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2646, float %2647, float %2648, float %2649, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2952, i32 %2953) #2, !dbg !68
  %3389 = extractvalue { float, float, float, float } %3388, 0, !dbg !68
  %3390 = extractvalue { float, float, float, float } %3388, 1, !dbg !68
  %3391 = extractvalue { float, float, float, float } %3388, 2, !dbg !68
  %3392 = extractvalue { float, float, float, float } %3388, 3, !dbg !68
  %3393 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2650, float %2651, float %2652, float %2653, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2962, i32 %2963) #2, !dbg !68
  %3394 = extractvalue { float, float, float, float } %3393, 0, !dbg !68
  %3395 = extractvalue { float, float, float, float } %3393, 1, !dbg !68
  %3396 = extractvalue { float, float, float, float } %3393, 2, !dbg !68
  %3397 = extractvalue { float, float, float, float } %3393, 3, !dbg !68
  %3398 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2654, float %2655, float %2656, float %2657, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2972, i32 %2973) #2, !dbg !68
  %3399 = extractvalue { float, float, float, float } %3398, 0, !dbg !68
  %3400 = extractvalue { float, float, float, float } %3398, 1, !dbg !68
  %3401 = extractvalue { float, float, float, float } %3398, 2, !dbg !68
  %3402 = extractvalue { float, float, float, float } %3398, 3, !dbg !68
  %3403 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2658, float %2659, float %2660, float %2661, i32 %3315, i32 %3316, i32 %3317, i32 %3318, i32 %2982, i32 %2983) #2, !dbg !68
  %3404 = extractvalue { float, float, float, float } %3403, 0, !dbg !68
  %3405 = extractvalue { float, float, float, float } %3403, 1, !dbg !68
  %3406 = extractvalue { float, float, float, float } %3403, 2, !dbg !68
  %3407 = extractvalue { float, float, float, float } %3403, 3, !dbg !68
  %3408 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2662, float %2663, float %2664, float %2665, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2912, i32 %2913) #2, !dbg !68
  %3409 = extractvalue { float, float, float, float } %3408, 0, !dbg !68
  %3410 = extractvalue { float, float, float, float } %3408, 1, !dbg !68
  %3411 = extractvalue { float, float, float, float } %3408, 2, !dbg !68
  %3412 = extractvalue { float, float, float, float } %3408, 3, !dbg !68
  %3413 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2666, float %2667, float %2668, float %2669, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2922, i32 %2923) #2, !dbg !68
  %3414 = extractvalue { float, float, float, float } %3413, 0, !dbg !68
  %3415 = extractvalue { float, float, float, float } %3413, 1, !dbg !68
  %3416 = extractvalue { float, float, float, float } %3413, 2, !dbg !68
  %3417 = extractvalue { float, float, float, float } %3413, 3, !dbg !68
  %3418 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2670, float %2671, float %2672, float %2673, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2932, i32 %2933) #2, !dbg !68
  %3419 = extractvalue { float, float, float, float } %3418, 0, !dbg !68
  %3420 = extractvalue { float, float, float, float } %3418, 1, !dbg !68
  %3421 = extractvalue { float, float, float, float } %3418, 2, !dbg !68
  %3422 = extractvalue { float, float, float, float } %3418, 3, !dbg !68
  %3423 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2674, float %2675, float %2676, float %2677, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2942, i32 %2943) #2, !dbg !68
  %3424 = extractvalue { float, float, float, float } %3423, 0, !dbg !68
  %3425 = extractvalue { float, float, float, float } %3423, 1, !dbg !68
  %3426 = extractvalue { float, float, float, float } %3423, 2, !dbg !68
  %3427 = extractvalue { float, float, float, float } %3423, 3, !dbg !68
  %3428 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2678, float %2679, float %2680, float %2681, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2952, i32 %2953) #2, !dbg !68
  %3429 = extractvalue { float, float, float, float } %3428, 0, !dbg !68
  %3430 = extractvalue { float, float, float, float } %3428, 1, !dbg !68
  %3431 = extractvalue { float, float, float, float } %3428, 2, !dbg !68
  %3432 = extractvalue { float, float, float, float } %3428, 3, !dbg !68
  %3433 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2682, float %2683, float %2684, float %2685, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2962, i32 %2963) #2, !dbg !68
  %3434 = extractvalue { float, float, float, float } %3433, 0, !dbg !68
  %3435 = extractvalue { float, float, float, float } %3433, 1, !dbg !68
  %3436 = extractvalue { float, float, float, float } %3433, 2, !dbg !68
  %3437 = extractvalue { float, float, float, float } %3433, 3, !dbg !68
  %3438 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2686, float %2687, float %2688, float %2689, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2972, i32 %2973) #2, !dbg !68
  %3439 = extractvalue { float, float, float, float } %3438, 0, !dbg !68
  %3440 = extractvalue { float, float, float, float } %3438, 1, !dbg !68
  %3441 = extractvalue { float, float, float, float } %3438, 2, !dbg !68
  %3442 = extractvalue { float, float, float, float } %3438, 3, !dbg !68
  %3443 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2690, float %2691, float %2692, float %2693, i32 %3343, i32 %3344, i32 %3345, i32 %3346, i32 %2982, i32 %2983) #2, !dbg !68
  %3444 = extractvalue { float, float, float, float } %3443, 0, !dbg !68
  %3445 = extractvalue { float, float, float, float } %3443, 1, !dbg !68
  %3446 = extractvalue { float, float, float, float } %3443, 2, !dbg !68
  %3447 = extractvalue { float, float, float, float } %3443, 3, !dbg !68
  %3448 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3369, float %3370, float %3371, float %3372, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2914, i32 %2915) #2, !dbg !68
  %3449 = extractvalue { float, float, float, float } %3448, 0, !dbg !68
  %3450 = extractvalue { float, float, float, float } %3448, 1, !dbg !68
  %3451 = extractvalue { float, float, float, float } %3448, 2, !dbg !68
  %3452 = extractvalue { float, float, float, float } %3448, 3, !dbg !68
  %3453 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3374, float %3375, float %3376, float %3377, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2924, i32 %2925) #2, !dbg !68
  %3454 = extractvalue { float, float, float, float } %3453, 0, !dbg !68
  %3455 = extractvalue { float, float, float, float } %3453, 1, !dbg !68
  %3456 = extractvalue { float, float, float, float } %3453, 2, !dbg !68
  %3457 = extractvalue { float, float, float, float } %3453, 3, !dbg !68
  %3458 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3379, float %3380, float %3381, float %3382, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2934, i32 %2935) #2, !dbg !68
  %3459 = extractvalue { float, float, float, float } %3458, 0, !dbg !68
  %3460 = extractvalue { float, float, float, float } %3458, 1, !dbg !68
  %3461 = extractvalue { float, float, float, float } %3458, 2, !dbg !68
  %3462 = extractvalue { float, float, float, float } %3458, 3, !dbg !68
  %3463 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3384, float %3385, float %3386, float %3387, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2944, i32 %2945) #2, !dbg !68
  %3464 = extractvalue { float, float, float, float } %3463, 0, !dbg !68
  %3465 = extractvalue { float, float, float, float } %3463, 1, !dbg !68
  %3466 = extractvalue { float, float, float, float } %3463, 2, !dbg !68
  %3467 = extractvalue { float, float, float, float } %3463, 3, !dbg !68
  %3468 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3389, float %3390, float %3391, float %3392, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2954, i32 %2955) #2, !dbg !68
  %3469 = extractvalue { float, float, float, float } %3468, 0, !dbg !68
  %3470 = extractvalue { float, float, float, float } %3468, 1, !dbg !68
  %3471 = extractvalue { float, float, float, float } %3468, 2, !dbg !68
  %3472 = extractvalue { float, float, float, float } %3468, 3, !dbg !68
  %3473 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3394, float %3395, float %3396, float %3397, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2964, i32 %2965) #2, !dbg !68
  %3474 = extractvalue { float, float, float, float } %3473, 0, !dbg !68
  %3475 = extractvalue { float, float, float, float } %3473, 1, !dbg !68
  %3476 = extractvalue { float, float, float, float } %3473, 2, !dbg !68
  %3477 = extractvalue { float, float, float, float } %3473, 3, !dbg !68
  %3478 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3399, float %3400, float %3401, float %3402, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2974, i32 %2975) #2, !dbg !68
  %3479 = extractvalue { float, float, float, float } %3478, 0, !dbg !68
  %3480 = extractvalue { float, float, float, float } %3478, 1, !dbg !68
  %3481 = extractvalue { float, float, float, float } %3478, 2, !dbg !68
  %3482 = extractvalue { float, float, float, float } %3478, 3, !dbg !68
  %3483 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3404, float %3405, float %3406, float %3407, i32 %3322, i32 %3323, i32 %3324, i32 %3325, i32 %2984, i32 %2985) #2, !dbg !68
  %3484 = extractvalue { float, float, float, float } %3483, 0, !dbg !68
  %3485 = extractvalue { float, float, float, float } %3483, 1, !dbg !68
  %3486 = extractvalue { float, float, float, float } %3483, 2, !dbg !68
  %3487 = extractvalue { float, float, float, float } %3483, 3, !dbg !68
  %3488 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3409, float %3410, float %3411, float %3412, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2914, i32 %2915) #2, !dbg !68
  %3489 = extractvalue { float, float, float, float } %3488, 0, !dbg !68
  %3490 = extractvalue { float, float, float, float } %3488, 1, !dbg !68
  %3491 = extractvalue { float, float, float, float } %3488, 2, !dbg !68
  %3492 = extractvalue { float, float, float, float } %3488, 3, !dbg !68
  %3493 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3414, float %3415, float %3416, float %3417, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2924, i32 %2925) #2, !dbg !68
  %3494 = extractvalue { float, float, float, float } %3493, 0, !dbg !68
  %3495 = extractvalue { float, float, float, float } %3493, 1, !dbg !68
  %3496 = extractvalue { float, float, float, float } %3493, 2, !dbg !68
  %3497 = extractvalue { float, float, float, float } %3493, 3, !dbg !68
  %3498 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3419, float %3420, float %3421, float %3422, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2934, i32 %2935) #2, !dbg !68
  %3499 = extractvalue { float, float, float, float } %3498, 0, !dbg !68
  %3500 = extractvalue { float, float, float, float } %3498, 1, !dbg !68
  %3501 = extractvalue { float, float, float, float } %3498, 2, !dbg !68
  %3502 = extractvalue { float, float, float, float } %3498, 3, !dbg !68
  %3503 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3424, float %3425, float %3426, float %3427, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2944, i32 %2945) #2, !dbg !68
  %3504 = extractvalue { float, float, float, float } %3503, 0, !dbg !68
  %3505 = extractvalue { float, float, float, float } %3503, 1, !dbg !68
  %3506 = extractvalue { float, float, float, float } %3503, 2, !dbg !68
  %3507 = extractvalue { float, float, float, float } %3503, 3, !dbg !68
  %3508 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3429, float %3430, float %3431, float %3432, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2954, i32 %2955) #2, !dbg !68
  %3509 = extractvalue { float, float, float, float } %3508, 0, !dbg !68
  %3510 = extractvalue { float, float, float, float } %3508, 1, !dbg !68
  %3511 = extractvalue { float, float, float, float } %3508, 2, !dbg !68
  %3512 = extractvalue { float, float, float, float } %3508, 3, !dbg !68
  %3513 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3434, float %3435, float %3436, float %3437, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2964, i32 %2965) #2, !dbg !68
  %3514 = extractvalue { float, float, float, float } %3513, 0, !dbg !68
  %3515 = extractvalue { float, float, float, float } %3513, 1, !dbg !68
  %3516 = extractvalue { float, float, float, float } %3513, 2, !dbg !68
  %3517 = extractvalue { float, float, float, float } %3513, 3, !dbg !68
  %3518 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3439, float %3440, float %3441, float %3442, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2974, i32 %2975) #2, !dbg !68
  %3519 = extractvalue { float, float, float, float } %3518, 0, !dbg !68
  %3520 = extractvalue { float, float, float, float } %3518, 1, !dbg !68
  %3521 = extractvalue { float, float, float, float } %3518, 2, !dbg !68
  %3522 = extractvalue { float, float, float, float } %3518, 3, !dbg !68
  %3523 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3444, float %3445, float %3446, float %3447, i32 %3350, i32 %3351, i32 %3352, i32 %3353, i32 %2984, i32 %2985) #2, !dbg !68
  %3524 = extractvalue { float, float, float, float } %3523, 0, !dbg !68
  %3525 = extractvalue { float, float, float, float } %3523, 1, !dbg !68
  %3526 = extractvalue { float, float, float, float } %3523, 2, !dbg !68
  %3527 = extractvalue { float, float, float, float } %3523, 3, !dbg !68
  %3528 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3449, float %3450, float %3451, float %3452, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2917, i32 %2918) #2, !dbg !68
  %3529 = extractvalue { float, float, float, float } %3528, 0, !dbg !68
  %3530 = extractvalue { float, float, float, float } %3528, 1, !dbg !68
  %3531 = extractvalue { float, float, float, float } %3528, 2, !dbg !68
  %3532 = extractvalue { float, float, float, float } %3528, 3, !dbg !68
  %3533 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3454, float %3455, float %3456, float %3457, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2927, i32 %2928) #2, !dbg !68
  %3534 = extractvalue { float, float, float, float } %3533, 0, !dbg !68
  %3535 = extractvalue { float, float, float, float } %3533, 1, !dbg !68
  %3536 = extractvalue { float, float, float, float } %3533, 2, !dbg !68
  %3537 = extractvalue { float, float, float, float } %3533, 3, !dbg !68
  %3538 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3459, float %3460, float %3461, float %3462, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2937, i32 %2938) #2, !dbg !68
  %3539 = extractvalue { float, float, float, float } %3538, 0, !dbg !68
  %3540 = extractvalue { float, float, float, float } %3538, 1, !dbg !68
  %3541 = extractvalue { float, float, float, float } %3538, 2, !dbg !68
  %3542 = extractvalue { float, float, float, float } %3538, 3, !dbg !68
  %3543 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3464, float %3465, float %3466, float %3467, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2947, i32 %2948) #2, !dbg !68
  %3544 = extractvalue { float, float, float, float } %3543, 0, !dbg !68
  %3545 = extractvalue { float, float, float, float } %3543, 1, !dbg !68
  %3546 = extractvalue { float, float, float, float } %3543, 2, !dbg !68
  %3547 = extractvalue { float, float, float, float } %3543, 3, !dbg !68
  %3548 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3469, float %3470, float %3471, float %3472, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2957, i32 %2958) #2, !dbg !68
  %3549 = extractvalue { float, float, float, float } %3548, 0, !dbg !68
  %3550 = extractvalue { float, float, float, float } %3548, 1, !dbg !68
  %3551 = extractvalue { float, float, float, float } %3548, 2, !dbg !68
  %3552 = extractvalue { float, float, float, float } %3548, 3, !dbg !68
  %3553 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3474, float %3475, float %3476, float %3477, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2967, i32 %2968) #2, !dbg !68
  %3554 = extractvalue { float, float, float, float } %3553, 0, !dbg !68
  %3555 = extractvalue { float, float, float, float } %3553, 1, !dbg !68
  %3556 = extractvalue { float, float, float, float } %3553, 2, !dbg !68
  %3557 = extractvalue { float, float, float, float } %3553, 3, !dbg !68
  %3558 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3479, float %3480, float %3481, float %3482, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2977, i32 %2978) #2, !dbg !68
  %3559 = extractvalue { float, float, float, float } %3558, 0, !dbg !68
  %3560 = extractvalue { float, float, float, float } %3558, 1, !dbg !68
  %3561 = extractvalue { float, float, float, float } %3558, 2, !dbg !68
  %3562 = extractvalue { float, float, float, float } %3558, 3, !dbg !68
  %3563 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3484, float %3485, float %3486, float %3487, i32 %3329, i32 %3330, i32 %3331, i32 %3332, i32 %2987, i32 %2988) #2, !dbg !68
  %3564 = extractvalue { float, float, float, float } %3563, 0, !dbg !68
  %3565 = extractvalue { float, float, float, float } %3563, 1, !dbg !68
  %3566 = extractvalue { float, float, float, float } %3563, 2, !dbg !68
  %3567 = extractvalue { float, float, float, float } %3563, 3, !dbg !68
  %3568 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3489, float %3490, float %3491, float %3492, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2917, i32 %2918) #2, !dbg !68
  %3569 = extractvalue { float, float, float, float } %3568, 0, !dbg !68
  %3570 = extractvalue { float, float, float, float } %3568, 1, !dbg !68
  %3571 = extractvalue { float, float, float, float } %3568, 2, !dbg !68
  %3572 = extractvalue { float, float, float, float } %3568, 3, !dbg !68
  %3573 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3494, float %3495, float %3496, float %3497, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2927, i32 %2928) #2, !dbg !68
  %3574 = extractvalue { float, float, float, float } %3573, 0, !dbg !68
  %3575 = extractvalue { float, float, float, float } %3573, 1, !dbg !68
  %3576 = extractvalue { float, float, float, float } %3573, 2, !dbg !68
  %3577 = extractvalue { float, float, float, float } %3573, 3, !dbg !68
  %3578 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3499, float %3500, float %3501, float %3502, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2937, i32 %2938) #2, !dbg !68
  %3579 = extractvalue { float, float, float, float } %3578, 0, !dbg !68
  %3580 = extractvalue { float, float, float, float } %3578, 1, !dbg !68
  %3581 = extractvalue { float, float, float, float } %3578, 2, !dbg !68
  %3582 = extractvalue { float, float, float, float } %3578, 3, !dbg !68
  %3583 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3504, float %3505, float %3506, float %3507, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2947, i32 %2948) #2, !dbg !68
  %3584 = extractvalue { float, float, float, float } %3583, 0, !dbg !68
  %3585 = extractvalue { float, float, float, float } %3583, 1, !dbg !68
  %3586 = extractvalue { float, float, float, float } %3583, 2, !dbg !68
  %3587 = extractvalue { float, float, float, float } %3583, 3, !dbg !68
  %3588 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3509, float %3510, float %3511, float %3512, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2957, i32 %2958) #2, !dbg !68
  %3589 = extractvalue { float, float, float, float } %3588, 0, !dbg !68
  %3590 = extractvalue { float, float, float, float } %3588, 1, !dbg !68
  %3591 = extractvalue { float, float, float, float } %3588, 2, !dbg !68
  %3592 = extractvalue { float, float, float, float } %3588, 3, !dbg !68
  %3593 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3514, float %3515, float %3516, float %3517, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2967, i32 %2968) #2, !dbg !68
  %3594 = extractvalue { float, float, float, float } %3593, 0, !dbg !68
  %3595 = extractvalue { float, float, float, float } %3593, 1, !dbg !68
  %3596 = extractvalue { float, float, float, float } %3593, 2, !dbg !68
  %3597 = extractvalue { float, float, float, float } %3593, 3, !dbg !68
  %3598 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3519, float %3520, float %3521, float %3522, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2977, i32 %2978) #2, !dbg !68
  %3599 = extractvalue { float, float, float, float } %3598, 0, !dbg !68
  %3600 = extractvalue { float, float, float, float } %3598, 1, !dbg !68
  %3601 = extractvalue { float, float, float, float } %3598, 2, !dbg !68
  %3602 = extractvalue { float, float, float, float } %3598, 3, !dbg !68
  %3603 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3524, float %3525, float %3526, float %3527, i32 %3357, i32 %3358, i32 %3359, i32 %3360, i32 %2987, i32 %2988) #2, !dbg !68
  %3604 = extractvalue { float, float, float, float } %3603, 0, !dbg !68
  %3605 = extractvalue { float, float, float, float } %3603, 1, !dbg !68
  %3606 = extractvalue { float, float, float, float } %3603, 2, !dbg !68
  %3607 = extractvalue { float, float, float, float } %3603, 3, !dbg !68
  %3608 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3529, float %3530, float %3531, float %3532, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2919, i32 %2920) #2, !dbg !68
  %3609 = extractvalue { float, float, float, float } %3608, 0, !dbg !68
  %3610 = extractvalue { float, float, float, float } %3608, 1, !dbg !68
  %3611 = extractvalue { float, float, float, float } %3608, 2, !dbg !68
  %3612 = extractvalue { float, float, float, float } %3608, 3, !dbg !68
  %3613 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3534, float %3535, float %3536, float %3537, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2929, i32 %2930) #2, !dbg !68
  %3614 = extractvalue { float, float, float, float } %3613, 0, !dbg !68
  %3615 = extractvalue { float, float, float, float } %3613, 1, !dbg !68
  %3616 = extractvalue { float, float, float, float } %3613, 2, !dbg !68
  %3617 = extractvalue { float, float, float, float } %3613, 3, !dbg !68
  %3618 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3539, float %3540, float %3541, float %3542, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2939, i32 %2940) #2, !dbg !68
  %3619 = extractvalue { float, float, float, float } %3618, 0, !dbg !68
  %3620 = extractvalue { float, float, float, float } %3618, 1, !dbg !68
  %3621 = extractvalue { float, float, float, float } %3618, 2, !dbg !68
  %3622 = extractvalue { float, float, float, float } %3618, 3, !dbg !68
  %3623 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3544, float %3545, float %3546, float %3547, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2949, i32 %2950) #2, !dbg !68
  %3624 = extractvalue { float, float, float, float } %3623, 0, !dbg !68
  %3625 = extractvalue { float, float, float, float } %3623, 1, !dbg !68
  %3626 = extractvalue { float, float, float, float } %3623, 2, !dbg !68
  %3627 = extractvalue { float, float, float, float } %3623, 3, !dbg !68
  %3628 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3549, float %3550, float %3551, float %3552, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2959, i32 %2960) #2, !dbg !68
  %3629 = extractvalue { float, float, float, float } %3628, 0, !dbg !68
  %3630 = extractvalue { float, float, float, float } %3628, 1, !dbg !68
  %3631 = extractvalue { float, float, float, float } %3628, 2, !dbg !68
  %3632 = extractvalue { float, float, float, float } %3628, 3, !dbg !68
  %3633 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3554, float %3555, float %3556, float %3557, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2969, i32 %2970) #2, !dbg !68
  %3634 = extractvalue { float, float, float, float } %3633, 0, !dbg !68
  %3635 = extractvalue { float, float, float, float } %3633, 1, !dbg !68
  %3636 = extractvalue { float, float, float, float } %3633, 2, !dbg !68
  %3637 = extractvalue { float, float, float, float } %3633, 3, !dbg !68
  %3638 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3559, float %3560, float %3561, float %3562, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2979, i32 %2980) #2, !dbg !68
  %3639 = extractvalue { float, float, float, float } %3638, 0, !dbg !68
  %3640 = extractvalue { float, float, float, float } %3638, 1, !dbg !68
  %3641 = extractvalue { float, float, float, float } %3638, 2, !dbg !68
  %3642 = extractvalue { float, float, float, float } %3638, 3, !dbg !68
  %3643 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3564, float %3565, float %3566, float %3567, i32 %3336, i32 %3337, i32 %3338, i32 %3339, i32 %2989, i32 %2990) #2, !dbg !68
  %3644 = extractvalue { float, float, float, float } %3643, 0, !dbg !68
  %3645 = extractvalue { float, float, float, float } %3643, 1, !dbg !68
  %3646 = extractvalue { float, float, float, float } %3643, 2, !dbg !68
  %3647 = extractvalue { float, float, float, float } %3643, 3, !dbg !68
  %3648 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3569, float %3570, float %3571, float %3572, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2919, i32 %2920) #2, !dbg !68
  %3649 = extractvalue { float, float, float, float } %3648, 0, !dbg !68
  %3650 = extractvalue { float, float, float, float } %3648, 1, !dbg !68
  %3651 = extractvalue { float, float, float, float } %3648, 2, !dbg !68
  %3652 = extractvalue { float, float, float, float } %3648, 3, !dbg !68
  %3653 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3574, float %3575, float %3576, float %3577, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2929, i32 %2930) #2, !dbg !68
  %3654 = extractvalue { float, float, float, float } %3653, 0, !dbg !68
  %3655 = extractvalue { float, float, float, float } %3653, 1, !dbg !68
  %3656 = extractvalue { float, float, float, float } %3653, 2, !dbg !68
  %3657 = extractvalue { float, float, float, float } %3653, 3, !dbg !68
  %3658 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3579, float %3580, float %3581, float %3582, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2939, i32 %2940) #2, !dbg !68
  %3659 = extractvalue { float, float, float, float } %3658, 0, !dbg !68
  %3660 = extractvalue { float, float, float, float } %3658, 1, !dbg !68
  %3661 = extractvalue { float, float, float, float } %3658, 2, !dbg !68
  %3662 = extractvalue { float, float, float, float } %3658, 3, !dbg !68
  %3663 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3584, float %3585, float %3586, float %3587, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2949, i32 %2950) #2, !dbg !68
  %3664 = extractvalue { float, float, float, float } %3663, 0, !dbg !68
  %3665 = extractvalue { float, float, float, float } %3663, 1, !dbg !68
  %3666 = extractvalue { float, float, float, float } %3663, 2, !dbg !68
  %3667 = extractvalue { float, float, float, float } %3663, 3, !dbg !68
  %3668 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3589, float %3590, float %3591, float %3592, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2959, i32 %2960) #2, !dbg !68
  %3669 = extractvalue { float, float, float, float } %3668, 0, !dbg !68
  %3670 = extractvalue { float, float, float, float } %3668, 1, !dbg !68
  %3671 = extractvalue { float, float, float, float } %3668, 2, !dbg !68
  %3672 = extractvalue { float, float, float, float } %3668, 3, !dbg !68
  %3673 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3594, float %3595, float %3596, float %3597, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2969, i32 %2970) #2, !dbg !68
  %3674 = extractvalue { float, float, float, float } %3673, 0, !dbg !68
  %3675 = extractvalue { float, float, float, float } %3673, 1, !dbg !68
  %3676 = extractvalue { float, float, float, float } %3673, 2, !dbg !68
  %3677 = extractvalue { float, float, float, float } %3673, 3, !dbg !68
  %3678 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3599, float %3600, float %3601, float %3602, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2979, i32 %2980) #2, !dbg !68
  %3679 = extractvalue { float, float, float, float } %3678, 0, !dbg !68
  %3680 = extractvalue { float, float, float, float } %3678, 1, !dbg !68
  %3681 = extractvalue { float, float, float, float } %3678, 2, !dbg !68
  %3682 = extractvalue { float, float, float, float } %3678, 3, !dbg !68
  %3683 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %3604, float %3605, float %3606, float %3607, i32 %3364, i32 %3365, i32 %3366, i32 %3367, i32 %2989, i32 %2990) #2, !dbg !68
  %3684 = extractvalue { float, float, float, float } %3683, 0, !dbg !68
  %3685 = extractvalue { float, float, float, float } %3683, 1, !dbg !68
  %3686 = extractvalue { float, float, float, float } %3683, 2, !dbg !68
  %3687 = extractvalue { float, float, float, float } %3683, 3, !dbg !68
  %3688 = add i32 %707, 1, !dbg !34
  %3689 = icmp sgt i32 %3688, 1, !dbg !34
  %3690 = select i1 %3689, i32 0, i32 %3688, !dbg !34
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !31
  %3691 = shl i32 %indvars.iv.tr, 6, !dbg !31
  %3692 = add i32 %3691, 128, !dbg !31
  %3693 = sext i32 %3692 to i64, !dbg !31
  %3694 = or disjoint i64 %3693, %57, !dbg !35
  %3695 = or disjoint i64 %3693, %58, !dbg !35
  %3696 = or disjoint i64 %3693, %59, !dbg !35
  %3697 = or disjoint i64 %3693, %60, !dbg !35
  %3698 = or disjoint i64 %3693, %61, !dbg !35
  %3699 = or disjoint i64 %3693, %62, !dbg !35
  %3700 = or disjoint i64 %3693, %63, !dbg !35
  %3701 = or disjoint i64 %3693, %64, !dbg !35
  %3702 = or disjoint i64 %3693, %66, !dbg !35
  %3703 = shl nsw i64 %3694, 12, !dbg !35
  %3704 = shl nsw i64 %3695, 12, !dbg !35
  %3705 = shl nsw i64 %3696, 12, !dbg !35
  %3706 = shl nsw i64 %3697, 12, !dbg !35
  %3707 = shl nsw i64 %3698, 12, !dbg !35
  %3708 = shl nsw i64 %3699, 12, !dbg !35
  %3709 = shl nsw i64 %3700, 12, !dbg !35
  %3710 = shl nsw i64 %3701, 12, !dbg !35
  %3711 = or disjoint i64 %3703, %65, !dbg !35
  %3712 = or disjoint i64 %3704, %65, !dbg !35
  %3713 = or disjoint i64 %3705, %65, !dbg !35
  %3714 = or disjoint i64 %3706, %65, !dbg !35
  %3715 = or disjoint i64 %3707, %65, !dbg !35
  %3716 = or disjoint i64 %3708, %65, !dbg !35
  %3717 = or disjoint i64 %3709, %65, !dbg !35
  %3718 = or disjoint i64 %3710, %65, !dbg !35
  %3719 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3711, !dbg !35
  %3720 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3712, !dbg !35
  %3721 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3713, !dbg !35
  %3722 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3714, !dbg !35
  %3723 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3715, !dbg !35
  %3724 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3716, !dbg !35
  %3725 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3717, !dbg !35
  %3726 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3718, !dbg !35
  %3727 = icmp sgt i32 %3692, -1, !dbg !35
  %3728 = icmp slt i64 %3694, %80, !dbg !35
  %3729 = icmp slt i64 %3695, %80, !dbg !35
  %3730 = icmp slt i64 %3696, %80, !dbg !35
  %3731 = icmp slt i64 %3697, %80, !dbg !35
  %3732 = icmp slt i64 %3698, %80, !dbg !35
  %3733 = icmp slt i64 %3699, %80, !dbg !35
  %3734 = icmp slt i64 %3700, %80, !dbg !35
  %3735 = icmp slt i64 %3701, %80, !dbg !35
  %3736 = and i1 %3727, %3728, !dbg !35
  %3737 = and i1 %3727, %3729, !dbg !35
  %3738 = and i1 %3727, %3730, !dbg !35
  %3739 = and i1 %3727, %3731, !dbg !35
  %3740 = and i1 %3727, %3732, !dbg !35
  %3741 = and i1 %3727, %3733, !dbg !35
  %3742 = and i1 %3727, %3734, !dbg !35
  %3743 = and i1 %3727, %3735, !dbg !35
  %3744 = shl i32 %3690, 12, !dbg !35
  %3745 = getelementptr bfloat, ptr addrspace(3) @global_smem, i32 %3744, !dbg !35
  %3746 = and i1 %836, %3736, !dbg !34
  %3747 = and i1 %836, %3737, !dbg !34
  %3748 = and i1 %836, %3738, !dbg !34
  %3749 = and i1 %836, %3739, !dbg !34
  %3750 = and i1 %836, %3740, !dbg !34
  %3751 = and i1 %836, %3741, !dbg !34
  %3752 = and i1 %836, %3742, !dbg !34
  %3753 = and i1 %836, %3743, !dbg !34
  %3754 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %129, !dbg !35
  %3755 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %131, !dbg !35
  %3756 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %133, !dbg !35
  %3757 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %135, !dbg !35
  %3758 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %137, !dbg !35
  %3759 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %139, !dbg !35
  %3760 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %141, !dbg !35
  %3761 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3745, i32 %143, !dbg !35
  %3762 = select i1 %3746, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3754, ptr addrspace(1) %3719, i32 %3762) #2, !dbg !35
  %3763 = select i1 %3747, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3755, ptr addrspace(1) %3720, i32 %3763) #2, !dbg !35
  %3764 = select i1 %3748, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3756, ptr addrspace(1) %3721, i32 %3764) #2, !dbg !35
  %3765 = select i1 %3749, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3757, ptr addrspace(1) %3722, i32 %3765) #2, !dbg !35
  %3766 = select i1 %3750, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3758, ptr addrspace(1) %3723, i32 %3766) #2, !dbg !35
  %3767 = select i1 %3751, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3759, ptr addrspace(1) %3724, i32 %3767) #2, !dbg !35
  %3768 = select i1 %3752, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3760, ptr addrspace(1) %3725, i32 %3768) #2, !dbg !35
  %3769 = select i1 %3753, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3761, ptr addrspace(1) %3726, i32 %3769) #2, !dbg !35
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !35
  %3770 = or disjoint i64 %3703, %79, !dbg !36
  %3771 = or disjoint i64 %3704, %79, !dbg !36
  %3772 = or disjoint i64 %3705, %79, !dbg !36
  %3773 = or disjoint i64 %3706, %79, !dbg !36
  %3774 = or disjoint i64 %3707, %79, !dbg !36
  %3775 = or disjoint i64 %3708, %79, !dbg !36
  %3776 = or disjoint i64 %3709, %79, !dbg !36
  %3777 = or disjoint i64 %3710, %79, !dbg !36
  %3778 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3770, !dbg !36
  %3779 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3771, !dbg !36
  %3780 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3772, !dbg !36
  %3781 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3773, !dbg !36
  %3782 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3774, !dbg !36
  %3783 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3775, !dbg !36
  %3784 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3776, !dbg !36
  %3785 = getelementptr bfloat, ptr addrspace(1) %29, i64 %3777, !dbg !36
  %3786 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %3744, !dbg !36
  %3787 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %129, !dbg !36
  %3788 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %131, !dbg !36
  %3789 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %133, !dbg !36
  %3790 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %135, !dbg !36
  %3791 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %137, !dbg !36
  %3792 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %139, !dbg !36
  %3793 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %141, !dbg !36
  %3794 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3786, i32 %143, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3787, ptr addrspace(1) %3778, i32 %3762) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3788, ptr addrspace(1) %3779, i32 %3763) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3789, ptr addrspace(1) %3780, i32 %3764) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3790, ptr addrspace(1) %3781, i32 %3765) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3791, ptr addrspace(1) %3782, i32 %3766) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3792, ptr addrspace(1) %3783, i32 %3767) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3793, ptr addrspace(1) %3784, i32 %3768) #2, !dbg !36
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3794, ptr addrspace(1) %3785, i32 %3769) #2, !dbg !36
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !36
  %3795 = add nsw i64 %3703, %67, !dbg !37
  %3796 = add nsw i64 %3704, %67, !dbg !37
  %3797 = add nsw i64 %3705, %67, !dbg !37
  %3798 = add nsw i64 %3706, %67, !dbg !37
  %3799 = add nsw i64 %3707, %67, !dbg !37
  %3800 = add nsw i64 %3708, %67, !dbg !37
  %3801 = add nsw i64 %3709, %67, !dbg !37
  %3802 = add nsw i64 %3710, %67, !dbg !37
  %3803 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3795, !dbg !37
  %3804 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3796, !dbg !37
  %3805 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3797, !dbg !37
  %3806 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3798, !dbg !37
  %3807 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3799, !dbg !37
  %3808 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3800, !dbg !37
  %3809 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3801, !dbg !37
  %3810 = getelementptr bfloat, ptr addrspace(1) %27, i64 %3802, !dbg !37
  %3811 = and i1 %70, %3736, !dbg !37
  %3812 = and i1 %70, %3737, !dbg !37
  %3813 = and i1 %70, %3738, !dbg !37
  %3814 = and i1 %70, %3739, !dbg !37
  %3815 = and i1 %70, %3740, !dbg !37
  %3816 = and i1 %70, %3741, !dbg !37
  %3817 = and i1 %70, %3742, !dbg !37
  %3818 = and i1 %70, %3743, !dbg !37
  %3819 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32768), i32 %3744, !dbg !37
  %3820 = and i1 %836, %3811, !dbg !34
  %3821 = and i1 %836, %3812, !dbg !34
  %3822 = and i1 %836, %3813, !dbg !34
  %3823 = and i1 %836, %3814, !dbg !34
  %3824 = and i1 %836, %3815, !dbg !34
  %3825 = and i1 %836, %3816, !dbg !34
  %3826 = and i1 %836, %3817, !dbg !34
  %3827 = and i1 %836, %3818, !dbg !34
  %3828 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %129, !dbg !37
  %3829 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %131, !dbg !37
  %3830 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %133, !dbg !37
  %3831 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %135, !dbg !37
  %3832 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %137, !dbg !37
  %3833 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %139, !dbg !37
  %3834 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %141, !dbg !37
  %3835 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3819, i32 %143, !dbg !37
  %3836 = select i1 %3820, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3828, ptr addrspace(1) %3803, i32 %3836) #2, !dbg !37
  %3837 = select i1 %3821, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3829, ptr addrspace(1) %3804, i32 %3837) #2, !dbg !37
  %3838 = select i1 %3822, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3830, ptr addrspace(1) %3805, i32 %3838) #2, !dbg !37
  %3839 = select i1 %3823, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3831, ptr addrspace(1) %3806, i32 %3839) #2, !dbg !37
  %3840 = select i1 %3824, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3832, ptr addrspace(1) %3807, i32 %3840) #2, !dbg !37
  %3841 = select i1 %3825, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3833, ptr addrspace(1) %3808, i32 %3841) #2, !dbg !37
  %3842 = select i1 %3826, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3834, ptr addrspace(1) %3809, i32 %3842) #2, !dbg !37
  %3843 = select i1 %3827, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3835, ptr addrspace(1) %3810, i32 %3843) #2, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %.idx1013 = shl nsw i64 %3702, 7, !dbg !38
  %3844 = getelementptr i8, ptr addrspace(1) %84, i64 %.idx1013, !dbg !38
  %3845 = icmp slt i64 %3702, %80, !dbg !38
  %3846 = and i1 %3727, %3845, !dbg !38
  %.idx1014 = shl i32 %3690, 8, !dbg !38
  %3847 = and i1 %836, %3846, !dbg !34
  %gep1210 = getelementptr i8, ptr addrspace(3) %228, i32 %.idx1014, !dbg !38
  %3848 = select i1 %3847, i32 4, i32 0, !dbg !38
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep1210, ptr addrspace(1) %3844, i32 %3848) #2, !dbg !38
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !38
  %3849 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3711, !dbg !39
  %3850 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3712, !dbg !39
  %3851 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3713, !dbg !39
  %3852 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3714, !dbg !39
  %3853 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3715, !dbg !39
  %3854 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3716, !dbg !39
  %3855 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3717, !dbg !39
  %3856 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3718, !dbg !39
  %3857 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 49152), i32 %3744, !dbg !39
  %3858 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %129, !dbg !39
  %3859 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %131, !dbg !39
  %3860 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %133, !dbg !39
  %3861 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %135, !dbg !39
  %3862 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %137, !dbg !39
  %3863 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %139, !dbg !39
  %3864 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %141, !dbg !39
  %3865 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3857, i32 %143, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3858, ptr addrspace(1) %3849, i32 %3762) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3859, ptr addrspace(1) %3850, i32 %3763) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3860, ptr addrspace(1) %3851, i32 %3764) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3861, ptr addrspace(1) %3852, i32 %3765) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3862, ptr addrspace(1) %3853, i32 %3766) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3863, ptr addrspace(1) %3854, i32 %3767) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3864, ptr addrspace(1) %3855, i32 %3768) #2, !dbg !39
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3865, ptr addrspace(1) %3856, i32 %3769) #2, !dbg !39
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !39
  %3866 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3770, !dbg !40
  %3867 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3771, !dbg !40
  %3868 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3772, !dbg !40
  %3869 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3773, !dbg !40
  %3870 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3774, !dbg !40
  %3871 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3775, !dbg !40
  %3872 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3776, !dbg !40
  %3873 = getelementptr bfloat, ptr addrspace(1) %28, i64 %3777, !dbg !40
  %3874 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %3744, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !40
  %3875 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %129, !dbg !40
  %3876 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %131, !dbg !40
  %3877 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %133, !dbg !40
  %3878 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %135, !dbg !40
  %3879 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %137, !dbg !40
  %3880 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %139, !dbg !40
  %3881 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %141, !dbg !40
  %3882 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %3874, i32 %143, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %3875, ptr addrspace(1) %3866, i32 %3762) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3876, ptr addrspace(1) %3867, i32 %3763) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3877, ptr addrspace(1) %3868, i32 %3764) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3878, ptr addrspace(1) %3869, i32 %3765) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3879, ptr addrspace(1) %3870, i32 %3766) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3880, ptr addrspace(1) %3871, i32 %3767) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3881, ptr addrspace(1) %3872, i32 %3768) #2, !dbg !40
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %3882, ptr addrspace(1) %3873, i32 %3769) #2, !dbg !40
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !40
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !34
  br i1 %exitcond.not, label %._crit_edge, label %703, !dbg !34

._crit_edge:                                      ; preds = %703, %.._crit_edge_crit_edge
  %.pre-phi1277 = phi i32 [ %.pre1276, %.._crit_edge_crit_edge ], [ %530, %703 ], !dbg !41
  %.pre-phi1275 = phi i32 [ %.pre1274, %.._crit_edge_crit_edge ], [ %522, %703 ], !dbg !41
  %.pre-phi1273 = phi i32 [ %.pre1272, %.._crit_edge_crit_edge ], [ %514, %703 ], !dbg !41
  %.pre-phi1271 = phi i32 [ %.pre1270, %.._crit_edge_crit_edge ], [ %506, %703 ], !dbg !41
  %.pre-phi1269 = phi i32 [ %.pre1268, %.._crit_edge_crit_edge ], [ %498, %703 ], !dbg !41
  %.pre-phi1267 = phi i32 [ %.pre1266, %.._crit_edge_crit_edge ], [ %490, %703 ], !dbg !41
  %.pre-phi1265 = phi i32 [ %.pre1264, %.._crit_edge_crit_edge ], [ %482, %703 ], !dbg !41
  %.pre-phi1263 = phi i32 [ %.pre1262, %.._crit_edge_crit_edge ], [ %475, %703 ], !dbg !41
  %.pre-phi1261 = phi i32 [ %.pre1260, %.._crit_edge_crit_edge ], [ %470, %703 ], !dbg !41
  %3883 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3232, %703 ]
  %3884 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3233, %703 ]
  %3885 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3234, %703 ]
  %3886 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3235, %703 ]
  %3887 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3237, %703 ]
  %3888 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3238, %703 ]
  %3889 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3239, %703 ]
  %3890 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3240, %703 ]
  %3891 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3242, %703 ]
  %3892 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3243, %703 ]
  %3893 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3244, %703 ]
  %3894 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3245, %703 ]
  %3895 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3247, %703 ]
  %3896 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3248, %703 ]
  %3897 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3249, %703 ]
  %3898 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3250, %703 ]
  %3899 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3252, %703 ]
  %3900 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3253, %703 ]
  %3901 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3254, %703 ]
  %3902 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3255, %703 ]
  %3903 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3257, %703 ]
  %3904 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3258, %703 ]
  %3905 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3259, %703 ]
  %3906 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3260, %703 ]
  %3907 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3262, %703 ]
  %3908 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3263, %703 ]
  %3909 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3264, %703 ]
  %3910 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3265, %703 ]
  %3911 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3267, %703 ]
  %3912 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3268, %703 ]
  %3913 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3269, %703 ]
  %3914 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3270, %703 ]
  %3915 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3272, %703 ]
  %3916 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3273, %703 ]
  %3917 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3274, %703 ]
  %3918 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3275, %703 ]
  %3919 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3277, %703 ]
  %3920 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3278, %703 ]
  %3921 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3279, %703 ]
  %3922 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3280, %703 ]
  %3923 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3282, %703 ]
  %3924 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3283, %703 ]
  %3925 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3284, %703 ]
  %3926 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3285, %703 ]
  %3927 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3287, %703 ]
  %3928 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3288, %703 ]
  %3929 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3289, %703 ]
  %3930 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3290, %703 ]
  %3931 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3292, %703 ]
  %3932 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3293, %703 ]
  %3933 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3294, %703 ]
  %3934 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3295, %703 ]
  %3935 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3297, %703 ]
  %3936 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3298, %703 ]
  %3937 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3299, %703 ]
  %3938 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3300, %703 ]
  %3939 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3302, %703 ]
  %3940 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3303, %703 ]
  %3941 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3304, %703 ]
  %3942 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3305, %703 ]
  %3943 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3307, %703 ]
  %3944 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3308, %703 ]
  %3945 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3309, %703 ]
  %3946 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3310, %703 ]
  %3947 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3609, %703 ]
  %3948 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3610, %703 ]
  %3949 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3611, %703 ]
  %3950 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3612, %703 ]
  %3951 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3614, %703 ]
  %3952 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3615, %703 ]
  %3953 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3616, %703 ]
  %3954 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3617, %703 ]
  %3955 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3619, %703 ]
  %3956 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3620, %703 ]
  %3957 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3621, %703 ]
  %3958 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3622, %703 ]
  %3959 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3624, %703 ]
  %3960 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3625, %703 ]
  %3961 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3626, %703 ]
  %3962 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3627, %703 ]
  %3963 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3629, %703 ]
  %3964 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3630, %703 ]
  %3965 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3631, %703 ]
  %3966 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3632, %703 ]
  %3967 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3634, %703 ]
  %3968 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3635, %703 ]
  %3969 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3636, %703 ]
  %3970 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3637, %703 ]
  %3971 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3639, %703 ]
  %3972 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3640, %703 ]
  %3973 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3641, %703 ]
  %3974 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3642, %703 ]
  %3975 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3644, %703 ]
  %3976 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3645, %703 ]
  %3977 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3646, %703 ]
  %3978 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3647, %703 ]
  %3979 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3649, %703 ]
  %3980 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3650, %703 ]
  %3981 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3651, %703 ]
  %3982 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3652, %703 ]
  %3983 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3654, %703 ]
  %3984 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3655, %703 ]
  %3985 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3656, %703 ]
  %3986 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3657, %703 ]
  %3987 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3659, %703 ]
  %3988 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3660, %703 ]
  %3989 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3661, %703 ]
  %3990 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3662, %703 ]
  %3991 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3664, %703 ]
  %3992 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3665, %703 ]
  %3993 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3666, %703 ]
  %3994 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3667, %703 ]
  %3995 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3669, %703 ]
  %3996 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3670, %703 ]
  %3997 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3671, %703 ]
  %3998 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3672, %703 ]
  %3999 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3674, %703 ]
  %4000 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3675, %703 ]
  %4001 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3676, %703 ]
  %4002 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3677, %703 ]
  %4003 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3679, %703 ]
  %4004 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3680, %703 ]
  %4005 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3681, %703 ]
  %4006 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3682, %703 ]
  %4007 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3684, %703 ]
  %4008 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3685, %703 ]
  %4009 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3686, %703 ]
  %4010 = phi float [ 0.000000e+00, %.._crit_edge_crit_edge ], [ %3687, %703 ]
  %4011 = zext nneg i32 %15 to i64, !dbg !69
  %4012 = getelementptr float, ptr addrspace(1) %6, i64 %4011, !dbg !69
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %.lobit421423 = lshr i32 %33, 4, !dbg !41
  %4013 = shl nuw nsw i32 %33, 2, !dbg !41
  %4014 = and i32 %4013, 60, !dbg !41
  %4015 = zext nneg i32 %4014 to i64, !dbg !41
  %4016 = or disjoint i64 %4015, %32, !dbg !41
  %4017 = shl nuw nsw i32 %.lobit421423, 9, !dbg !41
  %4018 = and i32 %4017, 1536, !dbg !41
  %.idx424 = zext nneg i32 %4018 to i64, !dbg !41
  %4019 = getelementptr i8, ptr addrspace(1) %4012, i64 %.idx424, !dbg !41
  %4020 = getelementptr float, ptr addrspace(1) %4019, i64 %4016, !dbg !41
  %4021 = getelementptr i8, ptr addrspace(1) %4019, i64 2048, !dbg !41
  %4022 = getelementptr float, ptr addrspace(1) %4021, i64 %4016, !dbg !41
  %4023 = getelementptr i8, ptr addrspace(1) %4019, i64 4096, !dbg !41
  %4024 = getelementptr float, ptr addrspace(1) %4023, i64 %4016, !dbg !41
  %4025 = getelementptr i8, ptr addrspace(1) %4019, i64 6144, !dbg !41
  %4026 = getelementptr float, ptr addrspace(1) %4025, i64 %4016, !dbg !41
  %4027 = getelementptr i8, ptr addrspace(1) %4019, i64 8192, !dbg !41
  %4028 = getelementptr float, ptr addrspace(1) %4027, i64 %4016, !dbg !41
  %4029 = getelementptr i8, ptr addrspace(1) %4019, i64 10240, !dbg !41
  %4030 = getelementptr float, ptr addrspace(1) %4029, i64 %4016, !dbg !41
  %4031 = getelementptr i8, ptr addrspace(1) %4019, i64 12288, !dbg !41
  %4032 = getelementptr float, ptr addrspace(1) %4031, i64 %4016, !dbg !41
  %4033 = getelementptr i8, ptr addrspace(1) %4019, i64 14336, !dbg !41
  %4034 = getelementptr float, ptr addrspace(1) %4033, i64 %4016, !dbg !41
  %4035 = getelementptr i8, ptr addrspace(1) %4019, i64 16384, !dbg !41
  %4036 = getelementptr float, ptr addrspace(1) %4035, i64 %4016, !dbg !41
  %4037 = getelementptr i8, ptr addrspace(1) %4019, i64 18432, !dbg !41
  %4038 = getelementptr float, ptr addrspace(1) %4037, i64 %4016, !dbg !41
  %4039 = getelementptr i8, ptr addrspace(1) %4019, i64 20480, !dbg !41
  %4040 = getelementptr float, ptr addrspace(1) %4039, i64 %4016, !dbg !41
  %4041 = getelementptr i8, ptr addrspace(1) %4019, i64 22528, !dbg !41
  %4042 = getelementptr float, ptr addrspace(1) %4041, i64 %4016, !dbg !41
  %4043 = getelementptr i8, ptr addrspace(1) %4019, i64 24576, !dbg !41
  %4044 = getelementptr float, ptr addrspace(1) %4043, i64 %4016, !dbg !41
  %4045 = getelementptr i8, ptr addrspace(1) %4019, i64 26624, !dbg !41
  %4046 = getelementptr float, ptr addrspace(1) %4045, i64 %4016, !dbg !41
  %4047 = getelementptr i8, ptr addrspace(1) %4019, i64 28672, !dbg !41
  %4048 = getelementptr float, ptr addrspace(1) %4047, i64 %4016, !dbg !41
  %4049 = shl nuw nsw i32 %.lobit421423, 9, !dbg !41
  %4050 = or i32 %4049, 30720, !dbg !41
  %.idx439 = zext nneg i32 %4050 to i64, !dbg !41
  %4051 = getelementptr i8, ptr addrspace(1) %4012, i64 %.idx439, !dbg !41
  %4052 = getelementptr float, ptr addrspace(1) %4051, i64 %4016, !dbg !41
  %4053 = icmp slt i64 %4016, 128, !dbg !41
  %4054 = and i1 %68, %4053, !dbg !41
  %4055 = and i32 %4013, 252, !dbg !41
  %4056 = lshr i32 %.pre-phi1261, 4, !dbg !41
  %4057 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4056, !dbg !41
  %4058 = getelementptr inbounds nuw float, ptr addrspace(3) %4057, i32 %.pre-phi1261, !dbg !41
  %4059 = insertelement <2 x float> poison, float %3883, i64 0, !dbg !41
  %4060 = insertelement <2 x float> %4059, float %3884, i64 1, !dbg !41
  store <2 x float> %4060, ptr addrspace(3) %4058, align 8, !dbg !41
  %4061 = lshr i32 %.pre-phi1263, 4, !dbg !41
  %4062 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4061, !dbg !41
  %4063 = getelementptr inbounds nuw float, ptr addrspace(3) %4062, i32 %.pre-phi1263, !dbg !41
  %4064 = insertelement <2 x float> poison, float %3885, i64 0, !dbg !41
  %4065 = insertelement <2 x float> %4064, float %3886, i64 1, !dbg !41
  store <2 x float> %4065, ptr addrspace(3) %4063, align 8, !dbg !41
  %4066 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 32, !dbg !41
  %4067 = insertelement <2 x float> poison, float %3887, i64 0, !dbg !41
  %4068 = insertelement <2 x float> %4067, float %3888, i64 1, !dbg !41
  store <2 x float> %4068, ptr addrspace(3) %4066, align 8, !dbg !41
  %4069 = lshr i32 %.pre-phi1265, 4, !dbg !41
  %4070 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4069, !dbg !41
  %4071 = getelementptr inbounds nuw float, ptr addrspace(3) %4070, i32 %.pre-phi1265, !dbg !41
  %4072 = insertelement <2 x float> poison, float %3889, i64 0, !dbg !41
  %4073 = insertelement <2 x float> %4072, float %3890, i64 1, !dbg !41
  store <2 x float> %4073, ptr addrspace(3) %4071, align 8, !dbg !41
  %4074 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 64, !dbg !41
  %4075 = insertelement <2 x float> poison, float %3891, i64 0, !dbg !41
  %4076 = insertelement <2 x float> %4075, float %3892, i64 1, !dbg !41
  store <2 x float> %4076, ptr addrspace(3) %4074, align 8, !dbg !41
  %4077 = lshr i32 %.pre-phi1267, 4, !dbg !41
  %4078 = and i32 %4077, 268435452, !dbg !41
  %4079 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4078, !dbg !41
  %4080 = getelementptr inbounds nuw float, ptr addrspace(3) %4079, i32 %.pre-phi1267, !dbg !41
  %4081 = insertelement <2 x float> poison, float %3893, i64 0, !dbg !41
  %4082 = insertelement <2 x float> %4081, float %3894, i64 1, !dbg !41
  store <2 x float> %4082, ptr addrspace(3) %4080, align 8, !dbg !41
  %4083 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 96, !dbg !41
  %4084 = insertelement <2 x float> poison, float %3895, i64 0, !dbg !41
  %4085 = insertelement <2 x float> %4084, float %3896, i64 1, !dbg !41
  store <2 x float> %4085, ptr addrspace(3) %4083, align 8, !dbg !41
  %4086 = lshr i32 %.pre-phi1269, 4, !dbg !41
  %4087 = and i32 %4086, 268435452, !dbg !41
  %4088 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4087, !dbg !41
  %4089 = getelementptr inbounds nuw float, ptr addrspace(3) %4088, i32 %.pre-phi1269, !dbg !41
  %4090 = insertelement <2 x float> poison, float %3897, i64 0, !dbg !41
  %4091 = insertelement <2 x float> %4090, float %3898, i64 1, !dbg !41
  store <2 x float> %4091, ptr addrspace(3) %4089, align 8, !dbg !41
  %4092 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 128, !dbg !41
  %4093 = insertelement <2 x float> poison, float %3899, i64 0, !dbg !41
  %4094 = insertelement <2 x float> %4093, float %3900, i64 1, !dbg !41
  store <2 x float> %4094, ptr addrspace(3) %4092, align 8, !dbg !41
  %4095 = lshr i32 %.pre-phi1271, 4, !dbg !41
  %4096 = and i32 %4095, 268435452, !dbg !41
  %4097 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4096, !dbg !41
  %4098 = getelementptr inbounds nuw float, ptr addrspace(3) %4097, i32 %.pre-phi1271, !dbg !41
  %4099 = insertelement <2 x float> poison, float %3901, i64 0, !dbg !41
  %4100 = insertelement <2 x float> %4099, float %3902, i64 1, !dbg !41
  store <2 x float> %4100, ptr addrspace(3) %4098, align 8, !dbg !41
  %4101 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 160, !dbg !41
  %4102 = insertelement <2 x float> poison, float %3903, i64 0, !dbg !41
  %4103 = insertelement <2 x float> %4102, float %3904, i64 1, !dbg !41
  store <2 x float> %4103, ptr addrspace(3) %4101, align 8, !dbg !41
  %4104 = lshr i32 %.pre-phi1273, 4, !dbg !41
  %4105 = and i32 %4104, 268435452, !dbg !41
  %4106 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4105, !dbg !41
  %4107 = getelementptr inbounds nuw float, ptr addrspace(3) %4106, i32 %.pre-phi1273, !dbg !41
  %4108 = insertelement <2 x float> poison, float %3905, i64 0, !dbg !41
  %4109 = insertelement <2 x float> %4108, float %3906, i64 1, !dbg !41
  store <2 x float> %4109, ptr addrspace(3) %4107, align 8, !dbg !41
  %4110 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 192, !dbg !41
  %4111 = insertelement <2 x float> poison, float %3907, i64 0, !dbg !41
  %4112 = insertelement <2 x float> %4111, float %3908, i64 1, !dbg !41
  store <2 x float> %4112, ptr addrspace(3) %4110, align 8, !dbg !41
  %4113 = lshr i32 %.pre-phi1275, 4, !dbg !41
  %4114 = and i32 %4113, 268435452, !dbg !41
  %4115 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4114, !dbg !41
  %4116 = getelementptr inbounds nuw float, ptr addrspace(3) %4115, i32 %.pre-phi1275, !dbg !41
  %4117 = insertelement <2 x float> poison, float %3909, i64 0, !dbg !41
  %4118 = insertelement <2 x float> %4117, float %3910, i64 1, !dbg !41
  store <2 x float> %4118, ptr addrspace(3) %4116, align 8, !dbg !41
  %4119 = getelementptr inbounds nuw i8, ptr addrspace(3) %4058, i32 224, !dbg !41
  %4120 = insertelement <2 x float> poison, float %3911, i64 0, !dbg !41
  %4121 = insertelement <2 x float> %4120, float %3912, i64 1, !dbg !41
  store <2 x float> %4121, ptr addrspace(3) %4119, align 8, !dbg !41
  %4122 = lshr i32 %.pre-phi1277, 4, !dbg !41
  %4123 = and i32 %4122, 268435452, !dbg !41
  %4124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4123, !dbg !41
  %4125 = getelementptr inbounds nuw float, ptr addrspace(3) %4124, i32 %.pre-phi1277, !dbg !41
  %4126 = insertelement <2 x float> poison, float %3913, i64 0, !dbg !41
  %4127 = insertelement <2 x float> %4126, float %3914, i64 1, !dbg !41
  store <2 x float> %4127, ptr addrspace(3) %4125, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4128 = and i32 %49, 12, !dbg !41
  %4129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4128, !dbg !41
  %4130 = getelementptr inbounds nuw float, ptr addrspace(3) %4129, i32 %4055, !dbg !41
  %4131 = load <4 x i32>, ptr addrspace(3) %4130, align 16, !dbg !41
  %4132 = or disjoint i32 %4055, 256, !dbg !41
  %4133 = lshr i32 %4132, 4, !dbg !41
  %4134 = and i32 %4133, 28, !dbg !41
  %4135 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4134, !dbg !41
  %4136 = getelementptr inbounds nuw float, ptr addrspace(3) %4135, i32 %4132, !dbg !41
  %4137 = load <4 x i32>, ptr addrspace(3) %4136, align 16, !dbg !41
  %4138 = or disjoint i32 %4055, 512, !dbg !41
  %4139 = lshr i32 %4138, 4, !dbg !41
  %4140 = and i32 %4139, 44, !dbg !41
  %4141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4140, !dbg !41
  %4142 = getelementptr inbounds nuw float, ptr addrspace(3) %4141, i32 %4138, !dbg !41
  %4143 = load <4 x i32>, ptr addrspace(3) %4142, align 16, !dbg !41
  %4144 = or disjoint i32 %4055, 768, !dbg !41
  %4145 = lshr i32 %4144, 4, !dbg !41
  %4146 = and i32 %4145, 60, !dbg !41
  %4147 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4146, !dbg !41
  %4148 = getelementptr inbounds nuw float, ptr addrspace(3) %4147, i32 %4144, !dbg !41
  %4149 = load <4 x i32>, ptr addrspace(3) %4148, align 16, !dbg !41
  %4150 = or disjoint i32 %4055, 1024, !dbg !41
  %4151 = lshr i32 %4150, 4, !dbg !41
  %4152 = and i32 %4151, 76, !dbg !41
  %4153 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4152, !dbg !41
  %4154 = getelementptr inbounds nuw float, ptr addrspace(3) %4153, i32 %4150, !dbg !41
  %4155 = load <4 x i32>, ptr addrspace(3) %4154, align 16, !dbg !41
  %4156 = or disjoint i32 %4055, 1280, !dbg !41
  %4157 = lshr i32 %4156, 4, !dbg !41
  %4158 = and i32 %4157, 92, !dbg !41
  %4159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4158, !dbg !41
  %4160 = getelementptr inbounds nuw float, ptr addrspace(3) %4159, i32 %4156, !dbg !41
  %4161 = load <4 x i32>, ptr addrspace(3) %4160, align 16, !dbg !41
  %4162 = or disjoint i32 %4055, 1536, !dbg !41
  %4163 = lshr i32 %4162, 4, !dbg !41
  %4164 = and i32 %4163, 108, !dbg !41
  %4165 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4164, !dbg !41
  %4166 = getelementptr inbounds nuw float, ptr addrspace(3) %4165, i32 %4162, !dbg !41
  %4167 = load <4 x i32>, ptr addrspace(3) %4166, align 16, !dbg !41
  %4168 = or disjoint i32 %4055, 1792, !dbg !41
  %4169 = lshr i32 %4168, 4, !dbg !41
  %4170 = and i32 %4169, 124, !dbg !41
  %4171 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %4170, !dbg !41
  %4172 = getelementptr inbounds nuw float, ptr addrspace(3) %4171, i32 %4168, !dbg !41
  %4173 = load <4 x i32>, ptr addrspace(3) %4172, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4174 = insertelement <2 x float> poison, float %3915, i64 0, !dbg !41
  %4175 = insertelement <2 x float> %4174, float %3916, i64 1, !dbg !41
  store <2 x float> %4175, ptr addrspace(3) %4058, align 8, !dbg !41
  %4176 = insertelement <2 x float> poison, float %3917, i64 0, !dbg !41
  %4177 = insertelement <2 x float> %4176, float %3918, i64 1, !dbg !41
  store <2 x float> %4177, ptr addrspace(3) %4063, align 8, !dbg !41
  %4178 = insertelement <2 x float> poison, float %3919, i64 0, !dbg !41
  %4179 = insertelement <2 x float> %4178, float %3920, i64 1, !dbg !41
  store <2 x float> %4179, ptr addrspace(3) %4066, align 8, !dbg !41
  %4180 = insertelement <2 x float> poison, float %3921, i64 0, !dbg !41
  %4181 = insertelement <2 x float> %4180, float %3922, i64 1, !dbg !41
  store <2 x float> %4181, ptr addrspace(3) %4071, align 8, !dbg !41
  %4182 = insertelement <2 x float> poison, float %3923, i64 0, !dbg !41
  %4183 = insertelement <2 x float> %4182, float %3924, i64 1, !dbg !41
  store <2 x float> %4183, ptr addrspace(3) %4074, align 8, !dbg !41
  %4184 = insertelement <2 x float> poison, float %3925, i64 0, !dbg !41
  %4185 = insertelement <2 x float> %4184, float %3926, i64 1, !dbg !41
  store <2 x float> %4185, ptr addrspace(3) %4080, align 8, !dbg !41
  %4186 = insertelement <2 x float> poison, float %3927, i64 0, !dbg !41
  %4187 = insertelement <2 x float> %4186, float %3928, i64 1, !dbg !41
  store <2 x float> %4187, ptr addrspace(3) %4083, align 8, !dbg !41
  %4188 = insertelement <2 x float> poison, float %3929, i64 0, !dbg !41
  %4189 = insertelement <2 x float> %4188, float %3930, i64 1, !dbg !41
  store <2 x float> %4189, ptr addrspace(3) %4089, align 8, !dbg !41
  %4190 = insertelement <2 x float> poison, float %3931, i64 0, !dbg !41
  %4191 = insertelement <2 x float> %4190, float %3932, i64 1, !dbg !41
  store <2 x float> %4191, ptr addrspace(3) %4092, align 8, !dbg !41
  %4192 = insertelement <2 x float> poison, float %3933, i64 0, !dbg !41
  %4193 = insertelement <2 x float> %4192, float %3934, i64 1, !dbg !41
  store <2 x float> %4193, ptr addrspace(3) %4098, align 8, !dbg !41
  %4194 = insertelement <2 x float> poison, float %3935, i64 0, !dbg !41
  %4195 = insertelement <2 x float> %4194, float %3936, i64 1, !dbg !41
  store <2 x float> %4195, ptr addrspace(3) %4101, align 8, !dbg !41
  %4196 = insertelement <2 x float> poison, float %3937, i64 0, !dbg !41
  %4197 = insertelement <2 x float> %4196, float %3938, i64 1, !dbg !41
  store <2 x float> %4197, ptr addrspace(3) %4107, align 8, !dbg !41
  %4198 = insertelement <2 x float> poison, float %3939, i64 0, !dbg !41
  %4199 = insertelement <2 x float> %4198, float %3940, i64 1, !dbg !41
  store <2 x float> %4199, ptr addrspace(3) %4110, align 8, !dbg !41
  %4200 = insertelement <2 x float> poison, float %3941, i64 0, !dbg !41
  %4201 = insertelement <2 x float> %4200, float %3942, i64 1, !dbg !41
  store <2 x float> %4201, ptr addrspace(3) %4116, align 8, !dbg !41
  %4202 = insertelement <2 x float> poison, float %3943, i64 0, !dbg !41
  %4203 = insertelement <2 x float> %4202, float %3944, i64 1, !dbg !41
  store <2 x float> %4203, ptr addrspace(3) %4119, align 8, !dbg !41
  %4204 = insertelement <2 x float> poison, float %3945, i64 0, !dbg !41
  %4205 = insertelement <2 x float> %4204, float %3946, i64 1, !dbg !41
  store <2 x float> %4205, ptr addrspace(3) %4125, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %4206 = load <4 x i32>, ptr addrspace(3) %4130, align 16, !dbg !41
  %4207 = load <4 x i32>, ptr addrspace(3) %4136, align 16, !dbg !41
  %4208 = load <4 x i32>, ptr addrspace(3) %4142, align 16, !dbg !41
  %4209 = load <4 x i32>, ptr addrspace(3) %4148, align 16, !dbg !41
  %4210 = load <4 x i32>, ptr addrspace(3) %4154, align 16, !dbg !41
  %4211 = load <4 x i32>, ptr addrspace(3) %4160, align 16, !dbg !41
  %4212 = load <4 x i32>, ptr addrspace(3) %4166, align 16, !dbg !41
  %4213 = load <4 x i32>, ptr addrspace(3) %4172, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %4131, i64 0, !dbg !41
  %.extract503 = extractelement <4 x i32> %4131, i64 1, !dbg !41
  %.extract504 = extractelement <4 x i32> %4131, i64 2, !dbg !41
  %.extract505 = extractelement <4 x i32> %4131, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract503, i32 %.extract504, i32 %.extract505, ptr addrspace(1) %4020, i1 %4054) #2, !dbg !41
  %.extract506 = extractelement <4 x i32> %4137, i64 0, !dbg !41
  %.extract507 = extractelement <4 x i32> %4137, i64 1, !dbg !41
  %.extract508 = extractelement <4 x i32> %4137, i64 2, !dbg !41
  %.extract509 = extractelement <4 x i32> %4137, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract506, i32 %.extract507, i32 %.extract508, i32 %.extract509, ptr addrspace(1) %4022, i1 %4054) #2, !dbg !41
  %.extract510 = extractelement <4 x i32> %4143, i64 0, !dbg !41
  %.extract511 = extractelement <4 x i32> %4143, i64 1, !dbg !41
  %.extract512 = extractelement <4 x i32> %4143, i64 2, !dbg !41
  %.extract513 = extractelement <4 x i32> %4143, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract510, i32 %.extract511, i32 %.extract512, i32 %.extract513, ptr addrspace(1) %4024, i1 %4054) #2, !dbg !41
  %.extract514 = extractelement <4 x i32> %4149, i64 0, !dbg !41
  %.extract515 = extractelement <4 x i32> %4149, i64 1, !dbg !41
  %.extract516 = extractelement <4 x i32> %4149, i64 2, !dbg !41
  %.extract517 = extractelement <4 x i32> %4149, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract514, i32 %.extract515, i32 %.extract516, i32 %.extract517, ptr addrspace(1) %4026, i1 %4054) #2, !dbg !41
  %.extract518 = extractelement <4 x i32> %4155, i64 0, !dbg !41
  %.extract519 = extractelement <4 x i32> %4155, i64 1, !dbg !41
  %.extract520 = extractelement <4 x i32> %4155, i64 2, !dbg !41
  %.extract521 = extractelement <4 x i32> %4155, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract518, i32 %.extract519, i32 %.extract520, i32 %.extract521, ptr addrspace(1) %4028, i1 %4054) #2, !dbg !41
  %.extract522 = extractelement <4 x i32> %4161, i64 0, !dbg !41
  %.extract523 = extractelement <4 x i32> %4161, i64 1, !dbg !41
  %.extract524 = extractelement <4 x i32> %4161, i64 2, !dbg !41
  %.extract525 = extractelement <4 x i32> %4161, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract522, i32 %.extract523, i32 %.extract524, i32 %.extract525, ptr addrspace(1) %4030, i1 %4054) #2, !dbg !41
  %.extract526 = extractelement <4 x i32> %4167, i64 0, !dbg !41
  %.extract527 = extractelement <4 x i32> %4167, i64 1, !dbg !41
  %.extract528 = extractelement <4 x i32> %4167, i64 2, !dbg !41
  %.extract529 = extractelement <4 x i32> %4167, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract526, i32 %.extract527, i32 %.extract528, i32 %.extract529, ptr addrspace(1) %4032, i1 %4054) #2, !dbg !41
  %.extract530 = extractelement <4 x i32> %4173, i64 0, !dbg !41
  %.extract531 = extractelement <4 x i32> %4173, i64 1, !dbg !41
  %.extract532 = extractelement <4 x i32> %4173, i64 2, !dbg !41
  %.extract533 = extractelement <4 x i32> %4173, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract530, i32 %.extract531, i32 %.extract532, i32 %.extract533, ptr addrspace(1) %4034, i1 %4054) #2, !dbg !41
  %.extract534 = extractelement <4 x i32> %4206, i64 0, !dbg !41
  %.extract535 = extractelement <4 x i32> %4206, i64 1, !dbg !41
  %.extract536 = extractelement <4 x i32> %4206, i64 2, !dbg !41
  %.extract537 = extractelement <4 x i32> %4206, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract534, i32 %.extract535, i32 %.extract536, i32 %.extract537, ptr addrspace(1) %4036, i1 %4054) #2, !dbg !41
  %.extract538 = extractelement <4 x i32> %4207, i64 0, !dbg !41
  %.extract539 = extractelement <4 x i32> %4207, i64 1, !dbg !41
  %.extract540 = extractelement <4 x i32> %4207, i64 2, !dbg !41
  %.extract541 = extractelement <4 x i32> %4207, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract538, i32 %.extract539, i32 %.extract540, i32 %.extract541, ptr addrspace(1) %4038, i1 %4054) #2, !dbg !41
  %.extract542 = extractelement <4 x i32> %4208, i64 0, !dbg !41
  %.extract543 = extractelement <4 x i32> %4208, i64 1, !dbg !41
  %.extract544 = extractelement <4 x i32> %4208, i64 2, !dbg !41
  %.extract545 = extractelement <4 x i32> %4208, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract542, i32 %.extract543, i32 %.extract544, i32 %.extract545, ptr addrspace(1) %4040, i1 %4054) #2, !dbg !41
  %.extract546 = extractelement <4 x i32> %4209, i64 0, !dbg !41
  %.extract547 = extractelement <4 x i32> %4209, i64 1, !dbg !41
  %.extract548 = extractelement <4 x i32> %4209, i64 2, !dbg !41
  %.extract549 = extractelement <4 x i32> %4209, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract546, i32 %.extract547, i32 %.extract548, i32 %.extract549, ptr addrspace(1) %4042, i1 %4054) #2, !dbg !41
  %.extract550 = extractelement <4 x i32> %4210, i64 0, !dbg !41
  %.extract551 = extractelement <4 x i32> %4210, i64 1, !dbg !41
  %.extract552 = extractelement <4 x i32> %4210, i64 2, !dbg !41
  %.extract553 = extractelement <4 x i32> %4210, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract550, i32 %.extract551, i32 %.extract552, i32 %.extract553, ptr addrspace(1) %4044, i1 %4054) #2, !dbg !41
  %.extract554 = extractelement <4 x i32> %4211, i64 0, !dbg !41
  %.extract555 = extractelement <4 x i32> %4211, i64 1, !dbg !41
  %.extract556 = extractelement <4 x i32> %4211, i64 2, !dbg !41
  %.extract557 = extractelement <4 x i32> %4211, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract554, i32 %.extract555, i32 %.extract556, i32 %.extract557, ptr addrspace(1) %4046, i1 %4054) #2, !dbg !41
  %.extract558 = extractelement <4 x i32> %4212, i64 0, !dbg !41
  %.extract559 = extractelement <4 x i32> %4212, i64 1, !dbg !41
  %.extract560 = extractelement <4 x i32> %4212, i64 2, !dbg !41
  %.extract561 = extractelement <4 x i32> %4212, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract558, i32 %.extract559, i32 %.extract560, i32 %.extract561, ptr addrspace(1) %4048, i1 %4054) #2, !dbg !41
  %.extract562 = extractelement <4 x i32> %4213, i64 0, !dbg !41
  %.extract563 = extractelement <4 x i32> %4213, i64 1, !dbg !41
  %.extract564 = extractelement <4 x i32> %4213, i64 2, !dbg !41
  %.extract565 = extractelement <4 x i32> %4213, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract562, i32 %.extract563, i32 %.extract564, i32 %.extract565, ptr addrspace(1) %4052, i1 %4054) #2, !dbg !41
  %4214 = getelementptr i8, ptr addrspace(1) %4019, i64 32768, !dbg !70
  %4215 = getelementptr float, ptr addrspace(1) %4214, i64 %4016, !dbg !70
  %4216 = getelementptr i8, ptr addrspace(1) %4019, i64 34816, !dbg !70
  %4217 = getelementptr float, ptr addrspace(1) %4216, i64 %4016, !dbg !70
  %4218 = getelementptr i8, ptr addrspace(1) %4019, i64 36864, !dbg !70
  %4219 = getelementptr float, ptr addrspace(1) %4218, i64 %4016, !dbg !70
  %4220 = getelementptr i8, ptr addrspace(1) %4019, i64 38912, !dbg !70
  %4221 = getelementptr float, ptr addrspace(1) %4220, i64 %4016, !dbg !70
  %4222 = getelementptr i8, ptr addrspace(1) %4019, i64 40960, !dbg !70
  %4223 = getelementptr float, ptr addrspace(1) %4222, i64 %4016, !dbg !70
  %4224 = getelementptr i8, ptr addrspace(1) %4019, i64 43008, !dbg !70
  %4225 = getelementptr float, ptr addrspace(1) %4224, i64 %4016, !dbg !70
  %4226 = getelementptr i8, ptr addrspace(1) %4019, i64 45056, !dbg !70
  %4227 = getelementptr float, ptr addrspace(1) %4226, i64 %4016, !dbg !70
  %4228 = getelementptr i8, ptr addrspace(1) %4019, i64 47104, !dbg !70
  %4229 = getelementptr float, ptr addrspace(1) %4228, i64 %4016, !dbg !70
  %4230 = getelementptr i8, ptr addrspace(1) %4019, i64 49152, !dbg !70
  %4231 = getelementptr float, ptr addrspace(1) %4230, i64 %4016, !dbg !70
  %4232 = getelementptr i8, ptr addrspace(1) %4019, i64 51200, !dbg !70
  %4233 = getelementptr float, ptr addrspace(1) %4232, i64 %4016, !dbg !70
  %4234 = getelementptr i8, ptr addrspace(1) %4019, i64 53248, !dbg !70
  %4235 = getelementptr float, ptr addrspace(1) %4234, i64 %4016, !dbg !70
  %4236 = getelementptr i8, ptr addrspace(1) %4019, i64 55296, !dbg !70
  %4237 = getelementptr float, ptr addrspace(1) %4236, i64 %4016, !dbg !70
  %4238 = getelementptr i8, ptr addrspace(1) %4019, i64 57344, !dbg !70
  %4239 = getelementptr float, ptr addrspace(1) %4238, i64 %4016, !dbg !70
  %4240 = getelementptr i8, ptr addrspace(1) %4019, i64 59392, !dbg !70
  %4241 = getelementptr float, ptr addrspace(1) %4240, i64 %4016, !dbg !70
  %4242 = getelementptr i8, ptr addrspace(1) %4019, i64 61440, !dbg !70
  %4243 = getelementptr float, ptr addrspace(1) %4242, i64 %4016, !dbg !70
  %4244 = getelementptr i8, ptr addrspace(1) %4051, i64 32768, !dbg !70
  %4245 = getelementptr float, ptr addrspace(1) %4244, i64 %4016, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4246 = insertelement <2 x float> poison, float %3947, i64 0, !dbg !70
  %4247 = insertelement <2 x float> %4246, float %3948, i64 1, !dbg !70
  store <2 x float> %4247, ptr addrspace(3) %4058, align 8, !dbg !70
  %4248 = insertelement <2 x float> poison, float %3949, i64 0, !dbg !70
  %4249 = insertelement <2 x float> %4248, float %3950, i64 1, !dbg !70
  store <2 x float> %4249, ptr addrspace(3) %4063, align 8, !dbg !70
  %4250 = insertelement <2 x float> poison, float %3951, i64 0, !dbg !70
  %4251 = insertelement <2 x float> %4250, float %3952, i64 1, !dbg !70
  store <2 x float> %4251, ptr addrspace(3) %4066, align 8, !dbg !70
  %4252 = insertelement <2 x float> poison, float %3953, i64 0, !dbg !70
  %4253 = insertelement <2 x float> %4252, float %3954, i64 1, !dbg !70
  store <2 x float> %4253, ptr addrspace(3) %4071, align 8, !dbg !70
  %4254 = insertelement <2 x float> poison, float %3955, i64 0, !dbg !70
  %4255 = insertelement <2 x float> %4254, float %3956, i64 1, !dbg !70
  store <2 x float> %4255, ptr addrspace(3) %4074, align 8, !dbg !70
  %4256 = insertelement <2 x float> poison, float %3957, i64 0, !dbg !70
  %4257 = insertelement <2 x float> %4256, float %3958, i64 1, !dbg !70
  store <2 x float> %4257, ptr addrspace(3) %4080, align 8, !dbg !70
  %4258 = insertelement <2 x float> poison, float %3959, i64 0, !dbg !70
  %4259 = insertelement <2 x float> %4258, float %3960, i64 1, !dbg !70
  store <2 x float> %4259, ptr addrspace(3) %4083, align 8, !dbg !70
  %4260 = insertelement <2 x float> poison, float %3961, i64 0, !dbg !70
  %4261 = insertelement <2 x float> %4260, float %3962, i64 1, !dbg !70
  store <2 x float> %4261, ptr addrspace(3) %4089, align 8, !dbg !70
  %4262 = insertelement <2 x float> poison, float %3963, i64 0, !dbg !70
  %4263 = insertelement <2 x float> %4262, float %3964, i64 1, !dbg !70
  store <2 x float> %4263, ptr addrspace(3) %4092, align 8, !dbg !70
  %4264 = insertelement <2 x float> poison, float %3965, i64 0, !dbg !70
  %4265 = insertelement <2 x float> %4264, float %3966, i64 1, !dbg !70
  store <2 x float> %4265, ptr addrspace(3) %4098, align 8, !dbg !70
  %4266 = insertelement <2 x float> poison, float %3967, i64 0, !dbg !70
  %4267 = insertelement <2 x float> %4266, float %3968, i64 1, !dbg !70
  store <2 x float> %4267, ptr addrspace(3) %4101, align 8, !dbg !70
  %4268 = insertelement <2 x float> poison, float %3969, i64 0, !dbg !70
  %4269 = insertelement <2 x float> %4268, float %3970, i64 1, !dbg !70
  store <2 x float> %4269, ptr addrspace(3) %4107, align 8, !dbg !70
  %4270 = insertelement <2 x float> poison, float %3971, i64 0, !dbg !70
  %4271 = insertelement <2 x float> %4270, float %3972, i64 1, !dbg !70
  store <2 x float> %4271, ptr addrspace(3) %4110, align 8, !dbg !70
  %4272 = insertelement <2 x float> poison, float %3973, i64 0, !dbg !70
  %4273 = insertelement <2 x float> %4272, float %3974, i64 1, !dbg !70
  store <2 x float> %4273, ptr addrspace(3) %4116, align 8, !dbg !70
  %4274 = insertelement <2 x float> poison, float %3975, i64 0, !dbg !70
  %4275 = insertelement <2 x float> %4274, float %3976, i64 1, !dbg !70
  store <2 x float> %4275, ptr addrspace(3) %4119, align 8, !dbg !70
  %4276 = insertelement <2 x float> poison, float %3977, i64 0, !dbg !70
  %4277 = insertelement <2 x float> %4276, float %3978, i64 1, !dbg !70
  store <2 x float> %4277, ptr addrspace(3) %4125, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4278 = load <4 x i32>, ptr addrspace(3) %4130, align 16, !dbg !70
  %4279 = load <4 x i32>, ptr addrspace(3) %4136, align 16, !dbg !70
  %4280 = load <4 x i32>, ptr addrspace(3) %4142, align 16, !dbg !70
  %4281 = load <4 x i32>, ptr addrspace(3) %4148, align 16, !dbg !70
  %4282 = load <4 x i32>, ptr addrspace(3) %4154, align 16, !dbg !70
  %4283 = load <4 x i32>, ptr addrspace(3) %4160, align 16, !dbg !70
  %4284 = load <4 x i32>, ptr addrspace(3) %4166, align 16, !dbg !70
  %4285 = load <4 x i32>, ptr addrspace(3) %4172, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4286 = insertelement <2 x float> poison, float %3979, i64 0, !dbg !70
  %4287 = insertelement <2 x float> %4286, float %3980, i64 1, !dbg !70
  store <2 x float> %4287, ptr addrspace(3) %4058, align 8, !dbg !70
  %4288 = insertelement <2 x float> poison, float %3981, i64 0, !dbg !70
  %4289 = insertelement <2 x float> %4288, float %3982, i64 1, !dbg !70
  store <2 x float> %4289, ptr addrspace(3) %4063, align 8, !dbg !70
  %4290 = insertelement <2 x float> poison, float %3983, i64 0, !dbg !70
  %4291 = insertelement <2 x float> %4290, float %3984, i64 1, !dbg !70
  store <2 x float> %4291, ptr addrspace(3) %4066, align 8, !dbg !70
  %4292 = insertelement <2 x float> poison, float %3985, i64 0, !dbg !70
  %4293 = insertelement <2 x float> %4292, float %3986, i64 1, !dbg !70
  store <2 x float> %4293, ptr addrspace(3) %4071, align 8, !dbg !70
  %4294 = insertelement <2 x float> poison, float %3987, i64 0, !dbg !70
  %4295 = insertelement <2 x float> %4294, float %3988, i64 1, !dbg !70
  store <2 x float> %4295, ptr addrspace(3) %4074, align 8, !dbg !70
  %4296 = insertelement <2 x float> poison, float %3989, i64 0, !dbg !70
  %4297 = insertelement <2 x float> %4296, float %3990, i64 1, !dbg !70
  store <2 x float> %4297, ptr addrspace(3) %4080, align 8, !dbg !70
  %4298 = insertelement <2 x float> poison, float %3991, i64 0, !dbg !70
  %4299 = insertelement <2 x float> %4298, float %3992, i64 1, !dbg !70
  store <2 x float> %4299, ptr addrspace(3) %4083, align 8, !dbg !70
  %4300 = insertelement <2 x float> poison, float %3993, i64 0, !dbg !70
  %4301 = insertelement <2 x float> %4300, float %3994, i64 1, !dbg !70
  store <2 x float> %4301, ptr addrspace(3) %4089, align 8, !dbg !70
  %4302 = insertelement <2 x float> poison, float %3995, i64 0, !dbg !70
  %4303 = insertelement <2 x float> %4302, float %3996, i64 1, !dbg !70
  store <2 x float> %4303, ptr addrspace(3) %4092, align 8, !dbg !70
  %4304 = insertelement <2 x float> poison, float %3997, i64 0, !dbg !70
  %4305 = insertelement <2 x float> %4304, float %3998, i64 1, !dbg !70
  store <2 x float> %4305, ptr addrspace(3) %4098, align 8, !dbg !70
  %4306 = insertelement <2 x float> poison, float %3999, i64 0, !dbg !70
  %4307 = insertelement <2 x float> %4306, float %4000, i64 1, !dbg !70
  store <2 x float> %4307, ptr addrspace(3) %4101, align 8, !dbg !70
  %4308 = insertelement <2 x float> poison, float %4001, i64 0, !dbg !70
  %4309 = insertelement <2 x float> %4308, float %4002, i64 1, !dbg !70
  store <2 x float> %4309, ptr addrspace(3) %4107, align 8, !dbg !70
  %4310 = insertelement <2 x float> poison, float %4003, i64 0, !dbg !70
  %4311 = insertelement <2 x float> %4310, float %4004, i64 1, !dbg !70
  store <2 x float> %4311, ptr addrspace(3) %4110, align 8, !dbg !70
  %4312 = insertelement <2 x float> poison, float %4005, i64 0, !dbg !70
  %4313 = insertelement <2 x float> %4312, float %4006, i64 1, !dbg !70
  store <2 x float> %4313, ptr addrspace(3) %4116, align 8, !dbg !70
  %4314 = insertelement <2 x float> poison, float %4007, i64 0, !dbg !70
  %4315 = insertelement <2 x float> %4314, float %4008, i64 1, !dbg !70
  store <2 x float> %4315, ptr addrspace(3) %4119, align 8, !dbg !70
  %4316 = insertelement <2 x float> poison, float %4009, i64 0, !dbg !70
  %4317 = insertelement <2 x float> %4316, float %4010, i64 1, !dbg !70
  store <2 x float> %4317, ptr addrspace(3) %4125, align 8, !dbg !70
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !70
  %4318 = load <4 x i32>, ptr addrspace(3) %4130, align 16, !dbg !70
  %4319 = load <4 x i32>, ptr addrspace(3) %4136, align 16, !dbg !70
  %4320 = load <4 x i32>, ptr addrspace(3) %4142, align 16, !dbg !70
  %4321 = load <4 x i32>, ptr addrspace(3) %4148, align 16, !dbg !70
  %4322 = load <4 x i32>, ptr addrspace(3) %4154, align 16, !dbg !70
  %4323 = load <4 x i32>, ptr addrspace(3) %4160, align 16, !dbg !70
  %4324 = load <4 x i32>, ptr addrspace(3) %4166, align 16, !dbg !70
  %4325 = load <4 x i32>, ptr addrspace(3) %4172, align 16, !dbg !70
  %.extract645 = extractelement <4 x i32> %4278, i64 0, !dbg !70
  %.extract646 = extractelement <4 x i32> %4278, i64 1, !dbg !70
  %.extract647 = extractelement <4 x i32> %4278, i64 2, !dbg !70
  %.extract648 = extractelement <4 x i32> %4278, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract645, i32 %.extract646, i32 %.extract647, i32 %.extract648, ptr addrspace(1) %4215, i1 %4054) #2, !dbg !70
  %.extract649 = extractelement <4 x i32> %4279, i64 0, !dbg !70
  %.extract650 = extractelement <4 x i32> %4279, i64 1, !dbg !70
  %.extract651 = extractelement <4 x i32> %4279, i64 2, !dbg !70
  %.extract652 = extractelement <4 x i32> %4279, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract649, i32 %.extract650, i32 %.extract651, i32 %.extract652, ptr addrspace(1) %4217, i1 %4054) #2, !dbg !70
  %.extract653 = extractelement <4 x i32> %4280, i64 0, !dbg !70
  %.extract654 = extractelement <4 x i32> %4280, i64 1, !dbg !70
  %.extract655 = extractelement <4 x i32> %4280, i64 2, !dbg !70
  %.extract656 = extractelement <4 x i32> %4280, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract653, i32 %.extract654, i32 %.extract655, i32 %.extract656, ptr addrspace(1) %4219, i1 %4054) #2, !dbg !70
  %.extract657 = extractelement <4 x i32> %4281, i64 0, !dbg !70
  %.extract658 = extractelement <4 x i32> %4281, i64 1, !dbg !70
  %.extract659 = extractelement <4 x i32> %4281, i64 2, !dbg !70
  %.extract660 = extractelement <4 x i32> %4281, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract657, i32 %.extract658, i32 %.extract659, i32 %.extract660, ptr addrspace(1) %4221, i1 %4054) #2, !dbg !70
  %.extract661 = extractelement <4 x i32> %4282, i64 0, !dbg !70
  %.extract662 = extractelement <4 x i32> %4282, i64 1, !dbg !70
  %.extract663 = extractelement <4 x i32> %4282, i64 2, !dbg !70
  %.extract664 = extractelement <4 x i32> %4282, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract661, i32 %.extract662, i32 %.extract663, i32 %.extract664, ptr addrspace(1) %4223, i1 %4054) #2, !dbg !70
  %.extract665 = extractelement <4 x i32> %4283, i64 0, !dbg !70
  %.extract666 = extractelement <4 x i32> %4283, i64 1, !dbg !70
  %.extract667 = extractelement <4 x i32> %4283, i64 2, !dbg !70
  %.extract668 = extractelement <4 x i32> %4283, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract665, i32 %.extract666, i32 %.extract667, i32 %.extract668, ptr addrspace(1) %4225, i1 %4054) #2, !dbg !70
  %.extract669 = extractelement <4 x i32> %4284, i64 0, !dbg !70
  %.extract670 = extractelement <4 x i32> %4284, i64 1, !dbg !70
  %.extract671 = extractelement <4 x i32> %4284, i64 2, !dbg !70
  %.extract672 = extractelement <4 x i32> %4284, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract669, i32 %.extract670, i32 %.extract671, i32 %.extract672, ptr addrspace(1) %4227, i1 %4054) #2, !dbg !70
  %.extract673 = extractelement <4 x i32> %4285, i64 0, !dbg !70
  %.extract674 = extractelement <4 x i32> %4285, i64 1, !dbg !70
  %.extract675 = extractelement <4 x i32> %4285, i64 2, !dbg !70
  %.extract676 = extractelement <4 x i32> %4285, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract673, i32 %.extract674, i32 %.extract675, i32 %.extract676, ptr addrspace(1) %4229, i1 %4054) #2, !dbg !70
  %.extract677 = extractelement <4 x i32> %4318, i64 0, !dbg !70
  %.extract678 = extractelement <4 x i32> %4318, i64 1, !dbg !70
  %.extract679 = extractelement <4 x i32> %4318, i64 2, !dbg !70
  %.extract680 = extractelement <4 x i32> %4318, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract677, i32 %.extract678, i32 %.extract679, i32 %.extract680, ptr addrspace(1) %4231, i1 %4054) #2, !dbg !70
  %.extract681 = extractelement <4 x i32> %4319, i64 0, !dbg !70
  %.extract682 = extractelement <4 x i32> %4319, i64 1, !dbg !70
  %.extract683 = extractelement <4 x i32> %4319, i64 2, !dbg !70
  %.extract684 = extractelement <4 x i32> %4319, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract681, i32 %.extract682, i32 %.extract683, i32 %.extract684, ptr addrspace(1) %4233, i1 %4054) #2, !dbg !70
  %.extract685 = extractelement <4 x i32> %4320, i64 0, !dbg !70
  %.extract686 = extractelement <4 x i32> %4320, i64 1, !dbg !70
  %.extract687 = extractelement <4 x i32> %4320, i64 2, !dbg !70
  %.extract688 = extractelement <4 x i32> %4320, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract685, i32 %.extract686, i32 %.extract687, i32 %.extract688, ptr addrspace(1) %4235, i1 %4054) #2, !dbg !70
  %.extract689 = extractelement <4 x i32> %4321, i64 0, !dbg !70
  %.extract690 = extractelement <4 x i32> %4321, i64 1, !dbg !70
  %.extract691 = extractelement <4 x i32> %4321, i64 2, !dbg !70
  %.extract692 = extractelement <4 x i32> %4321, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract689, i32 %.extract690, i32 %.extract691, i32 %.extract692, ptr addrspace(1) %4237, i1 %4054) #2, !dbg !70
  %.extract693 = extractelement <4 x i32> %4322, i64 0, !dbg !70
  %.extract694 = extractelement <4 x i32> %4322, i64 1, !dbg !70
  %.extract695 = extractelement <4 x i32> %4322, i64 2, !dbg !70
  %.extract696 = extractelement <4 x i32> %4322, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract693, i32 %.extract694, i32 %.extract695, i32 %.extract696, ptr addrspace(1) %4239, i1 %4054) #2, !dbg !70
  %.extract697 = extractelement <4 x i32> %4323, i64 0, !dbg !70
  %.extract698 = extractelement <4 x i32> %4323, i64 1, !dbg !70
  %.extract699 = extractelement <4 x i32> %4323, i64 2, !dbg !70
  %.extract700 = extractelement <4 x i32> %4323, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract697, i32 %.extract698, i32 %.extract699, i32 %.extract700, ptr addrspace(1) %4241, i1 %4054) #2, !dbg !70
  %.extract701 = extractelement <4 x i32> %4324, i64 0, !dbg !70
  %.extract702 = extractelement <4 x i32> %4324, i64 1, !dbg !70
  %.extract703 = extractelement <4 x i32> %4324, i64 2, !dbg !70
  %.extract704 = extractelement <4 x i32> %4324, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract701, i32 %.extract702, i32 %.extract703, i32 %.extract704, ptr addrspace(1) %4243, i1 %4054) #2, !dbg !70
  %.extract705 = extractelement <4 x i32> %4325, i64 0, !dbg !70
  %.extract706 = extractelement <4 x i32> %4325, i64 1, !dbg !70
  %.extract707 = extractelement <4 x i32> %4325, i64 2, !dbg !70
  %.extract708 = extractelement <4 x i32> %4325, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract705, i32 %.extract706, i32 %.extract707, i32 %.extract708, ptr addrspace(1) %4245, i1 %4054) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_delta_h.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", linkageName: "chunk_gated_delta_rule_fwd_kernel_h_blockdim64", scope: !1, file: !1, line: 36, type: !6, scopeLine: 36, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 61, column: 30, scope: !5)
!9 = !DILocation(line: 61, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 33, scope: !5)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !5, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!14 = !DILocation(line: 70, column: 24, scope: !5)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 71, column: 20, scope: !5)
!17 = !DILocation(line: 83, column: 29, scope: !5)
!18 = !DILocation(line: 83, column: 9, scope: !5)
!19 = !DILocation(line: 69, column: 25, scope: !5)
!20 = !DILocation(line: 84, column: 16, scope: !5)
!21 = !DILocation(line: 84, column: 20, scope: !5)
!22 = !DILocation(line: 84, column: 27, scope: !5)
!23 = !DILocation(line: 84, column: 9, scope: !5)
!24 = !DILocation(line: 85, column: 9, scope: !5)
!25 = !DILocation(line: 86, column: 9, scope: !5)
!26 = !DILocation(line: 88, column: 17, scope: !5)
!27 = !DILocation(line: 113, column: 79, scope: !5)
!28 = !DILocation(line: 113, column: 94, scope: !5)
!29 = !DILocation(line: 114, column: 23, scope: !5)
!30 = !DILocation(line: 117, column: 27, scope: !5)
!31 = !DILocation(line: 125, column: 83, scope: !5)
!32 = !DILocation(line: 150, column: 35, scope: !5)
!33 = !DILocation(line: 151, column: 50, scope: !5)
!34 = !DILocation(line: 112, column: 21, scope: !5)
!35 = !DILocation(line: 126, column: 22, scope: !5)
!36 = !DILocation(line: 130, column: 26, scope: !5)
!37 = !DILocation(line: 141, column: 22, scope: !5)
!38 = !DILocation(line: 152, column: 26, scope: !5)
!39 = !DILocation(line: 182, column: 22, scope: !5)
!40 = !DILocation(line: 189, column: 26, scope: !5)
!41 = !DILocation(line: 211, column: 23, scope: !5)
!42 = !DILocation(line: 113, column: 43, scope: !5)
!43 = !DILocation(line: 113, column: 37, scope: !5)
!44 = !DILocation(line: 114, column: 31, scope: !5)
!45 = !DILocation(line: 117, column: 35, scope: !5)
!46 = !DILocation(line: 127, column: 26, scope: !5)
!47 = !DILocation(line: 131, column: 31, scope: !5)
!48 = !DILocation(line: 141, column: 52, scope: !5)
!49 = !DILocation(line: 145, column: 33, scope: !5)
!50 = !DILocation(line: 145, column: 26, scope: !5)
!51 = !DILocation(line: 147, column: 30, scope: !5)
!52 = !DILocation(line: 147, column: 39, scope: !5)
!53 = !DILocation(line: 149, column: 30, scope: !5)
!54 = !DILocation(line: 149, column: 50, scope: !5)
!55 = !DILocation(line: 150, column: 56, scope: !5)
!56 = !DILocation(line: 150, column: 45, scope: !5)
!57 = !DILocation(line: 150, column: 60, scope: !5)
!58 = !DILocation(line: 150, column: 31, scope: !5)
!59 = !DILocation(line: 153, column: 53, scope: !5)
!60 = !DILocation(line: 153, column: 42, scope: !5)
!61 = !DILocation(line: 153, column: 59, scope: !5)
!62 = !DILocation(line: 153, column: 24, scope: !5)
!63 = !DILocation(line: 154, column: 27, scope: !5)
!64 = !DILocation(line: 155, column: 20, scope: !5)
!65 = !DILocation(line: 157, column: 24, scope: !5)
!66 = !DILocation(line: 179, column: 21, scope: !5)
!67 = !DILocation(line: 186, column: 28, scope: !5)
!68 = !DILocation(line: 193, column: 32, scope: !5)
!69 = !DILocation(line: 95, column: 18, scope: !5)
!70 = !DILocation(line: 214, column: 27, scope: !5)
!71 = !DILocation(line: 209, column: 4, scope: !5)
