#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 1], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64xi64, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<128> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x64xi64, #blocked2> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<0> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_16 = arith.constant dense<128> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_17 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_18 = arith.constant dense<128> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_19 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_20 = arith.constant dense<64> : tensor<64xi64, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc72)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc73)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c64_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc26)
    %29 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %30 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %31 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %32 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %33 = arith.extsi %28 : tensor<64xi32, #blocked> to tensor<64xi64, #blocked> loc(#loc26)
    %34 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc26)
    %35 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc26)
    %36 = arith.muli %34, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %37 = tt.broadcast %36 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %38 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %39 = arith.addi %38, %31 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc26)
    %41 = tt.broadcast %40 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc26)
    %42 = arith.addi %37, %41 : tensor<64x64xi64, #blocked2> loc(#loc26)
    %43 = arith.cmpi sge, %34, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %44 = arith.cmpi sge, %35, %cst_14 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %45 = arith.cmpi slt, %34, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %46 = arith.cmpi slt, %35, %cst_17 : tensor<64x1xi64, #blocked1> loc(#loc26)
    %47 = arith.andi %43, %45 : tensor<64x1xi1, #blocked2> loc(#loc26)
    %48 = arith.andi %44, %46 : tensor<64x1xi1, #blocked1> loc(#loc26)
    %49 = tt.broadcast %47 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %50 = tt.broadcast %48 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc26)
    %51 = arith.cmpi sge, %40, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %52 = arith.cmpi slt, %40, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc26)
    %53 = arith.andi %51, %52 : tensor<1x64xi1, #blocked2> loc(#loc26)
    %54 = tt.broadcast %53 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc26)
    %55 = arith.andi %49, %54 : tensor<64x64xi1, #blocked2> loc(#loc26)
    %56 = arith.addi %29, %cst_4 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc27)
    %57 = arith.addi %30, %cst_5 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %58 = arith.addi %31, %cst_7 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    %59 = tt.expand_dims %56 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc27)
    %60 = tt.expand_dims %57 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc27)
    %61 = arith.muli %59, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %62 = tt.broadcast %61 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc27)
    %63 = arith.addi %62, %41 : tensor<64x64xi64, #blocked2> loc(#loc27)
    %64 = arith.cmpi sge, %59, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %65 = arith.cmpi sge, %60, %cst_14 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %66 = arith.cmpi slt, %59, %cst_16 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %67 = arith.cmpi slt, %60, %cst_17 : tensor<64x1xi64, #blocked1> loc(#loc27)
    %68 = arith.andi %64, %66 : tensor<64x1xi1, #blocked2> loc(#loc27)
    %69 = arith.andi %65, %67 : tensor<64x1xi1, #blocked1> loc(#loc27)
    %70 = tt.broadcast %68 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc27)
    %71 = tt.broadcast %69 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc27)
    %72 = arith.andi %70, %54 : tensor<64x64xi1, #blocked2> loc(#loc27)
    %73 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %74 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc29)
    %75 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc29)
    %76 = tt.broadcast %75 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %77 = tt.splat %73 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %78 = arith.cmpi sge, %75, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %79 = arith.cmpi slt, %75, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc29)
    %80 = arith.andi %78, %79 : tensor<1x64xi1, #blocked2> loc(#loc29)
    %81 = tt.broadcast %80 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %82 = tt.expand_dims %58 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi64, #blocked2> loc(#loc30)
    %83 = tt.broadcast %82 : tensor<1x64xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc30)
    %84 = arith.cmpi sge, %82, %cst_10 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %85 = arith.cmpi slt, %82, %cst_8 : tensor<1x64xi64, #blocked2> loc(#loc30)
    %86 = arith.andi %84, %85 : tensor<1x64xi1, #blocked2> loc(#loc30)
    %87 = tt.broadcast %86 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc30)
    %88 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc31)
    %89 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
    %90 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %91 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %92 = tt.addptr %91, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %93 = tt.splat %92 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %94 = tt.splat %73 : i64 -> tensor<64xi64, #blocked> loc(#loc36)
    %95 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    %96 = tt.broadcast %35 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %97 = tt.splat %73 : i64 -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %98 = tt.broadcast %60 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc38)
    %99 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %100 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %101 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc31)
    %102 = ttg.local_alloc : () -> !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> loc(#loc36)
    %103 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> loc(#loc37)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> loc(#loc38)
    %105 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %106 = arith.muli %34, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %107 = tt.broadcast %106 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %108 = arith.addi %107, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %109 = tt.addptr %74, %108 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %110 = arith.cmpi slt, %34, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %111 = arith.andi %43, %110 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %112 = tt.broadcast %111 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %113 = arith.andi %112, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %114 = ttg.memdesc_subview %99[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %115 = tt.splat %105 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %116 = arith.andi %115, %113 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %117 = ttg.async_copy_global_to_local %109, %114 mask %116 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %118 = ttg.async_commit_group %117 loc(#loc29)
    %119 = arith.addi %107, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %120 = tt.addptr %74, %119 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %121 = arith.andi %112, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %122 = ttg.memdesc_subview %100[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %123 = arith.andi %115, %121 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %124 = ttg.async_copy_global_to_local %120, %122 mask %123 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %125 = ttg.async_commit_group %124 loc(#loc30)
    %126 = arith.addi %107, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %127 = tt.addptr %88, %126 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %128 = arith.andi %112, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %129 = ttg.memdesc_subview %101[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
    %130 = arith.andi %115, %128 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %131 = ttg.async_copy_global_to_local %127, %129 mask %130 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
    %132 = ttg.async_commit_group %131 loc(#loc31)
    %133 = arith.muli %33, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %134 = tt.addptr %93, %133 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %135 = arith.cmpi sge, %33, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %136 = arith.cmpi slt, %33, %94 : tensor<64xi64, #blocked> loc(#loc36)
    %137 = arith.andi %135, %136 : tensor<64xi1, #blocked> loc(#loc36)
    %138 = ttg.memdesc_subview %102[%c0_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
    %139 = tt.splat %105 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %140 = arith.andi %139, %137 : tensor<64xi1, #blocked> loc(#loc39)
    %141 = ttg.async_copy_global_to_local %134, %138 mask %140 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
    %142 = ttg.async_commit_group %141 loc(#loc36)
    %143 = tt.expand_dims %32 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %144 = arith.muli %143, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %145 = tt.broadcast %144 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %146 = arith.addi %96, %145 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %147 = tt.addptr %95, %146 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %148 = arith.cmpi sge, %143, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %149 = arith.cmpi slt, %143, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %150 = arith.andi %148, %149 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %151 = tt.broadcast %150 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %152 = arith.andi %50, %151 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %153 = ttg.memdesc_subview %103[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
    %154 = tt.splat %105 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %155 = arith.andi %154, %152 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %156 = ttg.async_copy_global_to_local %147, %153 mask %155 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
    %157 = ttg.async_commit_group %156 loc(#loc37)
    %158 = arith.addi %98, %145 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %159 = tt.addptr %95, %158 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %160 = arith.andi %71, %151 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %161 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
    %162 = arith.andi %154, %160 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %163 = ttg.async_copy_global_to_local %159, %161 mask %162 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
    %164 = ttg.async_commit_group %163 loc(#loc38)
    %165 = arith.cmpi sgt, %6, %c1_i32 : i32 loc(#loc39)
    %166 = arith.addi %32, %cst_19 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %167 = arith.addi %33, %cst_20 : tensor<64xi64, #blocked> loc(#loc29)
    %168 = arith.muli %59, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %169 = tt.broadcast %168 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
    %170 = arith.addi %169, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
    %171 = tt.addptr %74, %170 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
    %172 = arith.cmpi slt, %59, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %173 = arith.andi %64, %172 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %174 = tt.broadcast %173 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
    %175 = arith.andi %174, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
    %176 = ttg.memdesc_subview %99[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %177 = tt.splat %165 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %178 = arith.andi %177, %175 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %179 = ttg.async_copy_global_to_local %171, %176 mask %178 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
    %180 = ttg.async_commit_group %179 loc(#loc29)
    %181 = arith.addi %169, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
    %182 = tt.addptr %74, %181 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
    %183 = arith.andi %174, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
    %184 = ttg.memdesc_subview %100[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %185 = arith.andi %177, %183 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %186 = ttg.async_copy_global_to_local %182, %184 mask %185 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
    %187 = ttg.async_commit_group %186 loc(#loc30)
    %188 = arith.addi %169, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
    %189 = tt.addptr %88, %188 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
    %190 = arith.andi %174, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
    %191 = ttg.memdesc_subview %101[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
    %192 = arith.andi %177, %190 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %193 = ttg.async_copy_global_to_local %189, %191 mask %192 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
    %194 = ttg.async_commit_group %193 loc(#loc31)
    %195 = arith.muli %167, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
    %196 = tt.addptr %93, %195 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
    %197 = arith.cmpi sge, %167, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
    %198 = arith.cmpi slt, %167, %94 : tensor<64xi64, #blocked> loc(#loc36)
    %199 = arith.andi %197, %198 : tensor<64xi1, #blocked> loc(#loc36)
    %200 = ttg.memdesc_subview %102[%c1_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
    %201 = tt.splat %165 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
    %202 = arith.andi %201, %199 : tensor<64xi1, #blocked> loc(#loc39)
    %203 = ttg.async_copy_global_to_local %196, %200 mask %202 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
    %204 = ttg.async_commit_group %203 loc(#loc36)
    %205 = tt.expand_dims %166 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
    %206 = arith.muli %205, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %207 = tt.broadcast %206 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
    %208 = arith.addi %96, %207 : tensor<64x64xi64, #blocked1> loc(#loc37)
    %209 = tt.addptr %95, %208 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
    %210 = arith.cmpi sge, %205, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %211 = arith.cmpi slt, %205, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
    %212 = arith.andi %210, %211 : tensor<1x64xi1, #blocked1> loc(#loc37)
    %213 = tt.broadcast %212 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
    %214 = arith.andi %50, %213 : tensor<64x64xi1, #blocked1> loc(#loc37)
    %215 = ttg.memdesc_subview %103[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
    %216 = tt.splat %165 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %217 = arith.andi %216, %214 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %218 = ttg.async_copy_global_to_local %209, %215 mask %217 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
    %219 = ttg.async_commit_group %218 loc(#loc37)
    %220 = arith.addi %98, %207 : tensor<64x64xi64, #blocked1> loc(#loc38)
    %221 = tt.addptr %95, %220 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
    %222 = arith.andi %71, %213 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %223 = ttg.memdesc_subview %104[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
    %224 = arith.andi %216, %222 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %225 = ttg.async_copy_global_to_local %221, %223 mask %224 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
    %226 = ttg.async_commit_group %225 loc(#loc38)
    %227:22 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_21, %arg10 = %cst_21, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %118, %arg14 = %180, %arg15 = %125, %arg16 = %187, %arg17 = %132, %arg18 = %194, %arg19 = %126, %arg20 = %188, %arg21 = %128, %arg22 = %190, %arg23 = %c0_i32, %arg24 = %c64_i32, %arg25 = %142, %arg26 = %204, %arg27 = %157, %arg28 = %219, %arg29 = %164, %arg30 = %226) -> (tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %265 = arith.subi %6, %c2_i32 : i32 loc(#loc39)
      %266 = arith.cmpi slt, %arg8, %265 : i32 loc(#loc39)
      %267 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %268 = arith.cmpi sge, %267, %c2_i32 : i32 loc(#loc39)
      %269 = arith.select %268, %c0_i32, %267 : i32 loc(#loc39)
      %270 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %271 = tt.addptr %11, %270 : !tt.ptr<bf16>, i32 loc(#loc41)
      %272 = arith.truncf %arg9 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc42)
      %273 = ttg.local_alloc %272 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc42)
      %274 = tt.splat %271 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %275 = tt.addptr %274, %42 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc26)
      %276 = ttg.convert_layout %272 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc26)
      tt.store %275, %276, %55 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %277 = arith.truncf %arg10 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc43)
      %278 = ttg.local_alloc %277 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc43)
      %279 = tt.addptr %274, %63 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc27)
      %280 = ttg.convert_layout %277 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc27)
      tt.store %279, %280, %72 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc27)
      %281 = ttg.async_wait %arg13, %arg15, %arg17, %arg25, %arg27, %arg29 {num = 6 : i32} loc(#loc29)
      %282 = ttg.memdesc_subview %99[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %283 = ttg.local_load %282 token %281 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc29)
      %284 = ttg.local_load %273 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc42)
      %285 = tt.dot %283, %284, %cst_21, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc44)
      %286 = ttg.memdesc_subview %100[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %287 = ttg.local_load %286 token %281 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc30)
      %288 = ttg.local_load %278 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc43)
      %289 = tt.dot %287, %288, %285, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc45)
      %290 = ttg.memdesc_subview %101[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
      %291 = ttg.local_load %290 token %281 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #mma> loc(#loc46)
      %292 = arith.extf %291 : tensor<64x64xbf16, #mma> to tensor<64x64xf32, #mma> loc(#loc46)
      %293 = arith.subf %292, %289 : tensor<64x64xf32, #mma> loc(#loc46)
      %294 = arith.truncf %293 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc47)
      %295 = ttg.convert_layout %294 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc47)
      %296 = tt.addptr %89, %arg19 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc32)
      tt.store %296, %295, %arg21 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %297 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %298 = arith.muli %297, %c64_i32 : i32 loc(#loc49)
      %299 = arith.minsi %298, %arg7 : i32 loc(#loc50)
      %300 = arith.subi %299, %c1_i32 : i32 loc(#loc51)
      %301 = tt.splat %arg23 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %302 = arith.addi %301, %27 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %303 = arith.cmpi slt, %302, %90 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %304 = arith.muli %300, %c32_i32 : i32 loc(#loc53)
      %305 = tt.addptr %91, %304 : !tt.ptr<f32>, i32 loc(#loc54)
      %306 = tt.addptr %305, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %307 = tt.load %306 : !tt.ptr<f32> loc(#loc56)
      %308 = ttg.memdesc_subview %102[%269, %c0_i32] : !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
      %309 = ttg.local_load %308 token %281 : !ttg.memdesc<64xf32, #shared1, #smem, mutable, 2x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %310 = tt.splat %307 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %311 = arith.subf %310, %309 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %312 = math.exp %311 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %313 = arith.select %303, %312, %cst : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %314 = tt.expand_dims %313 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %315 = tt.broadcast %314 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc61)
      %316 = arith.mulf %293, %315 : tensor<64x64xf32, #mma> loc(#loc61)
      %317 = math.exp %307 : f32 loc(#loc62)
      %318 = tt.splat %317 : f32 -> tensor<64x64xf32, #mma> loc(#loc63)
      %319 = arith.mulf %arg9, %318 : tensor<64x64xf32, #mma> loc(#loc63)
      %320 = arith.mulf %arg10, %318 : tensor<64x64xf32, #mma> loc(#loc64)
      %321 = arith.truncf %316 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc65)
      %322 = ttg.local_alloc %321 : (tensor<64x64xbf16, #mma>) -> !ttg.memdesc<64x64xbf16, #shared, #smem> loc(#loc65)
      %323 = ttg.memdesc_subview %103[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
      %324 = ttg.local_load %323 token %281 : !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc37)
      %325 = ttg.local_load %322 : !ttg.memdesc<64x64xbf16, #shared, #smem> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc65)
      %326 = tt.dot %324, %325, %319, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc66)
      %327 = ttg.memdesc_subview %104[%269, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
      %328 = ttg.local_load %327 token %281 : !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc38)
      %329 = tt.dot %328, %325, %320, inputPrecision = tf32 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<64x64xf32, #mma> loc(#loc67)
      %330 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %331 = arith.cmpi sge, %330, %c2_i32 : i32 loc(#loc39)
      %332 = arith.select %331, %c0_i32, %330 : i32 loc(#loc39)
      %333 = arith.addi %arg8, %c2_i32 : i32 loc(#loc39)
      %334 = arith.muli %333, %c64_i32 : i32 loc(#loc68)
      %335 = arith.extsi %334 : i32 to i64 loc(#loc28)
      %336 = tt.splat %335 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %337 = tt.splat %335 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %338 = tt.splat %335 : i64 -> tensor<64xi64, #blocked> loc(#loc29)
      %339 = arith.addi %336, %29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %340 = arith.addi %337, %32 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %341 = arith.addi %338, %33 : tensor<64xi64, #blocked> loc(#loc29)
      %342 = tt.expand_dims %339 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %343 = arith.muli %342, %cst_3 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %344 = tt.broadcast %343 : tensor<64x1xi64, #blocked2> -> tensor<64x64xi64, #blocked2> loc(#loc29)
      %345 = arith.addi %344, %76 : tensor<64x64xi64, #blocked2> loc(#loc29)
      %346 = tt.addptr %74, %345 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc29)
      %347 = arith.cmpi sge, %342, %cst_13 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %348 = arith.cmpi slt, %342, %77 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %349 = arith.andi %347, %348 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %350 = tt.broadcast %349 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc29)
      %351 = arith.andi %350, %81 : tensor<64x64xi1, #blocked2> loc(#loc29)
      %352 = ttg.memdesc_subview %99[%332, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %353 = tt.splat %266 : i1 -> tensor<64x64xi1, #blocked2> loc(#loc39)
      %354 = arith.andi %353, %351 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %355 = ttg.async_copy_global_to_local %346, %352 mask %354 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc29)
      %356 = ttg.async_commit_group %355 loc(#loc29)
      %357 = arith.addi %344, %83 : tensor<64x64xi64, #blocked2> loc(#loc30)
      %358 = tt.addptr %74, %357 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc30)
      %359 = arith.andi %350, %87 : tensor<64x64xi1, #blocked2> loc(#loc30)
      %360 = ttg.memdesc_subview %100[%332, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %361 = arith.andi %353, %359 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %362 = ttg.async_copy_global_to_local %358, %360 mask %361 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc30)
      %363 = ttg.async_commit_group %362 loc(#loc30)
      %364 = arith.addi %344, %41 : tensor<64x64xi64, #blocked2> loc(#loc31)
      %365 = tt.addptr %88, %364 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi64, #blocked2> loc(#loc31)
      %366 = arith.andi %350, %54 : tensor<64x64xi1, #blocked2> loc(#loc31)
      %367 = ttg.memdesc_subview %101[%332, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
      %368 = arith.andi %353, %366 : tensor<64x64xi1, #blocked2> loc(#loc39)
      %369 = ttg.async_copy_global_to_local %365, %367 mask %368 : tensor<64x64x!tt.ptr<bf16>, #blocked2> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc31)
      %370 = ttg.async_commit_group %369 loc(#loc31)
      %371 = arith.muli %341, %cst_0 : tensor<64xi64, #blocked> loc(#loc36)
      %372 = tt.addptr %93, %371 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi64, #blocked> loc(#loc36)
      %373 = arith.cmpi sge, %341, %cst_1 : tensor<64xi64, #blocked> loc(#loc36)
      %374 = arith.cmpi slt, %341, %94 : tensor<64xi64, #blocked> loc(#loc36)
      %375 = arith.andi %373, %374 : tensor<64xi1, #blocked> loc(#loc36)
      %376 = ttg.memdesc_subview %102[%332, %c0_i32] : !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> -> !ttg.memdesc<64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
      %377 = tt.splat %266 : i1 -> tensor<64xi1, #blocked> loc(#loc39)
      %378 = arith.andi %377, %375 : tensor<64xi1, #blocked> loc(#loc39)
      %379 = ttg.async_copy_global_to_local %372, %376 mask %378 : tensor<64x!tt.ptr<f32>, #blocked> -> <64xf32, #shared1, #smem, mutable, 2x64> loc(#loc36)
      %380 = ttg.async_commit_group %379 loc(#loc36)
      %381 = tt.expand_dims %340 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc37)
      %382 = arith.muli %381, %cst_2 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %383 = tt.broadcast %382 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc37)
      %384 = arith.addi %96, %383 : tensor<64x64xi64, #blocked1> loc(#loc37)
      %385 = tt.addptr %95, %384 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc37)
      %386 = arith.cmpi sge, %381, %cst_11 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %387 = arith.cmpi slt, %381, %97 : tensor<1x64xi64, #blocked1> loc(#loc37)
      %388 = arith.andi %386, %387 : tensor<1x64xi1, #blocked1> loc(#loc37)
      %389 = tt.broadcast %388 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc37)
      %390 = arith.andi %50, %389 : tensor<64x64xi1, #blocked1> loc(#loc37)
      %391 = ttg.memdesc_subview %103[%332, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
      %392 = tt.splat %266 : i1 -> tensor<64x64xi1, #blocked1> loc(#loc39)
      %393 = arith.andi %392, %390 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %394 = ttg.async_copy_global_to_local %385, %391 mask %393 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc37)
      %395 = ttg.async_commit_group %394 loc(#loc37)
      %396 = arith.addi %98, %383 : tensor<64x64xi64, #blocked1> loc(#loc38)
      %397 = tt.addptr %95, %396 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc38)
      %398 = arith.andi %71, %389 : tensor<64x64xi1, #blocked1> loc(#loc38)
      %399 = ttg.memdesc_subview %104[%332, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
      %400 = arith.andi %392, %398 : tensor<64x64xi1, #blocked1> loc(#loc39)
      %401 = ttg.async_copy_global_to_local %397, %399 mask %400 : tensor<64x64x!tt.ptr<bf16>, #blocked1> -> <64x64xbf16, #shared2, #smem, mutable, 2x64x64> loc(#loc38)
      %402 = ttg.async_commit_group %401 loc(#loc38)
      scf.yield %326, %329, %332, %269, %arg14, %356, %arg16, %363, %arg18, %370, %arg20, %364, %arg22, %366, %arg24, %334, %arg26, %380, %arg28, %395, %arg30, %402 : tensor<64x64xf32, #mma>, tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x64xi64, #blocked2>, tensor<64x64xi64, #blocked2>, tensor<64x64xi1, #blocked2>, tensor<64x64xi1, #blocked2>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %228 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %103 : !ttg.memdesc<2x64x64xbf16, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %102 : !ttg.memdesc<2x64xf32, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %101 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %100 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %99 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %229 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc69)
    %230 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc69)
    %231 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %232 = arith.extsi %230 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc69)
    %233 = arith.extsi %231 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %234 = tt.expand_dims %232 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc69)
    %235 = arith.muli %234, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %236 = tt.broadcast %235 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc69)
    %237 = tt.splat %22 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %238 = arith.addi %237, %233 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc69)
    %239 = tt.expand_dims %238 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc69)
    %240 = tt.broadcast %239 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc69)
    %241 = arith.addi %236, %240 : tensor<64x64xi64, #blocked3> loc(#loc69)
    %242 = tt.addptr %229, %241 : tensor<64x64x!tt.ptr<f32>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc69)
    %243 = arith.cmpi sge, %234, %cst_15 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %244 = arith.cmpi slt, %234, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc69)
    %245 = arith.andi %243, %244 : tensor<64x1xi1, #blocked3> loc(#loc69)
    %246 = tt.broadcast %245 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc69)
    %247 = arith.cmpi sge, %239, %cst_12 : tensor<1x64xi64, #blocked3> loc(#loc69)
    %248 = arith.cmpi slt, %239, %cst_9 : tensor<1x64xi64, #blocked3> loc(#loc69)
    %249 = arith.andi %247, %248 : tensor<1x64xi1, #blocked3> loc(#loc69)
    %250 = tt.broadcast %249 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc69)
    %251 = arith.andi %246, %250 : tensor<64x64xi1, #blocked3> loc(#loc69)
    %252 = ttg.convert_layout %227#0 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked3> loc(#loc69)
    tt.store %242, %252, %251 : tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc69)
    %253 = arith.addi %232, %cst_6 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc70)
    %254 = tt.expand_dims %253 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc70)
    %255 = arith.muli %254, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %256 = tt.broadcast %255 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc70)
    %257 = arith.addi %256, %240 : tensor<64x64xi64, #blocked3> loc(#loc70)
    %258 = tt.addptr %229, %257 : tensor<64x64x!tt.ptr<f32>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc70)
    %259 = arith.cmpi sge, %254, %cst_15 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %260 = arith.cmpi slt, %254, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc70)
    %261 = arith.andi %259, %260 : tensor<64x1xi1, #blocked3> loc(#loc70)
    %262 = tt.broadcast %261 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc70)
    %263 = arith.andi %262, %250 : tensor<64x64xi1, #blocked3> loc(#loc70)
    %264 = ttg.convert_layout %227#1 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked3> loc(#loc70)
    tt.store %258, %264, %263 : tensor<64x64x!tt.ptr<f32>, #blocked3> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc72 = loc(callsite(#loc7 at #loc8))
#loc73 = loc(callsite(#loc9 at #loc8))
