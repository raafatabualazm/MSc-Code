; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @merge_16x16_to_64x64_inverse_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, ptr addrspace(1) %3) local_unnamed_addr #0 !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = and i32 %7, 32, !dbg !10
  %11 = icmp eq i32 %10, 0, !dbg !10
  %12 = and i32 %7, 64, !dbg !10
  %13 = icmp eq i32 %12, 0, !dbg !10
  %14 = and i32 %7, 128, !dbg !10
  %15 = lshr i32 %7, 4, !dbg !10
  %16 = and i32 %15, 15, !dbg !10
  %17 = and i32 %7, 15, !dbg !10
  %18 = icmp samesign ugt i32 %16, %17, !dbg !11
  %19 = shl nuw nsw i32 %6, 6, !dbg !12
  %20 = and i32 %19, 4192256, !dbg !12
  %21 = mul i32 %20, %2, !dbg !13
  %22 = and i32 %19, 1984, !dbg !13
  %23 = or disjoint i32 %21, %22, !dbg !13
  %24 = sext i32 %23 to i64, !dbg !14
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !14
  %26 = getelementptr bfloat, ptr addrspace(1) %1, i64 %24, !dbg !15
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !16
  %28 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !16
  %30 = mul nuw i32 %27, %29, !dbg !16
  %31 = add nuw i32 %30, %6, !dbg !16
  %32 = mul i32 %31, %28, !dbg !16
  %33 = add i32 %32, %5, !dbg !16
  %34 = shl i32 %33, 8, !dbg !16
  %35 = sext i32 %34 to i64, !dbg !16
  %36 = getelementptr i8, ptr addrspace(1) %3, i64 %35, !dbg !16
  %37 = icmp samesign ult i32 %7, 32, !dbg !16
  %38 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %7, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> zeroinitializer, i1 %37) #4, !dbg !16
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !16
  %39 = icmp eq i32 %7, 0, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %25, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %2, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 8192, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0x7;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x2;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !16
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %36, ptr addrspace(3) @global_smem, i1 %37) #4, !dbg !16
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !16
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !16
  %40 = addrspacecast ptr addrspace(1) %36 to ptr, !dbg !16
  %41 = getelementptr i8, ptr addrspace(1) %36, i64 128, !dbg !17
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> zeroinitializer, i1 %37) #4, !dbg !17
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) @global_smem, ptr addrspace(1) %26, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 16, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 64, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 %2, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) @global_smem, i64 4096, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) @global_smem, i32 1, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) @global_smem, i1 %39) #4, !dbg !17
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %41, ptr addrspace(3) @global_smem, i1 %37) #4, !dbg !17
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %41, i1 %37) #4, !dbg !17
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !17
  %42 = shl i32 %5, 6, !dbg !18
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  %43 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !19
  %44 = extractvalue { i32, i1 } %43, 1, !dbg !19
  %45 = and i1 %37, %44, !dbg !19
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %45, ptr addrspace(3) @global_smem, ptr %40, i32 0, i32 %42, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !19
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !19
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !19
  %46 = shl nuw nsw i32 %7, 2, !dbg !19
  %47 = and i32 %46, 28, !dbg !19
  %48 = select i1 %11, i32 0, i32 36, !dbg !19
  %49 = xor i32 %48, %47, !dbg !19
  %50 = select i1 %13, i32 0, i32 72, !dbg !19
  %51 = xor i32 %49, %50, !dbg !19
  %52 = or disjoint i32 %51, %14, !dbg !19
  %53 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %52, !dbg !19
  %54 = ptrtoint ptr addrspace(3) %53 to i32, !dbg !19
  %55 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %54) #4, !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = or disjoint i32 %42, 16, !dbg !20
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  %58 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !21
  %59 = extractvalue { i32, i1 } %58, 1, !dbg !21
  %60 = and i1 %37, %59, !dbg !21
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %60, ptr addrspace(3) @global_smem, ptr %40, i32 16, i32 %57, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !21
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !21
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !21
  %61 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %54) #4, !dbg !21
  %62 = bitcast i32 %61 to float, !dbg !21
  %63 = or disjoint i32 %42, 32, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %64 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !23
  %65 = extractvalue { i32, i1 } %64, 1, !dbg !23
  %66 = and i1 %37, %65, !dbg !23
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %66, ptr addrspace(3) @global_smem, ptr %40, i32 32, i32 %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !23
  %67 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %54) #4, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = or disjoint i32 %42, 48, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %70 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !25
  %71 = extractvalue { i32, i1 } %70, 1, !dbg !25
  %72 = and i1 %37, %71, !dbg !25
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %72, ptr addrspace(3) @global_smem, ptr %40, i32 48, i32 %69, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 0) #4, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024)) #4, !dbg !25
  %73 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %54) #4, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fsub float 0.000000e+00, %56, !dbg !26
  %76 = select i1 %18, float %75, float 0.000000e+00, !dbg !27
  %77 = fsub float 0.000000e+00, %62, !dbg !28
  %78 = select i1 %18, float %77, float 0.000000e+00, !dbg !29
  %79 = fsub float 0.000000e+00, %68, !dbg !30
  %80 = select i1 %18, float %79, float 0.000000e+00, !dbg !31
  %81 = fsub float 0.000000e+00, %74, !dbg !32
  %82 = select i1 %18, float %81, float 0.000000e+00, !dbg !33
  %83 = sub i32 %2, %42, !dbg !34
  %84 = icmp sgt i32 %83, 2, !dbg !35
  br i1 %84, label %.lr.ph, label %._crit_edge27, !dbg !35

.lr.ph:                                           ; preds = %4
  %85 = zext nneg i32 %16 to i64
  %86 = zext nneg i32 %17 to i64
  %87 = and i32 %9, 7
  %88 = icmp samesign ult i32 %8, 16
  %.idx12 = shl nuw nsw i32 %17, 5
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx12
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87
  %91 = icmp samesign ult i32 %7, 128
  %92 = and i32 %7, 903
  %93 = icmp eq i32 %92, 0
  %94 = tail call i32 @llvm.umin.i32(i32 %83, i32 16), !dbg !35
  %wide.trip.count = zext nneg i32 %94 to i64, !dbg !35
  br label %95, !dbg !35

95:                                               ; preds = %.lr.ph, %95
  %indvars.iv = phi i64 [ 2, %.lr.ph ], [ %indvars.iv.next, %95 ]
  %.pn613 = phi float [ %76, %.lr.ph ], [ %132, %95 ]
  %96 = trunc i64 %indvars.iv to i32, !dbg !36
  %97 = add i32 %42, %96, !dbg !36
  %98 = shl i32 %97, 11, !dbg !36
  %99 = sext i32 %98 to i64, !dbg !37
  %100 = getelementptr float, ptr addrspace(1) %25, i64 %99, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %85, !dbg !38
  %102 = getelementptr float, ptr addrspace(1) %100, i64 %86, !dbg !38
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %101) #4, !dbg !39
  %104 = bitcast i32 %103 to float, !dbg !39
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %102) #4, !dbg !39
  %106 = bitcast i32 %105 to float, !dbg !39
  %107 = fsub float 0.000000e+00, %104, !dbg !40
  %108 = fsub float 0.000000e+00, %106, !dbg !40
  %109 = fmul float %.pn613, %107, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %110 = bitcast float %109 to i32, !dbg !42
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = fadd float %109, %112, !dbg !46
  %114 = bitcast float %113 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %114, i1 %88) #4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %38, i1 %91) #4, !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !42
  %118 = bitcast i32 %117 to float, !dbg !42
  %119 = fadd float %116, %118, !dbg !46
  %120 = bitcast float %119 to i32, !dbg !42
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !42
  %122 = bitcast i32 %121 to float, !dbg !42
  %123 = fadd float %119, %122, !dbg !46
  %124 = bitcast float %123 to i32, !dbg !42
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !42
  %126 = bitcast i32 %125 to float, !dbg !42
  %127 = fadd float %123, %126, !dbg !46
  %128 = bitcast float %127 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %128, i1 %93) #4, !dbg !42
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !42
  %129 = load float, ptr addrspace(3) %89, align 16, !dbg !42
  %130 = fadd float %108, %129, !dbg !47
  %131 = icmp eq i64 %indvars.iv, %85, !dbg !48
  %132 = select i1 %131, float %130, float %.pn613, !dbg !49
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !35
  br i1 %exitcond.not, label %._crit_edge, label %95, !dbg !35

._crit_edge:                                      ; preds = %95
  %133 = icmp samesign ugt i32 %83, 18, !dbg !50
  br i1 %133, label %.lr.ph16, label %._crit_edge27, !dbg !50

.lr.ph16:                                         ; preds = %._crit_edge
  %134 = zext nneg i32 %16 to i64
  %135 = zext nneg i32 %17 to i64
  %136 = and i32 %9, 7
  %137 = icmp samesign ult i32 %8, 16
  %.idx11 = shl nuw nsw i32 %17, 5
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136
  %140 = icmp samesign ult i32 %7, 128
  %141 = and i32 %7, 903
  %142 = icmp eq i32 %141, 0
  %143 = tail call i32 @llvm.umin.i32(i32 %83, i32 32), !dbg !50
  %wide.trip.count35 = zext nneg i32 %143 to i64, !dbg !50
  br label %144, !dbg !50

144:                                              ; preds = %.lr.ph16, %144
  %indvars.iv32 = phi i64 [ 18, %.lr.ph16 ], [ %indvars.iv.next33, %144 ]
  %.pn714 = phi float [ %78, %.lr.ph16 ], [ %184, %144 ]
  %145 = trunc i64 %indvars.iv32 to i32, !dbg !51
  %146 = add i32 %42, %145, !dbg !51
  %147 = shl i32 %146, 11, !dbg !51
  %148 = sext i32 %147 to i64, !dbg !52
  %149 = getelementptr float, ptr addrspace(1) %25, i64 %148, !dbg !52
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %134, !dbg !53
  %151 = getelementptr float, ptr addrspace(1) %149, i64 %135, !dbg !53
  %152 = getelementptr i8, ptr addrspace(1) %150, i64 64, !dbg !54
  %153 = getelementptr i8, ptr addrspace(1) %151, i64 64, !dbg !54
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %152) #4, !dbg !55
  %155 = bitcast i32 %154 to float, !dbg !55
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %153) #4, !dbg !55
  %157 = bitcast i32 %156 to float, !dbg !55
  %158 = fsub float 0.000000e+00, %155, !dbg !56
  %159 = fsub float 0.000000e+00, %157, !dbg !56
  %160 = fmul float %.pn714, %158, !dbg !57
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %161 = bitcast float %160 to i32, !dbg !58
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 16, i32 31), !dbg !58
  %163 = bitcast i32 %162 to float, !dbg !58
  %164 = fadd float %160, %163, !dbg !60
  %165 = bitcast float %164 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %165, i1 %137) #4, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %166 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %38, i1 %140) #4, !dbg !58
  %167 = bitcast i32 %166 to float, !dbg !58
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !58
  %169 = bitcast i32 %168 to float, !dbg !58
  %170 = fadd float %167, %169, !dbg !60
  %171 = bitcast float %170 to i32, !dbg !58
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !58
  %173 = bitcast i32 %172 to float, !dbg !58
  %174 = fadd float %170, %173, !dbg !60
  %175 = bitcast float %174 to i32, !dbg !58
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !58
  %177 = bitcast i32 %176 to float, !dbg !58
  %178 = fadd float %174, %177, !dbg !60
  %179 = bitcast float %178 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %179, i1 %142) #4, !dbg !58
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !58
  %180 = load float, ptr addrspace(3) %138, align 16, !dbg !58
  %181 = fadd float %159, %180, !dbg !61
  %182 = add nsw i64 %indvars.iv32, -16, !dbg !62
  %183 = icmp eq i64 %182, %134, !dbg !63
  %184 = select i1 %183, float %181, float %.pn714, !dbg !64
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1, !dbg !50
  %exitcond36.not = icmp eq i64 %indvars.iv.next33, %wide.trip.count35, !dbg !50
  br i1 %exitcond36.not, label %._crit_edge17, label %144, !dbg !50

._crit_edge17:                                    ; preds = %144
  %185 = icmp samesign ugt i32 %83, 34, !dbg !65
  br i1 %185, label %.lr.ph21, label %._crit_edge27, !dbg !65

.lr.ph21:                                         ; preds = %._crit_edge17
  %186 = zext nneg i32 %16 to i64
  %187 = zext nneg i32 %17 to i64
  %188 = and i32 %9, 7
  %189 = icmp samesign ult i32 %8, 16
  %.idx10 = shl nuw nsw i32 %17, 5
  %190 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188
  %192 = icmp samesign ult i32 %7, 128
  %193 = and i32 %7, 903
  %194 = icmp eq i32 %193, 0
  %195 = tail call i32 @llvm.umin.i32(i32 %83, i32 48), !dbg !65
  %wide.trip.count40 = zext nneg i32 %195 to i64, !dbg !65
  br label %196, !dbg !65

196:                                              ; preds = %.lr.ph21, %196
  %indvars.iv37 = phi i64 [ 34, %.lr.ph21 ], [ %indvars.iv.next38, %196 ]
  %.pn819 = phi float [ %80, %.lr.ph21 ], [ %236, %196 ]
  %197 = trunc i64 %indvars.iv37 to i32, !dbg !66
  %198 = add i32 %42, %197, !dbg !66
  %199 = shl i32 %198, 11, !dbg !66
  %200 = sext i32 %199 to i64, !dbg !67
  %201 = getelementptr float, ptr addrspace(1) %25, i64 %200, !dbg !67
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %186, !dbg !68
  %203 = getelementptr float, ptr addrspace(1) %201, i64 %187, !dbg !68
  %204 = getelementptr i8, ptr addrspace(1) %202, i64 128, !dbg !69
  %205 = getelementptr i8, ptr addrspace(1) %203, i64 128, !dbg !69
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %204) #4, !dbg !70
  %207 = bitcast i32 %206 to float, !dbg !70
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %205) #4, !dbg !70
  %209 = bitcast i32 %208 to float, !dbg !70
  %210 = fsub float 0.000000e+00, %207, !dbg !71
  %211 = fsub float 0.000000e+00, %209, !dbg !71
  %212 = fmul float %.pn819, %210, !dbg !72
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %213 = bitcast float %212 to i32, !dbg !73
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 16, i32 31), !dbg !73
  %215 = bitcast i32 %214 to float, !dbg !73
  %216 = fadd float %212, %215, !dbg !75
  %217 = bitcast float %216 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %217, i1 %189) #4, !dbg !73
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %218 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %38, i1 %192) #4, !dbg !73
  %219 = bitcast i32 %218 to float, !dbg !73
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !73
  %221 = bitcast i32 %220 to float, !dbg !73
  %222 = fadd float %219, %221, !dbg !75
  %223 = bitcast float %222 to i32, !dbg !73
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 2, i32 31), !dbg !73
  %225 = bitcast i32 %224 to float, !dbg !73
  %226 = fadd float %222, %225, !dbg !75
  %227 = bitcast float %226 to i32, !dbg !73
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !73
  %229 = bitcast i32 %228 to float, !dbg !73
  %230 = fadd float %226, %229, !dbg !75
  %231 = bitcast float %230 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %231, i1 %194) #4, !dbg !73
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !73
  %232 = load float, ptr addrspace(3) %190, align 16, !dbg !73
  %233 = fadd float %211, %232, !dbg !76
  %234 = add nsw i64 %indvars.iv37, -32, !dbg !77
  %235 = icmp eq i64 %234, %186, !dbg !78
  %236 = select i1 %235, float %233, float %.pn819, !dbg !79
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1, !dbg !65
  %exitcond41.not = icmp eq i64 %indvars.iv.next38, %wide.trip.count40, !dbg !65
  br i1 %exitcond41.not, label %._crit_edge22, label %196, !dbg !65

._crit_edge22:                                    ; preds = %196
  %237 = icmp samesign ugt i32 %83, 50, !dbg !80
  br i1 %237, label %.lr.ph26, label %._crit_edge27, !dbg !80

.lr.ph26:                                         ; preds = %._crit_edge22
  %238 = zext nneg i32 %16 to i64
  %239 = zext nneg i32 %17 to i64
  %240 = and i32 %9, 7
  %241 = icmp samesign ult i32 %8, 16
  %.idx = shl nuw nsw i32 %17, 5
  %242 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240
  %244 = icmp samesign ult i32 %7, 128
  %245 = and i32 %7, 903
  %246 = icmp eq i32 %245, 0
  %247 = tail call i32 @llvm.umin.i32(i32 %83, i32 64), !dbg !80
  %wide.trip.count45 = zext nneg i32 %247 to i64, !dbg !80
  br label %248, !dbg !80

248:                                              ; preds = %.lr.ph26, %248
  %indvars.iv42 = phi i64 [ 50, %.lr.ph26 ], [ %indvars.iv.next43, %248 ]
  %.pn924 = phi float [ %82, %.lr.ph26 ], [ %288, %248 ]
  %249 = trunc i64 %indvars.iv42 to i32, !dbg !81
  %250 = add i32 %42, %249, !dbg !81
  %251 = shl i32 %250, 11, !dbg !81
  %252 = sext i32 %251 to i64, !dbg !82
  %253 = getelementptr float, ptr addrspace(1) %25, i64 %252, !dbg !82
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %238, !dbg !83
  %255 = getelementptr float, ptr addrspace(1) %253, i64 %239, !dbg !83
  %256 = getelementptr i8, ptr addrspace(1) %254, i64 192, !dbg !84
  %257 = getelementptr i8, ptr addrspace(1) %255, i64 192, !dbg !84
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %256) #4, !dbg !85
  %259 = bitcast i32 %258 to float, !dbg !85
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %257) #4, !dbg !85
  %261 = bitcast i32 %260 to float, !dbg !85
  %262 = fsub float 0.000000e+00, %259, !dbg !86
  %263 = fsub float 0.000000e+00, %261, !dbg !86
  %264 = fmul float %.pn924, %262, !dbg !87
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %265 = bitcast float %264 to i32, !dbg !88
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 16, i32 31), !dbg !88
  %267 = bitcast i32 %266 to float, !dbg !88
  %268 = fadd float %264, %267, !dbg !90
  %269 = bitcast float %268 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %269, i1 %241) #4, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %270 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %38, i1 %244) #4, !dbg !88
  %271 = bitcast i32 %270 to float, !dbg !88
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !88
  %273 = bitcast i32 %272 to float, !dbg !88
  %274 = fadd float %271, %273, !dbg !90
  %275 = bitcast float %274 to i32, !dbg !88
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !88
  %277 = bitcast i32 %276 to float, !dbg !88
  %278 = fadd float %274, %277, !dbg !90
  %279 = bitcast float %278 to i32, !dbg !88
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !88
  %281 = bitcast i32 %280 to float, !dbg !88
  %282 = fadd float %278, %281, !dbg !90
  %283 = bitcast float %282 to <1 x i32>, !dbg !88
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %283, i1 %246) #4, !dbg !88
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !88
  %284 = load float, ptr addrspace(3) %242, align 16, !dbg !88
  %285 = fadd float %263, %284, !dbg !91
  %286 = add nsw i64 %indvars.iv42, -48, !dbg !92
  %287 = icmp eq i64 %286, %238, !dbg !93
  %288 = select i1 %287, float %285, float %.pn924, !dbg !94
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1, !dbg !80
  %exitcond46.not = icmp eq i64 %indvars.iv.next43, %wide.trip.count45, !dbg !80
  br i1 %exitcond46.not, label %._crit_edge27, label %248, !dbg !80

._crit_edge27:                                    ; preds = %248, %4, %._crit_edge, %._crit_edge17, %._crit_edge22
  %.pn8.lcssa58 = phi float [ %236, %._crit_edge22 ], [ %80, %._crit_edge17 ], [ %80, %._crit_edge ], [ %80, %4 ], [ %236, %248 ]
  %.pn6.lcssa485157 = phi float [ %132, %._crit_edge22 ], [ %132, %._crit_edge17 ], [ %132, %._crit_edge ], [ %76, %4 ], [ %132, %248 ]
  %.pn7.lcssa5256 = phi float [ %184, %._crit_edge22 ], [ %184, %._crit_edge17 ], [ %78, %._crit_edge ], [ %78, %4 ], [ %184, %248 ]
  %.pn9.lcssa = phi float [ %82, %._crit_edge22 ], [ %82, %._crit_edge17 ], [ %82, %._crit_edge ], [ %82, %4 ], [ %288, %248 ]
  %289 = and i32 %46, 12, !dbg !19
  %290 = addrspacecast ptr addrspace(1) %41 to ptr, !dbg !17
  %291 = icmp eq i32 %16, %17, !dbg !95
  %292 = uitofp i1 %291 to float, !dbg !96
  %293 = fadd float %.pn6.lcssa485157, %292, !dbg !96
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !96
  %294 = and i32 %7, 224, !dbg !96
  %295 = or disjoint i32 %294, %47, !dbg !96
  %296 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %295, !dbg !96
  %297 = bitcast float %293 to i32, !dbg !96
  %298 = ptrtoint ptr addrspace(3) %296 to i32, !dbg !96
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %298, i32 %297) #4, !dbg !96
  %299 = fadd float %.pn7.lcssa5256, %292, !dbg !97
  %300 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %295, !dbg !97
  %301 = bitcast float %299 to i32, !dbg !97
  %302 = ptrtoint ptr addrspace(3) %300 to i32, !dbg !97
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %302, i32 %301) #4, !dbg !97
  %303 = fadd float %.pn8.lcssa58, %292, !dbg !98
  %304 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %295, !dbg !98
  %305 = bitcast float %303 to i32, !dbg !98
  %306 = ptrtoint ptr addrspace(3) %304 to i32, !dbg !98
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %306, i32 %305) #4, !dbg !98
  %307 = fadd float %.pn9.lcssa, %292, !dbg !99
  %308 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5136), i32 %295, !dbg !99
  %309 = bitcast float %307 to i32, !dbg !99
  %310 = ptrtoint ptr addrspace(3) %308 to i32, !dbg !99
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %310, i32 %309) #4, !dbg !99
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %311 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !100
  %312 = extractvalue { i32, i1 } %311, 1, !dbg !100
  %313 = and i1 %37, %312, !dbg !100
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %313, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), ptr %40, i32 0, i32 %57, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 0) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048)) #4, !dbg !100
  %314 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %52, !dbg !100
  %315 = ptrtoint ptr addrspace(3) %314 to i32, !dbg !100
  %316 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %315) #4, !dbg !100
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !100
  %317 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %295, !dbg !100
  %318 = ptrtoint ptr addrspace(3) %317 to i32, !dbg !100
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %318, i32 %316) #4, !dbg !100
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  %319 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !101
  %320 = extractvalue { i32, i1 } %319, 1, !dbg !101
  %321 = and i1 %37, %320, !dbg !101
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %321, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %40, i32 0, i32 %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !101
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !101
  %322 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %52, !dbg !101
  %323 = ptrtoint ptr addrspace(3) %322 to i32, !dbg !101
  %324 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %323) #4, !dbg !101
  %325 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6160), i32 %295, !dbg !101
  %326 = ptrtoint ptr addrspace(3) %325 to i32, !dbg !101
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %326, i32 %324) #4, !dbg !101
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  %327 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !102
  %328 = extractvalue { i32, i1 } %327, 1, !dbg !102
  %329 = and i1 %37, %328, !dbg !102
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %329, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %40, i32 16, i32 %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !102
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !102
  %330 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %323) #4, !dbg !102
  %331 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %295, !dbg !102
  %332 = ptrtoint ptr addrspace(3) %331 to i32, !dbg !102
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %332, i32 %330) #4, !dbg !102
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  %333 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !103
  %334 = extractvalue { i32, i1 } %333, 1, !dbg !103
  %335 = and i1 %37, %334, !dbg !103
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %335, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %40, i32 0, i32 %69, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !103
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !103
  %336 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %323) #4, !dbg !103
  %337 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8208), i32 %295, !dbg !103
  %338 = ptrtoint ptr addrspace(3) %337 to i32, !dbg !103
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %338, i32 %336) #4, !dbg !103
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  %339 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !104
  %340 = extractvalue { i32, i1 } %339, 1, !dbg !104
  %341 = and i1 %37, %340, !dbg !104
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %341, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %40, i32 16, i32 %69, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !104
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !104
  %342 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %323) #4, !dbg !104
  %343 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9232), i32 %295, !dbg !104
  %344 = ptrtoint ptr addrspace(3) %343 to i32, !dbg !104
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %344, i32 %342) #4, !dbg !104
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 1024;", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  %345 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !105
  %346 = extractvalue { i32, i1 } %345, 1, !dbg !105
  %347 = and i1 %37, %346, !dbg !105
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %347, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), ptr %40, i32 32, i32 %69, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 0) #4, !dbg !105
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !105
  tail call void asm sideeffect "@$0 mbarrier.inval.shared::cta.b64 [$1];", "b,r"(i1 %39, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072)) #4, !dbg !105
  %348 = tail call i32 asm sideeffect "ldmatrix.sync.aligned.m8n8.x1.shared.b16 {$0}, [$1];", "=r,r"(i32 %323) #4, !dbg !105
  %349 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %295, !dbg !105
  %350 = ptrtoint ptr addrspace(3) %349 to i32, !dbg !105
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %350, i32 %348) #4, !dbg !105
  %351 = shl nuw nsw i32 %16, 4, !dbg !97
  %352 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %351, !dbg !97
  %353 = load float, ptr addrspace(3) %352, align 64, !dbg !97
  %354 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 4, !dbg !97
  %355 = load float, ptr addrspace(3) %354, align 4, !dbg !97
  %356 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 8, !dbg !97
  %357 = load float, ptr addrspace(3) %356, align 8, !dbg !97
  %358 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 12, !dbg !97
  %359 = load float, ptr addrspace(3) %358, align 4, !dbg !97
  %360 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 16, !dbg !97
  %361 = load float, ptr addrspace(3) %360, align 16, !dbg !97
  %362 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 20, !dbg !97
  %363 = load float, ptr addrspace(3) %362, align 4, !dbg !97
  %364 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 24, !dbg !97
  %365 = load float, ptr addrspace(3) %364, align 8, !dbg !97
  %366 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 28, !dbg !97
  %367 = load float, ptr addrspace(3) %366, align 4, !dbg !97
  %368 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 32, !dbg !97
  %369 = load float, ptr addrspace(3) %368, align 32, !dbg !97
  %370 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 36, !dbg !97
  %371 = load float, ptr addrspace(3) %370, align 4, !dbg !97
  %372 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 40, !dbg !97
  %373 = load float, ptr addrspace(3) %372, align 8, !dbg !97
  %374 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 44, !dbg !97
  %375 = load float, ptr addrspace(3) %374, align 4, !dbg !97
  %376 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 48, !dbg !97
  %377 = load float, ptr addrspace(3) %376, align 16, !dbg !97
  %378 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 52, !dbg !97
  %379 = load float, ptr addrspace(3) %378, align 4, !dbg !97
  %380 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 56, !dbg !97
  %381 = load float, ptr addrspace(3) %380, align 8, !dbg !97
  %382 = getelementptr inbounds nuw i8, ptr addrspace(3) %352, i32 60, !dbg !97
  %383 = load float, ptr addrspace(3) %382, align 4, !dbg !97
  %384 = shl nuw nsw i32 %7, 1, !dbg !100
  %385 = and i32 %384, 48, !dbg !100
  %386 = or disjoint i32 %385, %289, !dbg !100
  %387 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %386, !dbg !100
  %388 = ptrtoint ptr addrspace(3) %387 to i32, !dbg !100
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #4, !dbg !100
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !100
  %391 = bitcast i32 %390 to float, !dbg !100
  %392 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !100
  %393 = bitcast i32 %392 to float, !dbg !100
  %394 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !100
  %395 = bitcast i32 %394 to float, !dbg !100
  %396 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !100
  %397 = bitcast i32 %396 to float, !dbg !100
  %398 = or disjoint i32 %386, 64, !dbg !100
  %399 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %398, !dbg !100
  %400 = ptrtoint ptr addrspace(3) %399 to i32, !dbg !100
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %400) #4, !dbg !100
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !100
  %403 = bitcast i32 %402 to float, !dbg !100
  %404 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !100
  %405 = bitcast i32 %404 to float, !dbg !100
  %406 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !100
  %407 = bitcast i32 %406 to float, !dbg !100
  %408 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !100
  %409 = bitcast i32 %408 to float, !dbg !100
  %410 = or disjoint i32 %386, 128, !dbg !100
  %411 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %410, !dbg !100
  %412 = ptrtoint ptr addrspace(3) %411 to i32, !dbg !100
  %413 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %412) #4, !dbg !100
  %414 = extractvalue { i32, i32, i32, i32 } %413, 0, !dbg !100
  %415 = bitcast i32 %414 to float, !dbg !100
  %416 = extractvalue { i32, i32, i32, i32 } %413, 1, !dbg !100
  %417 = bitcast i32 %416 to float, !dbg !100
  %418 = extractvalue { i32, i32, i32, i32 } %413, 2, !dbg !100
  %419 = bitcast i32 %418 to float, !dbg !100
  %420 = extractvalue { i32, i32, i32, i32 } %413, 3, !dbg !100
  %421 = bitcast i32 %420 to float, !dbg !100
  %422 = or disjoint i32 %386, 192, !dbg !100
  %423 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %422, !dbg !100
  %424 = ptrtoint ptr addrspace(3) %423 to i32, !dbg !100
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #4, !dbg !100
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !100
  %427 = bitcast i32 %426 to float, !dbg !100
  %428 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !100
  %429 = bitcast i32 %428 to float, !dbg !100
  %430 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !100
  %431 = bitcast i32 %430 to float, !dbg !100
  %432 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !100
  %433 = bitcast i32 %432 to float, !dbg !100
  %434 = tail call float @llvm.fmuladd.f32(float %353, float %391, float 0.000000e+00), !dbg !106
  %435 = tail call float @llvm.fmuladd.f32(float %355, float %393, float %434), !dbg !106
  %436 = tail call float @llvm.fmuladd.f32(float %357, float %395, float %435), !dbg !106
  %437 = tail call float @llvm.fmuladd.f32(float %359, float %397, float %436), !dbg !106
  %438 = tail call float @llvm.fmuladd.f32(float %361, float %403, float %437), !dbg !106
  %439 = tail call float @llvm.fmuladd.f32(float %363, float %405, float %438), !dbg !106
  %440 = tail call float @llvm.fmuladd.f32(float %365, float %407, float %439), !dbg !106
  %441 = tail call float @llvm.fmuladd.f32(float %367, float %409, float %440), !dbg !106
  %442 = tail call float @llvm.fmuladd.f32(float %369, float %415, float %441), !dbg !106
  %443 = tail call float @llvm.fmuladd.f32(float %371, float %417, float %442), !dbg !106
  %444 = tail call float @llvm.fmuladd.f32(float %373, float %419, float %443), !dbg !106
  %445 = tail call float @llvm.fmuladd.f32(float %375, float %421, float %444), !dbg !106
  %446 = tail call float @llvm.fmuladd.f32(float %377, float %427, float %445), !dbg !106
  %447 = tail call float @llvm.fmuladd.f32(float %379, float %429, float %446), !dbg !106
  %448 = tail call float @llvm.fmuladd.f32(float %381, float %431, float %447), !dbg !106
  %449 = tail call float @llvm.fmuladd.f32(float %383, float %433, float %448), !dbg !106
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !106
  %450 = bitcast float %449 to i32, !dbg !106
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %318, i32 %450) #4, !dbg !106
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !106
  %451 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %351, !dbg !106
  %452 = load float, ptr addrspace(3) %451, align 64, !dbg !106
  %453 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 4, !dbg !106
  %454 = load float, ptr addrspace(3) %453, align 4, !dbg !106
  %455 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 8, !dbg !106
  %456 = load float, ptr addrspace(3) %455, align 8, !dbg !106
  %457 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 12, !dbg !106
  %458 = load float, ptr addrspace(3) %457, align 4, !dbg !106
  %459 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 16, !dbg !106
  %460 = load float, ptr addrspace(3) %459, align 16, !dbg !106
  %461 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 20, !dbg !106
  %462 = load float, ptr addrspace(3) %461, align 4, !dbg !106
  %463 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 24, !dbg !106
  %464 = load float, ptr addrspace(3) %463, align 8, !dbg !106
  %465 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 28, !dbg !106
  %466 = load float, ptr addrspace(3) %465, align 4, !dbg !106
  %467 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 32, !dbg !106
  %468 = load float, ptr addrspace(3) %467, align 32, !dbg !106
  %469 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 36, !dbg !106
  %470 = load float, ptr addrspace(3) %469, align 4, !dbg !106
  %471 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 40, !dbg !106
  %472 = load float, ptr addrspace(3) %471, align 8, !dbg !106
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 44, !dbg !106
  %474 = load float, ptr addrspace(3) %473, align 4, !dbg !106
  %475 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 48, !dbg !106
  %476 = load float, ptr addrspace(3) %475, align 16, !dbg !106
  %477 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 52, !dbg !106
  %478 = load float, ptr addrspace(3) %477, align 4, !dbg !106
  %479 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 56, !dbg !106
  %480 = load float, ptr addrspace(3) %479, align 8, !dbg !106
  %481 = getelementptr inbounds nuw i8, ptr addrspace(3) %451, i32 60, !dbg !106
  %482 = load float, ptr addrspace(3) %481, align 4, !dbg !106
  %483 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %386, !dbg !96
  %484 = ptrtoint ptr addrspace(3) %483 to i32, !dbg !96
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #4, !dbg !96
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !96
  %487 = bitcast i32 %486 to float, !dbg !96
  %488 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !96
  %489 = bitcast i32 %488 to float, !dbg !96
  %490 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !96
  %491 = bitcast i32 %490 to float, !dbg !96
  %492 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !96
  %493 = bitcast i32 %492 to float, !dbg !96
  %494 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %398, !dbg !96
  %495 = ptrtoint ptr addrspace(3) %494 to i32, !dbg !96
  %496 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #4, !dbg !96
  %497 = extractvalue { i32, i32, i32, i32 } %496, 0, !dbg !96
  %498 = bitcast i32 %497 to float, !dbg !96
  %499 = extractvalue { i32, i32, i32, i32 } %496, 1, !dbg !96
  %500 = bitcast i32 %499 to float, !dbg !96
  %501 = extractvalue { i32, i32, i32, i32 } %496, 2, !dbg !96
  %502 = bitcast i32 %501 to float, !dbg !96
  %503 = extractvalue { i32, i32, i32, i32 } %496, 3, !dbg !96
  %504 = bitcast i32 %503 to float, !dbg !96
  %505 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %410, !dbg !96
  %506 = ptrtoint ptr addrspace(3) %505 to i32, !dbg !96
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %506) #4, !dbg !96
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !96
  %509 = bitcast i32 %508 to float, !dbg !96
  %510 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !96
  %511 = bitcast i32 %510 to float, !dbg !96
  %512 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !96
  %513 = bitcast i32 %512 to float, !dbg !96
  %514 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !96
  %515 = bitcast i32 %514 to float, !dbg !96
  %516 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %422, !dbg !96
  %517 = ptrtoint ptr addrspace(3) %516 to i32, !dbg !96
  %518 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #4, !dbg !96
  %519 = extractvalue { i32, i32, i32, i32 } %518, 0, !dbg !96
  %520 = bitcast i32 %519 to float, !dbg !96
  %521 = extractvalue { i32, i32, i32, i32 } %518, 1, !dbg !96
  %522 = bitcast i32 %521 to float, !dbg !96
  %523 = extractvalue { i32, i32, i32, i32 } %518, 2, !dbg !96
  %524 = bitcast i32 %523 to float, !dbg !96
  %525 = extractvalue { i32, i32, i32, i32 } %518, 3, !dbg !96
  %526 = bitcast i32 %525 to float, !dbg !96
  %527 = tail call float @llvm.fmuladd.f32(float %452, float %487, float 0.000000e+00), !dbg !107
  %528 = tail call float @llvm.fmuladd.f32(float %454, float %489, float %527), !dbg !107
  %529 = tail call float @llvm.fmuladd.f32(float %456, float %491, float %528), !dbg !107
  %530 = tail call float @llvm.fmuladd.f32(float %458, float %493, float %529), !dbg !107
  %531 = tail call float @llvm.fmuladd.f32(float %460, float %498, float %530), !dbg !107
  %532 = tail call float @llvm.fmuladd.f32(float %462, float %500, float %531), !dbg !107
  %533 = tail call float @llvm.fmuladd.f32(float %464, float %502, float %532), !dbg !107
  %534 = tail call float @llvm.fmuladd.f32(float %466, float %504, float %533), !dbg !107
  %535 = tail call float @llvm.fmuladd.f32(float %468, float %509, float %534), !dbg !107
  %536 = tail call float @llvm.fmuladd.f32(float %470, float %511, float %535), !dbg !107
  %537 = tail call float @llvm.fmuladd.f32(float %472, float %513, float %536), !dbg !107
  %538 = tail call float @llvm.fmuladd.f32(float %474, float %515, float %537), !dbg !107
  %539 = tail call float @llvm.fmuladd.f32(float %476, float %520, float %538), !dbg !107
  %540 = tail call float @llvm.fmuladd.f32(float %478, float %522, float %539), !dbg !107
  %541 = tail call float @llvm.fmuladd.f32(float %480, float %524, float %540), !dbg !107
  %542 = tail call float @llvm.fmuladd.f32(float %482, float %526, float %541), !dbg !107
  %543 = fsub float 0.000000e+00, %542, !dbg !108
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !108
  %544 = bitcast float %543 to i32, !dbg !108
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %298, i32 %544) #4, !dbg !108
  %545 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %351, !dbg !98
  %546 = load float, ptr addrspace(3) %545, align 64, !dbg !98
  %547 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 4, !dbg !98
  %548 = load float, ptr addrspace(3) %547, align 4, !dbg !98
  %549 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 8, !dbg !98
  %550 = load float, ptr addrspace(3) %549, align 8, !dbg !98
  %551 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 12, !dbg !98
  %552 = load float, ptr addrspace(3) %551, align 4, !dbg !98
  %553 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 16, !dbg !98
  %554 = load float, ptr addrspace(3) %553, align 16, !dbg !98
  %555 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 20, !dbg !98
  %556 = load float, ptr addrspace(3) %555, align 4, !dbg !98
  %557 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 24, !dbg !98
  %558 = load float, ptr addrspace(3) %557, align 8, !dbg !98
  %559 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 28, !dbg !98
  %560 = load float, ptr addrspace(3) %559, align 4, !dbg !98
  %561 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 32, !dbg !98
  %562 = load float, ptr addrspace(3) %561, align 32, !dbg !98
  %563 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 36, !dbg !98
  %564 = load float, ptr addrspace(3) %563, align 4, !dbg !98
  %565 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 40, !dbg !98
  %566 = load float, ptr addrspace(3) %565, align 8, !dbg !98
  %567 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 44, !dbg !98
  %568 = load float, ptr addrspace(3) %567, align 4, !dbg !98
  %569 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 48, !dbg !98
  %570 = load float, ptr addrspace(3) %569, align 16, !dbg !98
  %571 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 52, !dbg !98
  %572 = load float, ptr addrspace(3) %571, align 4, !dbg !98
  %573 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 56, !dbg !98
  %574 = load float, ptr addrspace(3) %573, align 8, !dbg !98
  %575 = getelementptr inbounds nuw i8, ptr addrspace(3) %545, i32 60, !dbg !98
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !98
  %577 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %386, !dbg !102
  %578 = ptrtoint ptr addrspace(3) %577 to i32, !dbg !102
  %579 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %578) #4, !dbg !102
  %580 = extractvalue { i32, i32, i32, i32 } %579, 0, !dbg !102
  %581 = bitcast i32 %580 to float, !dbg !102
  %582 = extractvalue { i32, i32, i32, i32 } %579, 1, !dbg !102
  %583 = bitcast i32 %582 to float, !dbg !102
  %584 = extractvalue { i32, i32, i32, i32 } %579, 2, !dbg !102
  %585 = bitcast i32 %584 to float, !dbg !102
  %586 = extractvalue { i32, i32, i32, i32 } %579, 3, !dbg !102
  %587 = bitcast i32 %586 to float, !dbg !102
  %588 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %398, !dbg !102
  %589 = ptrtoint ptr addrspace(3) %588 to i32, !dbg !102
  %590 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %589) #4, !dbg !102
  %591 = extractvalue { i32, i32, i32, i32 } %590, 0, !dbg !102
  %592 = bitcast i32 %591 to float, !dbg !102
  %593 = extractvalue { i32, i32, i32, i32 } %590, 1, !dbg !102
  %594 = bitcast i32 %593 to float, !dbg !102
  %595 = extractvalue { i32, i32, i32, i32 } %590, 2, !dbg !102
  %596 = bitcast i32 %595 to float, !dbg !102
  %597 = extractvalue { i32, i32, i32, i32 } %590, 3, !dbg !102
  %598 = bitcast i32 %597 to float, !dbg !102
  %599 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %410, !dbg !102
  %600 = ptrtoint ptr addrspace(3) %599 to i32, !dbg !102
  %601 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %600) #4, !dbg !102
  %602 = extractvalue { i32, i32, i32, i32 } %601, 0, !dbg !102
  %603 = bitcast i32 %602 to float, !dbg !102
  %604 = extractvalue { i32, i32, i32, i32 } %601, 1, !dbg !102
  %605 = bitcast i32 %604 to float, !dbg !102
  %606 = extractvalue { i32, i32, i32, i32 } %601, 2, !dbg !102
  %607 = bitcast i32 %606 to float, !dbg !102
  %608 = extractvalue { i32, i32, i32, i32 } %601, 3, !dbg !102
  %609 = bitcast i32 %608 to float, !dbg !102
  %610 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %422, !dbg !102
  %611 = ptrtoint ptr addrspace(3) %610 to i32, !dbg !102
  %612 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %611) #4, !dbg !102
  %613 = extractvalue { i32, i32, i32, i32 } %612, 0, !dbg !102
  %614 = bitcast i32 %613 to float, !dbg !102
  %615 = extractvalue { i32, i32, i32, i32 } %612, 1, !dbg !102
  %616 = bitcast i32 %615 to float, !dbg !102
  %617 = extractvalue { i32, i32, i32, i32 } %612, 2, !dbg !102
  %618 = bitcast i32 %617 to float, !dbg !102
  %619 = extractvalue { i32, i32, i32, i32 } %612, 3, !dbg !102
  %620 = bitcast i32 %619 to float, !dbg !102
  %621 = tail call float @llvm.fmuladd.f32(float %546, float %581, float 0.000000e+00), !dbg !109
  %622 = tail call float @llvm.fmuladd.f32(float %548, float %583, float %621), !dbg !109
  %623 = tail call float @llvm.fmuladd.f32(float %550, float %585, float %622), !dbg !109
  %624 = tail call float @llvm.fmuladd.f32(float %552, float %587, float %623), !dbg !109
  %625 = tail call float @llvm.fmuladd.f32(float %554, float %592, float %624), !dbg !109
  %626 = tail call float @llvm.fmuladd.f32(float %556, float %594, float %625), !dbg !109
  %627 = tail call float @llvm.fmuladd.f32(float %558, float %596, float %626), !dbg !109
  %628 = tail call float @llvm.fmuladd.f32(float %560, float %598, float %627), !dbg !109
  %629 = tail call float @llvm.fmuladd.f32(float %562, float %603, float %628), !dbg !109
  %630 = tail call float @llvm.fmuladd.f32(float %564, float %605, float %629), !dbg !109
  %631 = tail call float @llvm.fmuladd.f32(float %566, float %607, float %630), !dbg !109
  %632 = tail call float @llvm.fmuladd.f32(float %568, float %609, float %631), !dbg !109
  %633 = tail call float @llvm.fmuladd.f32(float %570, float %614, float %632), !dbg !109
  %634 = tail call float @llvm.fmuladd.f32(float %572, float %616, float %633), !dbg !109
  %635 = tail call float @llvm.fmuladd.f32(float %574, float %618, float %634), !dbg !109
  %636 = tail call float @llvm.fmuladd.f32(float %576, float %620, float %635), !dbg !109
  %637 = bitcast float %636 to i32, !dbg !109
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %318, i32 %637) #4, !dbg !109
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !109
  %638 = load float, ptr addrspace(3) %451, align 64, !dbg !109
  %639 = load float, ptr addrspace(3) %453, align 4, !dbg !109
  %640 = load float, ptr addrspace(3) %455, align 8, !dbg !109
  %641 = load float, ptr addrspace(3) %457, align 4, !dbg !109
  %642 = load float, ptr addrspace(3) %459, align 16, !dbg !109
  %643 = load float, ptr addrspace(3) %461, align 4, !dbg !109
  %644 = load float, ptr addrspace(3) %463, align 8, !dbg !109
  %645 = load float, ptr addrspace(3) %465, align 4, !dbg !109
  %646 = load float, ptr addrspace(3) %467, align 32, !dbg !109
  %647 = load float, ptr addrspace(3) %469, align 4, !dbg !109
  %648 = load float, ptr addrspace(3) %471, align 8, !dbg !109
  %649 = load float, ptr addrspace(3) %473, align 4, !dbg !109
  %650 = load float, ptr addrspace(3) %475, align 16, !dbg !109
  %651 = load float, ptr addrspace(3) %477, align 4, !dbg !109
  %652 = load float, ptr addrspace(3) %479, align 8, !dbg !109
  %653 = load float, ptr addrspace(3) %481, align 4, !dbg !109
  %654 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %386, !dbg !97
  %655 = ptrtoint ptr addrspace(3) %654 to i32, !dbg !97
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %655) #4, !dbg !97
  %657 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !97
  %658 = bitcast i32 %657 to float, !dbg !97
  %659 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !97
  %660 = bitcast i32 %659 to float, !dbg !97
  %661 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !97
  %662 = bitcast i32 %661 to float, !dbg !97
  %663 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !97
  %664 = bitcast i32 %663 to float, !dbg !97
  %665 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %398, !dbg !97
  %666 = ptrtoint ptr addrspace(3) %665 to i32, !dbg !97
  %667 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %666) #4, !dbg !97
  %668 = extractvalue { i32, i32, i32, i32 } %667, 0, !dbg !97
  %669 = bitcast i32 %668 to float, !dbg !97
  %670 = extractvalue { i32, i32, i32, i32 } %667, 1, !dbg !97
  %671 = bitcast i32 %670 to float, !dbg !97
  %672 = extractvalue { i32, i32, i32, i32 } %667, 2, !dbg !97
  %673 = bitcast i32 %672 to float, !dbg !97
  %674 = extractvalue { i32, i32, i32, i32 } %667, 3, !dbg !97
  %675 = bitcast i32 %674 to float, !dbg !97
  %676 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %410, !dbg !97
  %677 = ptrtoint ptr addrspace(3) %676 to i32, !dbg !97
  %678 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %677) #4, !dbg !97
  %679 = extractvalue { i32, i32, i32, i32 } %678, 0, !dbg !97
  %680 = bitcast i32 %679 to float, !dbg !97
  %681 = extractvalue { i32, i32, i32, i32 } %678, 1, !dbg !97
  %682 = bitcast i32 %681 to float, !dbg !97
  %683 = extractvalue { i32, i32, i32, i32 } %678, 2, !dbg !97
  %684 = bitcast i32 %683 to float, !dbg !97
  %685 = extractvalue { i32, i32, i32, i32 } %678, 3, !dbg !97
  %686 = bitcast i32 %685 to float, !dbg !97
  %687 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3088), i32 %422, !dbg !97
  %688 = ptrtoint ptr addrspace(3) %687 to i32, !dbg !97
  %689 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %688) #4, !dbg !97
  %690 = extractvalue { i32, i32, i32, i32 } %689, 0, !dbg !97
  %691 = bitcast i32 %690 to float, !dbg !97
  %692 = extractvalue { i32, i32, i32, i32 } %689, 1, !dbg !97
  %693 = bitcast i32 %692 to float, !dbg !97
  %694 = extractvalue { i32, i32, i32, i32 } %689, 2, !dbg !97
  %695 = bitcast i32 %694 to float, !dbg !97
  %696 = extractvalue { i32, i32, i32, i32 } %689, 3, !dbg !97
  %697 = bitcast i32 %696 to float, !dbg !97
  %698 = tail call float @llvm.fmuladd.f32(float %638, float %658, float 0.000000e+00), !dbg !110
  %699 = tail call float @llvm.fmuladd.f32(float %639, float %660, float %698), !dbg !110
  %700 = tail call float @llvm.fmuladd.f32(float %640, float %662, float %699), !dbg !110
  %701 = tail call float @llvm.fmuladd.f32(float %641, float %664, float %700), !dbg !110
  %702 = tail call float @llvm.fmuladd.f32(float %642, float %669, float %701), !dbg !110
  %703 = tail call float @llvm.fmuladd.f32(float %643, float %671, float %702), !dbg !110
  %704 = tail call float @llvm.fmuladd.f32(float %644, float %673, float %703), !dbg !110
  %705 = tail call float @llvm.fmuladd.f32(float %645, float %675, float %704), !dbg !110
  %706 = tail call float @llvm.fmuladd.f32(float %646, float %680, float %705), !dbg !110
  %707 = tail call float @llvm.fmuladd.f32(float %647, float %682, float %706), !dbg !110
  %708 = tail call float @llvm.fmuladd.f32(float %648, float %684, float %707), !dbg !110
  %709 = tail call float @llvm.fmuladd.f32(float %649, float %686, float %708), !dbg !110
  %710 = tail call float @llvm.fmuladd.f32(float %650, float %691, float %709), !dbg !110
  %711 = tail call float @llvm.fmuladd.f32(float %651, float %693, float %710), !dbg !110
  %712 = tail call float @llvm.fmuladd.f32(float %652, float %695, float %711), !dbg !110
  %713 = tail call float @llvm.fmuladd.f32(float %653, float %697, float %712), !dbg !110
  %714 = fsub float 0.000000e+00, %713, !dbg !111
  %715 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %295, !dbg !111
  %716 = bitcast float %714 to i32, !dbg !111
  %717 = ptrtoint ptr addrspace(3) %715 to i32, !dbg !111
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %717, i32 %716) #4, !dbg !111
  %718 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 5136), i32 %351, !dbg !99
  %719 = load float, ptr addrspace(3) %718, align 64, !dbg !99
  %720 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 4, !dbg !99
  %721 = load float, ptr addrspace(3) %720, align 4, !dbg !99
  %722 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 8, !dbg !99
  %723 = load float, ptr addrspace(3) %722, align 8, !dbg !99
  %724 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 12, !dbg !99
  %725 = load float, ptr addrspace(3) %724, align 4, !dbg !99
  %726 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 16, !dbg !99
  %727 = load float, ptr addrspace(3) %726, align 16, !dbg !99
  %728 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 20, !dbg !99
  %729 = load float, ptr addrspace(3) %728, align 4, !dbg !99
  %730 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 24, !dbg !99
  %731 = load float, ptr addrspace(3) %730, align 8, !dbg !99
  %732 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 28, !dbg !99
  %733 = load float, ptr addrspace(3) %732, align 4, !dbg !99
  %734 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 32, !dbg !99
  %735 = load float, ptr addrspace(3) %734, align 32, !dbg !99
  %736 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 36, !dbg !99
  %737 = load float, ptr addrspace(3) %736, align 4, !dbg !99
  %738 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 40, !dbg !99
  %739 = load float, ptr addrspace(3) %738, align 8, !dbg !99
  %740 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 44, !dbg !99
  %741 = load float, ptr addrspace(3) %740, align 4, !dbg !99
  %742 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 48, !dbg !99
  %743 = load float, ptr addrspace(3) %742, align 16, !dbg !99
  %744 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 52, !dbg !99
  %745 = load float, ptr addrspace(3) %744, align 4, !dbg !99
  %746 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 56, !dbg !99
  %747 = load float, ptr addrspace(3) %746, align 8, !dbg !99
  %748 = getelementptr inbounds nuw i8, ptr addrspace(3) %718, i32 60, !dbg !99
  %749 = load float, ptr addrspace(3) %748, align 4, !dbg !99
  %750 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %386, !dbg !105
  %751 = ptrtoint ptr addrspace(3) %750 to i32, !dbg !105
  %752 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %751) #4, !dbg !105
  %753 = extractvalue { i32, i32, i32, i32 } %752, 0, !dbg !105
  %754 = bitcast i32 %753 to float, !dbg !105
  %755 = extractvalue { i32, i32, i32, i32 } %752, 1, !dbg !105
  %756 = bitcast i32 %755 to float, !dbg !105
  %757 = extractvalue { i32, i32, i32, i32 } %752, 2, !dbg !105
  %758 = bitcast i32 %757 to float, !dbg !105
  %759 = extractvalue { i32, i32, i32, i32 } %752, 3, !dbg !105
  %760 = bitcast i32 %759 to float, !dbg !105
  %761 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %398, !dbg !105
  %762 = ptrtoint ptr addrspace(3) %761 to i32, !dbg !105
  %763 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %762) #4, !dbg !105
  %764 = extractvalue { i32, i32, i32, i32 } %763, 0, !dbg !105
  %765 = bitcast i32 %764 to float, !dbg !105
  %766 = extractvalue { i32, i32, i32, i32 } %763, 1, !dbg !105
  %767 = bitcast i32 %766 to float, !dbg !105
  %768 = extractvalue { i32, i32, i32, i32 } %763, 2, !dbg !105
  %769 = bitcast i32 %768 to float, !dbg !105
  %770 = extractvalue { i32, i32, i32, i32 } %763, 3, !dbg !105
  %771 = bitcast i32 %770 to float, !dbg !105
  %772 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %410, !dbg !105
  %773 = ptrtoint ptr addrspace(3) %772 to i32, !dbg !105
  %774 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %773) #4, !dbg !105
  %775 = extractvalue { i32, i32, i32, i32 } %774, 0, !dbg !105
  %776 = bitcast i32 %775 to float, !dbg !105
  %777 = extractvalue { i32, i32, i32, i32 } %774, 1, !dbg !105
  %778 = bitcast i32 %777 to float, !dbg !105
  %779 = extractvalue { i32, i32, i32, i32 } %774, 2, !dbg !105
  %780 = bitcast i32 %779 to float, !dbg !105
  %781 = extractvalue { i32, i32, i32, i32 } %774, 3, !dbg !105
  %782 = bitcast i32 %781 to float, !dbg !105
  %783 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %422, !dbg !105
  %784 = ptrtoint ptr addrspace(3) %783 to i32, !dbg !105
  %785 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %784) #4, !dbg !105
  %786 = extractvalue { i32, i32, i32, i32 } %785, 0, !dbg !105
  %787 = bitcast i32 %786 to float, !dbg !105
  %788 = extractvalue { i32, i32, i32, i32 } %785, 1, !dbg !105
  %789 = bitcast i32 %788 to float, !dbg !105
  %790 = extractvalue { i32, i32, i32, i32 } %785, 2, !dbg !105
  %791 = bitcast i32 %790 to float, !dbg !105
  %792 = extractvalue { i32, i32, i32, i32 } %785, 3, !dbg !105
  %793 = bitcast i32 %792 to float, !dbg !105
  %794 = tail call float @llvm.fmuladd.f32(float %719, float %754, float 0.000000e+00), !dbg !112
  %795 = tail call float @llvm.fmuladd.f32(float %721, float %756, float %794), !dbg !112
  %796 = tail call float @llvm.fmuladd.f32(float %723, float %758, float %795), !dbg !112
  %797 = tail call float @llvm.fmuladd.f32(float %725, float %760, float %796), !dbg !112
  %798 = tail call float @llvm.fmuladd.f32(float %727, float %765, float %797), !dbg !112
  %799 = tail call float @llvm.fmuladd.f32(float %729, float %767, float %798), !dbg !112
  %800 = tail call float @llvm.fmuladd.f32(float %731, float %769, float %799), !dbg !112
  %801 = tail call float @llvm.fmuladd.f32(float %733, float %771, float %800), !dbg !112
  %802 = tail call float @llvm.fmuladd.f32(float %735, float %776, float %801), !dbg !112
  %803 = tail call float @llvm.fmuladd.f32(float %737, float %778, float %802), !dbg !112
  %804 = tail call float @llvm.fmuladd.f32(float %739, float %780, float %803), !dbg !112
  %805 = tail call float @llvm.fmuladd.f32(float %741, float %782, float %804), !dbg !112
  %806 = tail call float @llvm.fmuladd.f32(float %743, float %787, float %805), !dbg !112
  %807 = tail call float @llvm.fmuladd.f32(float %745, float %789, float %806), !dbg !112
  %808 = tail call float @llvm.fmuladd.f32(float %747, float %791, float %807), !dbg !112
  %809 = tail call float @llvm.fmuladd.f32(float %749, float %793, float %808), !dbg !112
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !112
  %810 = bitcast float %809 to i32, !dbg !112
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %318, i32 %810) #4, !dbg !112
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !112
  %811 = load float, ptr addrspace(3) %451, align 64, !dbg !112
  %812 = load float, ptr addrspace(3) %453, align 4, !dbg !112
  %813 = load float, ptr addrspace(3) %455, align 8, !dbg !112
  %814 = load float, ptr addrspace(3) %457, align 4, !dbg !112
  %815 = load float, ptr addrspace(3) %459, align 16, !dbg !112
  %816 = load float, ptr addrspace(3) %461, align 4, !dbg !112
  %817 = load float, ptr addrspace(3) %463, align 8, !dbg !112
  %818 = load float, ptr addrspace(3) %465, align 4, !dbg !112
  %819 = load float, ptr addrspace(3) %467, align 32, !dbg !112
  %820 = load float, ptr addrspace(3) %469, align 4, !dbg !112
  %821 = load float, ptr addrspace(3) %471, align 8, !dbg !112
  %822 = load float, ptr addrspace(3) %473, align 4, !dbg !112
  %823 = load float, ptr addrspace(3) %475, align 16, !dbg !112
  %824 = load float, ptr addrspace(3) %477, align 4, !dbg !112
  %825 = load float, ptr addrspace(3) %479, align 8, !dbg !112
  %826 = load float, ptr addrspace(3) %481, align 4, !dbg !112
  %827 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %386, !dbg !98
  %828 = ptrtoint ptr addrspace(3) %827 to i32, !dbg !98
  %829 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %828) #4, !dbg !98
  %830 = extractvalue { i32, i32, i32, i32 } %829, 0, !dbg !98
  %831 = bitcast i32 %830 to float, !dbg !98
  %832 = extractvalue { i32, i32, i32, i32 } %829, 1, !dbg !98
  %833 = bitcast i32 %832 to float, !dbg !98
  %834 = extractvalue { i32, i32, i32, i32 } %829, 2, !dbg !98
  %835 = bitcast i32 %834 to float, !dbg !98
  %836 = extractvalue { i32, i32, i32, i32 } %829, 3, !dbg !98
  %837 = bitcast i32 %836 to float, !dbg !98
  %838 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %398, !dbg !98
  %839 = ptrtoint ptr addrspace(3) %838 to i32, !dbg !98
  %840 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %839) #4, !dbg !98
  %841 = extractvalue { i32, i32, i32, i32 } %840, 0, !dbg !98
  %842 = bitcast i32 %841 to float, !dbg !98
  %843 = extractvalue { i32, i32, i32, i32 } %840, 1, !dbg !98
  %844 = bitcast i32 %843 to float, !dbg !98
  %845 = extractvalue { i32, i32, i32, i32 } %840, 2, !dbg !98
  %846 = bitcast i32 %845 to float, !dbg !98
  %847 = extractvalue { i32, i32, i32, i32 } %840, 3, !dbg !98
  %848 = bitcast i32 %847 to float, !dbg !98
  %849 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %410, !dbg !98
  %850 = ptrtoint ptr addrspace(3) %849 to i32, !dbg !98
  %851 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %850) #4, !dbg !98
  %852 = extractvalue { i32, i32, i32, i32 } %851, 0, !dbg !98
  %853 = bitcast i32 %852 to float, !dbg !98
  %854 = extractvalue { i32, i32, i32, i32 } %851, 1, !dbg !98
  %855 = bitcast i32 %854 to float, !dbg !98
  %856 = extractvalue { i32, i32, i32, i32 } %851, 2, !dbg !98
  %857 = bitcast i32 %856 to float, !dbg !98
  %858 = extractvalue { i32, i32, i32, i32 } %851, 3, !dbg !98
  %859 = bitcast i32 %858 to float, !dbg !98
  %860 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4112), i32 %422, !dbg !98
  %861 = ptrtoint ptr addrspace(3) %860 to i32, !dbg !98
  %862 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %861) #4, !dbg !98
  %863 = extractvalue { i32, i32, i32, i32 } %862, 0, !dbg !98
  %864 = bitcast i32 %863 to float, !dbg !98
  %865 = extractvalue { i32, i32, i32, i32 } %862, 1, !dbg !98
  %866 = bitcast i32 %865 to float, !dbg !98
  %867 = extractvalue { i32, i32, i32, i32 } %862, 2, !dbg !98
  %868 = bitcast i32 %867 to float, !dbg !98
  %869 = extractvalue { i32, i32, i32, i32 } %862, 3, !dbg !98
  %870 = bitcast i32 %869 to float, !dbg !98
  %871 = tail call float @llvm.fmuladd.f32(float %811, float %831, float 0.000000e+00), !dbg !113
  %872 = tail call float @llvm.fmuladd.f32(float %812, float %833, float %871), !dbg !113
  %873 = tail call float @llvm.fmuladd.f32(float %813, float %835, float %872), !dbg !113
  %874 = tail call float @llvm.fmuladd.f32(float %814, float %837, float %873), !dbg !113
  %875 = tail call float @llvm.fmuladd.f32(float %815, float %842, float %874), !dbg !113
  %876 = tail call float @llvm.fmuladd.f32(float %816, float %844, float %875), !dbg !113
  %877 = tail call float @llvm.fmuladd.f32(float %817, float %846, float %876), !dbg !113
  %878 = tail call float @llvm.fmuladd.f32(float %818, float %848, float %877), !dbg !113
  %879 = tail call float @llvm.fmuladd.f32(float %819, float %853, float %878), !dbg !113
  %880 = tail call float @llvm.fmuladd.f32(float %820, float %855, float %879), !dbg !113
  %881 = tail call float @llvm.fmuladd.f32(float %821, float %857, float %880), !dbg !113
  %882 = tail call float @llvm.fmuladd.f32(float %822, float %859, float %881), !dbg !113
  %883 = tail call float @llvm.fmuladd.f32(float %823, float %864, float %882), !dbg !113
  %884 = tail call float @llvm.fmuladd.f32(float %824, float %866, float %883), !dbg !113
  %885 = tail call float @llvm.fmuladd.f32(float %825, float %868, float %884), !dbg !113
  %886 = tail call float @llvm.fmuladd.f32(float %826, float %870, float %885), !dbg !113
  %887 = fsub float 0.000000e+00, %886, !dbg !114
  %888 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6160), i32 %351, !dbg !101
  %889 = load float, ptr addrspace(3) %888, align 64, !dbg !101
  %890 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 4, !dbg !101
  %891 = load float, ptr addrspace(3) %890, align 4, !dbg !101
  %892 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 8, !dbg !101
  %893 = load float, ptr addrspace(3) %892, align 8, !dbg !101
  %894 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 12, !dbg !101
  %895 = load float, ptr addrspace(3) %894, align 4, !dbg !101
  %896 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 16, !dbg !101
  %897 = load float, ptr addrspace(3) %896, align 16, !dbg !101
  %898 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 20, !dbg !101
  %899 = load float, ptr addrspace(3) %898, align 4, !dbg !101
  %900 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 24, !dbg !101
  %901 = load float, ptr addrspace(3) %900, align 8, !dbg !101
  %902 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 28, !dbg !101
  %903 = load float, ptr addrspace(3) %902, align 4, !dbg !101
  %904 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 32, !dbg !101
  %905 = load float, ptr addrspace(3) %904, align 32, !dbg !101
  %906 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 36, !dbg !101
  %907 = load float, ptr addrspace(3) %906, align 4, !dbg !101
  %908 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 40, !dbg !101
  %909 = load float, ptr addrspace(3) %908, align 8, !dbg !101
  %910 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 44, !dbg !101
  %911 = load float, ptr addrspace(3) %910, align 4, !dbg !101
  %912 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 48, !dbg !101
  %913 = load float, ptr addrspace(3) %912, align 16, !dbg !101
  %914 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 52, !dbg !101
  %915 = load float, ptr addrspace(3) %914, align 4, !dbg !101
  %916 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 56, !dbg !101
  %917 = load float, ptr addrspace(3) %916, align 8, !dbg !101
  %918 = getelementptr inbounds nuw i8, ptr addrspace(3) %888, i32 60, !dbg !101
  %919 = load float, ptr addrspace(3) %918, align 4, !dbg !101
  %920 = tail call float @llvm.fmuladd.f32(float %889, float %487, float 0.000000e+00), !dbg !115
  %921 = tail call float @llvm.fmuladd.f32(float %891, float %489, float %920), !dbg !115
  %922 = tail call float @llvm.fmuladd.f32(float %893, float %491, float %921), !dbg !115
  %923 = tail call float @llvm.fmuladd.f32(float %895, float %493, float %922), !dbg !115
  %924 = tail call float @llvm.fmuladd.f32(float %897, float %498, float %923), !dbg !115
  %925 = tail call float @llvm.fmuladd.f32(float %899, float %500, float %924), !dbg !115
  %926 = tail call float @llvm.fmuladd.f32(float %901, float %502, float %925), !dbg !115
  %927 = tail call float @llvm.fmuladd.f32(float %903, float %504, float %926), !dbg !115
  %928 = tail call float @llvm.fmuladd.f32(float %905, float %509, float %927), !dbg !115
  %929 = tail call float @llvm.fmuladd.f32(float %907, float %511, float %928), !dbg !115
  %930 = tail call float @llvm.fmuladd.f32(float %909, float %513, float %929), !dbg !115
  %931 = tail call float @llvm.fmuladd.f32(float %911, float %515, float %930), !dbg !115
  %932 = tail call float @llvm.fmuladd.f32(float %913, float %520, float %931), !dbg !115
  %933 = tail call float @llvm.fmuladd.f32(float %915, float %522, float %932), !dbg !115
  %934 = tail call float @llvm.fmuladd.f32(float %917, float %524, float %933), !dbg !115
  %935 = tail call float @llvm.fmuladd.f32(float %919, float %526, float %934), !dbg !115
  %936 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 7184), i32 %351, !dbg !102
  %937 = load float, ptr addrspace(3) %936, align 64, !dbg !102
  %938 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 4, !dbg !102
  %939 = load float, ptr addrspace(3) %938, align 4, !dbg !102
  %940 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 8, !dbg !102
  %941 = load float, ptr addrspace(3) %940, align 8, !dbg !102
  %942 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 12, !dbg !102
  %943 = load float, ptr addrspace(3) %942, align 4, !dbg !102
  %944 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 16, !dbg !102
  %945 = load float, ptr addrspace(3) %944, align 16, !dbg !102
  %946 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 20, !dbg !102
  %947 = load float, ptr addrspace(3) %946, align 4, !dbg !102
  %948 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 24, !dbg !102
  %949 = load float, ptr addrspace(3) %948, align 8, !dbg !102
  %950 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 28, !dbg !102
  %951 = load float, ptr addrspace(3) %950, align 4, !dbg !102
  %952 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 32, !dbg !102
  %953 = load float, ptr addrspace(3) %952, align 32, !dbg !102
  %954 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 36, !dbg !102
  %955 = load float, ptr addrspace(3) %954, align 4, !dbg !102
  %956 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 40, !dbg !102
  %957 = load float, ptr addrspace(3) %956, align 8, !dbg !102
  %958 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 44, !dbg !102
  %959 = load float, ptr addrspace(3) %958, align 4, !dbg !102
  %960 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 48, !dbg !102
  %961 = load float, ptr addrspace(3) %960, align 16, !dbg !102
  %962 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 52, !dbg !102
  %963 = load float, ptr addrspace(3) %962, align 4, !dbg !102
  %964 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 56, !dbg !102
  %965 = load float, ptr addrspace(3) %964, align 8, !dbg !102
  %966 = getelementptr inbounds nuw i8, ptr addrspace(3) %936, i32 60, !dbg !102
  %967 = load float, ptr addrspace(3) %966, align 4, !dbg !102
  %968 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #4, !dbg !108
  %969 = extractvalue { i32, i32, i32, i32 } %968, 0, !dbg !108
  %970 = bitcast i32 %969 to float, !dbg !108
  %971 = extractvalue { i32, i32, i32, i32 } %968, 1, !dbg !108
  %972 = bitcast i32 %971 to float, !dbg !108
  %973 = extractvalue { i32, i32, i32, i32 } %968, 2, !dbg !108
  %974 = bitcast i32 %973 to float, !dbg !108
  %975 = extractvalue { i32, i32, i32, i32 } %968, 3, !dbg !108
  %976 = bitcast i32 %975 to float, !dbg !108
  %977 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #4, !dbg !108
  %978 = extractvalue { i32, i32, i32, i32 } %977, 0, !dbg !108
  %979 = bitcast i32 %978 to float, !dbg !108
  %980 = extractvalue { i32, i32, i32, i32 } %977, 1, !dbg !108
  %981 = bitcast i32 %980 to float, !dbg !108
  %982 = extractvalue { i32, i32, i32, i32 } %977, 2, !dbg !108
  %983 = bitcast i32 %982 to float, !dbg !108
  %984 = extractvalue { i32, i32, i32, i32 } %977, 3, !dbg !108
  %985 = bitcast i32 %984 to float, !dbg !108
  %986 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %506) #4, !dbg !108
  %987 = extractvalue { i32, i32, i32, i32 } %986, 0, !dbg !108
  %988 = bitcast i32 %987 to float, !dbg !108
  %989 = extractvalue { i32, i32, i32, i32 } %986, 1, !dbg !108
  %990 = bitcast i32 %989 to float, !dbg !108
  %991 = extractvalue { i32, i32, i32, i32 } %986, 2, !dbg !108
  %992 = bitcast i32 %991 to float, !dbg !108
  %993 = extractvalue { i32, i32, i32, i32 } %986, 3, !dbg !108
  %994 = bitcast i32 %993 to float, !dbg !108
  %995 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #4, !dbg !108
  %996 = extractvalue { i32, i32, i32, i32 } %995, 0, !dbg !108
  %997 = bitcast i32 %996 to float, !dbg !108
  %998 = extractvalue { i32, i32, i32, i32 } %995, 1, !dbg !108
  %999 = bitcast i32 %998 to float, !dbg !108
  %1000 = extractvalue { i32, i32, i32, i32 } %995, 2, !dbg !108
  %1001 = bitcast i32 %1000 to float, !dbg !108
  %1002 = extractvalue { i32, i32, i32, i32 } %995, 3, !dbg !108
  %1003 = bitcast i32 %1002 to float, !dbg !108
  %1004 = tail call float @llvm.fmuladd.f32(float %937, float %970, float %935), !dbg !116
  %1005 = tail call float @llvm.fmuladd.f32(float %939, float %972, float %1004), !dbg !116
  %1006 = tail call float @llvm.fmuladd.f32(float %941, float %974, float %1005), !dbg !116
  %1007 = tail call float @llvm.fmuladd.f32(float %943, float %976, float %1006), !dbg !116
  %1008 = tail call float @llvm.fmuladd.f32(float %945, float %979, float %1007), !dbg !116
  %1009 = tail call float @llvm.fmuladd.f32(float %947, float %981, float %1008), !dbg !116
  %1010 = tail call float @llvm.fmuladd.f32(float %949, float %983, float %1009), !dbg !116
  %1011 = tail call float @llvm.fmuladd.f32(float %951, float %985, float %1010), !dbg !116
  %1012 = tail call float @llvm.fmuladd.f32(float %953, float %988, float %1011), !dbg !116
  %1013 = tail call float @llvm.fmuladd.f32(float %955, float %990, float %1012), !dbg !116
  %1014 = tail call float @llvm.fmuladd.f32(float %957, float %992, float %1013), !dbg !116
  %1015 = tail call float @llvm.fmuladd.f32(float %959, float %994, float %1014), !dbg !116
  %1016 = tail call float @llvm.fmuladd.f32(float %961, float %997, float %1015), !dbg !116
  %1017 = tail call float @llvm.fmuladd.f32(float %963, float %999, float %1016), !dbg !116
  %1018 = tail call float @llvm.fmuladd.f32(float %965, float %1001, float %1017), !dbg !116
  %1019 = tail call float @llvm.fmuladd.f32(float %967, float %1003, float %1018), !dbg !116
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !116
  %1020 = bitcast float %1019 to i32, !dbg !116
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %298, i32 %1020) #4, !dbg !116
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !116
  %1021 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #4, !dbg !116
  %1022 = extractvalue { i32, i32, i32, i32 } %1021, 0, !dbg !116
  %1023 = bitcast i32 %1022 to float, !dbg !116
  %1024 = extractvalue { i32, i32, i32, i32 } %1021, 1, !dbg !116
  %1025 = bitcast i32 %1024 to float, !dbg !116
  %1026 = extractvalue { i32, i32, i32, i32 } %1021, 2, !dbg !116
  %1027 = bitcast i32 %1026 to float, !dbg !116
  %1028 = extractvalue { i32, i32, i32, i32 } %1021, 3, !dbg !116
  %1029 = bitcast i32 %1028 to float, !dbg !116
  %1030 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #4, !dbg !116
  %1031 = extractvalue { i32, i32, i32, i32 } %1030, 0, !dbg !116
  %1032 = bitcast i32 %1031 to float, !dbg !116
  %1033 = extractvalue { i32, i32, i32, i32 } %1030, 1, !dbg !116
  %1034 = bitcast i32 %1033 to float, !dbg !116
  %1035 = extractvalue { i32, i32, i32, i32 } %1030, 2, !dbg !116
  %1036 = bitcast i32 %1035 to float, !dbg !116
  %1037 = extractvalue { i32, i32, i32, i32 } %1030, 3, !dbg !116
  %1038 = bitcast i32 %1037 to float, !dbg !116
  %1039 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %506) #4, !dbg !116
  %1040 = extractvalue { i32, i32, i32, i32 } %1039, 0, !dbg !116
  %1041 = bitcast i32 %1040 to float, !dbg !116
  %1042 = extractvalue { i32, i32, i32, i32 } %1039, 1, !dbg !116
  %1043 = bitcast i32 %1042 to float, !dbg !116
  %1044 = extractvalue { i32, i32, i32, i32 } %1039, 2, !dbg !116
  %1045 = bitcast i32 %1044 to float, !dbg !116
  %1046 = extractvalue { i32, i32, i32, i32 } %1039, 3, !dbg !116
  %1047 = bitcast i32 %1046 to float, !dbg !116
  %1048 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #4, !dbg !116
  %1049 = extractvalue { i32, i32, i32, i32 } %1048, 0, !dbg !116
  %1050 = bitcast i32 %1049 to float, !dbg !116
  %1051 = extractvalue { i32, i32, i32, i32 } %1048, 1, !dbg !116
  %1052 = bitcast i32 %1051 to float, !dbg !116
  %1053 = extractvalue { i32, i32, i32, i32 } %1048, 2, !dbg !116
  %1054 = bitcast i32 %1053 to float, !dbg !116
  %1055 = extractvalue { i32, i32, i32, i32 } %1048, 3, !dbg !116
  %1056 = bitcast i32 %1055 to float, !dbg !116
  %1057 = tail call float @llvm.fmuladd.f32(float %546, float %1023, float 0.000000e+00), !dbg !117
  %1058 = tail call float @llvm.fmuladd.f32(float %548, float %1025, float %1057), !dbg !117
  %1059 = tail call float @llvm.fmuladd.f32(float %550, float %1027, float %1058), !dbg !117
  %1060 = tail call float @llvm.fmuladd.f32(float %552, float %1029, float %1059), !dbg !117
  %1061 = tail call float @llvm.fmuladd.f32(float %554, float %1032, float %1060), !dbg !117
  %1062 = tail call float @llvm.fmuladd.f32(float %556, float %1034, float %1061), !dbg !117
  %1063 = tail call float @llvm.fmuladd.f32(float %558, float %1036, float %1062), !dbg !117
  %1064 = tail call float @llvm.fmuladd.f32(float %560, float %1038, float %1063), !dbg !117
  %1065 = tail call float @llvm.fmuladd.f32(float %562, float %1041, float %1064), !dbg !117
  %1066 = tail call float @llvm.fmuladd.f32(float %564, float %1043, float %1065), !dbg !117
  %1067 = tail call float @llvm.fmuladd.f32(float %566, float %1045, float %1066), !dbg !117
  %1068 = tail call float @llvm.fmuladd.f32(float %568, float %1047, float %1067), !dbg !117
  %1069 = tail call float @llvm.fmuladd.f32(float %570, float %1050, float %1068), !dbg !117
  %1070 = tail call float @llvm.fmuladd.f32(float %572, float %1052, float %1069), !dbg !117
  %1071 = tail call float @llvm.fmuladd.f32(float %574, float %1054, float %1070), !dbg !117
  %1072 = tail call float @llvm.fmuladd.f32(float %576, float %1056, float %1071), !dbg !117
  %1073 = fsub float 0.000000e+00, %1072, !dbg !118
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !118
  %1074 = bitcast float %1073 to i32, !dbg !118
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %298, i32 %1074) #4, !dbg !118
  %1075 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 9232), i32 %351, !dbg !104
  %1076 = load float, ptr addrspace(3) %1075, align 64, !dbg !104
  %1077 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 4, !dbg !104
  %1078 = load float, ptr addrspace(3) %1077, align 4, !dbg !104
  %1079 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 8, !dbg !104
  %1080 = load float, ptr addrspace(3) %1079, align 8, !dbg !104
  %1081 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 12, !dbg !104
  %1082 = load float, ptr addrspace(3) %1081, align 4, !dbg !104
  %1083 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 16, !dbg !104
  %1084 = load float, ptr addrspace(3) %1083, align 16, !dbg !104
  %1085 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 20, !dbg !104
  %1086 = load float, ptr addrspace(3) %1085, align 4, !dbg !104
  %1087 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 24, !dbg !104
  %1088 = load float, ptr addrspace(3) %1087, align 8, !dbg !104
  %1089 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 28, !dbg !104
  %1090 = load float, ptr addrspace(3) %1089, align 4, !dbg !104
  %1091 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 32, !dbg !104
  %1092 = load float, ptr addrspace(3) %1091, align 32, !dbg !104
  %1093 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 36, !dbg !104
  %1094 = load float, ptr addrspace(3) %1093, align 4, !dbg !104
  %1095 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 40, !dbg !104
  %1096 = load float, ptr addrspace(3) %1095, align 8, !dbg !104
  %1097 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 44, !dbg !104
  %1098 = load float, ptr addrspace(3) %1097, align 4, !dbg !104
  %1099 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 48, !dbg !104
  %1100 = load float, ptr addrspace(3) %1099, align 16, !dbg !104
  %1101 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 52, !dbg !104
  %1102 = load float, ptr addrspace(3) %1101, align 4, !dbg !104
  %1103 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 56, !dbg !104
  %1104 = load float, ptr addrspace(3) %1103, align 8, !dbg !104
  %1105 = getelementptr inbounds nuw i8, ptr addrspace(3) %1075, i32 60, !dbg !104
  %1106 = load float, ptr addrspace(3) %1105, align 4, !dbg !104
  %1107 = tail call float @llvm.fmuladd.f32(float %1076, float %658, float 0.000000e+00), !dbg !119
  %1108 = tail call float @llvm.fmuladd.f32(float %1078, float %660, float %1107), !dbg !119
  %1109 = tail call float @llvm.fmuladd.f32(float %1080, float %662, float %1108), !dbg !119
  %1110 = tail call float @llvm.fmuladd.f32(float %1082, float %664, float %1109), !dbg !119
  %1111 = tail call float @llvm.fmuladd.f32(float %1084, float %669, float %1110), !dbg !119
  %1112 = tail call float @llvm.fmuladd.f32(float %1086, float %671, float %1111), !dbg !119
  %1113 = tail call float @llvm.fmuladd.f32(float %1088, float %673, float %1112), !dbg !119
  %1114 = tail call float @llvm.fmuladd.f32(float %1090, float %675, float %1113), !dbg !119
  %1115 = tail call float @llvm.fmuladd.f32(float %1092, float %680, float %1114), !dbg !119
  %1116 = tail call float @llvm.fmuladd.f32(float %1094, float %682, float %1115), !dbg !119
  %1117 = tail call float @llvm.fmuladd.f32(float %1096, float %684, float %1116), !dbg !119
  %1118 = tail call float @llvm.fmuladd.f32(float %1098, float %686, float %1117), !dbg !119
  %1119 = tail call float @llvm.fmuladd.f32(float %1100, float %691, float %1118), !dbg !119
  %1120 = tail call float @llvm.fmuladd.f32(float %1102, float %693, float %1119), !dbg !119
  %1121 = tail call float @llvm.fmuladd.f32(float %1104, float %695, float %1120), !dbg !119
  %1122 = tail call float @llvm.fmuladd.f32(float %1106, float %697, float %1121), !dbg !119
  %1123 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10256), i32 %351, !dbg !105
  %1124 = load float, ptr addrspace(3) %1123, align 64, !dbg !105
  %1125 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 4, !dbg !105
  %1126 = load float, ptr addrspace(3) %1125, align 4, !dbg !105
  %1127 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 8, !dbg !105
  %1128 = load float, ptr addrspace(3) %1127, align 8, !dbg !105
  %1129 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 12, !dbg !105
  %1130 = load float, ptr addrspace(3) %1129, align 4, !dbg !105
  %1131 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 16, !dbg !105
  %1132 = load float, ptr addrspace(3) %1131, align 16, !dbg !105
  %1133 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 20, !dbg !105
  %1134 = load float, ptr addrspace(3) %1133, align 4, !dbg !105
  %1135 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 24, !dbg !105
  %1136 = load float, ptr addrspace(3) %1135, align 8, !dbg !105
  %1137 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 28, !dbg !105
  %1138 = load float, ptr addrspace(3) %1137, align 4, !dbg !105
  %1139 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 32, !dbg !105
  %1140 = load float, ptr addrspace(3) %1139, align 32, !dbg !105
  %1141 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 36, !dbg !105
  %1142 = load float, ptr addrspace(3) %1141, align 4, !dbg !105
  %1143 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 40, !dbg !105
  %1144 = load float, ptr addrspace(3) %1143, align 8, !dbg !105
  %1145 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 44, !dbg !105
  %1146 = load float, ptr addrspace(3) %1145, align 4, !dbg !105
  %1147 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 48, !dbg !105
  %1148 = load float, ptr addrspace(3) %1147, align 16, !dbg !105
  %1149 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 52, !dbg !105
  %1150 = load float, ptr addrspace(3) %1149, align 4, !dbg !105
  %1151 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 56, !dbg !105
  %1152 = load float, ptr addrspace(3) %1151, align 8, !dbg !105
  %1153 = getelementptr inbounds nuw i8, ptr addrspace(3) %1123, i32 60, !dbg !105
  %1154 = load float, ptr addrspace(3) %1153, align 4, !dbg !105
  %1155 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %386, !dbg !111
  %1156 = ptrtoint ptr addrspace(3) %1155 to i32, !dbg !111
  %1157 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1156) #4, !dbg !111
  %1158 = extractvalue { i32, i32, i32, i32 } %1157, 0, !dbg !111
  %1159 = bitcast i32 %1158 to float, !dbg !111
  %1160 = extractvalue { i32, i32, i32, i32 } %1157, 1, !dbg !111
  %1161 = bitcast i32 %1160 to float, !dbg !111
  %1162 = extractvalue { i32, i32, i32, i32 } %1157, 2, !dbg !111
  %1163 = bitcast i32 %1162 to float, !dbg !111
  %1164 = extractvalue { i32, i32, i32, i32 } %1157, 3, !dbg !111
  %1165 = bitcast i32 %1164 to float, !dbg !111
  %1166 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %398, !dbg !111
  %1167 = ptrtoint ptr addrspace(3) %1166 to i32, !dbg !111
  %1168 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1167) #4, !dbg !111
  %1169 = extractvalue { i32, i32, i32, i32 } %1168, 0, !dbg !111
  %1170 = bitcast i32 %1169 to float, !dbg !111
  %1171 = extractvalue { i32, i32, i32, i32 } %1168, 1, !dbg !111
  %1172 = bitcast i32 %1171 to float, !dbg !111
  %1173 = extractvalue { i32, i32, i32, i32 } %1168, 2, !dbg !111
  %1174 = bitcast i32 %1173 to float, !dbg !111
  %1175 = extractvalue { i32, i32, i32, i32 } %1168, 3, !dbg !111
  %1176 = bitcast i32 %1175 to float, !dbg !111
  %1177 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %410, !dbg !111
  %1178 = ptrtoint ptr addrspace(3) %1177 to i32, !dbg !111
  %1179 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1178) #4, !dbg !111
  %1180 = extractvalue { i32, i32, i32, i32 } %1179, 0, !dbg !111
  %1181 = bitcast i32 %1180 to float, !dbg !111
  %1182 = extractvalue { i32, i32, i32, i32 } %1179, 1, !dbg !111
  %1183 = bitcast i32 %1182 to float, !dbg !111
  %1184 = extractvalue { i32, i32, i32, i32 } %1179, 2, !dbg !111
  %1185 = bitcast i32 %1184 to float, !dbg !111
  %1186 = extractvalue { i32, i32, i32, i32 } %1179, 3, !dbg !111
  %1187 = bitcast i32 %1186 to float, !dbg !111
  %1188 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %422, !dbg !111
  %1189 = ptrtoint ptr addrspace(3) %1188 to i32, !dbg !111
  %1190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1189) #4, !dbg !111
  %1191 = extractvalue { i32, i32, i32, i32 } %1190, 0, !dbg !111
  %1192 = bitcast i32 %1191 to float, !dbg !111
  %1193 = extractvalue { i32, i32, i32, i32 } %1190, 1, !dbg !111
  %1194 = bitcast i32 %1193 to float, !dbg !111
  %1195 = extractvalue { i32, i32, i32, i32 } %1190, 2, !dbg !111
  %1196 = bitcast i32 %1195 to float, !dbg !111
  %1197 = extractvalue { i32, i32, i32, i32 } %1190, 3, !dbg !111
  %1198 = bitcast i32 %1197 to float, !dbg !111
  %1199 = tail call float @llvm.fmuladd.f32(float %1124, float %1159, float %1122), !dbg !120
  %1200 = tail call float @llvm.fmuladd.f32(float %1126, float %1161, float %1199), !dbg !120
  %1201 = tail call float @llvm.fmuladd.f32(float %1128, float %1163, float %1200), !dbg !120
  %1202 = tail call float @llvm.fmuladd.f32(float %1130, float %1165, float %1201), !dbg !120
  %1203 = tail call float @llvm.fmuladd.f32(float %1132, float %1170, float %1202), !dbg !120
  %1204 = tail call float @llvm.fmuladd.f32(float %1134, float %1172, float %1203), !dbg !120
  %1205 = tail call float @llvm.fmuladd.f32(float %1136, float %1174, float %1204), !dbg !120
  %1206 = tail call float @llvm.fmuladd.f32(float %1138, float %1176, float %1205), !dbg !120
  %1207 = tail call float @llvm.fmuladd.f32(float %1140, float %1181, float %1206), !dbg !120
  %1208 = tail call float @llvm.fmuladd.f32(float %1142, float %1183, float %1207), !dbg !120
  %1209 = tail call float @llvm.fmuladd.f32(float %1144, float %1185, float %1208), !dbg !120
  %1210 = tail call float @llvm.fmuladd.f32(float %1146, float %1187, float %1209), !dbg !120
  %1211 = tail call float @llvm.fmuladd.f32(float %1148, float %1192, float %1210), !dbg !120
  %1212 = tail call float @llvm.fmuladd.f32(float %1150, float %1194, float %1211), !dbg !120
  %1213 = tail call float @llvm.fmuladd.f32(float %1152, float %1196, float %1212), !dbg !120
  %1214 = tail call float @llvm.fmuladd.f32(float %1154, float %1198, float %1213), !dbg !120
  %1215 = bitcast float %1214 to i32, !dbg !120
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %318, i32 %1215) #4, !dbg !120
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !120
  %1216 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %388) #4, !dbg !120
  %1217 = extractvalue { i32, i32, i32, i32 } %1216, 0, !dbg !120
  %1218 = bitcast i32 %1217 to float, !dbg !120
  %1219 = extractvalue { i32, i32, i32, i32 } %1216, 1, !dbg !120
  %1220 = bitcast i32 %1219 to float, !dbg !120
  %1221 = extractvalue { i32, i32, i32, i32 } %1216, 2, !dbg !120
  %1222 = bitcast i32 %1221 to float, !dbg !120
  %1223 = extractvalue { i32, i32, i32, i32 } %1216, 3, !dbg !120
  %1224 = bitcast i32 %1223 to float, !dbg !120
  %1225 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %400) #4, !dbg !120
  %1226 = extractvalue { i32, i32, i32, i32 } %1225, 0, !dbg !120
  %1227 = bitcast i32 %1226 to float, !dbg !120
  %1228 = extractvalue { i32, i32, i32, i32 } %1225, 1, !dbg !120
  %1229 = bitcast i32 %1228 to float, !dbg !120
  %1230 = extractvalue { i32, i32, i32, i32 } %1225, 2, !dbg !120
  %1231 = bitcast i32 %1230 to float, !dbg !120
  %1232 = extractvalue { i32, i32, i32, i32 } %1225, 3, !dbg !120
  %1233 = bitcast i32 %1232 to float, !dbg !120
  %1234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %412) #4, !dbg !120
  %1235 = extractvalue { i32, i32, i32, i32 } %1234, 0, !dbg !120
  %1236 = bitcast i32 %1235 to float, !dbg !120
  %1237 = extractvalue { i32, i32, i32, i32 } %1234, 1, !dbg !120
  %1238 = bitcast i32 %1237 to float, !dbg !120
  %1239 = extractvalue { i32, i32, i32, i32 } %1234, 2, !dbg !120
  %1240 = bitcast i32 %1239 to float, !dbg !120
  %1241 = extractvalue { i32, i32, i32, i32 } %1234, 3, !dbg !120
  %1242 = bitcast i32 %1241 to float, !dbg !120
  %1243 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %424) #4, !dbg !120
  %1244 = extractvalue { i32, i32, i32, i32 } %1243, 0, !dbg !120
  %1245 = bitcast i32 %1244 to float, !dbg !120
  %1246 = extractvalue { i32, i32, i32, i32 } %1243, 1, !dbg !120
  %1247 = bitcast i32 %1246 to float, !dbg !120
  %1248 = extractvalue { i32, i32, i32, i32 } %1243, 2, !dbg !120
  %1249 = bitcast i32 %1248 to float, !dbg !120
  %1250 = extractvalue { i32, i32, i32, i32 } %1243, 3, !dbg !120
  %1251 = bitcast i32 %1250 to float, !dbg !120
  %1252 = tail call float @llvm.fmuladd.f32(float %719, float %1218, float 0.000000e+00), !dbg !121
  %1253 = tail call float @llvm.fmuladd.f32(float %721, float %1220, float %1252), !dbg !121
  %1254 = tail call float @llvm.fmuladd.f32(float %723, float %1222, float %1253), !dbg !121
  %1255 = tail call float @llvm.fmuladd.f32(float %725, float %1224, float %1254), !dbg !121
  %1256 = tail call float @llvm.fmuladd.f32(float %727, float %1227, float %1255), !dbg !121
  %1257 = tail call float @llvm.fmuladd.f32(float %729, float %1229, float %1256), !dbg !121
  %1258 = tail call float @llvm.fmuladd.f32(float %731, float %1231, float %1257), !dbg !121
  %1259 = tail call float @llvm.fmuladd.f32(float %733, float %1233, float %1258), !dbg !121
  %1260 = tail call float @llvm.fmuladd.f32(float %735, float %1236, float %1259), !dbg !121
  %1261 = tail call float @llvm.fmuladd.f32(float %737, float %1238, float %1260), !dbg !121
  %1262 = tail call float @llvm.fmuladd.f32(float %739, float %1240, float %1261), !dbg !121
  %1263 = tail call float @llvm.fmuladd.f32(float %741, float %1242, float %1262), !dbg !121
  %1264 = tail call float @llvm.fmuladd.f32(float %743, float %1245, float %1263), !dbg !121
  %1265 = tail call float @llvm.fmuladd.f32(float %745, float %1247, float %1264), !dbg !121
  %1266 = tail call float @llvm.fmuladd.f32(float %747, float %1249, float %1265), !dbg !121
  %1267 = tail call float @llvm.fmuladd.f32(float %749, float %1251, float %1266), !dbg !121
  %1268 = fsub float 0.000000e+00, %1267, !dbg !122
  %1269 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8208), i32 %351, !dbg !103
  %1270 = load float, ptr addrspace(3) %1269, align 64, !dbg !103
  %1271 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 4, !dbg !103
  %1272 = load float, ptr addrspace(3) %1271, align 4, !dbg !103
  %1273 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 8, !dbg !103
  %1274 = load float, ptr addrspace(3) %1273, align 8, !dbg !103
  %1275 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 12, !dbg !103
  %1276 = load float, ptr addrspace(3) %1275, align 4, !dbg !103
  %1277 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 16, !dbg !103
  %1278 = load float, ptr addrspace(3) %1277, align 16, !dbg !103
  %1279 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 20, !dbg !103
  %1280 = load float, ptr addrspace(3) %1279, align 4, !dbg !103
  %1281 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 24, !dbg !103
  %1282 = load float, ptr addrspace(3) %1281, align 8, !dbg !103
  %1283 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 28, !dbg !103
  %1284 = load float, ptr addrspace(3) %1283, align 4, !dbg !103
  %1285 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 32, !dbg !103
  %1286 = load float, ptr addrspace(3) %1285, align 32, !dbg !103
  %1287 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 36, !dbg !103
  %1288 = load float, ptr addrspace(3) %1287, align 4, !dbg !103
  %1289 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 40, !dbg !103
  %1290 = load float, ptr addrspace(3) %1289, align 8, !dbg !103
  %1291 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 44, !dbg !103
  %1292 = load float, ptr addrspace(3) %1291, align 4, !dbg !103
  %1293 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 48, !dbg !103
  %1294 = load float, ptr addrspace(3) %1293, align 16, !dbg !103
  %1295 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 52, !dbg !103
  %1296 = load float, ptr addrspace(3) %1295, align 4, !dbg !103
  %1297 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 56, !dbg !103
  %1298 = load float, ptr addrspace(3) %1297, align 8, !dbg !103
  %1299 = getelementptr inbounds nuw i8, ptr addrspace(3) %1269, i32 60, !dbg !103
  %1300 = load float, ptr addrspace(3) %1299, align 4, !dbg !103
  %1301 = tail call float @llvm.fmuladd.f32(float %1270, float %487, float 0.000000e+00), !dbg !123
  %1302 = tail call float @llvm.fmuladd.f32(float %1272, float %489, float %1301), !dbg !123
  %1303 = tail call float @llvm.fmuladd.f32(float %1274, float %491, float %1302), !dbg !123
  %1304 = tail call float @llvm.fmuladd.f32(float %1276, float %493, float %1303), !dbg !123
  %1305 = tail call float @llvm.fmuladd.f32(float %1278, float %498, float %1304), !dbg !123
  %1306 = tail call float @llvm.fmuladd.f32(float %1280, float %500, float %1305), !dbg !123
  %1307 = tail call float @llvm.fmuladd.f32(float %1282, float %502, float %1306), !dbg !123
  %1308 = tail call float @llvm.fmuladd.f32(float %1284, float %504, float %1307), !dbg !123
  %1309 = tail call float @llvm.fmuladd.f32(float %1286, float %509, float %1308), !dbg !123
  %1310 = tail call float @llvm.fmuladd.f32(float %1288, float %511, float %1309), !dbg !123
  %1311 = tail call float @llvm.fmuladd.f32(float %1290, float %513, float %1310), !dbg !123
  %1312 = tail call float @llvm.fmuladd.f32(float %1292, float %515, float %1311), !dbg !123
  %1313 = tail call float @llvm.fmuladd.f32(float %1294, float %520, float %1312), !dbg !123
  %1314 = tail call float @llvm.fmuladd.f32(float %1296, float %522, float %1313), !dbg !123
  %1315 = tail call float @llvm.fmuladd.f32(float %1298, float %524, float %1314), !dbg !123
  %1316 = tail call float @llvm.fmuladd.f32(float %1300, float %526, float %1315), !dbg !123
  %1317 = tail call float @llvm.fmuladd.f32(float %1076, float %970, float %1316), !dbg !124
  %1318 = tail call float @llvm.fmuladd.f32(float %1078, float %972, float %1317), !dbg !124
  %1319 = tail call float @llvm.fmuladd.f32(float %1080, float %974, float %1318), !dbg !124
  %1320 = tail call float @llvm.fmuladd.f32(float %1082, float %976, float %1319), !dbg !124
  %1321 = tail call float @llvm.fmuladd.f32(float %1084, float %979, float %1320), !dbg !124
  %1322 = tail call float @llvm.fmuladd.f32(float %1086, float %981, float %1321), !dbg !124
  %1323 = tail call float @llvm.fmuladd.f32(float %1088, float %983, float %1322), !dbg !124
  %1324 = tail call float @llvm.fmuladd.f32(float %1090, float %985, float %1323), !dbg !124
  %1325 = tail call float @llvm.fmuladd.f32(float %1092, float %988, float %1324), !dbg !124
  %1326 = tail call float @llvm.fmuladd.f32(float %1094, float %990, float %1325), !dbg !124
  %1327 = tail call float @llvm.fmuladd.f32(float %1096, float %992, float %1326), !dbg !124
  %1328 = tail call float @llvm.fmuladd.f32(float %1098, float %994, float %1327), !dbg !124
  %1329 = tail call float @llvm.fmuladd.f32(float %1100, float %997, float %1328), !dbg !124
  %1330 = tail call float @llvm.fmuladd.f32(float %1102, float %999, float %1329), !dbg !124
  %1331 = tail call float @llvm.fmuladd.f32(float %1104, float %1001, float %1330), !dbg !124
  %1332 = tail call float @llvm.fmuladd.f32(float %1106, float %1003, float %1331), !dbg !124
  %1333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #4, !dbg !118
  %1334 = extractvalue { i32, i32, i32, i32 } %1333, 0, !dbg !118
  %1335 = bitcast i32 %1334 to float, !dbg !118
  %1336 = extractvalue { i32, i32, i32, i32 } %1333, 1, !dbg !118
  %1337 = bitcast i32 %1336 to float, !dbg !118
  %1338 = extractvalue { i32, i32, i32, i32 } %1333, 2, !dbg !118
  %1339 = bitcast i32 %1338 to float, !dbg !118
  %1340 = extractvalue { i32, i32, i32, i32 } %1333, 3, !dbg !118
  %1341 = bitcast i32 %1340 to float, !dbg !118
  %1342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #4, !dbg !118
  %1343 = extractvalue { i32, i32, i32, i32 } %1342, 0, !dbg !118
  %1344 = bitcast i32 %1343 to float, !dbg !118
  %1345 = extractvalue { i32, i32, i32, i32 } %1342, 1, !dbg !118
  %1346 = bitcast i32 %1345 to float, !dbg !118
  %1347 = extractvalue { i32, i32, i32, i32 } %1342, 2, !dbg !118
  %1348 = bitcast i32 %1347 to float, !dbg !118
  %1349 = extractvalue { i32, i32, i32, i32 } %1342, 3, !dbg !118
  %1350 = bitcast i32 %1349 to float, !dbg !118
  %1351 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %506) #4, !dbg !118
  %1352 = extractvalue { i32, i32, i32, i32 } %1351, 0, !dbg !118
  %1353 = bitcast i32 %1352 to float, !dbg !118
  %1354 = extractvalue { i32, i32, i32, i32 } %1351, 1, !dbg !118
  %1355 = bitcast i32 %1354 to float, !dbg !118
  %1356 = extractvalue { i32, i32, i32, i32 } %1351, 2, !dbg !118
  %1357 = bitcast i32 %1356 to float, !dbg !118
  %1358 = extractvalue { i32, i32, i32, i32 } %1351, 3, !dbg !118
  %1359 = bitcast i32 %1358 to float, !dbg !118
  %1360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #4, !dbg !118
  %1361 = extractvalue { i32, i32, i32, i32 } %1360, 0, !dbg !118
  %1362 = bitcast i32 %1361 to float, !dbg !118
  %1363 = extractvalue { i32, i32, i32, i32 } %1360, 1, !dbg !118
  %1364 = bitcast i32 %1363 to float, !dbg !118
  %1365 = extractvalue { i32, i32, i32, i32 } %1360, 2, !dbg !118
  %1366 = bitcast i32 %1365 to float, !dbg !118
  %1367 = extractvalue { i32, i32, i32, i32 } %1360, 3, !dbg !118
  %1368 = bitcast i32 %1367 to float, !dbg !118
  %1369 = tail call float @llvm.fmuladd.f32(float %1124, float %1335, float %1332), !dbg !125
  %1370 = tail call float @llvm.fmuladd.f32(float %1126, float %1337, float %1369), !dbg !125
  %1371 = tail call float @llvm.fmuladd.f32(float %1128, float %1339, float %1370), !dbg !125
  %1372 = tail call float @llvm.fmuladd.f32(float %1130, float %1341, float %1371), !dbg !125
  %1373 = tail call float @llvm.fmuladd.f32(float %1132, float %1344, float %1372), !dbg !125
  %1374 = tail call float @llvm.fmuladd.f32(float %1134, float %1346, float %1373), !dbg !125
  %1375 = tail call float @llvm.fmuladd.f32(float %1136, float %1348, float %1374), !dbg !125
  %1376 = tail call float @llvm.fmuladd.f32(float %1138, float %1350, float %1375), !dbg !125
  %1377 = tail call float @llvm.fmuladd.f32(float %1140, float %1353, float %1376), !dbg !125
  %1378 = tail call float @llvm.fmuladd.f32(float %1142, float %1355, float %1377), !dbg !125
  %1379 = tail call float @llvm.fmuladd.f32(float %1144, float %1357, float %1378), !dbg !125
  %1380 = tail call float @llvm.fmuladd.f32(float %1146, float %1359, float %1379), !dbg !125
  %1381 = tail call float @llvm.fmuladd.f32(float %1148, float %1362, float %1380), !dbg !125
  %1382 = tail call float @llvm.fmuladd.f32(float %1150, float %1364, float %1381), !dbg !125
  %1383 = tail call float @llvm.fmuladd.f32(float %1152, float %1366, float %1382), !dbg !125
  %1384 = tail call float @llvm.fmuladd.f32(float %1154, float %1368, float %1383), !dbg !125
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !125
  %1385 = bitcast float %1384 to i32, !dbg !125
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x1.shared.b16 [$0], {$1};", "r,r"(i32 %298, i32 %1385) #4, !dbg !125
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !125
  %1386 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %484) #4, !dbg !125
  %1387 = extractvalue { i32, i32, i32, i32 } %1386, 0, !dbg !125
  %1388 = bitcast i32 %1387 to float, !dbg !125
  %1389 = extractvalue { i32, i32, i32, i32 } %1386, 1, !dbg !125
  %1390 = bitcast i32 %1389 to float, !dbg !125
  %1391 = extractvalue { i32, i32, i32, i32 } %1386, 2, !dbg !125
  %1392 = bitcast i32 %1391 to float, !dbg !125
  %1393 = extractvalue { i32, i32, i32, i32 } %1386, 3, !dbg !125
  %1394 = bitcast i32 %1393 to float, !dbg !125
  %1395 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %495) #4, !dbg !125
  %1396 = extractvalue { i32, i32, i32, i32 } %1395, 0, !dbg !125
  %1397 = bitcast i32 %1396 to float, !dbg !125
  %1398 = extractvalue { i32, i32, i32, i32 } %1395, 1, !dbg !125
  %1399 = bitcast i32 %1398 to float, !dbg !125
  %1400 = extractvalue { i32, i32, i32, i32 } %1395, 2, !dbg !125
  %1401 = bitcast i32 %1400 to float, !dbg !125
  %1402 = extractvalue { i32, i32, i32, i32 } %1395, 3, !dbg !125
  %1403 = bitcast i32 %1402 to float, !dbg !125
  %1404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %506) #4, !dbg !125
  %1405 = extractvalue { i32, i32, i32, i32 } %1404, 0, !dbg !125
  %1406 = bitcast i32 %1405 to float, !dbg !125
  %1407 = extractvalue { i32, i32, i32, i32 } %1404, 1, !dbg !125
  %1408 = bitcast i32 %1407 to float, !dbg !125
  %1409 = extractvalue { i32, i32, i32, i32 } %1404, 2, !dbg !125
  %1410 = bitcast i32 %1409 to float, !dbg !125
  %1411 = extractvalue { i32, i32, i32, i32 } %1404, 3, !dbg !125
  %1412 = bitcast i32 %1411 to float, !dbg !125
  %1413 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %517) #4, !dbg !125
  %1414 = extractvalue { i32, i32, i32, i32 } %1413, 0, !dbg !125
  %1415 = bitcast i32 %1414 to float, !dbg !125
  %1416 = extractvalue { i32, i32, i32, i32 } %1413, 1, !dbg !125
  %1417 = bitcast i32 %1416 to float, !dbg !125
  %1418 = extractvalue { i32, i32, i32, i32 } %1413, 2, !dbg !125
  %1419 = bitcast i32 %1418 to float, !dbg !125
  %1420 = extractvalue { i32, i32, i32, i32 } %1413, 3, !dbg !125
  %1421 = bitcast i32 %1420 to float, !dbg !125
  %1422 = tail call float @llvm.fmuladd.f32(float %719, float %1388, float 0.000000e+00), !dbg !126
  %1423 = tail call float @llvm.fmuladd.f32(float %721, float %1390, float %1422), !dbg !126
  %1424 = tail call float @llvm.fmuladd.f32(float %723, float %1392, float %1423), !dbg !126
  %1425 = tail call float @llvm.fmuladd.f32(float %725, float %1394, float %1424), !dbg !126
  %1426 = tail call float @llvm.fmuladd.f32(float %727, float %1397, float %1425), !dbg !126
  %1427 = tail call float @llvm.fmuladd.f32(float %729, float %1399, float %1426), !dbg !126
  %1428 = tail call float @llvm.fmuladd.f32(float %731, float %1401, float %1427), !dbg !126
  %1429 = tail call float @llvm.fmuladd.f32(float %733, float %1403, float %1428), !dbg !126
  %1430 = tail call float @llvm.fmuladd.f32(float %735, float %1406, float %1429), !dbg !126
  %1431 = tail call float @llvm.fmuladd.f32(float %737, float %1408, float %1430), !dbg !126
  %1432 = tail call float @llvm.fmuladd.f32(float %739, float %1410, float %1431), !dbg !126
  %1433 = tail call float @llvm.fmuladd.f32(float %741, float %1412, float %1432), !dbg !126
  %1434 = tail call float @llvm.fmuladd.f32(float %743, float %1415, float %1433), !dbg !126
  %1435 = tail call float @llvm.fmuladd.f32(float %745, float %1417, float %1434), !dbg !126
  %1436 = tail call float @llvm.fmuladd.f32(float %747, float %1419, float %1435), !dbg !126
  %1437 = tail call float @llvm.fmuladd.f32(float %749, float %1421, float %1436), !dbg !126
  %1438 = fsub float 0.000000e+00, %1437, !dbg !127
  %1439 = fptrunc float %293 to bfloat, !dbg !128
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %1440 = and i32 %7, 63, !dbg !129
  %1441 = xor i32 %50, %1440, !dbg !129
  %1442 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %1441, !dbg !129
  %1443 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1442, i32 %14, !dbg !129
  %1444 = insertelement <1 x bfloat> poison, bfloat %1439, i64 0, !dbg !129
  store <1 x bfloat> %1444, ptr addrspace(3) %1443, align 2, !dbg !129
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !129
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %1445 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !129
  %1446 = extractvalue { i32, i1 } %1445, 1, !dbg !129
  %1447 = and i1 %37, %1446, !dbg !129
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1447, ptr %290, i32 0, i32 %42, ptr addrspace(3) @global_smem) #4, !dbg !129
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !129
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !129
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !129
  %1448 = fptrunc float %299 to bfloat, !dbg !130
  %1449 = insertelement <1 x bfloat> poison, bfloat %1448, i64 0, !dbg !131
  store <1 x bfloat> %1449, ptr addrspace(3) %1443, align 2, !dbg !131
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !131
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !131
  %1450 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !131
  %1451 = extractvalue { i32, i1 } %1450, 1, !dbg !131
  %1452 = and i1 %37, %1451, !dbg !131
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1452, ptr %290, i32 16, i32 %57, ptr addrspace(3) @global_smem) #4, !dbg !131
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !131
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !131
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !131
  %1453 = fptrunc float %303 to bfloat, !dbg !132
  %1454 = insertelement <1 x bfloat> poison, bfloat %1453, i64 0, !dbg !133
  store <1 x bfloat> %1454, ptr addrspace(3) %1443, align 2, !dbg !133
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !133
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !133
  %1455 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !133
  %1456 = extractvalue { i32, i1 } %1455, 1, !dbg !133
  %1457 = and i1 %37, %1456, !dbg !133
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1457, ptr %290, i32 32, i32 %63, ptr addrspace(3) @global_smem) #4, !dbg !133
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !133
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !133
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !133
  %1458 = fptrunc float %307 to bfloat, !dbg !134
  %1459 = insertelement <1 x bfloat> poison, bfloat %1458, i64 0, !dbg !135
  store <1 x bfloat> %1459, ptr addrspace(3) %1443, align 2, !dbg !135
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !135
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !135
  %1460 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !135
  %1461 = extractvalue { i32, i1 } %1460, 1, !dbg !135
  %1462 = and i1 %37, %1461, !dbg !135
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1462, ptr %290, i32 48, i32 %69, ptr addrspace(3) @global_smem) #4, !dbg !135
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !135
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !135
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !135
  %1463 = fptrunc float %543 to bfloat, !dbg !136
  %1464 = insertelement <1 x bfloat> poison, bfloat %1463, i64 0, !dbg !137
  store <1 x bfloat> %1464, ptr addrspace(3) %1443, align 2, !dbg !137
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !137
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !137
  %1465 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !137
  %1466 = extractvalue { i32, i1 } %1465, 1, !dbg !137
  %1467 = and i1 %37, %1466, !dbg !137
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1467, ptr %290, i32 0, i32 %57, ptr addrspace(3) @global_smem) #4, !dbg !137
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !137
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !137
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !137
  %1468 = fptrunc float %1073 to bfloat, !dbg !138
  %1469 = insertelement <1 x bfloat> poison, bfloat %1468, i64 0, !dbg !139
  store <1 x bfloat> %1469, ptr addrspace(3) %1443, align 2, !dbg !139
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !139
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !139
  %1470 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !139
  %1471 = extractvalue { i32, i1 } %1470, 1, !dbg !139
  %1472 = and i1 %37, %1471, !dbg !139
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1472, ptr %290, i32 0, i32 %63, ptr addrspace(3) @global_smem) #4, !dbg !139
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !139
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !139
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !139
  %1473 = fptrunc float %714 to bfloat, !dbg !140
  %1474 = insertelement <1 x bfloat> poison, bfloat %1473, i64 0, !dbg !141
  store <1 x bfloat> %1474, ptr addrspace(3) %1443, align 2, !dbg !141
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !141
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !141
  %1475 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !141
  %1476 = extractvalue { i32, i1 } %1475, 1, !dbg !141
  %1477 = and i1 %37, %1476, !dbg !141
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1477, ptr %290, i32 16, i32 %63, ptr addrspace(3) @global_smem) #4, !dbg !141
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !141
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !141
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !141
  %1478 = fptrunc float %1438 to bfloat, !dbg !142
  %1479 = insertelement <1 x bfloat> poison, bfloat %1478, i64 0, !dbg !143
  store <1 x bfloat> %1479, ptr addrspace(3) %1443, align 2, !dbg !143
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !143
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !143
  %1480 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !143
  %1481 = extractvalue { i32, i1 } %1480, 1, !dbg !143
  %1482 = and i1 %37, %1481, !dbg !143
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1482, ptr %290, i32 0, i32 %69, ptr addrspace(3) @global_smem) #4, !dbg !143
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !143
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !143
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !143
  %1483 = fptrunc float %1268 to bfloat, !dbg !144
  %1484 = insertelement <1 x bfloat> poison, bfloat %1483, i64 0, !dbg !145
  store <1 x bfloat> %1484, ptr addrspace(3) %1443, align 2, !dbg !145
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !145
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !145
  %1485 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !145
  %1486 = extractvalue { i32, i1 } %1485, 1, !dbg !145
  %1487 = and i1 %37, %1486, !dbg !145
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1487, ptr %290, i32 16, i32 %69, ptr addrspace(3) @global_smem) #4, !dbg !145
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !145
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !145
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !145
  %1488 = fptrunc float %887 to bfloat, !dbg !146
  %1489 = insertelement <1 x bfloat> poison, bfloat %1488, i64 0, !dbg !147
  store <1 x bfloat> %1489, ptr addrspace(3) %1443, align 2, !dbg !147
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #4, !dbg !147
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !147
  %1490 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !147
  %1491 = extractvalue { i32, i1 } %1490, 1, !dbg !147
  %1492 = and i1 %37, %1491, !dbg !147
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %1492, ptr %290, i32 32, i32 %69, ptr addrspace(3) @global_smem) #4, !dbg !147
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !147
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !147
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, -2147483648) i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 1, 65536) i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #4

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #6

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "solve_tril.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/utils")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "merge_16x16_to_64x64_inverse_kernel", linkageName: "merge_16x16_to_64x64_inverse_kernel", scope: !1, file: !1, line: 183, type: !6, scopeLine: 183, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 195, column: 30, scope: !5)
!9 = !DILocation(line: 195, column: 48, scope: !5)
!10 = !DILocation(line: 204, column: 23, scope: !5)
!11 = !DILocation(line: 205, column: 25, scope: !5)
!12 = !DILocation(line: 202, column: 25, scope: !5)
!13 = !DILocation(line: 207, column: 27, scope: !5)
!14 = !DILocation(line: 207, column: 9, scope: !5)
!15 = !DILocation(line: 208, column: 10, scope: !5)
!16 = !DILocation(line: 220, column: 61, scope: !5)
!17 = !DILocation(line: 221, column: 64, scope: !5)
!18 = !DILocation(line: 222, column: 35, scope: !5)
!19 = !DILocation(line: 222, column: 28, scope: !5)
!20 = !DILocation(line: 223, column: 40, scope: !5)
!21 = !DILocation(line: 223, column: 28, scope: !5)
!22 = !DILocation(line: 224, column: 40, scope: !5)
!23 = !DILocation(line: 224, column: 28, scope: !5)
!24 = !DILocation(line: 225, column: 40, scope: !5)
!25 = !DILocation(line: 225, column: 28, scope: !5)
!26 = !DILocation(line: 228, column: 15, scope: !5)
!27 = !DILocation(line: 228, column: 38, scope: !5)
!28 = !DILocation(line: 229, column: 15, scope: !5)
!29 = !DILocation(line: 229, column: 38, scope: !5)
!30 = !DILocation(line: 230, column: 15, scope: !5)
!31 = !DILocation(line: 230, column: 38, scope: !5)
!32 = !DILocation(line: 231, column: 15, scope: !5)
!33 = !DILocation(line: 231, column: 38, scope: !5)
!34 = !DILocation(line: 233, column: 34, scope: !5)
!35 = !DILocation(line: 233, column: 22, scope: !5)
!36 = !DILocation(line: 234, column: 49, scope: !5)
!37 = !DILocation(line: 234, column: 30, scope: !5)
!38 = !DILocation(line: 234, column: 54, scope: !5)
!39 = !DILocation(line: 234, column: 26, scope: !5)
!40 = !DILocation(line: 234, column: 18, scope: !5)
!41 = !DILocation(line: 235, column: 43, scope: !5)
!42 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !5, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!45 = !DILocation(line: 235, column: 52, scope: !5)
!46 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 235, column: 18, scope: !5)
!48 = !DILocation(line: 236, column: 35, scope: !5)
!49 = !DILocation(line: 236, column: 56, scope: !5)
!50 = !DILocation(line: 237, column: 27, scope: !5)
!51 = !DILocation(line: 238, column: 49, scope: !5)
!52 = !DILocation(line: 238, column: 30, scope: !5)
!53 = !DILocation(line: 238, column: 54, scope: !5)
!54 = !DILocation(line: 238, column: 60, scope: !5)
!55 = !DILocation(line: 238, column: 26, scope: !5)
!56 = !DILocation(line: 238, column: 18, scope: !5)
!57 = !DILocation(line: 239, column: 43, scope: !5)
!58 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !59)
!59 = !DILocation(line: 239, column: 52, scope: !5)
!60 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !59)
!61 = !DILocation(line: 239, column: 18, scope: !5)
!62 = !DILocation(line: 240, column: 39, scope: !5)
!63 = !DILocation(line: 240, column: 35, scope: !5)
!64 = !DILocation(line: 240, column: 61, scope: !5)
!65 = !DILocation(line: 241, column: 27, scope: !5)
!66 = !DILocation(line: 242, column: 49, scope: !5)
!67 = !DILocation(line: 242, column: 30, scope: !5)
!68 = !DILocation(line: 242, column: 54, scope: !5)
!69 = !DILocation(line: 242, column: 60, scope: !5)
!70 = !DILocation(line: 242, column: 26, scope: !5)
!71 = !DILocation(line: 242, column: 18, scope: !5)
!72 = !DILocation(line: 243, column: 43, scope: !5)
!73 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !74)
!74 = !DILocation(line: 243, column: 52, scope: !5)
!75 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !74)
!76 = !DILocation(line: 243, column: 18, scope: !5)
!77 = !DILocation(line: 244, column: 39, scope: !5)
!78 = !DILocation(line: 244, column: 35, scope: !5)
!79 = !DILocation(line: 244, column: 61, scope: !5)
!80 = !DILocation(line: 245, column: 27, scope: !5)
!81 = !DILocation(line: 246, column: 49, scope: !5)
!82 = !DILocation(line: 246, column: 30, scope: !5)
!83 = !DILocation(line: 246, column: 54, scope: !5)
!84 = !DILocation(line: 246, column: 60, scope: !5)
!85 = !DILocation(line: 246, column: 26, scope: !5)
!86 = !DILocation(line: 246, column: 18, scope: !5)
!87 = !DILocation(line: 247, column: 43, scope: !5)
!88 = !DILocation(line: 290, column: 36, scope: !43, inlinedAt: !89)
!89 = !DILocation(line: 247, column: 52, scope: !5)
!90 = !DILocation(line: 260, column: 15, scope: !43, inlinedAt: !89)
!91 = !DILocation(line: 247, column: 18, scope: !5)
!92 = !DILocation(line: 248, column: 39, scope: !5)
!93 = !DILocation(line: 248, column: 35, scope: !5)
!94 = !DILocation(line: 248, column: 61, scope: !5)
!95 = !DILocation(line: 206, column: 26, scope: !5)
!96 = !DILocation(line: 249, column: 15, scope: !5)
!97 = !DILocation(line: 250, column: 15, scope: !5)
!98 = !DILocation(line: 251, column: 15, scope: !5)
!99 = !DILocation(line: 252, column: 15, scope: !5)
!100 = !DILocation(line: 268, column: 27, scope: !5)
!101 = !DILocation(line: 269, column: 27, scope: !5)
!102 = !DILocation(line: 270, column: 27, scope: !5)
!103 = !DILocation(line: 271, column: 27, scope: !5)
!104 = !DILocation(line: 272, column: 27, scope: !5)
!105 = !DILocation(line: 273, column: 27, scope: !5)
!106 = !DILocation(line: 275, column: 38, scope: !5)
!107 = !DILocation(line: 275, column: 78, scope: !5)
!108 = !DILocation(line: 275, column: 15, scope: !5)
!109 = !DILocation(line: 276, column: 38, scope: !5)
!110 = !DILocation(line: 276, column: 78, scope: !5)
!111 = !DILocation(line: 276, column: 15, scope: !5)
!112 = !DILocation(line: 277, column: 38, scope: !5)
!113 = !DILocation(line: 277, column: 78, scope: !5)
!114 = !DILocation(line: 277, column: 15, scope: !5)
!115 = !DILocation(line: 281, column: 23, scope: !5)
!116 = !DILocation(line: 282, column: 23, scope: !5)
!117 = !DILocation(line: 281, column: 8, scope: !5)
!118 = !DILocation(line: 279, column: 15, scope: !5)
!119 = !DILocation(line: 287, column: 23, scope: !5)
!120 = !DILocation(line: 288, column: 23, scope: !5)
!121 = !DILocation(line: 287, column: 8, scope: !5)
!122 = !DILocation(line: 285, column: 15, scope: !5)
!123 = !DILocation(line: 293, column: 23, scope: !5)
!124 = !DILocation(line: 294, column: 23, scope: !5)
!125 = !DILocation(line: 295, column: 23, scope: !5)
!126 = !DILocation(line: 293, column: 8, scope: !5)
!127 = !DILocation(line: 291, column: 15, scope: !5)
!128 = !DILocation(line: 321, column: 51, scope: !5)
!129 = !DILocation(line: 321, column: 40, scope: !5)
!130 = !DILocation(line: 322, column: 53, scope: !5)
!131 = !DILocation(line: 322, column: 42, scope: !5)
!132 = !DILocation(line: 323, column: 53, scope: !5)
!133 = !DILocation(line: 323, column: 42, scope: !5)
!134 = !DILocation(line: 324, column: 53, scope: !5)
!135 = !DILocation(line: 324, column: 42, scope: !5)
!136 = !DILocation(line: 325, column: 52, scope: !5)
!137 = !DILocation(line: 325, column: 41, scope: !5)
!138 = !DILocation(line: 326, column: 52, scope: !5)
!139 = !DILocation(line: 326, column: 41, scope: !5)
!140 = !DILocation(line: 327, column: 53, scope: !5)
!141 = !DILocation(line: 327, column: 42, scope: !5)
!142 = !DILocation(line: 328, column: 52, scope: !5)
!143 = !DILocation(line: 328, column: 41, scope: !5)
!144 = !DILocation(line: 329, column: 53, scope: !5)
!145 = !DILocation(line: 329, column: 42, scope: !5)
!146 = !DILocation(line: 330, column: 53, scope: !5)
!147 = !DILocation(line: 330, column: 42, scope: !5)
!148 = !DILocation(line: 299, column: 4, scope: !5)
