; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 16, !dbg !13
  %14 = and i32 %12, 32, !dbg !13
  %15 = lshr i32 %12, 3, !dbg !13
  %16 = and i32 %15, 7, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = and i32 %12, 4, !dbg !13
  %.not2 = icmp eq i32 %24, 0, !dbg !13
  %25 = shl nuw nsw i32 %12, 3, !dbg !13
  %26 = and i32 %25, 56, !dbg !13
  %27 = and i32 %12, 63, !dbg !13
  %28 = mul i32 %9, %4, !dbg !14
  %29 = sext i32 %28 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %29, !dbg !15
  %31 = zext nneg i32 %10 to i64, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %30, i64 %31, !dbg !16
  %33 = sext i32 %4 to i64, !dbg !17
  %34 = sext i32 %11 to i64, !dbg !17
  %35 = zext nneg i32 %16 to i64, !dbg !18
  %36 = zext nneg i32 %17 to i64, !dbg !18
  %37 = zext nneg i32 %18 to i64, !dbg !18
  %38 = zext nneg i32 %19 to i64, !dbg !18
  %39 = zext nneg i32 %20 to i64, !dbg !18
  %40 = zext nneg i32 %21 to i64, !dbg !18
  %41 = zext nneg i32 %22 to i64, !dbg !18
  %42 = zext nneg i32 %23 to i64, !dbg !18
  %43 = zext nneg i32 %26 to i64, !dbg !18
  %44 = zext nneg i32 %27 to i64, !dbg !18
  %45 = or disjoint i64 %35, %34, !dbg !18
  %46 = or disjoint i64 %36, %34, !dbg !18
  %47 = or disjoint i64 %37, %34, !dbg !18
  %48 = or disjoint i64 %38, %34, !dbg !18
  %49 = or disjoint i64 %39, %34, !dbg !18
  %50 = or disjoint i64 %40, %34, !dbg !18
  %51 = or disjoint i64 %41, %34, !dbg !18
  %52 = or disjoint i64 %42, %34, !dbg !18
  %53 = or disjoint i64 %34, %44, !dbg !18
  %54 = shl nsw i64 %53, 5, !dbg !18
  %55 = getelementptr bfloat, ptr addrspace(1) %32, i64 %54, !dbg !18
  %56 = icmp sgt i32 %11, -1, !dbg !18
  %57 = icmp slt i64 %53, %33, !dbg !18
  %58 = and i1 %56, %57, !dbg !18
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %55, i1 %58) #2, !dbg !18
  %60 = or disjoint i32 %28, %10, !dbg !19
  %61 = shl i32 %60, 7, !dbg !20
  %62 = sext i32 %61 to i64, !dbg !21
  %63 = getelementptr bfloat, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = icmp slt i64 %45, %33, !dbg !22
  %65 = icmp slt i64 %46, %33, !dbg !22
  %66 = icmp slt i64 %47, %33, !dbg !22
  %67 = icmp slt i64 %48, %33, !dbg !22
  %68 = icmp slt i64 %49, %33, !dbg !22
  %69 = icmp slt i64 %50, %33, !dbg !22
  %70 = icmp slt i64 %51, %33, !dbg !22
  %71 = icmp slt i64 %52, %33, !dbg !22
  %72 = and i1 %56, %64, !dbg !22
  %73 = and i1 %56, %65, !dbg !22
  %74 = and i1 %56, %66, !dbg !22
  %75 = and i1 %56, %67, !dbg !22
  %76 = and i1 %56, %68, !dbg !22
  %77 = and i1 %56, %69, !dbg !22
  %78 = and i1 %56, %70, !dbg !22
  %79 = and i1 %56, %71, !dbg !22
  %.idx183 = shl nsw i64 %45, 13, !dbg !22
  %80 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx183, !dbg !22
  %81 = getelementptr bfloat, ptr addrspace(1) %80, i64 %43, !dbg !22
  %.idx184 = shl nsw i64 %46, 13, !dbg !22
  %82 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx184, !dbg !22
  %83 = getelementptr bfloat, ptr addrspace(1) %82, i64 %43, !dbg !22
  %.idx185 = shl nsw i64 %47, 13, !dbg !22
  %84 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx185, !dbg !22
  %85 = getelementptr bfloat, ptr addrspace(1) %84, i64 %43, !dbg !22
  %.idx186 = shl nsw i64 %48, 13, !dbg !22
  %86 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx186, !dbg !22
  %87 = getelementptr bfloat, ptr addrspace(1) %86, i64 %43, !dbg !22
  %.idx187 = shl nsw i64 %49, 13, !dbg !22
  %88 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx187, !dbg !22
  %89 = getelementptr bfloat, ptr addrspace(1) %88, i64 %43, !dbg !22
  %.idx188 = shl nsw i64 %50, 13, !dbg !22
  %90 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx188, !dbg !22
  %91 = getelementptr bfloat, ptr addrspace(1) %90, i64 %43, !dbg !22
  %.idx189 = shl nsw i64 %51, 13, !dbg !22
  %92 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx189, !dbg !22
  %93 = getelementptr bfloat, ptr addrspace(1) %92, i64 %43, !dbg !22
  %.idx190 = shl nsw i64 %52, 13, !dbg !22
  %94 = getelementptr i8, ptr addrspace(1) %63, i64 %.idx190, !dbg !22
  %95 = getelementptr bfloat, ptr addrspace(1) %94, i64 %43, !dbg !22
  %96 = xor i32 %25, %12, !dbg !22
  %97 = and i32 %96, 56, !dbg !22
  %98 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %97, !dbg !22
  %.idx = shl nuw nsw i32 %16, 7, !dbg !22
  %99 = getelementptr inbounds nuw i8, ptr addrspace(3) %98, i32 %.idx, !dbg !22
  %100 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 1024, !dbg !22
  %101 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 2048, !dbg !22
  %102 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 3072, !dbg !22
  %103 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 4096, !dbg !22
  %104 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 5120, !dbg !22
  %105 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 6144, !dbg !22
  %106 = getelementptr inbounds nuw i8, ptr addrspace(3) %99, i32 7168, !dbg !22
  %107 = select i1 %72, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %81, i32 %107) #2, !dbg !22
  %108 = select i1 %73, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %83, i32 %108) #2, !dbg !22
  %109 = select i1 %74, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %85, i32 %109) #2, !dbg !22
  %110 = select i1 %75, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %87, i32 %110) #2, !dbg !22
  %111 = select i1 %76, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %89, i32 %111) #2, !dbg !22
  %112 = select i1 %77, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %104, ptr addrspace(1) %91, i32 %112) #2, !dbg !22
  %113 = select i1 %78, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %93, i32 %113) #2, !dbg !22
  %114 = select i1 %79, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %95, i32 %114) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  %115 = and i32 %12, 3
  %116 = mul nuw nsw i32 %115, 72
  %117 = select i1 %.not2, i32 0, i32 288
  %118 = xor i32 %117, %116
  %and.ra = and i32 %12, 24
  %119 = xor i32 %118, %and.ra
  %120 = shl nuw nsw i32 %14, 4
  %121 = or disjoint i32 %119, %120
  %122 = xor i32 %121, 32
  %123 = xor i32 %121, 1056
  %124 = xor i32 %121, 2080
  %125 = xor i32 %121, 3104
  %126 = shl nuw nsw i32 %12, 6
  %127 = and i32 %126, 512
  %128 = or disjoint i32 %118, %127
  %129 = lshr exact i32 %13, 1
  %130 = xor i32 %128, %129
  %131 = xor i32 %130, 16
  %132 = xor i32 %130, 32
  %133 = xor i32 %130, 48
  %134 = xor i32 %130, 1040
  %135 = xor i32 %130, 1056
  %136 = xor i32 %130, 1072
  %137 = xor i32 %130, 2064
  %138 = xor i32 %130, 2080
  %139 = xor i32 %130, 2096
  %140 = xor i32 %130, 3088
  %141 = xor i32 %130, 3104
  %142 = xor i32 %130, 3120
  %143 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %121
  %144 = ptrtoint ptr addrspace(3) %143 to i32
  %145 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %122
  %146 = ptrtoint ptr addrspace(3) %145 to i32
  %147 = getelementptr inbounds nuw i8, ptr addrspace(3) %143, i32 2048
  %148 = ptrtoint ptr addrspace(3) %147 to i32
  %149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %123
  %150 = ptrtoint ptr addrspace(3) %149 to i32
  %151 = getelementptr inbounds nuw i8, ptr addrspace(3) %143, i32 4096
  %152 = ptrtoint ptr addrspace(3) %151 to i32
  %153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %124
  %154 = ptrtoint ptr addrspace(3) %153 to i32
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) %143, i32 6144
  %156 = ptrtoint ptr addrspace(3) %155 to i32
  %157 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %125
  %158 = ptrtoint ptr addrspace(3) %157 to i32
  %159 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %130
  %160 = ptrtoint ptr addrspace(3) %159 to i32
  %161 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %131
  %162 = ptrtoint ptr addrspace(3) %161 to i32
  %163 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %132
  %164 = ptrtoint ptr addrspace(3) %163 to i32
  %165 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %133
  %166 = ptrtoint ptr addrspace(3) %165 to i32
  %167 = getelementptr inbounds nuw i8, ptr addrspace(3) %159, i32 2048
  %168 = ptrtoint ptr addrspace(3) %167 to i32
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %134
  %170 = ptrtoint ptr addrspace(3) %169 to i32
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %135
  %172 = ptrtoint ptr addrspace(3) %171 to i32
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %136
  %174 = ptrtoint ptr addrspace(3) %173 to i32
  %175 = getelementptr inbounds nuw i8, ptr addrspace(3) %159, i32 4096
  %176 = ptrtoint ptr addrspace(3) %175 to i32
  %177 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %137
  %178 = ptrtoint ptr addrspace(3) %177 to i32
  %179 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %138
  %180 = ptrtoint ptr addrspace(3) %179 to i32
  %181 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %139
  %182 = ptrtoint ptr addrspace(3) %181 to i32
  %183 = getelementptr inbounds nuw i8, ptr addrspace(3) %159, i32 6144
  %184 = ptrtoint ptr addrspace(3) %183 to i32
  %185 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %140
  %186 = ptrtoint ptr addrspace(3) %185 to i32
  %187 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %141
  %188 = ptrtoint ptr addrspace(3) %187 to i32
  %189 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %142
  %190 = ptrtoint ptr addrspace(3) %189 to i32
  br label %191, !dbg !23

191:                                              ; preds = %6, %191
  %192 = phi i1 [ true, %6 ], [ false, %191 ]
  %indvars.iv = phi i64 [ 64, %6 ], [ 128, %191 ]
  %193 = phi float [ 0.000000e+00, %6 ], [ %618, %191 ]
  %194 = phi float [ 0.000000e+00, %6 ], [ %619, %191 ]
  %195 = phi float [ 0.000000e+00, %6 ], [ %620, %191 ]
  %196 = phi float [ 0.000000e+00, %6 ], [ %621, %191 ]
  %197 = phi float [ 0.000000e+00, %6 ], [ %623, %191 ]
  %198 = phi float [ 0.000000e+00, %6 ], [ %624, %191 ]
  %199 = phi float [ 0.000000e+00, %6 ], [ %625, %191 ]
  %200 = phi float [ 0.000000e+00, %6 ], [ %626, %191 ]
  %201 = phi float [ 0.000000e+00, %6 ], [ %628, %191 ]
  %202 = phi float [ 0.000000e+00, %6 ], [ %629, %191 ]
  %203 = phi float [ 0.000000e+00, %6 ], [ %630, %191 ]
  %204 = phi float [ 0.000000e+00, %6 ], [ %631, %191 ]
  %205 = phi float [ 0.000000e+00, %6 ], [ %633, %191 ]
  %206 = phi float [ 0.000000e+00, %6 ], [ %634, %191 ]
  %207 = phi float [ 0.000000e+00, %6 ], [ %635, %191 ]
  %208 = phi float [ 0.000000e+00, %6 ], [ %636, %191 ]
  %209 = phi float [ 0.000000e+00, %6 ], [ %638, %191 ]
  %210 = phi float [ 0.000000e+00, %6 ], [ %639, %191 ]
  %211 = phi float [ 0.000000e+00, %6 ], [ %640, %191 ]
  %212 = phi float [ 0.000000e+00, %6 ], [ %641, %191 ]
  %213 = phi float [ 0.000000e+00, %6 ], [ %643, %191 ]
  %214 = phi float [ 0.000000e+00, %6 ], [ %644, %191 ]
  %215 = phi float [ 0.000000e+00, %6 ], [ %645, %191 ]
  %216 = phi float [ 0.000000e+00, %6 ], [ %646, %191 ]
  %217 = phi float [ 0.000000e+00, %6 ], [ %648, %191 ]
  %218 = phi float [ 0.000000e+00, %6 ], [ %649, %191 ]
  %219 = phi float [ 0.000000e+00, %6 ], [ %650, %191 ]
  %220 = phi float [ 0.000000e+00, %6 ], [ %651, %191 ]
  %221 = phi float [ 0.000000e+00, %6 ], [ %653, %191 ]
  %222 = phi float [ 0.000000e+00, %6 ], [ %654, %191 ]
  %223 = phi float [ 0.000000e+00, %6 ], [ %655, %191 ]
  %224 = phi float [ 0.000000e+00, %6 ], [ %656, %191 ]
  %225 = phi float [ 0.000000e+00, %6 ], [ %658, %191 ]
  %226 = phi float [ 0.000000e+00, %6 ], [ %659, %191 ]
  %227 = phi float [ 0.000000e+00, %6 ], [ %660, %191 ]
  %228 = phi float [ 0.000000e+00, %6 ], [ %661, %191 ]
  %229 = phi float [ 0.000000e+00, %6 ], [ %663, %191 ]
  %230 = phi float [ 0.000000e+00, %6 ], [ %664, %191 ]
  %231 = phi float [ 0.000000e+00, %6 ], [ %665, %191 ]
  %232 = phi float [ 0.000000e+00, %6 ], [ %666, %191 ]
  %233 = phi float [ 0.000000e+00, %6 ], [ %668, %191 ]
  %234 = phi float [ 0.000000e+00, %6 ], [ %669, %191 ]
  %235 = phi float [ 0.000000e+00, %6 ], [ %670, %191 ]
  %236 = phi float [ 0.000000e+00, %6 ], [ %671, %191 ]
  %237 = phi float [ 0.000000e+00, %6 ], [ %673, %191 ]
  %238 = phi float [ 0.000000e+00, %6 ], [ %674, %191 ]
  %239 = phi float [ 0.000000e+00, %6 ], [ %675, %191 ]
  %240 = phi float [ 0.000000e+00, %6 ], [ %676, %191 ]
  %241 = phi float [ 0.000000e+00, %6 ], [ %678, %191 ]
  %242 = phi float [ 0.000000e+00, %6 ], [ %679, %191 ]
  %243 = phi float [ 0.000000e+00, %6 ], [ %680, %191 ]
  %244 = phi float [ 0.000000e+00, %6 ], [ %681, %191 ]
  %245 = phi float [ 0.000000e+00, %6 ], [ %683, %191 ]
  %246 = phi float [ 0.000000e+00, %6 ], [ %684, %191 ]
  %247 = phi float [ 0.000000e+00, %6 ], [ %685, %191 ]
  %248 = phi float [ 0.000000e+00, %6 ], [ %686, %191 ]
  %249 = phi float [ 0.000000e+00, %6 ], [ %688, %191 ]
  %250 = phi float [ 0.000000e+00, %6 ], [ %689, %191 ]
  %251 = phi float [ 0.000000e+00, %6 ], [ %690, %191 ]
  %252 = phi float [ 0.000000e+00, %6 ], [ %691, %191 ]
  %253 = phi float [ 0.000000e+00, %6 ], [ %693, %191 ]
  %254 = phi float [ 0.000000e+00, %6 ], [ %694, %191 ]
  %255 = phi float [ 0.000000e+00, %6 ], [ %695, %191 ]
  %256 = phi float [ 0.000000e+00, %6 ], [ %696, %191 ]
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %144) #2, !dbg !24
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !24
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !24
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !24
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !24
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %146) #2, !dbg !24
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !24
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !24
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !24
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !24
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %148) #2, !dbg !24
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !24
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !24
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !24
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !24
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %150) #2, !dbg !24
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !24
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !24
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !24
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !24
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %152) #2, !dbg !24
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !24
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !24
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !24
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !24
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %154) #2, !dbg !24
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !24
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !24
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !24
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !24
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %156) #2, !dbg !24
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !24
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !24
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !24
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !24
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %158) #2, !dbg !24
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !24
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !24
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !24
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !24
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %160) #2, !dbg !22
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !22
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !22
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !22
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !22
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %162) #2, !dbg !22
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !22
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !22
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !22
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !22
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %164) #2, !dbg !22
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !22
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !22
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !22
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !22
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %166) #2, !dbg !22
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !22
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !22
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !22
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !22
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %168) #2, !dbg !22
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !22
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !22
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !22
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !22
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %170) #2, !dbg !22
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !22
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !22
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !22
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !22
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %172) #2, !dbg !22
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !22
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !22
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !22
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !22
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %174) #2, !dbg !22
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !22
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !22
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !22
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !22
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %176) #2, !dbg !22
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !22
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !22
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !22
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !22
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %178) #2, !dbg !22
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !22
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !22
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !22
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !22
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %180) #2, !dbg !22
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !22
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !22
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !22
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !22
  %352 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %182) #2, !dbg !22
  %353 = extractvalue { i32, i32, i32, i32 } %352, 0, !dbg !22
  %354 = extractvalue { i32, i32, i32, i32 } %352, 1, !dbg !22
  %355 = extractvalue { i32, i32, i32, i32 } %352, 2, !dbg !22
  %356 = extractvalue { i32, i32, i32, i32 } %352, 3, !dbg !22
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %184) #2, !dbg !22
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !22
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !22
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !22
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !22
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %186) #2, !dbg !22
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !22
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !22
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !22
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !22
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %188) #2, !dbg !22
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !22
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !22
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !22
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !22
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %190) #2, !dbg !22
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !22
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !22
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !22
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !22
  %377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %193, float %194, float %195, float %196, i32 %298, i32 %299, i32 %300, i32 %301, i32 %258, i32 %259) #2, !dbg !24
  %378 = extractvalue { float, float, float, float } %377, 0, !dbg !24
  %379 = extractvalue { float, float, float, float } %377, 1, !dbg !24
  %380 = extractvalue { float, float, float, float } %377, 2, !dbg !24
  %381 = extractvalue { float, float, float, float } %377, 3, !dbg !24
  %382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %197, float %198, float %199, float %200, i32 %298, i32 %299, i32 %300, i32 %301, i32 %268, i32 %269) #2, !dbg !24
  %383 = extractvalue { float, float, float, float } %382, 0, !dbg !24
  %384 = extractvalue { float, float, float, float } %382, 1, !dbg !24
  %385 = extractvalue { float, float, float, float } %382, 2, !dbg !24
  %386 = extractvalue { float, float, float, float } %382, 3, !dbg !24
  %387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %201, float %202, float %203, float %204, i32 %298, i32 %299, i32 %300, i32 %301, i32 %278, i32 %279) #2, !dbg !24
  %388 = extractvalue { float, float, float, float } %387, 0, !dbg !24
  %389 = extractvalue { float, float, float, float } %387, 1, !dbg !24
  %390 = extractvalue { float, float, float, float } %387, 2, !dbg !24
  %391 = extractvalue { float, float, float, float } %387, 3, !dbg !24
  %392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %205, float %206, float %207, float %208, i32 %298, i32 %299, i32 %300, i32 %301, i32 %288, i32 %289) #2, !dbg !24
  %393 = extractvalue { float, float, float, float } %392, 0, !dbg !24
  %394 = extractvalue { float, float, float, float } %392, 1, !dbg !24
  %395 = extractvalue { float, float, float, float } %392, 2, !dbg !24
  %396 = extractvalue { float, float, float, float } %392, 3, !dbg !24
  %397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %209, float %210, float %211, float %212, i32 %318, i32 %319, i32 %320, i32 %321, i32 %258, i32 %259) #2, !dbg !24
  %398 = extractvalue { float, float, float, float } %397, 0, !dbg !24
  %399 = extractvalue { float, float, float, float } %397, 1, !dbg !24
  %400 = extractvalue { float, float, float, float } %397, 2, !dbg !24
  %401 = extractvalue { float, float, float, float } %397, 3, !dbg !24
  %402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %213, float %214, float %215, float %216, i32 %318, i32 %319, i32 %320, i32 %321, i32 %268, i32 %269) #2, !dbg !24
  %403 = extractvalue { float, float, float, float } %402, 0, !dbg !24
  %404 = extractvalue { float, float, float, float } %402, 1, !dbg !24
  %405 = extractvalue { float, float, float, float } %402, 2, !dbg !24
  %406 = extractvalue { float, float, float, float } %402, 3, !dbg !24
  %407 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %318, i32 %319, i32 %320, i32 %321, i32 %278, i32 %279) #2, !dbg !24
  %408 = extractvalue { float, float, float, float } %407, 0, !dbg !24
  %409 = extractvalue { float, float, float, float } %407, 1, !dbg !24
  %410 = extractvalue { float, float, float, float } %407, 2, !dbg !24
  %411 = extractvalue { float, float, float, float } %407, 3, !dbg !24
  %412 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %221, float %222, float %223, float %224, i32 %318, i32 %319, i32 %320, i32 %321, i32 %288, i32 %289) #2, !dbg !24
  %413 = extractvalue { float, float, float, float } %412, 0, !dbg !24
  %414 = extractvalue { float, float, float, float } %412, 1, !dbg !24
  %415 = extractvalue { float, float, float, float } %412, 2, !dbg !24
  %416 = extractvalue { float, float, float, float } %412, 3, !dbg !24
  %417 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %225, float %226, float %227, float %228, i32 %338, i32 %339, i32 %340, i32 %341, i32 %258, i32 %259) #2, !dbg !24
  %418 = extractvalue { float, float, float, float } %417, 0, !dbg !24
  %419 = extractvalue { float, float, float, float } %417, 1, !dbg !24
  %420 = extractvalue { float, float, float, float } %417, 2, !dbg !24
  %421 = extractvalue { float, float, float, float } %417, 3, !dbg !24
  %422 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %229, float %230, float %231, float %232, i32 %338, i32 %339, i32 %340, i32 %341, i32 %268, i32 %269) #2, !dbg !24
  %423 = extractvalue { float, float, float, float } %422, 0, !dbg !24
  %424 = extractvalue { float, float, float, float } %422, 1, !dbg !24
  %425 = extractvalue { float, float, float, float } %422, 2, !dbg !24
  %426 = extractvalue { float, float, float, float } %422, 3, !dbg !24
  %427 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %233, float %234, float %235, float %236, i32 %338, i32 %339, i32 %340, i32 %341, i32 %278, i32 %279) #2, !dbg !24
  %428 = extractvalue { float, float, float, float } %427, 0, !dbg !24
  %429 = extractvalue { float, float, float, float } %427, 1, !dbg !24
  %430 = extractvalue { float, float, float, float } %427, 2, !dbg !24
  %431 = extractvalue { float, float, float, float } %427, 3, !dbg !24
  %432 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %237, float %238, float %239, float %240, i32 %338, i32 %339, i32 %340, i32 %341, i32 %288, i32 %289) #2, !dbg !24
  %433 = extractvalue { float, float, float, float } %432, 0, !dbg !24
  %434 = extractvalue { float, float, float, float } %432, 1, !dbg !24
  %435 = extractvalue { float, float, float, float } %432, 2, !dbg !24
  %436 = extractvalue { float, float, float, float } %432, 3, !dbg !24
  %437 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %241, float %242, float %243, float %244, i32 %358, i32 %359, i32 %360, i32 %361, i32 %258, i32 %259) #2, !dbg !24
  %438 = extractvalue { float, float, float, float } %437, 0, !dbg !24
  %439 = extractvalue { float, float, float, float } %437, 1, !dbg !24
  %440 = extractvalue { float, float, float, float } %437, 2, !dbg !24
  %441 = extractvalue { float, float, float, float } %437, 3, !dbg !24
  %442 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %245, float %246, float %247, float %248, i32 %358, i32 %359, i32 %360, i32 %361, i32 %268, i32 %269) #2, !dbg !24
  %443 = extractvalue { float, float, float, float } %442, 0, !dbg !24
  %444 = extractvalue { float, float, float, float } %442, 1, !dbg !24
  %445 = extractvalue { float, float, float, float } %442, 2, !dbg !24
  %446 = extractvalue { float, float, float, float } %442, 3, !dbg !24
  %447 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %249, float %250, float %251, float %252, i32 %358, i32 %359, i32 %360, i32 %361, i32 %278, i32 %279) #2, !dbg !24
  %448 = extractvalue { float, float, float, float } %447, 0, !dbg !24
  %449 = extractvalue { float, float, float, float } %447, 1, !dbg !24
  %450 = extractvalue { float, float, float, float } %447, 2, !dbg !24
  %451 = extractvalue { float, float, float, float } %447, 3, !dbg !24
  %452 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %253, float %254, float %255, float %256, i32 %358, i32 %359, i32 %360, i32 %361, i32 %288, i32 %289) #2, !dbg !24
  %453 = extractvalue { float, float, float, float } %452, 0, !dbg !24
  %454 = extractvalue { float, float, float, float } %452, 1, !dbg !24
  %455 = extractvalue { float, float, float, float } %452, 2, !dbg !24
  %456 = extractvalue { float, float, float, float } %452, 3, !dbg !24
  %457 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %378, float %379, float %380, float %381, i32 %303, i32 %304, i32 %305, i32 %306, i32 %260, i32 %261) #2, !dbg !24
  %458 = extractvalue { float, float, float, float } %457, 0, !dbg !24
  %459 = extractvalue { float, float, float, float } %457, 1, !dbg !24
  %460 = extractvalue { float, float, float, float } %457, 2, !dbg !24
  %461 = extractvalue { float, float, float, float } %457, 3, !dbg !24
  %462 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %383, float %384, float %385, float %386, i32 %303, i32 %304, i32 %305, i32 %306, i32 %270, i32 %271) #2, !dbg !24
  %463 = extractvalue { float, float, float, float } %462, 0, !dbg !24
  %464 = extractvalue { float, float, float, float } %462, 1, !dbg !24
  %465 = extractvalue { float, float, float, float } %462, 2, !dbg !24
  %466 = extractvalue { float, float, float, float } %462, 3, !dbg !24
  %467 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %388, float %389, float %390, float %391, i32 %303, i32 %304, i32 %305, i32 %306, i32 %280, i32 %281) #2, !dbg !24
  %468 = extractvalue { float, float, float, float } %467, 0, !dbg !24
  %469 = extractvalue { float, float, float, float } %467, 1, !dbg !24
  %470 = extractvalue { float, float, float, float } %467, 2, !dbg !24
  %471 = extractvalue { float, float, float, float } %467, 3, !dbg !24
  %472 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %393, float %394, float %395, float %396, i32 %303, i32 %304, i32 %305, i32 %306, i32 %290, i32 %291) #2, !dbg !24
  %473 = extractvalue { float, float, float, float } %472, 0, !dbg !24
  %474 = extractvalue { float, float, float, float } %472, 1, !dbg !24
  %475 = extractvalue { float, float, float, float } %472, 2, !dbg !24
  %476 = extractvalue { float, float, float, float } %472, 3, !dbg !24
  %477 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %398, float %399, float %400, float %401, i32 %323, i32 %324, i32 %325, i32 %326, i32 %260, i32 %261) #2, !dbg !24
  %478 = extractvalue { float, float, float, float } %477, 0, !dbg !24
  %479 = extractvalue { float, float, float, float } %477, 1, !dbg !24
  %480 = extractvalue { float, float, float, float } %477, 2, !dbg !24
  %481 = extractvalue { float, float, float, float } %477, 3, !dbg !24
  %482 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %403, float %404, float %405, float %406, i32 %323, i32 %324, i32 %325, i32 %326, i32 %270, i32 %271) #2, !dbg !24
  %483 = extractvalue { float, float, float, float } %482, 0, !dbg !24
  %484 = extractvalue { float, float, float, float } %482, 1, !dbg !24
  %485 = extractvalue { float, float, float, float } %482, 2, !dbg !24
  %486 = extractvalue { float, float, float, float } %482, 3, !dbg !24
  %487 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %408, float %409, float %410, float %411, i32 %323, i32 %324, i32 %325, i32 %326, i32 %280, i32 %281) #2, !dbg !24
  %488 = extractvalue { float, float, float, float } %487, 0, !dbg !24
  %489 = extractvalue { float, float, float, float } %487, 1, !dbg !24
  %490 = extractvalue { float, float, float, float } %487, 2, !dbg !24
  %491 = extractvalue { float, float, float, float } %487, 3, !dbg !24
  %492 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %413, float %414, float %415, float %416, i32 %323, i32 %324, i32 %325, i32 %326, i32 %290, i32 %291) #2, !dbg !24
  %493 = extractvalue { float, float, float, float } %492, 0, !dbg !24
  %494 = extractvalue { float, float, float, float } %492, 1, !dbg !24
  %495 = extractvalue { float, float, float, float } %492, 2, !dbg !24
  %496 = extractvalue { float, float, float, float } %492, 3, !dbg !24
  %497 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %418, float %419, float %420, float %421, i32 %343, i32 %344, i32 %345, i32 %346, i32 %260, i32 %261) #2, !dbg !24
  %498 = extractvalue { float, float, float, float } %497, 0, !dbg !24
  %499 = extractvalue { float, float, float, float } %497, 1, !dbg !24
  %500 = extractvalue { float, float, float, float } %497, 2, !dbg !24
  %501 = extractvalue { float, float, float, float } %497, 3, !dbg !24
  %502 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %423, float %424, float %425, float %426, i32 %343, i32 %344, i32 %345, i32 %346, i32 %270, i32 %271) #2, !dbg !24
  %503 = extractvalue { float, float, float, float } %502, 0, !dbg !24
  %504 = extractvalue { float, float, float, float } %502, 1, !dbg !24
  %505 = extractvalue { float, float, float, float } %502, 2, !dbg !24
  %506 = extractvalue { float, float, float, float } %502, 3, !dbg !24
  %507 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %428, float %429, float %430, float %431, i32 %343, i32 %344, i32 %345, i32 %346, i32 %280, i32 %281) #2, !dbg !24
  %508 = extractvalue { float, float, float, float } %507, 0, !dbg !24
  %509 = extractvalue { float, float, float, float } %507, 1, !dbg !24
  %510 = extractvalue { float, float, float, float } %507, 2, !dbg !24
  %511 = extractvalue { float, float, float, float } %507, 3, !dbg !24
  %512 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %433, float %434, float %435, float %436, i32 %343, i32 %344, i32 %345, i32 %346, i32 %290, i32 %291) #2, !dbg !24
  %513 = extractvalue { float, float, float, float } %512, 0, !dbg !24
  %514 = extractvalue { float, float, float, float } %512, 1, !dbg !24
  %515 = extractvalue { float, float, float, float } %512, 2, !dbg !24
  %516 = extractvalue { float, float, float, float } %512, 3, !dbg !24
  %517 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %438, float %439, float %440, float %441, i32 %363, i32 %364, i32 %365, i32 %366, i32 %260, i32 %261) #2, !dbg !24
  %518 = extractvalue { float, float, float, float } %517, 0, !dbg !24
  %519 = extractvalue { float, float, float, float } %517, 1, !dbg !24
  %520 = extractvalue { float, float, float, float } %517, 2, !dbg !24
  %521 = extractvalue { float, float, float, float } %517, 3, !dbg !24
  %522 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %443, float %444, float %445, float %446, i32 %363, i32 %364, i32 %365, i32 %366, i32 %270, i32 %271) #2, !dbg !24
  %523 = extractvalue { float, float, float, float } %522, 0, !dbg !24
  %524 = extractvalue { float, float, float, float } %522, 1, !dbg !24
  %525 = extractvalue { float, float, float, float } %522, 2, !dbg !24
  %526 = extractvalue { float, float, float, float } %522, 3, !dbg !24
  %527 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %448, float %449, float %450, float %451, i32 %363, i32 %364, i32 %365, i32 %366, i32 %280, i32 %281) #2, !dbg !24
  %528 = extractvalue { float, float, float, float } %527, 0, !dbg !24
  %529 = extractvalue { float, float, float, float } %527, 1, !dbg !24
  %530 = extractvalue { float, float, float, float } %527, 2, !dbg !24
  %531 = extractvalue { float, float, float, float } %527, 3, !dbg !24
  %532 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %453, float %454, float %455, float %456, i32 %363, i32 %364, i32 %365, i32 %366, i32 %290, i32 %291) #2, !dbg !24
  %533 = extractvalue { float, float, float, float } %532, 0, !dbg !24
  %534 = extractvalue { float, float, float, float } %532, 1, !dbg !24
  %535 = extractvalue { float, float, float, float } %532, 2, !dbg !24
  %536 = extractvalue { float, float, float, float } %532, 3, !dbg !24
  %537 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %458, float %459, float %460, float %461, i32 %308, i32 %309, i32 %310, i32 %311, i32 %263, i32 %264) #2, !dbg !24
  %538 = extractvalue { float, float, float, float } %537, 0, !dbg !24
  %539 = extractvalue { float, float, float, float } %537, 1, !dbg !24
  %540 = extractvalue { float, float, float, float } %537, 2, !dbg !24
  %541 = extractvalue { float, float, float, float } %537, 3, !dbg !24
  %542 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %463, float %464, float %465, float %466, i32 %308, i32 %309, i32 %310, i32 %311, i32 %273, i32 %274) #2, !dbg !24
  %543 = extractvalue { float, float, float, float } %542, 0, !dbg !24
  %544 = extractvalue { float, float, float, float } %542, 1, !dbg !24
  %545 = extractvalue { float, float, float, float } %542, 2, !dbg !24
  %546 = extractvalue { float, float, float, float } %542, 3, !dbg !24
  %547 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %468, float %469, float %470, float %471, i32 %308, i32 %309, i32 %310, i32 %311, i32 %283, i32 %284) #2, !dbg !24
  %548 = extractvalue { float, float, float, float } %547, 0, !dbg !24
  %549 = extractvalue { float, float, float, float } %547, 1, !dbg !24
  %550 = extractvalue { float, float, float, float } %547, 2, !dbg !24
  %551 = extractvalue { float, float, float, float } %547, 3, !dbg !24
  %552 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %473, float %474, float %475, float %476, i32 %308, i32 %309, i32 %310, i32 %311, i32 %293, i32 %294) #2, !dbg !24
  %553 = extractvalue { float, float, float, float } %552, 0, !dbg !24
  %554 = extractvalue { float, float, float, float } %552, 1, !dbg !24
  %555 = extractvalue { float, float, float, float } %552, 2, !dbg !24
  %556 = extractvalue { float, float, float, float } %552, 3, !dbg !24
  %557 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %478, float %479, float %480, float %481, i32 %328, i32 %329, i32 %330, i32 %331, i32 %263, i32 %264) #2, !dbg !24
  %558 = extractvalue { float, float, float, float } %557, 0, !dbg !24
  %559 = extractvalue { float, float, float, float } %557, 1, !dbg !24
  %560 = extractvalue { float, float, float, float } %557, 2, !dbg !24
  %561 = extractvalue { float, float, float, float } %557, 3, !dbg !24
  %562 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %483, float %484, float %485, float %486, i32 %328, i32 %329, i32 %330, i32 %331, i32 %273, i32 %274) #2, !dbg !24
  %563 = extractvalue { float, float, float, float } %562, 0, !dbg !24
  %564 = extractvalue { float, float, float, float } %562, 1, !dbg !24
  %565 = extractvalue { float, float, float, float } %562, 2, !dbg !24
  %566 = extractvalue { float, float, float, float } %562, 3, !dbg !24
  %567 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %488, float %489, float %490, float %491, i32 %328, i32 %329, i32 %330, i32 %331, i32 %283, i32 %284) #2, !dbg !24
  %568 = extractvalue { float, float, float, float } %567, 0, !dbg !24
  %569 = extractvalue { float, float, float, float } %567, 1, !dbg !24
  %570 = extractvalue { float, float, float, float } %567, 2, !dbg !24
  %571 = extractvalue { float, float, float, float } %567, 3, !dbg !24
  %572 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %493, float %494, float %495, float %496, i32 %328, i32 %329, i32 %330, i32 %331, i32 %293, i32 %294) #2, !dbg !24
  %573 = extractvalue { float, float, float, float } %572, 0, !dbg !24
  %574 = extractvalue { float, float, float, float } %572, 1, !dbg !24
  %575 = extractvalue { float, float, float, float } %572, 2, !dbg !24
  %576 = extractvalue { float, float, float, float } %572, 3, !dbg !24
  %577 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %498, float %499, float %500, float %501, i32 %348, i32 %349, i32 %350, i32 %351, i32 %263, i32 %264) #2, !dbg !24
  %578 = extractvalue { float, float, float, float } %577, 0, !dbg !24
  %579 = extractvalue { float, float, float, float } %577, 1, !dbg !24
  %580 = extractvalue { float, float, float, float } %577, 2, !dbg !24
  %581 = extractvalue { float, float, float, float } %577, 3, !dbg !24
  %582 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %503, float %504, float %505, float %506, i32 %348, i32 %349, i32 %350, i32 %351, i32 %273, i32 %274) #2, !dbg !24
  %583 = extractvalue { float, float, float, float } %582, 0, !dbg !24
  %584 = extractvalue { float, float, float, float } %582, 1, !dbg !24
  %585 = extractvalue { float, float, float, float } %582, 2, !dbg !24
  %586 = extractvalue { float, float, float, float } %582, 3, !dbg !24
  %587 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %508, float %509, float %510, float %511, i32 %348, i32 %349, i32 %350, i32 %351, i32 %283, i32 %284) #2, !dbg !24
  %588 = extractvalue { float, float, float, float } %587, 0, !dbg !24
  %589 = extractvalue { float, float, float, float } %587, 1, !dbg !24
  %590 = extractvalue { float, float, float, float } %587, 2, !dbg !24
  %591 = extractvalue { float, float, float, float } %587, 3, !dbg !24
  %592 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %513, float %514, float %515, float %516, i32 %348, i32 %349, i32 %350, i32 %351, i32 %293, i32 %294) #2, !dbg !24
  %593 = extractvalue { float, float, float, float } %592, 0, !dbg !24
  %594 = extractvalue { float, float, float, float } %592, 1, !dbg !24
  %595 = extractvalue { float, float, float, float } %592, 2, !dbg !24
  %596 = extractvalue { float, float, float, float } %592, 3, !dbg !24
  %597 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %518, float %519, float %520, float %521, i32 %368, i32 %369, i32 %370, i32 %371, i32 %263, i32 %264) #2, !dbg !24
  %598 = extractvalue { float, float, float, float } %597, 0, !dbg !24
  %599 = extractvalue { float, float, float, float } %597, 1, !dbg !24
  %600 = extractvalue { float, float, float, float } %597, 2, !dbg !24
  %601 = extractvalue { float, float, float, float } %597, 3, !dbg !24
  %602 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %523, float %524, float %525, float %526, i32 %368, i32 %369, i32 %370, i32 %371, i32 %273, i32 %274) #2, !dbg !24
  %603 = extractvalue { float, float, float, float } %602, 0, !dbg !24
  %604 = extractvalue { float, float, float, float } %602, 1, !dbg !24
  %605 = extractvalue { float, float, float, float } %602, 2, !dbg !24
  %606 = extractvalue { float, float, float, float } %602, 3, !dbg !24
  %607 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %528, float %529, float %530, float %531, i32 %368, i32 %369, i32 %370, i32 %371, i32 %283, i32 %284) #2, !dbg !24
  %608 = extractvalue { float, float, float, float } %607, 0, !dbg !24
  %609 = extractvalue { float, float, float, float } %607, 1, !dbg !24
  %610 = extractvalue { float, float, float, float } %607, 2, !dbg !24
  %611 = extractvalue { float, float, float, float } %607, 3, !dbg !24
  %612 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %533, float %534, float %535, float %536, i32 %368, i32 %369, i32 %370, i32 %371, i32 %293, i32 %294) #2, !dbg !24
  %613 = extractvalue { float, float, float, float } %612, 0, !dbg !24
  %614 = extractvalue { float, float, float, float } %612, 1, !dbg !24
  %615 = extractvalue { float, float, float, float } %612, 2, !dbg !24
  %616 = extractvalue { float, float, float, float } %612, 3, !dbg !24
  %617 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %538, float %539, float %540, float %541, i32 %313, i32 %314, i32 %315, i32 %316, i32 %265, i32 %266) #2, !dbg !24
  %618 = extractvalue { float, float, float, float } %617, 0, !dbg !24
  %619 = extractvalue { float, float, float, float } %617, 1, !dbg !24
  %620 = extractvalue { float, float, float, float } %617, 2, !dbg !24
  %621 = extractvalue { float, float, float, float } %617, 3, !dbg !24
  %622 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %543, float %544, float %545, float %546, i32 %313, i32 %314, i32 %315, i32 %316, i32 %275, i32 %276) #2, !dbg !24
  %623 = extractvalue { float, float, float, float } %622, 0, !dbg !24
  %624 = extractvalue { float, float, float, float } %622, 1, !dbg !24
  %625 = extractvalue { float, float, float, float } %622, 2, !dbg !24
  %626 = extractvalue { float, float, float, float } %622, 3, !dbg !24
  %627 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %548, float %549, float %550, float %551, i32 %313, i32 %314, i32 %315, i32 %316, i32 %285, i32 %286) #2, !dbg !24
  %628 = extractvalue { float, float, float, float } %627, 0, !dbg !24
  %629 = extractvalue { float, float, float, float } %627, 1, !dbg !24
  %630 = extractvalue { float, float, float, float } %627, 2, !dbg !24
  %631 = extractvalue { float, float, float, float } %627, 3, !dbg !24
  %632 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %553, float %554, float %555, float %556, i32 %313, i32 %314, i32 %315, i32 %316, i32 %295, i32 %296) #2, !dbg !24
  %633 = extractvalue { float, float, float, float } %632, 0, !dbg !24
  %634 = extractvalue { float, float, float, float } %632, 1, !dbg !24
  %635 = extractvalue { float, float, float, float } %632, 2, !dbg !24
  %636 = extractvalue { float, float, float, float } %632, 3, !dbg !24
  %637 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %558, float %559, float %560, float %561, i32 %333, i32 %334, i32 %335, i32 %336, i32 %265, i32 %266) #2, !dbg !24
  %638 = extractvalue { float, float, float, float } %637, 0, !dbg !24
  %639 = extractvalue { float, float, float, float } %637, 1, !dbg !24
  %640 = extractvalue { float, float, float, float } %637, 2, !dbg !24
  %641 = extractvalue { float, float, float, float } %637, 3, !dbg !24
  %642 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %563, float %564, float %565, float %566, i32 %333, i32 %334, i32 %335, i32 %336, i32 %275, i32 %276) #2, !dbg !24
  %643 = extractvalue { float, float, float, float } %642, 0, !dbg !24
  %644 = extractvalue { float, float, float, float } %642, 1, !dbg !24
  %645 = extractvalue { float, float, float, float } %642, 2, !dbg !24
  %646 = extractvalue { float, float, float, float } %642, 3, !dbg !24
  %647 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %568, float %569, float %570, float %571, i32 %333, i32 %334, i32 %335, i32 %336, i32 %285, i32 %286) #2, !dbg !24
  %648 = extractvalue { float, float, float, float } %647, 0, !dbg !24
  %649 = extractvalue { float, float, float, float } %647, 1, !dbg !24
  %650 = extractvalue { float, float, float, float } %647, 2, !dbg !24
  %651 = extractvalue { float, float, float, float } %647, 3, !dbg !24
  %652 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %573, float %574, float %575, float %576, i32 %333, i32 %334, i32 %335, i32 %336, i32 %295, i32 %296) #2, !dbg !24
  %653 = extractvalue { float, float, float, float } %652, 0, !dbg !24
  %654 = extractvalue { float, float, float, float } %652, 1, !dbg !24
  %655 = extractvalue { float, float, float, float } %652, 2, !dbg !24
  %656 = extractvalue { float, float, float, float } %652, 3, !dbg !24
  %657 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %578, float %579, float %580, float %581, i32 %353, i32 %354, i32 %355, i32 %356, i32 %265, i32 %266) #2, !dbg !24
  %658 = extractvalue { float, float, float, float } %657, 0, !dbg !24
  %659 = extractvalue { float, float, float, float } %657, 1, !dbg !24
  %660 = extractvalue { float, float, float, float } %657, 2, !dbg !24
  %661 = extractvalue { float, float, float, float } %657, 3, !dbg !24
  %662 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %583, float %584, float %585, float %586, i32 %353, i32 %354, i32 %355, i32 %356, i32 %275, i32 %276) #2, !dbg !24
  %663 = extractvalue { float, float, float, float } %662, 0, !dbg !24
  %664 = extractvalue { float, float, float, float } %662, 1, !dbg !24
  %665 = extractvalue { float, float, float, float } %662, 2, !dbg !24
  %666 = extractvalue { float, float, float, float } %662, 3, !dbg !24
  %667 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %588, float %589, float %590, float %591, i32 %353, i32 %354, i32 %355, i32 %356, i32 %285, i32 %286) #2, !dbg !24
  %668 = extractvalue { float, float, float, float } %667, 0, !dbg !24
  %669 = extractvalue { float, float, float, float } %667, 1, !dbg !24
  %670 = extractvalue { float, float, float, float } %667, 2, !dbg !24
  %671 = extractvalue { float, float, float, float } %667, 3, !dbg !24
  %672 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %593, float %594, float %595, float %596, i32 %353, i32 %354, i32 %355, i32 %356, i32 %295, i32 %296) #2, !dbg !24
  %673 = extractvalue { float, float, float, float } %672, 0, !dbg !24
  %674 = extractvalue { float, float, float, float } %672, 1, !dbg !24
  %675 = extractvalue { float, float, float, float } %672, 2, !dbg !24
  %676 = extractvalue { float, float, float, float } %672, 3, !dbg !24
  %677 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %598, float %599, float %600, float %601, i32 %373, i32 %374, i32 %375, i32 %376, i32 %265, i32 %266) #2, !dbg !24
  %678 = extractvalue { float, float, float, float } %677, 0, !dbg !24
  %679 = extractvalue { float, float, float, float } %677, 1, !dbg !24
  %680 = extractvalue { float, float, float, float } %677, 2, !dbg !24
  %681 = extractvalue { float, float, float, float } %677, 3, !dbg !24
  %682 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %603, float %604, float %605, float %606, i32 %373, i32 %374, i32 %375, i32 %376, i32 %275, i32 %276) #2, !dbg !24
  %683 = extractvalue { float, float, float, float } %682, 0, !dbg !24
  %684 = extractvalue { float, float, float, float } %682, 1, !dbg !24
  %685 = extractvalue { float, float, float, float } %682, 2, !dbg !24
  %686 = extractvalue { float, float, float, float } %682, 3, !dbg !24
  %687 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %608, float %609, float %610, float %611, i32 %373, i32 %374, i32 %375, i32 %376, i32 %285, i32 %286) #2, !dbg !24
  %688 = extractvalue { float, float, float, float } %687, 0, !dbg !24
  %689 = extractvalue { float, float, float, float } %687, 1, !dbg !24
  %690 = extractvalue { float, float, float, float } %687, 2, !dbg !24
  %691 = extractvalue { float, float, float, float } %687, 3, !dbg !24
  %692 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %613, float %614, float %615, float %616, i32 %373, i32 %374, i32 %375, i32 %376, i32 %295, i32 %296) #2, !dbg !24
  %693 = extractvalue { float, float, float, float } %692, 0, !dbg !24
  %694 = extractvalue { float, float, float, float } %692, 1, !dbg !24
  %695 = extractvalue { float, float, float, float } %692, 2, !dbg !24
  %696 = extractvalue { float, float, float, float } %692, 3, !dbg !24
  %697 = or disjoint i64 %indvars.iv, %43, !dbg !22
  %698 = getelementptr bfloat, ptr addrspace(1) %80, i64 %697, !dbg !22
  %699 = getelementptr bfloat, ptr addrspace(1) %82, i64 %697, !dbg !22
  %700 = getelementptr bfloat, ptr addrspace(1) %84, i64 %697, !dbg !22
  %701 = getelementptr bfloat, ptr addrspace(1) %86, i64 %697, !dbg !22
  %702 = getelementptr bfloat, ptr addrspace(1) %88, i64 %697, !dbg !22
  %703 = getelementptr bfloat, ptr addrspace(1) %90, i64 %697, !dbg !22
  %704 = getelementptr bfloat, ptr addrspace(1) %92, i64 %697, !dbg !22
  %705 = getelementptr bfloat, ptr addrspace(1) %94, i64 %697, !dbg !22
  %706 = and i1 %72, %192, !dbg !22
  %707 = and i1 %73, %192, !dbg !22
  %708 = and i1 %74, %192, !dbg !22
  %709 = and i1 %75, %192, !dbg !22
  %710 = and i1 %76, %192, !dbg !22
  %711 = and i1 %77, %192, !dbg !22
  %712 = and i1 %78, %192, !dbg !22
  %713 = and i1 %79, %192, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %714 = select i1 %706, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %99, ptr addrspace(1) %698, i32 %714) #2, !dbg !22
  %715 = select i1 %707, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %100, ptr addrspace(1) %699, i32 %715) #2, !dbg !22
  %716 = select i1 %708, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %101, ptr addrspace(1) %700, i32 %716) #2, !dbg !22
  %717 = select i1 %709, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %102, ptr addrspace(1) %701, i32 %717) #2, !dbg !22
  %718 = select i1 %710, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %103, ptr addrspace(1) %702, i32 %718) #2, !dbg !22
  %719 = select i1 %711, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %104, ptr addrspace(1) %703, i32 %719) #2, !dbg !22
  %720 = select i1 %712, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %105, ptr addrspace(1) %704, i32 %720) #2, !dbg !22
  %721 = select i1 %713, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %106, ptr addrspace(1) %705, i32 %721) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br i1 %192, label %191, label %722, !dbg !23

722:                                              ; preds = %191
  %.lobit46 = lshr i32 %12, 4, !dbg !13
  %723 = shl nuw nsw i32 %12, 2, !dbg !13
  %724 = and i32 %723, 60, !dbg !13
  %725 = zext nneg i32 %724 to i64, !dbg !18
  %726 = shl nuw nsw i32 %12, 1, !dbg !13
  %727 = and i32 %726, 6, !dbg !13
  %728 = lshr exact i32 %14, 2, !dbg !13
  %.lobit13 = lshr i32 %12, 2, !dbg !13
  %729 = and i32 %.lobit13, 3, !dbg !13
  %730 = lshr exact i32 %13, 2, !dbg !13
  %731 = or disjoint i32 %727, %728, !dbg !13
  %732 = or disjoint i32 %731, 49, !dbg !13
  %733 = or disjoint i32 %731, 48, !dbg !13
  %734 = or disjoint i32 %731, 33, !dbg !13
  %735 = or disjoint i32 %731, 32, !dbg !13
  %736 = or disjoint i32 %731, 17, !dbg !13
  %737 = or disjoint i32 %731, 16, !dbg !13
  %738 = or disjoint i32 %731, 1, !dbg !13
  %739 = or disjoint i32 %729, %730, !dbg !13
  %740 = or disjoint i32 %739, 56, !dbg !13
  %741 = or disjoint i32 %739, 48, !dbg !13
  %742 = or disjoint i32 %739, 40, !dbg !13
  %743 = or disjoint i32 %739, 32, !dbg !13
  %744 = or disjoint i32 %739, 24, !dbg !13
  %745 = or disjoint i32 %739, 16, !dbg !13
  %746 = or disjoint i32 %739, 8, !dbg !13
  %747 = insertelement <16 x i32> poison, i32 %739, i64 0, !dbg !25
  %748 = insertelement <16 x i32> %747, i32 %746, i64 1, !dbg !25
  %749 = insertelement <16 x i32> %748, i32 %745, i64 2, !dbg !25
  %750 = insertelement <16 x i32> %749, i32 %744, i64 3, !dbg !25
  %751 = insertelement <16 x i32> %750, i32 %743, i64 4, !dbg !25
  %752 = insertelement <16 x i32> %751, i32 %742, i64 5, !dbg !25
  %753 = insertelement <16 x i32> %752, i32 %741, i64 6, !dbg !25
  %754 = insertelement <16 x i32> %753, i32 %740, i64 7, !dbg !25
  %755 = insertelement <16 x i32> %754, i32 %731, i64 8, !dbg !25
  %756 = insertelement <16 x i32> %755, i32 %738, i64 9, !dbg !25
  %757 = insertelement <16 x i32> %756, i32 %737, i64 10, !dbg !25
  %758 = insertelement <16 x i32> %757, i32 %736, i64 11, !dbg !25
  %759 = insertelement <16 x i32> %758, i32 %735, i64 12, !dbg !25
  %760 = insertelement <16 x i32> %759, i32 %734, i64 13, !dbg !25
  %761 = insertelement <16 x i32> %760, i32 %733, i64 14, !dbg !25
  %762 = insertelement <16 x i32> %761, i32 %732, i64 15, !dbg !25
  %763 = insertelement <16 x i32> poison, i32 %11, i64 0, !dbg !25
  %764 = shufflevector <16 x i32> %763, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !25
  %765 = or disjoint <16 x i32> %762, %764, !dbg !25
  %766 = insertelement <16 x i32> poison, i32 %4, i64 0, !dbg !26
  %767 = shufflevector <16 x i32> %766, <16 x i32> poison, <16 x i32> zeroinitializer, !dbg !26
  %768 = icmp slt <16 x i32> %765, %767, !dbg !26
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %769 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !27
  %770 = getelementptr float, ptr addrspace(1) %769, i64 %31, !dbg !28
  %771 = getelementptr float, ptr addrspace(1) %770, i64 %54, !dbg !29
  %772 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %771, i1 %58) #2, !dbg !29
  %773 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %27, !dbg !30
  %774 = insertelement <1 x i32> poison, i32 %772, i64 0, !dbg !30
  store <1 x i32> %774, ptr addrspace(3) %773, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !30
  %775 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %739, !dbg !30
  %776 = load float, ptr addrspace(3) %775, align 4, !dbg !30
  %777 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %746, !dbg !30
  %778 = load float, ptr addrspace(3) %777, align 4, !dbg !30
  %779 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %745, !dbg !30
  %780 = load float, ptr addrspace(3) %779, align 4, !dbg !30
  %781 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %744, !dbg !30
  %782 = load float, ptr addrspace(3) %781, align 4, !dbg !30
  %783 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %743, !dbg !30
  %784 = load float, ptr addrspace(3) %783, align 4, !dbg !30
  %785 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %742, !dbg !30
  %786 = load float, ptr addrspace(3) %785, align 4, !dbg !30
  %787 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %741, !dbg !30
  %788 = load float, ptr addrspace(3) %787, align 4, !dbg !30
  %789 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %740, !dbg !30
  %790 = load float, ptr addrspace(3) %789, align 4, !dbg !30
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <1 x i32> %774, ptr addrspace(3) %773, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %791 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %731, !dbg !31
  %792 = load float, ptr addrspace(3) %791, align 8, !dbg !31
  %793 = getelementptr inbounds nuw i8, ptr addrspace(3) %791, i32 4, !dbg !31
  %794 = load float, ptr addrspace(3) %793, align 4, !dbg !31
  %795 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %737, !dbg !31
  %796 = load float, ptr addrspace(3) %795, align 8, !dbg !31
  %797 = getelementptr inbounds nuw i8, ptr addrspace(3) %795, i32 4, !dbg !31
  %798 = load float, ptr addrspace(3) %797, align 4, !dbg !31
  %799 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %735, !dbg !31
  %800 = load float, ptr addrspace(3) %799, align 8, !dbg !31
  %801 = getelementptr inbounds nuw i8, ptr addrspace(3) %799, i32 4, !dbg !31
  %802 = load float, ptr addrspace(3) %801, align 4, !dbg !31
  %803 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %733, !dbg !31
  %804 = load float, ptr addrspace(3) %803, align 8, !dbg !31
  %805 = getelementptr inbounds nuw i8, ptr addrspace(3) %803, i32 4, !dbg !31
  %806 = load float, ptr addrspace(3) %805, align 4, !dbg !31
  %807 = fsub float %776, %792, !dbg !30
  %808 = fsub float %776, %794, !dbg !30
  %809 = fsub float %778, %792, !dbg !30
  %810 = fsub float %778, %794, !dbg !30
  %811 = fsub float %780, %792, !dbg !30
  %812 = fsub float %780, %794, !dbg !30
  %813 = fsub float %782, %792, !dbg !30
  %814 = fsub float %782, %794, !dbg !30
  %815 = fsub float %780, %796, !dbg !30
  %816 = fsub float %780, %798, !dbg !30
  %817 = fsub float %782, %796, !dbg !30
  %818 = fsub float %782, %798, !dbg !30
  %819 = fsub float %784, %792, !dbg !30
  %820 = fsub float %784, %794, !dbg !30
  %821 = fsub float %786, %792, !dbg !30
  %822 = fsub float %786, %794, !dbg !30
  %823 = fsub float %784, %796, !dbg !30
  %824 = fsub float %784, %798, !dbg !30
  %825 = fsub float %786, %796, !dbg !30
  %826 = fsub float %786, %798, !dbg !30
  %827 = fsub float %784, %800, !dbg !30
  %828 = fsub float %784, %802, !dbg !30
  %829 = fsub float %786, %800, !dbg !30
  %830 = fsub float %786, %802, !dbg !30
  %831 = fsub float %788, %792, !dbg !30
  %832 = fsub float %788, %794, !dbg !30
  %833 = fsub float %790, %792, !dbg !30
  %834 = fsub float %790, %794, !dbg !30
  %835 = fsub float %788, %796, !dbg !30
  %836 = fsub float %788, %798, !dbg !30
  %837 = fsub float %790, %796, !dbg !30
  %838 = fsub float %790, %798, !dbg !30
  %839 = fsub float %788, %800, !dbg !30
  %840 = fsub float %788, %802, !dbg !30
  %841 = fsub float %790, %800, !dbg !30
  %842 = fsub float %790, %802, !dbg !30
  %843 = fsub float %788, %804, !dbg !30
  %844 = fsub float %788, %806, !dbg !30
  %845 = fsub float %790, %804, !dbg !30
  %846 = fsub float %790, %806, !dbg !30
  %847 = fmul float %807, 0x3FF7154760000000, !dbg !31
  %848 = tail call float @llvm.nvvm.ex2.approx.f(float %847), !dbg !31
  %849 = fmul float %808, 0x3FF7154760000000, !dbg !31
  %850 = tail call float @llvm.nvvm.ex2.approx.f(float %849), !dbg !31
  %851 = fmul float %809, 0x3FF7154760000000, !dbg !31
  %852 = tail call float @llvm.nvvm.ex2.approx.f(float %851), !dbg !31
  %853 = fmul float %810, 0x3FF7154760000000, !dbg !31
  %854 = tail call float @llvm.nvvm.ex2.approx.f(float %853), !dbg !31
  %855 = fmul float %811, 0x3FF7154760000000, !dbg !31
  %856 = tail call float @llvm.nvvm.ex2.approx.f(float %855), !dbg !31
  %857 = fmul float %812, 0x3FF7154760000000, !dbg !31
  %858 = tail call float @llvm.nvvm.ex2.approx.f(float %857), !dbg !31
  %859 = fmul float %813, 0x3FF7154760000000, !dbg !31
  %860 = tail call float @llvm.nvvm.ex2.approx.f(float %859), !dbg !31
  %861 = fmul float %814, 0x3FF7154760000000, !dbg !31
  %862 = tail call float @llvm.nvvm.ex2.approx.f(float %861), !dbg !31
  %863 = fmul float %815, 0x3FF7154760000000, !dbg !31
  %864 = tail call float @llvm.nvvm.ex2.approx.f(float %863), !dbg !31
  %865 = fmul float %816, 0x3FF7154760000000, !dbg !31
  %866 = tail call float @llvm.nvvm.ex2.approx.f(float %865), !dbg !31
  %867 = fmul float %817, 0x3FF7154760000000, !dbg !31
  %868 = tail call float @llvm.nvvm.ex2.approx.f(float %867), !dbg !31
  %869 = fmul float %818, 0x3FF7154760000000, !dbg !31
  %870 = tail call float @llvm.nvvm.ex2.approx.f(float %869), !dbg !31
  %871 = fmul float %819, 0x3FF7154760000000, !dbg !31
  %872 = tail call float @llvm.nvvm.ex2.approx.f(float %871), !dbg !31
  %873 = fmul float %820, 0x3FF7154760000000, !dbg !31
  %874 = tail call float @llvm.nvvm.ex2.approx.f(float %873), !dbg !31
  %875 = fmul float %821, 0x3FF7154760000000, !dbg !31
  %876 = tail call float @llvm.nvvm.ex2.approx.f(float %875), !dbg !31
  %877 = fmul float %822, 0x3FF7154760000000, !dbg !31
  %878 = tail call float @llvm.nvvm.ex2.approx.f(float %877), !dbg !31
  %879 = fmul float %823, 0x3FF7154760000000, !dbg !31
  %880 = tail call float @llvm.nvvm.ex2.approx.f(float %879), !dbg !31
  %881 = fmul float %824, 0x3FF7154760000000, !dbg !31
  %882 = tail call float @llvm.nvvm.ex2.approx.f(float %881), !dbg !31
  %883 = fmul float %825, 0x3FF7154760000000, !dbg !31
  %884 = tail call float @llvm.nvvm.ex2.approx.f(float %883), !dbg !31
  %885 = fmul float %826, 0x3FF7154760000000, !dbg !31
  %886 = tail call float @llvm.nvvm.ex2.approx.f(float %885), !dbg !31
  %887 = fmul float %827, 0x3FF7154760000000, !dbg !31
  %888 = tail call float @llvm.nvvm.ex2.approx.f(float %887), !dbg !31
  %889 = fmul float %828, 0x3FF7154760000000, !dbg !31
  %890 = tail call float @llvm.nvvm.ex2.approx.f(float %889), !dbg !31
  %891 = fmul float %829, 0x3FF7154760000000, !dbg !31
  %892 = tail call float @llvm.nvvm.ex2.approx.f(float %891), !dbg !31
  %893 = fmul float %830, 0x3FF7154760000000, !dbg !31
  %894 = tail call float @llvm.nvvm.ex2.approx.f(float %893), !dbg !31
  %895 = fmul float %831, 0x3FF7154760000000, !dbg !31
  %896 = tail call float @llvm.nvvm.ex2.approx.f(float %895), !dbg !31
  %897 = fmul float %832, 0x3FF7154760000000, !dbg !31
  %898 = tail call float @llvm.nvvm.ex2.approx.f(float %897), !dbg !31
  %899 = fmul float %833, 0x3FF7154760000000, !dbg !31
  %900 = tail call float @llvm.nvvm.ex2.approx.f(float %899), !dbg !31
  %901 = fmul float %834, 0x3FF7154760000000, !dbg !31
  %902 = tail call float @llvm.nvvm.ex2.approx.f(float %901), !dbg !31
  %903 = fmul float %835, 0x3FF7154760000000, !dbg !31
  %904 = tail call float @llvm.nvvm.ex2.approx.f(float %903), !dbg !31
  %905 = fmul float %836, 0x3FF7154760000000, !dbg !31
  %906 = tail call float @llvm.nvvm.ex2.approx.f(float %905), !dbg !31
  %907 = fmul float %837, 0x3FF7154760000000, !dbg !31
  %908 = tail call float @llvm.nvvm.ex2.approx.f(float %907), !dbg !31
  %909 = fmul float %838, 0x3FF7154760000000, !dbg !31
  %910 = tail call float @llvm.nvvm.ex2.approx.f(float %909), !dbg !31
  %911 = fmul float %839, 0x3FF7154760000000, !dbg !31
  %912 = tail call float @llvm.nvvm.ex2.approx.f(float %911), !dbg !31
  %913 = fmul float %840, 0x3FF7154760000000, !dbg !31
  %914 = tail call float @llvm.nvvm.ex2.approx.f(float %913), !dbg !31
  %915 = fmul float %841, 0x3FF7154760000000, !dbg !31
  %916 = tail call float @llvm.nvvm.ex2.approx.f(float %915), !dbg !31
  %917 = fmul float %842, 0x3FF7154760000000, !dbg !31
  %918 = tail call float @llvm.nvvm.ex2.approx.f(float %917), !dbg !31
  %919 = fmul float %843, 0x3FF7154760000000, !dbg !31
  %920 = tail call float @llvm.nvvm.ex2.approx.f(float %919), !dbg !31
  %921 = fmul float %844, 0x3FF7154760000000, !dbg !31
  %922 = tail call float @llvm.nvvm.ex2.approx.f(float %921), !dbg !31
  %923 = fmul float %845, 0x3FF7154760000000, !dbg !31
  %924 = tail call float @llvm.nvvm.ex2.approx.f(float %923), !dbg !31
  %925 = fmul float %846, 0x3FF7154760000000, !dbg !31
  %926 = tail call float @llvm.nvvm.ex2.approx.f(float %925), !dbg !31
  %927 = fmul float %618, %848, !dbg !32
  %928 = fmul float %619, %850, !dbg !32
  %929 = fmul float %620, %852, !dbg !32
  %930 = fmul float %621, %854, !dbg !32
  %931 = fmul float %638, %856, !dbg !32
  %932 = fmul float %639, %858, !dbg !32
  %933 = fmul float %640, %860, !dbg !32
  %934 = fmul float %641, %862, !dbg !32
  %935 = fmul float %643, %864, !dbg !32
  %936 = fmul float %644, %866, !dbg !32
  %937 = fmul float %645, %868, !dbg !32
  %938 = fmul float %646, %870, !dbg !32
  %939 = fmul float %658, %872, !dbg !32
  %940 = fmul float %659, %874, !dbg !32
  %941 = fmul float %660, %876, !dbg !32
  %942 = fmul float %661, %878, !dbg !32
  %943 = fmul float %663, %880, !dbg !32
  %944 = fmul float %664, %882, !dbg !32
  %945 = fmul float %665, %884, !dbg !32
  %946 = fmul float %666, %886, !dbg !32
  %947 = fmul float %668, %888, !dbg !32
  %948 = fmul float %669, %890, !dbg !32
  %949 = fmul float %670, %892, !dbg !32
  %950 = fmul float %671, %894, !dbg !32
  %951 = fmul float %678, %896, !dbg !32
  %952 = fmul float %679, %898, !dbg !32
  %953 = fmul float %680, %900, !dbg !32
  %954 = fmul float %681, %902, !dbg !32
  %955 = fmul float %683, %904, !dbg !32
  %956 = fmul float %684, %906, !dbg !32
  %957 = fmul float %685, %908, !dbg !32
  %958 = fmul float %686, %910, !dbg !32
  %959 = fmul float %688, %912, !dbg !32
  %960 = fmul float %689, %914, !dbg !32
  %961 = fmul float %690, %916, !dbg !32
  %962 = fmul float %691, %918, !dbg !32
  %963 = fmul float %693, %920, !dbg !32
  %964 = fmul float %694, %922, !dbg !32
  %965 = fmul float %695, %924, !dbg !32
  %966 = fmul float %696, %926, !dbg !32
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %967 = or disjoint i32 %730, %728, !dbg !33
  %968 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %27, !dbg !33
  %969 = insertelement <1 x i16> poison, i16 %59, i64 0, !dbg !33
  store <1 x i16> %969, ptr addrspace(3) %968, align 2, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %970 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %967, !dbg !33
  %971 = load bfloat, ptr addrspace(3) %970, align 8, !dbg !33
  %972 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 2, !dbg !33
  %973 = load bfloat, ptr addrspace(3) %972, align 2, !dbg !33
  %974 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 4, !dbg !33
  %975 = load bfloat, ptr addrspace(3) %974, align 4, !dbg !33
  %976 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 6, !dbg !33
  %977 = load bfloat, ptr addrspace(3) %976, align 2, !dbg !33
  %978 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 32, !dbg !33
  %979 = load bfloat, ptr addrspace(3) %978, align 8, !dbg !33
  %980 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 34, !dbg !33
  %981 = load bfloat, ptr addrspace(3) %980, align 2, !dbg !33
  %982 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 36, !dbg !33
  %983 = load bfloat, ptr addrspace(3) %982, align 4, !dbg !33
  %984 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 38, !dbg !33
  %985 = load bfloat, ptr addrspace(3) %984, align 2, !dbg !33
  %986 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 64, !dbg !33
  %987 = load bfloat, ptr addrspace(3) %986, align 8, !dbg !33
  %988 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 66, !dbg !33
  %989 = load bfloat, ptr addrspace(3) %988, align 2, !dbg !33
  %990 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 68, !dbg !33
  %991 = load bfloat, ptr addrspace(3) %990, align 4, !dbg !33
  %992 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 70, !dbg !33
  %993 = load bfloat, ptr addrspace(3) %992, align 2, !dbg !33
  %994 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 96, !dbg !33
  %995 = load bfloat, ptr addrspace(3) %994, align 8, !dbg !33
  %996 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 98, !dbg !33
  %997 = load bfloat, ptr addrspace(3) %996, align 2, !dbg !33
  %998 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 100, !dbg !33
  %999 = load bfloat, ptr addrspace(3) %998, align 4, !dbg !33
  %1000 = getelementptr inbounds nuw i8, ptr addrspace(3) %970, i32 102, !dbg !33
  %1001 = load bfloat, ptr addrspace(3) %1000, align 2, !dbg !33
  %1002 = fpext bfloat %971 to float, !dbg !33
  %1003 = fpext bfloat %973 to float, !dbg !33
  %1004 = fpext bfloat %975 to float, !dbg !33
  %1005 = fpext bfloat %977 to float, !dbg !33
  %1006 = fpext bfloat %979 to float, !dbg !33
  %1007 = fpext bfloat %981 to float, !dbg !33
  %1008 = fpext bfloat %983 to float, !dbg !33
  %1009 = fpext bfloat %985 to float, !dbg !33
  %1010 = fpext bfloat %987 to float, !dbg !33
  %1011 = fpext bfloat %989 to float, !dbg !33
  %1012 = fpext bfloat %991 to float, !dbg !33
  %1013 = fpext bfloat %993 to float, !dbg !33
  %1014 = fpext bfloat %995 to float, !dbg !33
  %1015 = fpext bfloat %997 to float, !dbg !33
  %1016 = fpext bfloat %999 to float, !dbg !33
  %1017 = fpext bfloat %1001 to float, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1018 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %967, !dbg !33
  store float %1002, ptr addrspace(3) %1018, align 16, !dbg !33
  %1019 = getelementptr inbounds nuw i8, ptr addrspace(3) %1018, i32 4, !dbg !33
  store float %1003, ptr addrspace(3) %1019, align 4, !dbg !33
  %1020 = getelementptr inbounds nuw i8, ptr addrspace(3) %1018, i32 8, !dbg !33
  store float %1004, ptr addrspace(3) %1020, align 8, !dbg !33
  %1021 = getelementptr inbounds nuw i8, ptr addrspace(3) %1018, i32 12, !dbg !33
  store float %1005, ptr addrspace(3) %1021, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1022 = load float, ptr addrspace(3) %775, align 4, !dbg !33
  %1023 = load float, ptr addrspace(3) %777, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1006, ptr addrspace(3) %1018, align 16, !dbg !33
  store float %1007, ptr addrspace(3) %1019, align 4, !dbg !33
  store float %1008, ptr addrspace(3) %1020, align 8, !dbg !33
  store float %1009, ptr addrspace(3) %1021, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1024 = load float, ptr addrspace(3) %775, align 4, !dbg !33
  %1025 = load float, ptr addrspace(3) %777, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1010, ptr addrspace(3) %1018, align 16, !dbg !33
  store float %1011, ptr addrspace(3) %1019, align 4, !dbg !33
  store float %1012, ptr addrspace(3) %1020, align 8, !dbg !33
  store float %1013, ptr addrspace(3) %1021, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1026 = load float, ptr addrspace(3) %775, align 4, !dbg !33
  %1027 = load float, ptr addrspace(3) %777, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  store float %1014, ptr addrspace(3) %1018, align 16, !dbg !33
  store float %1015, ptr addrspace(3) %1019, align 4, !dbg !33
  store float %1016, ptr addrspace(3) %1020, align 8, !dbg !33
  store float %1017, ptr addrspace(3) %1021, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !33
  %1028 = load float, ptr addrspace(3) %775, align 4, !dbg !33
  %1029 = load float, ptr addrspace(3) %777, align 4, !dbg !33
  %1030 = fmul float %927, %1022, !dbg !33
  %1031 = fmul float %928, %1022, !dbg !33
  %1032 = fmul float %929, %1023, !dbg !33
  %1033 = fmul float %930, %1023, !dbg !33
  %1034 = fmul float %931, %1024, !dbg !33
  %1035 = fmul float %932, %1024, !dbg !33
  %1036 = fmul float %933, %1025, !dbg !33
  %1037 = fmul float %934, %1025, !dbg !33
  %1038 = fmul float %935, %1024, !dbg !33
  %1039 = fmul float %936, %1024, !dbg !33
  %1040 = fmul float %937, %1025, !dbg !33
  %1041 = fmul float %938, %1025, !dbg !33
  %1042 = fmul float %939, %1026, !dbg !33
  %1043 = fmul float %940, %1026, !dbg !33
  %1044 = fmul float %941, %1027, !dbg !33
  %1045 = fmul float %942, %1027, !dbg !33
  %1046 = fmul float %943, %1026, !dbg !33
  %1047 = fmul float %944, %1026, !dbg !33
  %1048 = fmul float %945, %1027, !dbg !33
  %1049 = fmul float %946, %1027, !dbg !33
  %1050 = fmul float %947, %1026, !dbg !33
  %1051 = fmul float %948, %1026, !dbg !33
  %1052 = fmul float %949, %1027, !dbg !33
  %1053 = fmul float %950, %1027, !dbg !33
  %1054 = fmul float %951, %1028, !dbg !33
  %1055 = fmul float %952, %1028, !dbg !33
  %1056 = fmul float %953, %1029, !dbg !33
  %1057 = fmul float %954, %1029, !dbg !33
  %1058 = fmul float %955, %1028, !dbg !33
  %1059 = fmul float %956, %1028, !dbg !33
  %1060 = fmul float %957, %1029, !dbg !33
  %1061 = fmul float %958, %1029, !dbg !33
  %1062 = fmul float %959, %1028, !dbg !33
  %1063 = fmul float %960, %1028, !dbg !33
  %1064 = fmul float %961, %1029, !dbg !33
  %1065 = fmul float %962, %1029, !dbg !33
  %1066 = fmul float %963, %1028, !dbg !33
  %1067 = fmul float %964, %1028, !dbg !33
  %1068 = fmul float %965, %1029, !dbg !33
  %1069 = fmul float %966, %1029, !dbg !33
  %1070 = icmp samesign ugt i32 %739, %731, !dbg !34
  %1071 = icmp samesign ugt i32 %739, %738, !dbg !34
  %1072 = icmp samesign ugt i32 %746, %731, !dbg !34
  %1073 = icmp samesign ugt i32 %746, %738, !dbg !34
  %1074 = icmp samesign ugt i32 %745, %736, !dbg !34
  %1075 = icmp samesign ugt i32 %744, %737, !dbg !34
  %1076 = icmp samesign ugt i32 %744, %736, !dbg !34
  %1077 = icmp samesign ugt i32 %743, %734, !dbg !34
  %1078 = icmp samesign ugt i32 %742, %735, !dbg !34
  %1079 = icmp samesign ugt i32 %742, %734, !dbg !34
  %1080 = icmp samesign ugt i32 %741, %732, !dbg !34
  %1081 = icmp samesign ugt i32 %740, %733, !dbg !34
  %1082 = icmp samesign ugt i32 %740, %732, !dbg !34
  %1083 = extractelement <16 x i1> %768, i64 2, !dbg !35
  %1084 = extractelement <16 x i1> %768, i64 8, !dbg !35
  %1085 = and i1 %1083, %1084, !dbg !36
  %1086 = extractelement <16 x i1> %768, i64 9, !dbg !35
  %1087 = and i1 %1083, %1086, !dbg !36
  %1088 = extractelement <16 x i1> %768, i64 3, !dbg !35
  %1089 = and i1 %1088, %1084, !dbg !36
  %1090 = and i1 %1088, %1086, !dbg !36
  %1091 = extractelement <16 x i1> %768, i64 4, !dbg !35
  %1092 = and i1 %1091, %1084, !dbg !36
  %1093 = and i1 %1091, %1086, !dbg !36
  %1094 = extractelement <16 x i1> %768, i64 5, !dbg !35
  %1095 = and i1 %1094, %1084, !dbg !36
  %1096 = and i1 %1094, %1086, !dbg !36
  %1097 = extractelement <16 x i1> %768, i64 10, !dbg !35
  %1098 = and i1 %1091, %1097, !dbg !36
  %1099 = extractelement <16 x i1> %768, i64 11, !dbg !35
  %1100 = and i1 %1091, %1099, !dbg !36
  %1101 = and i1 %1094, %1097, !dbg !36
  %1102 = and i1 %1094, %1099, !dbg !36
  %1103 = extractelement <16 x i1> %768, i64 6, !dbg !35
  %1104 = and i1 %1103, %1084, !dbg !36
  %1105 = and i1 %1103, %1086, !dbg !36
  %1106 = extractelement <16 x i1> %768, i64 7, !dbg !35
  %1107 = and i1 %1106, %1084, !dbg !36
  %1108 = and i1 %1106, %1086, !dbg !36
  %1109 = and i1 %1103, %1097, !dbg !36
  %1110 = and i1 %1103, %1099, !dbg !36
  %1111 = and i1 %1106, %1097, !dbg !36
  %1112 = and i1 %1106, %1099, !dbg !36
  %1113 = extractelement <16 x i1> %768, i64 12, !dbg !35
  %1114 = and i1 %1103, %1113, !dbg !36
  %1115 = extractelement <16 x i1> %768, i64 13, !dbg !35
  %1116 = and i1 %1103, %1115, !dbg !36
  %1117 = and i1 %1106, %1113, !dbg !36
  %1118 = and i1 %1106, %1115, !dbg !36
  %1119 = and i1 %1070, %1084, !dbg !35
  %1120 = extractelement <16 x i1> %768, i64 0, !dbg !35
  %1121 = and i1 %1120, %1119, !dbg !35
  %1122 = and i1 %1071, %1086, !dbg !35
  %1123 = and i1 %1120, %1122, !dbg !35
  %1124 = and i1 %1072, %1084, !dbg !35
  %1125 = extractelement <16 x i1> %768, i64 1, !dbg !35
  %1126 = and i1 %1125, %1124, !dbg !35
  %1127 = and i1 %1073, %1086, !dbg !35
  %1128 = and i1 %1125, %1127, !dbg !35
  %1129 = and i1 %1070, %1097, !dbg !35
  %1130 = and i1 %1083, %1129, !dbg !35
  %1131 = and i1 %1074, %1099, !dbg !35
  %1132 = and i1 %1083, %1131, !dbg !35
  %1133 = and i1 %1075, %1097, !dbg !35
  %1134 = and i1 %1088, %1133, !dbg !35
  %1135 = and i1 %1076, %1099, !dbg !35
  %1136 = and i1 %1088, %1135, !dbg !35
  %1137 = and i1 %1070, %1113, !dbg !35
  %1138 = and i1 %1091, %1137, !dbg !35
  %1139 = and i1 %1077, %1115, !dbg !35
  %1140 = and i1 %1091, %1139, !dbg !35
  %1141 = and i1 %1078, %1113, !dbg !35
  %1142 = and i1 %1094, %1141, !dbg !35
  %1143 = and i1 %1079, %1115, !dbg !35
  %1144 = and i1 %1094, %1143, !dbg !35
  %1145 = extractelement <16 x i1> %768, i64 14, !dbg !35
  %1146 = and i1 %1070, %1145, !dbg !35
  %1147 = and i1 %1103, %1146, !dbg !35
  %1148 = extractelement <16 x i1> %768, i64 15, !dbg !35
  %1149 = and i1 %1080, %1148, !dbg !35
  %1150 = and i1 %1103, %1149, !dbg !35
  %1151 = and i1 %1081, %1145, !dbg !35
  %1152 = and i1 %1106, %1151, !dbg !35
  %1153 = and i1 %1082, %1148, !dbg !35
  %1154 = and i1 %1106, %1153, !dbg !35
  %1155 = shl i32 %60, 6, !dbg !37
  %1156 = sext i32 %1155 to i64, !dbg !38
  %1157 = getelementptr float, ptr addrspace(1) %3, i64 %1156, !dbg !38
  %1158 = and i32 %.lobit46, 3, !dbg !13
  %1159 = insertelement <8 x i32> poison, i32 %.lobit46, i64 0, !dbg !13
  %1160 = insertelement <8 x i32> %1159, i32 %1158, i64 1, !dbg !13
  %1161 = shufflevector <8 x i32> %1160, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !13
  %1162 = or <8 x i32> %1161, <i32 60, i32 56, i32 52, i32 48, i32 44, i32 40, i32 36, i32 32>, !dbg !13
  %1163 = insertelement <4 x i32> poison, i32 %1158, i64 0, !dbg !13
  %1164 = shufflevector <4 x i32> %1163, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %1165 = or disjoint <4 x i32> %1164, <i32 28, i32 24, i32 20, i32 16>, !dbg !13
  %1166 = insertelement <2 x i32> poison, i32 %1158, i64 0, !dbg !13
  %1167 = shufflevector <2 x i32> %1166, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %1168 = or disjoint <2 x i32> %1167, <i32 12, i32 8>, !dbg !13
  %1169 = or disjoint i32 %1158, 4, !dbg !13
  %1170 = insertelement <16 x i32> poison, i32 %1169, i64 14, !dbg !18
  %1171 = insertelement <16 x i32> %1170, i32 %1158, i64 15, !dbg !18
  %1172 = shufflevector <8 x i32> %1162, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %1173 = shufflevector <16 x i32> %1172, <16 x i32> %1171, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 30, i32 31>, !dbg !18
  %1174 = shufflevector <4 x i32> %1165, <4 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %1175 = shufflevector <16 x i32> %1173, <16 x i32> %1174, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 14, i32 15>, !dbg !18
  %1176 = shufflevector <2 x i32> %1168, <2 x i32> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %1177 = shufflevector <16 x i32> %1175, <16 x i32> %1176, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 14, i32 15>, !dbg !18
  %1178 = or disjoint <16 x i32> %1177, %764, !dbg !18
  %1179 = extractelement <16 x i32> %1178, i64 15, !dbg !39
  %1180 = sext i32 %1179 to i64, !dbg !39
  %.idx38 = shl nsw i64 %1180, 13, !dbg !39
  %1181 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx38, !dbg !39
  %1182 = getelementptr float, ptr addrspace(1) %1181, i64 %725, !dbg !39
  %1183 = extractelement <16 x i32> %1178, i64 14, !dbg !39
  %1184 = sext i32 %1183 to i64, !dbg !39
  %.idx39 = shl nsw i64 %1184, 13, !dbg !39
  %1185 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx39, !dbg !39
  %1186 = getelementptr float, ptr addrspace(1) %1185, i64 %725, !dbg !39
  %1187 = extractelement <16 x i32> %1178, i64 13, !dbg !39
  %1188 = sext i32 %1187 to i64, !dbg !39
  %.idx40 = shl nsw i64 %1188, 13, !dbg !39
  %1189 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx40, !dbg !39
  %1190 = getelementptr float, ptr addrspace(1) %1189, i64 %725, !dbg !39
  %1191 = extractelement <16 x i32> %1178, i64 12, !dbg !39
  %1192 = sext i32 %1191 to i64, !dbg !39
  %.idx41 = shl nsw i64 %1192, 13, !dbg !39
  %1193 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx41, !dbg !39
  %1194 = getelementptr float, ptr addrspace(1) %1193, i64 %725, !dbg !39
  %1195 = extractelement <16 x i32> %1178, i64 11, !dbg !39
  %1196 = sext i32 %1195 to i64, !dbg !39
  %.idx42 = shl nsw i64 %1196, 13, !dbg !39
  %1197 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx42, !dbg !39
  %1198 = getelementptr float, ptr addrspace(1) %1197, i64 %725, !dbg !39
  %1199 = extractelement <16 x i32> %1178, i64 10, !dbg !39
  %1200 = sext i32 %1199 to i64, !dbg !39
  %.idx43 = shl nsw i64 %1200, 13, !dbg !39
  %1201 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx43, !dbg !39
  %1202 = getelementptr float, ptr addrspace(1) %1201, i64 %725, !dbg !39
  %1203 = extractelement <16 x i32> %1178, i64 9, !dbg !39
  %1204 = sext i32 %1203 to i64, !dbg !39
  %.idx44 = shl nsw i64 %1204, 13, !dbg !39
  %1205 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx44, !dbg !39
  %1206 = getelementptr float, ptr addrspace(1) %1205, i64 %725, !dbg !39
  %1207 = extractelement <16 x i32> %1178, i64 8, !dbg !39
  %1208 = sext i32 %1207 to i64, !dbg !39
  %.idx45 = shl nsw i64 %1208, 13, !dbg !39
  %1209 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx45, !dbg !39
  %1210 = getelementptr float, ptr addrspace(1) %1209, i64 %725, !dbg !39
  %1211 = extractelement <16 x i32> %1178, i64 7, !dbg !39
  %1212 = sext i32 %1211 to i64, !dbg !39
  %.idx46 = shl nsw i64 %1212, 13, !dbg !39
  %1213 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx46, !dbg !39
  %1214 = getelementptr float, ptr addrspace(1) %1213, i64 %725, !dbg !39
  %1215 = extractelement <16 x i32> %1178, i64 6, !dbg !39
  %1216 = sext i32 %1215 to i64, !dbg !39
  %.idx47 = shl nsw i64 %1216, 13, !dbg !39
  %1217 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx47, !dbg !39
  %1218 = getelementptr float, ptr addrspace(1) %1217, i64 %725, !dbg !39
  %1219 = extractelement <16 x i32> %1178, i64 5, !dbg !39
  %1220 = sext i32 %1219 to i64, !dbg !39
  %.idx48 = shl nsw i64 %1220, 13, !dbg !39
  %1221 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx48, !dbg !39
  %1222 = getelementptr float, ptr addrspace(1) %1221, i64 %725, !dbg !39
  %1223 = extractelement <16 x i32> %1178, i64 4, !dbg !39
  %1224 = sext i32 %1223 to i64, !dbg !39
  %.idx49 = shl nsw i64 %1224, 13, !dbg !39
  %1225 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx49, !dbg !39
  %1226 = getelementptr float, ptr addrspace(1) %1225, i64 %725, !dbg !39
  %1227 = extractelement <16 x i32> %1178, i64 3, !dbg !39
  %1228 = sext i32 %1227 to i64, !dbg !39
  %.idx50 = shl nsw i64 %1228, 13, !dbg !39
  %1229 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx50, !dbg !39
  %1230 = getelementptr float, ptr addrspace(1) %1229, i64 %725, !dbg !39
  %1231 = extractelement <16 x i32> %1178, i64 2, !dbg !39
  %1232 = sext i32 %1231 to i64, !dbg !39
  %.idx51 = shl nsw i64 %1232, 13, !dbg !39
  %1233 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx51, !dbg !39
  %1234 = getelementptr float, ptr addrspace(1) %1233, i64 %725, !dbg !39
  %1235 = extractelement <16 x i32> %1178, i64 1, !dbg !39
  %1236 = sext i32 %1235 to i64, !dbg !39
  %.idx52 = shl nsw i64 %1236, 13, !dbg !39
  %1237 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx52, !dbg !39
  %1238 = getelementptr float, ptr addrspace(1) %1237, i64 %725, !dbg !39
  %1239 = extractelement <16 x i32> %1178, i64 0, !dbg !39
  %1240 = sext i32 %1239 to i64, !dbg !39
  %.idx53 = shl nsw i64 %1240, 13, !dbg !39
  %1241 = getelementptr i8, ptr addrspace(1) %1157, i64 %.idx53, !dbg !39
  %1242 = getelementptr float, ptr addrspace(1) %1241, i64 %725, !dbg !39
  %1243 = icmp slt <16 x i32> %1178, %767, !dbg !39
  %1244 = extractelement <16 x i1> %1243, i64 15, !dbg !39
  %1245 = and i1 %56, %1244, !dbg !39
  %1246 = extractelement <16 x i1> %1243, i64 14, !dbg !39
  %1247 = and i1 %56, %1246, !dbg !39
  %1248 = extractelement <16 x i1> %1243, i64 13, !dbg !39
  %1249 = and i1 %56, %1248, !dbg !39
  %1250 = extractelement <16 x i1> %1243, i64 12, !dbg !39
  %1251 = and i1 %56, %1250, !dbg !39
  %1252 = extractelement <16 x i1> %1243, i64 11, !dbg !39
  %1253 = and i1 %56, %1252, !dbg !39
  %1254 = extractelement <16 x i1> %1243, i64 10, !dbg !39
  %1255 = and i1 %56, %1254, !dbg !39
  %1256 = extractelement <16 x i1> %1243, i64 9, !dbg !39
  %1257 = and i1 %56, %1256, !dbg !39
  %1258 = extractelement <16 x i1> %1243, i64 8, !dbg !39
  %1259 = and i1 %56, %1258, !dbg !39
  %1260 = extractelement <16 x i1> %1243, i64 7, !dbg !39
  %1261 = and i1 %56, %1260, !dbg !39
  %1262 = extractelement <16 x i1> %1243, i64 6, !dbg !39
  %1263 = and i1 %56, %1262, !dbg !39
  %1264 = extractelement <16 x i1> %1243, i64 5, !dbg !39
  %1265 = and i1 %56, %1264, !dbg !39
  %1266 = extractelement <16 x i1> %1243, i64 4, !dbg !39
  %1267 = and i1 %56, %1266, !dbg !39
  %1268 = extractelement <16 x i1> %1243, i64 3, !dbg !39
  %1269 = and i1 %56, %1268, !dbg !39
  %1270 = extractelement <16 x i1> %1243, i64 2, !dbg !39
  %1271 = and i1 %56, %1270, !dbg !39
  %1272 = extractelement <16 x i1> %1243, i64 1, !dbg !39
  %1273 = and i1 %56, %1272, !dbg !39
  %1274 = extractelement <16 x i1> %1243, i64 0, !dbg !39
  %1275 = and i1 %56, %1274, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1276 = shl nuw nsw i32 %12, 4, !dbg !39
  %1277 = and i32 %1276, 448, !dbg !39
  %1278 = or disjoint i32 %731, %1277, !dbg !39
  %1279 = and i32 %723, 252, !dbg !39
  %1280 = lshr exact i32 %1277, 2, !dbg !39
  %1281 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1280, !dbg !39
  %1282 = getelementptr inbounds nuw float, ptr addrspace(3) %1281, i32 %1278, !dbg !39
  %1283 = bitcast float %1030 to i32, !dbg !39
  %1284 = select i1 %1121, i32 %1283, i32 0, !dbg !40
  %1285 = bitcast float %1031 to i32, !dbg !39
  %1286 = select i1 %1123, i32 %1285, i32 0, !dbg !40
  %1287 = insertelement <2 x i32> poison, i32 %1284, i64 0, !dbg !39
  %1288 = insertelement <2 x i32> %1287, i32 %1286, i64 1, !dbg !39
  store <2 x i32> %1288, ptr addrspace(3) %1282, align 8, !dbg !39
  %1289 = or disjoint i32 %1278, 512, !dbg !39
  %1290 = lshr i32 %1289, 4, !dbg !39
  %1291 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1290, !dbg !39
  %1292 = getelementptr inbounds nuw float, ptr addrspace(3) %1291, i32 %1289, !dbg !39
  %1293 = bitcast float %1032 to i32, !dbg !39
  %1294 = select i1 %1126, i32 %1293, i32 0, !dbg !40
  %1295 = bitcast float %1033 to i32, !dbg !39
  %1296 = select i1 %1128, i32 %1295, i32 0, !dbg !40
  %1297 = insertelement <2 x i32> poison, i32 %1294, i64 0, !dbg !39
  %1298 = insertelement <2 x i32> %1297, i32 %1296, i64 1, !dbg !39
  store <2 x i32> %1298, ptr addrspace(3) %1292, align 8, !dbg !39
  %1299 = getelementptr inbounds nuw i8, ptr addrspace(3) %1282, i32 64, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1299, align 8, !dbg !39
  %1300 = or disjoint i32 %1278, 528, !dbg !39
  %1301 = lshr i32 %1300, 4, !dbg !39
  %1302 = and i32 %1301, 60, !dbg !39
  %1303 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1302, !dbg !39
  %1304 = getelementptr inbounds nuw float, ptr addrspace(3) %1303, i32 %1300, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1304, align 8, !dbg !39
  %1305 = getelementptr inbounds nuw i8, ptr addrspace(3) %1282, i32 128, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1305, align 8, !dbg !39
  %1306 = or disjoint i32 %1278, 544, !dbg !39
  %1307 = lshr i32 %1306, 4, !dbg !39
  %1308 = and i32 %1307, 60, !dbg !39
  %1309 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1308, !dbg !39
  %1310 = getelementptr inbounds nuw float, ptr addrspace(3) %1309, i32 %1306, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1310, align 8, !dbg !39
  %1311 = getelementptr inbounds nuw i8, ptr addrspace(3) %1282, i32 192, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1311, align 8, !dbg !39
  %1312 = or disjoint i32 %1278, 560, !dbg !39
  %1313 = lshr i32 %1312, 4, !dbg !39
  %1314 = and i32 %1313, 60, !dbg !39
  %1315 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1314, !dbg !39
  %1316 = getelementptr inbounds nuw float, ptr addrspace(3) %1315, i32 %1312, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1316, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1317 = and i32 %.lobit13, 12, !dbg !39
  %1318 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1317, !dbg !39
  %1319 = getelementptr inbounds nuw float, ptr addrspace(3) %1318, i32 %1279, !dbg !39
  %1320 = load <4 x i32>, ptr addrspace(3) %1319, align 16, !dbg !39
  %1321 = or disjoint i32 %1279, 256, !dbg !39
  %1322 = lshr i32 %1321, 4, !dbg !39
  %1323 = and i32 %1322, 28, !dbg !39
  %1324 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1323, !dbg !39
  %1325 = getelementptr inbounds nuw float, ptr addrspace(3) %1324, i32 %1321, !dbg !39
  %1326 = load <4 x i32>, ptr addrspace(3) %1325, align 16, !dbg !39
  %1327 = or disjoint i32 %1279, 512, !dbg !39
  %1328 = lshr i32 %1327, 4, !dbg !39
  %1329 = and i32 %1328, 44, !dbg !39
  %1330 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1329, !dbg !39
  %1331 = getelementptr inbounds nuw float, ptr addrspace(3) %1330, i32 %1327, !dbg !39
  %1332 = load <4 x i32>, ptr addrspace(3) %1331, align 16, !dbg !39
  %1333 = or disjoint i32 %1279, 768, !dbg !39
  %1334 = lshr i32 %1333, 4, !dbg !39
  %1335 = and i32 %1334, 60, !dbg !39
  %1336 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %1335, !dbg !39
  %1337 = getelementptr inbounds nuw float, ptr addrspace(3) %1336, i32 %1333, !dbg !39
  %1338 = load <4 x i32>, ptr addrspace(3) %1337, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1339 = bitcast float %1034 to i32, !dbg !39
  %1340 = select i1 %1085, i32 %1339, i32 0, !dbg !40
  %1341 = bitcast float %1035 to i32, !dbg !39
  %1342 = select i1 %1087, i32 %1341, i32 0, !dbg !40
  %1343 = insertelement <2 x i32> poison, i32 %1340, i64 0, !dbg !39
  %1344 = insertelement <2 x i32> %1343, i32 %1342, i64 1, !dbg !39
  store <2 x i32> %1344, ptr addrspace(3) %1282, align 8, !dbg !39
  %1345 = bitcast float %1036 to i32, !dbg !39
  %1346 = select i1 %1089, i32 %1345, i32 0, !dbg !40
  %1347 = bitcast float %1037 to i32, !dbg !39
  %1348 = select i1 %1090, i32 %1347, i32 0, !dbg !40
  %1349 = insertelement <2 x i32> poison, i32 %1346, i64 0, !dbg !39
  %1350 = insertelement <2 x i32> %1349, i32 %1348, i64 1, !dbg !39
  store <2 x i32> %1350, ptr addrspace(3) %1292, align 8, !dbg !39
  %1351 = bitcast float %1038 to i32, !dbg !39
  %1352 = select i1 %1130, i32 %1351, i32 0, !dbg !40
  %1353 = bitcast float %1039 to i32, !dbg !39
  %1354 = select i1 %1132, i32 %1353, i32 0, !dbg !40
  %1355 = insertelement <2 x i32> poison, i32 %1352, i64 0, !dbg !39
  %1356 = insertelement <2 x i32> %1355, i32 %1354, i64 1, !dbg !39
  store <2 x i32> %1356, ptr addrspace(3) %1299, align 8, !dbg !39
  %1357 = bitcast float %1040 to i32, !dbg !39
  %1358 = select i1 %1134, i32 %1357, i32 0, !dbg !40
  %1359 = bitcast float %1041 to i32, !dbg !39
  %1360 = select i1 %1136, i32 %1359, i32 0, !dbg !40
  %1361 = insertelement <2 x i32> poison, i32 %1358, i64 0, !dbg !39
  %1362 = insertelement <2 x i32> %1361, i32 %1360, i64 1, !dbg !39
  store <2 x i32> %1362, ptr addrspace(3) %1304, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1305, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1310, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1311, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1316, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1363 = load <4 x i32>, ptr addrspace(3) %1319, align 16, !dbg !39
  %1364 = load <4 x i32>, ptr addrspace(3) %1325, align 16, !dbg !39
  %1365 = load <4 x i32>, ptr addrspace(3) %1331, align 16, !dbg !39
  %1366 = load <4 x i32>, ptr addrspace(3) %1337, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1367 = bitcast float %1042 to i32, !dbg !39
  %1368 = select i1 %1092, i32 %1367, i32 0, !dbg !40
  %1369 = bitcast float %1043 to i32, !dbg !39
  %1370 = select i1 %1093, i32 %1369, i32 0, !dbg !40
  %1371 = insertelement <2 x i32> poison, i32 %1368, i64 0, !dbg !39
  %1372 = insertelement <2 x i32> %1371, i32 %1370, i64 1, !dbg !39
  store <2 x i32> %1372, ptr addrspace(3) %1282, align 8, !dbg !39
  %1373 = bitcast float %1044 to i32, !dbg !39
  %1374 = select i1 %1095, i32 %1373, i32 0, !dbg !40
  %1375 = bitcast float %1045 to i32, !dbg !39
  %1376 = select i1 %1096, i32 %1375, i32 0, !dbg !40
  %1377 = insertelement <2 x i32> poison, i32 %1374, i64 0, !dbg !39
  %1378 = insertelement <2 x i32> %1377, i32 %1376, i64 1, !dbg !39
  store <2 x i32> %1378, ptr addrspace(3) %1292, align 8, !dbg !39
  %1379 = bitcast float %1046 to i32, !dbg !39
  %1380 = select i1 %1098, i32 %1379, i32 0, !dbg !40
  %1381 = bitcast float %1047 to i32, !dbg !39
  %1382 = select i1 %1100, i32 %1381, i32 0, !dbg !40
  %1383 = insertelement <2 x i32> poison, i32 %1380, i64 0, !dbg !39
  %1384 = insertelement <2 x i32> %1383, i32 %1382, i64 1, !dbg !39
  store <2 x i32> %1384, ptr addrspace(3) %1299, align 8, !dbg !39
  %1385 = bitcast float %1048 to i32, !dbg !39
  %1386 = select i1 %1101, i32 %1385, i32 0, !dbg !40
  %1387 = bitcast float %1049 to i32, !dbg !39
  %1388 = select i1 %1102, i32 %1387, i32 0, !dbg !40
  %1389 = insertelement <2 x i32> poison, i32 %1386, i64 0, !dbg !39
  %1390 = insertelement <2 x i32> %1389, i32 %1388, i64 1, !dbg !39
  store <2 x i32> %1390, ptr addrspace(3) %1304, align 8, !dbg !39
  %1391 = bitcast float %1050 to i32, !dbg !39
  %1392 = select i1 %1138, i32 %1391, i32 0, !dbg !40
  %1393 = bitcast float %1051 to i32, !dbg !39
  %1394 = select i1 %1140, i32 %1393, i32 0, !dbg !40
  %1395 = insertelement <2 x i32> poison, i32 %1392, i64 0, !dbg !39
  %1396 = insertelement <2 x i32> %1395, i32 %1394, i64 1, !dbg !39
  store <2 x i32> %1396, ptr addrspace(3) %1305, align 8, !dbg !39
  %1397 = bitcast float %1052 to i32, !dbg !39
  %1398 = select i1 %1142, i32 %1397, i32 0, !dbg !40
  %1399 = bitcast float %1053 to i32, !dbg !39
  %1400 = select i1 %1144, i32 %1399, i32 0, !dbg !40
  %1401 = insertelement <2 x i32> poison, i32 %1398, i64 0, !dbg !39
  %1402 = insertelement <2 x i32> %1401, i32 %1400, i64 1, !dbg !39
  store <2 x i32> %1402, ptr addrspace(3) %1310, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1311, align 8, !dbg !39
  store <2 x i32> zeroinitializer, ptr addrspace(3) %1316, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1403 = load <4 x i32>, ptr addrspace(3) %1319, align 16, !dbg !39
  %1404 = load <4 x i32>, ptr addrspace(3) %1325, align 16, !dbg !39
  %1405 = load <4 x i32>, ptr addrspace(3) %1331, align 16, !dbg !39
  %1406 = load <4 x i32>, ptr addrspace(3) %1337, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1407 = bitcast float %1054 to i32, !dbg !39
  %1408 = select i1 %1104, i32 %1407, i32 0, !dbg !40
  %1409 = bitcast float %1055 to i32, !dbg !39
  %1410 = select i1 %1105, i32 %1409, i32 0, !dbg !40
  %1411 = insertelement <2 x i32> poison, i32 %1408, i64 0, !dbg !39
  %1412 = insertelement <2 x i32> %1411, i32 %1410, i64 1, !dbg !39
  store <2 x i32> %1412, ptr addrspace(3) %1282, align 8, !dbg !39
  %1413 = bitcast float %1056 to i32, !dbg !39
  %1414 = select i1 %1107, i32 %1413, i32 0, !dbg !40
  %1415 = bitcast float %1057 to i32, !dbg !39
  %1416 = select i1 %1108, i32 %1415, i32 0, !dbg !40
  %1417 = insertelement <2 x i32> poison, i32 %1414, i64 0, !dbg !39
  %1418 = insertelement <2 x i32> %1417, i32 %1416, i64 1, !dbg !39
  store <2 x i32> %1418, ptr addrspace(3) %1292, align 8, !dbg !39
  %1419 = bitcast float %1058 to i32, !dbg !39
  %1420 = select i1 %1109, i32 %1419, i32 0, !dbg !40
  %1421 = bitcast float %1059 to i32, !dbg !39
  %1422 = select i1 %1110, i32 %1421, i32 0, !dbg !40
  %1423 = insertelement <2 x i32> poison, i32 %1420, i64 0, !dbg !39
  %1424 = insertelement <2 x i32> %1423, i32 %1422, i64 1, !dbg !39
  store <2 x i32> %1424, ptr addrspace(3) %1299, align 8, !dbg !39
  %1425 = bitcast float %1060 to i32, !dbg !39
  %1426 = select i1 %1111, i32 %1425, i32 0, !dbg !40
  %1427 = bitcast float %1061 to i32, !dbg !39
  %1428 = select i1 %1112, i32 %1427, i32 0, !dbg !40
  %1429 = insertelement <2 x i32> poison, i32 %1426, i64 0, !dbg !39
  %1430 = insertelement <2 x i32> %1429, i32 %1428, i64 1, !dbg !39
  store <2 x i32> %1430, ptr addrspace(3) %1304, align 8, !dbg !39
  %1431 = bitcast float %1062 to i32, !dbg !39
  %1432 = select i1 %1114, i32 %1431, i32 0, !dbg !40
  %1433 = bitcast float %1063 to i32, !dbg !39
  %1434 = select i1 %1116, i32 %1433, i32 0, !dbg !40
  %1435 = insertelement <2 x i32> poison, i32 %1432, i64 0, !dbg !39
  %1436 = insertelement <2 x i32> %1435, i32 %1434, i64 1, !dbg !39
  store <2 x i32> %1436, ptr addrspace(3) %1305, align 8, !dbg !39
  %1437 = bitcast float %1064 to i32, !dbg !39
  %1438 = select i1 %1117, i32 %1437, i32 0, !dbg !40
  %1439 = bitcast float %1065 to i32, !dbg !39
  %1440 = select i1 %1118, i32 %1439, i32 0, !dbg !40
  %1441 = insertelement <2 x i32> poison, i32 %1438, i64 0, !dbg !39
  %1442 = insertelement <2 x i32> %1441, i32 %1440, i64 1, !dbg !39
  store <2 x i32> %1442, ptr addrspace(3) %1310, align 8, !dbg !39
  %1443 = bitcast float %1066 to i32, !dbg !39
  %1444 = select i1 %1147, i32 %1443, i32 0, !dbg !40
  %1445 = bitcast float %1067 to i32, !dbg !39
  %1446 = select i1 %1150, i32 %1445, i32 0, !dbg !40
  %1447 = insertelement <2 x i32> poison, i32 %1444, i64 0, !dbg !39
  %1448 = insertelement <2 x i32> %1447, i32 %1446, i64 1, !dbg !39
  store <2 x i32> %1448, ptr addrspace(3) %1311, align 8, !dbg !39
  %1449 = bitcast float %1068 to i32, !dbg !39
  %1450 = select i1 %1152, i32 %1449, i32 0, !dbg !40
  %1451 = bitcast float %1069 to i32, !dbg !39
  %1452 = select i1 %1154, i32 %1451, i32 0, !dbg !40
  %1453 = insertelement <2 x i32> poison, i32 %1450, i64 0, !dbg !39
  %1454 = insertelement <2 x i32> %1453, i32 %1452, i64 1, !dbg !39
  store <2 x i32> %1454, ptr addrspace(3) %1316, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  %1455 = load <4 x i32>, ptr addrspace(3) %1319, align 16, !dbg !39
  %1456 = load <4 x i32>, ptr addrspace(3) %1325, align 16, !dbg !39
  %1457 = load <4 x i32>, ptr addrspace(3) %1331, align 16, !dbg !39
  %1458 = load <4 x i32>, ptr addrspace(3) %1337, align 16, !dbg !39
  %.extract = extractelement <4 x i32> %1320, i64 0, !dbg !39
  %.extract118 = extractelement <4 x i32> %1320, i64 1, !dbg !39
  %.extract119 = extractelement <4 x i32> %1320, i64 2, !dbg !39
  %.extract120 = extractelement <4 x i32> %1320, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract118, i32 %.extract119, i32 %.extract120, ptr addrspace(1) %1182, i1 %1245) #2, !dbg !39
  %.extract121 = extractelement <4 x i32> %1326, i64 0, !dbg !39
  %.extract122 = extractelement <4 x i32> %1326, i64 1, !dbg !39
  %.extract123 = extractelement <4 x i32> %1326, i64 2, !dbg !39
  %.extract124 = extractelement <4 x i32> %1326, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract121, i32 %.extract122, i32 %.extract123, i32 %.extract124, ptr addrspace(1) %1186, i1 %1247) #2, !dbg !39
  %.extract125 = extractelement <4 x i32> %1332, i64 0, !dbg !39
  %.extract126 = extractelement <4 x i32> %1332, i64 1, !dbg !39
  %.extract127 = extractelement <4 x i32> %1332, i64 2, !dbg !39
  %.extract128 = extractelement <4 x i32> %1332, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract125, i32 %.extract126, i32 %.extract127, i32 %.extract128, ptr addrspace(1) %1190, i1 %1249) #2, !dbg !39
  %.extract129 = extractelement <4 x i32> %1338, i64 0, !dbg !39
  %.extract130 = extractelement <4 x i32> %1338, i64 1, !dbg !39
  %.extract131 = extractelement <4 x i32> %1338, i64 2, !dbg !39
  %.extract132 = extractelement <4 x i32> %1338, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract129, i32 %.extract130, i32 %.extract131, i32 %.extract132, ptr addrspace(1) %1194, i1 %1251) #2, !dbg !39
  %.extract133 = extractelement <4 x i32> %1363, i64 0, !dbg !39
  %.extract134 = extractelement <4 x i32> %1363, i64 1, !dbg !39
  %.extract135 = extractelement <4 x i32> %1363, i64 2, !dbg !39
  %.extract136 = extractelement <4 x i32> %1363, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract133, i32 %.extract134, i32 %.extract135, i32 %.extract136, ptr addrspace(1) %1198, i1 %1253) #2, !dbg !39
  %.extract137 = extractelement <4 x i32> %1364, i64 0, !dbg !39
  %.extract138 = extractelement <4 x i32> %1364, i64 1, !dbg !39
  %.extract139 = extractelement <4 x i32> %1364, i64 2, !dbg !39
  %.extract140 = extractelement <4 x i32> %1364, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract137, i32 %.extract138, i32 %.extract139, i32 %.extract140, ptr addrspace(1) %1202, i1 %1255) #2, !dbg !39
  %.extract141 = extractelement <4 x i32> %1365, i64 0, !dbg !39
  %.extract142 = extractelement <4 x i32> %1365, i64 1, !dbg !39
  %.extract143 = extractelement <4 x i32> %1365, i64 2, !dbg !39
  %.extract144 = extractelement <4 x i32> %1365, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract141, i32 %.extract142, i32 %.extract143, i32 %.extract144, ptr addrspace(1) %1206, i1 %1257) #2, !dbg !39
  %.extract145 = extractelement <4 x i32> %1366, i64 0, !dbg !39
  %.extract146 = extractelement <4 x i32> %1366, i64 1, !dbg !39
  %.extract147 = extractelement <4 x i32> %1366, i64 2, !dbg !39
  %.extract148 = extractelement <4 x i32> %1366, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract145, i32 %.extract146, i32 %.extract147, i32 %.extract148, ptr addrspace(1) %1210, i1 %1259) #2, !dbg !39
  %.extract149 = extractelement <4 x i32> %1403, i64 0, !dbg !39
  %.extract150 = extractelement <4 x i32> %1403, i64 1, !dbg !39
  %.extract151 = extractelement <4 x i32> %1403, i64 2, !dbg !39
  %.extract152 = extractelement <4 x i32> %1403, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract149, i32 %.extract150, i32 %.extract151, i32 %.extract152, ptr addrspace(1) %1214, i1 %1261) #2, !dbg !39
  %.extract153 = extractelement <4 x i32> %1404, i64 0, !dbg !39
  %.extract154 = extractelement <4 x i32> %1404, i64 1, !dbg !39
  %.extract155 = extractelement <4 x i32> %1404, i64 2, !dbg !39
  %.extract156 = extractelement <4 x i32> %1404, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract153, i32 %.extract154, i32 %.extract155, i32 %.extract156, ptr addrspace(1) %1218, i1 %1263) #2, !dbg !39
  %.extract157 = extractelement <4 x i32> %1405, i64 0, !dbg !39
  %.extract158 = extractelement <4 x i32> %1405, i64 1, !dbg !39
  %.extract159 = extractelement <4 x i32> %1405, i64 2, !dbg !39
  %.extract160 = extractelement <4 x i32> %1405, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract157, i32 %.extract158, i32 %.extract159, i32 %.extract160, ptr addrspace(1) %1222, i1 %1265) #2, !dbg !39
  %.extract161 = extractelement <4 x i32> %1406, i64 0, !dbg !39
  %.extract162 = extractelement <4 x i32> %1406, i64 1, !dbg !39
  %.extract163 = extractelement <4 x i32> %1406, i64 2, !dbg !39
  %.extract164 = extractelement <4 x i32> %1406, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract161, i32 %.extract162, i32 %.extract163, i32 %.extract164, ptr addrspace(1) %1226, i1 %1267) #2, !dbg !39
  %.extract165 = extractelement <4 x i32> %1455, i64 0, !dbg !39
  %.extract166 = extractelement <4 x i32> %1455, i64 1, !dbg !39
  %.extract167 = extractelement <4 x i32> %1455, i64 2, !dbg !39
  %.extract168 = extractelement <4 x i32> %1455, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract165, i32 %.extract166, i32 %.extract167, i32 %.extract168, ptr addrspace(1) %1230, i1 %1269) #2, !dbg !39
  %.extract169 = extractelement <4 x i32> %1456, i64 0, !dbg !39
  %.extract170 = extractelement <4 x i32> %1456, i64 1, !dbg !39
  %.extract171 = extractelement <4 x i32> %1456, i64 2, !dbg !39
  %.extract172 = extractelement <4 x i32> %1456, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract169, i32 %.extract170, i32 %.extract171, i32 %.extract172, ptr addrspace(1) %1234, i1 %1271) #2, !dbg !39
  %.extract173 = extractelement <4 x i32> %1457, i64 0, !dbg !39
  %.extract174 = extractelement <4 x i32> %1457, i64 1, !dbg !39
  %.extract175 = extractelement <4 x i32> %1457, i64 2, !dbg !39
  %.extract176 = extractelement <4 x i32> %1457, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract173, i32 %.extract174, i32 %.extract175, i32 %.extract176, ptr addrspace(1) %1238, i1 %1273) #2, !dbg !39
  %.extract177 = extractelement <4 x i32> %1458, i64 0, !dbg !39
  %.extract178 = extractelement <4 x i32> %1458, i64 1, !dbg !39
  %.extract179 = extractelement <4 x i32> %1458, i64 2, !dbg !39
  %.extract180 = extractelement <4 x i32> %1458, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract177, i32 %.extract178, i32 %.extract179, i32 %.extract180, ptr addrspace(1) %1242, i1 %1275) #2, !dbg !39
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 51, column: 21, scope: !5)
!26 = !DILocation(line: 52, column: 16, scope: !5)
!27 = !DILocation(line: 64, column: 36, scope: !5)
!28 = !DILocation(line: 64, column: 44, scope: !5)
!29 = !DILocation(line: 65, column: 22, scope: !5)
!30 = !DILocation(line: 66, column: 34, scope: !5)
!31 = !DILocation(line: 67, column: 19, scope: !5)
!32 = !DILocation(line: 67, column: 15, scope: !5)
!33 = !DILocation(line: 68, column: 11, scope: !5)
!34 = !DILocation(line: 70, column: 26, scope: !5)
!35 = !DILocation(line: 70, column: 43, scope: !5)
!36 = !DILocation(line: 70, column: 58, scope: !5)
!37 = !DILocation(line: 72, column: 48, scope: !5)
!38 = !DILocation(line: 72, column: 32, scope: !5)
!39 = !DILocation(line: 73, column: 18, scope: !5)
!40 = !DILocation(line: 71, column: 29, scope: !5)
!41 = !DILocation(line: 73, column: 4, scope: !5)
