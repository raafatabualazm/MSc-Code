#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#loc120 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)
module {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c32_i32 = arith.constant 32 : i32 loc(#loc3)
    %c32_i32_0 = arith.constant 32 : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32_0 : i32 loc(#loc3)
    %c32_i32_1 = arith.constant 32 : i32 loc(#loc4)
    %c32_i32_2 = arith.constant 32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32_2 : i32 loc(#loc4)
    %4 = arith.extsi %2 : i32 to i64 loc(#loc5)
    %5 = arith.extsi %arg7 : i32 to i64 loc(#loc5)
    %6 = arith.muli %4, %5 : i64 loc(#loc5)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc5)
    %7 = arith.cmpi sle, %6, %c2147483647_i64 : i64 loc(#loc5)
    %8 = arith.cmpi sge, %6, %c-2147483648_i64 : i64 loc(#loc5)
    %9 = arith.andi %7, %8 : i1 loc(#loc5)
    %10 = arith.muli %2, %arg7 : i32 loc(#loc5)
    %11 = arith.extsi %2 : i32 to i64 loc(#loc6)
    %12 = arith.extsi %arg7 : i32 to i64 loc(#loc6)
    %13 = arith.muli %11, %12 : i64 loc(#loc6)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc6)
    %14 = arith.cmpi sle, %13, %c2147483647_i64_3 : i64 loc(#loc6)
    %15 = arith.cmpi sge, %13, %c-2147483648_i64_4 : i64 loc(#loc6)
    %16 = arith.andi %14, %15 : i1 loc(#loc6)
    %17 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %18 = arith.extsi %17 : i32 to i64 loc(#loc7)
    %19 = arith.extsi %arg7 : i32 to i64 loc(#loc7)
    %20 = arith.addi %18, %19 : i64 loc(#loc7)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc7)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc7)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_5 : i64 loc(#loc7)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_6 : i64 loc(#loc7)
    %23 = arith.andi %21, %22 : i1 loc(#loc7)
    %24 = arith.addi %17, %arg7 : i32 loc(#loc7)
    %25 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg7) : (i32) -> i32 loc(#loc8)
    %26 = arith.extsi %2 : i32 to i64 loc(#loc9)
    %27 = arith.extsi %25 : i32 to i64 loc(#loc9)
    %28 = arith.muli %26, %27 : i64 loc(#loc9)
    %c2147483647_i64_7 = arith.constant 2147483647 : i64 loc(#loc9)
    %c-2147483648_i64_8 = arith.constant -2147483648 : i64 loc(#loc9)
    %29 = arith.cmpi sle, %28, %c2147483647_i64_7 : i64 loc(#loc9)
    %30 = arith.cmpi sge, %28, %c-2147483648_i64_8 : i64 loc(#loc9)
    %31 = arith.andi %29, %30 : i1 loc(#loc9)
    %32 = arith.muli %2, %25 : i32 loc(#loc9)
    %33 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc10)
    %34 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc11)
    %c32_i32_9 = arith.constant 32 : i32 loc(#loc12)
    %c32_i32_10 = arith.constant 32 : i32 loc(#loc12)
    %35 = arith.extsi %32 : i32 to i64 loc(#loc12)
    %36 = arith.extsi %c32_i32_10 : i32 to i64 loc(#loc12)
    %37 = arith.muli %35, %36 : i64 loc(#loc12)
    %c2147483647_i64_11 = arith.constant 2147483647 : i64 loc(#loc12)
    %c-2147483648_i64_12 = arith.constant -2147483648 : i64 loc(#loc12)
    %38 = arith.cmpi sle, %37, %c2147483647_i64_11 : i64 loc(#loc12)
    %39 = arith.cmpi sge, %37, %c-2147483648_i64_12 : i64 loc(#loc12)
    %40 = arith.andi %38, %39 : i1 loc(#loc12)
    %41 = arith.muli %32, %c32_i32_10 : i32 loc(#loc12)
    %42 = arith.extsi %41 : i32 to i64 loc(#loc13)
    %43 = arith.extsi %3 : i32 to i64 loc(#loc13)
    %44 = arith.addi %42, %43 : i64 loc(#loc13)
    %c2147483647_i64_13 = arith.constant 2147483647 : i64 loc(#loc13)
    %c-2147483648_i64_14 = arith.constant -2147483648 : i64 loc(#loc13)
    %45 = arith.cmpi sle, %44, %c2147483647_i64_13 : i64 loc(#loc13)
    %46 = arith.cmpi sge, %44, %c-2147483648_i64_14 : i64 loc(#loc13)
    %47 = arith.andi %45, %46 : i1 loc(#loc13)
    %48 = arith.addi %41, %3 : i32 loc(#loc13)
    %c128_i32 = arith.constant 128 : i32 loc(#loc14)
    %c128_i32_15 = arith.constant 128 : i32 loc(#loc14)
    %49 = arith.extsi %48 : i32 to i64 loc(#loc14)
    %50 = arith.extsi %c128_i32_15 : i32 to i64 loc(#loc14)
    %51 = arith.muli %49, %50 : i64 loc(#loc14)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc14)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc14)
    %52 = arith.cmpi sle, %51, %c2147483647_i64_16 : i64 loc(#loc14)
    %53 = arith.cmpi sge, %51, %c-2147483648_i64_17 : i64 loc(#loc14)
    %54 = arith.andi %52, %53 : i1 loc(#loc14)
    %55 = arith.muli %48, %c128_i32_15 : i32 loc(#loc14)
    %c128_i32_18 = arith.constant 128 : i32 loc(#loc15)
    %c128_i32_19 = arith.constant 128 : i32 loc(#loc15)
    %56 = arith.extsi %55 : i32 to i64 loc(#loc15)
    %57 = arith.extsi %c128_i32_19 : i32 to i64 loc(#loc15)
    %58 = arith.muli %56, %57 : i64 loc(#loc15)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc15)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc15)
    %59 = arith.cmpi sle, %58, %c2147483647_i64_20 : i64 loc(#loc15)
    %60 = arith.cmpi sge, %58, %c-2147483648_i64_21 : i64 loc(#loc15)
    %61 = arith.andi %59, %60 : i1 loc(#loc15)
    %62 = arith.muli %55, %c128_i32_19 : i32 loc(#loc15)
    %63 = tt.addptr %arg5, %62 : !tt.ptr<bf16>, i32 loc(#loc16)
    %c32_i32_22 = arith.constant 32 : i32 loc(#loc17)
    %c32_i32_23 = arith.constant 32 : i32 loc(#loc17)
    %64 = arith.extsi %10 : i32 to i64 loc(#loc17)
    %65 = arith.extsi %c32_i32_23 : i32 to i64 loc(#loc17)
    %66 = arith.muli %64, %65 : i64 loc(#loc17)
    %c2147483647_i64_24 = arith.constant 2147483647 : i64 loc(#loc17)
    %c-2147483648_i64_25 = arith.constant -2147483648 : i64 loc(#loc17)
    %67 = arith.cmpi sle, %66, %c2147483647_i64_24 : i64 loc(#loc17)
    %68 = arith.cmpi sge, %66, %c-2147483648_i64_25 : i64 loc(#loc17)
    %69 = arith.andi %67, %68 : i1 loc(#loc17)
    %70 = arith.muli %10, %c32_i32_23 : i32 loc(#loc17)
    %71 = arith.extsi %70 : i32 to i64 loc(#loc18)
    %72 = arith.extsi %3 : i32 to i64 loc(#loc18)
    %73 = arith.addi %71, %72 : i64 loc(#loc18)
    %c2147483647_i64_26 = arith.constant 2147483647 : i64 loc(#loc18)
    %c-2147483648_i64_27 = arith.constant -2147483648 : i64 loc(#loc18)
    %74 = arith.cmpi sle, %73, %c2147483647_i64_26 : i64 loc(#loc18)
    %75 = arith.cmpi sge, %73, %c-2147483648_i64_27 : i64 loc(#loc18)
    %76 = arith.andi %74, %75 : i1 loc(#loc18)
    %77 = arith.addi %70, %3 : i32 loc(#loc18)
    %c128_i32_28 = arith.constant 128 : i32 loc(#loc19)
    %c128_i32_29 = arith.constant 128 : i32 loc(#loc19)
    %78 = arith.extsi %77 : i32 to i64 loc(#loc19)
    %79 = arith.extsi %c128_i32_29 : i32 to i64 loc(#loc19)
    %80 = arith.muli %78, %79 : i64 loc(#loc19)
    %c2147483647_i64_30 = arith.constant 2147483647 : i64 loc(#loc19)
    %c-2147483648_i64_31 = arith.constant -2147483648 : i64 loc(#loc19)
    %81 = arith.cmpi sle, %80, %c2147483647_i64_30 : i64 loc(#loc19)
    %82 = arith.cmpi sge, %80, %c-2147483648_i64_31 : i64 loc(#loc19)
    %83 = arith.andi %81, %82 : i1 loc(#loc19)
    %84 = arith.muli %77, %c128_i32_29 : i32 loc(#loc19)
    %85 = tt.addptr %arg1, %84 : !tt.ptr<bf16>, i32 loc(#loc20)
    %c32_i32_32 = arith.constant 32 : i32 loc(#loc21)
    %c32_i32_33 = arith.constant 32 : i32 loc(#loc21)
    %86 = arith.extsi %10 : i32 to i64 loc(#loc21)
    %87 = arith.extsi %c32_i32_33 : i32 to i64 loc(#loc21)
    %88 = arith.muli %86, %87 : i64 loc(#loc21)
    %c2147483647_i64_34 = arith.constant 2147483647 : i64 loc(#loc21)
    %c-2147483648_i64_35 = arith.constant -2147483648 : i64 loc(#loc21)
    %89 = arith.cmpi sle, %88, %c2147483647_i64_34 : i64 loc(#loc21)
    %90 = arith.cmpi sge, %88, %c-2147483648_i64_35 : i64 loc(#loc21)
    %91 = arith.andi %89, %90 : i1 loc(#loc21)
    %92 = arith.muli %10, %c32_i32_33 : i32 loc(#loc21)
    %93 = arith.extsi %92 : i32 to i64 loc(#loc22)
    %94 = arith.extsi %3 : i32 to i64 loc(#loc22)
    %95 = arith.addi %93, %94 : i64 loc(#loc22)
    %c2147483647_i64_36 = arith.constant 2147483647 : i64 loc(#loc22)
    %c-2147483648_i64_37 = arith.constant -2147483648 : i64 loc(#loc22)
    %96 = arith.cmpi sle, %95, %c2147483647_i64_36 : i64 loc(#loc22)
    %97 = arith.cmpi sge, %95, %c-2147483648_i64_37 : i64 loc(#loc22)
    %98 = arith.andi %96, %97 : i1 loc(#loc22)
    %99 = arith.addi %92, %3 : i32 loc(#loc22)
    %c128_i32_38 = arith.constant 128 : i32 loc(#loc23)
    %c128_i32_39 = arith.constant 128 : i32 loc(#loc23)
    %100 = arith.extsi %99 : i32 to i64 loc(#loc23)
    %101 = arith.extsi %c128_i32_39 : i32 to i64 loc(#loc23)
    %102 = arith.muli %100, %101 : i64 loc(#loc23)
    %c2147483647_i64_40 = arith.constant 2147483647 : i64 loc(#loc23)
    %c-2147483648_i64_41 = arith.constant -2147483648 : i64 loc(#loc23)
    %103 = arith.cmpi sle, %102, %c2147483647_i64_40 : i64 loc(#loc23)
    %104 = arith.cmpi sge, %102, %c-2147483648_i64_41 : i64 loc(#loc23)
    %105 = arith.andi %103, %104 : i1 loc(#loc23)
    %106 = arith.muli %99, %c128_i32_39 : i32 loc(#loc23)
    %107 = tt.addptr %arg0, %106 : !tt.ptr<bf16>, i32 loc(#loc24)
    %c32_i32_42 = arith.constant 32 : i32 loc(#loc25)
    %c32_i32_43 = arith.constant 32 : i32 loc(#loc25)
    %108 = arith.extsi %10 : i32 to i64 loc(#loc25)
    %109 = arith.extsi %c32_i32_43 : i32 to i64 loc(#loc25)
    %110 = arith.muli %108, %109 : i64 loc(#loc25)
    %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc25)
    %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc25)
    %111 = arith.cmpi sle, %110, %c2147483647_i64_44 : i64 loc(#loc25)
    %112 = arith.cmpi sge, %110, %c-2147483648_i64_45 : i64 loc(#loc25)
    %113 = arith.andi %111, %112 : i1 loc(#loc25)
    %114 = arith.muli %10, %c32_i32_43 : i32 loc(#loc25)
    %115 = arith.extsi %114 : i32 to i64 loc(#loc26)
    %116 = arith.extsi %3 : i32 to i64 loc(#loc26)
    %117 = arith.addi %115, %116 : i64 loc(#loc26)
    %c2147483647_i64_46 = arith.constant 2147483647 : i64 loc(#loc26)
    %c-2147483648_i64_47 = arith.constant -2147483648 : i64 loc(#loc26)
    %118 = arith.cmpi sle, %117, %c2147483647_i64_46 : i64 loc(#loc26)
    %119 = arith.cmpi sge, %117, %c-2147483648_i64_47 : i64 loc(#loc26)
    %120 = arith.andi %118, %119 : i1 loc(#loc26)
    %121 = arith.addi %114, %3 : i32 loc(#loc26)
    %c128_i32_48 = arith.constant 128 : i32 loc(#loc27)
    %c128_i32_49 = arith.constant 128 : i32 loc(#loc27)
    %122 = arith.extsi %121 : i32 to i64 loc(#loc27)
    %123 = arith.extsi %c128_i32_49 : i32 to i64 loc(#loc27)
    %124 = arith.muli %122, %123 : i64 loc(#loc27)
    %c2147483647_i64_50 = arith.constant 2147483647 : i64 loc(#loc27)
    %c-2147483648_i64_51 = arith.constant -2147483648 : i64 loc(#loc27)
    %125 = arith.cmpi sle, %124, %c2147483647_i64_50 : i64 loc(#loc27)
    %126 = arith.cmpi sge, %124, %c-2147483648_i64_51 : i64 loc(#loc27)
    %127 = arith.andi %125, %126 : i1 loc(#loc27)
    %128 = arith.muli %121, %c128_i32_49 : i32 loc(#loc27)
    %129 = tt.addptr %arg2, %128 : !tt.ptr<bf16>, i32 loc(#loc28)
    %c32_i32_52 = arith.constant 32 : i32 loc(#loc29)
    %c32_i32_53 = arith.constant 32 : i32 loc(#loc29)
    %130 = arith.extsi %10 : i32 to i64 loc(#loc29)
    %131 = arith.extsi %c32_i32_53 : i32 to i64 loc(#loc29)
    %132 = arith.muli %130, %131 : i64 loc(#loc29)
    %c2147483647_i64_54 = arith.constant 2147483647 : i64 loc(#loc29)
    %c-2147483648_i64_55 = arith.constant -2147483648 : i64 loc(#loc29)
    %133 = arith.cmpi sle, %132, %c2147483647_i64_54 : i64 loc(#loc29)
    %134 = arith.cmpi sge, %132, %c-2147483648_i64_55 : i64 loc(#loc29)
    %135 = arith.andi %133, %134 : i1 loc(#loc29)
    %136 = arith.muli %10, %c32_i32_53 : i32 loc(#loc29)
    %137 = arith.extsi %136 : i32 to i64 loc(#loc30)
    %138 = arith.extsi %3 : i32 to i64 loc(#loc30)
    %139 = arith.addi %137, %138 : i64 loc(#loc30)
    %c2147483647_i64_56 = arith.constant 2147483647 : i64 loc(#loc30)
    %c-2147483648_i64_57 = arith.constant -2147483648 : i64 loc(#loc30)
    %140 = arith.cmpi sle, %139, %c2147483647_i64_56 : i64 loc(#loc30)
    %141 = arith.cmpi sge, %139, %c-2147483648_i64_57 : i64 loc(#loc30)
    %142 = arith.andi %140, %141 : i1 loc(#loc30)
    %143 = arith.addi %136, %3 : i32 loc(#loc30)
    %c128_i32_58 = arith.constant 128 : i32 loc(#loc31)
    %c128_i32_59 = arith.constant 128 : i32 loc(#loc31)
    %144 = arith.extsi %143 : i32 to i64 loc(#loc31)
    %145 = arith.extsi %c128_i32_59 : i32 to i64 loc(#loc31)
    %146 = arith.muli %144, %145 : i64 loc(#loc31)
    %c2147483647_i64_60 = arith.constant 2147483647 : i64 loc(#loc31)
    %c-2147483648_i64_61 = arith.constant -2147483648 : i64 loc(#loc31)
    %147 = arith.cmpi sle, %146, %c2147483647_i64_60 : i64 loc(#loc31)
    %148 = arith.cmpi sge, %146, %c-2147483648_i64_61 : i64 loc(#loc31)
    %149 = arith.andi %147, %148 : i1 loc(#loc31)
    %150 = arith.muli %143, %c128_i32_59 : i32 loc(#loc31)
    %151 = tt.addptr %arg3, %150 : !tt.ptr<bf16>, i32 loc(#loc32)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc33)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc34)
    %c4096_i32_62 = arith.constant 4096 : i32 loc(#loc35)
    %c128_i32_63 = arith.constant 128 : i32 loc(#loc36)
    %c128_i32_64 = arith.constant 128 : i32 loc(#loc36)
    %152 = arith.extsi %1 : i32 to i64 loc(#loc36)
    %153 = arith.extsi %c128_i32_64 : i32 to i64 loc(#loc36)
    %154 = arith.muli %152, %153 : i64 loc(#loc36)
    %c2147483647_i64_65 = arith.constant 2147483647 : i64 loc(#loc36)
    %c-2147483648_i64_66 = arith.constant -2147483648 : i64 loc(#loc36)
    %155 = arith.cmpi sle, %154, %c2147483647_i64_65 : i64 loc(#loc36)
    %156 = arith.cmpi sge, %154, %c-2147483648_i64_66 : i64 loc(#loc36)
    %157 = arith.andi %155, %156 : i1 loc(#loc36)
    %158 = arith.muli %1, %c128_i32_64 : i32 loc(#loc36)
    %c128_i32_67 = arith.constant 128 : i32 loc(#loc37)
    %c128_i32_68 = arith.constant 128 : i32 loc(#loc37)
    %159 = arith.extsi %158 : i32 to i64 loc(#loc37)
    %160 = arith.extsi %c128_i32_68 : i32 to i64 loc(#loc37)
    %161 = arith.muli %159, %160 : i64 loc(#loc37)
    %c2147483647_i64_69 = arith.constant 2147483647 : i64 loc(#loc37)
    %c-2147483648_i64_70 = arith.constant -2147483648 : i64 loc(#loc37)
    %162 = arith.cmpi sle, %161, %c2147483647_i64_69 : i64 loc(#loc37)
    %163 = arith.cmpi sge, %161, %c-2147483648_i64_70 : i64 loc(#loc37)
    %164 = arith.andi %162, %163 : i1 loc(#loc37)
    %165 = arith.muli %158, %c128_i32_68 : i32 loc(#loc37)
    %166 = tt.addptr %arg6, %165 : !tt.ptr<f32>, i32 loc(#loc38)
    %c0_i32 = arith.constant 0 : i32 loc(#loc39)
    %c1_i32 = arith.constant 1 : i32 loc(#loc39)
    %167 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc39)
    %168 = arith.bitcast %25 : i32 to i32 loc(#loc39)
    %169 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc39)
    %170 = ub.poison : i32 loc(#loc39)
    %171:2 = scf.for %arg8 = %167 to %168 step %169 iter_args(%arg9 = %33, %arg10 = %34) -> (tensor<64x64xf32>, tensor<64x64xf32>)  : i32 {
      %188 = arith.extsi %arg8 : i32 to i64 loc(#loc40)
      %189 = arith.extsi %c524288_i32 : i32 to i64 loc(#loc40)
      %190 = arith.muli %188, %189 : i64 loc(#loc40)
      %c2147483647_i64_86 = arith.constant 2147483647 : i64 loc(#loc40)
      %c-2147483648_i64_87 = arith.constant -2147483648 : i64 loc(#loc40)
      %191 = arith.cmpi sle, %190, %c2147483647_i64_86 : i64 loc(#loc40)
      %192 = arith.cmpi sge, %190, %c-2147483648_i64_87 : i64 loc(#loc40)
      %193 = arith.andi %191, %192 : i1 loc(#loc40)
      %194 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %195 = tt.addptr %63, %194 : !tt.ptr<bf16>, i32 loc(#loc41)
      %c64_i32_88 = arith.constant 64 : i32 loc(#loc42)
      %c64_i32_89 = arith.constant 64 : i32 loc(#loc42)
      %196 = arith.extsi %0 : i32 to i64 loc(#loc42)
      %197 = arith.extsi %c64_i32_89 : i32 to i64 loc(#loc42)
      %198 = arith.muli %196, %197 : i64 loc(#loc42)
      %c2147483647_i64_90 = arith.constant 2147483647 : i64 loc(#loc42)
      %c-2147483648_i64_91 = arith.constant -2147483648 : i64 loc(#loc42)
      %199 = arith.cmpi sle, %198, %c2147483647_i64_90 : i64 loc(#loc42)
      %200 = arith.cmpi sge, %198, %c-2147483648_i64_91 : i64 loc(#loc42)
      %201 = arith.andi %199, %200 : i1 loc(#loc42)
      %202 = arith.muli %0, %c64_i32_89 : i32 loc(#loc42)
      %c128_i64_92 = arith.constant 128 : i64 loc(#loc43)
      %c128_i64_93 = arith.constant 128 : i64 loc(#loc43)
      %c128_i64_94 = arith.constant 128 : i64 loc(#loc43)
      %c1_i64_95 = arith.constant 1 : i64 loc(#loc43)
      %c0_i32_96 = arith.constant 0 : i32 loc(#loc43)
      %203 = tt.make_tensor_ptr %195, [%c128_i64_92, %c128_i64_93], [%c128_i64_94, %c1_i64_95], [%c0_i32_96, %202] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc43)
      %204 = arith.truncf %arg9 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc44)
      tt.store %203, %204 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc45)
      %205 = arith.extsi %arg8 : i32 to i64 loc(#loc46)
      %206 = arith.extsi %c524288_i32 : i32 to i64 loc(#loc46)
      %207 = arith.muli %205, %206 : i64 loc(#loc46)
      %c2147483647_i64_97 = arith.constant 2147483647 : i64 loc(#loc46)
      %c-2147483648_i64_98 = arith.constant -2147483648 : i64 loc(#loc46)
      %208 = arith.cmpi sle, %207, %c2147483647_i64_97 : i64 loc(#loc46)
      %209 = arith.cmpi sge, %207, %c-2147483648_i64_98 : i64 loc(#loc46)
      %210 = arith.andi %208, %209 : i1 loc(#loc46)
      %211 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc46)
      %212 = tt.addptr %63, %211 : !tt.ptr<bf16>, i32 loc(#loc47)
      %c64_i32_99 = arith.constant 64 : i32 loc(#loc48)
      %c64_i32_100 = arith.constant 64 : i32 loc(#loc48)
      %213 = arith.extsi %0 : i32 to i64 loc(#loc48)
      %214 = arith.extsi %c64_i32_100 : i32 to i64 loc(#loc48)
      %215 = arith.muli %213, %214 : i64 loc(#loc48)
      %c2147483647_i64_101 = arith.constant 2147483647 : i64 loc(#loc48)
      %c-2147483648_i64_102 = arith.constant -2147483648 : i64 loc(#loc48)
      %216 = arith.cmpi sle, %215, %c2147483647_i64_101 : i64 loc(#loc48)
      %217 = arith.cmpi sge, %215, %c-2147483648_i64_102 : i64 loc(#loc48)
      %218 = arith.andi %216, %217 : i1 loc(#loc48)
      %219 = arith.muli %0, %c64_i32_100 : i32 loc(#loc48)
      %c128_i64_103 = arith.constant 128 : i64 loc(#loc49)
      %c128_i64_104 = arith.constant 128 : i64 loc(#loc49)
      %c128_i64_105 = arith.constant 128 : i64 loc(#loc49)
      %c1_i64_106 = arith.constant 1 : i64 loc(#loc49)
      %c64_i32_107 = arith.constant 64 : i32 loc(#loc49)
      %220 = tt.make_tensor_ptr %212, [%c128_i64_103, %c128_i64_104], [%c128_i64_105, %c1_i64_106], [%c64_i32_107, %219] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc49)
      %221 = arith.truncf %arg10 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc50)
      tt.store %220, %221 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc51)
      %c64_i32_108 = arith.constant 64 : i32 loc(#loc52)
      %c64_i32_109 = arith.constant 64 : i32 loc(#loc52)
      %222 = arith.extsi %arg8 : i32 to i64 loc(#loc52)
      %223 = arith.extsi %c64_i32_109 : i32 to i64 loc(#loc52)
      %224 = arith.muli %222, %223 : i64 loc(#loc52)
      %c2147483647_i64_110 = arith.constant 2147483647 : i64 loc(#loc52)
      %c-2147483648_i64_111 = arith.constant -2147483648 : i64 loc(#loc52)
      %225 = arith.cmpi sle, %224, %c2147483647_i64_110 : i64 loc(#loc52)
      %226 = arith.cmpi sge, %224, %c-2147483648_i64_111 : i64 loc(#loc52)
      %227 = arith.andi %225, %226 : i1 loc(#loc52)
      %228 = arith.muli %arg8, %c64_i32_109 : i32 loc(#loc52)
      %229 = arith.extsi %arg7 : i32 to i64 loc(#loc53)
      %c128_i64_112 = arith.constant 128 : i64 loc(#loc53)
      %230 = arith.extsi %c4096_i32_62 : i32 to i64 loc(#loc53)
      %c1_i64_113 = arith.constant 1 : i64 loc(#loc53)
      %c0_i32_114 = arith.constant 0 : i32 loc(#loc53)
      %231 = tt.make_tensor_ptr %129, [%229, %c128_i64_112], [%230, %c1_i64_113], [%228, %c0_i32_114] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc53)
      %232 = tt.load %231 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc54)
      %233 = arith.truncf %arg9 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc55)
      %cst = arith.constant 0.000000e+00 : f32 loc(#loc56)
      %cst_115 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc56)
      %234 = tt.dot %232, %233, %cst_115, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc56)
      %c64_i32_116 = arith.constant 64 : i32 loc(#loc57)
      %c64_i32_117 = arith.constant 64 : i32 loc(#loc57)
      %235 = arith.extsi %arg8 : i32 to i64 loc(#loc57)
      %236 = arith.extsi %c64_i32_117 : i32 to i64 loc(#loc57)
      %237 = arith.muli %235, %236 : i64 loc(#loc57)
      %c2147483647_i64_118 = arith.constant 2147483647 : i64 loc(#loc57)
      %c-2147483648_i64_119 = arith.constant -2147483648 : i64 loc(#loc57)
      %238 = arith.cmpi sle, %237, %c2147483647_i64_118 : i64 loc(#loc57)
      %239 = arith.cmpi sge, %237, %c-2147483648_i64_119 : i64 loc(#loc57)
      %240 = arith.andi %238, %239 : i1 loc(#loc57)
      %241 = arith.muli %arg8, %c64_i32_117 : i32 loc(#loc57)
      %242 = arith.extsi %arg7 : i32 to i64 loc(#loc58)
      %c128_i64_120 = arith.constant 128 : i64 loc(#loc58)
      %243 = arith.extsi %c4096_i32_62 : i32 to i64 loc(#loc58)
      %c1_i64_121 = arith.constant 1 : i64 loc(#loc58)
      %c64_i32_122 = arith.constant 64 : i32 loc(#loc58)
      %244 = tt.make_tensor_ptr %129, [%242, %c128_i64_120], [%243, %c1_i64_121], [%241, %c64_i32_122] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc58)
      %245 = tt.load %244 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc59)
      %246 = arith.truncf %arg10 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc60)
      %cst_123 = arith.constant 0.000000e+00 : f32 loc(#loc61)
      %cst_124 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc61)
      %247 = tt.dot %245, %246, %cst_124, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc61)
      %248 = arith.addf %234, %247 : tensor<64x64xf32> loc(#loc62)
      %c64_i32_125 = arith.constant 64 : i32 loc(#loc63)
      %c64_i32_126 = arith.constant 64 : i32 loc(#loc63)
      %249 = arith.extsi %arg8 : i32 to i64 loc(#loc63)
      %250 = arith.extsi %c64_i32_126 : i32 to i64 loc(#loc63)
      %251 = arith.muli %249, %250 : i64 loc(#loc63)
      %c2147483647_i64_127 = arith.constant 2147483647 : i64 loc(#loc63)
      %c-2147483648_i64_128 = arith.constant -2147483648 : i64 loc(#loc63)
      %252 = arith.cmpi sle, %251, %c2147483647_i64_127 : i64 loc(#loc63)
      %253 = arith.cmpi sge, %251, %c-2147483648_i64_128 : i64 loc(#loc63)
      %254 = arith.andi %252, %253 : i1 loc(#loc63)
      %255 = arith.muli %arg8, %c64_i32_126 : i32 loc(#loc63)
      %c64_i32_129 = arith.constant 64 : i32 loc(#loc64)
      %c64_i32_130 = arith.constant 64 : i32 loc(#loc64)
      %256 = arith.extsi %0 : i32 to i64 loc(#loc64)
      %257 = arith.extsi %c64_i32_130 : i32 to i64 loc(#loc64)
      %258 = arith.muli %256, %257 : i64 loc(#loc64)
      %c2147483647_i64_131 = arith.constant 2147483647 : i64 loc(#loc64)
      %c-2147483648_i64_132 = arith.constant -2147483648 : i64 loc(#loc64)
      %259 = arith.cmpi sle, %258, %c2147483647_i64_131 : i64 loc(#loc64)
      %260 = arith.cmpi sge, %258, %c-2147483648_i64_132 : i64 loc(#loc64)
      %261 = arith.andi %259, %260 : i1 loc(#loc64)
      %262 = arith.muli %0, %c64_i32_130 : i32 loc(#loc64)
      %263 = arith.extsi %arg7 : i32 to i64 loc(#loc65)
      %c128_i64_133 = arith.constant 128 : i64 loc(#loc65)
      %264 = arith.extsi %c4096_i32 : i32 to i64 loc(#loc65)
      %c1_i64_134 = arith.constant 1 : i64 loc(#loc65)
      %265 = tt.make_tensor_ptr %85, [%263, %c128_i64_133], [%264, %c1_i64_134], [%255, %262] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc65)
      %266 = tt.load %265 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc66)
      %267 = arith.extf %266 : tensor<64x64xbf16> to tensor<64x64xf32> loc(#loc67)
      %268 = arith.subf %267, %248 : tensor<64x64xf32> loc(#loc67)
      %c64_i32_135 = arith.constant 64 : i32 loc(#loc68)
      %c64_i32_136 = arith.constant 64 : i32 loc(#loc68)
      %269 = arith.extsi %arg8 : i32 to i64 loc(#loc68)
      %270 = arith.extsi %c64_i32_136 : i32 to i64 loc(#loc68)
      %271 = arith.muli %269, %270 : i64 loc(#loc68)
      %c2147483647_i64_137 = arith.constant 2147483647 : i64 loc(#loc68)
      %c-2147483648_i64_138 = arith.constant -2147483648 : i64 loc(#loc68)
      %272 = arith.cmpi sle, %271, %c2147483647_i64_137 : i64 loc(#loc68)
      %273 = arith.cmpi sge, %271, %c-2147483648_i64_138 : i64 loc(#loc68)
      %274 = arith.andi %272, %273 : i1 loc(#loc68)
      %275 = arith.muli %arg8, %c64_i32_136 : i32 loc(#loc68)
      %c64_i32_139 = arith.constant 64 : i32 loc(#loc69)
      %c64_i32_140 = arith.constant 64 : i32 loc(#loc69)
      %276 = arith.extsi %0 : i32 to i64 loc(#loc69)
      %277 = arith.extsi %c64_i32_140 : i32 to i64 loc(#loc69)
      %278 = arith.muli %276, %277 : i64 loc(#loc69)
      %c2147483647_i64_141 = arith.constant 2147483647 : i64 loc(#loc69)
      %c-2147483648_i64_142 = arith.constant -2147483648 : i64 loc(#loc69)
      %279 = arith.cmpi sle, %278, %c2147483647_i64_141 : i64 loc(#loc69)
      %280 = arith.cmpi sge, %278, %c-2147483648_i64_142 : i64 loc(#loc69)
      %281 = arith.andi %279, %280 : i1 loc(#loc69)
      %282 = arith.muli %0, %c64_i32_140 : i32 loc(#loc69)
      %283 = arith.extsi %arg7 : i32 to i64 loc(#loc70)
      %c128_i64_143 = arith.constant 128 : i64 loc(#loc70)
      %284 = arith.extsi %c4096_i32 : i32 to i64 loc(#loc70)
      %c1_i64_144 = arith.constant 1 : i64 loc(#loc70)
      %285 = tt.make_tensor_ptr %151, [%283, %c128_i64_143], [%284, %c1_i64_144], [%275, %282] {order = array<i32: 1, 0>} : <tensor<64x64xbf16>> loc(#loc70)
      %286 = arith.truncf %268 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc71)
      tt.store %285, %286 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc72)
      %c1_i32_145 = arith.constant 1 : i32 loc(#loc73)
      %c1_i32_146 = arith.constant 1 : i32 loc(#loc73)
      %287 = arith.extsi %arg8 : i32 to i64 loc(#loc73)
      %288 = arith.extsi %c1_i32_146 : i32 to i64 loc(#loc73)
      %289 = arith.addi %287, %288 : i64 loc(#loc73)
      %c2147483647_i64_147 = arith.constant 2147483647 : i64 loc(#loc73)
      %c-2147483648_i64_148 = arith.constant -2147483648 : i64 loc(#loc73)
      %290 = arith.cmpi sle, %289, %c2147483647_i64_147 : i64 loc(#loc73)
      %291 = arith.cmpi sge, %289, %c-2147483648_i64_148 : i64 loc(#loc73)
      %292 = arith.andi %290, %291 : i1 loc(#loc73)
      %293 = arith.addi %arg8, %c1_i32_146 : i32 loc(#loc73)
      %c64_i32_149 = arith.constant 64 : i32 loc(#loc74)
      %c64_i32_150 = arith.constant 64 : i32 loc(#loc74)
      %294 = arith.extsi %293 : i32 to i64 loc(#loc74)
      %295 = arith.extsi %c64_i32_150 : i32 to i64 loc(#loc74)
      %296 = arith.muli %294, %295 : i64 loc(#loc74)
      %c2147483647_i64_151 = arith.constant 2147483647 : i64 loc(#loc74)
      %c-2147483648_i64_152 = arith.constant -2147483648 : i64 loc(#loc74)
      %297 = arith.cmpi sle, %296, %c2147483647_i64_151 : i64 loc(#loc74)
      %298 = arith.cmpi sge, %296, %c-2147483648_i64_152 : i64 loc(#loc74)
      %299 = arith.andi %297, %298 : i1 loc(#loc74)
      %300 = arith.muli %293, %c64_i32_150 : i32 loc(#loc74)
      %301 = arith.minsi %300, %arg7 : i32 loc(#loc75)
      %c1_i32_153 = arith.constant 1 : i32 loc(#loc76)
      %c1_i32_154 = arith.constant 1 : i32 loc(#loc76)
      %302 = arith.extsi %301 : i32 to i64 loc(#loc76)
      %303 = arith.extsi %c1_i32_154 : i32 to i64 loc(#loc76)
      %304 = arith.subi %302, %303 : i64 loc(#loc76)
      %c2147483647_i64_155 = arith.constant 2147483647 : i64 loc(#loc76)
      %c-2147483648_i64_156 = arith.constant -2147483648 : i64 loc(#loc76)
      %305 = arith.cmpi sle, %304, %c2147483647_i64_155 : i64 loc(#loc76)
      %306 = arith.cmpi sge, %304, %c-2147483648_i64_156 : i64 loc(#loc76)
      %307 = arith.andi %305, %306 : i1 loc(#loc76)
      %308 = arith.subi %301, %c1_i32_154 : i32 loc(#loc76)
      %c64_i32_157 = arith.constant 64 : i32 loc(#loc77)
      %c64_i32_158 = arith.constant 64 : i32 loc(#loc77)
      %309 = arith.extsi %arg8 : i32 to i64 loc(#loc77)
      %310 = arith.extsi %c64_i32_158 : i32 to i64 loc(#loc77)
      %311 = arith.muli %309, %310 : i64 loc(#loc77)
      %c2147483647_i64_159 = arith.constant 2147483647 : i64 loc(#loc77)
      %c-2147483648_i64_160 = arith.constant -2147483648 : i64 loc(#loc77)
      %312 = arith.cmpi sle, %311, %c2147483647_i64_159 : i64 loc(#loc77)
      %313 = arith.cmpi sge, %311, %c-2147483648_i64_160 : i64 loc(#loc77)
      %314 = arith.andi %312, %313 : i1 loc(#loc77)
      %315 = arith.muli %arg8, %c64_i32_158 : i32 loc(#loc77)
      %316 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc78)
      %317 = tt.splat %315 : i32 -> tensor<64xi32> loc(#loc79)
      %318 = arith.extsi %317 : tensor<64xi32> to tensor<64xi64> loc(#loc79)
      %319 = arith.extsi %316 : tensor<64xi32> to tensor<64xi64> loc(#loc79)
      %320 = arith.addi %318, %319 : tensor<64xi64> loc(#loc79)
      %c2147483647_i64_161 = arith.constant 2147483647 : i64 loc(#loc79)
      %c-2147483648_i64_162 = arith.constant -2147483648 : i64 loc(#loc79)
      %cst_163 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc79)
      %321 = arith.cmpi sle, %320, %cst_163 : tensor<64xi64> loc(#loc79)
      %cst_164 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc79)
      %322 = arith.cmpi sge, %320, %cst_164 : tensor<64xi64> loc(#loc79)
      %323 = arith.andi %321, %322 : tensor<64xi1> loc(#loc79)
      %324 = arith.addi %317, %316 : tensor<64xi32> loc(#loc79)
      %325 = tt.splat %arg7 : i32 -> tensor<64xi32> loc(#loc80)
      %326 = arith.cmpi slt, %324, %325 : tensor<64xi32> loc(#loc80)
      %c32_i32_165 = arith.constant 32 : i32 loc(#loc81)
      %c32_i32_166 = arith.constant 32 : i32 loc(#loc81)
      %327 = arith.extsi %10 : i32 to i64 loc(#loc81)
      %328 = arith.extsi %c32_i32_166 : i32 to i64 loc(#loc81)
      %329 = arith.muli %327, %328 : i64 loc(#loc81)
      %c2147483647_i64_167 = arith.constant 2147483647 : i64 loc(#loc81)
      %c-2147483648_i64_168 = arith.constant -2147483648 : i64 loc(#loc81)
      %330 = arith.cmpi sle, %329, %c2147483647_i64_167 : i64 loc(#loc81)
      %331 = arith.cmpi sge, %329, %c-2147483648_i64_168 : i64 loc(#loc81)
      %332 = arith.andi %330, %331 : i1 loc(#loc81)
      %333 = arith.muli %10, %c32_i32_166 : i32 loc(#loc81)
      %334 = tt.addptr %arg4, %333 : !tt.ptr<f32>, i32 loc(#loc82)
      %c32_i32_169 = arith.constant 32 : i32 loc(#loc83)
      %c32_i32_170 = arith.constant 32 : i32 loc(#loc83)
      %335 = arith.extsi %308 : i32 to i64 loc(#loc83)
      %336 = arith.extsi %c32_i32_170 : i32 to i64 loc(#loc83)
      %337 = arith.muli %335, %336 : i64 loc(#loc83)
      %c2147483647_i64_171 = arith.constant 2147483647 : i64 loc(#loc83)
      %c-2147483648_i64_172 = arith.constant -2147483648 : i64 loc(#loc83)
      %338 = arith.cmpi sle, %337, %c2147483647_i64_171 : i64 loc(#loc83)
      %339 = arith.cmpi sge, %337, %c-2147483648_i64_172 : i64 loc(#loc83)
      %340 = arith.andi %338, %339 : i1 loc(#loc83)
      %341 = arith.muli %308, %c32_i32_170 : i32 loc(#loc83)
      %342 = tt.addptr %334, %341 : !tt.ptr<f32>, i32 loc(#loc84)
      %343 = tt.addptr %342, %3 : !tt.ptr<f32>, i32 loc(#loc85)
      %344 = tt.load %343 : !tt.ptr<f32> loc(#loc86)
      %c32_i32_173 = arith.constant 32 : i32 loc(#loc87)
      %c32_i32_174 = arith.constant 32 : i32 loc(#loc87)
      %345 = arith.extsi %10 : i32 to i64 loc(#loc87)
      %346 = arith.extsi %c32_i32_174 : i32 to i64 loc(#loc87)
      %347 = arith.muli %345, %346 : i64 loc(#loc87)
      %c2147483647_i64_175 = arith.constant 2147483647 : i64 loc(#loc87)
      %c-2147483648_i64_176 = arith.constant -2147483648 : i64 loc(#loc87)
      %348 = arith.cmpi sle, %347, %c2147483647_i64_175 : i64 loc(#loc87)
      %349 = arith.cmpi sge, %347, %c-2147483648_i64_176 : i64 loc(#loc87)
      %350 = arith.andi %348, %349 : i1 loc(#loc87)
      %351 = arith.muli %10, %c32_i32_174 : i32 loc(#loc87)
      %352 = tt.addptr %arg4, %351 : !tt.ptr<f32>, i32 loc(#loc88)
      %353 = tt.addptr %352, %3 : !tt.ptr<f32>, i32 loc(#loc89)
      %c64_i32_177 = arith.constant 64 : i32 loc(#loc90)
      %c64_i32_178 = arith.constant 64 : i32 loc(#loc90)
      %354 = arith.extsi %arg8 : i32 to i64 loc(#loc90)
      %355 = arith.extsi %c64_i32_178 : i32 to i64 loc(#loc90)
      %356 = arith.muli %354, %355 : i64 loc(#loc90)
      %c2147483647_i64_179 = arith.constant 2147483647 : i64 loc(#loc90)
      %c-2147483648_i64_180 = arith.constant -2147483648 : i64 loc(#loc90)
      %357 = arith.cmpi sle, %356, %c2147483647_i64_179 : i64 loc(#loc90)
      %358 = arith.cmpi sge, %356, %c-2147483648_i64_180 : i64 loc(#loc90)
      %359 = arith.andi %357, %358 : i1 loc(#loc90)
      %360 = arith.muli %arg8, %c64_i32_178 : i32 loc(#loc90)
      %361 = arith.extsi %arg7 : i32 to i64 loc(#loc91)
      %c32_i64 = arith.constant 32 : i64 loc(#loc91)
      %362 = tt.make_tensor_ptr %353, [%361], [%c32_i64], [%360] {order = array<i32: 0>} : <tensor<64xf32>> loc(#loc91)
      %363 = tt.load %362 {boundaryCheck = array<i32: 0>} : !tt.ptr<tensor<64xf32>> loc(#loc92)
      %364 = tt.splat %344 : f32 -> tensor<64xf32> loc(#loc93)
      %365 = arith.subf %364, %363 : tensor<64xf32> loc(#loc93)
      %366 = math.exp %365 : tensor<64xf32> loc(#loc94)
      %c0_i32_181 = arith.constant 0 : i32 loc(#loc95)
      %cst_182 = arith.constant 0.000000e+00 : f32 loc(#loc95)
      %cst_183 = arith.constant dense<0.000000e+00> : tensor<64xf32> loc(#loc95)
      %367 = arith.select %326, %366, %cst_183 : tensor<64xi1>, tensor<64xf32> loc(#loc95)
      %368 = tt.expand_dims %367 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc96)
      %369 = tt.broadcast %368 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc97)
      %370 = arith.mulf %268, %369 : tensor<64x64xf32> loc(#loc97)
      %371 = math.exp %344 : f32 loc(#loc98)
      %372 = tt.splat %371 : f32 -> tensor<64x64xf32> loc(#loc99)
      %373 = arith.mulf %arg9, %372 : tensor<64x64xf32> loc(#loc99)
      %374 = tt.splat %371 : f32 -> tensor<64x64xf32> loc(#loc100)
      %375 = arith.mulf %arg10, %374 : tensor<64x64xf32> loc(#loc100)
      %376 = arith.truncf %370 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc101)
      %c64_i32_184 = arith.constant 64 : i32 loc(#loc102)
      %c64_i32_185 = arith.constant 64 : i32 loc(#loc102)
      %377 = arith.extsi %arg8 : i32 to i64 loc(#loc102)
      %378 = arith.extsi %c64_i32_185 : i32 to i64 loc(#loc102)
      %379 = arith.muli %377, %378 : i64 loc(#loc102)
      %c2147483647_i64_186 = arith.constant 2147483647 : i64 loc(#loc102)
      %c-2147483648_i64_187 = arith.constant -2147483648 : i64 loc(#loc102)
      %380 = arith.cmpi sle, %379, %c2147483647_i64_186 : i64 loc(#loc102)
      %381 = arith.cmpi sge, %379, %c-2147483648_i64_187 : i64 loc(#loc102)
      %382 = arith.andi %380, %381 : i1 loc(#loc102)
      %383 = arith.muli %arg8, %c64_i32_185 : i32 loc(#loc102)
      %c128_i64_188 = arith.constant 128 : i64 loc(#loc103)
      %384 = arith.extsi %arg7 : i32 to i64 loc(#loc103)
      %c1_i64_189 = arith.constant 1 : i64 loc(#loc103)
      %385 = arith.extsi %c4096_i32_62 : i32 to i64 loc(#loc103)
      %c0_i32_190 = arith.constant 0 : i32 loc(#loc103)
      %386 = tt.make_tensor_ptr %107, [%c128_i64_188, %384], [%c1_i64_189, %385], [%c0_i32_190, %383] {order = array<i32: 0, 1>} : <tensor<64x64xbf16>> loc(#loc103)
      %387 = tt.load %386 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc104)
      %cst_191 = arith.constant 0.000000e+00 : f32 loc(#loc105)
      %cst_192 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc105)
      %388 = tt.dot %387, %376, %cst_192, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc105)
      %389 = arith.addf %373, %388 : tensor<64x64xf32> loc(#loc106)
      %c64_i32_193 = arith.constant 64 : i32 loc(#loc107)
      %c64_i32_194 = arith.constant 64 : i32 loc(#loc107)
      %390 = arith.extsi %arg8 : i32 to i64 loc(#loc107)
      %391 = arith.extsi %c64_i32_194 : i32 to i64 loc(#loc107)
      %392 = arith.muli %390, %391 : i64 loc(#loc107)
      %c2147483647_i64_195 = arith.constant 2147483647 : i64 loc(#loc107)
      %c-2147483648_i64_196 = arith.constant -2147483648 : i64 loc(#loc107)
      %393 = arith.cmpi sle, %392, %c2147483647_i64_195 : i64 loc(#loc107)
      %394 = arith.cmpi sge, %392, %c-2147483648_i64_196 : i64 loc(#loc107)
      %395 = arith.andi %393, %394 : i1 loc(#loc107)
      %396 = arith.muli %arg8, %c64_i32_194 : i32 loc(#loc107)
      %c128_i64_197 = arith.constant 128 : i64 loc(#loc108)
      %397 = arith.extsi %arg7 : i32 to i64 loc(#loc108)
      %c1_i64_198 = arith.constant 1 : i64 loc(#loc108)
      %398 = arith.extsi %c4096_i32_62 : i32 to i64 loc(#loc108)
      %c64_i32_199 = arith.constant 64 : i32 loc(#loc108)
      %399 = tt.make_tensor_ptr %107, [%c128_i64_197, %397], [%c1_i64_198, %398], [%c64_i32_199, %396] {order = array<i32: 0, 1>} : <tensor<64x64xbf16>> loc(#loc108)
      %400 = tt.load %399 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xbf16>> loc(#loc109)
      %cst_200 = arith.constant 0.000000e+00 : f32 loc(#loc110)
      %cst_201 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc110)
      %401 = tt.dot %400, %376, %cst_201, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc110)
      %402 = arith.addf %375, %401 : tensor<64x64xf32> loc(#loc111)
      scf.yield %389, %402 : tensor<64x64xf32>, tensor<64x64xf32> loc(#loc112)
    } loc(#loc39)
    %c64_i32 = arith.constant 64 : i32 loc(#loc113)
    %c64_i32_71 = arith.constant 64 : i32 loc(#loc113)
    %172 = arith.extsi %0 : i32 to i64 loc(#loc113)
    %173 = arith.extsi %c64_i32_71 : i32 to i64 loc(#loc113)
    %174 = arith.muli %172, %173 : i64 loc(#loc113)
    %c2147483647_i64_72 = arith.constant 2147483647 : i64 loc(#loc113)
    %c-2147483648_i64_73 = arith.constant -2147483648 : i64 loc(#loc113)
    %175 = arith.cmpi sle, %174, %c2147483647_i64_72 : i64 loc(#loc113)
    %176 = arith.cmpi sge, %174, %c-2147483648_i64_73 : i64 loc(#loc113)
    %177 = arith.andi %175, %176 : i1 loc(#loc113)
    %178 = arith.muli %0, %c64_i32_71 : i32 loc(#loc113)
    %c128_i64 = arith.constant 128 : i64 loc(#loc114)
    %c128_i64_74 = arith.constant 128 : i64 loc(#loc114)
    %c128_i64_75 = arith.constant 128 : i64 loc(#loc114)
    %c1_i64 = arith.constant 1 : i64 loc(#loc114)
    %c0_i32_76 = arith.constant 0 : i32 loc(#loc114)
    %179 = tt.make_tensor_ptr %166, [%c128_i64, %c128_i64_74], [%c128_i64_75, %c1_i64], [%c0_i32_76, %178] {order = array<i32: 1, 0>} : <tensor<64x64xf32>> loc(#loc114)
    tt.store %179, %171#0 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xf32>> loc(#loc115)
    %c64_i32_77 = arith.constant 64 : i32 loc(#loc116)
    %c64_i32_78 = arith.constant 64 : i32 loc(#loc116)
    %180 = arith.extsi %0 : i32 to i64 loc(#loc116)
    %181 = arith.extsi %c64_i32_78 : i32 to i64 loc(#loc116)
    %182 = arith.muli %180, %181 : i64 loc(#loc116)
    %c2147483647_i64_79 = arith.constant 2147483647 : i64 loc(#loc116)
    %c-2147483648_i64_80 = arith.constant -2147483648 : i64 loc(#loc116)
    %183 = arith.cmpi sle, %182, %c2147483647_i64_79 : i64 loc(#loc116)
    %184 = arith.cmpi sge, %182, %c-2147483648_i64_80 : i64 loc(#loc116)
    %185 = arith.andi %183, %184 : i1 loc(#loc116)
    %186 = arith.muli %0, %c64_i32_78 : i32 loc(#loc116)
    %c128_i64_81 = arith.constant 128 : i64 loc(#loc117)
    %c128_i64_82 = arith.constant 128 : i64 loc(#loc117)
    %c128_i64_83 = arith.constant 128 : i64 loc(#loc117)
    %c1_i64_84 = arith.constant 1 : i64 loc(#loc117)
    %c64_i32_85 = arith.constant 64 : i32 loc(#loc117)
    %187 = tt.make_tensor_ptr %166, [%c128_i64_81, %c128_i64_82], [%c128_i64_83, %c1_i64_84], [%c64_i32_85, %186] {order = array<i32: 1, 0>} : <tensor<64x64xf32>> loc(#loc117)
    tt.store %187, %171#1 {boundaryCheck = array<i32: 0, 1>} : !tt.ptr<tensor<64x64xf32>> loc(#loc118)
    tt.return loc(#loc119)
  } loc(#loc)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%arg0: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":31:0)) -> i32 attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc121)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc121)
    %0 = arith.extsi %arg0 : i32 to i64 loc(#loc121)
    %1 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc121)
    %2 = arith.addi %0, %1 : i64 loc(#loc121)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc121)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc121)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc121)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc121)
    %5 = arith.andi %3, %4 : i1 loc(#loc121)
    %6 = arith.addi %arg0, %c64_i32_0 : i32 loc(#loc121)
    %c1_i32 = arith.constant 1 : i32 loc(#loc122)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc122)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc122)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc122)
    %9 = arith.subi %7, %8 : i64 loc(#loc122)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc122)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc122)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc122)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc122)
    %12 = arith.andi %10, %11 : i1 loc(#loc122)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc122)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc123)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc123)
    %14 = arith.divsi %13, %c64_i32_5 : i32 loc(#loc123)
    tt.return %14 : i32 loc(#loc124)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc125)
    tt.return %15 : i32 loc(#loc125)
  } loc(#loc120)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc127)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc127)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc128)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc129)
    tt.return %0 : tensor<64x64xf32> loc(#loc129)
  } loc(#loc126)
} loc(#loc)
#loc1 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:34)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:38)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":74:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":76:24)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:27)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:16)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:20)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:27)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:16)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:20)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:24)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:28)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:35)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":89:15)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":90:15)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":91:15)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:25)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":116:47)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":116:41)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":116:84)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":116:99)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:34)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":129:69)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":129:88)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:39)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:19)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":140:65)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":140:75)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":140:90)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":144:73)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":144:83)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":144:98)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc72 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc73 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc74 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc75 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc76 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc77 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:25)
#loc78 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:43)
#loc79 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc80 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc81 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:41)
#loc82 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc83 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc84 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc85 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc86 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc87 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:46)
#loc88 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:40)
#loc89 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc90 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:74)
#loc91 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:87)
#loc92 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc93 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc94 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc95 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc96 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc97 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc98 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc99 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc100 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc101 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc102 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":181:68)
#loc103 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":181:83)
#loc104 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc105 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc106 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:16)
#loc107 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":188:73)
#loc108 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":188:88)
#loc109 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc110 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc111 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:20)
#loc112 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":201:8)
#loc113 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":210:63)
#loc114 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":210:78)
#loc115 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc116 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":213:68)
#loc117 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":213:83)
#loc118 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc119 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc121 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:16)
#loc122 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc123 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc124 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:11)
#loc125 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:4)
#loc126 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":117:0)
#loc127 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:31)
#loc128 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:11)
#loc129 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":126:4)
