; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 16, !dbg !13
  %.not = icmp eq i32 %14, 0, !dbg !13
  %15 = and i32 %12, 32, !dbg !13
  %16 = icmp eq i32 %15, 0, !dbg !13
  %17 = and i32 %12, 64, !dbg !13
  %18 = icmp eq i32 %17, 0, !dbg !13
  %19 = and i32 %12, 128, !dbg !13
  %20 = lshr i32 %12, 4, !dbg !13
  %21 = and i32 %20, 15, !dbg !13
  %22 = or disjoint i32 %21, 16, !dbg !13
  %23 = or disjoint i32 %21, 32, !dbg !13
  %24 = or i32 %20, 48, !dbg !13
  %25 = lshr i32 %12, 2, !dbg !13
  %26 = and i32 %25, 7, !dbg !13
  %27 = lshr i32 %12, 1, !dbg !13
  %28 = and i32 %27, 48, !dbg !13
  %29 = or disjoint i32 %28, %26, !dbg !13
  %30 = or disjoint i32 %29, 8, !dbg !13
  %31 = shl nuw nsw i32 %12, 1, !dbg !13
  %32 = and i32 %31, 6, !dbg !13
  %33 = lshr exact i32 %19, 2, !dbg !13
  %34 = shl nuw nsw i32 %12, 2, !dbg !13
  %35 = and i32 %34, 60, !dbg !13
  %36 = or disjoint i32 %29, %11, !dbg !14
  %37 = or disjoint i32 %30, %11, !dbg !14
  %38 = icmp slt i32 %36, %4, !dbg !15
  %39 = icmp slt i32 %37, %4, !dbg !15
  %40 = insertelement <8 x i32> poison, i32 %11, i64 0, !dbg !14
  %41 = shufflevector <8 x i32> %40, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !14
  %42 = insertelement <8 x i32> poison, i32 %4, i64 0, !dbg !15
  %43 = shufflevector <8 x i32> %42, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !15
  %44 = mul i32 %9, %4, !dbg !16
  %45 = sext i32 %44 to i64, !dbg !17
  %46 = getelementptr bfloat, ptr addrspace(1) %2, i64 %45, !dbg !17
  %47 = zext nneg i32 %10 to i64, !dbg !18
  %48 = getelementptr bfloat, ptr addrspace(1) %46, i64 %47, !dbg !18
  %49 = sext i32 %4 to i64, !dbg !19
  %50 = sext i32 %11 to i64, !dbg !19
  %51 = zext nneg i32 %21 to i64, !dbg !20
  %52 = zext nneg i32 %22 to i64, !dbg !20
  %53 = zext nneg i32 %23 to i64, !dbg !20
  %54 = zext nneg i32 %24 to i64, !dbg !20
  %55 = zext nneg i32 %29 to i64, !dbg !20
  %56 = zext nneg i32 %30 to i64, !dbg !20
  %57 = zext nneg i32 %35 to i64, !dbg !20
  %58 = or disjoint i64 %51, %50, !dbg !20
  %59 = or disjoint i64 %52, %50, !dbg !20
  %60 = or disjoint i64 %53, %50, !dbg !20
  %61 = or disjoint i64 %54, %50, !dbg !20
  %62 = or disjoint i64 %55, %50, !dbg !20
  %63 = or disjoint i64 %56, %50, !dbg !20
  %64 = shl nsw i64 %62, 5, !dbg !20
  %65 = shl nsw i64 %63, 5, !dbg !20
  %66 = getelementptr bfloat, ptr addrspace(1) %48, i64 %64, !dbg !20
  %67 = getelementptr bfloat, ptr addrspace(1) %48, i64 %65, !dbg !20
  %68 = icmp sgt i32 %11, -1, !dbg !20
  %69 = icmp slt i64 %62, %49, !dbg !20
  %70 = icmp slt i64 %63, %49, !dbg !20
  %71 = or disjoint i32 %32, %33, !dbg !13
  %72 = or disjoint i32 %71, 1, !dbg !13
  %73 = or disjoint i32 %71, 8, !dbg !13
  %74 = or disjoint i32 %71, 9, !dbg !13
  %75 = or disjoint i32 %71, 16, !dbg !13
  %76 = or disjoint i32 %71, 17, !dbg !13
  %77 = or disjoint i32 %71, 24, !dbg !13
  %78 = or disjoint i32 %71, 25, !dbg !13
  %79 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !14
  %80 = insertelement <8 x i32> %79, i32 %77, i64 1, !dbg !14
  %81 = insertelement <8 x i32> %80, i32 %76, i64 2, !dbg !14
  %82 = insertelement <8 x i32> %81, i32 %75, i64 3, !dbg !14
  %83 = insertelement <8 x i32> %82, i32 %74, i64 4, !dbg !14
  %84 = insertelement <8 x i32> %83, i32 %73, i64 5, !dbg !14
  %85 = insertelement <8 x i32> %84, i32 %72, i64 6, !dbg !14
  %86 = insertelement <8 x i32> %85, i32 %71, i64 7, !dbg !14
  %87 = or disjoint <8 x i32> %86, %41, !dbg !14
  %88 = icmp slt <8 x i32> %87, %43, !dbg !15
  %89 = or disjoint <8 x i32> %86, %41, !dbg !20
  %90 = icmp slt <8 x i32> %89, %43, !dbg !20
  %91 = and i1 %68, %69, !dbg !20
  %92 = and i1 %68, %70, !dbg !20
  %93 = extractelement <8 x i1> %90, i64 7, !dbg !20
  %94 = and i1 %68, %93, !dbg !20
  %95 = extractelement <8 x i1> %90, i64 6, !dbg !20
  %96 = and i1 %68, %95, !dbg !20
  %97 = extractelement <8 x i1> %90, i64 5, !dbg !20
  %98 = and i1 %68, %97, !dbg !20
  %99 = extractelement <8 x i1> %90, i64 4, !dbg !20
  %100 = and i1 %68, %99, !dbg !20
  %101 = extractelement <8 x i1> %90, i64 3, !dbg !20
  %102 = and i1 %68, %101, !dbg !20
  %103 = extractelement <8 x i1> %90, i64 2, !dbg !20
  %104 = and i1 %68, %103, !dbg !20
  %105 = extractelement <8 x i1> %90, i64 1, !dbg !20
  %106 = and i1 %68, %105, !dbg !20
  %107 = extractelement <8 x i1> %90, i64 0, !dbg !20
  %108 = and i1 %68, %107, !dbg !20
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %66, i1 %91) #5, !dbg !20
  %110 = bitcast i16 %109 to bfloat, !dbg !20
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %67, i1 %92) #5, !dbg !20
  %112 = bitcast i16 %111 to bfloat, !dbg !20
  %113 = or disjoint i32 %44, %10, !dbg !21
  %114 = shl i32 %113, 7, !dbg !22
  %115 = sext i32 %114 to i64, !dbg !23
  %116 = getelementptr bfloat, ptr addrspace(1) %0, i64 %115, !dbg !23
  %117 = shl nuw nsw i32 %12, 3, !dbg !24
  %118 = and i32 %117, 56, !dbg !24
  %119 = and i32 %117, 120, !dbg !24
  %120 = zext nneg i32 %119 to i64, !dbg !24
  %.idx = shl nsw i64 %58, 13, !dbg !24
  %121 = getelementptr i8, ptr addrspace(1) %116, i64 %.idx, !dbg !24
  %122 = getelementptr bfloat, ptr addrspace(1) %121, i64 %120, !dbg !24
  %.idx4 = shl nsw i64 %59, 13, !dbg !24
  %123 = getelementptr i8, ptr addrspace(1) %116, i64 %.idx4, !dbg !24
  %124 = getelementptr bfloat, ptr addrspace(1) %123, i64 %120, !dbg !24
  %.idx5 = shl nsw i64 %60, 13, !dbg !24
  %125 = getelementptr i8, ptr addrspace(1) %116, i64 %.idx5, !dbg !24
  %126 = getelementptr bfloat, ptr addrspace(1) %125, i64 %120, !dbg !24
  %.idx6 = shl nsw i64 %61, 13, !dbg !24
  %127 = getelementptr i8, ptr addrspace(1) %116, i64 %.idx6, !dbg !24
  %128 = getelementptr bfloat, ptr addrspace(1) %127, i64 %120, !dbg !24
  %129 = icmp slt i64 %58, %49, !dbg !24
  %130 = icmp slt i64 %59, %49, !dbg !24
  %131 = icmp slt i64 %60, %49, !dbg !24
  %132 = icmp slt i64 %61, %49, !dbg !24
  %133 = and i1 %68, %129, !dbg !24
  %134 = and i1 %68, %130, !dbg !24
  %135 = and i1 %68, %131, !dbg !24
  %136 = and i1 %68, %132, !dbg !24
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %133) #5, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !24
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !24
  %141 = bitcast i32 %140 to <2 x bfloat>, !dbg !24
  %142 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !24
  %143 = bitcast i32 %142 to <2 x bfloat>, !dbg !24
  %144 = shufflevector <2 x bfloat> %143, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %145 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !24
  %146 = bitcast i32 %145 to <2 x bfloat>, !dbg !24
  %147 = shufflevector <2 x bfloat> %146, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %134) #5, !dbg !24
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !24
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !24
  %151 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !24
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !24
  %153 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !24
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !24
  %155 = shufflevector <2 x bfloat> %154, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %156 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !24
  %157 = bitcast i32 %156 to <2 x bfloat>, !dbg !24
  %158 = shufflevector <2 x bfloat> %157, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %135) #5, !dbg !24
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !24
  %161 = bitcast i32 %160 to <2 x bfloat>, !dbg !24
  %162 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !24
  %163 = bitcast i32 %162 to <2 x bfloat>, !dbg !24
  %164 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !24
  %165 = bitcast i32 %164 to <2 x bfloat>, !dbg !24
  %166 = shufflevector <2 x bfloat> %165, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %167 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !24
  %168 = bitcast i32 %167 to <2 x bfloat>, !dbg !24
  %169 = shufflevector <2 x bfloat> %168, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %136) #5, !dbg !24
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !24
  %172 = bitcast i32 %171 to <2 x bfloat>, !dbg !24
  %173 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !24
  %174 = bitcast i32 %173 to <2 x bfloat>, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !24
  %176 = bitcast i32 %175 to <2 x bfloat>, !dbg !24
  %177 = shufflevector <2 x bfloat> %176, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %178 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !24
  %179 = bitcast i32 %178 to <2 x bfloat>, !dbg !24
  %180 = shufflevector <2 x bfloat> %179, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %181 = shl nuw nsw i32 %12, 9, !dbg !24
  %182 = and i32 %181, 4096, !dbg !24
  %183 = or disjoint i32 %118, %182, !dbg !24
  %184 = select i1 %.not, i32 0, i32 72, !dbg !24
  %185 = select i1 %16, i32 0, i32 144, !dbg !24
  %186 = select i1 %18, i32 0, i32 288, !dbg !24
  %187 = or disjoint i32 %185, %184, !dbg !24
  %188 = xor i32 %187, %183, !dbg !24
  %189 = xor i32 %188, %186, !dbg !24
  %190 = shl nuw nsw i32 %19, 2, !dbg !24
  %191 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %189, !dbg !24
  %192 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %191, i32 %190, !dbg !24
  %193 = shufflevector <2 x bfloat> %139, <2 x bfloat> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %194 = shufflevector <8 x bfloat> %193, <8 x bfloat> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %195 = shufflevector <8 x bfloat> %194, <8 x bfloat> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %195, ptr addrspace(3) %192, align 16, !dbg !24
  %196 = or disjoint i32 %183, 1024, !dbg !24
  %197 = or disjoint i32 %187, %190, !dbg !24
  %198 = or disjoint i32 %197, %186, !dbg !24
  %199 = xor i32 %198, %196, !dbg !24
  %200 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %199, !dbg !24
  %201 = shufflevector <2 x bfloat> %150, <2 x bfloat> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %202 = shufflevector <8 x bfloat> %201, <8 x bfloat> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %203 = shufflevector <8 x bfloat> %202, <8 x bfloat> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %203, ptr addrspace(3) %200, align 16, !dbg !24
  %204 = or disjoint i32 %183, 2048, !dbg !24
  %205 = xor i32 %198, %204, !dbg !24
  %206 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %205, !dbg !24
  %207 = shufflevector <2 x bfloat> %161, <2 x bfloat> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %208 = shufflevector <8 x bfloat> %207, <8 x bfloat> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %209 = shufflevector <8 x bfloat> %208, <8 x bfloat> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %209, ptr addrspace(3) %206, align 16, !dbg !24
  %210 = or disjoint i32 %183, 3072, !dbg !24
  %211 = xor i32 %198, %210, !dbg !24
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %211, !dbg !24
  %213 = shufflevector <2 x bfloat> %172, <2 x bfloat> %174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %214 = shufflevector <8 x bfloat> %213, <8 x bfloat> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !24
  %215 = shufflevector <8 x bfloat> %214, <8 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !24
  store <8 x bfloat> %215, ptr addrspace(3) %212, align 16, !dbg !24
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #5, !dbg !25
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !25
  %216 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !25
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #5, !dbg !25
  %217 = lshr exact i32 ptrtoint (ptr addrspace(3) @global_smem to i32), 4, !dbg !25
  %218 = and i32 %217, 16383, !dbg !25
  %219 = zext nneg i32 %218 to i64, !dbg !25
  %220 = or disjoint i64 %219, 4611686293338849280, !dbg !25
  %221 = shl i32 %216, 10, !dbg !25
  %222 = and i32 %221, 4096, !dbg !25
  %223 = add i32 %222, ptrtoint (ptr addrspace(3) @global_smem to i32), !dbg !25
  %224 = lshr exact i32 %223, 4, !dbg !25
  %225 = and i32 %224, 16383, !dbg !25
  %226 = zext nneg i32 %225 to i64, !dbg !25
  %227 = or disjoint i64 %226, 4611686293338849280, !dbg !25
  %228 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %220, i64 %227) #5, !dbg !25
  %229 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 32), 4, !dbg !25
  %230 = and i32 %229, 16383, !dbg !25
  %231 = zext nneg i32 %230 to i64, !dbg !25
  %232 = or disjoint i64 %231, 4611686293338849280, !dbg !25
  %233 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 32), !dbg !25
  %234 = lshr exact i32 %233, 4, !dbg !25
  %235 = and i32 %234, 16383, !dbg !25
  %236 = zext nneg i32 %235 to i64, !dbg !25
  %237 = or disjoint i64 %236, 4611686293338849280, !dbg !25
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 0, !dbg !25
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 1, !dbg !25
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 2, !dbg !25
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 3, !dbg !25
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 4, !dbg !25
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 5, !dbg !25
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 6, !dbg !25
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 7, !dbg !25
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 8, !dbg !25
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 9, !dbg !25
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 10, !dbg !25
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 11, !dbg !25
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 12, !dbg !25
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 13, !dbg !25
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 14, !dbg !25
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %228, 15, !dbg !25
  %254 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, i64 %232, i64 %237, i1 true) #5, !dbg !25
  %255 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 64), 4, !dbg !25
  %256 = and i32 %255, 16383, !dbg !25
  %257 = zext nneg i32 %256 to i64, !dbg !25
  %258 = or disjoint i64 %257, 4611686293338849280, !dbg !25
  %259 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 64), !dbg !25
  %260 = lshr exact i32 %259, 4, !dbg !25
  %261 = and i32 %260, 16383, !dbg !25
  %262 = zext nneg i32 %261 to i64, !dbg !25
  %263 = or disjoint i64 %262, 4611686293338849280, !dbg !25
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 0, !dbg !25
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 1, !dbg !25
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 2, !dbg !25
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 3, !dbg !25
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 4, !dbg !25
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 5, !dbg !25
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 6, !dbg !25
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 7, !dbg !25
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 8, !dbg !25
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 9, !dbg !25
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 10, !dbg !25
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 11, !dbg !25
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 12, !dbg !25
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 13, !dbg !25
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 14, !dbg !25
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 15, !dbg !25
  %280 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %264, float %265, float %266, float %267, float %268, float %269, float %270, float %271, float %272, float %273, float %274, float %275, float %276, float %277, float %278, float %279, i64 %258, i64 %263, i1 true) #5, !dbg !25
  %281 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 96), 4, !dbg !25
  %282 = and i32 %281, 16383, !dbg !25
  %283 = zext nneg i32 %282 to i64, !dbg !25
  %284 = or disjoint i64 %283, 4611686293338849280, !dbg !25
  %285 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 96), !dbg !25
  %286 = lshr exact i32 %285, 4, !dbg !25
  %287 = and i32 %286, 16383, !dbg !25
  %288 = zext nneg i32 %287 to i64, !dbg !25
  %289 = or disjoint i64 %288, 4611686293338849280, !dbg !25
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 0, !dbg !25
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 1, !dbg !25
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 2, !dbg !25
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 3, !dbg !25
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 4, !dbg !25
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 5, !dbg !25
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 6, !dbg !25
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 7, !dbg !25
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 8, !dbg !25
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 9, !dbg !25
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 10, !dbg !25
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 11, !dbg !25
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 12, !dbg !25
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 13, !dbg !25
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 14, !dbg !25
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %280, 15, !dbg !25
  %306 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, i64 %284, i64 %289, i1 true) #5, !dbg !25
  %307 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8192), 4, !dbg !25
  %308 = and i32 %307, 16383, !dbg !25
  %309 = zext nneg i32 %308 to i64, !dbg !25
  %310 = or disjoint i64 %309, 4611686293338849280, !dbg !25
  %311 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8192), !dbg !25
  %312 = lshr exact i32 %311, 4, !dbg !25
  %313 = and i32 %312, 16383, !dbg !25
  %314 = zext nneg i32 %313 to i64, !dbg !25
  %315 = or disjoint i64 %314, 4611686293338849280, !dbg !25
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 0, !dbg !25
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 1, !dbg !25
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 2, !dbg !25
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 3, !dbg !25
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 4, !dbg !25
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 5, !dbg !25
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 6, !dbg !25
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 7, !dbg !25
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 8, !dbg !25
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 9, !dbg !25
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 10, !dbg !25
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 11, !dbg !25
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 12, !dbg !25
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 13, !dbg !25
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 14, !dbg !25
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 15, !dbg !25
  %332 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, float %325, float %326, float %327, float %328, float %329, float %330, float %331, i64 %310, i64 %315, i1 true) #5, !dbg !25
  %333 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8224), 4, !dbg !25
  %334 = and i32 %333, 16383, !dbg !25
  %335 = zext nneg i32 %334 to i64, !dbg !25
  %336 = or disjoint i64 %335, 4611686293338849280, !dbg !25
  %337 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8224), !dbg !25
  %338 = lshr exact i32 %337, 4, !dbg !25
  %339 = and i32 %338, 16383, !dbg !25
  %340 = zext nneg i32 %339 to i64, !dbg !25
  %341 = or disjoint i64 %340, 4611686293338849280, !dbg !25
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 0, !dbg !25
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 1, !dbg !25
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 2, !dbg !25
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 3, !dbg !25
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 4, !dbg !25
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 5, !dbg !25
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 6, !dbg !25
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 7, !dbg !25
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 8, !dbg !25
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 9, !dbg !25
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 10, !dbg !25
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 11, !dbg !25
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 12, !dbg !25
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 13, !dbg !25
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 14, !dbg !25
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %332, 15, !dbg !25
  %358 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %342, float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, i64 %336, i64 %341, i1 true) #5, !dbg !25
  %359 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8256), 4, !dbg !25
  %360 = and i32 %359, 16383, !dbg !25
  %361 = zext nneg i32 %360 to i64, !dbg !25
  %362 = or disjoint i64 %361, 4611686293338849280, !dbg !25
  %363 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8256), !dbg !25
  %364 = lshr exact i32 %363, 4, !dbg !25
  %365 = and i32 %364, 16383, !dbg !25
  %366 = zext nneg i32 %365 to i64, !dbg !25
  %367 = or disjoint i64 %366, 4611686293338849280, !dbg !25
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 0, !dbg !25
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 1, !dbg !25
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 2, !dbg !25
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 3, !dbg !25
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 4, !dbg !25
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 5, !dbg !25
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 6, !dbg !25
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 7, !dbg !25
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 8, !dbg !25
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 9, !dbg !25
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 10, !dbg !25
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 11, !dbg !25
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 12, !dbg !25
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 13, !dbg !25
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 14, !dbg !25
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 15, !dbg !25
  %384 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %368, float %369, float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, i64 %362, i64 %367, i1 true) #5, !dbg !25
  %385 = lshr exact i32 add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8288), 4, !dbg !25
  %386 = and i32 %385, 16383, !dbg !25
  %387 = zext nneg i32 %386 to i64, !dbg !25
  %388 = or disjoint i64 %387, 4611686293338849280, !dbg !25
  %389 = add i32 %222, add (i32 ptrtoint (ptr addrspace(3) @global_smem to i32), i32 8288), !dbg !25
  %390 = lshr exact i32 %389, 4, !dbg !25
  %391 = and i32 %390, 16383, !dbg !25
  %392 = zext nneg i32 %391 to i64, !dbg !25
  %393 = or disjoint i64 %392, 4611686293338849280, !dbg !25
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 0, !dbg !25
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 1, !dbg !25
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 2, !dbg !25
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 3, !dbg !25
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 4, !dbg !25
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 5, !dbg !25
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 6, !dbg !25
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 7, !dbg !25
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 8, !dbg !25
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 9, !dbg !25
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 10, !dbg !25
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 11, !dbg !25
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 12, !dbg !25
  %407 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 13, !dbg !25
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 14, !dbg !25
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %384, 15, !dbg !25
  %410 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, float %402, float %403, float %404, float %405, float %406, float %407, float %408, float %409, i64 %388, i64 %393, i1 true) #5, !dbg !25
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 0, !dbg !25
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 1, !dbg !25
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 2, !dbg !25
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 3, !dbg !25
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 4, !dbg !25
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 5, !dbg !25
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 6, !dbg !25
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 7, !dbg !25
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 8, !dbg !25
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 9, !dbg !25
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 10, !dbg !25
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 11, !dbg !25
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 12, !dbg !25
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 13, !dbg !25
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 14, !dbg !25
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %410, 15, !dbg !25
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #5, !dbg !25
  %427 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, float %426) #5, !dbg !25
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 0, !dbg !25
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 1, !dbg !25
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 2, !dbg !25
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 3, !dbg !25
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 4, !dbg !25
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 5, !dbg !25
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 6, !dbg !25
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 7, !dbg !25
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 8, !dbg !25
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 9, !dbg !25
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 10, !dbg !25
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 11, !dbg !25
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 12, !dbg !25
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 13, !dbg !25
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 14, !dbg !25
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 15, !dbg !25
  %444 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %445 = getelementptr float, ptr addrspace(1) %444, i64 %47, !dbg !27
  %446 = getelementptr float, ptr addrspace(1) %445, i64 %64, !dbg !28
  %447 = getelementptr float, ptr addrspace(1) %445, i64 %65, !dbg !28
  %448 = extractelement <8 x i32> %89, i64 7, !dbg !28
  %449 = sext i32 %448 to i64, !dbg !28
  %.idx7 = shl nsw i64 %449, 7, !dbg !28
  %450 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx7, !dbg !28
  %451 = extractelement <8 x i32> %89, i64 6, !dbg !28
  %452 = sext i32 %451 to i64, !dbg !28
  %.idx8 = shl nsw i64 %452, 7, !dbg !28
  %453 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx8, !dbg !28
  %454 = extractelement <8 x i32> %89, i64 5, !dbg !28
  %455 = sext i32 %454 to i64, !dbg !28
  %.idx9 = shl nsw i64 %455, 7, !dbg !28
  %456 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx9, !dbg !28
  %457 = extractelement <8 x i32> %89, i64 4, !dbg !28
  %458 = sext i32 %457 to i64, !dbg !28
  %.idx10 = shl nsw i64 %458, 7, !dbg !28
  %459 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx10, !dbg !28
  %460 = extractelement <8 x i32> %89, i64 3, !dbg !28
  %461 = sext i32 %460 to i64, !dbg !28
  %.idx11 = shl nsw i64 %461, 7, !dbg !28
  %462 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx11, !dbg !28
  %463 = extractelement <8 x i32> %89, i64 2, !dbg !28
  %464 = sext i32 %463 to i64, !dbg !28
  %.idx12 = shl nsw i64 %464, 7, !dbg !28
  %465 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx12, !dbg !28
  %466 = extractelement <8 x i32> %89, i64 1, !dbg !28
  %467 = sext i32 %466 to i64, !dbg !28
  %.idx13 = shl nsw i64 %467, 7, !dbg !28
  %468 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx13, !dbg !28
  %469 = extractelement <8 x i32> %89, i64 0, !dbg !28
  %470 = sext i32 %469 to i64, !dbg !28
  %.idx14 = shl nsw i64 %470, 7, !dbg !28
  %471 = getelementptr i8, ptr addrspace(1) %445, i64 %.idx14, !dbg !28
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %446, i1 %91) #5, !dbg !28
  %473 = bitcast i32 %472 to float, !dbg !28
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %92) #5, !dbg !28
  %475 = bitcast i32 %474 to float, !dbg !28
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %450, i1 %94) #5, !dbg !28
  %477 = bitcast i32 %476 to float, !dbg !28
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %453, i1 %96) #5, !dbg !28
  %479 = bitcast i32 %478 to float, !dbg !28
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %456, i1 %98) #5, !dbg !28
  %481 = bitcast i32 %480 to float, !dbg !28
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 %100) #5, !dbg !28
  %483 = bitcast i32 %482 to float, !dbg !28
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %462, i1 %102) #5, !dbg !28
  %485 = bitcast i32 %484 to float, !dbg !28
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %465, i1 %104) #5, !dbg !28
  %487 = bitcast i32 %486 to float, !dbg !28
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %468, i1 %106) #5, !dbg !28
  %489 = bitcast i32 %488 to float, !dbg !28
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %471, i1 %108) #5, !dbg !28
  %491 = bitcast i32 %490 to float, !dbg !28
  %492 = fsub float %473, %477, !dbg !29
  %493 = fsub float %473, %479, !dbg !29
  %494 = fsub float %475, %477, !dbg !29
  %495 = fsub float %475, %479, !dbg !29
  %496 = fsub float %473, %481, !dbg !29
  %497 = fsub float %473, %483, !dbg !29
  %498 = fsub float %475, %481, !dbg !29
  %499 = fsub float %475, %483, !dbg !29
  %500 = fsub float %473, %485, !dbg !29
  %501 = fsub float %473, %487, !dbg !29
  %502 = fsub float %475, %485, !dbg !29
  %503 = fsub float %475, %487, !dbg !29
  %504 = fsub float %473, %489, !dbg !29
  %505 = fsub float %473, %491, !dbg !29
  %506 = fsub float %475, %489, !dbg !29
  %507 = fsub float %475, %491, !dbg !29
  %508 = fmul float %492, 0x3FF7154760000000, !dbg !30
  %509 = tail call float @llvm.nvvm.ex2.approx.f(float %508), !dbg !30
  %510 = fmul float %493, 0x3FF7154760000000, !dbg !30
  %511 = tail call float @llvm.nvvm.ex2.approx.f(float %510), !dbg !30
  %512 = fmul float %494, 0x3FF7154760000000, !dbg !30
  %513 = tail call float @llvm.nvvm.ex2.approx.f(float %512), !dbg !30
  %514 = fmul float %495, 0x3FF7154760000000, !dbg !30
  %515 = tail call float @llvm.nvvm.ex2.approx.f(float %514), !dbg !30
  %516 = fmul float %496, 0x3FF7154760000000, !dbg !30
  %517 = tail call float @llvm.nvvm.ex2.approx.f(float %516), !dbg !30
  %518 = fmul float %497, 0x3FF7154760000000, !dbg !30
  %519 = tail call float @llvm.nvvm.ex2.approx.f(float %518), !dbg !30
  %520 = fmul float %498, 0x3FF7154760000000, !dbg !30
  %521 = tail call float @llvm.nvvm.ex2.approx.f(float %520), !dbg !30
  %522 = fmul float %499, 0x3FF7154760000000, !dbg !30
  %523 = tail call float @llvm.nvvm.ex2.approx.f(float %522), !dbg !30
  %524 = fmul float %500, 0x3FF7154760000000, !dbg !30
  %525 = tail call float @llvm.nvvm.ex2.approx.f(float %524), !dbg !30
  %526 = fmul float %501, 0x3FF7154760000000, !dbg !30
  %527 = tail call float @llvm.nvvm.ex2.approx.f(float %526), !dbg !30
  %528 = fmul float %502, 0x3FF7154760000000, !dbg !30
  %529 = tail call float @llvm.nvvm.ex2.approx.f(float %528), !dbg !30
  %530 = fmul float %503, 0x3FF7154760000000, !dbg !30
  %531 = tail call float @llvm.nvvm.ex2.approx.f(float %530), !dbg !30
  %532 = fmul float %504, 0x3FF7154760000000, !dbg !30
  %533 = tail call float @llvm.nvvm.ex2.approx.f(float %532), !dbg !30
  %534 = fmul float %505, 0x3FF7154760000000, !dbg !30
  %535 = tail call float @llvm.nvvm.ex2.approx.f(float %534), !dbg !30
  %536 = fmul float %506, 0x3FF7154760000000, !dbg !30
  %537 = tail call float @llvm.nvvm.ex2.approx.f(float %536), !dbg !30
  %538 = fmul float %507, 0x3FF7154760000000, !dbg !30
  %539 = tail call float @llvm.nvvm.ex2.approx.f(float %538), !dbg !30
  %540 = fmul float %428, %509, !dbg !31
  %541 = fmul float %429, %511, !dbg !31
  %542 = fmul float %430, %513, !dbg !31
  %543 = fmul float %431, %515, !dbg !31
  %544 = fmul float %432, %517, !dbg !31
  %545 = fmul float %433, %519, !dbg !31
  %546 = fmul float %434, %521, !dbg !31
  %547 = fmul float %435, %523, !dbg !31
  %548 = fmul float %436, %525, !dbg !31
  %549 = fmul float %437, %527, !dbg !31
  %550 = fmul float %438, %529, !dbg !31
  %551 = fmul float %439, %531, !dbg !31
  %552 = fmul float %440, %533, !dbg !31
  %553 = fmul float %441, %535, !dbg !31
  %554 = fmul float %442, %537, !dbg !31
  %555 = fmul float %443, %539, !dbg !31
  %556 = fpext bfloat %110 to float, !dbg !32
  %557 = fpext bfloat %112 to float, !dbg !32
  %558 = fmul float %540, %556, !dbg !32
  %559 = fmul float %541, %556, !dbg !32
  %560 = fmul float %542, %557, !dbg !32
  %561 = fmul float %543, %557, !dbg !32
  %562 = fmul float %544, %556, !dbg !32
  %563 = fmul float %545, %556, !dbg !32
  %564 = fmul float %546, %557, !dbg !32
  %565 = fmul float %547, %557, !dbg !32
  %566 = fmul float %548, %556, !dbg !32
  %567 = fmul float %549, %556, !dbg !32
  %568 = fmul float %550, %557, !dbg !32
  %569 = fmul float %551, %557, !dbg !32
  %570 = fmul float %552, %556, !dbg !32
  %571 = fmul float %553, %556, !dbg !32
  %572 = fmul float %554, %557, !dbg !32
  %573 = fmul float %555, %557, !dbg !32
  %574 = icmp samesign ugt i32 %29, %71, !dbg !33
  %575 = icmp samesign ugt i32 %29, %72, !dbg !33
  %576 = icmp samesign ugt i32 %30, %71, !dbg !33
  %577 = icmp samesign ugt i32 %30, %72, !dbg !33
  %578 = icmp samesign ugt i32 %29, %73, !dbg !33
  %579 = icmp samesign ugt i32 %29, %74, !dbg !33
  %580 = icmp samesign ugt i32 %30, %74, !dbg !33
  %581 = icmp samesign ugt i32 %29, %75, !dbg !33
  %582 = icmp samesign ugt i32 %29, %76, !dbg !33
  %583 = icmp samesign ugt i32 %30, %75, !dbg !33
  %584 = icmp samesign ugt i32 %30, %76, !dbg !33
  %585 = icmp samesign ugt i32 %29, %77, !dbg !33
  %586 = icmp samesign ugt i32 %29, %78, !dbg !33
  %587 = icmp samesign ugt i32 %30, %77, !dbg !33
  %588 = icmp samesign ugt i32 %30, %78, !dbg !33
  %589 = extractelement <8 x i1> %88, i64 7, !dbg !34
  %590 = and i1 %574, %589, !dbg !34
  %591 = and i1 %38, %590, !dbg !34
  %592 = extractelement <8 x i1> %88, i64 6, !dbg !34
  %593 = and i1 %575, %592, !dbg !34
  %594 = and i1 %38, %593, !dbg !34
  %595 = and i1 %576, %589, !dbg !34
  %596 = and i1 %39, %595, !dbg !34
  %597 = and i1 %577, %592, !dbg !34
  %598 = and i1 %39, %597, !dbg !34
  %599 = extractelement <8 x i1> %88, i64 5, !dbg !34
  %600 = and i1 %578, %599, !dbg !34
  %601 = and i1 %38, %600, !dbg !34
  %602 = extractelement <8 x i1> %88, i64 4, !dbg !34
  %603 = and i1 %579, %602, !dbg !34
  %604 = and i1 %38, %603, !dbg !34
  %605 = and i1 %574, %599, !dbg !34
  %606 = and i1 %39, %605, !dbg !34
  %607 = and i1 %580, %602, !dbg !34
  %608 = and i1 %39, %607, !dbg !34
  %609 = extractelement <8 x i1> %88, i64 3, !dbg !34
  %610 = and i1 %581, %609, !dbg !34
  %611 = and i1 %38, %610, !dbg !34
  %612 = extractelement <8 x i1> %88, i64 2, !dbg !34
  %613 = and i1 %582, %612, !dbg !34
  %614 = and i1 %38, %613, !dbg !34
  %615 = and i1 %583, %609, !dbg !34
  %616 = and i1 %39, %615, !dbg !34
  %617 = and i1 %584, %612, !dbg !34
  %618 = and i1 %39, %617, !dbg !34
  %619 = extractelement <8 x i1> %88, i64 1, !dbg !34
  %620 = and i1 %585, %619, !dbg !34
  %621 = and i1 %38, %620, !dbg !34
  %622 = extractelement <8 x i1> %88, i64 0, !dbg !34
  %623 = and i1 %586, %622, !dbg !34
  %624 = and i1 %38, %623, !dbg !34
  %625 = and i1 %587, %619, !dbg !34
  %626 = and i1 %39, %625, !dbg !34
  %627 = and i1 %588, %622, !dbg !34
  %628 = and i1 %39, %627, !dbg !34
  %629 = shl i32 %113, 6, !dbg !35
  %630 = sext i32 %629 to i64, !dbg !36
  %631 = getelementptr float, ptr addrspace(1) %3, i64 %630, !dbg !36
  %632 = getelementptr i8, ptr addrspace(1) %631, i64 %.idx, !dbg !37
  %633 = getelementptr float, ptr addrspace(1) %632, i64 %57, !dbg !37
  %634 = getelementptr i8, ptr addrspace(1) %631, i64 %.idx4, !dbg !37
  %635 = getelementptr float, ptr addrspace(1) %634, i64 %57, !dbg !37
  %636 = getelementptr i8, ptr addrspace(1) %631, i64 %.idx5, !dbg !37
  %637 = getelementptr float, ptr addrspace(1) %636, i64 %57, !dbg !37
  %638 = getelementptr i8, ptr addrspace(1) %631, i64 %.idx6, !dbg !37
  %639 = getelementptr float, ptr addrspace(1) %638, i64 %57, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %640 = shl nuw nsw i32 %12, 4, !dbg !37
  %641 = and i32 %640, 448, !dbg !37
  %642 = shl nuw nsw i32 %12, 5, !dbg !37
  %643 = and i32 %642, 3072, !dbg !37
  %644 = or disjoint i32 %643, %641, !dbg !37
  %645 = or disjoint i32 %71, %644, !dbg !37
  %646 = and i32 %34, 508, !dbg !37
  %647 = or disjoint i32 %646, %190, !dbg !37
  %648 = lshr exact i32 %644, 2, !dbg !37
  %649 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %648, !dbg !37
  %650 = getelementptr inbounds nuw float, ptr addrspace(3) %649, i32 %645, !dbg !37
  %651 = bitcast float %558 to i32, !dbg !37
  %652 = select i1 %591, i32 %651, i32 0, !dbg !38
  %653 = bitcast float %559 to i32, !dbg !37
  %654 = select i1 %594, i32 %653, i32 0, !dbg !38
  %655 = insertelement <2 x i32> poison, i32 %652, i64 0, !dbg !37
  %656 = insertelement <2 x i32> %655, i32 %654, i64 1, !dbg !37
  store <2 x i32> %656, ptr addrspace(3) %650, align 8, !dbg !37
  %657 = or disjoint i32 %645, 512, !dbg !37
  %658 = lshr i32 %657, 4, !dbg !37
  %659 = and i32 %658, 67108860, !dbg !37
  %660 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %659, !dbg !37
  %661 = getelementptr inbounds nuw float, ptr addrspace(3) %660, i32 %657, !dbg !37
  %662 = bitcast float %560 to i32, !dbg !37
  %663 = select i1 %596, i32 %662, i32 0, !dbg !38
  %664 = bitcast float %561 to i32, !dbg !37
  %665 = select i1 %598, i32 %664, i32 0, !dbg !38
  %666 = insertelement <2 x i32> poison, i32 %663, i64 0, !dbg !37
  %667 = insertelement <2 x i32> %666, i32 %665, i64 1, !dbg !37
  store <2 x i32> %667, ptr addrspace(3) %661, align 8, !dbg !37
  %668 = getelementptr inbounds nuw i8, ptr addrspace(3) %650, i32 32, !dbg !37
  %669 = bitcast float %562 to i32, !dbg !37
  %670 = select i1 %601, i32 %669, i32 0, !dbg !38
  %671 = bitcast float %563 to i32, !dbg !37
  %672 = select i1 %604, i32 %671, i32 0, !dbg !38
  %673 = insertelement <2 x i32> poison, i32 %670, i64 0, !dbg !37
  %674 = insertelement <2 x i32> %673, i32 %672, i64 1, !dbg !37
  store <2 x i32> %674, ptr addrspace(3) %668, align 8, !dbg !37
  %675 = or disjoint i32 %645, 520, !dbg !37
  %676 = lshr i32 %675, 4, !dbg !37
  %677 = and i32 %676, 67108860, !dbg !37
  %678 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %677, !dbg !37
  %679 = getelementptr inbounds nuw float, ptr addrspace(3) %678, i32 %675, !dbg !37
  %680 = bitcast float %564 to i32, !dbg !37
  %681 = select i1 %606, i32 %680, i32 0, !dbg !38
  %682 = bitcast float %565 to i32, !dbg !37
  %683 = select i1 %608, i32 %682, i32 0, !dbg !38
  %684 = insertelement <2 x i32> poison, i32 %681, i64 0, !dbg !37
  %685 = insertelement <2 x i32> %684, i32 %683, i64 1, !dbg !37
  store <2 x i32> %685, ptr addrspace(3) %679, align 8, !dbg !37
  %686 = getelementptr inbounds nuw i8, ptr addrspace(3) %650, i32 64, !dbg !37
  %687 = bitcast float %566 to i32, !dbg !37
  %688 = select i1 %611, i32 %687, i32 0, !dbg !38
  %689 = bitcast float %567 to i32, !dbg !37
  %690 = select i1 %614, i32 %689, i32 0, !dbg !38
  %691 = insertelement <2 x i32> poison, i32 %688, i64 0, !dbg !37
  %692 = insertelement <2 x i32> %691, i32 %690, i64 1, !dbg !37
  store <2 x i32> %692, ptr addrspace(3) %686, align 8, !dbg !37
  %693 = or disjoint i32 %645, 528, !dbg !37
  %694 = lshr i32 %693, 4, !dbg !37
  %695 = and i32 %694, 67108860, !dbg !37
  %696 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %695, !dbg !37
  %697 = getelementptr inbounds nuw float, ptr addrspace(3) %696, i32 %693, !dbg !37
  %698 = bitcast float %568 to i32, !dbg !37
  %699 = select i1 %616, i32 %698, i32 0, !dbg !38
  %700 = bitcast float %569 to i32, !dbg !37
  %701 = select i1 %618, i32 %700, i32 0, !dbg !38
  %702 = insertelement <2 x i32> poison, i32 %699, i64 0, !dbg !37
  %703 = insertelement <2 x i32> %702, i32 %701, i64 1, !dbg !37
  store <2 x i32> %703, ptr addrspace(3) %697, align 8, !dbg !37
  %704 = getelementptr inbounds nuw i8, ptr addrspace(3) %650, i32 96, !dbg !37
  %705 = bitcast float %570 to i32, !dbg !37
  %706 = select i1 %621, i32 %705, i32 0, !dbg !38
  %707 = bitcast float %571 to i32, !dbg !37
  %708 = select i1 %624, i32 %707, i32 0, !dbg !38
  %709 = insertelement <2 x i32> poison, i32 %706, i64 0, !dbg !37
  %710 = insertelement <2 x i32> %709, i32 %708, i64 1, !dbg !37
  store <2 x i32> %710, ptr addrspace(3) %704, align 8, !dbg !37
  %711 = or disjoint i32 %645, 536, !dbg !37
  %712 = lshr i32 %711, 4, !dbg !37
  %713 = and i32 %712, 67108860, !dbg !37
  %714 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %713, !dbg !37
  %715 = getelementptr inbounds nuw float, ptr addrspace(3) %714, i32 %711, !dbg !37
  %716 = bitcast float %572 to i32, !dbg !37
  %717 = select i1 %626, i32 %716, i32 0, !dbg !38
  %718 = bitcast float %573 to i32, !dbg !37
  %719 = select i1 %628, i32 %718, i32 0, !dbg !38
  %720 = insertelement <2 x i32> poison, i32 %717, i64 0, !dbg !37
  %721 = insertelement <2 x i32> %720, i32 %719, i64 1, !dbg !37
  store <2 x i32> %721, ptr addrspace(3) %715, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %722 = lshr i32 %647, 4, !dbg !37
  %723 = and i32 %722, 60, !dbg !37
  %724 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %723, !dbg !37
  %725 = getelementptr inbounds nuw float, ptr addrspace(3) %724, i32 %647, !dbg !37
  %726 = or disjoint i32 %647, 1024, !dbg !37
  %727 = lshr i32 %726, 4, !dbg !37
  %728 = and i32 %727, 124, !dbg !37
  %729 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %728, !dbg !37
  %730 = getelementptr inbounds nuw float, ptr addrspace(3) %729, i32 %726, !dbg !37
  %731 = load <4 x i32>, ptr addrspace(3) %730, align 16, !dbg !37
  %732 = or disjoint i32 %647, 2048, !dbg !37
  %733 = lshr i32 %732, 4, !dbg !37
  %734 = and i32 %733, 188, !dbg !37
  %735 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %734, !dbg !37
  %736 = getelementptr inbounds nuw float, ptr addrspace(3) %735, i32 %732, !dbg !37
  %737 = load <4 x i32>, ptr addrspace(3) %736, align 16, !dbg !37
  %738 = or disjoint i32 %647, 3072, !dbg !37
  %739 = lshr i32 %738, 4, !dbg !37
  %740 = and i32 %739, 252, !dbg !37
  %741 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %740, !dbg !37
  %742 = getelementptr inbounds nuw float, ptr addrspace(3) %741, i32 %738, !dbg !37
  %743 = load <4 x i32>, ptr addrspace(3) %742, align 16, !dbg !37
  %.extract = load i32, ptr addrspace(3) %725, align 16, !dbg !37
  %744 = getelementptr inbounds nuw i8, ptr addrspace(3) %725, i32 4, !dbg !37
  %.extract34 = load i32, ptr addrspace(3) %744, align 4, !dbg !37
  %745 = getelementptr inbounds nuw i8, ptr addrspace(3) %725, i32 8, !dbg !37
  %.extract35 = load i32, ptr addrspace(3) %745, align 8, !dbg !37
  %746 = getelementptr inbounds nuw i8, ptr addrspace(3) %725, i32 12, !dbg !37
  %.extract36 = load i32, ptr addrspace(3) %746, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %633, i1 %133) #5, !dbg !37
  %.extract37 = extractelement <4 x i32> %731, i64 0, !dbg !37
  %.extract38 = extractelement <4 x i32> %731, i64 1, !dbg !37
  %.extract39 = extractelement <4 x i32> %731, i64 2, !dbg !37
  %.extract40 = extractelement <4 x i32> %731, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %635, i1 %134) #5, !dbg !37
  %.extract41 = extractelement <4 x i32> %737, i64 0, !dbg !37
  %.extract42 = extractelement <4 x i32> %737, i64 1, !dbg !37
  %.extract43 = extractelement <4 x i32> %737, i64 2, !dbg !37
  %.extract44 = extractelement <4 x i32> %737, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %637, i1 %135) #5, !dbg !37
  %.extract45 = extractelement <4 x i32> %743, i64 0, !dbg !37
  %.extract46 = extractelement <4 x i32> %743, i64 1, !dbg !37
  %.extract47 = extractelement <4 x i32> %743, i64 2, !dbg !37
  %.extract48 = extractelement <4 x i32> %743, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract45, i32 %.extract46, i32 %.extract47, i32 %.extract48, ptr addrspace(1) %639, i1 %136) #5, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 51, column: 21, scope: !5)
!15 = !DILocation(line: 52, column: 16, scope: !5)
!16 = !DILocation(line: 54, column: 42, scope: !5)
!17 = !DILocation(line: 54, column: 38, scope: !5)
!18 = !DILocation(line: 54, column: 46, scope: !5)
!19 = !DILocation(line: 54, column: 83, scope: !5)
!20 = !DILocation(line: 55, column: 21, scope: !5)
!21 = !DILocation(line: 59, column: 45, scope: !5)
!22 = !DILocation(line: 59, column: 52, scope: !5)
!23 = !DILocation(line: 59, column: 36, scope: !5)
!24 = !DILocation(line: 60, column: 22, scope: !5)
!25 = !DILocation(line: 61, column: 27, scope: !5)
!26 = !DILocation(line: 64, column: 36, scope: !5)
!27 = !DILocation(line: 64, column: 44, scope: !5)
!28 = !DILocation(line: 65, column: 22, scope: !5)
!29 = !DILocation(line: 66, column: 34, scope: !5)
!30 = !DILocation(line: 67, column: 19, scope: !5)
!31 = !DILocation(line: 67, column: 15, scope: !5)
!32 = !DILocation(line: 68, column: 11, scope: !5)
!33 = !DILocation(line: 70, column: 26, scope: !5)
!34 = !DILocation(line: 70, column: 43, scope: !5)
!35 = !DILocation(line: 72, column: 48, scope: !5)
!36 = !DILocation(line: 72, column: 32, scope: !5)
!37 = !DILocation(line: 73, column: 18, scope: !5)
!38 = !DILocation(line: 71, column: 29, scope: !5)
!39 = !DILocation(line: 73, column: 4, scope: !5)
