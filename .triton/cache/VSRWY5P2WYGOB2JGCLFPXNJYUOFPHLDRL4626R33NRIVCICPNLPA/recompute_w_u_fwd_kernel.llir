; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @recompute_w_u_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr #0 !dbg !5 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %12 = and i32 %11, 65504, !dbg !10
  %13 = and i32 %11, 31, !dbg !11
  %14 = mul i32 %12, %7, !dbg !12
  %15 = sext i32 %14 to i64, !dbg !13
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !13
  %17 = zext nneg i32 %13 to i64, !dbg !14
  %18 = getelementptr bfloat, ptr addrspace(1) %16, i64 %17, !dbg !14
  %19 = shl i32 %10, 6, !dbg !15
  %20 = sext i32 %7 to i64, !dbg !16
  %21 = sext i32 %19 to i64, !dbg !16
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %23 = lshr i32 %22, 3, !dbg !17
  %24 = and i32 %23, 7, !dbg !17
  %25 = or disjoint i32 %24, 8, !dbg !17
  %26 = or disjoint i32 %24, 16, !dbg !17
  %27 = or disjoint i32 %24, 24, !dbg !17
  %28 = or disjoint i32 %24, 32, !dbg !17
  %29 = or disjoint i32 %24, 40, !dbg !17
  %30 = or disjoint i32 %24, 48, !dbg !17
  %31 = or disjoint i32 %24, 56, !dbg !17
  %32 = and i32 %22, 4, !dbg !17
  %33 = icmp eq i32 %32, 0, !dbg !17
  %34 = shl nuw nsw i32 %22, 3, !dbg !17
  %35 = and i32 %34, 56, !dbg !17
  %36 = and i32 %22, 63, !dbg !17
  %37 = zext nneg i32 %24 to i64, !dbg !17
  %38 = zext nneg i32 %25 to i64, !dbg !17
  %39 = zext nneg i32 %26 to i64, !dbg !17
  %40 = zext nneg i32 %27 to i64, !dbg !17
  %41 = zext nneg i32 %28 to i64, !dbg !17
  %42 = zext nneg i32 %29 to i64, !dbg !17
  %43 = zext nneg i32 %30 to i64, !dbg !17
  %44 = zext nneg i32 %31 to i64, !dbg !17
  %45 = zext nneg i32 %35 to i64, !dbg !17
  %46 = zext nneg i32 %36 to i64, !dbg !17
  %47 = or disjoint i64 %37, %21, !dbg !17
  %48 = or disjoint i64 %38, %21, !dbg !17
  %49 = or disjoint i64 %39, %21, !dbg !17
  %50 = or disjoint i64 %40, %21, !dbg !17
  %51 = or disjoint i64 %41, %21, !dbg !17
  %52 = or disjoint i64 %42, %21, !dbg !17
  %53 = or disjoint i64 %43, %21, !dbg !17
  %54 = or disjoint i64 %44, %21, !dbg !17
  %55 = or disjoint i64 %21, %46, !dbg !17
  %56 = shl nsw i64 %55, 5, !dbg !17
  %57 = getelementptr bfloat, ptr addrspace(1) %18, i64 %56, !dbg !17
  %58 = icmp sgt i32 %19, -1, !dbg !17
  %59 = icmp slt i64 %55, %20, !dbg !17
  %60 = and i1 %58, %59, !dbg !17
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %57, i1 %60) #3, !dbg !17
  %62 = shl nuw nsw i32 %22, 1, !dbg !18
  %63 = and i32 %62, 6, !dbg !18
  %64 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %36, !dbg !18
  %65 = insertelement <1 x i16> poison, i16 %61, i64 0, !dbg !18
  store <1 x i16> %65, ptr addrspace(3) %64, align 2, !dbg !18
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !18
  %66 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %63, !dbg !18
  %67 = load <2 x bfloat>, ptr addrspace(3) %66, align 4, !dbg !18
  %68 = or disjoint i32 %63, 8, !dbg !18
  %69 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %68, !dbg !18
  %70 = load <2 x bfloat>, ptr addrspace(3) %69, align 4, !dbg !18
  %71 = or disjoint i32 %63, 16, !dbg !18
  %72 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %71, !dbg !18
  %73 = load <2 x bfloat>, ptr addrspace(3) %72, align 4, !dbg !18
  %74 = or disjoint i32 %63, 24, !dbg !18
  %75 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %74, !dbg !18
  %76 = load <2 x bfloat>, ptr addrspace(3) %75, align 4, !dbg !18
  %77 = or disjoint i32 %63, 32, !dbg !18
  %78 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %77, !dbg !18
  %79 = load <2 x bfloat>, ptr addrspace(3) %78, align 4, !dbg !18
  %80 = or disjoint i32 %63, 40, !dbg !18
  %81 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %80, !dbg !18
  %82 = load <2 x bfloat>, ptr addrspace(3) %81, align 4, !dbg !18
  %83 = or disjoint i32 %63, 48, !dbg !18
  %84 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %83, !dbg !18
  %85 = load <2 x bfloat>, ptr addrspace(3) %84, align 4, !dbg !18
  %86 = or disjoint i32 %63, 56, !dbg !18
  %87 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %86, !dbg !18
  %88 = load <2 x bfloat>, ptr addrspace(3) %87, align 4, !dbg !18
  %89 = or disjoint i32 %14, %13, !dbg !19
  %90 = shl i32 %89, 6, !dbg !20
  %91 = sext i32 %90 to i64, !dbg !21
  %92 = getelementptr bfloat, ptr addrspace(1) %5, i64 %91, !dbg !21
  %.idx = shl nsw i64 %47, 12, !dbg !22
  %93 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx, !dbg !22
  %94 = getelementptr bfloat, ptr addrspace(1) %93, i64 %45, !dbg !22
  %.idx18 = shl nsw i64 %48, 12, !dbg !22
  %95 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx18, !dbg !22
  %96 = getelementptr bfloat, ptr addrspace(1) %95, i64 %45, !dbg !22
  %.idx19 = shl nsw i64 %49, 12, !dbg !22
  %97 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx19, !dbg !22
  %98 = getelementptr bfloat, ptr addrspace(1) %97, i64 %45, !dbg !22
  %.idx20 = shl nsw i64 %50, 12, !dbg !22
  %99 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx20, !dbg !22
  %100 = getelementptr bfloat, ptr addrspace(1) %99, i64 %45, !dbg !22
  %.idx21 = shl nsw i64 %51, 12, !dbg !22
  %101 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx21, !dbg !22
  %102 = getelementptr bfloat, ptr addrspace(1) %101, i64 %45, !dbg !22
  %.idx22 = shl nsw i64 %52, 12, !dbg !22
  %103 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx22, !dbg !22
  %104 = getelementptr bfloat, ptr addrspace(1) %103, i64 %45, !dbg !22
  %.idx23 = shl nsw i64 %53, 12, !dbg !22
  %105 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx23, !dbg !22
  %106 = getelementptr bfloat, ptr addrspace(1) %105, i64 %45, !dbg !22
  %.idx24 = shl nsw i64 %54, 12, !dbg !22
  %107 = getelementptr i8, ptr addrspace(1) %92, i64 %.idx24, !dbg !22
  %108 = getelementptr bfloat, ptr addrspace(1) %107, i64 %45, !dbg !22
  %109 = icmp slt i64 %47, %20, !dbg !22
  %110 = icmp slt i64 %48, %20, !dbg !22
  %111 = icmp slt i64 %49, %20, !dbg !22
  %112 = icmp slt i64 %50, %20, !dbg !22
  %113 = icmp slt i64 %51, %20, !dbg !22
  %114 = icmp slt i64 %52, %20, !dbg !22
  %115 = icmp slt i64 %53, %20, !dbg !22
  %116 = icmp slt i64 %54, %20, !dbg !22
  %117 = and i1 %58, %109, !dbg !22
  %118 = and i1 %58, %110, !dbg !22
  %119 = and i1 %58, %111, !dbg !22
  %120 = and i1 %58, %112, !dbg !22
  %121 = and i1 %58, %113, !dbg !22
  %122 = and i1 %58, %114, !dbg !22
  %123 = and i1 %58, %115, !dbg !22
  %124 = and i1 %58, %116, !dbg !22
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %117) #3, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !22
  %127 = bitcast i32 %126 to <2 x bfloat>, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !22
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !22
  %131 = bitcast i32 %130 to <2 x bfloat>, !dbg !22
  %132 = shufflevector <2 x bfloat> %131, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %133 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !22
  %134 = bitcast i32 %133 to <2 x bfloat>, !dbg !22
  %135 = shufflevector <2 x bfloat> %134, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %118) #3, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !22
  %138 = bitcast i32 %137 to <2 x bfloat>, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !22
  %140 = bitcast i32 %139 to <2 x bfloat>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !22
  %142 = bitcast i32 %141 to <2 x bfloat>, !dbg !22
  %143 = shufflevector <2 x bfloat> %142, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %144 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !22
  %145 = bitcast i32 %144 to <2 x bfloat>, !dbg !22
  %146 = shufflevector <2 x bfloat> %145, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %119) #3, !dbg !22
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !22
  %149 = bitcast i32 %148 to <2 x bfloat>, !dbg !22
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !22
  %151 = bitcast i32 %150 to <2 x bfloat>, !dbg !22
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !22
  %153 = bitcast i32 %152 to <2 x bfloat>, !dbg !22
  %154 = shufflevector <2 x bfloat> %153, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %155 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !22
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !22
  %157 = shufflevector <2 x bfloat> %156, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %120) #3, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !22
  %160 = bitcast i32 %159 to <2 x bfloat>, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !22
  %162 = bitcast i32 %161 to <2 x bfloat>, !dbg !22
  %163 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !22
  %164 = bitcast i32 %163 to <2 x bfloat>, !dbg !22
  %165 = shufflevector <2 x bfloat> %164, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %166 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !22
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !22
  %168 = shufflevector <2 x bfloat> %167, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %121) #3, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !22
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !22
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !22
  %175 = bitcast i32 %174 to <2 x bfloat>, !dbg !22
  %176 = shufflevector <2 x bfloat> %175, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %177 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !22
  %178 = bitcast i32 %177 to <2 x bfloat>, !dbg !22
  %179 = shufflevector <2 x bfloat> %178, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %122) #3, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !22
  %182 = bitcast i32 %181 to <2 x bfloat>, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = shufflevector <2 x bfloat> %186, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %188 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !22
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !22
  %190 = shufflevector <2 x bfloat> %189, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %123) #3, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !22
  %193 = bitcast i32 %192 to <2 x bfloat>, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !22
  %195 = bitcast i32 %194 to <2 x bfloat>, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !22
  %197 = bitcast i32 %196 to <2 x bfloat>, !dbg !22
  %198 = shufflevector <2 x bfloat> %197, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %199 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !22
  %200 = bitcast i32 %199 to <2 x bfloat>, !dbg !22
  %201 = shufflevector <2 x bfloat> %200, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %124) #3, !dbg !22
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !22
  %204 = bitcast i32 %203 to <2 x bfloat>, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !22
  %206 = bitcast i32 %205 to <2 x bfloat>, !dbg !22
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !22
  %208 = bitcast i32 %207 to <2 x bfloat>, !dbg !22
  %209 = shufflevector <2 x bfloat> %208, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %210 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !22
  %211 = bitcast i32 %210 to <2 x bfloat>, !dbg !22
  %212 = shufflevector <2 x bfloat> %211, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %213 = xor i32 %34, %22, !dbg !22
  %214 = and i32 %213, 56, !dbg !22
  %215 = shl nuw nsw i32 %24, 6, !dbg !22
  %216 = or disjoint i32 %214, %215, !dbg !22
  %217 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %216, !dbg !22
  %218 = shufflevector <2 x bfloat> %127, <2 x bfloat> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %219 = shufflevector <8 x bfloat> %218, <8 x bfloat> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %220 = shufflevector <8 x bfloat> %219, <8 x bfloat> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %220, ptr addrspace(3) %217, align 16, !dbg !22
  %221 = or disjoint i32 %216, 512, !dbg !22
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %221, !dbg !22
  %223 = shufflevector <2 x bfloat> %138, <2 x bfloat> %140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %224 = shufflevector <8 x bfloat> %223, <8 x bfloat> %143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %225 = shufflevector <8 x bfloat> %224, <8 x bfloat> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %225, ptr addrspace(3) %222, align 16, !dbg !22
  %226 = or disjoint i32 %216, 1024, !dbg !22
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %226, !dbg !22
  %228 = shufflevector <2 x bfloat> %149, <2 x bfloat> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %229 = shufflevector <8 x bfloat> %228, <8 x bfloat> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %230 = shufflevector <8 x bfloat> %229, <8 x bfloat> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %230, ptr addrspace(3) %227, align 16, !dbg !22
  %231 = or disjoint i32 %216, 1536, !dbg !22
  %232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %231, !dbg !22
  %233 = shufflevector <2 x bfloat> %160, <2 x bfloat> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %234 = shufflevector <8 x bfloat> %233, <8 x bfloat> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %235 = shufflevector <8 x bfloat> %234, <8 x bfloat> %168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %235, ptr addrspace(3) %232, align 16, !dbg !22
  %236 = or disjoint i32 %216, 2048, !dbg !22
  %237 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %236, !dbg !22
  %238 = shufflevector <2 x bfloat> %171, <2 x bfloat> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %239 = shufflevector <8 x bfloat> %238, <8 x bfloat> %176, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %240 = shufflevector <8 x bfloat> %239, <8 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %240, ptr addrspace(3) %237, align 16, !dbg !22
  %241 = or disjoint i32 %216, 2560, !dbg !22
  %242 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %241, !dbg !22
  %243 = shufflevector <2 x bfloat> %182, <2 x bfloat> %184, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %244 = shufflevector <8 x bfloat> %243, <8 x bfloat> %187, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %245 = shufflevector <8 x bfloat> %244, <8 x bfloat> %190, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %245, ptr addrspace(3) %242, align 16, !dbg !22
  %246 = or disjoint i32 %216, 3072, !dbg !22
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %246, !dbg !22
  %248 = shufflevector <2 x bfloat> %193, <2 x bfloat> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %249 = shufflevector <8 x bfloat> %248, <8 x bfloat> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %250 = shufflevector <8 x bfloat> %249, <8 x bfloat> %201, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %250, ptr addrspace(3) %247, align 16, !dbg !22
  %251 = or disjoint i32 %216, 3584, !dbg !22
  %252 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %251, !dbg !22
  %253 = shufflevector <2 x bfloat> %204, <2 x bfloat> %206, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %254 = shufflevector <8 x bfloat> %253, <8 x bfloat> %209, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !22
  %255 = shufflevector <8 x bfloat> %254, <8 x bfloat> %212, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !22
  store <8 x bfloat> %255, ptr addrspace(3) %252, align 16, !dbg !22
  %256 = shl i32 %89, 7, !dbg !23
  %257 = sext i32 %256 to i64, !dbg !24
  %258 = getelementptr bfloat, ptr addrspace(1) %1, i64 %257, !dbg !24
  %259 = getelementptr bfloat, ptr addrspace(1) %4, i64 %257, !dbg !25
  %260 = or disjoint i64 %.idx, %45, !dbg !26
  %261 = or disjoint i64 %.idx18, %45, !dbg !26
  %262 = or disjoint i64 %.idx19, %45, !dbg !26
  %263 = or disjoint i64 %.idx20, %45, !dbg !26
  %264 = or disjoint i64 %.idx21, %45, !dbg !26
  %265 = or disjoint i64 %.idx22, %45, !dbg !26
  %266 = or disjoint i64 %.idx23, %45, !dbg !26
  %267 = or disjoint i64 %.idx24, %45, !dbg !26
  %268 = getelementptr bfloat, ptr addrspace(1) %258, i64 %260, !dbg !26
  %269 = getelementptr bfloat, ptr addrspace(1) %258, i64 %261, !dbg !26
  %270 = getelementptr bfloat, ptr addrspace(1) %258, i64 %262, !dbg !26
  %271 = getelementptr bfloat, ptr addrspace(1) %258, i64 %263, !dbg !26
  %272 = getelementptr bfloat, ptr addrspace(1) %258, i64 %264, !dbg !26
  %273 = getelementptr bfloat, ptr addrspace(1) %258, i64 %265, !dbg !26
  %274 = getelementptr bfloat, ptr addrspace(1) %258, i64 %266, !dbg !26
  %275 = getelementptr bfloat, ptr addrspace(1) %258, i64 %267, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %277 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %221, !dbg !26
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %231, !dbg !26
  %280 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %236, !dbg !26
  %281 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %241, !dbg !26
  %282 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %246, !dbg !26
  %283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %251, !dbg !26
  %284 = select i1 %117, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %268, i32 %284) #3, !dbg !26
  %285 = select i1 %118, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %269, i32 %285) #3, !dbg !26
  %286 = select i1 %119, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %270, i32 %286) #3, !dbg !26
  %287 = select i1 %120, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %271, i32 %287) #3, !dbg !26
  %288 = select i1 %121, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %272, i32 %288) #3, !dbg !26
  %289 = select i1 %122, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %273, i32 %289) #3, !dbg !26
  %290 = select i1 %123, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %274, i32 %290) #3, !dbg !26
  %291 = select i1 %124, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %275, i32 %291) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %292 = or disjoint i64 %45, 64, !dbg !26
  %293 = or disjoint i64 %.idx, %292, !dbg !26
  %294 = or disjoint i64 %.idx18, %292, !dbg !26
  %295 = or disjoint i64 %.idx19, %292, !dbg !26
  %296 = or disjoint i64 %.idx20, %292, !dbg !26
  %297 = or disjoint i64 %.idx21, %292, !dbg !26
  %298 = or disjoint i64 %.idx22, %292, !dbg !26
  %299 = or disjoint i64 %.idx23, %292, !dbg !26
  %300 = or disjoint i64 %.idx24, %292, !dbg !26
  %301 = getelementptr bfloat, ptr addrspace(1) %258, i64 %293, !dbg !26
  %302 = getelementptr bfloat, ptr addrspace(1) %258, i64 %294, !dbg !26
  %303 = getelementptr bfloat, ptr addrspace(1) %258, i64 %295, !dbg !26
  %304 = getelementptr bfloat, ptr addrspace(1) %258, i64 %296, !dbg !26
  %305 = getelementptr bfloat, ptr addrspace(1) %258, i64 %297, !dbg !26
  %306 = getelementptr bfloat, ptr addrspace(1) %258, i64 %298, !dbg !26
  %307 = getelementptr bfloat, ptr addrspace(1) %258, i64 %299, !dbg !26
  %308 = getelementptr bfloat, ptr addrspace(1) %258, i64 %300, !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %216, !dbg !26
  %310 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %221, !dbg !26
  %311 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %226, !dbg !26
  %312 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %231, !dbg !26
  %313 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %236, !dbg !26
  %314 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %241, !dbg !26
  %315 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %246, !dbg !26
  %316 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %251, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %309, ptr addrspace(1) %301, i32 %284) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %302, i32 %285) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %303, i32 %286) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %312, ptr addrspace(1) %304, i32 %287) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %313, ptr addrspace(1) %305, i32 %288) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %314, ptr addrspace(1) %306, i32 %289) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %315, ptr addrspace(1) %307, i32 %290) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %316, ptr addrspace(1) %308, i32 %291) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  %317 = and i32 %22, 3
  %318 = mul nuw nsw i32 %317, 72
  %319 = select i1 %33, i32 0, i32 288
  %320 = xor i32 %319, %318
  %321 = shl nuw nsw i32 %22, 6
  %322 = and i32 %321, 512
  %323 = or disjoint i32 %320, %322
  %324 = shl nuw nsw i32 %22, 6
  %325 = and i32 %324, 1536
  %326 = or disjoint i32 %320, %325
  %327 = lshr i32 %22, 2
  %328 = and i32 %327, 8
  %329 = xor i32 %326, %328
  %330 = xor i32 %329, 16
  %331 = xor i32 %329, 2064
  %332 = xor i32 %329, 32
  %333 = xor i32 %329, 2080
  %334 = xor i32 %329, 48
  %335 = xor i32 %329, 2096
  %336 = lshr i32 %22, 1
  %337 = and i32 %336, 8
  %338 = xor i32 %323, %337
  %339 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %338
  %340 = ptrtoint ptr addrspace(3) %339 to i32
  %341 = xor i32 %338, 16
  %342 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %341
  %343 = ptrtoint ptr addrspace(3) %342 to i32
  %344 = xor i32 %338, 32
  %345 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %344
  %346 = ptrtoint ptr addrspace(3) %345 to i32
  %347 = xor i32 %338, 48
  %348 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %347
  %349 = ptrtoint ptr addrspace(3) %348 to i32
  %350 = getelementptr inbounds nuw i8, ptr addrspace(3) %339, i32 2048
  %351 = ptrtoint ptr addrspace(3) %350 to i32
  %352 = xor i32 %338, 1040
  %353 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %352
  %354 = ptrtoint ptr addrspace(3) %353 to i32
  %355 = xor i32 %338, 1056
  %356 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %355
  %357 = ptrtoint ptr addrspace(3) %356 to i32
  %358 = xor i32 %338, 1072
  %359 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %358
  %360 = ptrtoint ptr addrspace(3) %359 to i32
  %361 = getelementptr inbounds nuw i8, ptr addrspace(3) %339, i32 4096
  %362 = ptrtoint ptr addrspace(3) %361 to i32
  %363 = xor i32 %338, 2064
  %364 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %363
  %365 = ptrtoint ptr addrspace(3) %364 to i32
  %366 = xor i32 %338, 2080
  %367 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %366
  %368 = ptrtoint ptr addrspace(3) %367 to i32
  %369 = xor i32 %338, 2096
  %370 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %369
  %371 = ptrtoint ptr addrspace(3) %370 to i32
  %372 = getelementptr inbounds nuw i8, ptr addrspace(3) %339, i32 6144
  %373 = ptrtoint ptr addrspace(3) %372 to i32
  %374 = xor i32 %338, 3088
  %375 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %374
  %376 = ptrtoint ptr addrspace(3) %375 to i32
  %377 = xor i32 %338, 3104
  %378 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %377
  %379 = ptrtoint ptr addrspace(3) %378 to i32
  %380 = xor i32 %338, 3120
  %381 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 18688), i32 %380
  %382 = ptrtoint ptr addrspace(3) %381 to i32
  %383 = shl nuw nsw i32 %22, 4
  %384 = and i32 %383, 448
  %385 = or disjoint i32 %384, %63
  %386 = or disjoint i32 %385, %328
  %387 = and i32 %34, 504
  %388 = lshr exact i32 %384, 2
  %389 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %388
  %390 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %389, i32 %386
  %391 = or disjoint i32 %386, 512
  %392 = lshr i32 %391, 3
  %393 = and i32 %392, 120
  %394 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %393
  %395 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %394, i32 %391
  %396 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 32
  %397 = or disjoint i32 %386, 528
  %398 = lshr i32 %397, 3
  %399 = and i32 %398, 120
  %400 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %399
  %401 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %400, i32 %397
  %402 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 64
  %403 = or disjoint i32 %386, 544
  %404 = lshr i32 %403, 3
  %405 = and i32 %404, 120
  %406 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %405
  %407 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %406, i32 %403
  %408 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 96
  %409 = or disjoint i32 %386, 560
  %410 = lshr i32 %409, 3
  %411 = and i32 %410, 120
  %412 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %411
  %413 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %412, i32 %409
  %414 = and i32 %22, 56
  %415 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %414
  %416 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %415, i32 %387
  %417 = or disjoint i32 %387, 512
  %418 = lshr exact i32 %417, 3
  %419 = and i32 %418, 120
  %420 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16384), i32 %419
  %421 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %420, i32 %417
  br label %422, !dbg !27

422:                                              ; preds = %9, %422
  %423 = phi i1 [ true, %9 ], [ false, %422 ]
  %indvars.iv = phi i64 [ 128, %9 ], [ 192, %422 ]
  %424 = phi i1 [ %117, %9 ], [ false, %422 ]
  %425 = phi i1 [ %118, %9 ], [ false, %422 ]
  %426 = phi i1 [ %119, %9 ], [ false, %422 ]
  %427 = phi i1 [ %120, %9 ], [ false, %422 ]
  %428 = phi i1 [ %121, %9 ], [ false, %422 ]
  %429 = phi i1 [ %122, %9 ], [ false, %422 ]
  %430 = phi i1 [ %123, %9 ], [ false, %422 ]
  %431 = phi i1 [ %124, %9 ], [ false, %422 ]
  %432 = phi i1 [ %117, %9 ], [ %424, %422 ]
  %433 = phi i1 [ %118, %9 ], [ %425, %422 ]
  %434 = phi i1 [ %119, %9 ], [ %426, %422 ]
  %435 = phi i1 [ %120, %9 ], [ %427, %422 ]
  %436 = phi i1 [ %121, %9 ], [ %428, %422 ]
  %437 = phi i1 [ %122, %9 ], [ %429, %422 ]
  %438 = phi i1 [ %123, %9 ], [ %430, %422 ]
  %439 = phi i1 [ %124, %9 ], [ %431, %422 ]
  %440 = phi i64 [ %293, %9 ], [ %1130, %422 ]
  %441 = phi i64 [ %294, %9 ], [ %1131, %422 ]
  %442 = phi i64 [ %295, %9 ], [ %1132, %422 ]
  %443 = phi i64 [ %296, %9 ], [ %1133, %422 ]
  %444 = phi i64 [ %297, %9 ], [ %1134, %422 ]
  %445 = phi i64 [ %298, %9 ], [ %1135, %422 ]
  %446 = phi i64 [ %299, %9 ], [ %1136, %422 ]
  %447 = phi i64 [ %300, %9 ], [ %1137, %422 ]
  %448 = phi i64 [ %260, %9 ], [ %440, %422 ]
  %449 = phi i64 [ %261, %9 ], [ %441, %422 ]
  %450 = phi i64 [ %262, %9 ], [ %442, %422 ]
  %451 = phi i64 [ %263, %9 ], [ %443, %422 ]
  %452 = phi i64 [ %264, %9 ], [ %444, %422 ]
  %453 = phi i64 [ %265, %9 ], [ %445, %422 ]
  %454 = phi i64 [ %266, %9 ], [ %446, %422 ]
  %455 = phi i64 [ %267, %9 ], [ %447, %422 ]
  %456 = phi i32 [ -1, %9 ], [ %460, %422 ]
  %457 = phi i32 [ 1, %9 ], [ %1128, %422 ]
  %458 = add i32 %456, 1, !dbg !27
  %459 = icmp sgt i32 %458, 1, !dbg !27
  %460 = select i1 %459, i32 0, i32 %458, !dbg !27
  tail call void @llvm.nvvm.cp.async.wait.group(i32 1), !dbg !26
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !26
  %.idx139 = shl i32 %460, 13, !dbg !26
  %461 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx139, !dbg !26
  %462 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %329, !dbg !28
  %463 = ptrtoint ptr addrspace(3) %462 to i32, !dbg !28
  %464 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %463) #3, !dbg !28
  %465 = extractvalue { i32, i32, i32, i32 } %464, 0, !dbg !28
  %466 = bitcast i32 %465 to <2 x bfloat>, !dbg !28
  %467 = extractvalue { i32, i32, i32, i32 } %464, 1, !dbg !28
  %468 = bitcast i32 %467 to <2 x bfloat>, !dbg !28
  %469 = extractvalue { i32, i32, i32, i32 } %464, 2, !dbg !28
  %470 = bitcast i32 %469 to <2 x bfloat>, !dbg !28
  %471 = extractvalue { i32, i32, i32, i32 } %464, 3, !dbg !28
  %472 = bitcast i32 %471 to <2 x bfloat>, !dbg !28
  %473 = getelementptr inbounds nuw i8, ptr addrspace(3) %462, i32 4096, !dbg !28
  %474 = ptrtoint ptr addrspace(3) %473 to i32, !dbg !28
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %474) #3, !dbg !28
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !28
  %477 = bitcast i32 %476 to <2 x bfloat>, !dbg !28
  %478 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !28
  %479 = bitcast i32 %478 to <2 x bfloat>, !dbg !28
  %480 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !28
  %481 = bitcast i32 %480 to <2 x bfloat>, !dbg !28
  %482 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !28
  %483 = bitcast i32 %482 to <2 x bfloat>, !dbg !28
  %484 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %330, !dbg !28
  %485 = ptrtoint ptr addrspace(3) %484 to i32, !dbg !28
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %485) #3, !dbg !28
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !28
  %488 = bitcast i32 %487 to <2 x bfloat>, !dbg !28
  %489 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !28
  %490 = bitcast i32 %489 to <2 x bfloat>, !dbg !28
  %491 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !28
  %492 = bitcast i32 %491 to <2 x bfloat>, !dbg !28
  %493 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !28
  %494 = bitcast i32 %493 to <2 x bfloat>, !dbg !28
  %495 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %331, !dbg !28
  %496 = ptrtoint ptr addrspace(3) %495 to i32, !dbg !28
  %497 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %496) #3, !dbg !28
  %498 = extractvalue { i32, i32, i32, i32 } %497, 0, !dbg !28
  %499 = bitcast i32 %498 to <2 x bfloat>, !dbg !28
  %500 = extractvalue { i32, i32, i32, i32 } %497, 1, !dbg !28
  %501 = bitcast i32 %500 to <2 x bfloat>, !dbg !28
  %502 = extractvalue { i32, i32, i32, i32 } %497, 2, !dbg !28
  %503 = bitcast i32 %502 to <2 x bfloat>, !dbg !28
  %504 = extractvalue { i32, i32, i32, i32 } %497, 3, !dbg !28
  %505 = bitcast i32 %504 to <2 x bfloat>, !dbg !28
  %506 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %332, !dbg !28
  %507 = ptrtoint ptr addrspace(3) %506 to i32, !dbg !28
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %507) #3, !dbg !28
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !28
  %510 = bitcast i32 %509 to <2 x bfloat>, !dbg !28
  %511 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !28
  %512 = bitcast i32 %511 to <2 x bfloat>, !dbg !28
  %513 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !28
  %514 = bitcast i32 %513 to <2 x bfloat>, !dbg !28
  %515 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !28
  %516 = bitcast i32 %515 to <2 x bfloat>, !dbg !28
  %517 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %333, !dbg !28
  %518 = ptrtoint ptr addrspace(3) %517 to i32, !dbg !28
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %518) #3, !dbg !28
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !28
  %521 = bitcast i32 %520 to <2 x bfloat>, !dbg !28
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !28
  %523 = bitcast i32 %522 to <2 x bfloat>, !dbg !28
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !28
  %525 = bitcast i32 %524 to <2 x bfloat>, !dbg !28
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !28
  %527 = bitcast i32 %526 to <2 x bfloat>, !dbg !28
  %528 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %334, !dbg !28
  %529 = ptrtoint ptr addrspace(3) %528 to i32, !dbg !28
  %530 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %529) #3, !dbg !28
  %531 = extractvalue { i32, i32, i32, i32 } %530, 0, !dbg !28
  %532 = bitcast i32 %531 to <2 x bfloat>, !dbg !28
  %533 = extractvalue { i32, i32, i32, i32 } %530, 1, !dbg !28
  %534 = bitcast i32 %533 to <2 x bfloat>, !dbg !28
  %535 = extractvalue { i32, i32, i32, i32 } %530, 2, !dbg !28
  %536 = bitcast i32 %535 to <2 x bfloat>, !dbg !28
  %537 = extractvalue { i32, i32, i32, i32 } %530, 3, !dbg !28
  %538 = bitcast i32 %537 to <2 x bfloat>, !dbg !28
  %539 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %461, i32 %335, !dbg !28
  %540 = ptrtoint ptr addrspace(3) %539 to i32, !dbg !28
  %541 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %540) #3, !dbg !28
  %542 = extractvalue { i32, i32, i32, i32 } %541, 0, !dbg !28
  %543 = bitcast i32 %542 to <2 x bfloat>, !dbg !28
  %544 = extractvalue { i32, i32, i32, i32 } %541, 1, !dbg !28
  %545 = bitcast i32 %544 to <2 x bfloat>, !dbg !28
  %546 = extractvalue { i32, i32, i32, i32 } %541, 2, !dbg !28
  %547 = bitcast i32 %546 to <2 x bfloat>, !dbg !28
  %548 = extractvalue { i32, i32, i32, i32 } %541, 3, !dbg !28
  %549 = bitcast i32 %548 to <2 x bfloat>, !dbg !28
  %550 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %340) #3, !dbg !22
  %551 = extractvalue { i32, i32, i32, i32 } %550, 0, !dbg !22
  %552 = extractvalue { i32, i32, i32, i32 } %550, 1, !dbg !22
  %553 = extractvalue { i32, i32, i32, i32 } %550, 2, !dbg !22
  %554 = extractvalue { i32, i32, i32, i32 } %550, 3, !dbg !22
  %555 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %343) #3, !dbg !22
  %556 = extractvalue { i32, i32, i32, i32 } %555, 0, !dbg !22
  %557 = extractvalue { i32, i32, i32, i32 } %555, 1, !dbg !22
  %558 = extractvalue { i32, i32, i32, i32 } %555, 2, !dbg !22
  %559 = extractvalue { i32, i32, i32, i32 } %555, 3, !dbg !22
  %560 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #3, !dbg !22
  %561 = extractvalue { i32, i32, i32, i32 } %560, 0, !dbg !22
  %562 = extractvalue { i32, i32, i32, i32 } %560, 1, !dbg !22
  %563 = extractvalue { i32, i32, i32, i32 } %560, 2, !dbg !22
  %564 = extractvalue { i32, i32, i32, i32 } %560, 3, !dbg !22
  %565 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %349) #3, !dbg !22
  %566 = extractvalue { i32, i32, i32, i32 } %565, 0, !dbg !22
  %567 = extractvalue { i32, i32, i32, i32 } %565, 1, !dbg !22
  %568 = extractvalue { i32, i32, i32, i32 } %565, 2, !dbg !22
  %569 = extractvalue { i32, i32, i32, i32 } %565, 3, !dbg !22
  %570 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #3, !dbg !22
  %571 = extractvalue { i32, i32, i32, i32 } %570, 0, !dbg !22
  %572 = extractvalue { i32, i32, i32, i32 } %570, 1, !dbg !22
  %573 = extractvalue { i32, i32, i32, i32 } %570, 2, !dbg !22
  %574 = extractvalue { i32, i32, i32, i32 } %570, 3, !dbg !22
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %354) #3, !dbg !22
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !22
  %577 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !22
  %578 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !22
  %579 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !22
  %580 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %357) #3, !dbg !22
  %581 = extractvalue { i32, i32, i32, i32 } %580, 0, !dbg !22
  %582 = extractvalue { i32, i32, i32, i32 } %580, 1, !dbg !22
  %583 = extractvalue { i32, i32, i32, i32 } %580, 2, !dbg !22
  %584 = extractvalue { i32, i32, i32, i32 } %580, 3, !dbg !22
  %585 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %360) #3, !dbg !22
  %586 = extractvalue { i32, i32, i32, i32 } %585, 0, !dbg !22
  %587 = extractvalue { i32, i32, i32, i32 } %585, 1, !dbg !22
  %588 = extractvalue { i32, i32, i32, i32 } %585, 2, !dbg !22
  %589 = extractvalue { i32, i32, i32, i32 } %585, 3, !dbg !22
  %590 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %362) #3, !dbg !22
  %591 = extractvalue { i32, i32, i32, i32 } %590, 0, !dbg !22
  %592 = extractvalue { i32, i32, i32, i32 } %590, 1, !dbg !22
  %593 = extractvalue { i32, i32, i32, i32 } %590, 2, !dbg !22
  %594 = extractvalue { i32, i32, i32, i32 } %590, 3, !dbg !22
  %595 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #3, !dbg !22
  %596 = extractvalue { i32, i32, i32, i32 } %595, 0, !dbg !22
  %597 = extractvalue { i32, i32, i32, i32 } %595, 1, !dbg !22
  %598 = extractvalue { i32, i32, i32, i32 } %595, 2, !dbg !22
  %599 = extractvalue { i32, i32, i32, i32 } %595, 3, !dbg !22
  %600 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #3, !dbg !22
  %601 = extractvalue { i32, i32, i32, i32 } %600, 0, !dbg !22
  %602 = extractvalue { i32, i32, i32, i32 } %600, 1, !dbg !22
  %603 = extractvalue { i32, i32, i32, i32 } %600, 2, !dbg !22
  %604 = extractvalue { i32, i32, i32, i32 } %600, 3, !dbg !22
  %605 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #3, !dbg !22
  %606 = extractvalue { i32, i32, i32, i32 } %605, 0, !dbg !22
  %607 = extractvalue { i32, i32, i32, i32 } %605, 1, !dbg !22
  %608 = extractvalue { i32, i32, i32, i32 } %605, 2, !dbg !22
  %609 = extractvalue { i32, i32, i32, i32 } %605, 3, !dbg !22
  %610 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %373) #3, !dbg !22
  %611 = extractvalue { i32, i32, i32, i32 } %610, 0, !dbg !22
  %612 = extractvalue { i32, i32, i32, i32 } %610, 1, !dbg !22
  %613 = extractvalue { i32, i32, i32, i32 } %610, 2, !dbg !22
  %614 = extractvalue { i32, i32, i32, i32 } %610, 3, !dbg !22
  %615 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #3, !dbg !22
  %616 = extractvalue { i32, i32, i32, i32 } %615, 0, !dbg !22
  %617 = extractvalue { i32, i32, i32, i32 } %615, 1, !dbg !22
  %618 = extractvalue { i32, i32, i32, i32 } %615, 2, !dbg !22
  %619 = extractvalue { i32, i32, i32, i32 } %615, 3, !dbg !22
  %620 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #3, !dbg !22
  %621 = extractvalue { i32, i32, i32, i32 } %620, 0, !dbg !22
  %622 = extractvalue { i32, i32, i32, i32 } %620, 1, !dbg !22
  %623 = extractvalue { i32, i32, i32, i32 } %620, 2, !dbg !22
  %624 = extractvalue { i32, i32, i32, i32 } %620, 3, !dbg !22
  %625 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #3, !dbg !22
  %626 = extractvalue { i32, i32, i32, i32 } %625, 0, !dbg !22
  %627 = extractvalue { i32, i32, i32, i32 } %625, 1, !dbg !22
  %628 = extractvalue { i32, i32, i32, i32 } %625, 2, !dbg !22
  %629 = extractvalue { i32, i32, i32, i32 } %625, 3, !dbg !22
  %630 = fmul <2 x bfloat> %67, %466, !dbg !29
  %631 = bitcast <2 x bfloat> %630 to i32, !dbg !29
  %632 = fmul <2 x bfloat> %70, %468, !dbg !29
  %633 = bitcast <2 x bfloat> %632 to i32, !dbg !29
  %634 = fmul <2 x bfloat> %73, %470, !dbg !29
  %635 = bitcast <2 x bfloat> %634 to i32, !dbg !29
  %636 = fmul <2 x bfloat> %76, %472, !dbg !29
  %637 = bitcast <2 x bfloat> %636 to i32, !dbg !29
  %638 = fmul <2 x bfloat> %79, %477, !dbg !29
  %639 = bitcast <2 x bfloat> %638 to i32, !dbg !29
  %640 = fmul <2 x bfloat> %82, %479, !dbg !29
  %641 = bitcast <2 x bfloat> %640 to i32, !dbg !29
  %642 = fmul <2 x bfloat> %85, %481, !dbg !29
  %643 = bitcast <2 x bfloat> %642 to i32, !dbg !29
  %644 = fmul <2 x bfloat> %88, %483, !dbg !29
  %645 = bitcast <2 x bfloat> %644 to i32, !dbg !29
  %646 = fmul <2 x bfloat> %67, %488, !dbg !29
  %647 = bitcast <2 x bfloat> %646 to i32, !dbg !29
  %648 = fmul <2 x bfloat> %70, %490, !dbg !29
  %649 = bitcast <2 x bfloat> %648 to i32, !dbg !29
  %650 = fmul <2 x bfloat> %73, %492, !dbg !29
  %651 = bitcast <2 x bfloat> %650 to i32, !dbg !29
  %652 = fmul <2 x bfloat> %76, %494, !dbg !29
  %653 = bitcast <2 x bfloat> %652 to i32, !dbg !29
  %654 = fmul <2 x bfloat> %79, %499, !dbg !29
  %655 = bitcast <2 x bfloat> %654 to i32, !dbg !29
  %656 = fmul <2 x bfloat> %82, %501, !dbg !29
  %657 = bitcast <2 x bfloat> %656 to i32, !dbg !29
  %658 = fmul <2 x bfloat> %85, %503, !dbg !29
  %659 = bitcast <2 x bfloat> %658 to i32, !dbg !29
  %660 = fmul <2 x bfloat> %88, %505, !dbg !29
  %661 = bitcast <2 x bfloat> %660 to i32, !dbg !29
  %662 = fmul <2 x bfloat> %67, %510, !dbg !29
  %663 = bitcast <2 x bfloat> %662 to i32, !dbg !29
  %664 = fmul <2 x bfloat> %70, %512, !dbg !29
  %665 = bitcast <2 x bfloat> %664 to i32, !dbg !29
  %666 = fmul <2 x bfloat> %73, %514, !dbg !29
  %667 = bitcast <2 x bfloat> %666 to i32, !dbg !29
  %668 = fmul <2 x bfloat> %76, %516, !dbg !29
  %669 = bitcast <2 x bfloat> %668 to i32, !dbg !29
  %670 = fmul <2 x bfloat> %79, %521, !dbg !29
  %671 = bitcast <2 x bfloat> %670 to i32, !dbg !29
  %672 = fmul <2 x bfloat> %82, %523, !dbg !29
  %673 = bitcast <2 x bfloat> %672 to i32, !dbg !29
  %674 = fmul <2 x bfloat> %85, %525, !dbg !29
  %675 = bitcast <2 x bfloat> %674 to i32, !dbg !29
  %676 = fmul <2 x bfloat> %88, %527, !dbg !29
  %677 = bitcast <2 x bfloat> %676 to i32, !dbg !29
  %678 = fmul <2 x bfloat> %67, %532, !dbg !29
  %679 = bitcast <2 x bfloat> %678 to i32, !dbg !29
  %680 = fmul <2 x bfloat> %70, %534, !dbg !29
  %681 = bitcast <2 x bfloat> %680 to i32, !dbg !29
  %682 = fmul <2 x bfloat> %73, %536, !dbg !29
  %683 = bitcast <2 x bfloat> %682 to i32, !dbg !29
  %684 = fmul <2 x bfloat> %76, %538, !dbg !29
  %685 = bitcast <2 x bfloat> %684 to i32, !dbg !29
  %686 = fmul <2 x bfloat> %79, %543, !dbg !29
  %687 = bitcast <2 x bfloat> %686 to i32, !dbg !29
  %688 = fmul <2 x bfloat> %82, %545, !dbg !29
  %689 = bitcast <2 x bfloat> %688 to i32, !dbg !29
  %690 = fmul <2 x bfloat> %85, %547, !dbg !29
  %691 = bitcast <2 x bfloat> %690 to i32, !dbg !29
  %692 = fmul <2 x bfloat> %88, %549, !dbg !29
  %693 = bitcast <2 x bfloat> %692 to i32, !dbg !29
  %694 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %551, i32 %552, i32 %553, i32 %554, i32 %631, i32 %633) #3, !dbg !29
  %695 = extractvalue { float, float, float, float } %694, 0, !dbg !29
  %696 = extractvalue { float, float, float, float } %694, 1, !dbg !29
  %697 = extractvalue { float, float, float, float } %694, 2, !dbg !29
  %698 = extractvalue { float, float, float, float } %694, 3, !dbg !29
  %699 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %551, i32 %552, i32 %553, i32 %554, i32 %647, i32 %649) #3, !dbg !29
  %700 = extractvalue { float, float, float, float } %699, 0, !dbg !29
  %701 = extractvalue { float, float, float, float } %699, 1, !dbg !29
  %702 = extractvalue { float, float, float, float } %699, 2, !dbg !29
  %703 = extractvalue { float, float, float, float } %699, 3, !dbg !29
  %704 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %551, i32 %552, i32 %553, i32 %554, i32 %663, i32 %665) #3, !dbg !29
  %705 = extractvalue { float, float, float, float } %704, 0, !dbg !29
  %706 = extractvalue { float, float, float, float } %704, 1, !dbg !29
  %707 = extractvalue { float, float, float, float } %704, 2, !dbg !29
  %708 = extractvalue { float, float, float, float } %704, 3, !dbg !29
  %709 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %551, i32 %552, i32 %553, i32 %554, i32 %679, i32 %681) #3, !dbg !29
  %710 = extractvalue { float, float, float, float } %709, 0, !dbg !29
  %711 = extractvalue { float, float, float, float } %709, 1, !dbg !29
  %712 = extractvalue { float, float, float, float } %709, 2, !dbg !29
  %713 = extractvalue { float, float, float, float } %709, 3, !dbg !29
  %714 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %571, i32 %572, i32 %573, i32 %574, i32 %631, i32 %633) #3, !dbg !29
  %715 = extractvalue { float, float, float, float } %714, 0, !dbg !29
  %716 = extractvalue { float, float, float, float } %714, 1, !dbg !29
  %717 = extractvalue { float, float, float, float } %714, 2, !dbg !29
  %718 = extractvalue { float, float, float, float } %714, 3, !dbg !29
  %719 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %571, i32 %572, i32 %573, i32 %574, i32 %647, i32 %649) #3, !dbg !29
  %720 = extractvalue { float, float, float, float } %719, 0, !dbg !29
  %721 = extractvalue { float, float, float, float } %719, 1, !dbg !29
  %722 = extractvalue { float, float, float, float } %719, 2, !dbg !29
  %723 = extractvalue { float, float, float, float } %719, 3, !dbg !29
  %724 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %571, i32 %572, i32 %573, i32 %574, i32 %663, i32 %665) #3, !dbg !29
  %725 = extractvalue { float, float, float, float } %724, 0, !dbg !29
  %726 = extractvalue { float, float, float, float } %724, 1, !dbg !29
  %727 = extractvalue { float, float, float, float } %724, 2, !dbg !29
  %728 = extractvalue { float, float, float, float } %724, 3, !dbg !29
  %729 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %571, i32 %572, i32 %573, i32 %574, i32 %679, i32 %681) #3, !dbg !29
  %730 = extractvalue { float, float, float, float } %729, 0, !dbg !29
  %731 = extractvalue { float, float, float, float } %729, 1, !dbg !29
  %732 = extractvalue { float, float, float, float } %729, 2, !dbg !29
  %733 = extractvalue { float, float, float, float } %729, 3, !dbg !29
  %734 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %591, i32 %592, i32 %593, i32 %594, i32 %631, i32 %633) #3, !dbg !29
  %735 = extractvalue { float, float, float, float } %734, 0, !dbg !29
  %736 = extractvalue { float, float, float, float } %734, 1, !dbg !29
  %737 = extractvalue { float, float, float, float } %734, 2, !dbg !29
  %738 = extractvalue { float, float, float, float } %734, 3, !dbg !29
  %739 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %591, i32 %592, i32 %593, i32 %594, i32 %647, i32 %649) #3, !dbg !29
  %740 = extractvalue { float, float, float, float } %739, 0, !dbg !29
  %741 = extractvalue { float, float, float, float } %739, 1, !dbg !29
  %742 = extractvalue { float, float, float, float } %739, 2, !dbg !29
  %743 = extractvalue { float, float, float, float } %739, 3, !dbg !29
  %744 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %591, i32 %592, i32 %593, i32 %594, i32 %663, i32 %665) #3, !dbg !29
  %745 = extractvalue { float, float, float, float } %744, 0, !dbg !29
  %746 = extractvalue { float, float, float, float } %744, 1, !dbg !29
  %747 = extractvalue { float, float, float, float } %744, 2, !dbg !29
  %748 = extractvalue { float, float, float, float } %744, 3, !dbg !29
  %749 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %591, i32 %592, i32 %593, i32 %594, i32 %679, i32 %681) #3, !dbg !29
  %750 = extractvalue { float, float, float, float } %749, 0, !dbg !29
  %751 = extractvalue { float, float, float, float } %749, 1, !dbg !29
  %752 = extractvalue { float, float, float, float } %749, 2, !dbg !29
  %753 = extractvalue { float, float, float, float } %749, 3, !dbg !29
  %754 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %611, i32 %612, i32 %613, i32 %614, i32 %631, i32 %633) #3, !dbg !29
  %755 = extractvalue { float, float, float, float } %754, 0, !dbg !29
  %756 = extractvalue { float, float, float, float } %754, 1, !dbg !29
  %757 = extractvalue { float, float, float, float } %754, 2, !dbg !29
  %758 = extractvalue { float, float, float, float } %754, 3, !dbg !29
  %759 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %611, i32 %612, i32 %613, i32 %614, i32 %647, i32 %649) #3, !dbg !29
  %760 = extractvalue { float, float, float, float } %759, 0, !dbg !29
  %761 = extractvalue { float, float, float, float } %759, 1, !dbg !29
  %762 = extractvalue { float, float, float, float } %759, 2, !dbg !29
  %763 = extractvalue { float, float, float, float } %759, 3, !dbg !29
  %764 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %611, i32 %612, i32 %613, i32 %614, i32 %663, i32 %665) #3, !dbg !29
  %765 = extractvalue { float, float, float, float } %764, 0, !dbg !29
  %766 = extractvalue { float, float, float, float } %764, 1, !dbg !29
  %767 = extractvalue { float, float, float, float } %764, 2, !dbg !29
  %768 = extractvalue { float, float, float, float } %764, 3, !dbg !29
  %769 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %611, i32 %612, i32 %613, i32 %614, i32 %679, i32 %681) #3, !dbg !29
  %770 = extractvalue { float, float, float, float } %769, 0, !dbg !29
  %771 = extractvalue { float, float, float, float } %769, 1, !dbg !29
  %772 = extractvalue { float, float, float, float } %769, 2, !dbg !29
  %773 = extractvalue { float, float, float, float } %769, 3, !dbg !29
  %774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %695, float %696, float %697, float %698, i32 %556, i32 %557, i32 %558, i32 %559, i32 %635, i32 %637) #3, !dbg !29
  %775 = extractvalue { float, float, float, float } %774, 0, !dbg !29
  %776 = extractvalue { float, float, float, float } %774, 1, !dbg !29
  %777 = extractvalue { float, float, float, float } %774, 2, !dbg !29
  %778 = extractvalue { float, float, float, float } %774, 3, !dbg !29
  %779 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %700, float %701, float %702, float %703, i32 %556, i32 %557, i32 %558, i32 %559, i32 %651, i32 %653) #3, !dbg !29
  %780 = extractvalue { float, float, float, float } %779, 0, !dbg !29
  %781 = extractvalue { float, float, float, float } %779, 1, !dbg !29
  %782 = extractvalue { float, float, float, float } %779, 2, !dbg !29
  %783 = extractvalue { float, float, float, float } %779, 3, !dbg !29
  %784 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %705, float %706, float %707, float %708, i32 %556, i32 %557, i32 %558, i32 %559, i32 %667, i32 %669) #3, !dbg !29
  %785 = extractvalue { float, float, float, float } %784, 0, !dbg !29
  %786 = extractvalue { float, float, float, float } %784, 1, !dbg !29
  %787 = extractvalue { float, float, float, float } %784, 2, !dbg !29
  %788 = extractvalue { float, float, float, float } %784, 3, !dbg !29
  %789 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %710, float %711, float %712, float %713, i32 %556, i32 %557, i32 %558, i32 %559, i32 %683, i32 %685) #3, !dbg !29
  %790 = extractvalue { float, float, float, float } %789, 0, !dbg !29
  %791 = extractvalue { float, float, float, float } %789, 1, !dbg !29
  %792 = extractvalue { float, float, float, float } %789, 2, !dbg !29
  %793 = extractvalue { float, float, float, float } %789, 3, !dbg !29
  %794 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %715, float %716, float %717, float %718, i32 %576, i32 %577, i32 %578, i32 %579, i32 %635, i32 %637) #3, !dbg !29
  %795 = extractvalue { float, float, float, float } %794, 0, !dbg !29
  %796 = extractvalue { float, float, float, float } %794, 1, !dbg !29
  %797 = extractvalue { float, float, float, float } %794, 2, !dbg !29
  %798 = extractvalue { float, float, float, float } %794, 3, !dbg !29
  %799 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %720, float %721, float %722, float %723, i32 %576, i32 %577, i32 %578, i32 %579, i32 %651, i32 %653) #3, !dbg !29
  %800 = extractvalue { float, float, float, float } %799, 0, !dbg !29
  %801 = extractvalue { float, float, float, float } %799, 1, !dbg !29
  %802 = extractvalue { float, float, float, float } %799, 2, !dbg !29
  %803 = extractvalue { float, float, float, float } %799, 3, !dbg !29
  %804 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %725, float %726, float %727, float %728, i32 %576, i32 %577, i32 %578, i32 %579, i32 %667, i32 %669) #3, !dbg !29
  %805 = extractvalue { float, float, float, float } %804, 0, !dbg !29
  %806 = extractvalue { float, float, float, float } %804, 1, !dbg !29
  %807 = extractvalue { float, float, float, float } %804, 2, !dbg !29
  %808 = extractvalue { float, float, float, float } %804, 3, !dbg !29
  %809 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %730, float %731, float %732, float %733, i32 %576, i32 %577, i32 %578, i32 %579, i32 %683, i32 %685) #3, !dbg !29
  %810 = extractvalue { float, float, float, float } %809, 0, !dbg !29
  %811 = extractvalue { float, float, float, float } %809, 1, !dbg !29
  %812 = extractvalue { float, float, float, float } %809, 2, !dbg !29
  %813 = extractvalue { float, float, float, float } %809, 3, !dbg !29
  %814 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %735, float %736, float %737, float %738, i32 %596, i32 %597, i32 %598, i32 %599, i32 %635, i32 %637) #3, !dbg !29
  %815 = extractvalue { float, float, float, float } %814, 0, !dbg !29
  %816 = extractvalue { float, float, float, float } %814, 1, !dbg !29
  %817 = extractvalue { float, float, float, float } %814, 2, !dbg !29
  %818 = extractvalue { float, float, float, float } %814, 3, !dbg !29
  %819 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %740, float %741, float %742, float %743, i32 %596, i32 %597, i32 %598, i32 %599, i32 %651, i32 %653) #3, !dbg !29
  %820 = extractvalue { float, float, float, float } %819, 0, !dbg !29
  %821 = extractvalue { float, float, float, float } %819, 1, !dbg !29
  %822 = extractvalue { float, float, float, float } %819, 2, !dbg !29
  %823 = extractvalue { float, float, float, float } %819, 3, !dbg !29
  %824 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %745, float %746, float %747, float %748, i32 %596, i32 %597, i32 %598, i32 %599, i32 %667, i32 %669) #3, !dbg !29
  %825 = extractvalue { float, float, float, float } %824, 0, !dbg !29
  %826 = extractvalue { float, float, float, float } %824, 1, !dbg !29
  %827 = extractvalue { float, float, float, float } %824, 2, !dbg !29
  %828 = extractvalue { float, float, float, float } %824, 3, !dbg !29
  %829 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %750, float %751, float %752, float %753, i32 %596, i32 %597, i32 %598, i32 %599, i32 %683, i32 %685) #3, !dbg !29
  %830 = extractvalue { float, float, float, float } %829, 0, !dbg !29
  %831 = extractvalue { float, float, float, float } %829, 1, !dbg !29
  %832 = extractvalue { float, float, float, float } %829, 2, !dbg !29
  %833 = extractvalue { float, float, float, float } %829, 3, !dbg !29
  %834 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %755, float %756, float %757, float %758, i32 %616, i32 %617, i32 %618, i32 %619, i32 %635, i32 %637) #3, !dbg !29
  %835 = extractvalue { float, float, float, float } %834, 0, !dbg !29
  %836 = extractvalue { float, float, float, float } %834, 1, !dbg !29
  %837 = extractvalue { float, float, float, float } %834, 2, !dbg !29
  %838 = extractvalue { float, float, float, float } %834, 3, !dbg !29
  %839 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %760, float %761, float %762, float %763, i32 %616, i32 %617, i32 %618, i32 %619, i32 %651, i32 %653) #3, !dbg !29
  %840 = extractvalue { float, float, float, float } %839, 0, !dbg !29
  %841 = extractvalue { float, float, float, float } %839, 1, !dbg !29
  %842 = extractvalue { float, float, float, float } %839, 2, !dbg !29
  %843 = extractvalue { float, float, float, float } %839, 3, !dbg !29
  %844 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %765, float %766, float %767, float %768, i32 %616, i32 %617, i32 %618, i32 %619, i32 %667, i32 %669) #3, !dbg !29
  %845 = extractvalue { float, float, float, float } %844, 0, !dbg !29
  %846 = extractvalue { float, float, float, float } %844, 1, !dbg !29
  %847 = extractvalue { float, float, float, float } %844, 2, !dbg !29
  %848 = extractvalue { float, float, float, float } %844, 3, !dbg !29
  %849 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %770, float %771, float %772, float %773, i32 %616, i32 %617, i32 %618, i32 %619, i32 %683, i32 %685) #3, !dbg !29
  %850 = extractvalue { float, float, float, float } %849, 0, !dbg !29
  %851 = extractvalue { float, float, float, float } %849, 1, !dbg !29
  %852 = extractvalue { float, float, float, float } %849, 2, !dbg !29
  %853 = extractvalue { float, float, float, float } %849, 3, !dbg !29
  %854 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %775, float %776, float %777, float %778, i32 %561, i32 %562, i32 %563, i32 %564, i32 %639, i32 %641) #3, !dbg !29
  %855 = extractvalue { float, float, float, float } %854, 0, !dbg !29
  %856 = extractvalue { float, float, float, float } %854, 1, !dbg !29
  %857 = extractvalue { float, float, float, float } %854, 2, !dbg !29
  %858 = extractvalue { float, float, float, float } %854, 3, !dbg !29
  %859 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %780, float %781, float %782, float %783, i32 %561, i32 %562, i32 %563, i32 %564, i32 %655, i32 %657) #3, !dbg !29
  %860 = extractvalue { float, float, float, float } %859, 0, !dbg !29
  %861 = extractvalue { float, float, float, float } %859, 1, !dbg !29
  %862 = extractvalue { float, float, float, float } %859, 2, !dbg !29
  %863 = extractvalue { float, float, float, float } %859, 3, !dbg !29
  %864 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %785, float %786, float %787, float %788, i32 %561, i32 %562, i32 %563, i32 %564, i32 %671, i32 %673) #3, !dbg !29
  %865 = extractvalue { float, float, float, float } %864, 0, !dbg !29
  %866 = extractvalue { float, float, float, float } %864, 1, !dbg !29
  %867 = extractvalue { float, float, float, float } %864, 2, !dbg !29
  %868 = extractvalue { float, float, float, float } %864, 3, !dbg !29
  %869 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %790, float %791, float %792, float %793, i32 %561, i32 %562, i32 %563, i32 %564, i32 %687, i32 %689) #3, !dbg !29
  %870 = extractvalue { float, float, float, float } %869, 0, !dbg !29
  %871 = extractvalue { float, float, float, float } %869, 1, !dbg !29
  %872 = extractvalue { float, float, float, float } %869, 2, !dbg !29
  %873 = extractvalue { float, float, float, float } %869, 3, !dbg !29
  %874 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %795, float %796, float %797, float %798, i32 %581, i32 %582, i32 %583, i32 %584, i32 %639, i32 %641) #3, !dbg !29
  %875 = extractvalue { float, float, float, float } %874, 0, !dbg !29
  %876 = extractvalue { float, float, float, float } %874, 1, !dbg !29
  %877 = extractvalue { float, float, float, float } %874, 2, !dbg !29
  %878 = extractvalue { float, float, float, float } %874, 3, !dbg !29
  %879 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %800, float %801, float %802, float %803, i32 %581, i32 %582, i32 %583, i32 %584, i32 %655, i32 %657) #3, !dbg !29
  %880 = extractvalue { float, float, float, float } %879, 0, !dbg !29
  %881 = extractvalue { float, float, float, float } %879, 1, !dbg !29
  %882 = extractvalue { float, float, float, float } %879, 2, !dbg !29
  %883 = extractvalue { float, float, float, float } %879, 3, !dbg !29
  %884 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %805, float %806, float %807, float %808, i32 %581, i32 %582, i32 %583, i32 %584, i32 %671, i32 %673) #3, !dbg !29
  %885 = extractvalue { float, float, float, float } %884, 0, !dbg !29
  %886 = extractvalue { float, float, float, float } %884, 1, !dbg !29
  %887 = extractvalue { float, float, float, float } %884, 2, !dbg !29
  %888 = extractvalue { float, float, float, float } %884, 3, !dbg !29
  %889 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %810, float %811, float %812, float %813, i32 %581, i32 %582, i32 %583, i32 %584, i32 %687, i32 %689) #3, !dbg !29
  %890 = extractvalue { float, float, float, float } %889, 0, !dbg !29
  %891 = extractvalue { float, float, float, float } %889, 1, !dbg !29
  %892 = extractvalue { float, float, float, float } %889, 2, !dbg !29
  %893 = extractvalue { float, float, float, float } %889, 3, !dbg !29
  %894 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %815, float %816, float %817, float %818, i32 %601, i32 %602, i32 %603, i32 %604, i32 %639, i32 %641) #3, !dbg !29
  %895 = extractvalue { float, float, float, float } %894, 0, !dbg !29
  %896 = extractvalue { float, float, float, float } %894, 1, !dbg !29
  %897 = extractvalue { float, float, float, float } %894, 2, !dbg !29
  %898 = extractvalue { float, float, float, float } %894, 3, !dbg !29
  %899 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %820, float %821, float %822, float %823, i32 %601, i32 %602, i32 %603, i32 %604, i32 %655, i32 %657) #3, !dbg !29
  %900 = extractvalue { float, float, float, float } %899, 0, !dbg !29
  %901 = extractvalue { float, float, float, float } %899, 1, !dbg !29
  %902 = extractvalue { float, float, float, float } %899, 2, !dbg !29
  %903 = extractvalue { float, float, float, float } %899, 3, !dbg !29
  %904 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %825, float %826, float %827, float %828, i32 %601, i32 %602, i32 %603, i32 %604, i32 %671, i32 %673) #3, !dbg !29
  %905 = extractvalue { float, float, float, float } %904, 0, !dbg !29
  %906 = extractvalue { float, float, float, float } %904, 1, !dbg !29
  %907 = extractvalue { float, float, float, float } %904, 2, !dbg !29
  %908 = extractvalue { float, float, float, float } %904, 3, !dbg !29
  %909 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %830, float %831, float %832, float %833, i32 %601, i32 %602, i32 %603, i32 %604, i32 %687, i32 %689) #3, !dbg !29
  %910 = extractvalue { float, float, float, float } %909, 0, !dbg !29
  %911 = extractvalue { float, float, float, float } %909, 1, !dbg !29
  %912 = extractvalue { float, float, float, float } %909, 2, !dbg !29
  %913 = extractvalue { float, float, float, float } %909, 3, !dbg !29
  %914 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %835, float %836, float %837, float %838, i32 %621, i32 %622, i32 %623, i32 %624, i32 %639, i32 %641) #3, !dbg !29
  %915 = extractvalue { float, float, float, float } %914, 0, !dbg !29
  %916 = extractvalue { float, float, float, float } %914, 1, !dbg !29
  %917 = extractvalue { float, float, float, float } %914, 2, !dbg !29
  %918 = extractvalue { float, float, float, float } %914, 3, !dbg !29
  %919 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %840, float %841, float %842, float %843, i32 %621, i32 %622, i32 %623, i32 %624, i32 %655, i32 %657) #3, !dbg !29
  %920 = extractvalue { float, float, float, float } %919, 0, !dbg !29
  %921 = extractvalue { float, float, float, float } %919, 1, !dbg !29
  %922 = extractvalue { float, float, float, float } %919, 2, !dbg !29
  %923 = extractvalue { float, float, float, float } %919, 3, !dbg !29
  %924 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %845, float %846, float %847, float %848, i32 %621, i32 %622, i32 %623, i32 %624, i32 %671, i32 %673) #3, !dbg !29
  %925 = extractvalue { float, float, float, float } %924, 0, !dbg !29
  %926 = extractvalue { float, float, float, float } %924, 1, !dbg !29
  %927 = extractvalue { float, float, float, float } %924, 2, !dbg !29
  %928 = extractvalue { float, float, float, float } %924, 3, !dbg !29
  %929 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %850, float %851, float %852, float %853, i32 %621, i32 %622, i32 %623, i32 %624, i32 %687, i32 %689) #3, !dbg !29
  %930 = extractvalue { float, float, float, float } %929, 0, !dbg !29
  %931 = extractvalue { float, float, float, float } %929, 1, !dbg !29
  %932 = extractvalue { float, float, float, float } %929, 2, !dbg !29
  %933 = extractvalue { float, float, float, float } %929, 3, !dbg !29
  %934 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %855, float %856, float %857, float %858, i32 %566, i32 %567, i32 %568, i32 %569, i32 %643, i32 %645) #3, !dbg !29
  %935 = extractvalue { float, float, float, float } %934, 0, !dbg !29
  %936 = extractvalue { float, float, float, float } %934, 1, !dbg !29
  %937 = extractvalue { float, float, float, float } %934, 2, !dbg !29
  %938 = extractvalue { float, float, float, float } %934, 3, !dbg !29
  %939 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %860, float %861, float %862, float %863, i32 %566, i32 %567, i32 %568, i32 %569, i32 %659, i32 %661) #3, !dbg !29
  %940 = extractvalue { float, float, float, float } %939, 0, !dbg !29
  %941 = extractvalue { float, float, float, float } %939, 1, !dbg !29
  %942 = extractvalue { float, float, float, float } %939, 2, !dbg !29
  %943 = extractvalue { float, float, float, float } %939, 3, !dbg !29
  %944 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %865, float %866, float %867, float %868, i32 %566, i32 %567, i32 %568, i32 %569, i32 %675, i32 %677) #3, !dbg !29
  %945 = extractvalue { float, float, float, float } %944, 0, !dbg !29
  %946 = extractvalue { float, float, float, float } %944, 1, !dbg !29
  %947 = extractvalue { float, float, float, float } %944, 2, !dbg !29
  %948 = extractvalue { float, float, float, float } %944, 3, !dbg !29
  %949 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %870, float %871, float %872, float %873, i32 %566, i32 %567, i32 %568, i32 %569, i32 %691, i32 %693) #3, !dbg !29
  %950 = extractvalue { float, float, float, float } %949, 0, !dbg !29
  %951 = extractvalue { float, float, float, float } %949, 1, !dbg !29
  %952 = extractvalue { float, float, float, float } %949, 2, !dbg !29
  %953 = extractvalue { float, float, float, float } %949, 3, !dbg !29
  %954 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %875, float %876, float %877, float %878, i32 %586, i32 %587, i32 %588, i32 %589, i32 %643, i32 %645) #3, !dbg !29
  %955 = extractvalue { float, float, float, float } %954, 0, !dbg !29
  %956 = extractvalue { float, float, float, float } %954, 1, !dbg !29
  %957 = extractvalue { float, float, float, float } %954, 2, !dbg !29
  %958 = extractvalue { float, float, float, float } %954, 3, !dbg !29
  %959 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %880, float %881, float %882, float %883, i32 %586, i32 %587, i32 %588, i32 %589, i32 %659, i32 %661) #3, !dbg !29
  %960 = extractvalue { float, float, float, float } %959, 0, !dbg !29
  %961 = extractvalue { float, float, float, float } %959, 1, !dbg !29
  %962 = extractvalue { float, float, float, float } %959, 2, !dbg !29
  %963 = extractvalue { float, float, float, float } %959, 3, !dbg !29
  %964 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %885, float %886, float %887, float %888, i32 %586, i32 %587, i32 %588, i32 %589, i32 %675, i32 %677) #3, !dbg !29
  %965 = extractvalue { float, float, float, float } %964, 0, !dbg !29
  %966 = extractvalue { float, float, float, float } %964, 1, !dbg !29
  %967 = extractvalue { float, float, float, float } %964, 2, !dbg !29
  %968 = extractvalue { float, float, float, float } %964, 3, !dbg !29
  %969 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %890, float %891, float %892, float %893, i32 %586, i32 %587, i32 %588, i32 %589, i32 %691, i32 %693) #3, !dbg !29
  %970 = extractvalue { float, float, float, float } %969, 0, !dbg !29
  %971 = extractvalue { float, float, float, float } %969, 1, !dbg !29
  %972 = extractvalue { float, float, float, float } %969, 2, !dbg !29
  %973 = extractvalue { float, float, float, float } %969, 3, !dbg !29
  %974 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %895, float %896, float %897, float %898, i32 %606, i32 %607, i32 %608, i32 %609, i32 %643, i32 %645) #3, !dbg !29
  %975 = extractvalue { float, float, float, float } %974, 0, !dbg !29
  %976 = extractvalue { float, float, float, float } %974, 1, !dbg !29
  %977 = extractvalue { float, float, float, float } %974, 2, !dbg !29
  %978 = extractvalue { float, float, float, float } %974, 3, !dbg !29
  %979 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %900, float %901, float %902, float %903, i32 %606, i32 %607, i32 %608, i32 %609, i32 %659, i32 %661) #3, !dbg !29
  %980 = extractvalue { float, float, float, float } %979, 0, !dbg !29
  %981 = extractvalue { float, float, float, float } %979, 1, !dbg !29
  %982 = extractvalue { float, float, float, float } %979, 2, !dbg !29
  %983 = extractvalue { float, float, float, float } %979, 3, !dbg !29
  %984 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %905, float %906, float %907, float %908, i32 %606, i32 %607, i32 %608, i32 %609, i32 %675, i32 %677) #3, !dbg !29
  %985 = extractvalue { float, float, float, float } %984, 0, !dbg !29
  %986 = extractvalue { float, float, float, float } %984, 1, !dbg !29
  %987 = extractvalue { float, float, float, float } %984, 2, !dbg !29
  %988 = extractvalue { float, float, float, float } %984, 3, !dbg !29
  %989 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %910, float %911, float %912, float %913, i32 %606, i32 %607, i32 %608, i32 %609, i32 %691, i32 %693) #3, !dbg !29
  %990 = extractvalue { float, float, float, float } %989, 0, !dbg !29
  %991 = extractvalue { float, float, float, float } %989, 1, !dbg !29
  %992 = extractvalue { float, float, float, float } %989, 2, !dbg !29
  %993 = extractvalue { float, float, float, float } %989, 3, !dbg !29
  %994 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %915, float %916, float %917, float %918, i32 %626, i32 %627, i32 %628, i32 %629, i32 %643, i32 %645) #3, !dbg !29
  %995 = extractvalue { float, float, float, float } %994, 0, !dbg !29
  %996 = extractvalue { float, float, float, float } %994, 1, !dbg !29
  %997 = extractvalue { float, float, float, float } %994, 2, !dbg !29
  %998 = extractvalue { float, float, float, float } %994, 3, !dbg !29
  %999 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %920, float %921, float %922, float %923, i32 %626, i32 %627, i32 %628, i32 %629, i32 %659, i32 %661) #3, !dbg !29
  %1000 = extractvalue { float, float, float, float } %999, 0, !dbg !29
  %1001 = extractvalue { float, float, float, float } %999, 1, !dbg !29
  %1002 = extractvalue { float, float, float, float } %999, 2, !dbg !29
  %1003 = extractvalue { float, float, float, float } %999, 3, !dbg !29
  %1004 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %925, float %926, float %927, float %928, i32 %626, i32 %627, i32 %628, i32 %629, i32 %675, i32 %677) #3, !dbg !29
  %1005 = extractvalue { float, float, float, float } %1004, 0, !dbg !29
  %1006 = extractvalue { float, float, float, float } %1004, 1, !dbg !29
  %1007 = extractvalue { float, float, float, float } %1004, 2, !dbg !29
  %1008 = extractvalue { float, float, float, float } %1004, 3, !dbg !29
  %1009 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %930, float %931, float %932, float %933, i32 %626, i32 %627, i32 %628, i32 %629, i32 %691, i32 %693) #3, !dbg !29
  %1010 = extractvalue { float, float, float, float } %1009, 0, !dbg !29
  %1011 = extractvalue { float, float, float, float } %1009, 1, !dbg !29
  %1012 = extractvalue { float, float, float, float } %1009, 2, !dbg !29
  %1013 = extractvalue { float, float, float, float } %1009, 3, !dbg !29
  %1014 = insertelement <2 x float> poison, float %935, i64 0, !dbg !30
  %1015 = insertelement <2 x float> %1014, float %936, i64 1, !dbg !30
  %1016 = fptrunc <2 x float> %1015 to <2 x bfloat>, !dbg !30
  %1017 = insertelement <2 x float> poison, float %937, i64 0, !dbg !30
  %1018 = insertelement <2 x float> %1017, float %938, i64 1, !dbg !30
  %1019 = fptrunc <2 x float> %1018 to <2 x bfloat>, !dbg !30
  %1020 = insertelement <2 x float> poison, float %940, i64 0, !dbg !30
  %1021 = insertelement <2 x float> %1020, float %941, i64 1, !dbg !30
  %1022 = fptrunc <2 x float> %1021 to <2 x bfloat>, !dbg !30
  %1023 = insertelement <2 x float> poison, float %942, i64 0, !dbg !30
  %1024 = insertelement <2 x float> %1023, float %943, i64 1, !dbg !30
  %1025 = fptrunc <2 x float> %1024 to <2 x bfloat>, !dbg !30
  %1026 = insertelement <2 x float> poison, float %945, i64 0, !dbg !30
  %1027 = insertelement <2 x float> %1026, float %946, i64 1, !dbg !30
  %1028 = fptrunc <2 x float> %1027 to <2 x bfloat>, !dbg !30
  %1029 = insertelement <2 x float> poison, float %947, i64 0, !dbg !30
  %1030 = insertelement <2 x float> %1029, float %948, i64 1, !dbg !30
  %1031 = fptrunc <2 x float> %1030 to <2 x bfloat>, !dbg !30
  %1032 = insertelement <2 x float> poison, float %950, i64 0, !dbg !30
  %1033 = insertelement <2 x float> %1032, float %951, i64 1, !dbg !30
  %1034 = fptrunc <2 x float> %1033 to <2 x bfloat>, !dbg !30
  %1035 = insertelement <2 x float> poison, float %952, i64 0, !dbg !30
  %1036 = insertelement <2 x float> %1035, float %953, i64 1, !dbg !30
  %1037 = fptrunc <2 x float> %1036 to <2 x bfloat>, !dbg !30
  %1038 = insertelement <2 x float> poison, float %955, i64 0, !dbg !30
  %1039 = insertelement <2 x float> %1038, float %956, i64 1, !dbg !30
  %1040 = fptrunc <2 x float> %1039 to <2 x bfloat>, !dbg !30
  %1041 = insertelement <2 x float> poison, float %957, i64 0, !dbg !30
  %1042 = insertelement <2 x float> %1041, float %958, i64 1, !dbg !30
  %1043 = fptrunc <2 x float> %1042 to <2 x bfloat>, !dbg !30
  %1044 = insertelement <2 x float> poison, float %960, i64 0, !dbg !30
  %1045 = insertelement <2 x float> %1044, float %961, i64 1, !dbg !30
  %1046 = fptrunc <2 x float> %1045 to <2 x bfloat>, !dbg !30
  %1047 = insertelement <2 x float> poison, float %962, i64 0, !dbg !30
  %1048 = insertelement <2 x float> %1047, float %963, i64 1, !dbg !30
  %1049 = fptrunc <2 x float> %1048 to <2 x bfloat>, !dbg !30
  %1050 = insertelement <2 x float> poison, float %965, i64 0, !dbg !30
  %1051 = insertelement <2 x float> %1050, float %966, i64 1, !dbg !30
  %1052 = fptrunc <2 x float> %1051 to <2 x bfloat>, !dbg !30
  %1053 = insertelement <2 x float> poison, float %967, i64 0, !dbg !30
  %1054 = insertelement <2 x float> %1053, float %968, i64 1, !dbg !30
  %1055 = fptrunc <2 x float> %1054 to <2 x bfloat>, !dbg !30
  %1056 = insertelement <2 x float> poison, float %970, i64 0, !dbg !30
  %1057 = insertelement <2 x float> %1056, float %971, i64 1, !dbg !30
  %1058 = fptrunc <2 x float> %1057 to <2 x bfloat>, !dbg !30
  %1059 = insertelement <2 x float> poison, float %972, i64 0, !dbg !30
  %1060 = insertelement <2 x float> %1059, float %973, i64 1, !dbg !30
  %1061 = fptrunc <2 x float> %1060 to <2 x bfloat>, !dbg !30
  %1062 = insertelement <2 x float> poison, float %975, i64 0, !dbg !30
  %1063 = insertelement <2 x float> %1062, float %976, i64 1, !dbg !30
  %1064 = fptrunc <2 x float> %1063 to <2 x bfloat>, !dbg !30
  %1065 = insertelement <2 x float> poison, float %977, i64 0, !dbg !30
  %1066 = insertelement <2 x float> %1065, float %978, i64 1, !dbg !30
  %1067 = fptrunc <2 x float> %1066 to <2 x bfloat>, !dbg !30
  %1068 = insertelement <2 x float> poison, float %980, i64 0, !dbg !30
  %1069 = insertelement <2 x float> %1068, float %981, i64 1, !dbg !30
  %1070 = fptrunc <2 x float> %1069 to <2 x bfloat>, !dbg !30
  %1071 = insertelement <2 x float> poison, float %982, i64 0, !dbg !30
  %1072 = insertelement <2 x float> %1071, float %983, i64 1, !dbg !30
  %1073 = fptrunc <2 x float> %1072 to <2 x bfloat>, !dbg !30
  %1074 = insertelement <2 x float> poison, float %985, i64 0, !dbg !30
  %1075 = insertelement <2 x float> %1074, float %986, i64 1, !dbg !30
  %1076 = fptrunc <2 x float> %1075 to <2 x bfloat>, !dbg !30
  %1077 = insertelement <2 x float> poison, float %987, i64 0, !dbg !30
  %1078 = insertelement <2 x float> %1077, float %988, i64 1, !dbg !30
  %1079 = fptrunc <2 x float> %1078 to <2 x bfloat>, !dbg !30
  %1080 = insertelement <2 x float> poison, float %990, i64 0, !dbg !30
  %1081 = insertelement <2 x float> %1080, float %991, i64 1, !dbg !30
  %1082 = fptrunc <2 x float> %1081 to <2 x bfloat>, !dbg !30
  %1083 = insertelement <2 x float> poison, float %992, i64 0, !dbg !30
  %1084 = insertelement <2 x float> %1083, float %993, i64 1, !dbg !30
  %1085 = fptrunc <2 x float> %1084 to <2 x bfloat>, !dbg !30
  %1086 = insertelement <2 x float> poison, float %995, i64 0, !dbg !30
  %1087 = insertelement <2 x float> %1086, float %996, i64 1, !dbg !30
  %1088 = fptrunc <2 x float> %1087 to <2 x bfloat>, !dbg !30
  %1089 = insertelement <2 x float> poison, float %997, i64 0, !dbg !30
  %1090 = insertelement <2 x float> %1089, float %998, i64 1, !dbg !30
  %1091 = fptrunc <2 x float> %1090 to <2 x bfloat>, !dbg !30
  %1092 = insertelement <2 x float> poison, float %1000, i64 0, !dbg !30
  %1093 = insertelement <2 x float> %1092, float %1001, i64 1, !dbg !30
  %1094 = fptrunc <2 x float> %1093 to <2 x bfloat>, !dbg !30
  %1095 = insertelement <2 x float> poison, float %1002, i64 0, !dbg !30
  %1096 = insertelement <2 x float> %1095, float %1003, i64 1, !dbg !30
  %1097 = fptrunc <2 x float> %1096 to <2 x bfloat>, !dbg !30
  %1098 = insertelement <2 x float> poison, float %1005, i64 0, !dbg !30
  %1099 = insertelement <2 x float> %1098, float %1006, i64 1, !dbg !30
  %1100 = fptrunc <2 x float> %1099 to <2 x bfloat>, !dbg !30
  %1101 = insertelement <2 x float> poison, float %1007, i64 0, !dbg !30
  %1102 = insertelement <2 x float> %1101, float %1008, i64 1, !dbg !30
  %1103 = fptrunc <2 x float> %1102 to <2 x bfloat>, !dbg !30
  %1104 = insertelement <2 x float> poison, float %1010, i64 0, !dbg !30
  %1105 = insertelement <2 x float> %1104, float %1011, i64 1, !dbg !30
  %1106 = fptrunc <2 x float> %1105 to <2 x bfloat>, !dbg !30
  %1107 = insertelement <2 x float> poison, float %1012, i64 0, !dbg !30
  %1108 = insertelement <2 x float> %1107, float %1013, i64 1, !dbg !30
  %1109 = fptrunc <2 x float> %1108 to <2 x bfloat>, !dbg !30
  %1110 = getelementptr bfloat, ptr addrspace(1) %259, i64 %448, !dbg !31
  %1111 = getelementptr bfloat, ptr addrspace(1) %259, i64 %449, !dbg !31
  %1112 = getelementptr bfloat, ptr addrspace(1) %259, i64 %450, !dbg !31
  %1113 = getelementptr bfloat, ptr addrspace(1) %259, i64 %451, !dbg !31
  %1114 = getelementptr bfloat, ptr addrspace(1) %259, i64 %452, !dbg !31
  %1115 = getelementptr bfloat, ptr addrspace(1) %259, i64 %453, !dbg !31
  %1116 = getelementptr bfloat, ptr addrspace(1) %259, i64 %454, !dbg !31
  %1117 = getelementptr bfloat, ptr addrspace(1) %259, i64 %455, !dbg !31
  store <2 x bfloat> %1016, ptr addrspace(3) %390, align 4, !dbg !31
  store <2 x bfloat> %1019, ptr addrspace(3) %395, align 4, !dbg !31
  store <2 x bfloat> %1022, ptr addrspace(3) %396, align 4, !dbg !31
  store <2 x bfloat> %1025, ptr addrspace(3) %401, align 4, !dbg !31
  store <2 x bfloat> %1028, ptr addrspace(3) %402, align 4, !dbg !31
  store <2 x bfloat> %1031, ptr addrspace(3) %407, align 4, !dbg !31
  store <2 x bfloat> %1034, ptr addrspace(3) %408, align 4, !dbg !31
  store <2 x bfloat> %1037, ptr addrspace(3) %413, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1118 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !31
  %1119 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1040, ptr addrspace(3) %390, align 4, !dbg !31
  store <2 x bfloat> %1043, ptr addrspace(3) %395, align 4, !dbg !31
  store <2 x bfloat> %1046, ptr addrspace(3) %396, align 4, !dbg !31
  store <2 x bfloat> %1049, ptr addrspace(3) %401, align 4, !dbg !31
  store <2 x bfloat> %1052, ptr addrspace(3) %402, align 4, !dbg !31
  store <2 x bfloat> %1055, ptr addrspace(3) %407, align 4, !dbg !31
  store <2 x bfloat> %1058, ptr addrspace(3) %408, align 4, !dbg !31
  store <2 x bfloat> %1061, ptr addrspace(3) %413, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1120 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !31
  %1121 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1064, ptr addrspace(3) %390, align 4, !dbg !31
  store <2 x bfloat> %1067, ptr addrspace(3) %395, align 4, !dbg !31
  store <2 x bfloat> %1070, ptr addrspace(3) %396, align 4, !dbg !31
  store <2 x bfloat> %1073, ptr addrspace(3) %401, align 4, !dbg !31
  store <2 x bfloat> %1076, ptr addrspace(3) %402, align 4, !dbg !31
  store <2 x bfloat> %1079, ptr addrspace(3) %407, align 4, !dbg !31
  store <2 x bfloat> %1082, ptr addrspace(3) %408, align 4, !dbg !31
  store <2 x bfloat> %1085, ptr addrspace(3) %413, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1122 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !31
  %1123 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  store <2 x bfloat> %1088, ptr addrspace(3) %390, align 4, !dbg !31
  store <2 x bfloat> %1091, ptr addrspace(3) %395, align 4, !dbg !31
  store <2 x bfloat> %1094, ptr addrspace(3) %396, align 4, !dbg !31
  store <2 x bfloat> %1097, ptr addrspace(3) %401, align 4, !dbg !31
  store <2 x bfloat> %1100, ptr addrspace(3) %402, align 4, !dbg !31
  store <2 x bfloat> %1103, ptr addrspace(3) %407, align 4, !dbg !31
  store <2 x bfloat> %1106, ptr addrspace(3) %408, align 4, !dbg !31
  store <2 x bfloat> %1109, ptr addrspace(3) %413, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !31
  %1124 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !31
  %1125 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !31
  %.extract301 = extractelement <4 x i32> %1118, i64 0, !dbg !31
  %.extract303 = extractelement <4 x i32> %1118, i64 1, !dbg !31
  %.extract305 = extractelement <4 x i32> %1118, i64 2, !dbg !31
  %.extract307 = extractelement <4 x i32> %1118, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract301, i32 %.extract303, i32 %.extract305, i32 %.extract307, ptr addrspace(1) %1110, i1 %432) #3, !dbg !31
  %.extract309 = extractelement <4 x i32> %1119, i64 0, !dbg !31
  %.extract311 = extractelement <4 x i32> %1119, i64 1, !dbg !31
  %.extract313 = extractelement <4 x i32> %1119, i64 2, !dbg !31
  %.extract315 = extractelement <4 x i32> %1119, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract309, i32 %.extract311, i32 %.extract313, i32 %.extract315, ptr addrspace(1) %1111, i1 %433) #3, !dbg !31
  %.extract317 = extractelement <4 x i32> %1120, i64 0, !dbg !31
  %.extract319 = extractelement <4 x i32> %1120, i64 1, !dbg !31
  %.extract321 = extractelement <4 x i32> %1120, i64 2, !dbg !31
  %.extract323 = extractelement <4 x i32> %1120, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract317, i32 %.extract319, i32 %.extract321, i32 %.extract323, ptr addrspace(1) %1112, i1 %434) #3, !dbg !31
  %.extract325 = extractelement <4 x i32> %1121, i64 0, !dbg !31
  %.extract327 = extractelement <4 x i32> %1121, i64 1, !dbg !31
  %.extract329 = extractelement <4 x i32> %1121, i64 2, !dbg !31
  %.extract331 = extractelement <4 x i32> %1121, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract325, i32 %.extract327, i32 %.extract329, i32 %.extract331, ptr addrspace(1) %1113, i1 %435) #3, !dbg !31
  %.extract333 = extractelement <4 x i32> %1122, i64 0, !dbg !31
  %.extract335 = extractelement <4 x i32> %1122, i64 1, !dbg !31
  %.extract337 = extractelement <4 x i32> %1122, i64 2, !dbg !31
  %.extract339 = extractelement <4 x i32> %1122, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract333, i32 %.extract335, i32 %.extract337, i32 %.extract339, ptr addrspace(1) %1114, i1 %436) #3, !dbg !31
  %.extract341 = extractelement <4 x i32> %1123, i64 0, !dbg !31
  %.extract343 = extractelement <4 x i32> %1123, i64 1, !dbg !31
  %.extract345 = extractelement <4 x i32> %1123, i64 2, !dbg !31
  %.extract347 = extractelement <4 x i32> %1123, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract341, i32 %.extract343, i32 %.extract345, i32 %.extract347, ptr addrspace(1) %1115, i1 %437) #3, !dbg !31
  %.extract349 = extractelement <4 x i32> %1124, i64 0, !dbg !31
  %.extract351 = extractelement <4 x i32> %1124, i64 1, !dbg !31
  %.extract353 = extractelement <4 x i32> %1124, i64 2, !dbg !31
  %.extract355 = extractelement <4 x i32> %1124, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract349, i32 %.extract351, i32 %.extract353, i32 %.extract355, ptr addrspace(1) %1116, i1 %438) #3, !dbg !31
  %.extract357 = extractelement <4 x i32> %1125, i64 0, !dbg !31
  %.extract359 = extractelement <4 x i32> %1125, i64 1, !dbg !31
  %.extract361 = extractelement <4 x i32> %1125, i64 2, !dbg !31
  %.extract363 = extractelement <4 x i32> %1125, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract357, i32 %.extract359, i32 %.extract361, i32 %.extract363, ptr addrspace(1) %1117, i1 %439) #3, !dbg !31
  %1126 = add i32 %457, 1, !dbg !27
  %1127 = icmp sgt i32 %1126, 1, !dbg !27
  %1128 = select i1 %1127, i32 0, i32 %1126, !dbg !27
  %1129 = or disjoint i64 %indvars.iv, %45, !dbg !26
  %1130 = or disjoint i64 %1129, %.idx, !dbg !26
  %1131 = or disjoint i64 %1129, %.idx18, !dbg !26
  %1132 = or disjoint i64 %1129, %.idx19, !dbg !26
  %1133 = or disjoint i64 %1129, %.idx20, !dbg !26
  %1134 = or disjoint i64 %1129, %.idx21, !dbg !26
  %1135 = or disjoint i64 %1129, %.idx22, !dbg !26
  %1136 = or disjoint i64 %1129, %.idx23, !dbg !26
  %1137 = or disjoint i64 %1129, %.idx24, !dbg !26
  %1138 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1130, !dbg !26
  %1139 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1131, !dbg !26
  %1140 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1132, !dbg !26
  %1141 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1133, !dbg !26
  %1142 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1134, !dbg !26
  %1143 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1135, !dbg !26
  %1144 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1136, !dbg !26
  %1145 = getelementptr bfloat, ptr addrspace(1) %258, i64 %1137, !dbg !26
  %.idx236 = shl i32 %1128, 13, !dbg !26
  %1146 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx236, !dbg !26
  %1147 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %216, !dbg !26
  %1148 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %221, !dbg !26
  %1149 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %226, !dbg !26
  %1150 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %231, !dbg !26
  %1151 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %236, !dbg !26
  %1152 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %241, !dbg !26
  %1153 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %246, !dbg !26
  %1154 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1146, i32 %251, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %1147, ptr addrspace(1) %1138, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1148, ptr addrspace(1) %1139, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1149, ptr addrspace(1) %1140, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1150, ptr addrspace(1) %1141, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1151, ptr addrspace(1) %1142, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1152, ptr addrspace(1) %1143, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1153, ptr addrspace(1) %1144, i32 0) #3, !dbg !26
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %1154, ptr addrspace(1) %1145, i32 0) #3, !dbg !26
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !26
  br i1 %423, label %422, label %1155, !dbg !27

1155:                                             ; preds = %422
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !27
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !27
  %1156 = sext i32 %89 to i64, !dbg !32
  %1157 = getelementptr float, ptr addrspace(1) %6, i64 %1156, !dbg !32
  %1158 = getelementptr float, ptr addrspace(1) %1157, i64 %56, !dbg !33
  %1159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1158, i1 %60) #3, !dbg !33
  %1160 = bitcast i32 %1159 to float, !dbg !33
  %1161 = fmul float %1160, 0x3FF7154760000000, !dbg !34
  %1162 = tail call float @llvm.nvvm.ex2.approx.f(float %1161), !dbg !34
  %1163 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %36, !dbg !34
  store float %1162, ptr addrspace(3) %1163, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %1164 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %63, !dbg !34
  %1165 = load <2 x float>, ptr addrspace(3) %1164, align 8, !dbg !34
  %1166 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %68, !dbg !34
  %1167 = load <2 x float>, ptr addrspace(3) %1166, align 8, !dbg !34
  %1168 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %71, !dbg !34
  %1169 = load <2 x float>, ptr addrspace(3) %1168, align 8, !dbg !34
  %1170 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %74, !dbg !34
  %1171 = load <2 x float>, ptr addrspace(3) %1170, align 8, !dbg !34
  %1172 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %77, !dbg !34
  %1173 = load <2 x float>, ptr addrspace(3) %1172, align 8, !dbg !34
  %1174 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %80, !dbg !34
  %1175 = load <2 x float>, ptr addrspace(3) %1174, align 8, !dbg !34
  %1176 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %83, !dbg !34
  %1177 = load <2 x float>, ptr addrspace(3) %1176, align 8, !dbg !34
  %1178 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %86, !dbg !34
  %1179 = load <2 x float>, ptr addrspace(3) %1178, align 8, !dbg !34
  %1180 = getelementptr bfloat, ptr addrspace(1) %0, i64 %257, !dbg !35
  %1181 = getelementptr bfloat, ptr addrspace(1) %3, i64 %257, !dbg !36
  %1182 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %260, !dbg !37
  %1183 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %261, !dbg !37
  %1184 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %262, !dbg !37
  %1185 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %263, !dbg !37
  %1186 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %264, !dbg !37
  %1187 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %265, !dbg !37
  %1188 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %266, !dbg !37
  %1189 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %267, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %276, ptr addrspace(1) %1182, i32 %284) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %277, ptr addrspace(1) %1183, i32 %285) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %278, ptr addrspace(1) %1184, i32 %286) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %279, ptr addrspace(1) %1185, i32 %287) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %280, ptr addrspace(1) %1186, i32 %288) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %281, ptr addrspace(1) %1187, i32 %289) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %282, ptr addrspace(1) %1188, i32 %290) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %283, ptr addrspace(1) %1189, i32 %291) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1190 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %293, !dbg !37
  %1191 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %294, !dbg !37
  %1192 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %295, !dbg !37
  %1193 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %296, !dbg !37
  %1194 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %297, !dbg !37
  %1195 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %298, !dbg !37
  %1196 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %299, !dbg !37
  %1197 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %300, !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %309, ptr addrspace(1) %1190, i32 %284) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %310, ptr addrspace(1) %1191, i32 %285) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %311, ptr addrspace(1) %1192, i32 %286) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %312, ptr addrspace(1) %1193, i32 %287) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %313, ptr addrspace(1) %1194, i32 %288) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %314, ptr addrspace(1) %1195, i32 %289) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %315, ptr addrspace(1) %1196, i32 %290) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %316, ptr addrspace(1) %1197, i32 %291) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  %1198 = extractelement <2 x float> %1179, i64 0, !dbg !38
  %1199 = extractelement <2 x float> %1179, i64 1, !dbg !38
  %1200 = extractelement <2 x float> %1177, i64 0, !dbg !38
  %1201 = extractelement <2 x float> %1177, i64 1, !dbg !38
  %1202 = extractelement <2 x float> %1175, i64 0, !dbg !38
  %1203 = extractelement <2 x float> %1175, i64 1, !dbg !38
  %1204 = extractelement <2 x float> %1173, i64 0, !dbg !38
  %1205 = extractelement <2 x float> %1173, i64 1, !dbg !38
  %1206 = extractelement <2 x float> %1171, i64 0, !dbg !38
  %1207 = extractelement <2 x float> %1171, i64 1, !dbg !38
  %1208 = extractelement <2 x float> %1169, i64 0, !dbg !38
  %1209 = extractelement <2 x float> %1169, i64 1, !dbg !38
  %1210 = extractelement <2 x float> %1167, i64 0, !dbg !38
  %1211 = extractelement <2 x float> %1167, i64 1, !dbg !38
  %1212 = extractelement <2 x float> %1165, i64 0, !dbg !38
  %1213 = extractelement <2 x float> %1165, i64 1, !dbg !38
  br label %1214, !dbg !39

1214:                                             ; preds = %1155, %1214
  %1215 = phi i1 [ true, %1155 ], [ false, %1214 ]
  %indvars.iv365 = phi i64 [ 128, %1155 ], [ 192, %1214 ]
  %1216 = phi i1 [ %117, %1155 ], [ false, %1214 ]
  %1217 = phi i1 [ %118, %1155 ], [ false, %1214 ]
  %1218 = phi i1 [ %119, %1155 ], [ false, %1214 ]
  %1219 = phi i1 [ %120, %1155 ], [ false, %1214 ]
  %1220 = phi i1 [ %121, %1155 ], [ false, %1214 ]
  %1221 = phi i1 [ %122, %1155 ], [ false, %1214 ]
  %1222 = phi i1 [ %123, %1155 ], [ false, %1214 ]
  %1223 = phi i1 [ %124, %1155 ], [ false, %1214 ]
  %1224 = phi i1 [ %117, %1155 ], [ %1216, %1214 ]
  %1225 = phi i1 [ %118, %1155 ], [ %1217, %1214 ]
  %1226 = phi i1 [ %119, %1155 ], [ %1218, %1214 ]
  %1227 = phi i1 [ %120, %1155 ], [ %1219, %1214 ]
  %1228 = phi i1 [ %121, %1155 ], [ %1220, %1214 ]
  %1229 = phi i1 [ %122, %1155 ], [ %1221, %1214 ]
  %1230 = phi i1 [ %123, %1155 ], [ %1222, %1214 ]
  %1231 = phi i1 [ %124, %1155 ], [ %1223, %1214 ]
  %1232 = phi i64 [ %293, %1155 ], [ %2210, %1214 ]
  %1233 = phi i64 [ %294, %1155 ], [ %2211, %1214 ]
  %1234 = phi i64 [ %295, %1155 ], [ %2212, %1214 ]
  %1235 = phi i64 [ %296, %1155 ], [ %2213, %1214 ]
  %1236 = phi i64 [ %297, %1155 ], [ %2214, %1214 ]
  %1237 = phi i64 [ %298, %1155 ], [ %2215, %1214 ]
  %1238 = phi i64 [ %299, %1155 ], [ %2216, %1214 ]
  %1239 = phi i64 [ %300, %1155 ], [ %2217, %1214 ]
  %1240 = phi i64 [ %260, %1155 ], [ %1232, %1214 ]
  %1241 = phi i64 [ %261, %1155 ], [ %1233, %1214 ]
  %1242 = phi i64 [ %262, %1155 ], [ %1234, %1214 ]
  %1243 = phi i64 [ %263, %1155 ], [ %1235, %1214 ]
  %1244 = phi i64 [ %264, %1155 ], [ %1236, %1214 ]
  %1245 = phi i64 [ %265, %1155 ], [ %1237, %1214 ]
  %1246 = phi i64 [ %266, %1155 ], [ %1238, %1214 ]
  %1247 = phi i64 [ %267, %1155 ], [ %1239, %1214 ]
  %1248 = phi i32 [ -1, %1155 ], [ %1252, %1214 ]
  %1249 = phi i32 [ 1, %1155 ], [ %2208, %1214 ]
  %1250 = add i32 %1248, 1, !dbg !39
  %1251 = icmp sgt i32 %1250, 1, !dbg !39
  %1252 = select i1 %1251, i32 0, i32 %1250, !dbg !39
  tail call void @llvm.nvvm.cp.async.wait.group(i32 1), !dbg !37
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !37
  %.idx41 = shl i32 %1252, 13, !dbg !37
  %1253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx41, !dbg !37
  %1254 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %329, !dbg !40
  %1255 = ptrtoint ptr addrspace(3) %1254 to i32, !dbg !40
  %1256 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1255) #3, !dbg !40
  %1257 = extractvalue { i32, i32, i32, i32 } %1256, 0, !dbg !40
  %1258 = bitcast i32 %1257 to <2 x bfloat>, !dbg !40
  %1259 = extractvalue { i32, i32, i32, i32 } %1256, 1, !dbg !40
  %1260 = bitcast i32 %1259 to <2 x bfloat>, !dbg !40
  %1261 = extractvalue { i32, i32, i32, i32 } %1256, 2, !dbg !40
  %1262 = bitcast i32 %1261 to <2 x bfloat>, !dbg !40
  %1263 = extractvalue { i32, i32, i32, i32 } %1256, 3, !dbg !40
  %1264 = bitcast i32 %1263 to <2 x bfloat>, !dbg !40
  %1265 = getelementptr inbounds nuw i8, ptr addrspace(3) %1254, i32 4096, !dbg !40
  %1266 = ptrtoint ptr addrspace(3) %1265 to i32, !dbg !40
  %1267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1266) #3, !dbg !40
  %1268 = extractvalue { i32, i32, i32, i32 } %1267, 0, !dbg !40
  %1269 = bitcast i32 %1268 to <2 x bfloat>, !dbg !40
  %1270 = extractvalue { i32, i32, i32, i32 } %1267, 1, !dbg !40
  %1271 = bitcast i32 %1270 to <2 x bfloat>, !dbg !40
  %1272 = extractvalue { i32, i32, i32, i32 } %1267, 2, !dbg !40
  %1273 = bitcast i32 %1272 to <2 x bfloat>, !dbg !40
  %1274 = extractvalue { i32, i32, i32, i32 } %1267, 3, !dbg !40
  %1275 = bitcast i32 %1274 to <2 x bfloat>, !dbg !40
  %1276 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %330, !dbg !40
  %1277 = ptrtoint ptr addrspace(3) %1276 to i32, !dbg !40
  %1278 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1277) #3, !dbg !40
  %1279 = extractvalue { i32, i32, i32, i32 } %1278, 0, !dbg !40
  %1280 = bitcast i32 %1279 to <2 x bfloat>, !dbg !40
  %1281 = extractvalue { i32, i32, i32, i32 } %1278, 1, !dbg !40
  %1282 = bitcast i32 %1281 to <2 x bfloat>, !dbg !40
  %1283 = extractvalue { i32, i32, i32, i32 } %1278, 2, !dbg !40
  %1284 = bitcast i32 %1283 to <2 x bfloat>, !dbg !40
  %1285 = extractvalue { i32, i32, i32, i32 } %1278, 3, !dbg !40
  %1286 = bitcast i32 %1285 to <2 x bfloat>, !dbg !40
  %1287 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %331, !dbg !40
  %1288 = ptrtoint ptr addrspace(3) %1287 to i32, !dbg !40
  %1289 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1288) #3, !dbg !40
  %1290 = extractvalue { i32, i32, i32, i32 } %1289, 0, !dbg !40
  %1291 = bitcast i32 %1290 to <2 x bfloat>, !dbg !40
  %1292 = extractvalue { i32, i32, i32, i32 } %1289, 1, !dbg !40
  %1293 = bitcast i32 %1292 to <2 x bfloat>, !dbg !40
  %1294 = extractvalue { i32, i32, i32, i32 } %1289, 2, !dbg !40
  %1295 = bitcast i32 %1294 to <2 x bfloat>, !dbg !40
  %1296 = extractvalue { i32, i32, i32, i32 } %1289, 3, !dbg !40
  %1297 = bitcast i32 %1296 to <2 x bfloat>, !dbg !40
  %1298 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %332, !dbg !40
  %1299 = ptrtoint ptr addrspace(3) %1298 to i32, !dbg !40
  %1300 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1299) #3, !dbg !40
  %1301 = extractvalue { i32, i32, i32, i32 } %1300, 0, !dbg !40
  %1302 = bitcast i32 %1301 to <2 x bfloat>, !dbg !40
  %1303 = extractvalue { i32, i32, i32, i32 } %1300, 1, !dbg !40
  %1304 = bitcast i32 %1303 to <2 x bfloat>, !dbg !40
  %1305 = extractvalue { i32, i32, i32, i32 } %1300, 2, !dbg !40
  %1306 = bitcast i32 %1305 to <2 x bfloat>, !dbg !40
  %1307 = extractvalue { i32, i32, i32, i32 } %1300, 3, !dbg !40
  %1308 = bitcast i32 %1307 to <2 x bfloat>, !dbg !40
  %1309 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %333, !dbg !40
  %1310 = ptrtoint ptr addrspace(3) %1309 to i32, !dbg !40
  %1311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1310) #3, !dbg !40
  %1312 = extractvalue { i32, i32, i32, i32 } %1311, 0, !dbg !40
  %1313 = bitcast i32 %1312 to <2 x bfloat>, !dbg !40
  %1314 = extractvalue { i32, i32, i32, i32 } %1311, 1, !dbg !40
  %1315 = bitcast i32 %1314 to <2 x bfloat>, !dbg !40
  %1316 = extractvalue { i32, i32, i32, i32 } %1311, 2, !dbg !40
  %1317 = bitcast i32 %1316 to <2 x bfloat>, !dbg !40
  %1318 = extractvalue { i32, i32, i32, i32 } %1311, 3, !dbg !40
  %1319 = bitcast i32 %1318 to <2 x bfloat>, !dbg !40
  %1320 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %334, !dbg !40
  %1321 = ptrtoint ptr addrspace(3) %1320 to i32, !dbg !40
  %1322 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1321) #3, !dbg !40
  %1323 = extractvalue { i32, i32, i32, i32 } %1322, 0, !dbg !40
  %1324 = bitcast i32 %1323 to <2 x bfloat>, !dbg !40
  %1325 = extractvalue { i32, i32, i32, i32 } %1322, 1, !dbg !40
  %1326 = bitcast i32 %1325 to <2 x bfloat>, !dbg !40
  %1327 = extractvalue { i32, i32, i32, i32 } %1322, 2, !dbg !40
  %1328 = bitcast i32 %1327 to <2 x bfloat>, !dbg !40
  %1329 = extractvalue { i32, i32, i32, i32 } %1322, 3, !dbg !40
  %1330 = bitcast i32 %1329 to <2 x bfloat>, !dbg !40
  %1331 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %1253, i32 %335, !dbg !40
  %1332 = ptrtoint ptr addrspace(3) %1331 to i32, !dbg !40
  %1333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %1332) #3, !dbg !40
  %1334 = extractvalue { i32, i32, i32, i32 } %1333, 0, !dbg !40
  %1335 = bitcast i32 %1334 to <2 x bfloat>, !dbg !40
  %1336 = extractvalue { i32, i32, i32, i32 } %1333, 1, !dbg !40
  %1337 = bitcast i32 %1336 to <2 x bfloat>, !dbg !40
  %1338 = extractvalue { i32, i32, i32, i32 } %1333, 2, !dbg !40
  %1339 = bitcast i32 %1338 to <2 x bfloat>, !dbg !40
  %1340 = extractvalue { i32, i32, i32, i32 } %1333, 3, !dbg !40
  %1341 = bitcast i32 %1340 to <2 x bfloat>, !dbg !40
  %1342 = fmul <2 x bfloat> %67, %1258, !dbg !18
  %1343 = extractelement <2 x bfloat> %1342, i64 0, !dbg !18
  %1344 = fmul <2 x bfloat> %67, %1258, !dbg !18
  %1345 = extractelement <2 x bfloat> %1344, i64 1, !dbg !18
  %1346 = fmul <2 x bfloat> %70, %1260, !dbg !18
  %1347 = extractelement <2 x bfloat> %1346, i64 0, !dbg !18
  %1348 = fmul <2 x bfloat> %70, %1260, !dbg !18
  %1349 = extractelement <2 x bfloat> %1348, i64 1, !dbg !18
  %1350 = fmul <2 x bfloat> %73, %1262, !dbg !18
  %1351 = extractelement <2 x bfloat> %1350, i64 0, !dbg !18
  %1352 = fmul <2 x bfloat> %73, %1262, !dbg !18
  %1353 = extractelement <2 x bfloat> %1352, i64 1, !dbg !18
  %1354 = fmul <2 x bfloat> %76, %1264, !dbg !18
  %1355 = extractelement <2 x bfloat> %1354, i64 0, !dbg !18
  %1356 = fmul <2 x bfloat> %76, %1264, !dbg !18
  %1357 = extractelement <2 x bfloat> %1356, i64 1, !dbg !18
  %1358 = fmul <2 x bfloat> %79, %1269, !dbg !18
  %1359 = extractelement <2 x bfloat> %1358, i64 0, !dbg !18
  %1360 = fmul <2 x bfloat> %79, %1269, !dbg !18
  %1361 = extractelement <2 x bfloat> %1360, i64 1, !dbg !18
  %1362 = fmul <2 x bfloat> %82, %1271, !dbg !18
  %1363 = extractelement <2 x bfloat> %1362, i64 0, !dbg !18
  %1364 = fmul <2 x bfloat> %82, %1271, !dbg !18
  %1365 = extractelement <2 x bfloat> %1364, i64 1, !dbg !18
  %1366 = fmul <2 x bfloat> %85, %1273, !dbg !18
  %1367 = extractelement <2 x bfloat> %1366, i64 0, !dbg !18
  %1368 = fmul <2 x bfloat> %85, %1273, !dbg !18
  %1369 = extractelement <2 x bfloat> %1368, i64 1, !dbg !18
  %1370 = fmul <2 x bfloat> %88, %1275, !dbg !18
  %1371 = extractelement <2 x bfloat> %1370, i64 0, !dbg !18
  %1372 = fmul <2 x bfloat> %88, %1275, !dbg !18
  %1373 = extractelement <2 x bfloat> %1372, i64 1, !dbg !18
  %1374 = fmul <2 x bfloat> %67, %1280, !dbg !18
  %1375 = extractelement <2 x bfloat> %1374, i64 0, !dbg !18
  %1376 = fmul <2 x bfloat> %67, %1280, !dbg !18
  %1377 = extractelement <2 x bfloat> %1376, i64 1, !dbg !18
  %1378 = fmul <2 x bfloat> %70, %1282, !dbg !18
  %1379 = extractelement <2 x bfloat> %1378, i64 0, !dbg !18
  %1380 = fmul <2 x bfloat> %70, %1282, !dbg !18
  %1381 = extractelement <2 x bfloat> %1380, i64 1, !dbg !18
  %1382 = fmul <2 x bfloat> %73, %1284, !dbg !18
  %1383 = extractelement <2 x bfloat> %1382, i64 0, !dbg !18
  %1384 = fmul <2 x bfloat> %73, %1284, !dbg !18
  %1385 = extractelement <2 x bfloat> %1384, i64 1, !dbg !18
  %1386 = fmul <2 x bfloat> %76, %1286, !dbg !18
  %1387 = extractelement <2 x bfloat> %1386, i64 0, !dbg !18
  %1388 = fmul <2 x bfloat> %76, %1286, !dbg !18
  %1389 = extractelement <2 x bfloat> %1388, i64 1, !dbg !18
  %1390 = fmul <2 x bfloat> %79, %1291, !dbg !18
  %1391 = extractelement <2 x bfloat> %1390, i64 0, !dbg !18
  %1392 = fmul <2 x bfloat> %79, %1291, !dbg !18
  %1393 = extractelement <2 x bfloat> %1392, i64 1, !dbg !18
  %1394 = fmul <2 x bfloat> %82, %1293, !dbg !18
  %1395 = extractelement <2 x bfloat> %1394, i64 0, !dbg !18
  %1396 = fmul <2 x bfloat> %82, %1293, !dbg !18
  %1397 = extractelement <2 x bfloat> %1396, i64 1, !dbg !18
  %1398 = fmul <2 x bfloat> %85, %1295, !dbg !18
  %1399 = extractelement <2 x bfloat> %1398, i64 0, !dbg !18
  %1400 = fmul <2 x bfloat> %85, %1295, !dbg !18
  %1401 = extractelement <2 x bfloat> %1400, i64 1, !dbg !18
  %1402 = fmul <2 x bfloat> %88, %1297, !dbg !18
  %1403 = extractelement <2 x bfloat> %1402, i64 0, !dbg !18
  %1404 = fmul <2 x bfloat> %88, %1297, !dbg !18
  %1405 = extractelement <2 x bfloat> %1404, i64 1, !dbg !18
  %1406 = fmul <2 x bfloat> %67, %1302, !dbg !18
  %1407 = extractelement <2 x bfloat> %1406, i64 0, !dbg !18
  %1408 = fmul <2 x bfloat> %67, %1302, !dbg !18
  %1409 = extractelement <2 x bfloat> %1408, i64 1, !dbg !18
  %1410 = fmul <2 x bfloat> %70, %1304, !dbg !18
  %1411 = extractelement <2 x bfloat> %1410, i64 0, !dbg !18
  %1412 = fmul <2 x bfloat> %70, %1304, !dbg !18
  %1413 = extractelement <2 x bfloat> %1412, i64 1, !dbg !18
  %1414 = fmul <2 x bfloat> %73, %1306, !dbg !18
  %1415 = extractelement <2 x bfloat> %1414, i64 0, !dbg !18
  %1416 = fmul <2 x bfloat> %73, %1306, !dbg !18
  %1417 = extractelement <2 x bfloat> %1416, i64 1, !dbg !18
  %1418 = fmul <2 x bfloat> %76, %1308, !dbg !18
  %1419 = extractelement <2 x bfloat> %1418, i64 0, !dbg !18
  %1420 = fmul <2 x bfloat> %76, %1308, !dbg !18
  %1421 = extractelement <2 x bfloat> %1420, i64 1, !dbg !18
  %1422 = fmul <2 x bfloat> %79, %1313, !dbg !18
  %1423 = extractelement <2 x bfloat> %1422, i64 0, !dbg !18
  %1424 = fmul <2 x bfloat> %79, %1313, !dbg !18
  %1425 = extractelement <2 x bfloat> %1424, i64 1, !dbg !18
  %1426 = fmul <2 x bfloat> %82, %1315, !dbg !18
  %1427 = extractelement <2 x bfloat> %1426, i64 0, !dbg !18
  %1428 = fmul <2 x bfloat> %82, %1315, !dbg !18
  %1429 = extractelement <2 x bfloat> %1428, i64 1, !dbg !18
  %1430 = fmul <2 x bfloat> %85, %1317, !dbg !18
  %1431 = extractelement <2 x bfloat> %1430, i64 0, !dbg !18
  %1432 = fmul <2 x bfloat> %85, %1317, !dbg !18
  %1433 = extractelement <2 x bfloat> %1432, i64 1, !dbg !18
  %1434 = fmul <2 x bfloat> %88, %1319, !dbg !18
  %1435 = extractelement <2 x bfloat> %1434, i64 0, !dbg !18
  %1436 = fmul <2 x bfloat> %88, %1319, !dbg !18
  %1437 = extractelement <2 x bfloat> %1436, i64 1, !dbg !18
  %1438 = fpext bfloat %1343 to float, !dbg !38
  %1439 = fpext bfloat %1345 to float, !dbg !38
  %1440 = fpext bfloat %1347 to float, !dbg !38
  %1441 = fpext bfloat %1349 to float, !dbg !38
  %1442 = fpext bfloat %1351 to float, !dbg !38
  %1443 = fpext bfloat %1353 to float, !dbg !38
  %1444 = fpext bfloat %1355 to float, !dbg !38
  %1445 = fpext bfloat %1357 to float, !dbg !38
  %1446 = fpext bfloat %1359 to float, !dbg !38
  %1447 = fpext bfloat %1361 to float, !dbg !38
  %1448 = fpext bfloat %1363 to float, !dbg !38
  %1449 = fpext bfloat %1365 to float, !dbg !38
  %1450 = fpext bfloat %1367 to float, !dbg !38
  %1451 = fpext bfloat %1369 to float, !dbg !38
  %1452 = fpext bfloat %1371 to float, !dbg !38
  %1453 = fpext bfloat %1373 to float, !dbg !38
  %1454 = fpext bfloat %1375 to float, !dbg !38
  %1455 = fpext bfloat %1377 to float, !dbg !38
  %1456 = fpext bfloat %1379 to float, !dbg !38
  %1457 = fpext bfloat %1381 to float, !dbg !38
  %1458 = fpext bfloat %1383 to float, !dbg !38
  %1459 = fpext bfloat %1385 to float, !dbg !38
  %1460 = fpext bfloat %1387 to float, !dbg !38
  %1461 = fpext bfloat %1389 to float, !dbg !38
  %1462 = fpext bfloat %1391 to float, !dbg !38
  %1463 = fpext bfloat %1393 to float, !dbg !38
  %1464 = fpext bfloat %1395 to float, !dbg !38
  %1465 = fpext bfloat %1397 to float, !dbg !38
  %1466 = fpext bfloat %1399 to float, !dbg !38
  %1467 = fpext bfloat %1401 to float, !dbg !38
  %1468 = fpext bfloat %1403 to float, !dbg !38
  %1469 = fpext bfloat %1405 to float, !dbg !38
  %1470 = fpext bfloat %1407 to float, !dbg !38
  %1471 = fpext bfloat %1409 to float, !dbg !38
  %1472 = fpext bfloat %1411 to float, !dbg !38
  %1473 = fpext bfloat %1413 to float, !dbg !38
  %1474 = fpext bfloat %1415 to float, !dbg !38
  %1475 = fpext bfloat %1417 to float, !dbg !38
  %1476 = fpext bfloat %1419 to float, !dbg !38
  %1477 = fpext bfloat %1421 to float, !dbg !38
  %1478 = fpext bfloat %1423 to float, !dbg !38
  %1479 = fpext bfloat %1425 to float, !dbg !38
  %1480 = fpext bfloat %1427 to float, !dbg !38
  %1481 = fpext bfloat %1429 to float, !dbg !38
  %1482 = fpext bfloat %1431 to float, !dbg !38
  %1483 = fpext bfloat %1433 to float, !dbg !38
  %1484 = fpext bfloat %1435 to float, !dbg !38
  %1485 = fpext bfloat %1437 to float, !dbg !38
  %1486 = fmul float %1212, %1438, !dbg !38
  %1487 = fmul float %1213, %1439, !dbg !38
  %1488 = fmul float %1210, %1440, !dbg !38
  %1489 = fmul float %1211, %1441, !dbg !38
  %1490 = fmul float %1208, %1442, !dbg !38
  %1491 = fmul float %1209, %1443, !dbg !38
  %1492 = fmul float %1206, %1444, !dbg !38
  %1493 = fmul float %1207, %1445, !dbg !38
  %1494 = fmul float %1204, %1446, !dbg !38
  %1495 = fmul float %1205, %1447, !dbg !38
  %1496 = fmul float %1202, %1448, !dbg !38
  %1497 = fmul float %1203, %1449, !dbg !38
  %1498 = fmul float %1200, %1450, !dbg !38
  %1499 = fmul float %1201, %1451, !dbg !38
  %1500 = fmul float %1198, %1452, !dbg !38
  %1501 = fmul float %1199, %1453, !dbg !38
  %1502 = fmul float %1212, %1454, !dbg !38
  %1503 = fmul float %1213, %1455, !dbg !38
  %1504 = fmul float %1210, %1456, !dbg !38
  %1505 = fmul float %1211, %1457, !dbg !38
  %1506 = fmul float %1208, %1458, !dbg !38
  %1507 = fmul float %1209, %1459, !dbg !38
  %1508 = fmul float %1206, %1460, !dbg !38
  %1509 = fmul float %1207, %1461, !dbg !38
  %1510 = fmul float %1204, %1462, !dbg !38
  %1511 = fmul float %1205, %1463, !dbg !38
  %1512 = fmul float %1202, %1464, !dbg !38
  %1513 = fmul float %1203, %1465, !dbg !38
  %1514 = fmul float %1200, %1466, !dbg !38
  %1515 = fmul float %1201, %1467, !dbg !38
  %1516 = fmul float %1198, %1468, !dbg !38
  %1517 = fmul float %1199, %1469, !dbg !38
  %1518 = fmul float %1212, %1470, !dbg !38
  %1519 = fmul float %1213, %1471, !dbg !38
  %1520 = fmul float %1210, %1472, !dbg !38
  %1521 = fmul float %1211, %1473, !dbg !38
  %1522 = fmul float %1208, %1474, !dbg !38
  %1523 = fmul float %1209, %1475, !dbg !38
  %1524 = fmul float %1206, %1476, !dbg !38
  %1525 = fmul float %1207, %1477, !dbg !38
  %1526 = fmul float %1204, %1478, !dbg !38
  %1527 = fmul float %1205, %1479, !dbg !38
  %1528 = fmul float %1202, %1480, !dbg !38
  %1529 = fmul float %1203, %1481, !dbg !38
  %1530 = fmul float %1200, %1482, !dbg !38
  %1531 = fmul float %1201, %1483, !dbg !38
  %1532 = fmul float %1198, %1484, !dbg !38
  %1533 = fmul float %1199, %1485, !dbg !38
  %1534 = fptrunc float %1486 to bfloat, !dbg !40
  %1535 = fptrunc float %1487 to bfloat, !dbg !40
  %1536 = fptrunc float %1488 to bfloat, !dbg !40
  %1537 = fptrunc float %1489 to bfloat, !dbg !40
  %1538 = fptrunc float %1490 to bfloat, !dbg !40
  %1539 = fptrunc float %1491 to bfloat, !dbg !40
  %1540 = fptrunc float %1492 to bfloat, !dbg !40
  %1541 = fptrunc float %1493 to bfloat, !dbg !40
  %1542 = fptrunc float %1494 to bfloat, !dbg !40
  %1543 = fptrunc float %1495 to bfloat, !dbg !40
  %1544 = fptrunc float %1496 to bfloat, !dbg !40
  %1545 = fptrunc float %1497 to bfloat, !dbg !40
  %1546 = fptrunc float %1498 to bfloat, !dbg !40
  %1547 = fptrunc float %1499 to bfloat, !dbg !40
  %1548 = fptrunc float %1500 to bfloat, !dbg !40
  %1549 = fptrunc float %1501 to bfloat, !dbg !40
  %1550 = fptrunc float %1502 to bfloat, !dbg !40
  %1551 = fptrunc float %1503 to bfloat, !dbg !40
  %1552 = fptrunc float %1504 to bfloat, !dbg !40
  %1553 = fptrunc float %1505 to bfloat, !dbg !40
  %1554 = fptrunc float %1506 to bfloat, !dbg !40
  %1555 = fptrunc float %1507 to bfloat, !dbg !40
  %1556 = fptrunc float %1508 to bfloat, !dbg !40
  %1557 = fptrunc float %1509 to bfloat, !dbg !40
  %1558 = fptrunc float %1510 to bfloat, !dbg !40
  %1559 = fptrunc float %1511 to bfloat, !dbg !40
  %1560 = fptrunc float %1512 to bfloat, !dbg !40
  %1561 = fptrunc float %1513 to bfloat, !dbg !40
  %1562 = fptrunc float %1514 to bfloat, !dbg !40
  %1563 = fptrunc float %1515 to bfloat, !dbg !40
  %1564 = fptrunc float %1516 to bfloat, !dbg !40
  %1565 = fptrunc float %1517 to bfloat, !dbg !40
  %1566 = fptrunc float %1518 to bfloat, !dbg !40
  %1567 = fptrunc float %1519 to bfloat, !dbg !40
  %1568 = fptrunc float %1520 to bfloat, !dbg !40
  %1569 = fptrunc float %1521 to bfloat, !dbg !40
  %1570 = fptrunc float %1522 to bfloat, !dbg !40
  %1571 = fptrunc float %1523 to bfloat, !dbg !40
  %1572 = fptrunc float %1524 to bfloat, !dbg !40
  %1573 = fptrunc float %1525 to bfloat, !dbg !40
  %1574 = fptrunc float %1526 to bfloat, !dbg !40
  %1575 = fptrunc float %1527 to bfloat, !dbg !40
  %1576 = fptrunc float %1528 to bfloat, !dbg !40
  %1577 = fptrunc float %1529 to bfloat, !dbg !40
  %1578 = fptrunc float %1530 to bfloat, !dbg !40
  %1579 = fptrunc float %1531 to bfloat, !dbg !40
  %1580 = fptrunc float %1532 to bfloat, !dbg !40
  %1581 = fptrunc float %1533 to bfloat, !dbg !40
  %1582 = fmul <2 x bfloat> %67, %1324, !dbg !18
  %1583 = fpext <2 x bfloat> %1582 to <2 x float>, !dbg !38
  %1584 = fmul <2 x float> %1165, %1583, !dbg !38
  %1585 = fptrunc <2 x float> %1584 to <2 x bfloat>, !dbg !40
  %1586 = fmul <2 x bfloat> %70, %1326, !dbg !18
  %1587 = fpext <2 x bfloat> %1586 to <2 x float>, !dbg !38
  %1588 = fmul <2 x float> %1167, %1587, !dbg !38
  %1589 = fptrunc <2 x float> %1588 to <2 x bfloat>, !dbg !40
  %1590 = fmul <2 x bfloat> %73, %1328, !dbg !18
  %1591 = fpext <2 x bfloat> %1590 to <2 x float>, !dbg !38
  %1592 = fmul <2 x float> %1169, %1591, !dbg !38
  %1593 = fptrunc <2 x float> %1592 to <2 x bfloat>, !dbg !40
  %1594 = fmul <2 x bfloat> %76, %1330, !dbg !18
  %1595 = fpext <2 x bfloat> %1594 to <2 x float>, !dbg !38
  %1596 = fmul <2 x float> %1171, %1595, !dbg !38
  %1597 = fptrunc <2 x float> %1596 to <2 x bfloat>, !dbg !40
  %1598 = fmul <2 x bfloat> %79, %1335, !dbg !18
  %1599 = fpext <2 x bfloat> %1598 to <2 x float>, !dbg !38
  %1600 = fmul <2 x float> %1173, %1599, !dbg !38
  %1601 = fptrunc <2 x float> %1600 to <2 x bfloat>, !dbg !40
  %1602 = fmul <2 x bfloat> %82, %1337, !dbg !18
  %1603 = fpext <2 x bfloat> %1602 to <2 x float>, !dbg !38
  %1604 = fmul <2 x float> %1175, %1603, !dbg !38
  %1605 = fptrunc <2 x float> %1604 to <2 x bfloat>, !dbg !40
  %1606 = fmul <2 x bfloat> %85, %1339, !dbg !18
  %1607 = fpext <2 x bfloat> %1606 to <2 x float>, !dbg !38
  %1608 = fmul <2 x float> %1177, %1607, !dbg !38
  %1609 = fptrunc <2 x float> %1608 to <2 x bfloat>, !dbg !40
  %1610 = fmul <2 x bfloat> %88, %1341, !dbg !18
  %1611 = fpext <2 x bfloat> %1610 to <2 x float>, !dbg !38
  %1612 = fmul <2 x float> %1179, %1611, !dbg !38
  %1613 = fptrunc <2 x float> %1612 to <2 x bfloat>, !dbg !40
  %1614 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %340) #3, !dbg !22
  %1615 = extractvalue { i32, i32, i32, i32 } %1614, 0, !dbg !22
  %1616 = extractvalue { i32, i32, i32, i32 } %1614, 1, !dbg !22
  %1617 = extractvalue { i32, i32, i32, i32 } %1614, 2, !dbg !22
  %1618 = extractvalue { i32, i32, i32, i32 } %1614, 3, !dbg !22
  %1619 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %343) #3, !dbg !22
  %1620 = extractvalue { i32, i32, i32, i32 } %1619, 0, !dbg !22
  %1621 = extractvalue { i32, i32, i32, i32 } %1619, 1, !dbg !22
  %1622 = extractvalue { i32, i32, i32, i32 } %1619, 2, !dbg !22
  %1623 = extractvalue { i32, i32, i32, i32 } %1619, 3, !dbg !22
  %1624 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %346) #3, !dbg !22
  %1625 = extractvalue { i32, i32, i32, i32 } %1624, 0, !dbg !22
  %1626 = extractvalue { i32, i32, i32, i32 } %1624, 1, !dbg !22
  %1627 = extractvalue { i32, i32, i32, i32 } %1624, 2, !dbg !22
  %1628 = extractvalue { i32, i32, i32, i32 } %1624, 3, !dbg !22
  %1629 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %349) #3, !dbg !22
  %1630 = extractvalue { i32, i32, i32, i32 } %1629, 0, !dbg !22
  %1631 = extractvalue { i32, i32, i32, i32 } %1629, 1, !dbg !22
  %1632 = extractvalue { i32, i32, i32, i32 } %1629, 2, !dbg !22
  %1633 = extractvalue { i32, i32, i32, i32 } %1629, 3, !dbg !22
  %1634 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %351) #3, !dbg !22
  %1635 = extractvalue { i32, i32, i32, i32 } %1634, 0, !dbg !22
  %1636 = extractvalue { i32, i32, i32, i32 } %1634, 1, !dbg !22
  %1637 = extractvalue { i32, i32, i32, i32 } %1634, 2, !dbg !22
  %1638 = extractvalue { i32, i32, i32, i32 } %1634, 3, !dbg !22
  %1639 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %354) #3, !dbg !22
  %1640 = extractvalue { i32, i32, i32, i32 } %1639, 0, !dbg !22
  %1641 = extractvalue { i32, i32, i32, i32 } %1639, 1, !dbg !22
  %1642 = extractvalue { i32, i32, i32, i32 } %1639, 2, !dbg !22
  %1643 = extractvalue { i32, i32, i32, i32 } %1639, 3, !dbg !22
  %1644 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %357) #3, !dbg !22
  %1645 = extractvalue { i32, i32, i32, i32 } %1644, 0, !dbg !22
  %1646 = extractvalue { i32, i32, i32, i32 } %1644, 1, !dbg !22
  %1647 = extractvalue { i32, i32, i32, i32 } %1644, 2, !dbg !22
  %1648 = extractvalue { i32, i32, i32, i32 } %1644, 3, !dbg !22
  %1649 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %360) #3, !dbg !22
  %1650 = extractvalue { i32, i32, i32, i32 } %1649, 0, !dbg !22
  %1651 = extractvalue { i32, i32, i32, i32 } %1649, 1, !dbg !22
  %1652 = extractvalue { i32, i32, i32, i32 } %1649, 2, !dbg !22
  %1653 = extractvalue { i32, i32, i32, i32 } %1649, 3, !dbg !22
  %1654 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %362) #3, !dbg !22
  %1655 = extractvalue { i32, i32, i32, i32 } %1654, 0, !dbg !22
  %1656 = extractvalue { i32, i32, i32, i32 } %1654, 1, !dbg !22
  %1657 = extractvalue { i32, i32, i32, i32 } %1654, 2, !dbg !22
  %1658 = extractvalue { i32, i32, i32, i32 } %1654, 3, !dbg !22
  %1659 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %365) #3, !dbg !22
  %1660 = extractvalue { i32, i32, i32, i32 } %1659, 0, !dbg !22
  %1661 = extractvalue { i32, i32, i32, i32 } %1659, 1, !dbg !22
  %1662 = extractvalue { i32, i32, i32, i32 } %1659, 2, !dbg !22
  %1663 = extractvalue { i32, i32, i32, i32 } %1659, 3, !dbg !22
  %1664 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %368) #3, !dbg !22
  %1665 = extractvalue { i32, i32, i32, i32 } %1664, 0, !dbg !22
  %1666 = extractvalue { i32, i32, i32, i32 } %1664, 1, !dbg !22
  %1667 = extractvalue { i32, i32, i32, i32 } %1664, 2, !dbg !22
  %1668 = extractvalue { i32, i32, i32, i32 } %1664, 3, !dbg !22
  %1669 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %371) #3, !dbg !22
  %1670 = extractvalue { i32, i32, i32, i32 } %1669, 0, !dbg !22
  %1671 = extractvalue { i32, i32, i32, i32 } %1669, 1, !dbg !22
  %1672 = extractvalue { i32, i32, i32, i32 } %1669, 2, !dbg !22
  %1673 = extractvalue { i32, i32, i32, i32 } %1669, 3, !dbg !22
  %1674 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %373) #3, !dbg !22
  %1675 = extractvalue { i32, i32, i32, i32 } %1674, 0, !dbg !22
  %1676 = extractvalue { i32, i32, i32, i32 } %1674, 1, !dbg !22
  %1677 = extractvalue { i32, i32, i32, i32 } %1674, 2, !dbg !22
  %1678 = extractvalue { i32, i32, i32, i32 } %1674, 3, !dbg !22
  %1679 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %376) #3, !dbg !22
  %1680 = extractvalue { i32, i32, i32, i32 } %1679, 0, !dbg !22
  %1681 = extractvalue { i32, i32, i32, i32 } %1679, 1, !dbg !22
  %1682 = extractvalue { i32, i32, i32, i32 } %1679, 2, !dbg !22
  %1683 = extractvalue { i32, i32, i32, i32 } %1679, 3, !dbg !22
  %1684 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %379) #3, !dbg !22
  %1685 = extractvalue { i32, i32, i32, i32 } %1684, 0, !dbg !22
  %1686 = extractvalue { i32, i32, i32, i32 } %1684, 1, !dbg !22
  %1687 = extractvalue { i32, i32, i32, i32 } %1684, 2, !dbg !22
  %1688 = extractvalue { i32, i32, i32, i32 } %1684, 3, !dbg !22
  %1689 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 {$0, $1, $2, $3}, [$4];", "=r,=r,=r,=r,r"(i32 %382) #3, !dbg !22
  %1690 = extractvalue { i32, i32, i32, i32 } %1689, 0, !dbg !22
  %1691 = extractvalue { i32, i32, i32, i32 } %1689, 1, !dbg !22
  %1692 = extractvalue { i32, i32, i32, i32 } %1689, 2, !dbg !22
  %1693 = extractvalue { i32, i32, i32, i32 } %1689, 3, !dbg !22
  %1694 = insertelement <2 x bfloat> poison, bfloat %1534, i64 0, !dbg !41
  %1695 = insertelement <2 x bfloat> %1694, bfloat %1535, i64 1, !dbg !41
  %1696 = bitcast <2 x bfloat> %1695 to i32, !dbg !41
  %1697 = insertelement <2 x bfloat> poison, bfloat %1536, i64 0, !dbg !41
  %1698 = insertelement <2 x bfloat> %1697, bfloat %1537, i64 1, !dbg !41
  %1699 = bitcast <2 x bfloat> %1698 to i32, !dbg !41
  %1700 = insertelement <2 x bfloat> poison, bfloat %1538, i64 0, !dbg !41
  %1701 = insertelement <2 x bfloat> %1700, bfloat %1539, i64 1, !dbg !41
  %1702 = bitcast <2 x bfloat> %1701 to i32, !dbg !41
  %1703 = insertelement <2 x bfloat> poison, bfloat %1540, i64 0, !dbg !41
  %1704 = insertelement <2 x bfloat> %1703, bfloat %1541, i64 1, !dbg !41
  %1705 = bitcast <2 x bfloat> %1704 to i32, !dbg !41
  %1706 = insertelement <2 x bfloat> poison, bfloat %1542, i64 0, !dbg !41
  %1707 = insertelement <2 x bfloat> %1706, bfloat %1543, i64 1, !dbg !41
  %1708 = bitcast <2 x bfloat> %1707 to i32, !dbg !41
  %1709 = insertelement <2 x bfloat> poison, bfloat %1544, i64 0, !dbg !41
  %1710 = insertelement <2 x bfloat> %1709, bfloat %1545, i64 1, !dbg !41
  %1711 = bitcast <2 x bfloat> %1710 to i32, !dbg !41
  %1712 = insertelement <2 x bfloat> poison, bfloat %1546, i64 0, !dbg !41
  %1713 = insertelement <2 x bfloat> %1712, bfloat %1547, i64 1, !dbg !41
  %1714 = bitcast <2 x bfloat> %1713 to i32, !dbg !41
  %1715 = insertelement <2 x bfloat> poison, bfloat %1548, i64 0, !dbg !41
  %1716 = insertelement <2 x bfloat> %1715, bfloat %1549, i64 1, !dbg !41
  %1717 = bitcast <2 x bfloat> %1716 to i32, !dbg !41
  %1718 = insertelement <2 x bfloat> poison, bfloat %1550, i64 0, !dbg !41
  %1719 = insertelement <2 x bfloat> %1718, bfloat %1551, i64 1, !dbg !41
  %1720 = bitcast <2 x bfloat> %1719 to i32, !dbg !41
  %1721 = insertelement <2 x bfloat> poison, bfloat %1552, i64 0, !dbg !41
  %1722 = insertelement <2 x bfloat> %1721, bfloat %1553, i64 1, !dbg !41
  %1723 = bitcast <2 x bfloat> %1722 to i32, !dbg !41
  %1724 = insertelement <2 x bfloat> poison, bfloat %1554, i64 0, !dbg !41
  %1725 = insertelement <2 x bfloat> %1724, bfloat %1555, i64 1, !dbg !41
  %1726 = bitcast <2 x bfloat> %1725 to i32, !dbg !41
  %1727 = insertelement <2 x bfloat> poison, bfloat %1556, i64 0, !dbg !41
  %1728 = insertelement <2 x bfloat> %1727, bfloat %1557, i64 1, !dbg !41
  %1729 = bitcast <2 x bfloat> %1728 to i32, !dbg !41
  %1730 = insertelement <2 x bfloat> poison, bfloat %1558, i64 0, !dbg !41
  %1731 = insertelement <2 x bfloat> %1730, bfloat %1559, i64 1, !dbg !41
  %1732 = bitcast <2 x bfloat> %1731 to i32, !dbg !41
  %1733 = insertelement <2 x bfloat> poison, bfloat %1560, i64 0, !dbg !41
  %1734 = insertelement <2 x bfloat> %1733, bfloat %1561, i64 1, !dbg !41
  %1735 = bitcast <2 x bfloat> %1734 to i32, !dbg !41
  %1736 = insertelement <2 x bfloat> poison, bfloat %1562, i64 0, !dbg !41
  %1737 = insertelement <2 x bfloat> %1736, bfloat %1563, i64 1, !dbg !41
  %1738 = bitcast <2 x bfloat> %1737 to i32, !dbg !41
  %1739 = insertelement <2 x bfloat> poison, bfloat %1564, i64 0, !dbg !41
  %1740 = insertelement <2 x bfloat> %1739, bfloat %1565, i64 1, !dbg !41
  %1741 = bitcast <2 x bfloat> %1740 to i32, !dbg !41
  %1742 = insertelement <2 x bfloat> poison, bfloat %1566, i64 0, !dbg !41
  %1743 = insertelement <2 x bfloat> %1742, bfloat %1567, i64 1, !dbg !41
  %1744 = bitcast <2 x bfloat> %1743 to i32, !dbg !41
  %1745 = insertelement <2 x bfloat> poison, bfloat %1568, i64 0, !dbg !41
  %1746 = insertelement <2 x bfloat> %1745, bfloat %1569, i64 1, !dbg !41
  %1747 = bitcast <2 x bfloat> %1746 to i32, !dbg !41
  %1748 = insertelement <2 x bfloat> poison, bfloat %1570, i64 0, !dbg !41
  %1749 = insertelement <2 x bfloat> %1748, bfloat %1571, i64 1, !dbg !41
  %1750 = bitcast <2 x bfloat> %1749 to i32, !dbg !41
  %1751 = insertelement <2 x bfloat> poison, bfloat %1572, i64 0, !dbg !41
  %1752 = insertelement <2 x bfloat> %1751, bfloat %1573, i64 1, !dbg !41
  %1753 = bitcast <2 x bfloat> %1752 to i32, !dbg !41
  %1754 = insertelement <2 x bfloat> poison, bfloat %1574, i64 0, !dbg !41
  %1755 = insertelement <2 x bfloat> %1754, bfloat %1575, i64 1, !dbg !41
  %1756 = bitcast <2 x bfloat> %1755 to i32, !dbg !41
  %1757 = insertelement <2 x bfloat> poison, bfloat %1576, i64 0, !dbg !41
  %1758 = insertelement <2 x bfloat> %1757, bfloat %1577, i64 1, !dbg !41
  %1759 = bitcast <2 x bfloat> %1758 to i32, !dbg !41
  %1760 = insertelement <2 x bfloat> poison, bfloat %1578, i64 0, !dbg !41
  %1761 = insertelement <2 x bfloat> %1760, bfloat %1579, i64 1, !dbg !41
  %1762 = bitcast <2 x bfloat> %1761 to i32, !dbg !41
  %1763 = insertelement <2 x bfloat> poison, bfloat %1580, i64 0, !dbg !41
  %1764 = insertelement <2 x bfloat> %1763, bfloat %1581, i64 1, !dbg !41
  %1765 = bitcast <2 x bfloat> %1764 to i32, !dbg !41
  %1766 = bitcast <2 x bfloat> %1585 to i32, !dbg !41
  %1767 = bitcast <2 x bfloat> %1589 to i32, !dbg !41
  %1768 = bitcast <2 x bfloat> %1593 to i32, !dbg !41
  %1769 = bitcast <2 x bfloat> %1597 to i32, !dbg !41
  %1770 = bitcast <2 x bfloat> %1601 to i32, !dbg !41
  %1771 = bitcast <2 x bfloat> %1605 to i32, !dbg !41
  %1772 = bitcast <2 x bfloat> %1609 to i32, !dbg !41
  %1773 = bitcast <2 x bfloat> %1613 to i32, !dbg !41
  %1774 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1615, i32 %1616, i32 %1617, i32 %1618, i32 %1696, i32 %1699) #3, !dbg !41
  %1775 = extractvalue { float, float, float, float } %1774, 0, !dbg !41
  %1776 = extractvalue { float, float, float, float } %1774, 1, !dbg !41
  %1777 = extractvalue { float, float, float, float } %1774, 2, !dbg !41
  %1778 = extractvalue { float, float, float, float } %1774, 3, !dbg !41
  %1779 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1615, i32 %1616, i32 %1617, i32 %1618, i32 %1720, i32 %1723) #3, !dbg !41
  %1780 = extractvalue { float, float, float, float } %1779, 0, !dbg !41
  %1781 = extractvalue { float, float, float, float } %1779, 1, !dbg !41
  %1782 = extractvalue { float, float, float, float } %1779, 2, !dbg !41
  %1783 = extractvalue { float, float, float, float } %1779, 3, !dbg !41
  %1784 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1615, i32 %1616, i32 %1617, i32 %1618, i32 %1744, i32 %1747) #3, !dbg !41
  %1785 = extractvalue { float, float, float, float } %1784, 0, !dbg !41
  %1786 = extractvalue { float, float, float, float } %1784, 1, !dbg !41
  %1787 = extractvalue { float, float, float, float } %1784, 2, !dbg !41
  %1788 = extractvalue { float, float, float, float } %1784, 3, !dbg !41
  %1789 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1615, i32 %1616, i32 %1617, i32 %1618, i32 %1766, i32 %1767) #3, !dbg !41
  %1790 = extractvalue { float, float, float, float } %1789, 0, !dbg !41
  %1791 = extractvalue { float, float, float, float } %1789, 1, !dbg !41
  %1792 = extractvalue { float, float, float, float } %1789, 2, !dbg !41
  %1793 = extractvalue { float, float, float, float } %1789, 3, !dbg !41
  %1794 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1635, i32 %1636, i32 %1637, i32 %1638, i32 %1696, i32 %1699) #3, !dbg !41
  %1795 = extractvalue { float, float, float, float } %1794, 0, !dbg !41
  %1796 = extractvalue { float, float, float, float } %1794, 1, !dbg !41
  %1797 = extractvalue { float, float, float, float } %1794, 2, !dbg !41
  %1798 = extractvalue { float, float, float, float } %1794, 3, !dbg !41
  %1799 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1635, i32 %1636, i32 %1637, i32 %1638, i32 %1720, i32 %1723) #3, !dbg !41
  %1800 = extractvalue { float, float, float, float } %1799, 0, !dbg !41
  %1801 = extractvalue { float, float, float, float } %1799, 1, !dbg !41
  %1802 = extractvalue { float, float, float, float } %1799, 2, !dbg !41
  %1803 = extractvalue { float, float, float, float } %1799, 3, !dbg !41
  %1804 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1635, i32 %1636, i32 %1637, i32 %1638, i32 %1744, i32 %1747) #3, !dbg !41
  %1805 = extractvalue { float, float, float, float } %1804, 0, !dbg !41
  %1806 = extractvalue { float, float, float, float } %1804, 1, !dbg !41
  %1807 = extractvalue { float, float, float, float } %1804, 2, !dbg !41
  %1808 = extractvalue { float, float, float, float } %1804, 3, !dbg !41
  %1809 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1635, i32 %1636, i32 %1637, i32 %1638, i32 %1766, i32 %1767) #3, !dbg !41
  %1810 = extractvalue { float, float, float, float } %1809, 0, !dbg !41
  %1811 = extractvalue { float, float, float, float } %1809, 1, !dbg !41
  %1812 = extractvalue { float, float, float, float } %1809, 2, !dbg !41
  %1813 = extractvalue { float, float, float, float } %1809, 3, !dbg !41
  %1814 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1655, i32 %1656, i32 %1657, i32 %1658, i32 %1696, i32 %1699) #3, !dbg !41
  %1815 = extractvalue { float, float, float, float } %1814, 0, !dbg !41
  %1816 = extractvalue { float, float, float, float } %1814, 1, !dbg !41
  %1817 = extractvalue { float, float, float, float } %1814, 2, !dbg !41
  %1818 = extractvalue { float, float, float, float } %1814, 3, !dbg !41
  %1819 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1655, i32 %1656, i32 %1657, i32 %1658, i32 %1720, i32 %1723) #3, !dbg !41
  %1820 = extractvalue { float, float, float, float } %1819, 0, !dbg !41
  %1821 = extractvalue { float, float, float, float } %1819, 1, !dbg !41
  %1822 = extractvalue { float, float, float, float } %1819, 2, !dbg !41
  %1823 = extractvalue { float, float, float, float } %1819, 3, !dbg !41
  %1824 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1655, i32 %1656, i32 %1657, i32 %1658, i32 %1744, i32 %1747) #3, !dbg !41
  %1825 = extractvalue { float, float, float, float } %1824, 0, !dbg !41
  %1826 = extractvalue { float, float, float, float } %1824, 1, !dbg !41
  %1827 = extractvalue { float, float, float, float } %1824, 2, !dbg !41
  %1828 = extractvalue { float, float, float, float } %1824, 3, !dbg !41
  %1829 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1655, i32 %1656, i32 %1657, i32 %1658, i32 %1766, i32 %1767) #3, !dbg !41
  %1830 = extractvalue { float, float, float, float } %1829, 0, !dbg !41
  %1831 = extractvalue { float, float, float, float } %1829, 1, !dbg !41
  %1832 = extractvalue { float, float, float, float } %1829, 2, !dbg !41
  %1833 = extractvalue { float, float, float, float } %1829, 3, !dbg !41
  %1834 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1675, i32 %1676, i32 %1677, i32 %1678, i32 %1696, i32 %1699) #3, !dbg !41
  %1835 = extractvalue { float, float, float, float } %1834, 0, !dbg !41
  %1836 = extractvalue { float, float, float, float } %1834, 1, !dbg !41
  %1837 = extractvalue { float, float, float, float } %1834, 2, !dbg !41
  %1838 = extractvalue { float, float, float, float } %1834, 3, !dbg !41
  %1839 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1675, i32 %1676, i32 %1677, i32 %1678, i32 %1720, i32 %1723) #3, !dbg !41
  %1840 = extractvalue { float, float, float, float } %1839, 0, !dbg !41
  %1841 = extractvalue { float, float, float, float } %1839, 1, !dbg !41
  %1842 = extractvalue { float, float, float, float } %1839, 2, !dbg !41
  %1843 = extractvalue { float, float, float, float } %1839, 3, !dbg !41
  %1844 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1675, i32 %1676, i32 %1677, i32 %1678, i32 %1744, i32 %1747) #3, !dbg !41
  %1845 = extractvalue { float, float, float, float } %1844, 0, !dbg !41
  %1846 = extractvalue { float, float, float, float } %1844, 1, !dbg !41
  %1847 = extractvalue { float, float, float, float } %1844, 2, !dbg !41
  %1848 = extractvalue { float, float, float, float } %1844, 3, !dbg !41
  %1849 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %1675, i32 %1676, i32 %1677, i32 %1678, i32 %1766, i32 %1767) #3, !dbg !41
  %1850 = extractvalue { float, float, float, float } %1849, 0, !dbg !41
  %1851 = extractvalue { float, float, float, float } %1849, 1, !dbg !41
  %1852 = extractvalue { float, float, float, float } %1849, 2, !dbg !41
  %1853 = extractvalue { float, float, float, float } %1849, 3, !dbg !41
  %1854 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1775, float %1776, float %1777, float %1778, i32 %1620, i32 %1621, i32 %1622, i32 %1623, i32 %1702, i32 %1705) #3, !dbg !41
  %1855 = extractvalue { float, float, float, float } %1854, 0, !dbg !41
  %1856 = extractvalue { float, float, float, float } %1854, 1, !dbg !41
  %1857 = extractvalue { float, float, float, float } %1854, 2, !dbg !41
  %1858 = extractvalue { float, float, float, float } %1854, 3, !dbg !41
  %1859 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1780, float %1781, float %1782, float %1783, i32 %1620, i32 %1621, i32 %1622, i32 %1623, i32 %1726, i32 %1729) #3, !dbg !41
  %1860 = extractvalue { float, float, float, float } %1859, 0, !dbg !41
  %1861 = extractvalue { float, float, float, float } %1859, 1, !dbg !41
  %1862 = extractvalue { float, float, float, float } %1859, 2, !dbg !41
  %1863 = extractvalue { float, float, float, float } %1859, 3, !dbg !41
  %1864 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1785, float %1786, float %1787, float %1788, i32 %1620, i32 %1621, i32 %1622, i32 %1623, i32 %1750, i32 %1753) #3, !dbg !41
  %1865 = extractvalue { float, float, float, float } %1864, 0, !dbg !41
  %1866 = extractvalue { float, float, float, float } %1864, 1, !dbg !41
  %1867 = extractvalue { float, float, float, float } %1864, 2, !dbg !41
  %1868 = extractvalue { float, float, float, float } %1864, 3, !dbg !41
  %1869 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1790, float %1791, float %1792, float %1793, i32 %1620, i32 %1621, i32 %1622, i32 %1623, i32 %1768, i32 %1769) #3, !dbg !41
  %1870 = extractvalue { float, float, float, float } %1869, 0, !dbg !41
  %1871 = extractvalue { float, float, float, float } %1869, 1, !dbg !41
  %1872 = extractvalue { float, float, float, float } %1869, 2, !dbg !41
  %1873 = extractvalue { float, float, float, float } %1869, 3, !dbg !41
  %1874 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1795, float %1796, float %1797, float %1798, i32 %1640, i32 %1641, i32 %1642, i32 %1643, i32 %1702, i32 %1705) #3, !dbg !41
  %1875 = extractvalue { float, float, float, float } %1874, 0, !dbg !41
  %1876 = extractvalue { float, float, float, float } %1874, 1, !dbg !41
  %1877 = extractvalue { float, float, float, float } %1874, 2, !dbg !41
  %1878 = extractvalue { float, float, float, float } %1874, 3, !dbg !41
  %1879 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1800, float %1801, float %1802, float %1803, i32 %1640, i32 %1641, i32 %1642, i32 %1643, i32 %1726, i32 %1729) #3, !dbg !41
  %1880 = extractvalue { float, float, float, float } %1879, 0, !dbg !41
  %1881 = extractvalue { float, float, float, float } %1879, 1, !dbg !41
  %1882 = extractvalue { float, float, float, float } %1879, 2, !dbg !41
  %1883 = extractvalue { float, float, float, float } %1879, 3, !dbg !41
  %1884 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1805, float %1806, float %1807, float %1808, i32 %1640, i32 %1641, i32 %1642, i32 %1643, i32 %1750, i32 %1753) #3, !dbg !41
  %1885 = extractvalue { float, float, float, float } %1884, 0, !dbg !41
  %1886 = extractvalue { float, float, float, float } %1884, 1, !dbg !41
  %1887 = extractvalue { float, float, float, float } %1884, 2, !dbg !41
  %1888 = extractvalue { float, float, float, float } %1884, 3, !dbg !41
  %1889 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1810, float %1811, float %1812, float %1813, i32 %1640, i32 %1641, i32 %1642, i32 %1643, i32 %1768, i32 %1769) #3, !dbg !41
  %1890 = extractvalue { float, float, float, float } %1889, 0, !dbg !41
  %1891 = extractvalue { float, float, float, float } %1889, 1, !dbg !41
  %1892 = extractvalue { float, float, float, float } %1889, 2, !dbg !41
  %1893 = extractvalue { float, float, float, float } %1889, 3, !dbg !41
  %1894 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1815, float %1816, float %1817, float %1818, i32 %1660, i32 %1661, i32 %1662, i32 %1663, i32 %1702, i32 %1705) #3, !dbg !41
  %1895 = extractvalue { float, float, float, float } %1894, 0, !dbg !41
  %1896 = extractvalue { float, float, float, float } %1894, 1, !dbg !41
  %1897 = extractvalue { float, float, float, float } %1894, 2, !dbg !41
  %1898 = extractvalue { float, float, float, float } %1894, 3, !dbg !41
  %1899 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1820, float %1821, float %1822, float %1823, i32 %1660, i32 %1661, i32 %1662, i32 %1663, i32 %1726, i32 %1729) #3, !dbg !41
  %1900 = extractvalue { float, float, float, float } %1899, 0, !dbg !41
  %1901 = extractvalue { float, float, float, float } %1899, 1, !dbg !41
  %1902 = extractvalue { float, float, float, float } %1899, 2, !dbg !41
  %1903 = extractvalue { float, float, float, float } %1899, 3, !dbg !41
  %1904 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1825, float %1826, float %1827, float %1828, i32 %1660, i32 %1661, i32 %1662, i32 %1663, i32 %1750, i32 %1753) #3, !dbg !41
  %1905 = extractvalue { float, float, float, float } %1904, 0, !dbg !41
  %1906 = extractvalue { float, float, float, float } %1904, 1, !dbg !41
  %1907 = extractvalue { float, float, float, float } %1904, 2, !dbg !41
  %1908 = extractvalue { float, float, float, float } %1904, 3, !dbg !41
  %1909 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1830, float %1831, float %1832, float %1833, i32 %1660, i32 %1661, i32 %1662, i32 %1663, i32 %1768, i32 %1769) #3, !dbg !41
  %1910 = extractvalue { float, float, float, float } %1909, 0, !dbg !41
  %1911 = extractvalue { float, float, float, float } %1909, 1, !dbg !41
  %1912 = extractvalue { float, float, float, float } %1909, 2, !dbg !41
  %1913 = extractvalue { float, float, float, float } %1909, 3, !dbg !41
  %1914 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1835, float %1836, float %1837, float %1838, i32 %1680, i32 %1681, i32 %1682, i32 %1683, i32 %1702, i32 %1705) #3, !dbg !41
  %1915 = extractvalue { float, float, float, float } %1914, 0, !dbg !41
  %1916 = extractvalue { float, float, float, float } %1914, 1, !dbg !41
  %1917 = extractvalue { float, float, float, float } %1914, 2, !dbg !41
  %1918 = extractvalue { float, float, float, float } %1914, 3, !dbg !41
  %1919 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1840, float %1841, float %1842, float %1843, i32 %1680, i32 %1681, i32 %1682, i32 %1683, i32 %1726, i32 %1729) #3, !dbg !41
  %1920 = extractvalue { float, float, float, float } %1919, 0, !dbg !41
  %1921 = extractvalue { float, float, float, float } %1919, 1, !dbg !41
  %1922 = extractvalue { float, float, float, float } %1919, 2, !dbg !41
  %1923 = extractvalue { float, float, float, float } %1919, 3, !dbg !41
  %1924 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1845, float %1846, float %1847, float %1848, i32 %1680, i32 %1681, i32 %1682, i32 %1683, i32 %1750, i32 %1753) #3, !dbg !41
  %1925 = extractvalue { float, float, float, float } %1924, 0, !dbg !41
  %1926 = extractvalue { float, float, float, float } %1924, 1, !dbg !41
  %1927 = extractvalue { float, float, float, float } %1924, 2, !dbg !41
  %1928 = extractvalue { float, float, float, float } %1924, 3, !dbg !41
  %1929 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1850, float %1851, float %1852, float %1853, i32 %1680, i32 %1681, i32 %1682, i32 %1683, i32 %1768, i32 %1769) #3, !dbg !41
  %1930 = extractvalue { float, float, float, float } %1929, 0, !dbg !41
  %1931 = extractvalue { float, float, float, float } %1929, 1, !dbg !41
  %1932 = extractvalue { float, float, float, float } %1929, 2, !dbg !41
  %1933 = extractvalue { float, float, float, float } %1929, 3, !dbg !41
  %1934 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1855, float %1856, float %1857, float %1858, i32 %1625, i32 %1626, i32 %1627, i32 %1628, i32 %1708, i32 %1711) #3, !dbg !41
  %1935 = extractvalue { float, float, float, float } %1934, 0, !dbg !41
  %1936 = extractvalue { float, float, float, float } %1934, 1, !dbg !41
  %1937 = extractvalue { float, float, float, float } %1934, 2, !dbg !41
  %1938 = extractvalue { float, float, float, float } %1934, 3, !dbg !41
  %1939 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1860, float %1861, float %1862, float %1863, i32 %1625, i32 %1626, i32 %1627, i32 %1628, i32 %1732, i32 %1735) #3, !dbg !41
  %1940 = extractvalue { float, float, float, float } %1939, 0, !dbg !41
  %1941 = extractvalue { float, float, float, float } %1939, 1, !dbg !41
  %1942 = extractvalue { float, float, float, float } %1939, 2, !dbg !41
  %1943 = extractvalue { float, float, float, float } %1939, 3, !dbg !41
  %1944 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1865, float %1866, float %1867, float %1868, i32 %1625, i32 %1626, i32 %1627, i32 %1628, i32 %1756, i32 %1759) #3, !dbg !41
  %1945 = extractvalue { float, float, float, float } %1944, 0, !dbg !41
  %1946 = extractvalue { float, float, float, float } %1944, 1, !dbg !41
  %1947 = extractvalue { float, float, float, float } %1944, 2, !dbg !41
  %1948 = extractvalue { float, float, float, float } %1944, 3, !dbg !41
  %1949 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1870, float %1871, float %1872, float %1873, i32 %1625, i32 %1626, i32 %1627, i32 %1628, i32 %1770, i32 %1771) #3, !dbg !41
  %1950 = extractvalue { float, float, float, float } %1949, 0, !dbg !41
  %1951 = extractvalue { float, float, float, float } %1949, 1, !dbg !41
  %1952 = extractvalue { float, float, float, float } %1949, 2, !dbg !41
  %1953 = extractvalue { float, float, float, float } %1949, 3, !dbg !41
  %1954 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1875, float %1876, float %1877, float %1878, i32 %1645, i32 %1646, i32 %1647, i32 %1648, i32 %1708, i32 %1711) #3, !dbg !41
  %1955 = extractvalue { float, float, float, float } %1954, 0, !dbg !41
  %1956 = extractvalue { float, float, float, float } %1954, 1, !dbg !41
  %1957 = extractvalue { float, float, float, float } %1954, 2, !dbg !41
  %1958 = extractvalue { float, float, float, float } %1954, 3, !dbg !41
  %1959 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1880, float %1881, float %1882, float %1883, i32 %1645, i32 %1646, i32 %1647, i32 %1648, i32 %1732, i32 %1735) #3, !dbg !41
  %1960 = extractvalue { float, float, float, float } %1959, 0, !dbg !41
  %1961 = extractvalue { float, float, float, float } %1959, 1, !dbg !41
  %1962 = extractvalue { float, float, float, float } %1959, 2, !dbg !41
  %1963 = extractvalue { float, float, float, float } %1959, 3, !dbg !41
  %1964 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1885, float %1886, float %1887, float %1888, i32 %1645, i32 %1646, i32 %1647, i32 %1648, i32 %1756, i32 %1759) #3, !dbg !41
  %1965 = extractvalue { float, float, float, float } %1964, 0, !dbg !41
  %1966 = extractvalue { float, float, float, float } %1964, 1, !dbg !41
  %1967 = extractvalue { float, float, float, float } %1964, 2, !dbg !41
  %1968 = extractvalue { float, float, float, float } %1964, 3, !dbg !41
  %1969 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1890, float %1891, float %1892, float %1893, i32 %1645, i32 %1646, i32 %1647, i32 %1648, i32 %1770, i32 %1771) #3, !dbg !41
  %1970 = extractvalue { float, float, float, float } %1969, 0, !dbg !41
  %1971 = extractvalue { float, float, float, float } %1969, 1, !dbg !41
  %1972 = extractvalue { float, float, float, float } %1969, 2, !dbg !41
  %1973 = extractvalue { float, float, float, float } %1969, 3, !dbg !41
  %1974 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1895, float %1896, float %1897, float %1898, i32 %1665, i32 %1666, i32 %1667, i32 %1668, i32 %1708, i32 %1711) #3, !dbg !41
  %1975 = extractvalue { float, float, float, float } %1974, 0, !dbg !41
  %1976 = extractvalue { float, float, float, float } %1974, 1, !dbg !41
  %1977 = extractvalue { float, float, float, float } %1974, 2, !dbg !41
  %1978 = extractvalue { float, float, float, float } %1974, 3, !dbg !41
  %1979 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1900, float %1901, float %1902, float %1903, i32 %1665, i32 %1666, i32 %1667, i32 %1668, i32 %1732, i32 %1735) #3, !dbg !41
  %1980 = extractvalue { float, float, float, float } %1979, 0, !dbg !41
  %1981 = extractvalue { float, float, float, float } %1979, 1, !dbg !41
  %1982 = extractvalue { float, float, float, float } %1979, 2, !dbg !41
  %1983 = extractvalue { float, float, float, float } %1979, 3, !dbg !41
  %1984 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1905, float %1906, float %1907, float %1908, i32 %1665, i32 %1666, i32 %1667, i32 %1668, i32 %1756, i32 %1759) #3, !dbg !41
  %1985 = extractvalue { float, float, float, float } %1984, 0, !dbg !41
  %1986 = extractvalue { float, float, float, float } %1984, 1, !dbg !41
  %1987 = extractvalue { float, float, float, float } %1984, 2, !dbg !41
  %1988 = extractvalue { float, float, float, float } %1984, 3, !dbg !41
  %1989 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1910, float %1911, float %1912, float %1913, i32 %1665, i32 %1666, i32 %1667, i32 %1668, i32 %1770, i32 %1771) #3, !dbg !41
  %1990 = extractvalue { float, float, float, float } %1989, 0, !dbg !41
  %1991 = extractvalue { float, float, float, float } %1989, 1, !dbg !41
  %1992 = extractvalue { float, float, float, float } %1989, 2, !dbg !41
  %1993 = extractvalue { float, float, float, float } %1989, 3, !dbg !41
  %1994 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1915, float %1916, float %1917, float %1918, i32 %1685, i32 %1686, i32 %1687, i32 %1688, i32 %1708, i32 %1711) #3, !dbg !41
  %1995 = extractvalue { float, float, float, float } %1994, 0, !dbg !41
  %1996 = extractvalue { float, float, float, float } %1994, 1, !dbg !41
  %1997 = extractvalue { float, float, float, float } %1994, 2, !dbg !41
  %1998 = extractvalue { float, float, float, float } %1994, 3, !dbg !41
  %1999 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1920, float %1921, float %1922, float %1923, i32 %1685, i32 %1686, i32 %1687, i32 %1688, i32 %1732, i32 %1735) #3, !dbg !41
  %2000 = extractvalue { float, float, float, float } %1999, 0, !dbg !41
  %2001 = extractvalue { float, float, float, float } %1999, 1, !dbg !41
  %2002 = extractvalue { float, float, float, float } %1999, 2, !dbg !41
  %2003 = extractvalue { float, float, float, float } %1999, 3, !dbg !41
  %2004 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1925, float %1926, float %1927, float %1928, i32 %1685, i32 %1686, i32 %1687, i32 %1688, i32 %1756, i32 %1759) #3, !dbg !41
  %2005 = extractvalue { float, float, float, float } %2004, 0, !dbg !41
  %2006 = extractvalue { float, float, float, float } %2004, 1, !dbg !41
  %2007 = extractvalue { float, float, float, float } %2004, 2, !dbg !41
  %2008 = extractvalue { float, float, float, float } %2004, 3, !dbg !41
  %2009 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1930, float %1931, float %1932, float %1933, i32 %1685, i32 %1686, i32 %1687, i32 %1688, i32 %1770, i32 %1771) #3, !dbg !41
  %2010 = extractvalue { float, float, float, float } %2009, 0, !dbg !41
  %2011 = extractvalue { float, float, float, float } %2009, 1, !dbg !41
  %2012 = extractvalue { float, float, float, float } %2009, 2, !dbg !41
  %2013 = extractvalue { float, float, float, float } %2009, 3, !dbg !41
  %2014 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1935, float %1936, float %1937, float %1938, i32 %1630, i32 %1631, i32 %1632, i32 %1633, i32 %1714, i32 %1717) #3, !dbg !41
  %2015 = extractvalue { float, float, float, float } %2014, 0, !dbg !41
  %2016 = extractvalue { float, float, float, float } %2014, 1, !dbg !41
  %2017 = extractvalue { float, float, float, float } %2014, 2, !dbg !41
  %2018 = extractvalue { float, float, float, float } %2014, 3, !dbg !41
  %2019 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1940, float %1941, float %1942, float %1943, i32 %1630, i32 %1631, i32 %1632, i32 %1633, i32 %1738, i32 %1741) #3, !dbg !41
  %2020 = extractvalue { float, float, float, float } %2019, 0, !dbg !41
  %2021 = extractvalue { float, float, float, float } %2019, 1, !dbg !41
  %2022 = extractvalue { float, float, float, float } %2019, 2, !dbg !41
  %2023 = extractvalue { float, float, float, float } %2019, 3, !dbg !41
  %2024 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1945, float %1946, float %1947, float %1948, i32 %1630, i32 %1631, i32 %1632, i32 %1633, i32 %1762, i32 %1765) #3, !dbg !41
  %2025 = extractvalue { float, float, float, float } %2024, 0, !dbg !41
  %2026 = extractvalue { float, float, float, float } %2024, 1, !dbg !41
  %2027 = extractvalue { float, float, float, float } %2024, 2, !dbg !41
  %2028 = extractvalue { float, float, float, float } %2024, 3, !dbg !41
  %2029 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1950, float %1951, float %1952, float %1953, i32 %1630, i32 %1631, i32 %1632, i32 %1633, i32 %1772, i32 %1773) #3, !dbg !41
  %2030 = extractvalue { float, float, float, float } %2029, 0, !dbg !41
  %2031 = extractvalue { float, float, float, float } %2029, 1, !dbg !41
  %2032 = extractvalue { float, float, float, float } %2029, 2, !dbg !41
  %2033 = extractvalue { float, float, float, float } %2029, 3, !dbg !41
  %2034 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1955, float %1956, float %1957, float %1958, i32 %1650, i32 %1651, i32 %1652, i32 %1653, i32 %1714, i32 %1717) #3, !dbg !41
  %2035 = extractvalue { float, float, float, float } %2034, 0, !dbg !41
  %2036 = extractvalue { float, float, float, float } %2034, 1, !dbg !41
  %2037 = extractvalue { float, float, float, float } %2034, 2, !dbg !41
  %2038 = extractvalue { float, float, float, float } %2034, 3, !dbg !41
  %2039 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1960, float %1961, float %1962, float %1963, i32 %1650, i32 %1651, i32 %1652, i32 %1653, i32 %1738, i32 %1741) #3, !dbg !41
  %2040 = extractvalue { float, float, float, float } %2039, 0, !dbg !41
  %2041 = extractvalue { float, float, float, float } %2039, 1, !dbg !41
  %2042 = extractvalue { float, float, float, float } %2039, 2, !dbg !41
  %2043 = extractvalue { float, float, float, float } %2039, 3, !dbg !41
  %2044 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1965, float %1966, float %1967, float %1968, i32 %1650, i32 %1651, i32 %1652, i32 %1653, i32 %1762, i32 %1765) #3, !dbg !41
  %2045 = extractvalue { float, float, float, float } %2044, 0, !dbg !41
  %2046 = extractvalue { float, float, float, float } %2044, 1, !dbg !41
  %2047 = extractvalue { float, float, float, float } %2044, 2, !dbg !41
  %2048 = extractvalue { float, float, float, float } %2044, 3, !dbg !41
  %2049 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1970, float %1971, float %1972, float %1973, i32 %1650, i32 %1651, i32 %1652, i32 %1653, i32 %1772, i32 %1773) #3, !dbg !41
  %2050 = extractvalue { float, float, float, float } %2049, 0, !dbg !41
  %2051 = extractvalue { float, float, float, float } %2049, 1, !dbg !41
  %2052 = extractvalue { float, float, float, float } %2049, 2, !dbg !41
  %2053 = extractvalue { float, float, float, float } %2049, 3, !dbg !41
  %2054 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1975, float %1976, float %1977, float %1978, i32 %1670, i32 %1671, i32 %1672, i32 %1673, i32 %1714, i32 %1717) #3, !dbg !41
  %2055 = extractvalue { float, float, float, float } %2054, 0, !dbg !41
  %2056 = extractvalue { float, float, float, float } %2054, 1, !dbg !41
  %2057 = extractvalue { float, float, float, float } %2054, 2, !dbg !41
  %2058 = extractvalue { float, float, float, float } %2054, 3, !dbg !41
  %2059 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1980, float %1981, float %1982, float %1983, i32 %1670, i32 %1671, i32 %1672, i32 %1673, i32 %1738, i32 %1741) #3, !dbg !41
  %2060 = extractvalue { float, float, float, float } %2059, 0, !dbg !41
  %2061 = extractvalue { float, float, float, float } %2059, 1, !dbg !41
  %2062 = extractvalue { float, float, float, float } %2059, 2, !dbg !41
  %2063 = extractvalue { float, float, float, float } %2059, 3, !dbg !41
  %2064 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1985, float %1986, float %1987, float %1988, i32 %1670, i32 %1671, i32 %1672, i32 %1673, i32 %1762, i32 %1765) #3, !dbg !41
  %2065 = extractvalue { float, float, float, float } %2064, 0, !dbg !41
  %2066 = extractvalue { float, float, float, float } %2064, 1, !dbg !41
  %2067 = extractvalue { float, float, float, float } %2064, 2, !dbg !41
  %2068 = extractvalue { float, float, float, float } %2064, 3, !dbg !41
  %2069 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1990, float %1991, float %1992, float %1993, i32 %1670, i32 %1671, i32 %1672, i32 %1673, i32 %1772, i32 %1773) #3, !dbg !41
  %2070 = extractvalue { float, float, float, float } %2069, 0, !dbg !41
  %2071 = extractvalue { float, float, float, float } %2069, 1, !dbg !41
  %2072 = extractvalue { float, float, float, float } %2069, 2, !dbg !41
  %2073 = extractvalue { float, float, float, float } %2069, 3, !dbg !41
  %2074 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %1995, float %1996, float %1997, float %1998, i32 %1690, i32 %1691, i32 %1692, i32 %1693, i32 %1714, i32 %1717) #3, !dbg !41
  %2075 = extractvalue { float, float, float, float } %2074, 0, !dbg !41
  %2076 = extractvalue { float, float, float, float } %2074, 1, !dbg !41
  %2077 = extractvalue { float, float, float, float } %2074, 2, !dbg !41
  %2078 = extractvalue { float, float, float, float } %2074, 3, !dbg !41
  %2079 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2000, float %2001, float %2002, float %2003, i32 %1690, i32 %1691, i32 %1692, i32 %1693, i32 %1738, i32 %1741) #3, !dbg !41
  %2080 = extractvalue { float, float, float, float } %2079, 0, !dbg !41
  %2081 = extractvalue { float, float, float, float } %2079, 1, !dbg !41
  %2082 = extractvalue { float, float, float, float } %2079, 2, !dbg !41
  %2083 = extractvalue { float, float, float, float } %2079, 3, !dbg !41
  %2084 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2005, float %2006, float %2007, float %2008, i32 %1690, i32 %1691, i32 %1692, i32 %1693, i32 %1762, i32 %1765) #3, !dbg !41
  %2085 = extractvalue { float, float, float, float } %2084, 0, !dbg !41
  %2086 = extractvalue { float, float, float, float } %2084, 1, !dbg !41
  %2087 = extractvalue { float, float, float, float } %2084, 2, !dbg !41
  %2088 = extractvalue { float, float, float, float } %2084, 3, !dbg !41
  %2089 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %2010, float %2011, float %2012, float %2013, i32 %1690, i32 %1691, i32 %1692, i32 %1693, i32 %1772, i32 %1773) #3, !dbg !41
  %2090 = extractvalue { float, float, float, float } %2089, 0, !dbg !41
  %2091 = extractvalue { float, float, float, float } %2089, 1, !dbg !41
  %2092 = extractvalue { float, float, float, float } %2089, 2, !dbg !41
  %2093 = extractvalue { float, float, float, float } %2089, 3, !dbg !41
  %2094 = insertelement <2 x float> poison, float %2015, i64 0, !dbg !42
  %2095 = insertelement <2 x float> %2094, float %2016, i64 1, !dbg !42
  %2096 = fptrunc <2 x float> %2095 to <2 x bfloat>, !dbg !42
  %2097 = insertelement <2 x float> poison, float %2017, i64 0, !dbg !42
  %2098 = insertelement <2 x float> %2097, float %2018, i64 1, !dbg !42
  %2099 = fptrunc <2 x float> %2098 to <2 x bfloat>, !dbg !42
  %2100 = insertelement <2 x float> poison, float %2020, i64 0, !dbg !42
  %2101 = insertelement <2 x float> %2100, float %2021, i64 1, !dbg !42
  %2102 = fptrunc <2 x float> %2101 to <2 x bfloat>, !dbg !42
  %2103 = insertelement <2 x float> poison, float %2022, i64 0, !dbg !42
  %2104 = insertelement <2 x float> %2103, float %2023, i64 1, !dbg !42
  %2105 = fptrunc <2 x float> %2104 to <2 x bfloat>, !dbg !42
  %2106 = insertelement <2 x float> poison, float %2025, i64 0, !dbg !42
  %2107 = insertelement <2 x float> %2106, float %2026, i64 1, !dbg !42
  %2108 = fptrunc <2 x float> %2107 to <2 x bfloat>, !dbg !42
  %2109 = insertelement <2 x float> poison, float %2027, i64 0, !dbg !42
  %2110 = insertelement <2 x float> %2109, float %2028, i64 1, !dbg !42
  %2111 = fptrunc <2 x float> %2110 to <2 x bfloat>, !dbg !42
  %2112 = insertelement <2 x float> poison, float %2030, i64 0, !dbg !42
  %2113 = insertelement <2 x float> %2112, float %2031, i64 1, !dbg !42
  %2114 = fptrunc <2 x float> %2113 to <2 x bfloat>, !dbg !42
  %2115 = insertelement <2 x float> poison, float %2032, i64 0, !dbg !42
  %2116 = insertelement <2 x float> %2115, float %2033, i64 1, !dbg !42
  %2117 = fptrunc <2 x float> %2116 to <2 x bfloat>, !dbg !42
  %2118 = insertelement <2 x float> poison, float %2035, i64 0, !dbg !42
  %2119 = insertelement <2 x float> %2118, float %2036, i64 1, !dbg !42
  %2120 = fptrunc <2 x float> %2119 to <2 x bfloat>, !dbg !42
  %2121 = insertelement <2 x float> poison, float %2037, i64 0, !dbg !42
  %2122 = insertelement <2 x float> %2121, float %2038, i64 1, !dbg !42
  %2123 = fptrunc <2 x float> %2122 to <2 x bfloat>, !dbg !42
  %2124 = insertelement <2 x float> poison, float %2040, i64 0, !dbg !42
  %2125 = insertelement <2 x float> %2124, float %2041, i64 1, !dbg !42
  %2126 = fptrunc <2 x float> %2125 to <2 x bfloat>, !dbg !42
  %2127 = insertelement <2 x float> poison, float %2042, i64 0, !dbg !42
  %2128 = insertelement <2 x float> %2127, float %2043, i64 1, !dbg !42
  %2129 = fptrunc <2 x float> %2128 to <2 x bfloat>, !dbg !42
  %2130 = insertelement <2 x float> poison, float %2045, i64 0, !dbg !42
  %2131 = insertelement <2 x float> %2130, float %2046, i64 1, !dbg !42
  %2132 = fptrunc <2 x float> %2131 to <2 x bfloat>, !dbg !42
  %2133 = insertelement <2 x float> poison, float %2047, i64 0, !dbg !42
  %2134 = insertelement <2 x float> %2133, float %2048, i64 1, !dbg !42
  %2135 = fptrunc <2 x float> %2134 to <2 x bfloat>, !dbg !42
  %2136 = insertelement <2 x float> poison, float %2050, i64 0, !dbg !42
  %2137 = insertelement <2 x float> %2136, float %2051, i64 1, !dbg !42
  %2138 = fptrunc <2 x float> %2137 to <2 x bfloat>, !dbg !42
  %2139 = insertelement <2 x float> poison, float %2052, i64 0, !dbg !42
  %2140 = insertelement <2 x float> %2139, float %2053, i64 1, !dbg !42
  %2141 = fptrunc <2 x float> %2140 to <2 x bfloat>, !dbg !42
  %2142 = insertelement <2 x float> poison, float %2055, i64 0, !dbg !42
  %2143 = insertelement <2 x float> %2142, float %2056, i64 1, !dbg !42
  %2144 = fptrunc <2 x float> %2143 to <2 x bfloat>, !dbg !42
  %2145 = insertelement <2 x float> poison, float %2057, i64 0, !dbg !42
  %2146 = insertelement <2 x float> %2145, float %2058, i64 1, !dbg !42
  %2147 = fptrunc <2 x float> %2146 to <2 x bfloat>, !dbg !42
  %2148 = insertelement <2 x float> poison, float %2060, i64 0, !dbg !42
  %2149 = insertelement <2 x float> %2148, float %2061, i64 1, !dbg !42
  %2150 = fptrunc <2 x float> %2149 to <2 x bfloat>, !dbg !42
  %2151 = insertelement <2 x float> poison, float %2062, i64 0, !dbg !42
  %2152 = insertelement <2 x float> %2151, float %2063, i64 1, !dbg !42
  %2153 = fptrunc <2 x float> %2152 to <2 x bfloat>, !dbg !42
  %2154 = insertelement <2 x float> poison, float %2065, i64 0, !dbg !42
  %2155 = insertelement <2 x float> %2154, float %2066, i64 1, !dbg !42
  %2156 = fptrunc <2 x float> %2155 to <2 x bfloat>, !dbg !42
  %2157 = insertelement <2 x float> poison, float %2067, i64 0, !dbg !42
  %2158 = insertelement <2 x float> %2157, float %2068, i64 1, !dbg !42
  %2159 = fptrunc <2 x float> %2158 to <2 x bfloat>, !dbg !42
  %2160 = insertelement <2 x float> poison, float %2070, i64 0, !dbg !42
  %2161 = insertelement <2 x float> %2160, float %2071, i64 1, !dbg !42
  %2162 = fptrunc <2 x float> %2161 to <2 x bfloat>, !dbg !42
  %2163 = insertelement <2 x float> poison, float %2072, i64 0, !dbg !42
  %2164 = insertelement <2 x float> %2163, float %2073, i64 1, !dbg !42
  %2165 = fptrunc <2 x float> %2164 to <2 x bfloat>, !dbg !42
  %2166 = insertelement <2 x float> poison, float %2075, i64 0, !dbg !42
  %2167 = insertelement <2 x float> %2166, float %2076, i64 1, !dbg !42
  %2168 = fptrunc <2 x float> %2167 to <2 x bfloat>, !dbg !42
  %2169 = insertelement <2 x float> poison, float %2077, i64 0, !dbg !42
  %2170 = insertelement <2 x float> %2169, float %2078, i64 1, !dbg !42
  %2171 = fptrunc <2 x float> %2170 to <2 x bfloat>, !dbg !42
  %2172 = insertelement <2 x float> poison, float %2080, i64 0, !dbg !42
  %2173 = insertelement <2 x float> %2172, float %2081, i64 1, !dbg !42
  %2174 = fptrunc <2 x float> %2173 to <2 x bfloat>, !dbg !42
  %2175 = insertelement <2 x float> poison, float %2082, i64 0, !dbg !42
  %2176 = insertelement <2 x float> %2175, float %2083, i64 1, !dbg !42
  %2177 = fptrunc <2 x float> %2176 to <2 x bfloat>, !dbg !42
  %2178 = insertelement <2 x float> poison, float %2085, i64 0, !dbg !42
  %2179 = insertelement <2 x float> %2178, float %2086, i64 1, !dbg !42
  %2180 = fptrunc <2 x float> %2179 to <2 x bfloat>, !dbg !42
  %2181 = insertelement <2 x float> poison, float %2087, i64 0, !dbg !42
  %2182 = insertelement <2 x float> %2181, float %2088, i64 1, !dbg !42
  %2183 = fptrunc <2 x float> %2182 to <2 x bfloat>, !dbg !42
  %2184 = insertelement <2 x float> poison, float %2090, i64 0, !dbg !42
  %2185 = insertelement <2 x float> %2184, float %2091, i64 1, !dbg !42
  %2186 = fptrunc <2 x float> %2185 to <2 x bfloat>, !dbg !42
  %2187 = insertelement <2 x float> poison, float %2092, i64 0, !dbg !42
  %2188 = insertelement <2 x float> %2187, float %2093, i64 1, !dbg !42
  %2189 = fptrunc <2 x float> %2188 to <2 x bfloat>, !dbg !42
  %2190 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1240, !dbg !43
  %2191 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1241, !dbg !43
  %2192 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1242, !dbg !43
  %2193 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1243, !dbg !43
  %2194 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1244, !dbg !43
  %2195 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1245, !dbg !43
  %2196 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1246, !dbg !43
  %2197 = getelementptr bfloat, ptr addrspace(1) %1181, i64 %1247, !dbg !43
  store <2 x bfloat> %2096, ptr addrspace(3) %390, align 4, !dbg !43
  store <2 x bfloat> %2099, ptr addrspace(3) %395, align 4, !dbg !43
  store <2 x bfloat> %2102, ptr addrspace(3) %396, align 4, !dbg !43
  store <2 x bfloat> %2105, ptr addrspace(3) %401, align 4, !dbg !43
  store <2 x bfloat> %2108, ptr addrspace(3) %402, align 4, !dbg !43
  store <2 x bfloat> %2111, ptr addrspace(3) %407, align 4, !dbg !43
  store <2 x bfloat> %2114, ptr addrspace(3) %408, align 4, !dbg !43
  store <2 x bfloat> %2117, ptr addrspace(3) %413, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2198 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !43
  %2199 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2120, ptr addrspace(3) %390, align 4, !dbg !43
  store <2 x bfloat> %2123, ptr addrspace(3) %395, align 4, !dbg !43
  store <2 x bfloat> %2126, ptr addrspace(3) %396, align 4, !dbg !43
  store <2 x bfloat> %2129, ptr addrspace(3) %401, align 4, !dbg !43
  store <2 x bfloat> %2132, ptr addrspace(3) %402, align 4, !dbg !43
  store <2 x bfloat> %2135, ptr addrspace(3) %407, align 4, !dbg !43
  store <2 x bfloat> %2138, ptr addrspace(3) %408, align 4, !dbg !43
  store <2 x bfloat> %2141, ptr addrspace(3) %413, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2200 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !43
  %2201 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2144, ptr addrspace(3) %390, align 4, !dbg !43
  store <2 x bfloat> %2147, ptr addrspace(3) %395, align 4, !dbg !43
  store <2 x bfloat> %2150, ptr addrspace(3) %396, align 4, !dbg !43
  store <2 x bfloat> %2153, ptr addrspace(3) %401, align 4, !dbg !43
  store <2 x bfloat> %2156, ptr addrspace(3) %402, align 4, !dbg !43
  store <2 x bfloat> %2159, ptr addrspace(3) %407, align 4, !dbg !43
  store <2 x bfloat> %2162, ptr addrspace(3) %408, align 4, !dbg !43
  store <2 x bfloat> %2165, ptr addrspace(3) %413, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2202 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !43
  %2203 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  store <2 x bfloat> %2168, ptr addrspace(3) %390, align 4, !dbg !43
  store <2 x bfloat> %2171, ptr addrspace(3) %395, align 4, !dbg !43
  store <2 x bfloat> %2174, ptr addrspace(3) %396, align 4, !dbg !43
  store <2 x bfloat> %2177, ptr addrspace(3) %401, align 4, !dbg !43
  store <2 x bfloat> %2180, ptr addrspace(3) %402, align 4, !dbg !43
  store <2 x bfloat> %2183, ptr addrspace(3) %407, align 4, !dbg !43
  store <2 x bfloat> %2186, ptr addrspace(3) %408, align 4, !dbg !43
  store <2 x bfloat> %2189, ptr addrspace(3) %413, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !43
  %2204 = load <4 x i32>, ptr addrspace(3) %416, align 16, !dbg !43
  %2205 = load <4 x i32>, ptr addrspace(3) %421, align 16, !dbg !43
  %.extract = extractelement <4 x i32> %2198, i64 0, !dbg !43
  %.extract239 = extractelement <4 x i32> %2198, i64 1, !dbg !43
  %.extract241 = extractelement <4 x i32> %2198, i64 2, !dbg !43
  %.extract243 = extractelement <4 x i32> %2198, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract239, i32 %.extract241, i32 %.extract243, ptr addrspace(1) %2190, i1 %1224) #3, !dbg !43
  %.extract245 = extractelement <4 x i32> %2199, i64 0, !dbg !43
  %.extract247 = extractelement <4 x i32> %2199, i64 1, !dbg !43
  %.extract249 = extractelement <4 x i32> %2199, i64 2, !dbg !43
  %.extract251 = extractelement <4 x i32> %2199, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract245, i32 %.extract247, i32 %.extract249, i32 %.extract251, ptr addrspace(1) %2191, i1 %1225) #3, !dbg !43
  %.extract253 = extractelement <4 x i32> %2200, i64 0, !dbg !43
  %.extract255 = extractelement <4 x i32> %2200, i64 1, !dbg !43
  %.extract257 = extractelement <4 x i32> %2200, i64 2, !dbg !43
  %.extract259 = extractelement <4 x i32> %2200, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract253, i32 %.extract255, i32 %.extract257, i32 %.extract259, ptr addrspace(1) %2192, i1 %1226) #3, !dbg !43
  %.extract261 = extractelement <4 x i32> %2201, i64 0, !dbg !43
  %.extract263 = extractelement <4 x i32> %2201, i64 1, !dbg !43
  %.extract265 = extractelement <4 x i32> %2201, i64 2, !dbg !43
  %.extract267 = extractelement <4 x i32> %2201, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract261, i32 %.extract263, i32 %.extract265, i32 %.extract267, ptr addrspace(1) %2193, i1 %1227) #3, !dbg !43
  %.extract269 = extractelement <4 x i32> %2202, i64 0, !dbg !43
  %.extract271 = extractelement <4 x i32> %2202, i64 1, !dbg !43
  %.extract273 = extractelement <4 x i32> %2202, i64 2, !dbg !43
  %.extract275 = extractelement <4 x i32> %2202, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract269, i32 %.extract271, i32 %.extract273, i32 %.extract275, ptr addrspace(1) %2194, i1 %1228) #3, !dbg !43
  %.extract277 = extractelement <4 x i32> %2203, i64 0, !dbg !43
  %.extract279 = extractelement <4 x i32> %2203, i64 1, !dbg !43
  %.extract281 = extractelement <4 x i32> %2203, i64 2, !dbg !43
  %.extract283 = extractelement <4 x i32> %2203, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract277, i32 %.extract279, i32 %.extract281, i32 %.extract283, ptr addrspace(1) %2195, i1 %1229) #3, !dbg !43
  %.extract285 = extractelement <4 x i32> %2204, i64 0, !dbg !43
  %.extract287 = extractelement <4 x i32> %2204, i64 1, !dbg !43
  %.extract289 = extractelement <4 x i32> %2204, i64 2, !dbg !43
  %.extract291 = extractelement <4 x i32> %2204, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract285, i32 %.extract287, i32 %.extract289, i32 %.extract291, ptr addrspace(1) %2196, i1 %1230) #3, !dbg !43
  %.extract293 = extractelement <4 x i32> %2205, i64 0, !dbg !43
  %.extract295 = extractelement <4 x i32> %2205, i64 1, !dbg !43
  %.extract297 = extractelement <4 x i32> %2205, i64 2, !dbg !43
  %.extract299 = extractelement <4 x i32> %2205, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract293, i32 %.extract295, i32 %.extract297, i32 %.extract299, ptr addrspace(1) %2197, i1 %1231) #3, !dbg !43
  %2206 = add i32 %1249, 1, !dbg !39
  %2207 = icmp sgt i32 %2206, 1, !dbg !39
  %2208 = select i1 %2207, i32 0, i32 %2206, !dbg !39
  %2209 = or disjoint i64 %indvars.iv365, %45, !dbg !37
  %2210 = or disjoint i64 %2209, %.idx, !dbg !37
  %2211 = or disjoint i64 %2209, %.idx18, !dbg !37
  %2212 = or disjoint i64 %2209, %.idx19, !dbg !37
  %2213 = or disjoint i64 %2209, %.idx20, !dbg !37
  %2214 = or disjoint i64 %2209, %.idx21, !dbg !37
  %2215 = or disjoint i64 %2209, %.idx22, !dbg !37
  %2216 = or disjoint i64 %2209, %.idx23, !dbg !37
  %2217 = or disjoint i64 %2209, %.idx24, !dbg !37
  %2218 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2210, !dbg !37
  %2219 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2211, !dbg !37
  %2220 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2212, !dbg !37
  %2221 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2213, !dbg !37
  %2222 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2214, !dbg !37
  %2223 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2215, !dbg !37
  %2224 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2216, !dbg !37
  %2225 = getelementptr bfloat, ptr addrspace(1) %1180, i64 %2217, !dbg !37
  %.idx138 = shl i32 %2208, 13, !dbg !37
  %2226 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx138, !dbg !37
  %2227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %216, !dbg !37
  %2228 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %221, !dbg !37
  %2229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %226, !dbg !37
  %2230 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %231, !dbg !37
  %2231 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %236, !dbg !37
  %2232 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %241, !dbg !37
  %2233 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %246, !dbg !37
  %2234 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %2226, i32 %251, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %2227, ptr addrspace(1) %2218, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2228, ptr addrspace(1) %2219, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2229, ptr addrspace(1) %2220, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2230, ptr addrspace(1) %2221, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2231, ptr addrspace(1) %2222, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2232, ptr addrspace(1) %2223, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2233, ptr addrspace(1) %2224, i32 0) #3, !dbg !37
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) nonnull %2234, ptr addrspace(1) %2225, i32 0) #3, !dbg !37
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !37
  br i1 %1215, label %1214, label %2235, !dbg !39

2235:                                             ; preds = %1214
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !39
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !39
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #3

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="64" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "wy_fast.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "recompute_w_u_fwd_kernel", linkageName: "recompute_w_u_fwd_kernel", scope: !1, file: !1, line: 144, type: !6, scopeLine: 144, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 166, column: 30, scope: !5)
!9 = !DILocation(line: 166, column: 48, scope: !5)
!10 = !DILocation(line: 173, column: 25, scope: !5)
!11 = !DILocation(line: 167, column: 33, scope: !5)
!12 = !DILocation(line: 174, column: 42, scope: !5)
!13 = !DILocation(line: 174, column: 38, scope: !5)
!14 = !DILocation(line: 174, column: 46, scope: !5)
!15 = !DILocation(line: 174, column: 70, scope: !5)
!16 = !DILocation(line: 174, column: 83, scope: !5)
!17 = !DILocation(line: 175, column: 21, scope: !5)
!18 = !DILocation(line: 196, column: 21, scope: !5)
!19 = !DILocation(line: 177, column: 41, scope: !5)
!20 = !DILocation(line: 177, column: 48, scope: !5)
!21 = !DILocation(line: 177, column: 32, scope: !5)
!22 = !DILocation(line: 178, column: 18, scope: !5)
!23 = !DILocation(line: 181, column: 52, scope: !5)
!24 = !DILocation(line: 181, column: 36, scope: !5)
!25 = !DILocation(line: 182, column: 36, scope: !5)
!26 = !DILocation(line: 183, column: 22, scope: !5)
!27 = !DILocation(line: 180, column: 21, scope: !5)
!28 = !DILocation(line: 184, column: 22, scope: !5)
!29 = !DILocation(line: 185, column: 26, scope: !5)
!30 = !DILocation(line: 186, column: 29, scope: !5)
!31 = !DILocation(line: 186, column: 22, scope: !5)
!32 = !DILocation(line: 189, column: 37, scope: !5)
!33 = !DILocation(line: 190, column: 26, scope: !5)
!34 = !DILocation(line: 190, column: 18, scope: !5)
!35 = !DILocation(line: 193, column: 36, scope: !5)
!36 = !DILocation(line: 194, column: 36, scope: !5)
!37 = !DILocation(line: 195, column: 22, scope: !5)
!38 = !DILocation(line: 198, column: 20, scope: !5)
!39 = !DILocation(line: 192, column: 21, scope: !5)
!40 = !DILocation(line: 202, column: 34, scope: !5)
!41 = !DILocation(line: 202, column: 26, scope: !5)
!42 = !DILocation(line: 203, column: 29, scope: !5)
!43 = !DILocation(line: 203, column: 22, scope: !5)
!44 = !DILocation(line: 192, column: 4, scope: !5)
