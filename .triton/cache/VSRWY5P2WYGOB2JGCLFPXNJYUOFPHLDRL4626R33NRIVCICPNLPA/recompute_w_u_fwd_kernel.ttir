#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)
module {
  tt.func public @recompute_w_u_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":144:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : tensor<1x64xi64> loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<64x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<1x64xi64> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<64x1xi64> loc(#loc1)
    %cst_4 = arith.constant dense<2048> : tensor<64x1xi64> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64xi64> loc(#loc1)
    %cst_6 = arith.constant dense<32> : tensor<64xi64> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.muli %4, %c32_i32 : i32 loc(#loc7)
    %6 = tt.addptr %arg2, %5 : !tt.ptr<bf16>, i32 loc(#loc8)
    %7 = tt.addptr %6, %3 : !tt.ptr<bf16>, i32 loc(#loc9)
    %8 = arith.muli %0, %c64_i32 : i32 loc(#loc10)
    %9 = arith.extsi %arg7 : i32 to i64 loc(#loc11)
    %10 = arith.extsi %8 : i32 to i64 loc(#loc11)
    %11 = tt.splat %7 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>> loc(#loc12)
    %12 = tt.splat %10 : i64 -> tensor<64xi64> loc(#loc12)
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc12)
    %14 = arith.extsi %13 : tensor<64xi32> to tensor<64xi64> loc(#loc12)
    %15 = arith.addi %12, %14 : tensor<64xi64> loc(#loc12)
    %16 = arith.muli %15, %cst_6 : tensor<64xi64> loc(#loc12)
    %17 = tt.addptr %11, %16 : tensor<64x!tt.ptr<bf16>>, tensor<64xi64> loc(#loc12)
    %18 = arith.cmpi sge, %15, %cst_5 : tensor<64xi64> loc(#loc12)
    %19 = tt.splat %9 : i64 -> tensor<64xi64> loc(#loc12)
    %20 = arith.cmpi slt, %15, %19 : tensor<64xi64> loc(#loc12)
    %21 = arith.andi %18, %20 : tensor<64xi1> loc(#loc12)
    %22 = tt.load %17, %21 : tensor<64x!tt.ptr<bf16>> loc(#loc12)
    %23 = arith.addi %5, %3 : i32 loc(#loc13)
    %24 = arith.muli %23, %c64_i32 : i32 loc(#loc14)
    %25 = tt.addptr %arg5, %24 : !tt.ptr<bf16>, i32 loc(#loc15)
    %26 = tt.splat %25 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc16)
    %27 = tt.expand_dims %15 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc16)
    %28 = arith.muli %27, %cst_4 : tensor<64x1xi64> loc(#loc16)
    %29 = tt.broadcast %28 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc16)
    %30 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc16)
    %31 = tt.broadcast %30 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc16)
    %32 = arith.addi %29, %31 : tensor<64x64xi64> loc(#loc16)
    %33 = tt.addptr %26, %32 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc16)
    %34 = arith.cmpi sge, %27, %cst_3 : tensor<64x1xi64> loc(#loc16)
    %35 = tt.splat %9 : i64 -> tensor<64x1xi64> loc(#loc16)
    %36 = arith.cmpi slt, %27, %35 : tensor<64x1xi64> loc(#loc16)
    %37 = arith.andi %34, %36 : tensor<64x1xi1> loc(#loc16)
    %38 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc16)
    %39 = arith.cmpi sge, %30, %cst_2 : tensor<1x64xi64> loc(#loc16)
    %40 = arith.cmpi slt, %30, %cst_1 : tensor<1x64xi64> loc(#loc16)
    %41 = arith.andi %39, %40 : tensor<1x64xi1> loc(#loc16)
    %42 = tt.broadcast %41 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc16)
    %43 = arith.andi %38, %42 : tensor<64x64xi1> loc(#loc16)
    %44 = tt.load %33, %43 : tensor<64x64x!tt.ptr<bf16>> loc(#loc16)
    scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32  : i32 {
      %50 = arith.muli %23, %c128_i32 : i32 loc(#loc18)
      %51 = tt.addptr %arg1, %50 : !tt.ptr<bf16>, i32 loc(#loc19)
      %52 = arith.muli %arg8, %c64_i32 : i32 loc(#loc20)
      %53 = arith.extsi %52 : i32 to i64 loc(#loc21)
      %54 = tt.addptr %arg4, %50 : !tt.ptr<bf16>, i32 loc(#loc22)
      %55 = tt.splat %51 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc23)
      %56 = arith.muli %27, %cst_0 : tensor<64x1xi64> loc(#loc23)
      %57 = tt.broadcast %56 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc23)
      %58 = tt.splat %53 : i64 -> tensor<64xi64> loc(#loc23)
      %59 = arith.addi %58, %14 : tensor<64xi64> loc(#loc23)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc23)
      %61 = tt.broadcast %60 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc23)
      %62 = arith.addi %57, %61 : tensor<64x64xi64> loc(#loc23)
      %63 = tt.addptr %55, %62 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc23)
      %64 = arith.cmpi sge, %60, %cst_2 : tensor<1x64xi64> loc(#loc23)
      %65 = arith.cmpi slt, %60, %cst : tensor<1x64xi64> loc(#loc23)
      %66 = arith.andi %64, %65 : tensor<1x64xi1> loc(#loc23)
      %67 = tt.broadcast %66 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc23)
      %68 = arith.andi %38, %67 : tensor<64x64xi1> loc(#loc23)
      %69 = tt.load %63, %68 : tensor<64x64x!tt.ptr<bf16>> loc(#loc23)
      %70 = tt.expand_dims %22 {axis = 1 : i32} : tensor<64xbf16> -> tensor<64x1xbf16> loc(#loc24)
      %71 = tt.broadcast %70 : tensor<64x1xbf16> -> tensor<64x64xbf16> loc(#loc25)
      %72 = arith.mulf %69, %71 : tensor<64x64xbf16> loc(#loc25)
      %73 = tt.dot %44, %72, %cst_7 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc26)
      %74 = arith.truncf %73 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc27)
      %75 = tt.splat %54 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc28)
      %76 = tt.addptr %75, %62 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc28)
      tt.store %76, %74, %68 : tensor<64x64x!tt.ptr<bf16>> loc(#loc28)
    } loc(#loc17)
    %45 = tt.addptr %arg6, %23 : !tt.ptr<f32>, i32 loc(#loc29)
    %46 = tt.splat %45 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc30)
    %47 = tt.addptr %46, %16 : tensor<64x!tt.ptr<f32>>, tensor<64xi64> loc(#loc30)
    %48 = tt.load %47, %21 : tensor<64x!tt.ptr<f32>> loc(#loc30)
    %49 = math.exp %48 : tensor<64xf32> loc(#loc31)
    scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32  : i32 {
      %50 = arith.muli %23, %c128_i32 : i32 loc(#loc33)
      %51 = tt.addptr %arg0, %50 : !tt.ptr<bf16>, i32 loc(#loc34)
      %52 = arith.muli %arg8, %c64_i32 : i32 loc(#loc35)
      %53 = arith.extsi %52 : i32 to i64 loc(#loc36)
      %54 = tt.addptr %arg3, %50 : !tt.ptr<bf16>, i32 loc(#loc37)
      %55 = tt.splat %51 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc38)
      %56 = arith.muli %27, %cst_0 : tensor<64x1xi64> loc(#loc38)
      %57 = tt.broadcast %56 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc38)
      %58 = tt.splat %53 : i64 -> tensor<64xi64> loc(#loc38)
      %59 = arith.addi %58, %14 : tensor<64xi64> loc(#loc38)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc38)
      %61 = tt.broadcast %60 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc38)
      %62 = arith.addi %57, %61 : tensor<64x64xi64> loc(#loc38)
      %63 = tt.addptr %55, %62 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc38)
      %64 = arith.cmpi sge, %60, %cst_2 : tensor<1x64xi64> loc(#loc38)
      %65 = arith.cmpi slt, %60, %cst : tensor<1x64xi64> loc(#loc38)
      %66 = arith.andi %64, %65 : tensor<1x64xi1> loc(#loc38)
      %67 = tt.broadcast %66 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc38)
      %68 = arith.andi %38, %67 : tensor<64x64xi1> loc(#loc38)
      %69 = tt.load %63, %68 : tensor<64x64x!tt.ptr<bf16>> loc(#loc38)
      %70 = tt.expand_dims %22 {axis = 1 : i32} : tensor<64xbf16> -> tensor<64x1xbf16> loc(#loc39)
      %71 = tt.broadcast %70 : tensor<64x1xbf16> -> tensor<64x64xbf16> loc(#loc40)
      %72 = arith.mulf %69, %71 : tensor<64x64xbf16> loc(#loc40)
      %73 = tt.expand_dims %49 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc41)
      %74 = arith.extf %72 : tensor<64x64xbf16> to tensor<64x64xf32> loc(#loc42)
      %75 = tt.broadcast %73 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc42)
      %76 = arith.mulf %74, %75 : tensor<64x64xf32> loc(#loc42)
      %77 = arith.truncf %76 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc43)
      %78 = tt.dot %44, %77, %cst_7, inputPrecision = tf32 : tensor<64x64xbf16> * tensor<64x64xbf16> -> tensor<64x64xf32> loc(#loc44)
      %79 = arith.truncf %78 : tensor<64x64xf32> to tensor<64x64xbf16> loc(#loc45)
      %80 = tt.splat %54 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc46)
      %81 = tt.addptr %80, %62 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi64> loc(#loc46)
      tt.store %81, %79, %68 : tensor<64x64x!tt.ptr<bf16>> loc(#loc46)
    } loc(#loc32)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":166:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":167:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":173:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:42)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:38)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:46)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:70)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":174:83)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":175:21)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:41)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:48)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":177:32)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":178:18)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":180:21)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:52)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:36)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:90)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":181:105)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":182:36)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":183:22)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:29)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":184:22)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":185:26)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:29)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":186:22)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":189:37)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":190:18)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:21)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:52)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:36)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:90)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":193:105)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":194:36)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":195:22)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:28)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":196:21)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:24)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":198:20)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:34)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":202:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:29)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":203:22)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule/wy_fast.py":192:4)
