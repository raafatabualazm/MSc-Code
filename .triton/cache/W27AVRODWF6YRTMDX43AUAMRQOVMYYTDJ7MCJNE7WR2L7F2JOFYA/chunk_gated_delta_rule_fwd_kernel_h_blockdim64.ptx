//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	chunk_gated_delta_rule_fwd_kernel_h_blockdim64 // -- Begin function chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.extern .shared .align 16 .b8 global_smem[];
                                        // @chunk_gated_delta_rule_fwd_kernel_h_blockdim64
.visible .entry chunk_gated_delta_rule_fwd_kernel_h_blockdim64(
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6,
	.param .u32 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7,
	.param .u64 .ptr .global .align 1 chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_8
)
.reqntid 128
{
	.reg .pred 	%p<118>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<2481>;
	.reg .b64 	%rd<330>;
	.loc	1 36 0                          // chunk_delta_h.py:36:0
$L__func_begin0:
	.loc	1 36 0                          // chunk_delta_h.py:36:0

// %bb.0:
	ld.param.b32 	%r250, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_7];
	ld.param.b64 	%rd65, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_6];
	ld.param.b64 	%rd110, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_0];
$L__tmp0:
	.loc	1 61 30                         // chunk_delta_h.py:61:30
	mov.u32 	%r340, %ctaid.x;
	ld.param.b64 	%rd111, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_1];
	ld.param.b64 	%rd112, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_2];
	.loc	1 61 48                         // chunk_delta_h.py:61:48
	mov.u32 	%r341, %ctaid.y;
	.loc	1 62 33                         // chunk_delta_h.py:62:33
	and.b32 	%r342, %r341, 31;
$L__tmp1:
	.loc	2 40 22                         // standard.py:40:22 @[ chunk_delta_h.py:70:24 ]
	add.s32 	%r343, %r250, 63;
	ld.param.b64 	%rd114, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_4];
$L__tmp2:
	.loc	1 71 20                         // chunk_delta_h.py:71:20
	shl.b32 	%r2, %r341, 14;
	.loc	1 69 25                         // chunk_delta_h.py:69:25
	and.b32 	%r351, %r341, 65504;
	.loc	1 84 16                         // chunk_delta_h.py:84:16
	mul.lo.s32 	%r352, %r351, %r250;
	.loc	1 84 20                         // chunk_delta_h.py:84:20
	or.b32 	%r353, %r352, %r342;
	.loc	1 84 27                         // chunk_delta_h.py:84:27
	shl.b32 	%r354, %r353, 7;
	.loc	1 84 9                          // chunk_delta_h.py:84:9
	mul.wide.s32 	%rd117, %r354, 2;
	add.s64 	%rd2, %rd111, %rd117;
	.loc	1 85 9                          // chunk_delta_h.py:85:9
	add.s64 	%rd3, %rd110, %rd117;
	.loc	1 86 9                          // chunk_delta_h.py:86:9
	add.s64 	%rd4, %rd112, %rd117;
	.loc	1 113 79                        // chunk_delta_h.py:113:79
	shl.b32 	%r355, %r340, 6;
	.loc	1 113 94                        // chunk_delta_h.py:113:94
	cvt.s64.s32 	%rd6, %r355;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	mov.u32 	%r3, %tid.x;
	bfe.s32 	%r356, %r3, 3, 1;
	and.b32 	%r6, %r3, 16;
	bfe.s32 	%r357, %r3, 4, 1;
	bfe.s32 	%r358, %r3, 5, 1;
	and.b32 	%r8, %r3, 64;
	bfe.u32 	%r359, %r3, 3, 4;
	or.b32 	%r360, %r359, 16;
	or.b32 	%r361, %r359, 32;
	or.b32 	%r362, %r359, 48;
	shl.b32 	%r9, %r3, 3;
	and.b32 	%r363, %r9, 24;
	and.b32 	%r10, %r3, 4;
	shl.b32 	%r364, %r10, 3;
	or.b32 	%r365, %r363, %r364;
	shr.u32 	%r11, %r3, 2;
	bfe.u32 	%r12, %r3, 2, 3;
	shr.u32 	%r366, %r3, 1;
	and.b32 	%r13, %r366, 48;
	or.b32 	%r367, %r13, %r12;
	or.b32 	%r368, %r367, 8;
	cvt.u64.u32 	%rd7, %r359;
	cvt.u64.u32 	%rd8, %r360;
	cvt.u64.u32 	%rd9, %r361;
	cvt.u64.u32 	%rd10, %r362;
	cvt.u64.u32 	%rd11, %r365;
	cvt.u64.u32 	%rd12, %r367;
	cvt.u64.u32 	%rd13, %r368;
	or.b64 	%rd14, %rd11, %rd6;
	setp.gt.s32 	%p26, %r355, -1;
	setp.lt.s64 	%p27, %rd14, 128;
	and.pred 	%p44, %p26, %p27;
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	or.b64 	%rd15, %rd7, 64;
	or.b64 	%rd16, %rd8, 64;
	or.b64 	%rd17, %rd9, 64;
	or.b64 	%rd18, %rd10, 64;
	.loc	1 125 83                        // chunk_delta_h.py:125:83
	cvt.s64.s32 	%rd19, %r250;
	.loc	1 150 35                        // chunk_delta_h.py:150:35
	mul.wide.s32 	%rd118, %r352, 4;
	add.s64 	%rd119, %rd114, %rd118;
	.loc	1 151 50                        // chunk_delta_h.py:151:50
	mul.wide.u32 	%rd120, %r342, 4;
	add.s64 	%rd20, %rd119, %rd120;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s32 	%p28, %r343, 64;
	setp.gt.s32 	%p29, %r343, 63;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	mul.wide.u32 	%rd121, %r359, 4096;
	mul.wide.u32 	%rd122, %r360, 4096;
	mul.wide.u32 	%rd123, %r361, 4096;
	mul.wide.u32 	%rd124, %r362, 4096;
	or.b64 	%rd125, %rd121, %rd11;
	or.b64 	%rd126, %rd122, %rd11;
	or.b64 	%rd127, %rd123, %rd11;
	or.b64 	%rd128, %rd124, %rd11;
	shl.b64 	%rd129, %rd125, 1;
	add.s64 	%rd66, %rd4, %rd129;
	shl.b64 	%rd130, %rd126, 1;
	add.s64 	%rd67, %rd4, %rd130;
	shl.b64 	%rd131, %rd127, 1;
	add.s64 	%rd68, %rd4, %rd131;
	shl.b64 	%rd132, %rd128, 1;
	add.s64 	%rd69, %rd4, %rd132;
	setp.lt.s32 	%p30, %r359, %r250;
	setp.lt.s32 	%p31, %r360, %r250;
	setp.lt.s32 	%p32, %r361, %r250;
	setp.lt.s32 	%p33, %r362, %r250;
	and.b32 	%r369, %r356, 72;
	and.b32 	%r370, %r357, 144;
	and.b32 	%r371, %r358, 288;
	shl.b32 	%r14, %r8, 3;
	or.b32 	%r372, %r369, %r14;
	xor.b32 	%r373, %r372, %r365;
	xor.b32 	%r374, %r373, %r370;
	xor.b32 	%r15, %r374, %r371;
	shl.b32 	%r375, %r15, 1;
	mov.b32 	%r376, global_smem;
	add.s32 	%r251, %r376, %r375;
	or.b32 	%r377, %r365, 1024;
	or.b32 	%r378, %r372, %r370;
	or.b32 	%r379, %r378, %r371;
	xor.b32 	%r16, %r379, %r377;
	shl.b32 	%r380, %r16, 1;
	add.s32 	%r253, %r376, %r380;
	or.b32 	%r381, %r365, 2048;
	xor.b32 	%r17, %r379, %r381;
	shl.b32 	%r382, %r17, 1;
	add.s32 	%r255, %r376, %r382;
	or.b32 	%r383, %r365, 3072;
	xor.b32 	%r18, %r379, %r383;
	shl.b32 	%r384, %r18, 1;
	add.s32 	%r257, %r376, %r384;
	selp.b32 	%r385, 16, 0, %p29;
	selp.b32 	%r260, %r385, 0, %p30;
	// begin inline asm
	cp.async.cg.shared.global [ %r251 + 0 ], [ %rd66 + 0 ], 0x10, %r260;
	// end inline asm
	selp.b32 	%r262, %r385, 0, %p31;
	// begin inline asm
	cp.async.cg.shared.global [ %r253 + 0 ], [ %rd67 + 0 ], 0x10, %r262;
	// end inline asm
	selp.b32 	%r264, %r385, 0, %p32;
	// begin inline asm
	cp.async.cg.shared.global [ %r255 + 0 ], [ %rd68 + 0 ], 0x10, %r264;
	// end inline asm
	selp.b32 	%r266, %r385, 0, %p33;
	// begin inline asm
	cp.async.cg.shared.global [ %r257 + 0 ], [ %rd69 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd70, %rd66, 128;
	add.s64 	%rd71, %rd67, 128;
	add.s64 	%rd72, %rd68, 128;
	add.s64 	%rd73, %rd69, 128;
	add.s32 	%r386, %r376, 24576;
	add.s32 	%r259, %r386, %r375;
	add.s32 	%r261, %r386, %r380;
	add.s32 	%r263, %r386, %r382;
	add.s32 	%r265, %r386, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r259 + 0 ], [ %rd70 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r261 + 0 ], [ %rd71 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r263 + 0 ], [ %rd72 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r265 + 0 ], [ %rd73 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd329, %rd14, %rd121;
	add.s64 	%rd328, %rd122, %rd14;
	add.s64 	%rd327, %rd123, %rd14;
	add.s64 	%rd326, %rd124, %rd14;
	shl.b64 	%rd133, %rd329, 1;
	add.s64 	%rd74, %rd2, %rd133;
	shl.b64 	%rd134, %rd328, 1;
	add.s64 	%rd75, %rd2, %rd134;
	shl.b64 	%rd135, %rd327, 1;
	add.s64 	%rd76, %rd2, %rd135;
	shl.b64 	%rd136, %rd326, 1;
	add.s64 	%rd77, %rd2, %rd136;
	and.pred 	%p117, %p44, %p30;
	and.pred 	%p116, %p44, %p31;
	and.pred 	%p115, %p44, %p32;
	and.pred 	%p114, %p44, %p33;
	and.b32 	%r387, %r3, 56;
	xor.b32 	%r388, %r365, %r387;
	shl.b32 	%r389, %r359, 6;
	or.b32 	%r19, %r388, %r389;
	shl.b32 	%r390, %r19, 1;
	add.s32 	%r391, %r376, %r390;
	add.s32 	%r267, %r391, 98304;
	add.s32 	%r269, %r391, 100352;
	add.s32 	%r271, %r391, 102400;
	add.s32 	%r273, %r391, 104448;
	selp.b32 	%r392, 16, 0, %p117;
	selp.b32 	%r268, %r392, 0, %p29;
	// begin inline asm
	cp.async.cg.shared.global [ %r267 + 0 ], [ %rd74 + 0 ], 0x10, %r268;
	// end inline asm
	selp.b32 	%r393, 16, 0, %p116;
	selp.b32 	%r270, %r393, 0, %p29;
	// begin inline asm
	cp.async.cg.shared.global [ %r269 + 0 ], [ %rd75 + 0 ], 0x10, %r270;
	// end inline asm
	selp.b32 	%r394, 16, 0, %p115;
	selp.b32 	%r272, %r394, 0, %p29;
	// begin inline asm
	cp.async.cg.shared.global [ %r271 + 0 ], [ %rd76 + 0 ], 0x10, %r272;
	// end inline asm
	selp.b32 	%r395, 16, 0, %p114;
	selp.b32 	%r274, %r395, 0, %p29;
	// begin inline asm
	cp.async.cg.shared.global [ %r273 + 0 ], [ %rd77 + 0 ], 0x10, %r274;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	mul.wide.u32 	%rd137, %r367, 128;
	add.s64 	%rd78, %rd20, %rd137;
	mul.wide.u32 	%rd138, %r368, 128;
	add.s64 	%rd79, %rd20, %rd138;
	setp.lt.s32 	%p34, %r367, %r250;
	setp.lt.s32 	%p35, %r368, %r250;
	shl.b32 	%r396, %r367, 2;
	add.s32 	%r397, %r376, %r396;
	add.s32 	%r275, %r397, 140288;
	add.s32 	%r277, %r397, 140320;
	and.b32 	%r20, %r3, 3;
	setp.eq.s32 	%p22, %r20, 0;
	selp.b32 	%r398, 4, 0, %p29;
	selp.b32 	%r276, %r398, 0, %p34;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r275 + 0 ], [ %rd78 + 0 ], 0x4, %r276;
	// end inline asm
	selp.b32 	%r278, %r398, 0, %p35;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r277 + 0 ], [ %rd79 + 0 ], 0x4, %r278;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd80, %rd3, %rd129;
	add.s64 	%rd81, %rd3, %rd130;
	add.s64 	%rd82, %rd3, %rd131;
	add.s64 	%rd83, %rd3, %rd132;
	add.s32 	%r399, %r376, 49152;
	add.s32 	%r279, %r399, %r375;
	add.s32 	%r281, %r399, %r380;
	add.s32 	%r283, %r399, %r382;
	add.s32 	%r285, %r399, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r279 + 0 ], [ %rd80 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r281 + 0 ], [ %rd81 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r283 + 0 ], [ %rd82 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r285 + 0 ], [ %rd83 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd84, %rd80, 128;
	add.s64 	%rd85, %rd81, 128;
	add.s64 	%rd86, %rd82, 128;
	add.s64 	%rd87, %rd83, 128;
	add.s32 	%r400, %r376, 73728;
	add.s32 	%r287, %r400, %r375;
	add.s32 	%r289, %r400, %r380;
	add.s32 	%r291, %r400, %r382;
	add.s32 	%r293, %r400, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r287 + 0 ], [ %rd84 + 0 ], 0x10, %r260;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r289 + 0 ], [ %rd85 + 0 ], 0x10, %r262;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r291 + 0 ], [ %rd86 + 0 ], 0x10, %r264;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r293 + 0 ], [ %rd87 + 0 ], 0x10, %r266;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.gt.s32 	%p36, %r343, 127;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	or.b64 	%rd139, %rd12, 64;
	or.b64 	%rd140, %rd13, 64;
	shl.b64 	%rd141, %rd15, 12;
	shl.b64 	%rd142, %rd16, 12;
	shl.b64 	%rd143, %rd17, 12;
	shl.b64 	%rd144, %rd18, 12;
	or.b64 	%rd145, %rd141, %rd11;
	or.b64 	%rd146, %rd142, %rd11;
	or.b64 	%rd147, %rd143, %rd11;
	or.b64 	%rd148, %rd144, %rd11;
	shl.b64 	%rd149, %rd145, 1;
	add.s64 	%rd88, %rd4, %rd149;
	shl.b64 	%rd150, %rd146, 1;
	add.s64 	%rd89, %rd4, %rd150;
	shl.b64 	%rd151, %rd147, 1;
	add.s64 	%rd90, %rd4, %rd151;
	shl.b64 	%rd152, %rd148, 1;
	add.s64 	%rd91, %rd4, %rd152;
	setp.lt.s64 	%p37, %rd15, %rd19;
	setp.lt.s64 	%p38, %rd16, %rd19;
	setp.lt.s64 	%p39, %rd17, %rd19;
	setp.lt.s64 	%p40, %rd18, %rd19;
	bar.sync 	0;
	add.s32 	%r401, %r376, 8192;
	add.s32 	%r295, %r401, %r375;
	add.s32 	%r297, %r401, %r380;
	add.s32 	%r299, %r401, %r382;
	add.s32 	%r301, %r401, %r384;
	selp.b32 	%r402, 16, 0, %p37;
	selp.b32 	%r304, %r402, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r295 + 0 ], [ %rd88 + 0 ], 0x10, %r304;
	// end inline asm
	selp.b32 	%r403, 16, 0, %p38;
	selp.b32 	%r306, %r403, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r297 + 0 ], [ %rd89 + 0 ], 0x10, %r306;
	// end inline asm
	selp.b32 	%r404, 16, 0, %p39;
	selp.b32 	%r308, %r404, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r299 + 0 ], [ %rd90 + 0 ], 0x10, %r308;
	// end inline asm
	selp.b32 	%r405, 16, 0, %p40;
	selp.b32 	%r310, %r405, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r301 + 0 ], [ %rd91 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd92, %rd88, 128;
	add.s64 	%rd93, %rd89, 128;
	add.s64 	%rd94, %rd90, 128;
	add.s64 	%rd95, %rd91, 128;
	add.s32 	%r406, %r376, 32768;
	add.s32 	%r303, %r406, %r375;
	add.s32 	%r305, %r406, %r380;
	add.s32 	%r307, %r406, %r382;
	add.s32 	%r309, %r406, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r303 + 0 ], [ %rd92 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r305 + 0 ], [ %rd93 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r307 + 0 ], [ %rd94 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r309 + 0 ], [ %rd95 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd325, %rd141, %rd14;
	add.s64 	%rd324, %rd142, %rd14;
	add.s64 	%rd323, %rd143, %rd14;
	add.s64 	%rd322, %rd144, %rd14;
	shl.b64 	%rd153, %rd325, 1;
	add.s64 	%rd96, %rd2, %rd153;
	shl.b64 	%rd154, %rd324, 1;
	add.s64 	%rd97, %rd2, %rd154;
	shl.b64 	%rd155, %rd323, 1;
	add.s64 	%rd98, %rd2, %rd155;
	shl.b64 	%rd156, %rd322, 1;
	add.s64 	%rd99, %rd2, %rd156;
	and.pred 	%p113, %p44, %p37;
	and.pred 	%p112, %p44, %p38;
	and.pred 	%p111, %p44, %p39;
	and.pred 	%p110, %p44, %p40;
	add.s32 	%r311, %r391, 106496;
	add.s32 	%r313, %r391, 108544;
	add.s32 	%r315, %r391, 110592;
	add.s32 	%r317, %r391, 112640;
	selp.b32 	%r407, 16, 0, %p113;
	selp.b32 	%r312, %r407, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r311 + 0 ], [ %rd96 + 0 ], 0x10, %r312;
	// end inline asm
	selp.b32 	%r408, 16, 0, %p112;
	selp.b32 	%r314, %r408, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r313 + 0 ], [ %rd97 + 0 ], 0x10, %r314;
	// end inline asm
	selp.b32 	%r409, 16, 0, %p111;
	selp.b32 	%r316, %r409, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r315 + 0 ], [ %rd98 + 0 ], 0x10, %r316;
	// end inline asm
	selp.b32 	%r410, 16, 0, %p110;
	selp.b32 	%r318, %r410, 0, %p36;
	// begin inline asm
	cp.async.cg.shared.global [ %r317 + 0 ], [ %rd99 + 0 ], 0x10, %r318;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b64 	%rd157, %rd139, 7;
	add.s64 	%rd100, %rd20, %rd157;
	shl.b64 	%rd158, %rd140, 7;
	add.s64 	%rd101, %rd20, %rd158;
	setp.lt.s64 	%p41, %rd139, %rd19;
	setp.lt.s64 	%p42, %rd140, %rd19;
	add.s32 	%r319, %r397, 140544;
	add.s32 	%r321, %r397, 140576;
	selp.b32 	%r411, 4, 0, %p41;
	selp.b32 	%r320, %r411, 0, %p36;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r319 + 0 ], [ %rd100 + 0 ], 0x4, %r320;
	// end inline asm
	selp.b32 	%r412, 4, 0, %p42;
	selp.b32 	%r322, %r412, 0, %p36;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r321 + 0 ], [ %rd101 + 0 ], 0x4, %r322;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd102, %rd3, %rd149;
	add.s64 	%rd103, %rd3, %rd150;
	add.s64 	%rd104, %rd3, %rd151;
	add.s64 	%rd105, %rd3, %rd152;
	add.s32 	%r413, %r376, 57344;
	add.s32 	%r323, %r413, %r375;
	add.s32 	%r325, %r413, %r380;
	add.s32 	%r327, %r413, %r382;
	add.s32 	%r329, %r413, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r323 + 0 ], [ %rd102 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r325 + 0 ], [ %rd103 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r327 + 0 ], [ %rd104 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r329 + 0 ], [ %rd105 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd106, %rd102, 128;
	add.s64 	%rd107, %rd103, 128;
	add.s64 	%rd108, %rd104, 128;
	add.s64 	%rd109, %rd105, 128;
	add.s32 	%r414, %r376, 81920;
	add.s32 	%r331, %r414, %r375;
	add.s32 	%r333, %r414, %r380;
	add.s32 	%r335, %r414, %r382;
	add.s32 	%r337, %r414, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r331 + 0 ], [ %rd106 + 0 ], 0x10, %r304;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r333 + 0 ], [ %rd107 + 0 ], 0x10, %r306;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r335 + 0 ], [ %rd108 + 0 ], 0x10, %r308;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r337 + 0 ], [ %rd109 + 0 ], 0x10, %r310;
	// end inline asm
	cp.async.commit_group;
	mov.b32 	%r1377, 0f00000000;
	mov.b32 	%r1378, %r1377;
	mov.b32 	%r1379, %r1377;
	mov.b32 	%r1380, %r1377;
	mov.b32 	%r1381, %r1377;
	mov.b32 	%r1382, %r1377;
	mov.b32 	%r1383, %r1377;
	mov.b32 	%r1384, %r1377;
	mov.b32 	%r1385, %r1377;
	mov.b32 	%r1386, %r1377;
	mov.b32 	%r1387, %r1377;
	mov.b32 	%r1388, %r1377;
	mov.b32 	%r1389, %r1377;
	mov.b32 	%r1390, %r1377;
	mov.b32 	%r1391, %r1377;
	mov.b32 	%r1392, %r1377;
	mov.b32 	%r1393, %r1377;
	mov.b32 	%r1394, %r1377;
	mov.b32 	%r1395, %r1377;
	mov.b32 	%r1396, %r1377;
	mov.b32 	%r1397, %r1377;
	mov.b32 	%r1398, %r1377;
	mov.b32 	%r1399, %r1377;
	mov.b32 	%r1400, %r1377;
	mov.b32 	%r1401, %r1377;
	mov.b32 	%r1402, %r1377;
	mov.b32 	%r1403, %r1377;
	mov.b32 	%r1404, %r1377;
	mov.b32 	%r1405, %r1377;
	mov.b32 	%r1406, %r1377;
	mov.b32 	%r1407, %r1377;
	mov.b32 	%r1408, %r1377;
	mov.b32 	%r1709, %r1377;
	mov.b32 	%r1710, %r1377;
	mov.b32 	%r1711, %r1377;
	mov.b32 	%r1712, %r1377;
	mov.b32 	%r1713, %r1377;
	mov.b32 	%r1714, %r1377;
	mov.b32 	%r1715, %r1377;
	mov.b32 	%r1716, %r1377;
	mov.b32 	%r1717, %r1377;
	mov.b32 	%r1718, %r1377;
	mov.b32 	%r1719, %r1377;
	mov.b32 	%r1720, %r1377;
	mov.b32 	%r1721, %r1377;
	mov.b32 	%r1722, %r1377;
	mov.b32 	%r1723, %r1377;
	mov.b32 	%r1724, %r1377;
	mov.b32 	%r1725, %r1377;
	mov.b32 	%r1726, %r1377;
	mov.b32 	%r1727, %r1377;
	mov.b32 	%r1728, %r1377;
	mov.b32 	%r1729, %r1377;
	mov.b32 	%r1730, %r1377;
	mov.b32 	%r1731, %r1377;
	mov.b32 	%r1732, %r1377;
	mov.b32 	%r1733, %r1377;
	mov.b32 	%r1734, %r1377;
	mov.b32 	%r1735, %r1377;
	mov.b32 	%r1736, %r1377;
	mov.b32 	%r1737, %r1377;
	mov.b32 	%r1738, %r1377;
	mov.b32 	%r1739, %r1377;
	mov.b32 	%r1740, %r1377;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	@%p28 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	ld.param.b64 	%rd113, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_3];
	shr.s32 	%r344, %r343, 31;
	shr.u32 	%r345, %r344, 26;
	add.s32 	%r346, %r343, %r345;
	shr.s32 	%r1, %r346, 6;
	ld.param.b64 	%rd115, [chunk_gated_delta_rule_fwd_kernel_h_blockdim64_param_5];
	and.b32 	%r347, %r2, 1073217536;
	mul.lo.s32 	%r348, %r347, %r1;
	shl.b32 	%r349, %r342, 14;
	or.b32 	%r350, %r348, %r349;
	mul.wide.s32 	%rd116, %r350, 2;
	add.s64 	%rd1, %rd115, %rd116;
	add.s64 	%rd5, %rd113, %rd117;
	shr.u32 	%r4, %r3, 5;
	and.b32 	%r5, %r3, 8;
	and.b32 	%r7, %r3, 32;
	cvt.u32.u64 	%r422, %rd11;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.eq.s32 	%p43, %r10, 0;
	add.s32 	%r423, %r1, -2;
	mul.lo.s32 	%r424, %r20, 72;
	selp.b32 	%r425, 0, 288, %p43;
	xor.b32 	%r426, %r425, %r424;
	shl.b32 	%r427, %r5, 6;
	or.b32 	%r428, %r426, %r427;
	shr.u32 	%r429, %r6, 1;
	xor.b32 	%r430, %r428, %r429;
	shl.b32 	%r431, %r7, 5;
	or.b32 	%r432, %r430, %r431;
	shl.b32 	%r433, %r8, 5;
	xor.b32 	%r21, %r432, %r433;
	shl.b32 	%r434, %r21, 1;
	add.s32 	%r436, %r376, 123904;
	add.s32 	%r492, %r436, %r434;
	xor.b32 	%r23, %r21, 16;
	shl.b32 	%r437, %r23, 1;
	add.s32 	%r497, %r436, %r437;
	xor.b32 	%r25, %r21, 32;
	shl.b32 	%r438, %r25, 1;
	add.s32 	%r502, %r436, %r438;
	xor.b32 	%r27, %r21, 48;
	shl.b32 	%r439, %r27, 1;
	add.s32 	%r507, %r436, %r439;
	shl.b64 	%rd29, %rd7, 8;
	shl.b64 	%rd30, %rd8, 8;
	shl.b64 	%rd31, %rd9, 8;
	shl.b64 	%rd32, %rd10, 8;
	shl.b32 	%r440, %r3, 6;
	and.b32 	%r441, %r440, 448;
	or.b32 	%r442, %r441, %r427;
	or.b32 	%r443, %r442, %r429;
	or.b32 	%r444, %r443, %r431;
	or.b32 	%r445, %r444, %r433;
	and.b32 	%r446, %r9, 448;
	or.b32 	%r447, %r422, %r446;
	or.b32 	%r448, %r447, %r14;
	shr.u32 	%r449, %r445, 2;
	and.b32 	%r450, %r449, 536870896;
	add.s32 	%r1642, %r376, 114688;
	add.s32 	%r452, %r1642, %r450;
	shl.b32 	%r453, %r445, 1;
	add.s32 	%r512, %r452, %r453;
	add.s32 	%r517, %r512, 32;
	add.s32 	%r522, %r512, 64;
	add.s32 	%r527, %r512, 96;
	shr.u32 	%r454, %r448, 2;
	and.b32 	%r455, %r454, 240;
	add.s32 	%r456, %r1642, %r455;
	shl.b32 	%r457, %r448, 1;
	add.s32 	%r33, %r456, %r457;
	or.b32 	%r458, %r448, 1024;
	shr.u32 	%r459, %r458, 2;
	and.b32 	%r460, %r459, 496;
	add.s32 	%r461, %r1642, %r460;
	add.s32 	%r34, %r461, %r457;
	or.b32 	%r462, %r448, 2048;
	shr.u32 	%r463, %r462, 2;
	and.b32 	%r464, %r463, 752;
	add.s32 	%r465, %r1642, %r464;
	add.s32 	%r35, %r465, %r457;
	or.b32 	%r466, %r448, 3072;
	shr.u32 	%r467, %r466, 2;
	and.b32 	%r468, %r467, 1008;
	add.s32 	%r469, %r1642, %r468;
	add.s32 	%r36, %r469, %r457;
	add.s32 	%r470, %r376, 132096;
	add.s32 	%r548, %r470, %r434;
	add.s32 	%r553, %r470, %r437;
	add.s32 	%r558, %r470, %r438;
	add.s32 	%r563, %r470, %r439;
	shl.b64 	%rd33, %rd15, 8;
	shl.b64 	%rd34, %rd16, 8;
	shl.b64 	%rd35, %rd17, 8;
	shl.b64 	%rd36, %rd18, 8;
	bfe.u32 	%r471, %r436, 4, 14;
	cvt.u64.u32 	%rd160, %r471;
	or.b64 	%rd181, %rd160, 4611686293338849280;
	add.s32 	%r472, %r376, 125952;
	bfe.u32 	%r473, %r472, 4, 14;
	cvt.u64.u32 	%rd161, %r473;
	or.b64 	%rd183, %rd161, 4611686293338849280;
	add.s32 	%r474, %r376, 128000;
	bfe.u32 	%r475, %r474, 4, 14;
	cvt.u64.u32 	%rd162, %r475;
	or.b64 	%rd185, %rd162, 4611686293338849280;
	add.s32 	%r476, %r376, 130048;
	bfe.u32 	%r477, %r476, 4, 14;
	cvt.u64.u32 	%rd163, %r477;
	or.b64 	%rd187, %rd163, 4611686293338849280;
	bfe.u32 	%r478, %r470, 4, 14;
	cvt.u64.u32 	%rd164, %r478;
	or.b64 	%rd189, %rd164, 4611686293338849280;
	add.s32 	%r479, %r376, 134144;
	bfe.u32 	%r480, %r479, 4, 14;
	cvt.u64.u32 	%rd165, %r480;
	or.b64 	%rd191, %rd165, 4611686293338849280;
	add.s32 	%r481, %r376, 136192;
	bfe.u32 	%r482, %r481, 4, 14;
	cvt.u64.u32 	%rd166, %r482;
	or.b64 	%rd193, %rd166, 4611686293338849280;
	add.s32 	%r483, %r376, 138240;
	bfe.u32 	%r484, %r483, 4, 14;
	cvt.u64.u32 	%rd167, %r484;
	or.b64 	%rd195, %rd167, 4611686293338849280;
	add.s32 	%r1293, %r1642, %r434;
	add.s32 	%r1298, %r1642, %r437;
	add.s32 	%r1303, %r1642, %r438;
	add.s32 	%r1308, %r1642, %r439;
	bfe.u32 	%r485, %r1642, 4, 14;
	cvt.u64.u32 	%rd168, %r485;
	or.b64 	%rd202, %rd168, 4611686293338849280;
	add.s32 	%r486, %r376, 116736;
	bfe.u32 	%r487, %r486, 4, 14;
	cvt.u64.u32 	%rd169, %r487;
	or.b64 	%rd204, %rd169, 4611686293338849280;
	add.s32 	%r488, %r376, 118784;
	bfe.u32 	%r489, %r488, 4, 14;
	cvt.u64.u32 	%rd170, %r489;
	or.b64 	%rd206, %rd170, 4611686293338849280;
	add.s32 	%r490, %r376, 120832;
	bfe.u32 	%r491, %r490, 4, 14;
	cvt.u64.u32 	%rd171, %r491;
	or.b64 	%rd208, %rd171, 4611686293338849280;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cvt.s64.s32 	%rd49, %r423;
	cvt.u64.u32 	%rd50, %r1;
	add.s32 	%r45, %r13, %r12;
	mov.b32 	%r2414, 1;
	mov.b32 	%r2413, -1;
	mov.b32 	%r1709, 0f00000000;
	mov.b64 	%rd321, 0;
	mov.b32 	%r2348, 64;
	mov.b32 	%r899, 0;
	mov.b32 	%r2347, %r899;
	mov.b32 	%r1710, %r1709;
	mov.b32 	%r1711, %r1709;
	mov.b32 	%r1712, %r1709;
	mov.b32 	%r1713, %r1709;
	mov.b32 	%r1714, %r1709;
	mov.b32 	%r1715, %r1709;
	mov.b32 	%r1716, %r1709;
	mov.b32 	%r1717, %r1709;
	mov.b32 	%r1718, %r1709;
	mov.b32 	%r1719, %r1709;
	mov.b32 	%r1720, %r1709;
	mov.b32 	%r1721, %r1709;
	mov.b32 	%r1722, %r1709;
	mov.b32 	%r1723, %r1709;
	mov.b32 	%r1724, %r1709;
	mov.b32 	%r1725, %r1709;
	mov.b32 	%r1726, %r1709;
	mov.b32 	%r1727, %r1709;
	mov.b32 	%r1728, %r1709;
	mov.b32 	%r1729, %r1709;
	mov.b32 	%r1730, %r1709;
	mov.b32 	%r1731, %r1709;
	mov.b32 	%r1732, %r1709;
	mov.b32 	%r1733, %r1709;
	mov.b32 	%r1734, %r1709;
	mov.b32 	%r1735, %r1709;
	mov.b32 	%r1736, %r1709;
	mov.b32 	%r1737, %r1709;
	mov.b32 	%r1738, %r1709;
	mov.b32 	%r1739, %r1709;
	mov.b32 	%r1740, %r1709;
	mov.b32 	%r1377, %r1709;
	mov.b32 	%r1378, %r1709;
	mov.b32 	%r1379, %r1709;
	mov.b32 	%r1380, %r1709;
	mov.b32 	%r1381, %r1709;
	mov.b32 	%r1382, %r1709;
	mov.b32 	%r1383, %r1709;
	mov.b32 	%r1384, %r1709;
	mov.b32 	%r1385, %r1709;
	mov.b32 	%r1386, %r1709;
	mov.b32 	%r1387, %r1709;
	mov.b32 	%r1388, %r1709;
	mov.b32 	%r1389, %r1709;
	mov.b32 	%r1390, %r1709;
	mov.b32 	%r1391, %r1709;
	mov.b32 	%r1392, %r1709;
	mov.b32 	%r1393, %r1709;
	mov.b32 	%r1394, %r1709;
	mov.b32 	%r1395, %r1709;
	mov.b32 	%r1396, %r1709;
	mov.b32 	%r1397, %r1709;
	mov.b32 	%r1398, %r1709;
	mov.b32 	%r1399, %r1709;
	mov.b32 	%r1400, %r1709;
	mov.b32 	%r1401, %r1709;
	mov.b32 	%r1402, %r1709;
	mov.b32 	%r1403, %r1709;
	mov.b32 	%r1404, %r1709;
	mov.b32 	%r1405, %r1709;
	mov.b32 	%r1406, %r1709;
	mov.b32 	%r1407, %r1709;
	mov.b32 	%r1408, %r1709;
	mov.b32 	%r2415, %r2413;
	mov.b32 	%r2416, %r2414;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	mov.b64 	%rd55, %rd325;
	mov.b64 	%rd54, %rd324;
	mov.b64 	%rd53, %rd323;
	mov.b64 	%rd52, %rd322;
	mov.pred 	%p13, %p113;
	mov.pred 	%p12, %p112;
	mov.pred 	%p11, %p111;
	mov.pred 	%p10, %p110;
	cvt.u32.u64 	%r2021, %rd12;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.lt.s64 	%p73, %rd321, %rd49;
	add.s32 	%r2022, %r2414, 1;
	add.s32 	%r2023, %r2416, 1;
	add.s32 	%r2024, %r2413, 1;
	add.s32 	%r2025, %r2415, 1;
	.loc	1 113 37                        // chunk_delta_h.py:113:37
	mul.wide.s32 	%rd239, %r2347, 2;
	add.s64 	%rd240, %rd1, %rd239;
	.loc	1 114 31                        // chunk_delta_h.py:114:31
	cvt.rn.bf16x2.f32 	%r513, %r1378, %r1377;
	cvt.rn.bf16x2.f32 	%r514, %r1380, %r1379;
	cvt.rn.bf16x2.f32 	%r515, %r1382, %r1381;
	cvt.rn.bf16x2.f32 	%r516, %r1384, %r1383;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r492], {%r513, %r514, %r515, %r516};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r518, %r1386, %r1385;
	cvt.rn.bf16x2.f32 	%r519, %r1388, %r1387;
	cvt.rn.bf16x2.f32 	%r520, %r1390, %r1389;
	cvt.rn.bf16x2.f32 	%r521, %r1392, %r1391;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r497], {%r518, %r519, %r520, %r521};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r523, %r1394, %r1393;
	cvt.rn.bf16x2.f32 	%r524, %r1396, %r1395;
	cvt.rn.bf16x2.f32 	%r525, %r1398, %r1397;
	cvt.rn.bf16x2.f32 	%r526, %r1400, %r1399;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r502], {%r523, %r524, %r525, %r526};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r528, %r1402, %r1401;
	cvt.rn.bf16x2.f32 	%r529, %r1404, %r1403;
	cvt.rn.bf16x2.f32 	%r530, %r1406, %r1405;
	cvt.rn.bf16x2.f32 	%r531, %r1408, %r1407;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r507], {%r528, %r529, %r530, %r531};
	// end inline asm
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	add.s64 	%rd241, %rd240, %rd29;
	shl.b64 	%rd242, %rd14, 1;
	add.s64 	%rd172, %rd241, %rd242;
	add.s64 	%rd243, %rd240, %rd30;
	add.s64 	%rd173, %rd243, %rd242;
	add.s64 	%rd244, %rd240, %rd31;
	add.s64 	%rd174, %rd244, %rd242;
	add.s64 	%rd245, %rd240, %rd32;
	add.s64 	%rd175, %rd245, %rd242;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r512], {%r513, %r514, %r515, %r516};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r517], {%r518, %r519, %r520, %r521};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r522], {%r523, %r524, %r525, %r526};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r527], {%r528, %r529, %r530, %r531};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r536, %r537, %r538, %r539}, [%r34+2048];
	ld.shared.v4.b32 	{%r540, %r541, %r542, %r543}, [%r35+4096];
	ld.shared.v4.b32 	{%r544, %r545, %r546, %r547}, [%r36+6144];
	ld.shared.v4.b32 	{%r532, %r533, %r534, %r535}, [%r33];
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd172 + 0 ], { %r532, %r533, %r534, %r535 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd173 + 0 ], { %r536, %r537, %r538, %r539 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd174 + 0 ], { %r540, %r541, %r542, %r543 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd175 + 0 ], { %r544, %r545, %r546, %r547 };
	// end inline asm
	.loc	1 117 35                        // chunk_delta_h.py:117:35
	cvt.rn.bf16x2.f32 	%r569, %r1710, %r1709;
	cvt.rn.bf16x2.f32 	%r570, %r1712, %r1711;
	cvt.rn.bf16x2.f32 	%r571, %r1714, %r1713;
	cvt.rn.bf16x2.f32 	%r572, %r1716, %r1715;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r548], {%r569, %r570, %r571, %r572};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r574, %r1718, %r1717;
	cvt.rn.bf16x2.f32 	%r575, %r1720, %r1719;
	cvt.rn.bf16x2.f32 	%r576, %r1722, %r1721;
	cvt.rn.bf16x2.f32 	%r577, %r1724, %r1723;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r553], {%r574, %r575, %r576, %r577};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r579, %r1726, %r1725;
	cvt.rn.bf16x2.f32 	%r580, %r1728, %r1727;
	cvt.rn.bf16x2.f32 	%r581, %r1730, %r1729;
	cvt.rn.bf16x2.f32 	%r582, %r1732, %r1731;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r558], {%r579, %r580, %r581, %r582};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r584, %r1734, %r1733;
	cvt.rn.bf16x2.f32 	%r585, %r1736, %r1735;
	cvt.rn.bf16x2.f32 	%r586, %r1738, %r1737;
	cvt.rn.bf16x2.f32 	%r587, %r1740, %r1739;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r563], {%r584, %r585, %r586, %r587};
	// end inline asm
	.loc	1 117 27                        // chunk_delta_h.py:117:27
	add.s64 	%rd246, %rd240, %rd33;
	add.s64 	%rd176, %rd246, %rd242;
	add.s64 	%rd247, %rd240, %rd34;
	add.s64 	%rd177, %rd247, %rd242;
	add.s64 	%rd248, %rd240, %rd35;
	add.s64 	%rd178, %rd248, %rd242;
	add.s64 	%rd249, %rd240, %rd36;
	add.s64 	%rd179, %rd249, %rd242;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r512], {%r569, %r570, %r571, %r572};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r517], {%r574, %r575, %r576, %r577};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r522], {%r579, %r580, %r581, %r582};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r527], {%r584, %r585, %r586, %r587};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r592, %r593, %r594, %r595}, [%r34+2048];
	ld.shared.v4.b32 	{%r596, %r597, %r598, %r599}, [%r35+4096];
	ld.shared.v4.b32 	{%r600, %r601, %r602, %r603}, [%r36+6144];
	ld.shared.v4.b32 	{%r588, %r589, %r590, %r591}, [%r33];
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd176 + 0 ], { %r588, %r589, %r590, %r591 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd177 + 0 ], { %r592, %r593, %r594, %r595 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd178 + 0 ], { %r596, %r597, %r598, %r599 };
	// end inline asm
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd179 + 0 ], { %r600, %r601, %r602, %r603 };
	// end inline asm
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	cp.async.wait_group 	6;
	bar.sync 	0;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	shfl.sync.idx.b32 	%r2026, %r4, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	shl.b64 	%rd250, %rd329, 1;
	add.s64 	%rd196, %rd5, %rd250;
	shl.b64 	%rd251, %rd328, 1;
	add.s64 	%rd197, %rd5, %rd251;
	shl.b64 	%rd252, %rd327, 1;
	add.s64 	%rd198, %rd5, %rd252;
	shl.b64 	%rd253, %rd326, 1;
	add.s64 	%rd199, %rd5, %rd253;
	.loc	1 147 30                        // chunk_delta_h.py:147:30
	add.s64 	%rd321, %rd321, 1;
	.loc	1 147 39                        // chunk_delta_h.py:147:39
	min.s32 	%r2027, %r2348, %r250;
	.loc	1 149 30                        // chunk_delta_h.py:149:30
	add.s32 	%r2028, %r45, %r2348;
	add.s32 	%r2029, %r2028, -64;
	.loc	1 149 50                        // chunk_delta_h.py:149:50
	add.s32 	%r2030, %r2028, -56;
	setp.lt.s32 	%p74, %r2029, %r250;
	setp.lt.s32 	%p75, %r2030, %r250;
	.loc	1 150 56                        // chunk_delta_h.py:150:56
	shl.b32 	%r2031, %r2027, 5;
	add.s32 	%r2032, %r2031, -32;
	.loc	1 150 60                        // chunk_delta_h.py:150:60
	mul.wide.s32 	%rd254, %r2032, 4;
	add.s64 	%rd200, %rd20, %rd254;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	setp.gt.s32 	%p76, %r2025, 2;
	setp.gt.s32 	%p77, %r2024, 1;
	setp.gt.s32 	%p78, %r2023, 2;
	setp.gt.s32 	%p79, %r2022, 1;
	selp.b32 	%r2414, 0, %r2022, %p79;
	selp.b32 	%r2416, 0, %r2023, %p78;
	selp.b32 	%r2413, 0, %r2024, %p77;
	selp.b32 	%r2415, 0, %r2025, %p76;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	shl.b32 	%r2033, %r2415, 13;
	add.s32 	%r860, %r376, %r2033;
	.loc	1 127 26                        // chunk_delta_h.py:127:26
	bfe.u32 	%r2035, %r860, 4, 14;
	cvt.u64.u32 	%rd255, %r2035;
	or.b64 	%rd180, %rd255, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd180, %rd181, 0, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2036, %r860, 32;
	bfe.u32 	%r2037, %r2036, 4, 14;
	cvt.u64.u32 	%rd256, %r2037;
	or.b64 	%rd182, %rd256, 4611686293338849280;
	mov.pred 	%p52, -1;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd182, %rd183, %p52, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2038, %r860, 64;
	bfe.u32 	%r2039, %r2038, 4, 14;
	cvt.u64.u32 	%rd257, %r2039;
	or.b64 	%rd184, %rd257, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd184, %rd185, %p52, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2040, %r860, 96;
	bfe.u32 	%r2041, %r2040, 4, 14;
	cvt.u64.u32 	%rd258, %r2041;
	or.b64 	%rd186, %rd258, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd186, %rd187, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r863, %r436;
	mov.b32 	%r861, %r899;
	mov.b32 	%r862, %r899;
	mov.b32 	%r864, %r899;
	mov.b32 	%r865, %r899;
	// begin inline asm
	// wait for regs: %r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r860,%r861,%r862,%r863,%r864,%r865
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s32 	%r1192, %r386, %r2033;
	.loc	1 131 31                        // chunk_delta_h.py:131:31
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2043, %r1192, 4, 14;
	cvt.u64.u32 	%rd259, %r2043;
	or.b64 	%rd188, %rd259, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd188, %rd189, %p52, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2044, %r1192, 32;
	bfe.u32 	%r2045, %r2044, 4, 14;
	cvt.u64.u32 	%rd260, %r2045;
	or.b64 	%rd190, %rd260, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd190, %rd191, %p52, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2046, %r1192, 64;
	bfe.u32 	%r2047, %r2046, 4, 14;
	cvt.u64.u32 	%rd261, %r2047;
	or.b64 	%rd192, %rd261, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd192, %rd193, %p52, 1, 1, 0, 1;
	// end inline asm
	add.s32 	%r2048, %r1192, 96;
	bfe.u32 	%r2049, %r2048, 4, 14;
	cvt.u64.u32 	%rd262, %r2049;
	or.b64 	%rd194, %rd262, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731}, %rd194, %rd195, %p52, 1, 1, 0, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1193, %r899;
	mov.b32 	%r1194, %r899;
	mov.b32 	%r1196, %r899;
	mov.b32 	%r1197, %r899;
	mov.b32 	%r1195, %r470;
	// begin inline asm
	// wait for regs: %r700,%r701,%r702,%r703,%r704,%r705,%r706,%r707,%r708,%r709,%r710,%r711,%r712,%r713,%r714,%r715,%r716,%r717,%r718,%r719,%r720,%r721,%r722,%r723,%r724,%r725,%r726,%r727,%r728,%r729,%r730,%r731,%r1192,%r1193,%r1194,%r1195,%r1196,%r1197
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	shl.b32 	%r2050, %r2413, 13;
	add.s32 	%r2051, %r376, 98304;
	add.s32 	%r2052, %r2051, %r2050;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	add.s32 	%r1240, %r2052, %r434;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1236, %r1237, %r1238, %r1239}, [%r1240];
	// end inline asm
	add.s32 	%r1245, %r2052, %r437;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1241, %r1242, %r1243, %r1244}, [%r1245];
	// end inline asm
	add.s32 	%r1250, %r2052, %r438;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1246, %r1247, %r1248, %r1249}, [%r1250];
	// end inline asm
	add.s32 	%r1255, %r2052, %r439;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r1251, %r1252, %r1253, %r1254}, [%r1255];
	// end inline asm
	mov.b32 	{%rs1, %rs2}, %r1236;
	cvt.f32.bf16 	%r2057, %rs2;
	cvt.f32.bf16 	%r2058, %rs1;
	sub.f32 	%r2059, %r2058, %r700;
	sub.f32 	%r2060, %r2057, %r701;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1257, %r2060, %r2059;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs3, %rs4}, %r1237;
	cvt.f32.bf16 	%r2061, %rs4;
	cvt.f32.bf16 	%r2062, %rs3;
	sub.f32 	%r2063, %r2062, %r702;
	sub.f32 	%r2064, %r2061, %r703;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1258, %r2064, %r2063;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs5, %rs6}, %r1238;
	cvt.f32.bf16 	%r2065, %rs6;
	cvt.f32.bf16 	%r2066, %rs5;
	sub.f32 	%r2067, %r2066, %r704;
	sub.f32 	%r2068, %r2065, %r705;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1259, %r2068, %r2067;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs7, %rs8}, %r1239;
	cvt.f32.bf16 	%r2069, %rs8;
	cvt.f32.bf16 	%r2070, %rs7;
	sub.f32 	%r2071, %r2070, %r706;
	sub.f32 	%r2072, %r2069, %r707;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1260, %r2072, %r2071;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs9, %rs10}, %r1241;
	cvt.f32.bf16 	%r2073, %rs10;
	cvt.f32.bf16 	%r2074, %rs9;
	sub.f32 	%r2075, %r2074, %r708;
	sub.f32 	%r2076, %r2073, %r709;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1262, %r2076, %r2075;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs11, %rs12}, %r1242;
	cvt.f32.bf16 	%r2077, %rs12;
	cvt.f32.bf16 	%r2078, %rs11;
	sub.f32 	%r2079, %r2078, %r710;
	sub.f32 	%r2080, %r2077, %r711;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1263, %r2080, %r2079;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs13, %rs14}, %r1243;
	cvt.f32.bf16 	%r2081, %rs14;
	cvt.f32.bf16 	%r2082, %rs13;
	sub.f32 	%r2083, %r2082, %r712;
	sub.f32 	%r2084, %r2081, %r713;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1264, %r2084, %r2083;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs15, %rs16}, %r1244;
	cvt.f32.bf16 	%r2085, %rs16;
	cvt.f32.bf16 	%r2086, %rs15;
	sub.f32 	%r2087, %r2086, %r714;
	sub.f32 	%r2088, %r2085, %r715;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1265, %r2088, %r2087;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs17, %rs18}, %r1246;
	cvt.f32.bf16 	%r2089, %rs18;
	cvt.f32.bf16 	%r2090, %rs17;
	sub.f32 	%r2091, %r2090, %r716;
	sub.f32 	%r2092, %r2089, %r717;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1267, %r2092, %r2091;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs19, %rs20}, %r1247;
	cvt.f32.bf16 	%r2093, %rs20;
	cvt.f32.bf16 	%r2094, %rs19;
	sub.f32 	%r2095, %r2094, %r718;
	sub.f32 	%r2096, %r2093, %r719;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1268, %r2096, %r2095;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs21, %rs22}, %r1248;
	cvt.f32.bf16 	%r2097, %rs22;
	cvt.f32.bf16 	%r2098, %rs21;
	sub.f32 	%r2099, %r2098, %r720;
	sub.f32 	%r2100, %r2097, %r721;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1269, %r2100, %r2099;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs23, %rs24}, %r1249;
	cvt.f32.bf16 	%r2101, %rs24;
	cvt.f32.bf16 	%r2102, %rs23;
	sub.f32 	%r2103, %r2102, %r722;
	sub.f32 	%r2104, %r2101, %r723;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1270, %r2104, %r2103;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs25, %rs26}, %r1251;
	cvt.f32.bf16 	%r2105, %rs26;
	cvt.f32.bf16 	%r2106, %rs25;
	sub.f32 	%r2107, %r2106, %r724;
	sub.f32 	%r2108, %r2105, %r725;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1272, %r2108, %r2107;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs27, %rs28}, %r1252;
	cvt.f32.bf16 	%r2109, %rs28;
	cvt.f32.bf16 	%r2110, %rs27;
	sub.f32 	%r2111, %r2110, %r726;
	sub.f32 	%r2112, %r2109, %r727;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1273, %r2112, %r2111;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs29, %rs30}, %r1253;
	cvt.f32.bf16 	%r2113, %rs30;
	cvt.f32.bf16 	%r2114, %rs29;
	sub.f32 	%r2115, %r2114, %r728;
	sub.f32 	%r2116, %r2113, %r729;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1274, %r2116, %r2115;
	.loc	1 141 52                        // chunk_delta_h.py:141:52
	mov.b32 	{%rs31, %rs32}, %r1254;
	cvt.f32.bf16 	%r2117, %rs32;
	cvt.f32.bf16 	%r2118, %rs31;
	sub.f32 	%r2119, %r2118, %r730;
	sub.f32 	%r2120, %r2117, %r731;
	.loc	1 145 33                        // chunk_delta_h.py:145:33
	cvt.rn.bf16x2.f32 	%r1275, %r2120, %r2119;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r512], {%r1257, %r1258, %r1259, %r1260};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r517], {%r1262, %r1263, %r1264, %r1265};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r522], {%r1267, %r1268, %r1269, %r1270};
	// end inline asm
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r527], {%r1272, %r1273, %r1274, %r1275};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r1280, %r1281, %r1282, %r1283}, [%r34+2048];
	ld.shared.v4.b32 	{%r1284, %r1285, %r1286, %r1287}, [%r35+4096];
	ld.shared.v4.b32 	{%r1288, %r1289, %r1290, %r1291}, [%r36+6144];
	.loc	1 145 26                        // chunk_delta_h.py:145:26
	ld.shared.v4.b32 	{%r1276, %r1277, %r1278, %r1279}, [%r33];
	// begin inline asm
	@%p117 st.global.v4.b32 [ %rd196 + 0 ], { %r1276, %r1277, %r1278, %r1279 };
	// end inline asm
	// begin inline asm
	@%p116 st.global.v4.b32 [ %rd197 + 0 ], { %r1280, %r1281, %r1282, %r1283 };
	// end inline asm
	// begin inline asm
	@%p115 st.global.v4.b32 [ %rd198 + 0 ], { %r1284, %r1285, %r1286, %r1287 };
	// end inline asm
	// begin inline asm
	@%p114 st.global.v4.b32 [ %rd199 + 0 ], { %r1288, %r1289, %r1290, %r1291 };
	// end inline asm
	.loc	1 150 31                        // chunk_delta_h.py:150:31
	// begin inline asm
	mov.u32 %r1292, 0x0;
	ld.global.b32 { %r1292 }, [ %rd200 + 0 ];
	// end inline asm
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b32 	%r2121, %r2413, 8;
	add.s32 	%r2122, %r376, 140288;
	add.s32 	%r2123, %r2122, %r2121;
	shl.b32 	%r2124, %r2021, 2;
	add.s32 	%r2125, %r2123, %r2124;
	ld.shared.b32 	%r2126, [%r2125];
	ld.shared.b32 	%r2127, [%r2125+32];
	.loc	1 153 53                        // chunk_delta_h.py:153:53
	sub.f32 	%r2128, %r1292, %r2126;
	sub.f32 	%r2129, %r1292, %r2127;
	.loc	1 153 42                        // chunk_delta_h.py:153:42
	mul.f32 	%r2130, %r2128, 0f3FB8AA3B;
	ex2.approx.f32 	%r2131, %r2130;
	mul.f32 	%r2132, %r2129, 0f3FB8AA3B;
	ex2.approx.f32 	%r2133, %r2132;
	.loc	1 153 59                        // chunk_delta_h.py:153:59
	selp.f32 	%r2134, %r2131, 0f00000000, %p74;
	selp.f32 	%r2135, %r2133, 0f00000000, %p75;
	.loc	1 153 24                        // chunk_delta_h.py:153:24
	mul.f32 	%r2136, %r2059, %r2134;
	mul.f32 	%r2137, %r2060, %r2134;
	mul.f32 	%r2138, %r2063, %r2135;
	mul.f32 	%r2139, %r2064, %r2135;
	mul.f32 	%r2140, %r2067, %r2134;
	mul.f32 	%r2141, %r2068, %r2134;
	mul.f32 	%r2142, %r2071, %r2135;
	mul.f32 	%r2143, %r2072, %r2135;
	mul.f32 	%r2144, %r2075, %r2134;
	mul.f32 	%r2145, %r2076, %r2134;
	mul.f32 	%r2146, %r2079, %r2135;
	mul.f32 	%r2147, %r2080, %r2135;
	mul.f32 	%r2148, %r2083, %r2134;
	mul.f32 	%r2149, %r2084, %r2134;
	mul.f32 	%r2150, %r2087, %r2135;
	mul.f32 	%r2151, %r2088, %r2135;
	mul.f32 	%r2152, %r2091, %r2134;
	mul.f32 	%r2153, %r2092, %r2134;
	mul.f32 	%r2154, %r2095, %r2135;
	mul.f32 	%r2155, %r2096, %r2135;
	mul.f32 	%r2156, %r2099, %r2134;
	mul.f32 	%r2157, %r2100, %r2134;
	mul.f32 	%r2158, %r2103, %r2135;
	mul.f32 	%r2159, %r2104, %r2135;
	mul.f32 	%r2160, %r2107, %r2134;
	mul.f32 	%r2161, %r2108, %r2134;
	mul.f32 	%r2162, %r2111, %r2135;
	mul.f32 	%r2163, %r2112, %r2135;
	mul.f32 	%r2164, %r2115, %r2134;
	mul.f32 	%r2165, %r2116, %r2134;
	mul.f32 	%r2166, %r2119, %r2135;
	mul.f32 	%r2167, %r2120, %r2135;
	.loc	1 154 27                        // chunk_delta_h.py:154:27
	mul.f32 	%r2168, %r1292, 0f3FB8AA3B;
	ex2.approx.f32 	%r2169, %r2168;
	.loc	1 155 20                        // chunk_delta_h.py:155:20
	mul.f32 	%r1377, %r1377, %r2169;
	mul.f32 	%r1378, %r1378, %r2169;
	mul.f32 	%r1379, %r1379, %r2169;
	mul.f32 	%r1380, %r1380, %r2169;
	mul.f32 	%r1381, %r1381, %r2169;
	mul.f32 	%r1382, %r1382, %r2169;
	mul.f32 	%r1383, %r1383, %r2169;
	mul.f32 	%r1384, %r1384, %r2169;
	mul.f32 	%r1385, %r1385, %r2169;
	mul.f32 	%r1386, %r1386, %r2169;
	mul.f32 	%r1387, %r1387, %r2169;
	mul.f32 	%r1388, %r1388, %r2169;
	mul.f32 	%r1389, %r1389, %r2169;
	mul.f32 	%r1390, %r1390, %r2169;
	mul.f32 	%r1391, %r1391, %r2169;
	mul.f32 	%r1392, %r1392, %r2169;
	mul.f32 	%r1393, %r1393, %r2169;
	mul.f32 	%r1394, %r1394, %r2169;
	mul.f32 	%r1395, %r1395, %r2169;
	mul.f32 	%r1396, %r1396, %r2169;
	mul.f32 	%r1397, %r1397, %r2169;
	mul.f32 	%r1398, %r1398, %r2169;
	mul.f32 	%r1399, %r1399, %r2169;
	mul.f32 	%r1400, %r1400, %r2169;
	mul.f32 	%r1401, %r1401, %r2169;
	mul.f32 	%r1402, %r1402, %r2169;
	mul.f32 	%r1403, %r1403, %r2169;
	mul.f32 	%r1404, %r1404, %r2169;
	mul.f32 	%r1405, %r1405, %r2169;
	mul.f32 	%r1406, %r1406, %r2169;
	mul.f32 	%r1407, %r1407, %r2169;
	mul.f32 	%r1408, %r1408, %r2169;
	.loc	1 157 24                        // chunk_delta_h.py:157:24
	mul.f32 	%r1709, %r1709, %r2169;
	mul.f32 	%r1710, %r1710, %r2169;
	mul.f32 	%r1711, %r1711, %r2169;
	mul.f32 	%r1712, %r1712, %r2169;
	mul.f32 	%r1713, %r1713, %r2169;
	mul.f32 	%r1714, %r1714, %r2169;
	mul.f32 	%r1715, %r1715, %r2169;
	mul.f32 	%r1716, %r1716, %r2169;
	mul.f32 	%r1717, %r1717, %r2169;
	mul.f32 	%r1718, %r1718, %r2169;
	mul.f32 	%r1719, %r1719, %r2169;
	mul.f32 	%r1720, %r1720, %r2169;
	mul.f32 	%r1721, %r1721, %r2169;
	mul.f32 	%r1722, %r1722, %r2169;
	mul.f32 	%r1723, %r1723, %r2169;
	mul.f32 	%r1724, %r1724, %r2169;
	mul.f32 	%r1725, %r1725, %r2169;
	mul.f32 	%r1726, %r1726, %r2169;
	mul.f32 	%r1727, %r1727, %r2169;
	mul.f32 	%r1728, %r1728, %r2169;
	mul.f32 	%r1729, %r1729, %r2169;
	mul.f32 	%r1730, %r1730, %r2169;
	mul.f32 	%r1731, %r1731, %r2169;
	mul.f32 	%r1732, %r1732, %r2169;
	mul.f32 	%r1733, %r1733, %r2169;
	mul.f32 	%r1734, %r1734, %r2169;
	mul.f32 	%r1735, %r1735, %r2169;
	mul.f32 	%r1736, %r1736, %r2169;
	mul.f32 	%r1737, %r1737, %r2169;
	mul.f32 	%r1738, %r1738, %r2169;
	mul.f32 	%r1739, %r1739, %r2169;
	mul.f32 	%r1740, %r1740, %r2169;
	.loc	1 179 21                        // chunk_delta_h.py:179:21
	bar.sync 	0;
	cvt.rn.bf16x2.f32 	%r1294, %r2137, %r2136;
	cvt.rn.bf16x2.f32 	%r1295, %r2139, %r2138;
	cvt.rn.bf16x2.f32 	%r1296, %r2141, %r2140;
	cvt.rn.bf16x2.f32 	%r1297, %r2143, %r2142;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1293], {%r1294, %r1295, %r1296, %r1297};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1299, %r2145, %r2144;
	cvt.rn.bf16x2.f32 	%r1300, %r2147, %r2146;
	cvt.rn.bf16x2.f32 	%r1301, %r2149, %r2148;
	cvt.rn.bf16x2.f32 	%r1302, %r2151, %r2150;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1298], {%r1299, %r1300, %r1301, %r1302};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1304, %r2153, %r2152;
	cvt.rn.bf16x2.f32 	%r1305, %r2155, %r2154;
	cvt.rn.bf16x2.f32 	%r1306, %r2157, %r2156;
	cvt.rn.bf16x2.f32 	%r1307, %r2159, %r2158;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1303], {%r1304, %r1305, %r1306, %r1307};
	// end inline asm
	cvt.rn.bf16x2.f32 	%r1309, %r2161, %r2160;
	cvt.rn.bf16x2.f32 	%r1310, %r2163, %r2162;
	cvt.rn.bf16x2.f32 	%r1311, %r2165, %r2164;
	cvt.rn.bf16x2.f32 	%r1312, %r2167, %r2166;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r1308], {%r1309, %r1310, %r1311, %r1312};
	// end inline asm
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s32 	%r1601, %r399, %r2033;
	.loc	1 186 28                        // chunk_delta_h.py:186:28
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2171, %r1601, 4, 14;
	cvt.u64.u32 	%rd263, %r2171;
	or.b64 	%rd201, %rd263, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408}, %rd201, %rd202, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2172, %r1601, 2048;
	bfe.u32 	%r2173, %r2172, 4, 14;
	cvt.u64.u32 	%rd264, %r2173;
	or.b64 	%rd203, %rd264, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408}, %rd203, %rd204, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2174, %r1601, 4096;
	bfe.u32 	%r2175, %r2174, 4, 14;
	cvt.u64.u32 	%rd265, %r2175;
	or.b64 	%rd205, %rd265, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408}, %rd205, %rd206, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2176, %r1601, 6144;
	bfe.u32 	%r2177, %r2176, 4, 14;
	cvt.u64.u32 	%rd266, %r2177;
	or.b64 	%rd207, %rd266, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408}, %rd207, %rd208, %p52, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1604, %r1642;
	mov.b32 	%r1602, %r899;
	mov.b32 	%r1603, %r899;
	mov.b32 	%r1605, %r899;
	mov.b32 	%r1606, %r899;
	// begin inline asm
	// wait for regs: %r1377,%r1378,%r1379,%r1380,%r1381,%r1382,%r1383,%r1384,%r1385,%r1386,%r1387,%r1388,%r1389,%r1390,%r1391,%r1392,%r1393,%r1394,%r1395,%r1396,%r1397,%r1398,%r1399,%r1400,%r1401,%r1402,%r1403,%r1404,%r1405,%r1406,%r1407,%r1408,%r1601,%r1602,%r1603,%r1604,%r1605,%r1606
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s32 	%r1933, %r400, %r2033;
	.loc	1 193 32                        // chunk_delta_h.py:193:32
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	bfe.u32 	%r2179, %r1933, 4, 14;
	cvt.u64.u32 	%rd267, %r2179;
	or.b64 	%rd209, %rd267, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1709,%r1710,%r1711,%r1712,%r1713,%r1714,%r1715,%r1716,%r1717,%r1718,%r1719,%r1720,%r1721,%r1722,%r1723,%r1724,%r1725,%r1726,%r1727,%r1728,%r1729,%r1730,%r1731,%r1732,%r1733,%r1734,%r1735,%r1736,%r1737,%r1738,%r1739,%r1740}, %rd209, %rd202, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2180, %r1933, 2048;
	bfe.u32 	%r2181, %r2180, 4, 14;
	cvt.u64.u32 	%rd268, %r2181;
	or.b64 	%rd211, %rd268, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1709,%r1710,%r1711,%r1712,%r1713,%r1714,%r1715,%r1716,%r1717,%r1718,%r1719,%r1720,%r1721,%r1722,%r1723,%r1724,%r1725,%r1726,%r1727,%r1728,%r1729,%r1730,%r1731,%r1732,%r1733,%r1734,%r1735,%r1736,%r1737,%r1738,%r1739,%r1740}, %rd211, %rd204, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2182, %r1933, 4096;
	bfe.u32 	%r2183, %r2182, 4, 14;
	cvt.u64.u32 	%rd269, %r2183;
	or.b64 	%rd213, %rd269, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1709,%r1710,%r1711,%r1712,%r1713,%r1714,%r1715,%r1716,%r1717,%r1718,%r1719,%r1720,%r1721,%r1722,%r1723,%r1724,%r1725,%r1726,%r1727,%r1728,%r1729,%r1730,%r1731,%r1732,%r1733,%r1734,%r1735,%r1736,%r1737,%r1738,%r1739,%r1740}, %rd213, %rd206, %p52, 1, 1, 1, 1;
	// end inline asm
	add.s32 	%r2184, %r1933, 6144;
	bfe.u32 	%r2185, %r2184, 4, 14;
	cvt.u64.u32 	%rd270, %r2185;
	or.b64 	%rd215, %rd270, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%r1709,%r1710,%r1711,%r1712,%r1713,%r1714,%r1715,%r1716,%r1717,%r1718,%r1719,%r1720,%r1721,%r1722,%r1723,%r1724,%r1725,%r1726,%r1727,%r1728,%r1729,%r1730,%r1731,%r1732,%r1733,%r1734,%r1735,%r1736,%r1737,%r1738,%r1739,%r1740}, %rd215, %rd208, %p52, 1, 1, 1, 1;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%r1938, %r899;
	mov.b32 	%r1934, %r899;
	mov.b32 	%r1935, %r899;
	mov.b32 	%r1937, %r899;
	mov.b32 	%r1936, %r1642;
	// begin inline asm
	// wait for regs: %r1709,%r1710,%r1711,%r1712,%r1713,%r1714,%r1715,%r1716,%r1717,%r1718,%r1719,%r1720,%r1721,%r1722,%r1723,%r1724,%r1725,%r1726,%r1727,%r1728,%r1729,%r1730,%r1731,%r1732,%r1733,%r1734,%r1735,%r1736,%r1737,%r1738,%r1739,%r1740,%r1933,%r1934,%r1935,%r1936,%r1937,%r1938
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	.loc	1 125 83                        // chunk_delta_h.py:125:83
	add.s32 	%r2348, %r2348, 64;
	cvt.s64.s32 	%rd271, %r2348;
	.loc	1 126 22                        // chunk_delta_h.py:126:22
	or.b64 	%rd272, %rd271, %rd7;
	or.b64 	%rd273, %rd271, %rd8;
	or.b64 	%rd274, %rd271, %rd9;
	or.b64 	%rd275, %rd271, %rd10;
	or.b64 	%rd276, %rd271, %rd12;
	or.b64 	%rd277, %rd271, %rd13;
	shl.b64 	%rd278, %rd272, 12;
	shl.b64 	%rd279, %rd273, 12;
	shl.b64 	%rd280, %rd274, 12;
	shl.b64 	%rd281, %rd275, 12;
	or.b64 	%rd282, %rd278, %rd11;
	or.b64 	%rd283, %rd279, %rd11;
	or.b64 	%rd284, %rd280, %rd11;
	or.b64 	%rd285, %rd281, %rd11;
	shl.b64 	%rd286, %rd282, 1;
	add.s64 	%rd217, %rd4, %rd286;
	shl.b64 	%rd287, %rd283, 1;
	add.s64 	%rd218, %rd4, %rd287;
	shl.b64 	%rd288, %rd284, 1;
	add.s64 	%rd219, %rd4, %rd288;
	shl.b64 	%rd289, %rd285, 1;
	add.s64 	%rd220, %rd4, %rd289;
	setp.gt.s32 	%p80, %r2348, -1;
	setp.lt.s64 	%p81, %rd272, %rd19;
	setp.lt.s64 	%p82, %rd273, %rd19;
	setp.lt.s64 	%p83, %rd274, %rd19;
	setp.lt.s64 	%p84, %rd275, %rd19;
	and.pred 	%p85, %p80, %p81;
	and.pred 	%p86, %p80, %p82;
	and.pred 	%p87, %p80, %p83;
	and.pred 	%p88, %p80, %p84;
	shl.b32 	%r2186, %r2416, 13;
	add.s32 	%r2187, %r376, %r2186;
	add.s32 	%r1977, %r2187, %r375;
	add.s32 	%r1979, %r2187, %r380;
	add.s32 	%r1981, %r2187, %r382;
	add.s32 	%r1983, %r2187, %r384;
	selp.b32 	%r2192, 16, 0, %p85;
	selp.b32 	%r1986, %r2192, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1977 + 0 ], [ %rd217 + 0 ], 0x10, %r1986;
	// end inline asm
	selp.b32 	%r2193, 16, 0, %p86;
	selp.b32 	%r1988, %r2193, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1979 + 0 ], [ %rd218 + 0 ], 0x10, %r1988;
	// end inline asm
	selp.b32 	%r2194, 16, 0, %p87;
	selp.b32 	%r1990, %r2194, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1981 + 0 ], [ %rd219 + 0 ], 0x10, %r1990;
	// end inline asm
	selp.b32 	%r2195, 16, 0, %p88;
	selp.b32 	%r1992, %r2195, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1983 + 0 ], [ %rd220 + 0 ], 0x10, %r1992;
	// end inline asm
	cp.async.commit_group;
	.loc	1 130 26                        // chunk_delta_h.py:130:26
	add.s64 	%rd221, %rd217, 128;
	add.s64 	%rd222, %rd218, 128;
	add.s64 	%rd223, %rd219, 128;
	add.s64 	%rd224, %rd220, 128;
	add.s32 	%r2196, %r386, %r2186;
	add.s32 	%r1985, %r2196, %r375;
	add.s32 	%r1987, %r2196, %r380;
	add.s32 	%r1989, %r2196, %r382;
	add.s32 	%r1991, %r2196, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r1985 + 0 ], [ %rd221 + 0 ], 0x10, %r1986;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1987 + 0 ], [ %rd222 + 0 ], 0x10, %r1988;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1989 + 0 ], [ %rd223 + 0 ], 0x10, %r1990;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r1991 + 0 ], [ %rd224 + 0 ], 0x10, %r1992;
	// end inline asm
	cp.async.commit_group;
	.loc	1 141 22                        // chunk_delta_h.py:141:22
	add.s64 	%rd325, %rd278, %rd14;
	add.s64 	%rd324, %rd279, %rd14;
	add.s64 	%rd323, %rd280, %rd14;
	add.s64 	%rd322, %rd281, %rd14;
	shl.b64 	%rd290, %rd325, 1;
	add.s64 	%rd225, %rd2, %rd290;
	shl.b64 	%rd291, %rd324, 1;
	add.s64 	%rd226, %rd2, %rd291;
	shl.b64 	%rd292, %rd323, 1;
	add.s64 	%rd227, %rd2, %rd292;
	shl.b64 	%rd293, %rd322, 1;
	add.s64 	%rd228, %rd2, %rd293;
	and.pred 	%p113, %p44, %p85;
	and.pred 	%p112, %p44, %p86;
	and.pred 	%p111, %p44, %p87;
	and.pred 	%p110, %p44, %p88;
	shl.b32 	%r2197, %r2414, 13;
	add.s32 	%r2198, %r2051, %r2197;
	add.s32 	%r1993, %r2198, %r390;
	add.s32 	%r1995, %r1993, 2048;
	add.s32 	%r1997, %r1993, 4096;
	add.s32 	%r1999, %r1993, 6144;
	selp.b32 	%r2200, 16, 0, %p113;
	selp.b32 	%r1994, %r2200, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1993 + 0 ], [ %rd225 + 0 ], 0x10, %r1994;
	// end inline asm
	selp.b32 	%r2201, 16, 0, %p112;
	selp.b32 	%r1996, %r2201, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1995 + 0 ], [ %rd226 + 0 ], 0x10, %r1996;
	// end inline asm
	selp.b32 	%r2202, 16, 0, %p111;
	selp.b32 	%r1998, %r2202, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1997 + 0 ], [ %rd227 + 0 ], 0x10, %r1998;
	// end inline asm
	selp.b32 	%r2203, 16, 0, %p110;
	selp.b32 	%r2000, %r2203, 0, %p73;
	// begin inline asm
	cp.async.cg.shared.global [ %r1999 + 0 ], [ %rd228 + 0 ], 0x10, %r2000;
	// end inline asm
	cp.async.commit_group;
	.loc	1 152 26                        // chunk_delta_h.py:152:26
	shl.b64 	%rd294, %rd276, 7;
	add.s64 	%rd229, %rd20, %rd294;
	shl.b64 	%rd295, %rd277, 7;
	add.s64 	%rd230, %rd20, %rd295;
	setp.lt.s64 	%p89, %rd276, %rd19;
	setp.lt.s64 	%p90, %rd277, %rd19;
	shl.b32 	%r2204, %r2414, 8;
	add.s32 	%r2205, %r2122, %r2204;
	add.s32 	%r2001, %r2205, %r2124;
	add.s32 	%r2003, %r2001, 32;
	selp.b32 	%r2206, 4, 0, %p89;
	selp.b32 	%r2207, %r2206, 0, %p80;
	selp.b32 	%r2002, %r2207, 0, %p73;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r2001 + 0 ], [ %rd229 + 0 ], 0x4, %r2002;
	// end inline asm
	selp.b32 	%r2208, 4, 0, %p90;
	selp.b32 	%r2209, %r2208, 0, %p80;
	selp.b32 	%r2004, %r2209, 0, %p73;
	// begin inline asm
	@%p22 cp.async.ca.shared.global [ %r2003 + 0 ], [ %rd230 + 0 ], 0x4, %r2004;
	// end inline asm
	cp.async.commit_group;
	.loc	1 182 22                        // chunk_delta_h.py:182:22
	add.s64 	%rd231, %rd3, %rd286;
	add.s64 	%rd232, %rd3, %rd287;
	add.s64 	%rd233, %rd3, %rd288;
	add.s64 	%rd234, %rd3, %rd289;
	add.s32 	%r2210, %r399, %r2186;
	bar.sync 	0;
	add.s32 	%r2005, %r2210, %r375;
	add.s32 	%r2007, %r2210, %r380;
	add.s32 	%r2009, %r2210, %r382;
	add.s32 	%r2011, %r2210, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r2005 + 0 ], [ %rd231 + 0 ], 0x10, %r1986;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2007 + 0 ], [ %rd232 + 0 ], 0x10, %r1988;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2009 + 0 ], [ %rd233 + 0 ], 0x10, %r1990;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2011 + 0 ], [ %rd234 + 0 ], 0x10, %r1992;
	// end inline asm
	cp.async.commit_group;
	.loc	1 189 26                        // chunk_delta_h.py:189:26
	add.s64 	%rd235, %rd231, 128;
	add.s64 	%rd236, %rd232, 128;
	add.s64 	%rd237, %rd233, 128;
	add.s64 	%rd238, %rd234, 128;
	add.s32 	%r2211, %r400, %r2186;
	add.s32 	%r2013, %r2211, %r375;
	add.s32 	%r2015, %r2211, %r380;
	add.s32 	%r2017, %r2211, %r382;
	add.s32 	%r2019, %r2211, %r384;
	// begin inline asm
	cp.async.cg.shared.global [ %r2013 + 0 ], [ %rd235 + 0 ], 0x10, %r1986;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2015 + 0 ], [ %rd236 + 0 ], 0x10, %r1988;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2017 + 0 ], [ %rd237 + 0 ], 0x10, %r1990;
	// end inline asm
	// begin inline asm
	cp.async.cg.shared.global [ %r2019 + 0 ], [ %rd238 + 0 ], 0x10, %r1992;
	// end inline asm
	cp.async.commit_group;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	add.s32 	%r2347, %r2347, 524288;
	setp.ne.s64 	%p91, %rd50, %rd321;
	mov.pred 	%p114, %p10;
	mov.pred 	%p115, %p11;
	mov.pred 	%p116, %p12;
	mov.pred 	%p117, %p13;
	mov.b64 	%rd326, %rd52;
	mov.b64 	%rd327, %rd53;
	mov.b64 	%rd328, %rd54;
	mov.b64 	%rd329, %rd55;
	@%p91 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 0 21                          // chunk_delta_h.py:0:21
	cvt.u32.u64 	%r2276, %rd6;
	.loc	1 114 23                        // chunk_delta_h.py:114:23
	setp.gt.s32 	%p108, %r2276, -1;
	.loc	1 95 18                         // chunk_delta_h.py:95:18
	mul.wide.u32 	%rd312, %r2, 4;
	add.s64 	%rd313, %rd65, %rd312;
	.loc	1 112 21                        // chunk_delta_h.py:112:21
	cp.async.wait_group 	0;
	bar.sync 	0;
	.loc	1 211 23                        // chunk_delta_h.py:211:23
	shl.b32 	%r2277, %r3, 2;
	and.b32 	%r2278, %r2277, 60;
	cvt.u64.u32 	%rd314, %r2278;
	or.b64 	%rd315, %rd314, %rd6;
	shl.b32 	%r2279, %r3, 5;
	and.b32 	%r2280, %r2279, 3584;
	cvt.u64.u32 	%rd316, %r2280;
	add.s64 	%rd317, %rd313, %rd316;
	shl.b64 	%rd318, %rd315, 2;
	add.s64 	%rd296, %rd317, %rd318;
	add.s64 	%rd297, %rd296, 4096;
	add.s64 	%rd298, %rd296, 8192;
	add.s64 	%rd299, %rd296, 12288;
	add.s64 	%rd300, %rd296, 16384;
	add.s64 	%rd301, %rd296, 20480;
	add.s64 	%rd302, %rd296, 24576;
	or.b32 	%r2281, %r2280, 28672;
	cvt.u64.u32 	%rd319, %r2281;
	add.s64 	%rd320, %rd313, %rd319;
	add.s64 	%rd303, %rd320, %rd318;
	setp.lt.s64 	%p109, %rd315, 128;
	and.pred 	%p92, %p108, %p109;
	shl.b32 	%r2282, %r3, 1;
	and.b32 	%r2283, %r2282, 6;
	shl.b32 	%r2284, %r3, 4;
	and.b32 	%r2285, %r2284, 192;
	or.b32 	%r2286, %r2285, %r2283;
	shl.b32 	%r2287, %r6, 4;
	or.b32 	%r2288, %r2286, %r2287;
	and.b32 	%r2289, %r2279, 3072;
	or.b32 	%r2290, %r2288, %r2289;
	and.b32 	%r2291, %r2277, 508;
	shr.u32 	%r2292, %r2290, 2;
	and.b32 	%r2293, %r2292, 892;
	add.s32 	%r2295, %r376, %r2293;
	shl.b32 	%r2296, %r2290, 2;
	add.s32 	%r2297, %r2295, %r2296;
	st.shared.v2.b32 	[%r2297], {%r1377, %r1378};
	or.b32 	%r2298, %r2290, 512;
	shr.u32 	%r2299, %r2298, 2;
	and.b32 	%r2300, %r2299, 1020;
	add.s32 	%r2301, %r376, %r2300;
	add.s32 	%r2302, %r2301, %r2296;
	st.shared.v2.b32 	[%r2302+2048], {%r1379, %r1380};
	st.shared.v2.b32 	[%r2297+32], {%r1381, %r1382};
	st.shared.v2.b32 	[%r2302+2080], {%r1383, %r1384};
	st.shared.v2.b32 	[%r2297+64], {%r1385, %r1386};
	and.b32 	%r2303, %r2299, 1008;
	add.s32 	%r2304, %r376, %r2303;
	add.s32 	%r2305, %r2304, %r2296;
	st.shared.v2.b32 	[%r2305+2112], {%r1387, %r1388};
	st.shared.v2.b32 	[%r2297+96], {%r1389, %r1390};
	st.shared.v2.b32 	[%r2305+2144], {%r1391, %r1392};
	st.shared.v2.b32 	[%r2297+128], {%r1393, %r1394};
	st.shared.v2.b32 	[%r2305+2176], {%r1395, %r1396};
	st.shared.v2.b32 	[%r2297+160], {%r1397, %r1398};
	st.shared.v2.b32 	[%r2305+2208], {%r1399, %r1400};
	st.shared.v2.b32 	[%r2297+192], {%r1401, %r1402};
	st.shared.v2.b32 	[%r2305+2240], {%r1403, %r1404};
	st.shared.v2.b32 	[%r2297+224], {%r1405, %r1406};
	st.shared.v2.b32 	[%r2305+2272], {%r1407, %r1408};
	bar.sync 	0;
	and.b32 	%r2306, %r11, 28;
	shl.b32 	%r2307, %r2306, 2;
	add.s32 	%r2308, %r376, %r2307;
	shl.b32 	%r2309, %r2291, 2;
	add.s32 	%r2310, %r2308, %r2309;
	ld.shared.v4.b32 	{%r2212, %r2213, %r2214, %r2215}, [%r2310];
	or.b32 	%r2311, %r2291, 512;
	shr.u32 	%r2312, %r2311, 2;
	and.b32 	%r2313, %r2312, 240;
	add.s32 	%r2314, %r376, %r2313;
	add.s32 	%r2315, %r2314, %r2309;
	ld.shared.v4.b32 	{%r2216, %r2217, %r2218, %r2219}, [%r2315+2048];
	or.b32 	%r2316, %r2291, 1024;
	shr.u32 	%r2317, %r2316, 2;
	and.b32 	%r2318, %r2317, 368;
	add.s32 	%r2319, %r376, %r2318;
	add.s32 	%r2320, %r2319, %r2309;
	ld.shared.v4.b32 	{%r2220, %r2221, %r2222, %r2223}, [%r2320+4096];
	or.b32 	%r2321, %r2291, 1536;
	shr.u32 	%r2322, %r2321, 2;
	and.b32 	%r2323, %r2322, 496;
	add.s32 	%r2324, %r376, %r2323;
	add.s32 	%r2325, %r2324, %r2309;
	ld.shared.v4.b32 	{%r2224, %r2225, %r2226, %r2227}, [%r2325+6144];
	or.b32 	%r2326, %r2291, 2048;
	shr.u32 	%r2327, %r2326, 2;
	and.b32 	%r2328, %r2327, 624;
	add.s32 	%r2329, %r376, %r2328;
	add.s32 	%r2330, %r2329, %r2309;
	ld.shared.v4.b32 	{%r2228, %r2229, %r2230, %r2231}, [%r2330+8192];
	or.b32 	%r2331, %r2291, 2560;
	shr.u32 	%r2332, %r2331, 2;
	and.b32 	%r2333, %r2332, 752;
	add.s32 	%r2334, %r376, %r2333;
	add.s32 	%r2335, %r2334, %r2309;
	ld.shared.v4.b32 	{%r2232, %r2233, %r2234, %r2235}, [%r2335+10240];
	or.b32 	%r2336, %r2291, 3072;
	shr.u32 	%r2337, %r2336, 2;
	and.b32 	%r2338, %r2337, 880;
	add.s32 	%r2339, %r376, %r2338;
	add.s32 	%r2340, %r2339, %r2309;
	ld.shared.v4.b32 	{%r2236, %r2237, %r2238, %r2239}, [%r2340+12288];
	or.b32 	%r2341, %r2277, 3584;
	shr.u32 	%r2342, %r2341, 2;
	and.b32 	%r2343, %r2342, 1008;
	add.s32 	%r2344, %r376, %r2343;
	shl.b32 	%r2345, %r2341, 2;
	add.s32 	%r2346, %r2344, %r2345;
	ld.shared.v4.b32 	{%r2240, %r2241, %r2242, %r2243}, [%r2346];
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd296 + 0 ], { %r2212, %r2213, %r2214, %r2215 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd297 + 0 ], { %r2216, %r2217, %r2218, %r2219 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd298 + 0 ], { %r2220, %r2221, %r2222, %r2223 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd299 + 0 ], { %r2224, %r2225, %r2226, %r2227 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd300 + 0 ], { %r2228, %r2229, %r2230, %r2231 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd301 + 0 ], { %r2232, %r2233, %r2234, %r2235 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd302 + 0 ], { %r2236, %r2237, %r2238, %r2239 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd303 + 0 ], { %r2240, %r2241, %r2242, %r2243 };
	// end inline asm
	.loc	1 214 27                        // chunk_delta_h.py:214:27
	add.s64 	%rd304, %rd296, 32768;
	add.s64 	%rd305, %rd296, 36864;
	add.s64 	%rd306, %rd296, 40960;
	add.s64 	%rd307, %rd296, 45056;
	add.s64 	%rd308, %rd296, 49152;
	add.s64 	%rd309, %rd296, 53248;
	add.s64 	%rd310, %rd296, 57344;
	add.s64 	%rd311, %rd303, 32768;
	bar.sync 	0;
	st.shared.v2.b32 	[%r2297], {%r1709, %r1710};
	st.shared.v2.b32 	[%r2302+2048], {%r1711, %r1712};
	st.shared.v2.b32 	[%r2297+32], {%r1713, %r1714};
	st.shared.v2.b32 	[%r2302+2080], {%r1715, %r1716};
	st.shared.v2.b32 	[%r2297+64], {%r1717, %r1718};
	st.shared.v2.b32 	[%r2305+2112], {%r1719, %r1720};
	st.shared.v2.b32 	[%r2297+96], {%r1721, %r1722};
	st.shared.v2.b32 	[%r2305+2144], {%r1723, %r1724};
	st.shared.v2.b32 	[%r2297+128], {%r1725, %r1726};
	st.shared.v2.b32 	[%r2305+2176], {%r1727, %r1728};
	st.shared.v2.b32 	[%r2297+160], {%r1729, %r1730};
	st.shared.v2.b32 	[%r2305+2208], {%r1731, %r1732};
	st.shared.v2.b32 	[%r2297+192], {%r1733, %r1734};
	st.shared.v2.b32 	[%r2305+2240], {%r1735, %r1736};
	st.shared.v2.b32 	[%r2297+224], {%r1737, %r1738};
	st.shared.v2.b32 	[%r2305+2272], {%r1739, %r1740};
	bar.sync 	0;
	ld.shared.v4.b32 	{%r2248, %r2249, %r2250, %r2251}, [%r2315+2048];
	ld.shared.v4.b32 	{%r2252, %r2253, %r2254, %r2255}, [%r2320+4096];
	ld.shared.v4.b32 	{%r2256, %r2257, %r2258, %r2259}, [%r2325+6144];
	ld.shared.v4.b32 	{%r2260, %r2261, %r2262, %r2263}, [%r2330+8192];
	ld.shared.v4.b32 	{%r2264, %r2265, %r2266, %r2267}, [%r2335+10240];
	ld.shared.v4.b32 	{%r2268, %r2269, %r2270, %r2271}, [%r2340+12288];
	ld.shared.v4.b32 	{%r2272, %r2273, %r2274, %r2275}, [%r2346];
	ld.shared.v4.b32 	{%r2244, %r2245, %r2246, %r2247}, [%r2310];
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd304 + 0 ], { %r2244, %r2245, %r2246, %r2247 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd305 + 0 ], { %r2248, %r2249, %r2250, %r2251 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd306 + 0 ], { %r2252, %r2253, %r2254, %r2255 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd307 + 0 ], { %r2256, %r2257, %r2258, %r2259 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd308 + 0 ], { %r2260, %r2261, %r2262, %r2263 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd309 + 0 ], { %r2264, %r2265, %r2266, %r2267 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd310 + 0 ], { %r2268, %r2269, %r2270, %r2271 };
	// end inline asm
	// begin inline asm
	@%p92 st.global.v4.b32 [ %rd311 + 0 ], { %r2272, %r2273, %r2274, %r2275 };
	// end inline asm
	.loc	1 209 4                         // chunk_delta_h.py:209:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 216                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd1 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 104
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 99
.b8 111
.b8 109
.b8 109
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x7c:0x31 DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 104
.b8 117
.b8 110
.b8 107
.b8 95
.b8 103
.b8 97
.b8 116
.b8 101
.b8 100
.b8 95
.b8 100
.b8 101
.b8 108
.b8 116
.b8 97
.b8 95
.b8 114
.b8 117
.b8 108
.b8 101
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 95
.b8 104
.b8 95
.b8 98
.b8 108
.b8 111
.b8 99
.b8 107
.b8 100
.b8 105
.b8 109
.b8 54
.b8 52
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0xad:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 124                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xc2:0x18 DW_TAG_inlined_subroutine
.b32 124                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
