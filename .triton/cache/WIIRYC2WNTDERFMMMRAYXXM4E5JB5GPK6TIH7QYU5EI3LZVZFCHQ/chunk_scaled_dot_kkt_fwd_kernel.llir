; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @chunk_scaled_dot_kkt_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #0 !dbg !5 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %9 = and i32 %8, 65504, !dbg !10
  %10 = and i32 %8, 31, !dbg !11
  %11 = shl i32 %7, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 5, !dbg !13
  %14 = and i32 %12, 32, !dbg !13
  %15 = icmp eq i32 %14, 0, !dbg !13
  %16 = and i32 %12, 128, !dbg !13
  %17 = lshr i32 %12, 3, !dbg !13
  %18 = and i32 %17, 31, !dbg !13
  %19 = or disjoint i32 %18, 32, !dbg !13
  %20 = lshr i32 %12, 2, !dbg !13
  %21 = and i32 %20, 7, !dbg !13
  %22 = lshr i32 %12, 1, !dbg !13
  %23 = and i32 %22, 48, !dbg !13
  %24 = or disjoint i32 %23, %21, !dbg !13
  %25 = or disjoint i32 %24, 8, !dbg !13
  %26 = shl nuw nsw i32 %12, 3, !dbg !13
  %27 = and i32 %26, 56, !dbg !13
  %28 = mul i32 %9, %4, !dbg !14
  %29 = sext i32 %28 to i64, !dbg !15
  %30 = getelementptr bfloat, ptr addrspace(1) %2, i64 %29, !dbg !15
  %31 = zext nneg i32 %10 to i64, !dbg !16
  %32 = getelementptr bfloat, ptr addrspace(1) %30, i64 %31, !dbg !16
  %33 = sext i32 %4 to i64, !dbg !17
  %34 = sext i32 %11 to i64, !dbg !17
  %35 = zext nneg i32 %18 to i64, !dbg !18
  %36 = zext nneg i32 %19 to i64, !dbg !18
  %37 = zext nneg i32 %24 to i64, !dbg !18
  %38 = zext nneg i32 %25 to i64, !dbg !18
  %39 = zext nneg i32 %27 to i64, !dbg !18
  %40 = or disjoint i64 %35, %34, !dbg !18
  %41 = or disjoint i64 %36, %34, !dbg !18
  %42 = or disjoint i64 %37, %34, !dbg !18
  %43 = or disjoint i64 %38, %34, !dbg !18
  %44 = shl nsw i64 %42, 5, !dbg !18
  %45 = shl nsw i64 %43, 5, !dbg !18
  %46 = getelementptr bfloat, ptr addrspace(1) %32, i64 %44, !dbg !18
  %47 = getelementptr bfloat, ptr addrspace(1) %32, i64 %45, !dbg !18
  %48 = icmp sgt i32 %11, -1, !dbg !18
  %49 = icmp slt i64 %42, %33, !dbg !18
  %50 = icmp slt i64 %43, %33, !dbg !18
  %51 = and i1 %48, %49, !dbg !18
  %52 = and i1 %48, %50, !dbg !18
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %51) #2, !dbg !18
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %47, i1 %52) #2, !dbg !18
  %55 = or disjoint i32 %28, %10, !dbg !19
  %56 = shl i32 %55, 7, !dbg !20
  %57 = sext i32 %56 to i64, !dbg !21
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = icmp slt i64 %40, %33, !dbg !22
  %60 = icmp slt i64 %41, %33, !dbg !22
  %61 = and i1 %48, %59, !dbg !22
  %62 = and i1 %48, %60, !dbg !22
  %.idx49 = shl nsw i64 %40, 13, !dbg !22
  %63 = getelementptr i8, ptr addrspace(1) %58, i64 %.idx49, !dbg !22
  %64 = getelementptr bfloat, ptr addrspace(1) %63, i64 %39, !dbg !22
  %.idx50 = shl nsw i64 %41, 13, !dbg !22
  %65 = getelementptr i8, ptr addrspace(1) %58, i64 %.idx50, !dbg !22
  %66 = getelementptr bfloat, ptr addrspace(1) %65, i64 %39, !dbg !22
  %67 = select i1 %15, i32 0, i32 288, !dbg !22
  %68 = and i32 %12, 24, !dbg !22
  %69 = mul nuw nsw i32 %68, 9, !dbg !22
  %70 = xor i32 %69, %27, !dbg !22
  %71 = xor i32 %70, %67, !dbg !22
  %72 = and i32 %26, 512, !dbg !22
  %73 = shl nuw nsw i32 %16, 3, !dbg !22
  %74 = or disjoint i32 %72, %71, !dbg !22
  %75 = or disjoint i32 %74, %73, !dbg !22
  %76 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %75, !dbg !22
  %77 = or disjoint i32 %27, 2048, !dbg !22
  %78 = xor i32 %69, %77, !dbg !22
  %79 = xor i32 %78, %67, !dbg !22
  %80 = or disjoint i32 %79, %72, !dbg !22
  %81 = or disjoint i32 %80, %73, !dbg !22
  %82 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %81, !dbg !22
  %83 = select i1 %61, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %76, ptr addrspace(1) %64, i32 %83) #2, !dbg !22
  %84 = select i1 %62, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %82, ptr addrspace(1) %66, i32 %84) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br label %85, !dbg !23

85:                                               ; preds = %6, %85
  %86 = phi i1 [ true, %6 ], [ false, %85 ]
  %indvars.iv = phi i64 [ 64, %6 ], [ 128, %85 ]
  %87 = phi i32 [ -1, %6 ], [ %107, %85 ]
  %88 = phi i32 [ 0, %6 ], [ %239, %85 ]
  %89 = phi float [ 0.000000e+00, %6 ], [ %221, %85 ]
  %90 = phi float [ 0.000000e+00, %6 ], [ %222, %85 ]
  %91 = phi float [ 0.000000e+00, %6 ], [ %223, %85 ]
  %92 = phi float [ 0.000000e+00, %6 ], [ %224, %85 ]
  %93 = phi float [ 0.000000e+00, %6 ], [ %225, %85 ]
  %94 = phi float [ 0.000000e+00, %6 ], [ %226, %85 ]
  %95 = phi float [ 0.000000e+00, %6 ], [ %227, %85 ]
  %96 = phi float [ 0.000000e+00, %6 ], [ %228, %85 ]
  %97 = phi float [ 0.000000e+00, %6 ], [ %229, %85 ]
  %98 = phi float [ 0.000000e+00, %6 ], [ %230, %85 ]
  %99 = phi float [ 0.000000e+00, %6 ], [ %231, %85 ]
  %100 = phi float [ 0.000000e+00, %6 ], [ %232, %85 ]
  %101 = phi float [ 0.000000e+00, %6 ], [ %233, %85 ]
  %102 = phi float [ 0.000000e+00, %6 ], [ %234, %85 ]
  %103 = phi float [ 0.000000e+00, %6 ], [ %235, %85 ]
  %104 = phi float [ 0.000000e+00, %6 ], [ %236, %85 ]
  %105 = add i32 %87, 1, !dbg !23
  %106 = icmp sgt i32 %105, 1, !dbg !23
  %107 = select i1 %106, i32 0, i32 %105, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %.idx47 = shl i32 %107, 13, !dbg !22
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx47, !dbg !22
  %109 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %13, i32 0, i32 31), !dbg !24
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #2, !dbg !24
  %110 = ptrtoint ptr addrspace(3) %108 to i32, !dbg !24
  %111 = lshr exact i32 %110, 4, !dbg !24
  %112 = and i32 %111, 16383, !dbg !24
  %113 = zext nneg i32 %112 to i64, !dbg !24
  %114 = or disjoint i64 %113, 4611686293338849280, !dbg !24
  %115 = shl i32 %109, 10, !dbg !24
  %116 = and i32 %115, 4096, !dbg !24
  %117 = add i32 %116, %110, !dbg !24
  %118 = lshr exact i32 %117, 4, !dbg !24
  %119 = and i32 %118, 16383, !dbg !24
  %120 = zext nneg i32 %119 to i64, !dbg !24
  %121 = or disjoint i64 %120, 4611686293338849280, !dbg !24
  %122 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, i64 %114, i64 %121, i1 true) #2, !dbg !24
  %123 = add i32 %110, 32, !dbg !24
  %124 = lshr exact i32 %123, 4, !dbg !24
  %125 = and i32 %124, 16383, !dbg !24
  %126 = zext nneg i32 %125 to i64, !dbg !24
  %127 = or disjoint i64 %126, 4611686293338849280, !dbg !24
  %128 = add i32 %123, %116, !dbg !24
  %129 = lshr exact i32 %128, 4, !dbg !24
  %130 = and i32 %129, 16383, !dbg !24
  %131 = zext nneg i32 %130 to i64, !dbg !24
  %132 = or disjoint i64 %131, 4611686293338849280, !dbg !24
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 0, !dbg !24
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 1, !dbg !24
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 2, !dbg !24
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 3, !dbg !24
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 4, !dbg !24
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 5, !dbg !24
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 6, !dbg !24
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 7, !dbg !24
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 8, !dbg !24
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 9, !dbg !24
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 10, !dbg !24
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 11, !dbg !24
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 12, !dbg !24
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 13, !dbg !24
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 14, !dbg !24
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 15, !dbg !24
  %149 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, i64 %127, i64 %132, i1 true) #2, !dbg !24
  %150 = add i32 %110, 64, !dbg !24
  %151 = lshr exact i32 %150, 4, !dbg !24
  %152 = and i32 %151, 16383, !dbg !24
  %153 = zext nneg i32 %152 to i64, !dbg !24
  %154 = or disjoint i64 %153, 4611686293338849280, !dbg !24
  %155 = add i32 %150, %116, !dbg !24
  %156 = lshr exact i32 %155, 4, !dbg !24
  %157 = and i32 %156, 16383, !dbg !24
  %158 = zext nneg i32 %157 to i64, !dbg !24
  %159 = or disjoint i64 %158, 4611686293338849280, !dbg !24
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 0, !dbg !24
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 1, !dbg !24
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 2, !dbg !24
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 3, !dbg !24
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 4, !dbg !24
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 5, !dbg !24
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 6, !dbg !24
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 7, !dbg !24
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 8, !dbg !24
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 9, !dbg !24
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 10, !dbg !24
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 11, !dbg !24
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 12, !dbg !24
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 13, !dbg !24
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 14, !dbg !24
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %149, 15, !dbg !24
  %176 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, i64 %154, i64 %159, i1 true) #2, !dbg !24
  %177 = add i32 %110, 96, !dbg !24
  %178 = lshr exact i32 %177, 4, !dbg !24
  %179 = and i32 %178, 16383, !dbg !24
  %180 = zext nneg i32 %179 to i64, !dbg !24
  %181 = or disjoint i64 %180, 4611686293338849280, !dbg !24
  %182 = add i32 %177, %116, !dbg !24
  %183 = lshr exact i32 %182, 4, !dbg !24
  %184 = and i32 %183, 16383, !dbg !24
  %185 = zext nneg i32 %184 to i64, !dbg !24
  %186 = or disjoint i64 %185, 4611686293338849280, !dbg !24
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 0, !dbg !24
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 1, !dbg !24
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 2, !dbg !24
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 3, !dbg !24
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 4, !dbg !24
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 5, !dbg !24
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 6, !dbg !24
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 7, !dbg !24
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 8, !dbg !24
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 9, !dbg !24
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 10, !dbg !24
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 11, !dbg !24
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 12, !dbg !24
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 13, !dbg !24
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 14, !dbg !24
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 15, !dbg !24
  %203 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, $34, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l,b"(float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, i64 %181, i64 %186, i1 true) #2, !dbg !24
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 0, !dbg !24
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 1, !dbg !24
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 2, !dbg !24
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 3, !dbg !24
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 4, !dbg !24
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 5, !dbg !24
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 6, !dbg !24
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 7, !dbg !24
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 8, !dbg !24
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 9, !dbg !24
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 10, !dbg !24
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 11, !dbg !24
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 12, !dbg !24
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 13, !dbg !24
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 14, !dbg !24
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %203, 15, !dbg !24
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #2, !dbg !24
  %220 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"(float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, ptr addrspace(3) %108, i32 0, i32 0, ptr addrspace(3) %108, i32 0, i32 0) #2, !dbg !24
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 0, !dbg !24
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 1, !dbg !24
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 2, !dbg !24
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 3, !dbg !24
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 4, !dbg !24
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 5, !dbg !24
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 6, !dbg !24
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 7, !dbg !24
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 8, !dbg !24
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 9, !dbg !24
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 10, !dbg !24
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 11, !dbg !24
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 12, !dbg !24
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 13, !dbg !24
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 14, !dbg !24
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, ptr addrspace(3), i32, i32 } %220, 15, !dbg !24
  %237 = add i32 %88, 1, !dbg !23
  %238 = icmp sgt i32 %237, 1, !dbg !23
  %239 = select i1 %238, i32 0, i32 %237, !dbg !23
  %240 = or disjoint i64 %indvars.iv, %39, !dbg !22
  %241 = getelementptr bfloat, ptr addrspace(1) %63, i64 %240, !dbg !22
  %242 = getelementptr bfloat, ptr addrspace(1) %65, i64 %240, !dbg !22
  %243 = and i1 %61, %86, !dbg !22
  %244 = and i1 %62, %86, !dbg !22
  %.idx48 = shl i32 %239, 13, !dbg !22
  %245 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx48, !dbg !22
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !22
  %246 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %245, i32 %75, !dbg !22
  %247 = getelementptr inbounds nuw bfloat, ptr addrspace(3) %245, i32 %81, !dbg !22
  %248 = select i1 %243, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %246, ptr addrspace(1) %241, i32 %248) #2, !dbg !22
  %249 = select i1 %244, i32 16, i32 0, !dbg !22
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %247, ptr addrspace(1) %242, i32 %249) #2, !dbg !22
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !22
  br i1 %86, label %85, label %250, !dbg !23

250:                                              ; preds = %85
  %251 = bitcast i16 %54 to bfloat, !dbg !18
  %252 = bitcast i16 %53 to bfloat, !dbg !18
  %253 = shl nuw nsw i32 %12, 1, !dbg !13
  %254 = and i32 %253, 6, !dbg !13
  %255 = lshr exact i32 %16, 2, !dbg !13
  %256 = lshr i32 %12, 4, !dbg !13
  %257 = shl nuw nsw i32 %12, 2, !dbg !13
  %258 = and i32 %257, 60, !dbg !13
  %259 = zext nneg i32 %258 to i64, !dbg !18
  %260 = insertelement <8 x i32> poison, i32 %11, i64 0, !dbg !25
  %261 = shufflevector <8 x i32> %260, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !25
  %262 = insertelement <8 x i32> poison, i32 %4, i64 0, !dbg !26
  %263 = shufflevector <8 x i32> %262, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !26
  %264 = or disjoint i32 %25, %11, !dbg !25
  %265 = icmp slt i32 %264, %4, !dbg !26
  %266 = or disjoint i32 %24, %11, !dbg !25
  %267 = icmp slt i32 %266, %4, !dbg !26
  %268 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236) #2, !dbg !23
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !23
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !23
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !27
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %31, !dbg !28
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %44, !dbg !29
  %272 = getelementptr float, ptr addrspace(1) %270, i64 %45, !dbg !29
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %51) #2, !dbg !29
  %274 = bitcast i32 %273 to float, !dbg !29
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 %52) #2, !dbg !29
  %276 = bitcast i32 %275 to float, !dbg !29
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 0, !dbg !30
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 1, !dbg !30
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 2, !dbg !30
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 3, !dbg !30
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 4, !dbg !30
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 5, !dbg !30
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 6, !dbg !30
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 7, !dbg !30
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 8, !dbg !30
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 9, !dbg !30
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 10, !dbg !30
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 11, !dbg !30
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 12, !dbg !30
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 13, !dbg !30
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 14, !dbg !30
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 15, !dbg !30
  %293 = fpext bfloat %252 to float, !dbg !31
  %294 = fpext bfloat %251 to float, !dbg !31
  %295 = shl i32 %55, 6, !dbg !32
  %296 = sext i32 %295 to i64, !dbg !33
  %297 = getelementptr float, ptr addrspace(1) %3, i64 %296, !dbg !33
  %298 = and i32 %256, 15, !dbg !13
  %299 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !13
  %300 = insertelement <2 x i32> %299, i32 %298, i64 1, !dbg !13
  %301 = or <2 x i32> %300, <i32 48, i32 32>, !dbg !13
  %302 = or disjoint i32 %298, 16, !dbg !13
  %303 = or disjoint i32 %254, %255, !dbg !13
  %304 = or disjoint i32 %303, 25, !dbg !13
  %305 = zext nneg i32 %304 to i64, !dbg !18
  %306 = or disjoint i64 %305, %34, !dbg !18
  %307 = icmp slt i64 %306, %33, !dbg !18
  %308 = and i1 %48, %307, !dbg !18
  %309 = or disjoint i32 %303, 24, !dbg !13
  %310 = zext nneg i32 %309 to i64, !dbg !18
  %311 = or disjoint i64 %310, %34, !dbg !18
  %312 = icmp slt i64 %311, %33, !dbg !18
  %313 = and i1 %48, %312, !dbg !18
  %314 = or disjoint i32 %303, 17, !dbg !13
  %315 = zext nneg i32 %314 to i64, !dbg !18
  %316 = or disjoint i64 %315, %34, !dbg !18
  %317 = icmp slt i64 %316, %33, !dbg !18
  %318 = and i1 %48, %317, !dbg !18
  %319 = or disjoint i32 %303, 16, !dbg !13
  %320 = zext nneg i32 %319 to i64, !dbg !18
  %321 = or disjoint i64 %320, %34, !dbg !18
  %322 = icmp slt i64 %321, %33, !dbg !18
  %323 = and i1 %48, %322, !dbg !18
  %324 = or disjoint i32 %303, 9, !dbg !13
  %325 = or disjoint i32 %303, 8, !dbg !13
  %326 = or disjoint i32 %303, 1, !dbg !13
  %327 = shufflevector <2 x i32> %301, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !18
  %328 = insertelement <8 x i32> %327, i32 %302, i64 2, !dbg !18
  %329 = insertelement <8 x i32> %328, i32 %298, i64 3, !dbg !18
  %330 = insertelement <8 x i32> %329, i32 %303, i64 4, !dbg !18
  %331 = insertelement <8 x i32> %330, i32 %326, i64 5, !dbg !18
  %332 = insertelement <8 x i32> %331, i32 %325, i64 6, !dbg !18
  %333 = insertelement <8 x i32> %332, i32 %324, i64 7, !dbg !18
  %334 = or disjoint <8 x i32> %333, %261, !dbg !18
  %335 = icmp slt <8 x i32> %334, %263, !dbg !34
  %336 = extractelement <8 x i1> %335, i64 7, !dbg !18
  %337 = and i1 %48, %336, !dbg !18
  %338 = extractelement <8 x i1> %335, i64 6, !dbg !18
  %339 = and i1 %48, %338, !dbg !18
  %340 = extractelement <8 x i1> %335, i64 5, !dbg !18
  %341 = and i1 %48, %340, !dbg !18
  %342 = extractelement <8 x i1> %335, i64 4, !dbg !18
  %343 = and i1 %48, %342, !dbg !18
  %344 = insertelement <8 x i32> poison, i32 %303, i64 0, !dbg !25
  %345 = insertelement <8 x i32> %344, i32 %326, i64 1, !dbg !25
  %346 = insertelement <8 x i32> %345, i32 %325, i64 2, !dbg !25
  %347 = insertelement <8 x i32> %346, i32 %324, i64 3, !dbg !25
  %348 = insertelement <8 x i32> %347, i32 %319, i64 4, !dbg !25
  %349 = insertelement <8 x i32> %348, i32 %314, i64 5, !dbg !25
  %350 = insertelement <8 x i32> %349, i32 %309, i64 6, !dbg !25
  %351 = insertelement <8 x i32> %350, i32 %304, i64 7, !dbg !25
  %352 = or disjoint <8 x i32> %351, %261, !dbg !25
  %353 = icmp slt <8 x i32> %352, %263, !dbg !26
  %354 = extractelement <8 x i32> %334, i64 4, !dbg !29
  %355 = sext i32 %354 to i64, !dbg !29
  %.idx = shl nsw i64 %355, 7, !dbg !29
  %356 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx, !dbg !29
  %357 = extractelement <8 x i32> %334, i64 5, !dbg !29
  %358 = sext i32 %357 to i64, !dbg !29
  %.idx6 = shl nsw i64 %358, 7, !dbg !29
  %359 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx6, !dbg !29
  %360 = extractelement <8 x i32> %334, i64 6, !dbg !29
  %361 = sext i32 %360 to i64, !dbg !29
  %.idx7 = shl nsw i64 %361, 7, !dbg !29
  %362 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx7, !dbg !29
  %363 = extractelement <8 x i32> %334, i64 7, !dbg !29
  %364 = sext i32 %363 to i64, !dbg !29
  %.idx8 = shl nsw i64 %364, 7, !dbg !29
  %365 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx8, !dbg !29
  %.idx9 = shl nsw i64 %321, 7, !dbg !29
  %366 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx9, !dbg !29
  %.idx10 = shl nsw i64 %316, 7, !dbg !29
  %367 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx10, !dbg !29
  %.idx11 = shl nsw i64 %311, 7, !dbg !29
  %368 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx11, !dbg !29
  %.idx12 = shl nsw i64 %306, 7, !dbg !29
  %369 = getelementptr i8, ptr addrspace(1) %270, i64 %.idx12, !dbg !29
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %343) #2, !dbg !29
  %371 = bitcast i32 %370 to float, !dbg !29
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %341) #2, !dbg !29
  %373 = bitcast i32 %372 to float, !dbg !29
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %339) #2, !dbg !29
  %375 = bitcast i32 %374 to float, !dbg !29
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %337) #2, !dbg !29
  %377 = bitcast i32 %376 to float, !dbg !29
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 %323) #2, !dbg !29
  %379 = bitcast i32 %378 to float, !dbg !29
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %318) #2, !dbg !29
  %381 = bitcast i32 %380 to float, !dbg !29
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 %313) #2, !dbg !29
  %383 = bitcast i32 %382 to float, !dbg !29
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %308) #2, !dbg !29
  %385 = bitcast i32 %384 to float, !dbg !29
  %386 = fsub float %274, %371, !dbg !35
  %387 = fsub float %274, %373, !dbg !35
  %388 = fsub float %276, %371, !dbg !35
  %389 = fsub float %276, %373, !dbg !35
  %390 = fsub float %274, %375, !dbg !35
  %391 = fsub float %274, %377, !dbg !35
  %392 = fsub float %276, %375, !dbg !35
  %393 = fsub float %276, %377, !dbg !35
  %394 = fsub float %274, %379, !dbg !35
  %395 = fsub float %274, %381, !dbg !35
  %396 = fsub float %276, %379, !dbg !35
  %397 = fsub float %276, %381, !dbg !35
  %398 = fsub float %274, %383, !dbg !35
  %399 = fsub float %274, %385, !dbg !35
  %400 = fsub float %276, %383, !dbg !35
  %401 = fsub float %276, %385, !dbg !35
  %402 = fmul float %386, 0x3FF7154760000000, !dbg !36
  %403 = tail call float @llvm.nvvm.ex2.approx.f(float %402), !dbg !36
  %404 = fmul float %387, 0x3FF7154760000000, !dbg !36
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %404), !dbg !36
  %406 = fmul float %388, 0x3FF7154760000000, !dbg !36
  %407 = tail call float @llvm.nvvm.ex2.approx.f(float %406), !dbg !36
  %408 = fmul float %389, 0x3FF7154760000000, !dbg !36
  %409 = tail call float @llvm.nvvm.ex2.approx.f(float %408), !dbg !36
  %410 = fmul float %390, 0x3FF7154760000000, !dbg !36
  %411 = tail call float @llvm.nvvm.ex2.approx.f(float %410), !dbg !36
  %412 = fmul float %391, 0x3FF7154760000000, !dbg !36
  %413 = tail call float @llvm.nvvm.ex2.approx.f(float %412), !dbg !36
  %414 = fmul float %392, 0x3FF7154760000000, !dbg !36
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %414), !dbg !36
  %416 = fmul float %393, 0x3FF7154760000000, !dbg !36
  %417 = tail call float @llvm.nvvm.ex2.approx.f(float %416), !dbg !36
  %418 = fmul float %394, 0x3FF7154760000000, !dbg !36
  %419 = tail call float @llvm.nvvm.ex2.approx.f(float %418), !dbg !36
  %420 = fmul float %395, 0x3FF7154760000000, !dbg !36
  %421 = tail call float @llvm.nvvm.ex2.approx.f(float %420), !dbg !36
  %422 = fmul float %396, 0x3FF7154760000000, !dbg !36
  %423 = tail call float @llvm.nvvm.ex2.approx.f(float %422), !dbg !36
  %424 = fmul float %397, 0x3FF7154760000000, !dbg !36
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %424), !dbg !36
  %426 = fmul float %398, 0x3FF7154760000000, !dbg !36
  %427 = tail call float @llvm.nvvm.ex2.approx.f(float %426), !dbg !36
  %428 = fmul float %399, 0x3FF7154760000000, !dbg !36
  %429 = tail call float @llvm.nvvm.ex2.approx.f(float %428), !dbg !36
  %430 = fmul float %400, 0x3FF7154760000000, !dbg !36
  %431 = tail call float @llvm.nvvm.ex2.approx.f(float %430), !dbg !36
  %432 = fmul float %401, 0x3FF7154760000000, !dbg !36
  %433 = tail call float @llvm.nvvm.ex2.approx.f(float %432), !dbg !36
  %434 = fmul float %277, %403, !dbg !30
  %435 = fmul float %278, %405, !dbg !30
  %436 = fmul float %279, %407, !dbg !30
  %437 = fmul float %280, %409, !dbg !30
  %438 = fmul float %281, %411, !dbg !30
  %439 = fmul float %282, %413, !dbg !30
  %440 = fmul float %283, %415, !dbg !30
  %441 = fmul float %284, %417, !dbg !30
  %442 = fmul float %285, %419, !dbg !30
  %443 = fmul float %286, %421, !dbg !30
  %444 = fmul float %287, %423, !dbg !30
  %445 = fmul float %288, %425, !dbg !30
  %446 = fmul float %289, %427, !dbg !30
  %447 = fmul float %290, %429, !dbg !30
  %448 = fmul float %291, %431, !dbg !30
  %449 = fmul float %292, %433, !dbg !30
  %450 = fmul float %434, %293, !dbg !31
  %451 = fmul float %435, %293, !dbg !31
  %452 = fmul float %436, %294, !dbg !31
  %453 = fmul float %437, %294, !dbg !31
  %454 = fmul float %438, %293, !dbg !31
  %455 = fmul float %439, %293, !dbg !31
  %456 = fmul float %440, %294, !dbg !31
  %457 = fmul float %441, %294, !dbg !31
  %458 = fmul float %442, %293, !dbg !31
  %459 = fmul float %443, %293, !dbg !31
  %460 = fmul float %444, %294, !dbg !31
  %461 = fmul float %445, %294, !dbg !31
  %462 = fmul float %446, %293, !dbg !31
  %463 = fmul float %447, %293, !dbg !31
  %464 = fmul float %448, %294, !dbg !31
  %465 = fmul float %449, %294, !dbg !31
  %466 = icmp samesign ugt i32 %24, %303, !dbg !37
  %467 = icmp samesign ugt i32 %24, %326, !dbg !37
  %468 = icmp samesign ugt i32 %25, %303, !dbg !37
  %469 = icmp samesign ugt i32 %25, %326, !dbg !37
  %470 = icmp samesign ugt i32 %24, %325, !dbg !37
  %471 = icmp samesign ugt i32 %24, %324, !dbg !37
  %472 = icmp samesign ugt i32 %25, %324, !dbg !37
  %473 = icmp samesign ugt i32 %24, %319, !dbg !37
  %474 = icmp samesign ugt i32 %24, %314, !dbg !37
  %475 = icmp samesign ugt i32 %25, %319, !dbg !37
  %476 = icmp samesign ugt i32 %25, %314, !dbg !37
  %477 = icmp samesign ugt i32 %24, %309, !dbg !37
  %478 = icmp samesign ugt i32 %24, %304, !dbg !37
  %479 = icmp samesign ugt i32 %25, %309, !dbg !37
  %480 = icmp samesign ugt i32 %25, %304, !dbg !37
  %481 = extractelement <8 x i1> %353, i64 0, !dbg !38
  %482 = and i1 %466, %481, !dbg !38
  %483 = and i1 %267, %482, !dbg !38
  %484 = extractelement <8 x i1> %353, i64 1, !dbg !38
  %485 = and i1 %467, %484, !dbg !38
  %486 = and i1 %267, %485, !dbg !38
  %487 = and i1 %468, %481, !dbg !38
  %488 = and i1 %265, %487, !dbg !38
  %489 = and i1 %469, %484, !dbg !38
  %490 = and i1 %265, %489, !dbg !38
  %491 = extractelement <8 x i1> %353, i64 2, !dbg !38
  %492 = and i1 %470, %491, !dbg !38
  %493 = and i1 %267, %492, !dbg !38
  %494 = extractelement <8 x i1> %353, i64 3, !dbg !38
  %495 = and i1 %471, %494, !dbg !38
  %496 = and i1 %267, %495, !dbg !38
  %497 = and i1 %466, %491, !dbg !38
  %498 = and i1 %265, %497, !dbg !38
  %499 = and i1 %472, %494, !dbg !38
  %500 = and i1 %265, %499, !dbg !38
  %501 = extractelement <8 x i1> %353, i64 4, !dbg !38
  %502 = and i1 %473, %501, !dbg !38
  %503 = and i1 %267, %502, !dbg !38
  %504 = extractelement <8 x i1> %353, i64 5, !dbg !38
  %505 = and i1 %474, %504, !dbg !38
  %506 = and i1 %267, %505, !dbg !38
  %507 = and i1 %475, %501, !dbg !38
  %508 = and i1 %265, %507, !dbg !38
  %509 = and i1 %476, %504, !dbg !38
  %510 = and i1 %265, %509, !dbg !38
  %511 = extractelement <8 x i1> %353, i64 6, !dbg !38
  %512 = and i1 %477, %511, !dbg !38
  %513 = and i1 %267, %512, !dbg !38
  %514 = extractelement <8 x i1> %353, i64 7, !dbg !38
  %515 = and i1 %478, %514, !dbg !38
  %516 = and i1 %267, %515, !dbg !38
  %517 = and i1 %479, %511, !dbg !38
  %518 = and i1 %265, %517, !dbg !38
  %519 = and i1 %480, %514, !dbg !38
  %520 = and i1 %265, %519, !dbg !38
  %521 = extractelement <8 x i32> %334, i64 3, !dbg !34
  %522 = sext i32 %521 to i64, !dbg !34
  %.idx13 = shl nsw i64 %522, 13, !dbg !34
  %523 = getelementptr i8, ptr addrspace(1) %297, i64 %.idx13, !dbg !34
  %524 = getelementptr float, ptr addrspace(1) %523, i64 %259, !dbg !34
  %525 = extractelement <8 x i32> %334, i64 2, !dbg !34
  %526 = sext i32 %525 to i64, !dbg !34
  %.idx14 = shl nsw i64 %526, 13, !dbg !34
  %527 = getelementptr i8, ptr addrspace(1) %297, i64 %.idx14, !dbg !34
  %528 = getelementptr float, ptr addrspace(1) %527, i64 %259, !dbg !34
  %529 = extractelement <8 x i32> %334, i64 1, !dbg !34
  %530 = sext i32 %529 to i64, !dbg !34
  %.idx15 = shl nsw i64 %530, 13, !dbg !34
  %531 = getelementptr i8, ptr addrspace(1) %297, i64 %.idx15, !dbg !34
  %532 = getelementptr float, ptr addrspace(1) %531, i64 %259, !dbg !34
  %533 = extractelement <8 x i32> %334, i64 0, !dbg !34
  %534 = sext i32 %533 to i64, !dbg !34
  %.idx16 = shl nsw i64 %534, 13, !dbg !34
  %535 = getelementptr i8, ptr addrspace(1) %297, i64 %.idx16, !dbg !34
  %536 = getelementptr float, ptr addrspace(1) %535, i64 %259, !dbg !34
  %537 = extractelement <8 x i1> %335, i64 3, !dbg !34
  %538 = and i1 %48, %537, !dbg !34
  %539 = extractelement <8 x i1> %335, i64 2, !dbg !34
  %540 = and i1 %48, %539, !dbg !34
  %541 = extractelement <8 x i1> %335, i64 1, !dbg !34
  %542 = and i1 %48, %541, !dbg !34
  %543 = extractelement <8 x i1> %335, i64 0, !dbg !34
  %544 = and i1 %48, %543, !dbg !34
  %545 = shl nuw nsw i32 %12, 4, !dbg !34
  %546 = and i32 %545, 448, !dbg !34
  %547 = shl nuw nsw i32 %12, 5, !dbg !34
  %548 = and i32 %547, 3072, !dbg !34
  %549 = or disjoint i32 %548, %546, !dbg !34
  %550 = or disjoint i32 %303, %549, !dbg !34
  %551 = and i32 %257, 1020, !dbg !34
  %552 = lshr exact i32 %549, 2, !dbg !34
  %553 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %552, !dbg !34
  %554 = getelementptr inbounds nuw float, ptr addrspace(3) %553, i32 %550, !dbg !34
  %555 = bitcast float %450 to i32, !dbg !34
  %556 = select i1 %483, i32 %555, i32 0, !dbg !39
  %557 = bitcast float %451 to i32, !dbg !34
  %558 = select i1 %486, i32 %557, i32 0, !dbg !39
  %559 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !34
  %560 = insertelement <2 x i32> %559, i32 %558, i64 1, !dbg !34
  store <2 x i32> %560, ptr addrspace(3) %554, align 8, !dbg !34
  %561 = or disjoint i32 %550, 512, !dbg !34
  %562 = lshr i32 %561, 4, !dbg !34
  %563 = and i32 %562, 67108860, !dbg !34
  %564 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %563, !dbg !34
  %565 = getelementptr inbounds nuw float, ptr addrspace(3) %564, i32 %561, !dbg !34
  %566 = bitcast float %452 to i32, !dbg !34
  %567 = select i1 %488, i32 %566, i32 0, !dbg !39
  %568 = bitcast float %453 to i32, !dbg !34
  %569 = select i1 %490, i32 %568, i32 0, !dbg !39
  %570 = insertelement <2 x i32> poison, i32 %567, i64 0, !dbg !34
  %571 = insertelement <2 x i32> %570, i32 %569, i64 1, !dbg !34
  store <2 x i32> %571, ptr addrspace(3) %565, align 8, !dbg !34
  %572 = getelementptr inbounds nuw i8, ptr addrspace(3) %554, i32 32, !dbg !34
  %573 = bitcast float %454 to i32, !dbg !34
  %574 = select i1 %493, i32 %573, i32 0, !dbg !39
  %575 = bitcast float %455 to i32, !dbg !34
  %576 = select i1 %496, i32 %575, i32 0, !dbg !39
  %577 = insertelement <2 x i32> poison, i32 %574, i64 0, !dbg !34
  %578 = insertelement <2 x i32> %577, i32 %576, i64 1, !dbg !34
  store <2 x i32> %578, ptr addrspace(3) %572, align 8, !dbg !34
  %579 = or disjoint i32 %550, 520, !dbg !34
  %580 = lshr i32 %579, 4, !dbg !34
  %581 = and i32 %580, 67108860, !dbg !34
  %582 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %581, !dbg !34
  %583 = getelementptr inbounds nuw float, ptr addrspace(3) %582, i32 %579, !dbg !34
  %584 = bitcast float %456 to i32, !dbg !34
  %585 = select i1 %498, i32 %584, i32 0, !dbg !39
  %586 = bitcast float %457 to i32, !dbg !34
  %587 = select i1 %500, i32 %586, i32 0, !dbg !39
  %588 = insertelement <2 x i32> poison, i32 %585, i64 0, !dbg !34
  %589 = insertelement <2 x i32> %588, i32 %587, i64 1, !dbg !34
  store <2 x i32> %589, ptr addrspace(3) %583, align 8, !dbg !34
  %590 = getelementptr inbounds nuw i8, ptr addrspace(3) %554, i32 64, !dbg !34
  %591 = bitcast float %458 to i32, !dbg !34
  %592 = select i1 %503, i32 %591, i32 0, !dbg !39
  %593 = bitcast float %459 to i32, !dbg !34
  %594 = select i1 %506, i32 %593, i32 0, !dbg !39
  %595 = insertelement <2 x i32> poison, i32 %592, i64 0, !dbg !34
  %596 = insertelement <2 x i32> %595, i32 %594, i64 1, !dbg !34
  store <2 x i32> %596, ptr addrspace(3) %590, align 8, !dbg !34
  %597 = or disjoint i32 %550, 528, !dbg !34
  %598 = lshr i32 %597, 4, !dbg !34
  %599 = and i32 %598, 67108860, !dbg !34
  %600 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %599, !dbg !34
  %601 = getelementptr inbounds nuw float, ptr addrspace(3) %600, i32 %597, !dbg !34
  %602 = bitcast float %460 to i32, !dbg !34
  %603 = select i1 %508, i32 %602, i32 0, !dbg !39
  %604 = bitcast float %461 to i32, !dbg !34
  %605 = select i1 %510, i32 %604, i32 0, !dbg !39
  %606 = insertelement <2 x i32> poison, i32 %603, i64 0, !dbg !34
  %607 = insertelement <2 x i32> %606, i32 %605, i64 1, !dbg !34
  store <2 x i32> %607, ptr addrspace(3) %601, align 8, !dbg !34
  %608 = getelementptr inbounds nuw i8, ptr addrspace(3) %554, i32 96, !dbg !34
  %609 = bitcast float %462 to i32, !dbg !34
  %610 = select i1 %513, i32 %609, i32 0, !dbg !39
  %611 = bitcast float %463 to i32, !dbg !34
  %612 = select i1 %516, i32 %611, i32 0, !dbg !39
  %613 = insertelement <2 x i32> poison, i32 %610, i64 0, !dbg !34
  %614 = insertelement <2 x i32> %613, i32 %612, i64 1, !dbg !34
  store <2 x i32> %614, ptr addrspace(3) %608, align 8, !dbg !34
  %615 = or disjoint i32 %550, 536, !dbg !34
  %616 = lshr i32 %615, 4, !dbg !34
  %617 = and i32 %616, 67108860, !dbg !34
  %618 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %617, !dbg !34
  %619 = getelementptr inbounds nuw float, ptr addrspace(3) %618, i32 %615, !dbg !34
  %620 = bitcast float %464 to i32, !dbg !34
  %621 = select i1 %518, i32 %620, i32 0, !dbg !39
  %622 = bitcast float %465 to i32, !dbg !34
  %623 = select i1 %520, i32 %622, i32 0, !dbg !39
  %624 = insertelement <2 x i32> poison, i32 %621, i64 0, !dbg !34
  %625 = insertelement <2 x i32> %624, i32 %623, i64 1, !dbg !34
  store <2 x i32> %625, ptr addrspace(3) %619, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !34
  %626 = and i32 %20, 60, !dbg !34
  %627 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %626, !dbg !34
  %628 = getelementptr inbounds nuw float, ptr addrspace(3) %627, i32 %551, !dbg !34
  %629 = or disjoint i32 %551, 1024, !dbg !34
  %630 = lshr i32 %629, 4, !dbg !34
  %631 = and i32 %630, 124, !dbg !34
  %632 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %631, !dbg !34
  %633 = getelementptr inbounds nuw float, ptr addrspace(3) %632, i32 %629, !dbg !34
  %634 = load <4 x i32>, ptr addrspace(3) %633, align 16, !dbg !34
  %635 = or disjoint i32 %551, 2048, !dbg !34
  %636 = lshr i32 %635, 4, !dbg !34
  %637 = and i32 %636, 188, !dbg !34
  %638 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %637, !dbg !34
  %639 = getelementptr inbounds nuw float, ptr addrspace(3) %638, i32 %635, !dbg !34
  %640 = load <4 x i32>, ptr addrspace(3) %639, align 16, !dbg !34
  %641 = or i32 %257, 3072, !dbg !34
  %642 = lshr i32 %641, 4, !dbg !34
  %643 = and i32 %642, 252, !dbg !34
  %644 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %643, !dbg !34
  %645 = getelementptr inbounds nuw float, ptr addrspace(3) %644, i32 %641, !dbg !34
  %646 = load <4 x i32>, ptr addrspace(3) %645, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %628, align 16, !dbg !34
  %647 = getelementptr inbounds nuw i8, ptr addrspace(3) %628, i32 4, !dbg !34
  %.extract32 = load i32, ptr addrspace(3) %647, align 4, !dbg !34
  %648 = getelementptr inbounds nuw i8, ptr addrspace(3) %628, i32 8, !dbg !34
  %.extract33 = load i32, ptr addrspace(3) %648, align 8, !dbg !34
  %649 = getelementptr inbounds nuw i8, ptr addrspace(3) %628, i32 12, !dbg !34
  %.extract34 = load i32, ptr addrspace(3) %649, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %524, i1 %538) #2, !dbg !34
  %.extract35 = extractelement <4 x i32> %634, i64 0, !dbg !34
  %.extract36 = extractelement <4 x i32> %634, i64 1, !dbg !34
  %.extract37 = extractelement <4 x i32> %634, i64 2, !dbg !34
  %.extract38 = extractelement <4 x i32> %634, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract35, i32 %.extract36, i32 %.extract37, i32 %.extract38, ptr addrspace(1) %528, i1 %540) #2, !dbg !34
  %.extract39 = extractelement <4 x i32> %640, i64 0, !dbg !34
  %.extract40 = extractelement <4 x i32> %640, i64 1, !dbg !34
  %.extract41 = extractelement <4 x i32> %640, i64 2, !dbg !34
  %.extract42 = extractelement <4 x i32> %640, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract39, i32 %.extract40, i32 %.extract41, i32 %.extract42, ptr addrspace(1) %532, i1 %542) #2, !dbg !34
  %.extract43 = extractelement <4 x i32> %646, i64 0, !dbg !34
  %.extract44 = extractelement <4 x i32> %646, i64 1, !dbg !34
  %.extract45 = extractelement <4 x i32> %646, i64 2, !dbg !34
  %.extract46 = extractelement <4 x i32> %646, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract43, i32 %.extract44, i32 %.extract45, i32 %.extract46, ptr addrspace(1) %536, i1 %544) #2, !dbg !34
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #5

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "chunk_scaled_dot_kkt.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "chunk_scaled_dot_kkt_fwd_kernel", linkageName: "chunk_scaled_dot_kkt_fwd_kernel", scope: !1, file: !1, line: 28, type: !6, scopeLine: 28, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 43, column: 30, scope: !5)
!9 = !DILocation(line: 43, column: 48, scope: !5)
!10 = !DILocation(line: 50, column: 25, scope: !5)
!11 = !DILocation(line: 44, column: 33, scope: !5)
!12 = !DILocation(line: 51, column: 16, scope: !5)
!13 = !DILocation(line: 51, column: 34, scope: !5)
!14 = !DILocation(line: 54, column: 42, scope: !5)
!15 = !DILocation(line: 54, column: 38, scope: !5)
!16 = !DILocation(line: 54, column: 46, scope: !5)
!17 = !DILocation(line: 54, column: 83, scope: !5)
!18 = !DILocation(line: 55, column: 21, scope: !5)
!19 = !DILocation(line: 59, column: 45, scope: !5)
!20 = !DILocation(line: 59, column: 52, scope: !5)
!21 = !DILocation(line: 59, column: 36, scope: !5)
!22 = !DILocation(line: 60, column: 22, scope: !5)
!23 = !DILocation(line: 58, column: 21, scope: !5)
!24 = !DILocation(line: 61, column: 27, scope: !5)
!25 = !DILocation(line: 51, column: 21, scope: !5)
!26 = !DILocation(line: 52, column: 16, scope: !5)
!27 = !DILocation(line: 64, column: 36, scope: !5)
!28 = !DILocation(line: 64, column: 44, scope: !5)
!29 = !DILocation(line: 65, column: 22, scope: !5)
!30 = !DILocation(line: 67, column: 15, scope: !5)
!31 = !DILocation(line: 68, column: 11, scope: !5)
!32 = !DILocation(line: 72, column: 48, scope: !5)
!33 = !DILocation(line: 72, column: 32, scope: !5)
!34 = !DILocation(line: 73, column: 18, scope: !5)
!35 = !DILocation(line: 66, column: 34, scope: !5)
!36 = !DILocation(line: 67, column: 19, scope: !5)
!37 = !DILocation(line: 70, column: 26, scope: !5)
!38 = !DILocation(line: 70, column: 43, scope: !5)
!39 = !DILocation(line: 71, column: 29, scope: !5)
!40 = !DILocation(line: 73, column: 4, scope: !5)
