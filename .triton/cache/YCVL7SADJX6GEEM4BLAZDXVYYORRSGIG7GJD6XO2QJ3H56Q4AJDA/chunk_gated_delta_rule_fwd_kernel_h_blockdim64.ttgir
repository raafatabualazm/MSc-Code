#blocked = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 32, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#shared4 = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_gated_delta_rule_fwd_kernel_h_blockdim64(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg5: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0), %arg7: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":36:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x32xi64, #blocked2> loc(#loc1)
    %cst_11 = arith.constant dense<128> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<128> : tensor<1x32xi64, #blocked2> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc1)
    %cst_14 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc1)
    %cst_17 = arith.constant dense<4096> : tensor<64x1xi64, #blocked2> loc(#loc1)
    %cst_18 = arith.constant dense<4096> : tensor<64x1xi64, #blocked3> loc(#loc1)
    %cst_19 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_21 = arith.constant dense<128> : tensor<1x64xi64, #blocked3> loc(#loc1)
    %cst_22 = arith.constant dense<4096> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c524288_i32 = arith.constant 524288 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %cst_23 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_24 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc1)
    %cst_25 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_26 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg7 : i32 loc(#loc6)
    %5 = arith.addi %arg7, %c63_i32 : i32 loc(#loc72)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc73)
    %7 = arith.muli %2, %6 : i32 loc(#loc10)
    %8 = arith.muli %7, %c32_i32 : i32 loc(#loc11)
    %9 = arith.addi %8, %3 : i32 loc(#loc12)
    %10 = arith.muli %9, %c16384_i32 : i32 loc(#loc13)
    %11 = tt.addptr %arg5, %10 : !tt.ptr<bf16>, i32 loc(#loc14)
    %12 = arith.muli %4, %c32_i32 : i32 loc(#loc15)
    %13 = arith.addi %12, %3 : i32 loc(#loc16)
    %14 = arith.muli %13, %c128_i32 : i32 loc(#loc17)
    %15 = tt.addptr %arg1, %14 : !tt.ptr<bf16>, i32 loc(#loc18)
    %16 = tt.addptr %arg0, %14 : !tt.ptr<bf16>, i32 loc(#loc19)
    %17 = tt.addptr %arg2, %14 : !tt.ptr<bf16>, i32 loc(#loc20)
    %18 = tt.addptr %arg3, %14 : !tt.ptr<bf16>, i32 loc(#loc21)
    %19 = arith.muli %1, %c16384_i32 : i32 loc(#loc22)
    %20 = tt.addptr %arg6, %19 : !tt.ptr<f32>, i32 loc(#loc23)
    %21 = arith.muli %0, %c32_i32 : i32 loc(#loc24)
    %22 = arith.extsi %21 : i32 to i64 loc(#loc25)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %28 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %29 = arith.extsi %23 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %30 = arith.extsi %24 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc26)
    %31 = arith.extsi %25 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
    %32 = arith.extsi %26 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc26)
    %33 = arith.extsi %27 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc26)
    %34 = arith.extsi %28 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %35 = tt.expand_dims %29 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc26)
    %36 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc26)
    %37 = arith.muli %35, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %38 = tt.broadcast %37 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc26)
    %39 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %40 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %41 = arith.extsi %40 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %42 = arith.addi %39, %41 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    %43 = tt.expand_dims %42 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi64, #blocked2> loc(#loc26)
    %44 = tt.broadcast %43 : tensor<1x32xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc26)
    %45 = arith.addi %38, %44 : tensor<64x32xi64, #blocked2> loc(#loc26)
    %46 = arith.cmpi sge, %35, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %47 = arith.cmpi sge, %36, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc26)
    %48 = arith.cmpi slt, %35, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc26)
    %49 = arith.cmpi slt, %36, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc26)
    %50 = arith.andi %46, %48 : tensor<64x1xi1, #blocked2> loc(#loc26)
    %51 = arith.andi %47, %49 : tensor<64x1xi1, #blocked> loc(#loc26)
    %52 = tt.broadcast %50 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc26)
    %53 = arith.cmpi sge, %43, %cst_10 : tensor<1x32xi64, #blocked2> loc(#loc26)
    %54 = arith.cmpi slt, %43, %cst_12 : tensor<1x32xi64, #blocked2> loc(#loc26)
    %55 = arith.andi %53, %54 : tensor<1x32xi1, #blocked2> loc(#loc26)
    %56 = tt.broadcast %55 : tensor<1x32xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc26)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked2> loc(#loc26)
    %58 = arith.addi %29, %cst_16 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc27)
    %59 = arith.addi %31, %cst_14 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc27)
    %60 = arith.addi %33, %cst_13 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc27)
    %61 = tt.expand_dims %58 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc27)
    %62 = tt.expand_dims %59 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc27)
    %63 = arith.muli %61, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %64 = tt.broadcast %63 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc27)
    %65 = arith.addi %64, %44 : tensor<64x32xi64, #blocked2> loc(#loc27)
    %66 = arith.cmpi sge, %61, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %67 = arith.cmpi sge, %62, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc27)
    %68 = arith.cmpi slt, %61, %cst_4 : tensor<64x1xi64, #blocked2> loc(#loc27)
    %69 = arith.cmpi slt, %62, %cst_2 : tensor<64x1xi64, #blocked> loc(#loc27)
    %70 = arith.andi %66, %68 : tensor<64x1xi1, #blocked2> loc(#loc27)
    %71 = arith.andi %67, %69 : tensor<64x1xi1, #blocked> loc(#loc27)
    %72 = tt.broadcast %70 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc27)
    %73 = arith.andi %72, %56 : tensor<64x32xi1, #blocked2> loc(#loc27)
    %74 = arith.extsi %arg7 : i32 to i64 loc(#loc28)
    %75 = tt.splat %17 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked3> loc(#loc29)
    %76 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc29)
    %77 = tt.broadcast %76 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %78 = tt.splat %74 : i64 -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %79 = tt.splat %74 : i64 -> tensor<64x1xi64, #blocked2> loc(#loc29)
    %80 = arith.cmpi sge, %76, %cst_20 : tensor<1x64xi64, #blocked3> loc(#loc29)
    %81 = arith.cmpi slt, %76, %cst_21 : tensor<1x64xi64, #blocked3> loc(#loc29)
    %82 = arith.andi %80, %81 : tensor<1x64xi1, #blocked3> loc(#loc29)
    %83 = tt.broadcast %82 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %84 = tt.expand_dims %60 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi64, #blocked3> loc(#loc30)
    %85 = tt.broadcast %84 : tensor<1x64xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc30)
    %86 = arith.cmpi sge, %84, %cst_20 : tensor<1x64xi64, #blocked3> loc(#loc30)
    %87 = arith.cmpi slt, %84, %cst_21 : tensor<1x64xi64, #blocked3> loc(#loc30)
    %88 = arith.andi %86, %87 : tensor<1x64xi1, #blocked3> loc(#loc30)
    %89 = tt.broadcast %88 : tensor<1x64xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc30)
    %90 = tt.splat %15 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc31)
    %91 = tt.splat %18 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc32)
    %92 = tt.splat %arg7 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %93 = tt.addptr %arg4, %12 : !tt.ptr<f32>, i32 loc(#loc34)
    %94 = tt.addptr %93, %3 : !tt.ptr<f32>, i32 loc(#loc35)
    %95 = tt.splat %94 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %96 = tt.splat %74 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %97 = tt.splat %16 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc37)
    %98 = tt.broadcast %36 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %99 = tt.broadcast %51 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %100 = tt.splat %74 : i64 -> tensor<1x64xi64, #blocked> loc(#loc37)
    %101 = tt.broadcast %62 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc38)
    %102 = tt.broadcast %71 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc38)
    %103 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc29)
    %104 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc30)
    %105 = ttg.local_alloc : () -> !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> loc(#loc31)
    %106 = ttg.local_alloc : () -> !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> loc(#loc36)
    %107 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> loc(#loc37)
    %108 = ttg.local_alloc : () -> !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> loc(#loc38)
    %109 = arith.cmpi sgt, %6, %c0_i32 : i32 loc(#loc39)
    %110 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %111 = arith.muli %110, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %112 = arith.muli %35, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %113 = tt.broadcast %111 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %114 = arith.addi %113, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
    %115 = tt.addptr %75, %114 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
    %116 = arith.cmpi sge, %110, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %117 = arith.cmpi slt, %110, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %118 = arith.cmpi slt, %35, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %119 = arith.andi %116, %117 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %120 = arith.andi %46, %118 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %121 = tt.broadcast %119 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %122 = arith.andi %121, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
    %123 = ttg.memdesc_subview %103[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %124 = tt.splat %109 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
    %125 = arith.andi %124, %122 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %126 = ttg.async_copy_global_to_local %115, %123 mask %125 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %127 = ttg.async_commit_group %126 loc(#loc29)
    %128 = arith.addi %113, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
    %129 = tt.addptr %75, %128 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
    %130 = arith.andi %121, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
    %131 = ttg.memdesc_subview %104[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %132 = arith.andi %124, %130 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %133 = ttg.async_copy_global_to_local %129, %131 mask %132 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %134 = ttg.async_commit_group %133 loc(#loc30)
    %135 = tt.broadcast %112 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
    %136 = arith.addi %135, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
    %137 = tt.addptr %90, %136 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
    %138 = tt.broadcast %120 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
    %139 = arith.andi %138, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
    %140 = ttg.memdesc_subview %105[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %141 = tt.splat %109 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
    %142 = arith.andi %141, %139 : tensor<64x32xi1, #blocked2> loc(#loc39)
    %143 = ttg.async_copy_global_to_local %137, %140 mask %142 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %144 = ttg.async_commit_group %143 loc(#loc31)
    %145 = arith.muli %32, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %146 = tt.addptr %95, %145 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %147 = arith.cmpi sge, %32, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %148 = arith.cmpi slt, %32, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %149 = arith.andi %147, %148 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %150 = ttg.memdesc_subview %106[%c0_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %151 = tt.splat %109 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %152 = arith.andi %151, %149 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %153 = ttg.async_copy_global_to_local %146, %150 mask %152 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %154 = ttg.async_commit_group %153 loc(#loc36)
    %155 = tt.expand_dims %34 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
    %156 = arith.muli %155, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
    %157 = tt.broadcast %156 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %158 = arith.addi %98, %157 : tensor<64x64xi64, #blocked> loc(#loc37)
    %159 = tt.addptr %97, %158 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
    %160 = arith.cmpi sge, %155, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
    %161 = arith.cmpi slt, %155, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
    %162 = arith.andi %160, %161 : tensor<1x64xi1, #blocked> loc(#loc37)
    %163 = tt.broadcast %162 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %164 = arith.andi %99, %163 : tensor<64x64xi1, #blocked> loc(#loc37)
    %165 = ttg.memdesc_subview %107[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
    %166 = tt.splat %109 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
    %167 = arith.andi %166, %164 : tensor<64x64xi1, #blocked> loc(#loc39)
    %168 = ttg.async_copy_global_to_local %159, %165 mask %167 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
    %169 = ttg.async_commit_group %168 loc(#loc37)
    %170 = arith.addi %101, %157 : tensor<64x64xi64, #blocked> loc(#loc38)
    %171 = tt.addptr %97, %170 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
    %172 = arith.andi %102, %163 : tensor<64x64xi1, #blocked> loc(#loc38)
    %173 = ttg.memdesc_subview %108[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
    %174 = arith.andi %166, %172 : tensor<64x64xi1, #blocked> loc(#loc39)
    %175 = ttg.async_copy_global_to_local %171, %173 mask %174 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
    %176 = ttg.async_commit_group %175 loc(#loc38)
    %177 = arith.cmpi sgt, %6, %c1_i32 : i32 loc(#loc39)
    %178 = arith.addi %30, %cst_24 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
    %179 = arith.addi %32, %cst_25 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
    %180 = arith.addi %34, %cst_26 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
    %181 = tt.expand_dims %178 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
    %182 = arith.muli %181, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %183 = arith.muli %61, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %184 = tt.broadcast %182 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
    %185 = arith.addi %184, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
    %186 = tt.addptr %75, %185 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
    %187 = arith.cmpi sge, %181, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %188 = arith.cmpi slt, %181, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
    %189 = arith.cmpi slt, %61, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
    %190 = arith.andi %187, %188 : tensor<64x1xi1, #blocked3> loc(#loc29)
    %191 = arith.andi %66, %189 : tensor<64x1xi1, #blocked2> loc(#loc29)
    %192 = tt.broadcast %190 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
    %193 = arith.andi %192, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
    %194 = ttg.memdesc_subview %103[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %195 = tt.splat %177 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
    %196 = arith.andi %195, %193 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %197 = ttg.async_copy_global_to_local %186, %194 mask %196 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
    %198 = ttg.async_commit_group %197 loc(#loc29)
    %199 = arith.addi %184, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
    %200 = tt.addptr %75, %199 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
    %201 = arith.andi %192, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
    %202 = ttg.memdesc_subview %104[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %203 = arith.andi %195, %201 : tensor<64x64xi1, #blocked3> loc(#loc39)
    %204 = ttg.async_copy_global_to_local %200, %202 mask %203 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
    %205 = ttg.async_commit_group %204 loc(#loc30)
    %206 = tt.broadcast %183 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
    %207 = arith.addi %206, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
    %208 = tt.addptr %90, %207 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
    %209 = tt.broadcast %191 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
    %210 = arith.andi %209, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
    %211 = ttg.memdesc_subview %105[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %212 = tt.splat %177 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
    %213 = arith.andi %212, %210 : tensor<64x32xi1, #blocked2> loc(#loc39)
    %214 = ttg.async_copy_global_to_local %208, %211 mask %213 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
    %215 = ttg.async_commit_group %214 loc(#loc31)
    %216 = arith.muli %179, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %217 = tt.addptr %95, %216 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %218 = arith.cmpi sge, %179, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %219 = arith.cmpi slt, %179, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %220 = arith.andi %218, %219 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %221 = ttg.memdesc_subview %106[%c1_i32, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %222 = tt.splat %177 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %223 = arith.andi %222, %220 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
    %224 = ttg.async_copy_global_to_local %217, %221 mask %223 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
    %225 = ttg.async_commit_group %224 loc(#loc36)
    %226 = tt.expand_dims %180 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
    %227 = arith.muli %226, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
    %228 = tt.broadcast %227 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
    %229 = arith.addi %98, %228 : tensor<64x64xi64, #blocked> loc(#loc37)
    %230 = tt.addptr %97, %229 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
    %231 = arith.cmpi sge, %226, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
    %232 = arith.cmpi slt, %226, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
    %233 = arith.andi %231, %232 : tensor<1x64xi1, #blocked> loc(#loc37)
    %234 = tt.broadcast %233 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
    %235 = arith.andi %99, %234 : tensor<64x64xi1, #blocked> loc(#loc37)
    %236 = ttg.memdesc_subview %107[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
    %237 = tt.splat %177 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
    %238 = arith.andi %237, %235 : tensor<64x64xi1, #blocked> loc(#loc39)
    %239 = ttg.async_copy_global_to_local %230, %236 mask %238 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
    %240 = ttg.async_commit_group %239 loc(#loc37)
    %241 = arith.addi %101, %228 : tensor<64x64xi64, #blocked> loc(#loc38)
    %242 = tt.addptr %97, %241 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
    %243 = arith.andi %102, %234 : tensor<64x64xi1, #blocked> loc(#loc38)
    %244 = ttg.memdesc_subview %108[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
    %245 = arith.andi %237, %243 : tensor<64x64xi1, #blocked> loc(#loc39)
    %246 = ttg.async_copy_global_to_local %242, %244 mask %245 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
    %247 = ttg.async_commit_group %246 loc(#loc38)
    %248:24 = scf.for %arg8 = %c0_i32 to %6 step %c1_i32 iter_args(%arg9 = %cst_23, %arg10 = %cst_23, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %c1_i32, %arg14 = %c-1_i32, %arg15 = %127, %arg16 = %198, %arg17 = %134, %arg18 = %205, %arg19 = %144, %arg20 = %215, %arg21 = %136, %arg22 = %207, %arg23 = %139, %arg24 = %210, %arg25 = %c0_i32, %arg26 = %c64_i32, %arg27 = %154, %arg28 = %225, %arg29 = %169, %arg30 = %240, %arg31 = %176, %arg32 = %247) -> (tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %286 = arith.subi %6, %c2_i32 : i32 loc(#loc39)
      %287 = arith.cmpi slt, %arg8, %286 : i32 loc(#loc39)
      %288 = arith.addi %arg14, %c1_i32 : i32 loc(#loc39)
      %289 = arith.cmpi sge, %288, %c2_i32 : i32 loc(#loc39)
      %290 = arith.select %289, %c0_i32, %288 : i32 loc(#loc39)
      %291 = arith.addi %arg12, %c1_i32 : i32 loc(#loc39)
      %292 = arith.cmpi sge, %291, %c3_i32 : i32 loc(#loc39)
      %293 = arith.select %292, %c0_i32, %291 : i32 loc(#loc39)
      %294 = arith.muli %arg8, %c524288_i32 : i32 loc(#loc40)
      %295 = tt.addptr %11, %294 : !tt.ptr<bf16>, i32 loc(#loc41)
      %296 = arith.truncf %arg9 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc42)
      %297 = ttg.local_alloc %296 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc42)
      %298 = tt.splat %295 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %299 = tt.addptr %298, %45 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc26)
      %300 = ttg.convert_layout %296 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc26)
      tt.store %299, %300, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc26)
      %301 = arith.truncf %arg10 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc43)
      %302 = ttg.local_alloc %301 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc43)
      %303 = tt.addptr %298, %65 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc27)
      %304 = ttg.convert_layout %301 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc27)
      tt.store %303, %304, %73 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc27)
      %305 = ttg.async_wait %arg15, %arg17, %arg19, %arg27, %arg29, %arg31 {num = 6 : i32} loc(#loc29)
      %306 = ttg.memdesc_subview %103[%293, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      ttng.fence_async_shared {bCluster = false} loc(#loc44)
      %307 = ttng.warp_group_dot %306, %297, %cst_23 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc44)
      %308:3 = ttng.warp_group_dot_wait %307, %306, %297 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc44)
      %309 = ttg.memdesc_subview %104[%293, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      ttng.fence_async_shared {bCluster = false} loc(#loc45)
      %310 = ttng.warp_group_dot %309, %302, %308#0 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc45)
      %311:3 = ttng.warp_group_dot_wait %310, %309, %302 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc45)
      %312 = ttg.memdesc_subview %105[%290, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %313 = ttg.local_load %312 token %305 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> -> tensor<64x32xbf16, #mma> loc(#loc46)
      %314 = arith.extf %313 : tensor<64x32xbf16, #mma> to tensor<64x32xf32, #mma> loc(#loc46)
      %315 = arith.subf %314, %311#0 : tensor<64x32xf32, #mma> loc(#loc46)
      %316 = arith.truncf %315 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc47)
      %317 = ttg.convert_layout %316 : tensor<64x32xbf16, #mma> -> tensor<64x32xbf16, #blocked2> loc(#loc47)
      %318 = tt.addptr %91, %arg21 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc32)
      tt.store %318, %317, %arg23 : tensor<64x32x!tt.ptr<bf16>, #blocked2> loc(#loc32)
      %319 = arith.addi %arg8, %c1_i32 : i32 loc(#loc48)
      %320 = arith.muli %319, %c64_i32 : i32 loc(#loc49)
      %321 = arith.minsi %320, %arg7 : i32 loc(#loc50)
      %322 = arith.subi %321, %c1_i32 : i32 loc(#loc51)
      %323 = tt.splat %arg25 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %324 = arith.addi %323, %26 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc52)
      %325 = arith.cmpi slt, %324, %92 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %326 = arith.muli %322, %c32_i32 : i32 loc(#loc53)
      %327 = tt.addptr %93, %326 : !tt.ptr<f32>, i32 loc(#loc54)
      %328 = tt.addptr %327, %3 : !tt.ptr<f32>, i32 loc(#loc55)
      %329 = tt.load %328 : !tt.ptr<f32> loc(#loc56)
      %330 = ttg.memdesc_subview %106[%290, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %331 = ttg.local_load %330 token %305 : !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %332 = tt.splat %329 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %333 = arith.subf %332, %331 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc57)
      %334 = math.exp %333 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc58)
      %335 = arith.select %325, %334, %cst_1 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc59)
      %336 = tt.expand_dims %335 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc60)
      %337 = tt.broadcast %336 : tensor<64x1xf32, #mma> -> tensor<64x32xf32, #mma> loc(#loc61)
      %338 = arith.mulf %315, %337 : tensor<64x32xf32, #mma> loc(#loc61)
      %339 = math.exp %329 : f32 loc(#loc62)
      %340 = tt.splat %339 : f32 -> tensor<64x32xf32, #mma> loc(#loc63)
      %341 = arith.mulf %arg9, %340 : tensor<64x32xf32, #mma> loc(#loc63)
      %342 = arith.mulf %arg10, %340 : tensor<64x32xf32, #mma> loc(#loc64)
      %343 = arith.truncf %338 : tensor<64x32xf32, #mma> to tensor<64x32xbf16, #mma> loc(#loc65)
      %344 = ttg.local_alloc %343 : (tensor<64x32xbf16, #mma>) -> !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc65)
      %345 = ttg.memdesc_subview %107[%293, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
      ttng.fence_async_shared {bCluster = false} loc(#loc66)
      %346 = ttng.warp_group_dot %345, %344, %341 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc66)
      %347:3 = ttng.warp_group_dot_wait %346, %345, %344 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc66)
      %348 = ttg.memdesc_subview %108[%293, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
      ttng.fence_async_shared {bCluster = false} loc(#loc67)
      %349 = ttng.warp_group_dot %348, %344, %342 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> * !ttg.memdesc<64x32xbf16, #shared4, #smem> -> tensor<64x32xf32, #mma> loc(#loc67)
      %350:3 = ttng.warp_group_dot_wait %349, %348, %344 {pendings = 0 : i32} : tensor<64x32xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64>, !ttg.memdesc<64x32xbf16, #shared4, #smem> loc(#loc67)
      %351 = arith.addi %arg13, %c1_i32 : i32 loc(#loc39)
      %352 = arith.cmpi sge, %351, %c2_i32 : i32 loc(#loc39)
      %353 = arith.select %352, %c0_i32, %351 : i32 loc(#loc39)
      %354 = arith.addi %arg11, %c1_i32 : i32 loc(#loc39)
      %355 = arith.cmpi sge, %354, %c3_i32 : i32 loc(#loc39)
      %356 = arith.select %355, %c0_i32, %354 : i32 loc(#loc39)
      %357 = arith.addi %arg8, %c2_i32 : i32 loc(#loc39)
      %358 = arith.muli %357, %c64_i32 : i32 loc(#loc68)
      %359 = arith.extsi %358 : i32 to i64 loc(#loc28)
      %360 = tt.splat %359 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %361 = tt.splat %359 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %362 = tt.splat %359 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %363 = tt.splat %359 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
      %364 = arith.addi %360, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc29)
      %365 = arith.addi %361, %29 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc29)
      %366 = arith.addi %362, %32 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %367 = arith.addi %363, %34 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc29)
      %368 = tt.expand_dims %364 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi64, #blocked3> loc(#loc29)
      %369 = tt.expand_dims %365 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi64, #blocked2> loc(#loc29)
      %370 = arith.muli %368, %cst_18 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %371 = arith.muli %369, %cst_17 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %372 = tt.broadcast %370 : tensor<64x1xi64, #blocked3> -> tensor<64x64xi64, #blocked3> loc(#loc29)
      %373 = arith.addi %372, %77 : tensor<64x64xi64, #blocked3> loc(#loc29)
      %374 = tt.addptr %75, %373 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc29)
      %375 = arith.cmpi sge, %368, %cst_6 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %376 = arith.cmpi sge, %369, %cst_8 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %377 = arith.cmpi slt, %368, %78 : tensor<64x1xi64, #blocked3> loc(#loc29)
      %378 = arith.cmpi slt, %369, %79 : tensor<64x1xi64, #blocked2> loc(#loc29)
      %379 = arith.andi %375, %377 : tensor<64x1xi1, #blocked3> loc(#loc29)
      %380 = arith.andi %376, %378 : tensor<64x1xi1, #blocked2> loc(#loc29)
      %381 = tt.broadcast %379 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc29)
      %382 = arith.andi %381, %83 : tensor<64x64xi1, #blocked3> loc(#loc29)
      %383 = ttg.memdesc_subview %103[%356, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %384 = tt.splat %287 : i1 -> tensor<64x64xi1, #blocked3> loc(#loc39)
      %385 = arith.andi %384, %382 : tensor<64x64xi1, #blocked3> loc(#loc39)
      %386 = ttg.async_copy_global_to_local %374, %383 mask %385 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc29)
      %387 = ttg.async_commit_group %386 loc(#loc29)
      %388 = arith.addi %372, %85 : tensor<64x64xi64, #blocked3> loc(#loc30)
      %389 = tt.addptr %75, %388 : tensor<64x64x!tt.ptr<bf16>, #blocked3>, tensor<64x64xi64, #blocked3> loc(#loc30)
      %390 = arith.andi %381, %89 : tensor<64x64xi1, #blocked3> loc(#loc30)
      %391 = ttg.memdesc_subview %104[%356, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      %392 = arith.andi %384, %390 : tensor<64x64xi1, #blocked3> loc(#loc39)
      %393 = ttg.async_copy_global_to_local %389, %391 mask %392 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> <64x64xbf16, #shared, #smem, mutable, 3x64x64> loc(#loc30)
      %394 = ttg.async_commit_group %393 loc(#loc30)
      %395 = tt.broadcast %371 : tensor<64x1xi64, #blocked2> -> tensor<64x32xi64, #blocked2> loc(#loc31)
      %396 = arith.addi %395, %44 : tensor<64x32xi64, #blocked2> loc(#loc31)
      %397 = tt.addptr %90, %396 : tensor<64x32x!tt.ptr<bf16>, #blocked2>, tensor<64x32xi64, #blocked2> loc(#loc31)
      %398 = tt.broadcast %380 : tensor<64x1xi1, #blocked2> -> tensor<64x32xi1, #blocked2> loc(#loc31)
      %399 = arith.andi %398, %56 : tensor<64x32xi1, #blocked2> loc(#loc31)
      %400 = ttg.memdesc_subview %105[%353, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %401 = tt.splat %287 : i1 -> tensor<64x32xi1, #blocked2> loc(#loc39)
      %402 = arith.andi %401, %399 : tensor<64x32xi1, #blocked2> loc(#loc39)
      %403 = ttg.async_copy_global_to_local %397, %400 mask %402 : tensor<64x32x!tt.ptr<bf16>, #blocked2> -> <64x32xbf16, #shared1, #smem, mutable, 2x64x32> loc(#loc31)
      %404 = ttg.async_commit_group %403 loc(#loc31)
      %405 = arith.muli %366, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %406 = tt.addptr %95, %405 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %407 = arith.cmpi sge, %366, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %408 = arith.cmpi slt, %366, %96 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %409 = arith.andi %407, %408 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
      %410 = ttg.memdesc_subview %106[%353, %c0_i32] : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> -> !ttg.memdesc<64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %411 = tt.splat %287 : i1 -> tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %412 = arith.andi %411, %409 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc39)
      %413 = ttg.async_copy_global_to_local %406, %410 mask %412 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> -> <64xf32, #shared2, #smem, mutable, 2x64> loc(#loc36)
      %414 = ttg.async_commit_group %413 loc(#loc36)
      %415 = tt.expand_dims %367 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc37)
      %416 = arith.muli %415, %cst_22 : tensor<1x64xi64, #blocked> loc(#loc37)
      %417 = tt.broadcast %416 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc37)
      %418 = arith.addi %98, %417 : tensor<64x64xi64, #blocked> loc(#loc37)
      %419 = tt.addptr %97, %418 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc37)
      %420 = arith.cmpi sge, %415, %cst_19 : tensor<1x64xi64, #blocked> loc(#loc37)
      %421 = arith.cmpi slt, %415, %100 : tensor<1x64xi64, #blocked> loc(#loc37)
      %422 = arith.andi %420, %421 : tensor<1x64xi1, #blocked> loc(#loc37)
      %423 = tt.broadcast %422 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc37)
      %424 = arith.andi %99, %423 : tensor<64x64xi1, #blocked> loc(#loc37)
      %425 = ttg.memdesc_subview %107[%356, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
      %426 = tt.splat %287 : i1 -> tensor<64x64xi1, #blocked> loc(#loc39)
      %427 = arith.andi %426, %424 : tensor<64x64xi1, #blocked> loc(#loc39)
      %428 = ttg.async_copy_global_to_local %419, %425 mask %427 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc37)
      %429 = ttg.async_commit_group %428 loc(#loc37)
      %430 = arith.addi %101, %417 : tensor<64x64xi64, #blocked> loc(#loc38)
      %431 = tt.addptr %97, %430 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc38)
      %432 = arith.andi %102, %423 : tensor<64x64xi1, #blocked> loc(#loc38)
      %433 = ttg.memdesc_subview %108[%356, %c0_i32, %c0_i32] : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
      %434 = arith.andi %426, %432 : tensor<64x64xi1, #blocked> loc(#loc39)
      %435 = ttg.async_copy_global_to_local %431, %433 mask %434 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared3, #smem, mutable, 3x64x64> loc(#loc38)
      %436 = ttg.async_commit_group %435 loc(#loc38)
      scf.yield %347#0, %350#0, %356, %293, %353, %290, %arg16, %387, %arg18, %394, %arg20, %404, %arg22, %396, %arg24, %399, %arg26, %358, %arg28, %414, %arg30, %429, %arg32, %436 : tensor<64x32xf32, #mma>, tensor<64x32xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<64x32xi64, #blocked2>, tensor<64x32xi64, #blocked2>, tensor<64x32xi1, #blocked2>, tensor<64x32xi1, #blocked2>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc39)
    } loc(#loc39)
    %249 = ttg.async_wait  {num = 0 : i32} loc(#loc39)
    ttg.local_dealloc %108 : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %107 : !ttg.memdesc<3x64x64xbf16, #shared3, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %106 : !ttg.memdesc<2x64xf32, #shared2, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %105 : !ttg.memdesc<2x64x32xbf16, #shared1, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %104 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    ttg.local_dealloc %103 : !ttg.memdesc<3x64x64xbf16, #shared, #smem, mutable> loc(#loc39)
    %250 = tt.splat %20 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc69)
    %251 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc69)
    %252 = arith.extsi %251 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc69)
    %253 = tt.expand_dims %252 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc69)
    %254 = arith.muli %253, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %255 = tt.broadcast %254 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc69)
    %256 = tt.splat %22 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %257 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %258 = arith.extsi %257 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %259 = arith.addi %256, %258 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc69)
    %260 = tt.expand_dims %259 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc69)
    %261 = tt.broadcast %260 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc69)
    %262 = arith.addi %255, %261 : tensor<64x32xi64, #blocked1> loc(#loc69)
    %263 = tt.addptr %250, %262 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc69)
    %264 = arith.cmpi sge, %253, %cst_7 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %265 = arith.cmpi slt, %253, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc69)
    %266 = arith.andi %264, %265 : tensor<64x1xi1, #blocked1> loc(#loc69)
    %267 = tt.broadcast %266 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc69)
    %268 = arith.cmpi sge, %260, %cst_9 : tensor<1x32xi64, #blocked1> loc(#loc69)
    %269 = arith.cmpi slt, %260, %cst_11 : tensor<1x32xi64, #blocked1> loc(#loc69)
    %270 = arith.andi %268, %269 : tensor<1x32xi1, #blocked1> loc(#loc69)
    %271 = tt.broadcast %270 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc69)
    %272 = arith.andi %267, %271 : tensor<64x32xi1, #blocked1> loc(#loc69)
    %273 = ttg.convert_layout %248#0 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked1> loc(#loc69)
    tt.store %263, %273, %272 : tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc69)
    %274 = arith.addi %252, %cst_15 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc70)
    %275 = tt.expand_dims %274 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc70)
    %276 = arith.muli %275, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %277 = tt.broadcast %276 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc70)
    %278 = arith.addi %277, %261 : tensor<64x32xi64, #blocked1> loc(#loc70)
    %279 = tt.addptr %250, %278 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc70)
    %280 = arith.cmpi sge, %275, %cst_7 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %281 = arith.cmpi slt, %275, %cst_3 : tensor<64x1xi64, #blocked1> loc(#loc70)
    %282 = arith.andi %280, %281 : tensor<64x1xi1, #blocked1> loc(#loc70)
    %283 = tt.broadcast %282 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc70)
    %284 = arith.andi %283, %271 : tensor<64x32xi1, #blocked1> loc(#loc70)
    %285 = ttg.convert_layout %248#1 : tensor<64x32xf32, #mma> -> tensor<64x32xf32, #blocked1> loc(#loc70)
    tt.store %279, %285, %284 : tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":61:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":62:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":69:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:22)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":70:24)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py":40:28)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":71:20)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:16)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:20)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:29)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":83:9)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:16)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:20)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:27)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":84:9)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":85:9)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":86:9)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":88:17)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":95:18)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:79)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:94)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:23)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:27)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:83)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":126:22)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":130:26)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:22)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:26)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:50)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:35)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":151:50)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":152:26)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":182:22)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":189:26)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":112:21)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":113:37)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":114:31)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":117:35)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":127:26)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":131:31)
#loc46 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":141:52)
#loc47 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":145:33)
#loc48 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:30)
#loc49 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:35)
#loc50 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:39)
#loc51 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":147:44)
#loc52 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":149:30)
#loc53 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:56)
#loc54 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:45)
#loc55 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:60)
#loc56 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":150:31)
#loc57 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:53)
#loc58 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:42)
#loc59 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:59)
#loc60 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:62)
#loc61 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":153:24)
#loc62 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":154:27)
#loc63 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":155:20)
#loc64 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":157:24)
#loc65 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":179:21)
#loc66 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":186:28)
#loc67 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":193:32)
#loc68 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":125:65)
#loc69 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":211:23)
#loc70 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":214:27)
#loc71 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_delta_h.py":209:4)
#loc72 = loc(callsite(#loc7 at #loc8))
#loc73 = loc(callsite(#loc9 at #loc8))
