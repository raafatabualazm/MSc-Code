//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_90a
.address_size 64

	// .globl	merge_16x16_to_64x64_inverse_kernel // -- Begin function merge_16x16_to_64x64_inverse_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @merge_16x16_to_64x64_inverse_kernel
.visible .entry merge_16x16_to_64x64_inverse_kernel(
	.param .u64 .ptr .global .align 1 merge_16x16_to_64x64_inverse_kernel_param_0,
	.param .u64 .ptr .global .align 1 merge_16x16_to_64x64_inverse_kernel_param_1,
	.param .u32 merge_16x16_to_64x64_inverse_kernel_param_2,
	.param .u64 .ptr .global .align 1 merge_16x16_to_64x64_inverse_kernel_param_3
)
.reqntid 256
{
	.reg .pred 	%p<130>;
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<1091>;
	.reg .b64 	%rd<131>;
	.loc	1 183 0                         // solve_tril.py:183:0
$L__func_begin0:
	.loc	1 183 0                         // solve_tril.py:183:0

// %bb.0:
	ld.param.b64 	%rd67, [merge_16x16_to_64x64_inverse_kernel_param_0];
$L__tmp0:
	.loc	1 195 30                        // solve_tril.py:195:30
	mov.u32 	%r1, %ctaid.x;
	ld.param.b64 	%rd68, [merge_16x16_to_64x64_inverse_kernel_param_1];
	ld.param.b32 	%r55, [merge_16x16_to_64x64_inverse_kernel_param_2];
	.loc	1 195 48                        // solve_tril.py:195:48
	mov.u32 	%r110, %ctaid.y;
	.loc	1 204 23                        // solve_tril.py:204:23
	mov.u32 	%r2, %tid.x;
	ld.param.b64 	%rd69, [merge_16x16_to_64x64_inverse_kernel_param_3];
	bfe.s32 	%r111, %r2, 5, 1;
	bfe.s32 	%r112, %r2, 6, 1;
	and.b32 	%r5, %r2, 128;
	bfe.u32 	%r6, %r2, 4, 4;
	and.b32 	%r7, %r2, 15;
	.loc	1 205 25                        // solve_tril.py:205:25
	setp.gt.u32 	%p49, %r6, %r7;
	.loc	1 202 25                        // solve_tril.py:202:25
	shl.b32 	%r113, %r110, 6;
	and.b32 	%r114, %r113, 4192256;
	.loc	1 207 27                        // solve_tril.py:207:27
	mul.lo.s32 	%r115, %r114, %r55;
	and.b32 	%r116, %r113, 1984;
	or.b32 	%r117, %r115, %r116;
	.loc	1 207 9                         // solve_tril.py:207:9
	mul.wide.s32 	%rd70, %r117, 4;
	add.s64 	%rd28, %rd67, %rd70;
	.loc	1 208 10                        // solve_tril.py:208:10
	mul.wide.s32 	%rd71, %r117, 2;
	add.s64 	%rd46, %rd68, %rd71;
	.loc	1 220 61                        // solve_tril.py:220:61
	mov.u32 	%r118, %ctaid.z;
	mov.u32 	%r119, %nctaid.x;
	mov.u32 	%r120, %nctaid.y;
	mad.lo.s32 	%r121, %r118, %r120, %r110;
	mad.lo.s32 	%r122, %r121, %r119, %r1;
	shl.b32 	%r123, %r122, 8;
	cvt.s64.s32 	%rd72, %r123;
	add.s64 	%rd42, %rd69, %rd72;
	setp.lt.u32 	%p1, %r2, 32;
	shl.b32 	%r10, %r2, 2;
	mov.b32 	%r79, global_smem;
	add.s32 	%r210, %r79, %r10;
	mov.b32 	%r59, 0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r210 + 0 ], %r59;
	// end inline asm
	bar.warp.sync 	-1;
	setp.eq.s32 	%p2, %r2, 0;
	cvt.u64.u32 	%rd27, %r79;
	// begin inline asm
	@%p2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd27 + 0 ], %rd28;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1;
	// end inline asm
	mov.b32 	%r52, 16;
	// begin inline asm
	@%p2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r52;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r52;
	// end inline asm
	mov.b32 	%r54, 64;
	// begin inline asm
	@%p2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r54;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r55;
	// end inline asm
	mov.b64 	%rd35, 8192;
	// begin inline asm
	@%p2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd27 + 0 ], 0x0, %rd35;
	// end inline asm
	mov.b32 	%r56, 1;
	// begin inline asm
	@%p2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r56;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r56;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x7;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x2;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd42 + 0 ], [ %rd27 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd42 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	cvta.global.u64 	%rd63, %rd42;
	.loc	1 221 64                        // solve_tril.py:221:64
	add.s64 	%rd3, %rd42, 128;
	bar.sync 	0;
	// begin inline asm
	@%p1 st.shared.b32 [ %r210 + 0 ], %r59;
	// end inline asm
	bar.warp.sync 	-1;
	// begin inline asm
	@%p2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ %rd27 + 0 ], %rd46;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r52;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r52;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r54;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r55;
	// end inline asm
	mov.b64 	%rd53, 4096;
	// begin inline asm
	@%p2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ %rd27 + 0 ], 0x0, %rd53;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0, %r56;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1, %r56;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ %rd27 + 0 ], 0xa;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x1;
	// end inline asm
	// begin inline asm
	@%p2 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ %rd27 + 0 ], 0x0;
	// end inline asm
	// begin inline asm
	@%p1 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ %rd3 + 0 ], [ %rd27 + 0 ], 0x80;
	// end inline asm
	// begin inline asm
	@%p1 fence.proxy.tensormap::generic.acquire.gpu [ %rd3 + 0 ], 0x80;
	// end inline asm
	bar.sync 	0;
	.loc	1 222 35                        // solve_tril.py:222:35
	shl.b32 	%r570, %r1, 6;
	.loc	1 222 28                        // solve_tril.py:222:28
	add.s32 	%r66, %r79, 1024;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r66], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r66], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r124|%p50, -1;
	and.pred 	%p35, %p1, %p50;
	// begin inline asm
	@%p35 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r79], [%rd63, {%r59, %r570}], [%r66];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r66], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r66];
	// end inline asm
	and.b32 	%r11, %r10, 28;
	and.b32 	%r125, %r111, 36;
	xor.b32 	%r126, %r125, %r11;
	and.b32 	%r12, %r112, 72;
	xor.b32 	%r127, %r126, %r12;
	or.b32 	%r13, %r127, %r5;
	shl.b32 	%r128, %r13, 2;
	add.s32 	%r76, %r79, %r128;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r75}, [%r76];
	// end inline asm
	.loc	1 223 40                        // solve_tril.py:223:40
	or.b32 	%r582, %r570, 16;
	.loc	1 223 28                        // solve_tril.py:223:28
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r66], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r66], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r129|%p51, -1;
	and.pred 	%p39, %p1, %p51;
	// begin inline asm
	@%p39 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r79], [%rd63, {%r52, %r582}], [%r66];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r66], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r66];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r86}, [%r76];
	// end inline asm
	.loc	1 224 40                        // solve_tril.py:224:40
	or.b32 	%r588, %r570, 32;
	.loc	1 224 28                        // solve_tril.py:224:28
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r66], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r66], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r130|%p52, -1;
	and.pred 	%p43, %p1, %p52;
	mov.b32 	%r301, 32;
	// begin inline asm
	@%p43 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r79], [%rd63, {%r301, %r588}], [%r66];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r66], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r66];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r97}, [%r76];
	// end inline asm
	.loc	1 225 40                        // solve_tril.py:225:40
	or.b32 	%r597, %r570, 48;
	.loc	1 225 28                        // solve_tril.py:225:28
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r66], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r66], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r131|%p53, -1;
	and.pred 	%p47, %p1, %p53;
	mov.b32 	%r102, 48;
	// begin inline asm
	@%p47 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r79], [%rd63, {%r102, %r597}], [%r66];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r66], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r66];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r108}, [%r76];
	// end inline asm
	mov.b32 	%r132, 0f00000000;
	.loc	1 228 15                        // solve_tril.py:228:15
	sub.f32 	%r133, %r132, %r75;
	.loc	1 228 38                        // solve_tril.py:228:38
	selp.f32 	%r1088, %r133, 0f00000000, %p49;
	.loc	1 229 15                        // solve_tril.py:229:15
	sub.f32 	%r134, %r132, %r86;
	.loc	1 229 38                        // solve_tril.py:229:38
	selp.f32 	%r1089, %r134, 0f00000000, %p49;
	.loc	1 230 15                        // solve_tril.py:230:15
	sub.f32 	%r135, %r132, %r97;
	.loc	1 230 38                        // solve_tril.py:230:38
	selp.f32 	%r1087, %r135, 0f00000000, %p49;
	.loc	1 231 15                        // solve_tril.py:231:15
	sub.f32 	%r136, %r132, %r108;
	.loc	1 231 38                        // solve_tril.py:231:38
	selp.f32 	%r1090, %r136, 0f00000000, %p49;
	.loc	1 233 34                        // solve_tril.py:233:34
	sub.s32 	%r21, %r55, %r570;
	.loc	1 233 22                        // solve_tril.py:233:22
	setp.lt.s32 	%p54, %r21, 3;
	@%p54 bra 	$L__BB0_12;
// %bb.1:                               // %.lr.ph
	.loc	1 0 22                          // solve_tril.py:0:22
	and.b32 	%r3, %r2, 31;
	shr.u32 	%r4, %r2, 5;
	cvt.u64.u32 	%rd4, %r6;
	cvt.u64.u32 	%rd5, %r7;
	and.b32 	%r137, %r4, 7;
	shl.b32 	%r138, %r7, 5;
	add.s32 	%r22, %r79, %r138;
	shl.b32 	%r140, %r137, 2;
	add.s32 	%r207, %r22, %r140;
	and.b32 	%r24, %r2, 903;
	.loc	1 233 22                        // solve_tril.py:233:22
	min.u32 	%r141, %r21, 16;
	cvt.u64.u32 	%rd73, %r141;
	add.s64 	%rd124, %rd73, -2;
	add.s64 	%rd129, %rd4, -2;
	shl.b32 	%r25, %r1, 17;
	or.b32 	%r1079, %r25, 4096;
	mov.b64 	%rd123, %rd129;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 22                          // solve_tril.py:0:22
	setp.eq.s32 	%p57, %r24, 0;
	setp.lt.u32 	%p56, %r2, 128;
	setp.lt.u32 	%p55, %r3, 16;
	.loc	1 234 30                        // solve_tril.py:234:30
	mul.wide.s32 	%rd76, %r1079, 4;
	add.s64 	%rd77, %rd28, %rd76;
	.loc	1 234 54                        // solve_tril.py:234:54
	shl.b64 	%rd78, %rd4, 2;
	add.s64 	%rd74, %rd77, %rd78;
	shl.b64 	%rd79, %rd5, 2;
	add.s64 	%rd75, %rd77, %rd79;
	.loc	1 234 26                        // solve_tril.py:234:26
	// begin inline asm
	mov.u32 %r142, 0x0;
	ld.global.b32 { %r142 }, [ %rd74 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r143, 0x0;
	ld.global.b32 { %r143 }, [ %rd75 + 0 ];
	// end inline asm
	mov.b32 	%r150, 0f00000000;
	.loc	1 234 18                        // solve_tril.py:234:18
	sub.f32 	%r151, %r150, %r142;
	sub.f32 	%r152, %r150, %r143;
	.loc	1 235 43                        // solve_tril.py:235:43
	mul.f32 	%r153, %r1088, %r151;
$L__tmp1:
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:235:52 ]
	bar.sync 	0;
	shfl.sync.bfly.b32 	%r154, %r153, 16, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:235:52 ]
	fma.rn.f32 	%r145, %r1088, %r151, %r154;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:235:52 ]
	// begin inline asm
	@%p55 st.shared.b32 [ %r207 + 0 ], %r145;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p56 ld.shared.b32 %r146, [ %r210 + 0 ];
	// end inline asm
	shfl.sync.bfly.b32 	%r155, %r146, 4, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:235:52 ]
	add.f32 	%r156, %r146, %r155;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:235:52 ]
	shfl.sync.bfly.b32 	%r157, %r156, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:235:52 ]
	add.f32 	%r158, %r156, %r157;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:235:52 ]
	shfl.sync.bfly.b32 	%r159, %r158, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:235:52 ]
	add.f32 	%r149, %r158, %r159;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:235:52 ]
	// begin inline asm
	@%p57 st.shared.b32 [ %r210 + 0 ], %r149;
	// end inline asm
	bar.sync 	0;
	ld.shared.b32 	%r160, [%r22];
$L__tmp2:
	.loc	1 235 18                        // solve_tril.py:235:18
	add.f32 	%r161, %r152, %r160;
	.loc	1 236 35                        // solve_tril.py:236:35
	setp.eq.s64 	%p58, %rd123, 0;
	.loc	1 236 56                        // solve_tril.py:236:56
	selp.f32 	%r1088, %r161, %r1088, %p58;
	.loc	1 233 22                        // solve_tril.py:233:22
	add.s64 	%rd124, %rd124, -1;
	add.s64 	%rd123, %rd123, -1;
	add.s32 	%r1079, %r1079, 2048;
	setp.ne.s64 	%p59, %rd124, 0;
	@%p59 bra 	$L__BB0_2;
// %bb.3:                               // %._crit_edge
	.loc	1 237 27                        // solve_tril.py:237:27
	setp.lt.u32 	%p60, %r21, 19;
	@%p60 bra 	$L__BB0_12;
// %bb.4:                               // %.lr.ph16
	min.u32 	%r162, %r21, 32;
	cvt.u64.u32 	%rd80, %r162;
	add.s64 	%rd126, %rd80, -18;
	add.s32 	%r1081, %r25, 36864;
	mov.b64 	%rd125, %rd129;
$L__BB0_5:                              // =>This Inner Loop Header: Depth=1
	.loc	1 238 30                        // solve_tril.py:238:30
	mul.wide.s32 	%rd83, %r1081, 4;
	add.s64 	%rd84, %rd28, %rd83;
	.loc	1 238 54                        // solve_tril.py:238:54
	add.s64 	%rd86, %rd84, %rd78;
	add.s64 	%rd88, %rd84, %rd79;
	.loc	1 238 60                        // solve_tril.py:238:60
	add.s64 	%rd81, %rd86, 64;
	add.s64 	%rd82, %rd88, 64;
	.loc	1 238 26                        // solve_tril.py:238:26
	// begin inline asm
	mov.u32 %r163, 0x0;
	ld.global.b32 { %r163 }, [ %rd81 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r164, 0x0;
	ld.global.b32 { %r164 }, [ %rd82 + 0 ];
	// end inline asm
	mov.b32 	%r171, 0f00000000;
	.loc	1 238 18                        // solve_tril.py:238:18
	sub.f32 	%r172, %r171, %r163;
	sub.f32 	%r173, %r171, %r164;
	.loc	1 239 43                        // solve_tril.py:239:43
	mul.f32 	%r174, %r1089, %r172;
$L__tmp3:
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:239:52 ]
	bar.sync 	0;
	shfl.sync.bfly.b32 	%r175, %r174, 16, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:239:52 ]
	fma.rn.f32 	%r166, %r1089, %r172, %r175;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:239:52 ]
	// begin inline asm
	@%p55 st.shared.b32 [ %r207 + 0 ], %r166;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p56 ld.shared.b32 %r167, [ %r210 + 0 ];
	// end inline asm
	shfl.sync.bfly.b32 	%r176, %r167, 4, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:239:52 ]
	add.f32 	%r177, %r167, %r176;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:239:52 ]
	shfl.sync.bfly.b32 	%r178, %r177, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:239:52 ]
	add.f32 	%r179, %r177, %r178;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:239:52 ]
	shfl.sync.bfly.b32 	%r180, %r179, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:239:52 ]
	add.f32 	%r170, %r179, %r180;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:239:52 ]
	// begin inline asm
	@%p57 st.shared.b32 [ %r210 + 0 ], %r170;
	// end inline asm
	bar.sync 	0;
	ld.shared.b32 	%r181, [%r22];
$L__tmp4:
	.loc	1 239 18                        // solve_tril.py:239:18
	add.f32 	%r182, %r173, %r181;
	.loc	1 240 35                        // solve_tril.py:240:35
	setp.eq.s64 	%p64, %rd125, 0;
	.loc	1 240 61                        // solve_tril.py:240:61
	selp.f32 	%r1089, %r182, %r1089, %p64;
	.loc	1 237 27                        // solve_tril.py:237:27
	add.s64 	%rd126, %rd126, -1;
	add.s64 	%rd125, %rd125, -1;
	add.s32 	%r1081, %r1081, 2048;
	setp.ne.s64 	%p65, %rd126, 0;
	@%p65 bra 	$L__BB0_5;
// %bb.6:                               // %._crit_edge17
	.loc	1 241 27                        // solve_tril.py:241:27
	setp.lt.u32 	%p66, %r21, 35;
	@%p66 bra 	$L__BB0_12;
// %bb.7:                               // %.lr.ph21
	min.u32 	%r183, %r21, 48;
	cvt.u64.u32 	%rd89, %r183;
	add.s64 	%rd128, %rd89, -34;
	add.s32 	%r1083, %r25, 69632;
	mov.b64 	%rd127, %rd129;
$L__BB0_8:                              // =>This Inner Loop Header: Depth=1
	.loc	1 242 30                        // solve_tril.py:242:30
	mul.wide.s32 	%rd92, %r1083, 4;
	add.s64 	%rd93, %rd28, %rd92;
	.loc	1 242 54                        // solve_tril.py:242:54
	add.s64 	%rd95, %rd93, %rd78;
	add.s64 	%rd97, %rd93, %rd79;
	.loc	1 242 60                        // solve_tril.py:242:60
	add.s64 	%rd90, %rd95, 128;
	add.s64 	%rd91, %rd97, 128;
	.loc	1 242 26                        // solve_tril.py:242:26
	// begin inline asm
	mov.u32 %r184, 0x0;
	ld.global.b32 { %r184 }, [ %rd90 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r185, 0x0;
	ld.global.b32 { %r185 }, [ %rd91 + 0 ];
	// end inline asm
	mov.b32 	%r192, 0f00000000;
	.loc	1 242 18                        // solve_tril.py:242:18
	sub.f32 	%r193, %r192, %r184;
	sub.f32 	%r194, %r192, %r185;
	.loc	1 243 43                        // solve_tril.py:243:43
	mul.f32 	%r195, %r1087, %r193;
$L__tmp5:
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:243:52 ]
	bar.sync 	0;
	shfl.sync.bfly.b32 	%r196, %r195, 16, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:243:52 ]
	fma.rn.f32 	%r187, %r1087, %r193, %r196;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:243:52 ]
	// begin inline asm
	@%p55 st.shared.b32 [ %r207 + 0 ], %r187;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p56 ld.shared.b32 %r188, [ %r210 + 0 ];
	// end inline asm
	shfl.sync.bfly.b32 	%r197, %r188, 4, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:243:52 ]
	add.f32 	%r198, %r188, %r197;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:243:52 ]
	shfl.sync.bfly.b32 	%r199, %r198, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:243:52 ]
	add.f32 	%r200, %r198, %r199;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:243:52 ]
	shfl.sync.bfly.b32 	%r201, %r200, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:243:52 ]
	add.f32 	%r191, %r200, %r201;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:243:52 ]
	// begin inline asm
	@%p57 st.shared.b32 [ %r210 + 0 ], %r191;
	// end inline asm
	bar.sync 	0;
	ld.shared.b32 	%r202, [%r22];
$L__tmp6:
	.loc	1 243 18                        // solve_tril.py:243:18
	add.f32 	%r203, %r194, %r202;
	.loc	1 244 35                        // solve_tril.py:244:35
	setp.eq.s64 	%p70, %rd127, 0;
	.loc	1 244 61                        // solve_tril.py:244:61
	selp.f32 	%r1087, %r203, %r1087, %p70;
	.loc	1 241 27                        // solve_tril.py:241:27
	add.s64 	%rd128, %rd128, -1;
	add.s64 	%rd127, %rd127, -1;
	add.s32 	%r1083, %r1083, 2048;
	setp.ne.s64 	%p71, %rd128, 0;
	@%p71 bra 	$L__BB0_8;
// %bb.9:                               // %._crit_edge22
	.loc	1 245 27                        // solve_tril.py:245:27
	setp.lt.u32 	%p72, %r21, 51;
	@%p72 bra 	$L__BB0_12;
// %bb.10:                              // %.lr.ph26
	min.u32 	%r204, %r21, 64;
	cvt.u64.u32 	%rd98, %r204;
	add.s64 	%rd130, %rd98, -50;
	add.s32 	%r1085, %r25, 102400;
$L__BB0_11:                             // =>This Inner Loop Header: Depth=1
	.loc	1 246 30                        // solve_tril.py:246:30
	mul.wide.s32 	%rd101, %r1085, 4;
	add.s64 	%rd102, %rd28, %rd101;
	.loc	1 246 54                        // solve_tril.py:246:54
	add.s64 	%rd104, %rd102, %rd78;
	add.s64 	%rd106, %rd102, %rd79;
	.loc	1 246 60                        // solve_tril.py:246:60
	add.s64 	%rd99, %rd104, 192;
	add.s64 	%rd100, %rd106, 192;
	.loc	1 246 26                        // solve_tril.py:246:26
	// begin inline asm
	mov.u32 %r205, 0x0;
	ld.global.b32 { %r205 }, [ %rd99 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r206, 0x0;
	ld.global.b32 { %r206 }, [ %rd100 + 0 ];
	// end inline asm
	mov.b32 	%r213, 0f00000000;
	.loc	1 246 18                        // solve_tril.py:246:18
	sub.f32 	%r214, %r213, %r205;
	sub.f32 	%r215, %r213, %r206;
	.loc	1 247 43                        // solve_tril.py:247:43
	mul.f32 	%r216, %r1090, %r214;
$L__tmp7:
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:247:52 ]
	bar.sync 	0;
	shfl.sync.bfly.b32 	%r217, %r216, 16, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:247:52 ]
	fma.rn.f32 	%r208, %r1090, %r214, %r217;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:247:52 ]
	// begin inline asm
	@%p55 st.shared.b32 [ %r207 + 0 ], %r208;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p56 ld.shared.b32 %r209, [ %r210 + 0 ];
	// end inline asm
	shfl.sync.bfly.b32 	%r218, %r209, 4, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:247:52 ]
	add.f32 	%r219, %r209, %r218;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:247:52 ]
	shfl.sync.bfly.b32 	%r220, %r219, 2, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:247:52 ]
	add.f32 	%r221, %r219, %r220;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:247:52 ]
	shfl.sync.bfly.b32 	%r222, %r221, 1, 31, -1;
	.loc	2 260 15                        // standard.py:260:15 @[ solve_tril.py:247:52 ]
	add.f32 	%r212, %r221, %r222;
	.loc	2 290 36                        // standard.py:290:36 @[ solve_tril.py:247:52 ]
	// begin inline asm
	@%p57 st.shared.b32 [ %r210 + 0 ], %r212;
	// end inline asm
	bar.sync 	0;
	ld.shared.b32 	%r223, [%r22];
$L__tmp8:
	.loc	1 247 18                        // solve_tril.py:247:18
	add.f32 	%r224, %r215, %r223;
	.loc	1 248 35                        // solve_tril.py:248:35
	setp.eq.s64 	%p76, %rd129, 0;
	.loc	1 248 61                        // solve_tril.py:248:61
	selp.f32 	%r1090, %r224, %r1090, %p76;
	.loc	1 245 27                        // solve_tril.py:245:27
	add.s64 	%rd130, %rd130, -1;
	add.s64 	%rd129, %rd129, -1;
	add.s32 	%r1085, %r1085, 2048;
	setp.ne.s64 	%p77, %rd130, 0;
	@%p77 bra 	$L__BB0_11;
$L__BB0_12:                             // %._crit_edge27
	.loc	1 222 28                        // solve_tril.py:222:28
	and.b32 	%r599, %r10, 12;
	.loc	1 221 64                        // solve_tril.py:221:64
	cvta.global.u64 	%rd114, %rd3;
	.loc	1 206 26                        // solve_tril.py:206:26
	setp.eq.s32 	%p113, %r6, %r7;
	.loc	1 249 15                        // solve_tril.py:249:15
	selp.f32 	%r600, 0f3F800000, 0f00000000, %p113;
	add.f32 	%r226, %r1088, %r600;
	bar.sync 	0;
	and.b32 	%r601, %r2, 224;
	or.b32 	%r602, %r601, %r11;
	shl.b32 	%r603, %r602, 2;
	add.s32 	%r225, %r79, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r225], {%r226};
	// end inline asm
	.loc	1 250 15                        // solve_tril.py:250:15
	add.f32 	%r228, %r1089, %r600;
	add.s32 	%r604, %r79, 3088;
	add.s32 	%r227, %r604, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r227], {%r228};
	// end inline asm
	.loc	1 251 15                        // solve_tril.py:251:15
	add.f32 	%r230, %r1087, %r600;
	add.s32 	%r605, %r79, 4112;
	add.s32 	%r229, %r605, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r229], {%r230};
	// end inline asm
	.loc	1 252 15                        // solve_tril.py:252:15
	add.f32 	%r232, %r1090, %r600;
	add.s32 	%r606, %r79, 5136;
	add.s32 	%r231, %r606, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r231], {%r232};
	// end inline asm
	.loc	1 268 27                        // solve_tril.py:268:27
	add.s32 	%r233, %r79, 2048;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r233], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r233], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r607|%p114, -1;
	and.pred 	%p80, %p1, %p114;
	// begin inline asm
	@%p80 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r66], [%rd63, {%r59, %r582}], [%r233];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r233], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r233];
	// end inline asm
	add.s32 	%r243, %r66, %r128;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r245}, [%r243];
	// end inline asm
	bar.sync 	0;
	add.s32 	%r244, %r66, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r244], {%r245};
	// end inline asm
	.loc	1 269 27                        // solve_tril.py:269:27
	add.s32 	%r246, %r79, 3072;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r246], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r246], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r609|%p115, -1;
	and.pred 	%p84, %p1, %p115;
	// begin inline asm
	@%p84 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r233], [%rd63, {%r59, %r588}], [%r246];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r246], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r246];
	// end inline asm
	add.s32 	%r256, %r233, %r128;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r258}, [%r256];
	// end inline asm
	add.s32 	%r610, %r79, 6160;
	add.s32 	%r257, %r610, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r257], {%r258};
	// end inline asm
	.loc	1 270 27                        // solve_tril.py:270:27
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r246], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r246], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r611|%p116, -1;
	and.pred 	%p88, %p1, %p116;
	// begin inline asm
	@%p88 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r233], [%rd63, {%r52, %r588}], [%r246];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r246], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r246];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r271}, [%r256];
	// end inline asm
	add.s32 	%r612, %r79, 7184;
	add.s32 	%r270, %r612, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r270], {%r271};
	// end inline asm
	.loc	1 271 27                        // solve_tril.py:271:27
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r246], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r246], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r613|%p117, -1;
	and.pred 	%p92, %p1, %p117;
	// begin inline asm
	@%p92 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r233], [%rd63, {%r59, %r597}], [%r246];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r246], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r246];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r284}, [%r256];
	// end inline asm
	add.s32 	%r614, %r79, 8208;
	add.s32 	%r283, %r614, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r283], {%r284};
	// end inline asm
	.loc	1 272 27                        // solve_tril.py:272:27
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r246], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r246], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r615|%p118, -1;
	and.pred 	%p96, %p1, %p118;
	// begin inline asm
	@%p96 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r233], [%rd63, {%r52, %r597}], [%r246];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r246], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r246];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r297}, [%r256];
	// end inline asm
	add.s32 	%r616, %r79, 9232;
	add.s32 	%r296, %r616, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r296], {%r297};
	// end inline asm
	.loc	1 273 27                        // solve_tril.py:273:27
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.init.shared::cta.b64 [%r246], 1;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.arrive.expect_tx.shared.b64 _, [%r246], 1024;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r617|%p119, -1;
	and.pred 	%p100, %p1, %p119;
	// begin inline asm
	@%p100 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r233], [%rd63, {%r301, %r597}], [%r246];
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	{                                                           
	.reg .pred P1;                                              
	waitLoop:                                                   
	mbarrier.try_wait.parity.shared.b64 P1, [%r246], %r59;           
	@!P1 bra.uni waitLoop;                                      
	}                                                           
	
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p2 mbarrier.inval.shared::cta.b64 [%r246];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x1.shared.b16 {%r310}, [%r256];
	// end inline asm
	add.s32 	%r618, %r79, 10256;
	add.s32 	%r309, %r618, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r309], {%r310};
	// end inline asm
	.loc	1 250 15                        // solve_tril.py:250:15
	shl.b32 	%r619, %r6, 6;
	add.s32 	%r620, %r604, %r619;
	ld.shared.v4.b32 	{%r621, %r622, %r623, %r624}, [%r620];
	ld.shared.v4.b32 	{%r625, %r626, %r627, %r628}, [%r620+16];
	ld.shared.v4.b32 	{%r629, %r630, %r631, %r632}, [%r620+32];
	ld.shared.v4.b32 	{%r633, %r634, %r635, %r636}, [%r620+48];
	.loc	1 268 27                        // solve_tril.py:268:27
	shl.b32 	%r637, %r2, 1;
	and.b32 	%r638, %r637, 48;
	or.b32 	%r639, %r638, %r599;
	shl.b32 	%r640, %r639, 2;
	add.s32 	%r315, %r66, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r311, %r312, %r313, %r314}, [%r315];
	// end inline asm
	add.s32 	%r320, %r315, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r316, %r317, %r318, %r319}, [%r320];
	// end inline asm
	add.s32 	%r325, %r315, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r321, %r322, %r323, %r324}, [%r325];
	// end inline asm
	add.s32 	%r330, %r315, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r326, %r327, %r328, %r329}, [%r330];
	// end inline asm
	.loc	1 275 38                        // solve_tril.py:275:38
	fma.rn.f32 	%r641, %r621, %r311, 0f00000000;
	fma.rn.f32 	%r642, %r622, %r312, %r641;
	fma.rn.f32 	%r643, %r623, %r313, %r642;
	fma.rn.f32 	%r644, %r624, %r314, %r643;
	fma.rn.f32 	%r645, %r625, %r316, %r644;
	fma.rn.f32 	%r646, %r626, %r317, %r645;
	fma.rn.f32 	%r647, %r627, %r318, %r646;
	fma.rn.f32 	%r648, %r628, %r319, %r647;
	fma.rn.f32 	%r649, %r629, %r321, %r648;
	fma.rn.f32 	%r650, %r630, %r322, %r649;
	fma.rn.f32 	%r651, %r631, %r323, %r650;
	fma.rn.f32 	%r652, %r632, %r324, %r651;
	fma.rn.f32 	%r653, %r633, %r326, %r652;
	fma.rn.f32 	%r654, %r634, %r327, %r653;
	fma.rn.f32 	%r655, %r635, %r328, %r654;
	fma.rn.f32 	%r332, %r636, %r329, %r655;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r244], {%r332};
	// end inline asm
	bar.sync 	0;
	add.s32 	%r656, %r66, %r619;
	ld.shared.v4.b32 	{%r657, %r658, %r659, %r660}, [%r656];
	ld.shared.v4.b32 	{%r661, %r662, %r663, %r664}, [%r656+16];
	ld.shared.v4.b32 	{%r665, %r666, %r667, %r668}, [%r656+32];
	ld.shared.v4.b32 	{%r669, %r670, %r671, %r672}, [%r656+48];
	.loc	1 249 15                        // solve_tril.py:249:15
	add.s32 	%r337, %r79, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r333, %r334, %r335, %r336}, [%r337];
	// end inline asm
	add.s32 	%r342, %r337, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r338, %r339, %r340, %r341}, [%r342];
	// end inline asm
	add.s32 	%r347, %r337, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r343, %r344, %r345, %r346}, [%r347];
	// end inline asm
	add.s32 	%r352, %r337, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r348, %r349, %r350, %r351}, [%r352];
	// end inline asm
	.loc	1 275 78                        // solve_tril.py:275:78
	fma.rn.f32 	%r673, %r657, %r333, 0f00000000;
	fma.rn.f32 	%r674, %r658, %r334, %r673;
	fma.rn.f32 	%r675, %r659, %r335, %r674;
	fma.rn.f32 	%r676, %r660, %r336, %r675;
	fma.rn.f32 	%r677, %r661, %r338, %r676;
	fma.rn.f32 	%r678, %r662, %r339, %r677;
	fma.rn.f32 	%r679, %r663, %r340, %r678;
	fma.rn.f32 	%r680, %r664, %r341, %r679;
	fma.rn.f32 	%r681, %r665, %r343, %r680;
	fma.rn.f32 	%r682, %r666, %r344, %r681;
	fma.rn.f32 	%r683, %r667, %r345, %r682;
	fma.rn.f32 	%r684, %r668, %r346, %r683;
	fma.rn.f32 	%r685, %r669, %r348, %r684;
	fma.rn.f32 	%r686, %r670, %r349, %r685;
	fma.rn.f32 	%r687, %r671, %r350, %r686;
	fma.rn.f32 	%r688, %r672, %r351, %r687;
	.loc	1 275 15                        // solve_tril.py:275:15
	sub.f32 	%r354, %r132, %r688;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r225], {%r354};
	// end inline asm
	.loc	1 251 15                        // solve_tril.py:251:15
	add.s32 	%r690, %r605, %r619;
	ld.shared.v4.b32 	{%r691, %r692, %r693, %r694}, [%r690];
	ld.shared.v4.b32 	{%r695, %r696, %r697, %r698}, [%r690+16];
	ld.shared.v4.b32 	{%r699, %r700, %r701, %r702}, [%r690+32];
	ld.shared.v4.b32 	{%r703, %r704, %r705, %r706}, [%r690+48];
	.loc	1 270 27                        // solve_tril.py:270:27
	add.s32 	%r359, %r612, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r355, %r356, %r357, %r358}, [%r359];
	// end inline asm
	add.s32 	%r364, %r359, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r360, %r361, %r362, %r363}, [%r364];
	// end inline asm
	add.s32 	%r369, %r359, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r365, %r366, %r367, %r368}, [%r369];
	// end inline asm
	add.s32 	%r374, %r359, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r370, %r371, %r372, %r373}, [%r374];
	// end inline asm
	.loc	1 276 38                        // solve_tril.py:276:38
	fma.rn.f32 	%r707, %r691, %r355, 0f00000000;
	fma.rn.f32 	%r708, %r692, %r356, %r707;
	fma.rn.f32 	%r709, %r693, %r357, %r708;
	fma.rn.f32 	%r710, %r694, %r358, %r709;
	fma.rn.f32 	%r711, %r695, %r360, %r710;
	fma.rn.f32 	%r712, %r696, %r361, %r711;
	fma.rn.f32 	%r713, %r697, %r362, %r712;
	fma.rn.f32 	%r714, %r698, %r363, %r713;
	fma.rn.f32 	%r715, %r699, %r365, %r714;
	fma.rn.f32 	%r716, %r700, %r366, %r715;
	fma.rn.f32 	%r717, %r701, %r367, %r716;
	fma.rn.f32 	%r718, %r702, %r368, %r717;
	fma.rn.f32 	%r719, %r703, %r370, %r718;
	fma.rn.f32 	%r720, %r704, %r371, %r719;
	fma.rn.f32 	%r721, %r705, %r372, %r720;
	fma.rn.f32 	%r376, %r706, %r373, %r721;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r244], {%r376};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r722, %r723, %r724, %r725}, [%r656];
	ld.shared.v4.b32 	{%r726, %r727, %r728, %r729}, [%r656+16];
	ld.shared.v4.b32 	{%r730, %r731, %r732, %r733}, [%r656+32];
	ld.shared.v4.b32 	{%r734, %r735, %r736, %r737}, [%r656+48];
	.loc	1 250 15                        // solve_tril.py:250:15
	add.s32 	%r381, %r604, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r377, %r378, %r379, %r380}, [%r381];
	// end inline asm
	add.s32 	%r386, %r381, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r382, %r383, %r384, %r385}, [%r386];
	// end inline asm
	add.s32 	%r391, %r381, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r387, %r388, %r389, %r390}, [%r391];
	// end inline asm
	add.s32 	%r396, %r381, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r392, %r393, %r394, %r395}, [%r396];
	// end inline asm
	.loc	1 276 78                        // solve_tril.py:276:78
	fma.rn.f32 	%r738, %r722, %r377, 0f00000000;
	fma.rn.f32 	%r739, %r723, %r378, %r738;
	fma.rn.f32 	%r740, %r724, %r379, %r739;
	fma.rn.f32 	%r741, %r725, %r380, %r740;
	fma.rn.f32 	%r742, %r726, %r382, %r741;
	fma.rn.f32 	%r743, %r727, %r383, %r742;
	fma.rn.f32 	%r744, %r728, %r384, %r743;
	fma.rn.f32 	%r745, %r729, %r385, %r744;
	fma.rn.f32 	%r746, %r730, %r387, %r745;
	fma.rn.f32 	%r747, %r731, %r388, %r746;
	fma.rn.f32 	%r748, %r732, %r389, %r747;
	fma.rn.f32 	%r749, %r733, %r390, %r748;
	fma.rn.f32 	%r750, %r734, %r392, %r749;
	fma.rn.f32 	%r751, %r735, %r393, %r750;
	fma.rn.f32 	%r752, %r736, %r394, %r751;
	fma.rn.f32 	%r753, %r737, %r395, %r752;
	.loc	1 276 15                        // solve_tril.py:276:15
	sub.f32 	%r398, %r132, %r753;
	add.s32 	%r397, %r233, %r603;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r397], {%r398};
	// end inline asm
	.loc	1 252 15                        // solve_tril.py:252:15
	add.s32 	%r754, %r606, %r619;
	ld.shared.v4.b32 	{%r755, %r756, %r757, %r758}, [%r754];
	ld.shared.v4.b32 	{%r759, %r760, %r761, %r762}, [%r754+16];
	ld.shared.v4.b32 	{%r763, %r764, %r765, %r766}, [%r754+32];
	ld.shared.v4.b32 	{%r767, %r768, %r769, %r770}, [%r754+48];
	.loc	1 273 27                        // solve_tril.py:273:27
	add.s32 	%r403, %r618, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r399, %r400, %r401, %r402}, [%r403];
	// end inline asm
	add.s32 	%r408, %r403, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r404, %r405, %r406, %r407}, [%r408];
	// end inline asm
	add.s32 	%r413, %r403, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r409, %r410, %r411, %r412}, [%r413];
	// end inline asm
	add.s32 	%r418, %r403, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r414, %r415, %r416, %r417}, [%r418];
	// end inline asm
	.loc	1 277 38                        // solve_tril.py:277:38
	fma.rn.f32 	%r771, %r755, %r399, 0f00000000;
	fma.rn.f32 	%r772, %r756, %r400, %r771;
	fma.rn.f32 	%r773, %r757, %r401, %r772;
	fma.rn.f32 	%r774, %r758, %r402, %r773;
	fma.rn.f32 	%r775, %r759, %r404, %r774;
	fma.rn.f32 	%r776, %r760, %r405, %r775;
	fma.rn.f32 	%r777, %r761, %r406, %r776;
	fma.rn.f32 	%r778, %r762, %r407, %r777;
	fma.rn.f32 	%r779, %r763, %r409, %r778;
	fma.rn.f32 	%r780, %r764, %r410, %r779;
	fma.rn.f32 	%r781, %r765, %r411, %r780;
	fma.rn.f32 	%r782, %r766, %r412, %r781;
	fma.rn.f32 	%r783, %r767, %r414, %r782;
	fma.rn.f32 	%r784, %r768, %r415, %r783;
	fma.rn.f32 	%r785, %r769, %r416, %r784;
	fma.rn.f32 	%r420, %r770, %r417, %r785;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r244], {%r420};
	// end inline asm
	bar.sync 	0;
	ld.shared.v4.b32 	{%r786, %r787, %r788, %r789}, [%r656];
	ld.shared.v4.b32 	{%r790, %r791, %r792, %r793}, [%r656+16];
	ld.shared.v4.b32 	{%r794, %r795, %r796, %r797}, [%r656+32];
	ld.shared.v4.b32 	{%r798, %r799, %r800, %r801}, [%r656+48];
	.loc	1 251 15                        // solve_tril.py:251:15
	add.s32 	%r425, %r605, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r421, %r422, %r423, %r424}, [%r425];
	// end inline asm
	add.s32 	%r430, %r425, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r426, %r427, %r428, %r429}, [%r430];
	// end inline asm
	add.s32 	%r435, %r425, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r431, %r432, %r433, %r434}, [%r435];
	// end inline asm
	add.s32 	%r440, %r425, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r436, %r437, %r438, %r439}, [%r440];
	// end inline asm
	.loc	1 277 78                        // solve_tril.py:277:78
	fma.rn.f32 	%r802, %r786, %r421, 0f00000000;
	fma.rn.f32 	%r803, %r787, %r422, %r802;
	fma.rn.f32 	%r804, %r788, %r423, %r803;
	fma.rn.f32 	%r805, %r789, %r424, %r804;
	fma.rn.f32 	%r806, %r790, %r426, %r805;
	fma.rn.f32 	%r807, %r791, %r427, %r806;
	fma.rn.f32 	%r808, %r792, %r428, %r807;
	fma.rn.f32 	%r809, %r793, %r429, %r808;
	fma.rn.f32 	%r810, %r794, %r431, %r809;
	fma.rn.f32 	%r811, %r795, %r432, %r810;
	fma.rn.f32 	%r812, %r796, %r433, %r811;
	fma.rn.f32 	%r813, %r797, %r434, %r812;
	fma.rn.f32 	%r814, %r798, %r436, %r813;
	fma.rn.f32 	%r815, %r799, %r437, %r814;
	fma.rn.f32 	%r816, %r800, %r438, %r815;
	fma.rn.f32 	%r817, %r801, %r439, %r816;
	.loc	1 277 15                        // solve_tril.py:277:15
	sub.f32 	%r818, %r132, %r817;
	.loc	1 269 27                        // solve_tril.py:269:27
	add.s32 	%r819, %r610, %r619;
	ld.shared.v4.b32 	{%r820, %r821, %r822, %r823}, [%r819];
	ld.shared.v4.b32 	{%r824, %r825, %r826, %r827}, [%r819+16];
	ld.shared.v4.b32 	{%r828, %r829, %r830, %r831}, [%r819+32];
	ld.shared.v4.b32 	{%r832, %r833, %r834, %r835}, [%r819+48];
	.loc	1 281 23                        // solve_tril.py:281:23
	fma.rn.f32 	%r836, %r820, %r333, 0f00000000;
	fma.rn.f32 	%r837, %r821, %r334, %r836;
	fma.rn.f32 	%r838, %r822, %r335, %r837;
	fma.rn.f32 	%r839, %r823, %r336, %r838;
	fma.rn.f32 	%r840, %r824, %r338, %r839;
	fma.rn.f32 	%r841, %r825, %r339, %r840;
	fma.rn.f32 	%r842, %r826, %r340, %r841;
	fma.rn.f32 	%r843, %r827, %r341, %r842;
	fma.rn.f32 	%r844, %r828, %r343, %r843;
	fma.rn.f32 	%r845, %r829, %r344, %r844;
	fma.rn.f32 	%r846, %r830, %r345, %r845;
	fma.rn.f32 	%r847, %r831, %r346, %r846;
	fma.rn.f32 	%r848, %r832, %r348, %r847;
	fma.rn.f32 	%r849, %r833, %r349, %r848;
	fma.rn.f32 	%r850, %r834, %r350, %r849;
	fma.rn.f32 	%r851, %r835, %r351, %r850;
	.loc	1 270 27                        // solve_tril.py:270:27
	add.s32 	%r852, %r612, %r619;
	ld.shared.v4.b32 	{%r853, %r854, %r855, %r856}, [%r852];
	ld.shared.v4.b32 	{%r857, %r858, %r859, %r860}, [%r852+16];
	ld.shared.v4.b32 	{%r861, %r862, %r863, %r864}, [%r852+32];
	ld.shared.v4.b32 	{%r865, %r866, %r867, %r868}, [%r852+48];
	.loc	1 275 15                        // solve_tril.py:275:15
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r441, %r442, %r443, %r444}, [%r337];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r446, %r447, %r448, %r449}, [%r342];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r451, %r452, %r453, %r454}, [%r347];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r456, %r457, %r458, %r459}, [%r352];
	// end inline asm
	.loc	1 282 23                        // solve_tril.py:282:23
	fma.rn.f32 	%r869, %r853, %r441, %r851;
	fma.rn.f32 	%r870, %r854, %r442, %r869;
	fma.rn.f32 	%r871, %r855, %r443, %r870;
	fma.rn.f32 	%r872, %r856, %r444, %r871;
	fma.rn.f32 	%r873, %r857, %r446, %r872;
	fma.rn.f32 	%r874, %r858, %r447, %r873;
	fma.rn.f32 	%r875, %r859, %r448, %r874;
	fma.rn.f32 	%r876, %r860, %r449, %r875;
	fma.rn.f32 	%r877, %r861, %r451, %r876;
	fma.rn.f32 	%r878, %r862, %r452, %r877;
	fma.rn.f32 	%r879, %r863, %r453, %r878;
	fma.rn.f32 	%r880, %r864, %r454, %r879;
	fma.rn.f32 	%r881, %r865, %r456, %r880;
	fma.rn.f32 	%r882, %r866, %r457, %r881;
	fma.rn.f32 	%r883, %r867, %r458, %r882;
	fma.rn.f32 	%r462, %r868, %r459, %r883;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r225], {%r462};
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r463, %r464, %r465, %r466}, [%r337];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r468, %r469, %r470, %r471}, [%r342];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r473, %r474, %r475, %r476}, [%r347];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r478, %r479, %r480, %r481}, [%r352];
	// end inline asm
	.loc	1 281 8                         // solve_tril.py:281:8
	fma.rn.f32 	%r884, %r691, %r463, 0f00000000;
	fma.rn.f32 	%r885, %r692, %r464, %r884;
	fma.rn.f32 	%r886, %r693, %r465, %r885;
	fma.rn.f32 	%r887, %r694, %r466, %r886;
	fma.rn.f32 	%r888, %r695, %r468, %r887;
	fma.rn.f32 	%r889, %r696, %r469, %r888;
	fma.rn.f32 	%r890, %r697, %r470, %r889;
	fma.rn.f32 	%r891, %r698, %r471, %r890;
	fma.rn.f32 	%r892, %r699, %r473, %r891;
	fma.rn.f32 	%r893, %r700, %r474, %r892;
	fma.rn.f32 	%r894, %r701, %r475, %r893;
	fma.rn.f32 	%r895, %r702, %r476, %r894;
	fma.rn.f32 	%r896, %r703, %r478, %r895;
	fma.rn.f32 	%r897, %r704, %r479, %r896;
	fma.rn.f32 	%r898, %r705, %r480, %r897;
	fma.rn.f32 	%r899, %r706, %r481, %r898;
	.loc	1 279 15                        // solve_tril.py:279:15
	sub.f32 	%r484, %r132, %r899;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r225], {%r484};
	// end inline asm
	.loc	1 272 27                        // solve_tril.py:272:27
	add.s32 	%r900, %r616, %r619;
	ld.shared.v4.b32 	{%r901, %r902, %r903, %r904}, [%r900];
	ld.shared.v4.b32 	{%r905, %r906, %r907, %r908}, [%r900+16];
	ld.shared.v4.b32 	{%r909, %r910, %r911, %r912}, [%r900+32];
	ld.shared.v4.b32 	{%r913, %r914, %r915, %r916}, [%r900+48];
	.loc	1 287 23                        // solve_tril.py:287:23
	fma.rn.f32 	%r917, %r901, %r377, 0f00000000;
	fma.rn.f32 	%r918, %r902, %r378, %r917;
	fma.rn.f32 	%r919, %r903, %r379, %r918;
	fma.rn.f32 	%r920, %r904, %r380, %r919;
	fma.rn.f32 	%r921, %r905, %r382, %r920;
	fma.rn.f32 	%r922, %r906, %r383, %r921;
	fma.rn.f32 	%r923, %r907, %r384, %r922;
	fma.rn.f32 	%r924, %r908, %r385, %r923;
	fma.rn.f32 	%r925, %r909, %r387, %r924;
	fma.rn.f32 	%r926, %r910, %r388, %r925;
	fma.rn.f32 	%r927, %r911, %r389, %r926;
	fma.rn.f32 	%r928, %r912, %r390, %r927;
	fma.rn.f32 	%r929, %r913, %r392, %r928;
	fma.rn.f32 	%r930, %r914, %r393, %r929;
	fma.rn.f32 	%r931, %r915, %r394, %r930;
	fma.rn.f32 	%r932, %r916, %r395, %r931;
	.loc	1 273 27                        // solve_tril.py:273:27
	add.s32 	%r933, %r618, %r619;
	ld.shared.v4.b32 	{%r934, %r935, %r936, %r937}, [%r933];
	ld.shared.v4.b32 	{%r938, %r939, %r940, %r941}, [%r933+16];
	ld.shared.v4.b32 	{%r942, %r943, %r944, %r945}, [%r933+32];
	ld.shared.v4.b32 	{%r946, %r947, %r948, %r949}, [%r933+48];
	.loc	1 276 15                        // solve_tril.py:276:15
	add.s32 	%r489, %r233, %r640;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r485, %r486, %r487, %r488}, [%r489];
	// end inline asm
	add.s32 	%r494, %r489, 256;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r490, %r491, %r492, %r493}, [%r494];
	// end inline asm
	add.s32 	%r499, %r489, 512;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r495, %r496, %r497, %r498}, [%r499];
	// end inline asm
	add.s32 	%r504, %r489, 768;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r500, %r501, %r502, %r503}, [%r504];
	// end inline asm
	.loc	1 288 23                        // solve_tril.py:288:23
	fma.rn.f32 	%r950, %r934, %r485, %r932;
	fma.rn.f32 	%r951, %r935, %r486, %r950;
	fma.rn.f32 	%r952, %r936, %r487, %r951;
	fma.rn.f32 	%r953, %r937, %r488, %r952;
	fma.rn.f32 	%r954, %r938, %r490, %r953;
	fma.rn.f32 	%r955, %r939, %r491, %r954;
	fma.rn.f32 	%r956, %r940, %r492, %r955;
	fma.rn.f32 	%r957, %r941, %r493, %r956;
	fma.rn.f32 	%r958, %r942, %r495, %r957;
	fma.rn.f32 	%r959, %r943, %r496, %r958;
	fma.rn.f32 	%r960, %r944, %r497, %r959;
	fma.rn.f32 	%r961, %r945, %r498, %r960;
	fma.rn.f32 	%r962, %r946, %r500, %r961;
	fma.rn.f32 	%r963, %r947, %r501, %r962;
	fma.rn.f32 	%r964, %r948, %r502, %r963;
	fma.rn.f32 	%r506, %r949, %r503, %r964;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r244], {%r506};
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r507, %r508, %r509, %r510}, [%r315];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r512, %r513, %r514, %r515}, [%r320];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r517, %r518, %r519, %r520}, [%r325];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r522, %r523, %r524, %r525}, [%r330];
	// end inline asm
	.loc	1 287 8                         // solve_tril.py:287:8
	fma.rn.f32 	%r965, %r755, %r507, 0f00000000;
	fma.rn.f32 	%r966, %r756, %r508, %r965;
	fma.rn.f32 	%r967, %r757, %r509, %r966;
	fma.rn.f32 	%r968, %r758, %r510, %r967;
	fma.rn.f32 	%r969, %r759, %r512, %r968;
	fma.rn.f32 	%r970, %r760, %r513, %r969;
	fma.rn.f32 	%r971, %r761, %r514, %r970;
	fma.rn.f32 	%r972, %r762, %r515, %r971;
	fma.rn.f32 	%r973, %r763, %r517, %r972;
	fma.rn.f32 	%r974, %r764, %r518, %r973;
	fma.rn.f32 	%r975, %r765, %r519, %r974;
	fma.rn.f32 	%r976, %r766, %r520, %r975;
	fma.rn.f32 	%r977, %r767, %r522, %r976;
	fma.rn.f32 	%r978, %r768, %r523, %r977;
	fma.rn.f32 	%r979, %r769, %r524, %r978;
	fma.rn.f32 	%r980, %r770, %r525, %r979;
	.loc	1 285 15                        // solve_tril.py:285:15
	sub.f32 	%r981, %r132, %r980;
	.loc	1 271 27                        // solve_tril.py:271:27
	add.s32 	%r982, %r614, %r619;
	ld.shared.v4.b32 	{%r983, %r984, %r985, %r986}, [%r982];
	ld.shared.v4.b32 	{%r987, %r988, %r989, %r990}, [%r982+16];
	ld.shared.v4.b32 	{%r991, %r992, %r993, %r994}, [%r982+32];
	ld.shared.v4.b32 	{%r995, %r996, %r997, %r998}, [%r982+48];
	.loc	1 293 23                        // solve_tril.py:293:23
	fma.rn.f32 	%r999, %r983, %r333, 0f00000000;
	fma.rn.f32 	%r1000, %r984, %r334, %r999;
	fma.rn.f32 	%r1001, %r985, %r335, %r1000;
	fma.rn.f32 	%r1002, %r986, %r336, %r1001;
	fma.rn.f32 	%r1003, %r987, %r338, %r1002;
	fma.rn.f32 	%r1004, %r988, %r339, %r1003;
	fma.rn.f32 	%r1005, %r989, %r340, %r1004;
	fma.rn.f32 	%r1006, %r990, %r341, %r1005;
	fma.rn.f32 	%r1007, %r991, %r343, %r1006;
	fma.rn.f32 	%r1008, %r992, %r344, %r1007;
	fma.rn.f32 	%r1009, %r993, %r345, %r1008;
	fma.rn.f32 	%r1010, %r994, %r346, %r1009;
	fma.rn.f32 	%r1011, %r995, %r348, %r1010;
	fma.rn.f32 	%r1012, %r996, %r349, %r1011;
	fma.rn.f32 	%r1013, %r997, %r350, %r1012;
	fma.rn.f32 	%r1014, %r998, %r351, %r1013;
	.loc	1 294 23                        // solve_tril.py:294:23
	fma.rn.f32 	%r1015, %r901, %r441, %r1014;
	fma.rn.f32 	%r1016, %r902, %r442, %r1015;
	fma.rn.f32 	%r1017, %r903, %r443, %r1016;
	fma.rn.f32 	%r1018, %r904, %r444, %r1017;
	fma.rn.f32 	%r1019, %r905, %r446, %r1018;
	fma.rn.f32 	%r1020, %r906, %r447, %r1019;
	fma.rn.f32 	%r1021, %r907, %r448, %r1020;
	fma.rn.f32 	%r1022, %r908, %r449, %r1021;
	fma.rn.f32 	%r1023, %r909, %r451, %r1022;
	fma.rn.f32 	%r1024, %r910, %r452, %r1023;
	fma.rn.f32 	%r1025, %r911, %r453, %r1024;
	fma.rn.f32 	%r1026, %r912, %r454, %r1025;
	fma.rn.f32 	%r1027, %r913, %r456, %r1026;
	fma.rn.f32 	%r1028, %r914, %r457, %r1027;
	fma.rn.f32 	%r1029, %r915, %r458, %r1028;
	fma.rn.f32 	%r1030, %r916, %r459, %r1029;
	.loc	1 279 15                        // solve_tril.py:279:15
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r527, %r528, %r529, %r530}, [%r337];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r532, %r533, %r534, %r535}, [%r342];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r537, %r538, %r539, %r540}, [%r347];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r542, %r543, %r544, %r545}, [%r352];
	// end inline asm
	.loc	1 295 23                        // solve_tril.py:295:23
	fma.rn.f32 	%r1031, %r934, %r527, %r1030;
	fma.rn.f32 	%r1032, %r935, %r528, %r1031;
	fma.rn.f32 	%r1033, %r936, %r529, %r1032;
	fma.rn.f32 	%r1034, %r937, %r530, %r1033;
	fma.rn.f32 	%r1035, %r938, %r532, %r1034;
	fma.rn.f32 	%r1036, %r939, %r533, %r1035;
	fma.rn.f32 	%r1037, %r940, %r534, %r1036;
	fma.rn.f32 	%r1038, %r941, %r535, %r1037;
	fma.rn.f32 	%r1039, %r942, %r537, %r1038;
	fma.rn.f32 	%r1040, %r943, %r538, %r1039;
	fma.rn.f32 	%r1041, %r944, %r539, %r1040;
	fma.rn.f32 	%r1042, %r945, %r540, %r1041;
	fma.rn.f32 	%r1043, %r946, %r542, %r1042;
	fma.rn.f32 	%r1044, %r947, %r543, %r1043;
	fma.rn.f32 	%r1045, %r948, %r544, %r1044;
	fma.rn.f32 	%r548, %r949, %r545, %r1045;
	bar.sync 	0;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x1.shared.b16 [%r225], {%r548};
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r549, %r550, %r551, %r552}, [%r337];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r554, %r555, %r556, %r557}, [%r342];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r559, %r560, %r561, %r562}, [%r347];
	// end inline asm
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 {%r564, %r565, %r566, %r567}, [%r352];
	// end inline asm
	.loc	1 293 8                         // solve_tril.py:293:8
	fma.rn.f32 	%r1046, %r755, %r549, 0f00000000;
	fma.rn.f32 	%r1047, %r756, %r550, %r1046;
	fma.rn.f32 	%r1048, %r757, %r551, %r1047;
	fma.rn.f32 	%r1049, %r758, %r552, %r1048;
	fma.rn.f32 	%r1050, %r759, %r554, %r1049;
	fma.rn.f32 	%r1051, %r760, %r555, %r1050;
	fma.rn.f32 	%r1052, %r761, %r556, %r1051;
	fma.rn.f32 	%r1053, %r762, %r557, %r1052;
	fma.rn.f32 	%r1054, %r763, %r559, %r1053;
	fma.rn.f32 	%r1055, %r764, %r560, %r1054;
	fma.rn.f32 	%r1056, %r765, %r561, %r1055;
	fma.rn.f32 	%r1057, %r766, %r562, %r1056;
	fma.rn.f32 	%r1058, %r767, %r564, %r1057;
	fma.rn.f32 	%r1059, %r768, %r565, %r1058;
	fma.rn.f32 	%r1060, %r769, %r566, %r1059;
	fma.rn.f32 	%r1061, %r770, %r567, %r1060;
	.loc	1 291 15                        // solve_tril.py:291:15
	sub.f32 	%r1062, %r132, %r1061;
	.loc	1 321 51                        // solve_tril.py:321:51
	cvt.rn.bf16.f32 	%rs1, %r226;
	.loc	1 321 40                        // solve_tril.py:321:40
	bar.sync 	0;
	and.b32 	%r1063, %r2, 63;
	xor.b32 	%r1064, %r12, %r1063;
	shl.b32 	%r1065, %r1064, 1;
	add.s32 	%r1066, %r79, %r1065;
	shl.b32 	%r1067, %r5, 1;
	add.s32 	%r1068, %r1066, %r1067;
	st.shared.b16 	[%r1068], %rs1;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1069|%p120, -1;
	and.pred 	%p102, %p1, %p120;
	// begin inline asm
	@%p102 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r59, %r570}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 322 53                        // solve_tril.py:322:53
	cvt.rn.bf16.f32 	%rs2, %r228;
	.loc	1 322 42                        // solve_tril.py:322:42
	st.shared.b16 	[%r1068], %rs2;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1070|%p121, -1;
	and.pred 	%p103, %p1, %p121;
	// begin inline asm
	@%p103 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r52, %r582}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 323 53                        // solve_tril.py:323:53
	cvt.rn.bf16.f32 	%rs3, %r230;
	.loc	1 323 42                        // solve_tril.py:323:42
	st.shared.b16 	[%r1068], %rs3;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1071|%p122, -1;
	and.pred 	%p104, %p1, %p122;
	// begin inline asm
	@%p104 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r301, %r588}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 324 53                        // solve_tril.py:324:53
	cvt.rn.bf16.f32 	%rs4, %r232;
	.loc	1 324 42                        // solve_tril.py:324:42
	st.shared.b16 	[%r1068], %rs4;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1072|%p123, -1;
	and.pred 	%p105, %p1, %p123;
	// begin inline asm
	@%p105 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r102, %r597}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 325 52                        // solve_tril.py:325:52
	cvt.rn.bf16.f32 	%rs5, %r354;
	.loc	1 325 41                        // solve_tril.py:325:41
	st.shared.b16 	[%r1068], %rs5;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1073|%p124, -1;
	and.pred 	%p106, %p1, %p124;
	// begin inline asm
	@%p106 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r59, %r582}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 326 52                        // solve_tril.py:326:52
	cvt.rn.bf16.f32 	%rs6, %r484;
	.loc	1 326 41                        // solve_tril.py:326:41
	st.shared.b16 	[%r1068], %rs6;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1074|%p125, -1;
	and.pred 	%p107, %p1, %p125;
	// begin inline asm
	@%p107 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r59, %r588}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 327 53                        // solve_tril.py:327:53
	cvt.rn.bf16.f32 	%rs7, %r398;
	.loc	1 327 42                        // solve_tril.py:327:42
	st.shared.b16 	[%r1068], %rs7;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1075|%p126, -1;
	and.pred 	%p108, %p1, %p126;
	// begin inline asm
	@%p108 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r52, %r588}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 328 52                        // solve_tril.py:328:52
	cvt.rn.bf16.f32 	%rs8, %r1062;
	.loc	1 328 41                        // solve_tril.py:328:41
	st.shared.b16 	[%r1068], %rs8;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1076|%p127, -1;
	and.pred 	%p109, %p1, %p127;
	// begin inline asm
	@%p109 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r59, %r597}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 329 53                        // solve_tril.py:329:53
	cvt.rn.bf16.f32 	%rs9, %r981;
	.loc	1 329 42                        // solve_tril.py:329:42
	st.shared.b16 	[%r1068], %rs9;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1077|%p128, -1;
	and.pred 	%p110, %p1, %p128;
	// begin inline asm
	@%p110 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r52, %r597}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 330 53                        // solve_tril.py:330:53
	cvt.rn.bf16.f32 	%rs10, %r818;
	.loc	1 330 42                        // solve_tril.py:330:42
	st.shared.b16 	[%r1068], %rs10;
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	elect.sync 	%r1078|%p129, -1;
	and.pred 	%p111, %p1, %p129;
	// begin inline asm
	@%p111 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd114, {%r301, %r597}], [%r79];
	// end inline asm
	cp.async.bulk.commit_group;
	cp.async.bulk.wait_group.read 	0;
	bar.sync 	0;
	.loc	1 299 4                         // solve_tril.py:299:4
	ret;
$L__tmp9:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/utils/solve_tril.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 273                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x10a DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 115                                 // DW_AT_name
.b8 111
.b8 108
.b8 118
.b8 101
.b8 95
.b8 116
.b8 114
.b8 105
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 51
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 117
.b8 116
.b8 105
.b8 108
.b8 115
.b8 0
.b8 2                                   // Abbrev [2] 0x78:0x26 DW_TAG_subprogram
.b8 109                                 // DW_AT_name
.b8 101
.b8 114
.b8 103
.b8 101
.b8 95
.b8 49
.b8 54
.b8 120
.b8 49
.b8 54
.b8 95
.b8 116
.b8 111
.b8 95
.b8 54
.b8 52
.b8 120
.b8 54
.b8 52
.b8 95
.b8 105
.b8 110
.b8 118
.b8 101
.b8 114
.b8 115
.b8 101
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x9e:0x76 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 120                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xb3:0x18 DW_TAG_inlined_subroutine
.b32 120                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 235                                 // DW_AT_call_line
.b8 52                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xcb:0x18 DW_TAG_inlined_subroutine
.b32 120                                // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 239                                 // DW_AT_call_line
.b8 52                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xe3:0x18 DW_TAG_inlined_subroutine
.b32 120                                // DW_AT_abstract_origin
.b64 $L__tmp5                           // DW_AT_low_pc
.b64 $L__tmp6                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 243                                 // DW_AT_call_line
.b8 52                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xfb:0x18 DW_TAG_inlined_subroutine
.b32 120                                // DW_AT_abstract_origin
.b64 $L__tmp7                           // DW_AT_low_pc
.b64 $L__tmp8                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 247                                 // DW_AT_call_line
.b8 52                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
