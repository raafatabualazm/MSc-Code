; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @fused_recurrent_gated_delta_rule_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, float %8, i32 %9, ptr addrspace(1) readnone captures(none) %10) local_unnamed_addr #0 !dbg !5 {
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !9
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %15 = lshr i32 %14, 1, !dbg !10
  %16 = and i32 %15, 15, !dbg !10
  %17 = or disjoint i32 %16, 16, !dbg !10
  %18 = or disjoint i32 %16, 32, !dbg !10
  %19 = or disjoint i32 %16, 48, !dbg !10
  %20 = or disjoint i32 %16, 64, !dbg !10
  %21 = or disjoint i32 %16, 80, !dbg !10
  %22 = or disjoint i32 %16, 96, !dbg !10
  %23 = or disjoint i32 %16, 112, !dbg !10
  %24 = shl nuw nsw i32 %14, 2, !dbg !10
  %25 = and i32 %24, 4, !dbg !10
  %26 = shl i32 %12, 3, !dbg !11
  %27 = or disjoint i32 %25, %26, !dbg !12
  %28 = sext i32 %27 to i64, !dbg !13
  %29 = icmp slt i32 %27, 128, !dbg !14
  %30 = shl nuw nsw i32 %13, 14, !dbg !15
  %31 = zext nneg i32 %30 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !16
  %33 = shl nuw nsw i32 %16, 7, !dbg !17
  %34 = shl nuw nsw i32 %17, 7, !dbg !17
  %35 = shl nuw nsw i32 %18, 7, !dbg !17
  %36 = shl nuw nsw i32 %19, 7, !dbg !17
  %37 = shl nuw nsw i32 %20, 7, !dbg !17
  %38 = shl nuw nsw i32 %21, 7, !dbg !17
  %39 = shl nuw nsw i32 %22, 7, !dbg !17
  %40 = shl nuw nsw i32 %23, 7, !dbg !17
  %41 = zext nneg i32 %33 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %32, i64 %41, !dbg !18
  %43 = zext nneg i32 %34 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %32, i64 %43, !dbg !18
  %45 = zext nneg i32 %35 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %32, i64 %45, !dbg !18
  %47 = zext nneg i32 %36 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %32, i64 %47, !dbg !18
  %49 = zext nneg i32 %37 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %32, i64 %49, !dbg !18
  %51 = zext nneg i32 %38 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %32, i64 %51, !dbg !18
  %53 = zext nneg i32 %39 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %32, i64 %53, !dbg !18
  %55 = zext nneg i32 %40 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %32, i64 %55, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %42, i64 %28, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %44, i64 %28, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %46, i64 %28, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %48, i64 %28, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %50, i64 %28, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %52, i64 %28, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %54, i64 %28, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %56, i64 %28, !dbg !19
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %29) #6, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !20
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %29) #6, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !20
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %29) #6, !dbg !20
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !20
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %29) #6, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !20
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !20
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !20
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !20
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %29) #6, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !20
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !20
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %29) #6, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !20
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %29) #6, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !20
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !20
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !20
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !20
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %29) #6, !dbg !20
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !20
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !20
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !20
  %105 = insertelement <32 x i32> poison, i32 %66, i64 0, !dbg !20
  %106 = insertelement <32 x i32> %105, i32 %67, i64 1, !dbg !20
  %107 = insertelement <32 x i32> %106, i32 %68, i64 2, !dbg !20
  %108 = insertelement <32 x i32> %107, i32 %69, i64 3, !dbg !20
  %109 = insertelement <32 x i32> %108, i32 %71, i64 4, !dbg !20
  %110 = insertelement <32 x i32> %109, i32 %72, i64 5, !dbg !20
  %111 = insertelement <32 x i32> %110, i32 %73, i64 6, !dbg !20
  %112 = insertelement <32 x i32> %111, i32 %74, i64 7, !dbg !20
  %113 = insertelement <32 x i32> %112, i32 %76, i64 8, !dbg !20
  %114 = insertelement <32 x i32> %113, i32 %77, i64 9, !dbg !20
  %115 = insertelement <32 x i32> %114, i32 %78, i64 10, !dbg !20
  %116 = insertelement <32 x i32> %115, i32 %79, i64 11, !dbg !20
  %117 = insertelement <32 x i32> %116, i32 %81, i64 12, !dbg !20
  %118 = insertelement <32 x i32> %117, i32 %82, i64 13, !dbg !20
  %119 = insertelement <32 x i32> %118, i32 %83, i64 14, !dbg !20
  %120 = insertelement <32 x i32> %119, i32 %84, i64 15, !dbg !20
  %121 = insertelement <32 x i32> %120, i32 %86, i64 16, !dbg !20
  %122 = insertelement <32 x i32> %121, i32 %87, i64 17, !dbg !20
  %123 = insertelement <32 x i32> %122, i32 %88, i64 18, !dbg !20
  %124 = insertelement <32 x i32> %123, i32 %89, i64 19, !dbg !20
  %125 = insertelement <32 x i32> %124, i32 %91, i64 20, !dbg !20
  %126 = insertelement <32 x i32> %125, i32 %92, i64 21, !dbg !20
  %127 = insertelement <32 x i32> %126, i32 %93, i64 22, !dbg !20
  %128 = insertelement <32 x i32> %127, i32 %94, i64 23, !dbg !20
  %129 = insertelement <32 x i32> %128, i32 %96, i64 24, !dbg !20
  %130 = insertelement <32 x i32> %129, i32 %97, i64 25, !dbg !20
  %131 = insertelement <32 x i32> %130, i32 %98, i64 26, !dbg !20
  %132 = insertelement <32 x i32> %131, i32 %99, i64 27, !dbg !20
  %133 = insertelement <32 x i32> %132, i32 %101, i64 28, !dbg !20
  %134 = insertelement <32 x i32> %133, i32 %102, i64 29, !dbg !20
  %135 = insertelement <32 x i32> %134, i32 %103, i64 30, !dbg !20
  %136 = insertelement <32 x i32> %135, i32 %104, i64 31, !dbg !20
  %137 = bitcast <32 x i32> %136 to <32 x float>, !dbg !20
  %138 = fadd <32 x float> %137, zeroinitializer, !dbg !21
  %139 = icmp sgt i32 %9, 0, !dbg !22
  br i1 %139, label %.lr.ph, label %._crit_edge, !dbg !22

.lr.ph:                                           ; preds = %11
  %140 = and i32 %14, 7, !dbg !23
  %141 = or disjoint i32 %26, %140, !dbg !12
  %142 = icmp slt i32 %141, 128, !dbg !14
  %143 = and i32 %13, 65504, !dbg !24
  %144 = mul i32 %143, %9, !dbg !25
  %145 = and i32 %13, 31, !dbg !26
  %146 = or disjoint i32 %144, %145, !dbg !27
  %147 = shl i32 %146, 7, !dbg !28
  %148 = sext i32 %147 to i64, !dbg !29
  %149 = getelementptr bfloat, ptr addrspace(1) %5, i64 %148, !dbg !30
  %150 = sext i32 %141 to i64, !dbg !31
  %151 = getelementptr bfloat, ptr addrspace(1) %149, i64 %150, !dbg !31
  %152 = sext i32 %144 to i64, !dbg !32
  %153 = getelementptr bfloat, ptr addrspace(1) %4, i64 %152, !dbg !33
  %154 = zext nneg i32 %145 to i64, !dbg !34
  %155 = getelementptr bfloat, ptr addrspace(1) %153, i64 %154, !dbg !35
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !32
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %154, !dbg !34
  %158 = getelementptr bfloat, ptr addrspace(1) %2, i64 %148, !dbg !36
  %159 = getelementptr bfloat, ptr addrspace(1) %158, i64 %28, !dbg !13
  %160 = getelementptr bfloat, ptr addrspace(1) %1, i64 %148, !dbg !37
  %161 = and i32 %24, 124, !dbg !10
  %162 = zext nneg i32 %161 to i64, !dbg !38
  %163 = getelementptr bfloat, ptr addrspace(1) %160, i64 %162, !dbg !39
  %164 = getelementptr bfloat, ptr addrspace(1) %0, i64 %148, !dbg !29
  %165 = getelementptr bfloat, ptr addrspace(1) %164, i64 %162, !dbg !38
  %166 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %161
  %167 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %16
  %168 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %17
  %169 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %18
  %170 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %19
  %171 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %20
  %172 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %21
  %173 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %22
  %174 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %23
  %175 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %25
  %176 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %140
  %177 = and i32 %14, 24
  %178 = icmp eq i32 %177, 0
  %179 = and i1 %178, %142
  br label %180, !dbg !22

180:                                              ; preds = %.lr.ph, %__nv_sqrtf.exit95
  %.pn90131 = phi ptr addrspace(1) [ %159, %.lr.ph ], [ %702, %__nv_sqrtf.exit95 ]
  %.pn82130 = phi ptr addrspace(1) [ %163, %.lr.ph ], [ %701, %__nv_sqrtf.exit95 ]
  %.pn74129 = phi ptr addrspace(1) [ %165, %.lr.ph ], [ %700, %__nv_sqrtf.exit95 ]
  %.pn66128 = phi ptr addrspace(1) [ %151, %.lr.ph ], [ %705, %__nv_sqrtf.exit95 ]
  %181 = phi ptr addrspace(1) [ %155, %.lr.ph ], [ %704, %__nv_sqrtf.exit95 ]
  %182 = phi ptr addrspace(1) [ %157, %.lr.ph ], [ %703, %__nv_sqrtf.exit95 ]
  %183 = phi i32 [ 0, %.lr.ph ], [ %706, %__nv_sqrtf.exit95 ]
  %184 = phi <32 x float> [ %138, %.lr.ph ], [ %539, %__nv_sqrtf.exit95 ]
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %.pn74129, i1 true) #6, !dbg !40
  %186 = extractvalue { i32, i32 } %185, 0, !dbg !40
  %187 = bitcast i32 %186 to <2 x bfloat>, !dbg !40
  %188 = extractvalue { i32, i32 } %185, 1, !dbg !40
  %189 = bitcast i32 %188 to <2 x bfloat>, !dbg !40
  %190 = extractelement <2 x bfloat> %187, i64 0, !dbg !40
  %191 = extractelement <2 x bfloat> %187, i64 1, !dbg !40
  %192 = extractelement <2 x bfloat> %189, i64 0, !dbg !40
  %193 = extractelement <2 x bfloat> %189, i64 1, !dbg !40
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %194 = shufflevector <2 x bfloat> %187, <2 x bfloat> %189, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !41
  store <4 x bfloat> %194, ptr addrspace(3) %166, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !41
  %195 = load bfloat, ptr addrspace(3) %167, align 2, !dbg !41
  %196 = load bfloat, ptr addrspace(3) %168, align 2, !dbg !41
  %197 = load bfloat, ptr addrspace(3) %169, align 2, !dbg !41
  %198 = load bfloat, ptr addrspace(3) %170, align 2, !dbg !41
  %199 = load bfloat, ptr addrspace(3) %171, align 2, !dbg !41
  %200 = load bfloat, ptr addrspace(3) %172, align 2, !dbg !41
  %201 = load bfloat, ptr addrspace(3) %173, align 2, !dbg !41
  %202 = load bfloat, ptr addrspace(3) %174, align 2, !dbg !41
  %203 = fpext bfloat %195 to float, !dbg !42
  %204 = fpext bfloat %196 to float, !dbg !42
  %205 = fpext bfloat %197 to float, !dbg !42
  %206 = fpext bfloat %198 to float, !dbg !42
  %207 = fpext bfloat %199 to float, !dbg !42
  %208 = fpext bfloat %200 to float, !dbg !42
  %209 = fpext bfloat %201 to float, !dbg !42
  %210 = fpext bfloat %202 to float, !dbg !42
  %211 = fpext bfloat %190 to float, !dbg !42
  %212 = fpext bfloat %191 to float, !dbg !42
  %213 = fpext bfloat %192 to float, !dbg !42
  %214 = fpext bfloat %193 to float, !dbg !42
  %215 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %.pn82130, i1 true) #6, !dbg !43
  %216 = extractvalue { i32, i32 } %215, 0, !dbg !43
  %217 = bitcast i32 %216 to <2 x bfloat>, !dbg !43
  %218 = extractvalue { i32, i32 } %215, 1, !dbg !43
  %219 = bitcast i32 %218 to <2 x bfloat>, !dbg !43
  %220 = extractelement <2 x bfloat> %217, i64 0, !dbg !43
  %221 = extractelement <2 x bfloat> %217, i64 1, !dbg !43
  %222 = extractelement <2 x bfloat> %219, i64 0, !dbg !43
  %223 = extractelement <2 x bfloat> %219, i64 1, !dbg !43
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %224 = shufflevector <2 x bfloat> %217, <2 x bfloat> %219, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !44
  store <4 x bfloat> %224, ptr addrspace(3) %166, align 8, !dbg !44
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !44
  %225 = load bfloat, ptr addrspace(3) %167, align 2, !dbg !44
  %226 = load bfloat, ptr addrspace(3) %168, align 2, !dbg !44
  %227 = load bfloat, ptr addrspace(3) %169, align 2, !dbg !44
  %228 = load bfloat, ptr addrspace(3) %170, align 2, !dbg !44
  %229 = load bfloat, ptr addrspace(3) %171, align 2, !dbg !44
  %230 = load bfloat, ptr addrspace(3) %172, align 2, !dbg !44
  %231 = load bfloat, ptr addrspace(3) %173, align 2, !dbg !44
  %232 = load bfloat, ptr addrspace(3) %174, align 2, !dbg !44
  %233 = fpext bfloat %225 to float, !dbg !45
  %234 = fpext bfloat %226 to float, !dbg !45
  %235 = fpext bfloat %227 to float, !dbg !45
  %236 = fpext bfloat %228 to float, !dbg !45
  %237 = fpext bfloat %229 to float, !dbg !45
  %238 = fpext bfloat %230 to float, !dbg !45
  %239 = fpext bfloat %231 to float, !dbg !45
  %240 = fpext bfloat %232 to float, !dbg !45
  %241 = fpext bfloat %220 to float, !dbg !45
  %242 = fpext bfloat %221 to float, !dbg !45
  %243 = fpext bfloat %222 to float, !dbg !45
  %244 = fpext bfloat %223 to float, !dbg !45
  %245 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %.pn90131, i1 %29) #6, !dbg !46
  %246 = extractvalue { i32, i32 } %245, 0, !dbg !46
  %247 = bitcast i32 %246 to <2 x bfloat>, !dbg !46
  %248 = extractvalue { i32, i32 } %245, 1, !dbg !46
  %249 = bitcast i32 %248 to <2 x bfloat>, !dbg !46
  %250 = shufflevector <2 x bfloat> %247, <2 x bfloat> %249, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !47
  %251 = fpext <4 x bfloat> %250 to <4 x float>, !dbg !47
  %252 = fmul float %211, %211, !dbg !48
  %253 = fmul float %212, %212, !dbg !48
  %254 = fmul float %213, %213, !dbg !48
  %255 = fmul float %214, %214, !dbg !48
  %256 = fadd float %252, %253, !dbg !49
  %257 = fadd float %254, %256, !dbg !49
  %258 = fadd float %255, %257, !dbg !49
  %259 = bitcast float %258 to i32, !dbg !53
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 16, i32 31), !dbg !53
  %261 = bitcast i32 %260 to float, !dbg !53
  %262 = fadd float %258, %261, !dbg !49
  %263 = bitcast float %262 to i32, !dbg !53
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !53
  %265 = bitcast i32 %264 to float, !dbg !53
  %266 = fadd float %262, %265, !dbg !49
  %267 = bitcast float %266 to i32, !dbg !53
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !53
  %269 = bitcast i32 %268 to float, !dbg !53
  %270 = fadd float %266, %269, !dbg !49
  %271 = bitcast float %270 to i32, !dbg !53
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !53
  %273 = bitcast i32 %272 to float, !dbg !53
  %274 = fadd float %270, %273, !dbg !49
  %275 = bitcast float %274 to i32, !dbg !53
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !53
  %277 = bitcast i32 %276 to float, !dbg !53
  %278 = fadd float %274, %277, !dbg !49
  %279 = fadd float %278, 0x3EB0C6F7A0000000, !dbg !54
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !55
  %.not.i = icmp eq i32 %280, 0, !dbg !55
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !55
  %.not1.i = icmp eq i32 %281, 0, !dbg !55
  br i1 %.not.i, label %287, label %282, !dbg !55

282:                                              ; preds = %180
  br i1 %.not1.i, label %285, label %283, !dbg !55

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #6, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #6, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

287:                                              ; preds = %180
  br i1 %.not1.i, label %290, label %288, !dbg !55

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #6, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #6, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %283, %285, %288, %290
  %.0.i = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !55
  %292 = tail call float @llvm.nvvm.div.full(float %203, float %.0.i), !dbg !56
  %293 = tail call float @llvm.nvvm.div.full(float %204, float %.0.i), !dbg !56
  %294 = tail call float @llvm.nvvm.div.full(float %205, float %.0.i), !dbg !56
  %295 = tail call float @llvm.nvvm.div.full(float %206, float %.0.i), !dbg !56
  %296 = tail call float @llvm.nvvm.div.full(float %207, float %.0.i), !dbg !56
  %297 = tail call float @llvm.nvvm.div.full(float %208, float %.0.i), !dbg !56
  %298 = tail call float @llvm.nvvm.div.full(float %209, float %.0.i), !dbg !56
  %299 = tail call float @llvm.nvvm.div.full(float %210, float %.0.i), !dbg !56
  %300 = fmul float %241, %241, !dbg !57
  %301 = fmul float %242, %242, !dbg !57
  %302 = fmul float %243, %243, !dbg !57
  %303 = fmul float %244, %244, !dbg !57
  %304 = fadd float %300, %301, !dbg !58
  %305 = fadd float %302, %304, !dbg !58
  %306 = fadd float %303, %305, !dbg !58
  %307 = bitcast float %306 to i32, !dbg !60
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 16, i32 31), !dbg !60
  %309 = bitcast i32 %308 to float, !dbg !60
  %310 = fadd float %306, %309, !dbg !58
  %311 = bitcast float %310 to i32, !dbg !60
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 8, i32 31), !dbg !60
  %313 = bitcast i32 %312 to float, !dbg !60
  %314 = fadd float %310, %313, !dbg !58
  %315 = bitcast float %314 to i32, !dbg !60
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !60
  %317 = bitcast i32 %316 to float, !dbg !60
  %318 = fadd float %314, %317, !dbg !58
  %319 = bitcast float %318 to i32, !dbg !60
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !60
  %321 = bitcast i32 %320 to float, !dbg !60
  %322 = fadd float %318, %321, !dbg !58
  %323 = bitcast float %322 to i32, !dbg !60
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !60
  %325 = bitcast i32 %324 to float, !dbg !60
  %326 = fadd float %322, %325, !dbg !58
  %327 = fadd float %326, 0x3EB0C6F7A0000000, !dbg !61
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %.not.i91 = icmp eq i32 %328, 0, !dbg !62
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !62
  %.not1.i94 = icmp eq i32 %329, 0, !dbg !62
  br i1 %.not.i91, label %335, label %330, !dbg !62

330:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i94, label %333, label %331, !dbg !62

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %327) #6, !dbg !62
  br label %__nv_sqrtf.exit95, !dbg !62

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %327) #6, !dbg !62
  br label %__nv_sqrtf.exit95, !dbg !62

335:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i94, label %338, label %336, !dbg !62

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %327) #6, !dbg !62
  br label %__nv_sqrtf.exit95, !dbg !62

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %327) #6, !dbg !62
  br label %__nv_sqrtf.exit95, !dbg !62

__nv_sqrtf.exit95:                                ; preds = %331, %333, %336, %338
  %.0.i93 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !62
  %340 = tail call float @llvm.nvvm.div.full(float %233, float %.0.i93), !dbg !44
  %341 = tail call float @llvm.nvvm.div.full(float %234, float %.0.i93), !dbg !44
  %342 = tail call float @llvm.nvvm.div.full(float %235, float %.0.i93), !dbg !44
  %343 = tail call float @llvm.nvvm.div.full(float %236, float %.0.i93), !dbg !44
  %344 = tail call float @llvm.nvvm.div.full(float %237, float %.0.i93), !dbg !44
  %345 = tail call float @llvm.nvvm.div.full(float %238, float %.0.i93), !dbg !44
  %346 = tail call float @llvm.nvvm.div.full(float %239, float %.0.i93), !dbg !44
  %347 = tail call float @llvm.nvvm.div.full(float %240, float %.0.i93), !dbg !44
  %348 = fmul float %8, %292, !dbg !41
  %349 = fmul float %8, %293, !dbg !41
  %350 = fmul float %8, %294, !dbg !41
  %351 = fmul float %8, %295, !dbg !41
  %352 = fmul float %8, %296, !dbg !41
  %353 = fmul float %8, %297, !dbg !41
  %354 = fmul float %8, %298, !dbg !41
  %355 = fmul float %8, %299, !dbg !41
  %356 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l"(ptr addrspace(1) %181) #6, !dbg !63
  %357 = bitcast i16 %356 to bfloat, !dbg !63
  %358 = fpext bfloat %357 to float, !dbg !64
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l"(ptr addrspace(1) %182) #6, !dbg !65
  %360 = bitcast i32 %359 to float, !dbg !65
  %361 = fmul float %360, 0x3FF7154760000000, !dbg !66
  %362 = tail call float @llvm.nvvm.ex2.approx.f(float %361), !dbg !66
  %363 = insertelement <32 x float> poison, float %362, i64 0, !dbg !67
  %364 = shufflevector <32 x float> %363, <32 x float> poison, <32 x i32> zeroinitializer, !dbg !67
  %365 = fmul <32 x float> %184, %364, !dbg !67
  %366 = extractelement <32 x float> %365, i64 0, !dbg !68
  %367 = fmul float %340, %366, !dbg !68
  %368 = extractelement <32 x float> %365, i64 1, !dbg !68
  %369 = fmul float %340, %368, !dbg !68
  %370 = extractelement <32 x float> %365, i64 2, !dbg !68
  %371 = fmul float %340, %370, !dbg !68
  %372 = extractelement <32 x float> %365, i64 3, !dbg !68
  %373 = fmul float %340, %372, !dbg !68
  %374 = extractelement <32 x float> %365, i64 4, !dbg !68
  %375 = fmul float %341, %374, !dbg !68
  %376 = extractelement <32 x float> %365, i64 5, !dbg !68
  %377 = fmul float %341, %376, !dbg !68
  %378 = extractelement <32 x float> %365, i64 6, !dbg !68
  %379 = fmul float %341, %378, !dbg !68
  %380 = extractelement <32 x float> %365, i64 7, !dbg !68
  %381 = fmul float %341, %380, !dbg !68
  %382 = extractelement <32 x float> %365, i64 8, !dbg !68
  %383 = fmul float %342, %382, !dbg !68
  %384 = extractelement <32 x float> %365, i64 9, !dbg !68
  %385 = fmul float %342, %384, !dbg !68
  %386 = extractelement <32 x float> %365, i64 10, !dbg !68
  %387 = fmul float %342, %386, !dbg !68
  %388 = extractelement <32 x float> %365, i64 11, !dbg !68
  %389 = fmul float %342, %388, !dbg !68
  %390 = extractelement <32 x float> %365, i64 12, !dbg !68
  %391 = fmul float %343, %390, !dbg !68
  %392 = extractelement <32 x float> %365, i64 13, !dbg !68
  %393 = fmul float %343, %392, !dbg !68
  %394 = extractelement <32 x float> %365, i64 14, !dbg !68
  %395 = fmul float %343, %394, !dbg !68
  %396 = extractelement <32 x float> %365, i64 15, !dbg !68
  %397 = fmul float %343, %396, !dbg !68
  %398 = extractelement <32 x float> %365, i64 16, !dbg !68
  %399 = fmul float %344, %398, !dbg !68
  %400 = extractelement <32 x float> %365, i64 17, !dbg !68
  %401 = fmul float %344, %400, !dbg !68
  %402 = extractelement <32 x float> %365, i64 18, !dbg !68
  %403 = fmul float %344, %402, !dbg !68
  %404 = extractelement <32 x float> %365, i64 19, !dbg !68
  %405 = fmul float %344, %404, !dbg !68
  %406 = extractelement <32 x float> %365, i64 20, !dbg !68
  %407 = fmul float %345, %406, !dbg !68
  %408 = extractelement <32 x float> %365, i64 21, !dbg !68
  %409 = fmul float %345, %408, !dbg !68
  %410 = extractelement <32 x float> %365, i64 22, !dbg !68
  %411 = fmul float %345, %410, !dbg !68
  %412 = extractelement <32 x float> %365, i64 23, !dbg !68
  %413 = fmul float %345, %412, !dbg !68
  %414 = extractelement <32 x float> %365, i64 24, !dbg !68
  %415 = fmul float %346, %414, !dbg !68
  %416 = extractelement <32 x float> %365, i64 25, !dbg !68
  %417 = fmul float %346, %416, !dbg !68
  %418 = extractelement <32 x float> %365, i64 26, !dbg !68
  %419 = fmul float %346, %418, !dbg !68
  %420 = extractelement <32 x float> %365, i64 27, !dbg !68
  %421 = fmul float %346, %420, !dbg !68
  %422 = extractelement <32 x float> %365, i64 28, !dbg !68
  %423 = fmul float %347, %422, !dbg !68
  %424 = extractelement <32 x float> %365, i64 29, !dbg !68
  %425 = fmul float %347, %424, !dbg !68
  %426 = extractelement <32 x float> %365, i64 30, !dbg !68
  %427 = fmul float %347, %426, !dbg !68
  %428 = extractelement <32 x float> %365, i64 31, !dbg !68
  %429 = fmul float %347, %428, !dbg !68
  %430 = fadd float %367, %375, !dbg !69
  %431 = fadd float %369, %377, !dbg !69
  %432 = fadd float %371, %379, !dbg !69
  %433 = fadd float %373, %381, !dbg !69
  %434 = fadd float %383, %430, !dbg !69
  %435 = fadd float %385, %431, !dbg !69
  %436 = fadd float %387, %432, !dbg !69
  %437 = fadd float %389, %433, !dbg !69
  %438 = fadd float %391, %434, !dbg !69
  %439 = fadd float %393, %435, !dbg !69
  %440 = fadd float %395, %436, !dbg !69
  %441 = fadd float %397, %437, !dbg !69
  %442 = fadd float %399, %438, !dbg !69
  %443 = fadd float %401, %439, !dbg !69
  %444 = fadd float %403, %440, !dbg !69
  %445 = fadd float %405, %441, !dbg !69
  %446 = fadd float %407, %442, !dbg !69
  %447 = fadd float %409, %443, !dbg !69
  %448 = fadd float %411, %444, !dbg !69
  %449 = fadd float %413, %445, !dbg !69
  %450 = fadd float %415, %446, !dbg !69
  %451 = fadd float %417, %447, !dbg !69
  %452 = fadd float %419, %448, !dbg !69
  %453 = fadd float %421, %449, !dbg !69
  %454 = fadd float %423, %450, !dbg !69
  %455 = fadd float %425, %451, !dbg !69
  %456 = fadd float %427, %452, !dbg !69
  %457 = fadd float %429, %453, !dbg !69
  %458 = bitcast float %454 to i32, !dbg !71
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 16, i32 31), !dbg !71
  %460 = bitcast i32 %459 to float, !dbg !71
  %461 = fadd float %454, %460, !dbg !69
  %462 = bitcast float %461 to i32, !dbg !71
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 8, i32 31), !dbg !71
  %464 = bitcast i32 %463 to float, !dbg !71
  %465 = fadd float %461, %464, !dbg !69
  %466 = bitcast float %465 to i32, !dbg !71
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 4, i32 31), !dbg !71
  %468 = bitcast i32 %467 to float, !dbg !71
  %469 = fadd float %465, %468, !dbg !69
  %470 = bitcast float %469 to i32, !dbg !71
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 2, i32 31), !dbg !71
  %472 = bitcast float %455 to i32, !dbg !71
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 16, i32 31), !dbg !71
  %474 = bitcast i32 %473 to float, !dbg !71
  %475 = fadd float %455, %474, !dbg !69
  %476 = bitcast float %475 to i32, !dbg !71
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 8, i32 31), !dbg !71
  %478 = bitcast i32 %477 to float, !dbg !71
  %479 = fadd float %475, %478, !dbg !69
  %480 = bitcast float %479 to i32, !dbg !71
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 4, i32 31), !dbg !71
  %482 = bitcast i32 %481 to float, !dbg !71
  %483 = fadd float %479, %482, !dbg !69
  %484 = bitcast float %483 to i32, !dbg !71
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 2, i32 31), !dbg !71
  %486 = bitcast float %456 to i32, !dbg !71
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 16, i32 31), !dbg !71
  %488 = bitcast i32 %487 to float, !dbg !71
  %489 = fadd float %456, %488, !dbg !69
  %490 = bitcast float %489 to i32, !dbg !71
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 8, i32 31), !dbg !71
  %492 = bitcast i32 %491 to float, !dbg !71
  %493 = fadd float %489, %492, !dbg !69
  %494 = bitcast float %493 to i32, !dbg !71
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 4, i32 31), !dbg !71
  %496 = bitcast i32 %495 to float, !dbg !71
  %497 = fadd float %493, %496, !dbg !69
  %498 = bitcast float %497 to i32, !dbg !71
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 2, i32 31), !dbg !71
  %500 = bitcast float %457 to i32, !dbg !71
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 16, i32 31), !dbg !71
  %502 = bitcast i32 %501 to float, !dbg !71
  %503 = fadd float %457, %502, !dbg !69
  %504 = bitcast float %503 to i32, !dbg !71
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 8, i32 31), !dbg !71
  %506 = bitcast i32 %505 to float, !dbg !71
  %507 = fadd float %503, %506, !dbg !69
  %508 = bitcast float %507 to i32, !dbg !71
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 4, i32 31), !dbg !71
  %510 = bitcast i32 %509 to float, !dbg !71
  %511 = fadd float %507, %510, !dbg !69
  %512 = bitcast float %511 to i32, !dbg !71
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 2, i32 31), !dbg !71
  %514 = insertelement <4 x i32> poison, i32 %471, i64 0, !dbg !71
  %515 = insertelement <4 x i32> %514, i32 %485, i64 1, !dbg !71
  %516 = insertelement <4 x i32> %515, i32 %499, i64 2, !dbg !71
  %517 = insertelement <4 x i32> %516, i32 %513, i64 3, !dbg !71
  %518 = bitcast <4 x i32> %517 to <4 x float>, !dbg !71
  %519 = insertelement <4 x float> poison, float %469, i64 0, !dbg !69
  %520 = insertelement <4 x float> %519, float %483, i64 1, !dbg !69
  %521 = insertelement <4 x float> %520, float %497, i64 2, !dbg !69
  %522 = insertelement <4 x float> %521, float %511, i64 3, !dbg !69
  %523 = fadd <4 x float> %522, %518, !dbg !69
  %524 = fsub <4 x float> %251, %523, !dbg !72
  %525 = insertelement <4 x float> poison, float %358, i64 0, !dbg !73
  %526 = shufflevector <4 x float> %524, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !73
  %527 = shufflevector <4 x float> %525, <4 x float> poison, <32 x i32> zeroinitializer, !dbg !73
  %528 = fmul <32 x float> %526, %527, !dbg !73
  %529 = insertelement <32 x float> poison, float %340, i64 0, !dbg !74
  %530 = insertelement <32 x float> %529, float %341, i64 1, !dbg !74
  %531 = insertelement <32 x float> %530, float %342, i64 2, !dbg !74
  %532 = insertelement <32 x float> %531, float %343, i64 3, !dbg !74
  %533 = insertelement <32 x float> %532, float %344, i64 4, !dbg !74
  %534 = insertelement <32 x float> %533, float %345, i64 5, !dbg !74
  %535 = insertelement <32 x float> %534, float %346, i64 6, !dbg !74
  %536 = insertelement <32 x float> %535, float %347, i64 7, !dbg !74
  %537 = shufflevector <32 x float> %536, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 7>, !dbg !74
  %538 = fmul <32 x float> %537, %528, !dbg !74
  %539 = fadd <32 x float> %365, %538, !dbg !75
  %540 = extractelement <32 x float> %539, i64 0, !dbg !76
  %541 = fmul float %348, %540, !dbg !76
  %542 = extractelement <32 x float> %539, i64 1, !dbg !76
  %543 = fmul float %348, %542, !dbg !76
  %544 = extractelement <32 x float> %539, i64 2, !dbg !76
  %545 = fmul float %348, %544, !dbg !76
  %546 = extractelement <32 x float> %539, i64 3, !dbg !76
  %547 = fmul float %348, %546, !dbg !76
  %548 = extractelement <32 x float> %539, i64 4, !dbg !76
  %549 = fmul float %349, %548, !dbg !76
  %550 = extractelement <32 x float> %539, i64 5, !dbg !76
  %551 = fmul float %349, %550, !dbg !76
  %552 = extractelement <32 x float> %539, i64 6, !dbg !76
  %553 = fmul float %349, %552, !dbg !76
  %554 = extractelement <32 x float> %539, i64 7, !dbg !76
  %555 = fmul float %349, %554, !dbg !76
  %556 = extractelement <32 x float> %539, i64 8, !dbg !76
  %557 = fmul float %350, %556, !dbg !76
  %558 = extractelement <32 x float> %539, i64 9, !dbg !76
  %559 = fmul float %350, %558, !dbg !76
  %560 = extractelement <32 x float> %539, i64 10, !dbg !76
  %561 = fmul float %350, %560, !dbg !76
  %562 = extractelement <32 x float> %539, i64 11, !dbg !76
  %563 = fmul float %350, %562, !dbg !76
  %564 = extractelement <32 x float> %539, i64 12, !dbg !76
  %565 = fmul float %351, %564, !dbg !76
  %566 = extractelement <32 x float> %539, i64 13, !dbg !76
  %567 = fmul float %351, %566, !dbg !76
  %568 = extractelement <32 x float> %539, i64 14, !dbg !76
  %569 = fmul float %351, %568, !dbg !76
  %570 = extractelement <32 x float> %539, i64 15, !dbg !76
  %571 = fmul float %351, %570, !dbg !76
  %572 = extractelement <32 x float> %539, i64 16, !dbg !76
  %573 = fmul float %352, %572, !dbg !76
  %574 = extractelement <32 x float> %539, i64 17, !dbg !76
  %575 = fmul float %352, %574, !dbg !76
  %576 = extractelement <32 x float> %539, i64 18, !dbg !76
  %577 = fmul float %352, %576, !dbg !76
  %578 = extractelement <32 x float> %539, i64 19, !dbg !76
  %579 = fmul float %352, %578, !dbg !76
  %580 = extractelement <32 x float> %539, i64 20, !dbg !76
  %581 = fmul float %353, %580, !dbg !76
  %582 = extractelement <32 x float> %539, i64 21, !dbg !76
  %583 = fmul float %353, %582, !dbg !76
  %584 = extractelement <32 x float> %539, i64 22, !dbg !76
  %585 = fmul float %353, %584, !dbg !76
  %586 = extractelement <32 x float> %539, i64 23, !dbg !76
  %587 = fmul float %353, %586, !dbg !76
  %588 = extractelement <32 x float> %539, i64 24, !dbg !76
  %589 = fmul float %354, %588, !dbg !76
  %590 = extractelement <32 x float> %539, i64 25, !dbg !76
  %591 = fmul float %354, %590, !dbg !76
  %592 = extractelement <32 x float> %539, i64 26, !dbg !76
  %593 = fmul float %354, %592, !dbg !76
  %594 = extractelement <32 x float> %539, i64 27, !dbg !76
  %595 = fmul float %354, %594, !dbg !76
  %596 = extractelement <32 x float> %539, i64 28, !dbg !76
  %597 = fmul float %355, %596, !dbg !76
  %598 = extractelement <32 x float> %539, i64 29, !dbg !76
  %599 = fmul float %355, %598, !dbg !76
  %600 = extractelement <32 x float> %539, i64 30, !dbg !76
  %601 = fmul float %355, %600, !dbg !76
  %602 = extractelement <32 x float> %539, i64 31, !dbg !76
  %603 = fmul float %355, %602, !dbg !76
  %604 = fadd float %541, %549, !dbg !77
  %605 = fadd float %543, %551, !dbg !77
  %606 = fadd float %545, %553, !dbg !77
  %607 = fadd float %547, %555, !dbg !77
  %608 = fadd float %557, %604, !dbg !77
  %609 = fadd float %559, %605, !dbg !77
  %610 = fadd float %561, %606, !dbg !77
  %611 = fadd float %563, %607, !dbg !77
  %612 = fadd float %565, %608, !dbg !77
  %613 = fadd float %567, %609, !dbg !77
  %614 = fadd float %569, %610, !dbg !77
  %615 = fadd float %571, %611, !dbg !77
  %616 = fadd float %573, %612, !dbg !77
  %617 = fadd float %575, %613, !dbg !77
  %618 = fadd float %577, %614, !dbg !77
  %619 = fadd float %579, %615, !dbg !77
  %620 = fadd float %581, %616, !dbg !77
  %621 = fadd float %583, %617, !dbg !77
  %622 = fadd float %585, %618, !dbg !77
  %623 = fadd float %587, %619, !dbg !77
  %624 = fadd float %589, %620, !dbg !77
  %625 = fadd float %591, %621, !dbg !77
  %626 = fadd float %593, %622, !dbg !77
  %627 = fadd float %595, %623, !dbg !77
  %628 = fadd float %597, %624, !dbg !77
  %629 = fadd float %599, %625, !dbg !77
  %630 = fadd float %601, %626, !dbg !77
  %631 = fadd float %603, %627, !dbg !77
  %632 = bitcast float %628 to i32, !dbg !79
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 16, i32 31), !dbg !79
  %634 = bitcast i32 %633 to float, !dbg !79
  %635 = fadd float %628, %634, !dbg !77
  %636 = bitcast float %635 to i32, !dbg !79
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 8, i32 31), !dbg !79
  %638 = bitcast i32 %637 to float, !dbg !79
  %639 = fadd float %635, %638, !dbg !77
  %640 = bitcast float %639 to i32, !dbg !79
  %641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %640, i32 4, i32 31), !dbg !79
  %642 = bitcast i32 %641 to float, !dbg !79
  %643 = bitcast float %629 to i32, !dbg !79
  %644 = bitcast float %630 to i32, !dbg !79
  %645 = bitcast float %631 to i32, !dbg !79
  %646 = fadd float %639, %642, !dbg !77
  %647 = bitcast float %646 to i32, !dbg !79
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %647, i32 2, i32 31), !dbg !79
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 16, i32 31), !dbg !79
  %650 = bitcast i32 %649 to float, !dbg !79
  %651 = fadd float %629, %650, !dbg !77
  %652 = bitcast float %651 to i32, !dbg !79
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 8, i32 31), !dbg !79
  %654 = bitcast i32 %653 to float, !dbg !79
  %655 = fadd float %651, %654, !dbg !77
  %656 = bitcast float %655 to i32, !dbg !79
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 4, i32 31), !dbg !79
  %658 = bitcast i32 %657 to float, !dbg !79
  %659 = fadd float %655, %658, !dbg !77
  %660 = bitcast float %659 to i32, !dbg !79
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !79
  %662 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %644, i32 16, i32 31), !dbg !79
  %663 = bitcast i32 %662 to float, !dbg !79
  %664 = fadd float %630, %663, !dbg !77
  %665 = bitcast float %664 to i32, !dbg !79
  %666 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %665, i32 8, i32 31), !dbg !79
  %667 = bitcast i32 %666 to float, !dbg !79
  %668 = fadd float %664, %667, !dbg !77
  %669 = bitcast float %668 to i32, !dbg !79
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 4, i32 31), !dbg !79
  %671 = bitcast i32 %670 to float, !dbg !79
  %672 = fadd float %668, %671, !dbg !77
  %673 = bitcast float %672 to i32, !dbg !79
  %674 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 2, i32 31), !dbg !79
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 16, i32 31), !dbg !79
  %676 = bitcast i32 %675 to float, !dbg !79
  %677 = fadd float %631, %676, !dbg !77
  %678 = bitcast float %677 to i32, !dbg !79
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 8, i32 31), !dbg !79
  %680 = bitcast i32 %679 to float, !dbg !79
  %681 = fadd float %677, %680, !dbg !77
  %682 = bitcast float %681 to i32, !dbg !79
  %683 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %682, i32 4, i32 31), !dbg !79
  %684 = bitcast i32 %683 to float, !dbg !79
  %685 = fadd float %681, %684, !dbg !77
  %686 = bitcast float %685 to i32, !dbg !79
  %687 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %686, i32 2, i32 31), !dbg !79
  %688 = insertelement <4 x i32> poison, i32 %648, i64 0, !dbg !79
  %689 = insertelement <4 x i32> %688, i32 %661, i64 1, !dbg !79
  %690 = insertelement <4 x i32> %689, i32 %674, i64 2, !dbg !79
  %691 = insertelement <4 x i32> %690, i32 %687, i64 3, !dbg !79
  %692 = bitcast <4 x i32> %691 to <4 x float>, !dbg !79
  %693 = insertelement <4 x float> poison, float %646, i64 0, !dbg !77
  %694 = insertelement <4 x float> %693, float %659, i64 1, !dbg !77
  %695 = insertelement <4 x float> %694, float %672, i64 2, !dbg !77
  %696 = insertelement <4 x float> %695, float %685, i64 3, !dbg !77
  %697 = fadd <4 x float> %696, %692, !dbg !77
  %698 = fptrunc <4 x float> %697 to <4 x bfloat>, !dbg !80
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  store <4 x bfloat> %698, ptr addrspace(3) %175, align 8, !dbg !81
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !81
  %699 = load i16, ptr addrspace(3) %176, align 2, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %699, ptr addrspace(1) %.pn66128, i1 %179) #6, !dbg !81
  %700 = getelementptr i8, ptr addrspace(1) %.pn74129, i64 8192, !dbg !82
  %701 = getelementptr i8, ptr addrspace(1) %.pn82130, i64 8192, !dbg !83
  %702 = getelementptr i8, ptr addrspace(1) %.pn90131, i64 8192, !dbg !84
  %703 = getelementptr i8, ptr addrspace(1) %182, i64 128, !dbg !85
  %704 = getelementptr i8, ptr addrspace(1) %181, i64 64, !dbg !86
  %705 = getelementptr i8, ptr addrspace(1) %.pn66128, i64 8192, !dbg !87
  %706 = add nuw nsw i32 %183, 1, !dbg !22
  %exitcond.not = icmp eq i32 %706, %9, !dbg !22
  br i1 %exitcond.not, label %._crit_edge, label %180, !dbg !22

._crit_edge:                                      ; preds = %__nv_sqrtf.exit95, %11
  %707 = phi <32 x float> [ %138, %11 ], [ %539, %__nv_sqrtf.exit95 ]
  %708 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !88
  %709 = getelementptr float, ptr addrspace(1) %708, i64 %41, !dbg !89
  %710 = getelementptr float, ptr addrspace(1) %708, i64 %43, !dbg !89
  %711 = getelementptr float, ptr addrspace(1) %708, i64 %45, !dbg !89
  %712 = getelementptr float, ptr addrspace(1) %708, i64 %47, !dbg !89
  %713 = getelementptr float, ptr addrspace(1) %708, i64 %49, !dbg !89
  %714 = getelementptr float, ptr addrspace(1) %708, i64 %51, !dbg !89
  %715 = getelementptr float, ptr addrspace(1) %708, i64 %53, !dbg !89
  %716 = getelementptr float, ptr addrspace(1) %708, i64 %55, !dbg !89
  %717 = getelementptr float, ptr addrspace(1) %709, i64 %28, !dbg !90
  %718 = getelementptr float, ptr addrspace(1) %710, i64 %28, !dbg !90
  %719 = getelementptr float, ptr addrspace(1) %711, i64 %28, !dbg !90
  %720 = getelementptr float, ptr addrspace(1) %712, i64 %28, !dbg !90
  %721 = getelementptr float, ptr addrspace(1) %713, i64 %28, !dbg !90
  %722 = getelementptr float, ptr addrspace(1) %714, i64 %28, !dbg !90
  %723 = getelementptr float, ptr addrspace(1) %715, i64 %28, !dbg !90
  %724 = getelementptr float, ptr addrspace(1) %716, i64 %28, !dbg !90
  %bc = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %725 = extractelement <32 x i32> %bc, i64 0, !dbg !91
  %bc256 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %726 = extractelement <32 x i32> %bc256, i64 1, !dbg !91
  %bc257 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %727 = extractelement <32 x i32> %bc257, i64 2, !dbg !91
  %bc258 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %728 = extractelement <32 x i32> %bc258, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %725, i32 %726, i32 %727, i32 %728, ptr addrspace(1) %717, i1 %29) #6, !dbg !91
  %bc259 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %729 = extractelement <32 x i32> %bc259, i64 4, !dbg !91
  %bc260 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %730 = extractelement <32 x i32> %bc260, i64 5, !dbg !91
  %bc261 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %731 = extractelement <32 x i32> %bc261, i64 6, !dbg !91
  %bc262 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %732 = extractelement <32 x i32> %bc262, i64 7, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %729, i32 %730, i32 %731, i32 %732, ptr addrspace(1) %718, i1 %29) #6, !dbg !91
  %bc263 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %733 = extractelement <32 x i32> %bc263, i64 8, !dbg !91
  %bc264 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %734 = extractelement <32 x i32> %bc264, i64 9, !dbg !91
  %bc265 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %735 = extractelement <32 x i32> %bc265, i64 10, !dbg !91
  %bc266 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %736 = extractelement <32 x i32> %bc266, i64 11, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %733, i32 %734, i32 %735, i32 %736, ptr addrspace(1) %719, i1 %29) #6, !dbg !91
  %bc267 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %737 = extractelement <32 x i32> %bc267, i64 12, !dbg !91
  %bc268 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %738 = extractelement <32 x i32> %bc268, i64 13, !dbg !91
  %bc269 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %739 = extractelement <32 x i32> %bc269, i64 14, !dbg !91
  %bc270 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %740 = extractelement <32 x i32> %bc270, i64 15, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %737, i32 %738, i32 %739, i32 %740, ptr addrspace(1) %720, i1 %29) #6, !dbg !91
  %bc271 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %741 = extractelement <32 x i32> %bc271, i64 16, !dbg !91
  %bc272 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %742 = extractelement <32 x i32> %bc272, i64 17, !dbg !91
  %bc273 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %743 = extractelement <32 x i32> %bc273, i64 18, !dbg !91
  %bc274 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %744 = extractelement <32 x i32> %bc274, i64 19, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %741, i32 %742, i32 %743, i32 %744, ptr addrspace(1) %721, i1 %29) #6, !dbg !91
  %bc275 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %745 = extractelement <32 x i32> %bc275, i64 20, !dbg !91
  %bc276 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %746 = extractelement <32 x i32> %bc276, i64 21, !dbg !91
  %bc277 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %747 = extractelement <32 x i32> %bc277, i64 22, !dbg !91
  %bc278 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %748 = extractelement <32 x i32> %bc278, i64 23, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %745, i32 %746, i32 %747, i32 %748, ptr addrspace(1) %722, i1 %29) #6, !dbg !91
  %bc279 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %749 = extractelement <32 x i32> %bc279, i64 24, !dbg !91
  %bc280 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %750 = extractelement <32 x i32> %bc280, i64 25, !dbg !91
  %bc281 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %751 = extractelement <32 x i32> %bc281, i64 26, !dbg !91
  %bc282 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %752 = extractelement <32 x i32> %bc282, i64 27, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %749, i32 %750, i32 %751, i32 %752, ptr addrspace(1) %723, i1 %29) #6, !dbg !91
  %bc283 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %753 = extractelement <32 x i32> %bc283, i64 28, !dbg !91
  %bc284 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %754 = extractelement <32 x i32> %bc284, i64 29, !dbg !91
  %bc285 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %755 = extractelement <32 x i32> %bc285, i64 30, !dbg !91
  %bc286 = bitcast <32 x float> %707 to <32 x i32>, !dbg !91
  %756 = extractelement <32 x i32> %bc286, i64 31, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %753, i32 %754, i32 %755, i32 %756, ptr addrspace(1) %724, i1 %29) #6, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 65535) i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { "nvvm.reqntid"="32" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_recurrent.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/gated_delta_rule")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "fused_recurrent_gated_delta_rule_fwd_kernel", linkageName: "fused_recurrent_gated_delta_rule_fwd_kernel", scope: !1, file: !1, line: 23, type: !6, scopeLine: 23, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 53, column: 30, scope: !5)
!9 = !DILocation(line: 53, column: 48, scope: !5)
!10 = !DILocation(line: 62, column: 23, scope: !5)
!11 = !DILocation(line: 63, column: 16, scope: !5)
!12 = !DILocation(line: 63, column: 21, scope: !5)
!13 = !DILocation(line: 67, column: 38, scope: !5)
!14 = !DILocation(line: 82, column: 19, scope: !5)
!15 = !DILocation(line: 87, column: 29, scope: !5)
!16 = !DILocation(line: 87, column: 20, scope: !5)
!17 = !DILocation(line: 87, column: 48, scope: !5)
!18 = !DILocation(line: 87, column: 33, scope: !5)
!19 = !DILocation(line: 87, column: 52, scope: !5)
!20 = !DILocation(line: 88, column: 23, scope: !5)
!21 = !DILocation(line: 88, column: 15, scope: !5)
!22 = !DILocation(line: 90, column: 22, scope: !5)
!23 = !DILocation(line: 63, column: 34, scope: !5)
!24 = !DILocation(line: 61, column: 25, scope: !5)
!25 = !DILocation(line: 65, column: 21, scope: !5)
!26 = !DILocation(line: 54, column: 35, scope: !5)
!27 = !DILocation(line: 65, column: 25, scope: !5)
!28 = !DILocation(line: 65, column: 32, scope: !5)
!29 = !DILocation(line: 65, column: 14, scope: !5)
!30 = !DILocation(line: 79, column: 14, scope: !5)
!31 = !DILocation(line: 79, column: 38, scope: !5)
!32 = !DILocation(line: 69, column: 18, scope: !5)
!33 = !DILocation(line: 75, column: 24, scope: !5)
!34 = !DILocation(line: 69, column: 29, scope: !5)
!35 = !DILocation(line: 75, column: 35, scope: !5)
!36 = !DILocation(line: 67, column: 14, scope: !5)
!37 = !DILocation(line: 66, column: 14, scope: !5)
!38 = !DILocation(line: 65, column: 36, scope: !5)
!39 = !DILocation(line: 66, column: 36, scope: !5)
!40 = !DILocation(line: 91, column: 22, scope: !5)
!41 = !DILocation(line: 97, column: 20, scope: !5)
!42 = !DILocation(line: 91, column: 52, scope: !5)
!43 = !DILocation(line: 92, column: 22, scope: !5)
!44 = !DILocation(line: 96, column: 24, scope: !5)
!45 = !DILocation(line: 92, column: 52, scope: !5)
!46 = !DILocation(line: 93, column: 22, scope: !5)
!47 = !DILocation(line: 93, column: 52, scope: !5)
!48 = !DILocation(line: 95, column: 45, scope: !5)
!49 = !DILocation(line: 260, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !5, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!52 = !DILocation(line: 95, column: 39, scope: !5)
!53 = !DILocation(line: 290, column: 36, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 95, column: 52, scope: !5)
!55 = !DILocation(line: 95, column: 32, scope: !5)
!56 = !DILocation(line: 95, column: 24, scope: !5)
!57 = !DILocation(line: 96, column: 45, scope: !5)
!58 = !DILocation(line: 260, column: 15, scope: !50, inlinedAt: !59)
!59 = !DILocation(line: 96, column: 39, scope: !5)
!60 = !DILocation(line: 290, column: 36, scope: !50, inlinedAt: !59)
!61 = !DILocation(line: 96, column: 52, scope: !5)
!62 = !DILocation(line: 96, column: 32, scope: !5)
!63 = !DILocation(line: 99, column: 29, scope: !5)
!64 = !DILocation(line: 99, column: 40, scope: !5)
!65 = !DILocation(line: 105, column: 26, scope: !5)
!66 = !DILocation(line: 106, column: 23, scope: !5)
!67 = !DILocation(line: 106, column: 19, scope: !5)
!68 = !DILocation(line: 117, column: 47, scope: !5)
!69 = !DILocation(line: 260, column: 15, scope: !50, inlinedAt: !70)
!70 = !DILocation(line: 117, column: 61, scope: !5)
!71 = !DILocation(line: 290, column: 36, scope: !50, inlinedAt: !70)
!72 = !DILocation(line: 117, column: 34, scope: !5)
!73 = !DILocation(line: 117, column: 28, scope: !5)
!74 = !DILocation(line: 119, column: 30, scope: !5)
!75 = !DILocation(line: 119, column: 15, scope: !5)
!76 = !DILocation(line: 122, column: 27, scope: !5)
!77 = !DILocation(line: 260, column: 15, scope: !50, inlinedAt: !78)
!78 = !DILocation(line: 122, column: 41, scope: !5)
!79 = !DILocation(line: 290, column: 36, scope: !50, inlinedAt: !78)
!80 = !DILocation(line: 123, column: 29, scope: !5)
!81 = !DILocation(line: 123, column: 22, scope: !5)
!82 = !DILocation(line: 125, column: 15, scope: !5)
!83 = !DILocation(line: 126, column: 15, scope: !5)
!84 = !DILocation(line: 127, column: 15, scope: !5)
!85 = !DILocation(line: 129, column: 19, scope: !5)
!86 = !DILocation(line: 134, column: 18, scope: !5)
!87 = !DILocation(line: 135, column: 15, scope: !5)
!88 = !DILocation(line: 138, column: 20, scope: !5)
!89 = !DILocation(line: 138, column: 33, scope: !5)
!90 = !DILocation(line: 138, column: 52, scope: !5)
!91 = !DILocation(line: 139, column: 23, scope: !5)
!92 = !DILocation(line: 137, column: 4, scope: !5)
