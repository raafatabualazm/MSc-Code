#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 2], instrShape = [16, 32, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @chunk_scaled_dot_kkt_fwd_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0), %arg4: i32 loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":28:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<4096> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<2048> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_11 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %cst_12 = arith.constant dense<64> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_13 = arith.constant dense<128> : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_14 = arith.constant dense<false> : tensor<64x64xi1, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc4)
    %3 = arith.remsi %1, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %2, %arg4 : i32 loc(#loc6)
    %5 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %6 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc8)
    %8 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %12 = tt.splat %5 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc9)
    %13 = tt.splat %5 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc9)
    %14 = arith.addi %12, %7 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc9)
    %15 = arith.addi %13, %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc9)
    %16 = tt.splat %arg4 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %17 = tt.splat %arg4 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc10)
    %18 = arith.cmpi slt, %14, %16 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc10)
    %19 = arith.cmpi slt, %15, %17 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc10)
    %20 = arith.muli %4, %c32_i32 : i32 loc(#loc11)
    %21 = tt.addptr %arg2, %20 : !tt.ptr<bf16>, i32 loc(#loc12)
    %22 = tt.addptr %21, %3 : !tt.ptr<bf16>, i32 loc(#loc13)
    %23 = arith.extsi %arg4 : i32 to i64 loc(#loc14)
    %24 = arith.extsi %5 : i32 to i64 loc(#loc14)
    %25 = tt.splat %22 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %26 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %27 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %28 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %29 = tt.splat %24 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %30 = arith.extsi %6 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %31 = arith.extsi %7 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %32 = arith.extsi %8 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %33 = arith.extsi %9 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %34 = arith.extsi %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %35 = arith.extsi %11 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %36 = arith.addi %26, %30 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %37 = arith.addi %27, %31 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %38 = arith.addi %28, %32 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %39 = arith.addi %29, %34 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %40 = arith.muli %37, %cst_1 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %41 = arith.muli %39, %cst_2 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %42 = tt.addptr %25, %40 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %43 = arith.cmpi sge, %37, %cst : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %44 = arith.cmpi sge, %39, %cst_0 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %45 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %46 = tt.splat %23 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %47 = arith.cmpi slt, %37, %45 : tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %48 = arith.cmpi slt, %39, %46 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %49 = arith.andi %43, %47 : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %50 = arith.andi %44, %48 : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc15)
    %51 = tt.load %42, %49 : tensor<64x!tt.ptr<bf16>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %52 = arith.addi %20, %3 : i32 loc(#loc16)
    %53 = arith.muli %52, %c128_i32 : i32 loc(#loc17)
    %54 = tt.addptr %arg0, %53 : !tt.ptr<bf16>, i32 loc(#loc18)
    %55 = tt.splat %54 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %56 = tt.expand_dims %36 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi64, #blocked> loc(#loc19)
    %57 = arith.muli %56, %cst_3 : tensor<64x1xi64, #blocked> loc(#loc19)
    %58 = tt.broadcast %57 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc19)
    %59 = arith.cmpi sge, %56, %cst_5 : tensor<64x1xi64, #blocked> loc(#loc19)
    %60 = tt.splat %23 : i64 -> tensor<64x1xi64, #blocked> loc(#loc19)
    %61 = arith.cmpi slt, %56, %60 : tensor<64x1xi64, #blocked> loc(#loc19)
    %62 = arith.andi %59, %61 : tensor<64x1xi1, #blocked> loc(#loc19)
    %63 = tt.broadcast %62 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc19)
    %64 = ttg.local_alloc : () -> !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc19)
    %65 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc19)
    %66 = tt.broadcast %65 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc19)
    %67 = arith.addi %58, %66 : tensor<64x64xi64, #blocked> loc(#loc19)
    %68 = tt.addptr %55, %67 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc19)
    %69 = arith.cmpi sge, %65, %cst_7 : tensor<1x64xi64, #blocked> loc(#loc19)
    %70 = arith.cmpi slt, %65, %cst_8 : tensor<1x64xi64, #blocked> loc(#loc19)
    %71 = arith.andi %69, %70 : tensor<1x64xi1, #blocked> loc(#loc19)
    %72 = tt.broadcast %71 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc19)
    %73 = arith.andi %63, %72 : tensor<64x64xi1, #blocked> loc(#loc19)
    %74 = ttg.memdesc_subview %64[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %75 = ttg.async_copy_global_to_local %68, %74 mask %73 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %76 = ttg.async_commit_group %75 loc(#loc19)
    %77 = arith.addi %33, %cst_12 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %78 = tt.expand_dims %77 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc19)
    %79 = tt.broadcast %78 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc19)
    %80 = arith.addi %58, %79 : tensor<64x64xi64, #blocked> loc(#loc19)
    %81 = tt.addptr %55, %80 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc19)
    %82 = arith.cmpi sge, %78, %cst_7 : tensor<1x64xi64, #blocked> loc(#loc19)
    %83 = arith.cmpi slt, %78, %cst_8 : tensor<1x64xi64, #blocked> loc(#loc19)
    %84 = arith.andi %82, %83 : tensor<1x64xi1, #blocked> loc(#loc19)
    %85 = tt.broadcast %84 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc19)
    %86 = arith.andi %63, %85 : tensor<64x64xi1, #blocked> loc(#loc19)
    %87 = ttg.memdesc_subview %64[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %88 = ttg.async_copy_global_to_local %81, %87 mask %86 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %89 = ttg.async_commit_group %88 loc(#loc19)
    %90 = arith.addi %33, %cst_13 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %91 = tt.expand_dims %90 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc19)
    %92 = tt.broadcast %91 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc19)
    %93 = arith.addi %58, %92 : tensor<64x64xi64, #blocked> loc(#loc19)
    %94 = tt.addptr %55, %93 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc19)
    %95 = ttg.memdesc_subview %64[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %96 = ttg.async_copy_global_to_local %94, %95 mask %cst_14 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
    %97 = ttg.async_commit_group %96 loc(#loc19)
    %98:6 = scf.for %arg5 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg6 = %cst_11, %arg7 = %c2_i32, %arg8 = %c-1_i32, %arg9 = %76, %arg10 = %89, %arg11 = %97) -> (tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %153 = arith.cmpi slt, %arg5, %c-1_i32 : i32 loc(#loc20)
      %154 = arith.addi %arg8, %c1_i32 : i32 loc(#loc20)
      %155 = arith.cmpi sge, %154, %c4_i32 : i32 loc(#loc20)
      %156 = arith.select %155, %c0_i32, %154 : i32 loc(#loc20)
      %157 = ttg.async_wait %arg9 {num = 2 : i32} loc(#loc19)
      %158 = ttg.memdesc_subview %64[%156, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
      %159 = ttg.memdesc_trans %158 {order = array<i32: 1, 0>} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> -> !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 4x64x64> loc(#loc21)
      %160 = ttng.warp_group_dot %158, %159, %arg6 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> * !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 4x64x64> -> tensor<64x64xf32, #mma> loc(#loc22)
      %161:3 = ttng.warp_group_dot_wait %160, %158, %159 {pendings = 1 : i32} : tensor<64x64xf32, #mma>, !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64>, !ttg.memdesc<64x64xbf16, #shared1, #smem, mutable, 4x64x64> loc(#loc22)
      %162 = arith.addi %arg7, %c1_i32 : i32 loc(#loc20)
      %163 = arith.cmpi sge, %162, %c4_i32 : i32 loc(#loc20)
      %164 = arith.select %163, %c0_i32, %162 : i32 loc(#loc20)
      %165 = arith.addi %arg5, %c3_i32 : i32 loc(#loc20)
      %166 = arith.muli %165, %c64_i32 : i32 loc(#loc23)
      %167 = arith.extsi %166 : i32 to i64 loc(#loc24)
      %168 = tt.splat %167 : i64 -> tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
      %169 = arith.addi %168, %33 : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
      %170 = tt.expand_dims %169 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc19)
      %171 = tt.broadcast %170 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc19)
      %172 = arith.addi %58, %171 : tensor<64x64xi64, #blocked> loc(#loc19)
      %173 = tt.addptr %55, %172 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc19)
      %174 = arith.cmpi sge, %170, %cst_7 : tensor<1x64xi64, #blocked> loc(#loc19)
      %175 = arith.cmpi slt, %170, %cst_8 : tensor<1x64xi64, #blocked> loc(#loc19)
      %176 = arith.andi %174, %175 : tensor<1x64xi1, #blocked> loc(#loc19)
      %177 = tt.broadcast %176 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc19)
      %178 = arith.andi %63, %177 : tensor<64x64xi1, #blocked> loc(#loc19)
      %179 = ttg.memdesc_subview %64[%164, %c0_i32, %c0_i32] : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
      %180 = tt.splat %153 : i1 -> tensor<64x64xi1, #blocked> loc(#loc20)
      %181 = arith.andi %180, %178 : tensor<64x64xi1, #blocked> loc(#loc20)
      %182 = ttg.async_copy_global_to_local %173, %179 mask %181 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 4x64x64> loc(#loc19)
      %183 = ttg.async_commit_group %182 loc(#loc19)
      scf.yield %161#0, %164, %156, %arg10, %arg11, %183 : tensor<64x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc20)
    } loc(#loc20)
    %99 = ttng.warp_group_dot_wait %98#0 {pendings = 0 : i32} : tensor<64x64xf32, #mma> loc(#loc20)
    %100 = ttg.async_wait  {num = 0 : i32} loc(#loc20)
    ttg.local_dealloc %64 : !ttg.memdesc<4x64x64xbf16, #shared, #smem, mutable> loc(#loc20)
    %101 = tt.addptr %arg1, %20 : !tt.ptr<f32>, i32 loc(#loc25)
    %102 = tt.addptr %101, %3 : !tt.ptr<f32>, i32 loc(#loc26)
    %103 = tt.splat %102 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %104 = tt.splat %102 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %105 = tt.addptr %103, %40 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %106 = tt.addptr %104, %41 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>>, tensor<64xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %107 = tt.load %105, %49 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %108 = tt.load %106, %50 : tensor<64x!tt.ptr<f32>, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc27)
    %109 = tt.expand_dims %107 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc28)
    %110 = tt.expand_dims %108 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xf32, #mma> loc(#loc29)
    %111 = tt.broadcast %109 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc30)
    %112 = tt.broadcast %110 : tensor<1x64xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc30)
    %113 = arith.subf %111, %112 : tensor<64x64xf32, #mma> loc(#loc30)
    %114 = math.exp %113 : tensor<64x64xf32, #mma> loc(#loc31)
    %115 = arith.mulf %99, %114 : tensor<64x64xf32, #mma> loc(#loc32)
    %116 = tt.expand_dims %51 {axis = 1 : i32} : tensor<64xbf16, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xbf16, #mma> loc(#loc33)
    %117 = arith.extf %116 : tensor<64x1xbf16, #mma> to tensor<64x1xf32, #mma> loc(#loc34)
    %118 = tt.broadcast %117 : tensor<64x1xf32, #mma> -> tensor<64x64xf32, #mma> loc(#loc34)
    %119 = arith.mulf %115, %118 : tensor<64x64xf32, #mma> loc(#loc34)
    %120 = tt.expand_dims %14 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc35)
    %121 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc36)
    %122 = tt.broadcast %120 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc37)
    %123 = tt.broadcast %121 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc37)
    %124 = arith.cmpi sgt, %122, %123 : tensor<64x64xi32, #mma> loc(#loc37)
    %125 = tt.expand_dims %18 {axis = 1 : i32} : tensor<64xi1, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi1, #mma> loc(#loc38)
    %126 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi1, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi1, #mma> loc(#loc39)
    %127 = tt.broadcast %125 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc39)
    %128 = tt.broadcast %126 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc39)
    %129 = arith.andi %127, %128 : tensor<64x64xi1, #mma> loc(#loc39)
    %130 = arith.andi %124, %129 : tensor<64x64xi1, #mma> loc(#loc40)
    %131 = arith.select %130, %119, %cst_11 : tensor<64x64xi1, #mma>, tensor<64x64xf32, #mma> loc(#loc41)
    %132 = arith.muli %52, %c64_i32 : i32 loc(#loc42)
    %133 = tt.addptr %arg3, %132 : !tt.ptr<f32>, i32 loc(#loc43)
    %134 = tt.splat %133 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %135 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc44)
    %136 = arith.muli %135, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %137 = tt.broadcast %136 : tensor<64x1xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc44)
    %138 = tt.expand_dims %35 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi64, #blocked1> loc(#loc44)
    %139 = tt.broadcast %138 : tensor<1x64xi64, #blocked1> -> tensor<64x64xi64, #blocked1> loc(#loc44)
    %140 = arith.addi %137, %139 : tensor<64x64xi64, #blocked1> loc(#loc44)
    %141 = tt.addptr %134, %140 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi64, #blocked1> loc(#loc44)
    %142 = arith.cmpi sge, %135, %cst_4 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %143 = tt.splat %23 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc44)
    %144 = arith.cmpi slt, %135, %143 : tensor<64x1xi64, #blocked1> loc(#loc44)
    %145 = arith.andi %142, %144 : tensor<64x1xi1, #blocked1> loc(#loc44)
    %146 = tt.broadcast %145 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc44)
    %147 = arith.cmpi sge, %138, %cst_6 : tensor<1x64xi64, #blocked1> loc(#loc44)
    %148 = arith.cmpi slt, %138, %cst_10 : tensor<1x64xi64, #blocked1> loc(#loc44)
    %149 = arith.andi %147, %148 : tensor<1x64xi1, #blocked1> loc(#loc44)
    %150 = tt.broadcast %149 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc44)
    %151 = arith.andi %146, %150 : tensor<64x64xi1, #blocked1> loc(#loc44)
    %152 = ttg.convert_layout %131 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked1> loc(#loc44)
    tt.store %141, %152, %151 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:30)
#loc3 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":43:48)
#loc4 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:23)
#loc5 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":44:33)
#loc6 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":50:25)
#loc7 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:16)
#loc8 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:34)
#loc9 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":51:21)
#loc10 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":52:16)
#loc11 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:42)
#loc12 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:38)
#loc13 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:46)
#loc14 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":54:83)
#loc15 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":55:21)
#loc16 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:45)
#loc17 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:52)
#loc18 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:36)
#loc19 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":60:22)
#loc20 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":58:21)
#loc21 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:36)
#loc22 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":61:27)
#loc23 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:90)
#loc24 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":59:105)
#loc25 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:36)
#loc26 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":64:44)
#loc27 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":65:22)
#loc28 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:23)
#loc29 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:38)
#loc30 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":66:34)
#loc31 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:19)
#loc32 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":67:15)
#loc33 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:18)
#loc34 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":68:11)
#loc35 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:15)
#loc36 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:30)
#loc37 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:26)
#loc38 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:47)
#loc39 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:58)
#loc40 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":70:43)
#loc41 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":71:29)
#loc42 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:48)
#loc43 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":72:32)
#loc44 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:18)
#loc45 = loc("/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/ops/common/chunk_scaled_dot_kkt.py":73:4)
