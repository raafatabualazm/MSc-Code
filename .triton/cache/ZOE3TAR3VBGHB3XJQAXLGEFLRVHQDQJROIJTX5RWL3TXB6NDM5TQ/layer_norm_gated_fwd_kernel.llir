; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define ptx_kernel void @layer_norm_gated_fwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr #0 !dbg !5 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !9
  %11 = shl nuw nsw i32 %10, 3, !dbg !9
  %12 = and i32 %11, 120, !dbg !9
  %13 = shl i32 %9, 6, !dbg !10
  %14 = sext i32 %6 to i64, !dbg !11
  %15 = sext i32 %13 to i64, !dbg !11
  %.lobit1 = lshr i32 %10, 4, !dbg !12
  %16 = and i32 %.lobit1, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %16, 32, !dbg !12
  %19 = or i32 %.lobit1, 48, !dbg !12
  %20 = zext nneg i32 %16 to i64, !dbg !12
  %21 = zext nneg i32 %17 to i64, !dbg !12
  %22 = zext nneg i32 %18 to i64, !dbg !12
  %23 = zext nneg i32 %19 to i64, !dbg !12
  %24 = or disjoint i64 %20, %15, !dbg !12
  %25 = or disjoint i64 %21, %15, !dbg !12
  %26 = or disjoint i64 %22, %15, !dbg !12
  %27 = or disjoint i64 %23, %15, !dbg !12
  %28 = shl nsw i64 %24, 7, !dbg !12
  %29 = shl nsw i64 %25, 7, !dbg !12
  %30 = shl nsw i64 %26, 7, !dbg !12
  %31 = shl nsw i64 %27, 7, !dbg !12
  %32 = zext nneg i32 %12 to i64, !dbg !12
  %33 = or disjoint i64 %28, %32, !dbg !12
  %34 = or disjoint i64 %29, %32, !dbg !12
  %35 = or disjoint i64 %30, %32, !dbg !12
  %36 = or disjoint i64 %31, %32, !dbg !12
  %37 = getelementptr bfloat, ptr addrspace(1) %0, i64 %33, !dbg !12
  %38 = getelementptr bfloat, ptr addrspace(1) %0, i64 %34, !dbg !12
  %39 = getelementptr bfloat, ptr addrspace(1) %0, i64 %35, !dbg !12
  %40 = getelementptr bfloat, ptr addrspace(1) %0, i64 %36, !dbg !12
  %41 = icmp sgt i32 %13, -1, !dbg !12
  %42 = icmp slt i64 %24, %14, !dbg !12
  %43 = icmp slt i64 %25, %14, !dbg !12
  %44 = icmp slt i64 %26, %14, !dbg !12
  %45 = icmp slt i64 %27, %14, !dbg !12
  %46 = and i1 %41, %42, !dbg !12
  %47 = and i1 %41, %43, !dbg !12
  %48 = and i1 %41, %44, !dbg !12
  %49 = and i1 %41, %45, !dbg !12
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %46) #6, !dbg !12
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !12
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !12
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !12
  %54 = bitcast i32 %53 to <2 x bfloat>, !dbg !12
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !12
  %56 = bitcast i32 %55 to <2 x bfloat>, !dbg !12
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !12
  %58 = bitcast i32 %57 to <2 x bfloat>, !dbg !12
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !12
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !12
  %61 = extractelement <2 x bfloat> %54, i64 0, !dbg !12
  %62 = extractelement <2 x bfloat> %54, i64 1, !dbg !12
  %63 = extractelement <2 x bfloat> %56, i64 0, !dbg !12
  %64 = extractelement <2 x bfloat> %56, i64 1, !dbg !12
  %65 = extractelement <2 x bfloat> %58, i64 0, !dbg !12
  %66 = extractelement <2 x bfloat> %58, i64 1, !dbg !12
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %47) #6, !dbg !12
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !12
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !12
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !12
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !12
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !12
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !12
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !12
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !12
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !12
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !12
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !12
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !12
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !12
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !12
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !12
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !12
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %48) #6, !dbg !12
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !12
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !12
  %87 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !12
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !12
  %89 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !12
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !12
  %91 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !12
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !12
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !12
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !12
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !12
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !12
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !12
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !12
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !12
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !12
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %49) #6, !dbg !12
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !12
  %103 = bitcast i32 %102 to <2 x bfloat>, !dbg !12
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !12
  %105 = bitcast i32 %104 to <2 x bfloat>, !dbg !12
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !12
  %107 = bitcast i32 %106 to <2 x bfloat>, !dbg !12
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !12
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !12
  %110 = extractelement <2 x bfloat> %103, i64 0, !dbg !12
  %111 = extractelement <2 x bfloat> %103, i64 1, !dbg !12
  %112 = extractelement <2 x bfloat> %105, i64 0, !dbg !12
  %113 = extractelement <2 x bfloat> %105, i64 1, !dbg !12
  %114 = extractelement <2 x bfloat> %107, i64 0, !dbg !12
  %115 = extractelement <2 x bfloat> %107, i64 1, !dbg !12
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !12
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !12
  %118 = fpext bfloat %59 to float, !dbg !13
  %119 = fpext bfloat %60 to float, !dbg !13
  %120 = fpext bfloat %61 to float, !dbg !13
  %121 = fpext bfloat %62 to float, !dbg !13
  %122 = fpext bfloat %63 to float, !dbg !13
  %123 = fpext bfloat %64 to float, !dbg !13
  %124 = fpext bfloat %65 to float, !dbg !13
  %125 = fpext bfloat %66 to float, !dbg !13
  %126 = fpext bfloat %76 to float, !dbg !13
  %127 = fpext bfloat %77 to float, !dbg !13
  %128 = fpext bfloat %78 to float, !dbg !13
  %129 = fpext bfloat %79 to float, !dbg !13
  %130 = fpext bfloat %80 to float, !dbg !13
  %131 = fpext bfloat %81 to float, !dbg !13
  %132 = fpext bfloat %82 to float, !dbg !13
  %133 = fpext bfloat %83 to float, !dbg !13
  %134 = fpext bfloat %93 to float, !dbg !13
  %135 = fpext bfloat %94 to float, !dbg !13
  %136 = fpext bfloat %95 to float, !dbg !13
  %137 = fpext bfloat %96 to float, !dbg !13
  %138 = fpext bfloat %97 to float, !dbg !13
  %139 = fpext bfloat %98 to float, !dbg !13
  %140 = fpext bfloat %99 to float, !dbg !13
  %141 = fpext bfloat %100 to float, !dbg !13
  %142 = fpext bfloat %110 to float, !dbg !13
  %143 = fpext bfloat %111 to float, !dbg !13
  %144 = fpext bfloat %112 to float, !dbg !13
  %145 = fpext bfloat %113 to float, !dbg !13
  %146 = fpext bfloat %114 to float, !dbg !13
  %147 = fpext bfloat %115 to float, !dbg !13
  %148 = fpext bfloat %116 to float, !dbg !13
  %149 = fpext bfloat %117 to float, !dbg !13
  %150 = fmul float %118, %118, !dbg !14
  %151 = fmul float %119, %119, !dbg !14
  %152 = fmul float %120, %120, !dbg !14
  %153 = fmul float %121, %121, !dbg !14
  %154 = fmul float %122, %122, !dbg !14
  %155 = fmul float %123, %123, !dbg !14
  %156 = fmul float %124, %124, !dbg !14
  %157 = fmul float %125, %125, !dbg !14
  %158 = fmul float %126, %126, !dbg !14
  %159 = fmul float %127, %127, !dbg !14
  %160 = fmul float %128, %128, !dbg !14
  %161 = fmul float %129, %129, !dbg !14
  %162 = fmul float %130, %130, !dbg !14
  %163 = fmul float %131, %131, !dbg !14
  %164 = fmul float %132, %132, !dbg !14
  %165 = fmul float %133, %133, !dbg !14
  %166 = fmul float %134, %134, !dbg !14
  %167 = fmul float %135, %135, !dbg !14
  %168 = fmul float %136, %136, !dbg !14
  %169 = fmul float %137, %137, !dbg !14
  %170 = fmul float %138, %138, !dbg !14
  %171 = fmul float %139, %139, !dbg !14
  %172 = fmul float %140, %140, !dbg !14
  %173 = fmul float %141, %141, !dbg !14
  %174 = fmul float %142, %142, !dbg !14
  %175 = fmul float %143, %143, !dbg !14
  %176 = fmul float %144, %144, !dbg !14
  %177 = fmul float %145, %145, !dbg !14
  %178 = fmul float %146, %146, !dbg !14
  %179 = fmul float %147, %147, !dbg !14
  %180 = fmul float %148, %148, !dbg !14
  %181 = fmul float %149, %149, !dbg !14
  %182 = fadd float %150, %151, !dbg !15
  %183 = fadd float %152, %182, !dbg !15
  %184 = fadd float %153, %183, !dbg !15
  %185 = fadd float %154, %184, !dbg !15
  %186 = fadd float %155, %185, !dbg !15
  %187 = fadd float %156, %186, !dbg !15
  %188 = fadd float %157, %187, !dbg !15
  %189 = fadd float %158, %159, !dbg !15
  %190 = fadd float %160, %189, !dbg !15
  %191 = fadd float %161, %190, !dbg !15
  %192 = fadd float %162, %191, !dbg !15
  %193 = fadd float %163, %192, !dbg !15
  %194 = fadd float %164, %193, !dbg !15
  %195 = fadd float %165, %194, !dbg !15
  %196 = fadd float %166, %167, !dbg !15
  %197 = fadd float %168, %196, !dbg !15
  %198 = fadd float %169, %197, !dbg !15
  %199 = fadd float %170, %198, !dbg !15
  %200 = fadd float %171, %199, !dbg !15
  %201 = fadd float %172, %200, !dbg !15
  %202 = fadd float %173, %201, !dbg !15
  %203 = fadd float %174, %175, !dbg !15
  %204 = fadd float %176, %203, !dbg !15
  %205 = fadd float %177, %204, !dbg !15
  %206 = fadd float %178, %205, !dbg !15
  %207 = fadd float %179, %206, !dbg !15
  %208 = fadd float %180, %207, !dbg !15
  %209 = fadd float %181, %208, !dbg !15
  %210 = bitcast float %188 to i32, !dbg !19
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !19
  %212 = bitcast i32 %211 to float, !dbg !19
  %213 = fadd float %188, %212, !dbg !15
  %214 = bitcast float %213 to i32, !dbg !19
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !19
  %216 = bitcast i32 %215 to float, !dbg !19
  %217 = fadd float %213, %216, !dbg !15
  %218 = bitcast float %217 to i32, !dbg !19
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !19
  %220 = bitcast i32 %219 to float, !dbg !19
  %221 = fadd float %217, %220, !dbg !15
  %222 = bitcast float %221 to i32, !dbg !19
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !19
  %224 = bitcast i32 %223 to float, !dbg !19
  %225 = fadd float %221, %224, !dbg !15
  %226 = bitcast float %195 to i32, !dbg !19
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !19
  %228 = bitcast i32 %227 to float, !dbg !19
  %229 = fadd float %195, %228, !dbg !15
  %230 = bitcast float %229 to i32, !dbg !19
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 4, i32 31), !dbg !19
  %232 = bitcast i32 %231 to float, !dbg !19
  %233 = fadd float %229, %232, !dbg !15
  %234 = bitcast float %233 to i32, !dbg !19
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !19
  %236 = bitcast i32 %235 to float, !dbg !19
  %237 = fadd float %233, %236, !dbg !15
  %238 = bitcast float %237 to i32, !dbg !19
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !19
  %240 = bitcast i32 %239 to float, !dbg !19
  %241 = fadd float %237, %240, !dbg !15
  %242 = bitcast float %202 to i32, !dbg !19
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !19
  %244 = bitcast i32 %243 to float, !dbg !19
  %245 = fadd float %202, %244, !dbg !15
  %246 = bitcast float %245 to i32, !dbg !19
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !19
  %248 = bitcast i32 %247 to float, !dbg !19
  %249 = fadd float %245, %248, !dbg !15
  %250 = bitcast float %249 to i32, !dbg !19
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !19
  %252 = bitcast i32 %251 to float, !dbg !19
  %253 = fadd float %249, %252, !dbg !15
  %254 = bitcast float %253 to i32, !dbg !19
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !19
  %256 = bitcast i32 %255 to float, !dbg !19
  %257 = fadd float %253, %256, !dbg !15
  %258 = bitcast float %209 to i32, !dbg !19
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !19
  %260 = bitcast i32 %259 to float, !dbg !19
  %261 = fadd float %209, %260, !dbg !15
  %262 = bitcast float %261 to i32, !dbg !19
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !19
  %264 = bitcast i32 %263 to float, !dbg !19
  %265 = fadd float %261, %264, !dbg !15
  %266 = bitcast float %265 to i32, !dbg !19
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !19
  %268 = bitcast i32 %267 to float, !dbg !19
  %269 = fadd float %265, %268, !dbg !15
  %270 = bitcast float %269 to i32, !dbg !19
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !19
  %272 = bitcast i32 %271 to float, !dbg !19
  %273 = fadd float %269, %272, !dbg !15
  %274 = tail call float @llvm.nvvm.div.full(float %225, float 1.280000e+02), !dbg !20
  %275 = tail call float @llvm.nvvm.div.full(float %241, float 1.280000e+02), !dbg !20
  %276 = tail call float @llvm.nvvm.div.full(float %257, float 1.280000e+02), !dbg !20
  %277 = tail call float @llvm.nvvm.div.full(float %273, float 1.280000e+02), !dbg !20
  %278 = fadd float %5, %274, !dbg !21
  %279 = fadd float %5, %275, !dbg !21
  %280 = fadd float %5, %276, !dbg !21
  %281 = fadd float %5, %277, !dbg !21
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i = icmp eq i32 %282, 0, !dbg !22
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i = icmp eq i32 %283, 0, !dbg !22
  br i1 %.not.i, label %289, label %284, !dbg !22

284:                                              ; preds = %8
  br i1 %.not1.i, label %287, label %285, !dbg !22

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

289:                                              ; preds = %8
  br i1 %.not1.i, label %292, label %290, !dbg !22

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #6, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %285, %287, %290, %292
  %.0.i = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !22
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i2 = icmp eq i32 %294, 0, !dbg !22
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i5 = icmp eq i32 %295, 0, !dbg !22
  br i1 %.not.i2, label %301, label %296, !dbg !22

296:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %299, label %297, !dbg !22

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

301:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %304, label %302, !dbg !22

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #6, !dbg !22
  br label %__nv_sqrtf.exit6, !dbg !22

__nv_sqrtf.exit6:                                 ; preds = %297, %299, %302, %304
  %.0.i4 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !22
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i7 = icmp eq i32 %306, 0, !dbg !22
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i10 = icmp eq i32 %307, 0, !dbg !22
  br i1 %.not.i7, label %313, label %308, !dbg !22

308:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %311, label %309, !dbg !22

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #6, !dbg !22
  br label %__nv_sqrtf.exit11, !dbg !22

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #6, !dbg !22
  br label %__nv_sqrtf.exit11, !dbg !22

313:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %316, label %314, !dbg !22

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #6, !dbg !22
  br label %__nv_sqrtf.exit11, !dbg !22

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #6, !dbg !22
  br label %__nv_sqrtf.exit11, !dbg !22

__nv_sqrtf.exit11:                                ; preds = %309, %311, %314, %316
  %.0.i9 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !22
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !22
  %.not.i12 = icmp eq i32 %318, 0, !dbg !22
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !22
  %.not1.i15 = icmp eq i32 %319, 0, !dbg !22
  br i1 %.not.i12, label %325, label %320, !dbg !22

320:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %323, label %321, !dbg !22

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #6, !dbg !22
  br label %__nv_sqrtf.exit16, !dbg !22

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #6, !dbg !22
  br label %__nv_sqrtf.exit16, !dbg !22

325:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %328, label %326, !dbg !22

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #6, !dbg !22
  br label %__nv_sqrtf.exit16, !dbg !22

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #6, !dbg !22
  br label %__nv_sqrtf.exit16, !dbg !22

__nv_sqrtf.exit16:                                ; preds = %321, %323, %326, %328
  %.0.i14 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !22
  %330 = and i32 %10, 63, !dbg !12
  %331 = zext nneg i32 %330 to i64, !dbg !12
  %332 = or disjoint i64 %15, %331, !dbg !12
  %333 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i), !dbg !23
  %334 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i4), !dbg !23
  %335 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i9), !dbg !23
  %336 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %.0.i14), !dbg !23
  %337 = getelementptr float, ptr addrspace(1) %4, i64 %332, !dbg !24
  %338 = icmp slt i64 %332, %14, !dbg !24
  %339 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !24
  store float %333, ptr addrspace(3) %339, align 4, !dbg !24
  %340 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !24
  store float %334, ptr addrspace(3) %340, align 4, !dbg !24
  %341 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18, !dbg !24
  store float %335, ptr addrspace(3) %341, align 4, !dbg !24
  %342 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !24
  store float %336, ptr addrspace(3) %342, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0), !dbg !24
  %343 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %330, !dbg !24
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !24
  %345 = and i32 %10, 192, !dbg !24
  %346 = icmp eq i32 %345, 0, !dbg !24
  %347 = and i1 %346, %338, !dbg !24
  %348 = and i1 %41, %347, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %337, i1 %348) #6, !dbg !24
  %349 = getelementptr bfloat, ptr addrspace(1) %3, i64 %32, !dbg !25
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %349, i1 true) #6, !dbg !26
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !26
  %352 = bitcast i32 %351 to <2 x bfloat>, !dbg !26
  %353 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !26
  %354 = bitcast i32 %353 to <2 x bfloat>, !dbg !26
  %355 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !26
  %356 = bitcast i32 %355 to <2 x bfloat>, !dbg !26
  %357 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !26
  %358 = bitcast i32 %357 to <2 x bfloat>, !dbg !26
  %359 = extractelement <2 x bfloat> %352, i64 0, !dbg !26
  %360 = extractelement <2 x bfloat> %352, i64 1, !dbg !26
  %361 = extractelement <2 x bfloat> %354, i64 0, !dbg !26
  %362 = extractelement <2 x bfloat> %354, i64 1, !dbg !26
  %363 = extractelement <2 x bfloat> %356, i64 0, !dbg !26
  %364 = extractelement <2 x bfloat> %356, i64 1, !dbg !26
  %365 = extractelement <2 x bfloat> %358, i64 0, !dbg !26
  %366 = extractelement <2 x bfloat> %358, i64 1, !dbg !26
  %367 = fpext bfloat %359 to float, !dbg !27
  %368 = fpext bfloat %360 to float, !dbg !27
  %369 = fpext bfloat %361 to float, !dbg !27
  %370 = fpext bfloat %362 to float, !dbg !27
  %371 = fpext bfloat %363 to float, !dbg !27
  %372 = fpext bfloat %364 to float, !dbg !27
  %373 = fpext bfloat %365 to float, !dbg !27
  %374 = fpext bfloat %366 to float, !dbg !27
  %375 = fmul float %333, %118, !dbg !28
  %376 = fmul float %333, %119, !dbg !28
  %377 = fmul float %333, %120, !dbg !28
  %378 = fmul float %333, %121, !dbg !28
  %379 = fmul float %333, %122, !dbg !28
  %380 = fmul float %333, %123, !dbg !28
  %381 = fmul float %333, %124, !dbg !28
  %382 = fmul float %333, %125, !dbg !28
  %383 = fmul float %334, %126, !dbg !28
  %384 = fmul float %334, %127, !dbg !28
  %385 = fmul float %334, %128, !dbg !28
  %386 = fmul float %334, %129, !dbg !28
  %387 = fmul float %334, %130, !dbg !28
  %388 = fmul float %334, %131, !dbg !28
  %389 = fmul float %334, %132, !dbg !28
  %390 = fmul float %334, %133, !dbg !28
  %391 = fmul float %335, %134, !dbg !28
  %392 = fmul float %335, %135, !dbg !28
  %393 = fmul float %335, %136, !dbg !28
  %394 = fmul float %335, %137, !dbg !28
  %395 = fmul float %335, %138, !dbg !28
  %396 = fmul float %335, %139, !dbg !28
  %397 = fmul float %335, %140, !dbg !28
  %398 = fmul float %335, %141, !dbg !28
  %399 = fmul float %336, %142, !dbg !28
  %400 = fmul float %336, %143, !dbg !28
  %401 = fmul float %336, %144, !dbg !28
  %402 = fmul float %336, %145, !dbg !28
  %403 = fmul float %336, %146, !dbg !28
  %404 = fmul float %336, %147, !dbg !28
  %405 = fmul float %336, %148, !dbg !28
  %406 = fmul float %336, %149, !dbg !28
  %407 = fmul float %375, %367, !dbg !29
  %408 = fmul float %376, %368, !dbg !29
  %409 = fmul float %377, %369, !dbg !29
  %410 = fmul float %378, %370, !dbg !29
  %411 = fmul float %379, %371, !dbg !29
  %412 = fmul float %380, %372, !dbg !29
  %413 = fmul float %381, %373, !dbg !29
  %414 = fmul float %382, %374, !dbg !29
  %415 = fmul float %383, %367, !dbg !29
  %416 = fmul float %384, %368, !dbg !29
  %417 = fmul float %385, %369, !dbg !29
  %418 = fmul float %386, %370, !dbg !29
  %419 = fmul float %387, %371, !dbg !29
  %420 = fmul float %388, %372, !dbg !29
  %421 = fmul float %389, %373, !dbg !29
  %422 = fmul float %390, %374, !dbg !29
  %423 = fmul float %391, %367, !dbg !29
  %424 = fmul float %392, %368, !dbg !29
  %425 = fmul float %393, %369, !dbg !29
  %426 = fmul float %394, %370, !dbg !29
  %427 = fmul float %395, %371, !dbg !29
  %428 = fmul float %396, %372, !dbg !29
  %429 = fmul float %397, %373, !dbg !29
  %430 = fmul float %398, %374, !dbg !29
  %431 = fmul float %399, %367, !dbg !29
  %432 = fmul float %400, %368, !dbg !29
  %433 = fmul float %401, %369, !dbg !29
  %434 = fmul float %402, %370, !dbg !29
  %435 = fmul float %403, %371, !dbg !29
  %436 = fmul float %404, %372, !dbg !29
  %437 = fmul float %405, %373, !dbg !29
  %438 = fmul float %406, %374, !dbg !29
  %439 = getelementptr bfloat, ptr addrspace(1) %1, i64 %33, !dbg !30
  %440 = getelementptr bfloat, ptr addrspace(1) %1, i64 %34, !dbg !30
  %441 = getelementptr bfloat, ptr addrspace(1) %1, i64 %35, !dbg !30
  %442 = getelementptr bfloat, ptr addrspace(1) %1, i64 %36, !dbg !30
  %443 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %439, i1 %46) #6, !dbg !30
  %444 = extractvalue { i32, i32, i32, i32 } %443, 0, !dbg !30
  %445 = bitcast i32 %444 to <2 x bfloat>, !dbg !30
  %446 = extractvalue { i32, i32, i32, i32 } %443, 1, !dbg !30
  %447 = bitcast i32 %446 to <2 x bfloat>, !dbg !30
  %448 = extractvalue { i32, i32, i32, i32 } %443, 2, !dbg !30
  %449 = bitcast i32 %448 to <2 x bfloat>, !dbg !30
  %450 = extractvalue { i32, i32, i32, i32 } %443, 3, !dbg !30
  %451 = bitcast i32 %450 to <2 x bfloat>, !dbg !30
  %452 = extractelement <2 x bfloat> %445, i64 0, !dbg !30
  %453 = extractelement <2 x bfloat> %445, i64 1, !dbg !30
  %454 = extractelement <2 x bfloat> %447, i64 0, !dbg !30
  %455 = extractelement <2 x bfloat> %447, i64 1, !dbg !30
  %456 = extractelement <2 x bfloat> %449, i64 0, !dbg !30
  %457 = extractelement <2 x bfloat> %449, i64 1, !dbg !30
  %458 = extractelement <2 x bfloat> %451, i64 0, !dbg !30
  %459 = extractelement <2 x bfloat> %451, i64 1, !dbg !30
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %440, i1 %47) #6, !dbg !30
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !30
  %462 = bitcast i32 %461 to <2 x bfloat>, !dbg !30
  %463 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !30
  %464 = bitcast i32 %463 to <2 x bfloat>, !dbg !30
  %465 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !30
  %466 = bitcast i32 %465 to <2 x bfloat>, !dbg !30
  %467 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !30
  %468 = bitcast i32 %467 to <2 x bfloat>, !dbg !30
  %469 = extractelement <2 x bfloat> %462, i64 0, !dbg !30
  %470 = extractelement <2 x bfloat> %462, i64 1, !dbg !30
  %471 = extractelement <2 x bfloat> %464, i64 0, !dbg !30
  %472 = extractelement <2 x bfloat> %464, i64 1, !dbg !30
  %473 = extractelement <2 x bfloat> %466, i64 0, !dbg !30
  %474 = extractelement <2 x bfloat> %466, i64 1, !dbg !30
  %475 = extractelement <2 x bfloat> %468, i64 0, !dbg !30
  %476 = extractelement <2 x bfloat> %468, i64 1, !dbg !30
  %477 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %441, i1 %48) #6, !dbg !30
  %478 = extractvalue { i32, i32, i32, i32 } %477, 0, !dbg !30
  %479 = bitcast i32 %478 to <2 x bfloat>, !dbg !30
  %480 = extractvalue { i32, i32, i32, i32 } %477, 1, !dbg !30
  %481 = bitcast i32 %480 to <2 x bfloat>, !dbg !30
  %482 = extractvalue { i32, i32, i32, i32 } %477, 2, !dbg !30
  %483 = bitcast i32 %482 to <2 x bfloat>, !dbg !30
  %484 = extractvalue { i32, i32, i32, i32 } %477, 3, !dbg !30
  %485 = bitcast i32 %484 to <2 x bfloat>, !dbg !30
  %486 = extractelement <2 x bfloat> %479, i64 0, !dbg !30
  %487 = extractelement <2 x bfloat> %479, i64 1, !dbg !30
  %488 = extractelement <2 x bfloat> %481, i64 0, !dbg !30
  %489 = extractelement <2 x bfloat> %481, i64 1, !dbg !30
  %490 = extractelement <2 x bfloat> %483, i64 0, !dbg !30
  %491 = extractelement <2 x bfloat> %483, i64 1, !dbg !30
  %492 = extractelement <2 x bfloat> %485, i64 0, !dbg !30
  %493 = extractelement <2 x bfloat> %485, i64 1, !dbg !30
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %442, i1 %49) #6, !dbg !30
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !30
  %496 = bitcast i32 %495 to <2 x bfloat>, !dbg !30
  %497 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !30
  %498 = bitcast i32 %497 to <2 x bfloat>, !dbg !30
  %499 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !30
  %500 = bitcast i32 %499 to <2 x bfloat>, !dbg !30
  %501 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !30
  %502 = bitcast i32 %501 to <2 x bfloat>, !dbg !30
  %503 = extractelement <2 x bfloat> %496, i64 0, !dbg !30
  %504 = extractelement <2 x bfloat> %496, i64 1, !dbg !30
  %505 = extractelement <2 x bfloat> %498, i64 0, !dbg !30
  %506 = extractelement <2 x bfloat> %498, i64 1, !dbg !30
  %507 = extractelement <2 x bfloat> %500, i64 0, !dbg !30
  %508 = extractelement <2 x bfloat> %500, i64 1, !dbg !30
  %509 = extractelement <2 x bfloat> %502, i64 0, !dbg !30
  %510 = extractelement <2 x bfloat> %502, i64 1, !dbg !30
  %511 = fpext bfloat %452 to float, !dbg !31
  %512 = fpext bfloat %453 to float, !dbg !31
  %513 = fpext bfloat %454 to float, !dbg !31
  %514 = fpext bfloat %455 to float, !dbg !31
  %515 = fpext bfloat %456 to float, !dbg !31
  %516 = fpext bfloat %457 to float, !dbg !31
  %517 = fpext bfloat %458 to float, !dbg !31
  %518 = fpext bfloat %459 to float, !dbg !31
  %519 = fpext bfloat %469 to float, !dbg !31
  %520 = fpext bfloat %470 to float, !dbg !31
  %521 = fpext bfloat %471 to float, !dbg !31
  %522 = fpext bfloat %472 to float, !dbg !31
  %523 = fpext bfloat %473 to float, !dbg !31
  %524 = fpext bfloat %474 to float, !dbg !31
  %525 = fpext bfloat %475 to float, !dbg !31
  %526 = fpext bfloat %476 to float, !dbg !31
  %527 = fpext bfloat %486 to float, !dbg !31
  %528 = fpext bfloat %487 to float, !dbg !31
  %529 = fpext bfloat %488 to float, !dbg !31
  %530 = fpext bfloat %489 to float, !dbg !31
  %531 = fpext bfloat %490 to float, !dbg !31
  %532 = fpext bfloat %491 to float, !dbg !31
  %533 = fpext bfloat %492 to float, !dbg !31
  %534 = fpext bfloat %493 to float, !dbg !31
  %535 = fpext bfloat %503 to float, !dbg !31
  %536 = fpext bfloat %504 to float, !dbg !31
  %537 = fpext bfloat %505 to float, !dbg !31
  %538 = fpext bfloat %506 to float, !dbg !31
  %539 = fpext bfloat %507 to float, !dbg !31
  %540 = fpext bfloat %508 to float, !dbg !31
  %541 = fpext bfloat %509 to float, !dbg !31
  %542 = fpext bfloat %510 to float, !dbg !31
  %543 = fmul float %407, %511, !dbg !32
  %544 = fmul float %408, %512, !dbg !32
  %545 = fmul float %409, %513, !dbg !32
  %546 = fmul float %410, %514, !dbg !32
  %547 = fmul float %411, %515, !dbg !32
  %548 = fmul float %412, %516, !dbg !32
  %549 = fmul float %413, %517, !dbg !32
  %550 = fmul float %414, %518, !dbg !32
  %551 = fmul float %415, %519, !dbg !32
  %552 = fmul float %416, %520, !dbg !32
  %553 = fmul float %417, %521, !dbg !32
  %554 = fmul float %418, %522, !dbg !32
  %555 = fmul float %419, %523, !dbg !32
  %556 = fmul float %420, %524, !dbg !32
  %557 = fmul float %421, %525, !dbg !32
  %558 = fmul float %422, %526, !dbg !32
  %559 = fmul float %423, %527, !dbg !32
  %560 = fmul float %424, %528, !dbg !32
  %561 = fmul float %425, %529, !dbg !32
  %562 = fmul float %426, %530, !dbg !32
  %563 = fmul float %427, %531, !dbg !32
  %564 = fmul float %428, %532, !dbg !32
  %565 = fmul float %429, %533, !dbg !32
  %566 = fmul float %430, %534, !dbg !32
  %567 = fmul float %431, %535, !dbg !32
  %568 = fmul float %432, %536, !dbg !32
  %569 = fmul float %433, %537, !dbg !32
  %570 = fmul float %434, %538, !dbg !32
  %571 = fmul float %435, %539, !dbg !32
  %572 = fmul float %436, %540, !dbg !32
  %573 = fmul float %437, %541, !dbg !32
  %574 = fmul float %438, %542, !dbg !32
  %575 = fsub float 0.000000e+00, %511, !dbg !33
  %576 = fsub float 0.000000e+00, %512, !dbg !33
  %577 = fsub float 0.000000e+00, %513, !dbg !33
  %578 = fsub float 0.000000e+00, %514, !dbg !33
  %579 = fsub float 0.000000e+00, %515, !dbg !33
  %580 = fsub float 0.000000e+00, %516, !dbg !33
  %581 = fsub float 0.000000e+00, %517, !dbg !33
  %582 = fsub float 0.000000e+00, %518, !dbg !33
  %583 = fsub float 0.000000e+00, %519, !dbg !33
  %584 = fsub float 0.000000e+00, %520, !dbg !33
  %585 = fsub float 0.000000e+00, %521, !dbg !33
  %586 = fsub float 0.000000e+00, %522, !dbg !33
  %587 = fsub float 0.000000e+00, %523, !dbg !33
  %588 = fsub float 0.000000e+00, %524, !dbg !33
  %589 = fsub float 0.000000e+00, %525, !dbg !33
  %590 = fsub float 0.000000e+00, %526, !dbg !33
  %591 = fsub float 0.000000e+00, %527, !dbg !33
  %592 = fsub float 0.000000e+00, %528, !dbg !33
  %593 = fsub float 0.000000e+00, %529, !dbg !33
  %594 = fsub float 0.000000e+00, %530, !dbg !33
  %595 = fsub float 0.000000e+00, %531, !dbg !33
  %596 = fsub float 0.000000e+00, %532, !dbg !33
  %597 = fsub float 0.000000e+00, %533, !dbg !33
  %598 = fsub float 0.000000e+00, %534, !dbg !33
  %599 = fsub float 0.000000e+00, %535, !dbg !33
  %600 = fsub float 0.000000e+00, %536, !dbg !33
  %601 = fsub float 0.000000e+00, %537, !dbg !33
  %602 = fsub float 0.000000e+00, %538, !dbg !33
  %603 = fsub float 0.000000e+00, %539, !dbg !33
  %604 = fsub float 0.000000e+00, %540, !dbg !33
  %605 = fsub float 0.000000e+00, %541, !dbg !33
  %606 = fsub float 0.000000e+00, %542, !dbg !33
  %607 = fmul float %575, 0x3FF7154760000000, !dbg !35
  %608 = tail call float @llvm.nvvm.ex2.approx.f(float %607), !dbg !35
  %609 = fmul float %576, 0x3FF7154760000000, !dbg !35
  %610 = tail call float @llvm.nvvm.ex2.approx.f(float %609), !dbg !35
  %611 = fmul float %577, 0x3FF7154760000000, !dbg !35
  %612 = tail call float @llvm.nvvm.ex2.approx.f(float %611), !dbg !35
  %613 = fmul float %578, 0x3FF7154760000000, !dbg !35
  %614 = tail call float @llvm.nvvm.ex2.approx.f(float %613), !dbg !35
  %615 = fmul float %579, 0x3FF7154760000000, !dbg !35
  %616 = tail call float @llvm.nvvm.ex2.approx.f(float %615), !dbg !35
  %617 = fmul float %580, 0x3FF7154760000000, !dbg !35
  %618 = tail call float @llvm.nvvm.ex2.approx.f(float %617), !dbg !35
  %619 = fmul float %581, 0x3FF7154760000000, !dbg !35
  %620 = tail call float @llvm.nvvm.ex2.approx.f(float %619), !dbg !35
  %621 = fmul float %582, 0x3FF7154760000000, !dbg !35
  %622 = tail call float @llvm.nvvm.ex2.approx.f(float %621), !dbg !35
  %623 = fmul float %583, 0x3FF7154760000000, !dbg !35
  %624 = tail call float @llvm.nvvm.ex2.approx.f(float %623), !dbg !35
  %625 = fmul float %584, 0x3FF7154760000000, !dbg !35
  %626 = tail call float @llvm.nvvm.ex2.approx.f(float %625), !dbg !35
  %627 = fmul float %585, 0x3FF7154760000000, !dbg !35
  %628 = tail call float @llvm.nvvm.ex2.approx.f(float %627), !dbg !35
  %629 = fmul float %586, 0x3FF7154760000000, !dbg !35
  %630 = tail call float @llvm.nvvm.ex2.approx.f(float %629), !dbg !35
  %631 = fmul float %587, 0x3FF7154760000000, !dbg !35
  %632 = tail call float @llvm.nvvm.ex2.approx.f(float %631), !dbg !35
  %633 = fmul float %588, 0x3FF7154760000000, !dbg !35
  %634 = tail call float @llvm.nvvm.ex2.approx.f(float %633), !dbg !35
  %635 = fmul float %589, 0x3FF7154760000000, !dbg !35
  %636 = tail call float @llvm.nvvm.ex2.approx.f(float %635), !dbg !35
  %637 = fmul float %590, 0x3FF7154760000000, !dbg !35
  %638 = tail call float @llvm.nvvm.ex2.approx.f(float %637), !dbg !35
  %639 = fmul float %591, 0x3FF7154760000000, !dbg !35
  %640 = tail call float @llvm.nvvm.ex2.approx.f(float %639), !dbg !35
  %641 = fmul float %592, 0x3FF7154760000000, !dbg !35
  %642 = tail call float @llvm.nvvm.ex2.approx.f(float %641), !dbg !35
  %643 = fmul float %593, 0x3FF7154760000000, !dbg !35
  %644 = tail call float @llvm.nvvm.ex2.approx.f(float %643), !dbg !35
  %645 = fmul float %594, 0x3FF7154760000000, !dbg !35
  %646 = tail call float @llvm.nvvm.ex2.approx.f(float %645), !dbg !35
  %647 = fmul float %595, 0x3FF7154760000000, !dbg !35
  %648 = tail call float @llvm.nvvm.ex2.approx.f(float %647), !dbg !35
  %649 = fmul float %596, 0x3FF7154760000000, !dbg !35
  %650 = tail call float @llvm.nvvm.ex2.approx.f(float %649), !dbg !35
  %651 = fmul float %597, 0x3FF7154760000000, !dbg !35
  %652 = tail call float @llvm.nvvm.ex2.approx.f(float %651), !dbg !35
  %653 = fmul float %598, 0x3FF7154760000000, !dbg !35
  %654 = tail call float @llvm.nvvm.ex2.approx.f(float %653), !dbg !35
  %655 = fmul float %599, 0x3FF7154760000000, !dbg !35
  %656 = tail call float @llvm.nvvm.ex2.approx.f(float %655), !dbg !35
  %657 = fmul float %600, 0x3FF7154760000000, !dbg !35
  %658 = tail call float @llvm.nvvm.ex2.approx.f(float %657), !dbg !35
  %659 = fmul float %601, 0x3FF7154760000000, !dbg !35
  %660 = tail call float @llvm.nvvm.ex2.approx.f(float %659), !dbg !35
  %661 = fmul float %602, 0x3FF7154760000000, !dbg !35
  %662 = tail call float @llvm.nvvm.ex2.approx.f(float %661), !dbg !35
  %663 = fmul float %603, 0x3FF7154760000000, !dbg !35
  %664 = tail call float @llvm.nvvm.ex2.approx.f(float %663), !dbg !35
  %665 = fmul float %604, 0x3FF7154760000000, !dbg !35
  %666 = tail call float @llvm.nvvm.ex2.approx.f(float %665), !dbg !35
  %667 = fmul float %605, 0x3FF7154760000000, !dbg !35
  %668 = tail call float @llvm.nvvm.ex2.approx.f(float %667), !dbg !35
  %669 = fmul float %606, 0x3FF7154760000000, !dbg !35
  %670 = tail call float @llvm.nvvm.ex2.approx.f(float %669), !dbg !35
  %671 = fadd float %608, 1.000000e+00, !dbg !36
  %672 = fadd float %610, 1.000000e+00, !dbg !36
  %673 = fadd float %612, 1.000000e+00, !dbg !36
  %674 = fadd float %614, 1.000000e+00, !dbg !36
  %675 = fadd float %616, 1.000000e+00, !dbg !36
  %676 = fadd float %618, 1.000000e+00, !dbg !36
  %677 = fadd float %620, 1.000000e+00, !dbg !36
  %678 = fadd float %622, 1.000000e+00, !dbg !36
  %679 = fadd float %624, 1.000000e+00, !dbg !36
  %680 = fadd float %626, 1.000000e+00, !dbg !36
  %681 = fadd float %628, 1.000000e+00, !dbg !36
  %682 = fadd float %630, 1.000000e+00, !dbg !36
  %683 = fadd float %632, 1.000000e+00, !dbg !36
  %684 = fadd float %634, 1.000000e+00, !dbg !36
  %685 = fadd float %636, 1.000000e+00, !dbg !36
  %686 = fadd float %638, 1.000000e+00, !dbg !36
  %687 = fadd float %640, 1.000000e+00, !dbg !36
  %688 = fadd float %642, 1.000000e+00, !dbg !36
  %689 = fadd float %644, 1.000000e+00, !dbg !36
  %690 = fadd float %646, 1.000000e+00, !dbg !36
  %691 = fadd float %648, 1.000000e+00, !dbg !36
  %692 = fadd float %650, 1.000000e+00, !dbg !36
  %693 = fadd float %652, 1.000000e+00, !dbg !36
  %694 = fadd float %654, 1.000000e+00, !dbg !36
  %695 = fadd float %656, 1.000000e+00, !dbg !36
  %696 = fadd float %658, 1.000000e+00, !dbg !36
  %697 = fadd float %660, 1.000000e+00, !dbg !36
  %698 = fadd float %662, 1.000000e+00, !dbg !36
  %699 = fadd float %664, 1.000000e+00, !dbg !36
  %700 = fadd float %666, 1.000000e+00, !dbg !36
  %701 = fadd float %668, 1.000000e+00, !dbg !36
  %702 = fadd float %670, 1.000000e+00, !dbg !36
  %703 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %671), !dbg !37
  %704 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %672), !dbg !37
  %705 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %673), !dbg !37
  %706 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %674), !dbg !37
  %707 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %675), !dbg !37
  %708 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %676), !dbg !37
  %709 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %677), !dbg !37
  %710 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %678), !dbg !37
  %711 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %679), !dbg !37
  %712 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %680), !dbg !37
  %713 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %681), !dbg !37
  %714 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %682), !dbg !37
  %715 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %683), !dbg !37
  %716 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %684), !dbg !37
  %717 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %685), !dbg !37
  %718 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %686), !dbg !37
  %719 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %687), !dbg !37
  %720 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %688), !dbg !37
  %721 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %689), !dbg !37
  %722 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %690), !dbg !37
  %723 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %691), !dbg !37
  %724 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %692), !dbg !37
  %725 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %693), !dbg !37
  %726 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %694), !dbg !37
  %727 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %695), !dbg !37
  %728 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %696), !dbg !37
  %729 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %697), !dbg !37
  %730 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %698), !dbg !37
  %731 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %699), !dbg !37
  %732 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %700), !dbg !37
  %733 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %701), !dbg !37
  %734 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %702), !dbg !37
  %735 = fmul float %543, %703, !dbg !38
  %736 = fmul float %544, %704, !dbg !38
  %737 = fmul float %545, %705, !dbg !38
  %738 = fmul float %546, %706, !dbg !38
  %739 = fmul float %547, %707, !dbg !38
  %740 = fmul float %548, %708, !dbg !38
  %741 = fmul float %549, %709, !dbg !38
  %742 = fmul float %550, %710, !dbg !38
  %743 = fmul float %551, %711, !dbg !38
  %744 = fmul float %552, %712, !dbg !38
  %745 = fmul float %553, %713, !dbg !38
  %746 = fmul float %554, %714, !dbg !38
  %747 = fmul float %555, %715, !dbg !38
  %748 = fmul float %556, %716, !dbg !38
  %749 = fmul float %557, %717, !dbg !38
  %750 = fmul float %558, %718, !dbg !38
  %751 = fmul float %559, %719, !dbg !38
  %752 = fmul float %560, %720, !dbg !38
  %753 = fmul float %561, %721, !dbg !38
  %754 = fmul float %562, %722, !dbg !38
  %755 = fmul float %563, %723, !dbg !38
  %756 = fmul float %564, %724, !dbg !38
  %757 = fmul float %565, %725, !dbg !38
  %758 = fmul float %566, %726, !dbg !38
  %759 = fmul float %567, %727, !dbg !38
  %760 = fmul float %568, %728, !dbg !38
  %761 = fmul float %569, %729, !dbg !38
  %762 = fmul float %570, %730, !dbg !38
  %763 = fmul float %571, %731, !dbg !38
  %764 = fmul float %572, %732, !dbg !38
  %765 = fmul float %573, %733, !dbg !38
  %766 = fmul float %574, %734, !dbg !38
  %767 = fptrunc float %735 to bfloat, !dbg !39
  %768 = fptrunc float %736 to bfloat, !dbg !39
  %769 = fptrunc float %737 to bfloat, !dbg !39
  %770 = fptrunc float %738 to bfloat, !dbg !39
  %771 = fptrunc float %739 to bfloat, !dbg !39
  %772 = fptrunc float %740 to bfloat, !dbg !39
  %773 = fptrunc float %741 to bfloat, !dbg !39
  %774 = fptrunc float %742 to bfloat, !dbg !39
  %775 = fptrunc float %743 to bfloat, !dbg !39
  %776 = fptrunc float %744 to bfloat, !dbg !39
  %777 = fptrunc float %745 to bfloat, !dbg !39
  %778 = fptrunc float %746 to bfloat, !dbg !39
  %779 = fptrunc float %747 to bfloat, !dbg !39
  %780 = fptrunc float %748 to bfloat, !dbg !39
  %781 = fptrunc float %749 to bfloat, !dbg !39
  %782 = fptrunc float %750 to bfloat, !dbg !39
  %783 = fptrunc float %751 to bfloat, !dbg !39
  %784 = fptrunc float %752 to bfloat, !dbg !39
  %785 = fptrunc float %753 to bfloat, !dbg !39
  %786 = fptrunc float %754 to bfloat, !dbg !39
  %787 = fptrunc float %755 to bfloat, !dbg !39
  %788 = fptrunc float %756 to bfloat, !dbg !39
  %789 = fptrunc float %757 to bfloat, !dbg !39
  %790 = fptrunc float %758 to bfloat, !dbg !39
  %791 = fptrunc float %759 to bfloat, !dbg !39
  %792 = fptrunc float %760 to bfloat, !dbg !39
  %793 = fptrunc float %761 to bfloat, !dbg !39
  %794 = fptrunc float %762 to bfloat, !dbg !39
  %795 = fptrunc float %763 to bfloat, !dbg !39
  %796 = fptrunc float %764 to bfloat, !dbg !39
  %797 = fptrunc float %765 to bfloat, !dbg !39
  %798 = fptrunc float %766 to bfloat, !dbg !39
  %799 = getelementptr bfloat, ptr addrspace(1) %2, i64 %33, !dbg !40
  %800 = getelementptr bfloat, ptr addrspace(1) %2, i64 %34, !dbg !40
  %801 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !40
  %802 = getelementptr bfloat, ptr addrspace(1) %2, i64 %36, !dbg !40
  %803 = insertelement <2 x bfloat> poison, bfloat %767, i64 0, !dbg !40
  %804 = insertelement <2 x bfloat> %803, bfloat %768, i64 1, !dbg !40
  %805 = bitcast <2 x bfloat> %804 to i32, !dbg !40
  %806 = insertelement <2 x bfloat> poison, bfloat %769, i64 0, !dbg !40
  %807 = insertelement <2 x bfloat> %806, bfloat %770, i64 1, !dbg !40
  %808 = bitcast <2 x bfloat> %807 to i32, !dbg !40
  %809 = insertelement <2 x bfloat> poison, bfloat %771, i64 0, !dbg !40
  %810 = insertelement <2 x bfloat> %809, bfloat %772, i64 1, !dbg !40
  %811 = bitcast <2 x bfloat> %810 to i32, !dbg !40
  %812 = insertelement <2 x bfloat> poison, bfloat %773, i64 0, !dbg !40
  %813 = insertelement <2 x bfloat> %812, bfloat %774, i64 1, !dbg !40
  %814 = bitcast <2 x bfloat> %813 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %805, i32 %808, i32 %811, i32 %814, ptr addrspace(1) %799, i1 %46) #6, !dbg !40
  %815 = insertelement <2 x bfloat> poison, bfloat %775, i64 0, !dbg !40
  %816 = insertelement <2 x bfloat> %815, bfloat %776, i64 1, !dbg !40
  %817 = bitcast <2 x bfloat> %816 to i32, !dbg !40
  %818 = insertelement <2 x bfloat> poison, bfloat %777, i64 0, !dbg !40
  %819 = insertelement <2 x bfloat> %818, bfloat %778, i64 1, !dbg !40
  %820 = bitcast <2 x bfloat> %819 to i32, !dbg !40
  %821 = insertelement <2 x bfloat> poison, bfloat %779, i64 0, !dbg !40
  %822 = insertelement <2 x bfloat> %821, bfloat %780, i64 1, !dbg !40
  %823 = bitcast <2 x bfloat> %822 to i32, !dbg !40
  %824 = insertelement <2 x bfloat> poison, bfloat %781, i64 0, !dbg !40
  %825 = insertelement <2 x bfloat> %824, bfloat %782, i64 1, !dbg !40
  %826 = bitcast <2 x bfloat> %825 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %817, i32 %820, i32 %823, i32 %826, ptr addrspace(1) %800, i1 %47) #6, !dbg !40
  %827 = insertelement <2 x bfloat> poison, bfloat %783, i64 0, !dbg !40
  %828 = insertelement <2 x bfloat> %827, bfloat %784, i64 1, !dbg !40
  %829 = bitcast <2 x bfloat> %828 to i32, !dbg !40
  %830 = insertelement <2 x bfloat> poison, bfloat %785, i64 0, !dbg !40
  %831 = insertelement <2 x bfloat> %830, bfloat %786, i64 1, !dbg !40
  %832 = bitcast <2 x bfloat> %831 to i32, !dbg !40
  %833 = insertelement <2 x bfloat> poison, bfloat %787, i64 0, !dbg !40
  %834 = insertelement <2 x bfloat> %833, bfloat %788, i64 1, !dbg !40
  %835 = bitcast <2 x bfloat> %834 to i32, !dbg !40
  %836 = insertelement <2 x bfloat> poison, bfloat %789, i64 0, !dbg !40
  %837 = insertelement <2 x bfloat> %836, bfloat %790, i64 1, !dbg !40
  %838 = bitcast <2 x bfloat> %837 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %829, i32 %832, i32 %835, i32 %838, ptr addrspace(1) %801, i1 %48) #6, !dbg !40
  %839 = insertelement <2 x bfloat> poison, bfloat %791, i64 0, !dbg !40
  %840 = insertelement <2 x bfloat> %839, bfloat %792, i64 1, !dbg !40
  %841 = bitcast <2 x bfloat> %840 to i32, !dbg !40
  %842 = insertelement <2 x bfloat> poison, bfloat %793, i64 0, !dbg !40
  %843 = insertelement <2 x bfloat> %842, bfloat %794, i64 1, !dbg !40
  %844 = bitcast <2 x bfloat> %843 to i32, !dbg !40
  %845 = insertelement <2 x bfloat> poison, bfloat %795, i64 0, !dbg !40
  %846 = insertelement <2 x bfloat> %845, bfloat %796, i64 1, !dbg !40
  %847 = bitcast <2 x bfloat> %846 to i32, !dbg !40
  %848 = insertelement <2 x bfloat> poison, bfloat %797, i64 0, !dbg !40
  %849 = insertelement <2 x bfloat> %848, bfloat %798, i64 1, !dbg !40
  %850 = bitcast <2 x bfloat> %849 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %841, i32 %844, i32 %847, i32 %850, ptr addrspace(1) %802, i1 %49) #6, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 2147483647) i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier.cta.sync.aligned.all(i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { "nvvm.reqntid"="256" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "fused_norm_gate.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/fla/modules")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "layer_norm_gated_fwd_kernel", linkageName: "layer_norm_gated_fwd_kernel", scope: !1, file: !1, line: 33, type: !6, scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 56, column: 24, scope: !5)
!9 = !DILocation(line: 58, column: 23, scope: !5)
!10 = !DILocation(line: 61, column: 54, scope: !5)
!11 = !DILocation(line: 61, column: 72, scope: !5)
!12 = !DILocation(line: 62, column: 18, scope: !5)
!13 = !DILocation(line: 62, column: 49, scope: !5)
!14 = !DILocation(line: 77, column: 32, scope: !5)
!15 = !DILocation(line: 260, column: 15, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !5, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.13/site-packages/triton/language")
!18 = !DILocation(line: 77, column: 23, scope: !5)
!19 = !DILocation(line: 290, column: 36, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 77, column: 50, scope: !5)
!21 = !DILocation(line: 78, column: 33, scope: !5)
!22 = !DILocation(line: 78, column: 25, scope: !5)
!23 = !DILocation(line: 78, column: 17, scope: !5)
!24 = !DILocation(line: 81, column: 21, scope: !5)
!25 = !DILocation(line: 84, column: 26, scope: !5)
!26 = !DILocation(line: 84, column: 22, scope: !5)
!27 = !DILocation(line: 84, column: 44, scope: !5)
!28 = !DILocation(line: 87, column: 86, scope: !5)
!29 = !DILocation(line: 88, column: 20, scope: !5)
!30 = !DILocation(line: 94, column: 18, scope: !5)
!31 = !DILocation(line: 94, column: 49, scope: !5)
!32 = !DILocation(line: 98, column: 20, scope: !5)
!33 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !34)
!34 = !DILocation(line: 98, column: 37, scope: !5)
!35 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !34)
!38 = !DILocation(line: 98, column: 26, scope: !5)
!39 = !DILocation(line: 104, column: 25, scope: !5)
!40 = !DILocation(line: 104, column: 18, scope: !5)
!41 = !DILocation(line: 104, column: 4, scope: !5)
