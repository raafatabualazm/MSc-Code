{"filename": "algo_0.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final sortedList = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n  final target = 13;\n  \n  int low = 0;\n  int high = sortedList.length - 1;\n  int resultIndex = -1;\n  \n  while (low <= high) {\n    final mid = (low + high) ~/ 2;\n    final midValue = sortedList[mid];\n    \n    if (midValue == target) {\n      resultIndex = mid;\n      break;\n    } else if (midValue < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  \n  if (resultIndex != -1) {\n    print('Element $target found at index $resultIndex');\n  } else {\n    print('Element $target not found in the list');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a28c <+312>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a293 <+319>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a297 <+323>:\tmov    QWORD PTR [rax+0x1f],0x1a\n   0x000000000008a29f <+331>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a2a6 <+338>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a2aa <+342>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a2ae <+346>:\tmov    rdx,rcx\n   0x000000000008a2b1 <+349>:\tadd    rdx,rdx\n   0x000000000008a2b4 <+352>:\tmov    QWORD PTR [rax+0x2f],rdx\n   0x000000000008a2b8 <+356>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2bc <+360>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a2c1 <+365>:\tmov    rdi,rax\n   0x000000000008a2c4 <+368>:\tcall   0x8a300 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_2.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define a graph using an adjacency list\n  final Map<int, List<int>> graph = {\n    0: [1, 2],\n    1: [0, 3],\n    2: [0, 3, 4],\n    3: [1, 2],\n    4: [2, 5],\n    5: [4],\n  };\n\n  // Set to track visited nodes\n  final Set<int> visited = <int>{};\n\n  // Stack for DFS traversal\n  final List<int> stack = <int>[];\n\n  // Start DFS from node 0\n  stack.add(0);\n  visited.add(0);\n\n  print('DFS Traversal:');\n\n  while (stack.isNotEmpty) {\n    final int currentNode = stack.removeLast();\n    print('Visited: $currentNode');\n\n    // Process all adjacent nodes\n    for (final int neighbor in graph[currentNode]!) {\n      if (!visited.contains(neighbor)) {\n        visited.add(neighbor);\n        stack.add(neighbor);\n      }\n    }\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a20d <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a211 <+37>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a219 <+45>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a220 <+52>:\tmov    esi,0x2\n   0x000000000008a225 <+57>:\tmov    edx,0x4\n   0x000000000008a22a <+62>:\tcall   0x8a9e0 <new _GrowableList._literal2>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_4.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency matrix\n  // 0: no direct connection\n  final graph = [\n    [0, 4, 0, 0, 0, 0, 0, 8, 0],\n    [4, 0, 8, 0, 0, 0, 0, 11, 0],\n    [0, 8, 0, 7, 0, 4, 0, 0, 2],\n    [0, 0, 7, 0, 9, 14, 0, 0, 0],\n    [0, 0, 0, 9, 0, 10, 0, 0, 0],\n    [0, 0, 4, 14, 10, 0, 2, 0, 0],\n    [0, 0, 0, 0, 0, 2, 0, 1, 6],\n    [8, 11, 0, 0, 0, 0, 1, 0, 7],\n    [0, 0, 2, 0, 0, 0, 6, 7, 0]\n  ];\n\n  final startNode = 0;\n  final distances = dijkstra(graph, startNode);\n\n  print('Shortest distances from node $startNode:');\n  for (var i = 0; i < distances.length; i++) {\n    print('Node $i: ${distances[i]}');\n  }\n}\n\nList<int> dijkstra(List<List<int>> graph, int src) {\n  final n = graph.length;\n  final dist = List<int>.filled(n, 999999); // Large number representing infinity\n  final visited = List<bool>.filled(n, false);\n\n  dist[src] = 0;\n\n  for (var count = 0; count < n - 1; count++) {\n    final u = minDistance(dist, visited);\n    visited[u] = true;\n\n    for (var v = 0; v < n; v++) {\n      if (!visited[v] &&\n          graph[u][v] != 0 &&\n          dist[u] != 999999 &&\n          dist[u] + graph[u][v] < dist[v]) {\n        dist[v] = dist[u] + graph[u][v];\n      }\n    }\n  }\n\n  return dist;\n}\n\nint minDistance(List<int> dist, List<bool> visited) {\n  var min = 999999;\n  var minIndex = -1;\n\n  for (var v = 0; v < dist.length; v++) {\n    if (!visited[v] && dist[v] <= min) {\n      min = dist[v];\n      minIndex = v;\n    }\n  }\n\n  return minIndex;\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a207 <+71>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a20b <+75>:\tmov    QWORD PTR [rax+0x17],rcx\n   0x000000000008a20f <+79>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a217 <+87>:\tmov    rdx,QWORD PTR [rbp+0x10]\n   0x000000000008a21b <+91>:\tmov    QWORD PTR [rax+0xf],rdx\n   0x000000000008a21f <+95>:\tmov    rdx,QWORD PTR [rcx+0x7]\n   0x000000000008a223 <+99>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a227 <+103>:\tmov    rsp,rbp\n   0x000000000008a22a <+106>:\tpop    rbp\n   0x000000000008a22b <+107>:\tret\n   0x000000000008a22c <+108>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a233 <+115>:\tjmp    0x8a1d2 <new ByteData+18>\n   0x000000000008a235:\tint3\n   0x000000000008a236:\tint3\n   0x000000000008a237:\tint3\n   0x000000000008a238 <+0>:\tmov    r8d,0xa831c\n   0x000000000008a23e <+6>:\tjmp    0x83dcc <stub _iso_stub_AllocateObjectStub>\n   0x000000000008a243:\tint3\n   0x000000000008a244 <+0>:\tpush   rbp\n   0x000000000008a245 <+1>:\tmov    rbp,rsp\n   0x000000000008a248 <+4>:\tsub    rsp,0x28\n   0x000000000008a24c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a250 <+12>:\tjbe    0x8a8fe <main+1722>\n   0x000000000008a256 <+18>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a25d <+25>:\tmov    r10d,0x12\n   0x000000000008a263 <+31>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a268 <+36>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a26c <+40>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a274 <+48>:\tmov    QWORD PTR [rax+0x1f],0x8\n   0x000000000008a27c <+56>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008a284 <+64>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a28c <+72>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a294 <+80>:\tmov    QWORD PTR [rax+0x3f],0x0\n   0x000000000008a29c <+88>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a2a4 <+96>:\tmov    QWORD PTR [rax+0x4f],0x10\n   0x000000000008a2ac <+104>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a2b4 <+112>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a2bb <+119>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a2c0 <+124>:\tmov    rcx,rax\n   0x000000000008a2c3 <+127>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2c7 <+131>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a2cb <+135>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2cf <+139>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a2d7 <+147>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a2de <+154>:\tmov    r10d,0x12\n   0x000000000008a2e4 <+160>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a2e9 <+165>:\tmov    rcx,rax\n   0x000000000008a2ec <+168>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a2f0 <+172>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a2f4 <+176>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2f8 <+180>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a2ff <+187>:\tmov    r10d,0x12\n   0x000000000008a305 <+193>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a30a <+198>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a30e <+202>:\tmov    QWORD PTR [rax+0x17],0x8\n   0x000000000008a316 <+210>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a31e <+218>:\tmov    QWORD PTR [rax+0x27],0x10\n   0x000000000008a326 <+226>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a32e <+234>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a336 <+242>:\tmov    QWORD PTR [rax+0x3f],0x0\n   0x000000000008a33e <+250>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a346 <+258>:\tmov    QWORD PTR [rax+0x4f],0x16\n   0x000000000008a34e <+266>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a356 <+274>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a35d <+281>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a362 <+286>:\tmov    rcx,rax\n   0x000000000008a365 <+289>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a369 <+293>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a36d <+297>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a375 <+305>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a379 <+309>:\tmov    rax,rcx\n   0x000000000008a37c <+312>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a380 <+316>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a384 <+320>:\ttest   al,0x1\n   0x000000000008a386 <+322>:\tje     0x8a39f <main+347>\n   0x000000000008a388 <+324>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a38c <+328>:\tshr    r11d,0x2\n   0x000000000008a390 <+332>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a394 <+336>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a398 <+340>:\tje     0x8a39f <main+347>\n   0x000000000008a39a <+342>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a39f <+347>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a3a6 <+354>:\tmov    r10d,0x12\n   0x000000000008a3ac <+360>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a3b1 <+365>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a3b5 <+369>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a3bd <+377>:\tmov    QWORD PTR [rax+0x1f],0x10\n   0x000000000008a3c5 <+385>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008a3cd <+393>:\tmov    QWORD PTR [rax+0x2f],0xe\n   0x000000000008a3d5 <+401>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a3dd <+409>:\tmov    QWORD PTR [rax+0x3f],0x8\n   0x000000000008a3e5 <+417>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a3ed <+425>:\tmov    QWORD PTR [rax+0x4f],0x0\n   0x000000000008a3f5 <+433>:\tmov    QWORD PTR [rax+0x57],0x4\n   0x000000000008a3fd <+441>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a404 <+448>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a409 <+453>:\tmov    rcx,rax\n   0x000000000008a40c <+456>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a410 <+460>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a414 <+464>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a41c <+472>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a420 <+476>:\tmov    rax,rcx\n   0x000000000008a423 <+479>:\tlea    r13,[rdx+0x27]\n   0x000000000008a427 <+483>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a42b <+487>:\ttest   al,0x1\n   0x000000000008a42d <+489>:\tje     0x8a446 <main+514>\n   0x000000000008a42f <+491>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a433 <+495>:\tshr    r11d,0x2\n   0x000000000008a437 <+499>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a43b <+503>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a43f <+507>:\tje     0x8a446 <main+514>\n   0x000000000008a441 <+509>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a446 <+514>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a44d <+521>:\tmov    r10d,0x12\n   0x000000000008a453 <+527>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a458 <+532>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a45c <+536>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a464 <+544>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a46c <+552>:\tmov    QWORD PTR [rax+0x27],0xe\n   0x000000000008a474 <+560>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a47c <+568>:\tmov    QWORD PTR [rax+0x37],0x12\n   0x000000000008a484 <+576>:\tmov    QWORD PTR [rax+0x3f],0x1c\n   0x000000000008a48c <+584>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a494 <+592>:\tmov    QWORD PTR [rax+0x4f],0x0\n   0x000000000008a49c <+600>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a4a4 <+608>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a4ab <+615>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a4b0 <+620>:\tmov    rcx,rax\n   0x000000000008a4b3 <+623>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a4b7 <+627>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a4bb <+631>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a4c3 <+639>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a4c7 <+643>:\tmov    rax,rcx\n   0x000000000008a4ca <+646>:\tlea    r13,[rdx+0x2f]\n   0x000000000008a4ce <+650>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a4d2 <+654>:\ttest   al,0x1\n   0x000000000008a4d4 <+656>:\tje     0x8a4ed <main+681>\n   0x000000000008a4d6 <+658>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a4da <+662>:\tshr    r11d,0x2\n   0x000000000008a4de <+666>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a4e2 <+670>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a4e6 <+674>:\tje     0x8a4ed <main+681>\n   0x000000000008a4e8 <+676>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a4ed <+681>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a4f4 <+688>:\tmov    r10d,0x12\n   0x000000000008a4fa <+694>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a4ff <+699>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a503 <+703>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a50b <+711>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a513 <+719>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008a51b <+727>:\tmov    QWORD PTR [rax+0x2f],0x12\n   0x000000000008a523 <+735>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a52b <+743>:\tmov    QWORD PTR [rax+0x3f],0x14\n   0x000000000008a533 <+751>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a53b <+759>:\tmov    QWORD PTR [rax+0x4f],0x0\n   0x000000000008a543 <+767>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a54b <+775>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a552 <+782>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a557 <+787>:\tmov    rcx,rax\n   0x000000000008a55a <+790>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a55e <+794>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a562 <+798>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a56a <+806>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a56e <+810>:\tmov    rax,rcx\n   0x000000000008a571 <+813>:\tlea    r13,[rdx+0x37]\n   0x000000000008a575 <+817>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a579 <+821>:\ttest   al,0x1\n   0x000000000008a57b <+823>:\tje     0x8a594 <main+848>\n   0x000000000008a57d <+825>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a581 <+829>:\tshr    r11d,0x2\n   0x000000000008a585 <+833>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a589 <+837>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a58d <+841>:\tje     0x8a594 <main+848>\n   0x000000000008a58f <+843>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a594 <+848>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a59b <+855>:\tmov    r10d,0x12\n   0x000000000008a5a1 <+861>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a5a6 <+866>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a5aa <+870>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a5b2 <+878>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a5ba <+886>:\tmov    QWORD PTR [rax+0x27],0x8\n   0x000000000008a5c2 <+894>:\tmov    QWORD PTR [rax+0x2f],0x1c\n   0x000000000008a5ca <+902>:\tmov    QWORD PTR [rax+0x37],0x14\n   0x000000000008a5d2 <+910>:\tmov    QWORD PTR [rax+0x3f],0x0\n   0x000000000008a5da <+918>:\tmov    QWORD PTR [rax+0x47],0x4\n   0x000000000008a5e2 <+926>:\tmov    QWORD PTR [rax+0x4f],0x0\n   0x000000000008a5ea <+934>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a5f2 <+942>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a5f9 <+949>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a5fe <+954>:\tmov    rcx,rax\n   0x000000000008a601 <+957>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a605 <+961>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a609 <+965>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a611 <+973>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a615 <+977>:\tmov    rax,rcx\n   0x000000000008a618 <+980>:\tlea    r13,[rdx+0x3f]\n   0x000000000008a61c <+984>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a620 <+988>:\ttest   al,0x1\n   0x000000000008a622 <+990>:\tje     0x8a63b <main+1015>\n   0x000000000008a624 <+992>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a628 <+996>:\tshr    r11d,0x2\n   0x000000000008a62c <+1000>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a630 <+1004>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a634 <+1008>:\tje     0x8a63b <main+1015>\n   0x000000000008a636 <+1010>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a63b <+1015>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a642 <+1022>:\tmov    r10d,0x12\n   0x000000000008a648 <+1028>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a64d <+1033>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a651 <+1037>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a659 <+1045>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a661 <+1053>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008a669 <+1061>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a671 <+1069>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a679 <+1077>:\tmov    QWORD PTR [rax+0x3f],0x4\n   0x000000000008a681 <+1085>:\tmov    QWORD PTR [rax+0x47],0x0\n   0x000000000008a689 <+1093>:\tmov    QWORD PTR [rax+0x4f],0x2\n   0x000000000008a691 <+1101>:\tmov    QWORD PTR [rax+0x57],0xc\n   0x000000000008a699 <+1109>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a6a0 <+1116>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a6a5 <+1121>:\tmov    rcx,rax\n   0x000000000008a6a8 <+1124>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a6ac <+1128>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a6b0 <+1132>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a6b8 <+1140>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a6bc <+1144>:\tmov    rax,rcx\n   0x000000000008a6bf <+1147>:\tlea    r13,[rdx+0x47]\n   0x000000000008a6c3 <+1151>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a6c7 <+1155>:\ttest   al,0x1\n   0x000000000008a6c9 <+1157>:\tje     0x8a6e2 <main+1182>\n   0x000000000008a6cb <+1159>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a6cf <+1163>:\tshr    r11d,0x2\n   0x000000000008a6d3 <+1167>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a6d7 <+1171>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a6db <+1175>:\tje     0x8a6e2 <main+1182>\n   0x000000000008a6dd <+1177>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a6e2 <+1182>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a6e9 <+1189>:\tmov    r10d,0x12\n   0x000000000008a6ef <+1195>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a6f4 <+1200>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a6f8 <+1204>:\tmov    QWORD PTR [rax+0x17],0x10\n   0x000000000008a700 <+1212>:\tmov    QWORD PTR [rax+0x1f],0x16\n   0x000000000008a708 <+1220>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008a710 <+1228>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a718 <+1236>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a720 <+1244>:\tmov    QWORD PTR [rax+0x3f],0x0\n   0x000000000008a728 <+1252>:\tmov    QWORD PTR [rax+0x47],0x2\n   0x000000000008a730 <+1260>:\tmov    QWORD PTR [rax+0x4f],0x0\n   0x000000000008a738 <+1268>:\tmov    QWORD PTR [rax+0x57],0xe\n   0x000000000008a740 <+1276>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a747 <+1283>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a74c <+1288>:\tmov    rcx,rax\n   0x000000000008a74f <+1291>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a753 <+1295>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a757 <+1299>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a75f <+1307>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a763 <+1311>:\tmov    rax,rcx\n   0x000000000008a766 <+1314>:\tlea    r13,[rdx+0x4f]\n   0x000000000008a76a <+1318>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a76e <+1322>:\ttest   al,0x1\n   0x000000000008a770 <+1324>:\tje     0x8a789 <main+1349>\n   0x000000000008a772 <+1326>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a776 <+1330>:\tshr    r11d,0x2\n   0x000000000008a77a <+1334>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a77e <+1338>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a782 <+1342>:\tje     0x8a789 <main+1349>\n   0x000000000008a784 <+1344>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a789 <+1349>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a790 <+1356>:\tmov    r10d,0x12\n   0x000000000008a796 <+1362>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a79b <+1367>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a79f <+1371>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a7a7 <+1379>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a7af <+1387>:\tmov    QWORD PTR [rax+0x27],0x4\n   0x000000000008a7b7 <+1395>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008a7bf <+1403>:\tmov    QWORD PTR [rax+0x37],0x0\n   0x000000000008a7c7 <+1411>:\tmov    QWORD PTR [rax+0x3f],0x0\n   0x000000000008a7cf <+1419>:\tmov    QWORD PTR [rax+0x47],0xc\n   0x000000000008a7d7 <+1427>:\tmov    QWORD PTR [rax+0x4f],0xe\n   0x000000000008a7df <+1435>:\tmov    QWORD PTR [rax+0x57],0x0\n   0x000000000008a7e7 <+1443>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a7ee <+1450>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a7f3 <+1455>:\tmov    rcx,rax\n   0x000000000008a7f6 <+1458>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a7fa <+1462>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a7fe <+1466>:\tmov    QWORD PTR [rcx+0xf],0x12\n   0x000000000008a806 <+1474>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a80a <+1478>:\tmov    rax,rcx\n   0x000000000008a80d <+1481>:\tlea    r13,[rdx+0x57]\n   0x000000000008a811 <+1485>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a815 <+1489>:\ttest   al,0x1\n   0x000000000008a817 <+1491>:\tje     0x8a830 <main+1516>\n   0x000000000008a819 <+1493>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a81d <+1497>:\tshr    r11d,0x2\n   0x000000000008a821 <+1501>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a825 <+1505>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a829 <+1509>:\tje     0x8a830 <main+1516>\n   0x000000000008a82b <+1511>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a830 <+1516>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008a837 <+1523>:\tcall   0x83e1c <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_5.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Memoization cache\n  final Map<int, int> _memo = {};\n\n  // Recursive Fibonacci function with memoization\n  int fib(int n) {\n    if (n <= 1) return n;\n    // Return cached value if present\n    if (_memo.containsKey(n)) return _memo[n]!;\n    // Compute and cache new value\n    return _memo[n] = fib(n - 1) + fib(n - 2);\n  }\n\n  // Calculate and print first 10 Fibonacci numbers\n  for (int i = 0; i < 10; i++) {\n    print('fib($i) = ${fib(i)}');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a29f <+295>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a2a3 <+299>:\tadd    rcx,0x1\n   0x000000000008a2a7 <+303>:\tmov    rax,rcx\n   0x000000000008a2aa <+306>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a2ae <+310>:\tjmp    0x8a1e4 <main+108>\n   0x000000000008a2b3 <+315>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2b7 <+319>:\tmov    rsp,rbp\n   0x000000000008a2ba <+322>:\tpop    rbp\n   0x000000000008a2bb <+323>:\tret\n   0x000000000008a2bc <+324>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Memoization cache\n4\t  final Map<int, int> _memo = {};\n   0x000000000008a178 <+0>:\tpush   rbp\n   0x000000000008a179 <+1>:\tmov    rbp,rsp\n   0x000000000008a17c <+4>:\tsub    rsp,0x28\n   0x000000000008a180 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a184 <+12>:\tjbe    0x8a2bc <main+324>\n   0x000000000008a18a <+18>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a191 <+25>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a196 <+30>:\tmov    r11,QWORD PTR [r14+0x88]\n   0x000000000008a19d <+37>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a1a1 <+41>:\tcall   0x65e6c <new Map._fromLiteral>\n   0x000000000008a1a6 <+46>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1aa <+50>:\tmov    r10d,0x2\n   0x000000000008a1b0 <+56>:\tcall   0x83d80 <stub _iso_stub_AllocateContextStub>\n\n5\t\n6\t  // Recursive Fibonacci function with memoization\n7\t  int fib(int n) {\n   0x000000000008a1b5 <+61>:\tmov    rcx,rax\n   0x000000000008a1b8 <+64>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1bc <+68>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1c0 <+72>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1c4 <+76>:\tmov    rdx,rcx\n   0x000000000008a1c7 <+79>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000008a1ce <+86>:\tcall   0x840ac <stub _iso_stub_AllocateClosureStub>\n   0x000000000008a1d3 <+91>:\tmov    rcx,rax\n   0x000000000008a1d6 <+94>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a1da <+98>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a1de <+102>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a1e2 <+106>:\txor    eax,eax\n   0x000000000008a1e4 <+108>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a1e8 <+112>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1ec <+116>:\tjbe    0x8a2c8 <main+336>\n   0x000000000008a1f2 <+122>:\tcmp    rax,0xa\n   0x000000000008a1f6 <+126>:\tjge    0x8a2b3 <main+315>\n   0x000000000008a1fc <+132>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a200 <+136>:\tmov    r10d,0x8\n   0x000000000008a206 <+142>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a20b <+147>:\tmov    rcx,rax\n   0x000000000008a20e <+150>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a212 <+154>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a219 <+161>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a21d <+165>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a221 <+169>:\tmov    rax,rdx\n   0x000000000008a224 <+172>:\tadd    rax,rax\n   0x000000000008a227 <+175>:\tjno    0x8a236 <main+190>\n   0x000000000008a22d <+181>:\tcall   0x84f14 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n8\t    if (n <= 1) return n;\n9\t    // Return cached value if present\n10\t    if (_memo.containsKey(n)) return _memo[n]!;\n11\t    // Compute and cache new value\n12\t    return _memo[n] = fib(n - 1) + fib(n - 2);\n13\t  }\n14\t\n15\t  // Calculate and print first 10 Fibonacci numbers\n16\t  for (int i = 0; i < 10; i++) {\n   0x000000000008a2c3 <+331>:\tjmp    0x8a18a <main+18>\n   0x000000000008a2c8 <+336>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2cf <+343>:\tjmp    0x8a1f2 <main+122>\n   0x000000000008a2d4 <+0>:\tpush   rbp\n   0x000000000008a2d5 <+1>:\tmov    rbp,rsp\n   0x000000000008a2d8 <+4>:\tsub    rsp,0x18\n   0x000000000008a2dc <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a2e0 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a2e4 <+16>:\tjbe    0x8a32e <printToConsole+90>\n   0x000000000008a2ea <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a2ee <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a2f5 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a2f9 <+37>:\tjne    0x8a30b <printToConsole+55>\n   0x000000000008a2ff <+43>:\tmov    rdx,QWORD PTR [r15+0x877]\n   0x000000000008a306 <+50>:\tcall   0x831ec <stub _iso_stub_InitLateStaticFieldStub>\n\n17\t    print('fib($i) = ${fib(i)}');\n   0x000000000008a232 <+186>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a236 <+190>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a23a <+194>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a241 <+201>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008a245 <+205>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a249 <+209>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a24e <+214>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a252 <+218>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a256 <+222>:\tmov    r10,QWORD PTR [r15+0x37f]\n   0x000000000008a25d <+229>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a261 <+233>:\tcall   rcx\n   0x000000000008a263 <+235>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a267 <+239>:\tlea    r13,[rdx+0x2f]\n   0x000000000008a26b <+243>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a26f <+247>:\ttest   al,0x1\n   0x000000000008a271 <+249>:\tje     0x8a28a <main+274>\n   0x000000000008a273 <+251>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a277 <+255>:\tshr    r11d,0x2\n   0x000000000008a27b <+259>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a27f <+263>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a283 <+267>:\tje     0x8a28a <main+274>\n   0x000000000008a285 <+269>:\tcall   0x832a8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a28a <+274>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a28e <+278>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a292 <+282>:\tcall   0x587bc <_StringBase._interpolate>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_6.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Item weights and values\n  final weights = [2, 3, 4, 5];\n  final values = [3, 4, 5, 6];\n  final capacity = 5;\n  final n = weights.length;\n\n  // Initialize DP table with dimensions (n+1) x (capacity+1)\n  final dp = List.generate(n + 1, (i) => List.filled(capacity + 1, 0));\n\n  // Build DP table\n  for (int i = 1; i <= n; i++) {\n    for (int w = 0; w <= capacity; w++) {\n      if (weights[i - 1] <= w) {\n        dp[i][w] = (values[i - 1] + dp[i - 1][w - weights[i - 1]]).compareTo(dp[i - 1][w]) > 0\n            ? values[i - 1] + dp[i - 1][w - weights[i - 1]]\n            : dp[i - 1][w];\n      } else {\n        dp[i][w] = dp[i - 1][w];\n      }\n    }\n  }\n\n  // Output the maximum value\n  print('Maximum value: ${dp[n][capacity]}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a6af <+1351>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a6b3 <+1355>:\tmov    rsp,rbp\n   0x000000000008a6b6 <+1358>:\tpop    rbp\n   0x000000000008a6b7 <+1359>:\tret\n   0x000000000008a6b8 <+1360>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Item weights and values\n4\t  final weights = [2, 3, 4, 5];\n   0x000000000008a168 <+0>:\tpush   rbp\n   0x000000000008a169 <+1>:\tmov    rbp,rsp\n   0x000000000008a16c <+4>:\tsub    rsp,0x78\n   0x000000000008a170 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a174 <+12>:\tjbe    0x8a6b8 <main+1360>\n   0x000000000008a17a <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a181 <+25>:\tmov    esi,0x2\n   0x000000000008a186 <+30>:\tmov    edx,0x3\n   0x000000000008a18b <+35>:\tmov    ebx,0x4\n   0x000000000008a190 <+40>:\tmov    r8d,0x5\n   0x000000000008a196 <+46>:\tcall   0x8a7c0 <new _GrowableList._literal4>\n\n5\t  final values = [3, 4, 5, 6];\n   0x000000000008a19b <+51>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a1a2 <+58>:\tmov    esi,0x3\n   0x000000000008a1a7 <+63>:\tmov    edx,0x4\n   0x000000000008a1ac <+68>:\tmov    ebx,0x5\n   0x000000000008a1b1 <+73>:\tmov    r8d,0x6\n   0x000000000008a1b7 <+79>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1bb <+83>:\tcall   0x8a7c0 <new _GrowableList._literal4>\n\n6\t  final capacity = 5;\n7\t  final n = weights.length;\n8\t\n9\t  // Initialize DP table with dimensions (n+1) x (capacity+1)\n10\t  final dp = List.generate(n + 1, (i) => List.filled(capacity + 1, 0));\n11\t\n12\t  // Build DP table\n13\t  for (int i = 1; i <= n; i++) {\n   0x000000000008a6d7 <+1391>:\tjmp    0x8a233 <main+203>\n   0x000000000008a6dc <+1396>:\tcall   QWORD PTR [r14+0x230]\n\n14\t    for (int w = 0; w <= capacity; w++) {\n   0x000000000008a6e3 <+1403>:\tjmp    0x8a2b0 <main+328>\n   0x000000000008a6e8 <+1408>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a6ef <+1415>:\tjmp    0x8a2d5 <main+365>\n   0x000000000008a6f4 <+1420>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a6f9 <+1425>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a6fe <+1430>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a703 <+1435>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a708 <+1440>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a70d <+1445>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a712 <+1450>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a717 <+1455>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a71c <+1460>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a721:\tint3\n   0x000000000008a722:\tint3\n   0x000000000008a723:\tint3\n\n15\t      if (weights[i - 1] <= w) {\n16\t        dp[i][w] = (values[i - 1] + dp[i - 1][w - weights[i - 1]]).compareTo(dp[i - 1][w]) > 0\n   0x000000000008a379 <+529>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a37d <+533>:\tmov    ecx,DWORD PTR [rdx-0x1]\n   0x000000000008a380 <+536>:\tshr    ecx,0xc\n   0x000000000008a383 <+539>:\tmov    QWORD PTR [rsp+0x8],rdx\n   0x000000000008a388 <+544>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a38c <+548>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a390 <+552>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a393 <+555>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a397 <+559>:\tsar    rcx,1\n   0x000000000008a39a <+562>:\tjae    0x8a3a1 <main+569>\n   0x000000000008a39c <+564>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a3a1 <+569>:\tsar    rax,1\n   0x000000000008a3a4 <+572>:\tjae    0x8a3ab <main+579>\n   0x000000000008a3a6 <+574>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a3ab <+579>:\tmov    rdx,rcx\n   0x000000000008a3ae <+582>:\tadd    rdx,rax\n   0x000000000008a3b1 <+585>:\tmov    rdi,QWORD PTR [rbp-0x48]\n   0x000000000008a3b5 <+589>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a3b9 <+593>:\tmov    QWORD PTR [rbp-0x58],rdx\n   0x000000000008a3bd <+597>:\tmov    rcx,QWORD PTR [rsi+rdi*8+0x17]\n   0x000000000008a3c2 <+602>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a3c6 <+606>:\tmov    rax,r8\n   0x000000000008a3c9 <+609>:\tadd    rax,rax\n   0x000000000008a3cc <+612>:\tjno    0x8a3db <main+627>\n   0x000000000008a3d2 <+618>:\tcall   0x84f04 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a3d7 <+623>:\tmov    QWORD PTR [rax+0x7],r8\n   0x000000000008a3db <+627>:\tmov    QWORD PTR [rbp-0x38],rax\n   0x000000000008a3df <+631>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a3e2 <+634>:\tshr    ebx,0xc\n   0x000000000008a3e5 <+637>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a3ea <+642>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a3ee <+646>:\tmov    rcx,rbx\n   0x000000000008a3f1 <+649>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a3f5 <+653>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a3f8 <+656>:\tsar    rax,1\n   0x000000000008a3fb <+659>:\tjae    0x8a402 <main+666>\n   0x000000000008a3fd <+661>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a402 <+666>:\tmov    rcx,QWORD PTR [rbp-0x58]\n   0x000000000008a406 <+670>:\tcmp    rcx,rax\n   0x000000000008a409 <+673>:\tjl     0x8a4cb <main+867>\n   0x000000000008a40f <+679>:\tcmp    rcx,rax\n   0x000000000008a412 <+682>:\tjle    0x8a4cb <main+867>\n   0x000000000008a418 <+688>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a41c <+692>:\tmov    r8,QWORD PTR [rbp-0x18]\n   0x000000000008a420 <+696>:\tmov    rsi,QWORD PTR [rbp-0x48]\n   0x000000000008a424 <+700>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a428 <+704>:\tmov    rax,QWORD PTR [r8+0xf]\n   0x000000000008a42c <+708>:\tsar    rax,1\n   0x000000000008a42f <+711>:\tmov    rbx,rsi\n   0x000000000008a432 <+714>:\tcmp    rbx,rax\n   0x000000000008a435 <+717>:\tjae    0x8a708 <main+1440>\n   0x000000000008a43b <+723>:\tmov    rax,QWORD PTR [r8+0x17]\n   0x000000000008a43f <+727>:\tmov    r9,QWORD PTR [rax+rsi*8+0x17]\n   0x000000000008a444 <+732>:\tmov    QWORD PTR [rbp-0x60],r9\n   0x000000000008a448 <+736>:\tmov    rcx,QWORD PTR [rdx+rsi*8+0x17]\n   0x000000000008a44d <+741>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a451 <+745>:\tsar    rax,1\n   0x000000000008a454 <+748>:\tmov    rbx,rsi\n   0x000000000008a457 <+751>:\tcmp    rbx,rax\n   0x000000000008a45a <+754>:\tjae    0x8a70d <main+1445>\n   0x000000000008a460 <+760>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a464 <+764>:\tmov    rbx,QWORD PTR [rax+rsi*8+0x17]\n   0x000000000008a469 <+769>:\tsar    rbx,1\n   0x000000000008a46c <+772>:\tjae    0x8a473 <main+779>\n   0x000000000008a46e <+774>:\tmov    rbx,QWORD PTR [rbx+rbx*1+0x8]\n   0x000000000008a473 <+779>:\tmov    r10,QWORD PTR [rbp-0x20]\n   0x000000000008a477 <+783>:\tsub    r10,rbx\n   0x000000000008a47a <+786>:\tmov    rax,r10\n   0x000000000008a47d <+789>:\tadd    rax,rax\n   0x000000000008a480 <+792>:\tjno    0x8a48f <main+807>\n   0x000000000008a486 <+798>:\tcall   0x84f04 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a517 <+943>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a51b <+947>:\tmov    edx,DWORD PTR [rcx-0x1]\n   0x000000000008a51e <+950>:\tshr    edx,0xc\n   0x000000000008a521 <+953>:\tmov    QWORD PTR [rsp+0x10],rcx\n   0x000000000008a526 <+958>:\tmov    r11,QWORD PTR [rbp-0x38]\n   0x000000000008a52a <+962>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a52f <+967>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a533 <+971>:\tmov    rcx,rdx\n   0x000000000008a536 <+974>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a53a <+978>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n   0x000000000008a541 <+985>:\tjmp    0x8a5dc <main+1140>\n   0x000000000008a546 <+990>:\tmov    r8,r9\n   0x000000000008a549 <+993>:\tmov    rdi,r12\n   0x000000000008a54c <+996>:\tmov    rsi,r10\n   0x000000000008a54f <+999>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a553 <+1003>:\tmov    rbx,r8\n   0x000000000008a556 <+1006>:\tcmp    rbx,rax\n   0x000000000008a559 <+1009>:\tjae    0x8a712 <main+1450>\n   0x000000000008a55f <+1015>:\tmov    r9,QWORD PTR [rdx+r8*8+0x17]\n   0x000000000008a564 <+1020>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a568 <+1024>:\tmov    rbx,rsi\n   0x000000000008a56b <+1027>:\tmov    QWORD PTR [rbp-0x40],r9\n   0x000000000008a56f <+1031>:\tcmp    rbx,rax\n   0x000000000008a572 <+1034>:\tjae    0x8a717 <main+1455>\n   0x000000000008a578 <+1040>:\tmov    rcx,QWORD PTR [rdx+rsi*8+0x17]\n   0x000000000008a57d <+1045>:\tmov    rax,rdi\n   0x000000000008a580 <+1048>:\tadd    rax,rax\n   0x000000000008a583 <+1051>:\tjno    0x8a592 <main+1066>\n   0x000000000008a589 <+1057>:\tcall   0x84f04 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n17\t            ? values[i - 1] + dp[i - 1][w - weights[i - 1]]\n   0x000000000008a48b <+803>:\tmov    QWORD PTR [rax+0x7],r10\n   0x000000000008a48f <+807>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a492 <+810>:\tshr    ebx,0xc\n   0x000000000008a495 <+813>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a49a <+818>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a49e <+822>:\tmov    rcx,rbx\n   0x000000000008a4a1 <+825>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4a5 <+829>:\tcall   QWORD PTR [rax+rcx*8]\n\n18\t            : dp[i - 1][w];\n   0x000000000008a4a8 <+832>:\tmov    rcx,QWORD PTR [rbp-0x60]\n   0x000000000008a4ac <+836>:\tsar    rcx,1\n   0x000000000008a4af <+839>:\tjae    0x8a4b6 <main+846>\n   0x000000000008a4b1 <+841>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a4b6 <+846>:\tsar    rax,1\n   0x000000000008a4b9 <+849>:\tjae    0x8a4c0 <main+856>\n   0x000000000008a4bb <+851>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a4c0 <+856>:\tadd    rcx,rax\n   0x000000000008a4c3 <+859>:\tmov    rdx,rcx\n   0x000000000008a4c6 <+862>:\tjmp    0x8a502 <main+922>\n   0x000000000008a4cb <+867>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a4cf <+871>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a4d3 <+875>:\tmov    rcx,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a4d8 <+880>:\tmov    edx,DWORD PTR [rcx-0x1]\n   0x000000000008a4db <+883>:\tshr    edx,0xc\n   0x000000000008a4de <+886>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a4e3 <+891>:\tmov    r11,QWORD PTR [rbp-0x38]\n   0x000000000008a4e7 <+895>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a4eb <+899>:\tmov    rcx,rdx\n   0x000000000008a4ee <+902>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4f2 <+906>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a4f5 <+909>:\tsar    rax,1\n   0x000000000008a4f8 <+912>:\tjae    0x8a4ff <main+919>\n   0x000000000008a4fa <+914>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a4ff <+919>:\tmov    rdx,rax\n   0x000000000008a502 <+922>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a506 <+926>:\tmov    rax,rdx\n   0x000000000008a509 <+929>:\tadd    rax,rax\n   0x000000000008a50c <+932>:\tjno    0x8a51b <main+947>\n   0x000000000008a512 <+938>:\tcall   0x84f04 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n19\t      } else {\n20\t        dp[i][w] = dp[i - 1][w];\n   0x000000000008a58e <+1062>:\tmov    QWORD PTR [rax+0x7],rdi\n   0x000000000008a592 <+1066>:\tmov    QWORD PTR [rbp-0x38],rax\n   0x000000000008a596 <+1070>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a599 <+1073>:\tshr    ebx,0xc\n   0x000000000008a59c <+1076>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a5a1 <+1081>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a5a5 <+1085>:\tmov    rcx,rbx\n   0x000000000008a5a8 <+1088>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5ac <+1092>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a5af <+1095>:\tmov    rcx,rax\n   0x000000000008a5b2 <+1098>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a5b6 <+1102>:\tmov    edx,DWORD PTR [rax-0x1]\n   0x000000000008a5b9 <+1105>:\tshr    edx,0xc\n   0x000000000008a5bc <+1108>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a5c1 <+1113>:\tmov    r11,QWORD PTR [rbp-0x38]\n   0x000000000008a5c5 <+1117>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a5ca <+1122>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a5ce <+1126>:\tmov    rcx,rdx\n   0x000000000008a5d1 <+1129>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5d5 <+1133>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n   0x000000000008a5dc <+1140>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a5e0 <+1144>:\tadd    rax,0x1\n   0x000000000008a5e4 <+1148>:\tmov    r12,rax\n   0x000000000008a5e7 <+1151>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a5eb <+1155>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a5ef <+1159>:\tmov    r9,QWORD PTR [rbp-0x50]\n   0x000000000008a5f3 <+1163>:\tmov    r10,QWORD PTR [rbp-0x48]\n   0x000000000008a5f7 <+1167>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a5fb <+1171>:\tmov    r8,QWORD PTR [rbp-0x10]\n   0x000000000008a5ff <+1175>:\tjmp    0x8a2c7 <main+351>\n   0x000000000008a604 <+1180>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a608 <+1184>:\tadd    rax,0x1\n   0x000000000008a60c <+1188>:\tmov    r9,rax\n   0x000000000008a60f <+1191>:\tjmp    0x8a292 <main+298>\n   0x000000000008a614 <+1196>:\tmov    rax,rdx\n   0x000000000008a617 <+1199>:\tmov    rcx,r8\n   0x000000000008a61a <+1202>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a61e <+1206>:\tmov    r10d,0x4\n   0x000000000008a624 <+1212>:\tcall   0x84c80 <stub _iso_stub_AllocateArrayStub>\n\n21\t      }\n22\t    }\n23\t  }\n24\t\n25\t  // Output the maximum value\n26\t  print('Maximum value: ${dp[n][capacity]}');\n   0x000000000008a629 <+1217>:\tmov    rdx,rax\n   0x000000000008a62c <+1220>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a630 <+1224>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a637 <+1231>:\tmov    QWORD PTR [rdx+0x17],r11\n   0x000000000008a63b <+1235>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a63f <+1239>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x000000000008a643 <+1243>:\tcmp    rbx,rax\n   0x000000000008a646 <+1246>:\tjae    0x8a71c <main+1460>\n   0x000000000008a64c <+1252>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a650 <+1256>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a654 <+1260>:\tmov    rbx,QWORD PTR [rax+rcx*8+0x17]\n   0x000000000008a659 <+1265>:\tmov    ecx,DWORD PTR [rbx-0x1]\n   0x000000000008a65c <+1268>:\tshr    ecx,0xc\n   0x000000000008a65f <+1271>:\tmov    QWORD PTR [rsp+0x8],rbx\n   0x000000000008a664 <+1276>:\tmov    QWORD PTR [rsp],0xa\n   0x000000000008a66c <+1284>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a670 <+1288>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a673 <+1291>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a677 <+1295>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a67b <+1299>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a67f <+1303>:\ttest   al,0x1\n   0x000000000008a681 <+1305>:\tje     0x8a69a <main+1330>\n   0x000000000008a683 <+1307>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a687 <+1311>:\tshr    r11d,0x2\n   0x000000000008a68b <+1315>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a68f <+1319>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a693 <+1323>:\tje     0x8a69a <main+1330>\n   0x000000000008a695 <+1325>:\tcall   0x83298 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a69a <+1330>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a69e <+1334>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a6a2 <+1338>:\tcall   0x587d0 <_StringBase._interpolate>\n   0x000000000008a6a7 <+1343>:\tmov    rdi,rax\n   0x000000000008a6aa <+1346>:\tcall   0x8a724 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_9.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Adjacency list representation of a DAG (Directed Acyclic Graph)\n  final Map<int, List<int>> graph = {\n    0: [1, 2],\n    1: [3],\n    2: [3],\n    3: [4],\n    4: [],\n  };\n\n  // Calculate in-degree for each node\n  final Map<int, int> inDegree = {};\n  graph.forEach((node, neighbors) {\n    inDegree.putIfAbsent(node, () => 0);\n    for (final neighbor in neighbors) {\n      inDegree.update(neighbor, (value) => value + 1, ifAbsent: () => 1);\n    }\n  });\n\n  // Initialize queue with nodes having zero in-degree\n  final queue = <int>[];\n  inDegree.forEach((node, degree) {\n    if (degree == 0) queue.add(node);\n  });\n\n  // Perform topological sort\n  final sorted = <int>[];\n  while (queue.isNotEmpty) {\n    final node = queue.removeAt(0);\n    sorted.add(node);\n    for (final neighbor in graph[node]!) {\n      inDegree[neighbor] = inDegree[neighbor]! - 1;\n      if (inDegree[neighbor] == 0) {\n        queue.add(neighbor);\n      }\n    }\n  }\n\n  // Check for cycles (should not occur in a DAG)\n  if (sorted.length != graph.length) {\n    print('Error: Graph contains a cycle!');\n  } else {\n    print('Topologically sorted order: $sorted');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x0000000000072fa0 <+1616>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x0000000000072fa4 <+1620>:\tmov    rsp,rbp\n   0x0000000000072fa7 <+1623>:\tpop    rbp\n   0x0000000000072fa8 <+1624>:\tret\n   0x0000000000072fa9 <+1625>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Adjacency list representation of a DAG (Directed Acyclic Graph)\n4\t  final Map<int, List<int>> graph = {\n   0x0000000000072b24 <+468>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x0000000000072b28 <+472>:\tlea    r13,[rdx+0x5f]\n   0x0000000000072b2c <+476>:\tmov    QWORD PTR [r13+0x0],rax\n   0x0000000000072b30 <+480>:\ttest   al,0x1\n   0x0000000000072b32 <+482>:\tje     0x72b4b <main+507>\n   0x0000000000072b34 <+484>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x0000000000072b38 <+488>:\tshr    r11d,0x2\n   0x0000000000072b3c <+492>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x0000000000072b40 <+496>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x0000000000072b44 <+500>:\tje     0x72b4b <main+507>\n   0x0000000000072b46 <+502>:\tcall   0x84130 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x0000000000072b4b <+507>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x0000000000072b52 <+514>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x0000000000072b57 <+519>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x0000000000072b5b <+523>:\tmov    QWORD PTR [rsp],r11\n   0x0000000000072b5f <+527>:\tcall   0x67be4 <new Map._fromLiteral>\n\n5\t    0: [1, 2],\n   0x0000000000072971 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x0000000000072975 <+37>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000007297d <+45>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x0000000000072984 <+52>:\tmov    esi,0x2\n   0x0000000000072989 <+57>:\tmov    edx,0x4\n   0x000000000007298e <+62>:\tcall   0x730d4 <new _GrowableList._literal2>\n\n6\t    1: [3],\n7\t    2: [3],\n8\t    3: [4],\n9\t    4: [],\n   0x0000000000072acd <+381>:\tmov    rcx,rax\n   0x0000000000072ad0 <+384>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x0000000000072ad4 <+388>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x0000000000072ad8 <+392>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x0000000000072ae0 <+400>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x0000000000072ae4 <+404>:\tmov    rax,rcx\n   0x0000000000072ae7 <+407>:\tlea    r13,[rdx+0x4f]\n   0x0000000000072aeb <+411>:\tmov    QWORD PTR [r13+0x0],rax\n   0x0000000000072aef <+415>:\ttest   al,0x1\n   0x0000000000072af1 <+417>:\tje     0x72b0a <main+442>\n   0x0000000000072af3 <+419>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x0000000000072af7 <+423>:\tshr    r11d,0x2\n   0x0000000000072afb <+427>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x0000000000072aff <+431>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x0000000000072b03 <+435>:\tje     0x72b0a <main+442>\n   0x0000000000072b05 <+437>:\tcall   0x84130 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x0000000000072b0a <+442>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x0000000000072b0e <+446>:\tmov    QWORD PTR [rdx+0x57],0x8\n   0x0000000000072b16 <+454>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x0000000000072b1d <+461>:\txor    esi,esi\n   0x0000000000072b1f <+463>:\tcall   0x546e8 <new _GrowableList>\n\n10\t  };\n11\t\n12\t  // Calculate in-degree for each node\n13\t  final Map<int, int> inDegree = {};\n   0x0000000000072b64 <+532>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x0000000000072b68 <+536>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x0000000000072b6f <+543>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x0000000000072b74 <+548>:\tmov    r11,QWORD PTR [r14+0x88]\n   0x0000000000072b7b <+555>:\tmov    QWORD PTR [rsp],r11\n   0x0000000000072b7f <+559>:\tcall   0x67be4 <new Map._fromLiteral>\n   0x0000000000072b84 <+564>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x0000000000072b88 <+568>:\tmov    r10d,0x2\n   0x0000000000072b8e <+574>:\tcall   0x84c08 <stub _iso_stub_AllocateContextStub>\n\n14\t  graph.forEach((node, neighbors) {\n   0x0000000000072b93 <+579>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x0000000000072b97 <+583>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x0000000000072b9b <+587>:\tmov    QWORD PTR [rax+0x17],rdi\n   0x0000000000072b9f <+591>:\tmov    rdx,rax\n   0x0000000000072ba2 <+594>:\tmov    rbx,QWORD PTR [r15+0x7c7]\n   0x0000000000072ba9 <+601>:\tcall   0x84f34 <stub _iso_stub_AllocateClosureStub>\n   0x0000000000072bae <+606>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x0000000000072bb2 <+610>:\tmov    rsi,rax\n   0x0000000000072bb5 <+613>:\tcall   0x74ce8 <_LinkedHashMapMixin.forEach>\n\n15\t    inDegree.putIfAbsent(node, () => 0);\n16\t    for (final neighbor in neighbors) {\n17\t      inDegree.update(neighbor, (value) => value + 1, ifAbsent: () => 1);\n18\t    }\n19\t  });\n20\t\n21\t  // Initialize queue with nodes having zero in-degree\n22\t  final queue = <int>[];\n   0x0000000000072bba <+618>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x0000000000072bc1 <+625>:\txor    esi,esi\n   0x0000000000072bc3 <+627>:\tcall   0x546e8 <new _GrowableList>\n\n23\t  inDegree.forEach((node, degree) {\n   0x0000000000072bc8 <+632>:\tmov    rcx,rax\n   0x0000000000072bcb <+635>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x0000000000072bcf <+639>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x0000000000072bd3 <+643>:\tmov    QWORD PTR [rdx+0x1f],rax\n   0x0000000000072bd7 <+647>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x0000000000072bdb <+651>:\tshr    r11d,0x2\n   0x0000000000072bdf <+655>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x0000000000072be3 <+659>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x0000000000072be7 <+663>:\tje     0x72bee <main+670>\n   0x0000000000072be9 <+665>:\tcall   0x84602 <stub _iso_stub_WriteBarrierWrappersStub+26>\n   0x0000000000072bee <+670>:\tmov    rbx,QWORD PTR [r15+0x7cf]\n   0x0000000000072bf5 <+677>:\tcall   0x84f34 <stub _iso_stub_AllocateClosureStub>\n   0x0000000000072bfa <+682>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x0000000000072bfe <+686>:\tmov    rsi,rax\n   0x0000000000072c01 <+689>:\tcall   0x74ce8 <_LinkedHashMapMixin.forEach>\n\n24\t    if (degree == 0) queue.add(node);\n25\t  });\n26\t\n27\t  // Perform topological sort\n28\t  final sorted = <int>[];\n   0x0000000000072c06 <+694>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x0000000000072c0d <+701>:\txor    esi,esi\n   0x0000000000072c0f <+703>:\tcall   0x546e8 <new _GrowableList>\n\n29\t  while (queue.isNotEmpty) {\n   0x0000000000072fb0 <+1632>:\tjmp    0x72962 <main+18>\n   0x0000000000072fb5 <+1637>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000072fbc <+1644>:\tjmp    0x72c31 <main+737>\n   0x0000000000072fc1 <+1649>:\tcall   0x8605c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n30\t    final node = queue.removeAt(0);\n31\t    sorted.add(node);\n32\t    for (final neighbor in graph[node]!) {\n   0x0000000000072d60 <+1040>:\tmov    rcx,rax\n   0x0000000000072d63 <+1043>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x0000000000072d67 <+1047>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x0000000000072d6b <+1051>:\tcmp    rdx,rcx\n   0x0000000000072d6e <+1054>:\tjne    0x72d7d <main+1069>\n   0x0000000000072d74 <+1060>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x0000000000072d78 <+1064>:\tjmp    0x72d80 <main+1072>\n   0x0000000000072d7d <+1069>:\tmov    rdi,rcx\n   0x0000000000072d80 <+1072>:\tcmp    rdi,QWORD PTR [r14+0x70]\n   0x0000000000072d84 <+1076>:\tje     0x72fd2 <main+1666>\n   0x0000000000072d8a <+1082>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x0000000000072d8d <+1085>:\tshr    ecx,0xc\n   0x0000000000072d90 <+1088>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x0000000000072d94 <+1092>:\tcall   QWORD PTR [rax+rcx*8+0x66f8]\n   0x0000000000072d9b <+1099>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x0000000000072d9f <+1103>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x0000000000072da3 <+1107>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x0000000000072da7 <+1111>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000072dab <+1115>:\tjbe    0x72fd7 <main+1671>\n   0x0000000000072db1 <+1121>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x0000000000072db4 <+1124>:\tshr    ecx,0xc\n   0x0000000000072db7 <+1127>:\tmov    rdi,rax\n   0x0000000000072dba <+1130>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x0000000000072dbe <+1134>:\tcall   QWORD PTR [rax+rcx*8+0x7a98]\n   0x0000000000072dc5 <+1141>:\ttest   al,0x10\n   0x0000000000072dc7 <+1143>:\tjne    0x72f20 <main+1488>\n   0x0000000000072dcd <+1149>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x0000000000072dd1 <+1153>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x0000000000072dd5 <+1157>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x0000000000072dd8 <+1160>:\tshr    ecx,0xc\n   0x0000000000072ddb <+1163>:\tmov    rdi,rax\n   0x0000000000072dde <+1166>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x0000000000072de2 <+1170>:\tcall   QWORD PTR [rax+rcx*8+0x7aa8]\n   0x0000000000072fcd <+1661>:\tjmp    0x72c8c <main+828>\n   0x0000000000072fd2 <+1666>:\tcall   0x8619c <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n   0x0000000000072fd7 <+1671>:\tcall   QWORD PTR [r14+0x230]\n\n33\t      inDegree[neighbor] = inDegree[neighbor]! - 1;\n   0x0000000000072fde <+1678>:\tjmp    0x72db1 <main+1121>\n   0x0000000000072fe3 <+1683>:\tcall   0x8619c <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n34\t      if (inDegree[neighbor] == 0) {\n35\t        queue.add(neighbor);\n36\t      }\n37\t    }\n38\t  }\n39\t\n40\t  // Check for cycles (should not occur in a DAG)\n41\t  if (sorted.length != graph.length) {\n   0x0000000000072ec6 <+1398>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x0000000000072eca <+1402>:\tmov    rbx,QWORD PTR [rbp-0x28]\n   0x0000000000072ece <+1406>:\tmov    rax,rbx\n   0x0000000000072ed1 <+1409>:\tadd    rax,0x1\n   0x0000000000072ed5 <+1413>:\tmov    rdx,rax\n   0x0000000000072ed8 <+1416>:\tadd    rdx,rdx\n   0x0000000000072edb <+1419>:\tmov    QWORD PTR [rcx+0xf],rdx\n   0x0000000000072edf <+1423>:\tmov    rdx,QWORD PTR [rcx+0x17]\n   0x0000000000072ee3 <+1427>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x0000000000072ee7 <+1431>:\tlea    r13,[rdx+rbx*8+0x17]\n   0x0000000000072eec <+1436>:\tmov    QWORD PTR [r13+0x0],rax\n   0x0000000000072ef0 <+1440>:\ttest   al,0x1\n   0x0000000000072ef2 <+1442>:\tje     0x72f0b <main+1467>\n   0x0000000000072ef4 <+1444>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x0000000000072ef8 <+1448>:\tshr    r11d,0x2\n   0x0000000000072efc <+1452>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x0000000000072f00 <+1456>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x0000000000072f04 <+1460>:\tje     0x72f0b <main+1467>\n   0x0000000000072f06 <+1462>:\tcall   0x84130 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x0000000000072f0b <+1467>:\tjmp    0x72f14 <main+1476>\n   0x0000000000072f10 <+1472>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x0000000000072f14 <+1476>:\tmov    rdx,rcx\n   0x0000000000072f17 <+1479>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x0000000000072f1b <+1483>:\tjmp    0x72da3 <main+1107>\n   0x0000000000072f20 <+1488>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x0000000000072f24 <+1492>:\tmov    r8,rcx\n   0x0000000000072f27 <+1495>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x0000000000072f2b <+1499>:\tjmp    0x72c1f <main+719>\n   0x0000000000072f30 <+1504>:\tmov    rax,rcx\n   0x0000000000072f33 <+1507>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x0000000000072f37 <+1511>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x0000000000072f3b <+1515>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x0000000000072f3f <+1519>:\tmov    QWORD PTR [rsp],r11\n   0x0000000000072f43 <+1523>:\tcall   0x58d90 <_LinkedHashMapMixin.length>\n\n42\t    print('Error: Graph contains a cycle!');\n   0x0000000000072f48 <+1528>:\tmov    rcx,rax\n   0x0000000000072f4b <+1531>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x0000000000072f4f <+1535>:\tcmp    rax,rcx\n   0x0000000000072f52 <+1538>:\tje     0x72f69 <main+1561>\n   0x0000000000072f58 <+1544>:\tmov    rdi,QWORD PTR [r15+0x7d7]\n   0x0000000000072f5f <+1551>:\tcall   0x73038 <print>\n   0x0000000000072f64 <+1556>:\tjmp    0x72fa0 <main+1616>\n   0x0000000000072f69 <+1561>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x0000000000072f6d <+1565>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x0000000000072f71 <+1569>:\tmov    r10d,0x4\n   0x0000000000072f77 <+1575>:\tcall   0x85b18 <stub _iso_stub_AllocateArrayStub>\n\n43\t  } else {\n44\t    print('Topologically sorted order: $sorted');\n   0x0000000000072f7c <+1580>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x0000000000072f83 <+1587>:\tmov    QWORD PTR [rax+0x17],r11\n   0x0000000000072f87 <+1591>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x0000000000072f8b <+1595>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x0000000000072f8f <+1599>:\tmov    QWORD PTR [rsp],rax\n   0x0000000000072f93 <+1603>:\tcall   0x5b3a4 <_StringBase._interpolate>\n   0x0000000000072f98 <+1608>:\tmov    rdi,rax\n   0x0000000000072f9b <+1611>:\tcall   0x73038 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_10.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  List<int> numbers = [64, 34, 25, 12, 22, 11, 90];\n  \n  print('Original list: $numbers');\n  \n  // Bubble sort implementation\n  for (int i = 0; i < numbers.length - 1; i++) {\n    for (int j = 0; j < numbers.length - i - 1; j++) {\n      if (numbers[j] > numbers[j + 1]) {\n        // Swap elements\n        int temp = numbers[j];\n        numbers[j] = numbers[j + 1];\n        numbers[j + 1] = temp;\n      }\n    }\n  }\n  \n  print('Sorted list: $numbers');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a2e5 <+401>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2e9 <+405>:\tmov    rsp,rbp\n   0x000000000008a2ec <+408>:\tpop    rbp\n   0x000000000008a2ed <+409>:\tret\n   0x000000000008a2ee <+410>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  List<int> numbers = [64, 34, 25, 12, 22, 11, 90];\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x10\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a2ee <main+410>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a16d <+25>:\tcall   0x8a3b4 <new _GrowableList._literal7>\n   0x000000000008a172 <+30>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a176 <+34>:\tmov    r10d,0x4\n   0x000000000008a17c <+40>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a180 <+44>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n4\t  \n5\t  print('Original list: $numbers');\n   0x000000000008a185 <+49>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a18c <+56>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a190 <+60>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a194 <+64>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a198 <+68>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a19c <+72>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1a1 <+77>:\tmov    rdi,rax\n   0x000000000008a1a4 <+80>:\tcall   0x8a318 <print>\n   0x000000000008a1a9 <+85>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a1ad <+89>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a1b1 <+93>:\tmov    rsi,rax\n   0x000000000008a1b4 <+96>:\tsar    rsi,1\n   0x000000000008a1b7 <+99>:\tmov    rdi,rsi\n   0x000000000008a1ba <+102>:\tsub    rdi,0x1\n   0x000000000008a1be <+106>:\tmov    r8,QWORD PTR [rcx+0x17]\n   0x000000000008a1c2 <+110>:\txor    r9d,r9d\n   0x000000000008a1c5 <+113>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1c9 <+117>:\tjbe    0x8a2fa <main+422>\n   0x000000000008a1cf <+123>:\tcmp    r9,rdi\n   0x000000000008a1d2 <+126>:\tjge    0x8a2b2 <main+350>\n   0x000000000008a1d8 <+132>:\tmov    rax,rsi\n   0x000000000008a1db <+135>:\tsub    rax,r9\n   0x000000000008a1de <+138>:\tmov    r10,rax\n   0x000000000008a1e1 <+141>:\tsub    r10,0x1\n   0x000000000008a1e5 <+145>:\txor    r12d,r12d\n   0x000000000008a1e8 <+148>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1ec <+152>:\tjbe    0x8a306 <main+434>\n   0x000000000008a1f2 <+158>:\tcmp    r12,r10\n   0x000000000008a1f5 <+161>:\tjge    0x8a2a5 <main+337>\n   0x000000000008a1fb <+167>:\tmov    r13,QWORD PTR [r8+r12*8+0x17]\n   0x000000000008a200 <+172>:\tmov    rdx,r12\n   0x000000000008a203 <+175>:\tadd    rdx,0x1\n   0x000000000008a207 <+179>:\tmov    rax,rsi\n   0x000000000008a20a <+182>:\tmov    rbx,rdx\n   0x000000000008a20d <+185>:\tcmp    rbx,rax\n   0x000000000008a210 <+188>:\tjae    0x8a312 <main+446>\n   0x000000000008a216 <+194>:\tmov    rax,QWORD PTR [r8+rdx*8+0x17]\n   0x000000000008a21b <+199>:\tmov    rbx,r13\n   0x000000000008a21e <+202>:\tsar    rbx,1\n   0x000000000008a221 <+205>:\tjae    0x8a228 <main+212>\n   0x000000000008a223 <+207>:\tmov    rbx,QWORD PTR [rbx+rbx*1+0x8]\n   0x000000000008a228 <+212>:\tmov    rcx,rax\n   0x000000000008a22b <+215>:\tsar    rcx,1\n   0x000000000008a22e <+218>:\tjae    0x8a235 <main+225>\n   0x000000000008a230 <+220>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a235 <+225>:\tcmp    rbx,rcx\n   0x000000000008a238 <+228>:\tjle    0x8a29a <main+326>\n   0x000000000008a23e <+234>:\tmov    rcx,rdx\n   0x000000000008a241 <+237>:\tmov    rdx,r8\n   0x000000000008a244 <+240>:\tmov    rbx,r13\n   0x000000000008a247 <+243>:\tlea    r13,[rdx+r12*8+0x17]\n   0x000000000008a24c <+248>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a250 <+252>:\ttest   al,0x1\n   0x000000000008a252 <+254>:\tje     0x8a26b <main+279>\n   0x000000000008a254 <+256>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a258 <+260>:\tshr    r11d,0x2\n   0x000000000008a25c <+264>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a260 <+268>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a264 <+272>:\tje     0x8a26b <main+279>\n   0x000000000008a266 <+274>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a26b <+279>:\tmov    rdx,r8\n   0x000000000008a26e <+282>:\tmov    rax,rbx\n   0x000000000008a271 <+285>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000008a276 <+290>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a27a <+294>:\ttest   al,0x1\n   0x000000000008a27c <+296>:\tje     0x8a295 <main+321>\n   0x000000000008a27e <+298>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a282 <+302>:\tshr    r11d,0x2\n   0x000000000008a286 <+306>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a28a <+310>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a28e <+314>:\tje     0x8a295 <main+321>\n   0x000000000008a290 <+316>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a295 <+321>:\tjmp    0x8a29d <main+329>\n   0x000000000008a29a <+326>:\tmov    rcx,rdx\n   0x000000000008a29d <+329>:\tmov    r12,rcx\n   0x000000000008a2a0 <+332>:\tjmp    0x8a1e8 <main+148>\n   0x000000000008a2a5 <+337>:\tadd    r9,0x1\n   0x000000000008a2a9 <+341>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a2ad <+345>:\tjmp    0x8a1c5 <main+113>\n   0x000000000008a2b2 <+350>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2b6 <+354>:\tmov    r10d,0x4\n   0x000000000008a2bc <+360>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n6\t  \n7\t  // Bubble sort implementation\n8\t  for (int i = 0; i < numbers.length - 1; i++) {\n   0x000000000008a2f5 <+417>:\tjmp    0x8a166 <main+18>\n   0x000000000008a2fa <+422>:\tcall   QWORD PTR [r14+0x230]\n\n9\t    for (int j = 0; j < numbers.length - i - 1; j++) {\n   0x000000000008a301 <+429>:\tjmp    0x8a1cf <main+123>\n   0x000000000008a306 <+434>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a30d <+441>:\tjmp    0x8a1f2 <main+158>\n   0x000000000008a312 <+446>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a317:\tint3\n\n10\t      if (numbers[j] > numbers[j + 1]) {\n11\t        // Swap elements\n12\t        int temp = numbers[j];\n13\t        numbers[j] = numbers[j + 1];\n14\t        numbers[j + 1] = temp;\n15\t      }\n16\t    }\n17\t  }\n18\t  \n19\t  print('Sorted list: $numbers');\n   0x000000000008a2c1 <+365>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a2c8 <+372>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2cc <+376>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a2d0 <+380>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a2d4 <+384>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2d8 <+388>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a2dd <+393>:\tmov    rdi,rax\n   0x000000000008a2e0 <+396>:\tcall   0x8a318 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_11.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Initialize an example list to sort\n  List<int> numbers = [64, 34, 25, 12, 22, 11, 90];\n  \n  // Insertion sort implementation\n  for (int i = 1; i < numbers.length; i++) {\n    int key = numbers[i];\n    int j = i - 1;\n    \n    // Shift elements greater than key to the right\n    while (j >= 0 && numbers[j] > key) {\n      numbers[j + 1] = numbers[j];\n      j--;\n    }\n    numbers[j + 1] = key;\n  }\n  \n  // Print the sorted list\n  print('Sorted list: $numbers');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x18\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a292 <main+318>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0xe\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a179 <+37>:\tmov    QWORD PTR [rax+0x17],0x80\n   0x000000000008a181 <+45>:\tmov    QWORD PTR [rax+0x1f],0x44\n   0x000000000008a189 <+53>:\tmov    QWORD PTR [rax+0x27],0x32\n   0x000000000008a191 <+61>:\tmov    QWORD PTR [rax+0x2f],0x18\n   0x000000000008a199 <+69>:\tmov    QWORD PTR [rax+0x37],0x2c\n   0x000000000008a1a1 <+77>:\tmov    QWORD PTR [rax+0x3f],0x16\n   0x000000000008a1a9 <+85>:\tmov    QWORD PTR [rax+0x47],0xb4\n   0x000000000008a1b1 <+93>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a1b8 <+100>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a1bd <+105>:\tmov    rcx,rax\n   0x000000000008a1c0 <+108>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1c4 <+112>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1c8 <+116>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1cc <+120>:\tmov    QWORD PTR [rcx+0xf],0xe\n   0x000000000008a1d4 <+128>:\tmov    edx,0x1\n   0x000000000008a1d9 <+133>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1dd <+137>:\tjbe    0x8a29e <main+330>\n   0x000000000008a1e3 <+143>:\tcmp    rdx,0x7\n   0x000000000008a1e7 <+147>:\tjge    0x8a256 <main+258>\n   0x000000000008a1ed <+153>:\tmov    rbx,QWORD PTR [rax+rdx*8+0x17]\n   0x000000000008a1f2 <+158>:\tmov    rsi,rdx\n   0x000000000008a1f5 <+161>:\tsub    rsi,0x1\n   0x000000000008a1f9 <+165>:\tmov    rdi,rbx\n   0x000000000008a1fc <+168>:\tsar    rdi,1\n   0x000000000008a1ff <+171>:\tjae    0x8a206 <main+178>\n   0x000000000008a201 <+173>:\tmov    rdi,QWORD PTR [rdi+rdi*1+0x8]\n   0x000000000008a206 <+178>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a20a <+182>:\tjbe    0x8a2aa <main+342>\n   0x000000000008a210 <+188>:\tcmp    rsi,0x0\n   0x000000000008a214 <+192>:\tjl     0x8a247 <main+243>\n   0x000000000008a21a <+198>:\tmov    r8,QWORD PTR [rax+rsi*8+0x17]\n   0x000000000008a21f <+203>:\tmov    r9,r8\n   0x000000000008a222 <+206>:\tsar    r9,1\n   0x000000000008a225 <+209>:\tjae    0x8a22c <main+216>\n   0x000000000008a227 <+211>:\tmov    r9,QWORD PTR [r9+r9*1+0x8]\n   0x000000000008a22c <+216>:\tcmp    r9,rdi\n   0x000000000008a22f <+219>:\tjle    0x8a247 <main+243>\n   0x000000000008a235 <+225>:\tmov    r9,rsi\n   0x000000000008a238 <+228>:\tadd    r9,0x1\n   0x000000000008a23c <+232>:\tmov    QWORD PTR [rax+r9*8+0x17],r8\n   0x000000000008a241 <+237>:\tsub    rsi,0x1\n   0x000000000008a245 <+241>:\tjmp    0x8a206 <main+178>\n   0x000000000008a247 <+243>:\tadd    rsi,0x1\n   0x000000000008a24b <+247>:\tmov    QWORD PTR [rax+rsi*8+0x17],rbx\n   0x000000000008a250 <+252>:\tadd    rdx,0x1\n   0x000000000008a254 <+256>:\tjmp    0x8a1d9 <main+133>\n   0x000000000008a256 <+258>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a25a <+262>:\tmov    r10d,0x4\n   0x000000000008a260 <+268>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a265 <+273>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a26c <+280>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a270 <+284>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a274 <+288>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a278 <+292>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a27c <+296>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a281 <+301>:\tmov    rdi,rax\n   0x000000000008a284 <+304>:\tcall   0x8a2b8 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_15.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph: List of edges [source, destination, weight]\n  final edges = [\n    [0, 1, 10],\n    [0, 2, 6],\n    [0, 3, 5],\n    [1, 3, 15],\n    [2, 3, 4],\n  ];\n  final totalVertices = 4;\n\n  // Sort edges by weight\n  edges.sort((a, b) => a[2].compareTo(b[2]));\n\n  // Initialize parent array for Union-Find\n  final parent = List<int>.generate(totalVertices, (i) => i);\n\n  // Find function with path compression\n  int find(int i) {\n    if (parent[i] != i) {\n      parent[i] = find(parent[i]);\n    }\n    return parent[i];\n  }\n\n  // Union function\n  void union(int x, int y) {\n    parent[find(x)] = find(y);\n  }\n\n  // Kruskal's algorithm\n  final mst = <List<int>>[];\n  int totalWeight = 0;\n  int edgeCount = 0;\n\n  for (final edge in edges) {\n    final u = edge[0], v = edge[1], weight = edge[2];\n    if (find(u) != find(v)) {\n      mst.add(edge);\n      totalWeight += weight;\n      union(u, v);\n      edgeCount++;\n      if (edgeCount == totalVertices - 1) break;\n    }\n  }\n\n  // Output results\n  print('Edges in MST:');\n  for (final edge in mst) {\n    print('${edge[0]} - ${edge[1]} : ${edge[2]}');\n  }\n  print('Total weight: $totalWeight');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a820 <+536>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a827 <+543>:\tmov    esi,0x4\n   0x000000000008a82c <+548>:\tcall   0x52e38 <new _GrowableList>\n   0x000000000008a831 <+553>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a835 <+557>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a839 <+561>:\tsar    rcx,1\n   0x000000000008a83c <+564>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a840 <+568>:\txor    ebx,ebx\n   0x000000000008a842 <+570>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a846 <+574>:\tjbe    0x8b1b8 <main+2992>\n   0x000000000008a84c <+580>:\tcmp    rbx,rcx\n   0x000000000008a84f <+583>:\tjge    0x8a866 <main+606>\n   0x000000000008a855 <+589>:\tmov    rsi,rbx\n   0x000000000008a858 <+592>:\tadd    rsi,rsi\n   0x000000000008a85b <+595>:\tmov    QWORD PTR [rdx+rbx*8+0x17],rsi\n   0x000000000008a860 <+600>:\tadd    rbx,0x1\n   0x000000000008a864 <+604>:\tjmp    0x8a842 <main+570>\n   0x000000000008a866 <+606>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a86a <+610>:\tmov    r10d,0x2\n   0x000000000008a870 <+616>:\tcall   0x84210 <stub _iso_stub_AllocateContextStub>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008b1b3 <+2987>:\tjmp    0x8a61d <main+21>\n   0x000000000008b1b8 <+2992>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b1bf <+2999>:\tjmp    0x8a84c <main+580>\n   0x000000000008b1c4 <+3004>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b1cb <+3011>:\tjmp    0x8a8e7 <main+735>\n   0x000000000008b1d0 <+3016>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1d5 <+3021>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1da <+3026>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1df <+3031>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1e4 <+3036>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1e9 <+3041>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1ee <+3046>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1f3 <+3051>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1f8 <+3056>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b1fd <+3061>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b202 <+3066>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b207 <+3071>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b20c <+3076>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b211 <+3081>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b216 <+3086>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b21b <+3091>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b220 <+3096>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b225 <+3101>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b22a <+3106>:\tcall   0x85664 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008b22f <+3111>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b236 <+3118>:\tjmp    0x8afe8 <main+2528>\n   0x000000000008b23b:\tint3\n\n136\tin dart:core-patch/growable_array.dart\n137\tin dart:core-patch/growable_array.dart\n138\tin dart:core-patch/growable_array.dart\n139\tin dart:core-patch/growable_array.dart\n140\tin dart:core-patch/growable_array.dart\n141\tin dart:core-patch/growable_array.dart\n142\tin dart:core-patch/growable_array.dart\n143\tin dart:core-patch/growable_array.dart\n144\tin dart:core-patch/growable_array.dart\n145\tin dart:core-patch/growable_array.dart\n146\tin dart:core-patch/growable_array.dart\n147\tin dart:core-patch/growable_array.dart\n148\tin dart:core-patch/growable_array.dart\n149\tin dart:core-patch/growable_array.dart\n150\tin dart:core-patch/growable_array.dart\n151\tin dart:core-patch/growable_array.dart\n152\tin dart:core-patch/growable_array.dart\n153\tin dart:core-patch/growable_array.dart\n154\tin dart:core-patch/growable_array.dart\n155\tin dart:core-patch/growable_array.dart\n156\tin dart:core-patch/growable_array.dart\n157\tin dart:core-patch/growable_array.dart\n158\tin dart:core-patch/growable_array.dart\n159\tin dart:core-patch/growable_array.dart\n160\tin dart:core-patch/growable_array.dart\n161\tin dart:core-patch/growable_array.dart\n162\tin dart:core-patch/growable_array.dart\n163\tin dart:core-patch/growable_array.dart\n164\tin dart:core-patch/growable_array.dart\n165\tin dart:core-patch/growable_array.dart\n166\tin dart:core-patch/growable_array.dart\n167\tin dart:core-patch/growable_array.dart\n168\tin dart:core-patch/growable_array.dart\n169\tin dart:core-patch/growable_array.dart\n170\tin dart:core-patch/growable_array.dart\n171\tin dart:core-patch/growable_array.dart\n172\tin dart:core-patch/growable_array.dart\n173\tin dart:core-patch/growable_array.dart\n174\tin dart:core-patch/growable_array.dart\n175\tin dart:core-patch/growable_array.dart\n176\tin dart:core-patch/growable_array.dart\n177\tin dart:core-patch/growable_array.dart\n178\tin dart:core-patch/growable_array.dart\n179\tin dart:core-patch/growable_array.dart\n180\tin dart:core-patch/growable_array.dart\n181\tin dart:core-patch/growable_array.dart\n182\tin dart:core-patch/growable_array.dart\n183\tin dart:core-patch/growable_array.dart\n184\tin dart:core-patch/growable_array.dart\n185\tin dart:core-patch/growable_array.dart\n186\tin dart:core-patch/growable_array.dart\n187\tin dart:core-patch/growable_array.dart\n188\tin dart:core-patch/growable_array.dart\n189\tin dart:core-patch/growable_array.dart\n190\tin dart:core-patch/growable_array.dart\n191\tin dart:core-patch/growable_array.dart\n192\tin dart:core-patch/growable_array.dart\n193\tin dart:core-patch/growable_array.dart\n194\tin dart:core-patch/growable_array.dart\n195\tin dart:core-patch/growable_array.dart\n196\tin dart:core-patch/growable_array.dart\n197\tin dart:core-patch/growable_array.dart\n198\tin dart:core-patch/growable_array.dart\n199\tin dart:core-patch/growable_array.dart\n200\tin dart:core-patch/growable_array.dart\n201\tin dart:core-patch/growable_array.dart\n202\tin dart:core-patch/growable_array.dart\n203\tin dart:core-patch/growable_array.dart\n204\tin dart:core-patch/growable_array.dart\n205\tin dart:core-patch/growable_array.dart\n206\tin dart:core-patch/growable_array.dart\n207\tin dart:core-patch/growable_array.dart\n208\tin dart:core-patch/growable_array.dart\n209\tin dart:core-patch/growable_array.dart\n210\tin dart:core-patch/growable_array.dart\n211\tin dart:core-patch/growable_array.dart\n212\tin dart:core-patch/growable_array.dart\n213\tin dart:core-patch/growable_array.dart\n214\tin dart:core-patch/growable_array.dart\n215\tin dart:core-patch/growable_array.dart\n216\tin dart:core-patch/growable_array.dart\n217\tin dart:core-patch/growable_array.dart\n218\tin dart:core-patch/growable_array.dart\n219\tin dart:core-patch/growable_array.dart\n220\tin dart:core-patch/growable_array.dart\n221\tin dart:core-patch/growable_array.dart\n222\tin dart:core-patch/growable_array.dart\n223\tin dart:core-patch/growable_array.dart\n224\tin dart:core-patch/growable_array.dart\n225\tin dart:core-patch/growable_array.dart\n226\tin dart:core-patch/growable_array.dart\n227\tin dart:core-patch/growable_array.dart\n228\tin dart:core-patch/growable_array.dart\n229\tin dart:core-patch/growable_array.dart\n230\tin dart:core-patch/growable_array.dart\n231\tin dart:core-patch/growable_array.dart\n232\tin dart:core-patch/growable_array.dart\n233\tin dart:core-patch/growable_array.dart\n234\tin dart:core-patch/growable_array.dart\n235\tin dart:core-patch/growable_array.dart\n236\tin dart:core-patch/growable_array.dart\n237\tin dart:core-patch/growable_array.dart\n238\tin dart:core-patch/growable_array.dart\n239\tin dart:core-patch/growable_array.dart\n240\tin dart:core-patch/growable_array.dart\n241\tin dart:core-patch/growable_array.dart\n242\tin dart:core-patch/growable_array.dart\n243\tin dart:core-patch/growable_array.dart\n244\tin dart:core-patch/growable_array.dart\n245\tin dart:core-patch/growable_array.dart\n246\tin dart:core-patch/growable_array.dart\n247\tin dart:core-patch/growable_array.dart\n248\tin dart:core-patch/growable_array.dart\n249\tin dart:core-patch/growable_array.dart\n250\tin dart:core-patch/growable_array.dart\n251\tin dart:core-patch/growable_array.dart\n252\tin dart:core-patch/growable_array.dart\n253\tin dart:core-patch/growable_array.dart\n254\tin dart:core-patch/growable_array.dart\n255\tin dart:core-patch/growable_array.dart\n256\tin dart:core-patch/growable_array.dart\n257\tin dart:core-patch/growable_array.dart\n258\tin dart:core-patch/growable_array.dart\n259\tin dart:core-patch/growable_array.dart\n260\tin dart:core-patch/growable_array.dart\n261\tin dart:core-patch/growable_array.dart\n262\tin dart:core-patch/growable_array.dart\n263\tin dart:core-patch/growable_array.dart\n264\tin dart:core-patch/growable_array.dart\n265\tin dart:core-patch/growable_array.dart\n266\tin dart:core-patch/growable_array.dart\n267\tin dart:core-patch/growable_array.dart\n268\tin dart:core-patch/growable_array.dart\n269\tin dart:core-patch/growable_array.dart\n270\tin dart:core-patch/growable_array.dart\n271\tin dart:core-patch/growable_array.dart\n272\tin dart:core-patch/growable_array.dart\n273\tin dart:core-patch/growable_array.dart\n274\tin dart:core-patch/growable_array.dart\n275\tin dart:core-patch/growable_array.dart\n276\tin dart:core-patch/growable_array.dart\n277\tin dart:core-patch/growable_array.dart\n278\tin dart:core-patch/growable_array.dart\n279\tin dart:core-patch/growable_array.dart\n280\tin dart:core-patch/growable_array.dart\n281\tin dart:core-patch/growable_array.dart\n   0x000000000008abd9 <+1489>:\tmov    rcx,rax\n   0x000000000008abdc <+1492>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008abe0 <+1496>:\tmov    rsi,QWORD PTR [rdi+0xf]\n   0x000000000008abe4 <+1500>:\tmov    rax,rsi\n   0x000000000008abe7 <+1503>:\tsar    rax,1\n   0x000000000008abea <+1506>:\tmov    rbx,QWORD PTR [rbp-0x60]\n   0x000000000008abee <+1510>:\tcmp    rbx,rax\n   0x000000000008abf1 <+1513>:\tjae    0x8b1f8 <main+3056>\n   0x000000000008abf7 <+1519>:\tmov    rbx,QWORD PTR [rdi+0x17]\n   0x000000000008abfb <+1523>:\tmov    rdx,rbx\n   0x000000000008abfe <+1526>:\tmov    rax,rcx\n   0x000000000008ac01 <+1529>:\tmov    rcx,QWORD PTR [rbp-0x60]\n   0x000000000008ac05 <+1533>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000008ac0a <+1538>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008ac0e <+1542>:\ttest   al,0x1\n   0x000000000008ac10 <+1544>:\tje     0x8ac29 <main+1569>\n   0x000000000008ac12 <+1546>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008ac16 <+1550>:\tshr    r11d,0x2\n   0x000000000008ac1a <+1554>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008ac1e <+1558>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008ac22 <+1562>:\tje     0x8ac29 <main+1569>\n   0x000000000008ac24 <+1564>:\tcall   0x83738 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008ac29 <+1569>:\tsar    rsi,1\n   0x000000000008ac2c <+1572>:\tmov    r12,rsi\n   0x000000000008ac2f <+1575>:\tmov    rsi,rbx\n   0x000000000008ac32 <+1578>:\tjmp    0x8ac43 <main+1595>\n   0x000000000008ac37 <+1583>:\tmov    rdi,rcx\n   0x000000000008ac3a <+1586>:\tmov    rcx,r10\n   0x000000000008ac3d <+1589>:\tmov    r12,rsi\n   0x000000000008ac40 <+1592>:\tmov    rsi,rdx\n   0x000000000008ac43 <+1595>:\tmov    r8,QWORD PTR [rbp-0x78]\n   0x000000000008ac47 <+1599>:\tmov    rax,r12\n   0x000000000008ac4a <+1602>:\tmov    rbx,rcx\n   0x000000000008ac4d <+1605>:\tcmp    rbx,rax\n   0x000000000008ac50 <+1608>:\tjae    0x8b1fd <main+3061>\n   0x000000000008ac56 <+1614>:\tmov    rdx,QWORD PTR [rsi+rcx*8+0x17]\n   0x000000000008ac5b <+1619>:\tmov    rax,r12\n   0x000000000008ac5e <+1622>:\tmov    rbx,r8\n   0x000000000008ac61 <+1625>:\tcmp    rbx,rax\n   0x000000000008ac64 <+1628>:\tjae    0x8b202 <main+3066>\n   0x000000000008ac6a <+1634>:\tmov    rax,rdx\n   0x000000000008ac6d <+1637>:\tmov    rdx,rsi\n   0x000000000008ac70 <+1640>:\tlea    r13,[rdx+r8*8+0x17]\n   0x000000000008ac75 <+1645>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008ac79 <+1649>:\ttest   al,0x1\n   0x000000000008ac7b <+1651>:\tje     0x8ac94 <main+1676>\n   0x000000000008ac7d <+1653>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008ac81 <+1657>:\tshr    r11d,0x2\n   0x000000000008ac85 <+1661>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008ac89 <+1665>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008ac8d <+1669>:\tje     0x8ac94 <main+1676>\n   0x000000000008ac8f <+1671>:\tcall   0x83738 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008ac94 <+1676>:\tmov    rax,r12\n   0x000000000008ac97 <+1679>:\tmov    rcx,rsi\n   0x000000000008ac9a <+1682>:\tjmp    0x8aca8 <main+1696>\n   0x000000000008ac9f <+1687>:\tmov    rdi,rcx\n   0x000000000008aca2 <+1690>:\tmov    rax,rsi\n   0x000000000008aca5 <+1693>:\tmov    rcx,rdx\n   0x000000000008aca8 <+1696>:\tmov    rbx,r8\n   0x000000000008acab <+1699>:\tcmp    rbx,rax\n   0x000000000008acae <+1702>:\tjae    0x8b207 <main+3071>\n   0x000000000008acb4 <+1708>:\tmov    rax,QWORD PTR [rcx+r8*8+0x17]\n   0x000000000008acb9 <+1713>:\tsar    rax,1\n   0x000000000008acbc <+1716>:\tjae    0x8acc3 <main+1723>\n   0x000000000008acbe <+1718>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008acc3 <+1723>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008acc7 <+1727>:\tsar    rcx,1\n   0x000000000008acca <+1730>:\tjae    0x8acd1 <main+1737>\n   0x000000000008accc <+1732>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008acd1 <+1737>:\tcmp    rcx,rax\n   0x000000000008acd4 <+1740>:\tje     0x8af8f <main+2439>\n   0x000000000008acda <+1746>:\tmov    rbx,QWORD PTR [rbp-0x28]\n   0x000000000008acde <+1750>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008ace2 <+1754>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008ace6 <+1758>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008acea <+1762>:\tmov    rbx,QWORD PTR [r15+0x7cf]\n   0x000000000008acf1 <+1769>:\tmov    r9,QWORD PTR [r15+0x7e7]\n   0x000000000008acf8 <+1776>:\tcall   0x50c14 <assert type is List<int>>\n\n282\tin dart:core-patch/growable_array.dart\n283\tin dart:core-patch/growable_array.dart\n284\tin dart:core-patch/growable_array.dart\n   0x000000000008acfd <+1781>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008ad01 <+1785>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008ad05 <+1789>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008ad09 <+1793>:\tmov    rbx,QWORD PTR [rdx+0xf]\n   0x000000000008ad0d <+1797>:\tsar    rcx,1\n   0x000000000008ad10 <+1800>:\tmov    QWORD PTR [rbp-0x60],rcx\n   0x000000000008ad14 <+1804>:\tsar    rbx,1\n   0x000000000008ad17 <+1807>:\tcmp    rcx,rbx\n   0x000000000008ad1a <+1810>:\tjne    0x8ad28 <main+1824>\n   0x000000000008ad20 <+1816>:\tmov    rdi,rax\n   0x000000000008ad23 <+1819>:\tcall   0x53250 <List._growToNextCapacity>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008a608 <+0>:\tpush   rbp\n   0x000000000008a609 <+1>:\tmov    rbp,rsp\n   0x000000000008a60c <+4>:\tsub    rsp,0x88\n   0x000000000008a613 <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a617 <+15>:\tjbe    0x8b1ac <main+2980>\n   0x000000000008a61d <+21>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a621 <+25>:\tmov    r10d,0x6\n   0x000000000008a627 <+31>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a62c <+36>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a630 <+40>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a638 <+48>:\tmov    QWORD PTR [rax+0x1f],0x2\n   0x000000000008a640 <+56>:\tmov    QWORD PTR [rax+0x27],0x14\n   0x000000000008a648 <+64>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a64f <+71>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a654 <+76>:\tmov    rcx,rax\n   0x000000000008a657 <+79>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a65b <+83>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a65f <+87>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a663 <+91>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a66b <+99>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a66f <+103>:\tmov    r10d,0x6\n   0x000000000008a675 <+109>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a67a <+114>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a67e <+118>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a686 <+126>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a68e <+134>:\tmov    QWORD PTR [rax+0x27],0xc\n   0x000000000008a696 <+142>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a69d <+149>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a6a2 <+154>:\tmov    rcx,rax\n   0x000000000008a6a5 <+157>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a6a9 <+161>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a6ad <+165>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a6b1 <+169>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a6b9 <+177>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a6bd <+181>:\tmov    r10d,0x6\n   0x000000000008a6c3 <+187>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a6c8 <+192>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a6cc <+196>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a6d4 <+204>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a6dc <+212>:\tmov    QWORD PTR [rax+0x27],0xa\n   0x000000000008a6e4 <+220>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a6eb <+227>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a6f0 <+232>:\tmov    rcx,rax\n   0x000000000008a6f3 <+235>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a6f7 <+239>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a6fb <+243>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a6ff <+247>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a707 <+255>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a70b <+259>:\tmov    r10d,0x6\n   0x000000000008a711 <+265>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a716 <+270>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a71a <+274>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a722 <+282>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a72a <+290>:\tmov    QWORD PTR [rax+0x27],0x1e\n   0x000000000008a732 <+298>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a739 <+305>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a73e <+310>:\tmov    rcx,rax\n   0x000000000008a741 <+313>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a745 <+317>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a749 <+321>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a74d <+325>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a755 <+333>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a759 <+337>:\tmov    r10d,0x6\n   0x000000000008a75f <+343>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a764 <+348>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a768 <+352>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a770 <+360>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a778 <+368>:\tmov    QWORD PTR [rax+0x27],0x8\n   0x000000000008a780 <+376>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a787 <+383>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n   0x000000000008a78c <+388>:\tmov    rcx,rax\n   0x000000000008a78f <+391>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a793 <+395>:\tmov    QWORD PTR [rbp-0x30],rcx\n   0x000000000008a797 <+399>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a79b <+403>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a7a3 <+411>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a7a7 <+415>:\tmov    r10d,0xa\n   0x000000000008a7ad <+421>:\tcall   0x85120 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a7b2 <+426>:\tmov    rcx,rax\n   0x000000000008a7b5 <+429>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a7b9 <+433>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a7bd <+437>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a7c1 <+441>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a7c5 <+445>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a7c9 <+449>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a7cd <+453>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008a7d1 <+457>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a7d5 <+461>:\tmov    QWORD PTR [rcx+0x2f],rax\n   0x000000000008a7d9 <+465>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a7dd <+469>:\tmov    QWORD PTR [rcx+0x37],rax\n   0x000000000008a7e1 <+473>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008a7e8 <+480>:\tcall   0x841e0 <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_16.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency matrix\n  // 0-indexed vertices with weights between nodes\n  // Use a large number (9999) to represent absence of edge\n  List<List<int>> graph = [\n    [0, 2, 9999, 6, 9999],\n    [2, 0, 3, 8, 5],\n    [9999, 3, 0, 9999, 7],\n    [6, 8, 9999, 0, 9],\n    [9999, 5, 7, 9, 0]\n  ];\n  \n  int vertices = graph.length;\n  List<int> parent = List.filled(vertices, -1); // Store MST structure\n  List<int> key = List.filled(vertices, 9999);   // Key values used to pick min weight edge\n  List<bool> mstSet = List.filled(vertices, false); // Track vertices included in MST\n\n  // Start with first vertex\n  key[0] = 0;\n  parent[0] = -1;\n\n  // Construct MST with (vertices-1) edges\n  for (int count = 0; count < vertices - 1; count++) {\n    // Pick minimum key vertex not yet in MST\n    int u = _minKey(key, mstSet);\n    mstSet[u] = true;\n\n    // Update key values and parent index of adjacent vertices\n    for (int v = 0; v < vertices; v++) {\n      if (graph[u][v] != 0 &&\n          !mstSet[v] &&\n          graph[u][v] < key[v]) {\n        parent[v] = u;\n        key[v] = graph[u][v];\n      }\n    }\n  }\n\n  // Print the constructed MST\n  print('Edge \\tWeight');\n  int totalWeight = 0;\n  for (int i = 1; i < vertices; i++) {\n    print('${parent[i]} - $i \\t${graph[i][parent[i]]}');\n    totalWeight += graph[i][parent[i]];\n  }\n  print('Total MST weight: $totalWeight');\n}\n\n// Helper function to find vertex with minimum key value\nint _minKey(List<int> key, List<bool> mstSet) {\n  int min = 9999;\n  int minIndex = -1;\n\n  for (int v = 0; v < key.length; v++) {\n    if (!mstSet[v] && key[v] < min) {\n      min = key[v];\n      minIndex = v;\n    }\n  }\n  return minIndex;\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a80a <+1478>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a80e <+1482>:\tmov    rsp,rbp\n   0x000000000008a811 <+1485>:\tpop    rbp\n   0x000000000008a812 <+1486>:\tret\n   0x000000000008a813 <+1487>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a81a <+1494>:\tjmp    0x8a256 <main+18>\n   0x000000000008a81f <+1499>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n2\tvoid main() {\n3\t  // Example graph represented as an adjacency matrix\n4\t  // 0-indexed vertices with weights between nodes\n5\t  // Use a large number (9999) to represent absence of edge\n6\t  List<List<int>> graph = [\n   0x000000000008a31a <+214>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a31e <+218>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a322 <+222>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a326 <+226>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a32a <+230>:\tmov    r9,rax\n   0x000000000008a32d <+233>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a334 <+240>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n7\t    [0, 2, 9999, 6, 9999],\n   0x000000000008a244 <+0>:\tpush   rbp\n   0x000000000008a245 <+1>:\tmov    rbp,rsp\n   0x000000000008a248 <+4>:\tsub    rsp,0x68\n   0x000000000008a24c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a250 <+12>:\tjbe    0x8a813 <main+1487>\n   0x000000000008a256 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a25d <+25>:\txor    esi,esi\n   0x000000000008a25f <+27>:\tmov    edx,0x4\n   0x000000000008a264 <+32>:\tmov    ebx,0x4e1e\n   0x000000000008a269 <+37>:\tmov    r8d,0xc\n   0x000000000008a26f <+43>:\tmov    r9d,0x4e1e\n   0x000000000008a275 <+49>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n8\t    [2, 0, 3, 8, 5],\n   0x000000000008a27a <+54>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a281 <+61>:\tmov    esi,0x4\n   0x000000000008a286 <+66>:\txor    edx,edx\n   0x000000000008a288 <+68>:\tmov    ebx,0x6\n   0x000000000008a28d <+73>:\tmov    r8d,0x10\n   0x000000000008a293 <+79>:\tmov    r9d,0xa\n   0x000000000008a299 <+85>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a29d <+89>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n9\t    [9999, 3, 0, 9999, 7],\n   0x000000000008a2a2 <+94>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2a9 <+101>:\tmov    esi,0x4e1e\n   0x000000000008a2ae <+106>:\tmov    edx,0x6\n   0x000000000008a2b3 <+111>:\txor    ebx,ebx\n   0x000000000008a2b5 <+113>:\tmov    r8d,0x4e1e\n   0x000000000008a2bb <+119>:\tmov    r9d,0xe\n   0x000000000008a2c1 <+125>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a2c5 <+129>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n10\t    [6, 8, 9999, 0, 9],\n   0x000000000008a2ca <+134>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2d1 <+141>:\tmov    esi,0xc\n   0x000000000008a2d6 <+146>:\tmov    edx,0x10\n   0x000000000008a2db <+151>:\tmov    ebx,0x4e1e\n   0x000000000008a2e0 <+156>:\txor    r8d,r8d\n   0x000000000008a2e3 <+159>:\tmov    r9d,0x12\n   0x000000000008a2e9 <+165>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a2ed <+169>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n11\t    [9999, 5, 7, 9, 0]\n   0x000000000008a2f2 <+174>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2f9 <+181>:\tmov    esi,0x4e1e\n   0x000000000008a2fe <+186>:\tmov    edx,0xa\n   0x000000000008a303 <+191>:\tmov    ebx,0xe\n   0x000000000008a308 <+196>:\tmov    r8d,0x12\n   0x000000000008a30e <+202>:\txor    r9d,r9d\n   0x000000000008a311 <+205>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a315 <+209>:\tcall   0x8a910 <new _GrowableList._literal5>\n\n12\t  ];\n13\t  \n14\t  int vertices = graph.length;\n15\t  List<int> parent = List.filled(vertices, -1); // Store MST structure\n   0x000000000008a339 <+245>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a33d <+249>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a341 <+253>:\tsar    rcx,1\n   0x000000000008a344 <+256>:\tmov    rsi,rcx\n   0x000000000008a347 <+259>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a34b <+263>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a352 <+270>:\tmov    rdx,0xfffffffffffffffe\n   0x000000000008a359 <+277>:\tcall   0x6c304 <new _List.filled>\n\n16\t  List<int> key = List.filled(vertices, 9999);   // Key values used to pick min weight edge\n   0x000000000008a35e <+282>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a362 <+286>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a369 <+293>:\tmov    edx,0x4e1e\n   0x000000000008a36e <+298>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a372 <+302>:\tcall   0x6c304 <new _List.filled>\n\n17\t  List<bool> mstSet = List.filled(vertices, false); // Track vertices included in MST\n   0x000000000008a377 <+307>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a37b <+311>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008a382 <+318>:\tmov    rdx,QWORD PTR [r14+0x80]\n   0x000000000008a389 <+325>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a38d <+329>:\tcall   0x6c304 <new _List.filled>\n   0x000000000008a392 <+334>:\tmov    rdx,rax\n   0x000000000008a395 <+337>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a399 <+341>:\txor    ebx,ebx\n   0x000000000008a39b <+343>:\tmov    QWORD PTR [rbp-0x20],rdx\n   0x000000000008a39f <+347>:\tcmp    rbx,rax\n   0x000000000008a3a2 <+350>:\tjae    0x8a81f <main+1499>\n   0x000000000008a3a8 <+356>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a3ac <+360>:\tmov    QWORD PTR [rsi+0x17],0x0\n   0x000000000008a3b4 <+368>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a3b8 <+372>:\tmov    QWORD PTR [rdi+0x17],0xfffffffffffffffe\n   0x000000000008a3c0 <+380>:\tmov    r8,QWORD PTR [rbp-0x28]\n   0x000000000008a3c4 <+384>:\tsub    r8,0x1\n   0x000000000008a3c8 <+388>:\tmov    QWORD PTR [rbp-0x58],r8\n   0x000000000008a3cc <+392>:\txor    r12d,r12d\n   0x000000000008a3cf <+395>:\tmov    r9,QWORD PTR [rbp-0x8]\n   0x000000000008a3d3 <+399>:\tmov    r10,QWORD PTR [rbp-0x28]\n   0x000000000008a3d7 <+403>:\tmov    QWORD PTR [rbp-0x50],r12\n   0x000000000008a3db <+407>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3df <+411>:\tjbe    0x8a824 <main+1504>\n   0x000000000008a3e5 <+417>:\tcmp    r12,r8\n   0x000000000008a3e8 <+420>:\tjge    0x8a64e <main+1034>\n   0x000000000008a3ee <+426>:\tmov    ecx,0x270f\n   0x000000000008a3f3 <+431>:\tmov    r13,0xffffffffffffffff\n   0x000000000008a3fa <+438>:\txor    eax,eax\n   0x000000000008a3fc <+440>:\tmov    QWORD PTR [rbp-0x48],r13\n   0x000000000008a400 <+444>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a404 <+448>:\tjbe    0x8a830 <main+1516>\n   0x000000000008a40a <+454>:\tcmp    rax,r10\n   0x000000000008a40d <+457>:\tjge    0x8a445 <main+513>\n   0x000000000008a413 <+463>:\tmov    rbx,QWORD PTR [rdx+rax*8+0x17]\n   0x000000000008a418 <+468>:\ttest   bl,0x10\n   0x000000000008a41b <+471>:\tje     0x8a43f <main+507>\n   0x000000000008a421 <+477>:\tmov    rbx,QWORD PTR [rsi+rax*8+0x17]\n   0x000000000008a426 <+482>:\tsar    rbx,1\n   0x000000000008a429 <+485>:\tjae    0x8a430 <main+492>\n   0x000000000008a42b <+487>:\tmov    rbx,QWORD PTR [rbx+rbx*1+0x8]\n   0x000000000008a430 <+492>:\tcmp    rbx,rcx\n   0x000000000008a433 <+495>:\tjge    0x8a43f <main+507>\n   0x000000000008a439 <+501>:\tmov    rcx,rbx\n   0x000000000008a43c <+504>:\tmov    r13,rax\n   0x000000000008a43f <+507>:\tadd    rax,0x1\n   0x000000000008a443 <+511>:\tjmp    0x8a3fc <main+440>\n   0x000000000008a445 <+513>:\tmov    rax,r10\n   0x000000000008a448 <+516>:\tmov    rbx,r13\n   0x000000000008a44b <+519>:\tcmp    rbx,rax\n   0x000000000008a44e <+522>:\tjae    0x8a83c <main+1528>\n   0x000000000008a454 <+528>:\tmov    rax,r13\n   0x000000000008a457 <+531>:\tadd    rax,rax\n   0x000000000008a45a <+534>:\tjno    0x8a469 <main+549>\n   0x000000000008a460 <+540>:\tcall   0x84fe0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n18\t\n19\t  // Start with first vertex\n20\t  key[0] = 0;\n21\t  parent[0] = -1;\n22\t\n23\t  // Construct MST with (vertices-1) edges\n24\t  for (int count = 0; count < vertices - 1; count++) {\n   0x000000000008a824 <+1504>:\tcall   QWORD PTR [r14+0x230]\n\n25\t    // Pick minimum key vertex not yet in MST\n26\t    int u = _minKey(key, mstSet);\n27\t    mstSet[u] = true;\n28\t\n29\t    // Update key values and parent index of adjacent vertices\n30\t    for (int v = 0; v < vertices; v++) {\n   0x000000000008a841 <+1533>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a848 <+1540>:\tjmp    0x8a489 <main+581>\n   0x000000000008a84d <+1545>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a852 <+1550>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a857 <+1555>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n31\t      if (graph[u][v] != 0 &&\n   0x000000000008a465 <+545>:\tmov    QWORD PTR [rax+0x7],r13\n   0x000000000008a469 <+549>:\tmov    rcx,rax\n   0x000000000008a46c <+552>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a470 <+556>:\tmov    r11,QWORD PTR [r14+0x78]\n   0x000000000008a474 <+560>:\tmov    QWORD PTR [rdx+r13*8+0x17],r11\n   0x000000000008a479 <+565>:\txor    eax,eax\n   0x000000000008a47b <+567>:\tmov    QWORD PTR [rbp-0x40],rax\n   0x000000000008a47f <+571>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a483 <+575>:\tjbe    0x8a841 <main+1533>\n   0x000000000008a489 <+581>:\tcmp    rax,r10\n   0x000000000008a48c <+584>:\tjge    0x8a62e <main+1002>\n   0x000000000008a492 <+590>:\tmov    rbx,QWORD PTR [r9+0xf]\n   0x000000000008a496 <+594>:\tsar    rbx,1\n   0x000000000008a499 <+597>:\tmov    rdx,rax\n   0x000000000008a49c <+600>:\tmov    rax,rbx\n   0x000000000008a49f <+603>:\tmov    rbx,r13\n   0x000000000008a4a2 <+606>:\tcmp    rbx,rax\n   0x000000000008a4a5 <+609>:\tjae    0x8a84d <main+1545>\n   0x000000000008a4ab <+615>:\tmov    rax,QWORD PTR [r9+0x17]\n   0x000000000008a4af <+619>:\tmov    rbx,QWORD PTR [rax+r13*8+0x17]\n   0x000000000008a4b4 <+624>:\tmov    rax,rdx\n   0x000000000008a4b7 <+627>:\tadd    rax,rax\n   0x000000000008a4ba <+630>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a4be <+634>:\tmov    eax,DWORD PTR [rbx-0x1]\n   0x000000000008a4c1 <+637>:\tshr    eax,0xc\n   0x000000000008a4c4 <+640>:\tmov    QWORD PTR [rsp+0x8],rbx\n   0x000000000008a4c9 <+645>:\tmov    r11,QWORD PTR [rbp-0x30]\n   0x000000000008a4cd <+649>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a4d1 <+653>:\txchg   rdx,rax\n   0x000000000008a4d4 <+656>:\txchg   rcx,rdx\n   0x000000000008a4d7 <+659>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4db <+663>:\tcall   QWORD PTR [rax+rcx*8]\n\n32\t          !mstSet[v] &&\n33\t          graph[u][v] < key[v]) {\n   0x000000000008a4de <+666>:\ttest   rax,rax\n   0x000000000008a4e1 <+669>:\tje     0x8a5fa <main+950>\n   0x000000000008a4e7 <+675>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a4eb <+679>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a4ef <+683>:\tmov    rax,QWORD PTR [rdx+rsi*8+0x17]\n   0x000000000008a4f4 <+688>:\ttest   al,0x10\n   0x000000000008a4f6 <+690>:\tje     0x8a5f2 <main+942>\n   0x000000000008a4fc <+696>:\tmov    r8,QWORD PTR [rbp-0x8]\n   0x000000000008a500 <+700>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a504 <+704>:\tmov    r9,QWORD PTR [rbp-0x48]\n   0x000000000008a508 <+708>:\tmov    rax,QWORD PTR [r8+0xf]\n   0x000000000008a50c <+712>:\tsar    rax,1\n   0x000000000008a50f <+715>:\tmov    rbx,r9\n   0x000000000008a512 <+718>:\tcmp    rbx,rax\n   0x000000000008a515 <+721>:\tjae    0x8a852 <main+1550>\n   0x000000000008a51b <+727>:\tmov    rax,QWORD PTR [r8+0x17]\n   0x000000000008a51f <+731>:\tmov    rcx,QWORD PTR [rax+r9*8+0x17]\n   0x000000000008a524 <+736>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a527 <+739>:\tshr    eax,0xc\n   0x000000000008a52a <+742>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a52f <+747>:\tmov    r11,QWORD PTR [rbp-0x30]\n   0x000000000008a533 <+751>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a537 <+755>:\tmov    rcx,rax\n   0x000000000008a53a <+758>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a53e <+762>:\tcall   QWORD PTR [rax+rcx*8]\n\n34\t        parent[v] = u;\n35\t        key[v] = graph[u][v];\n   0x000000000008a541 <+765>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a545 <+769>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a549 <+773>:\tmov    rcx,QWORD PTR [rsi+rdx*8+0x17]\n   0x000000000008a54e <+778>:\tsar    rax,1\n   0x000000000008a551 <+781>:\tjae    0x8a558 <main+788>\n   0x000000000008a553 <+783>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a558 <+788>:\tsar    rcx,1\n   0x000000000008a55b <+791>:\tjae    0x8a562 <main+798>\n   0x000000000008a55d <+793>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a562 <+798>:\tcmp    rax,rcx\n   0x000000000008a565 <+801>:\tjge    0x8a5ea <main+934>\n   0x000000000008a56b <+807>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a56f <+811>:\tmov    r9,QWORD PTR [rbp-0x10]\n   0x000000000008a573 <+815>:\tmov    r8,QWORD PTR [rbp-0x48]\n   0x000000000008a577 <+819>:\tmov    r10,QWORD PTR [rbp-0x38]\n   0x000000000008a57b <+823>:\tmov    QWORD PTR [r9+rdx*8+0x17],r10\n   0x000000000008a580 <+828>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a584 <+832>:\tsar    rax,1\n   0x000000000008a587 <+835>:\tmov    rbx,r8\n   0x000000000008a58a <+838>:\tcmp    rbx,rax\n   0x000000000008a58d <+841>:\tjae    0x8a857 <main+1555>\n   0x000000000008a593 <+847>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a597 <+851>:\tmov    rcx,QWORD PTR [rax+r8*8+0x17]\n   0x000000000008a59c <+856>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a59f <+859>:\tshr    eax,0xc\n   0x000000000008a5a2 <+862>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a5a7 <+867>:\tmov    r11,QWORD PTR [rbp-0x30]\n   0x000000000008a5ab <+871>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a5af <+875>:\tmov    rcx,rax\n   0x000000000008a5b2 <+878>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5b6 <+882>:\tcall   QWORD PTR [rax+rcx*8]\n\n36\t      }\n37\t    }\n38\t  }\n39\t\n40\t  // Print the constructed MST\n41\t  print('Edge \\tWeight');\n   0x000000000008a5b9 <+885>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a5bd <+889>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a5c1 <+893>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000008a5c6 <+898>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a5ca <+902>:\ttest   al,0x1\n   0x000000000008a5cc <+904>:\tje     0x8a5e5 <main+929>\n   0x000000000008a5ce <+906>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a5d2 <+910>:\tshr    r11d,0x2\n   0x000000000008a5d6 <+914>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a5da <+918>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a5de <+922>:\tje     0x8a5e5 <main+929>\n   0x000000000008a5e0 <+924>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a5e5 <+929>:\tjmp    0x8a5fe <main+954>\n   0x000000000008a5ea <+934>:\tmov    rcx,rdx\n   0x000000000008a5ed <+937>:\tjmp    0x8a5fe <main+954>\n   0x000000000008a5f2 <+942>:\tmov    rcx,rsi\n   0x000000000008a5f5 <+945>:\tjmp    0x8a5fe <main+954>\n   0x000000000008a5fa <+950>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a5fe <+954>:\tadd    rcx,0x1\n   0x000000000008a602 <+958>:\tmov    rax,rcx\n   0x000000000008a605 <+961>:\tmov    r9,QWORD PTR [rbp-0x8]\n   0x000000000008a609 <+965>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a60d <+969>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a611 <+973>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a615 <+977>:\tmov    r12,QWORD PTR [rbp-0x50]\n   0x000000000008a619 <+981>:\tmov    r8,QWORD PTR [rbp-0x58]\n   0x000000000008a61d <+985>:\tmov    r13,QWORD PTR [rbp-0x48]\n   0x000000000008a621 <+989>:\tmov    r10,QWORD PTR [rbp-0x28]\n   0x000000000008a625 <+993>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a629 <+997>:\tjmp    0x8a47b <main+567>\n   0x000000000008a62e <+1002>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a632 <+1006>:\tadd    rax,0x1\n   0x000000000008a636 <+1010>:\tmov    r12,rax\n   0x000000000008a639 <+1013>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a63d <+1017>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a641 <+1021>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a645 <+1025>:\tmov    r8,QWORD PTR [rbp-0x58]\n   0x000000000008a649 <+1029>:\tjmp    0x8a3cf <main+395>\n   0x000000000008a64e <+1034>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a655 <+1041>:\tcall   0x8a8d8 <print>\n   0x000000000008a65a <+1046>:\txor    edi,edi\n   0x000000000008a65c <+1048>:\tmov    esi,0x1\n   0x000000000008a661 <+1053>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a665 <+1057>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a669 <+1061>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a66d <+1065>:\tmov    QWORD PTR [rbp-0x40],rdi\n   0x000000000008a671 <+1069>:\tmov    QWORD PTR [rbp-0x48],rsi\n   0x000000000008a675 <+1073>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a679 <+1077>:\tjbe    0x8a85c <main+1560>\n   0x000000000008a67f <+1083>:\tcmp    rsi,rdx\n   0x000000000008a682 <+1086>:\tjge    0x8a7bc <main+1400>\n   0x000000000008a688 <+1092>:\tmov    r8,rsi\n   0x000000000008a68b <+1095>:\tadd    r8,r8\n   0x000000000008a68e <+1098>:\tmov    QWORD PTR [rbp-0x20],r8\n   0x000000000008a692 <+1102>:\tmov    r9,QWORD PTR [rcx+rsi*8+0x17]\n   0x000000000008a697 <+1107>:\tmov    QWORD PTR [rbp-0x18],r9\n   0x000000000008a69b <+1111>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a69f <+1115>:\tmov    r10d,0xa\n   0x000000000008a6a5 <+1121>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n\n42\t  int totalWeight = 0;\n43\t  for (int i = 1; i < vertices; i++) {\n   0x000000000008a85c <+1560>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a863 <+1567>:\tjmp    0x8a67f <main+1083>\n   0x000000000008a868 <+1572>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a86d <+1577>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a872:\tint3\n   0x000000000008a873:\tint3\n   0x000000000008a874 <+0>:\tpush   rbp\n   0x000000000008a875 <+1>:\tmov    rbp,rsp\n   0x000000000008a878 <+4>:\tsub    rsp,0x18\n   0x000000000008a87c <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a880 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a884 <+16>:\tjbe    0x8a8ce <printToConsole+90>\n   0x000000000008a88a <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a88e <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a895 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a899 <+37>:\tjne    0x8a8ab <printToConsole+55>\n   0x000000000008a89f <+43>:\tmov    rdx,QWORD PTR [r15+0x7e7]\n   0x000000000008a8a6 <+50>:\tcall   0x832b8 <stub _iso_stub_InitLateStaticFieldStub>\n\n44\t    print('${parent[i]} - $i \\t${graph[i][parent[i]]}');\n   0x000000000008a6aa <+1126>:\tmov    rdx,rax\n   0x000000000008a6ad <+1129>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a6b1 <+1133>:\tmov    QWORD PTR [rbp-0x30],rdx\n   0x000000000008a6b5 <+1137>:\tmov    QWORD PTR [rdx+0x17],rcx\n   0x000000000008a6b9 <+1141>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a6c0 <+1148>:\tmov    QWORD PTR [rdx+0x1f],r11\n   0x000000000008a6c4 <+1152>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a6c8 <+1156>:\tmov    QWORD PTR [rdx+0x27],rax\n   0x000000000008a6cc <+1160>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a6d3 <+1167>:\tmov    QWORD PTR [rdx+0x2f],r11\n   0x000000000008a6d7 <+1171>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a6db <+1175>:\tmov    rax,QWORD PTR [rsi+0xf]\n   0x000000000008a6df <+1179>:\tsar    rax,1\n   0x000000000008a6e2 <+1182>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a6e6 <+1186>:\tcmp    rbx,rax\n   0x000000000008a6e9 <+1189>:\tjae    0x8a868 <main+1572>\n   0x000000000008a6ef <+1195>:\tmov    rax,QWORD PTR [rsi+0x17]\n   0x000000000008a6f3 <+1199>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a6f7 <+1203>:\tmov    rdi,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a6fc <+1208>:\tmov    eax,DWORD PTR [rdi-0x1]\n   0x000000000008a6ff <+1211>:\tshr    eax,0xc\n   0x000000000008a702 <+1214>:\tmov    QWORD PTR [rsp+0x8],rdi\n   0x000000000008a707 <+1219>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a70b <+1223>:\tmov    rcx,rax\n   0x000000000008a70e <+1226>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a712 <+1230>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a715 <+1233>:\tmov    rdx,QWORD PTR [rbp-0x30]\n   0x000000000008a719 <+1237>:\tlea    r13,[rdx+0x37]\n   0x000000000008a71d <+1241>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a721 <+1245>:\ttest   al,0x1\n   0x000000000008a723 <+1247>:\tje     0x8a73c <main+1272>\n   0x000000000008a725 <+1249>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a729 <+1253>:\tshr    r11d,0x2\n   0x000000000008a72d <+1257>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a731 <+1261>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a735 <+1265>:\tje     0x8a73c <main+1272>\n   0x000000000008a737 <+1267>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a73c <+1272>:\tmov    r11,QWORD PTR [rbp-0x30]\n   0x000000000008a740 <+1276>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a744 <+1280>:\tcall   0x587bc <_StringBase._interpolate>\n\n45\t    totalWeight += graph[i][parent[i]];\n   0x000000000008a751 <+1293>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a755 <+1297>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a759 <+1301>:\tsar    rax,1\n   0x000000000008a75c <+1304>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a760 <+1308>:\tcmp    rbx,rax\n   0x000000000008a763 <+1311>:\tjae    0x8a86d <main+1577>\n   0x000000000008a769 <+1317>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a76d <+1321>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a771 <+1325>:\tmov    rcx,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a776 <+1330>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a77a <+1334>:\tmov    rsi,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a77f <+1339>:\tmov    edi,DWORD PTR [rcx-0x1]\n   0x000000000008a782 <+1342>:\tshr    edi,0xc\n   0x000000000008a785 <+1345>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a78a <+1350>:\tmov    QWORD PTR [rsp],rsi\n   0x000000000008a78e <+1354>:\tmov    rcx,rdi\n   0x000000000008a791 <+1357>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a795 <+1361>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a798 <+1364>:\tsar    rax,1\n   0x000000000008a79b <+1367>:\tjae    0x8a7a2 <main+1374>\n   0x000000000008a79d <+1369>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a7a2 <+1374>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a7a6 <+1378>:\tadd    rcx,rax\n   0x000000000008a7a9 <+1381>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a7ad <+1385>:\tadd    rax,0x1\n   0x000000000008a7b1 <+1389>:\tmov    rdi,rcx\n   0x000000000008a7b4 <+1392>:\tmov    rsi,rax\n   0x000000000008a7b7 <+1395>:\tjmp    0x8a661 <main+1053>\n   0x000000000008a7bc <+1400>:\tmov    rax,rdi\n   0x000000000008a7bf <+1403>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a7c3 <+1407>:\tmov    r10d,0x4\n   0x000000000008a7c9 <+1413>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a7ce <+1418>:\tmov    rcx,rax\n   0x000000000008a7d1 <+1421>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a7d8 <+1428>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a7dc <+1432>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a7e0 <+1436>:\tmov    rax,rdx\n   0x000000000008a7e3 <+1439>:\tadd    rax,rax\n   0x000000000008a7e6 <+1442>:\tjno    0x8a7f5 <main+1457>\n   0x000000000008a7ec <+1448>:\tcall   0x84fe0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n46\t  }\n47\t  print('Total MST weight: $totalWeight');\n   0x000000000008a7f1 <+1453>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a7f5 <+1457>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a7f9 <+1461>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a7fd <+1465>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a802 <+1470>:\tmov    rdi,rax\n   0x000000000008a805 <+1473>:\tcall   0x8a8d8 <print>\n\n48\t}\n49\t\n50\t// Helper function to find vertex with minimum key value\n51\tint _minKey(List<int> key, List<bool> mstSet) {\n52\t  int min = 9999;\n53\t  int minIndex = -1;\n54\t\n55\t  for (int v = 0; v < key.length; v++) {\n   0x000000000008a82b <+1511>:\tjmp    0x8a3e5 <main+417>\n   0x000000000008a830 <+1516>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a837 <+1523>:\tjmp    0x8a40a <main+454>\n   0x000000000008a83c <+1528>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_21.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Matrix dimensions: A1=40x20, A2=20x30, A3=30x10, A4=10x30\n  List<int> p = [40, 20, 30, 10, 30];\n  int n = p.length - 1;\n\n  // Initialize DP table with zeros\n  List<List<int>> m = List.generate(n, (_) => List.filled(n, 0));\n\n  // Fill DP table for chain lengths from 2 to n\n  for (int l = 2; l <= n; l++) {\n    for (int i = 0; i <= n - l; i++) {\n      int j = i + l - 1;\n      m[i][j] = double.maxFinite.toInt();\n      for (int k = i; k < j; k++) {\n        int cost = m[i][k] + m[k + 1][j] + p[i] * p[k + 1] * p[j + 1];\n        if (cost < m[i][j]) {\n          m[i][j] = cost;\n        }\n      }\n    }\n  }\n\n  print('Minimum number of multiplications: ${m[0][n - 1]}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a5e6 <+1150>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a5ea <+1154>:\tmov    rsp,rbp\n   0x000000000008a5ed <+1157>:\tpop    rbp\n   0x000000000008a5ee <+1158>:\tret\n   0x000000000008a5ef <+1159>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Matrix dimensions: A1=40x20, A2=20x30, A3=30x10, A4=10x30\n4\t  List<int> p = [40, 20, 30, 10, 30];\n   0x000000000008a168 <+0>:\tpush   rbp\n   0x000000000008a169 <+1>:\tmov    rbp,rsp\n   0x000000000008a16c <+4>:\tsub    rsp,0x80\n   0x000000000008a173 <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a177 <+15>:\tjbe    0x8a5ef <main+1159>\n   0x000000000008a17d <+21>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a184 <+28>:\tcall   0x8a734 <new _GrowableList._literal5>\n\n5\t  int n = p.length - 1;\n6\t\n7\t  // Initialize DP table with zeros\n8\t  List<List<int>> m = List.generate(n, (_) => List.filled(n, 0));\n9\t\n10\t  // Fill DP table for chain lengths from 2 to n\n11\t  for (int l = 2; l <= n; l++) {\n   0x000000000008a60e <+1190>:\tjmp    0x8a205 <main+157>\n   0x000000000008a613 <+1195>:\tcall   QWORD PTR [r14+0x238]\n\n12\t    for (int i = 0; i <= n - l; i++) {\n   0x000000000008a61a <+1202>:\tjmp    0x8a288 <main+288>\n   0x000000000008a61f <+1207>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a626 <+1214>:\tjmp    0x8a2ac <main+324>\n   0x000000000008a62b <+1219>:\tcall   0x85228 <stub _iso_stub_RangeErrorSharedWithFPURegsStub>\n   0x000000000008a630 <+1224>:\tsub    rsp,0x10\n   0x000000000008a634 <+1228>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a638 <+1232>:\tpush   r12\n   0x000000000008a63a <+1234>:\tpush   r10\n   0x000000000008a63c <+1236>:\tpush   r9\n   0x000000000008a63e <+1238>:\tpush   r8\n   0x000000000008a640 <+1240>:\tpush   rdi\n   0x000000000008a641 <+1241>:\tpush   rsi\n   0x000000000008a642 <+1242>:\tpush   rdx\n   0x000000000008a643 <+1243>:\tpush   rcx\n   0x000000000008a644 <+1244>:\tmov    eax,0x4a\n   0x000000000008a649 <+1249>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a650 <+1256>:\tcall   QWORD PTR [r11+0x7]\n\n13\t      int j = i + l - 1;\n14\t      m[i][j] = double.maxFinite.toInt();\n   0x000000000008a300 <+408>:\tmov    QWORD PTR [rax+0x7],r12\n   0x000000000008a304 <+412>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a308 <+416>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a30b <+419>:\tshr    ebx,0xc\n   0x000000000008a30e <+422>:\tmov    QWORD PTR [rsp+0x10],rcx\n   0x000000000008a313 <+427>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a318 <+432>:\tmov    QWORD PTR [rsp],r13\n   0x000000000008a31c <+436>:\tmov    rcx,rbx\n   0x000000000008a31f <+439>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a323 <+443>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n\n15\t      for (int k = i; k < j; k++) {\n   0x000000000008a654 <+1260>:\tmov    r13,rax\n   0x000000000008a657 <+1263>:\tpop    rcx\n   0x000000000008a658 <+1264>:\tpop    rdx\n   0x000000000008a659 <+1265>:\tpop    rsi\n   0x000000000008a65a <+1266>:\tpop    rdi\n   0x000000000008a65b <+1267>:\tpop    r8\n   0x000000000008a65d <+1269>:\tpop    r9\n   0x000000000008a65f <+1271>:\tpop    r10\n   0x000000000008a661 <+1273>:\tpop    r12\n   0x000000000008a663 <+1275>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008a667 <+1279>:\tadd    rsp,0x10\n   0x000000000008a66b <+1283>:\tjmp    0x8a2ef <main+391>\n   0x000000000008a670 <+1288>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a677 <+1295>:\tjmp    0x8a358 <main+496>\n   0x000000000008a67c <+1300>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a681 <+1305>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a686 <+1310>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a68b <+1315>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a690 <+1320>:\tcall   0x851c4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a695:\tint3\n   0x000000000008a696:\tint3\n   0x000000000008a697:\tint3\n\n16\t        int cost = m[i][k] + m[k + 1][j] + p[i] * p[k + 1] * p[j + 1];\n   0x000000000008a32a <+450>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a32e <+454>:\tadd    rax,0x1\n   0x000000000008a332 <+458>:\tmov    QWORD PTR [rbp-0x58],rax\n   0x000000000008a336 <+462>:\tmov    r8,QWORD PTR [rbp-0x38]\n   0x000000000008a33a <+466>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a33e <+470>:\tmov    rsi,QWORD PTR [rbp-0x38]\n   0x000000000008a342 <+474>:\tmov    rdi,QWORD PTR [rbp-0x20]\n   0x000000000008a346 <+478>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a34a <+482>:\tmov    QWORD PTR [rbp-0x50],r8\n   0x000000000008a34e <+486>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a352 <+490>:\tjbe    0x8a670 <main+1288>\n   0x000000000008a358 <+496>:\tcmp    r8,rdi\n   0x000000000008a35b <+499>:\tjge    0x8a507 <main+927>\n   0x000000000008a361 <+505>:\tmov    rcx,QWORD PTR [rdx+rsi*8+0x17]\n   0x000000000008a366 <+510>:\tmov    r9,r8\n   0x000000000008a369 <+513>:\tadd    r9,r9\n   0x000000000008a36c <+516>:\tmov    r10d,DWORD PTR [rcx-0x1]\n   0x000000000008a370 <+520>:\tshr    r10d,0xc\n   0x000000000008a374 <+524>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a379 <+529>:\tmov    QWORD PTR [rsp],r9\n   0x000000000008a37d <+533>:\tmov    rcx,r10\n   0x000000000008a380 <+536>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a384 <+540>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a387 <+543>:\tmov    rdx,rax\n   0x000000000008a38a <+546>:\tmov    rsi,QWORD PTR [rbp-0x50]\n   0x000000000008a38e <+550>:\tmov    QWORD PTR [rbp-0x60],rdx\n   0x000000000008a392 <+554>:\tadd    rsi,0x1\n   0x000000000008a396 <+558>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a39a <+562>:\tmov    rbx,rsi\n   0x000000000008a39d <+565>:\tmov    QWORD PTR [rbp-0x50],rsi\n   0x000000000008a3a1 <+569>:\tcmp    rbx,rax\n   0x000000000008a3a4 <+572>:\tjae    0x8a67c <main+1300>\n   0x000000000008a3aa <+578>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a3ae <+582>:\tmov    rcx,QWORD PTR [rax+rsi*8+0x17]\n   0x000000000008a3b3 <+587>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a3b6 <+590>:\tshr    ebx,0xc\n   0x000000000008a3b9 <+593>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a3be <+598>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a3c2 <+602>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a3c6 <+606>:\tmov    rcx,rbx\n   0x000000000008a3c9 <+609>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a3cd <+613>:\tcall   QWORD PTR [rax+rcx*8]\n\n17\t        if (cost < m[i][j]) {\n   0x000000000008a3d0 <+616>:\tmov    rcx,QWORD PTR [rbp-0x60]\n   0x000000000008a3d4 <+620>:\tsar    rcx,1\n   0x000000000008a3d7 <+623>:\tjae    0x8a3de <main+630>\n   0x000000000008a3d9 <+625>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a3de <+630>:\tsar    rax,1\n   0x000000000008a3e1 <+633>:\tjae    0x8a3e8 <main+640>\n   0x000000000008a3e3 <+635>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a3e8 <+640>:\tadd    rcx,rax\n   0x000000000008a3eb <+643>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a3ef <+647>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a3f3 <+651>:\tmov    rsi,rax\n   0x000000000008a3f6 <+654>:\tsar    rsi,1\n   0x000000000008a3f9 <+657>:\tmov    rax,rsi\n   0x000000000008a3fc <+660>:\tmov    rbx,QWORD PTR [rbp-0x38]\n   0x000000000008a400 <+664>:\tcmp    rbx,rax\n   0x000000000008a403 <+667>:\tjae    0x8a681 <main+1305>\n   0x000000000008a409 <+673>:\tmov    rdi,QWORD PTR [rdx+0x17]\n   0x000000000008a40d <+677>:\tmov    r8,QWORD PTR [rbp-0x38]\n   0x000000000008a411 <+681>:\tmov    r9,QWORD PTR [rdi+r8*8+0x17]\n   0x000000000008a416 <+686>:\tmov    rax,rsi\n   0x000000000008a419 <+689>:\tmov    rbx,QWORD PTR [rbp-0x50]\n   0x000000000008a41d <+693>:\tcmp    rbx,rax\n   0x000000000008a420 <+696>:\tjae    0x8a686 <main+1310>\n   0x000000000008a426 <+702>:\tmov    r10,QWORD PTR [rbp-0x50]\n   0x000000000008a42a <+706>:\tmov    rax,QWORD PTR [rdi+r10*8+0x17]\n   0x000000000008a42f <+711>:\tsar    r9,1\n   0x000000000008a432 <+714>:\tjae    0x8a439 <main+721>\n   0x000000000008a434 <+716>:\tmov    r9,QWORD PTR [r9+r9*1+0x8]\n   0x000000000008a439 <+721>:\tsar    rax,1\n   0x000000000008a43c <+724>:\tjae    0x8a443 <main+731>\n   0x000000000008a43e <+726>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a443 <+731>:\timul   r9,rax\n   0x000000000008a447 <+735>:\tmov    rax,rsi\n   0x000000000008a44a <+738>:\tmov    rbx,QWORD PTR [rbp-0x58]\n   0x000000000008a44e <+742>:\tcmp    rbx,rax\n   0x000000000008a451 <+745>:\tjae    0x8a68b <main+1315>\n   0x000000000008a457 <+751>:\tmov    rax,QWORD PTR [rbp-0x58]\n   0x000000000008a45b <+755>:\tmov    rbx,QWORD PTR [rdi+rax*8+0x17]\n   0x000000000008a460 <+760>:\tsar    rbx,1\n   0x000000000008a463 <+763>:\tjae    0x8a46a <main+770>\n   0x000000000008a465 <+765>:\tmov    rbx,QWORD PTR [rbx+rbx*1+0x8]\n   0x000000000008a46a <+770>:\timul   r9,rbx\n   0x000000000008a46e <+774>:\tmov    rbx,rcx\n   0x000000000008a471 <+777>:\tadd    rbx,r9\n   0x000000000008a474 <+780>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a478 <+784>:\tmov    QWORD PTR [rbp-0x68],rbx\n   0x000000000008a47c <+788>:\tmov    rcx,QWORD PTR [rsi+r8*8+0x17]\n   0x000000000008a481 <+793>:\tmov    edi,DWORD PTR [rcx-0x1]\n   0x000000000008a484 <+796>:\tshr    edi,0xc\n   0x000000000008a487 <+799>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a48c <+804>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a490 <+808>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a494 <+812>:\tmov    rcx,rdi\n   0x000000000008a497 <+815>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a49b <+819>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a49e <+822>:\tsar    rax,1\n   0x000000000008a4a1 <+825>:\tjae    0x8a4a8 <main+832>\n   0x000000000008a4a3 <+827>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a4a8 <+832>:\tmov    rcx,QWORD PTR [rbp-0x68]\n   0x000000000008a4ac <+836>:\tcmp    rcx,rax\n   0x000000000008a4af <+839>:\tjge    0x8a4fa <main+914>\n   0x000000000008a4b5 <+845>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008a4b9 <+849>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a4bd <+853>:\tmov    rdi,QWORD PTR [rsi+rdx*8+0x17]\n   0x000000000008a4c2 <+858>:\tmov    rax,rcx\n   0x000000000008a4c5 <+861>:\tadd    rax,rax\n   0x000000000008a4c8 <+864>:\tjno    0x8a4d7 <main+879>\n   0x000000000008a4ce <+870>:\tcall   0x84f04 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n18\t          m[i][j] = cost;\n   0x000000000008a4d3 <+875>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a4d7 <+879>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000008a4da <+882>:\tshr    ecx,0xc\n   0x000000000008a4dd <+885>:\tmov    QWORD PTR [rsp+0x10],rdi\n   0x000000000008a4e2 <+890>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a4e6 <+894>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a4eb <+899>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a4ef <+903>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4f3 <+907>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n   0x000000000008a4fa <+914>:\tmov    r8,QWORD PTR [rbp-0x50]\n   0x000000000008a4fe <+918>:\tmov    rax,QWORD PTR [rbp-0x58]\n   0x000000000008a502 <+922>:\tjmp    0x8a33a <main+466>\n   0x000000000008a507 <+927>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a50b <+931>:\tadd    rax,0x1\n   0x000000000008a50f <+935>:\tmov    r10,rax\n   0x000000000008a512 <+938>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a516 <+942>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a51a <+946>:\tmov    r8,QWORD PTR [rbp-0x48]\n   0x000000000008a51e <+950>:\tmov    r9,QWORD PTR [rbp-0x40]\n   0x000000000008a522 <+954>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a526 <+958>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a52f <+967>:\tjmp    0x8a29e <main+310>\n   0x000000000008a534 <+972>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a538 <+976>:\tadd    rax,0x1\n   0x000000000008a53c <+980>:\tmov    r8,rax\n   0x000000000008a53f <+983>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a543 <+987>:\tjmp    0x8a269 <main+257>\n   0x000000000008a548 <+992>:\tmov    rax,rdx\n   0x000000000008a54b <+995>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a54f <+999>:\tmov    r10d,0x4\n   0x000000000008a555 <+1005>:\tcall   0x84c80 <stub _iso_stub_AllocateArrayStub>\n\n19\t        }\n20\t      }\n21\t    }\n22\t  }\n23\t\n24\t  print('Minimum number of multiplications: ${m[0][n - 1]}');\n   0x000000000008a55a <+1010>:\tmov    rdx,rax\n   0x000000000008a55d <+1013>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a561 <+1017>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a568 <+1024>:\tmov    QWORD PTR [rdx+0x17],r11\n   0x000000000008a56c <+1028>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a570 <+1032>:\txor    ebx,ebx\n   0x000000000008a572 <+1034>:\tcmp    rbx,rax\n   0x000000000008a575 <+1037>:\tjae    0x8a690 <main+1320>\n   0x000000000008a57b <+1043>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a57f <+1047>:\tmov    rcx,QWORD PTR [rax+0x17]\n   0x000000000008a583 <+1051>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a587 <+1055>:\tsub    rax,0x1\n   0x000000000008a58b <+1059>:\tmov    rbx,rax\n   0x000000000008a58e <+1062>:\tadd    rbx,rbx\n   0x000000000008a591 <+1065>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a594 <+1068>:\tshr    eax,0xc\n   0x000000000008a597 <+1071>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a59c <+1076>:\tmov    QWORD PTR [rsp],rbx\n   0x000000000008a5a0 <+1080>:\tmov    rcx,rax\n   0x000000000008a5a3 <+1083>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5a7 <+1087>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a5aa <+1090>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a5ae <+1094>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a5b2 <+1098>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a5b6 <+1102>:\ttest   al,0x1\n   0x000000000008a5b8 <+1104>:\tje     0x8a5d1 <main+1129>\n   0x000000000008a5ba <+1106>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a5be <+1110>:\tshr    r11d,0x2\n   0x000000000008a5c2 <+1114>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a5c6 <+1118>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a5ca <+1122>:\tje     0x8a5d1 <main+1129>\n   0x000000000008a5cc <+1124>:\tcall   0x83298 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a5d1 <+1129>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a5d5 <+1133>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a5d9 <+1137>:\tcall   0x587d0 <_StringBase._interpolate>\n   0x000000000008a5de <+1142>:\tmov    rdi,rax\n   0x000000000008a5e1 <+1145>:\tcall   0x8a698 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_22.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example strings to compute edit distance\n  String s1 = \"kitten\";\n  String s2 = \"sitting\";\n  \n  int n = s1.length;\n  int m = s2.length;\n  \n  // Initialize DP table with dimensions (n+1) x (m+1)\n  List<List<int>> dp = List.generate(n + 1, (_) => List.filled(m + 1, 0));\n  \n  // Base cases: transforming to/from empty string\n  for (int i = 0; i <= n; i++) {\n    dp[i][0] = i; // i deletions\n  }\n  for (int j = 0; j <= m; j++) {\n    dp[0][j] = j; // j insertions\n  }\n  \n  // Fill DP table\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (s1[i - 1] == s2[j - 1]) {\n        // Characters match, no operation needed\n        dp[i][j] = dp[i - 1][j - 1];\n      } else {\n        // Take minimum of deletion, insertion, or substitution\n        dp[i][j] = 1 + _min3(\n          dp[i - 1][j],    // deletion\n          dp[i][j - 1],    // insertion\n          dp[i - 1][j - 1] // substitution\n        );\n      }\n    }\n  }\n  \n  // Result is in the bottom-right cell\n  print(\"Edit distance between '$s1' and '$s2': ${dp[n][m]}\");\n}\n\n// Helper function to compute minimum of three integers\nint _min3(int a, int b, int c) {\n  return a < b ? (a < c ? a : c) : (b < c ? b : c);\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a168 <+0>:\tpush   rbp\n   0x000000000008a169 <+1>:\tmov    rbp,rsp\n   0x000000000008a16c <+4>:\tsub    rsp,0x68\n   0x000000000008a170 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a174 <+12>:\tjbe    0x8a6e1 <main+1401>\n   0x000000000008a17a <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a181 <+25>:\tmov    esi,0x7\n   0x000000000008a186 <+30>:\tcall   0x52e38 <new _GrowableList>\n   0x000000000008a18b <+35>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a18f <+39>:\tsar    rcx,1\n   0x000000000008a192 <+42>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a196 <+46>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a19a <+50>:\tmov    QWORD PTR [rbp-0x10],rdx\n   0x000000000008a19e <+54>:\txor    eax,eax\n   0x000000000008a1a0 <+56>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1a4 <+60>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1a8 <+64>:\tjbe    0x8a6ed <main+1413>\n   0x000000000008a1ae <+70>:\tcmp    rax,rcx\n   0x000000000008a1b1 <+73>:\tjge    0x8a22e <main+198>\n   0x000000000008a1b7 <+79>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a1be <+86>:\tmov    r10d,0x10\n   0x000000000008a1c4 <+92>:\tcall   0x84c80 <stub _iso_stub_AllocateArrayStub>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008a6e8 <+1408>:\tjmp    0x8a17a <main+18>\n   0x000000000008a6ed <+1413>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a6f4 <+1420>:\tjmp    0x8a1ae <main+70>\n   0x000000000008a6f9 <+1425>:\tcall   QWORD PTR [r14+0x230]\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_23.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Coin denominations and target amount\n  final coins = [1, 2, 5];\n  final amount = 11;\n\n  // Initialize DP array with a value larger than the maximum possible coins\n  final dp = List<int>.filled(amount + 1, amount + 1);\n  dp[0] = 0;\n\n  // Compute minimum coins for each amount\n  for (var i = 1; i <= amount; i++) {\n    for (final coin in coins) {\n      if (coin <= i) {\n        dp[i] = dp[i] < 1 + dp[i - coin] ? dp[i] : 1 + dp[i - coin];\n      }\n    }\n  }\n\n  // Output the result\n  final result = dp[amount] > amount ? -1 : dp[amount];\n  print('Minimum coins needed: $result');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a47d <+569>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a481 <+573>:\tmov    rsp,rbp\n   0x000000000008a484 <+576>:\tpop    rbp\n   0x000000000008a485 <+577>:\tret\n   0x000000000008a486 <+578>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Coin denominations and target amount\n4\t  final coins = [1, 2, 5];\n   0x000000000008a244 <+0>:\tpush   rbp\n   0x000000000008a245 <+1>:\tmov    rbp,rsp\n   0x000000000008a248 <+4>:\tsub    rsp,0x40\n   0x000000000008a24c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a250 <+12>:\tjbe    0x8a486 <main+578>\n   0x000000000008a256 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a25d <+25>:\tcall   0x8a54c <new _GrowableList._literal3>\n\n5\t  final amount = 11;\n6\t\n7\t  // Initialize DP array with a value larger than the maximum possible coins\n8\t  final dp = List<int>.filled(amount + 1, amount + 1);\n   0x000000000008a262 <+30>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a269 <+37>:\tmov    esi,0xc\n   0x000000000008a26e <+42>:\tmov    edx,0x18\n   0x000000000008a273 <+47>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a277 <+51>:\tcall   0x6c304 <new _List.filled>\n\n9\t  dp[0] = 0;\n10\t\n11\t  // Compute minimum coins for each amount\n12\t  for (var i = 1; i <= amount; i++) {\n   0x000000000008a48d <+585>:\tjmp    0x8a256 <main+18>\n   0x000000000008a492 <+590>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a499 <+597>:\tjmp    0x8a2c1 <main+125>\n   0x000000000008a49e <+602>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a4a5 <+609>:\tjmp    0x8a2d7 <main+147>\n   0x000000000008a4aa <+614>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a4af:\tint3\n\n13\t    for (final coin in coins) {\n14\t      if (coin <= i) {\n15\t        dp[i] = dp[i] < 1 + dp[i - coin] ? dp[i] : 1 + dp[i - coin];\n16\t      }\n17\t    }\n18\t  }\n19\t\n20\t  // Output the result\n21\t  final result = dp[amount] > amount ? -1 : dp[amount];\n22\t  print('Minimum coins needed: $result');\n   0x000000000008a464 <+544>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a468 <+548>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a46c <+552>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a470 <+556>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a475 <+561>:\tmov    rdi,rax\n   0x000000000008a478 <+564>:\tcall   0x8a4b0 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_25.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final String s = 'leetcode';\n  final List<String> wordDict = ['leet', 'code'];\n  \n  final bool result = wordBreak(s, wordDict);\n  print('Can segment \"$s\"? $result');\n}\n\nbool wordBreak(String s, List<String> wordDict) {\n  final Set<String> words = wordDict.toSet();\n  final int n = s.length;\n  final List<bool> dp = List<bool>.filled(n + 1, false);\n  dp[0] = true;\n\n  for (int i = 1; i <= n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (dp[j] && words.contains(s.substring(j, i))) {\n        dp[i] = true;\n        break;\n      }\n    }\n  }\n  return dp[n];\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a258 <+0>:\tpush   rbp\n   0x000000000008a259 <+1>:\tmov    rbp,rsp\n   0x000000000008a25c <+4>:\tsub    rsp,0x10\n   0x000000000008a260 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a264 <+12>:\tjbe    0x8a310 <main+184>\n   0x000000000008a26a <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a26e <+22>:\tmov    r10d,0x4\n   0x000000000008a274 <+28>:\tcall   0x84d70 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a279 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a27d <+37>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a284 <+44>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a288 <+48>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a28f <+55>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a293 <+59>:\tmov    rdx,QWORD PTR [r15+0xaf]\n   0x000000000008a29a <+66>:\tcall   0x83e30 <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_27.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example input list\n  List<int> nums = [1, 5, 11, 5];\n  \n  int totalSum = nums.reduce((a, b) => a + b);\n  \n  // If total sum is odd, partition is impossible\n  if (totalSum % 2 != 0) {\n    print(false);\n    return;\n  }\n  \n  int target = totalSum ~/ 2;\n  List<bool> dp = List.filled(target + 1, false);\n  dp[0] = true;\n  \n  for (int num in nums) {\n    for (int j = target; j >= num; j--) {\n      if (dp[j - num]) {\n        dp[j] = true;\n      }\n    }\n  }\n  \n  print(dp[target]);\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x40\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a3c9 <main+629>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0x8\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a179 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a181 <+45>:\tmov    QWORD PTR [rax+0x1f],0xa\n   0x000000000008a189 <+53>:\tmov    QWORD PTR [rax+0x27],0x16\n   0x000000000008a191 <+61>:\tmov    QWORD PTR [rax+0x2f],0xa\n   0x000000000008a199 <+69>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a1a0 <+76>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a1a5 <+81>:\tmov    rcx,rax\n   0x000000000008a1a8 <+84>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1ac <+88>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1b0 <+92>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1b4 <+96>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008a1bc <+104>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a1c3 <+111>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a1c7 <+115>:\tcall   0x84088 <stub _iso_stub_AllocateClosureStub>\n   0x000000000008a1cc <+120>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a1d0 <+124>:\tmov    rsi,rax\n   0x000000000008a1d3 <+127>:\tcall   0x8a4b8 <ListBase.reduce>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_28.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example distance matrix (4 cities)\n  List<List<int>> distances = [\n    [0, 10, 15, 20],\n    [10, 0, 35, 25],\n    [15, 35, 0, 30],\n    [20, 25, 30, 0]\n  ];\n\n  int n = distances.length;\n  List<int> cities = List.generate(n, (index) => index);\n  List<int> bestPath = [];\n  int minDistance = 1 << 30; // Large initial value\n\n  // Generate all permutations starting from city 0\n  void permute(List<int> list, int start) {\n    if (start == list.length - 1) {\n      int currentDistance = 0;\n      // Calculate total distance for this permutation\n      for (int i = 0; i < list.length - 1; i++) {\n        currentDistance += distances[list[i]][list[i + 1]];\n      }\n      // Add return to start city\n      currentDistance += distances[list.last][list.first];\n      \n      // Update best path if better\n      if (currentDistance < minDistance) {\n        minDistance = currentDistance;\n        bestPath = List.from(list);\n      }\n      return;\n    }\n    \n    for (int i = start; i < list.length; i++) {\n      // Swap elements\n      List<int> swapped = List.from(list);\n      int temp = swapped[start];\n      swapped[start] = swapped[i];\n      swapped[i] = temp;\n      \n      permute(swapped, start + 1);\n    }\n  }\n\n  permute(cities, 1); // Start permutations from index 1 (keep first city fixed)\n  \n  // Add return to start city for output\n  bestPath.add(bestPath.first);\n  \n  print('Best path: $bestPath');\n  print('Minimum distance: $minDistance');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008b3d2 <+462>:\tmov    rcx,rax\n   0x000000000008b3d5 <+465>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008b3d9 <+469>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008b3dd <+473>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b3e1 <+477>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008b3e8 <+484>:\tmov    esi,0x4\n   0x000000000008b3ed <+489>:\tcall   0x52d18 <new _GrowableList>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008b5c7 <+963>:\tjmp    0x8b216 <main+18>\n   0x000000000008b5cc <+968>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b5d3 <+975>:\tjmp    0x8b40d <main+521>\n\n136\tin dart:core-patch/growable_array.dart\n137\tin dart:core-patch/growable_array.dart\n138\tin dart:core-patch/growable_array.dart\n139\tin dart:core-patch/growable_array.dart\n140\tin dart:core-patch/growable_array.dart\n141\tin dart:core-patch/growable_array.dart\n142\tin dart:core-patch/growable_array.dart\n143\tin dart:core-patch/growable_array.dart\n144\tin dart:core-patch/growable_array.dart\n145\tin dart:core-patch/growable_array.dart\n146\tin dart:core-patch/growable_array.dart\n147\tin dart:core-patch/growable_array.dart\n148\tin dart:core-patch/growable_array.dart\n149\tin dart:core-patch/growable_array.dart\n150\tin dart:core-patch/growable_array.dart\n151\tin dart:core-patch/growable_array.dart\n152\tin dart:core-patch/growable_array.dart\n153\tin dart:core-patch/growable_array.dart\n154\tin dart:core-patch/growable_array.dart\n155\tin dart:core-patch/growable_array.dart\n156\tin dart:core-patch/growable_array.dart\n157\tin dart:core-patch/growable_array.dart\n158\tin dart:core-patch/growable_array.dart\n159\tin dart:core-patch/growable_array.dart\n160\tin dart:core-patch/growable_array.dart\n161\tin dart:core-patch/growable_array.dart\n162\tin dart:core-patch/growable_array.dart\n163\tin dart:core-patch/growable_array.dart\n164\tin dart:core-patch/growable_array.dart\n165\tin dart:core-patch/growable_array.dart\n166\tin dart:core-patch/growable_array.dart\n167\tin dart:core-patch/growable_array.dart\n168\tin dart:core-patch/growable_array.dart\n169\tin dart:core-patch/growable_array.dart\n170\tin dart:core-patch/growable_array.dart\n171\tin dart:core-patch/growable_array.dart\n172\tin dart:core-patch/growable_array.dart\n173\tin dart:core-patch/growable_array.dart\n174\tin dart:core-patch/growable_array.dart\n175\tin dart:core-patch/growable_array.dart\n176\tin dart:core-patch/growable_array.dart\n177\tin dart:core-patch/growable_array.dart\n178\tin dart:core-patch/growable_array.dart\n179\tin dart:core-patch/growable_array.dart\n180\tin dart:core-patch/growable_array.dart\n181\tin dart:core-patch/growable_array.dart\n182\tin dart:core-patch/growable_array.dart\n183\tin dart:core-patch/growable_array.dart\n184\tin dart:core-patch/growable_array.dart\n185\tin dart:core-patch/growable_array.dart\n186\tin dart:core-patch/growable_array.dart\n187\tin dart:core-patch/growable_array.dart\n188\tin dart:core-patch/growable_array.dart\n189\tin dart:core-patch/growable_array.dart\n190\tin dart:core-patch/growable_array.dart\n191\tin dart:core-patch/growable_array.dart\n192\tin dart:core-patch/growable_array.dart\n193\tin dart:core-patch/growable_array.dart\n194\tin dart:core-patch/growable_array.dart\n195\tin dart:core-patch/growable_array.dart\n196\tin dart:core-patch/growable_array.dart\n197\tin dart:core-patch/growable_array.dart\n198\tin dart:core-patch/growable_array.dart\n199\tin dart:core-patch/growable_array.dart\n200\tin dart:core-patch/growable_array.dart\n201\tin dart:core-patch/growable_array.dart\n202\tin dart:core-patch/growable_array.dart\n203\tin dart:core-patch/growable_array.dart\n204\tin dart:core-patch/growable_array.dart\n205\tin dart:core-patch/growable_array.dart\n206\tin dart:core-patch/growable_array.dart\n207\tin dart:core-patch/growable_array.dart\n208\tin dart:core-patch/growable_array.dart\n209\tin dart:core-patch/growable_array.dart\n210\tin dart:core-patch/growable_array.dart\n211\tin dart:core-patch/growable_array.dart\n212\tin dart:core-patch/growable_array.dart\n213\tin dart:core-patch/growable_array.dart\n214\tin dart:core-patch/growable_array.dart\n215\tin dart:core-patch/growable_array.dart\n216\tin dart:core-patch/growable_array.dart\n217\tin dart:core-patch/growable_array.dart\n218\tin dart:core-patch/growable_array.dart\n219\tin dart:core-patch/growable_array.dart\n220\tin dart:core-patch/growable_array.dart\n221\tin dart:core-patch/growable_array.dart\n222\tin dart:core-patch/growable_array.dart\n223\tin dart:core-patch/growable_array.dart\n224\tin dart:core-patch/growable_array.dart\n225\tin dart:core-patch/growable_array.dart\n226\tin dart:core-patch/growable_array.dart\n227\tin dart:core-patch/growable_array.dart\n228\tin dart:core-patch/growable_array.dart\n229\tin dart:core-patch/growable_array.dart\n230\tin dart:core-patch/growable_array.dart\n231\tin dart:core-patch/growable_array.dart\n232\tin dart:core-patch/growable_array.dart\n233\tin dart:core-patch/growable_array.dart\n234\tin dart:core-patch/growable_array.dart\n235\tin dart:core-patch/growable_array.dart\n236\tin dart:core-patch/growable_array.dart\n237\tin dart:core-patch/growable_array.dart\n238\tin dart:core-patch/growable_array.dart\n239\tin dart:core-patch/growable_array.dart\n240\tin dart:core-patch/growable_array.dart\n241\tin dart:core-patch/growable_array.dart\n242\tin dart:core-patch/growable_array.dart\n243\tin dart:core-patch/growable_array.dart\n244\tin dart:core-patch/growable_array.dart\n245\tin dart:core-patch/growable_array.dart\n246\tin dart:core-patch/growable_array.dart\n247\tin dart:core-patch/growable_array.dart\n248\tin dart:core-patch/growable_array.dart\n249\tin dart:core-patch/growable_array.dart\n250\tin dart:core-patch/growable_array.dart\n251\tin dart:core-patch/growable_array.dart\n252\tin dart:core-patch/growable_array.dart\n253\tin dart:core-patch/growable_array.dart\n254\tin dart:core-patch/growable_array.dart\n255\tin dart:core-patch/growable_array.dart\n256\tin dart:core-patch/growable_array.dart\n257\tin dart:core-patch/growable_array.dart\n258\tin dart:core-patch/growable_array.dart\n259\tin dart:core-patch/growable_array.dart\n260\tin dart:core-patch/growable_array.dart\n261\tin dart:core-patch/growable_array.dart\n262\tin dart:core-patch/growable_array.dart\n263\tin dart:core-patch/growable_array.dart\n264\tin dart:core-patch/growable_array.dart\n265\tin dart:core-patch/growable_array.dart\n266\tin dart:core-patch/growable_array.dart\n267\tin dart:core-patch/growable_array.dart\n268\tin dart:core-patch/growable_array.dart\n269\tin dart:core-patch/growable_array.dart\n270\tin dart:core-patch/growable_array.dart\n271\tin dart:core-patch/growable_array.dart\n272\tin dart:core-patch/growable_array.dart\n273\tin dart:core-patch/growable_array.dart\n274\tin dart:core-patch/growable_array.dart\n275\tin dart:core-patch/growable_array.dart\n276\tin dart:core-patch/growable_array.dart\n277\tin dart:core-patch/growable_array.dart\n278\tin dart:core-patch/growable_array.dart\n279\tin dart:core-patch/growable_array.dart\n280\tin dart:core-patch/growable_array.dart\n281\tin dart:core-patch/growable_array.dart\n282\tin dart:core-patch/growable_array.dart\n283\tin dart:core-patch/growable_array.dart\n284\tin dart:core-patch/growable_array.dart\n   0x000000000008b4ce <+714>:\tmov    rcx,rax\n   0x000000000008b4d1 <+717>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008b4d5 <+721>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008b4d9 <+725>:\tmov    rdx,QWORD PTR [rax+0xf]\n   0x000000000008b4dd <+729>:\tmov    rbx,QWORD PTR [rax+0x17]\n   0x000000000008b4e1 <+733>:\tmov    rsi,QWORD PTR [rbx+0xf]\n   0x000000000008b4e5 <+737>:\tsar    rdx,1\n   0x000000000008b4e8 <+740>:\tmov    QWORD PTR [rbp-0x30],rdx\n   0x000000000008b4ec <+744>:\tsar    rsi,1\n   0x000000000008b4ef <+747>:\tcmp    rdx,rsi\n   0x000000000008b4f2 <+750>:\tjne    0x8b500 <main+764>\n   0x000000000008b4f8 <+756>:\tmov    rdi,rax\n   0x000000000008b4fb <+759>:\tcall   0x53160 <List._growToNextCapacity>\n   0x000000000008b500 <+764>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008b504 <+768>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008b508 <+772>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008b50c <+776>:\tmov    rdx,rcx\n   0x000000000008b50f <+779>:\tadd    rdx,0x1\n   0x000000000008b513 <+783>:\tmov    rbx,rdx\n   0x000000000008b516 <+786>:\tadd    rbx,rbx\n   0x000000000008b519 <+789>:\tmov    QWORD PTR [rax+0xf],rbx\n   0x000000000008b51d <+793>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008b521 <+797>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008b525 <+801>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000008b52a <+806>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008b52e <+810>:\ttest   al,0x1\n   0x000000000008b530 <+812>:\tje     0x8b549 <main+837>\n   0x000000000008b532 <+814>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008b536 <+818>:\tshr    r11d,0x2\n   0x000000000008b53a <+822>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008b53e <+826>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008b542 <+830>:\tje     0x8b549 <main+837>\n   0x000000000008b544 <+832>:\tcall   0x84334 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008b549 <+837>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b54d <+841>:\tmov    r10d,0x4\n   0x000000000008b553 <+847>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n   0x000000000008b204 <+0>:\tpush   rbp\n   0x000000000008b205 <+1>:\tmov    rbp,rsp\n   0x000000000008b208 <+4>:\tsub    rsp,0x48\n   0x000000000008b20c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008b210 <+12>:\tjbe    0x8b5c0 <main+956>\n   0x000000000008b216 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b21a <+22>:\tmov    r10d,0x8\n   0x000000000008b220 <+28>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b225 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008b229 <+37>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008b231 <+45>:\tmov    QWORD PTR [rax+0x1f],0x14\n   0x000000000008b239 <+53>:\tmov    QWORD PTR [rax+0x27],0x1e\n   0x000000000008b241 <+61>:\tmov    QWORD PTR [rax+0x2f],0x28\n   0x000000000008b249 <+69>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008b250 <+76>:\tcall   0x84ddc <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b255 <+81>:\tmov    rcx,rax\n   0x000000000008b258 <+84>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008b25c <+88>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008b260 <+92>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b264 <+96>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008b26c <+104>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b270 <+108>:\tmov    r10d,0x8\n   0x000000000008b276 <+114>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b27b <+119>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008b27f <+123>:\tmov    QWORD PTR [rax+0x17],0x14\n   0x000000000008b287 <+131>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008b28f <+139>:\tmov    QWORD PTR [rax+0x27],0x46\n   0x000000000008b297 <+147>:\tmov    QWORD PTR [rax+0x2f],0x32\n   0x000000000008b29f <+155>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008b2a6 <+162>:\tcall   0x84ddc <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b2ab <+167>:\tmov    rcx,rax\n   0x000000000008b2ae <+170>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008b2b2 <+174>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008b2b6 <+178>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b2ba <+182>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008b2c2 <+190>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b2c6 <+194>:\tmov    r10d,0x8\n   0x000000000008b2cc <+200>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b2d1 <+205>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008b2d5 <+209>:\tmov    QWORD PTR [rax+0x17],0x1e\n   0x000000000008b2dd <+217>:\tmov    QWORD PTR [rax+0x1f],0x46\n   0x000000000008b2e5 <+225>:\tmov    QWORD PTR [rax+0x27],0x0\n   0x000000000008b2ed <+233>:\tmov    QWORD PTR [rax+0x2f],0x3c\n   0x000000000008b2f5 <+241>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008b2fc <+248>:\tcall   0x84ddc <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b301 <+253>:\tmov    rcx,rax\n   0x000000000008b304 <+256>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008b308 <+260>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008b30c <+264>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b310 <+268>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008b318 <+276>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b31c <+280>:\tmov    r10d,0x8\n   0x000000000008b322 <+286>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b327 <+291>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008b32b <+295>:\tmov    QWORD PTR [rax+0x17],0x28\n   0x000000000008b333 <+303>:\tmov    QWORD PTR [rax+0x1f],0x32\n   0x000000000008b33b <+311>:\tmov    QWORD PTR [rax+0x27],0x3c\n   0x000000000008b343 <+319>:\tmov    QWORD PTR [rax+0x2f],0x0\n   0x000000000008b34b <+327>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008b352 <+334>:\tcall   0x84ddc <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b357 <+339>:\tmov    rcx,rax\n   0x000000000008b35a <+342>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008b35e <+346>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008b362 <+350>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b366 <+354>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008b36e <+362>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b372 <+366>:\tmov    r10d,0x8\n   0x000000000008b378 <+372>:\tcall   0x85d1c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b37d <+377>:\tmov    rcx,rax\n   0x000000000008b380 <+380>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008b384 <+384>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008b388 <+388>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b38c <+392>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008b390 <+396>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008b394 <+400>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008b398 <+404>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008b39c <+408>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008b3a0 <+412>:\tmov    QWORD PTR [rcx+0x2f],rax\n   0x000000000008b3a4 <+416>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008b3ab <+423>:\tcall   0x84ddc <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b3b0 <+428>:\tmov    rcx,rax\n   0x000000000008b3b3 <+431>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008b3b7 <+435>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008b3bb <+439>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b3bf <+443>:\tmov    QWORD PTR [rcx+0xf],0x8\n   0x000000000008b3c7 <+451>:\tmov    r10d,0x4\n   0x000000000008b3cd <+457>:\tcall   0x84e0c <stub _iso_stub_AllocateContextStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_29.dart", "function": "main", "source": "import 'dart:io';\n\n@pragma('vm:entry-point')\nvoid main() {\n  const int n = 8; // Board size (N)\n  List<int> board = List.filled(n, -1);\n  int solutions = 0;\n\n  bool isSafe(int row, int col) {\n    for (int i = 0; i < row; i++) {\n      if (board[i] == col ||\n          (board[i] - i == col - row) ||\n          (board[i] + i == col + row)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  void solveNQueens(int row) {\n    if (row == n) {\n      solutions++;\n      return;\n    }\n    for (int col = 0; col < n; col++) {\n      if (isSafe(row, col)) {\n        board[row] = col;\n        solveNQueens(row + 1);\n      }\n    }\n  }\n\n  solveNQueens(0);\n  stdout.write('Number of solutions for $n-Queens: $solutions');\n}", "assembly": "Dump of assembler code for function main:\n   0x0000000000090aa8 <+0>:\tpush   rbp\n   0x0000000000090aa9 <+1>:\tmov    rbp,rsp\n   0x0000000000090aac <+4>:\tsub    rsp,0x40\n   0x0000000000090ab0 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090ab4 <+12>:\tjbe    0x90d7c <main+724>\n   0x0000000000090aba <+18>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x0000000000090ac1 <+25>:\tmov    r10d,0x10\n   0x0000000000090ac7 <+31>:\tcall   0x8b5c4 <stub _iso_stub_AllocateArrayStub>\n   0x0000000000090acc <+36>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x0000000000090ad0 <+40>:\txor    ecx,ecx\n   0x0000000000090ad2 <+42>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090ad6 <+46>:\tjbe    0x90d88 <main+736>\n   0x0000000000090adc <+52>:\tcmp    rcx,0x8\n   0x0000000000090ae0 <+56>:\tjge    0x90af5 <main+77>\n   0x0000000000090ae6 <+62>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x0000000000090aef <+71>:\tadd    rcx,0x1\n   0x0000000000090af3 <+75>:\tjmp    0x90ad2 <main+42>\n   0x0000000000090af5 <+77>:\tmov    r10d,0x4\n   0x0000000000090afb <+83>:\tcall   0x8a6b4 <stub _iso_stub_AllocateContextStub>\n\n101\tin dart:core-patch/array.dart\n102\tin dart:core-patch/array.dart\n   0x0000000000090d83 <+731>:\tjmp    0x90aba <main+18>\n   0x0000000000090d88 <+736>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000090d8f <+743>:\tjmp    0x90adc <main+52>\n   0x0000000000090d94 <+748>:\tcall   QWORD PTR [r14+0x230]\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_32.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency list\n  // Graph with 5 vertices (0 to 4)\n  List<List<int>> graph = [\n    [1, 3],       // Vertex 0 is connected to 1 and 3\n    [0, 2, 4],    // Vertex 1 is connected to 0, 2, and 4\n    [1, 3],       // Vertex 2 is connected to 1 and 3\n    [0, 2, 4],    // Vertex 3 is connected to 0, 2, and 4\n    [1, 3]        // Vertex 4 is connected to 1 and 3\n  ];\n\n  int n = graph.length; // Number of vertices\n  List<int> path = List.filled(n, -1); // Current path being explored\n  bool found = false; // Flag to indicate if a Hamiltonian path is found\n\n  // Helper function to check if vertex can be added at position 'pos' in the path\n  bool isSafe(int v, int pos) {\n    // Check if vertex is adjacent to the previous vertex in the path\n    if (!graph[path[pos - 1]].contains(v)) {\n      return false;\n    }\n    // Check if vertex has not already been included\n    for (int i = 0; i < pos; i++) {\n      if (path[i] == v) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Recursive backtracking function to find Hamiltonian path\n  bool hamPathUtil(int pos) {\n    // If all vertices are included in the path\n    if (pos == n) {\n      return true;\n    }\n\n    // Try different vertices as the next candidate\n    for (int v = 0; v < n; v++) {\n      if (isSafe(v, pos)) {\n        path[pos] = v;\n        if (hamPathUtil(pos + 1)) {\n          return true;\n        }\n        path[pos] = -1; // Backtrack\n      }\n    }\n    return false;\n  }\n\n  // Initialize path and start from vertex 0\n  path[0] = 0;\n  found = hamPathUtil(1);\n\n  // Output results\n  if (found) {\n    print(\"Hamiltonian path exists:\");\n    print(path.join(\" -> \"));\n  } else {\n    print(\"No Hamiltonian path exists in the given graph.\");\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008aa64 <+0>:\tpush   rbp\n   0x000000000008aa65 <+1>:\tmov    rbp,rsp\n   0x000000000008aa68 <+4>:\tsub    rsp,0x40\n   0x000000000008aa6c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008aa70 <+12>:\tjbe    0x8ad51 <main+749>\n   0x000000000008aa76 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008aa7a <+22>:\tmov    r10d,0x4\n   0x000000000008aa80 <+28>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008aa85 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008aa89 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008aa91 <+45>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008aa99 <+53>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008aaa0 <+60>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008aaf3 <+143>:\tmov    rcx,rax\n   0x000000000008aaf6 <+146>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008aafa <+150>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008aafe <+154>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ab02 <+158>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008ab0a <+166>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008ab0e <+170>:\tmov    r10d,0x4\n   0x000000000008ab14 <+176>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008ab19 <+181>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008ab1d <+185>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008ab25 <+193>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008ab2d <+201>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008ab34 <+208>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008ab87 <+291>:\tmov    rcx,rax\n   0x000000000008ab8a <+294>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008ab8e <+298>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008ab92 <+302>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ab96 <+306>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008ab9e <+314>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008aba2 <+318>:\tmov    r10d,0x4\n   0x000000000008aba8 <+324>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008abad <+329>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008abb1 <+333>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008abb9 <+341>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008abc1 <+349>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008abc8 <+356>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008aaa5 <+65>:\tmov    rcx,rax\n   0x000000000008aaa8 <+68>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008aaac <+72>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008aab0 <+76>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008aab4 <+80>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008aabc <+88>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008aac0 <+92>:\tmov    r10d,0x6\n   0x000000000008aac6 <+98>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008aacb <+103>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008aacf <+107>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008aad7 <+115>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008aadf <+123>:\tmov    QWORD PTR [rax+0x27],0x8\n   0x000000000008aae7 <+131>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008aaee <+138>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008ab39 <+213>:\tmov    rcx,rax\n   0x000000000008ab3c <+216>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008ab40 <+220>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008ab44 <+224>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ab48 <+228>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008ab50 <+236>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008ab54 <+240>:\tmov    r10d,0x6\n   0x000000000008ab5a <+246>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008ab5f <+251>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008ab63 <+255>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008ab6b <+263>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008ab73 <+271>:\tmov    QWORD PTR [rax+0x27],0x8\n   0x000000000008ab7b <+279>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008ab82 <+286>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n   0x000000000008abcd <+361>:\tmov    rcx,rax\n   0x000000000008abd0 <+364>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008abd4 <+368>:\tmov    QWORD PTR [rbp-0x30],rcx\n   0x000000000008abd8 <+372>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008abdc <+376>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008abe4 <+384>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008abe8 <+388>:\tmov    r10d,0xa\n   0x000000000008abee <+394>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008abf3 <+399>:\tmov    rcx,rax\n   0x000000000008abf6 <+402>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008abfa <+406>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008abfe <+410>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ac02 <+414>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008ac06 <+418>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008ac0a <+422>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008ac0e <+426>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008ac12 <+430>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008ac16 <+434>:\tmov    QWORD PTR [rcx+0x2f],rax\n   0x000000000008ac1a <+438>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008ac1e <+442>:\tmov    QWORD PTR [rcx+0x37],rax\n   0x000000000008ac22 <+446>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008ac29 <+453>:\tcall   0x8463c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008ac2e <+458>:\tmov    rcx,rax\n   0x000000000008ac31 <+461>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008ac35 <+465>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008ac39 <+469>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ac3d <+473>:\tmov    QWORD PTR [rcx+0xf],0xa\n   0x000000000008ac45 <+481>:\tmov    r10d,0x5\n   0x000000000008ac4b <+487>:\tcall   0x8466c <stub _iso_stub_AllocateContextStub>\n   0x000000000008ac50 <+492>:\tmov    rcx,rax\n   0x000000000008ac53 <+495>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008ac57 <+499>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008ac5b <+503>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008ac5f <+507>:\tmov    QWORD PTR [rcx+0x1f],0xa\n   0x000000000008ac67 <+515>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008ac6e <+522>:\tmov    r10d,0xa\n   0x000000000008ac74 <+528>:\tcall   0x8557c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008ac79 <+533>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008ac7d <+537>:\txor    ecx,ecx\n   0x000000000008ac7f <+539>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008ac83 <+543>:\tjbe    0x8ad5d <main+761>\n   0x000000000008ac89 <+549>:\tcmp    rcx,0x5\n   0x000000000008ac8d <+553>:\tjge    0x8aca2 <main+574>\n   0x000000000008ac93 <+559>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008ac9c <+568>:\tadd    rcx,0x1\n   0x000000000008aca0 <+572>:\tjmp    0x8ac7f <main+539>\n   0x000000000008aca2 <+574>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008aca6 <+578>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008acaa <+582>:\tmov    rdx,rcx\n   0x000000000008acad <+585>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000008acb4 <+592>:\tcall   0x84998 <stub _iso_stub_AllocateClosureStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_35.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final rbt = RedBlackTree();\n  final values = [7, 3, 18, 10, 22, 8, 11, 26];\n  \n  print('Inserting values: $values');\n  for (final val in values) {\n    rbt.insert(val);\n  }\n  \n  print('\\nIn-order traversal:');\n  rbt.inOrderTraversal();\n  print('\\nRoot: ${rbt.root?.key} (Black)');\n}\n\nclass Node {\n  int key;\n  Node? left;\n  Node? right;\n  Node? parent;\n  bool isRed;\n\n  Node(this.key, {this.isRed = true});\n}\n\nclass RedBlackTree {\n  Node? root;\n\n  void insert(int key) {\n    Node? newNode = Node(key);\n    _insertBST(newNode);\n    _fixInsert(newNode);\n  }\n\n  void _insertBST(Node newNode) {\n    Node? parent;\n    Node? current = root;\n\n    while (current != null) {\n      parent = current;\n      if (newNode.key < current.key) {\n        current = current.left;\n      } else {\n        current = current.right;\n      }\n    }\n\n    newNode.parent = parent;\n    if (parent == null) {\n      root = newNode;\n    } else if (newNode.key < parent.key) {\n      parent.left = newNode;\n    } else {\n      parent.right = newNode;\n    }\n  }\n\n  void _fixInsert(Node node) {\n    while (node.parent != null && node.parent!.isRed) {\n      if (node.parent == node.parent!.parent!.left) {\n        final uncle = node.parent!.parent!.right;\n        if (uncle != null && uncle.isRed) {\n          node.parent!.isRed = false;\n          uncle.isRed = false;\n          node.parent!.parent!.isRed = true;\n          node = node.parent!.parent!;\n        } else {\n          if (node == node.parent!.right) {\n            node = node.parent!;\n            _leftRotate(node);\n          }\n          node.parent!.isRed = false;\n          node.parent!.parent!.isRed = true;\n          _rightRotate(node.parent!.parent!);\n        }\n      } else {\n        final uncle = node.parent!.parent!.left;\n        if (uncle != null && uncle.isRed) {\n          node.parent!.isRed = false;\n          uncle.isRed = false;\n          node.parent!.parent!.isRed = true;\n          node = node.parent!.parent!;\n        } else {\n          if (node == node.parent!.left) {\n            node = node.parent!;\n            _rightRotate(node);\n          }\n          node.parent!.isRed = false;\n          node.parent!.parent!.isRed = true;\n          _leftRotate(node.parent!.parent!);\n        }\n      }\n    }\n    root!.isRed = false;\n  }\n\n  void _leftRotate(Node x) {\n    final y = x.right!;\n    x.right = y.left;\n    if (y.left != null) y.left!.parent = x;\n    y.parent = x.parent;\n    if (x.parent == null) {\n      root = y;\n    } else if (x == x.parent!.left) {\n      x.parent!.left = y;\n    } else {\n      x.parent!.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n  }\n\n  void _rightRotate(Node x) {\n    final y = x.left!;\n    x.left = y.right;\n    if (y.right != null) y.right!.parent = x;\n    y.parent = x.parent;\n    if (x.parent == null) {\n      root = y;\n    } else if (x == x.parent!.right) {\n      x.parent!.right = y;\n    } else {\n      x.parent!.left = y;\n    }\n    y.right = x;\n    x.parent = y;\n  }\n\n  void inOrderTraversal([Node? node]) {\n    node ??= root;\n    if (node == null) return;\n    inOrderTraversal(node.left);\n    print('${node.key} (${node.isRed ? 'Red' : 'Black'})');\n    inOrderTraversal(node.right);\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a46d <+609>:\tint3\n   0x000000000008a46e <+610>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a475 <+617>:\tjmp    0x8a21e <main+18>\n   0x000000000008a47a <+622>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a481 <+629>:\tjmp    0x8a2ee <main+226>\n   0x000000000008a486:\tint3\n   0x000000000008a487:\tint3\n\n2\tvoid main() {\n3\t  final rbt = RedBlackTree();\n   0x000000000008a20c <+0>:\tpush   rbp\n   0x000000000008a20d <+1>:\tmov    rbp,rsp\n   0x000000000008a210 <+4>:\tsub    rsp,0x38\n   0x000000000008a214 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a218 <+12>:\tjbe    0x8a46e <main+610>\n   0x000000000008a21e <+18>:\tcall   0x8ac20 <new RedBlackTree>\n\n4\t  final values = [7, 3, 18, 10, 22, 8, 11, 26];\n5\t  \n6\t  print('Inserting values: $values');\n   0x000000000008a2ac <+160>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a2b3 <+167>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2b7 <+171>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a2bb <+175>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a2bf <+179>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2c3 <+183>:\tcall   0x5b448 <_StringBase._interpolate>\n   0x000000000008a2c8 <+188>:\tmov    rdi,rax\n   0x000000000008a2cb <+191>:\tcall   0x8abe8 <print>\n\n7\t  for (final val in values) {\n8\t    rbt.insert(val);\n9\t  }\n10\t  \n11\t  print('\\nIn-order traversal:');\n12\t  rbt.inOrderTraversal();\n   0x000000000008a3cb <+447>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a3cf <+451>:\tmov    r10,QWORD PTR [r15+0x7f]\n   0x000000000008a3d3 <+455>:\tcall   0x8a488 <RedBlackTree.inOrderTraversal>\n   0x000000000008a3d8 <+460>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a3dc <+464>:\tmov    r10d,0x6\n   0x000000000008a3e2 <+470>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a3e7 <+475>:\tmov    rcx,rax\n   0x000000000008a3ea <+478>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a3f1 <+485>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a3f5 <+489>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a3f9 <+493>:\tmov    rdx,QWORD PTR [rax+0x7]\n   0x000000000008a3fd <+497>:\tcmp    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a401 <+501>:\tjne    0x8a410 <main+516>\n   0x000000000008a407 <+507>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a40b <+511>:\tjmp    0x8a429 <main+541>\n   0x000000000008a410 <+516>:\tmov    rsi,QWORD PTR [rdx+0x7]\n   0x000000000008a414 <+520>:\tmov    rax,rsi\n   0x000000000008a417 <+523>:\tadd    rax,rax\n   0x000000000008a41a <+526>:\tjno    0x8a429 <main+541>\n   0x000000000008a420 <+532>:\tcall   0x84f8c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n13\t  print('\\nRoot: ${rbt.root?.key} (Black)');\n   0x000000000008a425 <+537>:\tmov    QWORD PTR [rax+0x7],rsi\n   0x000000000008a429 <+541>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a42d <+545>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a434 <+552>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008a438 <+556>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a43c <+560>:\tcall   0x5b448 <_StringBase._interpolate>\n   0x000000000008a441 <+565>:\tmov    rdi,rax\n   0x000000000008a444 <+568>:\tcall   0x8abe8 <print>\n\n14\t}\n15\t\n16\tclass Node {\n17\t  int key;\n18\t  Node? left;\n19\t  Node? right;\n20\t  Node? parent;\n21\t  bool isRed;\n22\t\n23\t  Node(this.key, {this.isRed = true});\n24\t}\n25\t\n26\tclass RedBlackTree {\n27\t  Node? root;\n28\t\n29\t  void insert(int key) {\n30\t    Node? newNode = Node(key);\n   0x000000000008a363 <+343>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a367 <+347>:\tsar    rax,1\n   0x000000000008a36a <+350>:\tjae    0x8a371 <main+357>\n   0x000000000008a36c <+352>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a371 <+357>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a375 <+361>:\tcall   0x8abdc <new Node>\n\n31\t    _insertBST(newNode);\n   0x000000000008a37a <+366>:\tmov    rcx,rax\n   0x000000000008a37d <+369>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a381 <+373>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a385 <+377>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x000000000008a389 <+381>:\tmov    rax,QWORD PTR [r14+0x78]\n   0x000000000008a38d <+385>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008a391 <+389>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a395 <+393>:\tmov    rsi,rcx\n   0x000000000008a398 <+396>:\tcall   0x8aadc <RedBlackTree._insertBST>\n\n32\t    _fixInsert(newNode);\n   0x000000000008a39d <+401>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a3a1 <+405>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a3a5 <+409>:\tcall   0x8a620 <RedBlackTree._fixInsert>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_36.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final trie = _Trie();\n  \n  // Insert words\n  trie.insert('apple');\n  trie.insert('app');\n  trie.insert('banana');\n  trie.insert('band');\n  \n  // Search for words\n  print(trie.search('apple'));   // true\n  print(trie.search('app'));     // true\n  print(trie.search('ban'));     // false\n  print(trie.search('band'));    // true\n  \n  // Check prefixes\n  print(trie.startsWith('app')); // true\n  print(trie.startsWith('ba'));  // true\n  print(trie.startsWith('cat')); // false\n}\n\nclass _TrieNode {\n  final Map<String, _TrieNode> children = {};\n  bool isEndOfWord = false;\n}\n\nclass _Trie {\n  final _TrieNode _root = _TrieNode();\n\n  void insert(String word) {\n    _TrieNode node = _root;\n    for (int i = 0; i < word.length; i++) {\n      final char = word[i];\n      node.children.putIfAbsent(char, () => _TrieNode());\n      node = node.children[char]!;\n    }\n    node.isEndOfWord = true;\n  }\n\n  bool search(String word) {\n    _TrieNode? node = _root;\n    for (int i = 0; i < word.length; i++) {\n      final char = word[i];\n      if (!node!.children.containsKey(char)) {\n        return false;\n      }\n      node = node.children[char];\n    }\n    return node != null && node.isEndOfWord;\n  }\n\n  bool startsWith(String prefix) {\n    _TrieNode? node = _root;\n    for (int i = 0; i < prefix.length; i++) {\n      final char = prefix[i];\n      if (!node!.children.containsKey(char)) {\n        return false;\n      }\n      node = node.children[char];\n    }\n    return node != null;\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a2d7 <+351>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2db <+355>:\tmov    rsp,rbp\n   0x000000000008a2de <+358>:\tpop    rbp\n   0x000000000008a2df <+359>:\tret\n   0x000000000008a2e0 <+360>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2e7 <+367>:\tjmp    0x8a18a <main+18>\n   0x000000000008a2ec <+0>:\ttest   al,0x1\n   0x000000000008a2ee <+2>:\tje     0x8a30a <assert type is _TrieNode+30>\n   0x000000000008a2f4 <+8>:\tmov    r8d,DWORD PTR [rax-0x1]\n   0x000000000008a2f8 <+12>:\tshr    r8d,0xc\n   0x000000000008a2fc <+16>:\tcmp    r8,0xe3\n   0x000000000008a303 <+23>:\tjne    0x8a30a <assert type is _TrieNode+30>\n   0x000000000008a309 <+29>:\tret\n   0x000000000008a30a <+30>:\tjmp    QWORD PTR [r14+0x270]\n   0x000000000008a311:\tint3\n   0x000000000008a312:\tint3\n   0x000000000008a313:\tint3\n\n2\tvoid main() {\n3\t  final trie = _Trie();\n   0x000000000008a1bd <+69>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a1c1 <+73>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x000000000008a1c5 <+77>:\tmov    r11b,BYTE PTR [rcx-0x1]\n   0x000000000008a1c9 <+81>:\tshr    r11d,0x2\n   0x000000000008a1cd <+85>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a1d1 <+89>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a1d5 <+93>:\tje     0x8a1dc <main+100>\n   0x000000000008a1d7 <+95>:\tcall   0x8376d <stub _iso_stub_WriteBarrierWrappersStub+13>\n   0x000000000008a1dc <+100>:\tcall   0x8a948 <new _Trie>\n\n4\t  \n5\t  // Insert words\n6\t  trie.insert('apple');\n   0x000000000008a1e1 <+105>:\tmov    rcx,rax\n   0x000000000008a1e4 <+108>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1e8 <+112>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1ec <+116>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x000000000008a1f0 <+120>:\tmov    rdi,rcx\n   0x000000000008a1f3 <+123>:\tmov    rsi,QWORD PTR [r15+0x7bf]\n   0x000000000008a1fa <+130>:\tcall   0x8a5f8 <_Trie.insert>\n\n7\t  trie.insert('app');\n   0x000000000008a1ff <+135>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a203 <+139>:\tmov    rsi,QWORD PTR [r15+0x7c7]\n   0x000000000008a20a <+146>:\tcall   0x8a5f8 <_Trie.insert>\n\n8\t  trie.insert('banana');\n   0x000000000008a20f <+151>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a213 <+155>:\tmov    rsi,QWORD PTR [r15+0x7cf]\n   0x000000000008a21a <+162>:\tcall   0x8a5f8 <_Trie.insert>\n\n9\t  trie.insert('band');\n   0x000000000008a21f <+167>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a223 <+171>:\tmov    rsi,QWORD PTR [r15+0x7d7]\n   0x000000000008a22a <+178>:\tcall   0x8a5f8 <_Trie.insert>\n\n10\t  \n11\t  // Search for words\n12\t  print(trie.search('apple'));   // true\n   0x000000000008a22f <+183>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a233 <+187>:\tmov    rsi,QWORD PTR [r15+0x7bf]\n   0x000000000008a23a <+194>:\tcall   0x8a4d4 <_Trie.search>\n   0x000000000008a23f <+199>:\tmov    rdi,rax\n   0x000000000008a242 <+202>:\tcall   0x8a42c <print>\n\n13\t  print(trie.search('app'));     // true\n   0x000000000008a247 <+207>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a24b <+211>:\tmov    rsi,QWORD PTR [r15+0x7c7]\n   0x000000000008a252 <+218>:\tcall   0x8a4d4 <_Trie.search>\n   0x000000000008a257 <+223>:\tmov    rdi,rax\n   0x000000000008a25a <+226>:\tcall   0x8a42c <print>\n\n14\t  print(trie.search('ban'));     // false\n   0x000000000008a25f <+231>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a263 <+235>:\tmov    rsi,QWORD PTR [r15+0x7df]\n   0x000000000008a26a <+242>:\tcall   0x8a4d4 <_Trie.search>\n   0x000000000008a26f <+247>:\tmov    rdi,rax\n   0x000000000008a272 <+250>:\tcall   0x8a42c <print>\n\n15\t  print(trie.search('band'));    // true\n   0x000000000008a277 <+255>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a27b <+259>:\tmov    rsi,QWORD PTR [r15+0x7d7]\n   0x000000000008a282 <+266>:\tcall   0x8a4d4 <_Trie.search>\n   0x000000000008a287 <+271>:\tmov    rdi,rax\n   0x000000000008a28a <+274>:\tcall   0x8a42c <print>\n\n16\t  \n17\t  // Check prefixes\n18\t  print(trie.startsWith('app')); // true\n   0x000000000008a28f <+279>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a293 <+283>:\tmov    rsi,QWORD PTR [r15+0x7c7]\n   0x000000000008a29a <+290>:\tcall   0x8a314 <_Trie.startsWith>\n   0x000000000008a29f <+295>:\tmov    rdi,rax\n   0x000000000008a2a2 <+298>:\tcall   0x8a42c <print>\n\n19\t  print(trie.startsWith('ba'));  // true\n   0x000000000008a2a7 <+303>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a2ab <+307>:\tmov    rsi,QWORD PTR [r15+0x7e7]\n   0x000000000008a2b2 <+314>:\tcall   0x8a314 <_Trie.startsWith>\n   0x000000000008a2b7 <+319>:\tmov    rdi,rax\n   0x000000000008a2ba <+322>:\tcall   0x8a42c <print>\n\n20\t  print(trie.startsWith('cat')); // false\n   0x000000000008a2bf <+327>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a2c3 <+331>:\tmov    rsi,QWORD PTR [r15+0x7ef]\n   0x000000000008a2ca <+338>:\tcall   0x8a314 <_Trie.startsWith>\n   0x000000000008a2cf <+343>:\tmov    rdi,rax\n   0x000000000008a2d2 <+346>:\tcall   0x8a42c <print>\n\n21\t}\n22\t\n23\tclass _TrieNode {\n24\t  final Map<String, _TrieNode> children = {};\n   0x000000000008a18f <+23>:\tmov    rcx,rax\n   0x000000000008a192 <+26>:\tmov    rax,QWORD PTR [r14+0x80]\n   0x000000000008a199 <+33>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a19d <+37>:\tmov    QWORD PTR [rcx+0xf],rax\n   0x000000000008a1a1 <+41>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a1a8 <+48>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a1ad <+53>:\tmov    r11,QWORD PTR [r14+0x88]\n   0x000000000008a1b4 <+60>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a1b8 <+64>:\tcall   0x65e6c <new Map._fromLiteral>\n\n25\t  bool isEndOfWord = false;\n26\t}\n27\t\n28\tclass _Trie {\n29\t  final _TrieNode _root = _TrieNode();\n   0x000000000008a178 <+0>:\tpush   rbp\n   0x000000000008a179 <+1>:\tmov    rbp,rsp\n   0x000000000008a17c <+4>:\tsub    rsp,0x20\n   0x000000000008a180 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a184 <+12>:\tjbe    0x8a2e0 <main+360>\n   0x000000000008a18a <+18>:\tcall   0x8a954 <new _TrieNode>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_38.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Implementation of KMP string matching algorithm\n  String text = \"ABABDABACDABABCABAB\";\n  String pattern = \"ABABCABAB\";\n  \n  // Precompute the longest prefix suffix (LPS) array\n  List<int> computeLPS(String pat) {\n    int n = pat.length;\n    List<int> lps = List.filled(n, 0);\n    int len = 0;\n    int i = 1;\n    \n    while (i < n) {\n      if (pat[i] == pat[len]) {\n        len++;\n        lps[i] = len;\n        i++;\n      } else {\n        if (len != 0) {\n          len = lps[len - 1];\n        } else {\n          lps[i] = 0;\n          i++;\n        }\n      }\n    }\n    return lps;\n  }\n  \n  // Perform KMP search\n  void kmpSearch(String txt, String pat) {\n    int m = pat.length;\n    int n = txt.length;\n    List<int> lps = computeLPS(pat);\n    int i = 0; // index for txt\n    int j = 0; // index for pat\n    \n    while (i < n) {\n      if (pat[j] == txt[i]) {\n        i++;\n        j++;\n      }\n      if (j == m) {\n        print(\"Pattern found at index ${i - j}\");\n        j = lps[j - 1];\n      } else if (i < n && pat[j] != txt[i]) {\n        if (j != 0) {\n          j = lps[j - 1];\n        } else {\n          i++;\n        }\n      }\n    }\n  }\n  \n  // Execute the search\n  kmpSearch(text, pattern);\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a229 <+29>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a230 <+36>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a234 <+40>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a238 <+44>:\tcall   0x84124 <stub _iso_stub_AllocateClosureStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_40.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example usage\n  String text = \"ABAAABCD\";\n  String pattern = \"ABC\";\n  \n  // Implementation of Boyer-Moore string search\n  List<int> boyerMooreSearch(String text, String pattern) {\n    if (pattern.isEmpty) return [];\n    \n    final n = text.length;\n    final m = pattern.length;\n    final Map<String, int> badChar = {};\n    final List<int> occurrences = [];\n    \n    // Preprocess bad character heuristic\n    for (int i = 0; i < m; i++) {\n      badChar[pattern[i]] = i;\n    }\n    \n    int shift = 0;\n    while (shift <= (n - m)) {\n      int j = m - 1;\n      \n      // Find mismatch from right\n      while (j >= 0 && pattern[j] == text[shift + j]) {\n        j--;\n      }\n      \n      if (j < 0) {\n        occurrences.add(shift);\n        shift += (shift + m < n) ? m - (badChar[text[shift + m]] ?? -1) : 1;\n      } else {\n        final bcShift = j - (badChar[text[shift + j]] ?? -1);\n        shift += bcShift > 0 ? bcShift : 1;\n      }\n    }\n    \n    return occurrences;\n  }\n  \n  // Execute search and print results\n  final result = boyerMooreSearch(text, pattern);\n  print(\"Pattern found at indices: $result\");\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a2be <+130>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2c2 <+134>:\tmov    rsp,rbp\n   0x000000000008a2c5 <+137>:\tpop    rbp\n   0x000000000008a2c6 <+138>:\tret\n   0x000000000008a2c7 <+139>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2ce <+146>:\tjmp    0x8a24e <main+18>\n   0x000000000008a2d3:\tint3\n\n2\tvoid main() {\n3\t  // Example usage\n4\t  String text = \"ABAAABCD\";\n5\t  String pattern = \"ABC\";\n6\t  \n7\t  // Implementation of Boyer-Moore string search\n8\t  List<int> boyerMooreSearch(String text, String pattern) {\n   0x000000000008a23c <+0>:\tpush   rbp\n   0x000000000008a23d <+1>:\tmov    rbp,rsp\n   0x000000000008a240 <+4>:\tsub    rsp,0x20\n   0x000000000008a244 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a248 <+12>:\tjbe    0x8a2c7 <main+139>\n   0x000000000008a24e <+18>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a255 <+25>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a259 <+29>:\tcall   0x84154 <stub _iso_stub_AllocateClosureStub>\n\n9\t    if (pattern.isEmpty) return [];\n10\t    \n11\t    final n = text.length;\n12\t    final m = pattern.length;\n13\t    final Map<String, int> badChar = {};\n14\t    final List<int> occurrences = [];\n15\t    \n16\t    // Preprocess bad character heuristic\n17\t    for (int i = 0; i < m; i++) {\n18\t      badChar[pattern[i]] = i;\n19\t    }\n20\t    \n21\t    int shift = 0;\n22\t    while (shift <= (n - m)) {\n23\t      int j = m - 1;\n24\t      \n25\t      // Find mismatch from right\n26\t      while (j >= 0 && pattern[j] == text[shift + j]) {\n27\t        j--;\n28\t      }\n29\t      \n30\t      if (j < 0) {\n31\t        occurrences.add(shift);\n32\t        shift += (shift + m < n) ? m - (badChar[text[shift + m]] ?? -1) : 1;\n33\t      } else {\n34\t        final bcShift = j - (badChar[text[shift + j]] ?? -1);\n35\t        shift += bcShift > 0 ? bcShift : 1;\n36\t      }\n37\t    }\n38\t    \n39\t    return occurrences;\n40\t  }\n41\t  \n42\t  // Execute search and print results\n43\t  final result = boyerMooreSearch(text, pattern);\n   0x000000000008a25e <+34>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a263 <+39>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a26a <+46>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a26f <+51>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a276 <+58>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a27a <+62>:\tmov    r10,QWORD PTR [r15+0x42f]\n   0x000000000008a281 <+69>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a285 <+73>:\tcall   rcx\n   0x000000000008a287 <+75>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a28b <+79>:\tmov    r10d,0x4\n   0x000000000008a291 <+85>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a295 <+89>:\tcall   0x84d38 <stub _iso_stub_AllocateArrayStub>\n\n44\t  print(\"Pattern found at indices: $result\");\n   0x000000000008a29a <+94>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a2a1 <+101>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2a5 <+105>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a2a9 <+109>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a2ad <+113>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2b1 <+117>:\tcall   0x5b3a4 <_StringBase._interpolate>\n   0x000000000008a2b6 <+122>:\tmov    rdi,rax\n   0x000000000008a2b9 <+125>:\tcall   0x8a2d4 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_42.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Sample input string to compress\n  String input = \"ABABABA\";\n  \n  // LZW Compression\n  Map<String, int> dictionary = {};\n  int dictSize = 256;\n  \n  // Initialize dictionary with ASCII values\n  for (int i = 0; i < 256; i++) {\n    dictionary[String.fromCharCode(i)] = i;\n  }\n  \n  String current = \"\";\n  List<int> compressed = [];\n  \n  for (int i = 0; i < input.length; i++) {\n    String char = input[i];\n    String combined = current + char;\n    \n    if (dictionary.containsKey(combined)) {\n      current = combined;\n    } else {\n      compressed.add(dictionary[current]!);\n      dictionary[combined] = dictSize++;\n      current = char;\n    }\n  }\n  \n  if (current.isNotEmpty) {\n    compressed.add(dictionary[current]!);\n  }\n  \n  print(\"Original: $input\");\n  print(\"Compressed: $compressed\");\n  \n  // LZW Decompression\n  Map<int, String> reverseDict = {};\n  for (int i = 0; i < 256; i++) {\n    reverseDict[i] = String.fromCharCode(i);\n  }\n  \n  int rdSize = 256;\n  String previous = reverseDict[compressed[0]]!;\n  StringBuffer result = StringBuffer(previous);\n  \n  for (int i = 1; i < compressed.length; i++) {\n    int code = compressed[i];\n    String currentStr;\n    \n    if (reverseDict.containsKey(code)) {\n      currentStr = reverseDict[code]!;\n    } else if (code == rdSize) {\n      currentStr = previous + previous[0];\n    } else {\n      throw Exception(\"Invalid compressed code: $code\");\n    }\n    \n    result.write(currentStr);\n    reverseDict[rdSize++] = previous + currentStr[0];\n    previous = currentStr;\n  }\n  \n  print(\"Decompressed: ${result.toString()}\");\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a8b9 <+1757>:\tint3\n   0x000000000008a8ba <+1758>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Sample input string to compress\n4\t  String input = \"ABABABA\";\n5\t  \n6\t  // LZW Compression\n7\t  Map<String, int> dictionary = {};\n   0x000000000008a1dc <+0>:\tpush   rbp\n   0x000000000008a1dd <+1>:\tmov    rbp,rsp\n   0x000000000008a1e0 <+4>:\tsub    rsp,0x60\n   0x000000000008a1e4 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1e8 <+12>:\tjbe    0x8a8ba <main+1758>\n   0x000000000008a1ee <+18>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a1f5 <+25>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a1fa <+30>:\tmov    r11,QWORD PTR [r14+0x88]\n   0x000000000008a201 <+37>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a205 <+41>:\tcall   0x65de0 <new Map._fromLiteral>\n\n8\t  int dictSize = 256;\n9\t  \n10\t  // Initialize dictionary with ASCII values\n11\t  for (int i = 0; i < 256; i++) {\n   0x000000000008a8c1 <+1765>:\tjmp    0x8a1ee <main+18>\n   0x000000000008a8c6 <+1770>:\tcall   QWORD PTR [r14+0x230]\n\n12\t    dictionary[String.fromCharCode(i)] = i;\n   0x000000000008a20a <+46>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a20e <+50>:\txor    ecx,ecx\n   0x000000000008a210 <+52>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a214 <+56>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a218 <+60>:\tjbe    0x8a8c6 <main+1770>\n   0x000000000008a21e <+66>:\tcmp    rcx,0x100\n   0x000000000008a225 <+73>:\tjge    0x8a287 <main+171>\n   0x000000000008a22b <+79>:\tmov    rsi,rcx\n   0x000000000008a22e <+82>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a232 <+86>:\tcall   0x5d5e4 <new String.fromCharCode>\n\n13\t  }\n14\t  \n15\t  String current = \"\";\n16\t  List<int> compressed = [];\n   0x000000000008a276 <+154>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a27a <+158>:\tadd    rax,0x1\n   0x000000000008a27e <+162>:\tmov    rcx,rax\n   0x000000000008a281 <+165>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a285 <+169>:\tjmp    0x8a210 <main+52>\n   0x000000000008a287 <+171>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a28e <+178>:\txor    esi,esi\n   0x000000000008a290 <+180>:\tcall   0x52e38 <new _GrowableList>\n\n17\t  \n18\t  for (int i = 0; i < input.length; i++) {\n   0x000000000008a8cd <+1777>:\tjmp    0x8a21e <main+66>\n   0x000000000008a8d2 <+1782>:\tcall   QWORD PTR [r14+0x230]\n\n19\t    String char = input[i];\n20\t    String combined = current + char;\n   0x000000000008a295 <+185>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a299 <+189>:\tmov    ebx,0x100\n   0x000000000008a29e <+194>:\tmov    rsi,QWORD PTR [r15+0xcf]\n   0x000000000008a2a5 <+201>:\txor    edx,edx\n   0x000000000008a2a7 <+203>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a2ab <+207>:\tmov    rcx,QWORD PTR [r15+0x7bf]\n   0x000000000008a2b2 <+214>:\tmov    QWORD PTR [rbp-0x8],rbx\n   0x000000000008a2b6 <+218>:\tmov    QWORD PTR [rbp-0x20],rsi\n   0x000000000008a2ba <+222>:\tmov    QWORD PTR [rbp-0x28],rdx\n   0x000000000008a2be <+226>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a2c2 <+230>:\tjbe    0x8a8d2 <main+1782>\n   0x000000000008a2c8 <+236>:\tcmp    rdx,0x7\n   0x000000000008a2cc <+240>:\tjge    0x8a44b <main+623>\n   0x000000000008a2d2 <+246>:\tmovzx  r8,BYTE PTR [rcx+rdx*1+0xf]\n   0x000000000008a2d8 <+252>:\tmov    r9,r8\n   0x000000000008a2db <+255>:\tadd    r9,r9\n   0x000000000008a2de <+258>:\tmov    r8,QWORD PTR [r14+0x2a0]\n   0x000000000008a2e5 <+265>:\tmov    r8,QWORD PTR [r8+r9*4]\n   0x000000000008a2e9 <+269>:\tmov    QWORD PTR [rbp-0x18],r8\n   0x000000000008a2ed <+273>:\tmov    QWORD PTR [rsp+0x8],rsi\n   0x000000000008a2f2 <+278>:\tmov    QWORD PTR [rsp],r8\n   0x000000000008a2f6 <+282>:\tcall   0x5c328 <_StringBase.+>\n\n21\t    \n22\t    if (dictionary.containsKey(combined)) {\n23\t      current = combined;\n24\t    } else {\n25\t      compressed.add(dictionary[current]!);\n   0x000000000008a8d9 <+1789>:\tjmp    0x8a2c8 <main+236>\n   0x000000000008a8de <+1794>:\tcall   0x85378 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n26\t      dictionary[combined] = dictSize++;\n27\t      current = char;\n28\t    }\n29\t  }\n30\t  \n31\t  if (current.isNotEmpty) {\n32\t    compressed.add(dictionary[current]!);\n   0x000000000008a8e3 <+1799>:\tcall   0x85378 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n33\t  }\n34\t  \n35\t  print(\"Original: $input\");\n   0x000000000008a4b5 <+729>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a4b9 <+733>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000008a4bd <+737>:\tmov    rax,rbx\n   0x000000000008a4c0 <+740>:\tadd    rax,0x1\n   0x000000000008a4c4 <+744>:\tmov    rdx,rax\n   0x000000000008a4c7 <+747>:\tadd    rdx,rdx\n   0x000000000008a4ca <+750>:\tmov    QWORD PTR [rcx+0xf],rdx\n   0x000000000008a4ce <+754>:\tmov    rdx,QWORD PTR [rcx+0x17]\n   0x000000000008a4d2 <+758>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a4d6 <+762>:\tlea    r13,[rdx+rbx*8+0x17]\n   0x000000000008a4db <+767>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a4df <+771>:\ttest   al,0x1\n   0x000000000008a4e1 <+773>:\tje     0x8a4fa <main+798>\n   0x000000000008a4e3 <+775>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a4e7 <+779>:\tshr    r11d,0x2\n   0x000000000008a4eb <+783>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a4ef <+787>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a4f3 <+791>:\tje     0x8a4fa <main+798>\n   0x000000000008a4f5 <+793>:\tcall   0x8330c <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a4fa <+798>:\tjmp    0x8a503 <main+807>\n   0x000000000008a4ff <+803>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a503 <+807>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a50a <+814>:\tcall   0x8a93c <print>\n   0x000000000008a50f <+819>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a513 <+823>:\tmov    r10d,0x4\n   0x000000000008a519 <+829>:\tcall   0x84cf4 <stub _iso_stub_AllocateArrayStub>\n\n36\t  print(\"Compressed: $compressed\");\n   0x000000000008a51e <+834>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a525 <+841>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a529 <+845>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a52d <+849>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a531 <+853>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a535 <+857>:\tcall   0x58704 <_StringBase._interpolate>\n   0x000000000008a53a <+862>:\tmov    rdi,rax\n   0x000000000008a53d <+865>:\tcall   0x8a93c <print>\n\n37\t  \n38\t  // LZW Decompression\n39\t  Map<int, String> reverseDict = {};\n   0x000000000008a542 <+870>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a549 <+877>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a54e <+882>:\tmov    r11,QWORD PTR [r14+0x88]\n   0x000000000008a555 <+889>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a559 <+893>:\tcall   0x65de0 <new Map._fromLiteral>\n\n40\t  for (int i = 0; i < 256; i++) {\n   0x000000000008a8e8 <+1804>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a8ef <+1811>:\tjmp    0x8a572 <main+918>\n   0x000000000008a8f4 <+1816>:\tcall   0x85238 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n41\t    reverseDict[i] = String.fromCharCode(i);\n   0x000000000008a55e <+898>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a562 <+902>:\txor    ecx,ecx\n   0x000000000008a564 <+904>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a568 <+908>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a56c <+912>:\tjbe    0x8a8e8 <main+1804>\n   0x000000000008a572 <+918>:\tcmp    rcx,0x100\n   0x000000000008a579 <+925>:\tjge    0x8a5e0 <main+1028>\n   0x000000000008a57f <+931>:\tmov    rsi,rcx\n   0x000000000008a582 <+934>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a586 <+938>:\tcall   0x5d5e4 <new String.fromCharCode>\n   0x000000000008a58b <+943>:\tmov    rdx,rax\n   0x000000000008a58e <+946>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a592 <+950>:\tmov    QWORD PTR [rbp-0x20],rdx\n   0x000000000008a596 <+954>:\tmov    rax,rcx\n   0x000000000008a599 <+957>:\tadd    rax,rax\n   0x000000000008a59c <+960>:\tjno    0x8a5ab <main+975>\n   0x000000000008a5a2 <+966>:\tcall   0x84f78 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n42\t  }\n43\t  \n44\t  int rdSize = 256;\n45\t  String previous = reverseDict[compressed[0]]!;\n   0x000000000008a8f9 <+1821>:\tcall   0x85378 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n46\t  StringBuffer result = StringBuffer(previous);\n   0x000000000008a609 <+1069>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a60d <+1073>:\tmov    rcx,QWORD PTR [rdi+0x17]\n   0x000000000008a611 <+1077>:\tcmp    rcx,rax\n   0x000000000008a614 <+1080>:\tjne    0x8a61e <main+1090>\n   0x000000000008a61a <+1086>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a61e <+1090>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a622 <+1094>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a626 <+1098>:\tje     0x8a8f9 <main+1821>\n   0x000000000008a62c <+1104>:\tcall   0x59924 <new StringBuffer>\n   0x000000000008a631 <+1109>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a635 <+1113>:\tmov    r11,QWORD PTR [rbp-0x18]\n   0x000000000008a639 <+1117>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a63d <+1121>:\tmov    rdi,rax\n   0x000000000008a640 <+1124>:\tmov    r10,QWORD PTR [r15+0x377]\n   0x000000000008a647 <+1131>:\tcall   0x598c0 <new StringBuffer>\n\n47\t  \n48\t  for (int i = 1; i < compressed.length; i++) {\n   0x000000000008a8fe <+1826>:\tcall   QWORD PTR [r14+0x230]\n\n49\t    int code = compressed[i];\n50\t    String currentStr;\n51\t    \n52\t    if (reverseDict.containsKey(code)) {\n53\t      currentStr = reverseDict[code]!;\n   0x000000000008a905 <+1833>:\tjmp    0x8a679 <main+1181>\n   0x000000000008a90a <+1838>:\tcall   0x85378 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n   0x000000000008a90f:\tint3\n\n54\t    } else if (code == rdSize) {\n55\t      currentStr = previous + previous[0];\n   0x000000000008a6c9 <+1261>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a6cd <+1265>:\tmov    rcx,QWORD PTR [rdi+0x17]\n   0x000000000008a6d1 <+1269>:\tcmp    rcx,rax\n   0x000000000008a6d4 <+1272>:\tjne    0x8a6de <main+1282>\n   0x000000000008a6da <+1278>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a6de <+1282>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a6e2 <+1286>:\tje     0x8a90a <main+1838>\n   0x000000000008a6e8 <+1292>:\tmov    rbx,rax\n   0x000000000008a6eb <+1295>:\tjmp    0x8a73a <main+1374>\n   0x000000000008a6f0 <+1300>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a6f4 <+1304>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a6f8 <+1308>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a6fc <+1312>:\tsar    rcx,1\n   0x000000000008a6ff <+1315>:\tjae    0x8a706 <main+1322>\n   0x000000000008a701 <+1317>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a706 <+1322>:\tcmp    rcx,rax\n   0x000000000008a709 <+1325>:\tjne    0x8a879 <main+1693>\n   0x000000000008a70f <+1331>:\tmov    r11,QWORD PTR [rbp-0x40]\n   0x000000000008a713 <+1335>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a718 <+1340>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a720 <+1348>:\tcall   0x585f8 <_StringBase.[]>\n   0x000000000008a725 <+1353>:\tmov    r11,QWORD PTR [rbp-0x40]\n   0x000000000008a729 <+1357>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a72e <+1362>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a732 <+1366>:\tcall   0x5c328 <_StringBase.+>\n\n56\t    } else {\n57\t      throw Exception(\"Invalid compressed code: $code\");\n   0x000000000008a88c <+1712>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a893 <+1719>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a897 <+1723>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a89b <+1727>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a89f <+1731>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a8a3 <+1735>:\tcall   0x58704 <_StringBase._interpolate>\n   0x000000000008a8a8 <+1740>:\tmov    rsi,rax\n   0x000000000008a8ab <+1743>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a8af <+1747>:\tcall   0x8a910 <new Exception>\n   0x000000000008a8b4 <+1752>:\tcall   0x832ec <stub _iso_stub_ThrowStub>\n\n58\t    }\n59\t    \n60\t    result.write(currentStr);\n61\t    reverseDict[rdSize++] = previous + currentStr[0];\n   0x000000000008a776 <+1434>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a77a <+1438>:\tmov    r8,rax\n   0x000000000008a77d <+1441>:\tadd    r8,0x1\n   0x000000000008a781 <+1445>:\tmov    QWORD PTR [rbp-0x48],r8\n   0x000000000008a785 <+1449>:\tmov    r11,QWORD PTR [rbp-0x18]\n   0x000000000008a789 <+1453>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a78e <+1458>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a796 <+1466>:\tcall   0x585f8 <_StringBase.[]>\n   0x000000000008a79b <+1471>:\tmov    r11,QWORD PTR [rbp-0x40]\n   0x000000000008a79f <+1475>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a7a4 <+1480>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a7a8 <+1484>:\tcall   0x5c328 <_StringBase.+>\n   0x000000000008a7ad <+1489>:\tmov    rdx,rax\n   0x000000000008a7b0 <+1492>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a7b4 <+1496>:\tmov    QWORD PTR [rbp-0x50],rdx\n   0x000000000008a7b8 <+1500>:\tmov    rax,rcx\n   0x000000000008a7bb <+1503>:\tadd    rax,rax\n   0x000000000008a7be <+1506>:\tjno    0x8a7cd <main+1521>\n   0x000000000008a7c4 <+1512>:\tcall   0x84f78 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n62\t    previous = currentStr;\n63\t  }\n64\t  \n65\t  print(\"Decompressed: ${result.toString()}\");\n   0x000000000008a818 <+1596>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a81c <+1600>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a823 <+1607>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a827 <+1611>:\tmov    r11,QWORD PTR [rbp-0x20]\n   0x000000000008a82b <+1615>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a82f <+1619>:\tcall   0x74024 <StringBuffer.toString>\n   0x000000000008a834 <+1624>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a838 <+1628>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a83c <+1632>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a840 <+1636>:\ttest   al,0x1\n   0x000000000008a842 <+1638>:\tje     0x8a85b <main+1663>\n   0x000000000008a844 <+1640>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a848 <+1644>:\tshr    r11d,0x2\n   0x000000000008a84c <+1648>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a850 <+1652>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a854 <+1656>:\tje     0x8a85b <main+1663>\n   0x000000000008a856 <+1658>:\tcall   0x8330c <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a85b <+1663>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a85f <+1667>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a863 <+1671>:\tcall   0x58704 <_StringBase._interpolate>\n   0x000000000008a868 <+1676>:\tmov    rdi,rax\n   0x000000000008a86b <+1679>:\tcall   0x8a93c <print>\n   0x000000000008a870 <+1684>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a874 <+1688>:\tmov    rsp,rbp\n   0x000000000008a877 <+1691>:\tpop    rbp\n   0x000000000008a878 <+1692>:\tret\n   0x000000000008a879 <+1693>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a87d <+1697>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a881 <+1701>:\tmov    r10d,0x4\n   0x000000000008a887 <+1707>:\tcall   0x84cf4 <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_43.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main(List<String> arguments) {\n  // Define upper limit for sieve (adjust based on needs)\n  const int limit = 1000000;\n  \n  // Initialize sieve with all numbers marked as prime\n  List<bool> sieve = List<bool>.filled(limit + 1, true);\n  sieve[0] = sieve[1] = false; // 0 and 1 are not primes\n\n  // Sieve of Eratosthenes algorithm\n  for (int i = 2; i * i <= limit; i++) {\n    if (sieve[i]) {\n      for (int j = i * i; j <= limit; j += i) {\n        sieve[j] = false;\n      }\n    }\n  }\n\n  // Test numbers from command line arguments\n  for (String arg in arguments) {\n    int? number = int.tryParse(arg);\n    if (number == null || number < 0 || number > limit) {\n      print(\"Invalid input: $arg (must be integer between 0 and $limit)\");\n      continue;\n    }\n    print(\"$number is ${sieve[number] ? 'prime' : 'not prime'}\");\n  }\n\n  // If no arguments provided, demonstrate with example\n  if (arguments.isEmpty) {\n    const int exampleNumber = 17;\n    print(\"No input provided. Example: $exampleNumber is ${sieve[exampleNumber] ? 'prime' : 'not prime'}\");\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a1ec <+36>:\tmov    rdx,rax\n   0x000000000008a1ef <+39>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a1f3 <+43>:\txor    eax,eax\n   0x000000000008a1f5 <+45>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1f9 <+49>:\tjbe    0x8a504 <main+828>\n   0x000000000008a1ff <+55>:\tcmp    rax,0xf4241\n   0x000000000008a205 <+61>:\tjge    0x8a21a <main+82>\n   0x000000000008a20b <+67>:\tmov    r11,QWORD PTR [r14+0x78]\n   0x000000000008a20f <+71>:\tmov    QWORD PTR [rdx+rax*8+0x17],r11\n   0x000000000008a214 <+76>:\tadd    rax,0x1\n   0x000000000008a218 <+80>:\tjmp    0x8a1f5 <main+45>\n   0x000000000008a21a <+82>:\tmov    r11,QWORD PTR [r14+0x80]\n   0x000000000008a221 <+89>:\tmov    QWORD PTR [rdx+0x1f],r11\n   0x000000000008a225 <+93>:\tmov    r11,QWORD PTR [r14+0x80]\n   0x000000000008a22c <+100>:\tmov    QWORD PTR [rdx+0x17],r11\n   0x000000000008a230 <+104>:\tmov    ecx,0x2\n   0x000000000008a235 <+109>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a239 <+113>:\tjbe    0x8a510 <main+840>\n   0x000000000008a23f <+119>:\tmov    rsi,rcx\n   0x000000000008a242 <+122>:\timul   rsi,rcx\n   0x000000000008a246 <+126>:\tcmp    rsi,0xf4240\n   0x000000000008a24d <+133>:\tjg     0x8a2b0 <main+232>\n   0x000000000008a253 <+139>:\tmov    rbx,rcx\n   0x000000000008a256 <+142>:\tmov    eax,0xf4241\n   0x000000000008a25b <+147>:\tcmp    rbx,rax\n   0x000000000008a25e <+150>:\tjae    0x8a51c <main+852>\n   0x000000000008a264 <+156>:\tmov    rax,QWORD PTR [rdx+rcx*8+0x17]\n   0x000000000008a269 <+161>:\ttest   al,0x10\n   0x000000000008a26b <+163>:\tjne    0x8a2aa <main+226>\n   0x000000000008a271 <+169>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a275 <+173>:\tjbe    0x8a521 <main+857>\n   0x000000000008a27b <+179>:\tcmp    rsi,0xf4240\n   0x000000000008a282 <+186>:\tjg     0x8a2aa <main+226>\n   0x000000000008a288 <+192>:\tmov    rbx,rsi\n   0x000000000008a28b <+195>:\tmov    eax,0xf4241\n   0x000000000008a290 <+200>:\tcmp    rbx,rax\n   0x000000000008a293 <+203>:\tjae    0x8a52d <main+869>\n   0x000000000008a299 <+209>:\tmov    r11,QWORD PTR [r14+0x80]\n   0x000000000008a2a0 <+216>:\tmov    QWORD PTR [rdx+rsi*8+0x17],r11\n   0x000000000008a2a5 <+221>:\tadd    rsi,rcx\n   0x000000000008a2a8 <+224>:\tjmp    0x8a271 <main+169>\n   0x000000000008a2aa <+226>:\tadd    rcx,0x1\n   0x000000000008a2ae <+230>:\tjmp    0x8a235 <main+109>\n   0x000000000008a2b0 <+232>:\tmov    rax,QWORD PTR [rbp+0x10]\n   0x000000000008a2b4 <+236>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a2b7 <+239>:\tshr    ecx,0xc\n   0x000000000008a2ba <+242>:\tmov    rdi,rax\n   0x000000000008a2bd <+245>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a2c1 <+249>:\tcall   QWORD PTR [rax+rcx*8+0x77a8]\n   0x000000000008a2c8 <+256>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a2cc <+260>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a2d0 <+264>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a2d4 <+268>:\tjbe    0x8a532 <main+874>\n   0x000000000008a2da <+274>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a2dd <+277>:\tshr    ecx,0xc\n   0x000000000008a2e0 <+280>:\tmov    rdi,rax\n   0x000000000008a2e3 <+283>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a2e7 <+287>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a2ea <+290>:\ttest   al,0x10\n   0x000000000008a2ec <+292>:\tjne    0x8a465 <main+669>\n   0x000000000008a2f2 <+298>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a2f6 <+302>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a2f9 <+305>:\tshr    ecx,0xc\n   0x000000000008a2fc <+308>:\tmov    rdi,rax\n   0x000000000008a2ff <+311>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a303 <+315>:\tcall   QWORD PTR [rax+rcx*8-0x80]\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_45.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  int a = 48;\n  int b = 18;\n  \n  while (b != 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  \n  print('GCD: $a');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a1ce <+122>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a1d5 <+129>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1d9 <+133>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a1dd <+137>:\tmov    rdx,rcx\n   0x000000000008a1e0 <+140>:\tadd    rdx,rdx\n   0x000000000008a1e3 <+143>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a1e7 <+147>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1eb <+151>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1f0 <+156>:\tmov    rdi,rax\n   0x000000000008a1f3 <+159>:\tcall   0x8a234 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_46.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example: Find the modular inverse of 3 modulo 11\n  int a = 3;\n  int m = 11;\n\n  int t = 0;\n  int newT = 1;\n  int r = m;\n  int newR = a;\n\n  while (newR != 0) {\n    int quotient = r ~/ newR;\n    (t, newT) = (newT, t - quotient * newT);\n    (r, newR) = (newR, r - quotient * newR);\n  }\n\n  if (r > 1) {\n    print(\"$a and $m are not coprime. Modular inverse does not exist.\");\n    return;\n  }\n\n  if (t < 0) {\n    t += m;\n  }\n\n  print(\"Modular inverse of $a modulo $m is $t\");\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a28a <+310>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a28e <+314>:\tmov    rsp,rbp\n   0x000000000008a291 <+317>:\tpop    rbp\n   0x000000000008a292 <+318>:\tret\n   0x000000000008a293 <+319>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Example: Find the modular inverse of 3 modulo 11\n4\t  int a = 3;\n5\t  int m = 11;\n6\t\n7\t  int t = 0;\n8\t  int newT = 1;\n9\t  int r = m;\n10\t  int newR = a;\n11\t\n12\t  while (newR != 0) {\n   0x000000000008a29a <+326>:\tjmp    0x8a166 <main+18>\n   0x000000000008a29f <+331>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2a6 <+338>:\tjmp    0x8a181 <main+45>\n   0x000000000008a2ab <+343>:\tpush   rdi\n   0x000000000008a2ac <+344>:\tpush   rsi\n   0x000000000008a2ad <+345>:\tpush   rbx\n   0x000000000008a2ae <+346>:\tpush   rcx\n   0x000000000008a2af <+347>:\tpush   rax\n   0x000000000008a2b0 <+348>:\tmov    rbx,QWORD PTR [r14+0x460]\n   0x000000000008a2b7 <+355>:\txor    r10d,r10d\n   0x000000000008a2ba <+358>:\tcall   QWORD PTR [r14+0x200]\n   0x000000000008a2c1 <+365>:\tint3\n   0x000000000008a2c2 <+366>:\tneg    rax\n   0x000000000008a2c5 <+369>:\tjmp    0x8a1be <main+106>\n   0x000000000008a2ca:\tint3\n   0x000000000008a2cb:\tint3\n\n13\t    int quotient = r ~/ newR;\n14\t    (t, newT) = (newT, t - quotient * newT);\n15\t    (r, newR) = (newR, r - quotient * newR);\n16\t  }\n17\t\n18\t  if (r > 1) {\n19\t    print(\"$a and $m are not coprime. Modular inverse does not exist.\");\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x10\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a293 <main+319>\n   0x000000000008a166 <+18>:\txor    edi,edi\n   0x000000000008a168 <+20>:\tmov    esi,0x1\n   0x000000000008a16d <+25>:\tmov    ebx,0xb\n   0x000000000008a172 <+30>:\tmov    ecx,0x3\n   0x000000000008a177 <+35>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a17b <+39>:\tjbe    0x8a29f <main+331>\n   0x000000000008a181 <+45>:\tcmp    rcx,0x0\n   0x000000000008a185 <+49>:\tje     0x8a1dd <main+137>\n   0x000000000008a18b <+55>:\tmov    rax,rbx\n   0x000000000008a18e <+58>:\ttest   rcx,rcx\n   0x000000000008a191 <+61>:\tje     0x8a2ab <main+343>\n   0x000000000008a197 <+67>:\tcmp    rcx,0xffffffffffffffff\n   0x000000000008a19b <+71>:\tje     0x8a2c2 <main+366>\n   0x000000000008a1a1 <+77>:\tmovsxd rdx,eax\n   0x000000000008a1a4 <+80>:\tcmp    rdx,rax\n   0x000000000008a1a7 <+83>:\tjne    0x8a1b9 <main+101>\n   0x000000000008a1a9 <+85>:\tmovsxd rdx,ecx\n   0x000000000008a1ac <+88>:\tcmp    rdx,rcx\n   0x000000000008a1af <+91>:\tjne    0x8a1b9 <main+101>\n   0x000000000008a1b1 <+93>:\tcdq\n   0x000000000008a1b2 <+94>:\tidiv   ecx\n   0x000000000008a1b4 <+96>:\tmovsxd rax,eax\n   0x000000000008a1b7 <+99>:\tjmp    0x8a1be <main+106>\n   0x000000000008a1b9 <+101>:\tcqo\n   0x000000000008a1bb <+103>:\tidiv   rcx\n   0x000000000008a1be <+106>:\tmov    rdx,rax\n   0x000000000008a1c1 <+109>:\timul   rdx,rsi\n   0x000000000008a1c5 <+113>:\tsub    rdi,rdx\n   0x000000000008a1c8 <+116>:\timul   rax,rcx\n   0x000000000008a1cc <+120>:\tmov    rdx,rbx\n   0x000000000008a1cf <+123>:\tsub    rdx,rax\n   0x000000000008a1d2 <+126>:\txchg   rdi,rsi\n   0x000000000008a1d5 <+129>:\tmov    rbx,rcx\n   0x000000000008a1d8 <+132>:\tmov    rcx,rdx\n   0x000000000008a1db <+135>:\tjmp    0x8a177 <main+35>\n   0x000000000008a1dd <+137>:\tcmp    rbx,0x1\n   0x000000000008a1e1 <+141>:\tjle    0x8a1fc <main+168>\n   0x000000000008a1e7 <+147>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a1ee <+154>:\tcall   0x8a2cc <print>\n   0x000000000008a1f3 <+159>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a1f7 <+163>:\tmov    rsp,rbp\n   0x000000000008a1fa <+166>:\tpop    rbp\n   0x000000000008a1fb <+167>:\tret\n   0x000000000008a1fc <+168>:\tcmp    rdi,0x0\n   0x000000000008a200 <+172>:\tjge    0x8a212 <main+190>\n   0x000000000008a206 <+178>:\tmov    rax,rdi\n   0x000000000008a209 <+181>:\tadd    rax,0xb\n   0x000000000008a20d <+185>:\tjmp    0x8a215 <main+193>\n   0x000000000008a212 <+190>:\tmov    rax,rdi\n   0x000000000008a215 <+193>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a219 <+197>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a21d <+201>:\tmov    r10d,0xc\n   0x000000000008a223 <+207>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a228 <+212>:\tmov    rcx,rax\n   0x000000000008a22b <+215>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a232 <+222>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a236 <+226>:\tmov    QWORD PTR [rcx+0x1f],0x6\n   0x000000000008a23e <+234>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a245 <+241>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008a249 <+245>:\tmov    QWORD PTR [rcx+0x2f],0x16\n   0x000000000008a251 <+253>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a258 <+260>:\tmov    QWORD PTR [rcx+0x37],r11\n   0x000000000008a25c <+264>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a260 <+268>:\tmov    rax,rdx\n   0x000000000008a263 <+271>:\tadd    rax,rax\n   0x000000000008a266 <+274>:\tjno    0x8a275 <main+289>\n   0x000000000008a26c <+280>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n20\t    return;\n21\t  }\n22\t\n23\t  if (t < 0) {\n24\t    t += m;\n25\t  }\n26\t\n27\t  print(\"Modular inverse of $a modulo $m is $t\");\n   0x000000000008a271 <+285>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a275 <+289>:\tmov    QWORD PTR [rcx+0x3f],rax\n   0x000000000008a279 <+293>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a27d <+297>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a282 <+302>:\tmov    rdi,rax\n   0x000000000008a285 <+305>:\tcall   0x8a2cc <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_47.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example values for demonstration\n  final base = 2;\n  final exponent = 10;\n  \n  num result = 1;\n  num currentBase = base;\n  int currentExponent = exponent;\n  \n  while (currentExponent > 0) {\n    if (currentExponent.isOdd) {\n      result *= currentBase;\n    }\n    currentBase *= currentBase;\n    currentExponent ~/= 2;\n  }\n  \n  print('$base^$exponent = $result');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a548 <+292>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a54c <+296>:\tmov    rsp,rbp\n   0x000000000008a54f <+299>:\tpop    rbp\n   0x000000000008a550 <+300>:\tret\n   0x000000000008a551 <+301>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Example values for demonstration\n4\t  final base = 2;\n5\t  final exponent = 10;\n6\t  \n7\t  num result = 1;\n8\t  num currentBase = base;\n9\t  int currentExponent = exponent;\n10\t  \n11\t  while (currentExponent > 0) {\n   0x000000000008a558 <+308>:\tjmp    0x8a436 <main+18>\n   0x000000000008a55d <+313>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a564 <+320>:\tjmp    0x8a45b <main+55>\n   0x000000000008a569:\tint3\n   0x000000000008a56a:\tint3\n   0x000000000008a56b:\tint3\n\n12\t    if (currentExponent.isOdd) {\n13\t      result *= currentBase;\n   0x000000000008a424 <+0>:\tpush   rbp\n   0x000000000008a425 <+1>:\tmov    rbp,rsp\n   0x000000000008a428 <+4>:\tsub    rsp,0x30\n   0x000000000008a42c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a430 <+12>:\tjbe    0x8a551 <main+301>\n   0x000000000008a436 <+18>:\tmov    ecx,0x2\n   0x000000000008a43b <+23>:\tmov    edx,0x4\n   0x000000000008a440 <+28>:\tmov    eax,0xa\n   0x000000000008a445 <+33>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a449 <+37>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a44d <+41>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a451 <+45>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a455 <+49>:\tjbe    0x8a55d <main+313>\n   0x000000000008a45b <+55>:\tcmp    rax,0x0\n   0x000000000008a45f <+59>:\tjle    0x8a4fa <main+214>\n   0x000000000008a465 <+65>:\ttest   al,0x1\n   0x000000000008a467 <+67>:\tje     0x8a49b <main+119>\n   0x000000000008a46d <+73>:\ttest   cl,0x1\n   0x000000000008a470 <+76>:\tmov    ebx,0x3c\n   0x000000000008a475 <+81>:\tje     0x8a47d <main+89>\n   0x000000000008a477 <+83>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a47a <+86>:\tshr    ebx,0xc\n   0x000000000008a47d <+89>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a482 <+94>:\tmov    QWORD PTR [rsp],rdx\n   0x000000000008a486 <+98>:\tmov    rcx,rbx\n   0x000000000008a489 <+101>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a48d <+105>:\tcall   QWORD PTR [rax+rcx*8]\n\n14\t    }\n15\t    currentBase *= currentBase;\n   0x000000000008a490 <+108>:\tmov    rcx,rax\n   0x000000000008a493 <+111>:\tmov    rdx,rcx\n   0x000000000008a496 <+114>:\tjmp    0x8a49e <main+122>\n   0x000000000008a49b <+119>:\tmov    rdx,rcx\n   0x000000000008a49e <+122>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a4a2 <+126>:\tmov    QWORD PTR [rbp-0x18],rdx\n   0x000000000008a4a6 <+130>:\ttest   al,0x1\n   0x000000000008a4a8 <+132>:\tmov    ecx,0x3c\n   0x000000000008a4ad <+137>:\tje     0x8a4b5 <main+145>\n   0x000000000008a4af <+139>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a4b2 <+142>:\tshr    ecx,0xc\n   0x000000000008a4b5 <+145>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a4ba <+150>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a4be <+154>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4c2 <+158>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a4c5 <+161>:\tmov    rsi,rax\n   0x000000000008a4c8 <+164>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a4cc <+168>:\tmov    ebx,0x2\n   0x000000000008a4d1 <+173>:\tmov    r11,rax\n   0x000000000008a4d4 <+176>:\tmov    rax,QWORD PTR [r15+0x607]\n   0x000000000008a4db <+183>:\timul   r11\n   0x000000000008a4de <+186>:\tadd    rdx,r11\n   0x000000000008a4e1 <+189>:\tmov    rax,rdx\n   0x000000000008a4e4 <+192>:\tshr    rdx,0x3f\n   0x000000000008a4e8 <+196>:\tadd    rdx,rax\n   0x000000000008a4eb <+199>:\tmov    rax,rdx\n   0x000000000008a4ee <+202>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a4f2 <+206>:\tmov    rdx,rsi\n   0x000000000008a4f5 <+209>:\tjmp    0x8a445 <main+33>\n   0x000000000008a4fa <+214>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a4fe <+218>:\tmov    r10d,0xa\n   0x000000000008a504 <+224>:\tcall   0x84f3c <stub _iso_stub_AllocateArrayStub>\n\n16\t    currentExponent ~/= 2;\n17\t  }\n18\t  \n19\t  print('$base^$exponent = $result');\n   0x000000000008a509 <+229>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a511 <+237>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a518 <+244>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a51c <+248>:\tmov    QWORD PTR [rax+0x27],0x14\n   0x000000000008a524 <+256>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a52b <+263>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a52f <+267>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a533 <+271>:\tmov    QWORD PTR [rax+0x37],rcx\n   0x000000000008a537 <+275>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a53b <+279>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a540 <+284>:\tmov    rdi,rax\n   0x000000000008a543 <+287>:\tcall   0x8a56c <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_49.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final uf = UnionFind(5);\n  print('Initial state: ${uf.parent}');\n  \n  uf.union(0, 1);\n  print('After union(0, 1): ${uf.parent}');\n  \n  uf.union(2, 3);\n  print('After union(2, 3): ${uf.parent}');\n  \n  uf.union(1, 4);\n  print('After union(1, 4): ${uf.parent}');\n  \n  print('find(4) returns: ${uf.find(4)}');\n  print('Final parent array: ${uf.parent}');\n  print('Are 0 and 4 connected? ${uf.find(0) == uf.find(4)}');\n  print('Are 1 and 3 connected? ${uf.find(1) == uf.find(3)}');\n}\n\nclass UnionFind {\n  final List<int> parent;\n  final List<int> rank;\n\n  UnionFind(int n)\n      : parent = List<int>.generate(n, (i) => i),\n        rank = List<int>.filled(n, 0);\n\n  int find(int x) {\n    if (parent[x] != x) {\n      parent[x] = find(parent[x]); // Path compression\n    }\n    return parent[x];\n  }\n\n  void union(int x, int y) {\n    final rootX = find(x);\n    final rootY = find(y);\n    \n    if (rootX == rootY) return;\n    \n    // Union by rank\n    if (rank[rootX] < rank[rootY]) {\n      parent[rootX] = rootY;\n    } else if (rank[rootX] > rank[rootY]) {\n      parent[rootY] = rootX;\n    } else {\n      parent[rootY] = rootX;\n      rank[rootX]++;\n    }\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a411 <+701>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a415 <+705>:\tmov    rsp,rbp\n   0x000000000008a418 <+708>:\tpop    rbp\n   0x000000000008a419 <+709>:\tret\n   0x000000000008a41a <+710>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a421 <+717>:\tjmp    0x8a166 <main+18>\n   0x000000000008a426:\tint3\n   0x000000000008a427:\tint3\n\n2\tvoid main() {\n3\t  final uf = UnionFind(5);\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x28\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a41a <main+710>\n   0x000000000008a166 <+18>:\tcall   0x8a8ac <new UnionFind>\n   0x000000000008a16b <+23>:\tmov    rdi,rax\n   0x000000000008a16e <+26>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a172 <+30>:\tcall   0x8a7b0 <new UnionFind>\n   0x000000000008a177 <+35>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a17b <+39>:\tmov    r10d,0x4\n   0x000000000008a181 <+45>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n4\t  print('Initial state: ${uf.parent}');\n   0x000000000008a186 <+50>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a18d <+57>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a191 <+61>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a195 <+65>:\tmov    rcx,QWORD PTR [rdi+0x7]\n   0x000000000008a199 <+69>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a19d <+73>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a1a1 <+77>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1a5 <+81>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1aa <+86>:\tmov    rdi,rax\n   0x000000000008a1ad <+89>:\tcall   0x8a714 <print>\n\n5\t  \n6\t  uf.union(0, 1);\n   0x000000000008a1b2 <+94>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a1b6 <+98>:\txor    esi,esi\n   0x000000000008a1b8 <+100>:\tmov    edx,0x1\n   0x000000000008a1bd <+105>:\tcall   0x8a548 <UnionFind.union>\n   0x000000000008a1c2 <+110>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1c6 <+114>:\tmov    r10d,0x4\n   0x000000000008a1cc <+120>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n7\t  print('After union(0, 1): ${uf.parent}');\n   0x000000000008a1d1 <+125>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a1d8 <+132>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1dc <+136>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a1e0 <+140>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a1e4 <+144>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1e8 <+148>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1ed <+153>:\tmov    rdi,rax\n   0x000000000008a1f0 <+156>:\tcall   0x8a714 <print>\n\n8\t  \n9\t  uf.union(2, 3);\n   0x000000000008a1f5 <+161>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a1f9 <+165>:\tmov    esi,0x2\n   0x000000000008a1fe <+170>:\tmov    edx,0x3\n   0x000000000008a203 <+175>:\tcall   0x8a548 <UnionFind.union>\n   0x000000000008a208 <+180>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a20c <+184>:\tmov    r10d,0x4\n   0x000000000008a212 <+190>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n10\t  print('After union(2, 3): ${uf.parent}');\n   0x000000000008a217 <+195>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a21e <+202>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a222 <+206>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a226 <+210>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a22a <+214>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a22e <+218>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a233 <+223>:\tmov    rdi,rax\n   0x000000000008a236 <+226>:\tcall   0x8a714 <print>\n\n11\t  \n12\t  uf.union(1, 4);\n   0x000000000008a23b <+231>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a23f <+235>:\tmov    esi,0x1\n   0x000000000008a244 <+240>:\tmov    edx,0x4\n   0x000000000008a249 <+245>:\tcall   0x8a548 <UnionFind.union>\n   0x000000000008a24e <+250>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a252 <+254>:\tmov    r10d,0x4\n   0x000000000008a258 <+260>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n13\t  print('After union(1, 4): ${uf.parent}');\n   0x000000000008a25d <+265>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a264 <+272>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a268 <+276>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a26c <+280>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a270 <+284>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a274 <+288>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a279 <+293>:\tmov    rdi,rax\n   0x000000000008a27c <+296>:\tcall   0x8a714 <print>\n   0x000000000008a281 <+301>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a285 <+305>:\tmov    r10d,0x4\n   0x000000000008a28b <+311>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n14\t  \n15\t  print('find(4) returns: ${uf.find(4)}');\n   0x000000000008a290 <+316>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a294 <+320>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a29b <+327>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a29f <+331>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a2a3 <+335>:\tmov    esi,0x4\n   0x000000000008a2a8 <+340>:\tcall   0x8a428 <UnionFind.find>\n   0x000000000008a2ad <+345>:\tmov    rcx,rax\n   0x000000000008a2b0 <+348>:\tmov    rax,rcx\n   0x000000000008a2b3 <+351>:\tadd    rax,rax\n   0x000000000008a2b6 <+354>:\tjno    0x8a2c5 <main+369>\n   0x000000000008a2bc <+360>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a2c1 <+365>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a2c5 <+369>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a2c9 <+373>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a2cd <+377>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a2d1 <+381>:\ttest   al,0x1\n   0x000000000008a2d3 <+383>:\tje     0x8a2ec <main+408>\n   0x000000000008a2d5 <+385>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a2d9 <+389>:\tshr    r11d,0x2\n   0x000000000008a2dd <+393>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a2e1 <+397>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a2e5 <+401>:\tje     0x8a2ec <main+408>\n   0x000000000008a2e7 <+403>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a2ec <+408>:\tmov    r11,QWORD PTR [rbp-0x18]\n   0x000000000008a2f0 <+412>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a2f4 <+416>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a2f9 <+421>:\tmov    rdi,rax\n   0x000000000008a2fc <+424>:\tcall   0x8a714 <print>\n   0x000000000008a301 <+429>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a305 <+433>:\tmov    r10d,0x4\n   0x000000000008a30b <+439>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n16\t  print('Final parent array: ${uf.parent}');\n   0x000000000008a310 <+444>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a317 <+451>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a31b <+455>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a31f <+459>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a323 <+463>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a327 <+467>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a32c <+472>:\tmov    rdi,rax\n   0x000000000008a32f <+475>:\tcall   0x8a714 <print>\n   0x000000000008a334 <+480>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a338 <+484>:\tmov    r10d,0x4\n   0x000000000008a33e <+490>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n17\t  print('Are 0 and 4 connected? ${uf.find(0) == uf.find(4)}');\n   0x000000000008a343 <+495>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a347 <+499>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a34e <+506>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a352 <+510>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a356 <+514>:\txor    esi,esi\n   0x000000000008a358 <+516>:\tcall   0x8a428 <UnionFind.find>\n   0x000000000008a35d <+521>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a361 <+525>:\tmov    esi,0x4\n   0x000000000008a366 <+530>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a36a <+534>:\tcall   0x8a428 <UnionFind.find>\n   0x000000000008a36f <+539>:\tmov    rcx,rax\n   0x000000000008a372 <+542>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a376 <+546>:\tcmp    rax,rcx\n   0x000000000008a379 <+549>:\tje     0x8a384 <main+560>\n   0x000000000008a37b <+551>:\tmov    rdx,QWORD PTR [r14+0x80]\n   0x000000000008a382 <+558>:\tjmp    0x8a388 <main+564>\n   0x000000000008a384 <+560>:\tmov    rdx,QWORD PTR [r14+0x78]\n   0x000000000008a388 <+564>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a38c <+568>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a390 <+572>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a394 <+576>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a399 <+581>:\tmov    rdi,rax\n   0x000000000008a39c <+584>:\tcall   0x8a714 <print>\n   0x000000000008a3a1 <+589>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a3a5 <+593>:\tmov    r10d,0x4\n   0x000000000008a3ab <+599>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n18\t  print('Are 1 and 3 connected? ${uf.find(1) == uf.find(3)}');\n   0x000000000008a3b0 <+604>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a3b4 <+608>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a3bb <+615>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a3bf <+619>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a3c3 <+623>:\tmov    esi,0x1\n   0x000000000008a3c8 <+628>:\tcall   0x8a428 <UnionFind.find>\n   0x000000000008a3cd <+633>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a3d1 <+637>:\tmov    esi,0x3\n   0x000000000008a3d6 <+642>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a3da <+646>:\tcall   0x8a428 <UnionFind.find>\n   0x000000000008a3df <+651>:\tmov    rcx,rax\n   0x000000000008a3e2 <+654>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a3e6 <+658>:\tcmp    rax,rcx\n   0x000000000008a3e9 <+661>:\tje     0x8a3f4 <main+672>\n   0x000000000008a3eb <+663>:\tmov    rdx,QWORD PTR [r14+0x80]\n   0x000000000008a3f2 <+670>:\tjmp    0x8a3f8 <main+676>\n   0x000000000008a3f4 <+672>:\tmov    rdx,QWORD PTR [r14+0x78]\n   0x000000000008a3f8 <+676>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a3fc <+680>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a400 <+684>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a404 <+688>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a409 <+693>:\tmov    rdi,rax\n   0x000000000008a40c <+696>:\tcall   0x8a714 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_53.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Tree representation (adjacency list)\n  final graph = [\n    [1, 2],    // Node 0\n    [0, 3, 4], // Node 1\n    [0, 5, 6], // Node 2\n    [1],       // Node 3\n    [1],       // Node 4\n    [2],       // Node 5\n    [2]        // Node 6\n  ];\n\n  final n = graph.length;\n  final parent = List<int>.filled(n, -1);\n  final depth = List<int>.filled(n, 0);\n  final size = List<int>.filled(n, 0);\n  final heavy = List<int>.filled(n, -1);\n  final head = List<int>.filled(n, -1);\n  final pos = List<int>.filled(n, -1);\n\n  // First DFS to compute subtree sizes and heavy children\n  void dfs1(int u, int p) {\n    parent[u] = p;\n    depth[u] = depth[p] + 1;\n    size[u] = 1;\n    int maxSize = 0;\n    \n    for (final v in graph[u]) {\n      if (v == p) continue;\n      dfs1(v, u);\n      size[u] += size[v];\n      if (size[v] > maxSize) {\n        maxSize = size[v];\n        heavy[u] = v;\n      }\n    }\n  }\n\n  int curPos = 0;\n  \n  // Second DFS for chain decomposition\n  void dfs2(int u, int h) {\n    head[u] = h;\n    pos[u] = curPos++;\n    if (heavy[u] != -1) dfs2(heavy[u], h);\n    \n    for (final v in graph[u]) {\n      if (v == parent[u] || v == heavy[u]) continue;\n      dfs2(v, v);\n    }\n  }\n\n  // Execute HLD\n  dfs1(0, 0);\n  dfs2(0, 0);\n\n  // Print decomposition results\n  print('Heavy-Light Decomposition Results:');\n  for (int i = 0; i < n; i++) {\n    print('Node $i: '\n        'Parent=${parent[i]}, '\n        'Depth=${depth[i]}, '\n        'Size=${size[i]}, '\n        'Heavy=${heavy[i]}, '\n        'Head=${head[i]}, '\n        'Pos=${pos[i]}');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a231 <+221>:\tmov    rcx,rax\n   0x000000000008a234 <+224>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a238 <+228>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a23c <+232>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a240 <+236>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a248 <+244>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a24c <+248>:\tmov    r10d,0x2\n   0x000000000008a252 <+254>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a257 <+259>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a25b <+263>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a263 <+271>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a26a <+278>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a26f <+283>:\tmov    rcx,rax\n   0x000000000008a272 <+286>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a276 <+290>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a27a <+294>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a27e <+298>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a286 <+306>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a28a <+310>:\tmov    r10d,0x2\n   0x000000000008a290 <+316>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a295 <+321>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a299 <+325>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a2a1 <+333>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a2a8 <+340>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a2ad <+345>:\tmov    rcx,rax\n   0x000000000008a2b0 <+348>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2b4 <+352>:\tmov    QWORD PTR [rbp-0x30],rcx\n   0x000000000008a2b8 <+356>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2bc <+360>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a2c4 <+368>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2c8 <+372>:\tmov    r10d,0x2\n   0x000000000008a2ce <+378>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a2d3 <+383>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a2d7 <+387>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a2df <+395>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a2e6 <+402>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a2eb <+407>:\tmov    rcx,rax\n   0x000000000008a2ee <+410>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2f2 <+414>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a2f6 <+418>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2fa <+422>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a302 <+430>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a306 <+434>:\tmov    r10d,0x2\n   0x000000000008a30c <+440>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a311 <+445>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a315 <+449>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a31d <+457>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a324 <+464>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x68\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a718 <main+1476>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0x4\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a179 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a181 <+45>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a189 <+53>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a190 <+60>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008a195 <+65>:\tmov    rcx,rax\n   0x000000000008a198 <+68>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a19c <+72>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1a0 <+76>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1a4 <+80>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a1ac <+88>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1b0 <+92>:\tmov    r10d,0x6\n   0x000000000008a1b6 <+98>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a1bb <+103>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1bf <+107>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a1c7 <+115>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a1cf <+123>:\tmov    QWORD PTR [rax+0x27],0x8\n   0x000000000008a1d7 <+131>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a1de <+138>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a1e3 <+143>:\tmov    rcx,rax\n   0x000000000008a1e6 <+146>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1ea <+150>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a1ee <+154>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1f2 <+158>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a1fa <+166>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1fe <+170>:\tmov    r10d,0x6\n   0x000000000008a204 <+176>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a209 <+181>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a20d <+185>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a215 <+193>:\tmov    QWORD PTR [rax+0x1f],0xa\n   0x000000000008a21d <+201>:\tmov    QWORD PTR [rax+0x27],0xc\n   0x000000000008a225 <+209>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a22c <+216>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n602\tin dart:core-patch/growable_array.dart\n603\tin dart:core-patch/growable_array.dart\n604\tin dart:core-patch/growable_array.dart\n605\tin dart:core-patch/growable_array.dart\n606\tin dart:core-patch/growable_array.dart\n607\tin dart:core-patch/growable_array.dart\n608\tin dart:core-patch/growable_array.dart\n609\tin dart:core-patch/growable_array.dart\n610\tin dart:core-patch/growable_array.dart\n611\tin dart:core-patch/growable_array.dart\n612\tin dart:core-patch/growable_array.dart\n613\tin dart:core-patch/growable_array.dart\n614\tin dart:core-patch/growable_array.dart\n615\tin dart:core-patch/growable_array.dart\n616\tin dart:core-patch/growable_array.dart\n617\tin dart:core-patch/growable_array.dart\n618\tin dart:core-patch/growable_array.dart\n619\tin dart:core-patch/growable_array.dart\n620\tin dart:core-patch/growable_array.dart\n621\tin dart:core-patch/growable_array.dart\n622\tin dart:core-patch/growable_array.dart\n623\tin dart:core-patch/growable_array.dart\n624\tin dart:core-patch/growable_array.dart\n625\tin dart:core-patch/growable_array.dart\n626\tin dart:core-patch/growable_array.dart\n   0x000000000008a329 <+469>:\tmov    rcx,rax\n   0x000000000008a32c <+472>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a330 <+476>:\tmov    QWORD PTR [rbp-0x40],rcx\n   0x000000000008a334 <+480>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a338 <+484>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a340 <+492>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a344 <+496>:\tmov    r10d,0xe\n   0x000000000008a34a <+502>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a34f <+507>:\tmov    rcx,rax\n   0x000000000008a352 <+510>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a356 <+514>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a35a <+518>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a35e <+522>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a362 <+526>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a366 <+530>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a36a <+534>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008a36e <+538>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a372 <+542>:\tmov    QWORD PTR [rcx+0x2f],rax\n   0x000000000008a376 <+546>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a37a <+550>:\tmov    QWORD PTR [rcx+0x37],rax\n   0x000000000008a37e <+554>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a382 <+558>:\tmov    QWORD PTR [rcx+0x3f],rax\n   0x000000000008a386 <+562>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a38a <+566>:\tmov    QWORD PTR [rcx+0x47],rax\n   0x000000000008a38e <+570>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008a395 <+577>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a39a <+582>:\tmov    rcx,rax\n   0x000000000008a39d <+585>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a3a1 <+589>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a3a5 <+593>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a3a9 <+597>:\tmov    QWORD PTR [rcx+0xf],0xe\n   0x000000000008a3b1 <+605>:\tmov    r10d,0xa\n   0x000000000008a3b7 <+611>:\tcall   0x83d5c <stub _iso_stub_AllocateContextStub>\n   0x000000000008a3bc <+616>:\tmov    rcx,rax\n   0x000000000008a3bf <+619>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a3c3 <+623>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a3c7 <+627>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a3cb <+631>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a3d2 <+638>:\tmov    r10d,0xe\n   0x000000000008a3d8 <+644>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a3dd <+649>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a3e1 <+653>:\txor    ecx,ecx\n   0x000000000008a3e3 <+655>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3e7 <+659>:\tjbe    0x8a724 <main+1488>\n   0x000000000008a3ed <+665>:\tcmp    rcx,0x7\n   0x000000000008a3f1 <+669>:\tjge    0x8a406 <main+690>\n   0x000000000008a3f7 <+675>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a400 <+684>:\tadd    rcx,0x1\n   0x000000000008a404 <+688>:\tjmp    0x8a3e3 <main+655>\n   0x000000000008a406 <+690>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a40a <+694>:\tmov    QWORD PTR [rdx+0x1f],rax\n   0x000000000008a40e <+698>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a415 <+705>:\tmov    r10d,0xe\n   0x000000000008a41b <+711>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a420 <+716>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a424 <+720>:\txor    ecx,ecx\n   0x000000000008a426 <+722>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a42a <+726>:\tjbe    0x8a730 <main+1500>\n   0x000000000008a430 <+732>:\tcmp    rcx,0x7\n   0x000000000008a434 <+736>:\tjge    0x8a449 <main+757>\n   0x000000000008a43a <+742>:\tmov    QWORD PTR [rax+rcx*8+0x17],0x0\n   0x000000000008a443 <+751>:\tadd    rcx,0x1\n   0x000000000008a447 <+755>:\tjmp    0x8a426 <main+722>\n   0x000000000008a449 <+757>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a44d <+761>:\tmov    QWORD PTR [rdx+0x27],rax\n   0x000000000008a451 <+765>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a458 <+772>:\tmov    r10d,0xe\n   0x000000000008a45e <+778>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a463 <+783>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a467 <+787>:\txor    ecx,ecx\n   0x000000000008a469 <+789>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a46d <+793>:\tjbe    0x8a73c <main+1512>\n   0x000000000008a473 <+799>:\tcmp    rcx,0x7\n   0x000000000008a477 <+803>:\tjge    0x8a48c <main+824>\n   0x000000000008a47d <+809>:\tmov    QWORD PTR [rax+rcx*8+0x17],0x0\n   0x000000000008a486 <+818>:\tadd    rcx,0x1\n   0x000000000008a48a <+822>:\tjmp    0x8a469 <main+789>\n   0x000000000008a48c <+824>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a490 <+828>:\tmov    QWORD PTR [rdx+0x2f],rax\n   0x000000000008a494 <+832>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a49b <+839>:\tmov    r10d,0xe\n   0x000000000008a4a1 <+845>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a4a6 <+850>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a4aa <+854>:\txor    ecx,ecx\n   0x000000000008a4ac <+856>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a4b0 <+860>:\tjbe    0x8a748 <main+1524>\n   0x000000000008a4b6 <+866>:\tcmp    rcx,0x7\n   0x000000000008a4ba <+870>:\tjge    0x8a4cf <main+891>\n   0x000000000008a4c0 <+876>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a4c9 <+885>:\tadd    rcx,0x1\n   0x000000000008a4cd <+889>:\tjmp    0x8a4ac <main+856>\n   0x000000000008a4cf <+891>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a4d3 <+895>:\tmov    QWORD PTR [rdx+0x37],rax\n   0x000000000008a4d7 <+899>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a4de <+906>:\tmov    r10d,0xe\n   0x000000000008a4e4 <+912>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a4e9 <+917>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a4ed <+921>:\txor    ecx,ecx\n   0x000000000008a4ef <+923>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a4f3 <+927>:\tjbe    0x8a754 <main+1536>\n   0x000000000008a4f9 <+933>:\tcmp    rcx,0x7\n   0x000000000008a4fd <+937>:\tjge    0x8a512 <main+958>\n   0x000000000008a503 <+943>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a50c <+952>:\tadd    rcx,0x1\n   0x000000000008a510 <+956>:\tjmp    0x8a4ef <main+923>\n   0x000000000008a512 <+958>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a516 <+962>:\tmov    QWORD PTR [rdx+0x3f],rax\n   0x000000000008a51a <+966>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a521 <+973>:\tmov    r10d,0xe\n   0x000000000008a527 <+979>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a52c <+984>:\tmov    QWORD PTR [rbp-0x38],rax\n   0x000000000008a530 <+988>:\txor    ecx,ecx\n   0x000000000008a532 <+990>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a536 <+994>:\tjbe    0x8a760 <main+1548>\n   0x000000000008a53c <+1000>:\tcmp    rcx,0x7\n   0x000000000008a540 <+1004>:\tjge    0x8a555 <main+1025>\n   0x000000000008a546 <+1010>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a54f <+1019>:\tadd    rcx,0x1\n   0x000000000008a553 <+1023>:\tjmp    0x8a532 <main+990>\n   0x000000000008a555 <+1025>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a559 <+1029>:\tmov    QWORD PTR [rcx+0x47],rax\n   0x000000000008a55d <+1033>:\tmov    rdx,rcx\n   0x000000000008a560 <+1036>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000008a567 <+1043>:\tcall   0x84088 <stub _iso_stub_AllocateClosureStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_54.dart", "function": "main", "source": "import 'dart:math';\n\n@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency list\n  List<List<int>> graph = [\n    [1],       // Node 0 points to node 1\n    [2],       // Node 1 points to node 2\n    [0, 3],    // Node 2 points to nodes 0 and 3\n    [4],       // Node 3 points to node 4\n    [5, 3],    // Node 4 points to nodes 5 and 3\n    [2, 6],    // Node 5 points to nodes 2 and 6\n    [5],       // Node 6 points to node 5\n    [6, 7],    // Node 7 points to nodes 6 and 7\n  ];\n\n  int n = graph.length;\n  List<int> ids = List.filled(n, -1);\n  List<int> low = List.filled(n, -1);\n  List<bool> onStack = List.filled(n, false);\n  List<int> stack = [];\n  List<List<int>> sccs = [];\n  int id = 0;\n\n  void strongConnect(int v) {\n    ids[v] = id;\n    low[v] = id;\n    id++;\n    stack.add(v);\n    onStack[v] = true;\n\n    for (int w in graph[v]) {\n      if (ids[w] == -1) {\n        strongConnect(w);\n        low[v] = min(low[v], low[w]);\n      } else if (onStack[w]) {\n        low[v] = min(low[v], ids[w]);\n      }\n    }\n\n    if (low[v] == ids[v]) {\n      List<int> component = [];\n      int node;\n      do {\n        node = stack.removeLast();\n        onStack[node] = false;\n        component.add(node);\n      } while (node != v);\n      sccs.add(component);\n    }\n  }\n\n  for (int i = 0; i < n; i++) {\n    if (ids[i] == -1) {\n      strongConnect(i);\n    }\n  }\n\n  print('Strongly Connected Components:');\n  for (int i = 0; i < sccs.length; i++) {\n    print('Component ${i + 1}: ${sccs[i]}');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x68\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a67f <main+1323>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0x2\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a179 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a181 <+45>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a188 <+52>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a18d <+57>:\tmov    rcx,rax\n   0x000000000008a190 <+60>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a194 <+64>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a198 <+68>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a19c <+72>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a1a4 <+80>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1a8 <+84>:\tmov    r10d,0x2\n   0x000000000008a1ae <+90>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a1b3 <+95>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1b7 <+99>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a1bf <+107>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a1c6 <+114>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a211 <+189>:\tmov    rcx,rax\n   0x000000000008a214 <+192>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a218 <+196>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a21c <+200>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a220 <+204>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a228 <+212>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a22c <+216>:\tmov    r10d,0x2\n   0x000000000008a232 <+222>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a237 <+227>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a23b <+231>:\tmov    QWORD PTR [rax+0x17],0x8\n   0x000000000008a243 <+239>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a24a <+246>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a2db <+391>:\tmov    rcx,rax\n   0x000000000008a2de <+394>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2e2 <+398>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a2e6 <+402>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2ea <+406>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a2f2 <+414>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2f6 <+418>:\tmov    r10d,0x2\n   0x000000000008a2fc <+424>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a301 <+429>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a305 <+433>:\tmov    QWORD PTR [rax+0x17],0xa\n   0x000000000008a30d <+441>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a314 <+448>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n   0x000000000008a1cb <+119>:\tmov    rcx,rax\n   0x000000000008a1ce <+122>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1d2 <+126>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a1d6 <+130>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a1da <+134>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a1e2 <+142>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1e6 <+146>:\tmov    r10d,0x4\n   0x000000000008a1ec <+152>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a1f1 <+157>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1f5 <+161>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a1fd <+169>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a205 <+177>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a20c <+184>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a24f <+251>:\tmov    rcx,rax\n   0x000000000008a252 <+254>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a256 <+258>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a25a <+262>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a25e <+266>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a266 <+274>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a26a <+278>:\tmov    r10d,0x4\n   0x000000000008a270 <+284>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a275 <+289>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a279 <+293>:\tmov    QWORD PTR [rax+0x17],0xa\n   0x000000000008a281 <+301>:\tmov    QWORD PTR [rax+0x1f],0x6\n   0x000000000008a289 <+309>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a290 <+316>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a295 <+321>:\tmov    rcx,rax\n   0x000000000008a298 <+324>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a29c <+328>:\tmov    QWORD PTR [rbp-0x30],rcx\n   0x000000000008a2a0 <+332>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2a4 <+336>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a2ac <+344>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2b0 <+348>:\tmov    r10d,0x4\n   0x000000000008a2b6 <+354>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a2bb <+359>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a2bf <+363>:\tmov    QWORD PTR [rax+0x17],0x4\n   0x000000000008a2c7 <+371>:\tmov    QWORD PTR [rax+0x1f],0xc\n   0x000000000008a2cf <+379>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a2d6 <+386>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a319 <+453>:\tmov    rcx,rax\n   0x000000000008a31c <+456>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a320 <+460>:\tmov    QWORD PTR [rbp-0x40],rcx\n   0x000000000008a324 <+464>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a328 <+468>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a330 <+476>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a334 <+480>:\tmov    r10d,0x4\n   0x000000000008a33a <+486>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a33f <+491>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a343 <+495>:\tmov    QWORD PTR [rax+0x17],0xc\n   0x000000000008a34b <+503>:\tmov    QWORD PTR [rax+0x1f],0xe\n   0x000000000008a353 <+511>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a35a <+518>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n602\tin dart:core-patch/growable_array.dart\n603\tin dart:core-patch/growable_array.dart\n604\tin dart:core-patch/growable_array.dart\n605\tin dart:core-patch/growable_array.dart\n606\tin dart:core-patch/growable_array.dart\n607\tin dart:core-patch/growable_array.dart\n608\tin dart:core-patch/growable_array.dart\n609\tin dart:core-patch/growable_array.dart\n610\tin dart:core-patch/growable_array.dart\n611\tin dart:core-patch/growable_array.dart\n612\tin dart:core-patch/growable_array.dart\n613\tin dart:core-patch/growable_array.dart\n614\tin dart:core-patch/growable_array.dart\n615\tin dart:core-patch/growable_array.dart\n616\tin dart:core-patch/growable_array.dart\n617\tin dart:core-patch/growable_array.dart\n618\tin dart:core-patch/growable_array.dart\n619\tin dart:core-patch/growable_array.dart\n620\tin dart:core-patch/growable_array.dart\n621\tin dart:core-patch/growable_array.dart\n622\tin dart:core-patch/growable_array.dart\n623\tin dart:core-patch/growable_array.dart\n624\tin dart:core-patch/growable_array.dart\n625\tin dart:core-patch/growable_array.dart\n626\tin dart:core-patch/growable_array.dart\n627\tin dart:core-patch/growable_array.dart\n628\tin dart:core-patch/growable_array.dart\n629\tin dart:core-patch/growable_array.dart\n630\tin dart:core-patch/growable_array.dart\n631\tin dart:core-patch/growable_array.dart\n632\tin dart:core-patch/growable_array.dart\n633\tin dart:core-patch/growable_array.dart\n634\tin dart:core-patch/growable_array.dart\n635\tin dart:core-patch/growable_array.dart\n636\tin dart:core-patch/growable_array.dart\n637\tin dart:core-patch/growable_array.dart\n638\tin dart:core-patch/growable_array.dart\n639\tin dart:core-patch/growable_array.dart\n640\tin dart:core-patch/growable_array.dart\n641\tin dart:core-patch/growable_array.dart\n642\tin dart:core-patch/growable_array.dart\n643\tin dart:core-patch/growable_array.dart\n644\tin dart:core-patch/growable_array.dart\n645\tin dart:core-patch/growable_array.dart\n646\tin dart:core-patch/growable_array.dart\n647\tin dart:core-patch/growable_array.dart\n648\tin dart:core-patch/growable_array.dart\n649\tin dart:core-patch/growable_array.dart\n   0x000000000008a35f <+523>:\tmov    rcx,rax\n   0x000000000008a362 <+526>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a366 <+530>:\tmov    QWORD PTR [rbp-0x48],rcx\n   0x000000000008a36a <+534>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a36e <+538>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a376 <+546>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a37a <+550>:\tmov    r10d,0x10\n   0x000000000008a380 <+556>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a385 <+561>:\tmov    rcx,rax\n   0x000000000008a388 <+564>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a38c <+568>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a390 <+572>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a394 <+576>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a398 <+580>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a39c <+584>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a3a0 <+588>:\tmov    QWORD PTR [rcx+0x27],rax\n   0x000000000008a3a4 <+592>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a3a8 <+596>:\tmov    QWORD PTR [rcx+0x2f],rax\n   0x000000000008a3ac <+600>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a3b0 <+604>:\tmov    QWORD PTR [rcx+0x37],rax\n   0x000000000008a3b4 <+608>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a3b8 <+612>:\tmov    QWORD PTR [rcx+0x3f],rax\n   0x000000000008a3bc <+616>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a3c0 <+620>:\tmov    QWORD PTR [rcx+0x47],rax\n   0x000000000008a3c4 <+624>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a3c8 <+628>:\tmov    QWORD PTR [rcx+0x4f],rax\n   0x000000000008a3cc <+632>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008a3d3 <+639>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a3d8 <+644>:\tmov    rcx,rax\n   0x000000000008a3db <+647>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a3df <+651>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a3e3 <+655>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a3e7 <+659>:\tmov    QWORD PTR [rcx+0xf],0x10\n   0x000000000008a3ef <+667>:\tmov    r10d,0x8\n   0x000000000008a3f5 <+673>:\tcall   0x83d5c <stub _iso_stub_AllocateContextStub>\n   0x000000000008a3fa <+678>:\tmov    rcx,rax\n   0x000000000008a3fd <+681>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a401 <+685>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a405 <+689>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a409 <+693>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a410 <+700>:\tmov    r10d,0x10\n   0x000000000008a416 <+706>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a41b <+711>:\txor    ecx,ecx\n   0x000000000008a41d <+713>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a421 <+717>:\tjbe    0x8a68b <main+1335>\n   0x000000000008a427 <+723>:\tcmp    rcx,0x8\n   0x000000000008a42b <+727>:\tjge    0x8a440 <main+748>\n   0x000000000008a431 <+733>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a43a <+742>:\tadd    rcx,0x1\n   0x000000000008a43e <+746>:\tjmp    0x8a41d <main+713>\n   0x000000000008a440 <+748>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a444 <+752>:\tmov    QWORD PTR [rdx+0x1f],rax\n   0x000000000008a448 <+756>:\tmov    rbx,QWORD PTR [r15+0x237]\n   0x000000000008a44f <+763>:\tmov    r10d,0x10\n   0x000000000008a455 <+769>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a45a <+774>:\txor    ecx,ecx\n   0x000000000008a45c <+776>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a460 <+780>:\tjbe    0x8a697 <main+1347>\n   0x000000000008a466 <+786>:\tcmp    rcx,0x8\n   0x000000000008a46a <+790>:\tjge    0x8a47f <main+811>\n   0x000000000008a470 <+796>:\tmov    QWORD PTR [rax+rcx*8+0x17],0xfffffffffffffffe\n   0x000000000008a479 <+805>:\tadd    rcx,0x1\n   0x000000000008a47d <+809>:\tjmp    0x8a45c <main+776>\n   0x000000000008a47f <+811>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a483 <+815>:\tmov    QWORD PTR [rdx+0x27],rax\n   0x000000000008a487 <+819>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000008a48e <+826>:\tmov    r10d,0x10\n   0x000000000008a494 <+832>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_55.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency list (index 0 to 7)\n  List<List<int>> graph = [\n    [1],          // Node 0 -> 1\n    [2, 4, 5],    // Node 1 -> 2, 4, 5\n    [3, 6],       // Node 2 -> 3, 6\n    [2, 7],       // Node 3 -> 2, 7\n    [0, 5],       // Node 4 -> 0, 5\n    [6],          // Node 5 -> 6\n    [5],          // Node 6 -> 5\n    [3, 6]        // Node 7 -> 3, 6\n  ];\n\n  // Step 1: Create the transpose graph\n  List<List<int>> transpose = List.generate(graph.length, (_) => []);\n  for (int i = 0; i < graph.length; i++) {\n    for (int neighbor in graph[i]) {\n      transpose[neighbor].add(i);\n    }\n  }\n\n  // Step 2: First DFS to fill stack with finishing times\n  List<int> stack = [];\n  List<bool> visited = List.filled(graph.length, false);\n  for (int i = 0; i < graph.length; i++) {\n    if (!visited[i]) {\n      _dfs(i, graph, visited, stack);\n    }\n  }\n\n  // Step 3: Second DFS on transpose to get SCCs\n  visited = List.filled(graph.length, false);\n  List<List<int>> sccs = [];\n  while (stack.isNotEmpty) {\n    int node = stack.removeLast();\n    if (!visited[node]) {\n      List<int> component = [];\n      _dfsTranspose(node, transpose, visited, component);\n      sccs.add(component);\n    }\n  }\n\n  // Print the SCCs\n  print('Strongly Connected Components:');\n  for (int i = 0; i < sccs.length; i++) {\n    print('Component ${i + 1}: ${sccs[i]}');\n  }\n}\n\nvoid _dfs(int node, List<List<int>> graph, List<bool> visited, List<int> stack) {\n  visited[node] = true;\n  for (int neighbor in graph[node]) {\n    if (!visited[neighbor]) {\n      _dfs(neighbor, graph, visited, stack);\n    }\n  }\n  stack.add(node);\n}\n\nvoid _dfsTranspose(int node, List<List<int>> transpose, List<bool> visited, List<int> component) {\n  visited[node] = true;\n  component.add(node);\n  for (int neighbor in transpose[node]) {\n    if (!visited[neighbor]) {\n      _dfsTranspose(neighbor, transpose, visited, component);\n    }\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a7cf <+371>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a7d3 <+375>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a7d7 <+379>:\tsar    rcx,1\n   0x000000000008a7da <+382>:\tmov    rsi,rcx\n   0x000000000008a7dd <+385>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a7e4 <+392>:\tcall   0x52e38 <new _GrowableList>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008ac4e <+1522>:\tjmp    0x8a66e <main+18>\n   0x000000000008ac53 <+1527>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ac5a <+1534>:\tjmp    0x8a7fd <main+417>\n   0x000000000008ac5f <+1539>:\tcall   0x856b8 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n136\tin dart:core-patch/growable_array.dart\n137\tin dart:core-patch/growable_array.dart\n138\tin dart:core-patch/growable_array.dart\n139\tin dart:core-patch/growable_array.dart\n140\tin dart:core-patch/growable_array.dart\n141\tin dart:core-patch/growable_array.dart\n142\tin dart:core-patch/growable_array.dart\n143\tin dart:core-patch/growable_array.dart\n144\tin dart:core-patch/growable_array.dart\n145\tin dart:core-patch/growable_array.dart\n146\tin dart:core-patch/growable_array.dart\n147\tin dart:core-patch/growable_array.dart\n148\tin dart:core-patch/growable_array.dart\n149\tin dart:core-patch/growable_array.dart\n150\tin dart:core-patch/growable_array.dart\n151\tin dart:core-patch/growable_array.dart\n152\tin dart:core-patch/growable_array.dart\n153\tin dart:core-patch/growable_array.dart\n154\tin dart:core-patch/growable_array.dart\n155\tin dart:core-patch/growable_array.dart\n156\tin dart:core-patch/growable_array.dart\n157\tin dart:core-patch/growable_array.dart\n158\tin dart:core-patch/growable_array.dart\n159\tin dart:core-patch/growable_array.dart\n160\tin dart:core-patch/growable_array.dart\n161\tin dart:core-patch/growable_array.dart\n162\tin dart:core-patch/growable_array.dart\n163\tin dart:core-patch/growable_array.dart\n164\tin dart:core-patch/growable_array.dart\n165\tin dart:core-patch/growable_array.dart\n166\tin dart:core-patch/growable_array.dart\n167\tin dart:core-patch/growable_array.dart\n168\tin dart:core-patch/growable_array.dart\n169\tin dart:core-patch/growable_array.dart\n170\tin dart:core-patch/growable_array.dart\n171\tin dart:core-patch/growable_array.dart\n172\tin dart:core-patch/growable_array.dart\n173\tin dart:core-patch/growable_array.dart\n174\tin dart:core-patch/growable_array.dart\n175\tin dart:core-patch/growable_array.dart\n176\tin dart:core-patch/growable_array.dart\n177\tin dart:core-patch/growable_array.dart\n178\tin dart:core-patch/growable_array.dart\n179\tin dart:core-patch/growable_array.dart\n180\tin dart:core-patch/growable_array.dart\n181\tin dart:core-patch/growable_array.dart\n182\tin dart:core-patch/growable_array.dart\n183\tin dart:core-patch/growable_array.dart\n184\tin dart:core-patch/growable_array.dart\n185\tin dart:core-patch/growable_array.dart\n186\tin dart:core-patch/growable_array.dart\n187\tin dart:core-patch/growable_array.dart\n188\tin dart:core-patch/growable_array.dart\n189\tin dart:core-patch/growable_array.dart\n190\tin dart:core-patch/growable_array.dart\n191\tin dart:core-patch/growable_array.dart\n192\tin dart:core-patch/growable_array.dart\n193\tin dart:core-patch/growable_array.dart\n194\tin dart:core-patch/growable_array.dart\n195\tin dart:core-patch/growable_array.dart\n196\tin dart:core-patch/growable_array.dart\n197\tin dart:core-patch/growable_array.dart\n198\tin dart:core-patch/growable_array.dart\n199\tin dart:core-patch/growable_array.dart\n200\tin dart:core-patch/growable_array.dart\n201\tin dart:core-patch/growable_array.dart\n202\tin dart:core-patch/growable_array.dart\n203\tin dart:core-patch/growable_array.dart\n204\tin dart:core-patch/growable_array.dart\n205\tin dart:core-patch/growable_array.dart\n206\tin dart:core-patch/growable_array.dart\n207\tin dart:core-patch/growable_array.dart\n208\tin dart:core-patch/growable_array.dart\n209\tin dart:core-patch/growable_array.dart\n210\tin dart:core-patch/growable_array.dart\n211\tin dart:core-patch/growable_array.dart\n212\tin dart:core-patch/growable_array.dart\n213\tin dart:core-patch/growable_array.dart\n214\tin dart:core-patch/growable_array.dart\n215\tin dart:core-patch/growable_array.dart\n216\tin dart:core-patch/growable_array.dart\n217\tin dart:core-patch/growable_array.dart\n218\tin dart:core-patch/growable_array.dart\n219\tin dart:core-patch/growable_array.dart\n220\tin dart:core-patch/growable_array.dart\n221\tin dart:core-patch/growable_array.dart\n222\tin dart:core-patch/growable_array.dart\n223\tin dart:core-patch/growable_array.dart\n224\tin dart:core-patch/growable_array.dart\n225\tin dart:core-patch/growable_array.dart\n226\tin dart:core-patch/growable_array.dart\n227\tin dart:core-patch/growable_array.dart\n228\tin dart:core-patch/growable_array.dart\n229\tin dart:core-patch/growable_array.dart\n230\tin dart:core-patch/growable_array.dart\n231\tin dart:core-patch/growable_array.dart\n232\tin dart:core-patch/growable_array.dart\n233\tin dart:core-patch/growable_array.dart\n234\tin dart:core-patch/growable_array.dart\n235\tin dart:core-patch/growable_array.dart\n236\tin dart:core-patch/growable_array.dart\n237\tin dart:core-patch/growable_array.dart\n238\tin dart:core-patch/growable_array.dart\n239\tin dart:core-patch/growable_array.dart\n240\tin dart:core-patch/growable_array.dart\n241\tin dart:core-patch/growable_array.dart\n242\tin dart:core-patch/growable_array.dart\n243\tin dart:core-patch/growable_array.dart\n244\tin dart:core-patch/growable_array.dart\n245\tin dart:core-patch/growable_array.dart\n246\tin dart:core-patch/growable_array.dart\n247\tin dart:core-patch/growable_array.dart\n248\tin dart:core-patch/growable_array.dart\n249\tin dart:core-patch/growable_array.dart\n250\tin dart:core-patch/growable_array.dart\n251\tin dart:core-patch/growable_array.dart\n252\tin dart:core-patch/growable_array.dart\n253\tin dart:core-patch/growable_array.dart\n254\tin dart:core-patch/growable_array.dart\n255\tin dart:core-patch/growable_array.dart\n256\tin dart:core-patch/growable_array.dart\n257\tin dart:core-patch/growable_array.dart\n258\tin dart:core-patch/growable_array.dart\n259\tin dart:core-patch/growable_array.dart\n260\tin dart:core-patch/growable_array.dart\n261\tin dart:core-patch/growable_array.dart\n262\tin dart:core-patch/growable_array.dart\n263\tin dart:core-patch/growable_array.dart\n264\tin dart:core-patch/growable_array.dart\n265\tin dart:core-patch/growable_array.dart\n266\tin dart:core-patch/growable_array.dart\n267\tin dart:core-patch/growable_array.dart\n268\tin dart:core-patch/growable_array.dart\n269\tin dart:core-patch/growable_array.dart\n270\tin dart:core-patch/growable_array.dart\n271\tin dart:core-patch/growable_array.dart\n272\tin dart:core-patch/growable_array.dart\n273\tin dart:core-patch/growable_array.dart\n274\tin dart:core-patch/growable_array.dart\n275\tin dart:core-patch/growable_array.dart\n276\tin dart:core-patch/growable_array.dart\n277\tin dart:core-patch/growable_array.dart\n278\tin dart:core-patch/growable_array.dart\n279\tin dart:core-patch/growable_array.dart\n280\tin dart:core-patch/growable_array.dart\n281\tin dart:core-patch/growable_array.dart\n282\tin dart:core-patch/growable_array.dart\n283\tin dart:core-patch/growable_array.dart\n284\tin dart:core-patch/growable_array.dart\n   0x000000000008ab26 <+1226>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008ab2a <+1230>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008ab2e <+1234>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008ab32 <+1238>:\tmov    rbx,QWORD PTR [rdx+0xf]\n   0x000000000008ab36 <+1242>:\tsar    rcx,1\n   0x000000000008ab39 <+1245>:\tmov    QWORD PTR [rbp-0x48],rcx\n   0x000000000008ab3d <+1249>:\tsar    rbx,1\n   0x000000000008ab40 <+1252>:\tcmp    rcx,rbx\n   0x000000000008ab43 <+1255>:\tjne    0x8ab51 <main+1269>\n   0x000000000008ab49 <+1261>:\tmov    rdi,rax\n   0x000000000008ab4c <+1264>:\tcall   0x53250 <List._growToNextCapacity>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n   0x000000000008aa45 <+1001>:\tmov    rcx,rax\n   0x000000000008aa48 <+1004>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008aa4c <+1008>:\tmov    r8,QWORD PTR [rbp-0x18]\n   0x000000000008aa50 <+1012>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008aa54 <+1016>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008aa58 <+1020>:\tjbe    0x8ac92 <main+1590>\n   0x000000000008aa5e <+1026>:\tmov    rax,QWORD PTR [r8+0xf]\n   0x000000000008aa62 <+1030>:\tsar    rax,1\n   0x000000000008aa65 <+1033>:\tcmp    rax,0x0\n   0x000000000008aa69 <+1037>:\tje     0x8aba4 <main+1352>\n   0x000000000008aa6f <+1043>:\tmov    rsi,rax\n   0x000000000008aa72 <+1046>:\tsub    rsi,0x1\n   0x000000000008aa76 <+1050>:\tmov    rbx,rsi\n   0x000000000008aa79 <+1053>:\tcmp    rbx,rax\n   0x000000000008aa7c <+1056>:\tjae    0x8ac9e <main+1602>\n   0x000000000008aa82 <+1062>:\tmov    rax,QWORD PTR [r8+0x17]\n   0x000000000008aa86 <+1066>:\tmov    rbx,QWORD PTR [rax+rsi*8+0x17]\n   0x000000000008aa8b <+1071>:\tmov    rdi,r8\n   0x000000000008aa8e <+1074>:\tmov    QWORD PTR [rbp-0x20],rbx\n   0x000000000008aa92 <+1078>:\tcall   0x598f8 <List.length=>\n   0x000000000008aa97 <+1083>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008aa9b <+1087>:\tsar    rcx,1\n   0x000000000008aa9e <+1090>:\tjae    0x8aaa5 <main+1097>\n   0x000000000008aaa0 <+1092>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008aaa5 <+1097>:\tmov    rax,QWORD PTR [rbp-0x58]\n   0x000000000008aaa9 <+1101>:\tmov    rbx,rcx\n   0x000000000008aaac <+1104>:\tmov    QWORD PTR [rbp-0x48],rcx\n   0x000000000008aab0 <+1108>:\tcmp    rbx,rax\n   0x000000000008aab3 <+1111>:\tjae    0x8aca3 <main+1607>\n   0x000000000008aab9 <+1117>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008aabd <+1121>:\tmov    rax,QWORD PTR [rdx+rcx*8+0x17]\n   0x000000000008aac2 <+1126>:\ttest   al,0x10\n   0x000000000008aac4 <+1128>:\tje     0x8ab9b <main+1343>\n   0x000000000008aaca <+1134>:\tmov    rdi,QWORD PTR [rbp-0x28]\n   0x000000000008aace <+1138>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008aad2 <+1142>:\tmov    rax,QWORD PTR [rax]\n   0x000000000008aad5 <+1145>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008aad9 <+1149>:\tjne    0x8aaeb <main+1167>\n   0x000000000008aadf <+1155>:\tmov    rdx,QWORD PTR [r15+0x147]\n   0x000000000008aae6 <+1162>:\tcall   0x83688 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x000000000008aaeb <+1167>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008aaf2 <+1174>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008aaf6 <+1178>:\tcall   0x84234 <stub _iso_stub_AllocateGrowableArrayStub>\n\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n   0x000000000008a65c <+0>:\tpush   rbp\n   0x000000000008a65d <+1>:\tmov    rbp,rsp\n   0x000000000008a660 <+4>:\tsub    rsp,0x70\n   0x000000000008a664 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a668 <+12>:\tjbe    0x8ac47 <main+1515>\n   0x000000000008a66e <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a672 <+22>:\tmov    r10d,0x2\n   0x000000000008a678 <+28>:\tcall   0x85174 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a67d <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a681 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a689 <+45>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a690 <+52>:\tcall   0x84234 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a703 <+167>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a707 <+171>:\tmov    r10d,0x2\n   0x000000000008a70d <+177>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a711 <+181>:\tcall   0x85174 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a716 <+186>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a71a <+190>:\tmov    QWORD PTR [rax+0x17],0xc\n   0x000000000008a722 <+198>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a729 <+205>:\tcall   0x84234 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a72e <+210>:\tmov    rcx,rax\n   0x000000000008a731 <+213>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a735 <+217>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a739 <+221>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a73d <+225>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a745 <+233>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a749 <+237>:\tmov    r10d,0x2\n   0x000000000008a74f <+243>:\tcall   0x85174 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a754 <+248>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a758 <+252>:\tmov    QWORD PTR [rax+0x17],0xa\n   0x000000000008a760 <+260>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a767 <+267>:\tcall   0x84234 <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_56.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final graph = Graph(5);\n  graph.addEdge(0, 1);\n  graph.addEdge(1, 2);\n  graph.addEdge(2, 0);\n  graph.addEdge(1, 3);\n  graph.addEdge(3, 4);\n\n  final articulationPoints = graph.findArticulationPoints();\n  print('Articulation points in the graph: $articulationPoints');\n}\n\nclass Graph {\n  final int vertices;\n  final List<List<int>> adj;\n\n  Graph(this.vertices) : adj = List.generate(vertices, (_) => []);\n\n  void addEdge(int u, int v) {\n    adj[u].add(v);\n    adj[v].add(u);\n  }\n\n  List<int> findArticulationPoints() {\n    final disc = List<int>.filled(vertices, -1);\n    final low = List<int>.filled(vertices, -1);\n    final parent = List<int>.filled(vertices, -1);\n    final ap = List<bool>.filled(vertices, false);\n    var time = 0;\n\n    void dfs(int u) {\n      disc[u] = time;\n      low[u] = time;\n      time++;\n      int children = 0;\n\n      for (final v in adj[u]) {\n        if (disc[v] == -1) {\n          children++;\n          parent[v] = u;\n          dfs(v);\n          low[u] = low[u] < low[v] ? low[u] : low[v];\n\n          if (parent[u] == -1 && children > 1) {\n            ap[u] = true;\n          }\n          if (parent[u] != -1 && low[v] >= disc[u]) {\n            ap[u] = true;\n          }\n        } else if (v != parent[u]) {\n          low[u] = low[u] < disc[v] ? low[u] : disc[v];\n        }\n      }\n    }\n\n    for (int i = 0; i < vertices; i++) {\n      if (disc[i] == -1) {\n        dfs(i);\n      }\n    }\n\n    return List.generate(vertices, (i) => i).where((i) => ap[i]).toList();\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a954 <+376>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a958 <+380>:\tmov    rsp,rbp\n   0x000000000008a95b <+383>:\tpop    rbp\n   0x000000000008a95c <+384>:\tret\n   0x000000000008a95d <+385>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  final graph = Graph(5);\n   0x000000000008a7dc <+0>:\tpush   rbp\n   0x000000000008a7dd <+1>:\tmov    rbp,rsp\n   0x000000000008a7e0 <+4>:\tsub    rsp,0x20\n   0x000000000008a7e4 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a7e8 <+12>:\tjbe    0x8a95d <main+385>\n   0x000000000008a7ee <+18>:\tcall   0x8b2fc <new Graph>\n\n4\t  graph.addEdge(0, 1);\n   0x000000000008a83e <+98>:\tmov    rdx,rax\n   0x000000000008a841 <+101>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a845 <+105>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a849 <+109>:\tsar    rax,1\n   0x000000000008a84c <+112>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x000000000008a850 <+116>:\tcmp    rbx,rax\n   0x000000000008a853 <+119>:\tjae    0x8a975 <main+409>\n   0x000000000008a859 <+125>:\tmov    rax,QWORD PTR [rcx+0x17]\n   0x000000000008a85d <+129>:\txchg   rdx,rax\n   0x000000000008a860 <+132>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a864 <+136>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a869 <+141>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a86d <+145>:\ttest   al,0x1\n   0x000000000008a86f <+147>:\tje     0x8a888 <main+172>\n   0x000000000008a871 <+149>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a875 <+153>:\tshr    r11d,0x2\n   0x000000000008a879 <+157>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a87d <+161>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a881 <+165>:\tje     0x8a888 <main+172>\n   0x000000000008a883 <+167>:\tcall   0x8390c <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a888 <+172>:\tadd    rsi,0x1\n   0x000000000008a88c <+176>:\tmov    rbx,rsi\n   0x000000000008a88f <+179>:\tmov    rax,rcx\n   0x000000000008a892 <+182>:\tjmp    0x8a812 <main+54>\n   0x000000000008a897 <+187>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000008a89b <+191>:\tmov    rcx,rax\n   0x000000000008a89e <+194>:\tmov    rax,rcx\n   0x000000000008a8a1 <+197>:\tmov    QWORD PTR [rbx+0xf],rax\n   0x000000000008a8a5 <+201>:\tmov    r11b,BYTE PTR [rbx-0x1]\n   0x000000000008a8a9 <+205>:\tshr    r11d,0x2\n   0x000000000008a8ad <+209>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a8b1 <+213>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a8b5 <+217>:\tje     0x8a8bc <main+224>\n   0x000000000008a8b7 <+219>:\tcall   0x83deb <stub _iso_stub_WriteBarrierWrappersStub+39>\n   0x000000000008a8bc <+224>:\tmov    rdi,rbx\n   0x000000000008a8bf <+227>:\txor    esi,esi\n   0x000000000008a8c1 <+229>:\tmov    edx,0x1\n   0x000000000008a8c6 <+234>:\tcall   0x8b230 <Graph.addEdge>\n\n5\t  graph.addEdge(1, 2);\n   0x000000000008a8cb <+239>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a8cf <+243>:\tmov    esi,0x1\n   0x000000000008a8d4 <+248>:\tmov    edx,0x2\n   0x000000000008a8d9 <+253>:\tcall   0x8b230 <Graph.addEdge>\n\n6\t  graph.addEdge(2, 0);\n   0x000000000008a8de <+258>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a8e2 <+262>:\tmov    esi,0x2\n   0x000000000008a8e7 <+267>:\txor    edx,edx\n   0x000000000008a8e9 <+269>:\tcall   0x8b230 <Graph.addEdge>\n\n7\t  graph.addEdge(1, 3);\n   0x000000000008a8ee <+274>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a8f2 <+278>:\tmov    esi,0x1\n   0x000000000008a8f7 <+283>:\tmov    edx,0x3\n   0x000000000008a8fc <+288>:\tcall   0x8b230 <Graph.addEdge>\n\n8\t  graph.addEdge(3, 4);\n   0x000000000008a901 <+293>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a905 <+297>:\tmov    esi,0x3\n   0x000000000008a90a <+302>:\tmov    edx,0x4\n   0x000000000008a90f <+307>:\tcall   0x8b230 <Graph.addEdge>\n\n9\t\n10\t  final articulationPoints = graph.findArticulationPoints();\n   0x000000000008a914 <+312>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a918 <+316>:\tcall   0x8aa18 <Graph.findArticulationPoints>\n   0x000000000008a91d <+321>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a921 <+325>:\tmov    r10d,0x4\n   0x000000000008a927 <+331>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a92b <+335>:\tcall   0x852f4 <stub _iso_stub_AllocateArrayStub>\n\n11\t  print('Articulation points in the graph: $articulationPoints');\n   0x000000000008a930 <+340>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a937 <+347>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a93b <+351>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a93f <+355>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a943 <+359>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a947 <+363>:\tcall   0x58830 <_StringBase._interpolate>\n   0x000000000008a94c <+368>:\tmov    rdi,rax\n   0x000000000008a94f <+371>:\tcall   0x8a97c <print>\n\n12\t}\n13\t\n14\tclass Graph {\n15\t  final int vertices;\n16\t  final List<List<int>> adj;\n17\t\n18\t  Graph(this.vertices) : adj = List.generate(vertices, (_) => []);\n   0x000000000008a80c <+48>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a810 <+52>:\txor    ebx,ebx\n   0x000000000008a812 <+54>:\tmov    QWORD PTR [rbp-0x10],rbx\n   0x000000000008a816 <+58>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a81a <+62>:\tjbe    0x8a969 <main+397>\n   0x000000000008a820 <+68>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a824 <+72>:\tsar    rcx,1\n   0x000000000008a827 <+75>:\tcmp    rbx,rcx\n   0x000000000008a82a <+78>:\tjge    0x8a897 <main+187>\n   0x000000000008a830 <+84>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a837 <+91>:\txor    esi,esi\n   0x000000000008a839 <+93>:\tcall   0x52e38 <new _GrowableList>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_58.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency list\n  final graph = {\n    0: [1],\n    1: [2],\n    2: [0, 3],\n    3: [4],\n    4: [2, 5],\n    5: [],\n  };\n\n  // Calculate in-degrees and out-degrees\n  final inDegree = Map<int, int>.fromIterable(graph.keys, value: (_) => 0);\n  final outDegree = Map<int, int>.fromIterable(graph.keys, value: (k) => graph[k]!.length);\n\n  for (final node in graph.keys) {\n    for (final neighbor in graph[node]!) {\n      inDegree[neighbor] = (inDegree[neighbor] ?? 0) + 1;\n    }\n  }\n\n  // Check for Eulerian path or circuit conditions\n  int startNode = -1;\n  int endNode = -1;\n  bool hasEulerianPath = true;\n  bool hasEulerianCircuit = true;\n\n  for (final node in graph.keys) {\n    final out = outDegree[node]!;\n    final in_ = inDegree[node]!;\n\n    if (out != in_) {\n      hasEulerianCircuit = false;\n      if ((out - in_ == 1 && startNode == -1)) {\n        startNode = node;\n      } else if ((in_ - out == 1 && endNode == -1)) {\n        endNode = node;\n      } else {\n        hasEulerianPath = false;\n        break;\n      }\n    }\n  }\n\n  if (!hasEulerianPath && !hasEulerianCircuit) {\n    print(\"Graph has neither Eulerian Path nor Circuit.\");\n    return;\n  }\n\n  // Determine start node for Hierholzer's algorithm\n  final start = hasEulerianCircuit ? graph.keys.first : startNode;\n  final stack = <int>[start];\n  final path = <int>[];\n  final localGraph = Map<int, List<int>>.from(graph);\n\n  // Hierholzer's algorithm to find the Eulerian path/circuit\n  while (stack.isNotEmpty) {\n    final current = stack.last;\n    if (localGraph[current]!.isNotEmpty) {\n      final next = localGraph[current]!.removeAt(0);\n      stack.add(next);\n    } else {\n      path.add(stack.removeLast());\n    }\n  }\n\n  // Reverse to get the correct order\n  path.reversed.forEach((node) => print(\"Node: $node\"));\n  print(hasEulerianCircuit ? \"Eulerian Circuit Found.\" : \"Eulerian Path Found.\");\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000006efb4 <+2556>:\tint3\n   0x000000000006efb5 <+2557>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000006efbc <+2564>:\tjmp    0x6e5ca <main+18>\n   0x000000000006efc1 <+2569>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Example graph represented as an adjacency list\n4\t  final graph = {\n   0x000000000006e7cf <+535>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000006e7d3 <+539>:\tlea    r13,[rdx+0x6f]\n   0x000000000006e7d7 <+543>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000006e7db <+547>:\ttest   al,0x1\n   0x000000000006e7dd <+549>:\tje     0x6e7f6 <main+574>\n   0x000000000006e7df <+551>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000006e7e3 <+555>:\tshr    r11d,0x2\n   0x000000000006e7e7 <+559>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000006e7eb <+563>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000006e7ef <+567>:\tje     0x6e7f6 <main+574>\n   0x000000000006e7f1 <+569>:\tcall   0x84554 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000006e7f6 <+574>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000006e7fd <+581>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000006e802 <+586>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000006e806 <+590>:\tmov    QWORD PTR [rsp],r11\n   0x000000000006e80a <+594>:\tcall   0x66024 <new Map._fromLiteral>\n   0x000000000006e80f <+599>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000006e813 <+603>:\tmov    r10d,0x1\n   0x000000000006e819 <+609>:\tcall   0x8502c <stub _iso_stub_AllocateContextStub>\n\n5\t    0: [1],\n6\t    1: [2],\n7\t    2: [0, 3],\n   0x000000000006e67c <+196>:\tmov    rcx,rax\n   0x000000000006e67f <+199>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000006e683 <+203>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000006e687 <+207>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000006e68f <+215>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000006e693 <+219>:\tmov    rax,rcx\n   0x000000000006e696 <+222>:\tlea    r13,[rdx+0x2f]\n   0x000000000006e69a <+226>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000006e69e <+230>:\ttest   al,0x1\n   0x000000000006e6a0 <+232>:\tje     0x6e6b9 <main+257>\n   0x000000000006e6a2 <+234>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000006e6a6 <+238>:\tshr    r11d,0x2\n   0x000000000006e6aa <+242>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000006e6ae <+246>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000006e6b2 <+250>:\tje     0x6e6b9 <main+257>\n   0x000000000006e6b4 <+252>:\tcall   0x84554 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000006e6b9 <+257>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000006e6bd <+261>:\tmov    QWORD PTR [rax+0x37],0x4\n   0x000000000006e6c5 <+269>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000006e6cc <+276>:\txor    esi,esi\n   0x000000000006e6ce <+278>:\tmov    edx,0x6\n   0x000000000006e6d3 <+283>:\tcall   0x6f68c <new _GrowableList._literal2>\n\n8\t    3: [4],\n9\t    4: [2, 5],\n   0x000000000006e732 <+378>:\tmov    rcx,rax\n   0x000000000006e735 <+381>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000006e739 <+385>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000006e73d <+389>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000006e745 <+397>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000006e749 <+401>:\tmov    rax,rcx\n   0x000000000006e74c <+404>:\tlea    r13,[rdx+0x4f]\n   0x000000000006e750 <+408>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000006e754 <+412>:\ttest   al,0x1\n   0x000000000006e756 <+414>:\tje     0x6e76f <main+439>\n   0x000000000006e758 <+416>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000006e75c <+420>:\tshr    r11d,0x2\n   0x000000000006e760 <+424>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000006e764 <+428>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000006e768 <+432>:\tje     0x6e76f <main+439>\n   0x000000000006e76a <+434>:\tcall   0x84554 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000006e76f <+439>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000006e773 <+443>:\tmov    QWORD PTR [rax+0x57],0x8\n   0x000000000006e77b <+451>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000006e782 <+458>:\tmov    esi,0x4\n   0x000000000006e787 <+463>:\tmov    edx,0xa\n   0x000000000006e78c <+468>:\tcall   0x6f68c <new _GrowableList._literal2>\n\n10\t    5: [],\n   0x000000000006e791 <+473>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000006e795 <+477>:\tlea    r13,[rdx+0x5f]\n   0x000000000006e799 <+481>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000006e79d <+485>:\ttest   al,0x1\n   0x000000000006e79f <+487>:\tje     0x6e7b8 <main+512>\n   0x000000000006e7a1 <+489>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000006e7a5 <+493>:\tshr    r11d,0x2\n   0x000000000006e7a9 <+497>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000006e7ad <+501>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000006e7b1 <+505>:\tje     0x6e7b8 <main+512>\n   0x000000000006e7b3 <+507>:\tcall   0x84554 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000006e7b8 <+512>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000006e7bc <+516>:\tmov    QWORD PTR [rdx+0x67],0xa\n   0x000000000006e7c4 <+524>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000006e7c8 <+528>:\txor    esi,esi\n   0x000000000006e7ca <+530>:\tcall   0x533d0 <new _GrowableList>\n\n11\t  };\n12\t\n13\t  // Calculate in-degrees and out-degrees\n14\t  final inDegree = Map<int, int>.fromIterable(graph.keys, value: (_) => 0);\n   0x000000000006e81e <+614>:\tmov    rcx,rax\n   0x000000000006e821 <+617>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000006e825 <+621>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000006e829 <+625>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000006e82d <+629>:\tmov    rdi,rax\n   0x000000000006e830 <+632>:\tcall   0x83a98 <_LinkedHashMapMixin.keys>\n   0x000000000006e835 <+637>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000006e83c <+644>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000006e840 <+648>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000006e844 <+652>:\tcall   0x85358 <stub _iso_stub_AllocateClosureStub>\n   0x000000000006e849 <+657>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000006e84d <+661>:\tmov    rdx,rax\n   0x000000000006e850 <+664>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000006e857 <+671>:\tcall   0x6f498 <new LinkedHashMap.fromIterable>\n\n15\t  final outDegree = Map<int, int>.fromIterable(graph.keys, value: (k) => graph[k]!.length);\n   0x000000000006e85c <+676>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006e860 <+680>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000006e864 <+684>:\tcall   0x83a98 <_LinkedHashMapMixin.keys>\n   0x000000000006e869 <+689>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000006e86d <+693>:\tmov    rbx,QWORD PTR [r15+0x7cf]\n   0x000000000006e874 <+700>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000006e878 <+704>:\tcall   0x85358 <stub _iso_stub_AllocateClosureStub>\n   0x000000000006e87d <+709>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000006e881 <+713>:\tmov    rdx,rax\n   0x000000000006e884 <+716>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000006e88b <+723>:\tcall   0x6f498 <new LinkedHashMap.fromIterable>\n\n16\t\n17\t  for (final node in graph.keys) {\n   0x000000000006e890 <+728>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006e894 <+732>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000006e898 <+736>:\tcall   0x83a98 <_LinkedHashMapMixin.keys>\n   0x000000000006e89d <+741>:\tmov    rdi,rax\n   0x000000000006e8a0 <+744>:\tcall   0x544ac <_CompactKeysIterable.iterator>\n   0x000000000006e8a5 <+749>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000006e8a9 <+753>:\tmov    rdx,QWORD PTR [rax+0x7]\n   0x000000000006e8ad <+757>:\tmov    QWORD PTR [rbp-0x20],rdx\n   0x000000000006e8b1 <+761>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000006e8b5 <+765>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000006e8b9 <+769>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000006e8bd <+773>:\tjbe    0x6efc1 <main+2569>\n   0x000000000006e8c3 <+779>:\tmov    rdi,rax\n   0x000000000006e8c6 <+782>:\tcall   0x7f368 <_CompactIterator.moveNext>\n\n18\t    for (final neighbor in graph[node]!) {\n   0x000000000006e923 <+875>:\tmov    rcx,rax\n   0x000000000006e926 <+878>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000006e92a <+882>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000006e92e <+886>:\tcmp    rdx,rcx\n   0x000000000006e931 <+889>:\tjne    0x6e940 <main+904>\n   0x000000000006e937 <+895>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000006e93b <+899>:\tjmp    0x6e943 <main+907>\n   0x000000000006e940 <+904>:\tmov    rdi,rcx\n   0x000000000006e943 <+907>:\tcmp    rdi,QWORD PTR [r14+0x70]\n   0x000000000006e947 <+911>:\tje     0x6efcd <main+2581>\n   0x000000000006e94d <+917>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000006e950 <+920>:\tshr    ecx,0xc\n   0x000000000006e953 <+923>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000006e957 <+927>:\tcall   QWORD PTR [rax+rcx*8+0x77e0]\n   0x000000000006e95e <+934>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000006e962 <+938>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000006e966 <+942>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000006e96a <+946>:\tjbe    0x6efd2 <main+2586>\n   0x000000000006e970 <+952>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000006e973 <+955>:\tshr    ecx,0xc\n   0x000000000006e976 <+958>:\tmov    rdi,rax\n   0x000000000006e979 <+961>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000006e97d <+965>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000006e980 <+968>:\ttest   al,0x10\n   0x000000000006e982 <+970>:\tjne    0x6ea6b <main+1203>\n   0x000000000006e988 <+976>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000006e98c <+980>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000006e990 <+984>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000006e993 <+987>:\tshr    ecx,0xc\n   0x000000000006e996 <+990>:\tmov    rdi,rax\n   0x000000000006e999 <+993>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000006e99d <+997>:\tcall   QWORD PTR [rax+rcx*8-0x80]\n   0x000000000006efc8 <+2576>:\tjmp    0x6e8c3 <main+779>\n   0x000000000006efcd <+2581>:\tcall   0x865c0 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n   0x000000000006efd2 <+2586>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000006efd9 <+2593>:\tjmp    0x6e970 <main+952>\n   0x000000000006efde <+2598>:\tcall   QWORD PTR [r14+0x230]\n\n19\t      inDegree[neighbor] = (inDegree[neighbor] ?? 0) + 1;\n   0x000000000006e9a1 <+1001>:\tmov    rbx,rax\n   0x000000000006e9a4 <+1004>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000006e9a8 <+1008>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000006e9ac <+1012>:\tmov    QWORD PTR [rbp-0x38],rbx\n   0x000000000006e9b0 <+1016>:\ttest   al,0x1\n   0x000000000006e9b2 <+1018>:\tje     0x6e9df <main+1063>\n   0x000000000006e9b8 <+1024>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000006e9bb <+1027>:\tshr    esi,0xc\n   0x000000000006e9be <+1030>:\tsub    rsi,0x3c\n   0x000000000006e9c2 <+1034>:\tcmp    rsi,0x1\n   0x000000000006e9c6 <+1038>:\tjbe    0x6e9df <main+1063>\n   0x000000000006e9cc <+1044>:\tmov    rbx,QWORD PTR [r15+0x597]\n   0x000000000006e9d3 <+1051>:\tmov    r9,QWORD PTR [r15+0x7e7]\n   0x000000000006e9da <+1058>:\tcall   0x8bce4 <assert type is int>\n\n20\t    }\n21\t  }\n22\t\n23\t  // Check for Eulerian path or circuit conditions\n24\t  int startNode = -1;\n25\t  int endNode = -1;\n26\t  bool hasEulerianPath = true;\n27\t  bool hasEulerianCircuit = true;\n28\t\n29\t  for (final node in graph.keys) {\n   0x000000000006ea62 <+1194>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000006ea66 <+1198>:\tjmp    0x6e962 <main+938>\n   0x000000000006ea6b <+1203>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000006ea6f <+1207>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000006ea73 <+1211>:\tjmp    0x6e8b1 <main+761>\n   0x000000000006ea78 <+1216>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006ea7c <+1220>:\tcall   0x83a98 <_LinkedHashMapMixin.keys>\n   0x000000000006ea81 <+1225>:\tmov    rdi,rax\n   0x000000000006ea84 <+1228>:\tcall   0x544ac <_CompactKeysIterable.iterator>\n   0x000000000006ea89 <+1233>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000006ea8d <+1237>:\tmov    rdx,QWORD PTR [rax+0x7]\n   0x000000000006ea91 <+1241>:\tmov    QWORD PTR [rbp-0x28],rdx\n   0x000000000006ea95 <+1245>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000006ea99 <+1249>:\tmov    r9,0xffffffffffffffff\n   0x000000000006eaa0 <+1256>:\tmov    r8,0xffffffffffffffff\n   0x000000000006eaa7 <+1263>:\tmov    rsi,QWORD PTR [r14+0x78]\n   0x000000000006eaab <+1267>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x000000000006eaaf <+1271>:\tmov    QWORD PTR [rbp-0x40],r9\n   0x000000000006eab3 <+1275>:\tmov    QWORD PTR [rbp-0x48],r8\n   0x000000000006eab7 <+1279>:\tmov    QWORD PTR [rbp-0x20],rsi\n   0x000000000006eabb <+1283>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000006eabf <+1287>:\tjbe    0x6efde <main+2598>\n   0x000000000006eac5 <+1293>:\tmov    rdi,rax\n   0x000000000006eac8 <+1296>:\tcall   0x7f368 <_CompactIterator.moveNext>\n\n30\t    final out = outDegree[node]!;\n   0x000000000006efe5 <+2605>:\tjmp    0x6eac5 <main+1293>\n   0x000000000006efea <+2610>:\tcall   0x865c0 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n31\t    final in_ = inDegree[node]!;\n   0x000000000006efef <+2615>:\tcall   0x865c0 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n32\t\n33\t    if (out != in_) {\n34\t      hasEulerianCircuit = false;\n35\t      if ((out - in_ == 1 && startNode == -1)) {\n36\t        startNode = node;\n37\t      } else if ((in_ - out == 1 && endNode == -1)) {\n38\t        endNode = node;\n39\t      } else {\n40\t        hasEulerianPath = false;\n41\t        break;\n42\t      }\n43\t    }\n44\t  }\n45\t\n46\t  if (!hasEulerianPath && !hasEulerianCircuit) {\n47\t    print(\"Graph has neither Eulerian Path nor Circuit.\");\n   0x000000000006eb63 <+1451>:\tmov    rcx,rax\n   0x000000000006eb66 <+1454>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000006eb6a <+1458>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000006eb6e <+1462>:\tcmp    rdx,rcx\n   0x000000000006eb71 <+1465>:\tjne    0x6eb7b <main+1475>\n   0x000000000006eb77 <+1471>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000006eb7b <+1475>:\tcmp    rcx,QWORD PTR [r14+0x70]\n   0x000000000006eb7f <+1479>:\tje     0x6efef <main+2615>\n   0x000000000006eb85 <+1485>:\tmov    rdx,QWORD PTR [rbp-0x50]\n   0x000000000006eb89 <+1489>:\tsar    rdx,1\n   0x000000000006eb8c <+1492>:\tjae    0x6eb93 <main+1499>\n   0x000000000006eb8e <+1494>:\tmov    rdx,QWORD PTR [rdx+rdx*1+0x8]\n   0x000000000006eb93 <+1499>:\tsar    rcx,1\n   0x000000000006eb96 <+1502>:\tjae    0x6eb9d <main+1509>\n   0x000000000006eb98 <+1504>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000006eb9d <+1509>:\tcmp    rdx,rcx\n   0x000000000006eba0 <+1512>:\tje     0x6ec33 <main+1659>\n   0x000000000006eba6 <+1518>:\tmov    rbx,rdx\n   0x000000000006eba9 <+1521>:\tsub    rbx,rcx\n   0x000000000006ebac <+1524>:\tcmp    rbx,0x1\n   0x000000000006ebb0 <+1528>:\tjne    0x6ebde <main+1574>\n   0x000000000006ebb6 <+1534>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000006ebba <+1538>:\tcmp    rbx,0xffffffffffffffff\n   0x000000000006ebbe <+1542>:\tjne    0x6ebe2 <main+1578>\n   0x000000000006ebc4 <+1548>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000006ebc8 <+1552>:\tsar    rcx,1\n   0x000000000006ebcb <+1555>:\tjae    0x6ebd2 <main+1562>\n   0x000000000006ebcd <+1557>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000006ebd2 <+1562>:\tmov    rdx,rcx\n   0x000000000006ebd5 <+1565>:\tmov    rcx,QWORD PTR [rbp-0x48]\n   0x000000000006ebd9 <+1569>:\tjmp    0x6ec0e <main+1622>\n   0x000000000006ebde <+1574>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000006ebe2 <+1578>:\tsub    rcx,rdx\n   0x000000000006ebe5 <+1581>:\tcmp    rcx,0x1\n   0x000000000006ebe9 <+1585>:\tjne    0x6ec20 <main+1640>\n   0x000000000006ebef <+1591>:\tmov    rcx,QWORD PTR [rbp-0x48]\n   0x000000000006ebf3 <+1595>:\tcmp    rcx,0xffffffffffffffff\n   0x000000000006ebf7 <+1599>:\tjne    0x6ec20 <main+1640>\n   0x000000000006ebfd <+1605>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000006ec01 <+1609>:\tsar    rcx,1\n   0x000000000006ec04 <+1612>:\tjae    0x6ec0b <main+1619>\n   0x000000000006ec06 <+1614>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000006ec0b <+1619>:\tmov    rdx,rbx\n   0x000000000006ec0e <+1622>:\tmov    r9,rdx\n   0x000000000006ec11 <+1625>:\tmov    r8,rcx\n   0x000000000006ec14 <+1628>:\tmov    rsi,QWORD PTR [r14+0x80]\n   0x000000000006ec1b <+1635>:\tjmp    0x6ec45 <main+1677>\n   0x000000000006ec20 <+1640>:\tmov    rcx,QWORD PTR [r14+0x80]\n   0x000000000006ec27 <+1647>:\tmov    rax,QWORD PTR [r14+0x80]\n   0x000000000006ec2e <+1654>:\tjmp    0x6ec61 <main+1705>\n   0x000000000006ec33 <+1659>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000006ec37 <+1663>:\tmov    rcx,QWORD PTR [rbp-0x48]\n   0x000000000006ec3b <+1667>:\tmov    r9,rbx\n   0x000000000006ec3e <+1670>:\tmov    r8,rcx\n   0x000000000006ec41 <+1673>:\tmov    rsi,QWORD PTR [rbp-0x20]\n   0x000000000006ec45 <+1677>:\tmov    rcx,rax\n   0x000000000006ec48 <+1680>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000006ec4c <+1684>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000006ec50 <+1688>:\tjmp    0x6eaab <main+1267>\n   0x000000000006ec55 <+1693>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000006ec59 <+1697>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000006ec5d <+1701>:\tmov    rcx,QWORD PTR [r14+0x78]\n   0x000000000006ec61 <+1705>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000006ec65 <+1709>:\ttest   cl,0x10\n   0x000000000006ec68 <+1712>:\tje     0x6ec8b <main+1747>\n   0x000000000006ec6e <+1718>:\ttest   al,0x10\n   0x000000000006ec70 <+1720>:\tje     0x6ec8b <main+1747>\n   0x000000000006ec76 <+1726>:\tmov    rdi,QWORD PTR [r15+0x807]\n   0x000000000006ec7d <+1733>:\tcall   0x6f3fc <print>\n\n48\t    return;\n49\t  }\n50\t\n51\t  // Determine start node for Hierholzer's algorithm\n52\t  final start = hasEulerianCircuit ? graph.keys.first : startNode;\n   0x000000000006ec82 <+1738>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000006ec86 <+1742>:\tmov    rsp,rbp\n   0x000000000006ec89 <+1745>:\tpop    rbp\n   0x000000000006ec8a <+1746>:\tret\n   0x000000000006ec8b <+1747>:\ttest   al,0x10\n   0x000000000006ec8d <+1749>:\tjne    0x6ecac <main+1780>\n   0x000000000006ec93 <+1755>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006ec97 <+1759>:\tcall   0x83a98 <_LinkedHashMapMixin.keys>\n   0x000000000006ec9c <+1764>:\tmov    rdi,rax\n   0x000000000006ec9f <+1767>:\tcall   0x6f368 <Iterable.first>\n   0x000000000006eca4 <+1772>:\tmov    rcx,rax\n   0x000000000006eca7 <+1775>:\tjmp    0x6ecaf <main+1783>\n   0x000000000006ecac <+1780>:\tmov    rcx,rbx\n   0x000000000006ecaf <+1783>:\tmov    rax,rcx\n   0x000000000006ecb2 <+1786>:\tadd    rax,rax\n   0x000000000006ecb5 <+1789>:\tjno    0x6ecc4 <main+1804>\n   0x000000000006ecbb <+1795>:\tcall   0x861c0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n53\t  final stack = <int>[start];\n54\t  final path = <int>[];\n   0x000000000006ecf2 <+1850>:\tmov    rcx,rax\n   0x000000000006ecf5 <+1853>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000006ecf9 <+1857>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000006ecfd <+1861>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000006ed01 <+1865>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000006ed09 <+1873>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000006ed10 <+1880>:\txor    esi,esi\n   0x000000000006ed12 <+1882>:\tcall   0x533d0 <new _GrowableList>\n\n55\t  final localGraph = Map<int, List<int>>.from(graph);\n   0x000000000006ed17 <+1887>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000006ed1b <+1891>:\tmov    rdi,QWORD PTR [r15+0x80f]\n   0x000000000006ed22 <+1898>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000006ed26 <+1902>:\tcall   0x6f19c <new LinkedHashMap.from>\n\n56\t\n57\t  // Hierholzer's algorithm to find the Eulerian path/circuit\n58\t  while (stack.isNotEmpty) {\n   0x000000000006eff4 <+2620>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000006effb <+2627>:\tjmp    0x6ed44 <main+1932>\n   0x000000000006f000 <+2632>:\tcall   0x86480 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n59\t    final current = stack.last;\n60\t    if (localGraph[current]!.isNotEmpty) {\n   0x000000000006ed8a <+2002>:\tmov    rcx,rax\n   0x000000000006ed8d <+2005>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000006ed91 <+2009>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000006ed95 <+2013>:\tcmp    rdx,rcx\n   0x000000000006ed98 <+2016>:\tjne    0x6eda7 <main+2031>\n   0x000000000006ed9e <+2022>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000006eda2 <+2026>:\tjmp    0x6edaa <main+2034>\n   0x000000000006eda7 <+2031>:\tmov    rdi,rcx\n   0x000000000006edaa <+2034>:\tcmp    rdi,QWORD PTR [r14+0x70]\n   0x000000000006edae <+2038>:\tje     0x6f005 <main+2637>\n   0x000000000006edb4 <+2044>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000006edb7 <+2047>:\tshr    ecx,0xc\n   0x000000000006edba <+2050>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000006edbe <+2054>:\tcall   QWORD PTR [rax+rcx*8+0x7a50]\n   0x000000000006f005 <+2637>:\tcall   0x865c0 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n\n61\t      final next = localGraph[current]!.removeAt(0);\n   0x000000000006eddd <+2085>:\tmov    rcx,rax\n   0x000000000006ede0 <+2088>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000006ede4 <+2092>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000006ede8 <+2096>:\tcmp    rdx,rcx\n   0x000000000006edeb <+2099>:\tjne    0x6edfa <main+2114>\n   0x000000000006edf1 <+2105>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000006edf5 <+2109>:\tjmp    0x6edfd <main+2117>\n   0x000000000006edfa <+2114>:\tmov    rdi,rcx\n   0x000000000006edfd <+2117>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000006ee01 <+2121>:\tcmp    rdi,QWORD PTR [r14+0x70]\n   0x000000000006ee05 <+2125>:\tje     0x6f00a <main+2642>\n   0x000000000006ee0b <+2131>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000006ee0e <+2134>:\tshr    ecx,0xc\n   0x000000000006ee11 <+2137>:\txor    esi,esi\n   0x000000000006ee13 <+2139>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000006ee17 <+2143>:\tcall   QWORD PTR [rax+rcx*8+0x8fa0]\n   0x000000000006f00a <+2642>:\tcall   0x865c0 <stub _iso_stub_NullCastErrorSharedWithoutFPURegsStub>\n   0x000000000006f00f <+2647>:\tcall   0x86480 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n62\t      stack.add(next);\n63\t    } else {\n64\t      path.add(stack.removeLast());\n65\t    }\n66\t  }\n67\t\n68\t  // Reverse to get the correct order\n69\t  path.reversed.forEach((node) => print(\"Node: $node\"));\n   0x000000000006ef00 <+2376>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006ef04 <+2380>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000006ef08 <+2384>:\tmov    rax,rcx\n   0x000000000006ef0b <+2387>:\tadd    rax,0x1\n   0x000000000006ef0f <+2391>:\tmov    rdx,rax\n   0x000000000006ef12 <+2394>:\tadd    rdx,rdx\n   0x000000000006ef15 <+2397>:\tmov    QWORD PTR [rdi+0xf],rdx\n   0x000000000006ef19 <+2401>:\tmov    rdx,QWORD PTR [rdi+0x17]\n   0x000000000006ef1d <+2405>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000006ef21 <+2409>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000006ef26 <+2414>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000006ef2a <+2418>:\ttest   al,0x1\n   0x000000000006ef2c <+2420>:\tje     0x6ef45 <main+2445>\n   0x000000000006ef2e <+2422>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000006ef32 <+2426>:\tshr    r11d,0x2\n   0x000000000006ef36 <+2430>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000006ef3a <+2434>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000006ef3e <+2438>:\tje     0x6ef45 <main+2445>\n   0x000000000006ef40 <+2440>:\tcall   0x84554 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000006ef45 <+2445>:\tmov    rdx,rdi\n   0x000000000006ef48 <+2448>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000006ef4c <+2452>:\tjmp    0x6ed36 <main+1918>\n   0x000000000006ef51 <+2457>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000006ef55 <+2461>:\tmov    rdi,rdx\n   0x000000000006ef58 <+2464>:\tcall   0x6f16c <ListBase.reversed>\n   0x000000000006ef5d <+2469>:\tmov    rbx,QWORD PTR [r15+0x817]\n   0x000000000006ef64 <+2476>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000006ef68 <+2480>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000006ef6c <+2484>:\tcall   0x85358 <stub _iso_stub_AllocateClosureStub>\n   0x000000000006ef71 <+2489>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000006ef75 <+2493>:\tmov    rsi,rax\n   0x000000000006ef78 <+2496>:\tcall   0x6f064 <ListIterable.forEach>\n\n70\t  print(hasEulerianCircuit ? \"Eulerian Circuit Found.\" : \"Eulerian Path Found.\");\n   0x000000000006ef7d <+2501>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000006ef81 <+2505>:\ttest   al,0x10\n   0x000000000006ef83 <+2507>:\tjne    0x6ef95 <main+2525>\n   0x000000000006ef89 <+2513>:\tmov    rdi,QWORD PTR [r15+0x81f]\n   0x000000000006ef90 <+2520>:\tjmp    0x6ef9c <main+2532>\n   0x000000000006ef95 <+2525>:\tmov    rdi,QWORD PTR [r15+0x827]\n   0x000000000006ef9c <+2532>:\tcall   0x6f3fc <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_59.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency matrix\n  List<List<int>> graph = [\n    [0, 16, 13, 0, 0, 0],\n    [0, 0, 10, 12, 0, 0],\n    [0, 4, 0, 0, 14, 0],\n    [0, 0, 9, 0, 0, 20],\n    [0, 0, 0, 7, 0, 4],\n    [0, 0, 0, 0, 0, 0]\n  ];\n\n  int source = 0;\n  int sink = 5;\n  int maxFlow = 0;\n\n  // Residual graph initialized with original capacities\n  List<List<int>> residualGraph = List.generate(\n    graph.length,\n    (i) => List<int>.from(graph[i]),\n  );\n\n  // Parent array for BFS to store path\n  List<int> parent = List.filled(graph.length, -1);\n\n  // Augment flow while there is a path from source to sink\n  while (bfs(residualGraph, source, sink, parent)) {\n    // Find minimum residual capacity of the path\n    int pathFlow = 1 << 60; // Large initial value\n    for (int v = sink; v != source; v = parent[v]) {\n      int u = parent[v];\n      pathFlow = pathFlow < residualGraph[u][v] ? pathFlow : residualGraph[u][v];\n    }\n\n    // Update residual capacities and reverse edges\n    for (int v = sink; v != source; v = parent[v]) {\n      int u = parent[v];\n      residualGraph[u][v] -= pathFlow;\n      residualGraph[v][u] += pathFlow;\n    }\n\n    maxFlow += pathFlow;\n  }\n\n  print('Maximum flow: $maxFlow');\n}\n\nbool bfs(List<List<int>> graph, int source, int sink, List<int> parent) {\n  int n = graph.length;\n  List<bool> visited = List.filled(n, false);\n  List<int> queue = [];\n  queue.add(source);\n  visited[source] = true;\n  parent[source] = -1;\n\n  while (queue.isNotEmpty) {\n    int u = queue.removeAt(0);\n    for (int v = 0; v < n; v++) {\n      if (!visited[v] && graph[u][v] > 0) {\n        if (v == sink) {\n          parent[v] = u;\n          return true;\n        }\n        queue.add(v);\n        parent[v] = u;\n        visited[v] = true;\n      }\n    }\n  }\n  return false;\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008aaa3 <+1443>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008aaa7 <+1447>:\tmov    rsp,rbp\n   0x000000000008aaaa <+1450>:\tpop    rbp\n   0x000000000008aaab <+1451>:\tret\n   0x000000000008aaac <+1452>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Example graph represented as an adjacency matrix\n4\t  List<List<int>> graph = [\n   0x000000000008a5fe <+254>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a602 <+258>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a606 <+262>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a60a <+266>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a60e <+270>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a612 <+274>:\tmov    r9,QWORD PTR [rbp-0x28]\n   0x000000000008a616 <+278>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a61d <+285>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n5\t    [0, 16, 13, 0, 0, 0],\n   0x000000000008a500 <+0>:\tpush   rbp\n   0x000000000008a501 <+1>:\tmov    rbp,rsp\n   0x000000000008a504 <+4>:\tsub    rsp,0x68\n   0x000000000008a508 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a50c <+12>:\tjbe    0x8aaac <main+1452>\n   0x000000000008a512 <+18>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a51a <+26>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a521 <+33>:\txor    esi,esi\n   0x000000000008a523 <+35>:\tmov    edx,0x20\n   0x000000000008a528 <+40>:\tmov    ebx,0x1a\n   0x000000000008a52d <+45>:\txor    r8d,r8d\n   0x000000000008a530 <+48>:\txor    r9d,r9d\n   0x000000000008a533 <+51>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n6\t    [0, 0, 10, 12, 0, 0],\n   0x000000000008a538 <+56>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a53c <+60>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a544 <+68>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a54b <+75>:\txor    esi,esi\n   0x000000000008a54d <+77>:\txor    edx,edx\n   0x000000000008a54f <+79>:\tmov    ebx,0x14\n   0x000000000008a554 <+84>:\tmov    r8d,0x18\n   0x000000000008a55a <+90>:\txor    r9d,r9d\n   0x000000000008a55d <+93>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n7\t    [0, 4, 0, 0, 14, 0],\n   0x000000000008a562 <+98>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a566 <+102>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a56e <+110>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a575 <+117>:\txor    esi,esi\n   0x000000000008a577 <+119>:\tmov    edx,0x8\n   0x000000000008a57c <+124>:\txor    ebx,ebx\n   0x000000000008a57e <+126>:\txor    r8d,r8d\n   0x000000000008a581 <+129>:\tmov    r9d,0x1c\n   0x000000000008a587 <+135>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n8\t    [0, 0, 9, 0, 0, 20],\n   0x000000000008a58c <+140>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a590 <+144>:\tmov    QWORD PTR [rsp],0x28\n   0x000000000008a598 <+152>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a59f <+159>:\txor    esi,esi\n   0x000000000008a5a1 <+161>:\txor    edx,edx\n   0x000000000008a5a3 <+163>:\tmov    ebx,0x12\n   0x000000000008a5a8 <+168>:\txor    r8d,r8d\n   0x000000000008a5ab <+171>:\txor    r9d,r9d\n   0x000000000008a5ae <+174>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n9\t    [0, 0, 0, 7, 0, 4],\n   0x000000000008a5b3 <+179>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a5b7 <+183>:\tmov    QWORD PTR [rsp],0x8\n   0x000000000008a5bf <+191>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a5c6 <+198>:\txor    esi,esi\n   0x000000000008a5c8 <+200>:\txor    edx,edx\n   0x000000000008a5ca <+202>:\txor    ebx,ebx\n   0x000000000008a5cc <+204>:\tmov    r8d,0xe\n   0x000000000008a5d2 <+210>:\txor    r9d,r9d\n   0x000000000008a5d5 <+213>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n10\t    [0, 0, 0, 0, 0, 0]\n   0x000000000008a5da <+218>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a5de <+222>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a5e6 <+230>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a5ed <+237>:\txor    esi,esi\n   0x000000000008a5ef <+239>:\txor    edx,edx\n   0x000000000008a5f1 <+241>:\txor    ebx,ebx\n   0x000000000008a5f3 <+243>:\txor    r8d,r8d\n   0x000000000008a5f6 <+246>:\txor    r9d,r9d\n   0x000000000008a5f9 <+249>:\tcall   0x8b7e8 <new _GrowableList._literal6>\n\n11\t  ];\n12\t\n13\t  int source = 0;\n14\t  int sink = 5;\n15\t  int maxFlow = 0;\n16\t\n17\t  // Residual graph initialized with original capacities\n18\t  List<List<int>> residualGraph = List.generate(\n19\t    graph.length,\n20\t    (i) => List<int>.from(graph[i]),\n   0x000000000008a63c <+316>:\tmov    rcx,rax\n   0x000000000008a63f <+319>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a643 <+323>:\txor    r8d,r8d\n   0x000000000008a646 <+326>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a64a <+330>:\tmov    QWORD PTR [rbp-0x30],r8\n   0x000000000008a64e <+334>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a652 <+338>:\tjbe    0x8aab8 <main+1464>\n   0x000000000008a658 <+344>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a65c <+348>:\tsar    rax,1\n   0x000000000008a65f <+351>:\tcmp    r8,rax\n   0x000000000008a662 <+354>:\tjge    0x8a6ed <main+493>\n   0x000000000008a668 <+360>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a66c <+364>:\tsar    rax,1\n   0x000000000008a66f <+367>:\tmov    rbx,r8\n   0x000000000008a672 <+370>:\tcmp    rbx,rax\n   0x000000000008a675 <+373>:\tjae    0x8aac4 <main+1476>\n   0x000000000008a67b <+379>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a67f <+383>:\tmov    rsi,QWORD PTR [rax+r8*8+0x17]\n   0x000000000008a684 <+388>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a68b <+395>:\tmov    r10,QWORD PTR [r15+0x97]\n   0x000000000008a692 <+402>:\tcall   0x8afa0 <new List.from>\n\n21\t  );\n22\t\n23\t  // Parent array for BFS to store path\n24\t  List<int> parent = List.filled(graph.length, -1);\n   0x000000000008a697 <+407>:\tmov    rdx,rax\n   0x000000000008a69a <+410>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a69e <+414>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a6a2 <+418>:\tsar    rax,1\n   0x000000000008a6a5 <+421>:\tmov    rbx,QWORD PTR [rbp-0x30]\n   0x000000000008a6a9 <+425>:\tcmp    rbx,rax\n   0x000000000008a6ac <+428>:\tjae    0x8aac9 <main+1481>\n   0x000000000008a6b2 <+434>:\tmov    rax,QWORD PTR [rcx+0x17]\n   0x000000000008a6b6 <+438>:\txchg   rdx,rax\n   0x000000000008a6b9 <+441>:\tmov    rbx,QWORD PTR [rbp-0x30]\n   0x000000000008a6bd <+445>:\tlea    r13,[rdx+rbx*8+0x17]\n   0x000000000008a6c2 <+450>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a6c6 <+454>:\ttest   al,0x1\n   0x000000000008a6c8 <+456>:\tje     0x8a6e1 <main+481>\n   0x000000000008a6ca <+458>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a6ce <+462>:\tshr    r11d,0x2\n   0x000000000008a6d2 <+466>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a6d6 <+470>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a6da <+474>:\tje     0x8a6e1 <main+481>\n   0x000000000008a6dc <+476>:\tcall   0x83630 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a6e1 <+481>:\tadd    rbx,0x1\n   0x000000000008a6e5 <+485>:\tmov    r8,rbx\n   0x000000000008a6e8 <+488>:\tjmp    0x8a646 <main+326>\n   0x000000000008a6ed <+493>:\tmov    rax,rdx\n   0x000000000008a6f0 <+496>:\tmov    rdx,QWORD PTR [rax+0xf]\n   0x000000000008a6f4 <+500>:\tmov    rax,rdx\n   0x000000000008a6f7 <+503>:\tsar    rax,1\n   0x000000000008a6fa <+506>:\tmov    rsi,rax\n   0x000000000008a6fd <+509>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a701 <+513>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a708 <+520>:\tmov    rdx,0xfffffffffffffffe\n   0x000000000008a70f <+527>:\tcall   0x6c5c0 <new _List.filled>\n\n25\t\n26\t  // Augment flow while there is a path from source to sink\n27\t  while (bfs(residualGraph, source, sink, parent)) {\n   0x000000000008a714 <+532>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a718 <+536>:\txor    edx,edx\n   0x000000000008a71a <+538>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a71e <+542>:\tmov    QWORD PTR [rbp-0x38],rdx\n   0x000000000008a722 <+546>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a726 <+550>:\tjbe    0x8aace <main+1486>\n   0x000000000008a72c <+556>:\tmov    rdi,rcx\n   0x000000000008a72f <+559>:\tmov    rsi,rax\n   0x000000000008a732 <+562>:\tcall   0x8abac <bfs>\n   0x000000000008a737 <+567>:\ttest   al,0x10\n   0x000000000008a739 <+569>:\tjne    0x8aa54 <main+1364>\n   0x000000000008a73f <+575>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a743 <+579>:\tmov    r8,QWORD PTR [r15+0x7bf]\n   0x000000000008a74a <+586>:\tmov    edi,0x5\n   0x000000000008a74f <+591>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a753 <+595>:\tmov    QWORD PTR [rbp-0x20],r8\n   0x000000000008a757 <+599>:\tmov    QWORD PTR [rbp-0x48],rdi\n   0x000000000008a75b <+603>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a75f <+607>:\tjbe    0x8aada <main+1498>\n   0x000000000008a765 <+613>:\tcmp    rdi,0x0\n   0x000000000008a769 <+617>:\tje     0x8a873 <main+883>\n   0x000000000008a76f <+623>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a773 <+627>:\tmov    rbx,rdi\n   0x000000000008a776 <+630>:\tcmp    rbx,rax\n   0x000000000008a779 <+633>:\tjae    0x8aae6 <main+1510>\n   0x000000000008a77f <+639>:\tmov    rax,rdi\n   0x000000000008a782 <+642>:\tadd    rax,rax\n   0x000000000008a785 <+645>:\tjno    0x8a794 <main+660>\n   0x000000000008a78b <+651>:\tcall   0x8529c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008aace <+1486>:\tcall   QWORD PTR [r14+0x230]\n\n28\t    // Find minimum residual capacity of the path\n29\t    int pathFlow = 1 << 60; // Large initial value\n30\t    for (int v = sink; v != source; v = parent[v]) {\n   0x000000000008aad5 <+1493>:\tjmp    0x8a72c <main+556>\n   0x000000000008aada <+1498>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008aae1 <+1505>:\tjmp    0x8a765 <main+613>\n   0x000000000008aae6 <+1510>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008aaeb <+1515>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008aaf0 <+1520>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n31\t      int u = parent[v];\n32\t      pathFlow = pathFlow < residualGraph[u][v] ? pathFlow : residualGraph[u][v];\n   0x000000000008a790 <+656>:\tmov    QWORD PTR [rax+0x7],rdi\n   0x000000000008a794 <+660>:\tmov    r9,rax\n   0x000000000008a797 <+663>:\tmov    QWORD PTR [rbp-0x18],r9\n   0x000000000008a79b <+667>:\tmov    rax,QWORD PTR [rdx+rdi*8+0x17]\n   0x000000000008a7a0 <+672>:\tmov    rcx,QWORD PTR [rsi+0xf]\n   0x000000000008a7a4 <+676>:\tmov    r10,rax\n   0x000000000008a7a7 <+679>:\tsar    r10,1\n   0x000000000008a7aa <+682>:\tjae    0x8a7b1 <main+689>\n   0x000000000008a7ac <+684>:\tmov    r10,QWORD PTR [r10+r10*1+0x8]\n   0x000000000008a7b1 <+689>:\tmov    QWORD PTR [rbp-0x40],r10\n   0x000000000008a7b5 <+693>:\tsar    rcx,1\n   0x000000000008a7b8 <+696>:\tmov    rax,rcx\n   0x000000000008a7bb <+699>:\tmov    rbx,r10\n   0x000000000008a7be <+702>:\tcmp    rbx,rax\n   0x000000000008a7c1 <+705>:\tjae    0x8aaeb <main+1515>\n   0x000000000008a7c7 <+711>:\tmov    rax,QWORD PTR [rsi+0x17]\n   0x000000000008a7cb <+715>:\tmov    rcx,QWORD PTR [rax+r10*8+0x17]\n   0x000000000008a7d0 <+720>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a7d3 <+723>:\tshr    eax,0xc\n   0x000000000008a7d6 <+726>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a7db <+731>:\tmov    QWORD PTR [rsp],r9\n   0x000000000008a7df <+735>:\tmov    rcx,rax\n   0x000000000008a7e2 <+738>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a7e6 <+742>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a7e9 <+745>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a7ed <+749>:\tsar    rcx,1\n   0x000000000008a7f0 <+752>:\tjae    0x8a7f7 <main+759>\n   0x000000000008a7f2 <+754>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a7f7 <+759>:\tsar    rax,1\n   0x000000000008a7fa <+762>:\tjae    0x8a801 <main+769>\n   0x000000000008a7fc <+764>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a801 <+769>:\tcmp    rcx,rax\n   0x000000000008a804 <+772>:\tjge    0x8a813 <main+787>\n   0x000000000008a80a <+778>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a80e <+782>:\tjmp    0x8a854 <main+852>\n   0x000000000008a813 <+787>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a817 <+791>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a81b <+795>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a81f <+799>:\tsar    rax,1\n   0x000000000008a822 <+802>:\tmov    rbx,rcx\n   0x000000000008a825 <+805>:\tcmp    rbx,rax\n   0x000000000008a828 <+808>:\tjae    0x8aaf0 <main+1520>\n   0x000000000008a82e <+814>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a832 <+818>:\tmov    rbx,QWORD PTR [rax+rcx*8+0x17]\n   0x000000000008a837 <+823>:\tmov    ecx,DWORD PTR [rbx-0x1]\n   0x000000000008a83a <+826>:\tshr    ecx,0xc\n   0x000000000008a83d <+829>:\tmov    QWORD PTR [rsp+0x8],rbx\n   0x000000000008a842 <+834>:\tmov    r11,QWORD PTR [rbp-0x18]\n   0x000000000008a846 <+838>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a84a <+842>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a84e <+846>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a851 <+849>:\tmov    r8,rax\n   0x000000000008a854 <+852>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a858 <+856>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a85c <+860>:\tmov    rcx,QWORD PTR [rdx+rax*8+0x17]\n   0x000000000008a861 <+865>:\tsar    rcx,1\n   0x000000000008a864 <+868>:\tjae    0x8a86b <main+875>\n   0x000000000008a866 <+870>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a86b <+875>:\tmov    rdi,rcx\n   0x000000000008a86e <+878>:\tjmp    0x8a74f <main+591>\n   0x000000000008a873 <+883>:\tmov    rsi,QWORD PTR [rbp-0x20]\n   0x000000000008a877 <+887>:\tsar    rsi,1\n   0x000000000008a87a <+890>:\tjae    0x8a881 <main+897>\n   0x000000000008a87c <+892>:\tmov    rsi,QWORD PTR [rsi+rsi*1+0x8]\n   0x000000000008a881 <+897>:\tmov    QWORD PTR [rbp-0x48],rsi\n   0x000000000008a885 <+901>:\tmov    r8d,0x5\n   0x000000000008a88b <+907>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a88f <+911>:\tmov    QWORD PTR [rbp-0x40],r8\n   0x000000000008a893 <+915>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a897 <+919>:\tjbe    0x8aaf5 <main+1525>\n   0x000000000008a89d <+925>:\tcmp    r8,0x0\n   0x000000000008a8a1 <+929>:\tje     0x8aa34 <main+1332>\n   0x000000000008a8a7 <+935>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a8ab <+939>:\tmov    rbx,r8\n   0x000000000008a8ae <+942>:\tcmp    rbx,rax\n   0x000000000008a8b1 <+945>:\tjae    0x8ab01 <main+1537>\n   0x000000000008a8b7 <+951>:\tmov    rax,r8\n   0x000000000008a8ba <+954>:\tadd    rax,rax\n   0x000000000008a8bd <+957>:\tjno    0x8a8cc <main+972>\n   0x000000000008a8c3 <+963>:\tcall   0x8529c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n33\t    }\n34\t\n35\t    // Update residual capacities and reverse edges\n36\t    for (int v = sink; v != source; v = parent[v]) {\n   0x000000000008aaf5 <+1525>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008aafc <+1532>:\tjmp    0x8a89d <main+925>\n   0x000000000008ab01 <+1537>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008ab06 <+1542>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008ab0b <+1547>:\tcall   0x8555c <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n37\t      int u = parent[v];\n38\t      residualGraph[u][v] -= pathFlow;\n   0x000000000008a8c8 <+968>:\tmov    QWORD PTR [rax+0x7],r8\n   0x000000000008a8cc <+972>:\tmov    r9,rax\n   0x000000000008a8cf <+975>:\tmov    QWORD PTR [rbp-0x50],r9\n   0x000000000008a8d3 <+979>:\tmov    r10,QWORD PTR [rdx+r8*8+0x17]\n   0x000000000008a8d8 <+984>:\tmov    QWORD PTR [rbp-0x28],r10\n   0x000000000008a8dc <+988>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a8e0 <+992>:\tmov    rcx,r10\n   0x000000000008a8e3 <+995>:\tsar    rcx,1\n   0x000000000008a8e6 <+998>:\tjae    0x8a8ed <main+1005>\n   0x000000000008a8e8 <+1000>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a8ed <+1005>:\tsar    rax,1\n   0x000000000008a8f0 <+1008>:\tmov    rbx,rcx\n   0x000000000008a8f3 <+1011>:\tcmp    rbx,rax\n   0x000000000008a8f6 <+1014>:\tjae    0x8ab06 <main+1542>\n   0x000000000008a8fc <+1020>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a900 <+1024>:\tmov    rbx,QWORD PTR [rax+rcx*8+0x17]\n   0x000000000008a905 <+1029>:\tmov    QWORD PTR [rbp-0x18],rbx\n   0x000000000008a909 <+1033>:\tmov    ecx,DWORD PTR [rbx-0x1]\n   0x000000000008a90c <+1036>:\tshr    ecx,0xc\n   0x000000000008a90f <+1039>:\tmov    QWORD PTR [rsp+0x8],rbx\n   0x000000000008a914 <+1044>:\tmov    QWORD PTR [rsp],r9\n   0x000000000008a918 <+1048>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a91c <+1052>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a91f <+1055>:\tsar    rax,1\n   0x000000000008a922 <+1058>:\tjae    0x8a929 <main+1065>\n   0x000000000008a924 <+1060>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a929 <+1065>:\tmov    rdx,QWORD PTR [rbp-0x48]\n   0x000000000008a92d <+1069>:\tmov    rcx,rax\n   0x000000000008a930 <+1072>:\tsub    rcx,rdx\n   0x000000000008a933 <+1075>:\tmov    rax,rcx\n   0x000000000008a936 <+1078>:\tadd    rax,rax\n   0x000000000008a939 <+1081>:\tjno    0x8a948 <main+1096>\n   0x000000000008a93f <+1087>:\tcall   0x8529c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a944 <+1092>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a948 <+1096>:\tmov    rcx,rax\n   0x000000000008a94b <+1099>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a94f <+1103>:\tmov    ebx,DWORD PTR [rax-0x1]\n   0x000000000008a952 <+1106>:\tshr    ebx,0xc\n   0x000000000008a955 <+1109>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a95a <+1114>:\tmov    r11,QWORD PTR [rbp-0x50]\n   0x000000000008a95e <+1118>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a963 <+1123>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a967 <+1127>:\tmov    rcx,rbx\n   0x000000000008a96a <+1130>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a96e <+1134>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n\n39\t      residualGraph[v][u] += pathFlow;\n   0x000000000008a975 <+1141>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a979 <+1145>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a97d <+1149>:\tsar    rax,1\n   0x000000000008a980 <+1152>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000008a984 <+1156>:\tcmp    rbx,rax\n   0x000000000008a987 <+1159>:\tjae    0x8ab0b <main+1547>\n   0x000000000008a98d <+1165>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a991 <+1169>:\tmov    rbx,QWORD PTR [rbp-0x40]\n   0x000000000008a995 <+1173>:\tmov    rsi,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a99a <+1178>:\tmov    QWORD PTR [rbp-0x18],rsi\n   0x000000000008a99e <+1182>:\tmov    ecx,DWORD PTR [rsi-0x1]\n   0x000000000008a9a1 <+1185>:\tshr    ecx,0xc\n   0x000000000008a9a4 <+1188>:\tmov    QWORD PTR [rsp+0x8],rsi\n   0x000000000008a9a9 <+1193>:\tmov    r11,QWORD PTR [rbp-0x28]\n   0x000000000008a9ad <+1197>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a9b1 <+1201>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a9b5 <+1205>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a9b8 <+1208>:\tsar    rax,1\n   0x000000000008a9bb <+1211>:\tjae    0x8a9c2 <main+1218>\n   0x000000000008a9bd <+1213>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a9c2 <+1218>:\tmov    rdx,QWORD PTR [rbp-0x48]\n   0x000000000008a9c6 <+1222>:\tmov    rcx,rax\n   0x000000000008a9c9 <+1225>:\tadd    rcx,rdx\n   0x000000000008a9cc <+1228>:\tmov    rax,rcx\n   0x000000000008a9cf <+1231>:\tadd    rax,rax\n   0x000000000008a9d2 <+1234>:\tjno    0x8a9e1 <main+1249>\n   0x000000000008a9d8 <+1240>:\tcall   0x8529c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a9dd <+1245>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a9e1 <+1249>:\tmov    rcx,rax\n   0x000000000008a9e4 <+1252>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a9e8 <+1256>:\tmov    ebx,DWORD PTR [rax-0x1]\n   0x000000000008a9eb <+1259>:\tshr    ebx,0xc\n   0x000000000008a9ee <+1262>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a9f3 <+1267>:\tmov    r11,QWORD PTR [rbp-0x28]\n   0x000000000008a9f7 <+1271>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a9fc <+1276>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008aa00 <+1280>:\tmov    rcx,rbx\n   0x000000000008aa03 <+1283>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008aa07 <+1287>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n   0x000000000008aa0e <+1294>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008aa12 <+1298>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008aa16 <+1302>:\tmov    rdx,QWORD PTR [rcx+rax*8+0x17]\n   0x000000000008aa1b <+1307>:\tsar    rdx,1\n   0x000000000008aa1e <+1310>:\tjae    0x8aa25 <main+1317>\n   0x000000000008aa20 <+1312>:\tmov    rdx,QWORD PTR [rdx+rdx*1+0x8]\n   0x000000000008aa25 <+1317>:\tmov    r8,rdx\n   0x000000000008aa28 <+1320>:\tmov    rdx,rcx\n   0x000000000008aa2b <+1323>:\tmov    rsi,QWORD PTR [rbp-0x48]\n   0x000000000008aa2f <+1327>:\tjmp    0x8a88b <main+907>\n   0x000000000008aa34 <+1332>:\tmov    rcx,rdx\n   0x000000000008aa37 <+1335>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008aa3b <+1339>:\tsar    rax,1\n   0x000000000008aa3e <+1342>:\tjae    0x8aa45 <main+1349>\n   0x000000000008aa40 <+1344>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008aa45 <+1349>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008aa49 <+1353>:\tadd    rdx,rax\n   0x000000000008aa4c <+1356>:\tmov    rax,rcx\n   0x000000000008aa4f <+1359>:\tjmp    0x8a71a <main+538>\n   0x000000000008aa54 <+1364>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008aa58 <+1368>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008aa5c <+1372>:\tmov    r10d,0x4\n   0x000000000008aa62 <+1378>:\tcall   0x85018 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008aa67 <+1383>:\tmov    rcx,rax\n   0x000000000008aa6a <+1386>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008aa71 <+1393>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008aa75 <+1397>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008aa79 <+1401>:\tmov    rax,rdx\n   0x000000000008aa7c <+1404>:\tadd    rax,rax\n   0x000000000008aa7f <+1407>:\tjno    0x8aa8e <main+1422>\n   0x000000000008aa85 <+1413>:\tcall   0x8529c <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n40\t    }\n41\t\n42\t    maxFlow += pathFlow;\n43\t  }\n44\t\n45\t  print('Maximum flow: $maxFlow');\n   0x000000000008aa8a <+1418>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008aa8e <+1422>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008aa92 <+1426>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008aa96 <+1430>:\tcall   0x58a78 <_StringBase._interpolate>\n   0x000000000008aa9b <+1435>:\tmov    rdi,rax\n   0x000000000008aa9e <+1438>:\tcall   0x8ab10 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_60.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph representation: adjacency list with capacities and reverse edges\n  // Nodes: 0 to n-1, source = 0, sink = 5\n  const n = 6;\n  List<List<List<int>>> graph = List.generate(n, (_) => []);\n\n  // Add edges: [to, capacity, reverse_edge_index]\n  void addEdge(int from, int to, int cap) {\n    graph[from].add([to, cap, graph[to].length]);\n    graph[to].add([from, 0, graph[from].length - 1]);\n  }\n\n  // Build the example flow network (source=0, sink=5)\n  addEdge(0, 1, 16);\n  addEdge(0, 2, 13);\n  addEdge(1, 2, 10);\n  addEdge(1, 3, 12);\n  addEdge(2, 1, 4);\n  addEdge(2, 4, 14);\n  addEdge(3, 2, 9);\n  addEdge(3, 5, 20);\n  addEdge(4, 3, 7);\n  addEdge(4, 5, 4);\n\n  int maxFlow = 0;\n  const source = 0;\n  const sink = 5;\n\n  // Edmonds-Karp algorithm using BFS\n  while (true) {\n    List<int> parent = List.filled(n, -1);\n    List<int> minCap = List.filled(n, 0);\n    minCap[source] = 1 << 30; // Large initial capacity\n    var queue = [source];\n    parent[source] = -2;\n\n    // BFS to find augmenting path\n    while (queue.isNotEmpty) {\n      int u = queue.removeAt(0);\n      for (int i = 0; i < graph[u].length; i++) {\n        var edge = graph[u][i];\n        int v = edge[0];\n        int cap = edge[1];\n        if (parent[v] == -1 && cap > 0) {\n          parent[v] = u;\n          minCap[v] = minCap[u] < cap ? minCap[u] : cap;\n          if (v == sink) {\n            // Augment path and update residual graph\n            maxFlow += minCap[sink];\n            int cur = sink;\n            while (cur != source) {\n              int prev = parent[cur];\n              for (var edge in graph[prev]) {\n                if (edge[0] == cur) {\n                  edge[1] -= minCap[sink];\n                  int revIndex = edge[2];\n                  graph[cur][revIndex][1] += minCap[sink];\n                  break;\n                }\n              }\n              cur = prev;\n            }\n            queue = [];\n            break;\n          }\n          queue.add(v);\n        }\n      }\n    }\n    if (parent[sink] == -1) break; // No more augmenting paths\n  }\n\n  print('Maximum flow: $maxFlow');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008aaa7 <+1099>:\tmov    rdx,QWORD PTR [rbp-0x58]\n   0x000000000008aaab <+1103>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008aaaf <+1107>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000008aab3 <+1111>:\tlea    r13,[rdx+rbx*8+0x17]\n   0x000000000008aab8 <+1116>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008aabc <+1120>:\ttest   al,0x1\n   0x000000000008aabe <+1122>:\tje     0x8aad7 <main+1147>\n   0x000000000008aac0 <+1124>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008aac4 <+1128>:\tshr    r11d,0x2\n   0x000000000008aac8 <+1132>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008aacc <+1136>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008aad0 <+1140>:\tje     0x8aad7 <main+1147>\n   0x000000000008aad2 <+1142>:\tcall   0x8378c <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008aad7 <+1147>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008aadb <+1151>:\tadd    rax,0x1\n   0x000000000008aadf <+1155>:\tadd    rbx,0x1\n   0x000000000008aae3 <+1159>:\tmov    rsi,rax\n   0x000000000008aae6 <+1162>:\tmov    rcx,rbx\n   0x000000000008aae9 <+1165>:\tmov    r8,QWORD PTR [rbp-0x18]\n   0x000000000008aaed <+1169>:\tmov    r10,QWORD PTR [rbp-0x60]\n   0x000000000008aaf1 <+1173>:\tmov    r9,QWORD PTR [rbp-0x68]\n   0x000000000008aaf5 <+1177>:\tmov    r13,QWORD PTR [rbp-0x48]\n   0x000000000008aaf9 <+1181>:\tmov    rbx,QWORD PTR [rbp-0x58]\n   0x000000000008aafd <+1185>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008ab01 <+1189>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008ab05 <+1193>:\tmov    r12,QWORD PTR [rbp-0x50]\n   0x000000000008ab09 <+1197>:\tjmp    0x8aa5d <main+1025>\n   0x000000000008ab0e <+1202>:\tmov    rax,QWORD PTR [rbp-0x68]\n   0x000000000008ab12 <+1206>:\tmov    rdi,rax\n   0x000000000008ab15 <+1209>:\tmov    rsi,QWORD PTR [rbp-0x48]\n   0x000000000008ab19 <+1213>:\tcall   0x598f8 <List.length=>\n\n29\tin dart:core-patch/growable_array.dart\n30\tin dart:core-patch/growable_array.dart\n31\tin dart:core-patch/growable_array.dart\n32\tin dart:core-patch/growable_array.dart\n33\tin dart:core-patch/growable_array.dart\n34\tin dart:core-patch/growable_array.dart\n35\tin dart:core-patch/growable_array.dart\n36\tin dart:core-patch/growable_array.dart\n37\tin dart:core-patch/growable_array.dart\n38\tin dart:core-patch/growable_array.dart\n39\tin dart:core-patch/growable_array.dart\n40\tin dart:core-patch/growable_array.dart\n41\tin dart:core-patch/growable_array.dart\n42\tin dart:core-patch/growable_array.dart\n43\tin dart:core-patch/growable_array.dart\n44\tin dart:core-patch/growable_array.dart\n45\tin dart:core-patch/growable_array.dart\n46\tin dart:core-patch/growable_array.dart\n47\tin dart:core-patch/growable_array.dart\n48\tin dart:core-patch/growable_array.dart\n49\tin dart:core-patch/growable_array.dart\n50\tin dart:core-patch/growable_array.dart\n51\tin dart:core-patch/growable_array.dart\n52\tin dart:core-patch/growable_array.dart\n53\tin dart:core-patch/growable_array.dart\n54\tin dart:core-patch/growable_array.dart\n55\tin dart:core-patch/growable_array.dart\n56\tin dart:core-patch/growable_array.dart\n57\tin dart:core-patch/growable_array.dart\n58\tin dart:core-patch/growable_array.dart\n59\tin dart:core-patch/growable_array.dart\n60\tin dart:core-patch/growable_array.dart\n61\tin dart:core-patch/growable_array.dart\n62\tin dart:core-patch/growable_array.dart\n63\tin dart:core-patch/growable_array.dart\n64\tin dart:core-patch/growable_array.dart\n65\tin dart:core-patch/growable_array.dart\n66\tin dart:core-patch/growable_array.dart\n67\tin dart:core-patch/growable_array.dart\n68\tin dart:core-patch/growable_array.dart\n69\tin dart:core-patch/growable_array.dart\n70\tin dart:core-patch/growable_array.dart\n71\tin dart:core-patch/growable_array.dart\n72\tin dart:core-patch/growable_array.dart\n73\tin dart:core-patch/growable_array.dart\n74\tin dart:core-patch/growable_array.dart\n75\tin dart:core-patch/growable_array.dart\n76\tin dart:core-patch/growable_array.dart\n77\tin dart:core-patch/growable_array.dart\n78\tin dart:core-patch/growable_array.dart\n79\tin dart:core-patch/growable_array.dart\n80\tin dart:core-patch/growable_array.dart\n81\tin dart:core-patch/growable_array.dart\n82\tin dart:core-patch/growable_array.dart\n83\tin dart:core-patch/growable_array.dart\n84\tin dart:core-patch/growable_array.dart\n85\tin dart:core-patch/growable_array.dart\n86\tin dart:core-patch/growable_array.dart\n87\tin dart:core-patch/growable_array.dart\n88\tin dart:core-patch/growable_array.dart\n89\tin dart:core-patch/growable_array.dart\n90\tin dart:core-patch/growable_array.dart\n91\tin dart:core-patch/growable_array.dart\n92\tin dart:core-patch/growable_array.dart\n93\tin dart:core-patch/growable_array.dart\n94\tin dart:core-patch/growable_array.dart\n95\tin dart:core-patch/growable_array.dart\n96\tin dart:core-patch/growable_array.dart\n97\tin dart:core-patch/growable_array.dart\n98\tin dart:core-patch/growable_array.dart\n99\tin dart:core-patch/growable_array.dart\n100\tin dart:core-patch/growable_array.dart\n101\tin dart:core-patch/growable_array.dart\n102\tin dart:core-patch/growable_array.dart\n103\tin dart:core-patch/growable_array.dart\n104\tin dart:core-patch/growable_array.dart\n105\tin dart:core-patch/growable_array.dart\n106\tin dart:core-patch/growable_array.dart\n107\tin dart:core-patch/growable_array.dart\n108\tin dart:core-patch/growable_array.dart\n109\tin dart:core-patch/growable_array.dart\n110\tin dart:core-patch/growable_array.dart\n111\tin dart:core-patch/growable_array.dart\n112\tin dart:core-patch/growable_array.dart\n113\tin dart:core-patch/growable_array.dart\n114\tin dart:core-patch/growable_array.dart\n115\tin dart:core-patch/growable_array.dart\n116\tin dart:core-patch/growable_array.dart\n117\tin dart:core-patch/growable_array.dart\n118\tin dart:core-patch/growable_array.dart\n119\tin dart:core-patch/growable_array.dart\n120\tin dart:core-patch/growable_array.dart\n121\tin dart:core-patch/growable_array.dart\n122\tin dart:core-patch/growable_array.dart\n123\tin dart:core-patch/growable_array.dart\n124\tin dart:core-patch/growable_array.dart\n125\tin dart:core-patch/growable_array.dart\n126\tin dart:core-patch/growable_array.dart\n127\tin dart:core-patch/growable_array.dart\n128\tin dart:core-patch/growable_array.dart\n129\tin dart:core-patch/growable_array.dart\n130\tin dart:core-patch/growable_array.dart\n131\tin dart:core-patch/growable_array.dart\n132\tin dart:core-patch/growable_array.dart\n133\tin dart:core-patch/growable_array.dart\n134\tin dart:core-patch/growable_array.dart\n   0x000000000008a65c <+0>:\tpush   rbp\n   0x000000000008a65d <+1>:\tmov    rbp,rsp\n   0x000000000008a660 <+4>:\tsub    rsp,0x98\n   0x000000000008a667 <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a66b <+15>:\tjbe    0x8b154 <main+2808>\n   0x000000000008a671 <+21>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a678 <+28>:\tmov    esi,0x6\n   0x000000000008a67d <+33>:\tcall   0x52e38 <new _GrowableList>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008b15b <+2815>:\tjmp    0x8a671 <main+21>\n   0x000000000008b160 <+2820>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b167 <+2827>:\tjmp    0x8a696 <main+58>\n   0x000000000008b16c <+2832>:\tcall   0x856b8 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n136\tin dart:core-patch/growable_array.dart\n137\tin dart:core-patch/growable_array.dart\n138\tin dart:core-patch/growable_array.dart\n139\tin dart:core-patch/growable_array.dart\n140\tin dart:core-patch/growable_array.dart\n141\tin dart:core-patch/growable_array.dart\n142\tin dart:core-patch/growable_array.dart\n143\tin dart:core-patch/growable_array.dart\n144\tin dart:core-patch/growable_array.dart\n145\tin dart:core-patch/growable_array.dart\n146\tin dart:core-patch/growable_array.dart\n147\tin dart:core-patch/growable_array.dart\n148\tin dart:core-patch/growable_array.dart\n149\tin dart:core-patch/growable_array.dart\n150\tin dart:core-patch/growable_array.dart\n151\tin dart:core-patch/growable_array.dart\n152\tin dart:core-patch/growable_array.dart\n153\tin dart:core-patch/growable_array.dart\n154\tin dart:core-patch/growable_array.dart\n155\tin dart:core-patch/growable_array.dart\n156\tin dart:core-patch/growable_array.dart\n157\tin dart:core-patch/growable_array.dart\n158\tin dart:core-patch/growable_array.dart\n159\tin dart:core-patch/growable_array.dart\n160\tin dart:core-patch/growable_array.dart\n161\tin dart:core-patch/growable_array.dart\n162\tin dart:core-patch/growable_array.dart\n163\tin dart:core-patch/growable_array.dart\n164\tin dart:core-patch/growable_array.dart\n165\tin dart:core-patch/growable_array.dart\n166\tin dart:core-patch/growable_array.dart\n167\tin dart:core-patch/growable_array.dart\n168\tin dart:core-patch/growable_array.dart\n169\tin dart:core-patch/growable_array.dart\n170\tin dart:core-patch/growable_array.dart\n171\tin dart:core-patch/growable_array.dart\n172\tin dart:core-patch/growable_array.dart\n173\tin dart:core-patch/growable_array.dart\n174\tin dart:core-patch/growable_array.dart\n175\tin dart:core-patch/growable_array.dart\n176\tin dart:core-patch/growable_array.dart\n177\tin dart:core-patch/growable_array.dart\n178\tin dart:core-patch/growable_array.dart\n179\tin dart:core-patch/growable_array.dart\n180\tin dart:core-patch/growable_array.dart\n181\tin dart:core-patch/growable_array.dart\n182\tin dart:core-patch/growable_array.dart\n183\tin dart:core-patch/growable_array.dart\n184\tin dart:core-patch/growable_array.dart\n185\tin dart:core-patch/growable_array.dart\n186\tin dart:core-patch/growable_array.dart\n187\tin dart:core-patch/growable_array.dart\n188\tin dart:core-patch/growable_array.dart\n189\tin dart:core-patch/growable_array.dart\n190\tin dart:core-patch/growable_array.dart\n191\tin dart:core-patch/growable_array.dart\n192\tin dart:core-patch/growable_array.dart\n193\tin dart:core-patch/growable_array.dart\n194\tin dart:core-patch/growable_array.dart\n195\tin dart:core-patch/growable_array.dart\n196\tin dart:core-patch/growable_array.dart\n197\tin dart:core-patch/growable_array.dart\n198\tin dart:core-patch/growable_array.dart\n199\tin dart:core-patch/growable_array.dart\n200\tin dart:core-patch/growable_array.dart\n201\tin dart:core-patch/growable_array.dart\n202\tin dart:core-patch/growable_array.dart\n203\tin dart:core-patch/growable_array.dart\n204\tin dart:core-patch/growable_array.dart\n205\tin dart:core-patch/growable_array.dart\n206\tin dart:core-patch/growable_array.dart\n207\tin dart:core-patch/growable_array.dart\n208\tin dart:core-patch/growable_array.dart\n209\tin dart:core-patch/growable_array.dart\n210\tin dart:core-patch/growable_array.dart\n211\tin dart:core-patch/growable_array.dart\n212\tin dart:core-patch/growable_array.dart\n213\tin dart:core-patch/growable_array.dart\n214\tin dart:core-patch/growable_array.dart\n215\tin dart:core-patch/growable_array.dart\n216\tin dart:core-patch/growable_array.dart\n217\tin dart:core-patch/growable_array.dart\n218\tin dart:core-patch/growable_array.dart\n219\tin dart:core-patch/growable_array.dart\n220\tin dart:core-patch/growable_array.dart\n221\tin dart:core-patch/growable_array.dart\n222\tin dart:core-patch/growable_array.dart\n223\tin dart:core-patch/growable_array.dart\n224\tin dart:core-patch/growable_array.dart\n225\tin dart:core-patch/growable_array.dart\n226\tin dart:core-patch/growable_array.dart\n227\tin dart:core-patch/growable_array.dart\n228\tin dart:core-patch/growable_array.dart\n229\tin dart:core-patch/growable_array.dart\n230\tin dart:core-patch/growable_array.dart\n231\tin dart:core-patch/growable_array.dart\n232\tin dart:core-patch/growable_array.dart\n233\tin dart:core-patch/growable_array.dart\n234\tin dart:core-patch/growable_array.dart\n235\tin dart:core-patch/growable_array.dart\n236\tin dart:core-patch/growable_array.dart\n237\tin dart:core-patch/growable_array.dart\n238\tin dart:core-patch/growable_array.dart\n239\tin dart:core-patch/growable_array.dart\n240\tin dart:core-patch/growable_array.dart\n241\tin dart:core-patch/growable_array.dart\n242\tin dart:core-patch/growable_array.dart\n243\tin dart:core-patch/growable_array.dart\n244\tin dart:core-patch/growable_array.dart\n245\tin dart:core-patch/growable_array.dart\n246\tin dart:core-patch/growable_array.dart\n247\tin dart:core-patch/growable_array.dart\n248\tin dart:core-patch/growable_array.dart\n249\tin dart:core-patch/growable_array.dart\n250\tin dart:core-patch/growable_array.dart\n251\tin dart:core-patch/growable_array.dart\n252\tin dart:core-patch/growable_array.dart\n253\tin dart:core-patch/growable_array.dart\n254\tin dart:core-patch/growable_array.dart\n255\tin dart:core-patch/growable_array.dart\n256\tin dart:core-patch/growable_array.dart\n257\tin dart:core-patch/growable_array.dart\n258\tin dart:core-patch/growable_array.dart\n259\tin dart:core-patch/growable_array.dart\n260\tin dart:core-patch/growable_array.dart\n261\tin dart:core-patch/growable_array.dart\n262\tin dart:core-patch/growable_array.dart\n263\tin dart:core-patch/growable_array.dart\n264\tin dart:core-patch/growable_array.dart\n265\tin dart:core-patch/growable_array.dart\n266\tin dart:core-patch/growable_array.dart\n267\tin dart:core-patch/growable_array.dart\n268\tin dart:core-patch/growable_array.dart\n269\tin dart:core-patch/growable_array.dart\n270\tin dart:core-patch/growable_array.dart\n271\tin dart:core-patch/growable_array.dart\n272\tin dart:core-patch/growable_array.dart\n273\tin dart:core-patch/growable_array.dart\n274\tin dart:core-patch/growable_array.dart\n275\tin dart:core-patch/growable_array.dart\n276\tin dart:core-patch/growable_array.dart\n277\tin dart:core-patch/growable_array.dart\n278\tin dart:core-patch/growable_array.dart\n279\tin dart:core-patch/growable_array.dart\n280\tin dart:core-patch/growable_array.dart\n281\tin dart:core-patch/growable_array.dart\n   0x000000000008acf7 <+1691>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008acfb <+1695>:\tmov    rdx,r9\n   0x000000000008acfe <+1698>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008ad03 <+1703>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008ad07 <+1707>:\ttest   al,0x1\n   0x000000000008ad09 <+1709>:\tje     0x8ad22 <main+1734>\n   0x000000000008ad0b <+1711>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008ad0f <+1715>:\tshr    r11d,0x2\n   0x000000000008ad13 <+1719>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008ad17 <+1723>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008ad1b <+1727>:\tje     0x8ad22 <main+1734>\n   0x000000000008ad1d <+1729>:\tcall   0x8378c <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008ad22 <+1734>:\tcmp    rsi,0x5\n   0x000000000008ad26 <+1738>:\tje     0x8add0 <main+1908>\n   0x000000000008ad2c <+1744>:\tmov    rbx,QWORD PTR [rbp-0x68]\n   0x000000000008ad30 <+1748>:\tmov    rax,QWORD PTR [rbp-0x58]\n   0x000000000008ad34 <+1752>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008ad38 <+1756>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008ad3c <+1760>:\tcmp    rdx,QWORD PTR [r14+0x70]\n   0x000000000008ad40 <+1764>:\tje     0x8ad5b <main+1791>\n   0x000000000008ad46 <+1770>:\tmov    rsi,QWORD PTR [rdx+0x27]\n   0x000000000008ad4a <+1774>:\tmov    rbx,QWORD PTR [r15+0x16f]\n   0x000000000008ad51 <+1781>:\tmov    r9,QWORD PTR [r15+0x7e7]\n   0x000000000008ad58 <+1788>:\tcall   QWORD PTR [rsi+0x7]\n\n282\tin dart:core-patch/growable_array.dart\n283\tin dart:core-patch/growable_array.dart\n284\tin dart:core-patch/growable_array.dart\n   0x000000000008ad5b <+1791>:\tmov    rax,QWORD PTR [rbp-0x68]\n   0x000000000008ad5f <+1795>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008ad63 <+1799>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008ad67 <+1803>:\tmov    rbx,QWORD PTR [rdx+0xf]\n   0x000000000008ad6b <+1807>:\tsar    rcx,1\n   0x000000000008ad6e <+1810>:\tmov    QWORD PTR [rbp-0x40],rcx\n   0x000000000008ad72 <+1814>:\tsar    rbx,1\n   0x000000000008ad75 <+1817>:\tcmp    rcx,rbx\n   0x000000000008ad78 <+1820>:\tjne    0x8ad86 <main+1834>\n   0x000000000008ad7e <+1826>:\tmov    rdi,rax\n   0x000000000008ad81 <+1829>:\tcall   0x53250 <List._growToNextCapacity>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n   0x000000000008a986 <+810>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a98a <+814>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a991 <+821>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a995 <+825>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a999 <+829>:\tmov    r10d,0x2\n   0x000000000008a99f <+835>:\tcall   0x85174 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a9a4 <+840>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a9a8 <+844>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a9b0 <+852>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a9b7 <+859>:\tcall   0x84234 <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_64.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Initialize men and women with their preferences\n  final menPrefs = {\n    'John': ['Alice', 'Beth', 'Claire'],\n    'Mike': ['Beth', 'Alice', 'Claire'],\n    'Sam': ['Alice', 'Claire', 'Beth'],\n  };\n\n  final womenPrefs = {\n    'Alice': ['Mike', 'John', 'Sam'],\n    'Beth': ['John', 'Sam', 'Mike'],\n    'Claire': ['John', 'Mike', 'Sam'],\n  };\n\n  // Initialize all men and women as free\n  final engagements = <String, String?>{};\n  final nextProposalIndex = <String, int>{};\n  for (final man in menPrefs.keys) {\n    engagements[man] = null;\n    nextProposalIndex[man] = 0;\n  }\n\n  // While there exists a free man who hasn't proposed to every woman\n  String? freeMan;\n  do {\n    freeMan = engagements.entries\n        .firstWhere(\n          (entry) => entry.value == null && nextProposalIndex[entry.key]! < womenPrefs.length,\n          orElse: () => const MapEntry('', null),\n        )\n        .key;\n    if (freeMan.isEmpty) break;\n\n    final woman = menPrefs[freeMan]![nextProposalIndex[freeMan]!];\n    nextProposalIndex[freeMan] = nextProposalIndex[freeMan]! + 1;\n\n    if (!engagements.containsValue(woman)) {\n      // Woman is free, engage with current man\n      engagements[freeMan] = woman;\n    } else {\n      // Woman is engaged, check if she prefers new man\n      final currentMan = engagements.entries.firstWhere((entry) => entry.value == woman).key;\n      final womanPrefList = womenPrefs[woman]!;\n      if (womanPrefList.indexOf(freeMan) < womanPrefList.indexOf(currentMan)) {\n        engagements[currentMan] = null;\n        engagements[freeMan] = woman;\n      }\n    }\n  } while (freeMan.isNotEmpty);\n\n  // Print results\n  print('Stable Matches:');\n  engagements.forEach((man, woman) => print('$man is engaged to $woman'));\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008b207 <+71>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008b20b <+75>:\tmov    QWORD PTR [rax+0x17],rcx\n   0x000000000008b20f <+79>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008b217 <+87>:\tmov    rdx,QWORD PTR [rbp+0x10]\n   0x000000000008b21b <+91>:\tmov    QWORD PTR [rax+0xf],rdx\n   0x000000000008b21f <+95>:\tmov    rdx,QWORD PTR [rcx+0x7]\n   0x000000000008b223 <+99>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008b227 <+103>:\tmov    rsp,rbp\n   0x000000000008b22a <+106>:\tpop    rbp\n   0x000000000008b22b <+107>:\tret\n   0x000000000008b22c <+108>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008b233 <+115>:\tjmp    0x8b1d2 <new ByteData+18>\n   0x000000000008b235:\tint3\n   0x000000000008b236:\tint3\n   0x000000000008b237:\tint3\n   0x000000000008b238 <+0>:\tmov    r8d,0xa831c\n   0x000000000008b23e <+6>:\tjmp    0x84dcc <stub _iso_stub_AllocateObjectStub>\n   0x000000000008b243:\tint3\n   0x000000000008b244 <+0>:\tpush   rbp\n   0x000000000008b245 <+1>:\tmov    rbp,rsp\n   0x000000000008b248 <+4>:\tsub    rsp,0x78\n   0x000000000008b24c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008b250 <+12>:\tjbe    0x8bd05 <main+2753>\n   0x000000000008b256 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b25a <+22>:\tmov    r10d,0xc\n   0x000000000008b260 <+28>:\tcall   0x85d5c <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_65.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example set of points (x, y)\n  List<Point> points = [\n    Point(0, 3),\n    Point(1, 1),\n    Point(2, 2),\n    Point(4, 4),\n    Point(0, 0),\n    Point(1, 2),\n    Point(3, 1),\n    Point(3, 3),\n  ];\n\n  // Find the convex hull using Graham's scan\n  List<Point> hull = grahamScan(points);\n\n  // Print the convex hull points\n  print(\"Convex Hull Points:\");\n  for (Point p in hull) {\n    print(\"(${p.x}, ${p.y})\");\n  }\n}\n\n// Helper class to represent a point\nclass Point {\n  final double x;\n  final double y;\n\n  Point(this.x, this.y);\n}\n\n// Computes the convex hull using Graham's scan algorithm\nList<Point> grahamScan(List<Point> points) {\n  if (points.length < 3) return points;\n\n  // Find the point with the lowest y-coordinate (and leftmost if tie)\n  Point pivot = points.reduce((curr, next) => \n      (curr.y < next.y) ? curr : \n      (curr.y == next.y && curr.x < next.x) ? curr : next);\n\n  // Sort points by polar angle with pivot\n  points.sort((a, b) {\n    double orientation = crossProductOrientation(pivot, a, b);\n    if (orientation == 0) {\n      return distanceSquared(pivot, a).compareTo(distanceSquared(pivot, b));\n    }\n    return orientation > 0 ? -1 : 1;\n  });\n\n  // Build the hull using a stack\n  List<Point> hull = [];\n  for (Point point in points) {\n    while (hull.length >= 2 && \n           crossProductOrientation(hull[hull.length - 2], hull.last, point) <= 0) {\n      hull.removeLast();\n    }\n    hull.add(point);\n  }\n\n  return hull;\n}\n\n// Computes the cross product orientation for points (p, q, r)\n// Returns positive for counter-clockwise, negative for clockwise, zero for collinear\ndouble crossProductOrientation(Point p, Point q, Point r) {\n  return (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x);\n}\n\n// Computes the squared distance between two points (avoiding sqrt for efficiency)\ndouble distanceSquared(Point a, Point b) {\n  double dx = a.x - b.x;\n  double dy = a.y - b.y;\n  return dx * dx + dy * dy;\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a5de <+686>:\tint3\n   0x000000000008a5df <+687>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a5e6 <+694>:\tjmp    0x8a342 <main+18>\n   0x000000000008a5eb <+699>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a5f2 <+706>:\tjmp    0x8a4d9 <main+425>\n   0x000000000008a5f7 <+711>:\tsub    rsp,0x10\n   0x000000000008a5fb <+715>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a5ff <+719>:\tpush   rcx\n   0x000000000008a600 <+720>:\tpush   rax\n   0x000000000008a601 <+721>:\tcall   0x84dc8 <stub _iso_stub_AllocateDoubleStub>\n   0x000000000008a606 <+726>:\tmov    rdx,rax\n   0x000000000008a609 <+729>:\tpop    rax\n   0x000000000008a60a <+730>:\tpop    rcx\n   0x000000000008a60b <+731>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008a60f <+735>:\tadd    rsp,0x10\n   0x000000000008a613 <+739>:\tjmp    0x8a54c <main+540>\n   0x000000000008a618 <+744>:\tsub    rsp,0x10\n   0x000000000008a61c <+748>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a620 <+752>:\tpush   rax\n   0x000000000008a621 <+753>:\tcall   0x84dc8 <stub _iso_stub_AllocateDoubleStub>\n   0x000000000008a626 <+758>:\tmov    rcx,rax\n   0x000000000008a629 <+761>:\tpop    rax\n   0x000000000008a62a <+762>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008a62e <+766>:\tadd    rsp,0x10\n   0x000000000008a632 <+770>:\tjmp    0x8a587 <main+599>\n   0x000000000008a637:\tint3\n   0x000000000008a638 <+0>:\tpush   rbp\n   0x000000000008a639 <+1>:\tmov    rbp,rsp\n   0x000000000008a63c <+4>:\tsub    rsp,0x18\n   0x000000000008a640 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a644 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a648 <+16>:\tjbe    0x8a692 <printToConsole+90>\n   0x000000000008a64e <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a652 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a659 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a65d <+37>:\tjne    0x8a66f <printToConsole+55>\n   0x000000000008a663 <+43>:\tmov    rdx,QWORD PTR [r15+0x7ff]\n   0x000000000008a66a <+50>:\tcall   0x833a4 <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Example set of points (x, y)\n4\t  List<Point> points = [\n5\t    Point(0, 3),\n   0x000000000008a330 <+0>:\tpush   rbp\n   0x000000000008a331 <+1>:\tmov    rbp,rsp\n   0x000000000008a334 <+4>:\tsub    rsp,0x60\n   0x000000000008a338 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a33c <+12>:\tjbe    0x8a5df <main+687>\n   0x000000000008a342 <+18>:\tcall   0x8c8b4 <new Point>\n\n6\t    Point(1, 1),\n   0x000000000008a347 <+23>:\txorps  xmm0,xmm0\n   0x000000000008a34a <+26>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a34e <+30>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a353 <+35>:\tmovsd  xmm1,QWORD PTR [r15+0x7b7]\n   0x000000000008a35c <+44>:\tmovsd  QWORD PTR [rax+0xf],xmm1\n   0x000000000008a361 <+49>:\tcall   0x8c8b4 <new Point>\n\n7\t    Point(2, 2),\n   0x000000000008a366 <+54>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a36f <+63>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a373 <+67>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a378 <+72>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a37d <+77>:\tcall   0x8c8b4 <new Point>\n\n8\t    Point(4, 4),\n   0x000000000008a382 <+82>:\tmovsd  xmm0,QWORD PTR [r15+0x7c7]\n   0x000000000008a38b <+91>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a38f <+95>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a394 <+100>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a399 <+105>:\tcall   0x8c8b4 <new Point>\n\n9\t    Point(0, 0),\n   0x000000000008a39e <+110>:\tmovsd  xmm0,QWORD PTR [r15+0x7cf]\n   0x000000000008a3a7 <+119>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a3ab <+123>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a3b0 <+128>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a3b5 <+133>:\tcall   0x8c8b4 <new Point>\n\n10\t    Point(1, 2),\n   0x000000000008a3ba <+138>:\txorps  xmm0,xmm0\n   0x000000000008a3bd <+141>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a3c1 <+145>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a3c6 <+150>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a3cb <+155>:\tcall   0x8c8b4 <new Point>\n\n11\t    Point(3, 1),\n   0x000000000008a3d0 <+160>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a3d9 <+169>:\tmov    QWORD PTR [rbp-0x30],rax\n   0x000000000008a3dd <+173>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a3e2 <+178>:\tmovsd  xmm1,QWORD PTR [r15+0x7c7]\n   0x000000000008a3eb <+187>:\tmovsd  QWORD PTR [rax+0xf],xmm1\n   0x000000000008a3f0 <+192>:\tcall   0x8c8b4 <new Point>\n\n12\t    Point(3, 3),\n   0x000000000008a3f5 <+197>:\tmovsd  xmm0,QWORD PTR [r15+0x7b7]\n   0x000000000008a3fe <+206>:\tmov    QWORD PTR [rbp-0x38],rax\n   0x000000000008a402 <+210>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a407 <+215>:\tmovsd  xmm1,QWORD PTR [r15+0x7bf]\n   0x000000000008a410 <+224>:\tmovsd  QWORD PTR [rax+0xf],xmm1\n   0x000000000008a415 <+229>:\tcall   0x8c8b4 <new Point>\n\n13\t  ];\n14\t\n15\t  // Find the convex hull using Graham's scan\n16\t  List<Point> hull = grahamScan(points);\n   0x000000000008a493 <+355>:\tmov    rcx,rax\n   0x000000000008a496 <+358>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a49a <+362>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a49e <+366>:\tmov    QWORD PTR [rcx+0xf],0x10\n   0x000000000008a4a6 <+374>:\tmov    rdi,rcx\n   0x000000000008a4a9 <+377>:\tcall   0x8a69c <grahamScan>\n\n17\t\n18\t  // Print the convex hull points\n19\t  print(\"Convex Hull Points:\");\n20\t  for (Point p in hull) {\n21\t    print(\"(${p.x}, ${p.y})\");\n   0x000000000008a516 <+486>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a51d <+493>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a521 <+497>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a525 <+501>:\tmovsd  xmm0,QWORD PTR [rcx+0x7]\n   0x000000000008a52a <+506>:\tmov    rdx,QWORD PTR [r14+0x48]\n   0x000000000008a52e <+510>:\tadd    rdx,0x10\n   0x000000000008a532 <+514>:\tcmp    rdx,QWORD PTR [r14+0x50]\n   0x000000000008a536 <+518>:\tjae    0x8a5f7 <main+711>\n   0x000000000008a53c <+524>:\tmov    QWORD PTR [r14+0x48],rdx\n   0x000000000008a540 <+528>:\tsub    rdx,0xf\n   0x000000000008a544 <+532>:\tmov    QWORD PTR [rdx-0x1],0x3e15c\n   0x000000000008a54c <+540>:\tmovsd  QWORD PTR [rdx+0x7],xmm0\n   0x000000000008a551 <+545>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a555 <+549>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a55c <+556>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a560 <+560>:\tmovsd  xmm0,QWORD PTR [rcx+0xf]\n   0x000000000008a565 <+565>:\tmov    rcx,QWORD PTR [r14+0x48]\n   0x000000000008a569 <+569>:\tadd    rcx,0x10\n   0x000000000008a56d <+573>:\tcmp    rcx,QWORD PTR [r14+0x50]\n   0x000000000008a571 <+577>:\tjae    0x8a618 <main+744>\n   0x000000000008a577 <+583>:\tmov    QWORD PTR [r14+0x48],rcx\n   0x000000000008a57b <+587>:\tsub    rcx,0xf\n   0x000000000008a57f <+591>:\tmov    QWORD PTR [rcx-0x1],0x3e15c\n   0x000000000008a587 <+599>:\tmovsd  QWORD PTR [rcx+0x7],xmm0\n   0x000000000008a58c <+604>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a590 <+608>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a597 <+615>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a59b <+619>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a59f <+623>:\tcall   0x587bc <_StringBase._interpolate>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_67.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define two line segments: segment1 from (x1, y1) to (x2, y2) and segment2 from (x3, y3) to (x4, y4)\n  final segment1 = [Point(1.0, 1.0), Point(4.0, 4.0)];\n  final segment2 = [Point(1.0, 4.0), Point(4.0, 1.0)];\n\n  // Check if the segments intersect\n  final intersects = doSegmentsIntersect(segment1[0], segment1[1], segment2[0], segment2[1]);\n  \n  // Print the result\n  print('Segment 1: (${segment1[0].x}, ${segment1[0].y}) to (${segment1[1].x}, ${segment1[1].y})');\n  print('Segment 2: (${segment2[0].x}, ${segment2[0].y}) to (${segment2[1].x}, ${segment2[1].y})');\n  print('Intersect? $intersects');\n}\n\n// Helper class to represent a point\nclass Point {\n  final double x;\n  final double y;\n  const Point(this.x, this.y);\n}\n\n// Function to compute the cross product of vectors (p1->p2) and (p1->p3)\ndouble _crossProduct(Point p1, Point p2, Point p3) {\n  return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n}\n\n// Function to check if point p lies on segment (a->b)\nbool _onSegment(Point a, Point b, Point p) {\n  return p.x <= max(a.x, b.x) &&\n      p.x >= min(a.x, b.x) &&\n      p.y <= max(a.y, b.y) &&\n      p.y >= min(a.y, b.y);\n}\n\n// Utility functions for min and max of doubles\ndouble max(double a, double b) => a > b ? a : b;\ndouble min(double a, double b) => a < b ? a : b;\n\n// Main intersection check using the orientation method\nbool doSegmentsIntersect(Point p1, Point q1, Point p2, Point q2) {\n  final double o1 = _crossProduct(p1, q1, p2);\n  final double o2 = _crossProduct(p1, q1, q2);\n  final double o3 = _crossProduct(p2, q2, p1);\n  final double o4 = _crossProduct(p2, q2, q1);\n\n  // General case: segments intersect if orientations are different\n  if ((o1 * o2 < 0) && (o3 * o4 < 0)) return true;\n\n  // Check for collinear cases\n  if (o1 == 0 && _onSegment(p1, q1, p2)) return true;\n  if (o2 == 0 && _onSegment(p1, q1, q2)) return true;\n  if (o3 == 0 && _onSegment(p2, q2, p1)) return true;\n  if (o4 == 0 && _onSegment(p2, q2, q1)) return true;\n\n  return false;\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a3d1 <+481>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a3d5 <+485>:\tmov    rsp,rbp\n   0x000000000008a3d8 <+488>:\tpop    rbp\n   0x000000000008a3d9 <+489>:\tret\n   0x000000000008a3da <+490>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a3e1 <+497>:\tjmp    0x8a202 <main+18>\n   0x000000000008a3e6:\tint3\n   0x000000000008a3e7:\tint3\n\n2\tvoid main() {\n3\t  // Define two line segments: segment1 from (x1, y1) to (x2, y2) and segment2 from (x3, y3) to (x4, y4)\n4\t  final segment1 = [Point(1.0, 1.0), Point(4.0, 4.0)];\n   0x000000000008a1f0 <+0>:\tpush   rbp\n   0x000000000008a1f1 <+1>:\tmov    rbp,rsp\n   0x000000000008a1f4 <+4>:\tsub    rsp,0x20\n   0x000000000008a1f8 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1fc <+12>:\tjbe    0x8a3da <main+490>\n   0x000000000008a202 <+18>:\tcall   0x8a77c <new Point>\n   0x000000000008a207 <+23>:\tmovsd  xmm0,QWORD PTR [r15+0x7b7]\n   0x000000000008a210 <+32>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a214 <+36>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a219 <+41>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a21e <+46>:\tcall   0x8a77c <new Point>\n\n5\t  final segment2 = [Point(1.0, 4.0), Point(4.0, 1.0)];\n   0x000000000008a223 <+51>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a22c <+60>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a230 <+64>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a235 <+69>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a23a <+74>:\tcall   0x8a77c <new Point>\n   0x000000000008a23f <+79>:\tmovsd  xmm0,QWORD PTR [r15+0x7b7]\n   0x000000000008a248 <+88>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a24c <+92>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a251 <+97>:\tmovsd  xmm1,QWORD PTR [r15+0x7bf]\n   0x000000000008a25a <+106>:\tmovsd  QWORD PTR [rax+0xf],xmm1\n   0x000000000008a25f <+111>:\tcall   0x8a77c <new Point>\n\n6\t\n7\t  // Check if the segments intersect\n8\t  final intersects = doSegmentsIntersect(segment1[0], segment1[1], segment2[0], segment2[1]);\n   0x000000000008a264 <+116>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a26d <+125>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a272 <+130>:\tmovsd  xmm0,QWORD PTR [r15+0x7b7]\n   0x000000000008a27b <+139>:\tmovsd  QWORD PTR [rax+0xf],xmm0\n   0x000000000008a280 <+144>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a284 <+148>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a288 <+152>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a28c <+156>:\tmov    rbx,rax\n   0x000000000008a28f <+159>:\tcall   0x8a484 <doSegmentsIntersect>\n   0x000000000008a294 <+164>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a298 <+168>:\tmov    r10d,0x12\n   0x000000000008a29e <+174>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a2a2 <+178>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n\n9\t  \n10\t  // Print the result\n11\t  print('Segment 1: (${segment1[0].x}, ${segment1[0].y}) to (${segment1[1].x}, ${segment1[1].y})');\n   0x000000000008a2a7 <+183>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a2ae <+190>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2b2 <+194>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a2b9 <+201>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a2bd <+205>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a2c4 <+212>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a2c8 <+216>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a2cf <+223>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a2d3 <+227>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a2da <+234>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a2de <+238>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a2e5 <+245>:\tmov    QWORD PTR [rax+0x3f],r11\n   0x000000000008a2e9 <+249>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a2f0 <+256>:\tmov    QWORD PTR [rax+0x47],r11\n   0x000000000008a2f4 <+260>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a2fb <+267>:\tmov    QWORD PTR [rax+0x4f],r11\n   0x000000000008a2ff <+271>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a306 <+278>:\tmov    QWORD PTR [rax+0x57],r11\n   0x000000000008a30a <+282>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a30e <+286>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a313 <+291>:\tmov    rdi,rax\n   0x000000000008a316 <+294>:\tcall   0x8a3e8 <print>\n   0x000000000008a31b <+299>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a31f <+303>:\tmov    r10d,0x12\n   0x000000000008a325 <+309>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n\n12\t  print('Segment 2: (${segment2[0].x}, ${segment2[0].y}) to (${segment2[1].x}, ${segment2[1].y})');\n   0x000000000008a32a <+314>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a331 <+321>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a335 <+325>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a33c <+332>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a340 <+336>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a347 <+343>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a34b <+347>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a352 <+354>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a356 <+358>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a35d <+365>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a361 <+369>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a368 <+376>:\tmov    QWORD PTR [rax+0x3f],r11\n   0x000000000008a36c <+380>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a373 <+387>:\tmov    QWORD PTR [rax+0x47],r11\n   0x000000000008a377 <+391>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a37e <+398>:\tmov    QWORD PTR [rax+0x4f],r11\n   0x000000000008a382 <+402>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a389 <+409>:\tmov    QWORD PTR [rax+0x57],r11\n   0x000000000008a38d <+413>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a391 <+417>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a396 <+422>:\tmov    rdi,rax\n   0x000000000008a399 <+425>:\tcall   0x8a3e8 <print>\n   0x000000000008a39e <+430>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a3a2 <+434>:\tmov    r10d,0x4\n   0x000000000008a3a8 <+440>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n\n13\t  print('Intersect? $intersects');\n   0x000000000008a3ad <+445>:\tmov    r11,QWORD PTR [r15+0x7ff]\n   0x000000000008a3b4 <+452>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a3b8 <+456>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a3bc <+460>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a3c0 <+464>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a3c4 <+468>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a3c9 <+473>:\tmov    rdi,rax\n   0x000000000008a3cc <+476>:\tcall   0x8a3e8 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_68.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example polygon vertices (counter-clockwise order)\n  final List<List<double>> polygon = [\n    [0.0, 0.0],\n    [4.0, 0.0],\n    [5.0, 2.0],\n    [3.0, 5.0],\n    [1.0, 3.0],\n  ];\n\n  // Store triangulation results\n  final List<List<List<double>>> triangles = [];\n\n  // Ear clipping triangulation algorithm\n  List<List<double>> remainingVertices = List.from(polygon);\n  while (remainingVertices.length > 3) {\n    bool earFound = false;\n    for (int i = 0; i < remainingVertices.length; i++) {\n      final List<double> prev = remainingVertices[(i - 1 + remainingVertices.length) % remainingVertices.length];\n      final List<double> current = remainingVertices[i];\n      final List<double> next = remainingVertices[(i + 1) % remainingVertices.length];\n\n      if (_isEar(prev, current, next, remainingVertices)) {\n        triangles.add([prev, current, next]);\n        remainingVertices.removeAt(i);\n        earFound = true;\n        break;\n      }\n    }\n    if (!earFound) {\n      print(\"Error: No ear found - polygon may be self-intersecting or degenerate\");\n      return;\n    }\n  }\n  triangles.add(remainingVertices); // Add final triangle\n\n  // Print results\n  print(\"Original Polygon: $polygon\");\n  for (int i = 0; i < triangles.length; i++) {\n    print(\"Triangle ${i + 1}: ${triangles[i]}\");\n  }\n}\n\nbool _isEar(List<double> a, List<double> b, List<double> c, List<List<double>> polygon) {\n  if (!_isConvex(a, b, c)) return false;\n  for (final vertex in polygon) {\n    if (vertex == a || vertex == b || vertex == c) continue;\n    if (_pointInTriangle(vertex, a, b, c)) return false;\n  }\n  return true;\n}\n\nbool _isConvex(List<double> a, List<double> b, List<double> c) {\n  final cross = (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  return cross > 0; // Counter-clockwise check\n}\n\nbool _pointInTriangle(List<double> p, List<double> a, List<double> b, List<double> c) {\n  final double area = 0.5 * (-b[1] * c[0] + a[1] * (-b[0] + c[0]) + a[0] * (b[1] - c[1]) + b[0] * c[1]);\n  final double s = 1 / (2 * area) * (a[1] * c[0] - a[0] * c[1] + (c[1] - a[1]) * p[0] + (a[0] - c[0]) * p[1]);\n  final double t = 1 / (2 * area) * (a[0] * b[1] - a[1] * b[0] + (a[1] - b[1]) * p[0] + (b[0] - a[0]) * p[1]);\n  return s > 0 && t > 0 && (1 - s - t) > 0;\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a9a6 <+1614>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a9aa <+1618>:\tjmp    0x8a923 <main+1483>\n   0x000000000008a9af <+1623>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a9b3 <+1627>:\tmov    rsp,rbp\n   0x000000000008a9b6 <+1630>:\tpop    rbp\n   0x000000000008a9b7 <+1631>:\tret\n   0x000000000008a9b8 <+1632>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Example polygon vertices (counter-clockwise order)\n4\t  final List<List<double>> polygon = [\n   0x000000000008a3fc <+164>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a400 <+168>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a404 <+172>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a408 <+176>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a40c <+180>:\tmov    r9,rax\n   0x000000000008a40f <+183>:\tmov    rdi,QWORD PTR [r15+0x7ef]\n   0x000000000008a416 <+190>:\tcall   0x8bdbc <new _GrowableList._literal5>\n\n5\t    [0.0, 0.0],\n   0x000000000008a358 <+0>:\tpush   rbp\n   0x000000000008a359 <+1>:\tmov    rbp,rsp\n   0x000000000008a35c <+4>:\tsub    rsp,0x78\n   0x000000000008a360 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a364 <+12>:\tjbe    0x8a9b8 <main+1632>\n   0x000000000008a36a <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a371 <+25>:\tmov    rsi,QWORD PTR [r15+0x7bf]\n   0x000000000008a378 <+32>:\tmov    rdx,QWORD PTR [r15+0x7bf]\n   0x000000000008a37f <+39>:\tcall   0x8be40 <new _GrowableList._literal2>\n\n6\t    [4.0, 0.0],\n   0x000000000008a384 <+44>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a38b <+51>:\tmov    rsi,QWORD PTR [r15+0x7c7]\n   0x000000000008a392 <+58>:\tmov    rdx,QWORD PTR [r15+0x7bf]\n   0x000000000008a399 <+65>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a39d <+69>:\tcall   0x8be40 <new _GrowableList._literal2>\n\n7\t    [5.0, 2.0],\n   0x000000000008a3a2 <+74>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a3a9 <+81>:\tmov    rsi,QWORD PTR [r15+0x7cf]\n   0x000000000008a3b0 <+88>:\tmov    rdx,QWORD PTR [r15+0x7d7]\n   0x000000000008a3b7 <+95>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a3bb <+99>:\tcall   0x8be40 <new _GrowableList._literal2>\n\n8\t    [3.0, 5.0],\n   0x000000000008a3c0 <+104>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a3c7 <+111>:\tmov    rsi,QWORD PTR [r15+0x7df]\n   0x000000000008a3ce <+118>:\tmov    rdx,QWORD PTR [r15+0x7cf]\n   0x000000000008a3d5 <+125>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a3d9 <+129>:\tcall   0x8be40 <new _GrowableList._literal2>\n\n9\t    [1.0, 3.0],\n   0x000000000008a3de <+134>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a3e5 <+141>:\tmov    rsi,QWORD PTR [r15+0x7e7]\n   0x000000000008a3ec <+148>:\tmov    rdx,QWORD PTR [r15+0x7df]\n   0x000000000008a3f3 <+155>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a3f7 <+159>:\tcall   0x8be40 <new _GrowableList._literal2>\n\n10\t  ];\n11\t\n12\t  // Store triangulation results\n13\t  final List<List<List<double>>> triangles = [];\n   0x000000000008a41b <+195>:\tmov    rdi,QWORD PTR [r15+0x7f7]\n   0x000000000008a422 <+202>:\txor    esi,esi\n   0x000000000008a424 <+204>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a428 <+208>:\tcall   0x52edc <new _GrowableList>\n\n14\t\n15\t  // Ear clipping triangulation algorithm\n16\t  List<List<double>> remainingVertices = List.from(polygon);\n   0x000000000008a42d <+213>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a431 <+217>:\tmov    rdi,QWORD PTR [r15+0x7ef]\n   0x000000000008a438 <+224>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a43c <+228>:\tmov    r10,QWORD PTR [r15+0x97]\n   0x000000000008a443 <+235>:\tcall   0x8b498 <new List.from>\n\n17\t  while (remainingVertices.length > 3) {\n   0x000000000008a9bf <+1639>:\tjmp    0x8a36a <main+18>\n   0x000000000008a9c4 <+1644>:\tcall   QWORD PTR [r14+0x230]\n\n18\t    bool earFound = false;\n19\t    for (int i = 0; i < remainingVertices.length; i++) {\n   0x000000000008a9cb <+1651>:\tjmp    0x8a465 <main+269>\n   0x000000000008a9d0 <+1656>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a9d7 <+1663>:\tjmp    0x8a487 <main+303>\n   0x000000000008a9dc <+1668>:\tpush   r10\n   0x000000000008a9de <+1670>:\tpush   r9\n   0x000000000008a9e0 <+1672>:\tpush   r8\n   0x000000000008a9e2 <+1674>:\tpush   rsi\n   0x000000000008a9e3 <+1675>:\tpush   rcx\n   0x000000000008a9e4 <+1676>:\tpush   rax\n   0x000000000008a9e5 <+1677>:\tmov    rbx,QWORD PTR [r14+0x460]\n   0x000000000008a9ec <+1684>:\txor    r10d,r10d\n   0x000000000008a9ef <+1687>:\tcall   QWORD PTR [r14+0x200]\n   0x000000000008a9f6 <+1694>:\tint3\n   0x000000000008a9f7 <+1695>:\tadd    rdx,rsi\n   0x000000000008a9fa <+1698>:\tjmp    0x8a4d3 <main+379>\n   0x000000000008a9ff <+1703>:\tcall   0x853b4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008aa04 <+1708>:\tadd    rdx,rsi\n   0x000000000008aa07 <+1711>:\tjmp    0x8a52c <main+468>\n   0x000000000008aa0c <+1716>:\tcall   0x853b4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008aa11 <+1721>:\tcall   0x853b4 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n20\t      final List<double> prev = remainingVertices[(i - 1 + remainingVertices.length) % remainingVertices.length];\n21\t      final List<double> current = remainingVertices[i];\n22\t      final List<double> next = remainingVertices[(i + 1) % remainingVertices.length];\n23\t\n24\t      if (_isEar(prev, current, next, remainingVertices)) {\n   0x000000000008a448 <+240>:\tmov    rcx,rax\n   0x000000000008a44b <+243>:\tmov    QWORD PTR [rbp-0x48],rcx\n   0x000000000008a44f <+247>:\tmov    r8,QWORD PTR [rcx+0x7]\n   0x000000000008a453 <+251>:\tmov    QWORD PTR [rbp-0x40],r8\n   0x000000000008a457 <+255>:\tmov    r9,QWORD PTR [rbp-0x10]\n   0x000000000008a45b <+259>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a45f <+263>:\tjbe    0x8a9c4 <main+1644>\n   0x000000000008a465 <+269>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a469 <+273>:\tsar    rax,1\n   0x000000000008a46c <+276>:\tcmp    rax,0x3\n   0x000000000008a470 <+280>:\tjle    0x8a87b <main+1315>\n   0x000000000008a476 <+286>:\txor    r10d,r10d\n   0x000000000008a479 <+289>:\tmov    QWORD PTR [rbp-0x38],r10\n   0x000000000008a47d <+293>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a481 <+297>:\tjbe    0x8a9d0 <main+1656>\n   0x000000000008a487 <+303>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a48b <+307>:\tmov    rsi,rax\n   0x000000000008a48e <+310>:\tsar    rsi,1\n   0x000000000008a491 <+313>:\tcmp    r10,rsi\n   0x000000000008a494 <+316>:\tjge    0x8a866 <main+1294>\n   0x000000000008a49a <+322>:\tmov    rax,r10\n   0x000000000008a49d <+325>:\tsub    rax,0x1\n   0x000000000008a4a1 <+329>:\tadd    rax,rsi\n   0x000000000008a4a4 <+332>:\ttest   rsi,rsi\n   0x000000000008a4a7 <+335>:\tje     0x8a9dc <main+1668>\n   0x000000000008a4ad <+341>:\tmovsxd rdx,eax\n   0x000000000008a4b0 <+344>:\tcmp    rdx,rax\n   0x000000000008a4b3 <+347>:\tjne    0x8a4c5 <main+365>\n   0x000000000008a4b5 <+349>:\tmovsxd rdx,esi\n   0x000000000008a4b8 <+352>:\tcmp    rdx,rsi\n   0x000000000008a4bb <+355>:\tjne    0x8a4c5 <main+365>\n   0x000000000008a4bd <+357>:\tcdq\n   0x000000000008a4be <+358>:\tidiv   esi\n   0x000000000008a4c0 <+360>:\tmovsxd rdx,edx\n   0x000000000008a4c3 <+363>:\tjmp    0x8a4ca <main+370>\n   0x000000000008a4c5 <+365>:\tcqo\n   0x000000000008a4c7 <+367>:\tidiv   rsi\n   0x000000000008a4ca <+370>:\ttest   rdx,rdx\n   0x000000000008a4cd <+373>:\tjl     0x8a9f7 <main+1695>\n   0x000000000008a4d3 <+379>:\tmov    rax,rsi\n   0x000000000008a4d6 <+382>:\tmov    rbx,rdx\n   0x000000000008a4d9 <+385>:\tcmp    rbx,rax\n   0x000000000008a4dc <+388>:\tjae    0x8a9ff <main+1703>\n   0x000000000008a4e2 <+394>:\tmov    rdi,QWORD PTR [rcx+0x17]\n   0x000000000008a4e6 <+398>:\tmov    r12,QWORD PTR [rdi+rdx*8+0x17]\n   0x000000000008a4eb <+403>:\tmov    QWORD PTR [rbp-0x30],r12\n   0x000000000008a4ef <+407>:\tmov    r13,QWORD PTR [rdi+r10*8+0x17]\n   0x000000000008a4f4 <+412>:\tmov    QWORD PTR [rbp-0x20],r13\n   0x000000000008a4f8 <+416>:\tmov    rbx,r10\n   0x000000000008a4fb <+419>:\tadd    rbx,0x1\n   0x000000000008a4ff <+423>:\tmov    rax,rbx\n   0x000000000008a502 <+426>:\tmov    QWORD PTR [rbp-0x28],rbx\n   0x000000000008a506 <+430>:\tmovsxd rdx,eax\n   0x000000000008a509 <+433>:\tcmp    rdx,rax\n   0x000000000008a50c <+436>:\tjne    0x8a51e <main+454>\n   0x000000000008a50e <+438>:\tmovsxd rdx,esi\n   0x000000000008a511 <+441>:\tcmp    rdx,rsi\n   0x000000000008a514 <+444>:\tjne    0x8a51e <main+454>\n   0x000000000008a516 <+446>:\tcdq\n   0x000000000008a517 <+447>:\tidiv   esi\n   0x000000000008a519 <+449>:\tmovsxd rdx,edx\n   0x000000000008a51c <+452>:\tjmp    0x8a523 <main+459>\n   0x000000000008a51e <+454>:\tcqo\n   0x000000000008a520 <+456>:\tidiv   rsi\n   0x000000000008a523 <+459>:\ttest   rdx,rdx\n   0x000000000008a526 <+462>:\tjl     0x8aa04 <main+1708>\n   0x000000000008a52c <+468>:\tmov    rax,rsi\n   0x000000000008a52f <+471>:\tmov    rsi,rdx\n   0x000000000008a532 <+474>:\txchg   rbx,rdx\n   0x000000000008a535 <+477>:\tcmp    rbx,rax\n   0x000000000008a538 <+480>:\tjae    0x8aa0c <main+1716>\n   0x000000000008a53e <+486>:\tmov    rax,QWORD PTR [rdi+rsi*8+0x17]\n   0x000000000008a543 <+491>:\tmov    rdi,r12\n   0x000000000008a546 <+494>:\tmov    rsi,r13\n   0x000000000008a549 <+497>:\tmov    rdx,rax\n   0x000000000008a54c <+500>:\tmov    rbx,rcx\n   0x000000000008a54f <+503>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a553 <+507>:\tcall   0x8aaec <_isEar>\n\n25\t        triangles.add([prev, current, next]);\n26\t        remainingVertices.removeAt(i);\n27\t        earFound = true;\n28\t        break;\n29\t      }\n30\t    }\n31\t    if (!earFound) {\n32\t      print(\"Error: No ear found - polygon may be self-intersecting or degenerate\");\n   0x000000000008a859 <+1281>:\tmov    rcx,QWORD PTR [rbp-0x48]\n   0x000000000008a85d <+1285>:\tmov    r8,QWORD PTR [rbp-0x40]\n   0x000000000008a861 <+1289>:\tjmp    0x8a457 <main+255>\n   0x000000000008a866 <+1294>:\tmov    rdi,QWORD PTR [r15+0x81f]\n   0x000000000008a86d <+1301>:\tcall   0x8aab4 <print>\n\n33\t      return;\n34\t    }\n35\t  }\n36\t  triangles.add(remainingVertices); // Add final triangle\n37\t\n38\t  // Print results\n39\t  print(\"Original Polygon: $polygon\");\n   0x000000000008a8fd <+1445>:\tmov    r11,QWORD PTR [r15+0x827]\n   0x000000000008a904 <+1452>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a908 <+1456>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a90c <+1460>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a910 <+1464>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a914 <+1468>:\tcall   0x589c0 <_StringBase._interpolate>\n   0x000000000008a919 <+1473>:\tmov    rdi,rax\n   0x000000000008a91c <+1476>:\tcall   0x8aab4 <print>\n   0x000000000008a921 <+1481>:\txor    ecx,ecx\n   0x000000000008a923 <+1483>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a927 <+1487>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a92b <+1491>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a92f <+1495>:\tjbe    0x8aa42 <main+1770>\n   0x000000000008a935 <+1501>:\tmov    rdx,QWORD PTR [rax+0xf]\n   0x000000000008a939 <+1505>:\tsar    rdx,1\n   0x000000000008a93c <+1508>:\tcmp    rcx,rdx\n   0x000000000008a93f <+1511>:\tjge    0x8a9af <main+1623>\n   0x000000000008a945 <+1517>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a949 <+1521>:\tmov    r10d,0x8\n   0x000000000008a94f <+1527>:\tcall   0x84e70 <stub _iso_stub_AllocateArrayStub>\n\n40\t  for (int i = 0; i < triangles.length; i++) {\n   0x000000000008aa42 <+1770>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008aa49 <+1777>:\tjmp    0x8a935 <main+1501>\n   0x000000000008aa4e:\tint3\n   0x000000000008aa4f:\tint3\n   0x000000000008aa50 <+0>:\tpush   rbp\n   0x000000000008aa51 <+1>:\tmov    rbp,rsp\n   0x000000000008aa54 <+4>:\tsub    rsp,0x18\n   0x000000000008aa58 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008aa5c <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008aa60 <+16>:\tjbe    0x8aaaa <printToConsole+90>\n   0x000000000008aa66 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008aa6a <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008aa71 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008aa75 <+37>:\tjne    0x8aa87 <printToConsole+55>\n   0x000000000008aa7b <+43>:\tmov    rdx,QWORD PTR [r15+0x83f]\n   0x000000000008aa82 <+50>:\tcall   0x833cc <stub _iso_stub_InitLateStaticFieldStub>\n\n41\t    print(\"Triangle ${i + 1}: ${triangles[i]}\");\n   0x000000000008a954 <+1532>:\tmov    r11,QWORD PTR [r15+0x82f]\n   0x000000000008a95b <+1539>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a95f <+1543>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a963 <+1547>:\tadd    rcx,0x1\n   0x000000000008a967 <+1551>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a96b <+1555>:\tmov    rdx,rcx\n   0x000000000008a96e <+1558>:\tadd    rdx,rdx\n   0x000000000008a971 <+1561>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a975 <+1565>:\tmov    r11,QWORD PTR [r15+0x837]\n   0x000000000008a97c <+1572>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a980 <+1576>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a984 <+1580>:\tmov    rbx,QWORD PTR [rdx+0x17]\n   0x000000000008a988 <+1584>:\tmov    rsi,QWORD PTR [rbp-0x28]\n   0x000000000008a98c <+1588>:\tmov    rdi,QWORD PTR [rbx+rsi*8+0x17]\n   0x000000000008a991 <+1593>:\tmov    QWORD PTR [rax+0x2f],rdi\n   0x000000000008a995 <+1597>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a999 <+1601>:\tcall   0x589c0 <_StringBase._interpolate>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_77.dart", "function": "main", "source": "import 'dart:math';\n\n@pragma('vm:entry-point')\nvoid main() {\n  final list = List.generate(10, (index) => index + 1); // Sample list: [1, 2, 3, ..., 10]\n  print('Original list: $list');\n  \n  final random = Random();\n  for (int i = list.length - 1; i > 0; i--) {\n    final j = random.nextInt(i + 1);\n    final temp = list[i];\n    list[i] = list[j];\n    list[j] = temp;\n  }\n  \n  print('Shuffled list: $list');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x20\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a313 <main+447>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a16d <+25>:\tmov    esi,0xa\n   0x000000000008a172 <+30>:\tcall   0x52e38 <new _GrowableList>\n   0x000000000008a177 <+35>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a17b <+39>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a17f <+43>:\tsar    rcx,1\n   0x000000000008a182 <+46>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a186 <+50>:\txor    ebx,ebx\n   0x000000000008a188 <+52>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a18c <+56>:\tjbe    0x8a31f <main+459>\n   0x000000000008a192 <+62>:\tcmp    rbx,rcx\n   0x000000000008a195 <+65>:\tjge    0x8a1b2 <main+94>\n   0x000000000008a19b <+71>:\tmov    rsi,rbx\n   0x000000000008a19e <+74>:\tadd    rsi,0x1\n   0x000000000008a1a2 <+78>:\tmov    rdi,rsi\n   0x000000000008a1a5 <+81>:\tadd    rdi,rdi\n   0x000000000008a1a8 <+84>:\tmov    QWORD PTR [rdx+rbx*8+0x17],rdi\n   0x000000000008a1ad <+89>:\tmov    rbx,rsi\n   0x000000000008a1b0 <+92>:\tjmp    0x8a188 <main+52>\n   0x000000000008a1b2 <+94>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1b6 <+98>:\tmov    r10d,0x4\n   0x000000000008a1bc <+104>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n135\tin dart:core-patch/growable_array.dart\n   0x000000000008a31a <+454>:\tjmp    0x8a166 <main+18>\n   0x000000000008a31f <+459>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a326 <+466>:\tjmp    0x8a192 <main+62>\n   0x000000000008a32b <+471>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a332 <+478>:\tjmp    0x8a215 <main+193>\n   0x000000000008a337 <+483>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a33c <+488>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a341:\tint3\n   0x000000000008a342:\tint3\n   0x000000000008a343:\tint3\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_81.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final input = [1, 2, 3];\n  final List<List<int>> permutations = [];\n\n  void backtrack(List<int> current, List<int> remaining) {\n    if (remaining.isEmpty) {\n      permutations.add(List.from(current));\n      return;\n    }\n    \n    for (int i = 0; i < remaining.length; i++) {\n      final newCurrent = List<int>.from(current)..add(remaining[i]);\n      final newRemaining = List<int>.from(remaining)..removeAt(i);\n      backtrack(newCurrent, newRemaining);\n    }\n  }\n\n  backtrack([], input);\n  \n  for (final perm in permutations) {\n    print(perm);\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a484 <+0>:\tpush   rbp\n   0x000000000008a485 <+1>:\tmov    rbp,rsp\n   0x000000000008a488 <+4>:\tsub    rsp,0x48\n   0x000000000008a48c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a490 <+12>:\tjbe    0x8a5e9 <main+357>\n   0x000000000008a496 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a49a <+22>:\tmov    r10d,0x6\n   0x000000000008a4a0 <+28>:\tcall   0x84f9c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a4a5 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a4a9 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a4b1 <+45>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a4b9 <+53>:\tmov    QWORD PTR [rax+0x27],0x6\n   0x000000000008a4c1 <+61>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a4c8 <+68>:\tcall   0x8405c <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_82.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Generate all combinations of 3 elements from set [1,2,3,4]\n  final elements = [1, 2, 3, 4];\n  final k = 3;\n  \n  // Initialize combination indices\n  final indices = List.generate(k, (i) => i);\n  \n  // Generate combinations iteratively\n  final combinations = <List<int>>[];\n  \n  while (true) {\n    // Add current combination\n    combinations.add(List.generate(k, (i) => elements[indices[i]]));\n    \n    // Find rightmost index that can be incremented\n    int i = k - 1;\n    while (i >= 0 && indices[i] == elements.length - k + i) {\n      i--;\n    }\n    \n    if (i < 0) break; // All combinations generated\n    \n    // Increment and reset subsequent indices\n    indices[i]++;\n    for (int j = i + 1; j < k; j++) {\n      indices[j] = indices[i] + j - i;\n    }\n  }\n  \n  // Print results\n  for (final combo in combinations) {\n    print(combo);\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a50e <+954>:\tint3\n   0x000000000008a50f <+955>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Generate all combinations of 3 elements from set [1,2,3,4]\n4\t  final elements = [1, 2, 3, 4];\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x40\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a50f <main+955>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a16d <+25>:\tcall   0x8a5e0 <new _GrowableList._literal4>\n\n5\t  final k = 3;\n6\t  \n7\t  // Initialize combination indices\n8\t  final indices = List.generate(k, (i) => i);\n9\t  \n10\t  // Generate combinations iteratively\n11\t  final combinations = <List<int>>[];\n   0x000000000008a187 <+51>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a18b <+55>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a18f <+59>:\tmov    rdx,rcx\n   0x000000000008a192 <+62>:\tsar    rdx,1\n   0x000000000008a195 <+65>:\tmov    rbx,QWORD PTR [rax+0x17]\n   0x000000000008a199 <+69>:\tmov    QWORD PTR [rbp-0x10],rbx\n   0x000000000008a19d <+73>:\txor    eax,eax\n   0x000000000008a19f <+75>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1a3 <+79>:\tjbe    0x8a51b <main+967>\n   0x000000000008a1a9 <+85>:\tcmp    rax,rdx\n   0x000000000008a1ac <+88>:\tjge    0x8a1c3 <main+111>\n   0x000000000008a1b2 <+94>:\tmov    rsi,rax\n   0x000000000008a1b5 <+97>:\tadd    rsi,rsi\n   0x000000000008a1b8 <+100>:\tmov    QWORD PTR [rbx+rax*8+0x17],rsi\n   0x000000000008a1bd <+105>:\tadd    rax,0x1\n   0x000000000008a1c1 <+109>:\tjmp    0x8a19f <main+75>\n   0x000000000008a1c3 <+111>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a1ca <+118>:\txor    esi,esi\n   0x000000000008a1cc <+120>:\tcall   0x52e38 <new _GrowableList>\n\n12\t  \n13\t  while (true) {\n   0x000000000008a522 <+974>:\tjmp    0x8a1a9 <main+85>\n   0x000000000008a527 <+979>:\tcall   QWORD PTR [r14+0x230]\n\n14\t    // Add current combination\n15\t    combinations.add(List.generate(k, (i) => elements[indices[i]]));\n16\t    \n17\t    // Find rightmost index that can be incremented\n18\t    int i = k - 1;\n19\t    while (i >= 0 && indices[i] == elements.length - k + i) {\n   0x000000000008a549 <+1013>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a550 <+1020>:\tjmp    0x8a354 <main+512>\n   0x000000000008a555 <+1025>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a55a <+1030>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n20\t      i--;\n21\t    }\n22\t    \n23\t    if (i < 0) break; // All combinations generated\n24\t    \n25\t    // Increment and reset subsequent indices\n26\t    indices[i]++;\n27\t    for (int j = i + 1; j < k; j++) {\n   0x000000000008a55f <+1035>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a566 <+1042>:\tjmp    0x8a417 <main+707>\n   0x000000000008a56b <+1047>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a570 <+1052>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a577 <+1059>:\tjmp    0x8a4a1 <main+845>\n   0x000000000008a57c <+0>:\tpush   rbp\n   0x000000000008a57d <+1>:\tmov    rbp,rsp\n   0x000000000008a580 <+4>:\tsub    rsp,0x18\n   0x000000000008a584 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a588 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a58c <+16>:\tjbe    0x8a5d6 <printToConsole+90>\n   0x000000000008a592 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a596 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a59d <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a5a1 <+37>:\tjne    0x8a5b3 <printToConsole+55>\n   0x000000000008a5a7 <+43>:\tmov    rdx,QWORD PTR [r15+0x7bf]\n   0x000000000008a5ae <+50>:\tcall   0x831c8 <stub _iso_stub_InitLateStaticFieldStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_83.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define the input set\n  final List<int> inputSet = [1, 2, 3];\n  \n  // Generate all subsets using bitmask method\n  final int n = inputSet.length;\n  final int totalSubsets = 1 << n; // 2^n subsets\n  \n  // Iterate through all possible subset masks\n  for (int mask = 0; mask < totalSubsets; mask++) {\n    final List<int> subset = [];\n    \n    // Check each element's inclusion based on the mask\n    for (int i = 0; i < n; i++) {\n      if ((mask & (1 << i)) != 0) {\n        subset.add(inputSet[i]);\n      }\n    }\n    \n    // Print the generated subset\n    print(subset);\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a320 <+460>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a324 <+464>:\tadd    rcx,0x1\n   0x000000000008a328 <+468>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a32c <+472>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x000000000008a330 <+476>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a334 <+480>:\tjmp    0x8a19f <main+75>\n   0x000000000008a339 <+485>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a33d <+489>:\tmov    rsp,rbp\n   0x000000000008a340 <+492>:\tpop    rbp\n   0x000000000008a341 <+493>:\tret\n   0x000000000008a342 <+494>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a349 <+501>:\tjmp    0x8a166 <main+18>\n   0x000000000008a34e <+506>:\ttest   rcx,rcx\n   0x000000000008a351 <+509>:\tjl     0x8a35e <main+522>\n   0x000000000008a357 <+515>:\txor    ebx,ebx\n   0x000000000008a359 <+517>:\tjmp    0x8a199 <main+69>\n   0x000000000008a35e <+522>:\tmov    QWORD PTR [r14+0x750],rcx\n   0x000000000008a365 <+529>:\tpush   rdx\n   0x000000000008a366 <+530>:\tpush   rcx\n   0x000000000008a367 <+531>:\tpush   rax\n   0x000000000008a368 <+532>:\tmov    rbx,QWORD PTR [r14+0x458]\n   0x000000000008a36f <+539>:\txor    r10d,r10d\n   0x000000000008a372 <+542>:\tcall   QWORD PTR [r14+0x200]\n\n2\tvoid main() {\n3\t  // Define the input set\n4\t  final List<int> inputSet = [1, 2, 3];\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x40\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a342 <main+494>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a16d <+25>:\tcall   0x8a438 <new _GrowableList._literal3>\n   0x000000000008a172 <+30>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a176 <+34>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a17a <+38>:\tmov    rdx,rcx\n   0x000000000008a17d <+41>:\tsar    rdx,1\n   0x000000000008a180 <+44>:\tmov    rcx,rdx\n   0x000000000008a183 <+47>:\tmov    QWORD PTR [rbp-0x18],rdx\n   0x000000000008a187 <+51>:\tmov    ebx,0x1\n   0x000000000008a18c <+56>:\tcmp    rcx,0x3f\n   0x000000000008a190 <+60>:\tja     0x8a34e <main+506>\n   0x000000000008a196 <+66>:\tshl    rbx,cl\n   0x000000000008a199 <+69>:\tmov    QWORD PTR [rbp-0x10],rbx\n   0x000000000008a19d <+73>:\txor    ecx,ecx\n   0x000000000008a19f <+75>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a1a3 <+79>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1a7 <+83>:\tjbe    0x8a37a <main+550>\n   0x000000000008a1ad <+89>:\tcmp    rcx,rbx\n   0x000000000008a1b0 <+92>:\tjge    0x8a339 <main+485>\n   0x000000000008a1b6 <+98>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a1ba <+102>:\tmov    rax,QWORD PTR [rax]\n   0x000000000008a1bd <+105>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a1c1 <+109>:\tjne    0x8a1d3 <main+127>\n   0x000000000008a1c7 <+115>:\tmov    rdx,QWORD PTR [r15+0x147]\n   0x000000000008a1ce <+122>:\tcall   0x83180 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x000000000008a1d3 <+127>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a1da <+134>:\tmov    QWORD PTR [rbp-0x28],rax\n   0x000000000008a1de <+138>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n5\t  \n6\t  // Generate all subsets using bitmask method\n7\t  final int n = inputSet.length;\n8\t  final int totalSubsets = 1 << n; // 2^n subsets\n9\t  \n10\t  // Iterate through all possible subset masks\n11\t  for (int mask = 0; mask < totalSubsets; mask++) {\n   0x000000000008a379 <+549>:\tint3\n   0x000000000008a37a <+550>:\tcall   QWORD PTR [r14+0x230]\n\n12\t    final List<int> subset = [];\n13\t    \n14\t    // Check each element's inclusion based on the mask\n15\t    for (int i = 0; i < n; i++) {\n   0x000000000008a381 <+557>:\tjmp    0x8a1ad <main+89>\n   0x000000000008a386 <+562>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a38d <+569>:\tjmp    0x8a221 <main+205>\n   0x000000000008a392 <+574>:\ttest   rcx,rcx\n   0x000000000008a395 <+577>:\tjl     0x8a3a2 <main+590>\n   0x000000000008a39b <+583>:\txor    eax,eax\n   0x000000000008a39d <+585>:\tjmp    0x8a23f <main+235>\n   0x000000000008a3a2 <+590>:\tmov    QWORD PTR [r14+0x750],rcx\n   0x000000000008a3a9 <+597>:\tpush   r12\n   0x000000000008a3ab <+599>:\tpush   r10\n   0x000000000008a3ad <+601>:\tpush   r9\n   0x000000000008a3af <+603>:\tpush   r8\n   0x000000000008a3b1 <+605>:\tpush   rdi\n   0x000000000008a3b2 <+606>:\tpush   rsi\n   0x000000000008a3b3 <+607>:\tpush   rdx\n   0x000000000008a3b4 <+608>:\tpush   rcx\n   0x000000000008a3b5 <+609>:\tmov    rbx,QWORD PTR [r14+0x458]\n   0x000000000008a3bc <+616>:\txor    r10d,r10d\n   0x000000000008a3bf <+619>:\tcall   QWORD PTR [r14+0x200]\n   0x000000000008a3c6 <+626>:\tint3\n   0x000000000008a3c7 <+627>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a3cc <+632>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a3d1:\tint3\n   0x000000000008a3d2:\tint3\n   0x000000000008a3d3:\tint3\n   0x000000000008a3d4 <+0>:\tpush   rbp\n   0x000000000008a3d5 <+1>:\tmov    rbp,rsp\n   0x000000000008a3d8 <+4>:\tsub    rsp,0x18\n   0x000000000008a3dc <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a3e0 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3e4 <+16>:\tjbe    0x8a42e <printToConsole+90>\n   0x000000000008a3ea <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a3ee <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a3f5 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a3f9 <+37>:\tjne    0x8a40b <printToConsole+55>\n   0x000000000008a3ff <+43>:\tmov    rdx,QWORD PTR [r15+0x7b7]\n   0x000000000008a406 <+50>:\tcall   0x831c8 <stub _iso_stub_InitLateStaticFieldStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_85.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define the maze: 0 = path, 1 = wall\n  final List<List<int>> maze = [\n    [0, 1, 0, 0, 0],\n    [0, 1, 0, 1, 0],\n    [0, 0, 0, 1, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0]\n  ];\n\n  final int rows = maze.length;\n  final int cols = maze[0].length;\n  const List<int> start = [0, 0];\n  final List<int> end = [rows - 1, cols - 1];\n\n  // Directions: up, right, down, left\n  const List<List<int>> directions = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1]\n  ];\n\n  // Queue for BFS: stores [row, col, path_length] or [row, col]\n  final List<List<int>> queue = [];\n  queue.add([start[0], start[1], 0]);\n\n  // Visited matrix to avoid cycles\n  final List<List<bool>> visited = List.generate(\n    rows,\n    (_) => List.filled(cols, false),\n  );\n  visited[start[0]][start[1]] = true;\n\n  // Parent matrix to reconstruct path (optional)\n  final List<List<List<int>?>> parent =\n      List.generate(rows, (_) => List.filled(cols, null));\n\n  bool found = false;\n  int pathLength = -1;\n\n  while (queue.isNotEmpty) {\n    final current = queue.removeAt(0);\n    final int r = current[0], c = current[1], dist = current[2];\n\n    // Check if reached end\n    if (r == end[0] && c == end[1]) {\n      found = true;\n      pathLength = dist;\n      break;\n    }\n\n    // Explore neighbors\n    for (final dir in directions) {\n      final int nr = r + dir[0], nc = c + dir[1];\n      if (nr >= 0 &&\n          nr < rows &&\n          nc >= 0 &&\n          nc < cols &&\n          maze[nr][nc] == 0 &&\n          !visited[nr][nc]) {\n        visited[nr][nc] = true;\n        parent[nr][nc] = [r, c];\n        queue.add([nr, nc, dist + 1]);\n      }\n    }\n  }\n\n  // Output result\n  if (found) {\n    print('Path found with length: $pathLength');\n  } else {\n    print('No path exists');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008ab29 <+2517>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008ab2d <+2521>:\tmov    rsp,rbp\n   0x000000000008ab30 <+2524>:\tpop    rbp\n   0x000000000008ab31 <+2525>:\tret\n   0x000000000008ab32 <+2526>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ab39 <+2533>:\tjmp    0x8a169 <main+21>\n   0x000000000008ab3e <+2538>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n2\tvoid main() {\n3\t  // Define the maze: 0 = path, 1 = wall\n4\t  final List<List<int>> maze = [\n   0x000000000008a206 <+178>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a20a <+182>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a20e <+186>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a212 <+190>:\tmov    r8,QWORD PTR [rbp-0x20]\n   0x000000000008a216 <+194>:\tmov    r9,rax\n   0x000000000008a219 <+197>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a220 <+204>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n5\t    [0, 1, 0, 0, 0],\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0xb8\n   0x000000000008a15f <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a163 <+15>:\tjbe    0x8ab32 <main+2526>\n   0x000000000008a169 <+21>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a170 <+28>:\txor    esi,esi\n   0x000000000008a172 <+30>:\tmov    edx,0x2\n   0x000000000008a177 <+35>:\txor    ebx,ebx\n   0x000000000008a179 <+37>:\txor    r8d,r8d\n   0x000000000008a17c <+40>:\txor    r9d,r9d\n   0x000000000008a17f <+43>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n6\t    [0, 1, 0, 1, 0],\n   0x000000000008a184 <+48>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a18b <+55>:\txor    esi,esi\n   0x000000000008a18d <+57>:\tmov    edx,0x2\n   0x000000000008a192 <+62>:\txor    ebx,ebx\n   0x000000000008a194 <+64>:\tmov    r8d,0x2\n   0x000000000008a19a <+70>:\txor    r9d,r9d\n   0x000000000008a19d <+73>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1a1 <+77>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n7\t    [0, 0, 0, 1, 0],\n   0x000000000008a1a6 <+82>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a1ad <+89>:\txor    esi,esi\n   0x000000000008a1af <+91>:\txor    edx,edx\n   0x000000000008a1b1 <+93>:\txor    ebx,ebx\n   0x000000000008a1b3 <+95>:\tmov    r8d,0x2\n   0x000000000008a1b9 <+101>:\txor    r9d,r9d\n   0x000000000008a1bc <+104>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a1c0 <+108>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n8\t    [0, 1, 1, 1, 0],\n   0x000000000008a1c5 <+113>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a1cc <+120>:\txor    esi,esi\n   0x000000000008a1ce <+122>:\tmov    edx,0x2\n   0x000000000008a1d3 <+127>:\tmov    ebx,0x2\n   0x000000000008a1d8 <+132>:\tmov    r8d,0x2\n   0x000000000008a1de <+138>:\txor    r9d,r9d\n   0x000000000008a1e1 <+141>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a1e5 <+145>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n9\t    [0, 0, 0, 0, 0]\n   0x000000000008a1ea <+150>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a1f1 <+157>:\txor    esi,esi\n   0x000000000008a1f3 <+159>:\txor    edx,edx\n   0x000000000008a1f5 <+161>:\txor    ebx,ebx\n   0x000000000008a1f7 <+163>:\txor    r8d,r8d\n   0x000000000008a1fa <+166>:\txor    r9d,r9d\n   0x000000000008a1fd <+169>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a201 <+173>:\tcall   0x8adcc <new _GrowableList._literal5>\n\n10\t  ];\n11\t\n12\t  final int rows = maze.length;\n13\t  final int cols = maze[0].length;\n   0x000000000008a225 <+209>:\tmov    rdx,rax\n   0x000000000008a228 <+212>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a22c <+216>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a230 <+220>:\tmov    rsi,rax\n   0x000000000008a233 <+223>:\tsar    rsi,1\n   0x000000000008a236 <+226>:\tmov    rax,rsi\n   0x000000000008a239 <+229>:\tmov    QWORD PTR [rbp-0x28],rsi\n   0x000000000008a23d <+233>:\txor    ebx,ebx\n   0x000000000008a23f <+235>:\tcmp    rbx,rax\n   0x000000000008a242 <+238>:\tjae    0x8ab3e <main+2538>\n   0x000000000008a248 <+244>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a24c <+248>:\tmov    rcx,QWORD PTR [rax+0x17]\n   0x000000000008a250 <+252>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a253 <+255>:\tshr    eax,0xc\n   0x000000000008a256 <+258>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a25a <+262>:\tmov    rcx,rax\n   0x000000000008a25d <+265>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a261 <+269>:\tcall   QWORD PTR [rax+rcx*8+0x7ca8]\n   0x000000000008a268 <+276>:\tmov    rcx,rax\n   0x000000000008a26b <+279>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008a26f <+283>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a273 <+287>:\tsub    rax,0x1\n   0x000000000008a277 <+291>:\tmov    r8,rcx\n   0x000000000008a27a <+294>:\tsar    r8,1\n   0x000000000008a27d <+297>:\tmov    QWORD PTR [rbp-0x30],r8\n   0x000000000008a281 <+301>:\tmov    rdx,r8\n   0x000000000008a284 <+304>:\tsub    rdx,0x1\n   0x000000000008a288 <+308>:\tmov    rsi,rax\n   0x000000000008a28b <+311>:\tadd    rsi,rsi\n   0x000000000008a28e <+314>:\tmov    rax,rdx\n   0x000000000008a291 <+317>:\tadd    rax,rax\n   0x000000000008a294 <+320>:\tjno    0x8a2a3 <main+335>\n   0x000000000008a29a <+326>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n14\t  const List<int> start = [0, 0];\n15\t  final List<int> end = [rows - 1, cols - 1];\n   0x000000000008a29f <+331>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a2a3 <+335>:\tmov    rdx,rax\n   0x000000000008a2a6 <+338>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2ad <+345>:\tcall   0x8ad70 <new _GrowableList._literal2>\n\n16\t\n17\t  // Directions: up, right, down, left\n18\t  const List<List<int>> directions = [\n19\t    [-1, 0],\n20\t    [0, 1],\n21\t    [1, 0],\n22\t    [0, -1]\n23\t  ];\n24\t\n25\t  // Queue for BFS: stores [row, col, path_length] or [row, col]\n26\t  final List<List<int>> queue = [];\n   0x000000000008a2b2 <+350>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a2b9 <+357>:\txor    esi,esi\n   0x000000000008a2bb <+359>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a2bf <+363>:\tcall   0x52e38 <new _GrowableList>\n\n27\t  queue.add([start[0], start[1], 0]);\n   0x000000000008a2c4 <+368>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2cb <+375>:\txor    esi,esi\n   0x000000000008a2cd <+377>:\txor    edx,edx\n   0x000000000008a2cf <+379>:\txor    ebx,ebx\n   0x000000000008a2d1 <+381>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a2d5 <+385>:\tcall   0x8acc8 <new _GrowableList._literal3>\n\n28\t\n29\t  // Visited matrix to avoid cycles\n30\t  final List<List<bool>> visited = List.generate(\n31\t    rows,\n32\t    (_) => List.filled(cols, false),\n33\t  );\n34\t  visited[start[0]][start[1]] = true;\n   0x000000000008a3a1 <+589>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x000000000008a3a5 <+593>:\txor    ecx,ecx\n   0x000000000008a3a7 <+595>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3ab <+599>:\tjbe    0x8ab4f <main+2555>\n   0x000000000008a3b1 <+605>:\tcmp    rcx,rsi\n   0x000000000008a3b4 <+608>:\tjge    0x8a3cc <main+632>\n   0x000000000008a3ba <+614>:\tmov    r11,QWORD PTR [r14+0x80]\n   0x000000000008a3c1 <+621>:\tmov    QWORD PTR [rax+rcx*8+0x17],r11\n   0x000000000008a3c6 <+626>:\tadd    rcx,0x1\n   0x000000000008a3ca <+630>:\tjmp    0x8a3a7 <main+595>\n   0x000000000008a3cc <+632>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a3d0 <+636>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a3d4 <+640>:\tlea    r13,[rdx+rcx*8+0x17]\n   0x000000000008a3d9 <+645>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a3dd <+649>:\ttest   al,0x1\n   0x000000000008a3df <+651>:\tje     0x8a3f8 <main+676>\n   0x000000000008a3e1 <+653>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a3e5 <+657>:\tshr    r11d,0x2\n   0x000000000008a3e9 <+661>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a3ed <+665>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a3f1 <+669>:\tje     0x8a3f8 <main+676>\n   0x000000000008a3f3 <+671>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a3f8 <+676>:\tadd    rcx,0x1\n   0x000000000008a3fc <+680>:\tmov    rax,rsi\n   0x000000000008a3ff <+683>:\tmov    rsi,rcx\n   0x000000000008a402 <+686>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a406 <+690>:\tmov    rcx,QWORD PTR [rbp-0x48]\n   0x000000000008a40a <+694>:\tjmp    0x8a37a <main+550>\n   0x000000000008a40f <+699>:\tmov    rsi,rax\n   0x000000000008a412 <+702>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a416 <+706>:\txor    ebx,ebx\n   0x000000000008a418 <+708>:\tcmp    rbx,rax\n   0x000000000008a41b <+711>:\tjae    0x8ab5b <main+2567>\n   0x000000000008a421 <+717>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a425 <+721>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a428 <+724>:\tshr    ecx,0xc\n   0x000000000008a42b <+727>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a430 <+732>:\tmov    QWORD PTR [rsp+0x8],0x0\n   0x000000000008a439 <+741>:\tmov    r11,QWORD PTR [r14+0x78]\n   0x000000000008a43d <+745>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a441 <+749>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a445 <+753>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n\n35\t\n36\t  // Parent matrix to reconstruct path (optional)\n37\t  final List<List<List<int>?>> parent =\n38\t      List.generate(rows, (_) => List.filled(cols, null));\n39\t\n40\t  bool found = false;\n41\t  int pathLength = -1;\n42\t\n43\t  while (queue.isNotEmpty) {\n   0x000000000008ab67 <+2579>:\tjmp    0x8a47f <main+811>\n   0x000000000008ab6c <+2584>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ab73 <+2591>:\tjmp    0x8a4fb <main+935>\n   0x000000000008ab78 <+2596>:\tcall   0x851b0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n44\t    final current = queue.removeAt(0);\n45\t    final int r = current[0], c = current[1], dist = current[2];\n   0x000000000008a5b7 <+1123>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a5bb <+1127>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a5be <+1130>:\tshr    ecx,0xc\n   0x000000000008a5c1 <+1133>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a5c6 <+1138>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a5ce <+1146>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5d2 <+1150>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a5d5 <+1153>:\tmov    rdx,rax\n   0x000000000008a5d8 <+1156>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a5dc <+1160>:\tmov    QWORD PTR [rbp-0x60],rdx\n   0x000000000008a5e0 <+1164>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a5e3 <+1167>:\tshr    ecx,0xc\n   0x000000000008a5e6 <+1170>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a5eb <+1175>:\tmov    QWORD PTR [rsp],0x2\n   0x000000000008a5f3 <+1183>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a5f7 <+1187>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a5fa <+1190>:\tmov    rdx,rax\n   0x000000000008a5fd <+1193>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a601 <+1197>:\tmov    QWORD PTR [rbp-0x68],rdx\n   0x000000000008a605 <+1201>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a608 <+1204>:\tshr    ecx,0xc\n   0x000000000008a60b <+1207>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a610 <+1212>:\tmov    QWORD PTR [rsp],0x4\n   0x000000000008a618 <+1220>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a61c <+1224>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a61f <+1227>:\tmov    rcx,rax\n   0x000000000008a622 <+1230>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a626 <+1234>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a62a <+1238>:\tmov    rsi,rax\n   0x000000000008a62d <+1241>:\tsar    rsi,1\n   0x000000000008a630 <+1244>:\tmov    rax,rsi\n   0x000000000008a633 <+1247>:\txor    ebx,ebx\n   0x000000000008a635 <+1249>:\tcmp    rbx,rax\n   0x000000000008a638 <+1252>:\tjae    0x8ab89 <main+2613>\n   0x000000000008a63e <+1258>:\tmov    rdi,QWORD PTR [rdx+0x17]\n   0x000000000008a642 <+1262>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a646 <+1266>:\tmov    r8,QWORD PTR [rbp-0x60]\n   0x000000000008a64a <+1270>:\tsar    r8,1\n   0x000000000008a64d <+1273>:\tjae    0x8a654 <main+1280>\n   0x000000000008a64f <+1275>:\tmov    r8,QWORD PTR [r8+r8*1+0x8]\n   0x000000000008a654 <+1280>:\tmov    QWORD PTR [rbp-0x80],r8\n   0x000000000008a658 <+1284>:\tsar    rax,1\n   0x000000000008a65b <+1287>:\tjae    0x8a662 <main+1294>\n   0x000000000008a65d <+1289>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a662 <+1294>:\tcmp    r8,rax\n   0x000000000008a665 <+1297>:\tjne    0x8a6b7 <main+1379>\n   0x000000000008a66b <+1303>:\tmov    rax,rsi\n   0x000000000008a66e <+1306>:\tmov    ebx,0x1\n   0x000000000008a673 <+1311>:\tcmp    rbx,rax\n   0x000000000008a676 <+1314>:\tjae    0x8ab8e <main+2618>\n   0x000000000008a67c <+1320>:\tmov    rax,QWORD PTR [rdi+0x1f]\n   0x000000000008a680 <+1324>:\tmov    rbx,QWORD PTR [rbp-0x68]\n   0x000000000008a684 <+1328>:\tsar    rbx,1\n   0x000000000008a687 <+1331>:\tjae    0x8a68e <main+1338>\n   0x000000000008a689 <+1333>:\tmov    rbx,QWORD PTR [rbx+rbx*1+0x8]\n   0x000000000008a68e <+1338>:\tsar    rax,1\n   0x000000000008a691 <+1341>:\tjae    0x8a698 <main+1348>\n   0x000000000008a693 <+1343>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a698 <+1348>:\tcmp    rbx,rax\n   0x000000000008a69b <+1351>:\tjne    0x8a6b7 <main+1379>\n   0x000000000008a6a1 <+1357>:\tmov    rax,rcx\n   0x000000000008a6a4 <+1360>:\tsar    rax,1\n   0x000000000008a6a7 <+1363>:\tjae    0x8a6ae <main+1370>\n   0x000000000008a6a9 <+1365>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a6ae <+1370>:\tmov    rcx,QWORD PTR [r14+0x78]\n   0x000000000008a6b2 <+1374>:\tjmp    0x8aac0 <main+2412>\n   0x000000000008a6b7 <+1379>:\tmov    rsi,QWORD PTR [rbp-0x68]\n   0x000000000008a6bb <+1383>:\tsar    rsi,1\n   0x000000000008a6be <+1386>:\tjae    0x8a6c5 <main+1393>\n   0x000000000008a6c0 <+1388>:\tmov    rsi,QWORD PTR [rsi+rsi*1+0x8]\n   0x000000000008a6c5 <+1393>:\tmov    QWORD PTR [rbp-0x78],rsi\n   0x000000000008a6c9 <+1397>:\tsar    rcx,1\n   0x000000000008a6cc <+1400>:\tjae    0x8a6d3 <main+1407>\n   0x000000000008a6ce <+1402>:\tmov    rcx,QWORD PTR [rcx+rcx*1+0x8]\n   0x000000000008a6d3 <+1407>:\tadd    rcx,0x1\n   0x000000000008a6d7 <+1411>:\tmov    rax,rcx\n   0x000000000008a6da <+1414>:\tadd    rax,rax\n   0x000000000008a6dd <+1417>:\tjno    0x8a6ec <main+1432>\n   0x000000000008a6e3 <+1423>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n46\t\n47\t    // Check if reached end\n48\t    if (r == end[0] && c == end[1]) {\n49\t      found = true;\n50\t      pathLength = dist;\n51\t      break;\n52\t    }\n53\t\n54\t    // Explore neighbors\n55\t    for (final dir in directions) {\n56\t      final int nr = r + dir[0], nc = c + dir[1];\n   0x000000000008a6e8 <+1428>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a6ec <+1432>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a6f0 <+1436>:\tmov    r13,QWORD PTR [rbp-0x20]\n   0x000000000008a6f4 <+1440>:\txor    edx,edx\n   0x000000000008a6f6 <+1442>:\tmov    rdi,QWORD PTR [rbp-0x60]\n   0x000000000008a6fa <+1446>:\tmov    rbx,QWORD PTR [rbp-0x68]\n   0x000000000008a6fe <+1450>:\tmov    r12,QWORD PTR [rbp-0x40]\n   0x000000000008a702 <+1454>:\tmov    r9,QWORD PTR [rbp-0x50]\n   0x000000000008a706 <+1458>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a70a <+1462>:\tmov    r10,QWORD PTR [rbp-0x30]\n   0x000000000008a70e <+1466>:\tmov    rax,QWORD PTR [r15+0x7df]\n   0x000000000008a715 <+1473>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a719 <+1477>:\tjbe    0x8ab93 <main+2623>\n   0x000000000008a71f <+1483>:\tcmp    rdx,0x4\n   0x000000000008a723 <+1487>:\tjge    0x8aaa7 <main+2387>\n   0x000000000008a729 <+1493>:\tmov    rbx,QWORD PTR [rax+rdx*8+0x17]\n   0x000000000008a72e <+1498>:\tmov    QWORD PTR [rbp-0x70],rbx\n   0x000000000008a732 <+1502>:\tadd    rdx,0x1\n   0x000000000008a736 <+1506>:\tmov    QWORD PTR [rbp-0x38],rdx\n   0x000000000008a73a <+1510>:\tmov    eax,DWORD PTR [rbx-0x1]\n   0x000000000008a73d <+1513>:\tshr    eax,0xc\n   0x000000000008a740 <+1516>:\tmov    QWORD PTR [rsp+0x8],rbx\n   0x000000000008a745 <+1521>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a74d <+1529>:\txchg   rcx,rax\n   0x000000000008a750 <+1532>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a754 <+1536>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a757 <+1539>:\tsar    rax,1\n   0x000000000008a75a <+1542>:\tjae    0x8a761 <main+1549>\n   0x000000000008a75c <+1544>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a761 <+1549>:\tmov    rdx,QWORD PTR [rbp-0x80]\n   0x000000000008a765 <+1553>:\tadd    rax,rdx\n   0x000000000008a768 <+1556>:\tmov    rcx,QWORD PTR [rbp-0x70]\n   0x000000000008a76c <+1560>:\tmov    QWORD PTR [rbp-0x88],rax\n   0x000000000008a773 <+1567>:\tmov    ebx,DWORD PTR [rcx-0x1]\n   0x000000000008a776 <+1570>:\tshr    ebx,0xc\n   0x000000000008a779 <+1573>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x000000000008a77e <+1578>:\tmov    QWORD PTR [rsp],0x2\n   0x000000000008a786 <+1586>:\tmov    rcx,rbx\n   0x000000000008a789 <+1589>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a78d <+1593>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a790 <+1596>:\tsar    rax,1\n   0x000000000008a793 <+1599>:\tjae    0x8a79a <main+1606>\n   0x000000000008a795 <+1601>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a79a <+1606>:\tmov    rdx,QWORD PTR [rbp-0x78]\n   0x000000000008a79e <+1610>:\tmov    rcx,rax\n   0x000000000008a7a1 <+1613>:\tadd    rcx,rdx\n   0x000000000008a7a4 <+1616>:\tmov    rsi,QWORD PTR [rbp-0x88]\n   0x000000000008a7ab <+1623>:\tcmp    rsi,0x0\n   0x000000000008a7af <+1627>:\tjl     0x8aa8f <main+2363>\n   0x000000000008a7b5 <+1633>:\tmov    rdi,QWORD PTR [rbp-0x28]\n   0x000000000008a7b9 <+1637>:\tcmp    rsi,rdi\n   0x000000000008a7bc <+1640>:\tjge    0x8aa86 <main+2354>\n   0x000000000008a7c2 <+1646>:\tcmp    rcx,0x0\n   0x000000000008a7c6 <+1650>:\tjl     0x8aa7d <main+2345>\n   0x000000000008a7cc <+1656>:\tmov    r8,QWORD PTR [rbp-0x30]\n   0x000000000008a7d0 <+1660>:\tcmp    rcx,r8\n   0x000000000008a7d3 <+1663>:\tjge    0x8aa74 <main+2336>\n   0x000000000008a7d9 <+1669>:\tmov    r9,QWORD PTR [rbp-0x8]\n   0x000000000008a7dd <+1673>:\tmov    rax,QWORD PTR [r9+0xf]\n   0x000000000008a7e1 <+1677>:\tsar    rax,1\n   0x000000000008a7e4 <+1680>:\tmov    rbx,rsi\n   0x000000000008a7e7 <+1683>:\tcmp    rbx,rax\n   0x000000000008a7ea <+1686>:\tjae    0x8ab9f <main+2635>\n   0x000000000008a7f0 <+1692>:\tmov    r10,QWORD PTR [r9+0x17]\n   0x000000000008a7f4 <+1696>:\tmov    rax,rsi\n   0x000000000008a7f7 <+1699>:\tadd    rax,rax\n   0x000000000008a7fa <+1702>:\tjno    0x8a809 <main+1717>\n   0x000000000008a800 <+1708>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a805 <+1713>:\tmov    QWORD PTR [rax+0x7],rsi\n   0x000000000008a809 <+1717>:\tmov    r12,rax\n   0x000000000008a80c <+1720>:\tmov    QWORD PTR [rbp-0x90],r12\n   0x000000000008a813 <+1727>:\tmov    r13,QWORD PTR [r10+rsi*8+0x17]\n   0x000000000008a818 <+1732>:\tmov    rax,rcx\n   0x000000000008a81b <+1735>:\tadd    rax,rax\n   0x000000000008a81e <+1738>:\tjno    0x8a82d <main+1753>\n   0x000000000008a824 <+1744>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n57\t      if (nr >= 0 &&\n58\t          nr < rows &&\n59\t          nc >= 0 &&\n60\t          nc < cols &&\n61\t          maze[nr][nc] == 0 &&\n   0x000000000008a829 <+1749>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a82d <+1753>:\tmov    QWORD PTR [rbp-0x70],rax\n   0x000000000008a831 <+1757>:\tmov    ecx,DWORD PTR [r13-0x1]\n   0x000000000008a835 <+1761>:\tshr    ecx,0xc\n   0x000000000008a838 <+1764>:\tmov    QWORD PTR [rsp+0x8],r13\n   0x000000000008a83d <+1769>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a841 <+1773>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a845 <+1777>:\tcall   QWORD PTR [rax+rcx*8]\n\n62\t          !visited[nr][nc]) {\n   0x000000000008a848 <+1780>:\ttest   rax,rax\n   0x000000000008a84b <+1783>:\tjne    0x8aa6b <main+2327>\n   0x000000000008a851 <+1789>:\tmov    rdx,QWORD PTR [rbp-0x88]\n   0x000000000008a858 <+1796>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a85c <+1800>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a860 <+1804>:\tmov    rbx,rdx\n   0x000000000008a863 <+1807>:\tcmp    rbx,rax\n   0x000000000008a866 <+1810>:\tjae    0x8aba4 <main+2640>\n   0x000000000008a86c <+1816>:\tmov    rax,QWORD PTR [rsi+rdx*8+0x17]\n   0x000000000008a871 <+1821>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a874 <+1824>:\tshr    ecx,0xc\n   0x000000000008a877 <+1827>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a87c <+1832>:\tmov    r11,QWORD PTR [rbp-0x70]\n   0x000000000008a880 <+1836>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a884 <+1840>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a888 <+1844>:\tcall   QWORD PTR [rax+rcx*8]\n\n63\t        visited[nr][nc] = true;\n   0x000000000008a88b <+1847>:\ttest   al,0x10\n   0x000000000008a88d <+1849>:\tje     0x8aa62 <main+2318>\n   0x000000000008a893 <+1855>:\tmov    r12,QWORD PTR [rbp-0x20]\n   0x000000000008a897 <+1859>:\tmov    r9,QWORD PTR [rbp-0x60]\n   0x000000000008a89b <+1863>:\tmov    r8,QWORD PTR [rbp-0x68]\n   0x000000000008a89f <+1867>:\tmov    rbx,QWORD PTR [rbp-0x88]\n   0x000000000008a8a6 <+1874>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a8aa <+1878>:\tmov    r10,QWORD PTR [rbp-0x50]\n   0x000000000008a8ae <+1882>:\tmov    rsi,QWORD PTR [rbp-0x70]\n   0x000000000008a8b2 <+1886>:\tmov    rdx,QWORD PTR [rbp-0x90]\n   0x000000000008a8b9 <+1893>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a8bd <+1897>:\tmov    rcx,QWORD PTR [rax+rbx*8+0x17]\n   0x000000000008a8c2 <+1902>:\tmov    r13d,DWORD PTR [rcx-0x1]\n   0x000000000008a8c6 <+1906>:\tshr    r13d,0xc\n   0x000000000008a8ca <+1910>:\tmov    QWORD PTR [rsp+0x10],rcx\n   0x000000000008a8cf <+1915>:\tmov    QWORD PTR [rsp+0x8],rsi\n   0x000000000008a8d4 <+1920>:\tmov    r11,QWORD PTR [r14+0x78]\n   0x000000000008a8d8 <+1924>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a8dc <+1928>:\tmov    rcx,r13\n   0x000000000008a8df <+1931>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a8e3 <+1935>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n\n64\t        parent[nr][nc] = [r, c];\n   0x000000000008a94a <+2038>:\tmov    rcx,rax\n   0x000000000008a94d <+2041>:\tmov    rax,QWORD PTR [rbp-0xa0]\n   0x000000000008a954 <+2048>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a958 <+2052>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a960 <+2060>:\tmov    rax,QWORD PTR [rbp-0x98]\n   0x000000000008a967 <+2067>:\tmov    edx,DWORD PTR [rax-0x1]\n   0x000000000008a96a <+2070>:\tshr    edx,0xc\n   0x000000000008a96d <+2073>:\tmov    QWORD PTR [rsp+0x10],rax\n   0x000000000008a972 <+2078>:\tmov    r11,QWORD PTR [rbp-0x70]\n   0x000000000008a976 <+2082>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a97b <+2087>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a97f <+2091>:\tmov    rcx,rdx\n   0x000000000008a982 <+2094>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a986 <+2098>:\tcall   QWORD PTR [rax+rcx*8+0x8188]\n\n65\t        queue.add([nr, nc, dist + 1]);\n66\t      }\n67\t    }\n68\t  }\n69\t\n70\t  // Output result\n71\t  if (found) {\n72\t    print('Path found with length: $pathLength');\n   0x000000000008aaff <+2475>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008ab03 <+2479>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008ab07 <+2483>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008ab0b <+2487>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008ab10 <+2492>:\tmov    rdi,rax\n   0x000000000008ab13 <+2495>:\tcall   0x8ac2c <print>\n\n73\t  } else {\n74\t    print('No path exists');\n   0x000000000008ab18 <+2500>:\tjmp    0x8ab29 <main+2517>\n   0x000000000008ab1d <+2505>:\tmov    rdi,QWORD PTR [r15+0x7ef]\n   0x000000000008ab24 <+2512>:\tcall   0x8ac2c <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_92.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Sample dataset: [age, income, student] -> buys_computer\n  final List<Map<String, dynamic>> data = [\n    {'age': 'youth', 'income': 'high', 'student': 'no', 'buys_computer': 'no'},\n    {'age': 'youth', 'income': 'high', 'student': 'no', 'buys_computer': 'no'},\n    {'age': 'middle_aged', 'income': 'high', 'student': 'no', 'buys_computer': 'yes'},\n    {'age': 'senior', 'income': 'medium', 'student': 'no', 'buys_computer': 'yes'},\n    {'age': 'senior', 'income': 'low', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'senior', 'income': 'low', 'student': 'yes', 'buys_computer': 'no'},\n    {'age': 'middle_aged', 'income': 'low', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'youth', 'income': 'medium', 'student': 'no', 'buys_computer': 'no'},\n    {'age': 'youth', 'income': 'low', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'senior', 'income': 'medium', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'youth', 'income': 'medium', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'middle_aged', 'income': 'medium', 'student': 'no', 'buys_computer': 'yes'},\n    {'age': 'middle_aged', 'income': 'high', 'student': 'yes', 'buys_computer': 'yes'},\n    {'age': 'senior', 'income': 'medium', 'student': 'no', 'buys_computer': 'no'}\n  ];\n\n  // Hard-coded decision tree based on the dataset patterns\n  String predict(Map<String, dynamic> instance) {\n    if (instance['age'] == 'youth') {\n      if (instance['student'] == 'yes') {\n        return 'yes';\n      } else {\n        return 'no';\n      }\n    } else if (instance['age'] == 'middle_aged') {\n      return 'yes';\n    } else { // senior\n      if (instance['income'] == 'low' || instance['income'] == 'medium') {\n        return instance['student'] == 'yes' ? 'yes' : 'no';\n      } else { // high income\n        return 'no';\n      }\n    }\n  }\n\n  // Test the decision tree with all instances\n  print('Actual\\t\\tPredicted\\tCorrect?');\n  print('------------------------------------');\n  int correct = 0;\n  for (var instance in data) {\n    final actual = instance['buys_computer'];\n    final predicted = predict(instance);\n    final isCorrect = actual == predicted;\n    if (isCorrect) correct++;\n    print('$actual\\t\\t$predicted\\t\\t$isCorrect');\n  }\n\n  // Print accuracy\n  final accuracy = (correct / data.length) * 100;\n  print('\\nAccuracy: ${accuracy.toStringAsFixed(2)}%');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a22d <+33>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a234 <+40>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a238 <+44>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a23f <+51>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a243 <+55>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a24a <+62>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a24e <+66>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a255 <+73>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a259 <+77>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a260 <+84>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a264 <+88>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a26b <+95>:\tmov    QWORD PTR [rax+0x3f],r11\n   0x000000000008a26f <+99>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a276 <+106>:\tmov    QWORD PTR [rax+0x47],r11\n   0x000000000008a27a <+110>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a281 <+117>:\tmov    QWORD PTR [rax+0x4f],r11\n   0x000000000008a285 <+121>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a28c <+128>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a291 <+133>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a295 <+137>:\tcall   0x67c6c <new Map._fromLiteral>\n   0x000000000008a29a <+142>:\tmov    rbx,QWORD PTR [r15+0x7f7]\n   0x000000000008a2a1 <+149>:\tmov    r10d,0x1c\n   0x000000000008a2a7 <+155>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a2ab <+159>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a2b0 <+164>:\tmov    rcx,rax\n   0x000000000008a2b3 <+167>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2b7 <+171>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a2bb <+175>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2bf <+179>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2c3 <+183>:\tmov    r10d,0x10\n   0x000000000008a2c9 <+189>:\tcall   0x84d08 <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_93.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Training data for AND gate: [input1, input2, expected output]\n  final List<List<double>> trainingData = [\n    [0, 0, 0],\n    [0, 1, 0],\n    [1, 0, 0],\n    [1, 1, 1]\n  ];\n\n  // Initialize weights and bias with small random values\n  final weights = [0.5, -0.5]; // Weights for two inputs\n  double bias = 0.1;\n  const double learningRate = 0.1;\n  const int epochs = 100;\n\n  // Training loop\n  for (int epoch = 0; epoch < epochs; epoch++) {\n    double totalError = 0.0;\n\n    for (final example in trainingData) {\n      final inputs = example.sublist(0, 2); // First two values are inputs\n      final expected = example[2];\n\n      // Calculate weighted sum\n      double weightedSum = bias;\n      for (int i = 0; i < inputs.length; i++) {\n        weightedSum += weights[i] * inputs[i];\n      }\n\n      // Apply step function\n      final output = weightedSum >= 0 ? 1.0 : 0.0;\n\n      // Calculate error and update weights\n      final error = expected - output;\n      totalError += error.abs();\n\n      for (int i = 0; i < weights.length; i++) {\n        weights[i] += learningRate * error * inputs[i];\n      }\n      bias += learningRate * error;\n    }\n\n    // Early stopping if no error\n    if (totalError == 0) break;\n  }\n\n  // Test the trained perceptron\n  print('Testing trained perceptron:');\n  for (final example in trainingData) {\n    final inputs = example.sublist(0, 2);\n    final expected = example[2];\n\n    double weightedSum = bias;\n    for (int i = 0; i < inputs.length; i++) {\n      weightedSum += weights[i] * inputs[i];\n    }\n\n    final output = weightedSum >= 0 ? 1.0 : 0.0;\n    print('Input: $inputs -> Output: $output (Expected: $expected)');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a978 <+1920>:\tint3\n   0x000000000008a979 <+1921>:\tcall   QWORD PTR [r14+0x230]\n\n2\tvoid main() {\n3\t  // Training data for AND gate: [input1, input2, expected output]\n4\t  final List<List<double>> trainingData = [\n   0x000000000008a28b <+147>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a28f <+151>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a293 <+155>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a297 <+159>:\tmov    r8,rax\n   0x000000000008a29a <+162>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a2a1 <+169>:\tcall   0x8ab1c <new _GrowableList._literal4>\n\n5\t    [0, 0, 0],\n   0x000000000008a1f8 <+0>:\tpush   rbp\n   0x000000000008a1f9 <+1>:\tmov    rbp,rsp\n   0x000000000008a1fc <+4>:\tsub    rsp,0x88\n   0x000000000008a203 <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a207 <+15>:\tjbe    0x8a979 <main+1921>\n   0x000000000008a20d <+21>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a214 <+28>:\txorps  xmm1,xmm1\n   0x000000000008a217 <+31>:\txorps  xmm2,xmm2\n   0x000000000008a21a <+34>:\txorps  xmm3,xmm3\n   0x000000000008a21d <+37>:\tcall   0x8ab94 <new _GrowableList._literal3>\n\n6\t    [0, 1, 0],\n   0x000000000008a222 <+42>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a229 <+49>:\txorps  xmm1,xmm1\n   0x000000000008a22c <+52>:\tmovsd  xmm2,QWORD PTR [r15+0x7bf]\n   0x000000000008a235 <+61>:\txorps  xmm3,xmm3\n   0x000000000008a238 <+64>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a23c <+68>:\tcall   0x8ab94 <new _GrowableList._literal3>\n\n7\t    [1, 0, 0],\n   0x000000000008a241 <+73>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a248 <+80>:\tmovsd  xmm1,QWORD PTR [r15+0x7bf]\n   0x000000000008a251 <+89>:\txorps  xmm2,xmm2\n   0x000000000008a254 <+92>:\txorps  xmm3,xmm3\n   0x000000000008a257 <+95>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a25b <+99>:\tcall   0x8ab94 <new _GrowableList._literal3>\n\n8\t    [1, 1, 1]\n   0x000000000008a260 <+104>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a267 <+111>:\tmovsd  xmm1,QWORD PTR [r15+0x7bf]\n   0x000000000008a270 <+120>:\tmovsd  xmm2,QWORD PTR [r15+0x7bf]\n   0x000000000008a279 <+129>:\tmovsd  xmm3,QWORD PTR [r15+0x7bf]\n   0x000000000008a282 <+138>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a286 <+142>:\tcall   0x8ab94 <new _GrowableList._literal3>\n\n9\t  ];\n10\t\n11\t  // Initialize weights and bias with small random values\n12\t  final weights = [0.5, -0.5]; // Weights for two inputs\n   0x000000000008a2a6 <+174>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a2ad <+181>:\tmov    rsi,QWORD PTR [r15+0x7cf]\n   0x000000000008a2b4 <+188>:\tmov    rdx,QWORD PTR [r15+0x7d7]\n   0x000000000008a2bb <+195>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a2bf <+199>:\tcall   0x8aac0 <new _GrowableList._literal2>\n\n13\t  double bias = 0.1;\n14\t  const double learningRate = 0.1;\n15\t  const int epochs = 100;\n16\t\n17\t  // Training loop\n18\t  for (int epoch = 0; epoch < epochs; epoch++) {\n   0x000000000008a980 <+1928>:\tjmp    0x8a20d <main+21>\n   0x000000000008a985 <+1933>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a98c <+1940>:\tjmp    0x8a2f1 <main+249>\n   0x000000000008a991 <+1945>:\tcall   QWORD PTR [r14+0x238]\n\n19\t    double totalError = 0.0;\n20\t\n21\t    for (final example in trainingData) {\n22\t      final inputs = example.sublist(0, 2); // First two values are inputs\n   0x000000000008a389 <+401>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a38d <+405>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a390 <+408>:\tshr    ecx,0xc\n   0x000000000008a393 <+411>:\tmov    rdi,rax\n   0x000000000008a396 <+414>:\txor    esi,esi\n   0x000000000008a398 <+416>:\tmov    edx,0x2\n   0x000000000008a39d <+421>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a3a1 <+425>:\tcall   QWORD PTR [rax+rcx*8+0x8a88]\n\n23\t      final expected = example[2];\n   0x000000000008a3a8 <+432>:\tmov    rdx,rax\n   0x000000000008a3ab <+435>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a3af <+439>:\tmov    QWORD PTR [rbp-0x40],rdx\n   0x000000000008a3b3 <+443>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a3b6 <+446>:\tshr    ecx,0xc\n   0x000000000008a3b9 <+449>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a3be <+454>:\tmov    QWORD PTR [rsp],0x4\n   0x000000000008a3c6 <+462>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a3ca <+466>:\tcall   QWORD PTR [rax+rcx*8]\n\n24\t\n25\t      // Calculate weighted sum\n26\t      double weightedSum = bias;\n27\t      for (int i = 0; i < inputs.length; i++) {\n   0x000000000008a3cd <+469>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a3d1 <+473>:\tmovsd  xmm0,QWORD PTR [rbp-0x58]\n   0x000000000008a3d6 <+478>:\txor    esi,esi\n   0x000000000008a3d8 <+480>:\tmov    rbx,QWORD PTR [rbp-0x38]\n   0x000000000008a3dc <+484>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a3e0 <+488>:\tmov    QWORD PTR [rbp-0x48],rsi\n   0x000000000008a3e4 <+492>:\tmovsd  QWORD PTR [rbp-0x68],xmm0\n   0x000000000008a3e9 <+497>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3ed <+501>:\tjbe    0x8a99d <main+1957>\n   0x000000000008a3f3 <+507>:\tmov    ecx,DWORD PTR [rdx-0x1]\n   0x000000000008a3f6 <+510>:\tshr    ecx,0xc\n   0x000000000008a3f9 <+513>:\tmov    QWORD PTR [rsp],rdx\n   0x000000000008a3fd <+517>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a401 <+521>:\tcall   QWORD PTR [rax+rcx*8+0x7ca8]\n   0x000000000008a998 <+1952>:\tjmp    0x8a325 <main+301>\n   0x000000000008a99d <+1957>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a9a4 <+1964>:\tjmp    0x8a3f3 <main+507>\n   0x000000000008a9a9 <+1969>:\tcall   0x85254 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n\n28\t        weightedSum += weights[i] * inputs[i];\n   0x000000000008a408 <+528>:\tsar    rax,1\n   0x000000000008a40b <+531>:\tmov    rdx,QWORD PTR [rbp-0x48]\n   0x000000000008a40f <+535>:\tcmp    rdx,rax\n   0x000000000008a412 <+538>:\tjge    0x8a494 <main+668>\n   0x000000000008a418 <+544>:\tmov    rdi,QWORD PTR [rbp-0x38]\n   0x000000000008a41c <+548>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a420 <+552>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a424 <+556>:\tsar    rax,1\n   0x000000000008a427 <+559>:\tmov    rbx,rdx\n   0x000000000008a42a <+562>:\tcmp    rbx,rax\n   0x000000000008a42d <+565>:\tjae    0x8a9a9 <main+1969>\n   0x000000000008a433 <+571>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a437 <+575>:\tmov    rcx,rdx\n   0x000000000008a43a <+578>:\tadd    rcx,rcx\n   0x000000000008a43d <+581>:\tmov    rbx,QWORD PTR [rax+rdx*8+0x17]\n   0x000000000008a442 <+586>:\tmov    QWORD PTR [rbp-0x50],rbx\n   0x000000000008a446 <+590>:\tmov    eax,DWORD PTR [rsi-0x1]\n   0x000000000008a449 <+593>:\tshr    eax,0xc\n   0x000000000008a44c <+596>:\tmov    QWORD PTR [rsp+0x8],rsi\n   0x000000000008a451 <+601>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a455 <+605>:\tmov    rcx,rax\n   0x000000000008a458 <+608>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a45c <+612>:\tcall   QWORD PTR [rax+rcx*8]\n\n29\t      }\n30\t\n31\t      // Apply step function\n32\t      final output = weightedSum >= 0 ? 1.0 : 0.0;\n33\t\n34\t      // Calculate error and update weights\n35\t      final error = expected - output;\n36\t      totalError += error.abs();\n37\t\n38\t      for (int i = 0; i < weights.length; i++) {\n   0x000000000008a9ae <+1974>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a9b5 <+1981>:\tjmp    0x8a54c <main+852>\n   0x000000000008a9ba <+1986>:\tcall   0x852b8 <stub _iso_stub_RangeErrorSharedWithFPURegsStub>\n   0x000000000008a9bf <+1991>:\tsub    rsp,0x20\n   0x000000000008a9c3 <+1995>:\tmovups XMMWORD PTR [rsp],xmm1\n   0x000000000008a9c7 <+1999>:\tmovups XMMWORD PTR [rsp+0x10],xmm2\n   0x000000000008a9cc <+2004>:\tpush   rdx\n   0x000000000008a9cd <+2005>:\tpush   rcx\n   0x000000000008a9ce <+2006>:\tcall   0x84c90 <stub _iso_stub_AllocateDoubleStub>\n   0x000000000008a9d3 <+2011>:\tpop    rcx\n   0x000000000008a9d4 <+2012>:\tpop    rdx\n   0x000000000008a9d5 <+2013>:\tmovups xmm1,XMMWORD PTR [rsp]\n   0x000000000008a9d9 <+2017>:\tmovups xmm2,XMMWORD PTR [rsp+0x10]\n   0x000000000008a9de <+2022>:\tadd    rsp,0x20\n   0x000000000008a9e2 <+2026>:\tjmp    0x8a5de <main+998>\n   0x000000000008a9e7 <+2031>:\tcall   QWORD PTR [r14+0x230]\n\n39\t        weights[i] += learningRate * error * inputs[i];\n   0x000000000008a45f <+615>:\tmov    rcx,rax\n   0x000000000008a462 <+618>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a466 <+622>:\tmovsd  xmm0,QWORD PTR [rax+0x7]\n   0x000000000008a46b <+627>:\tmovsd  xmm1,QWORD PTR [rcx+0x7]\n   0x000000000008a470 <+632>:\tmulsd  xmm0,xmm1\n   0x000000000008a474 <+636>:\tmovsd  xmm1,QWORD PTR [rbp-0x68]\n   0x000000000008a479 <+641>:\taddsd  xmm1,xmm0\n   0x000000000008a47d <+645>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a481 <+649>:\tadd    rax,0x1\n   0x000000000008a485 <+653>:\tmovaps xmm0,xmm1\n   0x000000000008a488 <+656>:\tmov    rsi,rax\n   0x000000000008a48b <+659>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a48f <+663>:\tjmp    0x8a3d8 <main+480>\n   0x000000000008a494 <+668>:\tmovsd  xmm0,QWORD PTR [rbp-0x68]\n   0x000000000008a499 <+673>:\txorps  xmm1,xmm1\n   0x000000000008a49c <+676>:\tcomisd xmm0,xmm1\n   0x000000000008a4a0 <+680>:\tjp     0x8a4ba <main+706>\n   0x000000000008a4a6 <+686>:\tjb     0x8a4ba <main+706>\n   0x000000000008a4ac <+692>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a4b5 <+701>:\tjmp    0x8a4bd <main+709>\n   0x000000000008a4ba <+706>:\txorps  xmm0,xmm0\n   0x000000000008a4bd <+709>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a4c1 <+713>:\tmovsd  xmm2,QWORD PTR [rax+0x7]\n   0x000000000008a4c6 <+718>:\tsubsd  xmm2,xmm0\n   0x000000000008a4ca <+722>:\tmovsd  QWORD PTR [rbp-0x78],xmm2\n   0x000000000008a4cf <+727>:\tcomisd xmm2,xmm1\n   0x000000000008a4d3 <+731>:\tjp     0x8a4e7 <main+751>\n   0x000000000008a4d9 <+737>:\tjne    0x8a4e7 <main+751>\n   0x000000000008a4df <+743>:\txorps  xmm3,xmm3\n   0x000000000008a4e2 <+746>:\tjmp    0x8a511 <main+793>\n   0x000000000008a4e7 <+751>:\tcomisd xmm2,xmm1\n   0x000000000008a4eb <+755>:\tjp     0x8a50b <main+787>\n   0x000000000008a4f1 <+761>:\tjae    0x8a50b <main+787>\n   0x000000000008a4f7 <+767>:\tmov    r11,QWORD PTR [r14+0x2b0]\n   0x000000000008a4fe <+774>:\tmovups xmm0,XMMWORD PTR [r11]\n   0x000000000008a502 <+778>:\txorpd  xmm0,xmm2\n   0x000000000008a506 <+782>:\tjmp    0x8a50e <main+790>\n   0x000000000008a50b <+787>:\tmovaps xmm0,xmm2\n   0x000000000008a50e <+790>:\tmovaps xmm3,xmm0\n   0x000000000008a511 <+793>:\tmovsd  xmm0,QWORD PTR [r15+0x7df]\n   0x000000000008a51a <+802>:\tmovsd  xmm4,QWORD PTR [rbp-0x60]\n   0x000000000008a51f <+807>:\taddsd  xmm4,xmm3\n   0x000000000008a523 <+811>:\tmovsd  QWORD PTR [rbp-0x70],xmm4\n   0x000000000008a528 <+816>:\tmovaps xmm3,xmm2\n   0x000000000008a52b <+819>:\tmulsd  xmm3,xmm0\n   0x000000000008a52f <+823>:\tmovsd  QWORD PTR [rbp-0x68],xmm3\n   0x000000000008a534 <+828>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008a538 <+832>:\txor    ebx,ebx\n   0x000000000008a53a <+834>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a53e <+838>:\tmov    QWORD PTR [rbp-0x48],rbx\n   0x000000000008a542 <+842>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a546 <+846>:\tjbe    0x8a9ae <main+1974>\n   0x000000000008a54c <+852>:\tmov    rcx,QWORD PTR [rdx+0xf]\n   0x000000000008a550 <+856>:\tsar    rcx,1\n   0x000000000008a553 <+859>:\tcmp    rbx,rcx\n   0x000000000008a556 <+862>:\tjge    0x8a633 <main+1083>\n   0x000000000008a55c <+868>:\tmov    rcx,QWORD PTR [rdx+0x17]\n   0x000000000008a560 <+872>:\tmov    rsi,rbx\n   0x000000000008a563 <+875>:\tadd    rsi,rsi\n   0x000000000008a566 <+878>:\tmov    rdi,QWORD PTR [rcx+rbx*8+0x17]\n   0x000000000008a56b <+883>:\tmov    QWORD PTR [rbp-0x10],rdi\n   0x000000000008a56f <+887>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a572 <+890>:\tshr    ecx,0xc\n   0x000000000008a575 <+893>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a57a <+898>:\tmov    QWORD PTR [rsp],rsi\n   0x000000000008a57e <+902>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a582 <+906>:\tcall   QWORD PTR [rax+rcx*8]\n\n40\t      }\n41\t      bias += learningRate * error;\n42\t    }\n43\t\n44\t    // Early stopping if no error\n45\t    if (totalError == 0) break;\n46\t  }\n47\t\n48\t  // Test the trained perceptron\n49\t  print('Testing trained perceptron:');\n   0x000000000008a585 <+909>:\tmovsd  xmm0,QWORD PTR [rax+0x7]\n   0x000000000008a58a <+914>:\tmovsd  xmm1,QWORD PTR [rbp-0x68]\n   0x000000000008a58f <+919>:\tmulsd  xmm0,xmm1\n   0x000000000008a593 <+923>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a597 <+927>:\tmovsd  xmm2,QWORD PTR [rax+0x7]\n   0x000000000008a59c <+932>:\taddsd  xmm2,xmm0\n   0x000000000008a5a0 <+936>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a5a4 <+940>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a5a8 <+944>:\tsar    rax,1\n   0x000000000008a5ab <+947>:\tmov    rbx,QWORD PTR [rbp-0x48]\n   0x000000000008a5af <+951>:\tcmp    rbx,rax\n   0x000000000008a5b2 <+954>:\tjae    0x8a9ba <main+1986>\n   0x000000000008a5b8 <+960>:\tmov    rdx,QWORD PTR [rcx+0x17]\n   0x000000000008a5bc <+964>:\tmov    rax,QWORD PTR [r14+0x48]\n   0x000000000008a5c0 <+968>:\tadd    rax,0x10\n   0x000000000008a5c4 <+972>:\tcmp    rax,QWORD PTR [r14+0x50]\n   0x000000000008a5c8 <+976>:\tjae    0x8a9bf <main+1991>\n   0x000000000008a5ce <+982>:\tmov    QWORD PTR [r14+0x48],rax\n   0x000000000008a5d2 <+986>:\tsub    rax,0xf\n   0x000000000008a5d6 <+990>:\tmov    QWORD PTR [rax-0x1],0x3e15c\n   0x000000000008a5de <+998>:\tmovsd  QWORD PTR [rax+0x7],xmm2\n   0x000000000008a5e3 <+1003>:\tmov    rsi,QWORD PTR [rbp-0x48]\n   0x000000000008a5e7 <+1007>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a5ec <+1012>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a5f0 <+1016>:\ttest   al,0x1\n   0x000000000008a5f2 <+1018>:\tje     0x8a60b <main+1043>\n   0x000000000008a5f4 <+1020>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a5f8 <+1024>:\tshr    r11d,0x2\n   0x000000000008a5fc <+1028>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a600 <+1032>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a604 <+1036>:\tje     0x8a60b <main+1043>\n   0x000000000008a606 <+1038>:\tcall   0x83328 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a60b <+1043>:\tadd    rsi,0x1\n   0x000000000008a60f <+1047>:\tmov    rbx,rsi\n   0x000000000008a612 <+1050>:\tmov    rdx,rcx\n   0x000000000008a615 <+1053>:\tmovsd  xmm2,QWORD PTR [rbp-0x78]\n   0x000000000008a61a <+1058>:\tmovsd  xmm4,QWORD PTR [rbp-0x70]\n   0x000000000008a61f <+1063>:\tmovaps xmm3,xmm1\n   0x000000000008a622 <+1066>:\txorps  xmm1,xmm1\n   0x000000000008a625 <+1069>:\tmovsd  xmm0,QWORD PTR [r15+0x7df]\n   0x000000000008a62e <+1078>:\tjmp    0x8a53a <main+834>\n   0x000000000008a633 <+1083>:\tmov    rcx,rdx\n   0x000000000008a636 <+1086>:\tmovaps xmm1,xmm0\n   0x000000000008a639 <+1089>:\tmovsd  xmm0,QWORD PTR [rbp-0x78]\n   0x000000000008a63e <+1094>:\tmulsd  xmm0,xmm1\n   0x000000000008a642 <+1098>:\tmovsd  xmm2,QWORD PTR [rbp-0x58]\n   0x000000000008a647 <+1103>:\taddsd  xmm2,xmm0\n   0x000000000008a64b <+1107>:\tmovaps xmm1,xmm2\n   0x000000000008a64e <+1110>:\tmovsd  xmm0,QWORD PTR [rbp-0x70]\n   0x000000000008a653 <+1115>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a657 <+1119>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000008a65b <+1123>:\tmov    rsi,rcx\n   0x000000000008a65e <+1126>:\tmov    r8,QWORD PTR [rbp-0x30]\n   0x000000000008a662 <+1130>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a666 <+1134>:\tmov    r9,QWORD PTR [rbp-0x28]\n   0x000000000008a66a <+1138>:\tjmp    0x8a311 <main+281>\n   0x000000000008a66f <+1143>:\tmov    rcx,rsi\n   0x000000000008a672 <+1146>:\txorps  xmm2,xmm2\n   0x000000000008a675 <+1149>:\tmovsd  xmm1,QWORD PTR [r15+0x7df]\n   0x000000000008a67e <+1158>:\tcomisd xmm0,xmm2\n   0x000000000008a682 <+1162>:\tjp     0x8a68e <main+1174>\n   0x000000000008a688 <+1168>:\tje     0x8a6ae <main+1206>\n   0x000000000008a68e <+1174>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a692 <+1178>:\tadd    rax,0x1\n   0x000000000008a696 <+1182>:\tmovsd  xmm0,QWORD PTR [rbp-0x58]\n   0x000000000008a69b <+1187>:\tmov    r8,rax\n   0x000000000008a69e <+1190>:\tmov    rbx,QWORD PTR [rbp-0x8]\n   0x000000000008a6a2 <+1194>:\tmov    rsi,rcx\n   0x000000000008a6a5 <+1197>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a6a9 <+1201>:\tjmp    0x8a2e3 <main+235>\n   0x000000000008a6ae <+1206>:\tmovsd  xmm0,QWORD PTR [rbp-0x58]\n   0x000000000008a6b3 <+1211>:\tjmp    0x8a6be <main+1222>\n   0x000000000008a6b8 <+1216>:\tmov    rcx,rsi\n   0x000000000008a6bb <+1219>:\txorps  xmm2,xmm2\n   0x000000000008a6be <+1222>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a6c2 <+1226>:\tmovsd  QWORD PTR [rbp-0x58],xmm0\n   0x000000000008a6c7 <+1231>:\tmov    rdi,QWORD PTR [r15+0x7f7]\n   0x000000000008a6ce <+1238>:\tcall   0x8aa24 <print>\n\n50\t  for (final example in trainingData) {\n51\t    final inputs = example.sublist(0, 2);\n   0x000000000008a75a <+1378>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a75e <+1382>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a761 <+1385>:\tshr    ecx,0xc\n   0x000000000008a764 <+1388>:\tmov    rdi,rax\n   0x000000000008a767 <+1391>:\txor    esi,esi\n   0x000000000008a769 <+1393>:\tmov    edx,0x2\n   0x000000000008a76e <+1398>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a772 <+1402>:\tcall   QWORD PTR [rax+rcx*8+0x8a88]\n\n52\t    final expected = example[2];\n   0x000000000008a779 <+1409>:\tmov    rdx,rax\n   0x000000000008a77c <+1412>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a780 <+1416>:\tmov    QWORD PTR [rbp-0x40],rdx\n   0x000000000008a784 <+1420>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a787 <+1423>:\tshr    ecx,0xc\n   0x000000000008a78a <+1426>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a78f <+1431>:\tmov    QWORD PTR [rsp],0x4\n   0x000000000008a797 <+1439>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a79b <+1443>:\tcall   QWORD PTR [rax+rcx*8]\n\n53\t\n54\t    double weightedSum = bias;\n55\t    for (int i = 0; i < inputs.length; i++) {\n   0x000000000008a79e <+1446>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a7a2 <+1450>:\tmovsd  xmm0,QWORD PTR [rbp-0x58]\n   0x000000000008a7a7 <+1455>:\txor    esi,esi\n   0x000000000008a7a9 <+1457>:\tmov    rbx,QWORD PTR [rbp-0x38]\n   0x000000000008a7ad <+1461>:\tmov    rdx,QWORD PTR [rbp-0x40]\n   0x000000000008a7b1 <+1465>:\tmov    QWORD PTR [rbp-0x30],rsi\n   0x000000000008a7b5 <+1469>:\tmovsd  QWORD PTR [rbp-0x60],xmm0\n   0x000000000008a7ba <+1474>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a7be <+1478>:\tjbe    0x8a9f3 <main+2043>\n   0x000000000008a7c4 <+1484>:\tmov    ecx,DWORD PTR [rdx-0x1]\n   0x000000000008a7c7 <+1487>:\tshr    ecx,0xc\n   0x000000000008a7ca <+1490>:\tmov    QWORD PTR [rsp],rdx\n   0x000000000008a7ce <+1494>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a7d2 <+1498>:\tcall   QWORD PTR [rax+rcx*8+0x7ca8]\n   0x000000000008a9ee <+2038>:\tjmp    0x8a6f5 <main+1277>\n   0x000000000008a9f3 <+2043>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a9fa <+2050>:\tjmp    0x8a7c4 <main+1484>\n   0x000000000008a9ff <+2055>:\tcall   0x85254 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008aa04 <+2060>:\tsub    rsp,0x10\n   0x000000000008aa08 <+2064>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008aa0c <+2068>:\tpush   rax\n   0x000000000008aa0d <+2069>:\tcall   0x84c90 <stub _iso_stub_AllocateDoubleStub>\n   0x000000000008aa12 <+2074>:\tmov    rcx,rax\n   0x000000000008aa15 <+2077>:\tpop    rax\n   0x000000000008aa16 <+2078>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008aa1a <+2082>:\tadd    rsp,0x10\n   0x000000000008aa1e <+2086>:\tjmp    0x8a8ef <main+1783>\n   0x000000000008aa23:\tint3\n\n56\t      weightedSum += weights[i] * inputs[i];\n   0x000000000008a7d9 <+1505>:\tsar    rax,1\n   0x000000000008a7dc <+1508>:\tmov    rdx,QWORD PTR [rbp-0x30]\n   0x000000000008a7e0 <+1512>:\tcmp    rdx,rax\n   0x000000000008a7e3 <+1515>:\tjge    0x8a865 <main+1645>\n   0x000000000008a7e9 <+1521>:\tmov    rdi,QWORD PTR [rbp-0x38]\n   0x000000000008a7ed <+1525>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a7f1 <+1529>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a7f5 <+1533>:\tsar    rax,1\n   0x000000000008a7f8 <+1536>:\tmov    rbx,rdx\n   0x000000000008a7fb <+1539>:\tcmp    rbx,rax\n   0x000000000008a7fe <+1542>:\tjae    0x8a9ff <main+2055>\n   0x000000000008a804 <+1548>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a808 <+1552>:\tmov    rcx,rdx\n   0x000000000008a80b <+1555>:\tadd    rcx,rcx\n   0x000000000008a80e <+1558>:\tmov    rbx,QWORD PTR [rax+rdx*8+0x17]\n   0x000000000008a813 <+1563>:\tmov    QWORD PTR [rbp-0x50],rbx\n   0x000000000008a817 <+1567>:\tmov    eax,DWORD PTR [rsi-0x1]\n   0x000000000008a81a <+1570>:\tshr    eax,0xc\n   0x000000000008a81d <+1573>:\tmov    QWORD PTR [rsp+0x8],rsi\n   0x000000000008a822 <+1578>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a826 <+1582>:\tmov    rcx,rax\n   0x000000000008a829 <+1585>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a82d <+1589>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a830 <+1592>:\tmov    rcx,rax\n   0x000000000008a833 <+1595>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a837 <+1599>:\tmovsd  xmm0,QWORD PTR [rax+0x7]\n   0x000000000008a83c <+1604>:\tmovsd  xmm1,QWORD PTR [rcx+0x7]\n   0x000000000008a841 <+1609>:\tmulsd  xmm0,xmm1\n   0x000000000008a845 <+1613>:\tmovsd  xmm1,QWORD PTR [rbp-0x60]\n   0x000000000008a84a <+1618>:\taddsd  xmm1,xmm0\n   0x000000000008a84e <+1622>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a852 <+1626>:\tadd    rax,0x1\n   0x000000000008a856 <+1630>:\tmovaps xmm0,xmm1\n   0x000000000008a859 <+1633>:\tmov    rsi,rax\n   0x000000000008a85c <+1636>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a860 <+1640>:\tjmp    0x8a7a9 <main+1457>\n   0x000000000008a865 <+1645>:\tmovsd  xmm0,QWORD PTR [rbp-0x60]\n   0x000000000008a86a <+1650>:\txorps  xmm1,xmm1\n   0x000000000008a86d <+1653>:\tcomisd xmm0,xmm1\n   0x000000000008a871 <+1657>:\tjp     0x8a88b <main+1683>\n   0x000000000008a877 <+1663>:\tjb     0x8a88b <main+1683>\n   0x000000000008a87d <+1669>:\tmovsd  xmm0,QWORD PTR [r15+0x7bf]\n   0x000000000008a886 <+1678>:\tjmp    0x8a88e <main+1686>\n   0x000000000008a88b <+1683>:\txorps  xmm0,xmm0\n   0x000000000008a88e <+1686>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x000000000008a892 <+1690>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a896 <+1694>:\tmovsd  QWORD PTR [rbp-0x60],xmm0\n   0x000000000008a89b <+1699>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a89f <+1703>:\tmov    r10d,0xe\n   0x000000000008a8a5 <+1709>:\tcall   0x84d10 <stub _iso_stub_AllocateArrayStub>\n\n57\t    }\n58\t\n59\t    final output = weightedSum >= 0 ? 1.0 : 0.0;\n60\t    print('Input: $inputs -> Output: $output (Expected: $expected)');\n   0x000000000008a8aa <+1714>:\tmov    r11,QWORD PTR [r15+0x80f]\n   0x000000000008a8b1 <+1721>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a8b5 <+1725>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a8b9 <+1729>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a8bd <+1733>:\tmov    r11,QWORD PTR [r15+0x817]\n   0x000000000008a8c4 <+1740>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a8c8 <+1744>:\tmovsd  xmm0,QWORD PTR [rbp-0x60]\n   0x000000000008a8cd <+1749>:\tmov    rcx,QWORD PTR [r14+0x48]\n   0x000000000008a8d1 <+1753>:\tadd    rcx,0x10\n   0x000000000008a8d5 <+1757>:\tcmp    rcx,QWORD PTR [r14+0x50]\n   0x000000000008a8d9 <+1761>:\tjae    0x8aa04 <main+2060>\n   0x000000000008a8df <+1767>:\tmov    QWORD PTR [r14+0x48],rcx\n   0x000000000008a8e3 <+1771>:\tsub    rcx,0xf\n   0x000000000008a8e7 <+1775>:\tmov    QWORD PTR [rcx-0x1],0x3e15c\n   0x000000000008a8ef <+1783>:\tmovsd  QWORD PTR [rcx+0x7],xmm0\n   0x000000000008a8f4 <+1788>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a8f8 <+1792>:\tmov    r11,QWORD PTR [r15+0x81f]\n   0x000000000008a8ff <+1799>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a903 <+1803>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a907 <+1807>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008a90b <+1811>:\tmov    r11,QWORD PTR [r15+0x827]\n   0x000000000008a912 <+1818>:\tmov    QWORD PTR [rax+0x47],r11\n   0x000000000008a916 <+1822>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a91a <+1826>:\tcall   0x58860 <_StringBase._interpolate>\n   0x000000000008a91f <+1831>:\tmov    rdi,rax\n   0x000000000008a922 <+1834>:\tcall   0x8aa24 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "algo_94.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example graph represented as an adjacency list\n  // Page 0 links to pages 1 and 2\n  // Page 1 links to page 2\n  // Page 2 links to pages 0 and 3\n  // Page 3 links to page 0\n  final List<List<int>> graph = [\n    [1, 2],\n    [2],\n    [0, 3],\n    [0]\n  ];\n\n  final int numPages = graph.length;\n  final double dampingFactor = 0.85;\n  final int maxIterations = 10;\n  final double initialRank = 1.0 / numPages;\n\n  // Initialize PageRank values\n  List<double> pageRanks = List.filled(numPages, initialRank);\n\n  // Precompute out-degree for each node\n  List<int> outDegrees = List.generate(numPages, (i) => graph[i].length);\n\n  // Iterate PageRank algorithm\n  for (int iteration = 0; iteration < maxIterations; iteration++) {\n    List<double> newPageRanks = List.filled(numPages, 0.0);\n\n    // Calculate contribution from incoming links\n    for (int i = 0; i < numPages; i++) {\n      for (int incomingPage in graph[i]) {\n        newPageRanks[i] += pageRanks[incomingPage] / outDegrees[incomingPage];\n      }\n      // Apply damping factor\n      newPageRanks[i] = (1 - dampingFactor) / numPages + dampingFactor * newPageRanks[i];\n    }\n\n    pageRanks = newPageRanks;\n  }\n\n  // Print final PageRank values\n  print('Final PageRank values after $maxIterations iterations:');\n  for (int i = 0; i < numPages; i++) {\n    print('Page $i: ${pageRanks[i].toStringAsFixed(6)}');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a7a9 <+1381>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a7ad <+1385>:\tadd    rcx,0x1\n   0x000000000008a7b1 <+1389>:\tmov    rsi,rcx\n   0x000000000008a7b4 <+1392>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a7b8 <+1396>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a7bc <+1400>:\tjmp    0x8a6f5 <main+1201>\n   0x000000000008a7c1 <+1405>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a7c5 <+1409>:\tmov    rsp,rbp\n   0x000000000008a7c8 <+1412>:\tpop    rbp\n   0x000000000008a7c9 <+1413>:\tret\n   0x000000000008a7ca <+1414>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a7d1 <+1421>:\tjmp    0x8a256 <main+18>\n   0x000000000008a7d6 <+1426>:\tsub    rsp,0x20\n   0x000000000008a7da <+1430>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a7de <+1434>:\tmovups XMMWORD PTR [rsp+0x10],xmm1\n   0x000000000008a7e3 <+1439>:\tpush   rcx\n   0x000000000008a7e4 <+1440>:\tpush   rax\n   0x000000000008a7e5 <+1441>:\tcall   0x84cdc <stub _iso_stub_AllocateDoubleStub>\n\n2\tvoid main() {\n3\t  // Example graph represented as an adjacency list\n4\t  // Page 0 links to pages 1 and 2\n5\t  // Page 1 links to page 2\n6\t  // Page 2 links to pages 0 and 3\n7\t  // Page 3 links to page 0\n8\t  final List<List<int>> graph = [\n   0x000000000008a2ec <+168>:\tmov    rcx,rax\n   0x000000000008a2ef <+171>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a2f3 <+175>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2f7 <+179>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a2ff <+187>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a303 <+191>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008a307 <+195>:\tmov    rbx,QWORD PTR [rbp-0x10]\n   0x000000000008a30b <+199>:\tmov    r8,rcx\n   0x000000000008a30e <+202>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a315 <+209>:\tcall   0x8aa6c <new _GrowableList._literal4>\n\n9\t    [1, 2],\n   0x000000000008a244 <+0>:\tpush   rbp\n   0x000000000008a245 <+1>:\tmov    rbp,rsp\n   0x000000000008a248 <+4>:\tsub    rsp,0x68\n   0x000000000008a24c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a250 <+12>:\tjbe    0x8a7ca <main+1414>\n   0x000000000008a256 <+18>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a25d <+25>:\tmov    esi,0x2\n   0x000000000008a262 <+30>:\tmov    edx,0x4\n   0x000000000008a267 <+35>:\tcall   0x8aae4 <new _GrowableList._literal2>\n\n10\t    [2],\n11\t    [0, 3],\n   0x000000000008a297 <+83>:\tmov    rcx,rax\n   0x000000000008a29a <+86>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a29e <+90>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a2a2 <+94>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2a6 <+98>:\tmov    QWORD PTR [rcx+0xf],0x2\n   0x000000000008a2ae <+106>:\tmov    rdi,QWORD PTR [r15+0x237]\n   0x000000000008a2b5 <+113>:\txor    esi,esi\n   0x000000000008a2b7 <+115>:\tmov    edx,0x6\n   0x000000000008a2bc <+120>:\tcall   0x8aae4 <new _GrowableList._literal2>\n\n12\t    [0]\n13\t  ];\n14\t\n15\t  final int numPages = graph.length;\n16\t  final double dampingFactor = 0.85;\n17\t  final int maxIterations = 10;\n18\t  final double initialRank = 1.0 / numPages;\n19\t\n20\t  // Initialize PageRank values\n21\t  List<double> pageRanks = List.filled(numPages, initialRank);\n   0x000000000008a31a <+214>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a31e <+218>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a322 <+222>:\tmov    rdx,rcx\n   0x000000000008a325 <+225>:\tsar    rdx,1\n   0x000000000008a328 <+228>:\txorps  xmm0,xmm0\n   0x000000000008a32b <+231>:\tcvtsi2sd xmm0,rdx\n   0x000000000008a330 <+236>:\tmovsd  QWORD PTR [rbp-0x58],xmm0\n   0x000000000008a335 <+241>:\tmovsd  xmm1,QWORD PTR [r15+0x7bf]\n   0x000000000008a33e <+250>:\tdivsd  xmm1,xmm0\n   0x000000000008a342 <+254>:\tsar    rcx,1\n   0x000000000008a345 <+257>:\tmov    QWORD PTR [rbp-0x28],rcx\n   0x000000000008a349 <+261>:\tmov    rdx,QWORD PTR [r14+0x48]\n   0x000000000008a34d <+265>:\tadd    rdx,0x10\n   0x000000000008a351 <+269>:\tcmp    rdx,QWORD PTR [r14+0x50]\n   0x000000000008a355 <+273>:\tjae    0x8a7d6 <main+1426>\n   0x000000000008a35b <+279>:\tmov    QWORD PTR [r14+0x48],rdx\n   0x000000000008a35f <+283>:\tsub    rdx,0xf\n   0x000000000008a363 <+287>:\tmov    QWORD PTR [rdx-0x1],0x3e15c\n   0x000000000008a36b <+295>:\tmovsd  QWORD PTR [rdx+0x7],xmm1\n   0x000000000008a370 <+300>:\tmov    rsi,rcx\n   0x000000000008a373 <+303>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a37a <+310>:\tcall   0x6c304 <new _List.filled>\n\n22\t\n23\t  // Precompute out-degree for each node\n24\t  List<int> outDegrees = List.generate(numPages, (i) => graph[i].length);\n   0x000000000008a393 <+335>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a397 <+339>:\tmov    rdx,rcx\n   0x000000000008a39a <+342>:\tsar    rdx,1\n   0x000000000008a39d <+345>:\tmov    QWORD PTR [rbp-0x38],rdx\n   0x000000000008a3a1 <+349>:\tmov    rsi,QWORD PTR [rax+0x17]\n   0x000000000008a3a5 <+353>:\tmov    QWORD PTR [rbp-0x18],rsi\n   0x000000000008a3a9 <+357>:\txor    r8d,r8d\n   0x000000000008a3ac <+360>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a3b0 <+364>:\tmov    QWORD PTR [rbp-0x30],r8\n   0x000000000008a3b4 <+368>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a3b8 <+372>:\tjbe    0x8a801 <main+1469>\n   0x000000000008a3be <+378>:\tcmp    r8,rdx\n   0x000000000008a3c1 <+381>:\tjge    0x8a41b <main+471>\n   0x000000000008a3c7 <+387>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x000000000008a3cb <+391>:\tsar    rax,1\n   0x000000000008a3ce <+394>:\tmov    rbx,r8\n   0x000000000008a3d1 <+397>:\tcmp    rbx,rax\n   0x000000000008a3d4 <+400>:\tjae    0x8a80d <main+1481>\n   0x000000000008a3da <+406>:\tmov    rax,QWORD PTR [rdi+0x17]\n   0x000000000008a3de <+410>:\tmov    rcx,QWORD PTR [rax+r8*8+0x17]\n   0x000000000008a3e3 <+415>:\tmov    eax,DWORD PTR [rcx-0x1]\n   0x000000000008a3e6 <+418>:\tshr    eax,0xc\n   0x000000000008a3e9 <+421>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a3ed <+425>:\tmov    rcx,rax\n   0x000000000008a3f0 <+428>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a3f4 <+432>:\tcall   QWORD PTR [rax+rcx*8+0x7ca8]\n\n25\t\n26\t  // Iterate PageRank algorithm\n27\t  for (int iteration = 0; iteration < maxIterations; iteration++) {\n   0x000000000008a812 <+1486>:\tcall   QWORD PTR [r14+0x238]\n\n28\t    List<double> newPageRanks = List.filled(numPages, 0.0);\n   0x000000000008a3fb <+439>:\tmov    rdx,rax\n   0x000000000008a3fe <+442>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a402 <+446>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a406 <+450>:\tmov    QWORD PTR [rax+rcx*8+0x17],rdx\n   0x000000000008a40b <+455>:\tadd    rcx,0x1\n   0x000000000008a40f <+459>:\tmov    r8,rcx\n   0x000000000008a412 <+462>:\tmov    rsi,rax\n   0x000000000008a415 <+465>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008a419 <+469>:\tjmp    0x8a3ac <main+360>\n   0x000000000008a41b <+471>:\tmovsd  xmm0,QWORD PTR [rbp-0x58]\n   0x000000000008a420 <+476>:\tmov    rax,rsi\n   0x000000000008a423 <+479>:\tmovsd  xmm1,QWORD PTR [r15+0x7cf]\n   0x000000000008a42c <+488>:\tdivsd  xmm1,xmm0\n   0x000000000008a430 <+492>:\tmovsd  QWORD PTR [rbp-0x60],xmm1\n   0x000000000008a435 <+497>:\tmov    r9,QWORD PTR [rbp-0x10]\n   0x000000000008a439 <+501>:\txor    r8d,r8d\n   0x000000000008a43c <+504>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a440 <+508>:\tmov    rbx,QWORD PTR [rbp-0x28]\n   0x000000000008a444 <+512>:\tmov    QWORD PTR [rbp-0x10],r9\n   0x000000000008a448 <+516>:\tmov    QWORD PTR [rbp-0x30],r8\n   0x000000000008a44c <+520>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a450 <+524>:\tjbe    0x8a812 <main+1486>\n   0x000000000008a456 <+530>:\tcmp    r8,0xa\n   0x000000000008a45a <+534>:\tjge    0x8a6d5 <main+1169>\n   0x000000000008a460 <+540>:\tmov    rsi,rbx\n   0x000000000008a463 <+543>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a46a <+550>:\tmov    rdx,QWORD PTR [r15+0x7d7]\n   0x000000000008a471 <+557>:\tcall   0x6c304 <new _List.filled>\n\n29\t\n30\t    // Calculate contribution from incoming links\n31\t    for (int i = 0; i < numPages; i++) {\n   0x000000000008a819 <+1493>:\tjmp    0x8a456 <main+530>\n   0x000000000008a81e <+1498>:\tcall   QWORD PTR [r14+0x238]\n   0x000000000008a825 <+1505>:\tjmp    0x8a4b1 <main+621>\n   0x000000000008a82a <+1510>:\tcall   0x85304 <stub _iso_stub_RangeErrorSharedWithFPURegsStub>\n   0x000000000008a82f <+1515>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a836 <+1522>:\tjmp    0x8a505 <main+705>\n   0x000000000008a83b <+1527>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a840 <+1532>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a845 <+1537>:\tsub    rsp,0x10\n   0x000000000008a849 <+1541>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a84d <+1545>:\tpush   r8\n   0x000000000008a84f <+1547>:\tpush   rsi\n   0x000000000008a850 <+1548>:\tpush   rbx\n   0x000000000008a851 <+1549>:\tpush   rcx\n   0x000000000008a852 <+1550>:\tcall   0x84cdc <stub _iso_stub_AllocateDoubleStub>\n   0x000000000008a857 <+1555>:\tpop    rcx\n   0x000000000008a858 <+1556>:\tpop    rbx\n   0x000000000008a859 <+1557>:\tpop    rsi\n   0x000000000008a85a <+1558>:\tpop    r8\n   0x000000000008a85c <+1560>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008a860 <+1564>:\tadd    rsp,0x10\n   0x000000000008a864 <+1568>:\tjmp    0x8a5d5 <main+913>\n   0x000000000008a869 <+1573>:\tsub    rsp,0x30\n   0x000000000008a86d <+1577>:\tmovups XMMWORD PTR [rsp],xmm0\n   0x000000000008a871 <+1581>:\tmovups XMMWORD PTR [rsp+0x10],xmm1\n   0x000000000008a876 <+1586>:\tmovups XMMWORD PTR [rsp+0x20],xmm2\n   0x000000000008a87b <+1591>:\tpush   r8\n   0x000000000008a87d <+1593>:\tpush   rsi\n   0x000000000008a87e <+1594>:\tpush   rbx\n   0x000000000008a87f <+1595>:\tpush   rcx\n   0x000000000008a880 <+1596>:\tcall   0x84cdc <stub _iso_stub_AllocateDoubleStub>\n\n32\t      for (int incomingPage in graph[i]) {\n   0x000000000008a476 <+562>:\tmov    rsi,rax\n   0x000000000008a479 <+565>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a47d <+569>:\tmov    QWORD PTR [rbp-0x20],rsi\n   0x000000000008a481 <+573>:\tmov    rax,QWORD PTR [rdx+0xf]\n   0x000000000008a485 <+577>:\tmov    r8,rax\n   0x000000000008a488 <+580>:\tsar    r8,1\n   0x000000000008a48b <+583>:\tmov    QWORD PTR [rbp-0x48],r8\n   0x000000000008a48f <+587>:\tmovsd  xmm0,QWORD PTR [rbp-0x60]\n   0x000000000008a494 <+592>:\tmov    r9,QWORD PTR [rbp-0x18]\n   0x000000000008a498 <+596>:\txor    r13d,r13d\n   0x000000000008a49b <+599>:\tmov    r10,QWORD PTR [rbp-0x8]\n   0x000000000008a49f <+603>:\tmov    r12,QWORD PTR [rbp-0x28]\n   0x000000000008a4a3 <+607>:\tmov    QWORD PTR [rbp-0x40],r13\n   0x000000000008a4a7 <+611>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a4ab <+615>:\tjbe    0x8a81e <main+1498>\n   0x000000000008a4b1 <+621>:\tcmp    r13,r12\n   0x000000000008a4b4 <+624>:\tjge    0x8a6ad <main+1129>\n   0x000000000008a4ba <+630>:\tmov    rax,QWORD PTR [r10+0xf]\n   0x000000000008a4be <+634>:\tsar    rax,1\n   0x000000000008a4c1 <+637>:\tmov    rbx,r13\n   0x000000000008a4c4 <+640>:\tcmp    rbx,rax\n   0x000000000008a4c7 <+643>:\tjae    0x8a82a <main+1510>\n   0x000000000008a4cd <+649>:\tmov    rax,QWORD PTR [r10+0x17]\n   0x000000000008a4d1 <+653>:\tmov    rdi,QWORD PTR [rax+r13*8+0x17]\n   0x000000000008a4d6 <+658>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000008a4d9 <+661>:\tshr    ecx,0xc\n   0x000000000008a4dc <+664>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a4e0 <+668>:\tcall   QWORD PTR [rax+rcx*8+0x77a8]\n   0x000000000008a4e7 <+675>:\tmov    QWORD PTR [rbp-0x50],rax\n   0x000000000008a4eb <+679>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a4ef <+683>:\tmov    rbx,QWORD PTR [rbp-0x20]\n   0x000000000008a4f3 <+687>:\tmov    r8,QWORD PTR [rbp-0x40]\n   0x000000000008a4f7 <+691>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a4fb <+695>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a4ff <+699>:\tjbe    0x8a82f <main+1515>\n   0x000000000008a505 <+705>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a508 <+708>:\tshr    ecx,0xc\n   0x000000000008a50b <+711>:\tmov    rdi,rax\n   0x000000000008a50e <+714>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a512 <+718>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a515 <+721>:\ttest   al,0x10\n   0x000000000008a517 <+723>:\tjne    0x8a616 <main+978>\n   0x000000000008a51d <+729>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a521 <+733>:\tmov    rbx,QWORD PTR [rbp-0x20]\n   0x000000000008a525 <+737>:\tmov    r8,QWORD PTR [rbp-0x40]\n   0x000000000008a529 <+741>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a52d <+745>:\tmov    rsi,QWORD PTR [rbp-0x18]\n   0x000000000008a531 <+749>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a534 <+752>:\tshr    ecx,0xc\n   0x000000000008a537 <+755>:\tmov    rdi,rax\n   0x000000000008a53a <+758>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a53e <+762>:\tcall   QWORD PTR [rax+rcx*8-0x80]\n\n33\t        newPageRanks[i] += pageRanks[incomingPage] / outDegrees[incomingPage];\n34\t      }\n35\t      // Apply damping factor\n36\t      newPageRanks[i] = (1 - dampingFactor) / numPages + dampingFactor * newPageRanks[i];\n37\t    }\n38\t\n39\t    pageRanks = newPageRanks;\n40\t  }\n41\t\n42\t  // Print final PageRank values\n43\t  print('Final PageRank values after $maxIterations iterations:');\n   0x000000000008a542 <+766>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a546 <+770>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a54a <+774>:\tmov    rdx,QWORD PTR [rcx+rsi*8+0x17]\n   0x000000000008a54f <+779>:\tmov    rdi,rax\n   0x000000000008a552 <+782>:\tsar    rdi,1\n   0x000000000008a555 <+785>:\tjae    0x8a55c <main+792>\n   0x000000000008a557 <+787>:\tmov    rdi,QWORD PTR [rdi+rdi*1+0x8]\n   0x000000000008a55c <+792>:\tmov    rax,QWORD PTR [rbp-0x48]\n   0x000000000008a560 <+796>:\tmov    rbx,rdi\n   0x000000000008a563 <+799>:\tcmp    rbx,rax\n   0x000000000008a566 <+802>:\tjae    0x8a83b <main+1527>\n   0x000000000008a56c <+808>:\tmov    r8,QWORD PTR [rbp-0x10]\n   0x000000000008a570 <+812>:\tmov    r9,QWORD PTR [r8+rdi*8+0x17]\n   0x000000000008a575 <+817>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a579 <+821>:\tmov    rbx,rdi\n   0x000000000008a57c <+824>:\tcmp    rbx,rax\n   0x000000000008a57f <+827>:\tjae    0x8a840 <main+1532>\n   0x000000000008a585 <+833>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a589 <+837>:\tmov    rax,QWORD PTR [rbx+rdi*8+0x17]\n   0x000000000008a58e <+842>:\tsar    rax,1\n   0x000000000008a591 <+845>:\tjae    0x8a598 <main+852>\n   0x000000000008a593 <+847>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a598 <+852>:\txorps  xmm0,xmm0\n   0x000000000008a59b <+855>:\tcvtsi2sd xmm0,rax\n   0x000000000008a5a0 <+860>:\tmovsd  xmm1,QWORD PTR [r9+0x7]\n   0x000000000008a5a6 <+866>:\tdivsd  xmm1,xmm0\n   0x000000000008a5aa <+870>:\tmovsd  xmm0,QWORD PTR [rdx+0x7]\n   0x000000000008a5af <+875>:\taddsd  xmm0,xmm1\n   0x000000000008a5b3 <+879>:\tmov    rax,QWORD PTR [r14+0x48]\n   0x000000000008a5b7 <+883>:\tadd    rax,0x10\n   0x000000000008a5bb <+887>:\tcmp    rax,QWORD PTR [r14+0x50]\n   0x000000000008a5bf <+891>:\tjae    0x8a845 <main+1537>\n   0x000000000008a5c5 <+897>:\tmov    QWORD PTR [r14+0x48],rax\n   0x000000000008a5c9 <+901>:\tsub    rax,0xf\n   0x000000000008a5cd <+905>:\tmov    QWORD PTR [rax-0x1],0x3e15c\n   0x000000000008a5d5 <+913>:\tmovsd  QWORD PTR [rax+0x7],xmm0\n   0x000000000008a5da <+918>:\tmov    rdx,rcx\n   0x000000000008a5dd <+921>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a5e2 <+926>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a5e6 <+930>:\ttest   al,0x1\n   0x000000000008a5e8 <+932>:\tje     0x8a601 <main+957>\n   0x000000000008a5ea <+934>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a5ee <+938>:\tshr    r11d,0x2\n   0x000000000008a5f2 <+942>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a5f6 <+946>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a5fa <+950>:\tje     0x8a601 <main+957>\n   0x000000000008a5fc <+952>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a601 <+957>:\tmov    rdx,r8\n   0x000000000008a604 <+960>:\tmov    r8,rsi\n   0x000000000008a607 <+963>:\tmov    rsi,rbx\n   0x000000000008a60a <+966>:\tmov    rbx,rcx\n   0x000000000008a60d <+969>:\tmov    rax,QWORD PTR [rbp-0x50]\n   0x000000000008a611 <+973>:\tjmp    0x8a4fb <main+695>\n   0x000000000008a616 <+978>:\tmov    r8,QWORD PTR [rbp-0x10]\n   0x000000000008a61a <+982>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a61e <+986>:\tmov    rsi,QWORD PTR [rbp-0x40]\n   0x000000000008a622 <+990>:\tmovsd  xmm0,QWORD PTR [rbp-0x60]\n   0x000000000008a627 <+995>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a62b <+999>:\tmovsd  xmm1,QWORD PTR [r15+0x7df]\n   0x000000000008a634 <+1008>:\tmov    rax,QWORD PTR [rcx+rsi*8+0x17]\n   0x000000000008a639 <+1013>:\tmovsd  xmm2,QWORD PTR [rax+0x7]\n   0x000000000008a63e <+1018>:\tmulsd  xmm2,xmm1\n   0x000000000008a642 <+1022>:\taddsd  xmm2,xmm0\n   0x000000000008a646 <+1026>:\tmov    rax,QWORD PTR [r14+0x48]\n   0x000000000008a64a <+1030>:\tadd    rax,0x10\n   0x000000000008a64e <+1034>:\tcmp    rax,QWORD PTR [r14+0x50]\n   0x000000000008a652 <+1038>:\tjae    0x8a869 <main+1573>\n   0x000000000008a658 <+1044>:\tmov    QWORD PTR [r14+0x48],rax\n   0x000000000008a65c <+1048>:\tsub    rax,0xf\n   0x000000000008a660 <+1052>:\tmov    QWORD PTR [rax-0x1],0x3e15c\n   0x000000000008a668 <+1060>:\tmovsd  QWORD PTR [rax+0x7],xmm2\n   0x000000000008a66d <+1065>:\tmov    rdx,rcx\n   0x000000000008a670 <+1068>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a675 <+1073>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a679 <+1077>:\ttest   al,0x1\n   0x000000000008a67b <+1079>:\tje     0x8a694 <main+1104>\n   0x000000000008a67d <+1081>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a681 <+1085>:\tshr    r11d,0x2\n   0x000000000008a685 <+1089>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a689 <+1093>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a68d <+1097>:\tje     0x8a694 <main+1104>\n   0x000000000008a68f <+1099>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a694 <+1104>:\tadd    rsi,0x1\n   0x000000000008a698 <+1108>:\tmov    r13,rsi\n   0x000000000008a69b <+1111>:\tmov    rdx,r8\n   0x000000000008a69e <+1114>:\tmov    rsi,rcx\n   0x000000000008a6a1 <+1117>:\tmov    r9,rbx\n   0x000000000008a6a4 <+1120>:\tmov    r8,QWORD PTR [rbp-0x48]\n   0x000000000008a6a8 <+1124>:\tjmp    0x8a49b <main+599>\n   0x000000000008a6ad <+1129>:\tmov    rcx,rsi\n   0x000000000008a6b0 <+1132>:\tmov    rbx,r9\n   0x000000000008a6b3 <+1135>:\tmovsd  xmm1,QWORD PTR [r15+0x7df]\n   0x000000000008a6bc <+1144>:\tmov    rax,QWORD PTR [rbp-0x30]\n   0x000000000008a6c0 <+1148>:\tadd    rax,0x1\n   0x000000000008a6c4 <+1152>:\tmov    r9,rcx\n   0x000000000008a6c7 <+1155>:\tmov    r8,rax\n   0x000000000008a6ca <+1158>:\tmovaps xmm1,xmm0\n   0x000000000008a6cd <+1161>:\tmov    rax,rbx\n   0x000000000008a6d0 <+1164>:\tjmp    0x8a43c <main+504>\n   0x000000000008a6d5 <+1169>:\tmov    r8,r9\n   0x000000000008a6d8 <+1172>:\tmov    rdi,QWORD PTR [r15+0x7e7]\n   0x000000000008a6df <+1179>:\tcall   0x8a9d0 <print>\n   0x000000000008a6e4 <+1184>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a6e8 <+1188>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a6ec <+1192>:\tsar    rcx,1\n   0x000000000008a6ef <+1195>:\tmov    QWORD PTR [rbp-0x38],rcx\n   0x000000000008a6f3 <+1199>:\txor    esi,esi\n   0x000000000008a6f5 <+1201>:\tmov    rdx,QWORD PTR [rbp-0x28]\n   0x000000000008a6f9 <+1205>:\tmov    QWORD PTR [rbp-0x30],rsi\n   0x000000000008a6fd <+1209>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a701 <+1213>:\tjbe    0x8a8a1 <main+1629>\n   0x000000000008a707 <+1219>:\tcmp    rsi,rdx\n   0x000000000008a70a <+1222>:\tjge    0x8a7c1 <main+1405>\n   0x000000000008a710 <+1228>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a714 <+1232>:\tmov    r10d,0x8\n   0x000000000008a71a <+1238>:\tcall   0x84d5c <stub _iso_stub_AllocateArrayStub>\n\n44\t  for (int i = 0; i < numPages; i++) {\n   0x000000000008a885 <+1601>:\tpop    rcx\n   0x000000000008a886 <+1602>:\tpop    rbx\n   0x000000000008a887 <+1603>:\tpop    rsi\n   0x000000000008a888 <+1604>:\tpop    r8\n   0x000000000008a88a <+1606>:\tmovups xmm0,XMMWORD PTR [rsp]\n   0x000000000008a88e <+1610>:\tmovups xmm1,XMMWORD PTR [rsp+0x10]\n   0x000000000008a893 <+1615>:\tmovups xmm2,XMMWORD PTR [rsp+0x20]\n   0x000000000008a898 <+1620>:\tadd    rsp,0x30\n   0x000000000008a89c <+1624>:\tjmp    0x8a668 <main+1060>\n   0x000000000008a8a1 <+1629>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a8a8 <+1636>:\tjmp    0x8a707 <main+1219>\n   0x000000000008a8ad <+1641>:\tcall   0x852a0 <stub _iso_stub_RangeErrorSharedWithoutFPURegsStub>\n   0x000000000008a8b2:\tint3\n   0x000000000008a8b3:\tint3\n\n45\t    print('Page $i: ${pageRanks[i].toStringAsFixed(6)}');\n   0x000000000008a71f <+1243>:\tmov    rcx,rax\n   0x000000000008a722 <+1246>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a726 <+1250>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a72d <+1257>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a731 <+1261>:\tmov    rdx,QWORD PTR [rbp-0x30]\n   0x000000000008a735 <+1265>:\tmov    rax,rdx\n   0x000000000008a738 <+1268>:\tadd    rax,rax\n   0x000000000008a73b <+1271>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a73f <+1275>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a746 <+1282>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008a74a <+1286>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a74e <+1290>:\tmov    rbx,rdx\n   0x000000000008a751 <+1293>:\tcmp    rbx,rax\n   0x000000000008a754 <+1296>:\tjae    0x8a8ad <main+1641>\n   0x000000000008a75a <+1302>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a75e <+1306>:\tmov    rdi,QWORD PTR [rax+rdx*8+0x17]\n   0x000000000008a763 <+1311>:\tmov    esi,0x6\n   0x000000000008a768 <+1316>:\tcall   0x8a8b4 <double.toStringAsFixed>\n   0x000000000008a76d <+1321>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a771 <+1325>:\tlea    r13,[rdx+0x2f]\n   0x000000000008a775 <+1329>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a779 <+1333>:\ttest   al,0x1\n   0x000000000008a77b <+1335>:\tje     0x8a794 <main+1360>\n   0x000000000008a77d <+1337>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a781 <+1341>:\tshr    r11d,0x2\n   0x000000000008a785 <+1345>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a789 <+1349>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a78d <+1353>:\tje     0x8a794 <main+1360>\n   0x000000000008a78f <+1355>:\tcall   0x83374 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a794 <+1360>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a798 <+1364>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a79c <+1368>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a7a1 <+1373>:\tmov    rdi,rax\n   0x000000000008a7a4 <+1376>:\tcall   0x8a9d0 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_3.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() async {\n  // Define an async generator that yields numbers\n  Stream<int> countUpTo(int max) async* {\n    for (int i = 1; i <= max; i++) {\n      await Future.delayed(Duration(milliseconds: 100)); // Simulate async work\n      yield i;\n    }\n  }\n\n  // Define another async generator that uses yield* to delegate\n  Stream<int> asyncGenerator() async* {\n    yield* countUpTo(3); // Delegate to countUpTo generator\n    yield* countUpTo(5); // Delegate again with different parameter\n  }\n\n  // Consume and print values from the async generator\n  await for (final value in asyncGenerator()) {\n    print('Yielded value: $value');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a460 <+52>:\tmov    rbx,QWORD PTR [r15+0x7bf]\n   0x000000000008a467 <+59>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a46b <+63>:\tmov    QWORD PTR [rbp-0x60],rax\n   0x000000000008a46f <+67>:\tcall   0x84360 <stub _iso_stub_AllocateClosureStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_5.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define records for different data classes\n  final person = (name: 'Alice', age: 30, email: 'alice@example.com');\n  final product = (id: 101, title: 'Dart Programming Book', price: 49.99);\n  final coordinate = (latitude: 37.7749, longitude: -122.4194);\n\n  // Print record data\n  print('Person: ${person.name}, ${person.age}, ${person.email}');\n  print('Product: ${product.id}, ${product.title}, \\$${product.price}');\n  print('Coordinate: ${coordinate.latitude}, ${coordinate.longitude}');\n\n  // Demonstrate record destructuring\n  final (:name, :age, :email) = person;\n  print('Destructured: $name is $age years old. Contact: $email');\n\n  // Show record comparison (value-based equality)\n  final anotherPerson = (name: 'Alice', age: 30, email: 'alice@example.com');\n  print('Records are equal: ${person == anotherPerson}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a303 <+431>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a307 <+435>:\tmov    rsp,rbp\n   0x000000000008a30a <+438>:\tpop    rbp\n   0x000000000008a30b <+439>:\tret\n   0x000000000008a30c <+440>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a313 <+447>:\tjmp    0x8a166 <main+18>\n\n2\tvoid main() {\n3\t  // Define records for different data classes\n4\t  final person = (name: 'Alice', age: 30, email: 'alice@example.com');\n   0x000000000008a21d <+201>:\tmov    ebx,0x3c\n   0x000000000008a222 <+206>:\tmov    rdx,QWORD PTR [r15+0x7ff]\n   0x000000000008a229 <+213>:\tmov    rcx,QWORD PTR [r15+0x807]\n   0x000000000008a230 <+220>:\tmov    r10d,0x20006\n   0x000000000008a236 <+226>:\tcall   0x838c4 <stub _iso_stub_AllocateRecord3NamedStub>\n   0x000000000008a23b <+231>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a23f <+235>:\tmov    r10d,0xc\n   0x000000000008a245 <+241>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a249 <+245>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n5\t  final product = (id: 101, title: 'Dart Programming Book', price: 49.99);\n6\t  final coordinate = (latitude: 37.7749, longitude: -122.4194);\n7\t\n8\t  // Print record data\n9\t  print('Person: ${person.name}, ${person.age}, ${person.email}');\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x20\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a30c <main+440>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a16d <+25>:\tcall   0x8a318 <print>\n   0x000000000008a172 <+30>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a176 <+34>:\tmov    r10d,0xc\n   0x000000000008a17c <+40>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n10\t  print('Product: ${product.id}, ${product.title}, \\$${product.price}');\n   0x000000000008a181 <+45>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a188 <+52>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a18c <+56>:\tmov    QWORD PTR [rax+0x1f],0xca\n   0x000000000008a194 <+64>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a19b <+71>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a19f <+75>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a1a6 <+82>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a1aa <+86>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a1b1 <+93>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a1b5 <+97>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a1bc <+104>:\tmov    QWORD PTR [rax+0x3f],r11\n   0x000000000008a1c0 <+108>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1c4 <+112>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1c9 <+117>:\tmov    rdi,rax\n   0x000000000008a1cc <+120>:\tcall   0x8a318 <print>\n   0x000000000008a1d1 <+125>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1d5 <+129>:\tmov    r10d,0x8\n   0x000000000008a1db <+135>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n11\t  print('Coordinate: ${coordinate.latitude}, ${coordinate.longitude}');\n   0x000000000008a1e0 <+140>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a1e7 <+147>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1eb <+151>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a1f2 <+158>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a1f6 <+162>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a1fd <+169>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a201 <+173>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a208 <+180>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a20c <+184>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a210 <+188>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a215 <+193>:\tmov    rdi,rax\n   0x000000000008a218 <+196>:\tcall   0x8a318 <print>\n\n12\t\n13\t  // Demonstrate record destructuring\n14\t  final (:name, :age, :email) = person;\n15\t  print('Destructured: $name is $age years old. Contact: $email');\n   0x000000000008a24e <+250>:\tmov    r11,QWORD PTR [r15+0x80f]\n   0x000000000008a255 <+257>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a259 <+261>:\tmov    r11,QWORD PTR [r15+0x807]\n   0x000000000008a260 <+268>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a264 <+272>:\tmov    r11,QWORD PTR [r15+0x817]\n   0x000000000008a26b <+279>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a26f <+283>:\tmov    QWORD PTR [rax+0x2f],0x3c\n   0x000000000008a277 <+291>:\tmov    r11,QWORD PTR [r15+0x81f]\n   0x000000000008a27e <+298>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a282 <+302>:\tmov    r11,QWORD PTR [r15+0x7ff]\n   0x000000000008a289 <+309>:\tmov    QWORD PTR [rax+0x3f],r11\n   0x000000000008a28d <+313>:\tmov    rdi,QWORD PTR [r15+0x827]\n   0x000000000008a294 <+320>:\tcall   0x8a318 <print>\n   0x000000000008a299 <+325>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a29d <+329>:\tmov    r10d,0x4\n   0x000000000008a2a3 <+335>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n16\t\n17\t  // Show record comparison (value-based equality)\n18\t  final anotherPerson = (name: 'Alice', age: 30, email: 'alice@example.com');\n   0x000000000008a2a8 <+340>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a2ac <+344>:\tmov    r11,QWORD PTR [r15+0x82f]\n   0x000000000008a2b3 <+351>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2b7 <+355>:\tmov    ebx,0x3c\n   0x000000000008a2bc <+360>:\tmov    rdx,QWORD PTR [r15+0x7ff]\n   0x000000000008a2c3 <+367>:\tmov    rcx,QWORD PTR [r15+0x807]\n   0x000000000008a2ca <+374>:\tmov    r10d,0x20006\n   0x000000000008a2d0 <+380>:\tcall   0x838c4 <stub _iso_stub_AllocateRecord3NamedStub>\n\n19\t  print('Records are equal: ${person == anotherPerson}');\n   0x000000000008a2d5 <+385>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a2d9 <+389>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a2de <+394>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2e2 <+398>:\tcall   0x7ad70 <_Record.==>\n   0x000000000008a2e7 <+403>:\tmov    rcx,rax\n   0x000000000008a2ea <+406>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a2ee <+410>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a2f2 <+414>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2f6 <+418>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a2fb <+423>:\tmov    rdi,rax\n   0x000000000008a2fe <+426>:\tcall   0x8a318 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_6.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Create sample nested nullable data structure\n  final Map<String, Map<String, List<String>?>>? userPreferences = {\n    'favorites': {\n      'colors': ['blue', 'green'],\n      'numbers': null\n    }\n  };\n\n  // Complex null-aware expressions with multiple operations\n  final firstFavoriteColor = userPreferences?['favorites']?['colors']?[0] ?? 'No color chosen';\n  final favoriteNumbersCount = userPreferences?['favorites']?['numbers']?.length ?? 0;\n  final secondaryColor = userPreferences?['favorites']?['colors']?[1]?.toUpperCase() ?? 'N/A';\n\n  // Null-aware method invocation with cascading\n  final processedColors = userPreferences\n      ?.containsKey('favorites')\n      ?.toString()\n      ?.toUpperCase();\n\n  // Print results\n  print('Primary color: $firstFavoriteColor');\n  print('Number of favorite numbers: $favoriteNumbersCount');\n  print('Secondary color: $secondaryColor');\n  print('Contains favorites (upper): $processedColors');\n\n  // Null-aware assignment demonstration\n  List<String>? currentList;\n  (currentList ??= [])..add('default item');\n  print('Current list contents: $currentList');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a1db <+71>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a1df <+75>:\tmov    QWORD PTR [rax+0x17],rcx\n   0x000000000008a1e3 <+79>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a1eb <+87>:\tmov    rdx,QWORD PTR [rbp+0x10]\n   0x000000000008a1ef <+91>:\tmov    QWORD PTR [rax+0xf],rdx\n   0x000000000008a1f3 <+95>:\tmov    rdx,QWORD PTR [rcx+0x7]\n   0x000000000008a1f7 <+99>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a1fb <+103>:\tmov    rsp,rbp\n   0x000000000008a1fe <+106>:\tpop    rbp\n   0x000000000008a1ff <+107>:\tret\n   0x000000000008a200 <+108>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a207 <+115>:\tjmp    0x8a1a6 <new ByteData+18>\n   0x000000000008a209:\tint3\n   0x000000000008a20a:\tint3\n   0x000000000008a20b:\tint3\n   0x000000000008a20c <+0>:\tmov    r8d,0xa831c\n   0x000000000008a212 <+6>:\tjmp    0x83da0 <stub _iso_stub_AllocateObjectStub>\n   0x000000000008a217:\tint3\n   0x000000000008a218 <+0>:\tpush   rbp\n   0x000000000008a219 <+1>:\tmov    rbp,rsp\n   0x000000000008a21c <+4>:\tsub    rsp,0x30\n   0x000000000008a220 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a224 <+12>:\tjbe    0x8a659 <main+1089>\n   0x000000000008a22a <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a22e <+22>:\tmov    r10d,0x4\n   0x000000000008a234 <+28>:\tcall   0x84d30 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a239 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a23d <+37>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a244 <+44>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a248 <+48>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a24c <+52>:\tmov    r10d,0x8\n   0x000000000008a252 <+58>:\tcall   0x84d30 <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_7.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  final dog = Dog();\n  dog.speak(); // Outputs: Animal makes a sound. Dog barks loudly!\n}\n\nclass Animal {\n  void speak() {\n    print('Animal makes a sound.');\n  }\n}\n\nmixin Loud on Animal {\n  @override\n  void speak() {\n    super.speak(); // Super call to Animal's speak()\n    print('Dog barks loudly!');\n  }\n}\n\nclass Dog extends Animal with Loud {}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a16f <+27>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a173 <+31>:\tmov    rsp,rbp\n   0x000000000008a176 <+34>:\tpop    rbp\n   0x000000000008a177 <+35>:\tret\n   0x000000000008a178 <+36>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a17f <+43>:\tjmp    0x8a162 <main+14>\n   0x000000000008a181:\tint3\n   0x000000000008a182:\tint3\n   0x000000000008a183:\tint3\n\n2\tvoid main() {\n3\t  final dog = Dog();\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a178 <main+36>\n   0x000000000008a162 <+14>:\tcall   0x8a220 <new Dog>\n\n4\t  dog.speak(); // Outputs: Animal makes a sound. Dog barks loudly!\n   0x000000000008a167 <+19>:\tmov    rdi,rax\n   0x000000000008a16a <+22>:\tcall   0x8a184 <Loud.speak>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_8.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define a simple function to demonstrate tear-offs\n  int multiply(int a, int b) => a * b;\n  \n  // Create a tear-off by referencing the function without parentheses\n  var multiplyTearOff = multiply;\n  \n  // Use the tear-off to call the function\n  final result = multiplyTearOff(7, 6);\n  print('Result of tear-off call: $result'); // Output: Result of tear-off call: 42\n\n  // Demonstrate tear-off with a function that takes parameters\n  String greet(String name) => 'Hello, $name!';\n  var greetTearOff = greet;\n  print(greetTearOff('Dart Developer')); // Output: Hello, Dart Developer!\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a17a <+38>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a17e <+42>:\tmov    rsp,rbp\n   0x000000000008a181 <+45>:\tpop    rbp\n   0x000000000008a182 <+46>:\tret\n   0x000000000008a183 <+47>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a18a <+54>:\tjmp    0x8a162 <main+14>\n\n2\tvoid main() {\n3\t  // Define a simple function to demonstrate tear-offs\n4\t  int multiply(int a, int b) => a * b;\n5\t  \n6\t  // Create a tear-off by referencing the function without parentheses\n7\t  var multiplyTearOff = multiply;\n8\t  \n9\t  // Use the tear-off to call the function\n10\t  final result = multiplyTearOff(7, 6);\n11\t  print('Result of tear-off call: $result'); // Output: Result of tear-off call: 42\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a183 <main+47>\n   0x000000000008a162 <+14>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a169 <+21>:\tcall   0x8a18c <print>\n\n12\t\n13\t  // Demonstrate tear-off with a function that takes parameters\n14\t  String greet(String name) => 'Hello, $name!';\n15\t  var greetTearOff = greet;\n16\t  print(greetTearOff('Dart Developer')); // Output: Hello, Dart Developer!\n   0x000000000008a16e <+26>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008a175 <+33>:\tcall   0x8a18c <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_10.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Spread operator with lists\n  final list1 = [1, 2, 3];\n  final list2 = [0, ...list1, 4, 5];\n  print('Combined list: $list2');\n\n  // Spread operator with sets\n  final set1 = {1, 2, 3};\n  final set2 = {0, ...set1, 3, 4}; // Duplicate '3' will be removed\n  print('Combined set: $set2');\n\n  // Null-aware spread operator\n  List<int>? nullableList;\n  final listWithNull = [1, 2, ...?nullableList, 3];\n  print('List with null-aware spread: $listWithNull');\n\n  // Spread with empty collections\n  final emptyList = <int>[];\n  final resultList = [1, ...emptyList, 2];\n  print('List with empty spread: $resultList');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a292 <+170>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a296 <+174>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a29a <+178>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a29e <+182>:\tmov    rbx,QWORD PTR [rdx+0xf]\n   0x000000000008a2a2 <+186>:\tsar    rcx,1\n   0x000000000008a2a5 <+189>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a2a9 <+193>:\tsar    rbx,1\n   0x000000000008a2ac <+196>:\tcmp    rcx,rbx\n   0x000000000008a2af <+199>:\tjne    0x8a2bd <main+213>\n   0x000000000008a2b5 <+205>:\tmov    rdi,rax\n   0x000000000008a2b8 <+208>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a2bd <+213>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a2c1 <+217>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a2c5 <+221>:\tmov    rdx,rcx\n   0x000000000008a2c8 <+224>:\tadd    rdx,0x1\n   0x000000000008a2cc <+228>:\tmov    QWORD PTR [rbp-0x28],rdx\n   0x000000000008a2d0 <+232>:\tmov    rbx,rdx\n   0x000000000008a2d3 <+235>:\tadd    rbx,rbx\n   0x000000000008a2d6 <+238>:\tmov    QWORD PTR [rax+0xf],rbx\n   0x000000000008a2da <+242>:\tmov    rbx,QWORD PTR [rax+0x17]\n   0x000000000008a2de <+246>:\tmov    QWORD PTR [rbx+rcx*8+0x17],0x8\n   0x000000000008a2e7 <+255>:\tmov    rcx,QWORD PTR [rbx+0xf]\n   0x000000000008a2eb <+259>:\tsar    rcx,1\n   0x000000000008a2ee <+262>:\tcmp    rdx,rcx\n   0x000000000008a2f1 <+265>:\tjne    0x8a2ff <main+279>\n   0x000000000008a2f7 <+271>:\tmov    rdi,rax\n   0x000000000008a2fa <+274>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a2ff <+279>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a303 <+283>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a307 <+287>:\tmov    rdx,rcx\n   0x000000000008a30a <+290>:\tadd    rdx,0x1\n   0x000000000008a30e <+294>:\tmov    rbx,rdx\n   0x000000000008a311 <+297>:\tadd    rbx,rbx\n   0x000000000008a314 <+300>:\tmov    QWORD PTR [rax+0xf],rbx\n   0x000000000008a318 <+304>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a31c <+308>:\tmov    QWORD PTR [rdx+rcx*8+0x17],0xa\n   0x000000000008a325 <+317>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a329 <+321>:\tmov    r10d,0x4\n   0x000000000008a32f <+327>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a498 <+688>:\tmov    rcx,rax\n   0x000000000008a49b <+691>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a49f <+695>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a4a3 <+699>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a4a7 <+703>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a4af <+711>:\tmov    rdi,rcx\n   0x000000000008a4b2 <+714>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a4b7 <+719>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a4bb <+723>:\tmov    QWORD PTR [rax+0xf],0x6\n   0x000000000008a4c3 <+731>:\tmov    rcx,QWORD PTR [rax+0x17]\n   0x000000000008a4c7 <+735>:\tmov    QWORD PTR [rcx+0x27],0x6\n   0x000000000008a4cf <+743>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a4d3 <+747>:\tmov    r10d,0x4\n   0x000000000008a4d9 <+753>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a55e <+886>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a562 <+890>:\tmov    rcx,QWORD PTR [rax+0xf]\n   0x000000000008a566 <+894>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a56a <+898>:\tmov    rbx,QWORD PTR [rdx+0xf]\n   0x000000000008a56e <+902>:\tsar    rcx,1\n   0x000000000008a571 <+905>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a575 <+909>:\tsar    rbx,1\n   0x000000000008a578 <+912>:\tcmp    rcx,rbx\n   0x000000000008a57b <+915>:\tjne    0x8a589 <main+929>\n   0x000000000008a581 <+921>:\tmov    rdi,rax\n   0x000000000008a584 <+924>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a589 <+929>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a58d <+933>:\tmov    rcx,QWORD PTR [rbp-0x20]\n   0x000000000008a591 <+937>:\tmov    rdx,rcx\n   0x000000000008a594 <+940>:\tadd    rdx,0x1\n   0x000000000008a598 <+944>:\tmov    rbx,rdx\n   0x000000000008a59b <+947>:\tadd    rbx,rbx\n   0x000000000008a59e <+950>:\tmov    QWORD PTR [rax+0xf],rbx\n   0x000000000008a5a2 <+954>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a5a6 <+958>:\tmov    QWORD PTR [rdx+rcx*8+0x17],0x4\n   0x000000000008a5af <+967>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a5b3 <+971>:\tmov    r10d,0x4\n   0x000000000008a5b9 <+977>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n   0x000000000008a231 <+73>:\tmov    rcx,rax\n   0x000000000008a234 <+76>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a238 <+80>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a23c <+84>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a240 <+88>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a248 <+96>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a24c <+100>:\tmov    r10d,0x2\n   0x000000000008a252 <+106>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a257 <+111>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a25b <+115>:\tmov    QWORD PTR [rax+0x17],0x0\n   0x000000000008a263 <+123>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a26a <+130>:\tcall   0x83dc0 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008a510 <+808>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a514 <+812>:\tmov    r10d,0x2\n   0x000000000008a51a <+818>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a51e <+822>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a523 <+827>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a527 <+831>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a52f <+839>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a536 <+846>:\tcall   0x83dc0 <stub _iso_stub_AllocateGrowableArrayStub>\n\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n   0x000000000008a469 <+641>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a46d <+645>:\tmov    r10d,0x4\n   0x000000000008a473 <+651>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a478 <+656>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a47c <+660>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a484 <+668>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a48c <+676>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a493 <+683>:\tcall   0x83dc0 <stub _iso_stub_AllocateGrowableArrayStub>\n\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008a1e8 <+0>:\tpush   rbp\n   0x000000000008a1e9 <+1>:\tmov    rbp,rsp\n   0x000000000008a1ec <+4>:\tsub    rsp,0x30\n   0x000000000008a1f0 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1f4 <+12>:\tjbe    0x8a5eb <main+1027>\n   0x000000000008a1fa <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1fe <+22>:\tmov    r10d,0x6\n   0x000000000008a204 <+28>:\tcall   0x84d00 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a209 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a20d <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a215 <+45>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a21d <+53>:\tmov    QWORD PTR [rax+0x27],0x6\n   0x000000000008a225 <+61>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008a22c <+68>:\tcall   0x83dc0 <stub _iso_stub_AllocateGrowableArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_11.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define sample conditions and data\n  final bool includeExtra = true;\n  final bool skipEven = false;\n  final List<int> numbers = [1, 2, 3, 4, 5];\n  final List<String> fruits = ['apple', 'banana', 'cherry'];\n\n  // List with collection if and for\n  final List<dynamic> combinedList = [\n    'Start',\n    for (int num in numbers) if (num.isOdd) num * 2,\n    if (includeExtra) 'Extra Item',\n    for (String fruit in fruits) fruit.toUpperCase(),\n    if (!skipEven) for (int num in numbers) if (num.isEven) num,\n    'End'\n  ];\n\n  // Print results\n  print('Combined List: $combinedList');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a295 <+321>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a299 <+325>:\tsar    rax,1\n   0x000000000008a29c <+328>:\tjae    0x8a2a3 <main+335>\n   0x000000000008a29e <+330>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a2a3 <+335>:\ttest   al,0x1\n   0x000000000008a2a5 <+337>:\tje     0x8a353 <main+511>\n   0x000000000008a2ab <+343>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a2af <+347>:\tmov    rbx,QWORD PTR [rbp-0x30]\n   0x000000000008a2b3 <+351>:\tshl    rax,1\n   0x000000000008a2b6 <+354>:\tmov    QWORD PTR [rbp-0x40],rax\n   0x000000000008a2ba <+358>:\tmov    rdx,QWORD PTR [rcx+0xf]\n   0x000000000008a2be <+362>:\tsar    rdx,1\n   0x000000000008a2c1 <+365>:\tcmp    rbx,rdx\n   0x000000000008a2c4 <+368>:\tjne    0x8a2d3 <main+383>\n   0x000000000008a2ca <+374>:\tmov    rdi,QWORD PTR [rbp-0x38]\n   0x000000000008a2ce <+378>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a2d3 <+383>:\tmov    r9,QWORD PTR [rbp-0x38]\n   0x000000000008a2d7 <+387>:\tmov    rcx,QWORD PTR [rbp-0x40]\n   0x000000000008a2db <+391>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x000000000008a2df <+395>:\tmov    rdi,rsi\n   0x000000000008a2e2 <+398>:\tadd    rdi,0x1\n   0x000000000008a2e6 <+402>:\tmov    rax,rdi\n   0x000000000008a2e9 <+405>:\tadd    rax,rax\n   0x000000000008a2ec <+408>:\tjno    0x8a2fb <main+423>\n   0x000000000008a2f2 <+414>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a2f7 <+419>:\tmov    QWORD PTR [rax+0x7],rdi\n   0x000000000008a2fb <+423>:\tmov    QWORD PTR [r9+0xf],rax\n   0x000000000008a2ff <+427>:\tmov    rax,rdi\n   0x000000000008a302 <+430>:\tmov    rbx,rsi\n   0x000000000008a305 <+433>:\tcmp    rbx,rax\n   0x000000000008a308 <+436>:\tjae    0x8a6ee <main+1434>\n   0x000000000008a30e <+442>:\tmov    r8,QWORD PTR [r9+0x17]\n   0x000000000008a312 <+446>:\tmov    rax,rcx\n   0x000000000008a315 <+449>:\tadd    rax,rax\n   0x000000000008a318 <+452>:\tjno    0x8a327 <main+467>\n   0x000000000008a31e <+458>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a323 <+463>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a327 <+467>:\tmov    rdx,r8\n   0x000000000008a32a <+470>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a32f <+475>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a333 <+479>:\ttest   al,0x1\n   0x000000000008a335 <+481>:\tje     0x8a34e <main+506>\n   0x000000000008a337 <+483>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a33b <+487>:\tshr    r11d,0x2\n   0x000000000008a33f <+491>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a343 <+495>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a347 <+499>:\tje     0x8a34e <main+506>\n   0x000000000008a349 <+501>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a34e <+506>:\tjmp    0x8a365 <main+529>\n   0x000000000008a353 <+511>:\tmov    r9,QWORD PTR [rbp-0x38]\n   0x000000000008a357 <+515>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a35b <+519>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x000000000008a35f <+523>:\tmov    r8,rcx\n   0x000000000008a362 <+526>:\tmov    rdi,rsi\n   0x000000000008a365 <+529>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a369 <+533>:\tmov    rbx,r9\n   0x000000000008a36c <+536>:\tjmp    0x8a21d <main+201>\n   0x000000000008a371 <+541>:\tmov    r9,rbx\n   0x000000000008a374 <+544>:\tmov    rcx,r8\n   0x000000000008a377 <+547>:\tmov    rsi,rdi\n   0x000000000008a37a <+550>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a37e <+554>:\tsar    rax,1\n   0x000000000008a381 <+557>:\tcmp    rsi,rax\n   0x000000000008a384 <+560>:\tjne    0x8a392 <main+574>\n   0x000000000008a38a <+566>:\tmov    rdi,r9\n   0x000000000008a38d <+569>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a392 <+574>:\tmov    rdi,QWORD PTR [rbp-0x38]\n   0x000000000008a396 <+578>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a39a <+582>:\tmov    rdx,rcx\n   0x000000000008a39d <+585>:\tadd    rdx,0x1\n   0x000000000008a3a1 <+589>:\tmov    rax,rdx\n   0x000000000008a3a4 <+592>:\tadd    rax,rax\n   0x000000000008a3a7 <+595>:\tjno    0x8a3b6 <main+610>\n   0x000000000008a3ad <+601>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a46c <+792>:\tmov    rcx,rax\n   0x000000000008a46f <+795>:\tmov    rax,QWORD PTR [rbp-0x38]\n   0x000000000008a473 <+799>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008a477 <+803>:\tmov    rbx,QWORD PTR [rax+0xf]\n   0x000000000008a47b <+807>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a47f <+811>:\tmov    rsi,QWORD PTR [rdx+0xf]\n   0x000000000008a483 <+815>:\tsar    rbx,1\n   0x000000000008a486 <+818>:\tmov    QWORD PTR [rbp-0x30],rbx\n   0x000000000008a48a <+822>:\tsar    rsi,1\n   0x000000000008a48d <+825>:\tcmp    rbx,rsi\n   0x000000000008a490 <+828>:\tjne    0x8a49e <main+842>\n   0x000000000008a496 <+834>:\tmov    rdi,rax\n   0x000000000008a499 <+837>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a572 <+1054>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a576 <+1058>:\tsar    rax,1\n   0x000000000008a579 <+1061>:\tjae    0x8a580 <main+1068>\n   0x000000000008a57b <+1063>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a580 <+1068>:\ttest   al,0x1\n   0x000000000008a582 <+1070>:\tjne    0x8a61a <main+1222>\n   0x000000000008a588 <+1076>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a58c <+1080>:\tmov    rbx,QWORD PTR [rbp-0x30]\n   0x000000000008a590 <+1084>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a594 <+1088>:\tsar    rax,1\n   0x000000000008a597 <+1091>:\tcmp    rbx,rax\n   0x000000000008a59a <+1094>:\tjne    0x8a5a9 <main+1109>\n   0x000000000008a5a0 <+1100>:\tmov    rdi,QWORD PTR [rbp-0x38]\n   0x000000000008a5a4 <+1104>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a5a9 <+1109>:\tmov    r9,QWORD PTR [rbp-0x38]\n   0x000000000008a5ad <+1113>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x000000000008a5b1 <+1117>:\tmov    rcx,rsi\n   0x000000000008a5b4 <+1120>:\tadd    rcx,0x1\n   0x000000000008a5b8 <+1124>:\tmov    rax,rcx\n   0x000000000008a5bb <+1127>:\tadd    rax,rax\n   0x000000000008a5be <+1130>:\tjno    0x8a5cd <main+1145>\n   0x000000000008a5c4 <+1136>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a5c9 <+1141>:\tmov    QWORD PTR [rax+0x7],rcx\n   0x000000000008a5cd <+1145>:\tmov    QWORD PTR [r9+0xf],rax\n   0x000000000008a5d1 <+1149>:\tmov    rax,rcx\n   0x000000000008a5d4 <+1152>:\tmov    rbx,rsi\n   0x000000000008a5d7 <+1155>:\tcmp    rbx,rax\n   0x000000000008a5da <+1158>:\tjae    0x8a710 <main+1468>\n   0x000000000008a5e0 <+1164>:\tmov    rbx,QWORD PTR [r9+0x17]\n   0x000000000008a5e4 <+1168>:\tmov    rdx,rbx\n   0x000000000008a5e7 <+1171>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a5eb <+1175>:\tlea    r13,[rdx+rsi*8+0x17]\n   0x000000000008a5f0 <+1180>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a5f4 <+1184>:\ttest   al,0x1\n   0x000000000008a5f6 <+1186>:\tje     0x8a60f <main+1211>\n   0x000000000008a5f8 <+1188>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a5fc <+1192>:\tshr    r11d,0x2\n   0x000000000008a600 <+1196>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a604 <+1200>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a608 <+1204>:\tje     0x8a60f <main+1211>\n   0x000000000008a60a <+1206>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a60f <+1211>:\tmov    r8,rbx\n   0x000000000008a612 <+1214>:\tmov    rsi,rcx\n   0x000000000008a615 <+1217>:\tjmp    0x8a629 <main+1237>\n   0x000000000008a61a <+1222>:\tmov    r9,QWORD PTR [rbp-0x38]\n   0x000000000008a61e <+1226>:\tmov    rcx,QWORD PTR [rbp-0x18]\n   0x000000000008a622 <+1230>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x000000000008a626 <+1234>:\tmov    r8,rcx\n   0x000000000008a629 <+1237>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a62d <+1241>:\tmov    rdi,r9\n   0x000000000008a630 <+1244>:\tjmp    0x8a4fa <main+934>\n   0x000000000008a635 <+1249>:\tmov    r9,rdi\n   0x000000000008a638 <+1252>:\tmov    rcx,r8\n   0x000000000008a63b <+1255>:\tmov    rax,QWORD PTR [rcx+0xf]\n   0x000000000008a63f <+1259>:\tsar    rax,1\n   0x000000000008a642 <+1262>:\tcmp    rsi,rax\n   0x000000000008a645 <+1265>:\tjne    0x8a653 <main+1279>\n   0x000000000008a64b <+1271>:\tmov    rdi,r9\n   0x000000000008a64e <+1274>:\tcall   0x53250 <List._growToNextCapacity>\n   0x000000000008a653 <+1279>:\tmov    rdx,QWORD PTR [rbp-0x38]\n   0x000000000008a657 <+1283>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008a65b <+1287>:\tmov    rsi,rcx\n   0x000000000008a65e <+1290>:\tadd    rsi,0x1\n   0x000000000008a662 <+1294>:\tmov    rax,rsi\n   0x000000000008a665 <+1297>:\tadd    rax,rax\n   0x000000000008a668 <+1300>:\tjno    0x8a677 <main+1315>\n   0x000000000008a66e <+1306>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n   0x000000000008a673 <+1311>:\tmov    QWORD PTR [rax+0x7],rsi\n   0x000000000008a677 <+1315>:\tmov    QWORD PTR [rdx+0xf],rax\n   0x000000000008a67b <+1319>:\tmov    rax,rsi\n   0x000000000008a67e <+1322>:\tmov    rbx,rcx\n   0x000000000008a681 <+1325>:\tcmp    rbx,rax\n   0x000000000008a684 <+1328>:\tjae    0x8a715 <main+1473>\n   0x000000000008a68a <+1334>:\tmov    rax,QWORD PTR [rdx+0x17]\n   0x000000000008a68e <+1338>:\tmov    r11,QWORD PTR [r15+0x80f]\n   0x000000000008a695 <+1345>:\tmov    QWORD PTR [rax+rcx*8+0x17],r11\n   0x000000000008a69a <+1350>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a69e <+1354>:\tmov    r10d,0x4\n   0x000000000008a6a4 <+1360>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n285\tin dart:core-patch/growable_array.dart\n286\tin dart:core-patch/growable_array.dart\n287\tin dart:core-patch/growable_array.dart\n288\tin dart:core-patch/growable_array.dart\n289\tin dart:core-patch/growable_array.dart\n290\tin dart:core-patch/growable_array.dart\n291\tin dart:core-patch/growable_array.dart\n292\tin dart:core-patch/growable_array.dart\n293\tin dart:core-patch/growable_array.dart\n294\tin dart:core-patch/growable_array.dart\n295\tin dart:core-patch/growable_array.dart\n296\tin dart:core-patch/growable_array.dart\n297\tin dart:core-patch/growable_array.dart\n298\tin dart:core-patch/growable_array.dart\n299\tin dart:core-patch/growable_array.dart\n300\tin dart:core-patch/growable_array.dart\n301\tin dart:core-patch/growable_array.dart\n302\tin dart:core-patch/growable_array.dart\n303\tin dart:core-patch/growable_array.dart\n304\tin dart:core-patch/growable_array.dart\n305\tin dart:core-patch/growable_array.dart\n306\tin dart:core-patch/growable_array.dart\n307\tin dart:core-patch/growable_array.dart\n308\tin dart:core-patch/growable_array.dart\n309\tin dart:core-patch/growable_array.dart\n310\tin dart:core-patch/growable_array.dart\n311\tin dart:core-patch/growable_array.dart\n312\tin dart:core-patch/growable_array.dart\n313\tin dart:core-patch/growable_array.dart\n314\tin dart:core-patch/growable_array.dart\n315\tin dart:core-patch/growable_array.dart\n316\tin dart:core-patch/growable_array.dart\n317\tin dart:core-patch/growable_array.dart\n318\tin dart:core-patch/growable_array.dart\n319\tin dart:core-patch/growable_array.dart\n320\tin dart:core-patch/growable_array.dart\n321\tin dart:core-patch/growable_array.dart\n322\tin dart:core-patch/growable_array.dart\n323\tin dart:core-patch/growable_array.dart\n324\tin dart:core-patch/growable_array.dart\n325\tin dart:core-patch/growable_array.dart\n326\tin dart:core-patch/growable_array.dart\n327\tin dart:core-patch/growable_array.dart\n328\tin dart:core-patch/growable_array.dart\n329\tin dart:core-patch/growable_array.dart\n330\tin dart:core-patch/growable_array.dart\n331\tin dart:core-patch/growable_array.dart\n332\tin dart:core-patch/growable_array.dart\n333\tin dart:core-patch/growable_array.dart\n334\tin dart:core-patch/growable_array.dart\n335\tin dart:core-patch/growable_array.dart\n336\tin dart:core-patch/growable_array.dart\n337\tin dart:core-patch/growable_array.dart\n338\tin dart:core-patch/growable_array.dart\n339\tin dart:core-patch/growable_array.dart\n340\tin dart:core-patch/growable_array.dart\n341\tin dart:core-patch/growable_array.dart\n342\tin dart:core-patch/growable_array.dart\n343\tin dart:core-patch/growable_array.dart\n344\tin dart:core-patch/growable_array.dart\n345\tin dart:core-patch/growable_array.dart\n346\tin dart:core-patch/growable_array.dart\n347\tin dart:core-patch/growable_array.dart\n348\tin dart:core-patch/growable_array.dart\n349\tin dart:core-patch/growable_array.dart\n350\tin dart:core-patch/growable_array.dart\n351\tin dart:core-patch/growable_array.dart\n352\tin dart:core-patch/growable_array.dart\n353\tin dart:core-patch/growable_array.dart\n354\tin dart:core-patch/growable_array.dart\n355\tin dart:core-patch/growable_array.dart\n356\tin dart:core-patch/growable_array.dart\n357\tin dart:core-patch/growable_array.dart\n358\tin dart:core-patch/growable_array.dart\n359\tin dart:core-patch/growable_array.dart\n360\tin dart:core-patch/growable_array.dart\n361\tin dart:core-patch/growable_array.dart\n362\tin dart:core-patch/growable_array.dart\n363\tin dart:core-patch/growable_array.dart\n364\tin dart:core-patch/growable_array.dart\n365\tin dart:core-patch/growable_array.dart\n366\tin dart:core-patch/growable_array.dart\n367\tin dart:core-patch/growable_array.dart\n368\tin dart:core-patch/growable_array.dart\n369\tin dart:core-patch/growable_array.dart\n370\tin dart:core-patch/growable_array.dart\n371\tin dart:core-patch/growable_array.dart\n372\tin dart:core-patch/growable_array.dart\n373\tin dart:core-patch/growable_array.dart\n374\tin dart:core-patch/growable_array.dart\n375\tin dart:core-patch/growable_array.dart\n376\tin dart:core-patch/growable_array.dart\n377\tin dart:core-patch/growable_array.dart\n378\tin dart:core-patch/growable_array.dart\n379\tin dart:core-patch/growable_array.dart\n380\tin dart:core-patch/growable_array.dart\n381\tin dart:core-patch/growable_array.dart\n382\tin dart:core-patch/growable_array.dart\n383\tin dart:core-patch/growable_array.dart\n384\tin dart:core-patch/growable_array.dart\n385\tin dart:core-patch/growable_array.dart\n386\tin dart:core-patch/growable_array.dart\n387\tin dart:core-patch/growable_array.dart\n388\tin dart:core-patch/growable_array.dart\n389\tin dart:core-patch/growable_array.dart\n390\tin dart:core-patch/growable_array.dart\n391\tin dart:core-patch/growable_array.dart\n392\tin dart:core-patch/growable_array.dart\n393\tin dart:core-patch/growable_array.dart\n394\tin dart:core-patch/growable_array.dart\n395\tin dart:core-patch/growable_array.dart\n396\tin dart:core-patch/growable_array.dart\n397\tin dart:core-patch/growable_array.dart\n398\tin dart:core-patch/growable_array.dart\n399\tin dart:core-patch/growable_array.dart\n400\tin dart:core-patch/growable_array.dart\n401\tin dart:core-patch/growable_array.dart\n402\tin dart:core-patch/growable_array.dart\n403\tin dart:core-patch/growable_array.dart\n404\tin dart:core-patch/growable_array.dart\n405\tin dart:core-patch/growable_array.dart\n406\tin dart:core-patch/growable_array.dart\n407\tin dart:core-patch/growable_array.dart\n408\tin dart:core-patch/growable_array.dart\n409\tin dart:core-patch/growable_array.dart\n410\tin dart:core-patch/growable_array.dart\n411\tin dart:core-patch/growable_array.dart\n412\tin dart:core-patch/growable_array.dart\n413\tin dart:core-patch/growable_array.dart\n414\tin dart:core-patch/growable_array.dart\n415\tin dart:core-patch/growable_array.dart\n416\tin dart:core-patch/growable_array.dart\n417\tin dart:core-patch/growable_array.dart\n418\tin dart:core-patch/growable_array.dart\n419\tin dart:core-patch/growable_array.dart\n420\tin dart:core-patch/growable_array.dart\n421\tin dart:core-patch/growable_array.dart\n422\tin dart:core-patch/growable_array.dart\n423\tin dart:core-patch/growable_array.dart\n424\tin dart:core-patch/growable_array.dart\n425\tin dart:core-patch/growable_array.dart\n426\tin dart:core-patch/growable_array.dart\n427\tin dart:core-patch/growable_array.dart\n428\tin dart:core-patch/growable_array.dart\n429\tin dart:core-patch/growable_array.dart\n430\tin dart:core-patch/growable_array.dart\n431\tin dart:core-patch/growable_array.dart\n432\tin dart:core-patch/growable_array.dart\n433\tin dart:core-patch/growable_array.dart\n434\tin dart:core-patch/growable_array.dart\n435\tin dart:core-patch/growable_array.dart\n436\tin dart:core-patch/growable_array.dart\n437\tin dart:core-patch/growable_array.dart\n438\tin dart:core-patch/growable_array.dart\n439\tin dart:core-patch/growable_array.dart\n440\tin dart:core-patch/growable_array.dart\n441\tin dart:core-patch/growable_array.dart\n442\tin dart:core-patch/growable_array.dart\n443\tin dart:core-patch/growable_array.dart\n444\tin dart:core-patch/growable_array.dart\n445\tin dart:core-patch/growable_array.dart\n446\tin dart:core-patch/growable_array.dart\n447\tin dart:core-patch/growable_array.dart\n448\tin dart:core-patch/growable_array.dart\n449\tin dart:core-patch/growable_array.dart\n450\tin dart:core-patch/growable_array.dart\n451\tin dart:core-patch/growable_array.dart\n452\tin dart:core-patch/growable_array.dart\n453\tin dart:core-patch/growable_array.dart\n454\tin dart:core-patch/growable_array.dart\n455\tin dart:core-patch/growable_array.dart\n456\tin dart:core-patch/growable_array.dart\n457\tin dart:core-patch/growable_array.dart\n458\tin dart:core-patch/growable_array.dart\n459\tin dart:core-patch/growable_array.dart\n460\tin dart:core-patch/growable_array.dart\n461\tin dart:core-patch/growable_array.dart\n462\tin dart:core-patch/growable_array.dart\n463\tin dart:core-patch/growable_array.dart\n464\tin dart:core-patch/growable_array.dart\n465\tin dart:core-patch/growable_array.dart\n466\tin dart:core-patch/growable_array.dart\n467\tin dart:core-patch/growable_array.dart\n468\tin dart:core-patch/growable_array.dart\n469\tin dart:core-patch/growable_array.dart\n470\tin dart:core-patch/growable_array.dart\n471\tin dart:core-patch/growable_array.dart\n472\tin dart:core-patch/growable_array.dart\n473\tin dart:core-patch/growable_array.dart\n474\tin dart:core-patch/growable_array.dart\n475\tin dart:core-patch/growable_array.dart\n476\tin dart:core-patch/growable_array.dart\n477\tin dart:core-patch/growable_array.dart\n478\tin dart:core-patch/growable_array.dart\n479\tin dart:core-patch/growable_array.dart\n480\tin dart:core-patch/growable_array.dart\n481\tin dart:core-patch/growable_array.dart\n482\tin dart:core-patch/growable_array.dart\n483\tin dart:core-patch/growable_array.dart\n484\tin dart:core-patch/growable_array.dart\n485\tin dart:core-patch/growable_array.dart\n486\tin dart:core-patch/growable_array.dart\n487\tin dart:core-patch/growable_array.dart\n488\tin dart:core-patch/growable_array.dart\n489\tin dart:core-patch/growable_array.dart\n490\tin dart:core-patch/growable_array.dart\n491\tin dart:core-patch/growable_array.dart\n492\tin dart:core-patch/growable_array.dart\n493\tin dart:core-patch/growable_array.dart\n494\tin dart:core-patch/growable_array.dart\n495\tin dart:core-patch/growable_array.dart\n496\tin dart:core-patch/growable_array.dart\n497\tin dart:core-patch/growable_array.dart\n498\tin dart:core-patch/growable_array.dart\n499\tin dart:core-patch/growable_array.dart\n500\tin dart:core-patch/growable_array.dart\n501\tin dart:core-patch/growable_array.dart\n502\tin dart:core-patch/growable_array.dart\n503\tin dart:core-patch/growable_array.dart\n504\tin dart:core-patch/growable_array.dart\n505\tin dart:core-patch/growable_array.dart\n506\tin dart:core-patch/growable_array.dart\n507\tin dart:core-patch/growable_array.dart\n508\tin dart:core-patch/growable_array.dart\n509\tin dart:core-patch/growable_array.dart\n510\tin dart:core-patch/growable_array.dart\n511\tin dart:core-patch/growable_array.dart\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n   0x000000000008a1b0 <+92>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a1b4 <+96>:\tmov    r11,QWORD PTR [r15+0x7b7]\n   0x000000000008a1bb <+103>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1bf <+107>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a1c6 <+114>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a1ca <+118>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a1d1 <+125>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a1d5 <+129>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1d9 <+133>:\tmov    r10d,0x2\n   0x000000000008a1df <+139>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a1e4 <+144>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a1e8 <+148>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a1ef <+155>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1f3 <+159>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a1f7 <+163>:\tcall   0x83d2c <stub _iso_stub_AllocateGrowableArrayStub>\n\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008a175 <+33>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a179 <+37>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008a181 <+45>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008a189 <+53>:\tmov    QWORD PTR [rax+0x27],0x6\n   0x000000000008a191 <+61>:\tmov    QWORD PTR [rax+0x2f],0x8\n   0x000000000008a199 <+69>:\tmov    QWORD PTR [rax+0x37],0xa\n   0x000000000008a1a1 <+77>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1a5 <+81>:\tmov    r10d,0x6\n   0x000000000008a1ab <+87>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x48\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a6d6 <main+1410>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0xa\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a6a9 <+1365>:\tmov    r11,QWORD PTR [r15+0x817]\n   0x000000000008a6b0 <+1372>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a6b4 <+1376>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x000000000008a6b8 <+1380>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a6bc <+1384>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a6c0 <+1388>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a6c5 <+1393>:\tmov    rdi,rax\n   0x000000000008a6c8 <+1396>:\tcall   0x8a71c <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_17.dart", "function": "main", "source": "// Dart program demonstrating native assets integration\n// Note: This example simulates native asset usage since Dart doesn't have\n// built-in native asset handling in standalone scripts\n\nimport 'dart:io';\nimport 'dart:typed_data';\n\n@pragma('vm:entry-point')\nvoid main() {\n  print('Native Assets Integration Demo');\n  print('==============================');\n\n  // Simulate loading a native asset (e.g., binary data file)\n  final assetPath = 'example_asset.bin';\n  \n  try {\n    // Read asset file as bytes (simulating native asset loading)\n    final file = File(assetPath);\n    if (!file.existsSync()) {\n      print('Native asset not found at: $assetPath');\n      print('Creating simulated asset for demonstration...');\n      _createSimulatedAsset(assetPath);\n    }\n\n    // Load and process the asset\n    final assetBytes = file.readAsBytesSync();\n    print('Successfully loaded native asset (${assetBytes.length} bytes)');\n    \n    // Process asset data (example: checksum calculation)\n    final checksum = _calculateChecksum(assetBytes);\n    print('Asset checksum: 0x${checksum.toRadixString(16).padLeft(8, '0')}');\n    \n    // Demonstrate parsing structured data from asset\n    if (assetBytes.length >= 12) {\n      final dataView = ByteData.sublistView(assetBytes);\n      final header = dataView.getUint32(0);\n      final version = dataView.getUint16(4);\n      final payloadSize = dataView.getUint32(6);\n      \n      print('Asset header: 0x${header.toRadixString(16)}');\n      print('Version: $version');\n      print('Payload size: $payloadSize bytes');\n    }\n\n  } catch (e) {\n    print('Error loading native asset: $e');\n  }\n}\n\nvoid _createSimulatedAsset(String path) {\n  // Create a sample structured binary asset\n  final byteData = ByteData(12 + 20); // Header + sample payload\n  byteData.setUint32(0, 0x4E415441); // 'NATA' magic number\n  byteData.setUint16(4, 1);          // Version 1\n  byteData.setUint32(6, 20);         // Payload size\n  byteData.setUint64(10, 0xDEADBEEF, Endian.little); // Sample data\n  \n  File(path).writeAsBytesSync(byteData.buffer.asUint8List());\n}\n\nint _calculateChecksum(Uint8List data) {\n  // Simple checksum calculation\n  int checksum = 0;\n  for (final byte in data) {\n    checksum = (checksum + byte) % 0xFFFFFFFF;\n  }\n  return checksum;\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008f7c8 <+0>:\tpush   rbp\n   0x000000000008f7c9 <+1>:\tmov    rbp,rsp\n   0x000000000008f7cc <+4>:\tsub    rsp,0xb8\n   0x000000000008f7d3 <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008f7d7 <+15>:\tjbe    0x8fc08 <main+1088>\n   0x000000000008f7dd <+21>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008f7e4 <+28>:\tcall   0x91b58 <printToConsole>\n   0x000000000008f7e9 <+33>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008f7f0 <+40>:\tcall   0x91b58 <printToConsole>\n   0x000000000008f853 <+139>:\tmov    rdi,QWORD PTR [r15+0x7df]\n   0x000000000008f85a <+146>:\tcall   0x91b58 <printToConsole>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_21.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Define a sync* generator that yields numbers from 0 to 4\n  Iterable<int> generateNumbers() sync* {\n    for (int i = 0; i < 5; i++) {\n      yield i;\n    }\n  }\n\n  // Use the generator and print the results\n  print('Generated numbers:');\n  for (final number in generateNumbers()) {\n    print(number);\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a222 <+206>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a226 <+210>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a22a <+214>:\tjmp    0x8a1b3 <main+95>\n   0x000000000008a22c <+216>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a230 <+220>:\tmov    rsp,rbp\n   0x000000000008a233 <+223>:\tpop    rbp\n   0x000000000008a234 <+224>:\tret\n   0x000000000008a235 <+225>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a23c <+232>:\tjmp    0x8a166 <main+18>\n   0x000000000008a241 <+237>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a248 <+244>:\tjmp    0x8a1bd <main+105>\n   0x000000000008a24d:\tint3\n   0x000000000008a24e:\tint3\n   0x000000000008a24f:\tint3\n   0x000000000008a250 <+0>:\tpush   rbp\n   0x000000000008a251 <+1>:\tmov    rbp,rsp\n   0x000000000008a254 <+4>:\tsub    rsp,0x18\n   0x000000000008a258 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a25c <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a260 <+16>:\tjbe    0x8a2aa <printToConsole+90>\n   0x000000000008a266 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a26a <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a271 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a275 <+37>:\tjne    0x8a287 <printToConsole+55>\n   0x000000000008a27b <+43>:\tmov    rdx,QWORD PTR [r15+0x847]\n   0x000000000008a282 <+50>:\tcall   0x831c8 <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Define a sync* generator that yields numbers from 0 to 4\n4\t  Iterable<int> generateNumbers() sync* {\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x20\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a235 <main+225>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a16d <+25>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a171 <+29>:\tcall   0x84088 <stub _iso_stub_AllocateClosureStub>\n\n5\t    for (int i = 0; i < 5; i++) {\n6\t      yield i;\n7\t    }\n8\t  }\n9\t\n10\t  // Use the generator and print the results\n11\t  print('Generated numbers:');\n12\t  for (final number in generateNumbers()) {\n   0x000000000008a186 <+50>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a18a <+54>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a18e <+58>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a192 <+62>:\tmov    r10,QWORD PTR [r15+0x7c7]\n   0x000000000008a199 <+69>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a19d <+73>:\tcall   rcx\n   0x000000000008a19f <+75>:\tmov    rdi,rax\n   0x000000000008a1a2 <+78>:\tcall   0x53eb0 <_SyncStarIterable.iterator>\n   0x000000000008a1a7 <+83>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a1ab <+87>:\tmov    rdx,QWORD PTR [rax+0x7]\n   0x000000000008a1af <+91>:\tmov    QWORD PTR [rbp-0x8],rdx\n   0x000000000008a1b3 <+95>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1b7 <+99>:\tjbe    0x8a241 <main+237>\n   0x000000000008a1bd <+105>:\tmov    rdi,rax\n   0x000000000008a1c0 <+108>:\tcall   0x7cf1c <_SyncStarIterator.moveNext>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_22.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example of reified generics using type checking\n  bool checkType<T>(Object? object) {\n    return object is T;\n  }\n\n  // Test with different types\n  final intValue = 42;\n  final stringValue = 'Hello';\n  final doubleValue = 3.14;\n\n  print('intValue is int: ${checkType<int>(intValue)}');\n  print('stringValue is int: ${checkType<int>(stringValue)}');\n  print('doubleValue is double: ${checkType<double>(doubleValue)}');\n  print('intValue is num: ${checkType<num>(intValue)}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a3a0 <+588>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a3a4 <+592>:\tmov    rsp,rbp\n   0x000000000008a3a7 <+595>:\tpop    rbp\n   0x000000000008a3a8 <+596>:\tret\n   0x000000000008a3a9 <+597>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a3b0 <+604>:\tjmp    0x8a166 <main+18>\n   0x000000000008a3b5:\tint3\n   0x000000000008a3b6:\tint3\n   0x000000000008a3b7:\tint3\n\n2\tvoid main() {\n3\t  // Example of reified generics using type checking\n4\t  bool checkType<T>(Object? object) {\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x28\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a3a9 <main+597>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r15+0x7b7]\n   0x000000000008a16d <+25>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a171 <+29>:\tcall   0x83fc0 <stub _iso_stub_AllocateClosureGenericStub>\n   0x000000000008a176 <+34>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a17a <+38>:\tmov    r10d,0x4\n   0x000000000008a180 <+44>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a184 <+48>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n5\t    return object is T;\n6\t  }\n7\t\n8\t  // Test with different types\n9\t  final intValue = 42;\n10\t  final stringValue = 'Hello';\n11\t  final doubleValue = 3.14;\n12\t\n13\t  print('intValue is int: ${checkType<int>(intValue)}');\n   0x000000000008a189 <+53>:\tmov    rcx,rax\n   0x000000000008a18c <+56>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a190 <+60>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a197 <+67>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a19b <+71>:\tmov    r11,QWORD PTR [r15+0x237]\n   0x000000000008a1a2 <+78>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x000000000008a1a7 <+83>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a1ab <+87>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a1b0 <+92>:\tmov    QWORD PTR [rsp],0x54\n   0x000000000008a1b8 <+100>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a1bc <+104>:\tmov    r10,QWORD PTR [r15+0x57]\n   0x000000000008a1c0 <+108>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a1c4 <+112>:\tcall   rcx\n   0x000000000008a1c6 <+114>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a1ca <+118>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a1ce <+122>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a1d2 <+126>:\ttest   al,0x1\n   0x000000000008a1d4 <+128>:\tje     0x8a1ed <main+153>\n   0x000000000008a1d6 <+130>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a1da <+134>:\tshr    r11d,0x2\n   0x000000000008a1de <+138>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a1e2 <+142>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a1e6 <+146>:\tje     0x8a1ed <main+153>\n   0x000000000008a1e8 <+148>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a1ed <+153>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a1f1 <+157>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a1f5 <+161>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1fa <+166>:\tmov    rdi,rax\n   0x000000000008a1fd <+169>:\tcall   0x8a3b8 <print>\n   0x000000000008a202 <+174>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a206 <+178>:\tmov    r10d,0x4\n   0x000000000008a20c <+184>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n14\t  print('stringValue is int: ${checkType<int>(stringValue)}');\n   0x000000000008a211 <+189>:\tmov    rcx,rax\n   0x000000000008a214 <+192>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a218 <+196>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a21f <+203>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a223 <+207>:\tmov    r11,QWORD PTR [r15+0x237]\n   0x000000000008a22a <+214>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x000000000008a22f <+219>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a233 <+223>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a238 <+228>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a23f <+235>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a243 <+239>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a247 <+243>:\tmov    r10,QWORD PTR [r15+0x57]\n   0x000000000008a24b <+247>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a24f <+251>:\tcall   rcx\n   0x000000000008a251 <+253>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a255 <+257>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a259 <+261>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a25d <+265>:\ttest   al,0x1\n   0x000000000008a25f <+267>:\tje     0x8a278 <main+292>\n   0x000000000008a261 <+269>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a265 <+273>:\tshr    r11d,0x2\n   0x000000000008a269 <+277>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a26d <+281>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a271 <+285>:\tje     0x8a278 <main+292>\n   0x000000000008a273 <+287>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a278 <+292>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a27c <+296>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a280 <+300>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a285 <+305>:\tmov    rdi,rax\n   0x000000000008a288 <+308>:\tcall   0x8a3b8 <print>\n   0x000000000008a28d <+313>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a291 <+317>:\tmov    r10d,0x4\n   0x000000000008a297 <+323>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n15\t  print('doubleValue is double: ${checkType<double>(doubleValue)}');\n   0x000000000008a29c <+328>:\tmov    rcx,rax\n   0x000000000008a29f <+331>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a2a3 <+335>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a2aa <+342>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a2ae <+346>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a2b5 <+353>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x000000000008a2ba <+358>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a2be <+362>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a2c3 <+367>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a2ca <+374>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a2ce <+378>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2d2 <+382>:\tmov    r10,QWORD PTR [r15+0x57]\n   0x000000000008a2d6 <+386>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a2da <+390>:\tcall   rcx\n   0x000000000008a2dc <+392>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a2e0 <+396>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a2e4 <+400>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a2e8 <+404>:\ttest   al,0x1\n   0x000000000008a2ea <+406>:\tje     0x8a303 <main+431>\n   0x000000000008a2ec <+408>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a2f0 <+412>:\tshr    r11d,0x2\n   0x000000000008a2f4 <+416>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a2f8 <+420>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a2fc <+424>:\tje     0x8a303 <main+431>\n   0x000000000008a2fe <+426>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a303 <+431>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a307 <+435>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a30b <+439>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a310 <+444>:\tmov    rdi,rax\n   0x000000000008a313 <+447>:\tcall   0x8a3b8 <print>\n   0x000000000008a318 <+452>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a31c <+456>:\tmov    r10d,0x4\n   0x000000000008a322 <+462>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n16\t  print('intValue is num: ${checkType<num>(intValue)}');\n   0x000000000008a327 <+467>:\tmov    rcx,rax\n   0x000000000008a32a <+470>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a32e <+474>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a335 <+481>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a339 <+485>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a340 <+492>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x000000000008a345 <+497>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a349 <+501>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a34e <+506>:\tmov    QWORD PTR [rsp],0x54\n   0x000000000008a356 <+514>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a35a <+518>:\tmov    r10,QWORD PTR [r15+0x57]\n   0x000000000008a35e <+522>:\tmov    rcx,QWORD PTR [rax+0x37]\n   0x000000000008a362 <+526>:\tcall   rcx\n   0x000000000008a364 <+528>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a368 <+532>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a36c <+536>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a370 <+540>:\ttest   al,0x1\n   0x000000000008a372 <+542>:\tje     0x8a38b <main+567>\n   0x000000000008a374 <+544>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a378 <+548>:\tshr    r11d,0x2\n   0x000000000008a37c <+552>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a380 <+556>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a384 <+560>:\tje     0x8a38b <main+567>\n   0x000000000008a386 <+562>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a38b <+567>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a38f <+571>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a393 <+575>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a398 <+580>:\tmov    rdi,rax\n   0x000000000008a39b <+583>:\tcall   0x8a3b8 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_28.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Creating symbols using symbol literals\n  final symbol1 = #myIdentifier;\n  final symbol2 = #anotherIdentifier;\n  \n  // Creating symbols using Symbol constructor\n  final symbol3 = Symbol('dynamicIdentifier');\n  final symbol4 = Symbol('testMethod');\n  \n  // Demonstrating symbol properties\n  print('Symbol 1: $symbol1');\n  print('Symbol 2: $symbol2');\n  print('Symbol 3: $symbol3');\n  print('Symbol 4: $symbol4');\n  \n  // Using symbols in a Map to demonstrate practical usage\n  final symbolMap = {\n    symbol1: 'First identifier value',\n    symbol2: 42,\n    symbol3: ['List', 'of', 'values'],\n    symbol4: () => print('Symbol method executed!')\n  };\n  \n  // Accessing values using symbols\n  print('\\nMap values accessed via symbols:');\n  print('symbol1: ${symbolMap[symbol1]}');\n  print('symbol2: ${symbolMap[symbol2]}');\n  print('symbol3: ${symbolMap[symbol3]}');\n  \n  // Executing function stored with symbol\n  (symbolMap[symbol4] as Function)();\n  \n  // Demonstrating symbol comparison\n  print('\\nSymbol comparison:');\n  print('symbol1 == symbol2: ${symbol1 == symbol2}');\n  print('symbol1 == #myIdentifier: ${symbol1 == #myIdentifier}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a554 <+988>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a558 <+992>:\tmov    rsp,rbp\n   0x000000000008a55b <+995>:\tpop    rbp\n   0x000000000008a55c <+996>:\tret\n   0x000000000008a55d <+997>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a564 <+1004>:\tjmp    0x8a18a <main+18>\n   0x000000000008a569:\tint3\n   0x000000000008a56a:\tint3\n   0x000000000008a56b:\tint3\n   0x000000000008a56c <+0>:\tpush   rbp\n   0x000000000008a56d <+1>:\tmov    rbp,rsp\n   0x000000000008a570 <+4>:\tsub    rsp,0x18\n   0x000000000008a574 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a578 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a57c <+16>:\tjbe    0x8a5c6 <printToConsole+90>\n   0x000000000008a582 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a586 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a58d <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a591 <+37>:\tjne    0x8a5a3 <printToConsole+55>\n   0x000000000008a597 <+43>:\tmov    rdx,QWORD PTR [r15+0x89f]\n   0x000000000008a59e <+50>:\tcall   0x831ec <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Creating symbols using symbol literals\n4\t  final symbol1 = #myIdentifier;\n5\t  final symbol2 = #anotherIdentifier;\n6\t  \n7\t  // Creating symbols using Symbol constructor\n8\t  final symbol3 = Symbol('dynamicIdentifier');\n   0x000000000008a178 <+0>:\tpush   rbp\n   0x000000000008a179 <+1>:\tmov    rbp,rsp\n   0x000000000008a17c <+4>:\tsub    rsp,0x30\n   0x000000000008a180 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a184 <+12>:\tjbe    0x8a55d <main+997>\n   0x000000000008a18a <+18>:\tcall   0x57fb8 <new Symbol>\n\n9\t  final symbol4 = Symbol('testMethod');\n   0x000000000008a18f <+23>:\tmov    rcx,rax\n   0x000000000008a192 <+26>:\tmov    rax,QWORD PTR [r15+0x7b7]\n   0x000000000008a199 <+33>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a19d <+37>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x000000000008a1a1 <+41>:\tcall   0x57fb8 <new Symbol>\n   0x000000000008a1a6 <+46>:\tmov    rcx,rax\n   0x000000000008a1a9 <+49>:\tmov    rax,QWORD PTR [r15+0x7bf]\n   0x000000000008a1b0 <+56>:\tmov    QWORD PTR [rbp-0x10],rcx\n   0x000000000008a1b4 <+60>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x000000000008a1b8 <+64>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1bc <+68>:\tmov    r10d,0x4\n   0x000000000008a1c2 <+74>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n10\t  \n11\t  // Demonstrating symbol properties\n12\t  print('Symbol 1: $symbol1');\n   0x000000000008a1c7 <+79>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a1ce <+86>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1d2 <+90>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a1d9 <+97>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a1dd <+101>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1e1 <+105>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1e6 <+110>:\tmov    rdi,rax\n   0x000000000008a1e9 <+113>:\tcall   0x8a5d0 <print>\n   0x000000000008a1ee <+118>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1f2 <+122>:\tmov    r10d,0x4\n   0x000000000008a1f8 <+128>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n13\t  print('Symbol 2: $symbol2');\n   0x000000000008a1fd <+133>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a204 <+140>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a208 <+144>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a20f <+151>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a213 <+155>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a217 <+159>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a21c <+164>:\tmov    rdi,rax\n   0x000000000008a21f <+167>:\tcall   0x8a5d0 <print>\n   0x000000000008a224 <+172>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a228 <+176>:\tmov    r10d,0x4\n   0x000000000008a22e <+182>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n14\t  print('Symbol 3: $symbol3');\n   0x000000000008a233 <+187>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a23a <+194>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a23e <+198>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a242 <+202>:\tmov    QWORD PTR [rax+0x1f],rsi\n   0x000000000008a246 <+206>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a24a <+210>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a24f <+215>:\tmov    rdi,rax\n   0x000000000008a252 <+218>:\tcall   0x8a5d0 <print>\n   0x000000000008a257 <+223>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a25b <+227>:\tmov    r10d,0x4\n   0x000000000008a261 <+233>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n15\t  print('Symbol 4: $symbol4');\n   0x000000000008a266 <+238>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a26d <+245>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a271 <+249>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a275 <+253>:\tmov    QWORD PTR [rax+0x1f],rsi\n   0x000000000008a279 <+257>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a27d <+261>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a282 <+266>:\tmov    rdi,rax\n   0x000000000008a285 <+269>:\tcall   0x8a5d0 <print>\n   0x000000000008a28a <+274>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a28e <+278>:\tmov    r10d,0x10\n   0x000000000008a294 <+284>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n16\t  \n17\t  // Using symbols in a Map to demonstrate practical usage\n18\t  final symbolMap = {\n   0x000000000008a341 <+457>:\tmov    rcx,rax\n   0x000000000008a344 <+460>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a348 <+464>:\tmov    QWORD PTR [rax+0x4f],rcx\n   0x000000000008a34c <+468>:\tmov    r11,QWORD PTR [r15+0x81f]\n   0x000000000008a353 <+475>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a358 <+480>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a35c <+484>:\tcall   0x65e6c <new Map._fromLiteral>\n\n19\t    symbol1: 'First identifier value',\n20\t    symbol2: 42,\n21\t    symbol3: ['List', 'of', 'values'],\n22\t    symbol4: () => print('Symbol method executed!')\n   0x000000000008a30e <+406>:\tmov    rcx,rax\n   0x000000000008a311 <+409>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a315 <+413>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a319 <+417>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008a321 <+425>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a325 <+429>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008a329 <+433>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a32d <+437>:\tmov    QWORD PTR [rax+0x47],rsi\n   0x000000000008a331 <+441>:\tmov    rbx,QWORD PTR [r15+0x817]\n   0x000000000008a338 <+448>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a33c <+452>:\tcall   0x840ac <stub _iso_stub_AllocateClosureStub>\n\n23\t  };\n24\t  \n25\t  // Accessing values using symbols\n26\t  print('\\nMap values accessed via symbols:');\n27\t  print('symbol1: ${symbolMap[symbol1]}');\n   0x000000000008a380 <+520>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a384 <+524>:\tmov    r11,QWORD PTR [r15+0x82f]\n   0x000000000008a38b <+531>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a38f <+535>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a393 <+539>:\tmov    rsi,QWORD PTR [r15+0x7cf]\n   0x000000000008a39a <+546>:\tcall   0x81ba8 <_LinkedHashMapMixin.[]>\n   0x000000000008a39f <+551>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a3a3 <+555>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a3a7 <+559>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a3ab <+563>:\ttest   al,0x1\n   0x000000000008a3ad <+565>:\tje     0x8a3c6 <main+590>\n   0x000000000008a3af <+567>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a3b3 <+571>:\tshr    r11d,0x2\n   0x000000000008a3b7 <+575>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a3bb <+579>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a3bf <+583>:\tje     0x8a3c6 <main+590>\n   0x000000000008a3c1 <+585>:\tcall   0x832a8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a3c6 <+590>:\tmov    r11,QWORD PTR [rbp-0x20]\n   0x000000000008a3ca <+594>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a3ce <+598>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a3d3 <+603>:\tmov    rdi,rax\n   0x000000000008a3d6 <+606>:\tcall   0x8a5d0 <print>\n   0x000000000008a3db <+611>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a3df <+615>:\tmov    r10d,0x4\n   0x000000000008a3e5 <+621>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n28\t  print('symbol2: ${symbolMap[symbol2]}');\n   0x000000000008a3ea <+626>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a3ee <+630>:\tmov    r11,QWORD PTR [r15+0x837]\n   0x000000000008a3f5 <+637>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a3f9 <+641>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a3fd <+645>:\tmov    rsi,QWORD PTR [r15+0x7df]\n   0x000000000008a404 <+652>:\tcall   0x81ba8 <_LinkedHashMapMixin.[]>\n   0x000000000008a409 <+657>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a40d <+661>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a411 <+665>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a415 <+669>:\ttest   al,0x1\n   0x000000000008a417 <+671>:\tje     0x8a430 <main+696>\n   0x000000000008a419 <+673>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a41d <+677>:\tshr    r11d,0x2\n   0x000000000008a421 <+681>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a425 <+685>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a429 <+689>:\tje     0x8a430 <main+696>\n   0x000000000008a42b <+691>:\tcall   0x832a8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a430 <+696>:\tmov    r11,QWORD PTR [rbp-0x20]\n   0x000000000008a434 <+700>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a438 <+704>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a43d <+709>:\tmov    rdi,rax\n   0x000000000008a440 <+712>:\tcall   0x8a5d0 <print>\n   0x000000000008a445 <+717>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a449 <+721>:\tmov    r10d,0x4\n   0x000000000008a44f <+727>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n29\t  print('symbol3: ${symbolMap[symbol3]}');\n   0x000000000008a454 <+732>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a458 <+736>:\tmov    r11,QWORD PTR [r15+0x83f]\n   0x000000000008a45f <+743>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a463 <+747>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a467 <+751>:\tmov    rsi,QWORD PTR [rbp-0x8]\n   0x000000000008a46b <+755>:\tcall   0x81ba8 <_LinkedHashMapMixin.[]>\n   0x000000000008a470 <+760>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a474 <+764>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a478 <+768>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a47c <+772>:\ttest   al,0x1\n   0x000000000008a47e <+774>:\tje     0x8a497 <main+799>\n   0x000000000008a480 <+776>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a484 <+780>:\tshr    r11d,0x2\n   0x000000000008a488 <+784>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a48c <+788>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a490 <+792>:\tje     0x8a497 <main+799>\n   0x000000000008a492 <+794>:\tcall   0x832a8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a497 <+799>:\tmov    r11,QWORD PTR [rbp-0x20]\n   0x000000000008a49b <+803>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a49f <+807>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a4a4 <+812>:\tmov    rdi,rax\n   0x000000000008a4a7 <+815>:\tcall   0x8a5d0 <print>\n\n30\t  \n31\t  // Executing function stored with symbol\n32\t  (symbolMap[symbol4] as Function)();\n   0x000000000008a4b9 <+833>:\tmov    rcx,rax\n   0x000000000008a4bc <+836>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a4c0 <+840>:\tmov    rdx,QWORD PTR [rax+0x17]\n   0x000000000008a4c4 <+844>:\tcmp    rdx,rcx\n   0x000000000008a4c7 <+847>:\tjne    0x8a4d6 <main+862>\n   0x000000000008a4cd <+853>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a4d1 <+857>:\tjmp    0x8a4d9 <main+865>\n   0x000000000008a4d6 <+862>:\tmov    rbx,rcx\n   0x000000000008a4d9 <+865>:\tmov    rax,rbx\n   0x000000000008a4dc <+868>:\tmov    QWORD PTR [rbp-0x8],rbx\n   0x000000000008a4e0 <+872>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a4e4 <+876>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008a4e8 <+880>:\ttest   al,0x1\n   0x000000000008a4ea <+882>:\tmov    esi,0x3c\n   0x000000000008a4ef <+887>:\tje     0x8a4f7 <main+895>\n   0x000000000008a4f1 <+889>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000008a4f4 <+892>:\tshr    esi,0xc\n   0x000000000008a4f7 <+895>:\tcmp    rsi,0x39\n   0x000000000008a4fb <+899>:\tje     0x8a514 <main+924>\n   0x000000000008a501 <+905>:\tmov    rbx,QWORD PTR [r15+0x847]\n   0x000000000008a508 <+912>:\tmov    r9,QWORD PTR [r15+0x84f]\n   0x000000000008a50f <+919>:\tcall   0x82fc4 <stub _iso_stub_DefaultTypeTestStub>\n   0x000000000008a514 <+924>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008a518 <+928>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a51c <+932>:\tmov    rdx,QWORD PTR [rsp]\n   0x000000000008a520 <+936>:\tmov    rcx,QWORD PTR [r15+0x85f]\n   0x000000000008a527 <+943>:\tmov    rbx,QWORD PTR [r15+0x867]\n   0x000000000008a52e <+950>:\tcall   rcx\n\n33\t  \n34\t  // Demonstrating symbol comparison\n35\t  print('\\nSymbol comparison:');\n36\t  print('symbol1 == symbol2: ${symbol1 == symbol2}');\n   0x000000000008a53c <+964>:\tmov    rdi,QWORD PTR [r15+0x877]\n   0x000000000008a543 <+971>:\tcall   0x8a5d0 <print>\n\n37\t  print('symbol1 == #myIdentifier: ${symbol1 == #myIdentifier}');\n   0x000000000008a548 <+976>:\tmov    rdi,QWORD PTR [r15+0x87f]\n   0x000000000008a54f <+983>:\tcall   0x8a5d0 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_29.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // String containing Unicode characters (including non-BMP)\n  final unicodeString = 'Hello \ud834\udd1e World! \ud83c\udf0d';\n\n  // Get runes (Unicode code points)\n  final runes = unicodeString.runes;\n\n  print('Original string: $unicodeString');\n  print('\\nUnicode code points:');\n  \n  // Iterate through each rune and display information\n  for (final rune in runes) {\n    final char = String.fromCharCode(rune);\n    print('U+${rune.toRadixString(16).padLeft(4, '0').toUpperCase()} '\n          '($rune) -> \\'$char\\'');\n  }\n\n  // Demonstrate creating string from runes\n  final reconstructed = String.fromCharCodes(runes);\n  print('\\nReconstructed string: $reconstructed');\n  print('Strings match: ${unicodeString == reconstructed}');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008ad0f <+575>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008ad13 <+579>:\tmov    rsp,rbp\n   0x000000000008ad16 <+582>:\tpop    rbp\n   0x000000000008ad17 <+583>:\tret\n   0x000000000008ad18 <+584>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ad1f <+591>:\tjmp    0x8aae2 <main+18>\n   0x000000000008ad24 <+596>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ad2b <+603>:\tjmp    0x8ab21 <main+81>\n   0x000000000008ad30 <+0>:\tpush   rbp\n   0x000000000008ad31 <+1>:\tmov    rbp,rsp\n   0x000000000008ad34 <+4>:\tsub    rsp,0x18\n   0x000000000008ad38 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008ad3c <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008ad40 <+16>:\tjbe    0x8ad8a <printToConsole+90>\n   0x000000000008ad46 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008ad4a <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008ad51 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008ad55 <+37>:\tjne    0x8ad67 <printToConsole+55>\n   0x000000000008ad5b <+43>:\tmov    rdx,QWORD PTR [r15+0x867]\n   0x000000000008ad62 <+50>:\tcall   0x83b1c <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // String containing Unicode characters (including non-BMP)\n4\t  final unicodeString = 'Hello \ud834\udd1e World! \ud83c\udf0d';\n5\t\n6\t  // Get runes (Unicode code points)\n7\t  final runes = unicodeString.runes;\n   0x000000000008aad0 <+0>:\tpush   rbp\n   0x000000000008aad1 <+1>:\tmov    rbp,rsp\n   0x000000000008aad4 <+4>:\tsub    rsp,0x40\n   0x000000000008aad8 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008aadc <+12>:\tjbe    0x8ad18 <main+584>\n   0x000000000008aae2 <+18>:\tmov    rdi,QWORD PTR [r15+0x81f]\n   0x000000000008aae9 <+25>:\tcall   0x8adcc <_StringBase.runes>\n\n8\t\n9\t  print('Original string: $unicodeString');\n   0x000000000008aaee <+30>:\tmov    rdi,QWORD PTR [r15+0x827]\n   0x000000000008aaf5 <+37>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008aaf9 <+41>:\tcall   0x8ad94 <print>\n\n10\t  print('\\nUnicode code points:');\n11\t  \n12\t  // Iterate through each rune and display information\n13\t  for (final rune in runes) {\n   0x000000000008ab0a <+58>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008ab0e <+62>:\tcall   0x576e8 <Runes.iterator>\n   0x000000000008ab13 <+67>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008ab17 <+71>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008ab1b <+75>:\tjbe    0x8ad24 <main+596>\n   0x000000000008ab21 <+81>:\tmov    rdi,rax\n   0x000000000008ab24 <+84>:\tcall   0x5671c <RuneIterator.moveNext>\n\n14\t    final char = String.fromCharCode(rune);\n   0x000000000008ab29 <+89>:\ttest   al,0x10\n   0x000000000008ab2b <+91>:\tjne    0x8ac76 <main+422>\n   0x000000000008ab31 <+97>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008ab35 <+101>:\tmov    rcx,QWORD PTR [rax+0x1f]\n   0x000000000008ab39 <+105>:\tmov    rsi,rcx\n   0x000000000008ab3c <+108>:\tmov    QWORD PTR [rbp-0x18],rcx\n   0x000000000008ab40 <+112>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008ab44 <+116>:\tcall   0x5fddc <new String.fromCharCode>\n   0x000000000008ab49 <+121>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008ab4d <+125>:\tmov    r10d,0xe\n   0x000000000008ab53 <+131>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008ab57 <+135>:\tcall   0x855c0 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008ab5c <+140>:\tmov    rcx,rax\n   0x000000000008ab5f <+143>:\tmov    QWORD PTR [rbp-0x30],rcx\n   0x000000000008ab63 <+147>:\tmov    r11,QWORD PTR [r15+0x837]\n   0x000000000008ab6a <+154>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008ab6e <+158>:\tmov    rdx,QWORD PTR [rbp-0x18]\n   0x000000000008ab72 <+162>:\tmov    rax,rdx\n   0x000000000008ab75 <+165>:\tadd    rax,rax\n   0x000000000008ab78 <+168>:\tjno    0x8ab87 <main+183>\n   0x000000000008ab7e <+174>:\tcall   0x85844 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n15\t    print('U+${rune.toRadixString(16).padLeft(4, '0').toUpperCase()} '\n   0x000000000008ab93 <+195>:\tmov    rdi,rax\n   0x000000000008ab96 <+198>:\tmov    esi,0x4\n   0x000000000008ab9b <+203>:\tmov    rdx,QWORD PTR [r15+0x667]\n   0x000000000008aba2 <+210>:\tcall   0x80028 <String.padLeft>\n   0x000000000008aba7 <+215>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008abaa <+218>:\tshr    ecx,0xc\n   0x000000000008abad <+221>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008abb1 <+225>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008abb5 <+229>:\tcall   QWORD PTR [rax+rcx*8+0x870]\n   0x000000000008abbc <+236>:\tmov    rdx,QWORD PTR [rbp-0x30]\n   0x000000000008abc0 <+240>:\tlea    r13,[rdx+0x1f]\n   0x000000000008abc4 <+244>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008abc8 <+248>:\ttest   al,0x1\n   0x000000000008abca <+250>:\tje     0x8abe3 <main+275>\n   0x000000000008abcc <+252>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008abd0 <+256>:\tshr    r11d,0x2\n   0x000000000008abd4 <+260>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008abd8 <+264>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008abdc <+268>:\tje     0x8abe3 <main+275>\n   0x000000000008abde <+270>:\tcall   0x83bd8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008abe3 <+275>:\tmov    rcx,QWORD PTR [rbp-0x30]\n   0x000000000008abe7 <+279>:\tmov    r11,QWORD PTR [r15+0x83f]\n   0x000000000008abee <+286>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008abf2 <+290>:\tmov    rdx,rcx\n   0x000000000008abf5 <+293>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x000000000008abf9 <+297>:\tlea    r13,[rdx+0x2f]\n   0x000000000008abfd <+301>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008ac01 <+305>:\ttest   al,0x1\n   0x000000000008ac03 <+307>:\tje     0x8ac1c <main+332>\n   0x000000000008ac05 <+309>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008ac09 <+313>:\tshr    r11d,0x2\n   0x000000000008ac0d <+317>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008ac11 <+321>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008ac15 <+325>:\tje     0x8ac1c <main+332>\n   0x000000000008ac17 <+327>:\tcall   0x83bd8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008ac1c <+332>:\tmov    r11,QWORD PTR [r15+0x847]\n   0x000000000008ac23 <+339>:\tmov    QWORD PTR [rcx+0x37],r11\n   0x000000000008ac27 <+343>:\tmov    rdx,rcx\n   0x000000000008ac2a <+346>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008ac2e <+350>:\tlea    r13,[rdx+0x3f]\n   0x000000000008ac32 <+354>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008ac36 <+358>:\ttest   al,0x1\n   0x000000000008ac38 <+360>:\tje     0x8ac51 <main+385>\n   0x000000000008ac3a <+362>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008ac3e <+366>:\tshr    r11d,0x2\n   0x000000000008ac42 <+370>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008ac46 <+374>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008ac4a <+378>:\tje     0x8ac51 <main+385>\n   0x000000000008ac4c <+380>:\tcall   0x83bd8 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008ac51 <+385>:\tmov    r11,QWORD PTR [r15+0x84f]\n   0x000000000008ac58 <+392>:\tmov    QWORD PTR [rcx+0x47],r11\n   0x000000000008ac5c <+396>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008ac60 <+400>:\tcall   0x5b648 <_StringBase._interpolate>\n\n16\t          '($rune) -> \\'$char\\'');\n17\t  }\n18\t\n19\t  // Demonstrate creating string from runes\n20\t  final reconstructed = String.fromCharCodes(runes);\n21\t  print('\\nReconstructed string: $reconstructed');\n   0x000000000008ac98 <+456>:\tmov    r11,QWORD PTR [r15+0x857]\n   0x000000000008ac9f <+463>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008aca3 <+467>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008aca7 <+471>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008acab <+475>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008acaf <+479>:\tcall   0x5b648 <_StringBase._interpolate>\n   0x000000000008acb4 <+484>:\tmov    rdi,rax\n   0x000000000008acb7 <+487>:\tcall   0x8ad94 <print>\n   0x000000000008acbc <+492>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008acc0 <+496>:\tmov    r10d,0x4\n   0x000000000008acc6 <+502>:\tcall   0x855c0 <stub _iso_stub_AllocateArrayStub>\n\n22\t  print('Strings match: ${unicodeString == reconstructed}');\n   0x000000000008accb <+507>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008accf <+511>:\tmov    r11,QWORD PTR [r15+0x85f]\n   0x000000000008acd6 <+518>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008acda <+522>:\tmov    r11,QWORD PTR [r15+0x81f]\n   0x000000000008ace1 <+529>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008ace6 <+534>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008acea <+538>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008acee <+542>:\tcall   0x82874 <String.==>\n   0x000000000008acf3 <+547>:\tmov    rcx,rax\n   0x000000000008acf6 <+550>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008acfa <+554>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008acfe <+558>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008ad02 <+562>:\tcall   0x5b648 <_StringBase._interpolate>\n   0x000000000008ad07 <+567>:\tmov    rdi,rax\n   0x000000000008ad0a <+570>:\tcall   0x8ad94 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_30.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Raw string demonstration\n  String rawString = r'This is a raw string!\\nBackslashes (\\) are treated literally.\\tNo escape sequences.';\n  print(rawString);\n  \n  // Comparison with regular string\n  String regularString = 'This is a regular string!\\nBackslashes (\\\\) are escape characters.\\tTabs and newlines work.';\n  print(regularString);\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a183 <main+47>\n   0x000000000008a162 <+14>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a169 <+21>:\tcall   0x8a18c <printToConsole>\n   0x000000000008a16e <+26>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008a175 <+33>:\tcall   0x8a18c <printToConsole>\n   0x000000000008a17a <+38>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a17e <+42>:\tmov    rsp,rbp\n   0x000000000008a181 <+45>:\tpop    rbp\n   0x000000000008a182 <+46>:\tret\n   0x000000000008a183 <+47>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a18a <+54>:\tjmp    0x8a162 <main+14>\n   0x000000000008a18c <+0>:\tpush   rbp\n   0x000000000008a18d <+1>:\tmov    rbp,rsp\n   0x000000000008a190 <+4>:\tsub    rsp,0x18\n   0x000000000008a194 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a198 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a19c <+16>:\tjbe    0x8a1e6 <printToConsole+90>\n   0x000000000008a1a2 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a1a6 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a1ad <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a1b1 <+37>:\tjne    0x8a1c3 <printToConsole+55>\n   0x000000000008a1b7 <+43>:\tmov    rdx,QWORD PTR [r15+0x7c7]\n   0x000000000008a1be <+50>:\tcall   0x831c8 <stub _iso_stub_InitLateStaticFieldStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_31.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Using triple quotes for a multiline string\n  String multilineString = '''\nThis is a multiline string\nusing triple quotes in Dart.\nIt preserves line breaks and indentation,\nmaking it ideal for blocks of text\nor formatted output.\n''';\n\n  // Print the multiline string\n  print(multilineString);\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a167 <+19>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a16b <+23>:\tmov    rsp,rbp\n   0x000000000008a16e <+26>:\tpop    rbp\n   0x000000000008a16f <+27>:\tret\n   0x000000000008a170 <+28>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a177 <+35>:\tjmp    0x8a162 <main+14>\n   0x000000000008a179:\tint3\n   0x000000000008a17a:\tint3\n   0x000000000008a17b:\tint3\n\n2\tvoid main() {\n3\t  // Using triple quotes for a multiline string\n4\t  String multilineString = '''\n5\tThis is a multiline string\n6\tusing triple quotes in Dart.\n7\tIt preserves line breaks and indentation,\n8\tmaking it ideal for blocks of text\n9\tor formatted output.\n10\t''';\n11\t\n12\t  // Print the multiline string\n13\t  print(multilineString);\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a170 <main+28>\n   0x000000000008a162 <+14>:\tcall   0x8a17c <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_37.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Create different Logger instances using factory constructor\n  Logger logger1 = Logger('APP');\n  Logger logger2 = Logger('NETWORK');\n  Logger logger3 = Logger('APP'); // Should return same instance as logger1\n  \n  // Verify singleton behavior\n  print('Logger1 ID: ${logger1.id}');\n  print('Logger2 ID: ${logger2.id}');\n  print('Logger3 ID: ${logger3.id}');\n  print('Identical instances: ${identical(logger1, logger3)}');\n  \n  // Demonstrate logging functionality\n  logger1.log('Application started');\n  logger2.log('Fetching data');\n  logger3.log('User logged in'); // Should increment original APP instance's count\n}\n\nclass Logger {\n  final String name;\n  final String id;\n  int _logCount = 0;\n\n  static final Map<String, Logger> _cache = {};\n\n  // Factory constructor with caching logic\n  factory Logger(String name) {\n    return _cache.putIfAbsent(name, () => Logger._internal(name));\n  }\n\n  // Private constructor\n  Logger._internal(this.name) : id = '${name}_${DateTime.now().millisecondsSinceEpoch}';\n\n  void log(String message) {\n    _logCount++;\n    print('[$name] $_logCount: $message (ID: $id)');\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a2c0 <+364>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2c4 <+368>:\tmov    rsp,rbp\n   0x000000000008a2c7 <+371>:\tpop    rbp\n   0x000000000008a2c8 <+372>:\tret\n   0x000000000008a2c9 <+373>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2d0 <+380>:\tjmp    0x8a166 <main+18>\n   0x000000000008a2d5:\tint3\n   0x000000000008a2d6:\tint3\n   0x000000000008a2d7:\tint3\n   0x000000000008a2d8 <+0>:\tpush   rbp\n   0x000000000008a2d9 <+1>:\tmov    rbp,rsp\n   0x000000000008a2dc <+4>:\tsub    rsp,0x20\n   0x000000000008a2e0 <+8>:\tmov    rax,rsi\n   0x000000000008a2e3 <+11>:\tmov    QWORD PTR [rbp-0x10],rdi\n   0x000000000008a2e7 <+15>:\tmov    QWORD PTR [rbp-0x18],rsi\n   0x000000000008a2eb <+19>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a2ef <+23>:\tjbe    0x8a407 <Logger.log+303>\n   0x000000000008a2f5 <+29>:\tmov    rcx,QWORD PTR [rdi+0x17]\n   0x000000000008a2f9 <+33>:\tadd    rcx,0x1\n   0x000000000008a2fd <+37>:\tmov    QWORD PTR [rbp-0x8],rcx\n   0x000000000008a301 <+41>:\tmov    QWORD PTR [rdi+0x17],rcx\n   0x000000000008a305 <+45>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a309 <+49>:\tmov    r10d,0x12\n   0x000000000008a30f <+55>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a314 <+60>:\tmov    rcx,rax\n   0x000000000008a317 <+63>:\tmov    r11,QWORD PTR [r15+0x417]\n   0x000000000008a31e <+70>:\tmov    QWORD PTR [rcx+0x17],r11\n   0x000000000008a322 <+74>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x000000000008a326 <+78>:\tmov    rax,QWORD PTR [rsi+0x7]\n   0x000000000008a32a <+82>:\tmov    QWORD PTR [rcx+0x1f],rax\n   0x000000000008a32e <+86>:\tmov    r11,QWORD PTR [r15+0x7ff]\n   0x000000000008a335 <+93>:\tmov    QWORD PTR [rcx+0x27],r11\n   0x000000000008a339 <+97>:\tmov    rdx,QWORD PTR [rbp-0x8]\n   0x000000000008a33d <+101>:\tmov    rax,rdx\n   0x000000000008a340 <+104>:\tadd    rax,rax\n   0x000000000008a343 <+107>:\tjno    0x8a352 <Logger.log+122>\n   0x000000000008a349 <+113>:\tcall   0x84ef0 <stub _iso_stub_AllocateMintSharedWithoutFPURegsStub>\n\n2\tvoid main() {\n3\t  // Create different Logger instances using factory constructor\n4\t  Logger logger1 = Logger('APP');\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x20\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a2c9 <main+373>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    rsi,QWORD PTR [r15+0x7b7]\n   0x000000000008a171 <+29>:\tcall   0x8a4d8 <new Logger>\n\n5\t  Logger logger2 = Logger('NETWORK');\n   0x000000000008a176 <+34>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a17a <+38>:\tmov    rsi,QWORD PTR [r15+0x7bf]\n   0x000000000008a181 <+45>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a185 <+49>:\tcall   0x8a4d8 <new Logger>\n\n6\t  Logger logger3 = Logger('APP'); // Should return same instance as logger1\n   0x000000000008a18a <+54>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008a18e <+58>:\tmov    rsi,QWORD PTR [r15+0x7b7]\n   0x000000000008a195 <+65>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a199 <+69>:\tcall   0x8a4d8 <new Logger>\n   0x000000000008a19e <+74>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1a2 <+78>:\tmov    r10d,0x4\n   0x000000000008a1a8 <+84>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x000000000008a1ac <+88>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n7\t  \n8\t  // Verify singleton behavior\n9\t  print('Logger1 ID: ${logger1.id}');\n   0x000000000008a1b1 <+93>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a1b8 <+100>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1bc <+104>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a1c0 <+108>:\tmov    rcx,QWORD PTR [rdi+0xf]\n   0x000000000008a1c4 <+112>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a1c8 <+116>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1cc <+120>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a1d1 <+125>:\tmov    rdi,rax\n   0x000000000008a1d4 <+128>:\tcall   0x8a43c <print>\n   0x000000000008a1d9 <+133>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a1dd <+137>:\tmov    r10d,0x4\n   0x000000000008a1e3 <+143>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n10\t  print('Logger2 ID: ${logger2.id}');\n   0x000000000008a1e8 <+148>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a1ef <+155>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1f3 <+159>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a1f7 <+163>:\tmov    rcx,QWORD PTR [rdi+0xf]\n   0x000000000008a1fb <+167>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a1ff <+171>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a203 <+175>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a208 <+180>:\tmov    rdi,rax\n   0x000000000008a20b <+183>:\tcall   0x8a43c <print>\n   0x000000000008a210 <+188>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a214 <+192>:\tmov    r10d,0x4\n   0x000000000008a21a <+198>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n11\t  print('Logger3 ID: ${logger3.id}');\n   0x000000000008a21f <+203>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a226 <+210>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a22a <+214>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a22e <+218>:\tmov    rcx,QWORD PTR [rdi+0xf]\n   0x000000000008a232 <+222>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a236 <+226>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a23a <+230>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a23f <+235>:\tmov    rdi,rax\n   0x000000000008a242 <+238>:\tcall   0x8a43c <print>\n   0x000000000008a247 <+243>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a24b <+247>:\tmov    r10d,0x4\n   0x000000000008a251 <+253>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\n12\t  print('Identical instances: ${identical(logger1, logger3)}');\n   0x000000000008a256 <+258>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a25d <+265>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a261 <+269>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a265 <+273>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a269 <+277>:\tcmp    rcx,rdi\n   0x000000000008a26c <+280>:\tje     0x8a277 <main+291>\n   0x000000000008a26e <+282>:\tmov    rdx,QWORD PTR [r14+0x80]\n   0x000000000008a275 <+289>:\tjmp    0x8a27b <main+295>\n   0x000000000008a277 <+291>:\tmov    rdx,QWORD PTR [r14+0x78]\n   0x000000000008a27b <+295>:\tmov    QWORD PTR [rax+0x1f],rdx\n   0x000000000008a27f <+299>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a283 <+303>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a288 <+308>:\tmov    rdi,rax\n   0x000000000008a28b <+311>:\tcall   0x8a43c <print>\n\n13\t  \n14\t  // Demonstrate logging functionality\n15\t  logger1.log('Application started');\n   0x000000000008a290 <+316>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a294 <+320>:\tmov    rsi,QWORD PTR [r15+0x7e7]\n   0x000000000008a29b <+327>:\tcall   0x8a2d8 <Logger.log>\n\n16\t  logger2.log('Fetching data');\n   0x000000000008a2a0 <+332>:\tmov    rdi,QWORD PTR [rbp-0x10]\n   0x000000000008a2a4 <+336>:\tmov    rsi,QWORD PTR [r15+0x7ef]\n   0x000000000008a2ab <+343>:\tcall   0x8a2d8 <Logger.log>\n\n17\t  logger3.log('User logged in'); // Should increment original APP instance's count\n   0x000000000008a2b0 <+348>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x000000000008a2b4 <+352>:\tmov    rsi,QWORD PTR [r15+0x7f7]\n   0x000000000008a2bb <+359>:\tcall   0x8a2d8 <Logger.log>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_38.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Create a Student instance\n  Student student = Student('Alice', 20, 'S12345');\n  \n  // Demonstrate implicit interface implementation\n  print('Student Details:');\n  print('Name: ${student.name}');\n  print('Age: ${student.age}');\n  print('ID: ${student.id}');\n  print('Description: ${student.describe()}');\n}\n\n// Base class defining implicit interface\nclass Person {\n  final String name;\n  final int age;\n  \n  Person(this.name, this.age);\n  \n  String describe() => 'Person named $name, $age years old';\n}\n\n// Class implementing Person's implicit interface\nclass Student implements Person {\n  @override\n  final String name;\n  \n  @override\n  final int age;\n  \n  final String id; // Additional field\n  \n  Student(this.name, this.age, this.id);\n  \n  @override\n  String describe() => 'Student named $name, $age years old, ID: $id';\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a1a7 <main+83>\n   0x000000000008a162 <+14>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a169 <+21>:\tcall   0x8a1e8 <printToConsole>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_41.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example using switch expressions with different value types\n  const exampleValue = 'B';\n\n  // Switch expression for String pattern matching\n  final result = switch (exampleValue) {\n    'A' => 'Result is Alpha',\n    'B' => 'Result is Beta',\n    'C' => 'Result is Gamma',\n    _ => 'Result is Unknown',\n  };\n\n  print(result); // Output: Result is Beta\n\n  // Additional example with number patterns\n  const numericValue = 3;\n  final numericResult = switch (numericValue) {\n    1 => 'One',\n    2 => 'Two',\n    >= 3 && <= 5 => 'Between Three and Five',\n    _ => 'Other',\n  };\n\n  print(numericResult); // Output: Between Three and Five\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a232 <+38>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a236 <+42>:\tmov    rsp,rbp\n   0x000000000008a239 <+45>:\tpop    rbp\n   0x000000000008a23a <+46>:\tret\n   0x000000000008a23b <+47>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a242 <+54>:\tjmp    0x8a21a <main+14>\n\n2\tvoid main() {\n3\t  // Example using switch expressions with different value types\n4\t  const exampleValue = 'B';\n5\t\n6\t  // Switch expression for String pattern matching\n7\t  final result = switch (exampleValue) {\n8\t    'A' => 'Result is Alpha',\n9\t    'B' => 'Result is Beta',\n10\t    'C' => 'Result is Gamma',\n11\t    _ => 'Result is Unknown',\n12\t  };\n13\t\n14\t  print(result); // Output: Result is Beta\n   0x000000000008a20c <+0>:\tpush   rbp\n   0x000000000008a20d <+1>:\tmov    rbp,rsp\n   0x000000000008a210 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a214 <+8>:\tjbe    0x8a23b <main+47>\n   0x000000000008a21a <+14>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a221 <+21>:\tcall   0x8a244 <print>\n\n15\t\n16\t  // Additional example with number patterns\n17\t  const numericValue = 3;\n18\t  final numericResult = switch (numericValue) {\n19\t    1 => 'One',\n20\t    2 => 'Two',\n21\t    >= 3 && <= 5 => 'Between Three and Five',\n22\t    _ => 'Other',\n23\t  };\n24\t\n25\t  print(numericResult); // Output: Between Three and Five\n   0x000000000008a226 <+26>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008a22d <+33>:\tcall   0x8a244 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_44.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example values to demonstrate guard clauses\n  final values = [\n    42,\n    -5,\n    100,\n    0,\n    7,\n  ];\n\n  for (final value in values) {\n    print('Value: $value');\n    \n    switch (value) {\n      case int n when n > 0 && n.isEven:\n        print('  Positive even number\\n');\n      case int n when n > 0 && n.isOdd:\n        print('  Positive odd number\\n');\n      case int n when n < 0:\n        print('  Negative number\\n');\n      case int n when n == 0:\n        print('  Zero\\n');\n      default:\n        print('  Unexpected value\\n');\n    }\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x20\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a2f5 <main+417>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0xa\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    rbx,rax\n   0x000000000008a178 <+36>:\tmov    QWORD PTR [rbp-0x18],rbx\n   0x000000000008a17c <+40>:\tmov    QWORD PTR [rbx+0x17],0x54\n   0x000000000008a184 <+48>:\tmov    QWORD PTR [rbx+0x1f],0xfffffffffffffff6\n   0x000000000008a18c <+56>:\tmov    QWORD PTR [rbx+0x27],0xc8\n   0x000000000008a194 <+64>:\tmov    QWORD PTR [rbx+0x2f],0x0\n   0x000000000008a19c <+72>:\tmov    QWORD PTR [rbx+0x37],0xe\n   0x000000000008a1a4 <+80>:\txor    eax,eax\n   0x000000000008a1a6 <+82>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1aa <+86>:\tjbe    0x8a301 <main+429>\n   0x000000000008a1b0 <+92>:\tcmp    rax,0x5\n   0x000000000008a1b4 <+96>:\tjge    0x8a2ec <main+408>\n   0x000000000008a1ba <+102>:\tmov    rsi,QWORD PTR [rbx+rax*8+0x17]\n   0x000000000008a1bf <+107>:\tmov    QWORD PTR [rbp-0x10],rsi\n   0x000000000008a1c3 <+111>:\tmov    rdi,rax\n   0x000000000008a1c6 <+114>:\tadd    rdi,0x1\n   0x000000000008a1ca <+118>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a1ce <+122>:\tcmp    rsi,QWORD PTR [r14+0x70]\n   0x000000000008a1d2 <+126>:\tjne    0x8a212 <main+190>\n   0x000000000008a1d8 <+132>:\tmov    rax,rsi\n   0x000000000008a1db <+135>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a1df <+139>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008a1e3 <+143>:\ttest   al,0x1\n   0x000000000008a1e5 <+145>:\tje     0x8a212 <main+190>\n   0x000000000008a1eb <+151>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000008a1ee <+154>:\tshr    esi,0xc\n   0x000000000008a1f1 <+157>:\tsub    rsi,0x3c\n   0x000000000008a1f5 <+161>:\tcmp    rsi,0x1\n   0x000000000008a1f9 <+165>:\tjbe    0x8a212 <main+190>\n   0x000000000008a1ff <+171>:\tmov    rbx,QWORD PTR [r15+0x597]\n   0x000000000008a206 <+178>:\tmov    r9,QWORD PTR [r15+0x7b7]\n   0x000000000008a20d <+185>:\tcall   0x8aca8 <assert type is int>\n   0x000000000008a212 <+190>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a216 <+194>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a21a <+198>:\tmov    r10d,0x4\n   0x000000000008a220 <+204>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_46.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example 1: List pattern matching with variable capture\n  final numbers = [1, 2, 3];\n  switch (numbers) {\n    case [var first, var second, var third]:\n      print('First: $first, Second: $second, Third: $third');\n    default:\n      print('No match');\n  }\n\n  // Example 2: Map pattern matching with variable capture\n  final person = {'name': 'Alice', 'age': 30};\n  switch (person) {\n    case {'name': var name, 'age': var age}:\n      print('Name: $name, Age: $age');\n    default:\n      print('No match');\n  }\n\n  // Example 3: Nested pattern with wildcards\n  final complexData = [\n    {'id': 1, 'values': [10, 20]},\n    {'id': 2, 'values': [30, 40]}\n  ];\n  \n  for (var item in complexData) {\n    switch (item) {\n      case {'id': var id, 'values': [var firstVal, var secondVal]}:\n        print('ID: $id, Values: $firstVal, $secondVal');\n      default:\n        print('No match');\n    }\n  }\n\n  // Example 4: Object destructuring with variable patterns\n  final point = Point(5, 12);\n  switch (point) {\n    case Point(x: var x, y: var y):\n      print('Point coordinates: ($x, $y)');\n    default:\n      print('Unknown point');\n  }\n}\n\n// Helper class for example 4\nclass Point {\n  final int x;\n  final int y;\n  \n  Point(this.x, this.y);\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a60c <+1172>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a610 <+1176>:\tmov    rsp,rbp\n   0x000000000008a613 <+1179>:\tpop    rbp\n   0x000000000008a614 <+1180>:\tret\n   0x000000000008a615 <+1181>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a61c <+1188>:\tjmp    0x8a18a <main+18>\n   0x000000000008a621 <+1193>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a628 <+1200>:\tjmp    0x8a3d7 <main+607>\n   0x000000000008a62d:\tint3\n   0x000000000008a62e:\tint3\n   0x000000000008a62f:\tint3\n   0x000000000008a630 <+0>:\tpush   rbp\n   0x000000000008a631 <+1>:\tmov    rbp,rsp\n   0x000000000008a634 <+4>:\tsub    rsp,0x18\n   0x000000000008a638 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a63c <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a640 <+16>:\tjbe    0x8a68a <printToConsole+90>\n   0x000000000008a646 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a64a <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a651 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a655 <+37>:\tjne    0x8a667 <printToConsole+55>\n   0x000000000008a65b <+43>:\tmov    rdx,QWORD PTR [r15+0x867]\n   0x000000000008a662 <+50>:\tcall   0x831ec <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Example 1: List pattern matching with variable capture\n4\t  final numbers = [1, 2, 3];\n5\t  switch (numbers) {\n6\t    case [var first, var second, var third]:\n7\t      print('First: $first, Second: $second, Third: $third');\n   0x000000000008a178 <+0>:\tpush   rbp\n   0x000000000008a179 <+1>:\tmov    rbp,rsp\n   0x000000000008a17c <+4>:\tsub    rsp,0x38\n   0x000000000008a180 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a184 <+12>:\tjbe    0x8a615 <main+1181>\n   0x000000000008a18a <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a191 <+25>:\tcall   0x8a694 <print>\n   0x000000000008a196 <+30>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a19a <+34>:\tmov    r10d,0x8\n   0x000000000008a1a0 <+40>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n8\t    default:\n9\t      print('No match');\n10\t  }\n11\t\n12\t  // Example 2: Map pattern matching with variable capture\n13\t  final person = {'name': 'Alice', 'age': 30};\n   0x000000000008a1a5 <+45>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a1ac <+52>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a1b0 <+56>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a1b7 <+63>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a1bb <+67>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a1c2 <+74>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a1c6 <+78>:\tmov    QWORD PTR [rax+0x2f],0x3c\n   0x000000000008a1ce <+86>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a1d5 <+93>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a1da <+98>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a1de <+102>:\tcall   0x65e6c <new Map._fromLiteral>\n\n14\t  switch (person) {\n15\t    case {'name': var name, 'age': var age}:\n   0x000000000008a1e3 <+107>:\tmov    rdi,rax\n   0x000000000008a1e6 <+110>:\tmov    rsi,QWORD PTR [r15+0x7bf]\n   0x000000000008a1ed <+117>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a1f1 <+121>:\tcall   0x81ba8 <_LinkedHashMapMixin.[]>\n   0x000000000008a1f6 <+126>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a1fa <+130>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a1fe <+134>:\tje     0x8a271 <main+249>\n   0x000000000008a204 <+140>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a208 <+144>:\tmov    rsi,QWORD PTR [r15+0x7cf]\n   0x000000000008a20f <+151>:\tcall   0x81ba8 <_LinkedHashMapMixin.[]>\n   0x000000000008a214 <+156>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a218 <+160>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a21c <+164>:\tje     0x8a271 <main+249>\n   0x000000000008a222 <+170>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a226 <+174>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a22a <+178>:\tmov    r10d,0x8\n   0x000000000008a230 <+184>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n16\t      print('Name: $name, Age: $age');\n   0x000000000008a235 <+189>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a23c <+196>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a240 <+200>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a244 <+204>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a248 <+208>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a24f <+215>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a253 <+219>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a257 <+223>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a25b <+227>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a25f <+231>:\tcall   0x587bc <_StringBase._interpolate>\n   0x000000000008a264 <+236>:\tmov    rdi,rax\n   0x000000000008a267 <+239>:\tcall   0x8a694 <print>\n\n17\t    default:\n18\t      print('No match');\n19\t  }\n20\t\n21\t  // Example 3: Nested pattern with wildcards\n22\t  final complexData = [\n23\t    {'id': 1, 'values': [10, 20]},\n   0x000000000008a2dd <+357>:\tmov    rcx,rax\n   0x000000000008a2e0 <+360>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a2e4 <+364>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a2e8 <+368>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a2f0 <+376>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a2f4 <+380>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a2f8 <+384>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a2ff <+391>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a304 <+396>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a308 <+400>:\tcall   0x65e6c <new Map._fromLiteral>\n   0x000000000008a30d <+405>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a311 <+409>:\tmov    r10d,0x8\n   0x000000000008a317 <+415>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a31b <+419>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n24\t    {'id': 2, 'values': [30, 40]}\n   0x000000000008a371 <+505>:\tmov    rcx,rax\n   0x000000000008a374 <+508>:\tmov    rax,QWORD PTR [rbp-0x18]\n   0x000000000008a378 <+512>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a37c <+516>:\tmov    QWORD PTR [rcx+0xf],0x4\n   0x000000000008a384 <+524>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a388 <+528>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a38c <+532>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a393 <+539>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a398 <+544>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a39c <+548>:\tcall   0x65e6c <new Map._fromLiteral>\n\n25\t  ];\n26\t  \n27\t  for (var item in complexData) {\n28\t    switch (item) {\n29\t      case {'id': var id, 'values': [var firstVal, var secondVal]}:\n   0x000000000008a41d <+677>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a421 <+681>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a424 <+684>:\tshr    ecx,0xc\n   0x000000000008a427 <+687>:\tmov    rdi,rax\n   0x000000000008a42a <+690>:\tmov    rsi,QWORD PTR [r15+0x7f7]\n   0x000000000008a431 <+697>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a435 <+701>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a438 <+704>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a43c <+708>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a440 <+712>:\tje     0x8a5e7 <main+1135>\n   0x000000000008a446 <+718>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x000000000008a44a <+722>:\tmov    ecx,DWORD PTR [rdi-0x1]\n   0x000000000008a44d <+725>:\tshr    ecx,0xc\n   0x000000000008a450 <+728>:\tmov    rsi,QWORD PTR [r15+0x7ff]\n   0x000000000008a457 <+735>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a45b <+739>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a45e <+742>:\tmov    rbx,rax\n   0x000000000008a461 <+745>:\tmov    QWORD PTR [rbp-0x8],rbx\n   0x000000000008a465 <+749>:\tcmp    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a469 <+753>:\tje     0x8a5e7 <main+1135>\n   0x000000000008a46f <+759>:\tmov    rax,rbx\n   0x000000000008a472 <+762>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a476 <+766>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008a47a <+770>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a47e <+774>:\tje     0x8a506 <main+910>\n   0x000000000008a484 <+780>:\ttest   al,0x1\n   0x000000000008a486 <+782>:\tje     0x8a506 <main+910>\n   0x000000000008a48c <+788>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000008a48f <+791>:\tshr    esi,0xc\n   0x000000000008a492 <+794>:\tmov    r9,QWORD PTR [r14+0x708]\n   0x000000000008a499 <+801>:\tmov    r9,QWORD PTR [r9+0x18]\n   0x000000000008a49d <+805>:\tmov    r9,QWORD PTR [r9+rsi*8]\n   0x000000000008a4a1 <+809>:\tmov    r9,QWORD PTR [r9+0x4f]\n   0x000000000008a4a5 <+813>:\tcmp    r9,QWORD PTR [r14+0x70]\n   0x000000000008a4a9 <+817>:\tje     0x8a506 <main+910>\n   0x000000000008a4af <+823>:\tmov    r9d,DWORD PTR [r9+0xf]\n   0x000000000008a4b3 <+827>:\tshr    r9,0x3\n   0x000000000008a4b7 <+831>:\tcmp    r9,0x1f6\n   0x000000000008a4be <+838>:\tje     0x8a50f <main+919>\n   0x000000000008a4c4 <+844>:\tmov    r9,QWORD PTR [r15+0x81f]\n   0x000000000008a4cb <+851>:\tmov    r11,QWORD PTR [r15+0x827]\n   0x000000000008a4d2 <+858>:\tcall   QWORD PTR [r11+0x7]\n   0x000000000008a4d6 <+862>:\tcmp    r8,QWORD PTR [r14+0x70]\n   0x000000000008a4da <+866>:\tje     0x8a4eb <main+883>\n   0x000000000008a4dc <+868>:\ttest   r8b,0x10\n   0x000000000008a4e0 <+872>:\tje     0x8a50f <main+919>\n   0x000000000008a4e6 <+878>:\tjmp    0x8a506 <main+910>\n   0x000000000008a4eb <+883>:\tmov    rbx,QWORD PTR [r15+0x82f]\n   0x000000000008a4f2 <+890>:\tmov    r9,QWORD PTR [r15+0x837]\n   0x000000000008a4f9 <+897>:\tmov    r11,QWORD PTR [r15+0x83f]\n   0x000000000008a500 <+904>:\tcall   QWORD PTR [r11+0x7]\n   0x000000000008a504 <+908>:\tjmp    0x8a513 <main+923>\n   0x000000000008a506 <+910>:\tmov    rax,QWORD PTR [r14+0x80]\n   0x000000000008a50d <+917>:\tjmp    0x8a513 <main+923>\n   0x000000000008a50f <+919>:\tmov    rax,QWORD PTR [r14+0x78]\n   0x000000000008a513 <+923>:\ttest   al,0x10\n   0x000000000008a515 <+925>:\tjne    0x8a5e7 <main+1135>\n   0x000000000008a51b <+931>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a51f <+935>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a522 <+938>:\tshr    ecx,0xc\n   0x000000000008a525 <+941>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a529 <+945>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a52d <+949>:\tcall   QWORD PTR [rax+rcx*8+0x7ce0]\n   0x000000000008a534 <+956>:\tcmp    rax,0x4\n   0x000000000008a538 <+960>:\tjne    0x8a5e7 <main+1135>\n   0x000000000008a53e <+966>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x000000000008a542 <+970>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a546 <+974>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a549 <+977>:\tshr    ecx,0xc\n   0x000000000008a54c <+980>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a551 <+985>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a559 <+993>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a55d <+997>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a560 <+1000>:\tmov    rdx,rax\n   0x000000000008a563 <+1003>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a567 <+1007>:\tmov    QWORD PTR [rbp-0x28],rdx\n   0x000000000008a56b <+1011>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a56e <+1014>:\tshr    ecx,0xc\n   0x000000000008a571 <+1017>:\tmov    QWORD PTR [rsp+0x8],rax\n   0x000000000008a576 <+1022>:\tmov    QWORD PTR [rsp],0x2\n   0x000000000008a57e <+1030>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a582 <+1034>:\tcall   QWORD PTR [rax+rcx*8]\n   0x000000000008a585 <+1037>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a589 <+1041>:\tmov    r10d,0xc\n   0x000000000008a58f <+1047>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a593 <+1051>:\tcall   0x84c90 <stub _iso_stub_AllocateArrayStub>\n\n30\t        print('ID: $id, Values: $firstVal, $secondVal');\n   0x000000000008a598 <+1056>:\tmov    r11,QWORD PTR [r15+0x847]\n   0x000000000008a59f <+1063>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a5a3 <+1067>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a5a7 <+1071>:\tmov    QWORD PTR [rax+0x1f],rcx\n   0x000000000008a5ab <+1075>:\tmov    r11,QWORD PTR [r15+0x84f]\n   0x000000000008a5b2 <+1082>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a5b6 <+1086>:\tmov    rcx,QWORD PTR [rbp-0x28]\n   0x000000000008a5ba <+1090>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a5be <+1094>:\tmov    r11,QWORD PTR [r15+0x857]\n   0x000000000008a5c5 <+1101>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a5c9 <+1105>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a5cd <+1109>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008a5d1 <+1113>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a5d5 <+1117>:\tcall   0x587bc <_StringBase._interpolate>\n\n31\t      default:\n32\t        print('No match');\n33\t    }\n34\t  }\n35\t\n36\t  // Example 4: Object destructuring with variable patterns\n37\t  final point = Point(5, 12);\n38\t  switch (point) {\n39\t    case Point(x: var x, y: var y):\n40\t      print('Point coordinates: ($x, $y)');\n   0x000000000008a5f3 <+1147>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x000000000008a5f7 <+1151>:\tmov    rbx,QWORD PTR [rbp-0x18]\n   0x000000000008a5fb <+1155>:\tjmp    0x8a3cd <main+597>\n   0x000000000008a600 <+1160>:\tmov    rdi,QWORD PTR [r15+0x85f]\n   0x000000000008a607 <+1167>:\tcall   0x8a694 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_47.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example values to demonstrate relational patterns\n  final values = [5, 15, -3, 25, 0];\n  \n  for (final value in values) {\n    // Use switch expression with relational patterns\n    final result = switch (value) {\n      < 0 => 'Negative',\n      0 => 'Zero',\n      > 0 && < 10 => 'Small positive',\n      >= 10 && <= 20 => 'Medium positive',\n      > 20 => 'Large positive',\n      _ => 'Unexpected', // Fallback (should not occur here)\n    };\n    \n    print('$value: $result');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x28\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a305 <main+433>\n   0x000000000008a166 <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a16a <+22>:\tmov    r10d,0xa\n   0x000000000008a170 <+28>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n   0x000000000008a175 <+33>:\tmov    rbx,rax\n   0x000000000008a178 <+36>:\tmov    QWORD PTR [rbp-0x18],rbx\n   0x000000000008a17c <+40>:\tmov    QWORD PTR [rbx+0x17],0xa\n   0x000000000008a184 <+48>:\tmov    QWORD PTR [rbx+0x1f],0x1e\n   0x000000000008a18c <+56>:\tmov    QWORD PTR [rbx+0x27],0xfffffffffffffffa\n   0x000000000008a194 <+64>:\tmov    QWORD PTR [rbx+0x2f],0x32\n   0x000000000008a19c <+72>:\tmov    QWORD PTR [rbx+0x37],0x0\n   0x000000000008a1a4 <+80>:\txor    eax,eax\n   0x000000000008a1a6 <+82>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a1aa <+86>:\tjbe    0x8a311 <main+445>\n   0x000000000008a1b0 <+92>:\tcmp    rax,0x5\n   0x000000000008a1b4 <+96>:\tjge    0x8a2fc <main+424>\n   0x000000000008a1ba <+102>:\tmov    rsi,QWORD PTR [rbx+rax*8+0x17]\n   0x000000000008a1bf <+107>:\tmov    QWORD PTR [rbp-0x10],rsi\n   0x000000000008a1c3 <+111>:\tmov    rdi,rax\n   0x000000000008a1c6 <+114>:\tadd    rdi,0x1\n   0x000000000008a1ca <+118>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a1ce <+122>:\tcmp    rsi,QWORD PTR [r14+0x70]\n   0x000000000008a1d2 <+126>:\tjne    0x8a212 <main+190>\n   0x000000000008a1d8 <+132>:\tmov    rax,rsi\n   0x000000000008a1db <+135>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a1df <+139>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008a1e3 <+143>:\ttest   al,0x1\n   0x000000000008a1e5 <+145>:\tje     0x8a212 <main+190>\n   0x000000000008a1eb <+151>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000008a1ee <+154>:\tshr    esi,0xc\n   0x000000000008a1f1 <+157>:\tsub    rsi,0x3c\n   0x000000000008a1f5 <+161>:\tcmp    rsi,0x1\n   0x000000000008a1f9 <+165>:\tjbe    0x8a212 <main+190>\n   0x000000000008a1ff <+171>:\tmov    rbx,QWORD PTR [r15+0x597]\n   0x000000000008a206 <+178>:\tmov    r9,QWORD PTR [r15+0x7b7]\n   0x000000000008a20d <+185>:\tcall   0x8acb8 <assert type is int>\n   0x000000000008a212 <+190>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a216 <+194>:\tsar    rax,1\n   0x000000000008a219 <+197>:\tjae    0x8a220 <main+204>\n   0x000000000008a21b <+199>:\tmov    rax,QWORD PTR [rax+rax*1+0x8]\n   0x000000000008a220 <+204>:\tcmp    rax,0x0\n   0x000000000008a224 <+208>:\tjge    0x8a236 <main+226>\n   0x000000000008a22a <+214>:\tmov    rcx,QWORD PTR [r15+0x7c7]\n   0x000000000008a231 <+221>:\tjmp    0x8a2a9 <main+341>\n   0x000000000008a236 <+226>:\tcmp    rax,0x0\n   0x000000000008a23a <+230>:\tjne    0x8a24c <main+248>\n   0x000000000008a240 <+236>:\tmov    rcx,QWORD PTR [r15+0x7cf]\n   0x000000000008a247 <+243>:\tjmp    0x8a2a9 <main+341>\n   0x000000000008a24c <+248>:\tcmp    rax,0x0\n   0x000000000008a250 <+252>:\tjle    0x8a26c <main+280>\n   0x000000000008a256 <+258>:\tcmp    rax,0xa\n   0x000000000008a25a <+262>:\tjge    0x8a26c <main+280>\n   0x000000000008a260 <+268>:\tmov    rcx,QWORD PTR [r15+0x7d7]\n   0x000000000008a267 <+275>:\tjmp    0x8a2a9 <main+341>\n   0x000000000008a26c <+280>:\tcmp    rax,0xa\n   0x000000000008a270 <+284>:\tjl     0x8a28c <main+312>\n   0x000000000008a276 <+290>:\tcmp    rax,0x14\n   0x000000000008a27a <+294>:\tjg     0x8a28c <main+312>\n   0x000000000008a280 <+300>:\tmov    rcx,QWORD PTR [r15+0x7df]\n   0x000000000008a287 <+307>:\tjmp    0x8a2a9 <main+341>\n   0x000000000008a28c <+312>:\tcmp    rax,0x14\n   0x000000000008a290 <+316>:\tjle    0x8a2a2 <main+334>\n   0x000000000008a296 <+322>:\tmov    rcx,QWORD PTR [r15+0x7e7]\n   0x000000000008a29d <+329>:\tjmp    0x8a2a9 <main+341>\n   0x000000000008a2a2 <+334>:\tmov    rcx,QWORD PTR [r15+0x7ef]\n   0x000000000008a2a9 <+341>:\tmov    rax,QWORD PTR [rbp-0x10]\n   0x000000000008a2ad <+345>:\tmov    QWORD PTR [rbp-0x20],rcx\n   0x000000000008a2b1 <+349>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a2b5 <+353>:\tmov    r10d,0x6\n   0x000000000008a2bb <+359>:\tcall   0x84c6c <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_48.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example logical operations with different boolean combinations\n  bool a = true;\n  bool b = false;\n  \n  // Logical AND (&&) pattern\n  print('Logical AND (&&) Examples:');\n  print('$a && $b = ${a && b}');  // true && false = false\n  print('$a && $a = ${a && a}');  // true && true = true\n  print('$b && $b = ${b && b}');  // false && false = false\n  \n  // Logical OR (||) pattern\n  print('\\nLogical OR (||) Examples:');\n  print('$a || $b = ${a || b}');  // true || false = true\n  print('$a || $a = ${a || a}');  // true || true = true\n  print('$b || $b = ${b || b}');  // false || false = false\n  \n  // Combined logical patterns\n  print('\\nCombined Logical Patterns:');\n  print('$a && ($a || $b) = ${a && (a || b)}');  // true && (true || false) = true\n  print('$b || ($a && $b) = ${b || (a && b)}');  // false || (true && false) = false\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a15c <+8>:\tjbe    0x8a1ef <main+155>\n   0x000000000008a162 <+14>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a169 <+21>:\tcall   0x8a234 <printToConsole>\n   0x000000000008a192 <+62>:\tmov    rdi,QWORD PTR [r15+0x7d7]\n   0x000000000008a199 <+69>:\tcall   0x8a234 <printToConsole>\n   0x000000000008a1c2 <+110>:\tmov    rdi,QWORD PTR [r15+0x7f7]\n   0x000000000008a1c9 <+117>:\tcall   0x8a234 <printToConsole>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_49.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Demonstrate cast patterns with different types\n  final items = [\n    42,\n    3.14,\n    'Hello',\n    true,\n    [1, 2, 3],\n    {'key': 'value'}\n  ];\n\n  for (final item in items) {\n    print('Processing: $item (${item.runtimeType})');\n    \n    // Pattern 1: Cast to int with null check\n    if (item is int) {\n      final intValue = item as int;\n      print('\u2713 Integer value: ${intValue + 10}');\n    }\n    \n    // Pattern 2: Safe cast with try-catch\n    try {\n      final doubleValue = item as double;\n      print('\u2713 Double value: ${doubleValue * 2}');\n    } catch (e) {\n      // Cast failed\n    }\n    \n    // Pattern 3: Type check and cast\n    if (item is String) {\n      final stringValue = item;\n      print('\u2713 String length: ${stringValue.length}');\n    }\n    \n    // Pattern 4: List cast with generic type\n    if (item is List<int>) {\n      print('\u2713 Int list sum: ${item.reduce((a, b) => a + b)}');\n    }\n    \n    // Pattern 5: Map cast with type parameters\n    if (item is Map<String, dynamic>) {\n      print('\u2713 Map keys: ${item.keys.join(', ')}');\n    }\n    \n    print('---');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008b656 <+246>:\tmov    rcx,rax\n   0x000000000008b659 <+249>:\tmov    rax,QWORD PTR [rbp-0x70]\n   0x000000000008b65d <+253>:\tmov    QWORD PTR [rbp-0x60],rcx\n   0x000000000008b661 <+257>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b665 <+261>:\tmov    QWORD PTR [rcx+0xf],0xc\n   0x000000000008b66d <+269>:\tmov    rdx,QWORD PTR [r15+0x7df]\n   0x000000000008b674 <+276>:\tcall   0x55114 <new ListIterator>\n\n512\tin dart:core-patch/growable_array.dart\n513\tin dart:core-patch/growable_array.dart\n514\tin dart:core-patch/growable_array.dart\n515\tin dart:core-patch/growable_array.dart\n516\tin dart:core-patch/growable_array.dart\n517\tin dart:core-patch/growable_array.dart\n518\tin dart:core-patch/growable_array.dart\n519\tin dart:core-patch/growable_array.dart\n520\tin dart:core-patch/growable_array.dart\n521\tin dart:core-patch/growable_array.dart\n522\tin dart:core-patch/growable_array.dart\n523\tin dart:core-patch/growable_array.dart\n524\tin dart:core-patch/growable_array.dart\n525\tin dart:core-patch/growable_array.dart\n526\tin dart:core-patch/growable_array.dart\n527\tin dart:core-patch/growable_array.dart\n528\tin dart:core-patch/growable_array.dart\n529\tin dart:core-patch/growable_array.dart\n530\tin dart:core-patch/growable_array.dart\n531\tin dart:core-patch/growable_array.dart\n532\tin dart:core-patch/growable_array.dart\n533\tin dart:core-patch/growable_array.dart\n534\tin dart:core-patch/growable_array.dart\n535\tin dart:core-patch/growable_array.dart\n536\tin dart:core-patch/growable_array.dart\n537\tin dart:core-patch/growable_array.dart\n538\tin dart:core-patch/growable_array.dart\n539\tin dart:core-patch/growable_array.dart\n540\tin dart:core-patch/growable_array.dart\n541\tin dart:core-patch/growable_array.dart\n542\tin dart:core-patch/growable_array.dart\n543\tin dart:core-patch/growable_array.dart\n544\tin dart:core-patch/growable_array.dart\n545\tin dart:core-patch/growable_array.dart\n546\tin dart:core-patch/growable_array.dart\n547\tin dart:core-patch/growable_array.dart\n548\tin dart:core-patch/growable_array.dart\n549\tin dart:core-patch/growable_array.dart\n550\tin dart:core-patch/growable_array.dart\n551\tin dart:core-patch/growable_array.dart\n552\tin dart:core-patch/growable_array.dart\n553\tin dart:core-patch/growable_array.dart\n554\tin dart:core-patch/growable_array.dart\n555\tin dart:core-patch/growable_array.dart\n556\tin dart:core-patch/growable_array.dart\n557\tin dart:core-patch/growable_array.dart\n558\tin dart:core-patch/growable_array.dart\n559\tin dart:core-patch/growable_array.dart\n560\tin dart:core-patch/growable_array.dart\n561\tin dart:core-patch/growable_array.dart\n562\tin dart:core-patch/growable_array.dart\n563\tin dart:core-patch/growable_array.dart\n564\tin dart:core-patch/growable_array.dart\n565\tin dart:core-patch/growable_array.dart\n566\tin dart:core-patch/growable_array.dart\n567\tin dart:core-patch/growable_array.dart\n568\tin dart:core-patch/growable_array.dart\n569\tin dart:core-patch/growable_array.dart\n570\tin dart:core-patch/growable_array.dart\n571\tin dart:core-patch/growable_array.dart\n572\tin dart:core-patch/growable_array.dart\n573\tin dart:core-patch/growable_array.dart\n574\tin dart:core-patch/growable_array.dart\n575\tin dart:core-patch/growable_array.dart\n576\tin dart:core-patch/growable_array.dart\n577\tin dart:core-patch/growable_array.dart\n578\tin dart:core-patch/growable_array.dart\n579\tin dart:core-patch/growable_array.dart\n580\tin dart:core-patch/growable_array.dart\n   0x000000000008b560 <+0>:\tpush   rbp\n   0x000000000008b561 <+1>:\tmov    rbp,rsp\n   0x000000000008b564 <+4>:\tsub    rsp,0x90\n   0x000000000008b56b <+11>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008b56f <+15>:\tjbe    0x8bb6d <main+1549>\n   0x000000000008b575 <+21>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b579 <+25>:\tmov    r10d,0x6\n   0x000000000008b57f <+31>:\tcall   0x86078 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b584 <+36>:\tmov    QWORD PTR [rbp-0x60],rax\n   0x000000000008b588 <+40>:\tmov    QWORD PTR [rax+0x17],0x2\n   0x000000000008b590 <+48>:\tmov    QWORD PTR [rax+0x1f],0x4\n   0x000000000008b598 <+56>:\tmov    QWORD PTR [rax+0x27],0x6\n   0x000000000008b5a0 <+64>:\tmov    rdx,QWORD PTR [r15+0x237]\n   0x000000000008b5a7 <+71>:\tcall   0x85138 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b5ac <+76>:\tmov    rcx,rax\n   0x000000000008b5af <+79>:\tmov    rax,QWORD PTR [rbp-0x60]\n   0x000000000008b5b3 <+83>:\tmov    QWORD PTR [rbp-0x68],rcx\n   0x000000000008b5b7 <+87>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008b5bb <+91>:\tmov    QWORD PTR [rcx+0xf],0x6\n   0x000000000008b5c3 <+99>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b5c7 <+103>:\tmov    r10d,0x4\n   0x000000000008b5cd <+109>:\tcall   0x86078 <stub _iso_stub_AllocateArrayStub>\n\n581\tin dart:core-patch/growable_array.dart\n582\tin dart:core-patch/growable_array.dart\n583\tin dart:core-patch/growable_array.dart\n584\tin dart:core-patch/growable_array.dart\n585\tin dart:core-patch/growable_array.dart\n586\tin dart:core-patch/growable_array.dart\n587\tin dart:core-patch/growable_array.dart\n588\tin dart:core-patch/growable_array.dart\n589\tin dart:core-patch/growable_array.dart\n590\tin dart:core-patch/growable_array.dart\n591\tin dart:core-patch/growable_array.dart\n592\tin dart:core-patch/growable_array.dart\n593\tin dart:core-patch/growable_array.dart\n594\tin dart:core-patch/growable_array.dart\n595\tin dart:core-patch/growable_array.dart\n596\tin dart:core-patch/growable_array.dart\n597\tin dart:core-patch/growable_array.dart\n598\tin dart:core-patch/growable_array.dart\n599\tin dart:core-patch/growable_array.dart\n600\tin dart:core-patch/growable_array.dart\n601\tin dart:core-patch/growable_array.dart\n602\tin dart:core-patch/growable_array.dart\n603\tin dart:core-patch/growable_array.dart\n604\tin dart:core-patch/growable_array.dart\n605\tin dart:core-patch/growable_array.dart\n606\tin dart:core-patch/growable_array.dart\n607\tin dart:core-patch/growable_array.dart\n608\tin dart:core-patch/growable_array.dart\n609\tin dart:core-patch/growable_array.dart\n610\tin dart:core-patch/growable_array.dart\n611\tin dart:core-patch/growable_array.dart\n612\tin dart:core-patch/growable_array.dart\n613\tin dart:core-patch/growable_array.dart\n   0x000000000008b5fd <+157>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b601 <+161>:\tmov    r10d,0xc\n   0x000000000008b607 <+167>:\tmov    QWORD PTR [rbp-0x60],rax\n   0x000000000008b60b <+171>:\tcall   0x86078 <stub _iso_stub_AllocateArrayStub>\n   0x000000000008b610 <+176>:\tmov    QWORD PTR [rbp-0x70],rax\n   0x000000000008b614 <+180>:\tmov    QWORD PTR [rax+0x17],0x54\n   0x000000000008b61c <+188>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008b623 <+195>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008b627 <+199>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008b62e <+206>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008b632 <+210>:\tmov    r11,QWORD PTR [r14+0x78]\n   0x000000000008b636 <+214>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008b63a <+218>:\tmov    rcx,QWORD PTR [rbp-0x68]\n   0x000000000008b63e <+222>:\tmov    QWORD PTR [rax+0x37],rcx\n   0x000000000008b642 <+226>:\tmov    rcx,QWORD PTR [rbp-0x60]\n   0x000000000008b646 <+230>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008b64a <+234>:\tmov    rdx,QWORD PTR [r15+0x7df]\n   0x000000000008b651 <+241>:\tcall   0x85138 <stub _iso_stub_AllocateGrowableArrayStub>\n   0x000000000008b679 <+281>:\tmov    rdi,rax\n   0x000000000008b67c <+284>:\tmov    rsi,QWORD PTR [rbp-0x60]\n   0x000000000008b680 <+288>:\tmov    QWORD PTR [rbp-0x70],rdi\n   0x000000000008b684 <+292>:\tmov    QWORD PTR [rdi+0xf],rsi\n   0x000000000008b688 <+296>:\tmov    eax,0x6\n   0x000000000008b68d <+301>:\tmov    QWORD PTR [rdi+0x17],rax\n   0x000000000008b691 <+305>:\txor    eax,eax\n   0x000000000008b693 <+307>:\tmov    QWORD PTR [rdi+0x1f],rax\n   0x000000000008b697 <+311>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008b69b <+315>:\tjbe    0x8bb79 <main+1561>\n   0x000000000008b6a1 <+321>:\tmov    rax,QWORD PTR [rsi+0xf]\n   0x000000000008b6a5 <+325>:\tsar    rax,1\n   0x000000000008b6a8 <+328>:\tcmp    rax,0x6\n   0x000000000008b6ac <+332>:\tjne    0x8bb51 <main+1521>\n   0x000000000008b6b2 <+338>:\tmov    rcx,QWORD PTR [rdi+0x1f]\n   0x000000000008b6b6 <+342>:\tcmp    rcx,rax\n   0x000000000008b6b9 <+345>:\tjge    0x8bb3e <main+1502>\n   0x000000000008b6bf <+351>:\tmov    rbx,rcx\n   0x000000000008b6c2 <+354>:\tcmp    rbx,rax\n   0x000000000008b6c5 <+357>:\tjae    0x8bb85 <main+1573>\n   0x000000000008b6cb <+363>:\tmov    rax,QWORD PTR [rsi+0x17]\n   0x000000000008b6cf <+367>:\tmov    rbx,QWORD PTR [rax+rcx*8+0x17]\n   0x000000000008b6d4 <+372>:\tmov    rax,rbx\n   0x000000000008b6d7 <+375>:\tmov    QWORD PTR [rbp-0x68],rbx\n   0x000000000008b6db <+379>:\tmov    QWORD PTR [rdi+0x27],rax\n   0x000000000008b6df <+383>:\ttest   al,0x1\n   0x000000000008b6e1 <+385>:\tje     0x8b6fa <main+410>\n   0x000000000008b6e3 <+387>:\tmov    r11b,BYTE PTR [rdi-0x1]\n   0x000000000008b6e7 <+391>:\tshr    r11d,0x2\n   0x000000000008b6eb <+395>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008b6ef <+399>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008b6f3 <+403>:\tje     0x8b6fa <main+410>\n   0x000000000008b6f5 <+405>:\tcall   0x84b89 <stub _iso_stub_WriteBarrierWrappersStub+65>\n   0x000000000008b6fa <+410>:\tadd    rcx,0x1\n   0x000000000008b6fe <+414>:\tmov    QWORD PTR [rdi+0x1f],rcx\n   0x000000000008b702 <+418>:\tcmp    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b706 <+422>:\tjne    0x8b734 <main+468>\n   0x000000000008b70c <+428>:\tmov    rax,rbx\n   0x000000000008b70f <+431>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008b713 <+435>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008b717 <+439>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008b71b <+443>:\tjne    0x8b734 <main+468>\n   0x000000000008b721 <+449>:\tmov    rbx,QWORD PTR [r15+0x7e7]\n   0x000000000008b728 <+456>:\tmov    r9,QWORD PTR [r15+0x7ef]\n   0x000000000008b72f <+463>:\tcall   0x8d100 <assert type is Object>\n   0x000000000008b734 <+468>:\tmov    rax,QWORD PTR [rbp-0x68]\n   0x000000000008b738 <+472>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008b73c <+476>:\tmov    r10d,0xa\n   0x000000000008b742 <+482>:\tcall   0x86078 <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_50.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Demonstrate null-check patterns using different Dart operators\n  String? nullableString = null;\n  \n  // 1. Null-aware operator (??)\n  String result1 = nullableString ?? 'Default Value';\n  print('Null-aware operator result: $result1');\n  \n  // 2. Null-aware access operator (?.)\n  int? length = nullableString?.length;\n  print('Null-aware access result: $length');\n  \n  // 3. Null assertion operator (!)\n  String nonNullableString = 'Hello World';\n  int sureLength = nonNullableString.length; // Valid (non-null)\n  print('Null assertion result: $sureLength');\n  \n  // 4. If-null operator (??=)\n  String? maybeNull;\n  maybeNull ??= 'Assigned if null';\n  print('If-null assignment result: $maybeNull');\n  \n  // 5. Example with null-check in conditional\n  List<String?> mixedList = ['A', null, 'C'];\n  for (var item in mixedList) {\n    if (item != null) {\n      print('Non-null item: ${item.toUpperCase()}');\n    }\n  }\n  \n  // 6. Example with null safety in function parameters\n  void printLength(String? text) {\n    final length = text?.length ?? 0;\n    print('Text length: $length');\n  }\n  \n  printLength(null);\n  printLength('Dart');\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a2d7 <+387>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a2db <+391>:\tmov    rsp,rbp\n   0x000000000008a2de <+394>:\tpop    rbp\n   0x000000000008a2df <+395>:\tret\n   0x000000000008a2e0 <+396>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2e7 <+403>:\tjmp    0x8a166 <main+18>\n   0x000000000008a2ec <+408>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a2f3 <+415>:\tjmp    0x8a1ce <main+122>\n   0x000000000008a2f8 <+0>:\tpush   rbp\n   0x000000000008a2f9 <+1>:\tmov    rbp,rsp\n   0x000000000008a2fc <+4>:\tsub    rsp,0x18\n   0x000000000008a300 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a304 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a308 <+16>:\tjbe    0x8a352 <printToConsole+90>\n   0x000000000008a30e <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a312 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a319 <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a31d <+37>:\tjne    0x8a32f <printToConsole+55>\n   0x000000000008a323 <+43>:\tmov    rdx,QWORD PTR [r15+0x817]\n   0x000000000008a32a <+50>:\tcall   0x831c8 <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Demonstrate null-check patterns using different Dart operators\n4\t  String? nullableString = null;\n5\t  \n6\t  // 1. Null-aware operator (??)\n7\t  String result1 = nullableString ?? 'Default Value';\n8\t  print('Null-aware operator result: $result1');\n   0x000000000008a154 <+0>:\tpush   rbp\n   0x000000000008a155 <+1>:\tmov    rbp,rsp\n   0x000000000008a158 <+4>:\tsub    rsp,0x28\n   0x000000000008a15c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a160 <+12>:\tjbe    0x8a2e0 <main+396>\n   0x000000000008a166 <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a16d <+25>:\tcall   0x8a35c <print>\n\n9\t  \n10\t  // 2. Null-aware access operator (?.)\n11\t  int? length = nullableString?.length;\n12\t  print('Null-aware access result: $length');\n   0x000000000008a172 <+30>:\tmov    rdi,QWORD PTR [r15+0x7bf]\n   0x000000000008a179 <+37>:\tcall   0x8a35c <print>\n\n13\t  \n14\t  // 3. Null assertion operator (!)\n15\t  String nonNullableString = 'Hello World';\n16\t  int sureLength = nonNullableString.length; // Valid (non-null)\n17\t  print('Null assertion result: $sureLength');\n   0x000000000008a17e <+42>:\tmov    rdi,QWORD PTR [r15+0x7c7]\n   0x000000000008a185 <+49>:\tcall   0x8a35c <print>\n\n18\t  \n19\t  // 4. If-null operator (??=)\n20\t  String? maybeNull;\n21\t  maybeNull ??= 'Assigned if null';\n22\t  print('If-null assignment result: $maybeNull');\n   0x000000000008a18a <+54>:\tmov    rdi,QWORD PTR [r15+0x7cf]\n   0x000000000008a191 <+61>:\tcall   0x8a35c <print>\n\n23\t  \n24\t  // 5. Example with null-check in conditional\n25\t  List<String?> mixedList = ['A', null, 'C'];\n26\t  for (var item in mixedList) {\n27\t    if (item != null) {\n28\t      print('Non-null item: ${item.toUpperCase()}');\n   0x000000000008a24e <+250>:\tmov    QWORD PTR [rbp-0x20],rax\n   0x000000000008a252 <+254>:\tmov    r11,QWORD PTR [r15+0x7ff]\n   0x000000000008a259 <+261>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a25d <+265>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a261 <+269>:\tmov    edx,DWORD PTR [rcx-0x1]\n   0x000000000008a264 <+272>:\tshr    edx,0xc\n   0x000000000008a267 <+275>:\tmov    QWORD PTR [rsp],rcx\n   0x000000000008a26b <+279>:\tmov    rcx,rdx\n   0x000000000008a26e <+282>:\tmov    rax,QWORD PTR [r14+0x58]\n   0x000000000008a272 <+286>:\tcall   QWORD PTR [rax+rcx*8+0x10]\n   0x000000000008a276 <+290>:\tmov    rdx,QWORD PTR [rbp-0x20]\n   0x000000000008a27a <+294>:\tlea    r13,[rdx+0x1f]\n   0x000000000008a27e <+298>:\tmov    QWORD PTR [r13+0x0],rax\n   0x000000000008a282 <+302>:\ttest   al,0x1\n   0x000000000008a284 <+304>:\tje     0x8a29d <main+329>\n   0x000000000008a286 <+306>:\tmov    r11b,BYTE PTR [rdx-0x1]\n   0x000000000008a28a <+310>:\tshr    r11d,0x2\n   0x000000000008a28e <+314>:\tand    r11d,DWORD PTR [r14+0x40]\n   0x000000000008a292 <+318>:\ttest   BYTE PTR [rax-0x1],r11b\n   0x000000000008a296 <+322>:\tje     0x8a29d <main+329>\n   0x000000000008a298 <+324>:\tcall   0x83284 <stub _iso_stub_ArrayWriteBarrierStub>\n   0x000000000008a29d <+329>:\tmov    r11,QWORD PTR [rbp-0x20]\n   0x000000000008a2a1 <+333>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a2a5 <+337>:\tcall   0x587bc <_StringBase._interpolate>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_52.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Object pattern implementation using Map patterns (Dart 3.0+)\n  final person = {\n    'name': 'Alice',\n    'age': 30,\n    'address': {\n      'city': 'London',\n      'postalCode': 'SW1A 1AA'\n    }\n  };\n\n  // Pattern matching with map destructuring\n  if (person case {\n    'name': String name,\n    'age': int age,\n    'address': {\n      'city': String city,\n      'postalCode': String code\n    }\n  }) {\n    print('Name: $name');\n    print('Age: $age');\n    print('City: $city');\n    print('Postal Code: $code');\n  } else {\n    print('Invalid person object structure');\n  }\n\n  // Switch expression with object patterns\n  final shape = {'type': 'circle', 'radius': 5.0};\n  \n  switch (shape) {\n    case {'type': 'circle', 'radius': double r}:\n      print('Circle area: ${3.14 * r * r}');\n    case {'type': 'square', 'side': double s}:\n      print('Square area: ${s * s}');\n    default:\n      print('Unknown shape');\n  }\n\n  // Record pattern matching\n  final (int x, int y) = (10, 20);\n  print('Coordinates: ($x, $y)');\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a298 <+104>:\tmov    r11,QWORD PTR [r15+0x7d7]\n   0x000000000008a29f <+111>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a2a3 <+115>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a2aa <+122>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x000000000008a2ae <+126>:\tmov    r11,QWORD PTR [r15+0x7e7]\n   0x000000000008a2b5 <+133>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a2b9 <+137>:\tmov    r11,QWORD PTR [r15+0x7ef]\n   0x000000000008a2c0 <+144>:\tmov    QWORD PTR [rax+0x2f],r11\n   0x000000000008a2c4 <+148>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a2cb <+155>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a2d0 <+160>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a2d4 <+164>:\tcall   0x68168 <new Map._fromLiteral>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_53.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example map with different value types\n  final Map<String, dynamic> sampleData = {\n    'name': 'Alice',\n    'age': 30,\n    'isStudent': false,\n    'grades': [85, 92, 78],\n    'address': {\n      'street': '123 Main St',\n      'city': 'Wonderland'\n    }\n  };\n\n  // Pattern matching on map structure\n  switch (sampleData) {\n    case {\n      'name': String name,\n      'age': int age,\n      'isStudent': bool isStudent,\n      'grades': List<int> grades,\n      'address': {\n        'street': String street,\n        'city': String city\n      }\n    }:\n      print('Complete profile:');\n      print('Name: $name, Age: $age, Student: $isStudent');\n      print('Grades: $grades');\n      print('Address: $street, $city');\n      break;\n    \n    case {'name': String name, 'age': int age}:\n      print('Basic info: $name, $age years old');\n      break;\n    \n    case {'name': String name}:\n      print('Name only: $name');\n      break;\n    \n    default:\n      print('Unknown data structure');\n  }\n\n  // Demonstrating nested pattern matching with guard clause\n  final Map<String, dynamic> testMap = {\n    'type': 'admin',\n    'permissions': ['read', 'write', 'delete']\n  };\n\n  if (testMap case {\n    'type': 'admin',\n    'permissions': List<String> perms\n  } when perms.contains('delete')) {\n    print('Admin with delete permissions detected');\n  }\n}", "assembly": "Dump of assembler code for function main:\n   0x000000000008a6cb <+71>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a6cf <+75>:\tmov    QWORD PTR [rax+0x17],rcx\n   0x000000000008a6d3 <+79>:\tmov    QWORD PTR [rax+0x1f],0x0\n   0x000000000008a6db <+87>:\tmov    rdx,QWORD PTR [rbp+0x10]\n   0x000000000008a6df <+91>:\tmov    QWORD PTR [rax+0xf],rdx\n   0x000000000008a6e3 <+95>:\tmov    rdx,QWORD PTR [rcx+0x7]\n   0x000000000008a6e7 <+99>:\tmov    QWORD PTR [rax+0x7],rdx\n   0x000000000008a6eb <+103>:\tmov    rsp,rbp\n   0x000000000008a6ee <+106>:\tpop    rbp\n   0x000000000008a6ef <+107>:\tret\n   0x000000000008a6f0 <+108>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a6f7 <+115>:\tjmp    0x8a696 <new ByteData+18>\n   0x000000000008a6f9:\tint3\n   0x000000000008a6fa:\tint3\n   0x000000000008a6fb:\tint3\n   0x000000000008a6fc <+0>:\tmov    r8d,0xa831c\n   0x000000000008a702 <+6>:\tjmp    0x84290 <stub _iso_stub_AllocateObjectStub>\n   0x000000000008a707:\tint3\n   0x000000000008a708 <+0>:\tpush   rbp\n   0x000000000008a709 <+1>:\tmov    rbp,rsp\n   0x000000000008a70c <+4>:\tsub    rsp,0x70\n   0x000000000008a710 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a714 <+12>:\tjbe    0x8b36f <main+3175>\n   0x000000000008a71a <+18>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a71e <+22>:\tmov    r10d,0x14\n   0x000000000008a724 <+28>:\tcall   0x85220 <stub _iso_stub_AllocateArrayStub>\n\nEnd of assembler dump.", "lang": "Dart"}
{"filename": "obscure_54.dart", "function": "main", "source": "@pragma('vm:entry-point')\nvoid main() {\n  // Example 1: Fixed-length list pattern matching\n  var list1 = [1, 2, 3];\n  switch (list1) {\n    case [int a, int b, int c]:\n      print('Fixed-length match: $a, $b, $c'); // Output: Fixed-length match: 1, 2, 3\n    default:\n      print('No match');\n  }\n\n  // Example 2: List with rest pattern\n  var list2 = [1, 2, 3, 4, 5];\n  if (list2 case [int first, int second, ...var rest]) {\n    print('First: $first, Second: $second, Rest: $rest'); // Output: First: 1, Second: 2, Rest: [3, 4, 5]\n  }\n\n  // Example 3: Nested list pattern\n  var list3 = [1, [2, 3], 4];\n  switch (list3) {\n    case [int a, [int b, int c], int d]:\n      print('Nested match: $a, [$b, $c], $d'); // Output: Nested match: 1, [2, 3], 4\n    default:\n      print('No nested match');\n  }\n\n  // Example 4: Pattern with type guard and wildcard\n  var list4 = ['hello', 42, true];\n  if (list4 case [String s, int _, ...]) {\n    print('String element: $s'); // Output: String element: hello\n  }\n\n  // Example 5: Failed pattern match\n  var list5 = [1];\n  switch (list5) {\n    case [int a, int b]:\n      print('Two elements: $a, $b');\n    default:\n      print('Failed match: List length != 2'); // Output: Failed match: List length != 2\n  }\n}", "assembly": "Dump of assembler code for function main:\n1\t@pragma('vm:entry-point')\n   0x000000000008a5a5 <+761>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008a5a9 <+765>:\tmov    rsp,rbp\n   0x000000000008a5ac <+768>:\tpop    rbp\n   0x000000000008a5ad <+769>:\tret\n   0x000000000008a5ae <+770>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008a5b5 <+777>:\tjmp    0x8a2be <main+18>\n   0x000000000008a5ba:\tint3\n   0x000000000008a5bb:\tint3\n   0x000000000008a5bc <+0>:\tpush   rbp\n   0x000000000008a5bd <+1>:\tmov    rbp,rsp\n   0x000000000008a5c0 <+4>:\tsub    rsp,0x18\n   0x000000000008a5c4 <+8>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x000000000008a5c8 <+12>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a5cc <+16>:\tjbe    0x8a616 <printToConsole+90>\n   0x000000000008a5d2 <+22>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x000000000008a5d6 <+26>:\tmov    rax,QWORD PTR [rax+0x5f8]\n   0x000000000008a5dd <+33>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x000000000008a5e1 <+37>:\tjne    0x8a5f3 <printToConsole+55>\n   0x000000000008a5e7 <+43>:\tmov    rdx,QWORD PTR [r15+0x837]\n   0x000000000008a5ee <+50>:\tcall   0x83320 <stub _iso_stub_InitLateStaticFieldStub>\n\n2\tvoid main() {\n3\t  // Example 1: Fixed-length list pattern matching\n4\t  var list1 = [1, 2, 3];\n5\t  switch (list1) {\n6\t    case [int a, int b, int c]:\n7\t      print('Fixed-length match: $a, $b, $c'); // Output: Fixed-length match: 1, 2, 3\n   0x000000000008a2ac <+0>:\tpush   rbp\n   0x000000000008a2ad <+1>:\tmov    rbp,rsp\n   0x000000000008a2b0 <+4>:\tsub    rsp,0x20\n   0x000000000008a2b4 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008a2b8 <+12>:\tjbe    0x8a5ae <main+770>\n   0x000000000008a2be <+18>:\tmov    rdi,QWORD PTR [r15+0x7b7]\n   0x000000000008a2c5 <+25>:\tcall   0x8a620 <print>\n\n8\t    default:\n9\t      print('No match');\n10\t  }\n11\t\n12\t  // Example 2: List with rest pattern\n13\t  var list2 = [1, 2, 3, 4, 5];\n14\t  if (list2 case [int first, int second, ...var rest]) {\n   0x000000000008a311 <+101>:\tmov    rcx,rax\n   0x000000000008a314 <+104>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a318 <+108>:\tmov    QWORD PTR [rcx+0x17],rax\n   0x000000000008a31c <+112>:\tmov    QWORD PTR [rcx+0xf],0xa\n   0x000000000008a324 <+120>:\tmov    rdi,rcx\n   0x000000000008a327 <+123>:\tmov    esi,0x2\n   0x000000000008a32c <+128>:\tmov    r10,QWORD PTR [r15+0x97]\n   0x000000000008a333 <+135>:\tcall   0x52dcc <List.sublist>\n   0x000000000008a338 <+140>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a33c <+144>:\tmov    r10d,0xc\n   0x000000000008a342 <+150>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a346 <+154>:\tcall   0x84dc4 <stub _iso_stub_AllocateArrayStub>\n\n15\t    print('First: $first, Second: $second, Rest: $rest'); // Output: First: 1, Second: 2, Rest: [3, 4, 5]\n   0x000000000008a34b <+159>:\tmov    r11,QWORD PTR [r15+0x7bf]\n   0x000000000008a352 <+166>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a356 <+170>:\tmov    QWORD PTR [rax+0x1f],0x2\n   0x000000000008a35e <+178>:\tmov    r11,QWORD PTR [r15+0x7c7]\n   0x000000000008a365 <+185>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a369 <+189>:\tmov    QWORD PTR [rax+0x2f],0x4\n   0x000000000008a371 <+197>:\tmov    r11,QWORD PTR [r15+0x7cf]\n   0x000000000008a378 <+204>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a37c <+208>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a380 <+212>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008a384 <+216>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a388 <+220>:\tcall   0x588f4 <_StringBase._interpolate>\n   0x000000000008a38d <+225>:\tmov    rdi,rax\n   0x000000000008a390 <+228>:\tcall   0x8a620 <print>\n\n16\t  }\n17\t\n18\t  // Example 3: Nested list pattern\n19\t  var list3 = [1, [2, 3], 4];\n20\t  switch (list3) {\n21\t    case [int a, [int b, int c], int d]:\n   0x000000000008a3c4 <+280>:\tmov    rbx,rax\n   0x000000000008a3c7 <+283>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x000000000008a3cb <+287>:\tmov    QWORD PTR [rbp-0x10],rbx\n   0x000000000008a3cf <+291>:\tmov    QWORD PTR [rbx+0x17],rax\n   0x000000000008a3d3 <+295>:\tmov    QWORD PTR [rbx+0xf],0x4\n   0x000000000008a3db <+303>:\tmov    rax,rbx\n   0x000000000008a3de <+306>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008a3e2 <+310>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x000000000008a3e6 <+314>:\tcmp    rax,QWORD PTR [r14+0x70]\n   0x000000000008a3ea <+318>:\tje     0x8a472 <main+454>\n   0x000000000008a3f0 <+324>:\ttest   al,0x1\n   0x000000000008a3f2 <+326>:\tje     0x8a472 <main+454>\n   0x000000000008a3f8 <+332>:\tmov    esi,DWORD PTR [rax-0x1]\n   0x000000000008a3fb <+335>:\tshr    esi,0xc\n   0x000000000008a3fe <+338>:\tmov    r9,QWORD PTR [r14+0x708]\n   0x000000000008a405 <+345>:\tmov    r9,QWORD PTR [r9+0x18]\n   0x000000000008a409 <+349>:\tmov    r9,QWORD PTR [r9+rsi*8]\n   0x000000000008a40d <+353>:\tmov    r9,QWORD PTR [r9+0x4f]\n   0x000000000008a411 <+357>:\tcmp    r9,QWORD PTR [r14+0x70]\n   0x000000000008a415 <+361>:\tje     0x8a472 <main+454>\n   0x000000000008a41b <+367>:\tmov    r9d,DWORD PTR [r9+0xf]\n   0x000000000008a41f <+371>:\tshr    r9,0x3\n   0x000000000008a423 <+375>:\tcmp    r9,0x1f5\n   0x000000000008a42a <+382>:\tje     0x8a47b <main+463>\n   0x000000000008a430 <+388>:\tmov    r9,QWORD PTR [r15+0x7d7]\n   0x000000000008a437 <+395>:\tmov    r11,QWORD PTR [r15+0x7df]\n   0x000000000008a43e <+402>:\tcall   QWORD PTR [r11+0x7]\n   0x000000000008a442 <+406>:\tcmp    r8,QWORD PTR [r14+0x70]\n   0x000000000008a446 <+410>:\tje     0x8a457 <main+427>\n   0x000000000008a448 <+412>:\ttest   r8b,0x10\n   0x000000000008a44c <+416>:\tje     0x8a47b <main+463>\n   0x000000000008a452 <+422>:\tjmp    0x8a472 <main+454>\n   0x000000000008a457 <+427>:\tmov    rbx,QWORD PTR [r15+0x7e7]\n   0x000000000008a45e <+434>:\tmov    r9,QWORD PTR [r15+0x7ef]\n   0x000000000008a465 <+441>:\tmov    r11,QWORD PTR [r15+0x7f7]\n   0x000000000008a46c <+448>:\tcall   QWORD PTR [r11+0x7]\n   0x000000000008a470 <+452>:\tjmp    0x8a47f <main+467>\n   0x000000000008a472 <+454>:\tmov    rax,QWORD PTR [r14+0x80]\n   0x000000000008a479 <+461>:\tjmp    0x8a47f <main+467>\n   0x000000000008a47b <+463>:\tmov    rax,QWORD PTR [r14+0x78]\n   0x000000000008a47f <+467>:\ttest   al,0x10\n   0x000000000008a481 <+469>:\tjne    0x8a581 <main+725>\n   0x000000000008a487 <+475>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a48b <+479>:\tmov    QWORD PTR [rsp],r11\n   0x000000000008a48f <+483>:\tcall   0x6ff7c <_CompileTimeError.toString>\n   0x000000000008a494 <+488>:\tcmp    rax,0x4\n   0x000000000008a498 <+492>:\tjne    0x8a581 <main+725>\n   0x000000000008a49e <+498>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a4a2 <+502>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a4a7 <+507>:\tmov    QWORD PTR [rsp],0x0\n   0x000000000008a4af <+515>:\tcall   0x81960 <List.[]>\n   0x000000000008a4b4 <+520>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008a4b8 <+524>:\ttest   al,0x1\n   0x000000000008a4ba <+526>:\tmov    ecx,0x3c\n   0x000000000008a4bf <+531>:\tje     0x8a4c7 <main+539>\n   0x000000000008a4c1 <+533>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a4c4 <+536>:\tshr    ecx,0xc\n   0x000000000008a4c7 <+539>:\tlea    rdx,[rcx-0x3c]\n   0x000000000008a4cb <+543>:\tcmp    rdx,0x1\n   0x000000000008a4cf <+547>:\tja     0x8a581 <main+725>\n   0x000000000008a4d5 <+553>:\tmov    r11,QWORD PTR [rbp-0x10]\n   0x000000000008a4d9 <+557>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008a4de <+562>:\tmov    QWORD PTR [rsp],0x2\n   0x000000000008a4e6 <+570>:\tcall   0x81960 <List.[]>\n   0x000000000008a4eb <+575>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x000000000008a4ef <+579>:\ttest   al,0x1\n   0x000000000008a4f1 <+581>:\tmov    ecx,0x3c\n   0x000000000008a4f6 <+586>:\tje     0x8a4fe <main+594>\n   0x000000000008a4f8 <+588>:\tmov    ecx,DWORD PTR [rax-0x1]\n   0x000000000008a4fb <+591>:\tshr    ecx,0xc\n   0x000000000008a4fe <+594>:\tlea    rdx,[rcx-0x3c]\n   0x000000000008a502 <+598>:\tcmp    rdx,0x1\n   0x000000000008a506 <+602>:\tja     0x8a581 <main+725>\n   0x000000000008a50c <+608>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a510 <+612>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x000000000008a514 <+616>:\tmov    r10d,0x10\n   0x000000000008a51a <+622>:\tcall   0x84dc4 <stub _iso_stub_AllocateArrayStub>\n\n22\t      print('Nested match: $a, [$b, $c], $d'); // Output: Nested match: 1, [2, 3], 4\n   0x000000000008a51f <+627>:\tmov    r11,QWORD PTR [r15+0x7ff]\n   0x000000000008a526 <+634>:\tmov    QWORD PTR [rax+0x17],r11\n   0x000000000008a52a <+638>:\tmov    QWORD PTR [rax+0x1f],0x2\n   0x000000000008a532 <+646>:\tmov    r11,QWORD PTR [r15+0x807]\n   0x000000000008a539 <+653>:\tmov    QWORD PTR [rax+0x27],r11\n   0x000000000008a53d <+657>:\tmov    rcx,QWORD PTR [rbp-0x8]\n   0x000000000008a541 <+661>:\tmov    QWORD PTR [rax+0x2f],rcx\n   0x000000000008a545 <+665>:\tmov    r11,QWORD PTR [r15+0x80f]\n   0x000000000008a54c <+672>:\tmov    QWORD PTR [rax+0x37],r11\n   0x000000000008a550 <+676>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x000000000008a554 <+680>:\tmov    QWORD PTR [rax+0x3f],rcx\n   0x000000000008a558 <+684>:\tmov    r11,QWORD PTR [r15+0x817]\n   0x000000000008a55f <+691>:\tmov    QWORD PTR [rax+0x47],r11\n   0x000000000008a563 <+695>:\tmov    QWORD PTR [rax+0x4f],0x8\n   0x000000000008a56b <+703>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008a56f <+707>:\tcall   0x588f4 <_StringBase._interpolate>\n   0x000000000008a574 <+712>:\tmov    rdi,rax\n   0x000000000008a577 <+715>:\tcall   0x8a620 <print>\n\n23\t    default:\n24\t      print('No nested match');\n25\t  }\n26\t\n27\t  // Example 4: Pattern with type guard and wildcard\n28\t  var list4 = ['hello', 42, true];\n29\t  if (list4 case [String s, int _, ...]) {\n30\t    print('String element: $s'); // Output: String element: hello\n   0x000000000008a58d <+737>:\tmov    rdi,QWORD PTR [r15+0x827]\n   0x000000000008a594 <+744>:\tcall   0x8a620 <print>\n\nEnd of assembler dump.", "lang": "Dart"}
